uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(uint64_t a1)
{
  const char *v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t result;
  int v10;
  int v11;
  std::string *v12;
  int v13;
  int v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  char v21;
  int v22;
  unsigned int codepoint;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  const char *v28;
  const char *v29;
  unint64_t v30;
  const char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 32))
  {
    if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1) == 239)
    {
      if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1) != 187
        || nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1) != 191)
      {
        v2 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
        goto LABEL_30;
      }
    }
    else
    {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget(a1);
    }
  }
  do
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
    v3 = *(_DWORD *)(a1 + 20);
  }
  while (v3 <= 0x20 && ((1 << v3) & 0x100002600) != 0);
  if (*(_BYTE *)(a1 + 16))
  {
    while (1)
    {
      if (v3 != 47)
        goto LABEL_33;
      v5 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
      if (v5 != 47)
        break;
      do
      {
        do
          v7 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1)
             + 1;
        while (v7 >= 0xF);
      }
      while (((0x4803u >> v7) & 1) == 0);
      do
      {
LABEL_23:
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
        v3 = *(_DWORD *)(a1 + 20);
      }
      while (v3 <= 0x20 && ((1 << v3) & 0x100002600) != 0);
      if (!*(_BYTE *)(a1 + 16))
        goto LABEL_33;
    }
    if (v5 == 42)
    {
      do
      {
        while (1)
        {
          v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
          if (v6 != 42)
            break;
          if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1) == 47)
            goto LABEL_23;
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget(a1);
        }
      }
      while ((v6 + 1) >= 2);
      v2 = "invalid comment; missing closing '*/'";
    }
    else
    {
      v2 = "invalid comment; expecting '/' or '*' after '/'";
    }
    goto LABEL_30;
  }
LABEL_33:
  if (v3 > 90)
  {
    if (v3 <= 109)
    {
      switch(v3)
      {
        case '[':
          return 8;
        case ']':
          return 10;
        case 'f':
          v17 = 0;
          while (byte_1C230BB63[v17 + 1] == nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1))
          {
            ++v17;
            result = 2;
            if (v17 == 4)
              return result;
          }
          break;
      }
    }
    else if (v3 > 122)
    {
      if (v3 == 123)
        return 9;
      if (v3 == 125)
        return 11;
    }
    else if (v3 == 110)
    {
      LODWORD(v33) = 1819047278;
      v25 = 1;
      while (*((unsigned __int8 *)&v33 + v25) == nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1))
      {
        if (++v25 == 4)
          return 3;
      }
    }
    else if (v3 == 116)
    {
      LODWORD(v33) = 1702195828;
      v16 = 1;
      while (*((unsigned __int8 *)&v33 + v16) == nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1))
      {
        if (++v16 == 4)
          return 1;
      }
    }
LABEL_127:
    v2 = "invalid literal";
    goto LABEL_30;
  }
  switch(v3)
  {
    case '"':
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::reset(a1);
      while (2)
      {
        v19 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1)
            + 1;
        result = 4;
        v2 = "invalid string: missing closing quote";
        switch(v19)
        {
          case 0:
            goto LABEL_30;
          case 1:
            v2 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
            goto LABEL_30;
          case 2:
            v2 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
            goto LABEL_30;
          case 3:
            v2 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
            goto LABEL_30;
          case 4:
            v2 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
            goto LABEL_30;
          case 5:
            v2 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
            goto LABEL_30;
          case 6:
            v2 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
            goto LABEL_30;
          case 7:
            v2 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
            goto LABEL_30;
          case 8:
            v2 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
            goto LABEL_30;
          case 9:
            v2 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
            goto LABEL_30;
          case 10:
            v2 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
            goto LABEL_30;
          case 11:
            v2 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
            goto LABEL_30;
          case 12:
            v2 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
            goto LABEL_30;
          case 13:
            v2 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
            goto LABEL_30;
          case 14:
            v2 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
            goto LABEL_30;
          case 15:
            v2 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
            goto LABEL_30;
          case 16:
            v2 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
            goto LABEL_30;
          case 17:
            v2 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
            goto LABEL_30;
          case 18:
            v2 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
            goto LABEL_30;
          case 19:
            v2 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
            goto LABEL_30;
          case 20:
            v2 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
            goto LABEL_30;
          case 21:
            v2 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
            goto LABEL_30;
          case 22:
            v2 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
            goto LABEL_30;
          case 23:
            v2 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
            goto LABEL_30;
          case 24:
            v2 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
            goto LABEL_30;
          case 25:
            v2 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
            goto LABEL_30;
          case 26:
            v2 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
            goto LABEL_30;
          case 27:
            v2 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
            goto LABEL_30;
          case 28:
            v2 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
            goto LABEL_30;
          case 29:
            v2 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
            goto LABEL_30;
          case 30:
            v2 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
            goto LABEL_30;
          case 31:
            v2 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
            goto LABEL_30;
          case 32:
            v2 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
            goto LABEL_30;
          case 33:
          case 34:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 58:
          case 59:
          case 60:
          case 61:
          case 62:
          case 63:
          case 64:
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
          case 91:
          case 92:
          case 94:
          case 95:
          case 96:
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
          case 103:
          case 104:
          case 105:
          case 106:
          case 107:
          case 108:
          case 109:
          case 110:
          case 111:
          case 112:
          case 113:
          case 114:
          case 115:
          case 116:
          case 117:
          case 118:
          case 119:
          case 120:
          case 121:
          case 122:
          case 123:
          case 124:
          case 125:
          case 126:
          case 127:
          case 128:
            v20 = *(_DWORD *)(a1 + 20);
            goto LABEL_81;
          case 35:
            return result;
          case 93:
            v22 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
            v2 = "invalid string: forbidden character after backslash";
            if (v22 <= 97)
            {
              switch(v22)
              {
                case '"':
                  LOBYTE(v20) = 34;
                  goto LABEL_81;
                case '/':
                  LOBYTE(v20) = 47;
                  goto LABEL_81;
                case '\\':
                  LOBYTE(v20) = 92;
LABEL_81:
                  std::string::push_back((std::string *)(a1 + 80), v20);
                  continue;
              }
LABEL_30:
              *(_QWORD *)(a1 + 104) = v2;
              return 14;
            }
            break;
          case 195:
          case 196:
          case 197:
          case 198:
          case 199:
          case 200:
          case 201:
          case 202:
          case 203:
          case 204:
          case 205:
          case 206:
          case 207:
          case 208:
          case 209:
          case 210:
          case 211:
          case 212:
          case 213:
          case 214:
          case 215:
          case 216:
          case 217:
          case 218:
          case 219:
          case 220:
          case 221:
          case 222:
          case 223:
          case 224:
            *(_QWORD *)&v33 = 0xBF00000080;
            v21 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range(a1, &v33, 2);
            goto LABEL_84;
          case 225:
            v33 = xmmword_1C230B500;
            v21 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range(a1, &v33, 4);
            goto LABEL_84;
          case 226:
          case 227:
          case 228:
          case 229:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 236:
          case 237:
          case 239:
          case 240:
            v33 = xmmword_1C230B4F0;
            v21 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range(a1, &v33, 4);
            goto LABEL_84;
          case 238:
            v33 = xmmword_1C230B4E0;
            v21 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range(a1, &v33, 4);
            goto LABEL_84;
          case 241:
            v34 = 0xBF00000080;
            v33 = xmmword_1C230BB68;
            v21 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range(a1, &v33, 6);
            goto LABEL_84;
          case 242:
          case 243:
          case 244:
            v34 = 0xBF00000080;
            v33 = xmmword_1C230BB80;
            v21 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range(a1, &v33, 6);
            goto LABEL_84;
          case 245:
            v34 = 0xBF00000080;
            v33 = xmmword_1C230BB98;
            v21 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range(a1, &v33, 6);
LABEL_84:
            if ((v21 & 1) == 0)
              return 14;
            continue;
          default:
            v2 = "invalid string: ill-formed UTF-8 byte";
            goto LABEL_30;
        }
        break;
      }
      switch(v22)
      {
        case 'n':
          LOBYTE(v20) = 10;
          goto LABEL_81;
        case 'o':
        case 'p':
        case 'q':
        case 's':
          goto LABEL_30;
        case 'r':
          LOBYTE(v20) = 13;
          goto LABEL_81;
        case 't':
          LOBYTE(v20) = 9;
          goto LABEL_81;
        case 'u':
          codepoint = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint((int64x2_t *)a1);
          v20 = codepoint;
          if (codepoint == -1)
            goto LABEL_193;
          if ((codepoint & 0xFFFFFC00) == 0xD800)
          {
            if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1) != 92
              || nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1) != 117)
            {
              goto LABEL_194;
            }
            v24 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint((int64x2_t *)a1);
            if (v24 == -1)
            {
LABEL_193:
              v2 = "invalid string: '\\u' must be followed by 4 hex digits";
              goto LABEL_30;
            }
            if (v24 >> 10 != 55)
            {
LABEL_194:
              v2 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
              goto LABEL_30;
            }
            v20 = v24 + (v20 << 10) - 56613888;
          }
          else
          {
            if ((codepoint & 0xFFFFFC00) == 0xDC00)
            {
              v2 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
              goto LABEL_30;
            }
            if ((int)codepoint <= 127)
              goto LABEL_81;
            if (codepoint <= 0x7FF)
            {
              std::string::push_back((std::string *)(a1 + 80), (codepoint >> 6) | 0xC0);
              goto LABEL_113;
            }
            if (!HIWORD(codepoint))
            {
              std::string::push_back((std::string *)(a1 + 80), (codepoint >> 12) | 0xE0);
              std::string::push_back((std::string *)(a1 + 80), (v20 >> 6) & 0x3F | 0x80);
              LOBYTE(v20) = v20 & 0x3F | 0x80;
              goto LABEL_81;
            }
          }
          std::string::push_back((std::string *)(a1 + 80), (v20 >> 18) | 0xF0);
          std::string::push_back((std::string *)(a1 + 80), (v20 >> 12) & 0x3F | 0x80);
          std::string::push_back((std::string *)(a1 + 80), (v20 >> 6) & 0x3F | 0x80);
LABEL_113:
          LOBYTE(v20) = v20 & 0x3F | 0x80;
          goto LABEL_81;
        default:
          if (v22 == 98)
          {
            LOBYTE(v20) = 8;
            goto LABEL_81;
          }
          if (v22 != 102)
            goto LABEL_30;
          LOBYTE(v20) = 12;
          goto LABEL_81;
      }
    case '#':
    case '$':
    case '%':
    case '&':
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '/':
      goto LABEL_127;
    case ',':
      return 13;
    case '-':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::reset(a1);
      v10 = *(_DWORD *)(a1 + 20);
      if ((v10 - 49) >= 9)
      {
        if (v10 == 48)
        {
          std::string::push_back((std::string *)(a1 + 80), 48);
          v11 = 5;
        }
        else
        {
          if (v10 == 45)
            std::string::push_back((std::string *)(a1 + 80), 45);
          v18 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
          if ((v18 - 49) < 9)
          {
            v10 = *(_DWORD *)(a1 + 20);
            v11 = 6;
            goto LABEL_37;
          }
          if (v18 != 48)
          {
            v2 = "invalid number; expected digit after '-'";
            goto LABEL_30;
          }
          std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
          v11 = 6;
        }
        v26 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
        if (v26 == 101 || v26 == 69)
        {
          v12 = (std::string *)(a1 + 80);
          goto LABEL_43;
        }
        if (v26 != 46)
          goto LABEL_145;
        v12 = (std::string *)(a1 + 80);
LABEL_136:
        std::string::push_back(v12, *(_BYTE *)(a1 + 136));
        if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1)
           - 48 > 9)
        {
          v2 = "invalid number; expected digit after '.'";
          goto LABEL_30;
        }
        v12 = (std::string *)(a1 + 80);
        do
        {
          std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
          v27 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
        }
        while ((v27 - 48) < 0xA);
        if (v27 != 101 && v27 != 69)
        {
LABEL_141:
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget(a1);
          *(_QWORD *)&v33 = 0;
          *__error() = 0;
          goto LABEL_142;
        }
LABEL_43:
        std::string::push_back(v12, *(_BYTE *)(a1 + 20));
        v14 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
        if ((v14 - 48) >= 0xA)
        {
          if (v14 != 45 && v14 != 43)
          {
            v2 = "invalid number; expected '+', '-', or digit after exponent";
            goto LABEL_30;
          }
          v15 = (std::string *)(a1 + 80);
          std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
          if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1)
             - 48 >= 0xA)
          {
            v2 = "invalid number; expected digit after exponent sign";
            goto LABEL_30;
          }
        }
        else
        {
          v15 = (std::string *)(a1 + 80);
        }
        std::string::push_back(v15, *(_BYTE *)(a1 + 20));
        while (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1)
              - 48 <= 9)
          std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
        goto LABEL_141;
      }
      v11 = 5;
LABEL_37:
      v12 = (std::string *)(a1 + 80);
      while (1)
      {
        std::string::push_back((std::string *)(a1 + 80), v10);
        v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
        if ((v13 - 48) >= 0xA)
          break;
        v10 = *(_DWORD *)(a1 + 20);
      }
      if (v13 == 46)
        goto LABEL_136;
      if (v13 == 69 || v13 == 101)
        goto LABEL_43;
LABEL_145:
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget(a1);
      *(_QWORD *)&v33 = 0;
      *__error() = 0;
      if (v11 == 6)
      {
        v31 = (const char *)(a1 + 80);
        if (*(char *)(a1 + 103) < 0)
          v31 = *(const char **)v31;
        v32 = strtoll(v31, (char **)&v33, 10);
        if (!*__error())
        {
          *(_QWORD *)(a1 + 112) = v32;
          return 6;
        }
      }
      else
      {
        v29 = (const char *)(a1 + 80);
        if (*(char *)(a1 + 103) < 0)
          v29 = *(const char **)v29;
        v30 = strtoull(v29, (char **)&v33, 10);
        if (!*__error())
        {
          *(_QWORD *)(a1 + 120) = v30;
          return 5;
        }
      }
LABEL_142:
      v28 = (const char *)(a1 + 80);
      if (*(char *)(a1 + 103) < 0)
        v28 = *(const char **)v28;
      *(double *)(a1 + 128) = strtod(v28, (char **)&v33);
      return 7;
    case ':':
      return 12;
    default:
      if ((v3 + 1) >= 2)
        goto LABEL_127;
      return 15;
  }
}

void sub_1C2198594(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(int64x2_t *a1)
{
  __int32 v2;
  _QWORD *v3;
  unsigned __int8 *v4;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  char *v14;
  _BYTE *v15;
  char v16;
  uint64_t result;
  uint64_t v18;
  std::ios_base *v19;

  a1[2] = vaddq_s64(a1[2], vdupq_n_s64(1uLL));
  if (a1[1].i8[8])
  {
    a1[1].i8[8] = 0;
    v2 = a1[1].i32[1];
  }
  else
  {
    v3 = (_QWORD *)a1->i64[1];
    v4 = (unsigned __int8 *)v3[3];
    if (v4 == (unsigned __int8 *)v3[4])
    {
      v2 = (*(uint64_t (**)(_QWORD *))(*v3 + 80))(v3);
      if (v2 == -1)
      {
        v19 = (std::ios_base *)(a1->i64[0] + *(_QWORD *)(*(_QWORD *)a1->i64[0] - 24));
        std::ios_base::clear(v19, v19->__rdstate_ | 2);
      }
    }
    else
    {
      v3[3] = v4 + 1;
      v2 = *v4;
    }
    a1[1].i32[1] = v2;
  }
  if (v2 == -1)
    return 0xFFFFFFFFLL;
  v6 = (_BYTE *)a1[4].i64[0];
  v5 = a1[4].u64[1];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[3].i64[1];
    v9 = &v6[-v8];
    v10 = (uint64_t)&v6[-v8 + 1];
    if (v10 < 0)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v11 = v5 - v8;
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (uint64_t)operator new(v12);
    else
      v13 = 0;
    v14 = (char *)(v13 + v12);
    v9[v13] = v2;
    v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (_BYTE *)v8)
    {
      v13 += (uint64_t)v9;
    }
    else
    {
      v15 = &v6[~v8];
      do
      {
        v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (_BYTE *)v8);
      v6 = (_BYTE *)a1[3].i64[1];
    }
    a1[3].i64[1] = v13;
    a1[4].i64[0] = v7;
    a1[4].i64[1] = (uint64_t)v14;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = v2;
    v7 = (uint64_t)(v6 + 1);
  }
  a1[4].i64[0] = v7;
  result = a1[1].u32[1];
  if ((_DWORD)result == 10)
  {
    v18 = a1[3].i64[0] + 1;
    a1[2].i64[1] = 0;
    a1[3].i64[0] = v18;
  }
  return result;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::reset(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  unint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;

  if (*(char *)(a1 + 103) < 0)
  {
    **(_BYTE **)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_BYTE *)(a1 + 103) = 0;
  }
  v2 = *(_BYTE **)(a1 + 56);
  *(_QWORD *)(a1 + 64) = v2;
  v3 = *(_DWORD *)(a1 + 20);
  v4 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v2 >= v4)
  {
    v6 = v4 - (_QWORD)v2;
    v7 = 2 * v6;
    if (2 * v6 <= 1)
      v7 = 1;
    if (v6 >= 0x3FFFFFFFFFFFFFFFLL)
      v8 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v8 = v7;
    v9 = operator new(v8);
    *v9 = v3;
    v5 = v9 + 1;
    *(_QWORD *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = v9 + 1;
    *(_QWORD *)(a1 + 72) = &v9[v8];
    if (v2)
      operator delete(v2);
  }
  else
  {
    *v2 = v3;
    v5 = v2 + 1;
  }
  *(_QWORD *)(a1 + 64) = v5;
}

char *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, __int128 **a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v5 = (void **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x48uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    v13 = 0;
    v8 = (std::string *)(v6 + 32);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      *((_QWORD *)v6 + 6) = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[56] = 0;
    *((_QWORD *)v6 + 8) = 0;
    v13 = 1;
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at(a1, v14, v7, (uint64_t *)v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_1C21988B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t *std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)(result + 40);
  v2 = *(_QWORD *)(result + 40);
  *(_BYTE *)(result + 24) = 1;
  --*(_QWORD *)(result + 32);
  if (v2 || (v1 = (_QWORD *)(result + 48), (v2 = *(_QWORD *)(result + 48)) != 0))
    *v1 = v2 - 1;
  if (*(_DWORD *)(result + 20) != -1)
    --*(_QWORD *)(result + 64);
  return result;
}

void std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(*((_QWORD *)a1 + 1));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a1 + 64, a1[56]);
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(uint64_t **a1, int a2)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void **v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t i;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void **v29;
  void **v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t *v34;
  void *v35;
  void *v36;
  unsigned __int8 v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void **v42;
  void **v43;
  void **v44;
  void **v45;
  unint64_t *v46;

  v39 = 0;
  v40 = 0;
  v41 = 0;
  v3 = a2 - 1;
  if (a2 == 1)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v39, (*a1)[2]);
    v4 = (uint64_t)(*a1 + 1);
    v5 = (_QWORD *)**a1;
    if (v5 != (_QWORD *)v4)
    {
      v6 = v40;
      do
      {
        if (v6 >= v41)
        {
          v7 = (uint64_t)(v6 - v39) >> 4;
          if ((unint64_t)(v7 + 1) >> 60)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v8 = (uint64_t)(v41 - v39) >> 3;
          if (v8 <= v7 + 1)
            v8 = v7 + 1;
          if (v41 - v39 >= 0x7FFFFFFFFFFFFFF0)
            v9 = 0xFFFFFFFFFFFFFFFLL;
          else
            v9 = v8;
          v46 = &v41;
          v10 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v9);
          v11 = &v10[2 * v7];
          v42 = v10;
          v43 = v11;
          v45 = &v10[2 * v12];
          *(_BYTE *)v11 = *((_BYTE *)v5 + 56);
          v11[1] = (void *)v5[8];
          *((_BYTE *)v5 + 56) = 0;
          v5[8] = 0;
          v44 = v11 + 2;
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(&v39, &v42);
          v6 = v40;
          std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v42);
        }
        else
        {
          *(_BYTE *)v6 = *((_BYTE *)v5 + 56);
          *(_QWORD *)(v6 + 8) = v5[8];
          *((_BYTE *)v5 + 56) = 0;
          v5[8] = 0;
          v6 += 16;
        }
        v40 = v6;
        v13 = (_QWORD *)v5[1];
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (_QWORD *)v5[2];
            v15 = *v14 == (_QWORD)v5;
            v5 = v14;
          }
          while (!v15);
        }
        v5 = v14;
      }
      while (v14 != (_QWORD *)v4);
    }
  }
  else if (a2 == 2)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v39, ((*a1)[1] - **a1) >> 4);
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>(**a1, (*a1)[1], &v39);
  }
  for (i = v40; v39 != v40; i = v40)
  {
    v17 = *(unsigned __int8 *)(i - 16);
    v37 = *(_BYTE *)(i - 16);
    v18 = *(uint64_t **)(i - 8);
    v38 = v18;
    *(_BYTE *)(i - 16) = 0;
    *(_QWORD *)(i - 8) = 0;
    v19 = v40 - 16;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v40 - 8, *(unsigned __int8 *)(v40 - 16));
    v40 = v19;
    if ((_DWORD)v17 == 1)
    {
      v24 = v18 + 1;
      v25 = *v18;
      if ((uint64_t *)*v18 == v18 + 1)
      {
        v17 = 1;
      }
      else
      {
        do
        {
          if (v19 >= v41)
          {
            v26 = (uint64_t)(v19 - v39) >> 4;
            if ((unint64_t)(v26 + 1) >> 60)
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            v27 = (uint64_t)(v41 - v39) >> 3;
            if (v27 <= v26 + 1)
              v27 = v26 + 1;
            if (v41 - v39 >= 0x7FFFFFFFFFFFFFF0)
              v28 = 0xFFFFFFFFFFFFFFFLL;
            else
              v28 = v27;
            v46 = &v41;
            v29 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v28);
            v30 = &v29[2 * v26];
            v42 = v29;
            v43 = v30;
            v45 = &v29[2 * v31];
            *(_BYTE *)v30 = *(_BYTE *)(v25 + 56);
            v30[1] = *(void **)(v25 + 64);
            *(_BYTE *)(v25 + 56) = 0;
            *(_QWORD *)(v25 + 64) = 0;
            v44 = v30 + 2;
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(&v39, &v42);
            v19 = v40;
            std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v42);
          }
          else
          {
            *(_BYTE *)v19 = *(_BYTE *)(v25 + 56);
            *(_QWORD *)(v19 + 8) = *(_QWORD *)(v25 + 64);
            *(_BYTE *)(v25 + 56) = 0;
            *(_QWORD *)(v25 + 64) = 0;
            v19 += 16;
          }
          v40 = v19;
          v32 = *(_QWORD **)(v25 + 8);
          if (v32)
          {
            do
            {
              v33 = v32;
              v32 = (_QWORD *)*v32;
            }
            while (v32);
          }
          else
          {
            do
            {
              v33 = *(_QWORD **)(v25 + 16);
              v15 = *v33 == v25;
              v25 = (uint64_t)v33;
            }
            while (!v15);
          }
          v25 = (uint64_t)v33;
        }
        while (v33 != v24);
        v18 = v38;
        v17 = v37;
      }
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((char *)v18[1]);
      *v18 = (uint64_t)(v18 + 1);
      v18[2] = 0;
      v18[1] = 0;
    }
    else if ((_DWORD)v17 == 2)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>(*v18, v18[1], &v39);
      v21 = *v18;
      v20 = v18[1];
      if (v20 != *v18)
      {
        v22 = v20 - 8;
        do
        {
          v23 = v22 - 8;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v22, *(unsigned __int8 *)(v22 - 8));
          v22 -= 16;
        }
        while (v23 != v21);
      }
      v18[1] = v21;
      v17 = 2;
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v38, v17);
  }
  switch(v3)
  {
    case 0:
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((char *)(*a1)[1]);
      goto LABEL_56;
    case 1:
      v42 = (void **)*a1;
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v42);
      goto LABEL_56;
    case 2:
      v34 = *a1;
      if ((*((char *)*a1 + 23) & 0x80000000) == 0)
        goto LABEL_57;
      v35 = (void *)*v34;
      break;
    case 7:
      v34 = *a1;
      v36 = (void *)**a1;
      if (!v36)
        goto LABEL_57;
      v34[1] = (uint64_t)v36;
      v35 = v36;
      break;
    default:
      goto LABEL_58;
  }
  operator delete(v35);
LABEL_56:
  v34 = *a1;
LABEL_57:
  operator delete(v34);
LABEL_58:
  v42 = (void **)&v39;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v42);
}

std::string *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(uint64_t a1)
{
  std::string *v2;
  std::string *v3;

  v2 = (std::string *)operator new(0x18uLL);
  v3 = v2;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  return v3;
}

void sub_1C2198F64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (a2 > (result[2] - *result) >> 4)
  {
    if (a2 >> 60)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 16 * v4;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(unsigned __int8 **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t **v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t **v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned __int8 v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  _QWORD v32[2];
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v11 = *a2;
    v30 = *a2;
    v12 = (uint64_t **)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v31, v11);
    v13 = (uint64_t)*a1;
    v14 = **a1;
    *(_BYTE *)v13 = v30;
    v30 = v14;
    v15 = *(_QWORD *)(v13 + 8);
    *(_QWORD *)(v13 + 8) = v31;
    v31 = v15;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v12, v14);
    return (uint64_t)*a1;
  }
  else
  {
    v5 = *((_QWORD *)v4 - 1);
    if (*(_BYTE *)v5 == 2)
    {
      v6 = *(uint64_t **)(v5 + 8);
      v7 = v6[1];
      v8 = v6[2];
      if (v7 >= v8)
      {
        v21 = (uint64_t)(v7 - *v6) >> 4;
        if ((unint64_t)(v21 + 1) >> 60)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v22 = v8 - *v6;
        v23 = v22 >> 3;
        if (v22 >> 3 <= (unint64_t)(v21 + 1))
          v23 = v21 + 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
          v24 = 0xFFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        v35 = v6 + 2;
        if (v24)
          v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v24);
        else
          v25 = 0;
        v26 = v24 + 16 * v21;
        v32[0] = v24;
        v32[1] = v26;
        v33 = v26;
        v34 = v24 + 16 * v25;
        v27 = *a2;
        *(_BYTE *)v26 = v27;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value((_QWORD *)(v26 + 8), v27);
        v33 += 16;
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(v6, v32);
        v10 = v6[1];
        std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v32);
      }
      else
      {
        v9 = *a2;
        *(_BYTE *)v7 = v9;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value((_QWORD *)(v7 + 8), v9);
        v10 = v7 + 16;
        v6[1] = v7 + 16;
      }
      v6[1] = v10;
      return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      v28 = *a2;
      v17 = (uint64_t **)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v29, *a2);
      v18 = a1[4];
      v19 = *v18;
      *v18 = v28;
      v20 = *((_QWORD *)v18 + 1);
      *((_QWORD *)v18 + 1) = v29;
      v29 = v20;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v17, v19);
      return (uint64_t)a1[4];
    }
  }
}

void sub_1C21991AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(_QWORD *a1, int a2)
{
  _QWORD *v3;
  _QWORD *v4;

  switch(a2)
  {
    case 1:
      v3 = operator new(0x18uLL);
      v3[2] = 0;
      v3[1] = 0;
      *v3 = v3 + 1;
      goto LABEL_8;
    case 2:
      v3 = operator new(0x18uLL);
      v3[1] = 0;
      v3[2] = 0;
      *v3 = 0;
      goto LABEL_8;
    case 3:
      v4 = operator new(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v4, "");
      *a1 = v4;
      return a1;
    case 4:
      *(_BYTE *)a1 = 0;
      return a1;
    case 8:
      v3 = operator new(0x20uLL);
      v3[1] = 0;
      v3[2] = 0;
      *v3 = 0;
      *((_WORD *)v3 + 12) = 0;
LABEL_8:
      *a1 = v3;
      break;
    default:
      *a1 = 0;
      break;
  }
  return a1;
}

void sub_1C2199288(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<BOOL>::push_back(uint64_t *a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1[1];
  v5 = a1[2];
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v4 <= 0x3FFFFFFFFFFFFFFELL)
      v7 = v6;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve((uint64_t)a1, v7);
    v4 = a1[1];
  }
  a1[1] = v4 + 1;
  v8 = *a1;
  v9 = v4 >> 6;
  v10 = 1 << v4;
  if (*a2)
    v11 = *(_QWORD *)(v8 + 8 * v9) | v10;
  else
    v11 = *(_QWORD *)(v8 + 8 * v9) & ~v10;
  *(_QWORD *)(v8 + 8 * v9) = v11;
}

void nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(unsigned __int8 **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD v29[5];

  v3 = a1[2];
  if (a1[1] == v3)
  {
    v10 = (uint64_t **)&v28;
    v11 = *a2;
    v12 = (uint64_t)*a1;
    v13 = **a1;
    *(_BYTE *)v12 = 4;
    v27 = v13;
    v14 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(v12 + 8) = v11;
    v28 = v14;
LABEL_7:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v10, v13);
    return;
  }
  v4 = *((_QWORD *)v3 - 1);
  if (*(_BYTE *)v4 != 2)
  {
    v10 = (uint64_t **)&v26;
    v15 = *a2;
    v16 = a1[4];
    v13 = *v16;
    *v16 = 4;
    v17 = *((_QWORD *)v16 + 1);
    *((_QWORD *)v16 + 1) = v15;
    v26 = v17;
    goto LABEL_7;
  }
  v5 = *(uint64_t **)(v4 + 8);
  v6 = v5[1];
  v7 = v5[2];
  if (v6 >= v7)
  {
    v18 = (uint64_t)(v6 - *v5) >> 4;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 60)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v20 = v7 - *v5;
    if (v20 >> 3 > v19)
      v19 = v20 >> 3;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
      v21 = 0xFFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    v29[4] = v5 + 2;
    v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v21);
    v23 = &v22[16 * v18];
    v29[0] = v22;
    v29[1] = v23;
    v29[3] = &v22[16 * v24];
    *((_QWORD *)v23 + 1) = 0;
    v25 = *a2;
    *v23 = 4;
    *((_QWORD *)v23 + 1) = v25;
    v29[2] = v23 + 16;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(v5, v29);
    v9 = v5[1];
    std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v29);
  }
  else
  {
    *(_QWORD *)(v6 + 8) = 0;
    v8 = *a2;
    *(_BYTE *)v6 = 4;
    *(_QWORD *)(v6 + 8) = v8;
    v9 = v6 + 16;
    v5[1] = v6 + 16;
  }
  v5[1] = v9;
}

uint64_t *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_BYTE *)(v2 - 16);
    v2 -= 16;
    *(_BYTE *)(v4 - 16) = v5;
    v4 -= 16;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v2 + 8);
    *(_BYTE *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v5 = *(unsigned __int8 *)(i - 16);
    v4 = i - 16;
    *(_QWORD *)(a1 + 16) = v4;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v4 + 8, v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<BOOL>::reserve(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v19;
  _QWORD *v20;
  __int128 v21;

  if (a2 <= *(_QWORD *)(a1 + 16) << 6)
    return;
  if ((a2 & 0x8000000000000000) != 0)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  v20 = 0;
  v21 = 0uLL;
  std::vector<BOOL>::__vallocate[abi:ne180100](&v20, a2);
  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = v21;
  v6 = v21 + v4;
  *(_QWORD *)&v21 = v21 + v4;
  if (!v5)
  {
    v7 = v6 - 1;
    goto LABEL_7;
  }
  v7 = v6 - 1;
  if (((v6 - 1) ^ (v5 - 1)) >= 0x40)
  {
LABEL_7:
    v8 = v7 >> 6;
    if (v6 >= 0x41)
      v9 = v8;
    else
      v9 = 0;
    v20[v9] = 0;
  }
  v10 = v4 & 0x3F;
  v11 = v20;
  if (v4 > 0x3F || (v4 & 0x3F) != 0)
  {
    v12 = 0;
    v13 = &v3[v4 >> 6];
    v14 = v5 & 0x3F;
    v15 = &v20[v5 >> 6];
    do
    {
      v16 = 1 << v14;
      if (((*v3 >> v12) & 1) != 0)
        v17 = *v15 | v16;
      else
        v17 = *v15 & ~v16;
      *v15 = v17;
      v3 += v12 == 63;
      if (v12 == 63)
        v12 = 0;
      else
        ++v12;
      v15 += v14 == 63;
      if (v14 == 63)
        v14 = 0;
      else
        ++v14;
    }
    while (v3 != v13 || v12 != v10);
    v11 = v20;
  }
  v18 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v11;
  v20 = v18;
  v19 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 8) = v21;
  v21 = v19;
  if (v18)
    operator delete(v18);
}

void sub_1C21996AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

nlv4_inference_orchestrator::inference_engine::BertModuleInputType *nlv4_inference_orchestrator::inference_engine::BertModuleInputType::BertModuleInputType(nlv4_inference_orchestrator::inference_engine::BertModuleInputType *this, const nlv4_inference_orchestrator::inference_engine::BertModuleInputType *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(this, *(const void **)a2, *((_QWORD *)a2 + 1), (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 2);
  std::__optional_copy_base<snlp::common::tensor::InferenceTensor,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 48, (uint64_t)a2 + 48);
  std::__optional_copy_base<snlp::common::tensor::InferenceTensor,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 104, (uint64_t)a2 + 104);
  std::__optional_copy_base<snlp::common::tensor::InferenceTensor,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 160, (uint64_t)a2 + 160);
  std::__optional_copy_base<snlp::common::tensor::InferenceTensor,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 216, (uint64_t)a2 + 216);
  std::__optional_copy_base<snlp::common::tensor::InferenceTensor,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 272, (uint64_t)a2 + 272);
  std::__optional_copy_base<snlp::common::tensor::InferenceTensor,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 328, (uint64_t)a2 + 328);
  return this;
}

void sub_1C2199794(_Unwind_Exception *a1)
{
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100](v6);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100](v5);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100](v4);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100](v3);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100](v2);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v1);
  _Unwind_Resume(a1);
}

void sub_1C21997E8()
{
  JUMPOUT(0x1C21997D0);
}

void sub_1C21997F0()
{
  JUMPOUT(0x1C21997D8);
}

void sub_1C21997F8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)v0;
  if (*(_QWORD *)v0)
  {
    *(_QWORD *)(v0 + 8) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x1C21997E0);
}

void snlp::common::espresso_inference::e5ml::WeightsHandler::recordPortDataTypes(uint64_t *a1, E5RT::ExecutionStreamOperation **a2)
{
  uint64_t InputPorts;
  uint64_t OutputPorts;
  unsigned __int8 *i;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned __int8 *j;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::runtime_error *exception;
  char *v19;
  std::string v20;
  E5RT::IOPort *v21;
  std::__shared_weak_count *v22;
  char v23;

  if (!*a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "The espresso assets need to be deserialised before the data type of the weights can be determined.");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (v23 >= 0)
      v19 = (char *)&v21;
    else
      v19 = (char *)v21;
    std::string::basic_string[abi:ne180100]<0>(&v20, v19);
    std::runtime_error::runtime_error(exception, &v20);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(*a2);
  OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(*a2);
  for (i = *(unsigned __int8 **)(InputPorts + 16); i; i = *(unsigned __int8 **)i)
  {
    v7 = (std::__shared_weak_count *)*((_QWORD *)i + 6);
    v21 = (E5RT::IOPort *)*((_QWORD *)i + 5);
    v22 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    snlp::common::espresso_inference::e5ml::WeightsHandler::recordDataTypeForPort(a1, i + 16, &v21);
    if (v7)
    {
      v10 = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  for (j = *(unsigned __int8 **)(OutputPorts + 16); j; j = *(unsigned __int8 **)j)
  {
    v13 = (std::__shared_weak_count *)*((_QWORD *)j + 6);
    v21 = (E5RT::IOPort *)*((_QWORD *)j + 5);
    v22 = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    snlp::common::espresso_inference::e5ml::WeightsHandler::recordDataTypeForPort(a1, j + 16, &v21);
    if (v13)
    {
      v16 = (unint64_t *)&v13->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

void sub_1C21999B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      if (a20 < 0)
        operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t snlp::common::espresso_inference::e5ml::WeightsHandler::recordDataTypeForPort(uint64_t *a1, unsigned __int8 *a2, E5RT::IOPort **a3)
{
  E5RT::TensorDescriptor *v6;
  int ComponentDataType;
  unint64_t *v8;
  unint64_t v9;
  E5RT::TensorDescriptor *v10;
  int ComponentPack;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t result;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  char *v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::runtime_error *exception;
  char *v37;
  unsigned __int8 *v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  __int128 v46;
  int64_t v47;

  E5RT::IOPort::GetPortDescriptor(*a3);
  v6 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor((E5RT::OperandDescriptor *)v45.__r_.__value_.__l.__data_);
  E5RT::TensorDescriptor::GetTensorDataType(v6);
  ComponentDataType = E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)&v46);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v46);
  if (v45.__r_.__value_.__l.__size_)
  {
    v8 = (unint64_t *)(v45.__r_.__value_.__l.__size_ + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)v45.__r_.__value_.__l.__size_ + 16))(v45.__r_.__value_.__l.__size_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v45.__r_.__value_.__l.__size_);
    }
  }
  E5RT::IOPort::GetPortDescriptor(*a3);
  v10 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor((E5RT::OperandDescriptor *)v45.__r_.__value_.__l.__data_);
  E5RT::TensorDescriptor::GetTensorDataType(v10);
  ComponentPack = E5RT::TensorDataType::GetComponentPack((E5RT::TensorDataType *)&v46);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v46);
  if (v45.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v45.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)v45.__r_.__value_.__l.__size_ + 16))(v45.__r_.__value_.__l.__size_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v45.__r_.__value_.__l.__size_);
    }
  }
  if (ComponentDataType == 1)
  {
    if (!ComponentPack)
    {
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2))
      {
        v17 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2);
        if (!v17)
          goto LABEL_65;
        v18 = *((_DWORD *)v17 + 10);
        result = 2;
        if (v18 != 2)
          goto LABEL_23;
        return result;
      }
      *(_QWORD *)&v46 = a2;
      v20 = std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, a2, (__int128 **)&v46);
      result = 2;
LABEL_31:
      *((_DWORD *)v20 + 10) = result;
      return result;
    }
LABEL_33:
    std::operator+<char>();
    v22 = std::string::append(&v41, ". The component data type was ");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v40, ComponentDataType);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v40;
    else
      v24 = (std::string *)v40.__r_.__value_.__r.__words[0];
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    else
      size = v40.__r_.__value_.__l.__size_;
    v26 = std::string::append(&v42, (const std::string::value_type *)v24, size);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    v28 = std::string::append(&v43, " and the component pack was ");
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v39, ComponentPack);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v39;
    else
      v30 = (std::string *)v39.__r_.__value_.__r.__words[0];
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    else
      v31 = v39.__r_.__value_.__l.__size_;
    v32 = std::string::append(&v44, (const std::string::value_type *)v30, v31);
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    v34 = std::string::append(&v45, ".");
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v47 = v34->__r_.__value_.__r.__words[2];
    v46 = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (v47 >= 0)
      v37 = (char *)&v46;
    else
      v37 = (char *)v46;
    std::string::basic_string[abi:ne180100]<0>(&v45, v37);
    std::runtime_error::runtime_error(exception, &v45);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  if (ComponentDataType != 4)
    goto LABEL_33;
  if (ComponentPack == 3)
  {
    if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2))
    {
      v19 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2);
      if (!v19)
        goto LABEL_65;
      if (*((_DWORD *)v19 + 10))
      {
        LODWORD(v46) = 0;
LABEL_64:
        v38 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2);
        if (v38)
          snlp::common::espresso_inference::e5ml::WeightsHandler::throwInconsistentPortDataTypeError((uint64_t)a1, (const void **)a2, (int *)&v46, (int *)v38 + 10);
LABEL_65:
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      return 0;
    }
    else
    {
      *(_QWORD *)&v46 = a2;
      v21 = std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, a2, (__int128 **)&v46);
      result = 0;
      *((_DWORD *)v21 + 10) = 0;
    }
    return result;
  }
  if (ComponentPack != 6)
    goto LABEL_33;
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2))
  {
    *(_QWORD *)&v46 = a2;
    v20 = std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, a2, (__int128 **)&v46);
    result = 1;
    goto LABEL_31;
  }
  v14 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2);
  if (!v14)
    goto LABEL_65;
  v15 = *((_DWORD *)v14 + 10);
  result = 1;
  if (v15 != 1)
  {
LABEL_23:
    LODWORD(v46) = result;
    goto LABEL_64;
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

char *std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  std::string *v16;
  __int128 *v17;
  __int128 v18;
  _QWORD *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  void *v41;

  v7 = a1 + 3;
  v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v9 = v8;
  v10 = a1[1];
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*a1 + 8 * v3);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v9)
          {
            if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 4), (unsigned __int8 *)v14 + 16, a2) & 1) != 0)return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  v14 = (char *)operator new(0x30uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v9;
  v16 = (std::string *)(v14 + 16);
  v17 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
  }
  else
  {
    v18 = *v17;
    *((_QWORD *)v14 + 4) = *((_QWORD *)v17 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  v19 = a1 + 2;
  *((_DWORD *)v14 + 10) = 0;
  v20 = (float)(unint64_t)(a1[3] + 1);
  v21 = *((float *)a1 + 8);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = (int8x8_t)v24;
    else
      prime = (int8x8_t)v23;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = a1[1];
    if (*(_QWORD *)&prime > v10)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v10)
    {
      v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (*(_QWORD *)&prime <= v32)
        prime = (int8x8_t)v32;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v26 = operator new(8 * *(_QWORD *)&prime);
          v27 = (void *)*a1;
          *a1 = (uint64_t)v26;
          if (v27)
            operator delete(v27);
          v28 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v28++) = 0;
          while (*(_QWORD *)&prime != v28);
          v29 = (_QWORD *)*v19;
          if (*v19)
          {
            v30 = v29[1];
            v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&prime)
                v30 %= *(_QWORD *)&prime;
            }
            else
            {
              v30 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v30) = v19;
            v35 = (_QWORD *)*v29;
            if (*v29)
            {
              do
              {
                v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&prime)
                    v36 %= *(_QWORD *)&prime;
                }
                else
                {
                  v36 &= *(_QWORD *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v36))
                  {
                    *(_QWORD *)(*a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *v29 = *v35;
                  *v35 = **(_QWORD **)(*a1 + 8 * v36);
                  **(_QWORD **)(*a1 + 8 * v36) = v35;
                  v35 = v29;
                }
                v36 = v30;
LABEL_58:
                v29 = v35;
                v35 = (_QWORD *)*v35;
                v30 = v36;
              }
              while (v35);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        v41 = (void *)*a1;
        *a1 = 0;
        if (v41)
          operator delete(v41);
        v10 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v37 = *a1;
  v38 = *(_QWORD **)(*a1 + 8 * v3);
  if (v38)
  {
    *(_QWORD *)v14 = *v38;
LABEL_75:
    *v38 = v14;
    goto LABEL_76;
  }
  *(_QWORD *)v14 = *v19;
  *v19 = v14;
  *(_QWORD *)(v37 + 8 * v3) = v19;
  if (*(_QWORD *)v14)
  {
    v39 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v39 >= v10)
        v39 %= v10;
    }
    else
    {
      v39 &= v10 - 1;
    }
    v38 = (_QWORD *)(*a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  ++*v7;
  return v14;
}

void sub_1C219A500(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  _QWORD *InputPorts;
  _QWORD *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  E5RT::IOPort *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  E5RT::TensorDescriptor *v19;
  uint64_t TensorShape;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  int *v24;
  int v25;
  int v26;
  E5RT::BufferObject *v27;
  uint64_t DataSpan;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  E5RT::BufferObject *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _WORD *v38;
  unint64_t *v39;
  unint64_t v40;
  int *v41;
  uint64_t v42;
  int v43;
  E5RT::BufferObject *v49;
  uint64_t v50;
  int64_t v51;
  int64_t v52;
  _BYTE *v53;
  unint64_t *v54;
  unint64_t v55;
  float *v56;
  uint64_t v57;
  float v58;
  uint64_t *v59;
  unint64_t v60;
  std::runtime_error *exception;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  std::runtime_error *v66;
  std::runtime_error *v67;
  std::string *v68;
  __int128 v69;
  int v70;
  std::runtime_error *v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  std::string::size_type size;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  std::string::size_type v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  __int128 v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  E5RT::IOPort *v92;
  std::__shared_weak_count *v93;
  std::string v94;
  std::string v95;
  std::string v96;

  InputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperation **)(a1 + 176));
  if (!std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(InputPorts, a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v62 = std::string::append(&v94, ")");
    v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v95.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    v64 = std::string::append(&v95, " does not exist.");
    v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v96.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v65;
    v64->__r_.__value_.__l.__size_ = 0;
    v64->__r_.__value_.__r.__words[2] = 0;
    v64->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v96);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
  }
  v7 = (_QWORD *)(a1 + 192);
  if (snlp::common::espresso_inference::e5ml::WeightsHandler::getDataTypeForPort(v7, a2) == 2)
  {
    v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v96, "The setInput method is not yet implemented for UINT_8.");
    std::runtime_error::runtime_error(v66, &v96);
    v66->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
  }
  v8 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(InputPorts, a2);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = v8;
  v10 = (E5RT::IOPort *)*((_QWORD *)v8 + 5);
  v11 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v92 = v10;
  v93 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v15 = *(_QWORD *)(a3 + 24);
  v14 = *(_QWORD *)(a3 + 32);
  E5RT::IOPort::GetMemoryObject(v10);
  v16 = E5RT::MemoryObject::TryAsBuffer((E5RT::MemoryObject *)v96.__r_.__value_.__l.__data_);
  if (v96.__r_.__value_.__l.__size_)
  {
    v17 = (unint64_t *)(v96.__r_.__value_.__l.__size_ + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)v96.__r_.__value_.__l.__size_ + 16))(v96.__r_.__value_.__l.__size_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v96.__r_.__value_.__l.__size_);
    }
  }
  if (!v16)
  {
    v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v68 = std::string::append(&v95, ").");
    v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    v96.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v67, &v96);
    v67->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
  }
  E5RT::IOPort::GetPortDescriptor(v92);
  v19 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v95.__r_.__value_.__l.__data_);
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(v19);
  memset(&v96, 0, sizeof(v96));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v96, *(const void **)TensorShape, *(_QWORD *)(TensorShape + 8), (uint64_t)(*(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape) >> 3);
  if (v95.__r_.__value_.__l.__size_)
  {
    v21 = (unint64_t *)(v95.__r_.__value_.__l.__size_ + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)v95.__r_.__value_.__l.__size_ + 16))(v95.__r_.__value_.__l.__size_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v95.__r_.__value_.__l.__size_);
    }
  }
  v23 = (v14 - v15) >> 2;
  v24 = (int *)v96.__r_.__value_.__r.__words[0];
  v25 = 1;
  while (v24 != (int *)v96.__r_.__value_.__l.__size_)
  {
    v26 = *v24;
    v24 += 2;
    v25 *= v26;
  }
  if (v23 != v25)
  {
    v70 = v25;
    v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v72 = std::string::append(&v88, " buffer due to the input tensor being mismatched in size.  Buffer size is ");
    v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v73;
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v87, v70);
    if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v74 = &v87;
    else
      v74 = (std::string *)v87.__r_.__value_.__r.__words[0];
    if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v87.__r_.__value_.__r.__words[2]);
    else
      size = v87.__r_.__value_.__l.__size_;
    v76 = std::string::append(&v89, (const std::string::value_type *)v74, size);
    v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
    v90.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v77;
    v76->__r_.__value_.__l.__size_ = 0;
    v76->__r_.__value_.__r.__words[2] = 0;
    v76->__r_.__value_.__r.__words[0] = 0;
    v78 = std::string::append(&v90, "; input tensor contains ");
    v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
    v91.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v79;
    v78->__r_.__value_.__l.__size_ = 0;
    v78->__r_.__value_.__r.__words[2] = 0;
    v78->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v86, v23);
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v80 = &v86;
    else
      v80 = (std::string *)v86.__r_.__value_.__r.__words[0];
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v81 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    else
      v81 = v86.__r_.__value_.__l.__size_;
    v82 = std::string::append(&v91, (const std::string::value_type *)v80, v81);
    v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    v94.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    v84 = std::string::append(&v94, " elements.");
    v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
    v95.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v85;
    v84->__r_.__value_.__l.__size_ = 0;
    v84->__r_.__value_.__r.__words[2] = 0;
    v84->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v71, &v95);
    v71->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  if (snlp::common::espresso_inference::e5ml::WeightsHandler::getDataTypeForPort(v7, a2))
  {
    if (snlp::common::espresso_inference::e5ml::WeightsHandler::getDataTypeForPort(v7, a2) == 1)
    {
      E5RT::IOPort::GetMemoryObject(v92);
      v27 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer((E5RT::MemoryObject *)v95.__r_.__value_.__l.__data_);
      DataSpan = E5RT::BufferObject::GetDataSpan(v27);
      v30 = v29 >> 2;
      if (v29 >= 4)
        v31 = (void *)DataSpan;
      else
        v31 = 0;
      if (v95.__r_.__value_.__l.__size_)
      {
        v32 = (unint64_t *)(v95.__r_.__value_.__l.__size_ + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          (*(void (**)(std::string::size_type))(*(_QWORD *)v95.__r_.__value_.__l.__size_ + 16))(v95.__r_.__value_.__l.__size_);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v95.__r_.__value_.__l.__size_);
        }
      }
      if ((uint64_t)(4 * v30) >= 1)
        bzero(v31, 4 * (((4 * v30) >> 2) - (4 * v30 > 3)) + 4);
      if (v14 != v15)
        memmove(v31, *(const void **)(a3 + 24), v14 - v15);
    }
    else if (snlp::common::espresso_inference::e5ml::WeightsHandler::getDataTypeForPort(v7, a2) == 2)
    {
      E5RT::IOPort::GetMemoryObject(v92);
      v49 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer((E5RT::MemoryObject *)v95.__r_.__value_.__l.__data_);
      v50 = E5RT::BufferObject::GetDataSpan(v49);
      v52 = v51;
      if (v51)
        v53 = (_BYTE *)v50;
      else
        v53 = 0;
      if (v95.__r_.__value_.__l.__size_)
      {
        v54 = (unint64_t *)(v95.__r_.__value_.__l.__size_ + 8);
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          (*(void (**)(std::string::size_type))(*(_QWORD *)v95.__r_.__value_.__l.__size_ + 16))(v95.__r_.__value_.__l.__size_);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v95.__r_.__value_.__l.__size_);
        }
      }
      if (v52 >= 1)
        bzero(v53, v52);
      if (v14 != v15)
      {
        v56 = *(float **)(a3 + 24);
        v57 = 4 * v23;
        do
        {
          v58 = *v56++;
          *v53++ = (int)v58;
          v57 -= 4;
        }
        while (v57);
      }
    }
  }
  else
  {
    E5RT::IOPort::GetMemoryObject(v92);
    v34 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer((E5RT::MemoryObject *)v95.__r_.__value_.__l.__data_);
    v35 = E5RT::BufferObject::GetDataSpan(v34);
    v37 = v36 >> 1;
    if (v36 >= 2)
      v38 = (_WORD *)v35;
    else
      v38 = 0;
    if (v95.__r_.__value_.__l.__size_)
    {
      v39 = (unint64_t *)(v95.__r_.__value_.__l.__size_ + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        (*(void (**)(std::string::size_type))(*(_QWORD *)v95.__r_.__value_.__l.__size_ + 16))(v95.__r_.__value_.__l.__size_);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v95.__r_.__value_.__l.__size_);
      }
    }
    if ((uint64_t)(2 * v37) >= 1)
      bzero(v38, 2 * (((2 * v37) >> 1) - (2 * v37 != 1)) + 2);
    if (v14 != v15)
    {
      v41 = *(int **)(a3 + 24);
      v42 = 4 * v23;
      do
      {
        v43 = *v41++;
        _S0 = v43;
        __asm { FCVT            H0, S0 }
        *v38++ = _S0;
        v42 -= 4;
      }
      while (v42);
    }
  }
  if (v96.__r_.__value_.__r.__words[0])
  {
    v96.__r_.__value_.__l.__size_ = v96.__r_.__value_.__r.__words[0];
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  if (v93)
  {
    v59 = &v93->__shared_owners_;
    do
      v60 = __ldaxr((unint64_t *)v59);
    while (__stlxr(v60 - 1, (unint64_t *)v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
}

void sub_1C219AC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,char a49)
{
  void *v49;
  int v50;
  uint64_t v51;
  void *v53;

  if (*(char *)(v51 - 121) < 0)
    operator delete(*(void **)(v51 - 144));
  if (*(char *)(v51 - 153) < 0)
    operator delete(*(void **)(v51 - 176));
  if (a15 < 0)
    operator delete(__p);
  if (a47 < 0)
    operator delete(a42);
  if (a40 < 0)
    operator delete(a35);
  if (a21 < 0)
    operator delete(a16);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v50 & 1) == 0)
    {
LABEL_20:
      v53 = *(void **)(v51 - 112);
      if (v53)
      {
        *(_QWORD *)(v51 - 104) = v53;
        operator delete(v53);
      }
      std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
      _Unwind_Resume(a1);
    }
  }
  else if (!v50)
  {
    goto LABEL_20;
  }
  __cxa_free_exception(v49);
  goto LABEL_20;
}

uint64_t snlp::common::espresso_inference::e5ml::WeightsHandler::getDataTypeForPort(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v4;
  std::runtime_error *exception;
  std::runtime_error *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string v12;
  std::string v13;
  std::string v14;

  if (!a1[3])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, "The weights handler must be set up before querying port weights.");
    std::runtime_error::runtime_error(exception, &v14);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(a1, a2))
  {
    v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v8 = std::string::append(&v12, ")");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v13, " does not have a valid data type.");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v7, &v14);
    v7->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
  }
  v4 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(a1, a2);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((unsigned int *)v4 + 10);
}

void sub_1C219B010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  char v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if ((v29 & 1) != 0)
    __cxa_free_exception(v28);
  _Unwind_Resume(exception_object);
}

_BYTE *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(uint64_t a1)
{
  _BYTE *result;
  int v3;
  nlohmann::detail::exception *v4;
  nlohmann::detail::exception *exception;
  _QWORD v6[3];

  result = *(_BYTE **)a1;
  v3 = *result;
  if (v3 == 1)
    return (_BYTE *)(*(_QWORD *)(a1 + 8) + 56);
  if (v3 == 2)
    return *(_BYTE **)(a1 + 16);
  if (!*result)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "cannot get value");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 214, (uint64_t)v6);
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v4 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "cannot get value");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v4, 214, (uint64_t)v6);
  }
  return result;
}

void sub_1C219B19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E7BED1A8[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++(unsigned __int8 **result)
{
  int v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  BOOL v5;

  v1 = **result;
  if (v1 == 2)
  {
    result[2] += 16;
  }
  else if (v1 == 1)
  {
    v2 = result[1];
    v3 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = *(unsigned __int8 **)v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (unsigned __int8 *)*((_QWORD *)v2 + 2);
        v5 = *(_QWORD *)v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    result[1] = v4;
  }
  else
  {
    ++result[3];
  }
  return result;
}

BOOL nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>,(decltype(nullptr))0>(unsigned __int8 **a1, unsigned __int8 **a2)
{
  int v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  nlohmann::detail::exception *exception;
  _QWORD v7[3];

  if (*a1 != *a2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "cannot compare iterators of different containers");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 212, (uint64_t)v7);
  }
  v2 = **a1;
  if (v2 == 2)
  {
    v3 = a1[2];
    v4 = a2[2];
  }
  else if (v2 == 1)
  {
    v3 = a1[1];
    v4 = a2[1];
  }
  else
  {
    v3 = a1[3];
    v4 = a2[3];
  }
  return v3 == v4;
}

void sub_1C219B360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::key(char a1, uint64_t a2)
{
  nlohmann::detail::exception *exception;
  _QWORD v4[3];

  if (a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v4, "cannot use key() for non-object iterators");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 207, (uint64_t)v4);
  }
  return a2 + 32;
}

void sub_1C219B420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  std::string *v18;
  uint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD v30[2];
  char v31;
  char v32;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v29 = v7;
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
      v7 = v29;
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  v17 = (char *)operator new(0x48uLL);
  v30[0] = v17;
  v30[1] = a1 + 16;
  v31 = 0;
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = v9;
  v18 = (std::string *)(v17 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v17 + 4) = *(_QWORD *)(a3 + 16);
  }
  v17[40] = 0;
  *((_DWORD *)v17 + 16) = -1;
  v19 = *(unsigned int *)(a3 + 48);
  if ((_DWORD)v19 != -1)
  {
    ((void (*)(char *))off_1E7BED180[v19])(&v32);
    *((_DWORD *)v17 + 16) = v19;
  }
  v31 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v25);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v27)
  {
    *(_QWORD *)v17 = *v27;
LABEL_44:
    *v27 = v17;
    goto LABEL_45;
  }
  *(_QWORD *)v17 = *v16;
  *v16 = v17;
  *(_QWORD *)(v26 + 8 * v3) = v16;
  if (*(_QWORD *)v17)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10)
        v28 %= v10;
    }
    else
    {
      v28 &= v10 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_44;
  }
LABEL_45:
  v30[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v30);
}

void sub_1C219B6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

_BYTE *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(_BYTE *result, unsigned int *a2)
{
  unsigned __int8 *v2;
  unsigned int v3;
  nlohmann::detail::exception *exception;
  unint64_t v5;
  char *v6;
  std::string *v7;
  __int128 v8;
  std::string v9;
  __int128 v10;
  std::string::size_type v11;

  v2 = result;
  switch(*result)
  {
    case 4:
      v3 = result[8];
      break;
    case 5:
    case 6:
      v3 = *((_DWORD *)result + 2);
      break;
    case 7:
      v3 = *((double *)result + 1);
      break;
    default:
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      v5 = *v2;
      if (v5 > 9)
        v6 = "number";
      else
        v6 = off_1E7BED038[v5];
      std::string::basic_string[abi:ne180100]<0>(&v9, v6);
      v7 = std::string::insert(&v9, 0, "type must be number, but is ");
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v11 = v7->__r_.__value_.__r.__words[2];
      v10 = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 302, (uint64_t)&v10);
  }
  *a2 = v3;
  return result;
}

void sub_1C219B91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

std::string *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get_impl<std::string,0>(std::string *a1, const std::string **a2)
{
  nlohmann::detail::exception *exception;
  unint64_t v5;
  char *v6;
  std::string *v7;
  __int128 v8;
  std::string v9;
  __int128 v10;
  std::string::size_type v11;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (*(_BYTE *)a2 != 3)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v5 = *(unsigned __int8 *)a2;
    if (v5 > 9)
      v6 = "number";
    else
      v6 = off_1E7BED038[v5];
    std::string::basic_string[abi:ne180100]<0>(&v9, v6);
    v7 = std::string::insert(&v9, 0, "type must be string, but is ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v11 = v7->__r_.__value_.__r.__words[2];
    v10 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 302, (uint64_t)&v10);
  }
  return std::string::operator=(a1, a2[1]);
}

void sub_1C219BA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(unsigned __int8 *result, _BYTE *a2)
{
  unsigned __int8 *v2;
  nlohmann::detail::exception *exception;
  unint64_t v4;
  char *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  __int128 v9;
  std::string::size_type v10;

  v2 = result;
  if (*result != 4)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v4 = *v2;
    if (v4 > 9)
      v5 = "number";
    else
      v5 = off_1E7BED038[v4];
    std::string::basic_string[abi:ne180100]<0>(&v8, v5);
    v6 = std::string::insert(&v8, 0, "type must be BOOLean, but is ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v10 = v6->__r_.__value_.__r.__words[2];
    v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 302, (uint64_t)&v9);
  }
  *a2 = result[8];
  return result;
}

void sub_1C219BBB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(uint64_t *result, float *a2)
{
  uint64_t *v2;
  float v3;
  nlohmann::detail::exception *exception;
  unint64_t v5;
  char *v6;
  std::string *v7;
  __int128 v8;
  std::string v9;
  __int128 v10;
  std::string::size_type v11;

  v2 = result;
  switch(*(_BYTE *)result)
  {
    case 4:
      v3 = 0.0;
      if (*((_BYTE *)result + 8))
        v3 = 1.0;
      break;
    case 5:
      v3 = (float)result[1];
      break;
    case 6:
      v3 = (float)(unint64_t)result[1];
      break;
    case 7:
      v3 = *((double *)result + 1);
      break;
    default:
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      v5 = *(unsigned __int8 *)v2;
      if (v5 > 9)
        v6 = "number";
      else
        v6 = off_1E7BED038[v5];
      std::string::basic_string[abi:ne180100]<0>(&v9, v6);
      v7 = std::string::insert(&v9, 0, "type must be number, but is ");
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v11 = v7->__r_.__value_.__r.__words[2];
      v10 = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 302, (uint64_t)&v10);
  }
  *a2 = v3;
  return result;
}

void sub_1C219BD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x1C3BB9700](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x1C3BB9700](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_1C219BE74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1C3BB9A90](v1 + 424);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::string const&>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  __int128 *v21;
  __int128 *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD v36[2];
  char v37;

  v9 = (_QWORD *)(a1 + 24);
  v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v35 = a4;
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
      a4 = v35;
    }
  }
  v18 = (_QWORD *)(a1 + 16);
  v19 = (char *)operator new(0x48uLL);
  v20 = v19;
  v36[0] = v19;
  v36[1] = a1 + 16;
  v37 = 0;
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = v11;
  v21 = *a3;
  v22 = (__int128 *)*a4;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v19 + 16), *(const std::string::value_type **)v21, *((_QWORD *)v21 + 1));
  }
  else
  {
    v23 = *v21;
    *((_QWORD *)v19 + 4) = *((_QWORD *)v21 + 2);
    *((_OWORD *)v19 + 1) = v23;
  }
  v24 = (std::string *)(v20 + 40);
  if (*((char *)v22 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v22, *((_QWORD *)v22 + 1));
  }
  else
  {
    v25 = *v22;
    *((_QWORD *)v20 + 7) = *((_QWORD *)v22 + 2);
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
  }
  *((_DWORD *)v20 + 16) = 4;
  v37 = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v12 || (float)(v27 * (float)v12) < v26)
  {
    v28 = 1;
    if (v12 >= 3)
      v28 = (v12 & (v12 - 1)) != 0;
    v29 = v28 | (2 * v12);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      v31 = v30;
    else
      v31 = v29;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v31);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v32 = *(_QWORD *)a1;
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v33)
  {
    *(_QWORD *)v20 = *v33;
LABEL_45:
    *v33 = v20;
    goto LABEL_46;
  }
  *(_QWORD *)v20 = *v18;
  *v18 = v20;
  *(_QWORD *)(v32 + 8 * v4) = v18;
  if (*(_QWORD *)v20)
  {
    v34 = *(_QWORD *)(*(_QWORD *)v20 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v34 >= v12)
        v34 %= v12;
    }
    else
    {
      v34 &= v12 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_45;
  }
LABEL_46:
  v36[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v36);
}

void sub_1C219C160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void **v5;
  va_list va;

  va_start(va, a4);
  if (*(char *)(v4 + 39) < 0)
    operator delete(*v5);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::LoadFromMemoryMappedFile(sentencepiece::SentencePieceProcessor *this@<X0>, const char *a2@<X1>, unint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v9;
  _QWORD *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  _QWORD *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  _QWORD *v40;
  uint64_t v41;
  const char *v42;
  _QWORD v43[11];
  char v44;
  uint64_t v45;
  const char *v46;
  unint64_t v47;

  v46 = a2;
  v47 = a3;
  if (a3 <= 0x13)
  {
    LODWORD(v42) = 13;
    v7 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(size) >= (sizeof(MMapHeader))", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
    goto LABEL_5;
  }
  if (*(_DWORD *)a2)
  {
    LODWORD(v42) = 13;
    v6 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"header->sentinel == 0", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"This file format is not for mmap-based loading.", 47);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
LABEL_5:
    v43[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v43 + *(_QWORD *)(v43[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v43[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v44 < 0)
      operator delete((void *)v43[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C3BB9A90](&v45);
    return;
  }
  sentencepiece::mmap_util::RemovePrefix(&v46, 0x14uLL, a4);
  if (*(_QWORD *)a4)
    return;
  sentencepiece::util::Status::~Status(a4);
  v9 = *((unsigned int *)a2 + 1);
  if (v47 < v9)
  {
    LODWORD(v42) = 13;
    v10 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(blob.size()) >= (header->model_proto_size)", 43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
    goto LABEL_5;
  }
  v11 = v46;
  v12 = operator new();
  sentencepiece::MemoryMappedModelProto::MemoryMappedModelProto(v12, v11, v9);
  v13 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v12 = *((_QWORD *)this + 4);
  }
  sentencepiece::util::Status::Status((sentencepiece::util::Status *)&v42, (const sentencepiece::util::Status *)(v12 + 88));
  v14 = v42;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v42);
  if (v14)
  {
    LODWORD(v42) = 13;
    v15 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"model_proto->status().ok()", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Failed to initialize ModelProto.", 32);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
    goto LABEL_5;
  }
  sentencepiece::mmap_util::RemovePrefix(&v46, *((unsigned int *)a2 + 1), a4);
  if (*(_QWORD *)a4)
    return;
  sentencepiece::util::Status::~Status(a4);
  if (v47 >= *((unsigned int *)a2 + 2))
    v16 = *((unsigned int *)a2 + 2);
  else
    v16 = v47;
  sentencepiece::ModelFactory::Create(v12, (uint64_t)v46, v16, &v42);
  v17 = v42;
  v42 = 0;
  v18 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v17;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = v42;
    v42 = 0;
    if (v19)
      (*(void (**)(const char *))(*(_QWORD *)v19 + 8))(v19);
    v17 = (const char *)*((_QWORD *)this + 1);
  }
  if (!v17)
  {
    LODWORD(v42) = 13;
    v21 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"model_", 6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Failed to initialize Model.", 27);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
    goto LABEL_28;
  }
  (*(void (**)(const char **__return_ptr))(*(_QWORD *)v17 + 16))(&v42);
  v20 = v42;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v42);
  if (v20)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
    return;
  }
  sentencepiece::mmap_util::RemovePrefix(&v46, *((unsigned int *)a2 + 2), a4);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    v22 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v22)
    {
      if (v47 >= v22)
      {
        v25 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 152))(*((_QWORD *)this + 4));
        v26 = *((unsigned int *)a2 + 3);
        if (v47 < v26)
          v26 = v47;
        v42 = v46;
        v43[0] = v26;
        std::make_unique[abi:ne180100]<sentencepiece::normalizer::Normalizer,sentencepiece::MemoryMappedNormalizerSpec const&,std::string_view>(v25, &v42, &v41);
        v27 = v41;
        v41 = 0;
        v28 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v27;
        if (v28)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          v29 = v41;
          v41 = 0;
          if (v29)
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        }
        (*(void (**)(const char **__return_ptr))(**((_QWORD **)this + 2) + 24))(&v42);
        v30 = v42;
        sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v42);
        if (!v30)
        {
          sentencepiece::mmap_util::RemovePrefix(&v46, *((unsigned int *)a2 + 3), a4);
          if (*(_QWORD *)a4)
            return;
          sentencepiece::util::Status::~Status(a4);
          v32 = *((_QWORD *)this + 2);
          v33 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(v32, v33);
          if (*((_DWORD *)a2 + 4))
          {
            v34 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 160))(*((_QWORD *)this + 4));
            v35 = *((unsigned int *)a2 + 4);
            if (v47 < v35)
              v35 = v47;
            v42 = v46;
            v43[0] = v35;
            std::make_unique[abi:ne180100]<sentencepiece::normalizer::Normalizer,sentencepiece::MemoryMappedNormalizerSpec const&,std::string_view>(v34, &v42, &v41);
            v36 = v41;
            v41 = 0;
            v37 = *((_QWORD *)this + 3);
            *((_QWORD *)this + 3) = v36;
            if (v37)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
              v38 = v41;
              v41 = 0;
              if (v38)
                (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
            }
            (*(void (**)(const char **__return_ptr))(**((_QWORD **)this + 3) + 24))(&v42);
            v39 = v42;
            sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v42);
            if (v39)
            {
              LODWORD(v42) = 13;
              v40 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
              std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"denormalizer_->status().ok()", 28);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Failed to initialize Denormalizer.", 34);
              sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
              goto LABEL_28;
            }
            sentencepiece::mmap_util::RemovePrefix(&v46, *((unsigned int *)a2 + 4), a4);
            if (*(_QWORD *)a4)
              return;
            sentencepiece::util::Status::~Status(a4);
          }
          sentencepiece::util::Status::Status(a4);
          return;
        }
        LODWORD(v42) = 13;
        v31 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"normalizer_->status().ok()", 26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Failed to initialize Normalizer.", 32);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
      }
      else
      {
        LODWORD(v42) = 13;
        v23 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(blob.size()) >= (header->normalizer_size)", 42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
      }
    }
    else
    {
      LODWORD(v42) = 13;
      v24 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(header->normalizer_size) > (0)", 31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
    }
LABEL_28:
    sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&v42);
  }
}

void sub_1C219CB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::MemoryMappedModelProto::NormalizerSpec(sentencepiece::MemoryMappedModelProto *this)
{
  return (uint64_t)this + 16;
}

uint64_t sentencepiece::ModelInterface::prefix_matcher(sentencepiece::ModelInterface *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t sentencepiece::MemoryMappedModelProto::MemoryMappedModelProto(uint64_t a1, _DWORD *a2, unint64_t a3)
{
  uint64_t *v6;
  _DWORD *v8;

  *(_QWORD *)a1 = &off_1E7BE8B18;
  *(_QWORD *)(a1 + 16) = &off_1E7BE8F60;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &off_1E7BE8F60;
  *(_DWORD *)(a1 + 40) = 0;
  v6 = (uint64_t *)(a1 + 88);
  sentencepiece::util::Status::Status((_QWORD *)(a1 + 88));
  sentencepiece::MemoryMappedModelProto::Init(a1, a2, a3, (sentencepiece::util::Status *)&v8);
  sentencepiece::util::Status::operator=(v6, &v8);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v8);
  return a1;
}

void sub_1C219CC24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  sentencepiece::util::Status *v2;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  sentencepiece::util::Status::~Status(v2);
  _Unwind_Resume(a1);
}

void sentencepiece::util::Status::operator=(uint64_t *a1, _DWORD **a2)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  std::string *v7;
  __int128 v8;

  v3 = *a1;
  if ((_DWORD *)*a1 != *a2)
  {
    if (*a2)
    {
      v5 = operator new();
      v6 = *a2;
      *(_DWORD *)v5 = **a2;
      v7 = (std::string *)(v5 + 8);
      if (*((char *)v6 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)v6 + 1), *((_QWORD *)v6 + 2));
      }
      else
      {
        v8 = *(_OWORD *)(v6 + 2);
        *(_QWORD *)(v5 + 24) = *((_QWORD *)v6 + 3);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
      }
      v3 = *a1;
    }
    else
    {
      v5 = 0;
    }
    *a1 = v5;
    if (v3)
      std::default_delete<sentencepiece::util::Status::Rep>::operator()[abi:ne180100]((uint64_t)a1, v3);
  }
}

void sub_1C219CCF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::MemoryMappedModelProto::Init@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  _QWORD *result;
  int v7;
  unint64_t v8;
  _QWORD *v9;
  int v10;
  int v11;
  int v12;
  _DWORD *v13;
  unint64_t v14;

  v13 = a2;
  v14 = a3;
  v12 = 0;
  result = sentencepiece::mmap_util::DecodePrefix<unsigned int>(a2, a3, &v12, a4);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    result = sentencepiece::mmap_util::RemovePrefix(&v13, 4uLL, a4);
    if (!*(_QWORD *)a4)
    {
      sentencepiece::util::Status::~Status(a4);
      *(_DWORD *)(a1 + 8) = v12;
      v11 = 0;
      result = sentencepiece::mmap_util::DecodePrefix<unsigned int>(v13, v14, &v11, a4);
      if (!*(_QWORD *)a4)
      {
        sentencepiece::util::Status::~Status(a4);
        result = sentencepiece::mmap_util::RemovePrefix(&v13, 4uLL, a4);
        if (!*(_QWORD *)a4)
        {
          sentencepiece::util::Status::~Status(a4);
          *(_DWORD *)(a1 + 24) = v11;
          v10 = 0;
          result = sentencepiece::mmap_util::DecodePrefix<unsigned int>(v13, v14, &v10, a4);
          if (!*(_QWORD *)a4)
          {
            sentencepiece::util::Status::~Status(a4);
            result = sentencepiece::mmap_util::RemovePrefix(&v13, 4uLL, a4);
            if (!*(_QWORD *)a4)
            {
              sentencepiece::util::Status::~Status(a4);
              v7 = v10;
              *(_DWORD *)(a1 + 48) = 0;
              *(_DWORD *)(a1 + 40) = v7;
              result = sentencepiece::mmap_util::DecodePrefix<int>(v13, v14, (_DWORD *)(a1 + 48), a4);
              if (!*(_QWORD *)a4)
              {
                sentencepiece::util::Status::~Status(a4);
                result = sentencepiece::mmap_util::RemovePrefix(&v13, 4uLL, a4);
                if (!*(_QWORD *)a4)
                {
                  sentencepiece::util::Status::~Status(a4);
                  *(_QWORD *)(a1 + 56) = v13;
                  v8 = sentencepiece::mmap_util::RoundUp((sentencepiece::mmap_util *)*(int *)(a1 + 48), 4uLL);
                  result = sentencepiece::mmap_util::RemovePrefix(&v13, v8, a4);
                  if (!*(_QWORD *)a4)
                  {
                    sentencepiece::util::Status::~Status(a4);
                    *(_QWORD *)(a1 + 64) = v13;
                    result = sentencepiece::mmap_util::RemovePrefix(&v13, 4 * *(int *)(a1 + 48), a4);
                    if (!*(_QWORD *)a4)
                    {
                      sentencepiece::util::Status::~Status(a4);
                      *(_QWORD *)(a1 + 72) = v13;
                      result = sentencepiece::mmap_util::RemovePrefix(&v13, 4 * *(int *)(a1 + 48) + 20, a4);
                      if (!*(_QWORD *)a4)
                      {
                        sentencepiece::util::Status::~Status(a4);
                        *(_QWORD *)(a1 + 80) = v13;
                        return sentencepiece::util::Status::Status(v9);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sentencepiece::ModelInterface::InitFromMMappedFile(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  sentencepiece::mmap_util *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _DWORD *v23;
  _QWORD v24[33];
  uint64_t *v25;
  unsigned int v26;
  _DWORD *v27;
  unint64_t v28;

  v27 = a2;
  v28 = a3;
  sentencepiece::mmap_util::DecodePrefix<int>(a2, a3, (_DWORD *)(a1 + 88), a4);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    sentencepiece::mmap_util::RemovePrefix(&v27, 4uLL, a4);
    if (!*(_QWORD *)a4)
    {
      sentencepiece::util::Status::~Status(a4);
      sentencepiece::mmap_util::DecodePrefix<int>(v27, v28, (_DWORD *)(a1 + 92), a4);
      if (!*(_QWORD *)a4)
      {
        sentencepiece::util::Status::~Status(a4);
        sentencepiece::mmap_util::RemovePrefix(&v27, 4uLL, a4);
        if (!*(_QWORD *)a4)
        {
          sentencepiece::util::Status::~Status(a4);
          v26 = 0;
          sentencepiece::mmap_util::DecodePrefix<unsigned int>(v27, v28, &v26, a4);
          if (!*(_QWORD *)a4)
          {
            sentencepiece::util::Status::~Status(a4);
            sentencepiece::mmap_util::RemovePrefix(&v27, 4uLL, a4);
            if (!*(_QWORD *)a4)
            {
              sentencepiece::util::Status::~Status(a4);
              v6 = v26;
              if (v28 < v26)
                v6 = v28;
              v23 = v27;
              v24[0] = v6;
              absl::make_unique<sentencepiece::normalizer::PrefixMatcher,std::string_view>(&v23, (uint64_t *)&v25);
              v7 = v25;
              v25 = 0;
              std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100]((uint64_t **)(a1 + 16), v7);
              std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100](&v25, 0);
              v8 = sentencepiece::mmap_util::RoundUp((sentencepiece::mmap_util *)v26, 4uLL);
              sentencepiece::mmap_util::RemovePrefix(&v27, v8, a4);
              if (!*(_QWORD *)a4)
              {
                sentencepiece::util::Status::~Status(a4);
                LODWORD(v25) = 0;
                sentencepiece::mmap_util::DecodePrefix<unsigned int>(v27, v28, &v25, a4);
                if (!*(_QWORD *)a4)
                {
                  sentencepiece::util::Status::~Status(a4);
                  sentencepiece::mmap_util::RemovePrefix(&v27, 4uLL, a4);
                  if (!*(_QWORD *)a4)
                  {
                    sentencepiece::util::Status::~Status(a4);
                    v9 = (sentencepiece::mmap_util *)v25;
                    if (!(_DWORD)v25)
                    {
                      LODWORD(v23) = 13;
                      v11 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(pieces_blob_size) > (0)", 24);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
                      goto LABEL_18;
                    }
                    if (v28 < v25)
                    {
                      LODWORD(v23) = 13;
                      v10 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(blob.size()) >= (pieces_blob_size)", 35);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
LABEL_18:
                      sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&v23);
                      return;
                    }
                    if ((v25 & 3) != 0)
                    {
                      LODWORD(v23) = 13;
                      v12 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(pieces_blob_size % pieces_.unit_size()) == (0)", 47);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
                      goto LABEL_18;
                    }
                    v13 = v27;
                    v14 = v25 >> 2;
                    *(_QWORD *)(a1 + 32) = 0;
                    *(_QWORD *)(a1 + 40) = 0;
                    if (*(_QWORD *)(a1 + 48))
                    {
                      MEMORY[0x1C3BB9B20](*(_QWORD *)(a1 + 48), 0x1000C8052888210);
                      *(_QWORD *)(a1 + 48) = 0;
                      v9 = (sentencepiece::mmap_util *)v25;
                    }
                    *(_QWORD *)(a1 + 32) = v14;
                    *(_QWORD *)(a1 + 40) = v13;
                    v15 = sentencepiece::mmap_util::RoundUp(v9, 4uLL);
                    sentencepiece::mmap_util::RemovePrefix(&v27, v15, a4);
                    if (!*(_QWORD *)a4)
                    {
                      sentencepiece::util::Status::~Status(a4);
                      v22 = 0;
                      sentencepiece::mmap_util::DecodePrefix<unsigned int>(v27, v28, &v22, a4);
                      if (!*(_QWORD *)a4)
                      {
                        sentencepiece::util::Status::~Status(a4);
                        sentencepiece::mmap_util::RemovePrefix(&v27, 4uLL, a4);
                        if (!*(_QWORD *)a4)
                        {
                          sentencepiece::util::Status::~Status(a4);
                          if (!v22)
                          {
                            LODWORD(v23) = 13;
                            v17 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(reserved_id_map_size) > (0)", 28);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                            sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
                            goto LABEL_18;
                          }
                          if (v28 < v22)
                          {
                            LODWORD(v23) = 13;
                            v16 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(blob.size()) >= (reserved_id_map_size)", 39);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                            sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
                            goto LABEL_18;
                          }
                          if ((v22 & 3) != 0)
                          {
                            LODWORD(v23) = 13;
                            v18 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(reserved_id_map_size % reserved_id_map_.unit_size()) == (0)", 60);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                            sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
                            goto LABEL_18;
                          }
                          v19 = v27;
                          v20 = v22 >> 2;
                          *(_QWORD *)(a1 + 64) = 0;
                          *(_QWORD *)(a1 + 72) = 0;
                          v21 = *(_QWORD *)(a1 + 80);
                          if (v21)
                          {
                            MEMORY[0x1C3BB9B20](v21, 0x1000C8052888210);
                            *(_QWORD *)(a1 + 80) = 0;
                          }
                          *(_QWORD *)(a1 + 64) = v20;
                          *(_QWORD *)(a1 + 72) = v19;
                          sentencepiece::util::Status::Status(a4);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_1C219D564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::mmap_util::RemovePrefix@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  _QWORD *v7;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  v4 = a1[1];
  v5 = v4 >= a2;
  v6 = v4 - a2;
  if (v5)
  {
    *a1 += a2;
    a1[1] = v6;
    return sentencepiece::util::Status::Status(a3);
  }
  else
  {
    v9 = 13;
    v7 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.cc", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"string.size() >= size", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a3);
    v10[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v10[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v11 < 0)
      operator delete((void *)v10[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x1C3BB9A90](&v12);
  }
}

void sub_1C219D700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::PieceToId(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  sentencepiece::logging *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  size_t v15;
  _QWORD *v16;
  char v18;
  uint64_t v19;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v19);
  v6 = v19;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v19);
  if (!v6)
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1[1] + 112))(a1[1], a2, a3);
  if ((int)sentencepiece::logging::GetMinLogLevel(v7) <= 2)
  {
    v18 = 0;
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
    v9 = (_QWORD *)std::ostream::operator<<();
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)") ", 2);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"LOG(", 4);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"ERROR", 5);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v19, a1);
    v14 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v19);
    v15 = strlen(v14);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v19);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v18);
  }
  return 0;
}

void sub_1C219D86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::util::Status::Status(_QWORD *this)
{
  *this = 0;
  return this;
}

_QWORD *sentencepiece::SentencePieceProcessor::status@<X0>(sentencepiece::SentencePieceProcessor *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    if (*((_QWORD *)this + 2))
    {
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      if (!*(_QWORD *)a2)
      {
        sentencepiece::util::Status::~Status(a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
        if (!*(_QWORD *)a2)
        {
          sentencepiece::util::Status::~Status(a2);
          return sentencepiece::util::Status::Status(v6);
        }
      }
      return result;
    }
    v9 = 13;
    v8 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"normalizer_", 11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Normalizer is not initialized.", 30);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a2);
  }
  else
  {
    v9 = 13;
    v7 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"model_", 6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Model is not initialized.", 25);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a2);
  }
  v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x1C3BB9A90](&v12);
}

void sub_1C219DAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::util::Status::~Status(sentencepiece::util::Status *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<sentencepiece::util::Status::Rep>::operator()[abi:ne180100]((uint64_t)this, v1);
}

sentencepiece::util::Status *sentencepiece::util::Status::Status(sentencepiece::util::Status *this, const sentencepiece::util::Status *a2)
{
  uint64_t v4;
  _DWORD *v5;
  std::string *v6;
  __int128 v7;

  if (*(_QWORD *)a2)
  {
    v4 = operator new();
    v5 = *(_DWORD **)a2;
    *(_DWORD *)v4 = **(_DWORD **)a2;
    v6 = (std::string *)(v4 + 8);
    if (*((char *)v5 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)v5 + 1), *((_QWORD *)v5 + 2));
    }
    else
    {
      v7 = *(_OWORD *)(v5 + 2);
      *(_QWORD *)(v4 + 24) = *((_QWORD *)v5 + 3);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
    }
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)this = v4;
  return this;
}

void sub_1C219DBD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::ModelInterface::status@<X0>(sentencepiece::ModelInterface *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  return sentencepiece::util::Status::Status(a2, (sentencepiece::ModelInterface *)((char *)this + 96));
}

uint64_t sentencepiece::normalizer::Normalizer::status@<X0>(sentencepiece::normalizer::Normalizer *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  return sentencepiece::util::Status::Status(a2, (sentencepiece::normalizer::Normalizer *)((char *)this + 56));
}

uint64_t sentencepiece::ModelInterface::PieceToId(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v7;

  v7 = 0;
  Darts::DoubleArrayImpl<void,void,int,void>::exactMatchSearch<int>(a1 + 56, a2, (int *)&v7, a3, 0);
  result = v7;
  if (v7 == -1)
  {
    Darts::DoubleArrayImpl<void,void,int,void>::exactMatchSearch<int>(a1 + 24, a2, (int *)&v7, a3, 0);
    result = v7;
    if (v7 == -1)
      return *(unsigned int *)(a1 + 88);
  }
  return result;
}

uint64_t Darts::DoubleArrayImpl<void,void,int,void>::exactMatchSearch<int>(uint64_t result, _BYTE *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  int v11;

  v5 = *(_QWORD *)(result + 16);
  v6 = *(_DWORD *)(v5 + 4 * a5);
  if (a4)
  {
    while (1)
    {
      v7 = *a2++;
      a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v7;
      v6 = *(_DWORD *)(v5 + 4 * a5);
      if ((v6 & 0x800000FF) != v7)
        break;
      if (!--a4)
        goto LABEL_9;
    }
  }
  else
  {
    v8 = *a2;
    if (*a2)
    {
      v9 = a2 + 1;
      while (1)
      {
        a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v8;
        v6 = *(_DWORD *)(v5 + 4 * a5);
        if ((v6 & 0x800000FF) != v8)
          break;
        v10 = *v9++;
        v8 = v10;
        if (!v10)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      if ((v6 & 0x100) != 0)
      {
        v11 = *(_DWORD *)(v5 + 4 * (a5 ^ (v6 >> 10 << ((v6 >> 6) & 8)))) & 0x7FFFFFFF;
        goto LABEL_12;
      }
    }
  }
  v11 = -1;
LABEL_12:
  *a3 = v11;
  return result;
}

_QWORD *sentencepiece::mmap_util::DecodePrefix<unsigned int>@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v8[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x1C3BB9A90](&v10);
  }
  else
  {
    *a3 = *a1;
    return sentencepiece::util::Status::Status(a4);
  }
}

void sub_1C219DE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

unint64_t sentencepiece::mmap_util::RoundUp(sentencepiece::mmap_util *this, unint64_t a2)
{
  if (!a2)
    sentencepiece::mmap_util::RoundUp();
  return ((unint64_t)this + a2 - 1) / a2 * a2;
}

_QWORD *sentencepiece::mmap_util::DecodePrefix<int>@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v8[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x1C3BB9A90](&v10);
  }
  else
  {
    *a3 = *a1;
    return sentencepiece::util::Status::Status(a4);
  }
}

void sub_1C219E028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::normalizer::PrefixMatcher,std::string_view>@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sentencepiece::normalizer::PrefixMatcher::PrefixMatcher(v4, *a1, a1[1]);
  *a2 = v4;
  return result;
}

void sub_1C219E090(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelFactory::Create(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  sentencepiece::logging *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[2];

  v14[0] = a2;
  v14[1] = a3;
  v6 = (sentencepiece::logging *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  if ((_DWORD)v6 == 1)
  {
    absl::make_unique<sentencepiece::bpe::Model,sentencepiece::MemoryMappedModelProto const&,std::string_view &>(a1, (uint64_t)v14, &v13);
    goto LABEL_5;
  }
  if (!(_DWORD)v6)
  {
    absl::make_unique<sentencepiece::unigram::Model,sentencepiece::MemoryMappedModelProto const&,std::string_view &>(a1, v14, &v13);
LABEL_5:
    *a4 = v13;
    return;
  }
  if ((int)sentencepiece::logging::GetMinLogLevel(v6) <= 2)
  {
    LOBYTE(v13) = 0;
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"model_factory.cc", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") ", 2);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"LOG(", 4);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ERROR", 5);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Unknown model_type: ", 20);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    std::ostream::operator<<();
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v13);
  }
  *a4 = 0;
}

void sub_1C219E1EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::MemoryMappedModelProto::GetModelType(sentencepiece::MemoryMappedModelProto *this)
{
  return *((_DWORD *)this + 2) >> 30;
}

_QWORD *absl::make_unique<sentencepiece::bpe::Model,sentencepiece::MemoryMappedModelProto const&,std::string_view &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _QWORD *result;

  v6 = operator new();
  result = sentencepiece::bpe::Model::Model(v6, a1, *(_DWORD **)a2, *(_QWORD *)(a2 + 8));
  *a3 = v6;
  return result;
}

void sub_1C219E268(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::bpe::Model::Model(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  _QWORD *result;

  result = (_QWORD *)sentencepiece::ModelInterface::ModelInterface(a1, a2, a3, a4);
  *result = &off_1E7BE9040;
  return result;
}

uint64_t sentencepiece::ModelInterface::ModelInterface(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t *v7;
  _DWORD *v9;

  *(_QWORD *)a1 = off_1E7BE8848;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &off_1E7BEA0E8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = &off_1E7BEA0E8;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = (uint64_t *)(a1 + 96);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  sentencepiece::util::Status::Status((_QWORD *)(a1 + 96));
  sentencepiece::ModelInterface::InitFromMMappedFile(a1, a3, a4, (sentencepiece::util::Status *)&v9);
  sentencepiece::util::Status::operator=(v7, &v9);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v9);
  return a1;
}

void sub_1C219E368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t **v3;
  sentencepiece::util::Status *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  sentencepiece::util::Status::~Status(v4);
  v2[7] = v6;
  *v7 = 0;
  v7[1] = 0;
  v9 = v2[10];
  if (v9)
  {
    MEMORY[0x1C3BB9B20](v9, 0x1000C8052888210);
    v2[10] = 0;
  }
  v2[3] = v6;
  *v5 = 0;
  v5[1] = 0;
  v10 = v2[6];
  if (v10)
  {
    MEMORY[0x1C3BB9B20](v10, 0x1000C8052888210);
    v2[6] = 0;
  }
  std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100](v3, 0);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::normalizer::PrefixMatcher::PrefixMatcher(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;

  *a1 = 0;
  if (a3)
  {
    v6 = (_QWORD *)operator new();
    *v6 = &off_1E7BEA0E8;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = 0;
    v7 = (_QWORD *)*a1;
    *a1 = v6;
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    if ((a3 & 3) == 0)
    {
      v8 = (_QWORD *)*a1;
      v9 = a3 >> 2;
      v8[1] = 0;
      v8[2] = 0;
      v10 = v8[3];
      if (v10)
      {
        MEMORY[0x1C3BB9B20](v10, 0x1000C8052888210);
        v8[3] = 0;
      }
      v8[1] = v9;
      v8[2] = a2;
    }
  }
  return a1;
}

void sub_1C219E4A4(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::normalizer::Normalizer::Normalizer(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t *v7;
  _DWORD *v8;
  _DWORD *v10;
  int v11;

  *(_QWORD *)a1 = &off_1E7BE8700;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  v7 = (uint64_t *)(a1 + 56);
  *(_BYTE *)(a1 + 48) = 0;
  sentencepiece::util::Status::Status((_QWORD *)(a1 + 56));
  v11 = 0;
  sentencepiece::mmap_util::DecodePrefix<unsigned int>(a3, a4, &v11, &v10);
  sentencepiece::util::Status::operator=(v7, &v10);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
  (*(void (**)(_DWORD **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v10, a1);
  v8 = v10;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
  if (!v8)
  {
    *(_BYTE *)(a1 + 48) = v11 != 0;
    sentencepiece::normalizer::Normalizer::Init(a1, a3 + 1, a4 - 4);
  }
  return a1;
}

void sub_1C219E5A8(_Unwind_Exception *a1)
{
  sentencepiece::util::Status *v1;
  uint64_t *v2;
  uint64_t v4;

  sentencepiece::util::Status::~Status(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void sentencepiece::normalizer::Normalizer::Init(uint64_t a1, unsigned int *a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  __int128 v11;
  unsigned int *v12;
  unint64_t v13;

  if (a3)
  {
    v12 = 0;
    v13 = 0;
    v11 = 0uLL;
    sentencepiece::normalizer::Normalizer::DecodePrecompiledCharsMap(a2, a3, &v12, &v11, &v10);
    sentencepiece::util::Status::operator=((uint64_t *)(a1 + 56), &v10);
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
    if (!*(_QWORD *)(a1 + 56))
    {
      v4 = (_QWORD *)operator new();
      *v4 = &off_1E7BEA0E8;
      v4[1] = 0;
      v4[2] = 0;
      v4[3] = 0;
      v5 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v4;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      if (!v13 || (v13 & 3) != 0)
      {
        sentencepiece::util::Status::Status(&v10, 13, "Trie blob is wrongly formatted.", 31);
        sentencepiece::util::Status::operator=((uint64_t *)(a1 + 56), &v10);
        sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
      }
      else
      {
        v6 = *(_QWORD **)(a1 + 8);
        v7 = v12;
        v8 = v13 >> 2;
        v6[1] = 0;
        v6[2] = 0;
        v9 = v6[3];
        if (v9)
        {
          MEMORY[0x1C3BB9B20](v9, 0x1000C8052888210);
          v6[3] = 0;
        }
        v6[1] = v8;
        v6[2] = v7;
        *(_OWORD *)(a1 + 16) = v11;
      }
    }
  }
}

void sub_1C219E72C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::normalizer::Normalizer::SetPrefixMatcher(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = a2;
  return result;
}

void __cxx_global_var_init_3()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t;
  }
}

{
  {
    boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_instance();
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t) = &off_1E7BEB030;
    }
  }
}

void sub_1C219E7FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t) = &off_1E7BEB9A0;
    }
  }
}

void sub_1C219E884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_16()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance(void)::t) = &off_1E7BEAEA0;
    }
  }
}

void sub_1C219E94C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_15()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance(void)::t) = &off_1E7BEAC70;
    }
  }
}

void sub_1C219EA14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_43()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t) = &off_1E7BEAD10;
    }
  }
}

void sub_1C219EADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_27()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<float>>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<float>>>::get_instance(void)::t) = &off_1E7BEAF90;
    }
  }
}

void sub_1C219EBA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_19()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t) = &off_1E7BEACC0;
    }
  }
}

void sub_1C219EC6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_41()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance(void)::t) = &off_1E7BEAEF0;
    }
  }
}

void sub_1C219ED34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_42()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t) = &off_1E7BEAE00;
    }
  }
}

void sub_1C219EDFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_26()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>>::get_instance(void)::t) = &off_1E7BEAFE0;
    }
  }
}

void sub_1C219EEC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_28()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t) = &off_1E7BEAD60;
    }
  }
}

void sub_1C219EF8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_14()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t) = &off_1E7BEB120;
    }
  }
}

void sub_1C219F054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_35()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>>::get_instance(void)::t) = &off_1E7BEB3A0;
    }
  }
}

void sub_1C219F11C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_30()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t) = &off_1E7BEB210;
    }
  }
}

void sub_1C219F1E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_37()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance(void)::t) = &off_1E7BEB350;
    }
  }
}

void sub_1C219F2AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_22()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>>::get_instance(void)::t) = &off_1E7BEB440;
    }
  }
}

void sub_1C219F374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_38()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t) = &off_1E7BEB260;
    }
  }
}

void sub_1C219F43C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_13()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t) = &off_1E7BEB2B0;
    }
  }
}

void sub_1C219F504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_10()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance(void)::t) = &off_1E7BEB0D0;
    }
  }
}

void sub_1C219F5CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_11()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance(void)::t) = &off_1E7BEB300;
    }
  }
}

void sub_1C219F694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_24()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<float>>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<float>>>::get_instance(void)::t) = &off_1E7BEB3F0;
    }
  }
}

void sub_1C219F75C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_25()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t) = &off_1E7BEB1C0;
    }
  }
}

void sub_1C219F824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance(void)::t) = &off_1E7BEB8C8;
    }
  }
}

void sub_1C219F8AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance(void)::t) = &off_1E7BEB4D8;
    }
  }
}

void sub_1C219F934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_12()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance(void)::t) = &off_1E7BEB080;
    }
  }
}

void sub_1C219F9FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_7()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>::extended_type_info_typeid();
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance(void)::t[0] = (uint64_t)off_1E7BEA828;
    }
  }
}

void sub_1C219FAB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::archive::detail::basic_iserializer::basic_iserializer(_QWORD *result, uint64_t a2)
{
  *result = off_1E7BEC418;
  result[1] = a2;
  result[2] = 0;
  return result;
}

uint64_t *boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>::extended_type_info_typeid()
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v0;

  v0 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance(void)::t, 0);
  *(_QWORD *)v0 = off_1E7BEA438;
  return boost::serialization::extended_type_info::key_register(boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance(void)::t);
}

void sub_1C219FB30(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance(void)::t);
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance(void)::t) = &off_1E7BEB718;
    }
  }
}

void sub_1C219FBB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::extended_type_info_typeid();
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance(void)::t[0] = (uint64_t)off_1E7BEAA68;
    }
  }
}

void sub_1C219FC34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::extended_type_info_typeid()
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v0;

  v0 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance(void)::t, 0);
  *(_QWORD *)v0 = off_1E7BEA678;
  return boost::serialization::extended_type_info::key_register(boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance(void)::t);
}

void sub_1C219FC98(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance(void)::t);
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>>::get_instance(void)::t) = &off_1E7BEBC28;
    }
  }
}

void sub_1C219FD20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::archive::detail::basic_oserializer::basic_oserializer(_QWORD *result, uint64_t a2)
{
  *result = off_1E7BEC468;
  result[1] = a2;
  result[2] = 0;
  return result;
}

void __cxx_global_var_init_21()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>::extended_type_info_typeid();
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>>::get_instance(void)::t[0] = (uint64_t)off_1E7BEAB88;
    }
  }
}

void sub_1C219FDF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>::extended_type_info_typeid()
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v0;

  v0 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>>::get_instance(void)::t, 0);
  *(_QWORD *)v0 = off_1E7BEA798;
  return boost::serialization::extended_type_info::key_register(boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>>::get_instance(void)::t);
}

void sub_1C219FE54(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>>::get_instance(void)::t);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_40()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>>::get_instance(void)::t) = &off_1E7BEAF40;
    }
  }
}

void sub_1C219FF1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_34()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>::extended_type_info_typeid();
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>>::get_instance(void)::t[0] = (uint64_t)off_1E7BEAAF8;
    }
  }
}

void sub_1C219FFD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>::extended_type_info_typeid()
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v0;

  v0 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>>::get_instance(void)::t, 0);
  *(_QWORD *)v0 = off_1E7BEA708;
  return boost::serialization::extended_type_info::key_register(boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>>::get_instance(void)::t);
}

void sub_1C21A003C(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>>::get_instance(void)::t);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_39()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t) = &off_1E7BEB170;
    }
  }
}

void sub_1C21A0104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>::extended_type_info_typeid();
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t[0] = (uint64_t)off_1E7BEA900;
    }
  }
}

void sub_1C21A0180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>::extended_type_info_typeid()
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v0;

  v0 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t, 0);
  *(_QWORD *)v0 = off_1E7BEA510;
  return boost::serialization::extended_type_info::key_register(boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t);
}

void sub_1C21A01E4(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t);
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t) = &off_1E7BEB958;
    }
  }
}

void sub_1C21A026C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>::extended_type_info_typeid();
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t[0] = (uint64_t)off_1E7BEA8B8;
    }
  }
}

void sub_1C21A02E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>::extended_type_info_typeid()
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v0;

  v0 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t, 0);
  *(_QWORD *)v0 = off_1E7BEA4C8;
  return boost::serialization::extended_type_info::key_register(boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t);
}

void sub_1C21A034C(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t);
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t) = &off_1E7BEBA78;
    }
  }
}

void sub_1C21A03D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::extended_type_info_typeid();
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t[0] = (uint64_t)off_1E7BEA9D8;
    }
  }
}

void sub_1C21A0450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::extended_type_info_typeid()
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v0;

  v0 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t, 0);
  *(_QWORD *)v0 = off_1E7BEA5E8;
  return boost::serialization::extended_type_info::key_register(boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t);
}

void sub_1C21A04B4(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t);
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance(void)::t) = &off_1E7BEB520;
    }
  }
}

void sub_1C21A053C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>::extended_type_info_typeid();
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance(void)::t[0] = (uint64_t)off_1E7BEA870;
    }
  }
}

void sub_1C21A05B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>::extended_type_info_typeid()
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v0;

  v0 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance(void)::t, 0);
  *(_QWORD *)v0 = off_1E7BEA480;
  return boost::serialization::extended_type_info::key_register(boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance(void)::t);
}

void sub_1C21A061C(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance(void)::t);
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t) = &off_1E7BEB9E8;
    }
  }
}

void sub_1C21A06A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::extended_type_info_typeid();
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t[0] = (uint64_t)off_1E7BEA948;
    }
  }
}

void sub_1C21A0720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::extended_type_info_typeid()
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v0;

  v0 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t, 0);
  *(_QWORD *)v0 = off_1E7BEA558;
  return boost::serialization::extended_type_info::key_register(boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t);
}

void sub_1C21A0784(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t);
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::string>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::string>>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance(void)::t) = &off_1E7BEBB50;
    }
  }
}

void sub_1C21A080C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::extended_type_info_typeid<std::vector<std::string>>::extended_type_info_typeid();
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance(void)::t[0] = (uint64_t)off_1E7BEAAB0;
    }
  }
}

void sub_1C21A0888(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *boost::serialization::extended_type_info_typeid<std::vector<std::string>>::extended_type_info_typeid()
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v0;

  v0 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance(void)::t, 0);
  *(_QWORD *)v0 = off_1E7BEA6C0;
  return boost::serialization::extended_type_info::key_register(boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance(void)::t);
}

void sub_1C21A08EC(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance(void)::t);
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<float>>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<float>>>::get_instance(void)::t) = &off_1E7BEBBE0;
    }
  }
}

void sub_1C21A0974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<float>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::extended_type_info_typeid<std::vector<float>>::extended_type_info_typeid();
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<float>>>::get_instance(void)::t[0] = (uint64_t)off_1E7BEAB40;
    }
  }
}

void sub_1C21A09F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *boost::serialization::extended_type_info_typeid<std::vector<float>>::extended_type_info_typeid()
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v0;

  v0 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<float>>>::get_instance(void)::t, 0);
  *(_QWORD *)v0 = off_1E7BEA750;
  return boost::serialization::extended_type_info::key_register(boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<float>>>::get_instance(void)::t);
}

void sub_1C21A0A54(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<float>>>::get_instance(void)::t);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_31()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t) = &off_1E7BEADB0;
    }
  }
}

void sub_1C21A0B1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_29()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::extended_type_info_typeid();
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t[0] = (uint64_t)off_1E7BEA990;
    }
  }
}

void sub_1C21A0BD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::extended_type_info_typeid()
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v0;

  v0 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t, 0);
  *(_QWORD *)v0 = off_1E7BEA5A0;
  return boost::serialization::extended_type_info::key_register(boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t);
}

void sub_1C21A0C3C(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_18()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t) = &off_1E7BEAE50;
    }
  }
}

void sub_1C21A0D04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::extended_type_info_typeid();
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t[0] = (uint64_t)off_1E7BEAA20;
    }
  }
}

void sub_1C21A0D80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::extended_type_info_typeid()
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v0;

  v0 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t, 0);
  *(_QWORD *)v0 = off_1E7BEA630;
  return boost::serialization::extended_type_info::key_register(boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t);
}

void sub_1C21A0DE4(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t);
  _Unwind_Resume(a1);
}

uint64_t *boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>::extended_type_info_typeid()
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v0;

  v0 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t, 0);
  *(_QWORD *)v0 = off_1E7BEA3F0;
  return boost::serialization::extended_type_info::key_register(boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t);
}

void sub_1C21A0E48(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0((boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t);
  _Unwind_Resume(a1);
}

uint64_t *boost::serialization::extended_type_info::key_register(uint64_t *this)
{
  uint64_t *v1;
  uint64_t *instance;
  uint64_t *v3;

  if (this[2])
  {
    v1 = this;
    instance = boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_instance();
    v3 = v1;
    return std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__emplace_multi<boost::serialization::extended_type_info const*>((uint64_t **)instance, (uint64_t *)&v3);
  }
  return this;
}

_QWORD *boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(boost::serialization::typeid_system::extended_type_info_typeid_0 *this, const char *a2)
{
  _QWORD *result;

  result = (_QWORD *)boost::serialization::extended_type_info::extended_type_info((uint64_t)this, 1, a2);
  *result = off_1E7BEA318;
  result[3] = 0;
  return result;
}

uint64_t boost::serialization::extended_type_info::extended_type_info(uint64_t this, int a2, const char *a3)
{
  *(_QWORD *)this = &unk_1E7BEA3A8;
  *(_DWORD *)(this + 8) = a2;
  *(_QWORD *)(this + 16) = a3;
  return this;
}

uint64_t *boost::serialization::typeid_system::extended_type_info_typeid_0::type_register(boost::serialization::typeid_system::extended_type_info_typeid_0 *this, const std::type_info *a2)
{
  uint64_t *instance;
  unsigned int (***v5)(_QWORD, uint64_t);

  *((_QWORD *)this + 3) = a2;
  instance = boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_instance();
  v5 = (unsigned int (***)(_QWORD, uint64_t))this;
  return std::__tree<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>::__emplace_multi<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>((uint64_t **)instance, &v5);
}

uint64_t *boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    qword_1ED7B2930 = 0;
    qword_1ED7B2928 = 0;
    boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_instance(void)::t = (uint64_t)&qword_1ED7B2928;
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::~singleton_wrapper, &boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_instance(void)::t, &dword_1C2196000);
  }
  return &boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_instance(void)::t;
}

uint64_t *std::__tree<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>::__emplace_multi<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>(uint64_t **a1, unsigned int (****a2)(_QWORD, uint64_t))
{
  uint64_t *v4;
  unsigned int (***v5)(_QWORD, uint64_t);
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x28uLL);
  v5 = *a2;
  v4[4] = (uint64_t)*a2;
  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    while (1)
    {
      v7 = (uint64_t **)v6;
      if ((**v5)(v5, v6[4]))
      {
        v6 = *v7;
        v8 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      else
      {
        v6 = v7[1];
        if (!v6)
        {
          v8 = v7 + 1;
          goto LABEL_9;
        }
      }
      v5 = (unsigned int (***)(_QWORD, uint64_t))v4[4];
    }
  }
  v8 = a1 + 1;
LABEL_9:
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at(a1, (uint64_t)v7, v8, v4);
  return v4;
}

void sub_1C21A102C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than(boost::serialization::typeid_system::extended_type_info_typeid_0 *this, const boost::serialization::extended_type_info *a2)
{
  return this != a2 && std::type_info::before[abi:ne180100](*((_QWORD *)this + 3), *((_QWORD *)a2 + 3));
}

void sub_1C21A1570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;

  nlv4_inference_orchestrator::orchestration::Token::~Token((void **)&STACK[0x2A0]);
  nlv4_inference_orchestrator::orchestration::Token::~Token(&a65);
  nlv4_inference_orchestrator::orchestration::Token::~Token((void **)&STACK[0x230]);
  _Unwind_Resume(a1);
}

void sub_1C21A1664()
{
  JUMPOUT(0x1C21A1654);
}

void sub_1C21A166C()
{
  JUMPOUT(0x1C21A165CLL);
}

void nlv4_inference_orchestrator::orchestration::EmbedderResponse::~EmbedderResponse(void **this)
{
  void *v2;
  void **v3;

  MEMORY[0x1C3BB84F4](this + 38);
  v3 = this + 35;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 279) < 0)
    operator delete(this[32]);
  if (*((char *)this + 255) < 0)
    operator delete(this[29]);
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 19));
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  v2 = *this;
  if (*this)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

void nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::getEmbeddings(nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator *this@<X0>, const nlv4_inference_orchestrator::orchestration::EmbedderRequest *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  os_signpost_id_t v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  os_signpost_id_t v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  void *v22[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  void *v26[2];
  uint64_t v27;
  _BYTE v28[80];
  _BYTE v29[88];
  uint8_t v30[16];
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 __p;
  uint64_t v35;
  _BYTE v36[80];
  _BYTE v37[88];
  uint8_t buf[168];
  uint64_t v39[3];
  uint64_t v40;

  v6 = SNLPOSLoggerForCategory(7);
  v7 = os_signpost_id_generate(v6);
  v8 = SNLPOSLoggerForCategory(7);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v9 = v8;
    if (os_signpost_enabled(v8))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "OWL Request Preprocess", "", buf, 2u);
    }
  }
  v10 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_DEFAULT, "BEGIN \"OWL Request Preprocess\"", buf, 2u);
  }
  nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::preprocessRequest((uint64_t)this, (uint64_t)a2, (uint64_t)buf);
  v11 = SNLPOSLoggerForCategory(7);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v12 = v11;
    if (os_signpost_enabled(v11))
    {
      *(_WORD *)v30 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v12, OS_SIGNPOST_INTERVAL_END, v7, "OWL Request Preprocess", "", v30, 2u);
    }
  }
  v13 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v30 = 0;
    _os_log_impl(&dword_1C2196000, v13, OS_LOG_TYPE_DEFAULT, "END \"OWL Request Preprocess\"", v30, 2u);
  }
  memset(v30, 0, sizeof(v30));
  v36[72] = 0;
  v37[0] = 0;
  v37[72] = 0;
  v31 = 0;
  __p = 0uLL;
  v35 = 0;
  v36[0] = 0;
  std::mutex::lock((std::mutex *)((char *)this + 240));
  nlv4_inference_orchestrator::inference_engine::EspressoBertModel::forward(*((nlv4_inference_orchestrator::inference_engine::EspressoBertModel **)this + 23), (const nlv4_inference_orchestrator::inference_engine::EspressoBertModelInputType *)buf, (uint64_t)v22);
  if (*(_QWORD *)v30)
  {
    *(_QWORD *)&v30[8] = *(_QWORD *)v30;
    operator delete(*(void **)v30);
  }
  *(_OWORD *)v30 = *(_OWORD *)v22;
  v31 = v23;
  v22[1] = 0;
  v23 = 0;
  v22[0] = 0;
  v32 = v24;
  v33 = v25;
  if (SHIBYTE(v35) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)v26;
  v35 = v27;
  HIBYTE(v27) = 0;
  LOBYTE(v26[0]) = 0;
  std::__optional_storage_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>>((uint64_t)v36, (uint64_t)v28);
  std::__optional_storage_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>>((uint64_t)v37, (uint64_t)v29);
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v29);
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v28);
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
  std::mutex::unlock((std::mutex *)((char *)this + 240));
  v14 = SNLPOSLoggerForCategory(7);
  v15 = os_signpost_id_generate(v14);
  v16 = SNLPOSLoggerForCategory(7);
  if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v17 = v16;
    if (os_signpost_enabled(v16))
    {
      LOWORD(v22[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v17, OS_SIGNPOST_INTERVAL_BEGIN, v15, "OWL Response Postprocess", "", (uint8_t *)v22, 2u);
    }
  }
  v18 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v22[0]) = 0;
    _os_log_impl(&dword_1C2196000, v18, OS_LOG_TYPE_DEFAULT, "BEGIN \"OWL Response Postprocess\"", (uint8_t *)v22, 2u);
  }
  nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::postProcessBertOutput((uint64_t)a2, (uint64_t *)v30, v39, (uint64_t)&v40, a3);
  v19 = SNLPOSLoggerForCategory(7);
  if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v20 = v19;
    if (os_signpost_enabled(v19))
    {
      LOWORD(v22[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v20, OS_SIGNPOST_INTERVAL_END, v15, "OWL Response Postprocess", "", (uint8_t *)v22, 2u);
    }
  }
  v21 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v22[0]) = 0;
    _os_log_impl(&dword_1C2196000, v21, OS_LOG_TYPE_DEFAULT, "END \"OWL Response Postprocess\"", (uint8_t *)v22, 2u);
  }
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v37);
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v36);
  if (SHIBYTE(v35) < 0)
    operator delete((void *)__p);
  if (*(_QWORD *)v30)
  {
    *(_QWORD *)&v30[8] = *(_QWORD *)v30;
    operator delete(*(void **)v30);
  }
  nlv4_inference_orchestrator::orchestration::BertPreprocessingOutput::~BertPreprocessingOutput((nlv4_inference_orchestrator::orchestration::BertPreprocessingOutput *)buf);
}

void sub_1C21A1B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;

  nlv4_inference_orchestrator::inference_engine::EspressoBertModelOutputType::~EspressoBertModelOutputType(&a39);
  nlv4_inference_orchestrator::orchestration::BertPreprocessingOutput::~BertPreprocessingOutput((nlv4_inference_orchestrator::orchestration::BertPreprocessingOutput *)&a69);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::postProcessBertOutput(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string::size_type v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  std::string *v25;
  void *v26;
  std::string *v27;
  int v28;
  std::string *v29;
  std::string v30;
  std::string v31;
  __int128 v32;
  uint64_t v33;
  std::string __p;
  std::string v35;
  __int128 v36;
  uint64_t v37;
  void *v38;
  _BYTE *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void **v48;

  v10 = a2[3];
  v11 = *a2;
  v12 = a2[5];
  v13 = (const void *)(*a2 + 4 * v12);
  memset(&__p, 0, sizeof(__p));
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(&__p, v13, v11 + 4 * v12 * (v10 - 1), v12 * (v10 - 1) - v12);
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v43 = 0uLL;
  v44 = 0;
  std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v38, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2);
  v14 = a2[5];
  *(_QWORD *)&v41 = v10 - 2;
  *((_QWORD *)&v41 + 1) = 1;
  v42 = v14;
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  v36 = 0uLL;
  v37 = 0;
  if (*((_BYTE *)a2 + 224))
  {
    v15 = a2[22];
    v16 = a2[19];
    v17 = a2[24];
    v46 = 0;
    v47 = 0;
    v45 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(&v45, (const void *)(v16 + 4 * v17), v16 + 4 * v17 * (v15 - 1), v17 * (v15 - 1) - v17);
    memset(&v30, 0, sizeof(v30));
    v32 = 0uLL;
    v33 = 0;
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v30, v45, (uint64_t)v46, (v46 - v45) >> 2);
    v18 = a2[24];
    v31.__r_.__value_.__r.__words[0] = v15 - 2;
    v31.__r_.__value_.__l.__size_ = 1;
    v31.__r_.__value_.__r.__words[2] = v18;
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    __p = v30;
    v35 = v31;
    v36 = v32;
    v37 = v33;
  }
  v45 = 0;
  v46 = 0;
  v47 = 0;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*>(&v45, *a3, a3[1], 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 4));
  v19 = v45;
  v20 = v46;
  v21 = v45 + 112;
  if (v45 + 112 != v46)
  {
    do
    {
      if (v19[23] < 0)
        operator delete(*(void **)v19);
      *(_OWORD *)v19 = *((_OWORD *)v19 + 7);
      *((_QWORD *)v19 + 2) = *((_QWORD *)v19 + 16);
      v19[112] = 0;
      v22 = v19 + 112;
      v19[135] = 0;
      *(_OWORD *)(v19 + 24) = *(_OWORD *)(v19 + 136);
      *(_OWORD *)(v19 + 35) = *(_OWORD *)(v19 + 147);
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v19 + 56));
      *(_OWORD *)(v19 + 56) = *(_OWORD *)(v19 + 168);
      *((_QWORD *)v19 + 9) = *((_QWORD *)v19 + 23);
      *((_QWORD *)v19 + 22) = 0;
      *((_QWORD *)v19 + 23) = 0;
      *((_QWORD *)v19 + 21) = 0;
      v23 = *((_OWORD *)v19 + 13);
      v24 = v19 + 224;
      *((_OWORD *)v19 + 5) = *((_OWORD *)v19 + 12);
      *((_OWORD *)v19 + 6) = v23;
      v19 += 112;
    }
    while (v24 != v20);
    v21 = v46;
    v19 = v22;
  }
  while (v21 != v19)
  {
    v21 -= 112;
    std::allocator<nlv4_inference_orchestrator::orchestration::Token>::destroy[abi:ne180100]((uint64_t)v21);
  }
  v46 = v19;
  std::allocator<nlv4_inference_orchestrator::orchestration::Token>::destroy[abi:ne180100]((uint64_t)(v19 - 112));
  v46 = v19 - 112;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v30 = *(std::string *)a1;
  if (*(char *)(a1 + 47) < 0)
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  else
    v31 = *(std::string *)(a1 + 24);
  v32 = 0uLL;
  v33 = 0;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*>(&v32, (uint64_t)v45, (uint64_t)v46, 0x6DB6DB6DB6DB6DB7 * ((v46 - v45) >> 4));
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)a5, v38, (uint64_t)v39, (v39 - (_BYTE *)v38) >> 2);
  *(_OWORD *)(a5 + 24) = v41;
  *(_QWORD *)(a5 + 40) = v42;
  v25 = (std::string *)(a5 + 48);
  if (SHIBYTE(v44) < 0)
  {
    std::string::__init_copy_ctor_external(v25, (const std::string::value_type *)v43, *((std::string::size_type *)&v43 + 1));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v43;
    *(_QWORD *)(a5 + 64) = v44;
  }
  *(_QWORD *)(a5 + 72) = 0;
  *(_QWORD *)(a5 + 80) = 0;
  *(_QWORD *)(a5 + 88) = 0;
  v26 = (void *)__p.__r_.__value_.__r.__words[0];
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a5 + 72), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2);
  *(std::string *)(a5 + 96) = v35;
  v27 = (std::string *)(a5 + 120);
  v28 = SHIBYTE(v37);
  if (SHIBYTE(v37) < 0)
  {
    std::string::__init_copy_ctor_external(v27, (const std::string::value_type *)v36, *((std::string::size_type *)&v36 + 1));
  }
  else
  {
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v36;
    *(_QWORD *)(a5 + 136) = v37;
  }
  *(_BYTE *)(a5 + 152) = 0;
  *(_BYTE *)(a5 + 144) = 1;
  *(_BYTE *)(a5 + 224) = 0;
  if (*((_BYTE *)a2 + 144))
  {
    *(_QWORD *)(a5 + 152) = 0;
    *(_QWORD *)(a5 + 160) = 0;
    *(_QWORD *)(a5 + 168) = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a5 + 152), (const void *)a2[9], a2[10], (a2[10] - a2[9]) >> 2);
    *(_OWORD *)(a5 + 176) = *((_OWORD *)a2 + 6);
    *(_QWORD *)(a5 + 192) = a2[14];
    v29 = (std::string *)(a5 + 200);
    if (*((char *)a2 + 143) < 0)
    {
      std::string::__init_copy_ctor_external(v29, (const std::string::value_type *)a2[15], a2[16]);
    }
    else
    {
      *(_OWORD *)&v29->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 15);
      *(_QWORD *)(a5 + 216) = a2[17];
    }
    *(_BYTE *)(a5 + 224) = 1;
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(a5 + 232), v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  else
    *(std::string *)(a5 + 232) = v30;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(a5 + 256), v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
  else
    *(std::string *)(a5 + 256) = v31;
  *(_QWORD *)(a5 + 280) = 0;
  *(_QWORD *)(a5 + 288) = 0;
  *(_QWORD *)(a5 + 296) = 0;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*>((_QWORD *)(a5 + 280), v32, *((uint64_t *)&v32 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v32 + 1) - v32) >> 4));
  MEMORY[0x1C3BB84DC](a5 + 304, a4);
  v48 = (void **)&v32;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100](&v48);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  if (v28 < 0)
    operator delete((void *)v36);
  if (v26)
    operator delete(v26);
  if (SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
}

void sub_1C21A20B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  uint64_t v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  void *v37;

  v37 = *v34;
  if (*v34)
  {
    *(_QWORD *)(v32 + 160) = v37;
    operator delete(v37);
  }
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v34);
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100](v33);
  nlv4_inference_orchestrator::orchestration::EmbeddingTensor::~EmbeddingTensor((void **)v32);
  nlv4_inference_orchestrator::orchestration::EmbedderRequest::~EmbedderRequest(&__p);
  __p = (void *)(v35 - 120);
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  nlv4_inference_orchestrator::orchestration::EmbeddingTensor::~EmbeddingTensor(&a22);
  nlv4_inference_orchestrator::orchestration::EmbeddingTensor::~EmbeddingTensor(&a32);
  _Unwind_Resume(a1);
}

void sub_1C21A21BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  if (SHIBYTE(a11) < 0)
    operator delete(a9);
  JUMPOUT(0x1C21A2194);
}

void sub_1C21A21EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  nlv4_inference_orchestrator::orchestration::EmbeddingTensor::~EmbeddingTensor(&a29);
  if (__p)
    operator delete(__p);
  JUMPOUT(0x1C21A21B4);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

void nlv4_inference_orchestrator::orchestration::BertPreprocessingOutput::~BertPreprocessingOutput(nlv4_inference_orchestrator::orchestration::BertPreprocessingOutput *this)
{
  void *v2;
  void *v3;
  void **v4;

  MEMORY[0x1C3BB84F4]((char *)this + 192);
  v4 = (void **)((char *)this + 168);
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((_BYTE *)this + 160))
  {
    v2 = (void *)*((_QWORD *)this + 17);
    if (v2)
    {
      *((_QWORD *)this + 18) = v2;
      operator delete(v2);
    }
  }
  if (*((_BYTE *)this + 128))
  {
    v4 = (void **)((char *)this + 104);
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
  if (*((_BYTE *)this + 96))
  {
    v3 = (void *)*((_QWORD *)this + 9);
    if (v3)
    {
      *((_QWORD *)this + 10) = v3;
      operator delete(v3);
    }
  }
  v4 = (void **)((char *)this + 48);
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

nlv4_inference_orchestrator::inference_engine::BertModule *nlv4_inference_orchestrator::inference_engine::BertE5MLModule::BertE5MLModule(nlv4_inference_orchestrator::inference_engine::BertModule *a1, char *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  __int128 v8[5];
  char v9;
  int v10;

  v10 = 2;
  v6 = (unsigned __int8 *)nlv4_inference_orchestrator::inference_engine::BertModule::BertModule(a1) + 432;
  LOBYTE(v8[0]) = 0;
  v9 = 0;
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::EspressoE5MLModule((uint64_t)v6, a2, a3, &v10, v6, v8);
  std::__optional_destruct_base<snlp::common::selflogging::NLXSchemaNLXClientEventMetadata,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v8);
  *(_QWORD *)a1 = &off_1E7BE96D0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1 + 98, "hidden_size");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1 + 101, "position_embeddings");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1 + 104, "seq_len");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1 + 107, "token_type_ids");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1 + 110, "exclude_special_tokens_mask");
  nlv4_inference_orchestrator::inference_engine::BertModule::initInputOutput(a1);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::allocateMemoryToPorts((E5RT::ExecutionStreamOperation **)v6);
  return a1;
}

void sub_1C21A2400(_Unwind_Exception *a1)
{
  uint64_t v1;
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule *v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;

  if (*(char *)(v1 + 879) < 0)
    operator delete(*v6);
  if (*(char *)(v1 + 855) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 831) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 807) < 0)
    operator delete(*v3);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::~EspressoE5MLModule(v2);
  nlv4_inference_orchestrator::inference_engine::BertModule::~BertModule((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t snlp::common::espresso_inference::e5ml::EspressoE5MLModule::EspressoE5MLModule(uint64_t a1, char *a2, uint64_t a3, _DWORD *a4, unsigned __int8 *a5, __int128 *a6)
{
  E5RT::ExecutionStream *v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  E5RT::ExecutionStreamOperation *v22;
  std::__shared_weak_count *v23;
  std::string __p;
  std::__shared_weak_count_vtbl *v25;

  v12 = (E5RT::ExecutionStream *)std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, "main");
  E5RT::ExecutionStream::CreateExecutionStream(v12);
  *(_DWORD *)(a1 + 32) = *a4;
  *(_DWORD *)(a1 + 40) = *a4;
  std::__optional_copy_base<snlp::common::selflogging::NLXSchemaNLXClientEventMetadata,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 48), a6);
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = *a4;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a2);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::createInferenceOperation(a1, (std::__fs::filesystem::path *)&__p, a5);
  v13 = v25;
  *(_QWORD *)(a1 + 176) = v25;
  if (v13)
  {
    v14 = (std::__shared_weak_count *)operator new();
    v15 = v25;
    v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7BECC98;
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = v15;
  }
  else
  {
    v14 = 0;
  }
  *(_QWORD *)(a1 + 184) = v14;
  v25 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v14 = *(std::__shared_weak_count **)(a1 + 184);
  }
  v22 = *(E5RT::ExecutionStreamOperation **)(a1 + 176);
  v23 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  snlp::common::espresso_inference::e5ml::WeightsHandler::WeightsHandler(a1 + 192, &v22);
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::unordered_map<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>::unordered_map(a1 + 272, a3);
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 344) = 1065353216;
  return a1;
}

void sub_1C21A2648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t *v18;
  void **v19;
  uint64_t v21;

  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  if (a16 < 0)
    operator delete(__p);
  snlp::common::espresso_inference::e5ml::MILCompiler::~MILCompiler(v19);
  v21 = *v18;
  *v18 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  float *v28;
  _QWORD v29[2];
  char v30;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v28 = (float *)(a1 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(unsigned __int8 **)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 24);
    do
    {
      v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v5 + 16));
      v8 = v7;
      v9 = *(_QWORD *)(a1 + 8);
      if (v9)
      {
        v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          v2 = v7;
          if (v7 >= v9)
            v2 = v7 % v9;
        }
        else
        {
          v2 = (v9 - 1) & v7;
        }
        v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v2);
        if (v12)
        {
          for (i = *v12; i; i = *(unsigned __int8 **)i)
          {
            v14 = *((_QWORD *)i + 1);
            if (v14 == v8)
            {
              if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v28, i + 16, v5 + 16) & 1) != 0)
                goto LABEL_44;
            }
            else
            {
              if (v11 > 1)
              {
                if (v14 >= v9)
                  v14 %= v9;
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v2)
                break;
            }
          }
        }
      }
      v15 = (char *)operator new(0x48uLL);
      v16 = v15;
      v29[0] = v15;
      v29[1] = a1 + 16;
      v30 = 0;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = v8;
      if ((char)v5[39] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v15 + 16), *((const std::string::value_type **)v5 + 2), *((_QWORD *)v5 + 3));
      }
      else
      {
        v17 = *((_OWORD *)v5 + 1);
        *((_QWORD *)v15 + 4) = *((_QWORD *)v5 + 4);
        *((_OWORD *)v15 + 1) = v17;
      }
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(v16 + 40), (uint64_t)(v5 + 40));
      v30 = 1;
      v18 = (float)(unint64_t)(*v6 + 1);
      v19 = *v28;
      if (!v9 || (float)(v19 * (float)v9) < v18)
      {
        v20 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3)
          v20 = 1;
        v21 = v20 | (2 * v9);
        v22 = vcvtps_u32_f32(v18 / v19);
        if (v21 <= v22)
          v23 = v22;
        else
          v23 = v21;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v23);
        v9 = *(_QWORD *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v2 = v8 % v9;
          else
            v2 = v8;
        }
        else
        {
          v2 = (v9 - 1) & v8;
        }
      }
      v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      v25 = v29[0];
      if (v24)
      {
        *(_QWORD *)v29[0] = *v24;
      }
      else
      {
        *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v25;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = a1 + 16;
        if (!*(_QWORD *)v25)
          goto LABEL_43;
        v26 = *(_QWORD *)(*(_QWORD *)v25 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v26 >= v9)
            v26 %= v9;
        }
        else
        {
          v26 &= v9 - 1;
        }
        v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
      }
      *v24 = v25;
LABEL_43:
      v29[0] = 0;
      ++*v6;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
LABEL_44:
      v5 = *(unsigned __int8 **)v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1C21A29B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E7BED1D0[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 24) = v3;
  }
  return a1;
}

void sub_1C21A2A5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

void snlp::common::espresso_inference::e5ml::EspressoE5MLModule::createInferenceOperation(uint64_t a1, std::__fs::filesystem::path *this, unsigned __int8 *a3)
{
  const std::__fs::filesystem::path *v6;
  std::runtime_error *exception;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string v12;
  std::string v13;
  std::string pn;
  std::string v15;

  if (snlp::common::espresso_inference::e5ml::EspressoE5MLModule::modelIsMilFormat(this, this))
  {
    snlp::common::espresso_inference::e5ml::MILCompiler::compileToE5ML((int *)(a1 + 40), (uint64_t)this, a3);
  }
  else
  {
    if (!snlp::common::espresso_inference::e5ml::EspressoE5MLModule::modelIsE5Format(this, v6))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::__fs::filesystem::path::filename[abi:ne180100](this, (uint64_t)&v12);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v13, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
      else
        v13 = v12;
      v8 = std::string::insert(&v13, 0, "The model file (");
      v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      pn.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&pn.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      v10 = std::string::append(&pn, ") is not a recognised E5-ML model format.");
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v15.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v15);
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
    }
    std::string::basic_string[abi:ne180100]<0>(&v15, "Inference Call");
    if (SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&pn, this->__pn_.__r_.__value_.__l.__data_, this->__pn_.__r_.__value_.__l.__size_);
    else
      pn = this->__pn_;
    E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp();
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
      operator delete(pn.__r_.__value_.__l.__data_);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1C21A2C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;
  uint64_t v30;

  if (*(char *)(v30 - 41) < 0)
    operator delete(*(void **)(v30 - 64));
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_12:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v28);
  goto LABEL_12;
}

void snlp::common::espresso_inference::e5ml::EspressoE5MLModule::allocateMemoryToPorts(E5RT::ExecutionStreamOperation **this)
{
  uint64_t InputPorts;
  uint64_t OutputPorts;
  unsigned __int8 *i;
  unsigned __int8 *j;

  InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(this[22]);
  OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(this[22]);
  for (i = *(unsigned __int8 **)(InputPorts + 16); i; i = *(unsigned __int8 **)i)
    snlp::common::espresso_inference::e5ml::EspressoE5MLModule::allocateMemory((uint64_t)this, *((E5RT::IOPort **)i + 5), i + 16);
  for (j = *(unsigned __int8 **)(OutputPorts + 16); j; j = *(unsigned __int8 **)j)
    snlp::common::espresso_inference::e5ml::EspressoE5MLModule::allocateMemory((uint64_t)this, *((E5RT::IOPort **)j + 5), j + 16);
}

void snlp::common::espresso_inference::e5ml::EspressoE5MLModule::allocateMemory(uint64_t a1, E5RT::IOPort *this, unsigned __int8 *a3)
{
  E5RT::TensorDescriptor *v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  std::runtime_error *v15;
  uint64_t v16;
  std::string v17;
  E5RT::OperandDescriptor *v18;
  std::__shared_weak_count *v19;

  E5RT::IOPort::GetPortDescriptor(this);
  if (!v18)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v17, "Found a null pointer to a port descriptor.");
    std::runtime_error::runtime_error(exception, &v17);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  if (!E5RT::OperandDescriptor::TryAsTensorDescriptor(v18))
  {
    v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v17, "All ports should be buffers.");
    std::runtime_error::runtime_error(v15, &v17);
    v15->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  v5 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v18);
  E5RT::TensorDescriptor::GetSize(v5);
  E5RT::BufferObject::AllocMemory();
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 312, a3, (__int128 **)&v17);
  if (v16)
  {
    v7 = (_QWORD *)operator new();
    *v7 = &off_1E7BECC60;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = v16;
  }
  else
  {
    v7 = 0;
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)v6 + 6);
  *((_QWORD *)v6 + 5) = v16;
  *((_QWORD *)v6 + 6) = v7;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v19;
  if (v19)
  {
    v12 = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1C21A2F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  std::string *v18;
  __int128 *v19;
  __int128 v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  int8x8_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unsigned __int8 **v38;
  unint64_t v39;
  void *v41;
  _QWORD v42[2];
  char v43;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  v17 = operator new(0x38uLL);
  v42[0] = v17;
  v42[1] = a1 + 16;
  v43 = 0;
  *v17 = 0;
  v17[1] = v9;
  v18 = (std::string *)(v17 + 2);
  v19 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v19, *((_QWORD *)v19 + 1));
  }
  else
  {
    v20 = *v19;
    v17[4] = *((_QWORD *)v19 + 2);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v20;
  }
  v17[5] = 0;
  v17[6] = 0;
  v43 = 1;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v10 || (float)(v22 * (float)v10) < v21)
  {
    v23 = 1;
    if (v10 >= 3)
      v23 = (v10 & (v10 - 1)) != 0;
    v24 = v23 | (2 * v10);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = (int8x8_t)v25;
    else
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v10)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v10)
    {
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (*(_QWORD *)&prime <= v33)
        prime = (int8x8_t)v33;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v27 = operator new(8 * *(_QWORD *)&prime);
          v28 = *(void **)a1;
          *(_QWORD *)a1 = v27;
          if (v28)
            operator delete(v28);
          v29 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v29++) = 0;
          while (*(_QWORD *)&prime != v29);
          v30 = (_QWORD *)*v16;
          if (*v16)
          {
            v31 = v30[1];
            v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(_QWORD *)&prime)
                v31 %= *(_QWORD *)&prime;
            }
            else
            {
              v31 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v16;
            v36 = (_QWORD *)*v30;
            if (*v30)
            {
              do
              {
                v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(_QWORD *)&prime)
                    v37 %= *(_QWORD *)&prime;
                }
                else
                {
                  v37 &= *(_QWORD *)&prime - 1;
                }
                if (v37 != v31)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v30;
                    goto LABEL_58;
                  }
                  *v30 = *v36;
                  *v36 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v37);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v37) = v36;
                  v36 = v30;
                }
                v37 = v31;
LABEL_58:
                v30 = v36;
                v36 = (_QWORD *)*v36;
                v31 = v37;
              }
              while (v36);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        v41 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v41)
          operator delete(v41);
        v10 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v38 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
  i = (unsigned __int8 *)v42[0];
  if (v38)
  {
    *(_QWORD *)v42[0] = *v38;
LABEL_75:
    *v38 = i;
    goto LABEL_76;
  }
  *(_QWORD *)v42[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v16;
  if (*(_QWORD *)i)
  {
    v39 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v39 >= v10)
        v39 %= v10;
    }
    else
    {
      v39 &= v10 - 1;
    }
    v38 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  v42[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,void *>>>>::reset[abi:ne180100]((uint64_t)v42);
  return i;
}

void sub_1C21A342C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL snlp::common::espresso_inference::e5ml::EspressoE5MLModule::modelIsMilFormat(std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2)
{
  int v3;
  _BOOL8 v4;
  size_t v5;
  std::string::size_type size;
  int v7;
  std::string *v8;
  uint64_t v9;
  void **p_p;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  std::string v18;
  std::string v19;
  void *__p;
  size_t __n;
  unsigned __int8 v22;

  std::string::basic_string[abi:ne180100]<0>(&__p, ".mil");
  if (!std::__fs::filesystem::path::__extension(this).__size_)
  {
    v4 = 0;
    goto LABEL_25;
  }
  std::__fs::filesystem::path::extension[abi:ne180100]((uint64_t)&v18, this);
  v3 = SHIBYTE(v18.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v19, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  else
    v19 = v18;
  if ((v22 & 0x80u) == 0)
    v5 = v22;
  else
    v5 = __n;
  size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  v7 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v19.__r_.__value_.__l.__size_;
  if (v5 != size)
  {
    v4 = 0;
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_29;
  }
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v19;
  else
    v8 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if ((v22 & 0x80) != 0)
  {
    v4 = memcmp(__p, v8, __n) == 0;
    if ((v7 & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_29;
  }
  if (!v22)
  {
    v4 = 1;
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
LABEL_29:
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((v3 & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_30;
  }
  v9 = v22 - 1;
  p_p = &__p;
  do
  {
    v12 = *(unsigned __int8 *)p_p;
    p_p = (void **)((char *)p_p + 1);
    v11 = v12;
    v14 = v8->__r_.__value_.__s.__data_[0];
    v8 = (std::string *)((char *)v8 + 1);
    v13 = v14;
    v16 = v9-- != 0;
    v4 = v11 == v13;
  }
  while (v11 == v13 && v16);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_29;
LABEL_24:
  if ((v3 & 0x80000000) == 0)
    goto LABEL_25;
LABEL_30:
  operator delete(v18.__r_.__value_.__l.__data_);
LABEL_25:
  if ((char)v22 < 0)
    operator delete(__p);
  return v4;
}

void sub_1C21A359C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;

  v22 = v21;
  operator delete(v22);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL snlp::common::espresso_inference::e5ml::EspressoE5MLModule::modelIsE5Format(std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2)
{
  int v3;
  _BOOL8 v4;
  size_t v5;
  std::string::size_type size;
  int v7;
  std::string *v8;
  uint64_t v9;
  void **p_p;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  std::string v18;
  std::string v19;
  void *__p;
  size_t __n;
  unsigned __int8 v22;

  std::string::basic_string[abi:ne180100]<0>(&__p, ".e5");
  if (!std::__fs::filesystem::path::__extension(this).__size_)
  {
    v4 = 0;
    goto LABEL_25;
  }
  std::__fs::filesystem::path::extension[abi:ne180100]((uint64_t)&v18, this);
  v3 = SHIBYTE(v18.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v19, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  else
    v19 = v18;
  if ((v22 & 0x80u) == 0)
    v5 = v22;
  else
    v5 = __n;
  size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  v7 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v19.__r_.__value_.__l.__size_;
  if (v5 != size)
  {
    v4 = 0;
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_29;
  }
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v19;
  else
    v8 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if ((v22 & 0x80) != 0)
  {
    v4 = memcmp(__p, v8, __n) == 0;
    if ((v7 & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_29;
  }
  if (!v22)
  {
    v4 = 1;
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
LABEL_29:
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((v3 & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_30;
  }
  v9 = v22 - 1;
  p_p = &__p;
  do
  {
    v12 = *(unsigned __int8 *)p_p;
    p_p = (void **)((char *)p_p + 1);
    v11 = v12;
    v14 = v8->__r_.__value_.__s.__data_[0];
    v8 = (std::string *)((char *)v8 + 1);
    v13 = v14;
    v16 = v9-- != 0;
    v4 = v11 == v13;
  }
  while (v11 == v13 && v16);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_29;
LABEL_24:
  if ((v3 & 0x80000000) == 0)
    goto LABEL_25;
LABEL_30:
  operator delete(v18.__r_.__value_.__l.__data_);
LABEL_25:
  if ((char)v22 < 0)
    operator delete(__p);
  return v4;
}

void sub_1C21A3728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;

  v22 = v21;
  operator delete(v22);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t snlp::common::espresso_inference::e5ml::WeightsHandler::WeightsHandler(uint64_t a1, E5RT::ExecutionStreamOperation **a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  int *v8;
  int v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t **v12;
  uint64_t *i;
  unint64_t v14;
  std::string *v15;
  std::string *v16;
  _DWORD *v17;
  const std::string::value_type **v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  std::string *v28;
  unint64_t size;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  std::string *v34;
  unint64_t v35;
  _QWORD *v36;
  std::string **v37;
  unint64_t v38;
  void *v39;
  uint64_t j;
  E5RT::ExecutionStreamOperation *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  E5RT::ExecutionStreamOperation **v47;
  std::string **v48;
  E5RT::ExecutionStreamOperation *v49[2];
  _DWORD v50[2];
  uint64_t v51[3];
  int v52;
  uint64_t v53[3];
  int v54;
  _QWORD v55[4];

  v55[3] = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v50[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(v51, "FP32");
  v52 = 0;
  std::string::basic_string[abi:ne180100]<0>(v53, "FP16");
  v54 = 2;
  std::string::basic_string[abi:ne180100]<0>(v55, "UINT8");
  v5 = 0;
  v6 = 0;
  v7 = (void **)(a1 + 40);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  v47 = a2;
  v48 = (std::string **)(a1 + 56);
  do
  {
    v8 = &v50[8 * v6];
    v9 = *v8;
    v10 = *(_QWORD *)(a1 + 48);
    if (v10)
    {
      v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
      v11.i16[0] = vaddlv_u8(v11);
      if (v11.u32[0] > 1uLL)
      {
        v2 = v9;
        if (v10 <= v9)
          v2 = v9 % v10;
      }
      else
      {
        v2 = (v10 - 1) & v9;
      }
      v12 = (uint64_t **)*((_QWORD *)*v7 + v2);
      if (v12)
      {
        for (i = *v12; i; i = (uint64_t *)*i)
        {
          v14 = i[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)i + 4) == v9)
              goto LABEL_77;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v2)
              break;
          }
        }
      }
    }
    v15 = (std::string *)operator new(0x30uLL);
    v15->__r_.__value_.__r.__words[0] = 0;
    v15->__r_.__value_.__l.__size_ = v9;
    LODWORD(v15->__r_.__value_.__r.__words[2]) = v9;
    v16 = v15 + 1;
    v17 = &v50[8 * v6];
    v18 = (const std::string::value_type **)(v17 + 2);
    if (*((char *)v8 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(v16, *v18, *((_QWORD *)v17 + 2));
      v5 = *(_QWORD *)(a1 + 64);
    }
    else
    {
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)v18;
      v15[1].__r_.__value_.__r.__words[2] = *((_QWORD *)v17 + 3);
    }
    v19 = (float)(unint64_t)(v5 + 1);
    v20 = *(float *)(a1 + 72);
    if (!v10 || (float)(v20 * (float)v10) < v19)
    {
      v21 = (v10 & (v10 - 1)) != 0;
      if (v10 < 3)
        v21 = 1;
      v22 = v21 | (2 * v10);
      v23 = vcvtps_u32_f32(v19 / v20);
      if (v22 <= v23)
        prime = (int8x8_t)v23;
      else
        prime = (int8x8_t)v22;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v10 = *(_QWORD *)(a1 + 48);
      if (*(_QWORD *)&prime > v10)
        goto LABEL_33;
      if (*(_QWORD *)&prime < v10)
      {
        v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 64) / *(float *)(a1 + 72));
        if (v10 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
        {
          v31 = std::__next_prime(v31);
        }
        else
        {
          v33 = 1 << -(char)__clz(v31 - 1);
          if (v31 >= 2)
            v31 = v33;
        }
        if (*(_QWORD *)&prime <= v31)
          prime = (int8x8_t)v31;
        if (*(_QWORD *)&prime >= v10)
        {
          v10 = *(_QWORD *)(a1 + 48);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v25 = operator new(8 * *(_QWORD *)&prime);
            v26 = *v7;
            *v7 = v25;
            if (v26)
              operator delete(v26);
            v27 = 0;
            *(int8x8_t *)(a1 + 48) = prime;
            do
              *((_QWORD *)*v7 + v27++) = 0;
            while (*(_QWORD *)&prime != v27);
            v28 = *v48;
            if (*v48)
            {
              size = v28->__r_.__value_.__l.__size_;
              v30 = (uint8x8_t)vcnt_s8(prime);
              v30.i16[0] = vaddlv_u8(v30);
              if (v30.u32[0] > 1uLL)
              {
                if (size >= *(_QWORD *)&prime)
                  size %= *(_QWORD *)&prime;
              }
              else
              {
                size &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)*v7 + size) = v48;
              v34 = (std::string *)v28->__r_.__value_.__r.__words[0];
              if (v28->__r_.__value_.__r.__words[0])
              {
                do
                {
                  v35 = v34->__r_.__value_.__l.__size_;
                  if (v30.u32[0] > 1uLL)
                  {
                    if (v35 >= *(_QWORD *)&prime)
                      v35 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v35 &= *(_QWORD *)&prime - 1;
                  }
                  if (v35 != size)
                  {
                    if (!*((_QWORD *)*v7 + v35))
                    {
                      *((_QWORD *)*v7 + v35) = v28;
                      goto LABEL_58;
                    }
                    v28->__r_.__value_.__r.__words[0] = v34->__r_.__value_.__r.__words[0];
                    v34->__r_.__value_.__r.__words[0] = **((_QWORD **)*v7 + v35);
                    **((_QWORD **)*v7 + v35) = v34;
                    v34 = v28;
                  }
                  v35 = size;
LABEL_58:
                  v28 = v34;
                  v34 = (std::string *)v34->__r_.__value_.__r.__words[0];
                  size = v35;
                }
                while (v34);
              }
            }
            v10 = (unint64_t)prime;
            goto LABEL_62;
          }
          v39 = *v7;
          *v7 = 0;
          if (v39)
            operator delete(v39);
          v10 = 0;
          *(_QWORD *)(a1 + 48) = 0;
        }
      }
LABEL_62:
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v10 <= v9)
          v2 = v9 % v10;
        else
          v2 = v9;
      }
      else
      {
        v2 = (v10 - 1) & v9;
      }
    }
    v36 = *v7;
    v37 = (std::string **)*((_QWORD *)*v7 + v2);
    if (v37)
    {
      v15->__r_.__value_.__r.__words[0] = (std::string::size_type)*v37;
LABEL_75:
      *v37 = v15;
      goto LABEL_76;
    }
    v15->__r_.__value_.__r.__words[0] = (std::string::size_type)*v48;
    *v48 = v15;
    v36[v2] = v48;
    if (v15->__r_.__value_.__r.__words[0])
    {
      v38 = *(_QWORD *)(v15->__r_.__value_.__r.__words[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v38 >= v10)
          v38 %= v10;
      }
      else
      {
        v38 &= v10 - 1;
      }
      v37 = (std::string **)((char *)*v7 + 8 * v38);
      goto LABEL_75;
    }
LABEL_76:
    v5 = *(_QWORD *)(a1 + 64) + 1;
    *(_QWORD *)(a1 + 64) = v5;
LABEL_77:
    ++v6;
  }
  while (v6 != 3);
  for (j = 0; j != -12; j -= 4)
  {
    if (SHIBYTE(v55[j + 2]) < 0)
      operator delete((void *)v55[j]);
  }
  v41 = v47[1];
  v49[0] = *v47;
  v49[1] = v41;
  if (v41)
  {
    v42 = (unint64_t *)((char *)v41 + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  snlp::common::espresso_inference::e5ml::WeightsHandler::recordPortDataTypes((uint64_t *)a1, v49);
  if (v41)
  {
    v44 = (unint64_t *)((char *)v41 + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      (*(void (**)(E5RT::ExecutionStreamOperation *))(*(_QWORD *)v41 + 16))(v41);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v41);
    }
  }
  return a1;
}

void sub_1C21A3CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table(v5);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table(v4);
  _Unwind_Resume(a1);
}

nlv4_inference_orchestrator::inference_engine::BertModule *nlv4_inference_orchestrator::inference_engine::BertModule::BertModule(nlv4_inference_orchestrator::inference_engine::BertModule *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &unk_1E7BE9600;
  *((_DWORD *)this + 2) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 2, "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 5, "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 8, "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 11, "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 14, "max_seq_length");
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  v2 = operator new(0x18uLL);
  *((_QWORD *)this + 18) = v2 + 3;
  *((_QWORD *)this + 19) = v2 + 3;
  v2[2] = 192;
  *(_OWORD *)v2 = xmmword_1C230BC30;
  *((_QWORD *)this + 17) = v2;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 20, "bert_embeddings_requires_subword_embeddings");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 23, "bert/embeddings/requires_subword_embeddings");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 26, "feature_pooling_mask");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 29, "bert_feature_extraction_output");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 32, "bert/feature_extraction_output");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 35, "bert_feature_extraction_output_subword");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 38, "bert/feature_extraction_output_subword");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 41, "bert_sentence_features");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 44, "bert/sentence_features");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 47, "input_ids");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 50, "input_mask");
  *((_WORD *)this + 212) = 0;
  return this;
}

void sub_1C21A3F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16)
{
  uint64_t v16;
  void **v17;
  void **v18;
  void **v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  void **v24;
  void **v25;
  void *v26;

  if (*(char *)(v16 + 399) < 0)
    operator delete(*v22);
  if (*(char *)(v16 + 375) < 0)
    operator delete(*v21);
  if (*(char *)(v16 + 351) < 0)
    operator delete(*v20);
  if (*(char *)(v16 + 327) < 0)
    operator delete(*v19);
  if (*(char *)(v16 + 303) < 0)
    operator delete(*v18);
  if (*(char *)(v16 + 279) < 0)
    operator delete(*v17);
  if (*(char *)(v16 + 255) < 0)
    operator delete(*v23);
  if (*(char *)(v16 + 231) < 0)
    operator delete(*v25);
  if (*(char *)(v16 + 207) < 0)
    operator delete(*a10);
  if (*(char *)(v16 + 183) < 0)
    operator delete(*a11);
  v26 = *v24;
  if (*v24)
  {
    *(_QWORD *)(v16 + 144) = v26;
    operator delete(v26);
  }
  if (*(char *)(v16 + 135) < 0)
    operator delete(*a12);
  if (*(char *)(v16 + 111) < 0)
    operator delete(*a13);
  if (*(char *)(v16 + 87) < 0)
    operator delete(*a14);
  if (*(char *)(v16 + 63) < 0)
    operator delete(*a15);
  if (*(char *)(v16 + 39) < 0)
    operator delete(*a16);
  _Unwind_Resume(a1);
}

void sub_1C21A40DC()
{
  JUMPOUT(0x1C21A404CLL);
}

void sub_1C21A40E4()
{
  JUMPOUT(0x1C21A4060);
}

void sub_1C21A40EC()
{
  JUMPOUT(0x1C21A4070);
}

void sub_1C21A40F4()
{
  JUMPOUT(0x1C21A4084);
}

void sub_1C21A40FC()
{
  JUMPOUT(0x1C21A4098);
}

void sub_1C21A4104()
{
  JUMPOUT(0x1C21A40ACLL);
}

void sub_1C21A410C()
{
  JUMPOUT(0x1C21A40C0);
}

double nlv4_inference_orchestrator::inference_engine::BertModule::initInputOutput(nlv4_inference_orchestrator::inference_engine::BertModule *this)
{
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  double result;
  __int128 v7;
  uint64_t v8;

  *((_DWORD *)this + 2) = (*(uint64_t (**)(nlv4_inference_orchestrator::inference_engine::BertModule *))(*(_QWORD *)this + 152))(this);
  (*(void (**)(__int128 *__return_ptr, nlv4_inference_orchestrator::inference_engine::BertModule *))(*(_QWORD *)this + 128))(&v7, this);
  v2 = (void **)((char *)this + 16);
  if (*((char *)this + 39) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = v7;
  *((_QWORD *)this + 4) = v8;
  (*(void (**)(__int128 *__return_ptr, nlv4_inference_orchestrator::inference_engine::BertModule *))(*(_QWORD *)this + 120))(&v7, this);
  v3 = (void **)((char *)this + 40);
  if (*((char *)this + 63) < 0)
    operator delete(*v3);
  *(_OWORD *)v3 = v7;
  *((_QWORD *)this + 7) = v8;
  (*(void (**)(__int128 *__return_ptr, nlv4_inference_orchestrator::inference_engine::BertModule *))(*(_QWORD *)this + 136))(&v7, this);
  v4 = (void **)((char *)this + 64);
  if (*((char *)this + 87) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = v7;
  *((_QWORD *)this + 10) = v8;
  (*(void (**)(__int128 *__return_ptr, nlv4_inference_orchestrator::inference_engine::BertModule *))(*(_QWORD *)this + 144))(&v7, this);
  v5 = (void **)((char *)this + 88);
  if (*((char *)this + 111) < 0)
    operator delete(*v5);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *((_QWORD *)this + 13) = v8;
  return result;
}

void nlv4_inference_orchestrator::inference_engine::BertE5MLModule::extractRequiresSubwordEmbeddingsOutputName(nlv4_inference_orchestrator::inference_engine::BertE5MLModule *this@<X0>, std::string *a2@<X8>)
{
  _QWORD *OutputPorts;
  char *v5;
  const std::string::value_type *v6;
  std::string::size_type v7;

  OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetOutputPorts(*((E5RT::ExecutionStreamOperation **)this + 76));
  v5 = (char *)this + 160;
  if (!std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(OutputPorts, (unsigned __int8 *)this + 160))
  {
    v5 = (char *)this + 184;
    if (!std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(OutputPorts, (unsigned __int8 *)this + 184))
    {
      std::string::basic_string[abi:ne180100]<0>(a2, "");
      return;
    }
    if (*((char *)this + 207) < 0)
    {
      v6 = (const std::string::value_type *)*((_QWORD *)this + 23);
      v7 = *((_QWORD *)this + 24);
      goto LABEL_9;
    }
LABEL_6:
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
    return;
  }
  if ((*((char *)this + 183) & 0x80000000) == 0)
    goto LABEL_6;
  v6 = (const std::string::value_type *)*((_QWORD *)this + 20);
  v7 = *((_QWORD *)this + 21);
LABEL_9:
  std::string::__init_copy_ctor_external(a2, v6, v7);
}

std::string *nlv4_inference_orchestrator::inference_engine::BertE5MLModule::extractSentenceFeaturesOutputName@<X0>(E5RT::ExecutionStreamOperation **this@<X0>, std::string *a2@<X8>)
{
  _QWORD *OutputPorts;
  const std::string *v5;
  std::string *result;

  OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetOutputPorts(this[76]);
  std::string::basic_string[abi:ne180100]<0>(a2, "");
  v5 = (const std::string *)(this + 41);
  if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(OutputPorts, (unsigned __int8 *)this + 328))
  {
    return std::string::operator=(a2, v5);
  }
  v5 = (const std::string *)(this + 44);
  result = (std::string *)std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(OutputPorts, (unsigned __int8 *)this + 352);
  if (result)
    return std::string::operator=(a2, v5);
  return result;
}

void sub_1C21A4354(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *nlv4_inference_orchestrator::inference_engine::BertE5MLModule::extractSubwordFeaturesOutputName@<X0>(E5RT::ExecutionStreamOperation **this@<X0>, std::string *a2@<X8>)
{
  _QWORD *OutputPorts;
  const std::string *v5;
  std::string *result;

  OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetOutputPorts(this[76]);
  std::string::basic_string[abi:ne180100]<0>(a2, "");
  v5 = (const std::string *)(this + 35);
  if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(OutputPorts, (unsigned __int8 *)this + 280))
  {
    return std::string::operator=(a2, v5);
  }
  v5 = (const std::string *)(this + 38);
  result = (std::string *)std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(OutputPorts, (unsigned __int8 *)this + 304);
  if (result)
    return std::string::operator=(a2, v5);
  return result;
}

void sub_1C21A43E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL nlv4_inference_orchestrator::inference_engine::BertE5MLModule::extractTokenFeaturesOutputName@<W0>(E5RT::ExecutionStreamOperation **this@<X0>, std::string *a2@<X8>)
{
  _QWORD *OutputPorts;
  const std::string *v5;

  OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetOutputPorts(this[76]);
  std::string::basic_string[abi:ne180100]<0>(a2, "");
  v5 = (const std::string *)(this + 29);
  if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(OutputPorts, (unsigned __int8 *)this + 232)|| (v5 = (const std::string *)(this + 32), std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(OutputPorts, (unsigned __int8 *)this + 256)))
  {
    std::string::operator=(a2, v5);
  }
  return nlv4_inference_orchestrator::inference_engine::BertModule::assertValidFeatureExtractionOutputTensorName((uint64_t)this, (uint64_t)a2);
}

void sub_1C21A4488(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertE5MLModule::extractFeaturePoolingRank(E5RT::ExecutionStreamOperation **this)
{
  _QWORD *InputPorts;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  E5RT::TensorDescriptor *v5;
  uint64_t Rank;
  unint64_t *p_shared_owners;
  unint64_t v8;
  E5RT::OperandDescriptor *v10;
  std::__shared_weak_count *v11;

  InputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetInputPorts(this[76]);
  v3 = (unsigned __int8 *)(this + 26);
  if (!std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(InputPorts, v3))return 0;
  v4 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(InputPorts, v3);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  E5RT::IOPort::GetPortDescriptor(*((E5RT::IOPort **)v4 + 5));
  v5 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v10);
  Rank = E5RT::TensorDescriptor::GetRank(v5);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)())v11->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  nlv4_inference_orchestrator::inference_engine::assertValidFeaturePoolingRank(Rank);
  return Rank;
}

void sub_1C21A4568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL nlv4_inference_orchestrator::inference_engine::BertModule::assertValidFeatureExtractionOutputTensorName(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  std::runtime_error *exception;
  uint64_t v7[3];
  void *__p[2];
  char v9;
  std::string v10;
  void **v11;
  std::string v12;
  std::string v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  result = nlv4_inference_orchestrator::inference_engine::BertModule::isFeatureExtractionOutputTensorNameValid(a1, a2);
  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "feature extraction output");
    if (*(char *)(a1 + 255) < 0)
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a1 + 232), *(_QWORD *)(a1 + 240));
    else
      v12 = *(std::string *)(a1 + 232);
    if (*(char *)(a1 + 279) < 0)
      std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(a1 + 256), *(_QWORD *)(a1 + 264));
    else
      v13 = *(std::string *)(a1 + 256);
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v7, (__int128 *)&v12, 2uLL);
    nlv4_inference_orchestrator::inference_engine::createInvalidTensorNameErrorMessage((uint64_t)__p, a2, v7);
    v11 = (void **)v7;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
    v5 = 0;
    while (1)
    {
      if (SHIBYTE(v13.__r_.__value_.__r.__words[v5 + 2]) < 0)
        operator delete(*(void **)((char *)&v12 + v5 * 8 + 24));
      v5 -= 3;
      if (v5 == -6)
      {
        if (v9 < 0)
          operator delete(__p[0]);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, &v10);
        exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9900;
      }
    }
  }
  return result;
}

void sub_1C21A46F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL nlv4_inference_orchestrator::inference_engine::BertModule::isFeatureExtractionOutputTensorNameValid(uint64_t a1, uint64_t a2)
{
  const void **v2;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v21;
  _BOOL8 result;

  v2 = (const void **)a2;
  v4 = *(unsigned __int8 *)(a2 + 23);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v4 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a1 + 255);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 240);
  if (v6 == v7)
  {
    if (v8 >= 0)
      v9 = (unsigned __int8 *)(a1 + 232);
    else
      v9 = *(unsigned __int8 **)(a1 + 232);
    if ((v4 & 0x80) != 0)
    {
      if (!memcmp(*v2, v9, v5))
        return 1;
    }
    else
    {
      if (!(_DWORD)v4)
        return 1;
      v10 = v2;
      v11 = v4;
      while (*(unsigned __int8 *)v10 == *v9)
      {
        v10 = (const void **)((char *)v10 + 1);
        ++v9;
        if (!--v11)
          return 1;
      }
    }
  }
  v12 = *(unsigned __int8 *)(a1 + 279);
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a1 + 264);
  if (v6 != v12)
    return 0;
  if (v13 >= 0)
    v14 = (unsigned __int8 *)(a1 + 256);
  else
    v14 = *(unsigned __int8 **)(a1 + 256);
  if ((v4 & 0x80) != 0)
    return memcmp(*v2, v14, v5) == 0;
  if (!(_DWORD)v4)
    return 1;
  v15 = v4 - 1;
  do
  {
    v17 = *(unsigned __int8 *)v2;
    v2 = (const void **)((char *)v2 + 1);
    v16 = v17;
    v19 = *v14++;
    v18 = v19;
    v21 = v15-- != 0;
    result = v16 == v18;
  }
  while (v16 == v18 && v21);
  return result;
}

uint64_t nlv4_inference_orchestrator::inference_engine::assertValidFeaturePoolingRank(uint64_t result)
{
  _QWORD *v1;
  std::runtime_error *exception;
  std::string v3;
  _BYTE v4[16];
  _QWORD v5[33];

  if ((result & 0xFFFFFFFE) != 2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Invalid feature pooling rank: ", 30);
    v1 = (_QWORD *)std::ostream::operator<<();
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v3);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9900;
  }
  return result;
}

void sub_1C21A4988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

_QWORD *sentencepiece::normalizer::Normalizer::Normalize@<X0>(uint64_t a1@<X0>, sentencepiece::string_util *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, sentencepiece::util::Status *a6@<X8>)
{
  unint64_t v6;
  _QWORD *result;
  unint64_t *v11;
  sentencepiece::util::Status *v12;
  unint64_t *v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  std::string::size_type i;
  void **v21;
  uint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  int v47;
  size_t v48;
  const char *v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  std::string::size_type size;
  BOOL v54;
  std::string::size_type v55;
  void **v56;
  uint64_t v57;
  char *v58;
  char *v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  std::string::size_type v71;
  _QWORD *v72;
  sentencepiece::util::Status *v73;
  sentencepiece::string_util *v74;
  unint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  void *__p;
  char v80;
  uint64_t v81;
  _QWORD v82[5];
  const std::string::value_type *v83;
  std::string::size_type v84;
  int v85;
  void **v86;
  std::string *v87;

  v6 = a3;
  v86 = (void **)a5;
  v87 = (std::string *)a4;
  *(_QWORD *)(a5 + 8) = *(_QWORD *)a5;
  if (*(char *)(a4 + 23) < 0)
  {
    **(_BYTE **)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    if (a3)
      goto LABEL_3;
    return sentencepiece::util::Status::Status(a6);
  }
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 23) = 0;
  if (!a3)
    return sentencepiece::util::Status::Status(a6);
LABEL_3:
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (*(_QWORD *)a6)
    return result;
  sentencepiece::util::Status::~Status(a6);
  v85 = 0;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32)))
  {
    do
    {
      sentencepiece::normalizer::Normalizer::NormalizePrefix(a2, a1, v6, v11, (uint64_t)&v76);
      if (v77 != 1 || *v76 != 32)
        goto LABEL_11;
      a2 = (sentencepiece::string_util *)((char *)a2 + (int)v78);
      v85 += v78;
      v6 -= (int)v78;
    }
    while (v6);
    v12 = a6;
    return sentencepiece::util::Status::Status(v12);
  }
LABEL_11:
  v73 = a6;
  std::string::reserve(v87, 3 * v6);
  std::vector<unsigned long>::reserve(v86, 3 * v6);
  v83 = "▁";
  v84 = 3;
  v82[0] = a1;
  v82[1] = &v85;
  v82[2] = &v87;
  v82[3] = &v86;
  v82[4] = &v83;
  if (!*(_BYTE *)(a1 + 48)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32)))
  {
    sentencepiece::normalizer::Normalizer::Normalize(std::string_view,std::string *,std::vector<unsigned long> *)const::$_0::operator()((uint64_t)v82);
  }
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  do
  {
    sentencepiece::normalizer::Normalizer::NormalizePrefix(a2, a1, v6, v13, (uint64_t)&v76);
    v15 = v76;
    v16 = v77;
    if ((v14 & 1) != 0)
    {
      if (!v77)
        goto LABEL_64;
      while (*v15 == 32)
      {
        ++v15;
        if (!--v16)
          goto LABEL_64;
      }
    }
    else if (!v77)
    {
      v14 = 0;
      goto LABEL_64;
    }
    v74 = a2;
    v75 = v6;
    v17 = 0;
    do
    {
      v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
      v19 = v15[v17];
      if (v18 && v19 == 32)
      {
        std::string::append(v87, v83, v84);
        if (v84)
        {
          for (i = 0; i < v84; ++i)
          {
            v21 = v86;
            v22 = v85;
            v23 = (char *)v86[1];
            v24 = (char *)v86[2];
            if (v23 >= v24)
            {
              v26 = (char *)*v86;
              v27 = (v23 - (_BYTE *)*v86) >> 3;
              v28 = v27 + 1;
              if ((unint64_t)(v27 + 1) >> 61)
                goto LABEL_114;
              v29 = v24 - v26;
              if (v29 >> 2 > v28)
                v28 = v29 >> 2;
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
                v30 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v30 = v28;
              if (v30)
              {
                v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v86 + 2), v30);
                v26 = (char *)*v21;
                v23 = (char *)v21[1];
              }
              else
              {
                v31 = 0;
              }
              v32 = &v31[8 * v27];
              *(_QWORD *)v32 = v22;
              v25 = v32 + 8;
              while (v23 != v26)
              {
                v33 = *((_QWORD *)v23 - 1);
                v23 -= 8;
                *((_QWORD *)v32 - 1) = v33;
                v32 -= 8;
              }
              *v21 = v32;
              v21[1] = v25;
              v21[2] = &v31[8 * v30];
              if (v26)
                operator delete(v26);
            }
            else
            {
              *(_QWORD *)v23 = v85;
              v25 = v23 + 8;
            }
            v21[1] = v25;
          }
        }
      }
      else
      {
        std::string::push_back(v87, v19);
        v34 = v86;
        v35 = v85;
        v36 = (char *)v86[1];
        v37 = (char *)v86[2];
        if (v36 >= v37)
        {
          v39 = (char *)*v86;
          v40 = (v36 - (_BYTE *)*v86) >> 3;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61)
LABEL_114:
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v42 = v37 - v39;
          if (v42 >> 2 > v41)
            v41 = v42 >> 2;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
            v43 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          if (v43)
          {
            v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v86 + 2), v43);
            v39 = (char *)*v34;
            v36 = (char *)v34[1];
          }
          else
          {
            v44 = 0;
          }
          v45 = &v44[8 * v40];
          *(_QWORD *)v45 = v35;
          v38 = v45 + 8;
          while (v36 != v39)
          {
            v46 = *((_QWORD *)v36 - 1);
            v36 -= 8;
            *((_QWORD *)v45 - 1) = v46;
            v45 -= 8;
          }
          *v34 = v45;
          v34[1] = v38;
          v34[2] = &v44[8 * v43];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(_QWORD *)v36 = v85;
          v38 = v36 + 8;
        }
        v34[1] = v38;
      }
      ++v17;
    }
    while (v17 != v16);
    v14 = v15[v16 - 1] == 32;
    a2 = v74;
    v6 = v75;
LABEL_64:
    v85 += v78;
    a2 = (sentencepiece::string_util *)((char *)a2 + (int)v78);
    v6 -= (int)v78;
    v14 &= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  }
  while (v6);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32)))
  {
    v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
    if (v47)
      v48 = v84;
    else
      v48 = 1;
    if (v47)
      v49 = v83;
    else
      v49 = " ";
    while (1)
    {
      v50 = v87;
      LODWORD(v51) = HIBYTE(v87->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v87->__r_.__value_.__r.__words[2]) < 0)
      {
        v52 = (std::string *)v87->__r_.__value_.__r.__words[0];
        size = v87->__r_.__value_.__l.__size_;
        if (!v48)
          goto LABEL_79;
      }
      else
      {
        v52 = v87;
        size = HIBYTE(v87->__r_.__value_.__r.__words[2]);
        if (!v48)
          goto LABEL_79;
      }
      v54 = size >= v48;
      v55 = size - v48;
      if (!v54 || memcmp((char *)v52 + v55, v49, v48))
        break;
LABEL_79:
      if ((v51 & 0x80) != 0)
        v51 = v50->__r_.__value_.__l.__size_;
      if ((_DWORD)v51 - (_DWORD)v48 < 0)
      {
        LODWORD(v76) = 13;
        v67 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v77);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"(length) >= (0)", 15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v76, (uint64_t)v73);
        goto LABEL_110;
      }
      v85 = *((_QWORD *)*v86 + (v51 - v48));
      std::string::resize(v50, (v51 - v48), 0);
      std::vector<unsigned long>::resize((uint64_t)v86, (v51 - v48));
    }
  }
  if (*(_BYTE *)(a1 + 48)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32)))
  {
    sentencepiece::normalizer::Normalizer::Normalize(std::string_view,std::string *,std::vector<unsigned long> *)const::$_0::operator()((uint64_t)v82);
  }
  v56 = v86;
  v57 = v85;
  v58 = (char *)v86[1];
  v59 = (char *)v86[2];
  if (v58 >= v59)
  {
    v61 = (char *)*v86;
    v62 = (v58 - (_BYTE *)*v86) >> 3;
    v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v64 = v59 - v61;
    if (v64 >> 2 > v63)
      v63 = v64 >> 2;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
      v65 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v65 = v63;
    if (v65)
    {
      v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v86 + 2), v65);
      v61 = (char *)*v56;
      v58 = (char *)v56[1];
    }
    else
    {
      v66 = 0;
    }
    v68 = &v66[8 * v62];
    v69 = &v66[8 * v65];
    *(_QWORD *)v68 = v57;
    v60 = v68 + 8;
    while (v58 != v61)
    {
      v70 = *((_QWORD *)v58 - 1);
      v58 -= 8;
      *((_QWORD *)v68 - 1) = v70;
      v68 -= 8;
    }
    *v56 = v68;
    v56[1] = v60;
    v56[2] = v69;
    if (v61)
      operator delete(v61);
  }
  else
  {
    *(_QWORD *)v58 = v85;
    v60 = v58 + 8;
  }
  v56[1] = v60;
  if (SHIBYTE(v87->__r_.__value_.__r.__words[2]) < 0)
    v71 = v87->__r_.__value_.__l.__size_;
  else
    v71 = HIBYTE(v87->__r_.__value_.__r.__words[2]);
  if (((_BYTE *)v86[1] - (_BYTE *)*v86) >> 3 == v71 + 1)
  {
    v12 = v73;
    return sentencepiece::util::Status::Status(v12);
  }
  LODWORD(v76) = 13;
  v72 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v77);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"(", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)") [", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"(norm_to_orig->size()) == (normalized->size() + 1)", 50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"] ", 2);
  sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v76, (uint64_t)v73);
LABEL_110:
  v77 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&v77 + *(_QWORD *)(v77 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v78 = MEMORY[0x1E0DE4FB8] + 16;
  if (v80 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x1C3BB9A90](&v81);
}

void sub_1C21A5160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::MemoryMappedNormalizerSpec::remove_extra_whitespaces(sentencepiece::MemoryMappedNormalizerSpec *this)
{
  return (*((unsigned __int8 *)this + 8) >> 1) & 1;
}

uint64_t sentencepiece::MemoryMappedNormalizerSpec::escape_whitespaces(sentencepiece::MemoryMappedNormalizerSpec *this)
{
  return (*((unsigned __int8 *)this + 8) >> 2) & 1;
}

uint64_t sentencepiece::normalizer::Normalizer::NormalizePrefix@<X0>(sentencepiece::string_util *this@<X1>, uint64_t result@<X0>, unint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  unint64_t v20;
  int v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  char v27[8];
  _QWORD v28[64];

  v28[63] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v7 = (char *)this;
    v8 = result;
    v9 = *(_QWORD *)(result + 40);
    if (v9
      && (v27[0] = 0, result = sentencepiece::normalizer::PrefixMatcher::PrefixMatch(v9, this, a3, (BOOL *)v27), v27[0]))
    {
      v10 = (int)result;
      if (a3 < (int)result)
        v10 = a3;
      *(_QWORD *)a5 = v7;
      *(_QWORD *)(a5 + 8) = v10;
      *(_DWORD *)(a5 + 16) = result;
    }
    else
    {
      v11 = *(_QWORD *)(v8 + 8);
      if (!v11)
        goto LABEL_24;
      v12 = 0;
      v13 = 0;
      v14 = *(_DWORD **)(v11 + 16);
      v15 = (*v14 >> 10 << ((*v14 >> 6) & 8));
      do
      {
        v16 = v7[v12];
        v17 = v15 ^ v16;
        v18 = v14[v17];
        if ((v18 & 0x800000FF) != (_DWORD)v16)
          break;
        v15 = v17 ^ (v18 >> 10 << ((v18 >> 6) & 8));
        if ((v18 & 0x100) != 0)
        {
          if (v13 <= 0x1F)
          {
            v19 = &v27[16 * v13];
            *(_DWORD *)v19 = v14[v15] & 0x7FFFFFFF;
            *((_QWORD *)v19 + 1) = v12 + 1;
          }
          ++v13;
        }
        ++v12;
      }
      while (a3 != v12);
      if (!v13)
        goto LABEL_24;
      v20 = 0;
      v21 = 0;
      v22 = v28;
      v23 = v28;
      do
      {
        v25 = *v23;
        v23 += 2;
        v24 = v25;
        if (!v20 || v24 > v20)
        {
          v21 = *((_DWORD *)v22 - 2);
          v20 = v24;
        }
        v22 = v23;
        --v13;
      }
      while (v13);
      if (v20)
      {
        v7 = (char *)(*(_QWORD *)(v8 + 16) + v21);
        result = strlen(v7);
      }
      else
      {
LABEL_24:
        *(_QWORD *)v27 = 0;
        v26 = sentencepiece::string_util::DecodeUTF8((sentencepiece::string_util *)v7, &v7[a3], v27, a4) != 65533
           || *(_QWORD *)v27 == 3;
        if (v26)
          LODWORD(v20) = *(_DWORD *)v27;
        else
          LODWORD(v20) = 1;
        if (v26)
          result = *(int *)v27;
        else
          result = 3;
        if (!v26)
          v7 = (char *)&sentencepiece::normalizer::Normalizer::NormalizePrefix(std::string_view)const::kReplacementChar;
      }
      *(_QWORD *)a5 = v7;
      *(_QWORD *)(a5 + 8) = result;
      *(_DWORD *)(a5 + 16) = v20;
    }
  }
  else
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = 0;
  }
  return result;
}

uint64_t sentencepiece::string_util::DecodeUTF8(sentencepiece::string_util *this, const char *a2, char *a3, unint64_t *a4)
{
  int v4;
  uint64_t result;
  unint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  int v11;
  int v12;
  char v13;
  int v14;

  v4 = *(char *)this;
  if ((v4 & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = 1;
    return *(unsigned __int8 *)this;
  }
  v6 = a2 - (const char *)this;
  if ((unint64_t)(a2 - (const char *)this) >= 2)
  {
    if ((v4 & 0xE0) == 0xC0)
    {
      v7 = *((_BYTE *)this + 1);
      if (v7 <= -65)
      {
        result = v7 & 0x3F | ((v4 & 0x1F) << 6);
        if (result >= 0x80)
        {
          v8 = 2;
LABEL_8:
          *(_QWORD *)a3 = v8;
          return result;
        }
      }
    }
    else if (v6 >= 3)
    {
      if ((v4 & 0xF0) == 0xE0)
      {
        v9 = *((char *)this + 1);
        if (v9 <= -65)
        {
          v10 = *((_BYTE *)this + 2);
          if (v10 <= -65)
          {
            result = v10 & 0x3F | ((v9 & 0x3F) << 6) & 0xFFF | ((v4 & 0xF) << 12);
            if (result >= 0x800
              && (((v4 & 0xF) << 12) - 57344 < 0x102000u || result >> 11 <= 0x1A))
            {
              v8 = 3;
              goto LABEL_8;
            }
          }
        }
      }
      else if (v6 >= 4 && (v4 & 0xF8) == 0xF0)
      {
        v11 = *((char *)this + 1);
        if (v11 <= -65)
        {
          v12 = *((char *)this + 2);
          if (v12 <= -65)
          {
            v13 = *((_BYTE *)this + 3);
            if (v13 <= -65)
            {
              v14 = ((v4 & 7) << 18) | ((v11 & 0x3F) << 12);
              result = v13 & 0x3F | ((v12 & 0x3F) << 6) | v14;
              if (result >= 0x10000 && (v14 - 57344) < 0x102000)
              {
                v8 = 4;
                goto LABEL_8;
              }
            }
          }
        }
      }
    }
  }
  *(_QWORD *)a3 = 1;
  return 65533;
}

void sentencepiece::normalizer::Normalizer::Normalize(std::string_view,std::string *,std::vector<unsigned long> *)const::$_0::operator()(uint64_t a1)
{
  int v2;
  std::string *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 32) + 32))(*(_QWORD *)(*(_QWORD *)a1 + 32));
  v3 = **(std::string ***)(a1 + 16);
  if (v2)
  {
    std::string::append(v3, **(const std::string::value_type ***)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
    {
      v4 = 0;
      do
      {
        v5 = **(_QWORD **)(a1 + 24);
        v6 = **(int **)(a1 + 8);
        v7 = *(_QWORD **)(v5 + 8);
        v8 = *(_QWORD *)(v5 + 16);
        if ((unint64_t)v7 >= v8)
        {
          v10 = *(_QWORD **)v5;
          v11 = ((uint64_t)v7 - *(_QWORD *)v5) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            goto LABEL_40;
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5 + 16, v14);
            v10 = *(_QWORD **)v5;
            v7 = *(_QWORD **)(v5 + 8);
          }
          else
          {
            v15 = 0;
          }
          v16 = &v15[8 * v11];
          *(_QWORD *)v16 = v6;
          v9 = v16 + 8;
          while (v7 != v10)
          {
            v17 = *--v7;
            *((_QWORD *)v16 - 1) = v17;
            v16 -= 8;
          }
          *(_QWORD *)v5 = v16;
          *(_QWORD *)(v5 + 8) = v9;
          *(_QWORD *)(v5 + 16) = &v15[8 * v14];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *v7 = v6;
          v9 = v7 + 1;
        }
        *(_QWORD *)(v5 + 8) = v9;
        ++v4;
      }
      while (v4 < *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    }
  }
  else
  {
    std::string::append(v3, " ");
    v18 = **(_QWORD **)(a1 + 24);
    v19 = **(int **)(a1 + 8);
    v20 = *(_QWORD **)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 16);
    if ((unint64_t)v20 >= v21)
    {
      v23 = *(_QWORD **)v18;
      v24 = ((uint64_t)v20 - *(_QWORD *)v18) >> 3;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61)
LABEL_40:
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v26 = v21 - (_QWORD)v23;
      if (v26 >> 2 > v25)
        v25 = v26 >> 2;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v18 + 16, v27);
        v23 = *(_QWORD **)v18;
        v20 = *(_QWORD **)(v18 + 8);
      }
      else
      {
        v28 = 0;
      }
      v29 = &v28[8 * v24];
      v30 = &v28[8 * v27];
      *(_QWORD *)v29 = v19;
      v22 = v29 + 8;
      while (v20 != v23)
      {
        v31 = *--v20;
        *((_QWORD *)v29 - 1) = v31;
        v29 -= 8;
      }
      *(_QWORD *)v18 = v29;
      *(_QWORD *)(v18 + 8) = v22;
      *(_QWORD *)(v18 + 16) = v30;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v20 = v19;
      v22 = v20 + 1;
    }
    *(_QWORD *)(v18 + 8) = v22;
  }
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sentencepiece::bpe::Model::SampleEncode(uint64_t *a1@<X0>, _BYTE *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>, float a5@<S0>)
{
  int v8;
  int v9;
  int v10;
  char *v11;
  __int128 v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  unint64_t v25;
  sentencepiece::random *v26;
  char *v27;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *RandomGenerator;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  sentencepiece::random *v32;
  sentencepiece::random *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  sentencepiece::random *v39;
  int v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  __int128 *v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v69[5];
  uint64_t (**v70)();
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD v75[2];
  int v76;
  void *__p;
  char *v78;
  char *v79;
  void *v80;
  char *v81;
  uint64_t v82;
  _QWORD v83[3];
  _QWORD *v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t (***__return_ptr)()))(*a1 + 16))(&v70);
  if (v70)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v70);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v70);
  if (!a3)
    goto LABEL_3;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  __p = 0;
  v78 = 0;
  v79 = 0;
  if (a3 >> 59)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  v8 = 0;
  __p = operator new(32 * a3);
  v78 = (char *)__p;
  v79 = (char *)__p + 32 * a3;
  memset(v75, 0, sizeof(v75));
  v76 = 1065353216;
  v70 = &off_1E7BE9280;
  v71 = 0u;
  v72 = 0u;
  v73 = 0;
  v74 = 256;
  v69[0] = (uint64_t)a1;
  v69[1] = (uint64_t)&v70;
  v69[2] = (uint64_t)&__p;
  v69[3] = (uint64_t)&v80;
  v69[4] = (uint64_t)v75;
  do
  {
    v86 = 0uLL;
    v9 = sentencepiece::normalizer::PrefixMatcher::PrefixMatch(a1[2], a2, a3, (BOOL *)&v85 + 8);
    *(_QWORD *)&v86 = a2;
    *((_QWORD *)&v86 + 1) = v9;
    a3 -= v9;
    if (a3)
      v10 = v8 + 1;
    else
      v10 = -1;
    LODWORD(v85) = v8 - 1;
    DWORD1(v85) = v10;
    v11 = v78;
    if (v78 >= v79)
    {
      v14 = (char *)__p;
      v15 = (v78 - (_BYTE *)__p) >> 5;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v17 = v79 - (_BYTE *)__p;
      if ((v79 - (_BYTE *)__p) >> 4 > v16)
        v16 = v17 >> 4;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
        v18 = 0x7FFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 59)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v19 = (char *)operator new(32 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = v86;
      v21 = &v19[32 * v15];
      *(_OWORD *)v21 = v85;
      *((_OWORD *)v21 + 1) = v20;
      v22 = v21;
      if (v11 != v14)
      {
        do
        {
          v23 = *((_OWORD *)v11 - 1);
          *((_OWORD *)v22 - 2) = *((_OWORD *)v11 - 2);
          *((_OWORD *)v22 - 1) = v23;
          v22 -= 32;
          v11 -= 32;
        }
        while (v11 != v14);
        v11 = v14;
      }
      v24 = &v19[32 * v18];
      v13 = v21 + 32;
      __p = v22;
      v78 = v21 + 32;
      v79 = v24;
      if (v11)
        operator delete(v11);
    }
    else
    {
      v12 = v86;
      *(_OWORD *)v78 = v85;
      *((_OWORD *)v11 + 1) = v12;
      v13 = v11 + 32;
    }
    a2 += v9;
    ++v8;
    v78 = v13;
  }
  while (a3);
  if (__p == v13)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_76;
  }
  if ((unint64_t)(v13 - (_BYTE *)__p) >= 0x21)
  {
    v25 = 1;
    do
    {
      sentencepiece::bpe::Model::SampleEncode(std::string_view,float)const::$_0::operator()(v69, v25 - 1, v25);
      ++v25;
    }
    while (v25 < (v78 - (_BYTE *)__p) >> 5);
  }
  v26 = (sentencepiece::random *)v80;
  v27 = v81;
  if (v80 != v81)
  {
    RandomGenerator = 0;
    do
    {
      v29 = *(int **)v26;
      if (v27 - (char *)v26 >= 9)
      {
        v30 = 0;
        v31 = (v27 - (char *)v26) >> 3;
        v32 = v26;
        do
        {
          v33 = v32;
          v32 = (sentencepiece::random *)((char *)v32 + 8 * v30 + 8);
          v34 = 2 * v30;
          v30 = (2 * v30) | 1;
          v35 = v34 + 2;
          if (v35 < v31)
          {
            v36 = *((_QWORD *)v32 + 1);
            v37 = *(float *)(*(_QWORD *)v32 + 8);
            v38 = *(float *)(v36 + 8);
            if (v37 < v38 || v37 == v38 && **(_DWORD **)v32 > *(_DWORD *)v36)
            {
              v32 = (sentencepiece::random *)((char *)v32 + 8);
              v30 = v35;
            }
          }
          *(_QWORD *)v33 = *(_QWORD *)v32;
        }
        while (v30 <= (uint64_t)((unint64_t)(v31 - 2) >> 1));
        v39 = (sentencepiece::random *)(v27 - 8);
        if (v32 == v39)
        {
          *(_QWORD *)v32 = v29;
        }
        else
        {
          *(_QWORD *)v32 = *(_QWORD *)v39;
          *(_QWORD *)v39 = v29;
          v26 = (sentencepiece::random *)std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPairComparator &,std::__wrap_iter<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair **>>((uint64_t)v26, (uint64_t)v32 + 8, ((sentencepiece::random *)((char *)v32 + 8) - v26) >> 3);
        }
      }
      v81 -= 8;
      v40 = *v29;
      v41 = *v29;
      v42 = __p;
      v43 = *((_QWORD *)__p + 4 * v41 + 3);
      if (!v43)
        goto LABEL_58;
      v44 = v29[1];
      v45 = *((_QWORD *)__p + 4 * v44 + 3);
      if (!v45)
        goto LABEL_58;
      v46 = v45 + v43;
      if (v46 != *((_QWORD *)v29 + 2))
        goto LABEL_58;
      if (a5 > 0.0)
      {
        if (a5 >= 1.0)
          goto LABEL_58;
        if (!RandomGenerator)
          RandomGenerator = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)sentencepiece::random::GetRandomGenerator(v26);
        v47 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(RandomGenerator);
        if (((double)v47
            + (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(RandomGenerator)
            * 4294967300.0)
           * 5.42101086e-20
           + 0.0 < a5)
          goto LABEL_58;
        v42 = __p;
        v40 = *v29;
        v44 = v29[1];
        v41 = *v29;
        v46 = *((_QWORD *)__p + 4 * v44 + 3) + *((_QWORD *)__p + 4 * v41 + 3);
      }
      v48 = (char *)&v42[8 * v41];
      v49 = (char *)&v42[8 * v44];
      *((_QWORD *)v48 + 3) = v46;
      *((_DWORD *)v48 + 1) = *((_DWORD *)v49 + 1);
      v50 = *((unsigned int *)v49 + 1);
      if ((v50 & 0x80000000) == 0)
        v42[8 * v50] = v40;
      *((_QWORD *)v49 + 2) = "";
      *((_QWORD *)v49 + 3) = 0;
      sentencepiece::bpe::Model::SampleEncode(std::string_view,float)const::$_0::operator()(v69, *((_DWORD *)__p + 8 * v41), v40);
      sentencepiece::bpe::Model::SampleEncode(std::string_view,float)const::$_0::operator()(v69, *v29, *((_DWORD *)__p + 8 * *v29 + 1));
LABEL_58:
      v26 = (sentencepiece::random *)v80;
      v27 = v81;
    }
    while (v80 != v81);
  }
  v84 = 0;
  v51 = operator new(0x20uLL);
  *v51 = &off_1E7BEC6F0;
  v51[1] = a1;
  v51[2] = v83;
  v51[3] = v75;
  *((_QWORD *)&v86 + 1) = v51;
  std::__function::__value_func<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::swap[abi:ne180100](&v85, v83);
  v52 = (__int128 *)*((_QWORD *)&v86 + 1);
  if (*((__int128 **)&v86 + 1) == &v85)
  {
    v53 = 4;
    v52 = &v85;
  }
  else
  {
    if (!*((_QWORD *)&v86 + 1))
      goto LABEL_65;
    v53 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v52 + 8 * v53))();
LABEL_65:
  v54 = 0;
  v55 = (_QWORD *)MEMORY[0x1E0DE4A50];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  do
  {
    if (v54 < 0)
    {
      LOBYTE(v85) = 1;
      v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"bpe_model.cc", 12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"(", 1);
      v57 = (_QWORD *)std::ostream::operator<<();
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)") [", 3);
      v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"(index) >= (0)", 14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"] ", 2);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v85);
    }
    v60 = __p;
    if (v54 >= (int)((unint64_t)(v78 - (_BYTE *)__p) >> 5))
    {
      LOBYTE(v85) = 1;
      v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"bpe_model.cc", 12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"(", 1);
      v62 = (_QWORD *)std::ostream::operator<<();
      v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)") [", 3);
      v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"(index) < (static_cast<int>(symbols.size()))", 44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"] ", 2);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v85);
      v60 = __p;
    }
    std::function<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::operator()((uint64_t)v83, v60[4 * v54 + 2], v60[4 * v54 + 3], (uint64_t)a4);
    v54 = *((_DWORD *)__p + 8 * v54 + 1);
  }
  while (v54 != -1);
  v65 = v84;
  if (v84 == v83)
  {
    v66 = 4;
    v65 = v83;
    goto LABEL_75;
  }
  if (v84)
  {
    v66 = 5;
LABEL_75:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
LABEL_76:
  sentencepiece::model::FreeList<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair>::~FreeList(&v70);
  if (__p)
  {
    v78 = (char *)__p;
    operator delete(__p);
  }
  if (v80)
  {
    v81 = (char *)v80;
    operator delete(v80);
  }
}

void sub_1C21A5E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  sentencepiece::model::FreeList<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair>::~FreeList(&a16);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

__n128 sentencepiece::bpe::Model::SampleEncode(std::string_view,float)const::$_0::operator()(uint64_t *a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  char *v55;
  uint64_t v56;
  __n128 result;
  uint64_t v58;
  uint64_t v59;
  __n128 *v60;
  void *v61;
  unsigned int v62;
  uint64_t v63;
  __n128 v64;
  __n128 v65;
  _QWORD v66[2];
  _OWORD *v67;

  if (a2 == -1)
    return result;
  if (a3 == -1)
    return result;
  v6 = a2;
  v7 = *(_QWORD *)a1[2];
  if (*(_BYTE *)(v7 + 32 * a2 + 8))
    return result;
  v8 = a3;
  v9 = v7 + 32 * a3;
  if (*(_BYTE *)(v9 + 8))
    return result;
  v10 = *a1;
  v11 = v7 + 32 * a2;
  v12 = *(_BYTE **)(v11 + 16);
  v13 = *(_QWORD *)(v9 + 24) + *(_QWORD *)(v11 + 24);
  v66[0] = v12;
  v66[1] = v13;
  v14 = *(unsigned int **)(v10 + 40);
  v15 = *v14;
  if (v13)
  {
    v16 = 0;
    v17 = v13;
    while (1)
    {
      v18 = *v12++;
      v16 ^= (v15 >> 10 << ((v15 >> 6) & 8)) ^ v18;
      v15 = v14[v16];
      if ((v15 & 0x800000FF) != v18)
        return result;
      if (!--v17)
        goto LABEL_17;
    }
  }
  v19 = *v12;
  if (*v12)
  {
    v16 = 0;
    v20 = v12 + 1;
    while (1)
    {
      v16 ^= (v15 >> 10 << ((v15 >> 6) & 8)) ^ v19;
      v15 = v14[v16];
      if ((v15 & 0x800000FF) != v19)
        return result;
      v21 = *v20++;
      v19 = v21;
      if (!v21)
        goto LABEL_17;
    }
  }
  v16 = 0;
LABEL_17:
  if ((v15 & 0x100) != 0)
  {
    v22 = v14[v16 ^ (v15 >> 10 << ((v15 >> 6) & 8))];
    v23 = (_QWORD *)a1[1];
    v24 = v23[5];
    v25 = v23[6];
    v26 = v23[4];
    if (v26 >= v25)
    {
      v26 = 0;
      ++v24;
      v23[4] = 0;
      v23[5] = v24;
    }
    v27 = v23[1];
    v63 = v10;
    if (v24 == (v23[2] - v27) >> 3)
    {
      v62 = v22;
      is_mul_ok(v25, 0x18uLL);
      v28 = (void *)operator new[]();
      bzero(v28, 24 * v23[6]);
      v30 = (_QWORD *)v23[2];
      v29 = v23[3];
      if ((unint64_t)v30 >= v29)
      {
        v61 = v28;
        v32 = (_QWORD *)v23[1];
        v33 = v30 - v32;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 61)
          goto LABEL_60;
        v35 = v29 - (_QWORD)v32;
        if (v35 >> 2 > v34)
          v34 = v35 >> 2;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        v37 = v61;
        if (v36)
        {
          if (v36 >> 61)
            goto LABEL_61;
          v38 = (char *)operator new(8 * v36);
          v33 = v30 - v32;
          v37 = v61;
        }
        else
        {
          v38 = 0;
        }
        v39 = &v38[8 * v33];
        v40 = &v38[8 * v36];
        *(_QWORD *)v39 = v37;
        v31 = v39 + 8;
        if (v30 != v32)
        {
          do
          {
            v41 = *--v30;
            *((_QWORD *)v39 - 1) = v41;
            v39 -= 8;
          }
          while (v30 != v32);
          v30 = (_QWORD *)v23[1];
        }
        v23[1] = v39;
        v23[2] = v31;
        v23[3] = v40;
        v22 = v62;
        if (v30)
          operator delete(v30);
      }
      else
      {
        *v30 = v28;
        v31 = v30 + 1;
        v22 = v62;
      }
      v23[2] = v31;
      v27 = v23[1];
      v26 = v23[4];
      v24 = v23[5];
      v10 = v63;
    }
    v42 = *(_QWORD *)(v27 + 8 * v24) + 24 * v26;
    v23[4] = v26 + 1;
    *(_DWORD *)v42 = a2;
    *(_DWORD *)(v42 + 4) = a3;
    v43 = v22 & 0x7FFFFFFF;
    *(float *)(v42 + 8) = (*(float (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
    *(_QWORD *)(v42 + 16) = v13;
    v44 = (uint64_t *)a1[3];
    v46 = (_QWORD *)v44[1];
    v45 = v44[2];
    if ((unint64_t)v46 < v45)
    {
      *v46 = v42;
      v47 = (uint64_t)(v46 + 1);
LABEL_58:
      v44[1] = v47;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPairComparator &,std::__wrap_iter<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair **>>(*v44, v47, (v47 - *v44) >> 3);
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v10 + 8) + 128))(*(_QWORD *)(v10 + 8), v43))
      {
        v58 = *(_QWORD *)a1[2];
        v64 = *(__n128 *)(v58 + 32 * v6 + 16);
        v65 = *(__n128 *)(v58 + 32 * v8 + 16);
        v59 = a1[4];
        v67 = v66;
        v60 = (__n128 *)std::__hash_table<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>(v59, (uint64_t)v66, (uint64_t)&std::piecewise_construct, &v67);
        result = v64;
        v60[2] = v64;
        v60[3] = v65;
      }
      return result;
    }
    v48 = *v44;
    v49 = ((uint64_t)v46 - *v44) >> 3;
    v50 = v49 + 1;
    if (!((unint64_t)(v49 + 1) >> 61))
    {
      v51 = v45 - v48;
      if (v51 >> 2 > v50)
        v50 = v51 >> 2;
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
        v52 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v52 = v50;
      if (!v52)
      {
        v53 = 0;
        goto LABEL_51;
      }
      if (!(v52 >> 61))
      {
        v53 = (char *)operator new(8 * v52);
LABEL_51:
        v54 = (uint64_t *)&v53[8 * v49];
        v55 = &v53[8 * v52];
        *v54 = v42;
        v47 = (uint64_t)(v54 + 1);
        if (v46 == (_QWORD *)v48)
        {
          v10 = v63;
        }
        else
        {
          v10 = v63;
          do
          {
            v56 = *--v46;
            *--v54 = v56;
          }
          while (v46 != (_QWORD *)v48);
          v46 = (_QWORD *)*v44;
        }
        *v44 = (uint64_t)v54;
        v44[1] = v47;
        v44[2] = (uint64_t)v55;
        if (v46)
          operator delete(v46);
        goto LABEL_58;
      }
LABEL_61:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_60:
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  }
  return result;
}

uint64_t sentencepiece::normalizer::PrefixMatcher::PrefixMatch(uint64_t a1, _BYTE *a2, uint64_t a3, BOOL *a4)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  uint64_t result;
  int *v18;
  unsigned int v19;
  int v20;
  int v21;
  _BYTE v22[1024];
  _QWORD v23[128];

  v23[127] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)a1)
  {
    if (a4)
      *a4 = 0;
    goto LABEL_33;
  }
  v4 = *(_DWORD **)(*(_QWORD *)a1 + 16);
  v5 = (*v4 >> 10 << ((*v4 >> 6) & 8));
  if (a3)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = a2[v6];
      v9 = v5 ^ v8;
      v10 = v4[v9];
      if ((v10 & 0x800000FF) != (_DWORD)v8)
        break;
      v5 = v9 ^ (v10 >> 10 << ((v10 >> 6) & 8));
      if ((v10 & 0x100) != 0)
      {
        if (v7 <= 0x3F)
        {
          v11 = &v22[16 * v7];
          *(_DWORD *)v11 = v4[v5] & 0x7FFFFFFF;
          *((_QWORD *)v11 + 1) = v6 + 1;
        }
        ++v7;
      }
      ++v6;
    }
    while (a3 != v6);
  }
  else
  {
    v12 = *a2;
    if (*a2)
    {
      v7 = 0;
      v13 = 1;
      do
      {
        v14 = v5 ^ v12;
        v15 = v4[v14];
        if ((v15 & 0x800000FF) != v12)
          break;
        v5 = v14 ^ (v15 >> 10 << ((v15 >> 6) & 8));
        if ((v15 & 0x100) != 0)
        {
          if (v7 <= 0x3F)
          {
            v16 = &v22[16 * v7];
            *(_DWORD *)v16 = v4[v5] & 0x7FFFFFFF;
            *((_QWORD *)v16 + 1) = v13;
          }
          ++v7;
        }
        v12 = a2[v13++];
      }
      while (v12);
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
  if (a4)
    *a4 = (int)v7 > 0;
  if (!(_DWORD)v7)
  {
LABEL_33:
    v21 = asc_1C231416F[(unint64_t)*a2 >> 4];
    if (v21 >= (int)a3)
      return a3;
    else
      return v21;
  }
  if ((int)v7 < 1)
    return 0;
  LODWORD(result) = 0;
  v7 = v7;
  v18 = (int *)v23;
  do
  {
    v20 = *v18;
    v18 += 4;
    v19 = v20;
    if ((int)result <= v20)
      result = v19;
    else
      result = result;
    --v7;
  }
  while (v7);
  return result;
}

BOOL sentencepiece::MemoryMappedModelProto::PieceIsUnused(sentencepiece::MemoryMappedModelProto *this, int a2)
{
  return *(_BYTE *)(*((_QWORD *)this + 7) + a2) == 4;
}

float sentencepiece::MemoryMappedModelProto::GetScore(sentencepiece::MemoryMappedModelProto *this, int a2)
{
  return *(float *)(*((_QWORD *)this + 8) + 4 * a2);
}

uint64_t sentencepiece::ModelInterface::GetScore(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
}

uint64_t std::unordered_map<sentencepiece::unigram::`anonymous namespace'::Hypothesis const*,sentencepiece::unigram::`anonymous namespace'::Hypothesis*>::~unordered_map[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::function<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v6 = a4;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, v7, &v6);
}

void std::__function::__func<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2,std::allocator<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2>,void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::operator()(uint64_t a1, _QWORD *a2, void ***a3)
{
  uint64_t v4;
  void **v5;
  _QWORD **v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;

  v4 = a2[1];
  v5 = *a3;
  *(_QWORD *)&v33 = *a2;
  *((_QWORD *)&v33 + 1) = v4;
  v6 = *(_QWORD ***)(a1 + 8);
  v7 = ((uint64_t (*)(_QWORD **, _QWORD, uint64_t))(*v6)[14])(v6, v33, v4);
  if ((_DWORD)v7 == -1 || ((*(uint64_t (**)(_QWORD *, uint64_t))(*v6[1] + 128))(v6[1], v7) & 1) == 0)
  {
    v10 = (char *)v5[2];
    v11 = (char *)v5[1];
    if (v11 >= v10)
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)*v5) >> 3);
      v14 = v13 + 1;
      if (v13 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (_BYTE *)*v5) >> 3);
        if (2 * v15 > v14)
          v14 = 2 * v15;
        if (v15 >= 0x555555555555555)
          v16 = 0xAAAAAAAAAAAAAAALL;
        else
          v16 = v14;
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)(v5 + 2), v16);
        v18 = &v17[24 * v13];
        v20 = &v17[24 * v19];
        *(_OWORD *)v18 = v33;
        *((_DWORD *)v18 + 4) = v7;
        v12 = v18 + 24;
        v22 = (char *)*v5;
        v21 = (char *)v5[1];
        if (v21 == *v5)
          goto LABEL_16;
        do
        {
          v23 = *(_OWORD *)(v21 - 24);
          *((_QWORD *)v18 - 1) = *((_QWORD *)v21 - 1);
          *(_OWORD *)(v18 - 24) = v23;
          v18 -= 24;
          v21 -= 24;
        }
        while (v21 != v22);
        goto LABEL_15;
      }
LABEL_30:
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
  }
  else
  {
    v8 = std::__hash_table<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>>>::find<std::string_view>(*(_QWORD **)(a1 + 24), (uint64_t)&v33);
    if (v8)
    {
      v9 = (uint64_t *)v8;
      std::function<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::operator()(*(_QWORD *)(a1 + 16), v9[4], v9[5], (uint64_t)v5);
      std::function<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::operator()(*(_QWORD *)(a1 + 16), v9[6], v9[7], (uint64_t)v5);
      return;
    }
    v24 = (char *)v5[2];
    v11 = (char *)v5[1];
    if (v11 >= v24)
    {
      v25 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)*v5) >> 3);
      v26 = v25 + 1;
      if (v25 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        v27 = 0xAAAAAAAAAAAAAAABLL * ((v24 - (_BYTE *)*v5) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)(v5 + 2), v28);
        v18 = &v29[24 * v25];
        v20 = &v29[24 * v30];
        *(_OWORD *)v18 = v33;
        *((_DWORD *)v18 + 4) = v7;
        v12 = v18 + 24;
        v31 = (char *)*v5;
        v21 = (char *)v5[1];
        if (v21 == *v5)
          goto LABEL_16;
        do
        {
          v32 = *(_OWORD *)(v21 - 24);
          *((_QWORD *)v18 - 1) = *((_QWORD *)v21 - 1);
          *(_OWORD *)(v18 - 24) = v32;
          v18 -= 24;
          v21 -= 24;
        }
        while (v21 != v31);
LABEL_15:
        v21 = (char *)*v5;
LABEL_16:
        *v5 = v18;
        v5[1] = v12;
        v5[2] = v20;
        if (v21)
          operator delete(v21);
        goto LABEL_18;
      }
      goto LABEL_30;
    }
  }
  *(_OWORD *)v11 = v33;
  *((_DWORD *)v11 + 4) = v7;
  v12 = v11 + 24;
LABEL_18:
  v5[1] = v12;
}

uint64_t sentencepiece::MemoryMappedNormalizerSpec::add_dummy_prefix(sentencepiece::MemoryMappedNormalizerSpec *this)
{
  return *((_DWORD *)this + 2) & 1;
}

_QWORD *sentencepiece::model::FreeList<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair>::~FreeList(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E7BE9280;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x1C3BB9B20](*v2, 0x1000C801E56706BLL);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void __cxx_global_var_init_4()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t;
  }
}

{
  {
    boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_instance();
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t) = &off_1E7BEABD0;
    }
  }
}

void sub_1C21A6938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t) = &off_1E7BEB490;
    }
  }
}

void sub_1C21A69C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init()
{
  {
    boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::binary_iarchive>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::binary_iarchive>>::get_instance();
  }
}

void __cxx_global_var_init_0()
{
  {
    boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::binary_oarchive>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::binary_oarchive>>::get_instance();
  }
}

void __cxx_global_var_init_1()
{
  {
    boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::m_instance = (uint64_t)boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_instance();
  }
}

void __cxx_global_var_init_2()
{
  {
    boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::m_instance = (uint64_t)boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_instance();
  }
}

{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_5()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t;
  }
}

{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t;
  }
}

uint64_t *boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    qword_1ED7B2FF8 = 0;
    qword_1ED7B2FF0 = 0;
    boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_instance(void)::t = (uint64_t)&qword_1ED7B2FF0;
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::~singleton_wrapper, &boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_instance(void)::t, &dword_1C2196000);
  }
  return &boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_instance(void)::t;
}

uint64_t *boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::binary_oarchive>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    qword_1ED7B2FE0 = 0;
    qword_1ED7B2FD8 = 0;
    boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::binary_oarchive>>::get_instance(void)::t = (uint64_t)&qword_1ED7B2FD8;
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::binary_oarchive>>::~singleton_wrapper, &boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::binary_oarchive>>::get_instance(void)::t, &dword_1C2196000);
  }
  return &boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::binary_oarchive>>::get_instance(void)::t;
}

uint64_t *boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::binary_iarchive>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    qword_1ED7B2FC8 = 0;
    qword_1ED7B2FC0 = 0;
    boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::binary_iarchive>>::get_instance(void)::t = (uint64_t)&qword_1ED7B2FC0;
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::binary_iarchive>>::~singleton_wrapper, &boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::binary_iarchive>>::get_instance(void)::t, &dword_1C2196000);
  }
  return &boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::binary_iarchive>>::get_instance(void)::t;
}

uint64_t *boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    qword_1ED7B2FB0 = 0;
    qword_1ED7B2FA8 = 0;
    boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_instance(void)::t = (uint64_t)&qword_1ED7B2FA8;
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::~singleton_wrapper, &boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_instance(void)::t, &dword_1C2196000);
  }
  return &boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_instance(void)::t;
}

uint64_t *boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    qword_1ED7B2F98 = 0;
    qword_1ED7B2F90 = 0;
    boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_instance(void)::t = (uint64_t)&qword_1ED7B2F90;
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::~singleton_wrapper, &boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_instance(void)::t, &dword_1C2196000);
  }
  return &boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_instance(void)::t;
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t) = &off_1E7BEB880;
    }
  }
}

void sub_1C21A6E2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>::extended_type_info_typeid();
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t[0] = (uint64_t)off_1E7BEA7E0;
    }
  }
}

void sub_1C21A6EA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::forward(E5RT::ExecutionStreamOperation **this, const nlv4_inference_orchestrator::inference_engine::BertModuleInputType *a2)
{
  NSObject *v4;
  NSObject *v5;
  os_signpost_id_t v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  E5RT::ExecutionStreamOperation **v13;
  NSObject *v14;
  os_signpost_id_t v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  os_signpost_id_t v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  os_signpost_id_t v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  os_signpost_id_t v44;
  NSObject *v45;
  NSObject *v46;
  NSObject *v47;
  NSObject *v48;
  NSObject *v49;
  NSObject *v50;
  NSObject *v51;
  os_signpost_id_t v52;
  NSObject *v53;
  NSObject *v54;
  NSObject *v55;
  NSObject *v56;
  NSObject *v57;
  NSObject *v58;
  NSObject *v59;
  os_signpost_id_t v60;
  NSObject *v61;
  NSObject *v62;
  NSObject *v63;
  NSObject *v64;
  NSObject *v65;
  NSObject *v66;
  NSObject *v67;
  std::runtime_error *exception;
  std::__shared_weak_count *v69;
  uint8_t v70[24];
  std::string v71;
  uint8_t buf[8];
  void *v73;
  void *__p;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float *v82;
  float *v83;
  char v84;

  v4 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C2196000, v4, OS_LOG_TYPE_DEBUG, "Executing reshapable E5-ML inference.", buf, 2u);
  }
  nlv4_inference_orchestrator::inference_engine::BertModuleInputType::BertModuleInputType((nlv4_inference_orchestrator::inference_engine::BertModuleInputType *)buf, a2);
  if (!v84 || v82 == v83)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v71, "sequence Length tensor incorrectly specified for Dynamic E5ML module, Bert reshape failed!");
    std::runtime_error::runtime_error(exception, &v71);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::reshapeStream((nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule *)this, (unint64_t)*v82, (uint64_t)&v71);
  v5 = SNLPOSLoggerForCategory(7);
  v6 = os_signpost_id_generate(v5);
  v7 = SNLPOSLoggerForCategory(7);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v8 = v7;
    if (os_signpost_enabled(v7))
    {
      *(_WORD *)v70 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v6, "Reshaping Bert E5ML Inference network", "", v70, 2u);
    }
  }
  v9 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v70 = 0;
    _os_log_impl(&dword_1C2196000, v9, OS_LOG_TYPE_DEFAULT, "BEGIN \"Reshaping Bert E5ML Inference network\"", v70, 2u);
  }
  E5RT::ExecutionStreamOperation::ReshapeOperation();
  v10 = SNLPOSLoggerForCategory(7);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v11 = v10;
    if (os_signpost_enabled(v10))
    {
      *(_WORD *)v70 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v11, OS_SIGNPOST_INTERVAL_END, v6, "Reshaping Bert E5ML Inference network", "", v70, 2u);
    }
  }
  v12 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v70 = 0;
    _os_log_impl(&dword_1C2196000, v12, OS_LOG_TYPE_DEFAULT, "END \"Reshaping Bert E5ML Inference network\"", v70, 2u);
  }
  v13 = this + 54;
  v14 = SNLPOSLoggerForCategory(7);
  v15 = os_signpost_id_generate(v14);
  v16 = SNLPOSLoggerForCategory(7);
  if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v17 = v16;
    if (os_signpost_enabled(v16))
    {
      *(_WORD *)v70 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v17, OS_SIGNPOST_INTERVAL_BEGIN, v15, "Binding to Bert E5ML Inference network", "", v70, 2u);
    }
  }
  v18 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v70 = 0;
    _os_log_impl(&dword_1C2196000, v18, OS_LOG_TYPE_DEFAULT, "BEGIN \"Binding to Bert E5ML Inference network\"", v70, 2u);
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::bindPorts(this + 54);
  v19 = SNLPOSLoggerForCategory(7);
  if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v20 = v19;
    if (os_signpost_enabled(v19))
    {
      *(_WORD *)v70 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v20, OS_SIGNPOST_INTERVAL_END, v15, "Binding to Bert E5ML Inference network", "", v70, 2u);
    }
  }
  v21 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v70 = 0;
    _os_log_impl(&dword_1C2196000, v21, OS_LOG_TYPE_DEFAULT, "END \"Binding to Bert E5ML Inference network\"", v70, 2u);
  }
  v22 = SNLPOSLoggerForCategory(7);
  v23 = os_signpost_id_generate(v22);
  v24 = SNLPOSLoggerForCategory(7);
  if (v23 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v25 = v24;
    if (os_signpost_enabled(v24))
    {
      *(_WORD *)v70 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v25, OS_SIGNPOST_INTERVAL_BEGIN, v23, "Setting inputs of Bert E5ML Inference network", "", v70, 2u);
    }
  }
  v26 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v70 = 0;
    _os_log_impl(&dword_1C2196000, v26, OS_LOG_TYPE_DEFAULT, "BEGIN \"Setting inputs of Bert E5ML Inference network\"", v70, 2u);
  }
  (*((void (**)(E5RT::ExecutionStreamOperation **, uint8_t *))*this + 21))(this, buf);
  v27 = SNLPOSLoggerForCategory(7);
  if (v23 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v28 = v27;
    if (os_signpost_enabled(v27))
    {
      *(_WORD *)v70 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v28, OS_SIGNPOST_INTERVAL_END, v23, "Setting inputs of Bert E5ML Inference network", "", v70, 2u);
    }
  }
  v29 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v70 = 0;
    _os_log_impl(&dword_1C2196000, v29, OS_LOG_TYPE_DEFAULT, "END \"Setting inputs of Bert E5ML Inference network\"", v70, 2u);
  }
  v30 = SNLPOSLoggerForCategory(7);
  v31 = os_signpost_id_generate(v30);
  v32 = SNLPOSLoggerForCategory(7);
  if (v31 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v33 = v32;
    if (os_signpost_enabled(v32))
    {
      *(_WORD *)v70 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v33, OS_SIGNPOST_INTERVAL_BEGIN, v31, "Encode Operation of Bert E5ML Inference network", "", v70, 2u);
    }
  }
  v34 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v70 = 0;
    _os_log_impl(&dword_1C2196000, v34, OS_LOG_TYPE_DEFAULT, "BEGIN \"Encode Operation of Bert E5ML Inference network\"", v70, 2u);
  }
  v35 = (std::__shared_weak_count *)this[77];
  v69 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(p_shared_owners);
    while (__stxr(v37 + 1, p_shared_owners));
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v69)
  {
    v38 = (unint64_t *)&v69->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v40 = SNLPOSLoggerForCategory(7);
  if (v31 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v41 = v40;
    if (os_signpost_enabled(v40))
    {
      *(_WORD *)v70 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v41, OS_SIGNPOST_INTERVAL_END, v31, "Encode Operation of Bert E5ML Inference network", "", v70, 2u);
    }
  }
  v42 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v70 = 0;
    _os_log_impl(&dword_1C2196000, v42, OS_LOG_TYPE_DEFAULT, "END \"Encode Operation of Bert E5ML Inference network\"", v70, 2u);
  }
  v43 = SNLPOSLoggerForCategory(7);
  v44 = os_signpost_id_generate(v43);
  v45 = SNLPOSLoggerForCategory(7);
  if (v44 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v46 = v45;
    if (os_signpost_enabled(v45))
    {
      *(_WORD *)v70 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v46, OS_SIGNPOST_INTERVAL_BEGIN, v44, "Execute Bert E5ML Inference network", "", v70, 2u);
    }
  }
  v47 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v70 = 0;
    _os_log_impl(&dword_1C2196000, v47, OS_LOG_TYPE_DEFAULT, "BEGIN \"Execute Bert E5ML Inference network\"", v70, 2u);
  }
  E5RT::ExecutionStream::ExecuteStreamSync(this[57]);
  v48 = SNLPOSLoggerForCategory(7);
  if (v44 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v49 = v48;
    if (os_signpost_enabled(v48))
    {
      *(_WORD *)v70 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v49, OS_SIGNPOST_INTERVAL_END, v44, "Execute Bert E5ML Inference network", "", v70, 2u);
    }
  }
  v50 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v70 = 0;
    _os_log_impl(&dword_1C2196000, v50, OS_LOG_TYPE_DEFAULT, "END \"Execute Bert E5ML Inference network\"", v70, 2u);
  }
  v51 = SNLPOSLoggerForCategory(7);
  v52 = os_signpost_id_generate(v51);
  v53 = SNLPOSLoggerForCategory(7);
  if (v52 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v54 = v53;
    if (os_signpost_enabled(v53))
    {
      *(_WORD *)v70 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v54, OS_SIGNPOST_INTERVAL_BEGIN, v52, "Reset Bert E5ML Inference network", "", v70, 2u);
    }
  }
  v55 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v70 = 0;
    _os_log_impl(&dword_1C2196000, v55, OS_LOG_TYPE_DEFAULT, "BEGIN \"Reset Bert E5ML Inference network\"", v70, 2u);
  }
  E5RT::ExecutionStream::ResetStream(this[57]);
  v56 = SNLPOSLoggerForCategory(7);
  if (v52 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v57 = v56;
    if (os_signpost_enabled(v56))
    {
      *(_WORD *)v70 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v57, OS_SIGNPOST_INTERVAL_END, v52, "Reset Bert E5ML Inference network", "", v70, 2u);
    }
  }
  v58 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v70 = 0;
    _os_log_impl(&dword_1C2196000, v58, OS_LOG_TYPE_DEFAULT, "END \"Reset Bert E5ML Inference network\"", v70, 2u);
  }
  v59 = SNLPOSLoggerForCategory(7);
  v60 = os_signpost_id_generate(v59);
  v61 = SNLPOSLoggerForCategory(7);
  if (v60 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v62 = v61;
    if (os_signpost_enabled(v61))
    {
      *(_WORD *)v70 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v62, OS_SIGNPOST_INTERVAL_BEGIN, v60, "Get Outputs of Bert E5ML Inference network", "", v70, 2u);
    }
  }
  v63 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v70 = 0;
    _os_log_impl(&dword_1C2196000, v63, OS_LOG_TYPE_DEFAULT, "BEGIN \"Get Outputs of Bert E5ML Inference network\"", v70, 2u);
  }
  (*((void (**)(E5RT::ExecutionStreamOperation **))*this + 22))(this);
  v64 = SNLPOSLoggerForCategory(7);
  if (v60 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v65 = v64;
    if (os_signpost_enabled(v64))
    {
      *(_WORD *)v70 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v65, OS_SIGNPOST_INTERVAL_END, v60, "Get Outputs of Bert E5ML Inference network", "", v70, 2u);
    }
  }
  v66 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v70 = 0;
    _os_log_impl(&dword_1C2196000, v66, OS_LOG_TYPE_DEFAULT, "END \"Get Outputs of Bert E5ML Inference network\"", v70, 2u);
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::unbindPorts(v13);
  v67 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v70 = 0;
    _os_log_impl(&dword_1C2196000, v67, OS_LOG_TYPE_DEBUG, "Success Executing reshapable E5-ML inference.", v70, 2u);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table((uint64_t)&v71);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v81);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v80);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v79);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v78);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v77);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v76);
  if (__p)
  {
    v75 = __p;
    operator delete(__p);
  }
  if (*(_QWORD *)buf)
  {
    v73 = *(void **)buf;
    operator delete(*(void **)buf);
  }
}

void sub_1C21A799C(uint64_t a1, char a2, uint64_t a3, std::string *a4, __int128 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  __break(1u);
}

void sub_1C21A7AB8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
    {
LABEL_6:
      if (a23 < 0)
        operator delete(a18);
      __cxa_end_catch();
      JUMPOUT(0x1C21A79D4);
    }
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

void sub_1C21A7B20()
{
  JUMPOUT(0x1C21A79DCLL);
}

void sub_1C21A7B28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
LABEL_6:
  JUMPOUT(0x1C21A79DCLL);
}

id SNLPOSLoggerForCategory(int a1)
{
  if (SNLPOSLoggerForCategory::onceToken != -1)
    dispatch_once(&SNLPOSLoggerForCategory::onceToken, &__block_literal_global_4463);
  return (id)SNLPOSLoggerForCategory::logObjects[a1];
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void snlp::common::espresso_inference::e5ml::EspressoE5MLModule::unbindPorts(E5RT::ExecutionStreamOperation **this)
{
  uint64_t InputPorts;
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule *OutputPorts;
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule *v4;
  uint64_t **i;
  uint64_t **j;

  InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(this[22]);
  OutputPorts = (snlp::common::espresso_inference::e5ml::EspressoE5MLModule *)E5RT::ExecutionStreamOperation::GetOutputPorts(this[22]);
  v4 = OutputPorts;
  for (i = *(uint64_t ***)(InputPorts + 16); i; i = (uint64_t **)*i)
    snlp::common::espresso_inference::e5ml::EspressoE5MLModule::unbindMemory(OutputPorts, (E5RT::IOPort *)i[5]);
  for (j = (uint64_t **)*((_QWORD *)v4 + 2); j; j = (uint64_t **)*j)
    snlp::common::espresso_inference::e5ml::EspressoE5MLModule::unbindMemory(OutputPorts, (E5RT::IOPort *)j[5]);
}

void snlp::common::espresso_inference::e5ml::EspressoE5MLModule::unbindMemory(snlp::common::espresso_inference::e5ml::EspressoE5MLModule *this, E5RT::IOPort *a2)
{
  E5RT::IOPort::BindMemoryObject();
}

void sub_1C21A7CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::setInputTensors(nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule *this, nlv4_inference_orchestrator::inference_engine::BertModuleInputType *a2)
{
  _QWORD *v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  _QWORD *v8;
  NSObject *v9;
  _QWORD *v10;
  NSObject *v11;
  _QWORD *v12;
  NSObject *v13;
  NSObject *v14;
  std::runtime_error *v15;
  std::runtime_error *exception;
  std::runtime_error *v17;
  std::runtime_error *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  std::string __p;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = std::string::basic_string[abi:ne180100]<0>(&__p, "tokens");
  nlv4_inference_orchestrator::inference_engine::BertModule::logTensorShape((uint64_t)v4, (unint64_t **)a2, (uint64_t **)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this + 432, (unsigned __int8 *)this + 376, (uint64_t)a2);
  v5 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"OWL";
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"[insights-snlp-owl]: ";
    _os_log_impl(&dword_1C2196000, v5, OS_LOG_TYPE_DEBUG, "[%s] %sDone setting utteranceTokens", (uint8_t *)&__p, 0x16u);
  }
  if (!*((_BYTE *)a2 + 264))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Received invalid tensor for tokenTypeIds input!");
    std::runtime_error::runtime_error(exception, &__p);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  v6 = std::string::basic_string[abi:ne180100]<0>(&__p, "tokensTypeIds");
  nlv4_inference_orchestrator::inference_engine::BertModule::logTensorShape((uint64_t)v6, (unint64_t **)a2 + 27, (uint64_t **)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*((_BYTE *)a2 + 264))
    std::__throw_bad_optional_access[abi:ne180100]();
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this + 432, (unsigned __int8 *)this + 856, (uint64_t)a2 + 216);
  v7 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"OWL";
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"[insights-snlp-owl]: ";
    _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_DEBUG, "[%s] %sDone setting tokenTypeIds", (uint8_t *)&__p, 0x16u);
  }
  if (!*((_BYTE *)a2 + 320))
  {
    v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Received invalid tensor for excludeSpecialTokensMask input!");
    std::runtime_error::runtime_error(v17, &__p);
    v17->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  v8 = std::string::basic_string[abi:ne180100]<0>(&__p, "excludeSpecialTokensMask");
  nlv4_inference_orchestrator::inference_engine::BertModule::logTensorShape((uint64_t)v8, (unint64_t **)a2 + 34, (uint64_t **)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*((_BYTE *)a2 + 320))
    std::__throw_bad_optional_access[abi:ne180100]();
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this + 432, (unsigned __int8 *)this + 880, (uint64_t)a2 + 272);
  v9 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"OWL";
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"[insights-snlp-owl]: ";
    _os_log_impl(&dword_1C2196000, v9, OS_LOG_TYPE_DEBUG, "[%s] %sDone setting excludeSpecialTokensMask", (uint8_t *)&__p, 0x16u);
  }
  if (!*((_BYTE *)a2 + 376) || *((_QWORD *)a2 + 44) == *((_QWORD *)a2 + 45))
  {
    v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Received invalid tensor for sequence length input!");
    std::runtime_error::runtime_error(v15, &__p);
    v15->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  v10 = std::string::basic_string[abi:ne180100]<0>(&__p, "seqLen");
  nlv4_inference_orchestrator::inference_engine::BertModule::logTensorShape((uint64_t)v10, (unint64_t **)a2 + 41, (uint64_t **)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*((_BYTE *)a2 + 376))
    std::__throw_bad_optional_access[abi:ne180100]();
  v19 = 0;
  v20 = 0;
  v21 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v19, *((const void **)a2 + 41), *((_QWORD *)a2 + 42), (uint64_t)(*((_QWORD *)a2 + 42) - *((_QWORD *)a2 + 41)) >> 3);
  v22 = 0;
  v23 = 0;
  v24 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v22, *((const void **)a2 + 44), *((_QWORD *)a2 + 45), (uint64_t)(*((_QWORD *)a2 + 45) - *((_QWORD *)a2 + 44)) >> 2);
  nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::setSeqLen((uint64_t)this, (uint64_t)&v19);
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  v11 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"OWL";
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"[insights-snlp-owl]: ";
    _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEBUG, "[%s] %sDone setting seqLen", (uint8_t *)&__p, 0x16u);
  }
  if (!*((_BYTE *)a2 + 208))
  {
    v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Received invalid tensor for featurePoolingMask2D input!");
    std::runtime_error::runtime_error(v18, &__p);
    v18->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  v12 = std::string::basic_string[abi:ne180100]<0>(&__p, "featurPoolingMask2D");
  nlv4_inference_orchestrator::inference_engine::BertModule::logTensorShape((uint64_t)v12, (unint64_t **)a2 + 20, (uint64_t **)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*((_BYTE *)a2 + 208))
    std::__throw_bad_optional_access[abi:ne180100]();
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this + 432, (unsigned __int8 *)this + 208, (uint64_t)a2 + 160);
  v13 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"OWL";
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"[insights-snlp-owl]: ";
    _os_log_impl(&dword_1C2196000, v13, OS_LOG_TYPE_DEBUG, "[%s] %sDone setting featurePoolingMask2D", (uint8_t *)&__p, 0x16u);
  }
  if (!*((_BYTE *)a2 + 376))
    std::__throw_bad_optional_access[abi:ne180100]();
  nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::setPositionEmbeddings((const void **)this, (unint64_t)**((float **)a2 + 44));
  v14 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"OWL";
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"[insights-snlp-owl]: ";
    _os_log_impl(&dword_1C2196000, v14, OS_LOG_TYPE_DEBUG, "[%s] %sDone setting positionEmbeddings", (uint8_t *)&__p, 0x16u);
  }
}

void sub_1C21A8338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertModule::logTensorShape(uint64_t a1, unint64_t **a2, uint64_t **a3)
{
  unint64_t *v5;
  unint64_t *v6;
  std::string *p_p;
  std::string::size_type size;
  NSObject *v9;
  int v10;
  uint64_t **v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  std::string __p;
  _QWORD v17[2];
  _QWORD v18[11];
  char v19;
  uint64_t v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  std::string *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    do
    {
      std::to_string(&__p, *v5);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)",", 1);
      ++v5;
    }
    while (v5 != v6);
  }
  v9 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    v10 = *((char *)a3 + 23);
    v11 = (uint64_t **)*a3;
    std::stringbuf::str();
    v12 = (uint64_t)(v10 >= 0 ? a3 : v11);
    v13 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315394;
    v22 = v12;
    v23 = 2080;
    v24 = v13;
    _os_log_impl(&dword_1C2196000, v9, OS_LOG_TYPE_DEBUG, "shape of %s : %s", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v17[0] = *MEMORY[0x1E0DE4F50];
  v14 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v18[0] = v14;
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3BB9A90](&v20);
}

void sub_1C21A85C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::setSeqLen(uint64_t a1, uint64_t a2)
{
  float *v2;
  unint64_t v3;
  std::runtime_error *exception;
  std::string v5;

  v2 = *(float **)(a2 + 24);
  if (v2 == *(float **)(a2 + 32) || (v3 = *(_QWORD *)(a1 + 952), v3 > (unint64_t)*v2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v5, "Sequence length input tensor invalid!");
    std::runtime_error::runtime_error(exception, &v5);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  *v2 = *v2 - (float)v3;
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput(a1 + 432, (unsigned __int8 *)(a1 + 832), a2);
}

void sub_1C21A86C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::setPositionEmbeddings(const void **this, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v12;
  void *__dst;
  _BYTE *v14;
  _BYTE buf[24];
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = (*((uint64_t (**)(const void **, char *))*this + 1))(this, (char *)this + 784);
  v5 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = a2;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v4;
    _os_log_impl(&dword_1C2196000, v5, OS_LOG_TYPE_DEFAULT, "query seqLen = %zu, hiddenDim=%lu", buf, 0x16u);
  }
  v6 = v4 * a2;
  *(_DWORD *)buf = 0;
  std::vector<float>::vector(&__dst, v4 * a2, buf);
  v7 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_DEFAULT, "copying part of trimmed position embeddings.", buf, 2u);
  }
  if (v6)
    memmove(__dst, this[116], 4 * v6);
  v8 = std::string::basic_string[abi:ne180100]<0>(buf, "FullPositionEmbeddings");
  nlv4_inference_orchestrator::inference_engine::BertModule::logTensorShape((uint64_t)v8, (unint64_t **)this + 113, (uint64_t **)buf);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v9 = operator new(0x18uLL);
  *v9 = 1;
  v9[1] = a2;
  v9[2] = v4;
  *(_QWORD *)buf = v9;
  *(_QWORD *)&buf[8] = v9 + 3;
  *(_QWORD *)&buf[16] = v9 + 3;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v16, __dst, (uint64_t)v14, (v14 - (_BYTE *)__dst) >> 2);
  v10 = std::string::basic_string[abi:ne180100]<0>(__p, "trimmedPositionEmbeddings");
  nlv4_inference_orchestrator::inference_engine::BertModule::logTensorShape((uint64_t)v10, (unint64_t **)buf, (uint64_t **)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)(this + 54), (unsigned __int8 *)this + 808, (uint64_t)buf);
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  if (__dst)
  {
    v14 = __dst;
    operator delete(__dst);
  }
}

void sub_1C21A8908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a18);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::reshapeStream(nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  NSObject *v41;
  _BYTE v42[16];
  void *__p;
  void *v44;
  _QWORD *v45;
  uint64_t v46;
  uint8_t buf[4];
  int v48;
  __int128 *v49;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v6 = (_QWORD *)((char *)this + 704);
  v7 = (unsigned __int8 *)this + 784;
  if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((_QWORD *)this + 88, (unsigned __int8 *)this + 784))
  {
    v8 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v6, v7);
    if (!v8)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)buf, (uint64_t)(v8 + 40));
    if (v48 == 1)
    {
      v9 = *(unsigned int *)buf;
      v10 = operator new(0x10uLL);
      v44 = v10 + 2;
      v45 = v10 + 2;
      *v10 = 1;
      v10[1] = a2;
      __p = v10;
      E5RT::TensorDataType::TensorDataType();
      E5RT::TensorDescriptor::CreateTensorDesc();
      v49 = (__int128 *)((char *)this + 376);
      v11 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)this + 376, &v49);
      v12 = v46;
      v46 = 0;
      v13 = *((_QWORD *)v11 + 5);
      *((_QWORD *)v11 + 5) = v12;
      if (v13)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        v14 = v46;
        v46 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v42);
      if (__p)
      {
        v44 = __p;
        operator delete(__p);
      }
      v15 = operator new(0x10uLL);
      v44 = v15 + 2;
      v45 = v15 + 2;
      *v15 = 1;
      v15[1] = a2;
      __p = v15;
      E5RT::TensorDataType::TensorDataType();
      E5RT::TensorDescriptor::CreateTensorDesc();
      v49 = (__int128 *)((char *)this + 856);
      v16 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)this + 856, &v49);
      v17 = v46;
      v46 = 0;
      v18 = *((_QWORD *)v16 + 5);
      *((_QWORD *)v16 + 5) = v17;
      if (v18)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        v19 = v46;
        v46 = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v42);
      if (__p)
      {
        v44 = __p;
        operator delete(__p);
      }
      v20 = operator new(0x18uLL);
      v44 = v20 + 3;
      v45 = v20 + 3;
      *v20 = 1;
      v20[1] = a2;
      v20[2] = v9;
      __p = v20;
      E5RT::TensorDataType::TensorDataType();
      E5RT::TensorDescriptor::CreateTensorDesc();
      v49 = (__int128 *)((char *)this + 808);
      v21 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)this + 808, &v49);
      v22 = v46;
      v46 = 0;
      v23 = *((_QWORD *)v21 + 5);
      *((_QWORD *)v21 + 5) = v22;
      if (v23)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        v24 = v46;
        v46 = 0;
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v42);
      if (__p)
      {
        v44 = __p;
        operator delete(__p);
      }
      v25 = operator new(0x18uLL);
      v44 = v25 + 3;
      v45 = v25 + 3;
      *v25 = 1;
      v25[1] = a2;
      v25[2] = a2;
      __p = v25;
      E5RT::TensorDataType::TensorDataType();
      E5RT::TensorDescriptor::CreateTensorDesc();
      v49 = (__int128 *)((char *)this + 208);
      v26 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)this + 208, &v49);
      v27 = v46;
      v46 = 0;
      v28 = *((_QWORD *)v26 + 5);
      *((_QWORD *)v26 + 5) = v27;
      if (v28)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        v29 = v46;
        v46 = 0;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v42);
      if (__p)
      {
        v44 = __p;
        operator delete(__p);
      }
      v30 = operator new(0x10uLL);
      v44 = v30 + 2;
      v45 = v30 + 2;
      *v30 = 1;
      v30[1] = a2;
      __p = v30;
      E5RT::TensorDataType::TensorDataType();
      E5RT::TensorDescriptor::CreateTensorDesc();
      v49 = (__int128 *)((char *)this + 880);
      v31 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)this + 880, &v49);
      v32 = v46;
      v46 = 0;
      v33 = *((_QWORD *)v31 + 5);
      *((_QWORD *)v31 + 5) = v32;
      if (v33)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
        v34 = v46;
        v46 = 0;
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v42);
      if (__p)
      {
        v44 = __p;
        operator delete(__p);
      }
      v35 = operator new(8uLL);
      *v35 = 1;
      v44 = v35 + 1;
      v45 = v35 + 1;
      __p = v35;
      E5RT::TensorDataType::TensorDataType();
      E5RT::TensorDescriptor::CreateTensorDesc();
      v49 = (__int128 *)((char *)this + 832);
      v36 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)this + 832, &v49);
      v37 = v46;
      v46 = 0;
      v38 = *((_QWORD *)v36 + 5);
      *((_QWORD *)v36 + 5) = v37;
      if (v38)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
        v39 = v46;
        v46 = 0;
        if (v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v42);
      if (__p)
      {
        v44 = __p;
        operator delete(__p);
      }
    }
    else
    {
      v41 = SNLPOSLoggerForCategory(5);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1C2196000, v41, OS_LOG_TYPE_ERROR, "Could not reshape because the relevant dimensions could not be read from the config.", (uint8_t *)&__p, 2u);
      }
    }
    std::__variant_detail::__dtor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)buf);
  }
  else
  {
    v40 = SNLPOSLoggerForCategory(5);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C2196000, v40, OS_LOG_TYPE_ERROR, "Could not reshape because the relevant dimensions could not be found in the config.", buf, 2u);
    }
  }
}

void sub_1C21A8E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;
  uint64_t v17;

  v17 = a14;
  a14 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a9);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a15);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table(v15);
  _Unwind_Resume(a1);
}

void sub_1C21A8F8C()
{
  JUMPOUT(0x1C21A8F7CLL);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  std::string *v18;
  __int128 *v19;
  __int128 v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  int8x8_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unsigned __int8 **v38;
  unint64_t v39;
  void *v41;
  _QWORD v42[2];
  char v43;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  v17 = operator new(0x30uLL);
  v42[0] = v17;
  v42[1] = a1 + 16;
  v43 = 0;
  *v17 = 0;
  v17[1] = v9;
  v18 = (std::string *)(v17 + 2);
  v19 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v19, *((_QWORD *)v19 + 1));
  }
  else
  {
    v20 = *v19;
    v17[4] = *((_QWORD *)v19 + 2);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v20;
  }
  v17[5] = 0;
  v43 = 1;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v10 || (float)(v22 * (float)v10) < v21)
  {
    v23 = 1;
    if (v10 >= 3)
      v23 = (v10 & (v10 - 1)) != 0;
    v24 = v23 | (2 * v10);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = (int8x8_t)v25;
    else
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v10)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v10)
    {
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (*(_QWORD *)&prime <= v33)
        prime = (int8x8_t)v33;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v27 = operator new(8 * *(_QWORD *)&prime);
          v28 = *(void **)a1;
          *(_QWORD *)a1 = v27;
          if (v28)
            operator delete(v28);
          v29 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v29++) = 0;
          while (*(_QWORD *)&prime != v29);
          v30 = (_QWORD *)*v16;
          if (*v16)
          {
            v31 = v30[1];
            v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(_QWORD *)&prime)
                v31 %= *(_QWORD *)&prime;
            }
            else
            {
              v31 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v16;
            v36 = (_QWORD *)*v30;
            if (*v30)
            {
              do
              {
                v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(_QWORD *)&prime)
                    v37 %= *(_QWORD *)&prime;
                }
                else
                {
                  v37 &= *(_QWORD *)&prime - 1;
                }
                if (v37 != v31)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v30;
                    goto LABEL_58;
                  }
                  *v30 = *v36;
                  *v36 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v37);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v37) = v36;
                  v36 = v30;
                }
                v37 = v31;
LABEL_58:
                v30 = v36;
                v36 = (_QWORD *)*v36;
                v31 = v37;
              }
              while (v36);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        v41 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v41)
          operator delete(v41);
        v10 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v38 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
  i = (unsigned __int8 *)v42[0];
  if (v38)
  {
    *(_QWORD *)v42[0] = *v38;
LABEL_75:
    *v38 = i;
    goto LABEL_76;
  }
  *(_QWORD *)v42[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v16;
  if (*(_QWORD *)i)
  {
    v39 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v39 >= v10)
        v39 %= v10;
    }
    else
    {
      v39 &= v10 - 1;
    }
    v38 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  v42[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v42);
  return i;
}

void sub_1C21A93E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::forward(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this@<X0>, const nlv4_inference_orchestrator::inference_engine::EspressoBertModelInputType *a2@<X1>, uint64_t a3@<X8>)
{
  std::chrono::steady_clock::time_point v6;
  NSObject *v7;
  os_signpost_id_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  std::chrono::steady_clock::time_point v15;
  NSObject *v16;
  os_signpost_id_t v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  os_signpost_id_t v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  std::chrono::steady_clock::time_point v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  std::string::size_type size;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  NSObject *v56;
  __int128 *p_p;
  std::chrono::steady_clock::time_point v58;
  std::chrono::steady_clock::time_point v59;
  std::chrono::steady_clock::time_point v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;
  __int128 __p;
  int64_t v71;
  void *v72;
  _BYTE *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint8_t v93[8];
  char *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  std::string v98;
  uint8_t v99[8];
  uint64_t v100;
  void *v101;
  void *v102;
  _QWORD v103[3];
  const void *v104;
  char v105;
  _QWORD v106[3];
  const void *v107;
  char v108;
  uint8_t buf[8];
  void *v110;
  void *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  std::string v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = SNLPOSLoggerForCategory(7);
  v8 = os_signpost_id_generate(v7);
  v9 = SNLPOSLoggerForCategory(7);
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v10 = v9;
    if (os_signpost_enabled(v9))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v10, OS_SIGNPOST_INTERVAL_BEGIN, v8, "OWL Input Preprocess", "", buf, 2u);
    }
  }
  v11 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEFAULT, "BEGIN \"OWL Input Preprocess\"", buf, 2u);
  }
  nlv4_inference_orchestrator::inference_engine::EspressoBertModel::generateBertInput(this, a2, (uint64_t)buf);
  v12 = SNLPOSLoggerForCategory(7);
  if (v8 - 1 < 0xFFFFFFFFFFFFFFFELL)
  {
    v13 = v12;
    if (os_signpost_enabled(v12))
    {
      *(_WORD *)v99 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v13, OS_SIGNPOST_INTERVAL_END, v8, "OWL Input Preprocess", "", v99, 2u);
    }
  }
  v14 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v99 = 0;
    _os_log_impl(&dword_1C2196000, v14, OS_LOG_TYPE_DEFAULT, "END \"OWL Input Preprocess\"", v99, 2u);
  }
  v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v60.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v16 = SNLPOSLoggerForCategory(7);
  v17 = os_signpost_id_generate(v16);
  v18 = SNLPOSLoggerForCategory(7);
  if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v19 = v18;
    if (os_signpost_enabled(v18))
    {
      *(_WORD *)v99 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v19, OS_SIGNPOST_INTERVAL_BEGIN, v17, "OWL Model Forward", "", v99, 2u);
    }
  }
  v20 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v99 = 0;
    _os_log_impl(&dword_1C2196000, v20, OS_LOG_TYPE_DEFAULT, "BEGIN \"OWL Model Forward\"", v99, 2u);
  }
  (***((void (****)(uint8_t *__return_ptr, _QWORD, uint8_t *))this + 1))(v99, *((_QWORD *)this + 1), buf);
  v21 = SNLPOSLoggerForCategory(7);
  if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v22 = v21;
    if (os_signpost_enabled(v21))
    {
      *(_WORD *)v93 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v22, OS_SIGNPOST_INTERVAL_END, v17, "OWL Model Forward", "", v93, 2u);
    }
  }
  v23 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v93 = 0;
    _os_log_impl(&dword_1C2196000, v23, OS_LOG_TYPE_DEFAULT, "END \"OWL Model Forward\"", v93, 2u);
  }
  v59.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v58.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v24 = SNLPOSLoggerForCategory(7);
  v25 = os_signpost_id_generate(v24);
  v26 = SNLPOSLoggerForCategory(7);
  if (v25 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v27 = v26;
    if (os_signpost_enabled(v26))
    {
      *(_WORD *)v93 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v27, OS_SIGNPOST_INTERVAL_BEGIN, v25, "OWL Output PostProcess", "", v93, 2u);
    }
  }
  v28 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v93 = 0;
    _os_log_impl(&dword_1C2196000, v28, OS_LOG_TYPE_DEFAULT, "BEGIN \"OWL Output PostProcess\"", v93, 2u);
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 144) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_BYTE *)(a3 + 224) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_BYTE *)(a3 + 72) = 0;
  *(_QWORD *)v93 = 0;
  v94 = 0;
  v95 = 0;
  memset(&v98, 0, sizeof(v98));
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::reset[abi:ne180100](a3 + 72);
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::reset[abi:ne180100](a3 + 152);
  v29 = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1), (char *)this + 264);
  v30 = ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 4) * v29;
  v73 = 0;
  v74 = 0;
  v72 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(&v72, v101, (uint64_t)v101 - 0x4924924924924924 * v30, 0x6DB6DB6DB6DB6DB7 * v30);
  std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)v93, (char *)v72, (uint64_t)v73, (v73 - (_BYTE *)v72) >> 2);
  *(_QWORD *)&v96 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 4);
  if ((unint64_t)(v100 - *(_QWORD *)v99) >= 0x11)
  {
    v97 = *(_QWORD *)(*(_QWORD *)v99 + 16);
    *((_QWORD *)&v96 + 1) = 1;
  }
  if (v93 != (uint8_t *)a3)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)a3, *(char **)v93, (uint64_t)v94, (uint64_t)&v94[-*(_QWORD *)v93] >> 2);
  *(_OWORD *)(a3 + 24) = v96;
  *(_QWORD *)(a3 + 40) = v97;
  std::string::operator=((std::string *)(a3 + 48), &v98);
  if (v105)
  {
    v71 = 0;
    __p = 0uLL;
    std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(&__p, v104, (uint64_t)v104 + 4 * v29, v29);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v84, (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2);
    v87 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 4);
    if (!v105)
      std::__throw_bad_optional_access[abi:ne180100]();
    if (v103[1] - v103[0] >= 9uLL)
      v89 = *(_QWORD *)(v103[0] + 8);
    v88 = 1;
    std::optional<nlv4_inference_orchestrator::orchestration::EmbeddingTensor>::operator=[abi:ne180100]<nlv4_inference_orchestrator::orchestration::EmbeddingTensor&,void>(a3 + 72, (uint64_t)&v84);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  if (v108 && *((_BYTE *)a2 + 160))
  {
    v31 = ((uint64_t)(*((_QWORD *)a2 + 18) - *((_QWORD *)a2 + 17)) >> 2) * v29;
    v71 = 0;
    __p = 0uLL;
    std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(&__p, v107, (uint64_t)v107 + 4 * v31, v31);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&v75, (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2);
    if (!*((_BYTE *)a2 + 160) || (v78 = (uint64_t)(*((_QWORD *)a2 + 18) - *((_QWORD *)a2 + 17)) >> 2, !v108))
      std::__throw_bad_optional_access[abi:ne180100]();
    if (v106[1] - v106[0] >= 0x11uLL)
      v80 = *(_QWORD *)(v106[0] + 16);
    v79 = 1;
    std::optional<nlv4_inference_orchestrator::orchestration::EmbeddingTensor>::operator=[abi:ne180100]<nlv4_inference_orchestrator::orchestration::EmbeddingTensor&,void>(a3 + 152, (uint64_t)&v75);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  v32 = SNLPOSLoggerForCategory(7);
  if (v25 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v33 = v32;
    if (os_signpost_enabled(v32))
    {
      LOWORD(__p) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v33, OS_SIGNPOST_INTERVAL_END, v25, "OWL Output PostProcess", "", (uint8_t *)&__p, 2u);
    }
  }
  v34 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl(&dword_1C2196000, v34, OS_LOG_TYPE_DEFAULT, "END \"OWL Output PostProcess\"", (uint8_t *)&__p, 2u);
  }
  v35.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::to_string(&v63, (v15.__d_.__rep_ - v6.__d_.__rep_) / 1000000);
  v36 = std::string::insert(&v63, 0, "\nBERT:\n      pre-process ");
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  v38 = std::string::append(&v64, "ms\n");
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  v40 = std::string::append(&v65, "      forward: ");
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v62, (v59.__d_.__rep_ - v60.__d_.__rep_) / 1000000);
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = &v62;
  else
    v42 = (std::string *)v62.__r_.__value_.__r.__words[0];
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
  else
    size = v62.__r_.__value_.__l.__size_;
  v44 = std::string::append(&v66, (const std::string::value_type *)v42, size);
  v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v67.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  v46 = std::string::append(&v67, " ms\n");
  v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  v68.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  v48 = std::string::append(&v68, "      post-process: ");
  v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v69.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v61, (v35.__d_.__rep_ - v58.__d_.__rep_) / 1000000);
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v50 = &v61;
  else
    v50 = (std::string *)v61.__r_.__value_.__r.__words[0];
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v51 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
  else
    v51 = v61.__r_.__value_.__l.__size_;
  v52 = std::string::append(&v69, (const std::string::value_type *)v50, v51);
  v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v119.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  v54 = std::string::append(&v119, " ms\n");
  v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v71 = v54->__r_.__value_.__r.__words[2];
  __p = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v119.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  v56 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
  {
    p_p = &__p;
    if (v71 < 0)
      p_p = (__int128 *)__p;
    LODWORD(v119.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v119.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    _os_log_impl(&dword_1C2196000, v56, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v119, 0xCu);
  }
  if (SHIBYTE(v71) < 0)
    operator delete((void *)__p);
  if (v72)
  {
    v73 = v72;
    operator delete(v72);
  }
  if (SHIBYTE(v83) < 0)
    operator delete(v81);
  if (v75)
  {
    v76 = v75;
    operator delete(v75);
  }
  if (SHIBYTE(v92) < 0)
    operator delete(v90);
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  if (*(_QWORD *)v93)
  {
    v94 = *(char **)v93;
    operator delete(*(void **)v93);
  }
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v106);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v103);
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
  if (*(_QWORD *)v99)
  {
    v100 = *(_QWORD *)v99;
    operator delete(*(void **)v99);
  }
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v118);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v117);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v116);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v115);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v114);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v113);
  if (v111)
  {
    v112 = v111;
    operator delete(v111);
  }
  if (*(_QWORD *)buf)
  {
    v110 = *(void **)buf;
    operator delete(*(void **)buf);
  }
}

void sub_1C21A9F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *a71;
  void **v71;

  if (__p)
    operator delete(__p);
  nlv4_inference_orchestrator::orchestration::EmbeddingTensor::~EmbeddingTensor(&a53);
  nlv4_inference_orchestrator::orchestration::EmbeddingTensor::~EmbeddingTensor(&a62);
  nlv4_inference_orchestrator::orchestration::EmbeddingTensor::~EmbeddingTensor(&a71);
  nlv4_inference_orchestrator::inference_engine::EspressoBertModelOutputType::~EspressoBertModelOutputType(v71);
  nlv4_inference_orchestrator::inference_engine::BertModuleOutputType::~BertModuleOutputType((nlv4_inference_orchestrator::inference_engine::BertModuleOutputType *)&STACK[0x240]);
  nlv4_inference_orchestrator::inference_engine::BertModuleInputType::~BertModuleInputType((nlv4_inference_orchestrator::inference_engine::BertModuleInputType *)&STACK[0x2E0]);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::generateBertInput(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this@<X0>, const nlv4_inference_orchestrator::inference_engine::EspressoBertModelInputType *a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1)))
  {
    nlv4_inference_orchestrator::inference_engine::EspressoBertModel::generateUnpaddedE5MLBertInput(this, a2, a3);
  }
  else if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1)))
  {
    nlv4_inference_orchestrator::inference_engine::EspressoBertModel::generatePaddedSubowlBertInput(this, a2, a3);
  }
  else
  {
    nlv4_inference_orchestrator::inference_engine::EspressoBertModel::generatePaddedWholeowlEspressoV1BertInput(this, a2, a3);
  }
}

uint64_t snlp::common::espresso_inference::e5ml::EspressoE5MLModule::bindPorts(E5RT::ExecutionStreamOperation **this)
{
  uint64_t InputPorts;
  uint64_t OutputPorts;

  InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(this[22]);
  OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(this[22]);
  std::for_each[abi:ne180100]<std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *> *>>,snlp::common::espresso_inference::e5ml::EspressoE5MLModule::bindPorts(void)::$_0>(*(uint64_t **)(InputPorts + 16), (uint64_t)this);
  return std::for_each[abi:ne180100]<std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *> *>>,snlp::common::espresso_inference::e5ml::EspressoE5MLModule::bindPorts(void)::$_0>(*(uint64_t **)(OutputPorts + 16), (uint64_t)this);
}

void snlp::common::espresso_inference::e5ml::EspressoE5MLModule::bindMemory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v3 = *(std::__shared_weak_count **)(a3 + 8);
  v8 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  E5RT::IOPort::BindMemoryObject();
  if (v8)
  {
    v6 = (unint64_t *)&v8->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1C21AA204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<nlv4_inference_orchestrator::orchestration::Token>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 112;
    std::allocator<nlv4_inference_orchestrator::orchestration::Token>::destroy[abi:ne180100](i - 112);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<nlv4_inference_orchestrator::orchestration::Token>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>,std::reverse_iterator<nlv4_inference_orchestrator::orchestration::Token*>,std::reverse_iterator<nlv4_inference_orchestrator::orchestration::Token*>,std::reverse_iterator<nlv4_inference_orchestrator::orchestration::Token*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

void nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::preprocessRequest(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t i@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  int64_t v11;
  std::string *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  BOOL v19;
  std::string *v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  void **v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  std::string *v39;
  uint64_t v40;
  std::string::size_type v41;
  std::string *size;
  std::string *v43;
  std::string::size_type v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  std::string *v48;
  std::string *v49;
  std::string *v50;
  uint64_t v51;
  std::string *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::string *v59;
  uint64_t v60;
  __int128 v61;
  std::string *v62;
  std::string *v63;
  char v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::string v69;
  std::string *v70;
  std::string *v71;
  unint64_t v72;
  std::string v73;
  std::string *v74;
  std::string *v75;
  std::string *v76;
  uint64_t v77;
  uint64_t v78;
  std::string __str[2];
  _BYTE v80[32];
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 v86;
  void *v87[3];
  char v88;
  std::string *v89;
  __int128 __p;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[2];
  _BYTE v95[48];
  uint64_t v96;
  std::string v97;
  _BYTE v98[88];
  std::string v99;
  _BYTE v100[27];
  std::string v101;
  __int128 v102;
  __int128 v103;
  _QWORD v104[4];

  v3 = a2;
  v104[1] = *MEMORY[0x1E0C80C00];
  v82 = 0;
  LOBYTE(v83) = 0;
  v86 = 0;
  LOBYTE(v87[0]) = 0;
  v88 = 0;
  memset(__str, 0, sizeof(__str));
  memset(v80, 0, 25);
  nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::reformulateTokens(a1, (const nlv4_inference_orchestrator::orchestration::Token **)(a2 + 48), (uint64_t)&v77);
  std::string::basic_string[abi:ne180100]<0>(&v97, "[CLS]");
  *(_QWORD *)v98 = 0;
  *(_QWORD *)&v98[8] = 0;
  *(_DWORD *)&v98[23] = 0;
  memset(&v98[32], 0, 56);
  *(_QWORD *)&v98[16] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "[SEP]");
  v92 = 0;
  v93 = 0;
  *(_DWORD *)((char *)v94 + 7) = 0;
  memset(v95, 0, sizeof(v95));
  v94[0] = 0;
  v96 = 0;
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v99, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  else
    v99 = v97;
  *(_OWORD *)v100 = *(_OWORD *)v98;
  *(_OWORD *)&v100[11] = *(_OWORD *)&v98[11];
  memset(&v101, 0, sizeof(v101));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v101, *(__int128 **)&v98[32], *(__int128 **)&v98[40], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v98[40] - *(_QWORD *)&v98[32]) >> 3));
  v102 = *(_OWORD *)&v98[56];
  v103 = *(_OWORD *)&v98[72];
  v75 = 0;
  v76 = 0;
  v74 = 0;
  v73.__r_.__value_.__s.__data_[8] = 0;
  v74 = (std::string *)operator new(0x70uLL);
  v75 = v74;
  v76 = (std::string *)((char *)v74 + 112);
  v68 = a1;
  v75 = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>,nlv4_inference_orchestrator::orchestration::Token const*,nlv4_inference_orchestrator::orchestration::Token const*,nlv4_inference_orchestrator::orchestration::Token*>((uint64_t)&v76, (uint64_t)&v99, (uint64_t)v104, (uint64_t)v74);
  v73.__r_.__value_.__r.__words[0] = (std::string::size_type)&v101;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  v6 = v77;
  v7 = v78 - v77;
  if (v78 - v77 >= 1)
  {
    v8 = v7 / 112;
    v9 = v74;
    v10 = v75;
    v11 = ((char *)v75 - (char *)v74) / 112;
    v12 = (std::string *)((char *)v74 + 112 * v11);
    if (0x6DB6DB6DB6DB6DB7 * (((char *)v76 - (char *)v75) >> 4) >= v7 / 112)
    {
      v65 = ((char *)v75 - (char *)v74) / 112;
      v67 = i;
      v16 = (char *)v75 - (char *)v12;
      if (0x6DB6DB6DB6DB6DB7 * (((char *)v75 - (char *)v12) >> 4) >= v8)
      {
        v17 = v77 + 112 * v8;
        v18 = v75;
      }
      else
      {
        v17 = v77 + 16 * (((char *)v75 - (char *)v12) >> 4);
        v18 = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>,nlv4_inference_orchestrator::orchestration::Token const*,nlv4_inference_orchestrator::orchestration::Token const*,nlv4_inference_orchestrator::orchestration::Token*>((uint64_t)&v76, v17, v78, (uint64_t)v75);
        v75 = v18;
        v19 = v16 < 1;
        i = v67;
        if (v19)
          goto LABEL_41;
      }
      v66 = v3;
      v20 = (std::string *)((char *)v12 + 112 * v8);
      v21 = (char *)v18 - 112 * v8;
      v22 = v18;
      if (v21 < (char *)v10)
      {
        v22 = v18;
        do
        {
          v23 = *(_OWORD *)v21;
          v22->__r_.__value_.__r.__words[2] = *((_QWORD *)v21 + 2);
          *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
          *((_QWORD *)v21 + 1) = 0;
          *((_QWORD *)v21 + 2) = 0;
          *(_QWORD *)v21 = 0;
          v24 = *(_OWORD *)(v21 + 24);
          *(_OWORD *)((char *)&v22[1].__r_.__value_.__r.__words[1] + 3) = *(_OWORD *)(v21 + 35);
          *(_OWORD *)&v22[1].__r_.__value_.__l.__data_ = v24;
          v22[2].__r_.__value_.__r.__words[2] = 0;
          v22[3].__r_.__value_.__r.__words[0] = 0;
          v22[2].__r_.__value_.__l.__size_ = 0;
          *(_OWORD *)&v22[2].__r_.__value_.__r.__words[1] = *(_OWORD *)(v21 + 56);
          v22[3].__r_.__value_.__r.__words[0] = *((_QWORD *)v21 + 9);
          *((_QWORD *)v21 + 7) = 0;
          *((_QWORD *)v21 + 8) = 0;
          *((_QWORD *)v21 + 9) = 0;
          v25 = *((_OWORD *)v21 + 6);
          *(_OWORD *)&v22[3].__r_.__value_.__r.__words[1] = *((_OWORD *)v21 + 5);
          *(_OWORD *)&v22[4].__r_.__value_.__l.__data_ = v25;
          v22 = (std::string *)((char *)v22 + 112);
          v21 += 112;
        }
        while (v21 < (char *)v10);
      }
      v75 = v22;
      if (v18 != v20)
      {
        v26 = 0;
        v27 = 0x6DB6DB6DB6DB6DB7 * (((char *)v18 - (char *)v20) >> 4);
        v28 = -112 * v27;
        v29 = (char *)v9 + 112 * v27 + 112 * v65;
        do
        {
          v30 = (char *)v18 + v26;
          v31 = (void **)((char *)&v18[-4] + v26 - 16);
          if (*((char *)&v18[-3] + v26 - 17) < 0)
            operator delete(*v31);
          v32 = &v29[v26];
          v33 = &v29[v26 - 112];
          v34 = *(_OWORD *)v33;
          v18[-4].__r_.__value_.__r.__words[v26 / 8] = *(_QWORD *)&v29[v26 - 96];
          *(_OWORD *)v31 = v34;
          v29[v26 - 89] = 0;
          *v33 = 0;
          v35 = *(_OWORD *)&v29[v26 - 88];
          *(_OWORD *)(v30 - 77) = *(_OWORD *)&v29[v26 - 77];
          *(_OWORD *)(v30 - 88) = v35;
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v30 - 56));
          *(_OWORD *)(v30 - 56) = *(_OWORD *)&v29[v26 - 56];
          *((_QWORD *)v30 - 5) = *(_QWORD *)&v29[v26 - 40];
          *((_QWORD *)v32 - 7) = 0;
          *((_QWORD *)v32 - 6) = 0;
          *((_QWORD *)v32 - 5) = 0;
          v36 = *(_OWORD *)&v29[v26 - 16];
          *((_OWORD *)v30 - 2) = *(_OWORD *)&v29[v26 - 32];
          *((_OWORD *)v30 - 1) = v36;
          v26 -= 112;
        }
        while (v28 != v26);
      }
      v3 = v66;
      for (i = v67; v6 != v17; v12 = (std::string *)((char *)v12 + 112))
      {
        std::string::operator=(v12, (const std::string *)v6);
        v37 = *(_OWORD *)(v6 + 24);
        *(_OWORD *)((char *)&v12[1].__r_.__value_.__r.__words[1] + 3) = *(_OWORD *)(v6 + 35);
        *(_OWORD *)&v12[1].__r_.__value_.__l.__data_ = v37;
        if (v12 != (std::string *)v6)
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v12[2].__r_.__value_.__r.__words[1], *(std::string **)(v6 + 56), *(__int128 **)(v6 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56)) >> 3));
        v38 = *(_OWORD *)(v6 + 96);
        *(_OWORD *)&v12[3].__r_.__value_.__r.__words[1] = *(_OWORD *)(v6 + 80);
        *(_OWORD *)&v12[4].__r_.__value_.__l.__data_ = v38;
        v6 += 112;
      }
    }
    else
    {
      v13 = v11 + v8;
      if ((unint64_t)(v11 + v8) > 0x249249249249249)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      if (0xDB6DB6DB6DB6DB6ELL * (((char *)v76 - (char *)v74) >> 4) > v13)
        v13 = 0xDB6DB6DB6DB6DB6ELL * (((char *)v76 - (char *)v74) >> 4);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)v76 - (char *)v74) >> 4)) >= 0x124924924924924)
        v14 = 0x249249249249249;
      else
        v14 = v13;
      *(_QWORD *)&v100[8] = &v76;
      if (v14)
        v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>>(v14);
      else
        v15 = 0;
      v39 = (std::string *)(v14 + 112 * v11);
      v99.__r_.__value_.__r.__words[0] = v14;
      v99.__r_.__value_.__l.__size_ = (std::string::size_type)v39;
      v99.__r_.__value_.__r.__words[2] = (std::string::size_type)v39;
      *(_QWORD *)v100 = v14 + 112 * v15;
      v40 = 112 * v8;
      v41 = (std::string::size_type)v39 + v40;
      do
      {
        std::allocator<nlv4_inference_orchestrator::orchestration::Token>::construct[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token,nlv4_inference_orchestrator::orchestration::Token const&>(v39, (__int128 *)v6);
        v39 = (std::string *)((char *)v39 + 112);
        v6 += 112;
        v40 -= 112;
      }
      while (v40);
      v99.__r_.__value_.__r.__words[2] = v41;
      size = (std::string *)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>,std::reverse_iterator<nlv4_inference_orchestrator::orchestration::Token*>,std::reverse_iterator<nlv4_inference_orchestrator::orchestration::Token*>,std::reverse_iterator<nlv4_inference_orchestrator::orchestration::Token*>>((uint64_t)&v76, (uint64_t)v12, (uint64_t)v12, (uint64_t)v74, (uint64_t)v74, v99.__r_.__value_.__l.__size_, v99.__r_.__value_.__l.__size_);
      v99.__r_.__value_.__l.__size_ = (std::string::size_type)size;
      v43 = v75;
      v44 = v99.__r_.__value_.__r.__words[2];
      if (v12 != v75)
      {
        do
        {
          v45 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
          *(_QWORD *)(v44 + 16) = *((_QWORD *)&v12->__r_.__value_.__l + 2);
          *(_OWORD *)v44 = v45;
          v12->__r_.__value_.__l.__size_ = 0;
          v12->__r_.__value_.__r.__words[2] = 0;
          v12->__r_.__value_.__r.__words[0] = 0;
          v46 = *(_OWORD *)&v12[1].__r_.__value_.__l.__data_;
          *(_OWORD *)(v44 + 35) = *(_OWORD *)((char *)&v12[1].__r_.__value_.__r.__words[1] + 3);
          *(_OWORD *)(v44 + 24) = v46;
          *(_QWORD *)(v44 + 64) = 0;
          *(_QWORD *)(v44 + 72) = 0;
          *(_QWORD *)(v44 + 56) = 0;
          *(_OWORD *)(v44 + 56) = *(_OWORD *)&v12[2].__r_.__value_.__r.__words[1];
          *(_QWORD *)(v44 + 72) = v12[3].__r_.__value_.__l.__data_;
          v12[2].__r_.__value_.__l.__size_ = 0;
          v12[2].__r_.__value_.__r.__words[2] = 0;
          v12[3].__r_.__value_.__r.__words[0] = 0;
          v47 = *(_OWORD *)&v12[4].__r_.__value_.__l.__data_;
          *(_OWORD *)(v44 + 80) = *(_OWORD *)&v12[3].__r_.__value_.__r.__words[1];
          *(_OWORD *)(v44 + 96) = v47;
          v44 += 112;
          v12 = (std::string *)((char *)v12 + 112);
        }
        while (v12 != v43);
        size = (std::string *)v99.__r_.__value_.__l.__size_;
        v12 = v75;
      }
      v48 = v74;
      v49 = v76;
      v74 = size;
      v75 = (std::string *)v44;
      v76 = *(std::string **)v100;
      v99.__r_.__value_.__r.__words[2] = (std::string::size_type)v12;
      *(_QWORD *)v100 = v49;
      v99.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
      v99.__r_.__value_.__l.__size_ = (std::string::size_type)v48;
      std::__split_buffer<nlv4_inference_orchestrator::orchestration::Token>::~__split_buffer((uint64_t)&v99);
    }
  }
LABEL_41:
  v50 = v75;
  if (v75 >= v76)
  {
    v53 = 0x6DB6DB6DB6DB6DB7 * (((char *)v75 - (char *)v74) >> 4);
    v51 = v68;
    if ((unint64_t)(v53 + 1) > 0x249249249249249)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v54 = 0xDB6DB6DB6DB6DB6ELL * (((char *)v76 - (char *)v74) >> 4);
    if (v54 <= v53 + 1)
      v54 = v53 + 1;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)v76 - (char *)v74) >> 4)) >= 0x124924924924924)
      v55 = 0x249249249249249;
    else
      v55 = v54;
    *(_QWORD *)&v100[8] = &v76;
    if (v55)
      v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>>(v55);
    else
      v56 = 0;
    v99.__r_.__value_.__r.__words[0] = v55;
    v99.__r_.__value_.__l.__size_ = v55 + 112 * v53;
    v99.__r_.__value_.__r.__words[2] = v99.__r_.__value_.__l.__size_;
    *(_QWORD *)v100 = v55 + 112 * v56;
    std::allocator<nlv4_inference_orchestrator::orchestration::Token>::construct[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token,nlv4_inference_orchestrator::orchestration::Token const&>((std::string *)v99.__r_.__value_.__l.__size_, &__p);
    v99.__r_.__value_.__r.__words[2] += 112;
    std::vector<nlv4_inference_orchestrator::orchestration::Token>::__swap_out_circular_buffer((uint64_t *)&v74, &v99);
    v52 = v75;
    std::__split_buffer<nlv4_inference_orchestrator::orchestration::Token>::~__split_buffer((uint64_t)&v99);
  }
  else
  {
    std::allocator<nlv4_inference_orchestrator::orchestration::Token>::construct[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token,nlv4_inference_orchestrator::orchestration::Token const&>(v75, &__p);
    v51 = v68;
    v52 = (std::string *)((char *)v50 + 112);
  }
  v75 = v52;
  v99.__r_.__value_.__r.__words[0] = (std::string::size_type)v95;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
  if (SHIBYTE(v91) < 0)
    operator delete((void *)__p);
  *(_QWORD *)&__p = &v98[32];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::getSubwordTokenChain(v51, &v74, (uint64_t **)&__p);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v51 + 184) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(v51 + 184) + 8)))
  {
    memset(&v97, 0, sizeof(v97));
    memset(&v99, 0, sizeof(v99));
    memset(&v73, 0, sizeof(v73));
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v57 = v91;
    v58 = v92;
    if (v91 != v92)
    {
      v59 = 0;
      do
      {
        v60 = *(_QWORD *)(*(_QWORD *)v57 + 8);
        if ((unint64_t)v59 >= v72)
        {
          v59 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string&>((uint64_t *)&v70, (__int128 *)v60);
        }
        else
        {
          if (*(char *)(v60 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v59, *(const std::string::value_type **)v60, *(_QWORD *)(v60 + 8));
          }
          else
          {
            v61 = *(_OWORD *)v60;
            v59->__r_.__value_.__r.__words[2] = *(_QWORD *)(v60 + 16);
            *(_OWORD *)&v59->__r_.__value_.__l.__data_ = v61;
          }
          ++v59;
        }
        v71 = v59;
        v57 += 8;
      }
      while (v57 != v58);
    }
    nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getSubwordIDs(*(_QWORD *)(v51 + 184), (uint64_t **)&v70, &v69.__r_.__value_.__l.__data_);
    if (v97.__r_.__value_.__r.__words[0])
    {
      v97.__r_.__value_.__l.__size_ = v97.__r_.__value_.__r.__words[0];
      operator delete(v97.__r_.__value_.__l.__data_);
    }
    v97 = v69;
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v51 + 184) + 8) + 64))(*(_QWORD *)(*(_QWORD *)(v51 + 184) + 8)) == 2)
    {
      nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getSubwordMaskVector(*(_QWORD *)(v51 + 184), (unsigned __int8 **)&v70, (std::vector<int> *)&v69);
      if (v99.__r_.__value_.__r.__words[0])
      {
        v99.__r_.__value_.__l.__size_ = v99.__r_.__value_.__r.__words[0];
        operator delete(v99.__r_.__value_.__l.__data_);
      }
      v99 = v69;
      std::optional<std::vector<int>>::operator=[abi:ne180100]<std::vector<int>&,void>((uint64_t)&v80[24], (uint64_t)&v99);
    }
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v51 + 184) + 8) + 64))(*(_QWORD *)(*(_QWORD *)(v51 + 184) + 8)) == 3)
    {
      nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getSubwordFeaturePoolingMask2D(*(_QWORD *)(v51 + 184), (uint64_t)&v70, &v69);
      std::vector<std::vector<float>>::__vdeallocate((uint64_t *)&v73);
      v73 = v69;
      memset(&v69, 0, sizeof(v69));
      v89 = &v69;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
      if (v86)
      {
        std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)&v83, (uint64_t)v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73.__r_.__value_.__l.__size_ - v73.__r_.__value_.__r.__words[0]) >> 3));
      }
      else
      {
        v83 = 0;
        v84 = 0;
        v85 = 0;
        std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v83, (uint64_t)v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73.__r_.__value_.__l.__size_ - v73.__r_.__value_.__r.__words[0]) >> 3));
        v86 = 1;
      }
    }
    std::optional<std::vector<int>>::operator=[abi:ne180100]<std::vector<int>&,void>((uint64_t)v87, (uint64_t)&v97);
    v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
    v70 = &v73;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    if (v99.__r_.__value_.__r.__words[0])
    {
      v99.__r_.__value_.__l.__size_ = v99.__r_.__value_.__r.__words[0];
      operator delete(v99.__r_.__value_.__l.__data_);
    }
    if (v97.__r_.__value_.__r.__words[0])
    {
      v97.__r_.__value_.__l.__size_ = v97.__r_.__value_.__r.__words[0];
      operator delete(v97.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v63 = v74;
    v62 = v75;
    while (v63 != v62)
    {
      v63[1].__r_.__value_.__r.__words[0] = nlv4_inference_orchestrator::vocabulary::Vocabulary::numericalizeToken(*(_QWORD *)(*(_QWORD *)(v51 + 184) + 80), (uint64_t)v63);
      v63 = (std::string *)((char *)v63 + 112);
    }
  }
  nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::getTokenisation(v3, (uint64_t *)&v74, &v97);
  if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str[0].__r_.__value_.__l.__data_);
  __str[0] = v97;
  *((_BYTE *)&v97.__r_.__value_.__s + 23) = 0;
  v97.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str[1].__r_.__value_.__l.__data_);
  __str[1] = *(std::string *)v98;
  v98[23] = 0;
  v98[0] = 0;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__vdeallocate((void **)v80);
  *(_OWORD *)v80 = *(_OWORD *)&v98[24];
  *(_QWORD *)&v80[16] = *(_QWORD *)&v98[40];
  memset(&v98[24], 0, 24);
  v99.__r_.__value_.__r.__words[0] = (std::string::size_type)&v98[24];
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
  if ((v98[23] & 0x80000000) != 0)
    operator delete(*(void **)v98);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  *(_BYTE *)(i + 104) = 0;
  *(_BYTE *)(i + 96) = 0;
  *(_BYTE *)(i + 128) = 0;
  *(_BYTE *)(i + 136) = 0;
  *(_BYTE *)(i + 160) = 0;
  *(_OWORD *)i = 0u;
  *(_OWORD *)(i + 16) = 0u;
  *(_OWORD *)(i + 32) = 0u;
  *(_OWORD *)(i + 48) = 0u;
  *(_OWORD *)(i + 57) = 0u;
  *(_QWORD *)(i + 168) = 0;
  *(_QWORD *)(i + 176) = 0;
  *(_QWORD *)(i + 184) = 0;
  sirinluinternal::SubwordTokenChain::SubwordTokenChain((sirinluinternal::SubwordTokenChain *)(i + 192));
  sirinluinternal::SubwordTokenChain::operator=();
  std::string::operator=((std::string *)i, __str);
  std::string::operator=((std::string *)(i + 24), &__str[1]);
  if (__str != (std::string *)i)
    std::vector<nlv4_inference_orchestrator::orchestration::Token>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*>(i + 48, *(std::string **)v80, *(std::string **)&v80[8], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)&v80[8] - *(_QWORD *)v80) >> 4));
  std::__optional_storage_base<std::vector<int>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<int>,false> const&>(i + 72, (uint64_t)&v80[24]);
  if (*(unsigned __int8 *)(i + 128) == v86)
  {
    if (__str != (std::string *)i && *(_BYTE *)(i + 128))
      std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(i + 104, v83, v84, 0xAAAAAAAAAAAAAAABLL * ((v84 - v83) >> 3));
  }
  else
  {
    if (*(_BYTE *)(i + 128))
    {
      v97.__r_.__value_.__r.__words[0] = i + 104;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
      v64 = 0;
    }
    else
    {
      *(_QWORD *)(i + 104) = 0;
      *(_QWORD *)(i + 112) = 0;
      *(_QWORD *)(i + 120) = 0;
      std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((_QWORD *)(i + 104), v83, v84, 0xAAAAAAAAAAAAAAABLL * ((v84 - v83) >> 3));
      v64 = 1;
    }
    *(_BYTE *)(i + 128) = v64;
  }
  std::__optional_storage_base<std::vector<int>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<int>,false> const&>(i + 136, (uint64_t)v87);
  if ((std::string **)(i + 168) != &v74)
    std::vector<nlv4_inference_orchestrator::orchestration::Token>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*>(i + 168, v74, v75, 0x6DB6DB6DB6DB6DB7 * (((char *)v75 - (char *)v74) >> 4));
  MEMORY[0x1C3BB84F4](&__p);
  v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
  v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
  if (v88 && v87[0])
  {
    v87[1] = v87[0];
    operator delete(v87[0]);
  }
  if (v86)
  {
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
  }
  if (v82 && *(_QWORD *)&v80[24])
  {
    v81 = *(_QWORD *)&v80[24];
    operator delete(*(void **)&v80[24]);
  }
  v97.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
  if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str[0].__r_.__value_.__l.__data_);
}

void sub_1C21AAF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;

  a21 = (uint64_t)&a25;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  nlv4_inference_orchestrator::orchestration::Token::~Token((void **)&a53);
  nlv4_inference_orchestrator::orchestration::Token::~Token(&__p);
  a53 = (uint64_t)&a28;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  nlv4_inference_orchestrator::inference_engine::EspressoBertModelInputType::~EspressoBertModelInputType((nlv4_inference_orchestrator::inference_engine::EspressoBertModelInputType *)&a31);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::vector<nlv4_inference_orchestrator::orchestration::Token>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 112;
        std::allocator<nlv4_inference_orchestrator::orchestration::Token>::destroy[abi:ne180100](v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertModule::getFeaturePoolingMaskRank(nlv4_inference_orchestrator::inference_engine::BertModule *this)
{
  return *((unsigned int *)this + 2);
}

void std::vector<std::vector<float>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<int>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getSubwordFeaturePoolingMask2D(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t MaxNumTokens;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t i;
  std::vector<int>::pointer begin;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  float **v16;
  float *v17;
  float *v18;
  float v19;
  float v20;
  float *v21;
  unint64_t v22;
  int v23;
  void *__p;
  _BYTE *v25;
  std::vector<int> v26;
  _QWORD *v27;
  char v28;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8)))
    MaxNumTokens = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  else
    MaxNumTokens = nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getMaxNumTokens((nlv4_inference_orchestrator::inference_engine::EspressoBertModel *)a1);
  nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getSubwordMaskVector(a1, (unsigned __int8 **)a2, &v26);
  v23 = 0;
  std::vector<float>::vector(&__p, MaxNumTokens, &v23);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v27 = a3;
  v28 = 0;
  if (MaxNumTokens)
  {
    std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__vallocate[abi:ne180100](a3, MaxNumTokens);
    v7 = (_QWORD *)a3[1];
    v8 = &v7[3 * MaxNumTokens];
    v9 = 24 * MaxNumTokens;
    do
    {
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v7, __p, (uint64_t)v25, (v25 - (_BYTE *)__p) >> 2);
      v7 += 3;
      v9 -= 24;
    }
    while (v9);
    a3[1] = v8;
  }
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
  if (MaxNumTokens)
  {
    for (i = 0; i != MaxNumTokens; ++i)
    {
      begin = v26.__begin_;
      v12 = *a3;
      if (v26.__end_ != v26.__begin_)
      {
        v13 = 0;
        v14 = v26.__end_ - v26.__begin_;
        v15 = (_QWORD *)(v12 + 24 * i);
        if (v14 <= 1)
          v14 = 1;
        do
        {
          if (i == begin[v13])
            *(_DWORD *)(*v15 + 4 * v13) = 1065353216;
          ++v13;
        }
        while (v14 != v13);
        v12 = *a3;
      }
      v16 = (float **)(v12 + 24 * i);
      v17 = *v16;
      v18 = v16[1];
      v19 = 0.0;
      while (v17 != v18)
      {
        v20 = *v17++;
        v19 = v19 + v20;
      }
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8))
        && fabsf(v19) > *(float *)(a1 + 88))
      {
        v21 = *(float **)(*a3 + 24 * i);
        v22 = MaxNumTokens;
        do
        {
          *v21 = *v21 / v19;
          ++v21;
          --v22;
        }
        while (v22);
      }
    }
  }
  if (v26.__begin_)
  {
    v26.__end_ = v26.__begin_;
    operator delete(v26.__begin_);
  }
}

void sub_1C21AB41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void **a17)
{
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a17);
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::isDynamicReshapableE5ML(nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule *this)
{
  return 1;
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::generateUnpaddedE5MLBertInput(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this@<X0>, const nlv4_inference_orchestrator::inference_engine::EspressoBertModelInputType *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  os_signpost_id_t v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  float *v16;
  float v17;
  float *v18;
  float *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  float *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  int *v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  _DWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  float *v43;
  NSObject *v44;
  NSObject *v45;
  NSObject *v46;
  std::runtime_error *exception;
  std::runtime_error *v48;
  std::runtime_error *v49;
  std::runtime_error *v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  void *v55[2];
  uint64_t v56;
  void *__p[2];
  uint64_t v58;
  std::string buf;
  void *v60[2];
  uint64_t v61;
  void *v62;
  _BYTE *v63;
  void *v64;
  _BYTE *v65;
  _DWORD *v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float *v71;
  float *v72;
  float *v73;

  v6 = SNLPOSLoggerForCategory(7);
  v7 = os_signpost_id_generate(v6);
  v8 = SNLPOSLoggerForCategory(7);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v9 = v8;
    if (os_signpost_enabled(v8))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "OWL Generate Unpadded E5ML Input", "", (uint8_t *)&buf, 2u);
    }
  }
  v10 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_DEFAULT, "BEGIN \"OWL Generate Unpadded E5ML Input\"", (uint8_t *)&buf, 2u);
  }
  v11 = *((_QWORD *)this + 1);
  if (!v11 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&buf, "Unpadded input not compatible with available owl asset!");
    std::runtime_error::runtime_error(exception, &buf);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  if (!*((_BYTE *)a2 + 160))
  {
    v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&buf, "Invalid subword ids provided!");
    std::runtime_error::runtime_error(v48, &buf);
    v48->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  v12 = *((_QWORD *)a2 + 18) - *((_QWORD *)a2 + 17);
  v13 = v12 >> 2;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  std::vector<float>::reserve((void **)&v71, v12 >> 2);
  v14 = *((_QWORD *)a2 + 17);
  if (*((_QWORD *)a2 + 18) != v14)
  {
    v15 = 0;
    v16 = v72;
    do
    {
      v17 = (float)*(int *)(v14 + 4 * v15);
      if (v16 >= v73)
      {
        v19 = v71;
        v20 = v16 - v71;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v22 = (char *)v73 - (char *)v71;
        if (((char *)v73 - (char *)v71) >> 1 > v21)
          v21 = v22 >> 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
          v23 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v73, v23);
          v19 = v71;
          v16 = v72;
        }
        else
        {
          v24 = 0;
        }
        v25 = (float *)&v24[4 * v20];
        *v25 = v17;
        v18 = v25 + 1;
        while (v16 != v19)
        {
          v26 = *((_DWORD *)v16-- - 1);
          *((_DWORD *)v25-- - 1) = v26;
        }
        v71 = v25;
        v72 = v18;
        v73 = (float *)&v24[4 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v16 = v17;
        v18 = v16 + 1;
      }
      v72 = v18;
      ++v15;
      v14 = *((_QWORD *)a2 + 17);
      v16 = v18;
    }
    while (v15 < (*((_QWORD *)a2 + 18) - v14) >> 2);
  }
  if (!*((_BYTE *)a2 + 128))
  {
    v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&buf, "Invalid subwordFeaturePoolingMask2D provided!, E5ML fast_reshape compatible assets require 2D feature pooling mask.");
    std::runtime_error::runtime_error(v49, &buf);
    v49->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  v68 = 0;
  v69 = 0;
  v70 = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v68, *((_QWORD *)a2 + 13), *((_QWORD *)a2 + 14), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3));
  std::vector<float>::vector(&v66, v13 * v13);
  v27 = v68;
  if (v69 != v68)
  {
    v28 = 0;
    v29 = 0;
    v30 = (v69 - v68) / 24;
    v31 = v66;
    if (v30 <= 1)
      v30 = 1;
    do
    {
      v32 = *(int **)(v27 + 24 * v28);
      v33 = *(_QWORD *)(v27 + 24 * v28 + 8) - (_QWORD)v32;
      if (v33)
      {
        v34 = v33 >> 2;
        if (v34 <= 1)
          v34 = 1;
        do
        {
          v35 = *v32++;
          v31[v29++] = v35;
          --v34;
        }
        while (v34);
      }
      ++v28;
    }
    while (v28 != v30);
  }
  if ((unint64_t)v12 < 8)
  {
    v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&buf, "expectedSeqLen should be at least 2!");
    std::runtime_error::runtime_error(v50, &buf);
    v50->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  LODWORD(buf.__r_.__value_.__l.__data_) = 0;
  std::vector<float>::vector(&v64, v12 >> 2, &buf);
  LODWORD(buf.__r_.__value_.__l.__data_) = 1065353216;
  std::vector<float>::vector(&v62, v12 >> 2, &buf);
  v36 = v62;
  v37 = v63 - (_BYTE *)v62;
  if (v63 == v62 || (*(_DWORD *)v62 = 0, v13 - 1 >= (unint64_t)(v37 >> 2)))
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
  v36[v13 - 1] = 0;
  v38 = operator new(0x10uLL);
  *v38 = 1;
  v38[1] = v13;
  v39 = operator new(0x18uLL);
  *v39 = 1;
  v39[1] = v13;
  v39[2] = v13;
  v40 = operator new(0x10uLL);
  *v40 = 1;
  v40[1] = v13;
  v41 = operator new(0x10uLL);
  *v41 = 1;
  v41[1] = v13;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)a3, v38, (uint64_t)(v38 + 2), 2uLL);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a3 + 24), v71, (uint64_t)v72, v72 - v71);
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 96) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  memset(&buf, 0, sizeof(buf));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&buf, v39, (uint64_t)(v39 + 3), 3uLL);
  v60[0] = 0;
  v60[1] = 0;
  v61 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v60, v66, (uint64_t)v67, (v67 - (_BYTE *)v66) >> 2);
  *(std::string *)(a3 + 160) = buf;
  memset(&buf, 0, sizeof(buf));
  *(_OWORD *)(a3 + 184) = *(_OWORD *)v60;
  *(_QWORD *)(a3 + 200) = v61;
  v60[1] = 0;
  v61 = 0;
  v60[0] = 0;
  *(_BYTE *)(a3 + 208) = 1;
  v55[0] = 0;
  v55[1] = 0;
  v56 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v55, v40, (uint64_t)(v40 + 2), 2uLL);
  __p[0] = 0;
  __p[1] = 0;
  v58 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(__p, v64, (uint64_t)v65, (v65 - (_BYTE *)v64) >> 2);
  *(_OWORD *)(a3 + 216) = *(_OWORD *)v55;
  *(_QWORD *)(a3 + 232) = v56;
  v55[1] = 0;
  v56 = 0;
  v55[0] = 0;
  *(_OWORD *)(a3 + 240) = *(_OWORD *)__p;
  *(_QWORD *)(a3 + 256) = v58;
  __p[1] = 0;
  v58 = 0;
  __p[0] = 0;
  *(_BYTE *)(a3 + 264) = 1;
  v51 = 0uLL;
  v52 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v51, v41, (uint64_t)(v41 + 2), 2uLL);
  v53 = 0uLL;
  v54 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v53, v62, (uint64_t)v63, (v63 - (_BYTE *)v62) >> 2);
  *(_OWORD *)(a3 + 272) = v51;
  *(_QWORD *)(a3 + 288) = v52;
  v52 = 0;
  v51 = 0uLL;
  *(_OWORD *)(a3 + 296) = v53;
  *(_QWORD *)(a3 + 312) = v54;
  v54 = 0;
  v53 = 0uLL;
  *(_BYTE *)(a3 + 320) = 1;
  v42 = operator new(8uLL);
  *v42 = 1;
  v43 = (float *)operator new(4uLL);
  *v43 = (float)(unint64_t)v13;
  *(_QWORD *)(a3 + 328) = v42;
  *(_QWORD *)(a3 + 336) = v42 + 1;
  *(_QWORD *)(a3 + 344) = v42 + 1;
  *(_QWORD *)(a3 + 352) = v43;
  *(_QWORD *)(a3 + 360) = v43 + 1;
  *(_QWORD *)(a3 + 368) = v43 + 1;
  *(_BYTE *)(a3 + 376) = 1;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v55[0])
  {
    v55[1] = v55[0];
    operator delete(v55[0]);
  }
  if (v60[0])
  {
    v60[1] = v60[0];
    operator delete(v60[0]);
  }
  if (buf.__r_.__value_.__r.__words[0])
  {
    buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  v44 = SNLPOSLoggerForCategory(7);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v45 = v44;
    if (os_signpost_enabled(v44))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v45, OS_SIGNPOST_INTERVAL_END, v7, "OWL Generate Unpadded E5ML Input", "", (uint8_t *)&buf, 2u);
    }
  }
  v46 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C2196000, v46, OS_LOG_TYPE_DEFAULT, "END \"OWL Generate Unpadded E5ML Input\"", (uint8_t *)&buf, 2u);
  }
  operator delete(v41);
  operator delete(v40);
  operator delete(v39);
  operator delete(v38);
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (v71)
  {
    v72 = v71;
    operator delete(v71);
  }
}

void sub_1C21ABCA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  void *v36;
  int v37;
  uint64_t v38;
  void *v40;
  void *v41;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((v37 & 1) == 0)
    {
LABEL_6:
      v40 = *(void **)(v38 - 176);
      if (v40)
      {
        *(_QWORD *)(v38 - 168) = v40;
        operator delete(v40);
      }
      __p = (void *)(v38 - 152);
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v41 = *(void **)(v38 - 128);
      if (v41)
      {
        *(_QWORD *)(v38 - 120) = v41;
        operator delete(v41);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v36);
  goto LABEL_6;
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1C21ABF54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1C21ABFC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getSubwordMaskVector(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, std::vector<int> *a3@<X8>)
{
  std::vector<int>::size_type v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  void **v18;
  unint64_t v19;
  unsigned __int8 *v20;
  BOOL v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  int v26;
  int v27;
  std::vector<int>::value_type __x;
  void *__p[2];
  unsigned __int8 v30;

  std::string::basic_string[abi:ne180100]<0>(__p, "▁");
  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  __x = 0;
  std::vector<int>::vector(a3, v6, &__x);
  v8 = *a2;
  v7 = a2[1];
  if (v8 != v7)
  {
    v9 = 0;
    v10 = -1;
    do
    {
      v11 = (char)v8[23];
      if (v11 >= 0)
        v12 = v8;
      else
        v12 = *(unsigned __int8 **)v8;
      if (v11 >= 0)
        v13 = v8[23];
      else
        v13 = *((_QWORD *)v8 + 1);
      v14 = (*(uint64_t (**)(_QWORD, unsigned __int8 *, uint64_t))(***(_QWORD ***)(a1 + 16) + 504))(**(_QWORD **)(a1 + 16), v12, v13);
      if ((char)v8[23] < 0)
      {
        v16 = *(unsigned __int8 **)v8;
        v15 = *((_QWORD *)v8 + 1);
      }
      else
      {
        v15 = v8[23];
        v16 = v8;
      }
      v17 = v30;
      v18 = (void **)__p[0];
      if ((v30 & 0x80u) != 0)
        v17 = (unint64_t)__p[1];
      else
        v18 = __p;
      if (v15 >= v17)
        v19 = v17;
      else
        v19 = v15;
      v20 = &v16[v19];
      if (v17)
        v21 = v19 == 0;
      else
        v21 = 1;
      if (v21)
      {
        v24 = &v16[v19];
      }
      else
      {
        v23 = v16;
        v24 = &v16[v19];
        do
        {
          if (*v23 == *(unsigned __int8 *)v18)
          {
            v25 = 1;
            while (v17 != v25)
            {
              if (&v23[v25] == v20)
                goto LABEL_24;
              v26 = v23[v25];
              v27 = *((unsigned __int8 *)v18 + v25++);
              if (v26 != v27)
                goto LABEL_36;
            }
            v24 = v23;
          }
LABEL_36:
          ++v23;
        }
        while (v23 != v20);
      }
LABEL_24:
      v22 = v24 != v20 || v17 == 0;
      if (v22 && v24 == v16 || v14 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8) && *(_QWORD *)(a1 + 32) != v14)
        ++v10;
      a3->__begin_[v9++] = v10;
      v8 += 24;
    }
    while (v8 != v7);
  }
  if ((char)v30 < 0)
    operator delete(__p[0]);
}

void sub_1C21AC244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  std::vector<int>::pointer end;
  int *v7;
  std::vector<int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_1C21AC2DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getSubwordIDs(uint64_t a1@<X0>, uint64_t **a2@<X1>, char **a3@<X8>)
{
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v6)
  {
    v7 = *a2;
    v8 = a2[1];
    if (*a2 != v8)
    {
      do
      {
        v9 = *((char *)v7 + 23);
        if (v9 >= 0)
          v10 = v7;
        else
          v10 = (uint64_t *)*v7;
        if (v9 >= 0)
          v11 = *((unsigned __int8 *)v7 + 23);
        else
          v11 = v7[1];
        v12 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(***(_QWORD ***)(a1 + 16) + 504))(**(_QWORD **)(a1 + 16), v10, v11);
        v13 = v12;
        v15 = a3[1];
        v14 = (unint64_t)a3[2];
        if ((unint64_t)v15 >= v14)
        {
          v17 = *a3;
          v18 = (v15 - *a3) >> 2;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v20 = v14 - (_QWORD)v17;
          if (v20 >> 1 > v19)
            v19 = v20 >> 1;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
            v21 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
          {
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v21);
            v17 = *a3;
            v15 = a3[1];
          }
          else
          {
            v22 = 0;
          }
          v23 = &v22[4 * v18];
          *(_DWORD *)v23 = v13;
          v16 = v23 + 4;
          while (v15 != v17)
          {
            v24 = *((_DWORD *)v15 - 1);
            v15 -= 4;
            *((_DWORD *)v23 - 1) = v24;
            v23 -= 4;
          }
          *a3 = v23;
          a3[1] = v16;
          a3[2] = &v22[4 * v21];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *(_DWORD *)v15 = v12;
          v16 = v15 + 4;
        }
        a3[1] = v16;
        v7 += 3;
      }
      while (v7 != v8);
    }
  }
}

void sub_1C21AC454(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::reformulateTokens(uint64_t a1@<X0>, const nlv4_inference_orchestrator::orchestration::Token **a2@<X1>, uint64_t a3@<X8>)
{
  const nlv4_inference_orchestrator::orchestration::Token *v6;
  const nlv4_inference_orchestrator::orchestration::Token *v7;
  nlv4_inference_orchestrator::pre_processing::Reformulator *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *__p[2];
  uint64_t v25;
  _OWORD v26[2];
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  void **v31[6];

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::reserve((uint64_t *)a3, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4));
  v6 = *a2;
  v7 = a2[1];
  if (v6 != v7)
  {
    v8 = (nlv4_inference_orchestrator::pre_processing::Reformulator *)(a1 + 192);
    do
    {
      nlv4_inference_orchestrator::pre_processing::Reformulator::applyReformulationToToken(v8, v6, (uint64_t)__p);
      v9 = *(_QWORD *)(a3 + 8);
      v10 = *(_QWORD *)(a3 + 16);
      if (v9 >= v10)
      {
        v15 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v9 - *(_QWORD *)a3) >> 4);
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) > 0x249249249249249)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v17 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v10 - *(_QWORD *)a3) >> 4);
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x124924924924924)
          v18 = 0x249249249249249;
        else
          v18 = v16;
        v31[4] = (void **)(a3 + 16);
        if (v18)
          v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>>(v18);
        else
          v19 = 0;
        v20 = v18 + 112 * v15;
        v31[0] = (void **)v18;
        v31[1] = (void **)v20;
        v31[3] = (void **)(v18 + 112 * v19);
        v21 = *(_OWORD *)__p;
        *(_QWORD *)(v20 + 16) = v25;
        *(_OWORD *)v20 = v21;
        __p[1] = 0;
        v25 = 0;
        __p[0] = 0;
        v22 = v26[0];
        *(_OWORD *)(v20 + 35) = *(_OWORD *)((char *)v26 + 11);
        *(_OWORD *)(v20 + 24) = v22;
        *(_QWORD *)(v20 + 64) = 0;
        *(_QWORD *)(v20 + 72) = 0;
        *(_QWORD *)(v20 + 56) = 0;
        *(_OWORD *)(v20 + 56) = v27;
        *(_QWORD *)(v20 + 72) = v28;
        v27 = 0uLL;
        v28 = 0;
        v23 = v30;
        *(_OWORD *)(v20 + 80) = v29;
        *(_OWORD *)(v20 + 96) = v23;
        v31[2] = (void **)(v20 + 112);
        std::vector<nlv4_inference_orchestrator::orchestration::Token>::__swap_out_circular_buffer((uint64_t *)a3, v31);
        v14 = *(_QWORD *)(a3 + 8);
        std::__split_buffer<nlv4_inference_orchestrator::orchestration::Token>::~__split_buffer((uint64_t)v31);
      }
      else
      {
        v11 = *(_OWORD *)__p;
        *(_QWORD *)(v9 + 16) = v25;
        *(_OWORD *)v9 = v11;
        __p[1] = 0;
        v25 = 0;
        __p[0] = 0;
        v12 = *(_OWORD *)((char *)v26 + 11);
        *(_OWORD *)(v9 + 24) = v26[0];
        *(_OWORD *)(v9 + 35) = v12;
        *(_QWORD *)(v9 + 64) = 0;
        *(_QWORD *)(v9 + 72) = 0;
        *(_QWORD *)(v9 + 56) = 0;
        *(_OWORD *)(v9 + 56) = v27;
        *(_QWORD *)(v9 + 72) = v28;
        v27 = 0uLL;
        v28 = 0;
        v13 = v30;
        *(_OWORD *)(v9 + 80) = v29;
        *(_OWORD *)(v9 + 96) = v13;
        v14 = v9 + 112;
      }
      *(_QWORD *)(a3 + 8) = v14;
      v31[0] = (void **)&v27;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v31);
      if (SHIBYTE(v25) < 0)
        operator delete(__p[0]);
      v6 = (const nlv4_inference_orchestrator::orchestration::Token *)((char *)v6 + 112);
    }
    while (v6 != v7);
  }
}

void sub_1C21AC6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::pre_processing::Reformulator::applyReformulationToToken(nlv4_inference_orchestrator::pre_processing::Reformulator *this@<X0>, const nlv4_inference_orchestrator::orchestration::Token *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string::value_type *v9;
  int v10;
  uint64_t v11;
  char *v12;
  const char *v13;
  __int128 v14;
  std::string v15;
  std::string __p[2];
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;

  if (*((char *)a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  else
    v15 = *(std::string *)a2;
  v6 = *((_QWORD *)this + 3);
  v7 = *((_QWORD *)this + 4);
  if (v6 != v7)
  {
    while (1)
    {
      v8 = *((unsigned __int8 *)a2 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = (std::string::value_type *)a2;
      else
        v9 = *(std::string::value_type **)a2;
      if ((v8 & 0x80u) != 0)
        v8 = *((_QWORD *)a2 + 1);
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      memset(__p, 0, 41);
      v10 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>((std::sub_match<const char *> *)v9, (std::sub_match<const char *> *)&v9[v8], (uint64_t)__p, v6);
      if (__p[0].__r_.__value_.__r.__words[0])
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (v10)
        break;
      v6 += 88;
      if (v6 == v7)
        goto LABEL_26;
    }
    memset(__p, 0, 24);
    v11 = *((unsigned __int8 *)a2 + 23);
    if ((v11 & 0x80u) == 0)
      v12 = (char *)a2;
    else
      v12 = *(char **)a2;
    if ((v11 & 0x80u) != 0)
      v11 = *((_QWORD *)a2 + 1);
    if (*(char *)(v6 + 87) >= 0)
      v13 = (const char *)(v6 + 64);
    else
      v13 = *(const char **)(v6 + 64);
    std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(__p, v12, &v12[v11], (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)v6, v13);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    v15 = __p[0];
  }
LABEL_26:
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_QWORD *)(a3 + 16) = *((_QWORD *)a2 + 2);
  }
  *(_QWORD *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 24) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)(a3 + 35) = *(_OWORD *)((char *)a2 + 35);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a3 + 56), *((__int128 **)a2 + 7), *((__int128 **)a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3));
  v14 = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a3 + 80) = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a3 + 96) = v14;
  std::string::operator=((std::string *)a3, &v15);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_1C21AC8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<nlv4_inference_orchestrator::orchestration::Token>::reserve(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0x6DB6DB6DB6DB6DB7 * ((result[2] - *result) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 112 * v4;
    std::vector<nlv4_inference_orchestrator::orchestration::Token>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<nlv4_inference_orchestrator::orchestration::Token>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

_QWORD *nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::getTokenisation@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, std::string *a3@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a3 + 1, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&a3[1].__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 24);
    a3[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
  }
  a3[2].__r_.__value_.__r.__words[0] = 0;
  a3[2].__r_.__value_.__l.__size_ = 0;
  a3[2].__r_.__value_.__r.__words[2] = 0;
  return std::vector<nlv4_inference_orchestrator::orchestration::Token>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*>(a3[2].__r_.__value_.__r.__words, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4));
}

void sub_1C21ACA9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void __cxx_global_var_init_9()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_8()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_6()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_36()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_33()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_32()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_23()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<float>>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<float>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<float>>>::get_instance(void)::t;
  }
}

void __cxx_global_var_init_20()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance();
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t;
  }
}

void sub_1C21AD028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;

  MEMORY[0x1C3BB9B44](v29, 0x10B2C401347FB16);
  if (a2 == 2)
  {
    v33 = __cxa_begin_catch(a1);
    v34 = (void *)MEMORY[0x1E0CB3940];
    (*(void (**)(void *))(*(_QWORD *)v33 + 16))(v33);
    objc_msgSend(v34, "stringWithFormat:", CFSTR("Hit SNLP exception while constructing OWL orchestrator with asset directory %@: %s"));
    v35 = objc_claimAutoreleasedReturnValue();
    v36 = (void *)v35;
    if (v28)
    {
      v37 = (void *)MEMORY[0x1E0CB35C8];
      v38 = *MEMORY[0x1E0CB2D68];
      a21 = *MEMORY[0x1E0CB2D50];
      a22 = v38;
      a23 = v35;
      a24 = v35;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a23, &a21, 2);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "errorWithDomain:code:userInfo:", CFSTR("SNLPNaturalLanguageParserErrorDomain"), 2, v39);
      *v28 = (id)objc_claimAutoreleasedReturnValue();

    }
    __cxa_end_catch();
  }
  else
  {
    if (a2 != 1)
    {
      if (a18 < 0)
        operator delete(__p);

      _Unwind_Resume(a1);
    }
    v40 = __cxa_begin_catch(a1);
    v41 = (void *)MEMORY[0x1E0CB3940];
    (*(void (**)(void *))(*(_QWORD *)v40 + 16))(v40);
    objc_msgSend(v41, "stringWithFormat:", CFSTR("NLv4 Asset Error when creating the OWL orchestrator: %s"));
    v42 = objc_claimAutoreleasedReturnValue();
    v43 = (void *)v42;
    if (v28)
    {
      v44 = (void *)MEMORY[0x1E0CB35C8];
      v45 = *MEMORY[0x1E0CB2D68];
      a25 = *MEMORY[0x1E0CB2D50];
      a26 = v45;
      *(_QWORD *)(v30 - 88) = v42;
      *(_QWORD *)(v30 - 80) = v42;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v30 - 88, &a25, 2);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v44, "errorWithDomain:code:userInfo:", CFSTR("SNLPNaturalLanguageParserErrorDomain"), 3, v46);
      *v28 = (id)objc_claimAutoreleasedReturnValue();

    }
    __cxa_end_catch();
  }
  JUMPOUT(0x1C21ACFD4);
}

nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator *nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::EmbedderOrchestrator(nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator *this, const std::__fs::filesystem::path *a2)
{
  std::__fs::filesystem::path *v4;
  NSObject *v5;
  const std::__fs::filesystem::path *v6;
  char *v7;
  nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator *v8;
  uint64_t v9;
  uint64_t v10;
  std::string v12;
  std::string v13;
  int v14;
  std::string v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string __p;
  std::string v21;
  char v22;
  std::string v23;
  nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = (std::__fs::filesystem::path *)&std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>((std::string *)this, "config.json")[1];
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>(&v4->__pn_, "reformulations.txt");
  std::__fs::filesystem::path::path[abi:ne180100]<char [14],void>((std::string *)this + 2, "bert.mlmodelc");
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>((std::string *)this + 3, "model.espresso.net");
  std::__fs::filesystem::path::path[abi:ne180100]<char [14],void>((std::string *)this + 4, "src_vocab.txt");
  std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>((std::string *)this + 5, "version.yaml");
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)a2, (std::__fs::filesystem::path *)this + 2);
  std::__fs::filesystem::operator/[abi:ne180100](&v21, (uint64_t)&__p, (std::__fs::filesystem::path *)this);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v23, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  else
    v23 = v21;
  LODWORD(v19.__r_.__value_.__l.__data_) = 2;
  snlp::common::config::loadConfig((uint64_t)this + 144, (uint64_t)&v23, (int *)&v19);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 23) = 0;
  std::__fs::filesystem::operator/[abi:ne180100](&v21, (uint64_t)a2, v4);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v23, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  else
    v23 = v21;
  nlv4_inference_orchestrator::pre_processing::Reformulator::Reformulator((_QWORD *)this + 24);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 30) = 850045863;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_QWORD *)this + 37) = 0;
  v5 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = a2;
    else
      v6 = (const std::__fs::filesystem::path *)a2->__pn_.__r_.__value_.__r.__words[0];
    v7 = (char *)this + 48;
    if (*((char *)this + 71) < 0)
      v7 = (char *)*((_QWORD *)this + 6);
    v8 = this;
    if (*((char *)this + 23) < 0)
      v8 = *(nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator **)this;
    LODWORD(v23.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
    WORD2(v23.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v23.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v7;
    HIWORD(v23.__r_.__value_.__r.__words[2]) = 2080;
    v24 = v8;
    _os_log_impl(&dword_1C2196000, v5, OS_LOG_TYPE_DEFAULT, "assetDirectoryPath = %s, kAssetPathBertModelFolder = %s, kAssetPathConfig = %s", (uint8_t *)&v23, 0x20u);
  }
  std::__fs::filesystem::operator/[abi:ne180100](&v18, (uint64_t)a2, (std::__fs::filesystem::path *)this + 2);
  std::__fs::filesystem::operator/[abi:ne180100](&v19, (uint64_t)&v18, (std::__fs::filesystem::path *)this + 3);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  else
    __p = v19;
  std::__fs::filesystem::operator/[abi:ne180100](&v15, (uint64_t)a2, (std::__fs::filesystem::path *)this + 2);
  std::__fs::filesystem::operator/[abi:ne180100](&v16, (uint64_t)&v15, (std::__fs::filesystem::path *)this);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v17, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  else
    v17 = v16;
  v14 = 2;
  snlp::common::config::loadConfig((uint64_t)&v23, (uint64_t)&v17, &v14);
  std::__fs::filesystem::operator/[abi:ne180100](&v12, (uint64_t)a2, (std::__fs::filesystem::path *)this + 4);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v13, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  else
    v13 = v12;
  v9 = operator new();
  v21.__r_.__value_.__s.__data_[0] = 0;
  v22 = 0;
  nlv4_inference_orchestrator::inference_engine::EspressoBertModel::EspressoBertModel(v9, (char *)&__p, (uint64_t)&v21, &v23, (uint64_t)&v13);
  if (v22 && SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  v10 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)&v23);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::validateBertModelLoading((nlv4_inference_orchestrator::inference_engine::EspressoBertModel **)this);
  return this;
}

void sub_1C21AD6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;
  void **v62;
  void **v63;
  void **v64;
  void **v65;
  void **v66;
  std::mutex *v67;
  uint64_t v68;
  uint64_t v70;

  if (a17 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table(v68 - 144);
  if (a42 < 0)
    operator delete(a37);
  if (a36 < 0)
    operator delete(a31);
  if (a30 < 0)
    operator delete(a25);
  if (a61 < 0)
    operator delete(a56);
  if (a55 < 0)
    operator delete(a50);
  if (a49 < 0)
    operator delete(a44);
  std::mutex::~mutex(v67);
  nlv4_inference_orchestrator::pre_processing::Reformulator::~Reformulator(v66);
  v70 = *(_QWORD *)(v61 + 184);
  *(_QWORD *)(v61 + 184) = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table(a11);
  if (*(char *)(v61 + 143) < 0)
    operator delete(*a10);
  if (*(char *)(v61 + 119) < 0)
    operator delete(*v65);
  if (*(char *)(v61 + 95) < 0)
    operator delete(*v64);
  if (*(char *)(v61 + 71) < 0)
    operator delete(*v63);
  if (*(char *)(v61 + 47) < 0)
    operator delete(*v62);
  if (*(char *)(v61 + 23) < 0)
    operator delete(*(void **)v61);
  _Unwind_Resume(a1);
}

void sub_1C21AD8AC()
{
  uint64_t v0;

  if (*(char *)(v0 - 121) < 0)
    operator delete(*(void **)(v0 - 144));
  if (*(char *)(v0 - 153) < 0)
    operator delete(*(void **)(v0 - 176));
  JUMPOUT(0x1C21AD820);
}

void sub_1C21AD8D4()
{
  JUMPOUT(0x1C21AD820);
}

void sub_1C21AD8DC()
{
  uint64_t v0;

  if (*(char *)(v0 - 121) < 0)
    operator delete(*(void **)(v0 - 144));
  if (*(char *)(v0 - 153) < 0)
    operator delete(*(void **)(v0 - 176));
  JUMPOUT(0x1C21AD908);
}

void sub_1C21AD91C()
{
  JUMPOUT(0x1C21AD840);
}

void sub_1C21AD924()
{
  JUMPOUT(0x1C21AD854);
}

void sub_1C21AD92C()
{
  JUMPOUT(0x1C21AD864);
}

void sub_1C21AD934()
{
  JUMPOUT(0x1C21AD874);
}

void sub_1C21AD93C()
{
  JUMPOUT(0x1C21AD884);
}

void sub_1C21AD944()
{
  JUMPOUT(0x1C21AD894);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::validateBertModelLoading(nlv4_inference_orchestrator::inference_engine::EspressoBertModel **this)
{
  char v2;
  uint64_t result;
  char v4;
  NSObject *v5;
  std::runtime_error *exception;
  std::string v7;

  nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getUnknownTokenId(this[23]);
  if (!v2 || (result = nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getPadTokenId(this[23]), !v4))
  {
    v5 = SNLPOSLoggerForCategory(5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v7.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C2196000, v5, OS_LOG_TYPE_DEBUG, "OWL assets not identified.  If this is a unit test, have you pulled all git lfs assets?  If this is a user request, have you ensured the assets are available on the device?", (uint8_t *)&v7, 2u);
    }
    std::string::basic_string[abi:ne180100]<0>(&v7, "Vocabulary special tokens not properly defined");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, &v7);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE98D8;
  }
  return result;
}

void sub_1C21ADA78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoBertModel::EspressoBertModel(uint64_t a1, char *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v10;
  void *v11;
  void *v12;
  char *v13;
  NSObject *v14;
  void *v15;
  _DWORD *v16;
  unsigned int ConfigVocabSize;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  char v21;
  uint64_t PadTokenId;
  char v23;
  char v24;
  uint64_t UnknownTokenId;
  char v26;
  _QWORD **v28;
  std::__fs::filesystem::path v29;
  std::string v30;
  void *v31[2];
  char v32;
  std::string __p;
  void *v34;
  char v35;
  void *v36[2];
  char v37;
  std::string buf;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = 0;
  v10 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E7BE98B8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 730643660;
  v28 = (_QWORD **)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 96), "position_embedding_vector.txt");
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>((std::string *)(a1 + 120), "model.espresso.net");
  std::__fs::filesystem::path::path[abi:ne180100]<char [43],void>((std::string *)(a1 + 144), "model.bundle/universal.bundle/universal.e5");
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  std::string::append[abi:ne180100]<char const*,0>((std::string *)(a1 + 168), "model.bundle/universal.bundle/main/segment_0__cpu/model.espresso.net", "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 192), "properties");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 216), "fast_reshape");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 240), "1");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 264), "hidden_size");
  nlv4_inference_orchestrator::inference_engine::EspressoBertModel::createModule((std::__fs::filesystem::path *)a1, a2, a4, (nlv4_inference_orchestrator::inference_engine::BertModule **)v36);
  v11 = v36[0];
  v12 = (void *)*v10;
  *v10 = v36[0];
  if (v12)
  {
    (*(void (**)(void *))(*(_QWORD *)v12 + 88))(v12);
    v11 = (void *)*v10;
  }
  if ((*(unsigned int (**)(void *))(*(_QWORD *)v11 + 16))(v11))
    v13 = "true";
  else
    v13 = "false";
  std::string::basic_string[abi:ne180100]<0>(v36, v13);
  std::operator+<char>();
  v14 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    v15 = &v34;
    if (v35 < 0)
      v15 = v34;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
    _os_log_impl(&dword_1C2196000, v14, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&buf, 0xCu);
  }
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v10 + 16))(*v10))
  {
    if (*(_BYTE *)(a3 + 24))
    {
      v16 = (_DWORD *)operator new();
      nl_sentencepiece::SentencepieceModel::SentencepieceModel(v16);
      std::unique_ptr<nl_sentencepiece::SentencepieceModel>::reset[abi:ne180100](v28, v16);
    }
    else
    {
      std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v30, a2);
      std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v30, (uint64_t)v31);
      memset(&v29, 0, sizeof(v29));
      std::string::append[abi:ne180100]<char const*,0>(&v29.__pn_, "bpe.model", "");
      std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)v31, &v29);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        buf = __p;
      }
      if (SHIBYTE(v29.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__pn_.__r_.__value_.__l.__data_);
      if (v32 < 0)
        operator delete(v31[0]);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      v20 = (_DWORD *)operator new();
      nl_sentencepiece::SentencepieceModel::SentencepieceModel(v20);
      std::unique_ptr<nl_sentencepiece::SentencepieceModel>::reset[abi:ne180100](v28, v20);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    ConfigVocabSize = nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getConfigVocabSize((nlv4_inference_orchestrator::inference_engine::EspressoBertModel *)a1);
    v18 = operator new();
    nlv4_inference_orchestrator::vocabulary::Vocabulary::Vocabulary(v18, a5, ConfigVocabSize);
    v19 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v18;
    if (v19)
      std::default_delete<nlv4_inference_orchestrator::vocabulary::Vocabulary>::operator()[abi:ne180100](v19);
  }
  nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getPadTokenId((nlv4_inference_orchestrator::inference_engine::EspressoBertModel *)a1);
  if (v21)
  {
    PadTokenId = nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getPadTokenId((nlv4_inference_orchestrator::inference_engine::EspressoBertModel *)a1);
    if (!v23)
      std::__throw_bad_optional_access[abi:ne180100]();
    *(_QWORD *)(a1 + 24) = PadTokenId;
  }
  nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getUnknownTokenId((nlv4_inference_orchestrator::inference_engine::EspressoBertModel *)a1);
  if (v24)
  {
    UnknownTokenId = nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getUnknownTokenId((nlv4_inference_orchestrator::inference_engine::EspressoBertModel *)a1);
    if (!v26)
      std::__throw_bad_optional_access[abi:ne180100]();
    *(_QWORD *)(a1 + 32) = UnknownTokenId;
  }
  if (v35 < 0)
    operator delete(v34);
  if (v37 < 0)
    operator delete(v36[0]);
  return a1;
}

void sub_1C21ADEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, uint64_t a11, _QWORD **a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;
  uint64_t *v49;
  void **v50;
  uint64_t v52;
  uint64_t v53;

  if (a36 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
    operator delete(a19);
  if (a42 < 0)
    operator delete(a37);
  if (a48 < 0)
    operator delete(a43);
  if (*(char *)(v48 + 287) < 0)
    operator delete(*v50);
  uaap::UPDataDetectorCacheFiles::~UPDataDetectorCacheFiles(a10);
  if (*(char *)(v48 + 119) < 0)
    operator delete(*a9);
  v52 = *(_QWORD *)(v48 + 80);
  *(_QWORD *)(v48 + 80) = 0;
  if (v52)
    std::default_delete<nlv4_inference_orchestrator::vocabulary::Vocabulary>::operator()[abi:ne180100](v52);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table(a11);
  std::unique_ptr<nl_sentencepiece::SentencepieceModel>::reset[abi:ne180100](a12, 0);
  v53 = *v49;
  *v49 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 88))(v53);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getUnknownTokenId(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2))
    return (*(int (**)(_QWORD))(***((_QWORD ***)this + 2) + 560))(**((_QWORD **)this + 2));
  else
    return *(_QWORD *)(*((_QWORD *)this + 10) + 96);
}

uint64_t sentencepiece::SentencePieceProcessor::unk_id(sentencepiece::ModelInterface **this)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sentencepiece::ModelInterface::unk_piece(this[1]);
  v3 = strlen(v2);
  v4 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*this + 63))(this, v2, v3);
  if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*this + 66))(this, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sentencepiece::SentencePieceProcessor::IsUnknown(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  uint64_t v4;
  sentencepiece::logging *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  char v16;
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v17);
  v4 = v17;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  if (!v4)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 144))(*((_QWORD *)this + 1), a2);
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    v16 = 0;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ERROR", 5);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v17, this);
    v12 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v17);
    v13 = strlen(v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v16);
  }
  return 0;
}

void sub_1C21AE320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

BOOL sentencepiece::MemoryMappedModelProto::PieceIsUnknown(sentencepiece::MemoryMappedModelProto *this, int a2)
{
  return *(_BYTE *)(*((_QWORD *)this + 7) + a2) == 2;
}

uint64_t sentencepiece::ModelInterface::IsUnknown(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1));
}

const char *sentencepiece::ModelInterface::unk_piece(sentencepiece::ModelInterface *this)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  else
    return "<unk>";
}

const char *sentencepiece::MemoryMappedModelProto::UnkPiece(sentencepiece::MemoryMappedModelProto *this)
{
  const char *v1;

  v1 = (const char *)(*((_QWORD *)this + 10) + *(unsigned int *)(*((_QWORD *)this + 9) + 4));
  strlen(v1);
  return v1;
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getPadTokenId(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this)
{
  uint64_t v2;
  _QWORD *v3;
  void **v4;
  unint64_t v5;
  int v6;
  void *__p[2];
  unsigned __int8 v9;

  v2 = *((_QWORD *)this + 1);
  if (!v2 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2))
    return *(_QWORD *)(*((_QWORD *)this + 10) + 112);
  v3 = (_QWORD *)*((_QWORD *)this + 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "[PAD]");
  if ((v9 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v5 = v9;
  else
    v5 = (unint64_t)__p[1];
  v6 = (*(uint64_t (**)(_QWORD, void **, unint64_t))(*(_QWORD *)*v3 + 504))(*v3, v4, v5);
  if ((char)v9 < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_1C21AE494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertE5MLModule::isSubOwlModel(nlv4_inference_orchestrator::inference_engine::BertE5MLModule *this)
{
  return 1;
}

_QWORD *nlv4_inference_orchestrator::pre_processing::Reformulator::Reformulator(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, " => ");
  nlv4_inference_orchestrator::pre_processing::Reformulator::readReformulations((unsigned __int8 *)v2, (int64x2_t *)(v2 + 3));
  return a1;
}

void sub_1C21AE4F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::pre_processing::Reformulator::readReformulations@<X0>(unsigned __int8 *a1@<X0>, int64x2_t *a2@<X8>)
{
  std::locale::id *v4;
  const std::locale::facet *v5;
  unsigned __int8 v6;
  _QWORD *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string *p_str;
  std::string::size_type size;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  std::string *v21;
  std::string *v22;
  uint64_t v23;
  int v24;
  int v25;
  std::string::size_type v27;
  std::string::size_type v28;
  std::string::size_type v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  int64x2_t v54;
  char *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::regex_traits<char> v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  std::string __p;
  std::regex_traits<char> v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  std::string v72;
  std::string v73;
  std::string __str;
  char *v75;
  int64x2_t v76;
  char *v77;
  int64x2_t *v78;
  _QWORD v79[2];
  _QWORD v80[51];
  _QWORD v81[21];

  v81[19] = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v79);
  a2->i64[0] = 0;
  a2->i64[1] = 0;
  a2[1].i64[0] = 0;
  if (!v80[15])
    goto LABEL_105;
  memset(&__str, 0, sizeof(__str));
  v4 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v79 + *(_QWORD *)(v79[0] - 24)));
    v5 = std::locale::use_facet(&v68.__loc_, v4);
    v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
    std::locale::~locale(&v68.__loc_);
    v7 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v79, (uint64_t)&__str, v6);
    v8 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 5) != 0)
      break;
    v9 = (std::string *)__str.__r_.__value_.__r.__words[0];
    p_str = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else
    {
      size = __str.__r_.__value_.__l.__size_;
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (size)
      v12 = (std::string *)((char *)&p_str->__r_.__value_.__l.__data_ + 1);
    else
      v12 = p_str;
    if (size)
    {
      v13 = p_str;
      v14 = v12;
      do
      {
        v15 = v13;
        v16 = (unsigned __int8 *)v13;
        while (1)
        {
          v17 = *v16++;
          if (v17 == 35)
            break;
          v15 = (std::string *)v16;
          if (v16 == (unsigned __int8 *)v12)
          {
            v15 = v14;
            goto LABEL_17;
          }
        }
        v13 = (std::string *)((char *)&v15->__r_.__value_.__l.__data_ + 1);
        v14 = v15;
      }
      while (v16 != (unsigned __int8 *)v12);
LABEL_17:
      if (v15 != v12 && v15 == p_str)
        continue;
    }
    if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v8 = __str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
LABEL_23:
        v18 = a1[23];
        v19 = *(unsigned __int8 **)a1;
        if ((v18 & 0x80u) != 0)
          v18 = *((_QWORD *)a1 + 1);
        else
          v19 = a1;
        v20 = (unsigned __int8 *)v9 + v8;
        if (v18)
        {
          v21 = v9;
          v22 = (std::string *)v20;
          do
          {
            if (v21->__r_.__value_.__s.__data_[0] == *v19)
            {
              v23 = 1;
              while (v18 != v23)
              {
                if ((unsigned __int8 *)((char *)v21 + v23) == v20)
                  goto LABEL_38;
                v24 = v21->__r_.__value_.__s.__data_[v23];
                v25 = v19[v23++];
                if (v24 != v25)
                  goto LABEL_29;
              }
              v22 = v21;
            }
LABEL_29:
            v21 = (std::string *)((char *)v21 + 1);
          }
          while (v21 != (std::string *)v20);
        }
        else
        {
          v22 = (std::string *)v20;
        }
LABEL_38:
        if (v22 != (std::string *)v20 || v18 == 0)
        {
          v27 = (char *)v22 - (char *)v9;
          if ((char *)v22 - (char *)v9 != -1)
          {
            std::string::basic_string(&v73, &__str, 0, (char *)v22 - (char *)v9, (std::allocator<char> *)&v68);
            std::string::basic_string(&v72, &__str, v27, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v68);
            if ((char)a1[23] < 0)
              v28 = *((_QWORD *)a1 + 1);
            else
              v28 = a1[23];
            std::string::erase(&v72, 0, v28);
            v29 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
            if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v29 = v73.__r_.__value_.__l.__size_;
            if (v29)
            {
              std::regex_traits<char>::regex_traits(&v68);
              v71 = 0;
              v69 = 0u;
              v70 = 0u;
              std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(&v63, (uint64_t)&v73);
              std::locale::operator=(&v68.__loc_, &v63.__loc_);
              *(_OWORD *)&v68.__ct_ = *(_OWORD *)&v63.__ct_;
              v69 = v64;
              v30 = v65;
              v65 = 0uLL;
              v31 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
              v70 = v30;
              if (v31)
              {
                p_shared_owners = (unint64_t *)&v31->__shared_owners_;
                do
                  v33 = __ldaxr(p_shared_owners);
                while (__stlxr(v33 - 1, p_shared_owners));
                if (!v33)
                {
                  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                  std::__shared_weak_count::__release_weak(v31);
                }
              }
              v34 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
              v71 = v66;
              if (*((_QWORD *)&v65 + 1))
              {
                v35 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
                do
                  v36 = __ldaxr(v35);
                while (__stlxr(v36 - 1, v35));
                if (!v36)
                {
                  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                  std::__shared_weak_count::__release_weak(v34);
                }
              }
              std::locale::~locale(&v63.__loc_);
              std::locale::locale(&v63.__loc_, &v68.__loc_);
              *(_OWORD *)&v63.__ct_ = *(_OWORD *)&v68.__ct_;
              v64 = v69;
              v65 = v70;
              if (*((_QWORD *)&v70 + 1))
              {
                v37 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
                do
                  v38 = __ldxr(v37);
                while (__stxr(v38 + 1, v37));
              }
              v66 = v71;
              if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&__p, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
              else
                __p = v72;
              v40 = a2->u64[1];
              v39 = a2[1].u64[0];
              if (v40 >= v39)
              {
                v42 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v40 - a2->i64[0]) >> 3);
                v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) > 0x2E8BA2E8BA2E8BALL)
                  std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
                v44 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v39 - a2->i64[0]) >> 3);
                if (2 * v44 > v43)
                  v43 = 2 * v44;
                if (v44 >= 0x1745D1745D1745DLL)
                  v45 = 0x2E8BA2E8BA2E8BALL;
                else
                  v45 = v43;
                v78 = a2 + 1;
                if (v45)
                {
                  if (v45 > 0x2E8BA2E8BA2E8BALL)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v46 = (char *)operator new(88 * v45);
                }
                else
                {
                  v46 = 0;
                }
                v75 = v46;
                v76.i64[0] = (uint64_t)&v46[88 * v42];
                v76.i64[1] = v76.i64[0];
                v77 = &v46[88 * v45];
                std::pair<std::basic_regex<char,std::regex_traits<char>>,std::string>::pair[abi:ne180100]((std::locale *)v76.i64[0], (uint64_t)&v63);
                v47 = v76.i64[0];
                v41 = v76.i64[1] + 88;
                v76.i64[1] += 88;
                v48 = a2->i64[0];
                v49 = a2->u64[1];
                if (v49 == a2->i64[0])
                {
                  v54 = vdupq_n_s64(v49);
                }
                else
                {
                  v50 = 0;
                  do
                  {
                    v51 = v47 + v50;
                    v52 = v49 + v50;
                    std::locale::locale((std::locale *)(v47 + v50 - 88), (const std::locale *)(v49 + v50 - 88));
                    *(_OWORD *)(v51 - 80) = *(_OWORD *)(v49 + v50 - 80);
                    *(_OWORD *)(v51 - 64) = *(_OWORD *)(v49 + v50 - 64);
                    *(_OWORD *)(v51 - 48) = *(_OWORD *)(v49 + v50 - 48);
                    *(_QWORD *)(v52 - 48) = 0;
                    *(_QWORD *)(v52 - 40) = 0;
                    *(_QWORD *)(v51 - 32) = *(_QWORD *)(v49 + v50 - 32);
                    v53 = *(_OWORD *)(v49 + v50 - 24);
                    *(_QWORD *)(v51 - 8) = *(_QWORD *)(v49 + v50 - 8);
                    *(_OWORD *)(v51 - 24) = v53;
                    *(_QWORD *)(v52 - 16) = 0;
                    *(_QWORD *)(v52 - 8) = 0;
                    *(_QWORD *)(v52 - 24) = 0;
                    v50 -= 88;
                  }
                  while (v49 + v50 != v48);
                  v47 += v50;
                  v54 = *a2;
                  v41 = v76.i64[1];
                }
                a2->i64[0] = v47;
                a2->i64[1] = v41;
                v76 = v54;
                v55 = (char *)a2[1].i64[0];
                a2[1].i64[0] = (uint64_t)v77;
                v77 = v55;
                v75 = (char *)v54.i64[0];
                std::__split_buffer<std::pair<std::basic_regex<char,std::regex_traits<char>>,std::string>>::~__split_buffer((uint64_t)&v75);
              }
              else
              {
                std::pair<std::basic_regex<char,std::regex_traits<char>>,std::string>::pair[abi:ne180100]((std::locale *)a2->i64[1], (uint64_t)&v63);
                v41 = v40 + 88;
                a2->i64[1] = v40 + 88;
              }
              a2->i64[1] = v41;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              v56 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
              if (*((_QWORD *)&v65 + 1))
              {
                v57 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
                do
                  v58 = __ldaxr(v57);
                while (__stlxr(v58 - 1, v57));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                  std::__shared_weak_count::__release_weak(v56);
                }
              }
              std::locale::~locale(&v63.__loc_);
              v59 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
              if (*((_QWORD *)&v70 + 1))
              {
                v60 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
                do
                  v61 = __ldaxr(v60);
                while (__stlxr(v61 - 1, v60));
                if (!v61)
                {
                  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                  std::__shared_weak_count::__release_weak(v59);
                }
              }
              std::locale::~locale(&v68.__loc_);
            }
            if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v72.__r_.__value_.__l.__data_);
            if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v73.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    else if (*((_BYTE *)&__str.__r_.__value_.__s + 23))
    {
      v9 = &__str;
      goto LABEL_23;
    }
  }
  if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v79 + *(_QWORD *)(v79[0] - 24)), *(_DWORD *)((char *)&v80[2] + *(_QWORD *)(v79[0] - 24)) | 4);
LABEL_105:
  v79[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v79 + *(_QWORD *)(v79[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1C3BB970C](v80);
  std::istream::~istream();
  return MEMORY[0x1C3BB9A90](v81);
}

void sub_1C21AEC58()
{
  std::locale v0;

  ((void (*)())std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100])();
  std::locale::~locale(&v0);
  JUMPOUT(0x1C21AECD4);
}

void sub_1C21AEC60(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::locale a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  uint64_t v44;
  std::locale v45;

  std::allocator<std::pair<std::basic_regex<char,std::regex_traits<char>>,std::string>>::destroy[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v44);
  std::locale::~locale(&v45);
  JUMPOUT(0x1C21AECD4);
}

void sub_1C21AECCC()
{
  JUMPOUT(0x1C21AECD4);
}

void sub_1C21AED04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::locale a27)
{
  void **v28[27];
  char v29;
  uint64_t v30;

  std::locale::~locale(&a27);
  if (v29 < 0)
    operator delete(v28[25]);
  std::vector<std::pair<std::basic_regex<char,std::regex_traits<char>>,std::string>>::__destroy_vector::operator()[abi:ne180100](v28);
  std::ifstream::~ifstream(&v30);
  _Unwind_Resume(a1);
}

void sub_1C21AEE18(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1C3BB9A90](v1 + 424);
  _Unwind_Resume(a1);
}

_DWORD *nl_sentencepiece::SentencepieceModel::SentencepieceModel(_DWORD *a1)
{
  sentencepiece::SentencePieceProcessor *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t i;
  uint64_t v12;
  unint64_t v13;
  std::string::size_type v14;
  const void *v15;
  std::string *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void *v20;
  std::string::size_type size;
  std::string *v22;
  std::string *v23;
  std::string *v24;
  std::string *v25;
  std::string *v26;
  std::string *v27;
  std::string *v28;
  unsigned __int8 *v29;
  int v30;
  std::string *v31;
  unsigned __int8 *v32;
  int v33;
  std::runtime_error *exception;
  std::string v36;
  uint64_t v37;

  v2 = (sentencepiece::SentencePieceProcessor *)operator new();
  sentencepiece::SentencePieceProcessor::SentencePieceProcessor(v2);
  *(_QWORD *)a1 = v2;
  a1[2] = 0;
  v3 = SNLPOSLoggerForCategory(7);
  v4 = os_signpost_id_generate(v3);
  v5 = SNLPOSLoggerForCategory(7);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v6 = v5;
    if (os_signpost_enabled(v5))
    {
      LOWORD(v36.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v4, "Sentence Piece Load", "", (uint8_t *)&v36, 2u);
    }
  }
  v7 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v36.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_DEFAULT, "BEGIN \"Sentence Piece Load\"", (uint8_t *)&v36, 2u);
  }
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a1 + 16))(&v37);
  v8 = SNLPOSLoggerForCategory(7);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v9 = v8;
    if (os_signpost_enabled(v8))
    {
      LOWORD(v36.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v9, OS_SIGNPOST_INTERVAL_END, v4, "Sentence Piece Load", "", (uint8_t *)&v36, 2u);
    }
  }
  v10 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v36.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_DEFAULT, "END \"Sentence Piece Load\"", (uint8_t *)&v36, 2u);
  }
  if (v37)
  {
    std::operator+<char>();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, &v36);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE84D0;
  }
  for (i = 0;
        (int)i < (*(int (**)(_QWORD))(**(_QWORD **)a1 + 496))(*(_QWORD *)a1);
        i = (i + 1))
  {
    v12 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)a1 + 512))(*(_QWORD *)a1, i);
    v14 = v13;
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v15 = (const void *)v12;
    if (v13 >= 0x17)
    {
      v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v17 = v13 | 7;
      v18 = v17 + 1;
      v16 = (std::string *)operator new(v17 + 1);
      v36.__r_.__value_.__l.__size_ = v14;
      v36.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
      v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    }
    else
    {
      *((_BYTE *)&v36.__r_.__value_.__s + 23) = v13;
      v16 = &v36;
      if (!v13)
        goto LABEL_22;
    }
    memmove(v16, v15, v14);
LABEL_22:
    v16->__r_.__value_.__s.__data_[v14] = 0;
    v19 = SHIBYTE(v36.__r_.__value_.__r.__words[2]);
    size = v36.__r_.__value_.__l.__size_;
    v20 = (void *)v36.__r_.__value_.__r.__words[0];
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v36;
    else
      v22 = (std::string *)v36.__r_.__value_.__r.__words[0];
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    if (size)
      v23 = (std::string *)((char *)&v22->__r_.__value_.__l.__data_ + 1);
    else
      v23 = v22;
    if (!size)
      goto LABEL_49;
    v24 = v22;
    v25 = v23;
    v26 = v22;
    v27 = v23;
    do
    {
      v28 = v26;
      v29 = (unsigned __int8 *)v26;
      while (1)
      {
        v30 = *v29++;
        if (v30 == 91)
          break;
        v28 = (std::string *)v29;
        if (v29 == (unsigned __int8 *)v23)
        {
          v28 = v27;
          goto LABEL_37;
        }
      }
      v26 = (std::string *)((char *)&v28->__r_.__value_.__l.__data_ + 1);
      v27 = v28;
    }
    while (v29 != (unsigned __int8 *)v23);
LABEL_37:
    if (v28 == v23 || v28 != v22)
    {
      do
      {
        v31 = v24;
        v32 = (unsigned __int8 *)v24;
        while (1)
        {
          v33 = *v32++;
          if (v33 == 60)
            break;
          v31 = (std::string *)v32;
          if (v32 == (unsigned __int8 *)v23)
          {
            v31 = v25;
            goto LABEL_44;
          }
        }
        v24 = (std::string *)((char *)&v31->__r_.__value_.__l.__data_ + 1);
        v25 = v31;
      }
      while (v32 != (unsigned __int8 *)v23);
LABEL_44:
      if (v31 == v23 || v31 != v22)
      {
LABEL_49:
        a1[2] = i;
        if (v19 < 0)
          operator delete(v20);
        break;
      }
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v37);
  return a1;
}

void sub_1C21AF214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a15);
  _Unwind_Resume(a1);
}

const char *sentencepiece::SentencePieceProcessor::IdToPiece(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  uint64_t v4;
  sentencepiece::logging *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char v17;
  uint64_t v18;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v18);
  v4 = v18;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v18);
  if (!v4)
    return (const char *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 120))(*((_QWORD *)this + 1), a2);
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    v17 = 0;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ERROR", 5);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v18, this);
    v12 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v18);
    v13 = strlen(v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nReturns default value ", 23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"", 0);
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v18);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v17);
  }
  return "";
}

void sub_1C21AF3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::GetPieceSize(sentencepiece::SentencePieceProcessor *this)
{
  uint64_t v2;
  sentencepiece::logging *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const char *v10;
  size_t v11;
  _QWORD *v12;
  char v14;
  uint64_t v15;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v15);
  v2 = v15;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v15);
  if (!v2)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 128))(*((_QWORD *)this + 1));
  if ((int)sentencepiece::logging::GetMinLogLevel(v3) <= 2)
  {
    v14 = 0;
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") ", 2);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"LOG(", 4);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ERROR", 5);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v15, this);
    v10 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v15);
    v11 = strlen(v10);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v15);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v14);
  }
  return 0;
}

void sub_1C21AF53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::MemoryMappedModelProto::PieceSize(sentencepiece::MemoryMappedModelProto *this)
{
  return *((unsigned int *)this + 12);
}

const char *sentencepiece::MemoryMappedModelProto::IdToPiece(sentencepiece::MemoryMappedModelProto *this, int a2)
{
  const char *v2;

  v2 = (const char *)(*((_QWORD *)this + 10) + *(unsigned int *)(*((_QWORD *)this + 9) + 4 * (a2 + 5)));
  strlen(v2);
  return v2;
}

uint64_t sentencepiece::ModelInterface::IdToPiece(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::GetPieceSize(sentencepiece::ModelInterface *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

double sentencepiece::SentencePieceProcessor::SentencePieceProcessor(sentencepiece::SentencePieceProcessor *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BE8C50;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void sentencepiece::SentencePieceProcessor::MMap(_QWORD *a1@<X0>, char *a2@<X1>, sentencepiece::util::Status *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::string __p;

  v6 = operator new();
  *(_QWORD *)v6 = &off_1E7BE9130;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 24) = -1;
  v7 = a1[11];
  a1[11] = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v6 = a1[11];
  }
  v8 = a2;
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&__p, &v8);
  sentencepiece::Mmap<char>::open(v6, (uint64_t)&__p, 0, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*(_QWORD *)a3)
  {
    sentencepiece::util::Status::~Status(a3);
    (*(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 48))(a1, *(_QWORD *)(a1[11] + 8), *(_QWORD *)(a1[11] + 16));
  }
}

void sub_1C21AF6E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sentencepiece::Mmap<char>::close(uint64_t a1)
{
  int v2;
  void *result;

  v2 = *(_DWORD *)(a1 + 24);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)(a1 + 24) = -1;
  }
  result = *(void **)(a1 + 8);
  if (result)
    result = (void *)munmap(result, *(_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

sentencepiece::ModelProto *sentencepiece::SentencePieceProcessor::Load@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  sentencepiece::ModelProto *result;
  sentencepiece::ModelProto *v9;
  uint64_t v10;
  uint64_t v11;
  sentencepiece::ModelProto *v12;
  sentencepiece::ModelProto *v13;

  if (sentencepiece::IsMMappableFile())
    return (sentencepiece::ModelProto *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2, a3);
  absl::make_unique<sentencepiece::ModelProto>(&v13);
  sentencepiece::io::LoadModelProto(a2, a3, v13, a4);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    v12 = v13;
    v13 = 0;
    (*(void (**)(uint64_t, sentencepiece::ModelProto **))(*(_QWORD *)a1 + 40))(a1, &v12);
    v9 = v12;
    v12 = 0;
    if (v9)
    {
      sentencepiece::ModelProto::~ModelProto(v9);
      MEMORY[0x1C3BB9B44](v10);
    }
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    sentencepiece::ModelProto::~ModelProto(result);
    return (sentencepiece::ModelProto *)MEMORY[0x1C3BB9B44](v11, 0x10A1C4047CE62CFLL);
  }
  return result;
}

void sub_1C21AF848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, sentencepiece::ModelProto *a9, sentencepiece::ModelProto *a10)
{
  std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0);
  std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a10, 0);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::IsMMappableFile()
{
  _QWORD v1[2];
  _BYTE v2[408];
  _QWORD v3[20];

  v3[19] = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v1);
  if ((v2[*(_QWORD *)(v1[0] - 24) + 16] & 5) == 0)
    std::istream::read();
  v1[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1C3BB970C](v2);
  std::istream::~istream();
  MEMORY[0x1C3BB9A90](v3);
  return 0;
}

void sub_1C21AF964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ifstream::~ifstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>>::get_instance(void)::t) = &off_1E7BEB838;
    }
  }
}

void sub_1C21AF9F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::getSubwordTokenChain(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t MaxNumTokens;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t **v11;
  unint64_t v12;
  __int128 *v13;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  void **v27[4];
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[32];
  std::string v31;
  std::string v32;

  sirinluinternal::SubwordTokenChain::SubwordTokenChain((sirinluinternal::SubwordTokenChain *)a3);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 184) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 8))
    && *a2 != a2[1])
  {
    MaxNumTokens = nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getMaxNumTokens(*(nlv4_inference_orchestrator::inference_engine::EspressoBertModel **)(a1 + 184));
    v7 = (__int128 *)*a2;
    if (*(char *)(*a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v32.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v8;
    }
    v9 = a2[1];
    if (*(char *)(v9 - 89) < 0)
    {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v9 - 112), *(_QWORD *)(v9 - 104));
    }
    else
    {
      v10 = *(_OWORD *)(v9 - 112);
      v31.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 - 96);
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v10;
    }
    nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::getSubwordToken(&v32, 0, 0, (uint64_t)v30);
    v11 = a3 + 2;
    PB::PtrVector<sirinluinternal::SubwordToken>::emplace_back<sirinluinternal::SubwordToken&>(a3 + 2, (uint64_t)v30);
    v12 = MaxNumTokens - 1;
    v13 = (__int128 *)*a2;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 4) - 3) <= 0xFFFFFFFFFFFFFFFDLL
      && v12 >= 2)
    {
      v16 = 1;
      v15 = 1;
      do
      {
        nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getSubwordTokens(*(_QWORD *)(a1 + 184), (uint64_t *)&v13[7 * v16], &v28);
        v17 = v28;
        v18 = v15;
        if (v29 != v28 && v12 > v15)
        {
          v21 = a1;
          v22 = 0;
          v23 = 1;
          do
          {
            nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::getSubwordToken((const std::string *)(v17 + v22), v16, v18 + v23 - 1, (uint64_t)v27);
            PB::PtrVector<sirinluinternal::SubwordToken>::emplace_back<sirinluinternal::SubwordToken&>(v11, (uint64_t)v27);
            v20 = v18 + v23;
            MEMORY[0x1C3BB84D0](v27);
            v17 = v28;
            v24 = v23 + 1;
            v22 += 24;
          }
          while (v23++ < 0xAAAAAAAAAAAAAAABLL * ((v29 - v28) >> 3) && v12 > v20);
          v15 = v18 + v24 - 1;
          a1 = v21;
        }
        else
        {
          v20 = v15;
        }
        ++v16;
        v27[0] = (void **)&v28;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v27);
        v13 = (__int128 *)*a2;
      }
      while (v16 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 4) - 1 && v12 > v20);
    }
    else
    {
      v15 = 1;
      LODWORD(v16) = 1;
    }
    nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::getSubwordToken(&v31, v16, v15, (uint64_t)v27);
    PB::PtrVector<sirinluinternal::SubwordToken>::emplace_back<sirinluinternal::SubwordToken&>(v11, (uint64_t)v27);
    MEMORY[0x1C3BB84D0](v27);
    MEMORY[0x1C3BB84D0](v30);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
  }
}

void sub_1C21AFCA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  uint64_t v29;

  if (*(char *)(v29 - 89) < 0)
    operator delete(*(void **)(v29 - 112));
  MEMORY[0x1C3BB84F4](v28);
  _Unwind_Resume(a1);
}

std::string *nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::getSubwordToken@<X0>(const std::string *a1@<X1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  std::string *v8;
  uint64_t v9;
  std::string *result;

  sirinluinternal::SubwordToken::SubwordToken((sirinluinternal::SubwordToken *)a4);
  v8 = *(std::string **)(a4 + 8);
  if (!v8)
  {
    v8 = (std::string *)operator new();
    v8->__r_.__value_.__r.__words[0] = 0;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v9 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v8;
    if (v9)
    {
      std::default_delete<std::string>::operator()[abi:ne180100](v9);
      v8 = *(std::string **)(a4 + 8);
    }
  }
  result = std::string::operator=(v8, a1);
  *(_BYTE *)(a4 + 24) |= 3u;
  *(_DWORD *)(a4 + 16) = a3;
  *(_DWORD *)(a4 + 20) = a2;
  return result;
}

void PB::PtrVector<sirinluinternal::SubwordToken>::emplace_back<sirinluinternal::SubwordToken&>(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  int64x2_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = operator new();
  MEMORY[0x1C3BB84B8](v4, a2);
  v6 = a1[1];
  v5 = (unint64_t)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *a1;
    v9 = v6 - *a1;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = (uint64_t *)&v13[8 * v9];
    *v14 = v4;
    v7 = v14 + 1;
    if (v6 == v8)
    {
      v16 = vdupq_n_s64((unint64_t)v6);
    }
    else
    {
      do
      {
        v15 = *--v6;
        *v6 = 0;
        *--v14 = v15;
      }
      while (v6 != v8);
      v16 = *(int64x2_t *)a1;
    }
    *a1 = v14;
    a1[1] = v7;
    a1[2] = (uint64_t *)&v13[8 * v12];
    v18 = (_QWORD *)v16.i64[1];
    v17 = (_QWORD *)v16.i64[0];
    while (v18 != v17)
    {
      v20 = *--v18;
      v19 = v20;
      *v18 = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    }
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[1] = v7;
}

void sub_1C21AFF3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getSubwordTokens(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD v6[3];
  void **v7;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8)) & 1) != 0)
  {
    memset(v6, 0, sizeof(v6));
    nl_sentencepiece::SentencepieceModel::encodeUtterance(a3, **(_QWORD **)(a1 + 16), a2);
    v7 = (void **)v6;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_1C21AFFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void nl_sentencepiece::SentencepieceModel::encodeUtterance(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD v7[2];

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *((char *)a3 + 23);
  if (v4 >= 0)
    v5 = a3;
  else
    v5 = (uint64_t *)*a3;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a3 + 23);
  else
    v6 = a3[1];
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t *, uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(v7, a2, v5, v6, a1);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)v7);
}

void sub_1C21B005C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::Encode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD v16[6];
  int v17;
  uint64_t v18;
  void *__p;
  char v20;
  uint64_t v21;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a5);
  if (!*(_QWORD *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    if (a4)
    {
      std::vector<std::string>::__clear[abi:ne180100](a4);
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v15, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 232))(a1, a2, a3, &v15);
      if (!*(_QWORD *)a5)
      {
        sentencepiece::util::Status::~Status(a5);
        if (v18)
          v10 = v18 + 8;
        else
          v10 = 0;
        if (v17)
        {
          v11 = a4[1];
          v12 = 8 * v17;
          do
          {
            v13 = (__int128 *)(*(_QWORD *)(*(_QWORD *)v10 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v11 >= a4[2])
            {
              v11 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a4, v13);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a4, v13);
              v11 += 24;
            }
            a4[1] = v11;
            v10 += 8;
            v12 -= 8;
          }
          while (v12);
        }
        sentencepiece::util::Status::Status(a5);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v15);
    }
    else
    {
      v15 = 13;
      v14 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"pieces", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v15, (uint64_t)a5);
      v16[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v16[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v20 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C3BB9A90](&v21);
    }
  }
}

void sub_1C21B02A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::Encode(sentencepiece::ModelInterface **a1@<X0>, char *a2@<X1>, size_t a3@<X2>, sentencepiece::SentencePieceText *a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *__p[3];
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;

  (*((void (**)(sentencepiece::util::Status *__return_ptr))*a1 + 11))(a5);
  if (!*(_QWORD *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    if (a4)
    {
      sentencepiece::SentencePieceText::Clear(a4);
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      (*(void (**)(sentencepiece::ModelInterface *, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v17, &v14);
      if (!*(_QWORD *)a5)
      {
        sentencepiece::util::Status::~Status(a5);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)a1[1] + 40))(__p);
        if (v19 >= 0)
          v10 = HIBYTE(v19);
        else
          v10 = v18;
        sentencepiece::SentencePieceProcessor::PopulateSentencePieceText(a1, a2, a3, v10, (uint64_t *)&v14, (unsigned __int8 ***)__p, (uint64_t)a4, a5);
        if (!*(_QWORD *)a5)
        {
          sentencepiece::util::Status::~Status(a5);
          sentencepiece::util::Status::Status(v11);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      if (v14)
      {
        v15 = v14;
        operator delete(v14);
      }
      if (SHIBYTE(v19) < 0)
        operator delete(v17);
    }
    else
    {
      LODWORD(v17) = 13;
      v12 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"spt", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"output proto is null", 20);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v17, (uint64_t)a5);
      v18 = *MEMORY[0x1E0DE4F60];
      *(uint64_t *)((char *)&v18 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v19 = MEMORY[0x1E0DE4FB8] + 16;
      if (v21 < 0)
        operator delete(v20);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C3BB9A90](&v22);
    }
  }
}

void sub_1C21B0544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::bpe::Model::Encode(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)a1 + 56))(a1, 0.0);
}

_QWORD *sentencepiece::SentencePieceProcessor::PopulateSentencePieceText@<X0>(sentencepiece::ModelInterface **a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X5>, unsigned __int8 ***a6@<X6>, uint64_t a7@<X7>, sentencepiece::util::Status *a8@<X8>)
{
  unsigned __int8 **v10;
  uint64_t *v11;
  unint64_t v12;
  char v13;
  size_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  size_t v24;
  size_t v25;
  size_t v26;
  size_t v27;
  char *v28;
  size_t v29;
  sentencepiece *v30;
  unsigned int v31;
  int *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string *p_dst;
  std::string::size_type size;
  int v40;
  std::string *v41;
  size_t v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::string *v59;
  int *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  int v67;
  uint64_t v68;
  _QWORD *v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  const std::string::value_type *v74;
  std::string::size_type v75;
  std::string *v76;
  __int128 v77;
  uint64_t v78;
  _QWORD *v79;
  size_t v80;
  uint64_t v81;
  std::string *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  const std::string::value_type *v87;
  std::string::size_type v88;
  std::string *v89;
  __int128 v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *result;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  google::protobuf::internal::ArenaStringPtr *v104;
  unsigned __int8 **v110;
  int v111;
  unsigned int *v112;
  char *__src;
  size_t __len;
  std::string __dst;
  void *__p[2];
  uint64_t v117;
  void *v118;
  char v119;
  uint64_t v120;

  v10 = *a6;
  v110 = a6[1];
  if (*a6 != v110)
  {
    v11 = a5;
    v12 = 0;
    v13 = 0;
    v112 = (unsigned int *)(a7 + 48);
    while (1)
    {
      v14 = (size_t)v10[1];
      if (!v14)
      {
        LODWORD(__p[0]) = 13;
        v97 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"!w.empty()", 10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"Empty piece is not allowed.", 27);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v15 = *v10;
      v16 = *((unsigned int *)v10 + 4);
      v111 = (*((uint64_t (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 66))(a1, v16);
      if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 67))(a1, v16))
      {
        v17 = *(int **)(a7 + 64);
        if (v17)
        {
          v18 = *(int *)(a7 + 56);
          v19 = *v17;
          if ((int)v18 < *v17)
          {
            *(_DWORD *)(a7 + 56) = v18 + 1;
            v20 = *(_QWORD *)&v17[2 * v18 + 2];
LABEL_58:
            *(_DWORD *)(v20 + 40) |= 1u;
            std::string::basic_string[abi:ne180100](__p, v15, v14);
            v53 = *(_QWORD *)(v20 + 8);
            v54 = (_QWORD *)(v53 & 0xFFFFFFFFFFFFFFFELL);
            if ((v53 & 1) != 0)
              v54 = (_QWORD *)*v54;
            google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v20 + 48), (__int128 *)__p, (uint64_t)v54);
            if (SHIBYTE(v117) < 0)
              operator delete(__p[0]);
            v55 = *(_DWORD *)(v20 + 40);
            *(_DWORD *)(v20 + 64) = v16;
            v56 = *(_QWORD *)(*v11 + 8 * v12);
            *(_DWORD *)(v20 + 68) = v56;
            *(_DWORD *)(v20 + 40) = v55 | 0x1C;
            goto LABEL_83;
          }
          if (v19 != *(_DWORD *)(a7 + 60))
          {
LABEL_57:
            *v17 = v19 + 1;
            v20 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(_QWORD *)(a7 + 48));
            v51 = *(_QWORD *)(a7 + 64);
            v52 = *(int *)(a7 + 56);
            *(_DWORD *)(a7 + 56) = v52 + 1;
            *(_QWORD *)(v51 + 8 * v52 + 8) = v20;
            goto LABEL_58;
          }
        }
        else
        {
          v19 = *(_DWORD *)(a7 + 60);
        }
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v112, v19 + 1);
        v17 = *(int **)(a7 + 64);
        v19 = *v17;
        goto LABEL_57;
      }
      v21 = *v11;
      v22 = v11[1] - *v11;
      if (v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        v98 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(begin) < (norm_to_orig.size())", 31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v23 = v14 + v12;
      if (v14 + v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        v99 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(end) < (norm_to_orig.size())", 29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v24 = *(_QWORD *)(v21 + 8 * v12);
      if (v24 > a3)
      {
        LODWORD(__p[0]) = 13;
        v100 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(orig_begin) <= (input.size())", 30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v25 = *(_QWORD *)(v21 + 8 * v23);
      if (v25 > a3)
      {
        LODWORD(__p[0]) = 13;
        v101 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(orig_end) <= (input.size())", 28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v26 = v25 - v24;
      if (v25 < v24)
      {
        LODWORD(__p[0]) = 13;
        v102 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(orig_begin) <= (orig_end)", 26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      if (a3 >= v24)
        v27 = v24;
      else
        v27 = a3;
      v28 = &a2[v27];
      v29 = a3 - v27;
      if (v29 < v26)
        v26 = v29;
      __src = v28;
      __len = v26;
      if (v111)
      {
        if ((*(unsigned int (**)(sentencepiece::ModelInterface *))(*(_QWORD *)a1[1] + 184))(a1[1]))
        {
          while (1)
          {
            v31 = *v15++;
            v30 = (sentencepiece *)v31;
            v32 = *(int **)(a7 + 64);
            if (!v32)
              break;
            v33 = *(int *)(a7 + 56);
            v34 = *v32;
            if ((int)v33 >= *v32)
            {
              if (v34 == *(_DWORD *)(a7 + 60))
              {
LABEL_25:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v112, v34 + 1);
                v32 = *(int **)(a7 + 64);
                v34 = *v32;
              }
              *v32 = v34 + 1;
              v35 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(_QWORD *)(a7 + 48));
              v36 = *(_QWORD *)(a7 + 64);
              v37 = *(int *)(a7 + 56);
              *(_DWORD *)(a7 + 56) = v37 + 1;
              *(_QWORD *)(v36 + 8 * v37 + 8) = v35;
              goto LABEL_27;
            }
            *(_DWORD *)(a7 + 56) = v33 + 1;
            v35 = *(_QWORD *)&v32[2 * v33 + 2];
LABEL_27:
            sentencepiece::ByteToPiece(v30, (uint64_t)&__dst);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_dst = &__dst;
            else
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            else
              size = __dst.__r_.__value_.__l.__size_;
            v40 = (*(uint64_t (**)(sentencepiece::ModelInterface *, std::string *, std::string::size_type))(*(_QWORD *)a1[1] + 112))(a1[1], p_dst, size);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v41 = &__dst;
            else
              v41 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v42 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            else
              v42 = __dst.__r_.__value_.__l.__size_;
            *(_DWORD *)(v35 + 40) |= 1u;
            std::string::basic_string[abi:ne180100](__p, v41, v42);
            v43 = *(_QWORD *)(v35 + 8);
            v44 = (_QWORD *)(v43 & 0xFFFFFFFFFFFFFFFELL);
            if ((v43 & 1) != 0)
              v44 = (_QWORD *)*v44;
            google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v35 + 48), (__int128 *)__p, (uint64_t)v44);
            if (SHIBYTE(v117) < 0)
              operator delete(__p[0]);
            v45 = *(_DWORD *)(v35 + 40);
            *(_DWORD *)(v35 + 40) = v45 | 4;
            *(_DWORD *)(v35 + 64) = v40;
            if (v14 == 1)
            {
              *(_DWORD *)(v35 + 40) = v45 | 6;
              std::string::basic_string[abi:ne180100](__p, __src, __len);
              v46 = *(_QWORD *)(v35 + 8);
              v47 = (_QWORD *)(v46 & 0xFFFFFFFFFFFFFFFELL);
              if ((v46 & 1) != 0)
                v47 = (_QWORD *)*v47;
              google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v35 + 56), (__int128 *)__p, (uint64_t)v47);
              if (SHIBYTE(v117) < 0)
                operator delete(__p[0]);
              v48 = *(_DWORD *)(v35 + 40);
              *(_DWORD *)(v35 + 68) = v24;
              v49 = v48 | 0x18;
              v50 = v25;
            }
            else
            {
              *(_DWORD *)(v35 + 68) = v24;
              v49 = v45 | 0x1C;
              v50 = v24;
            }
            *(_DWORD *)(v35 + 40) = v49;
            *(_DWORD *)(v35 + 72) = v50;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            if (!--v14)
            {
              v12 = v23;
              v11 = a5;
              goto LABEL_84;
            }
          }
          v34 = *(_DWORD *)(a7 + 60);
          goto LABEL_25;
        }
        if ((v13 & 1) != 0)
        {
          v57 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((uint64_t)v112, *(_DWORD *)(a7 + 56) - 1);
          if (v14 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_141;
          v20 = v57;
          v58 = *(_QWORD *)(v57 + 48);
          v104 = (google::protobuf::internal::ArenaStringPtr *)(v57 + 48);
          if (v14 >= 0x17)
          {
            v71 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17)
              v71 = v14 | 7;
            v103 = v71 + 1;
            v59 = (std::string *)operator new(v71 + 1);
            __dst.__r_.__value_.__l.__size_ = v14;
            __dst.__r_.__value_.__r.__words[2] = v103 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
            v59 = &__dst;
          }
          v72 = v58 & 0xFFFFFFFFFFFFFFFELL;
          memmove(v59, v15, v14);
          v59->__r_.__value_.__s.__data_[v14] = 0;
          v73 = *(char *)(v72 + 23);
          if (v73 >= 0)
            v74 = (const std::string::value_type *)v72;
          else
            v74 = *(const std::string::value_type **)v72;
          if (v73 >= 0)
            v75 = *(unsigned __int8 *)(v72 + 23);
          else
            v75 = *(_QWORD *)(v72 + 8);
          v76 = std::string::insert(&__dst, 0, v74, v75);
          v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          v117 = v76->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 1u;
          v78 = *(_QWORD *)(v20 + 8);
          v79 = (_QWORD *)(v78 & 0xFFFFFFFFFFFFFFFELL);
          v80 = __len;
          if ((v78 & 1) != 0)
            v79 = (_QWORD *)*v79;
          google::protobuf::internal::ArenaStringPtr::Set(v104, (__int128 *)__p, (uint64_t)v79);
          if (SHIBYTE(v117) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          if (__len > 0x7FFFFFFFFFFFFFF7)
LABEL_141:
            std::string::__throw_length_error[abi:ne180100]();
          v81 = *(_QWORD *)(v20 + 56);
          if (__len >= 0x17)
          {
            v83 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((__len | 7) != 0x17)
              v83 = __len | 7;
            v84 = v83 + 1;
            v82 = (std::string *)operator new(v83 + 1);
            v85 = v84 | 0x8000000000000000;
            v80 = __len;
            __dst.__r_.__value_.__l.__size_ = __len;
            __dst.__r_.__value_.__r.__words[2] = v85;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
            v82 = &__dst;
            if (!__len)
              goto LABEL_109;
          }
          memmove(v82, __src, v80);
LABEL_109:
          v82->__r_.__value_.__s.__data_[v80] = 0;
          v86 = *(char *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          if (v86 >= 0)
            v87 = (const std::string::value_type *)(v81 & 0xFFFFFFFFFFFFFFFELL);
          else
            v87 = *(const std::string::value_type **)(v81 & 0xFFFFFFFFFFFFFFFELL);
          if (v86 >= 0)
            v88 = *(unsigned __int8 *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          else
            v88 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 8);
          v89 = std::string::insert(&__dst, 0, v87, v88);
          v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          v117 = v89->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v90;
          v89->__r_.__value_.__l.__size_ = 0;
          v89->__r_.__value_.__r.__words[2] = 0;
          v89->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 2u;
          v91 = *(_QWORD *)(v20 + 8);
          v92 = (_QWORD *)(v91 & 0xFFFFFFFFFFFFFFFELL);
          v11 = a5;
          if ((v91 & 1) != 0)
            v92 = (_QWORD *)*v92;
          google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v20 + 56), (__int128 *)__p, (uint64_t)v92);
          if (SHIBYTE(v117) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          *(_DWORD *)(v20 + 40) |= 0x10u;
          LODWORD(v56) = v25;
          v12 = v23;
          goto LABEL_83;
        }
      }
      v60 = *(int **)(a7 + 64);
      if (!v60)
        break;
      v61 = *(int *)(a7 + 56);
      v62 = *v60;
      if ((int)v61 >= *v60)
      {
        if (v62 == *(_DWORD *)(a7 + 60))
        {
LABEL_72:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v112, v62 + 1);
          v60 = *(int **)(a7 + 64);
          v62 = *v60;
        }
        *v60 = v62 + 1;
        v20 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(_QWORD *)(a7 + 48));
        v63 = *(_QWORD *)(a7 + 64);
        v64 = *(int *)(a7 + 56);
        *(_DWORD *)(a7 + 56) = v64 + 1;
        *(_QWORD *)(v63 + 8 * v64 + 8) = v20;
        goto LABEL_74;
      }
      *(_DWORD *)(a7 + 56) = v61 + 1;
      v20 = *(_QWORD *)&v60[2 * v61 + 2];
LABEL_74:
      *(_DWORD *)(v20 + 40) |= 1u;
      std::string::basic_string[abi:ne180100](__p, v15, v14);
      v65 = *(_QWORD *)(v20 + 8);
      v66 = (_QWORD *)(v65 & 0xFFFFFFFFFFFFFFFELL);
      if ((v65 & 1) != 0)
        v66 = (_QWORD *)*v66;
      google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v20 + 48), (__int128 *)__p, (uint64_t)v66);
      if (SHIBYTE(v117) < 0)
        operator delete(__p[0]);
      v67 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 64) = v16;
      *(_DWORD *)(v20 + 40) = v67 | 6;
      std::string::basic_string[abi:ne180100](__p, __src, __len);
      v68 = *(_QWORD *)(v20 + 8);
      v69 = (_QWORD *)(v68 & 0xFFFFFFFFFFFFFFFELL);
      if ((v68 & 1) != 0)
        v69 = (_QWORD *)*v69;
      google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v20 + 56), (__int128 *)__p, (uint64_t)v69);
      if (SHIBYTE(v117) < 0)
        operator delete(__p[0]);
      v70 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 68) = v24;
      *(_DWORD *)(v20 + 40) = v70 | 0x18;
      LODWORD(v56) = v25;
      v12 = v23;
      v11 = a5;
LABEL_83:
      *(_DWORD *)(v20 + 72) = v56;
      v23 = v12;
LABEL_84:
      v10 += 3;
      v13 = v111;
      if (v10 == v110)
        goto LABEL_123;
    }
    v62 = *(_DWORD *)(a7 + 60);
    goto LABEL_72;
  }
  v23 = 0;
LABEL_123:
  if (v23 == a4)
  {
    result = sentencepiece::SentencePieceProcessor::ApplyExtraOptions(a1, (uint64_t)(a1 + 5), a7, a8);
    if (!*(_QWORD *)a8)
    {
      sentencepiece::util::Status::~Status(a8);
      *(_DWORD *)(a7 + 40) |= 1u;
      std::string::basic_string[abi:ne180100](__p, a2, a3);
      v94 = *(_QWORD *)(a7 + 8);
      v95 = (_QWORD *)(v94 & 0xFFFFFFFFFFFFFFFELL);
      if ((v94 & 1) != 0)
        v95 = (_QWORD *)*v95;
      google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(a7 + 72), (__int128 *)__p, (uint64_t)v95);
      if (SHIBYTE(v117) < 0)
        operator delete(__p[0]);
      return sentencepiece::util::Status::Status(a8);
    }
    return result;
  }
  LODWORD(__p[0]) = 13;
  v96 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(consumed) == (normalized.size())", 33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"all normalized characters are not consumed.", 43);
  sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
LABEL_137:
  __p[1] = *(void **)MEMORY[0x1E0DE4F60];
  *(void **)((char *)&__p[1] + *((_QWORD *)__p[1] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  v117 = MEMORY[0x1E0DE4FB8] + 16;
  if (v119 < 0)
    operator delete(v118);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x1C3BB9A90](&v120);
}

void sub_1C21B127C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::protobuf::internal::ArenaStringPtr::Set(google::protobuf::internal::ArenaStringPtr *this, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t AlignedAndAddCleanup;
  uint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)this == a2)
  {
    if (a4)
    {
      if ((*(_BYTE *)(a4 + 24) & 1) != 0)
      {
        v11 = a4;
        a4 = v11;
      }
      AlignedAndAddCleanup = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)a4, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
      v10 = *((_QWORD *)a3 + 2);
      *(_OWORD *)AlignedAndAddCleanup = *a3;
      *(_QWORD *)(AlignedAndAddCleanup + 16) = v10;
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
      *(_QWORD *)a3 = 0;
    }
    else
    {
      AlignedAndAddCleanup = operator new();
      *(_OWORD *)AlignedAndAddCleanup = *a3;
      *(_QWORD *)(AlignedAndAddCleanup + 16) = *((_QWORD *)a3 + 2);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
    }
    *(_QWORD *)this = AlignedAndAddCleanup;
  }
  else
  {
    v6 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(this);
    v7 = v6;
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    v8 = *a3;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v7 = v8;
    *((_BYTE *)a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
  }
}

void google::protobuf::internal::ArenaStringPtr::Set(google::protobuf::internal::ArenaStringPtr *a1, __int128 *a2, uint64_t a3)
{
  google::protobuf::internal::ArenaStringPtr::Set(a1, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, a2, a3);
}

uint64_t sentencepiece::SentencePieceProcessor::IsControl(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  uint64_t v4;
  sentencepiece::logging *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  char v16;
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v17);
  v4 = v17;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  if (!v4)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 152))(*((_QWORD *)this + 1), a2);
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    v16 = 0;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ERROR", 5);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v17, this);
    v12 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v17);
    v13 = strlen(v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v16);
  }
  return 0;
}

void sub_1C21B1590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::SentencePieceProcessor::ApplyExtraOptions@<X0>(sentencepiece::ModelInterface **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _DWORD *v5;
  _DWORD *v6;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  sentencepiece::SentencePieceText_SentencePiece **v13;
  BOOL v14;
  unint64_t v15;
  sentencepiece::SentencePieceText_SentencePiece *v16;
  BOOL v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  int *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string *v38;
  uint64_t v39;
  const char *v40;
  size_t v41;
  int v42;
  char *v43;
  size_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  size_t v50;
  int v51;
  char *v52;
  size_t v53;
  uint64_t v54;
  _QWORD *v55;
  char v57;
  std::string __p[2];

  v6 = *(_DWORD **)a2;
  v5 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v5)
  {
    v9 = (unsigned int *)(a3 + 48);
    while (1)
    {
      switch(*v6)
      {
        case 0:
          v10 = *(_QWORD *)(a3 + 64);
          if (v10)
            v11 = v10 + 8;
          else
            v11 = 0;
          v12 = *(int *)(a3 + 56);
          v13 = (sentencepiece::SentencePieceText_SentencePiece **)(v11 + 8 * v12 - 8);
          if ((_DWORD)v12)
            v14 = (unint64_t)v13 > v11;
          else
            v14 = 0;
          if (v14)
          {
            v15 = v11 + 8;
            do
            {
              v16 = *v13--;
              sentencepiece::swap(*(uint64_t **)(v15 - 8), v16, (sentencepiece::SentencePieceText_SentencePiece *)a3);
              v17 = v15 >= (unint64_t)v13;
              v15 += 8;
            }
            while (!v17);
          }
          goto LABEL_52;
        case 1:
          v18 = *(int **)(a3 + 64);
          if (!v18)
          {
            v20 = *(_DWORD *)(a3 + 60);
LABEL_34:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v20 + 1);
            v18 = *(int **)(a3 + 64);
            v20 = *v18;
            goto LABEL_35;
          }
          v19 = *(_DWORD *)(a3 + 56);
          v20 = *v18;
          if (v19 < *v18)
          {
            v21 = v19 + 1;
            *(_DWORD *)(a3 + 56) = v19 + 1;
            goto LABEL_36;
          }
          if (v20 == *(_DWORD *)(a3 + 60))
            goto LABEL_34;
LABEL_35:
          *v18 = v20 + 1;
          v32 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(_QWORD *)(a3 + 48));
          v33 = *(_QWORD *)(a3 + 64);
          v34 = *(int *)(a3 + 56);
          v21 = v34 + 1;
          *(_DWORD *)(a3 + 56) = v34 + 1;
          *(_QWORD *)(v33 + 8 * v34 + 8) = v32;
LABEL_36:
          if (v21 > 1)
          {
            v35 = v21;
            do
            {
              v36 = *(_QWORD *)(a3 + 64) + 8;
              v37 = *(_QWORD *)(v36 + 8 * (v35 - 2));
              *(_QWORD *)(v36 + 8 * (v35 - 2)) = *(_QWORD *)(v36 + 8 * (v35 - 1));
              *(_QWORD *)(v36 + 8 * (v35 - 1)) = v37;
              v14 = v35-- > 2;
            }
            while (v14);
          }
          if (v21 < 1)
          {
            google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
            v38 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: (index) < (current_size_): ");
            google::protobuf::internal::LogFinisher::operator=((int)&v57, (const char **)&v38->__r_.__value_.__l.__data_);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
          }
          v39 = *(_QWORD *)(*(_QWORD *)(a3 + 64) + 8);
          v40 = sentencepiece::ModelInterface::bos_piece(a1[1]);
          v41 = strlen(v40);
          v42 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*a1 + 63))(a1, v40, v41);
          *(_DWORD *)(v39 + 40) |= 4u;
          *(_DWORD *)(v39 + 64) = v42;
          v43 = (char *)sentencepiece::ModelInterface::bos_piece(a1[1]);
          sentencepiece::ModelInterface::bos_piece(a1[1]);
          *(_DWORD *)(v39 + 40) |= 1u;
          std::string::basic_string[abi:ne180100](__p, v43, v44);
          v45 = *(_QWORD *)(v39 + 8);
          v46 = (_QWORD *)(v45 & 0xFFFFFFFFFFFFFFFELL);
          if ((v45 & 1) != 0)
            v46 = (_QWORD *)*v46;
          google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v39 + 48), (__int128 *)__p, (uint64_t)v46);
          goto LABEL_50;
        case 2:
          v22 = *(int **)(a3 + 64);
          if (!v22)
          {
            v24 = *(_DWORD *)(a3 + 60);
LABEL_45:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v24 + 1);
            v22 = *(int **)(a3 + 64);
            v24 = *v22;
            goto LABEL_46;
          }
          v23 = *(int *)(a3 + 56);
          v24 = *v22;
          if ((int)v23 < *v22)
          {
            *(_DWORD *)(a3 + 56) = v23 + 1;
            v25 = *(_QWORD *)&v22[2 * v23 + 2];
            goto LABEL_47;
          }
          if (v24 == *(_DWORD *)(a3 + 60))
            goto LABEL_45;
LABEL_46:
          *v22 = v24 + 1;
          v25 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(_QWORD *)(a3 + 48));
          v47 = *(_QWORD *)(a3 + 64);
          v48 = *(int *)(a3 + 56);
          *(_DWORD *)(a3 + 56) = v48 + 1;
          *(_QWORD *)(v47 + 8 * v48 + 8) = v25;
LABEL_47:
          v49 = sentencepiece::ModelInterface::eos_piece(a1[1]);
          v50 = strlen(v49);
          v51 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*a1 + 63))(a1, v49, v50);
          *(_DWORD *)(v25 + 40) |= 4u;
          *(_DWORD *)(v25 + 64) = v51;
          v52 = (char *)sentencepiece::ModelInterface::eos_piece(a1[1]);
          sentencepiece::ModelInterface::eos_piece(a1[1]);
          *(_DWORD *)(v25 + 40) |= 1u;
          std::string::basic_string[abi:ne180100](__p, v52, v53);
          v54 = *(_QWORD *)(v25 + 8);
          v55 = (_QWORD *)(v54 & 0xFFFFFFFFFFFFFFFELL);
          if ((v54 & 1) != 0)
            v55 = (_QWORD *)*v55;
          google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v25 + 48), (__int128 *)__p, (uint64_t)v55);
LABEL_50:
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_52:
          if (++v6 == v5)
            return sentencepiece::util::Status::Status(a4);
          break;
        case 3:
          if (*(int *)(a3 + 56) >= 1)
          {
            v26 = 0;
            do
            {
              v27 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((uint64_t)v9, v26);
              if ((*((unsigned int (**)(sentencepiece::ModelInterface **, _QWORD))*a1 + 66))(a1, *(unsigned int *)(v27 + 64)))
              {
                v28 = (char *)sentencepiece::ModelInterface::unk_piece(a1[1]);
                sentencepiece::ModelInterface::unk_piece(a1[1]);
                *(_DWORD *)(v27 + 40) |= 1u;
                std::string::basic_string[abi:ne180100](__p, v28, v29);
                v30 = *(_QWORD *)(v27 + 8);
                v31 = (_QWORD *)(v30 & 0xFFFFFFFFFFFFFFFELL);
                if ((v30 & 1) != 0)
                  v31 = (_QWORD *)*v31;
                google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v27 + 48), (__int128 *)__p, (uint64_t)v31);
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p[0].__r_.__value_.__l.__data_);
              }
              ++v26;
            }
            while (v26 < *(_DWORD *)(a3 + 56));
          }
          goto LABEL_52;
        default:
          return (_QWORD *)sentencepiece::util::Status::Status(a4, 13, "unknown extra_option type.", 26);
      }
    }
  }
  return sentencepiece::util::Status::Status(a4);
}

void sub_1C21B1A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  google::protobuf::internal::LogMessage::~LogMessage(&__p);
  _Unwind_Resume(a1);
}

BOOL sentencepiece::MemoryMappedModelProto::PieceIsControl(sentencepiece::MemoryMappedModelProto *this, int a2)
{
  return *(_BYTE *)(*((_QWORD *)this + 7) + a2) == 3;
}

uint64_t sentencepiece::ModelInterface::IsControl(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 120))(*((_QWORD *)this + 1));
}

unsigned int *google::protobuf::internal::RepeatedPtrFieldBase::Reserve(unsigned int *this, int a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;

  v2 = this[2];
  v3 = __OFSUB__(a2, v2);
  v4 = a2 - v2;
  if (!((v4 < 0) ^ v3 | (v4 == 0)))
    return google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, v4);
  return this;
}

unsigned int *google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(google::protobuf::internal::RepeatedPtrFieldBase *this, int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int *v5;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *AlignedNoHook;
  uint64_t v13;

  v2 = *((_DWORD *)this + 2);
  v3 = *((_DWORD *)this + 3);
  v4 = v2 + a2;
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  if (v3 < v2 + a2)
  {
    v7 = *(_QWORD *)this;
    v8 = 2 * v3;
    if (2 * v3 <= v4)
      v8 = v4;
    if (v8 <= 4)
      v9 = 4;
    else
      v9 = v8;
    v10 = 8 * v9;
    if (v7)
    {
      v11 = (v10 + 15) & 0x7FFFFFFF8;
      if ((*(_BYTE *)(v7 + 24) & 1) != 0)
        (*(void (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v7 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 32), MEMORY[0x1E0DE4EC8], v11);
      AlignedNoHook = (unsigned int *)google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)v7, v11);
    }
    else
    {
      AlignedNoHook = (unsigned int *)operator new(v10 + 8);
    }
    *((_QWORD *)this + 2) = AlignedNoHook;
    *((_DWORD *)this + 3) = v9;
    if (v5 && (v13 = *v5, (int)v13 >= 1))
    {
      memcpy(AlignedNoHook + 2, v5 + 2, 8 * v13);
      AlignedNoHook = (unsigned int *)*((_QWORD *)this + 2);
      *AlignedNoHook = *v5;
      if (!v7)
        goto LABEL_17;
    }
    else
    {
      *AlignedNoHook = 0;
      if (!v7)
      {
LABEL_17:
        operator delete(v5);
        AlignedNoHook = (unsigned int *)*((_QWORD *)this + 2);
      }
    }
    v2 = *((_DWORD *)this + 2);
    v5 = AlignedNoHook;
  }
  return &v5[2 * v2 + 2];
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(uint64_t a1)
{
  uint64_t AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x50uLL);
    sentencepiece::SentencePieceText_SentencePiece::SentencePieceText_SentencePiece(AlignedNoHook, a1);
  }
  else
  {
    AlignedNoHook = operator new();
    sentencepiece::SentencePieceText_SentencePiece::SentencePieceText_SentencePiece(AlignedNoHook, 0);
  }
  return AlignedNoHook;
}

void sub_1C21B1C10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10A1C40E4A317A1);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceText_SentencePiece::SentencePieceText_SentencePiece(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E7BE8FC0;
  *(_QWORD *)(a1 + 8) = a2;
  google::protobuf::internal::ExtensionSet::ExtensionSet(a1 + 16, a2);
  *(_QWORD *)(a1 + 40) = 0;
  if (atomic_load(scc_info_SentencePieceText_SentencePiece_sentencepiece_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SentencePieceText_SentencePiece_sentencepiece_2eproto);
  *(_QWORD *)(a1 + 48) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(a1 + 56) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_1C21B1CA4(_Unwind_Exception *a1)
{
  google::protobuf::internal::ExtensionSet *v1;

  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceText::SentencePieceText(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E7BE8A18;
  *(_QWORD *)(a1 + 8) = a2;
  google::protobuf::internal::ExtensionSet::ExtensionSet(a1 + 16, a2);
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (atomic_load(scc_info_SentencePieceText_sentencepiece_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SentencePieceText_sentencepiece_2eproto);
  *(_QWORD *)(a1 + 72) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(a1 + 80) = 0;
  return a1;
}

void sub_1C21B1D40(_Unwind_Exception *a1)
{
  google::protobuf::internal::ExtensionSet *v1;
  google::protobuf::internal::ArenaImpl **v2;

  google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField(v2);
  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::ExtensionSet(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void sentencepiece::SentencePieceText::Clear(sentencepiece::SentencePieceText *this)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::SentencePieceText *)((char *)this + 16));
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((uint64_t)this + 48);
  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    v2 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  *((_DWORD *)this + 20) = 0;
  *((_DWORD *)this + 10) = 0;
  v3 = *((_QWORD *)this + 1);
  if ((v3 & 1) != 0)
  {
    v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 31) < 0)
    {
      **(_BYTE **)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v4 + 8) = 0;
      *(_BYTE *)(v4 + 31) = 0;
    }
  }
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  sentencepiece::SentencePieceText_SentencePiece **v3;
  sentencepiece::SentencePieceText_SentencePiece *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (sentencepiece::SentencePieceText_SentencePiece **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      sentencepiece::SentencePieceText_SentencePiece::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1C21B1E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::Clear(google::protobuf::internal::ExtensionSet *this)
{
  _QWORD *v1;
  uint64_t v2;
  google::protobuf::internal::ExtensionSet::Extension *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v1 = (_QWORD *)*((_QWORD *)this + 2);
  if (*((unsigned __int16 *)this + 4) >= 0x101u)
  {
    v6 = (_QWORD *)*v1;
    v4 = v1 + 1;
    v5 = v6;
    if (v6 != v4)
    {
      do
      {
        google::protobuf::internal::ExtensionSet::Extension::Clear((google::protobuf::internal::ExtensionSet::Extension *)(v5 + 5));
        v7 = (_QWORD *)v5[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v5[2];
            v9 = *v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
      }
      while (v8 != v4);
    }
  }
  else if (*((_WORD *)this + 5))
  {
    v2 = 32 * *((unsigned __int16 *)this + 5);
    v3 = (google::protobuf::internal::ExtensionSet::Extension *)(v1 + 1);
    do
    {
      google::protobuf::internal::ExtensionSet::Extension::Clear(v3);
      v3 = (google::protobuf::internal::ExtensionSet::Extension *)((char *)v3 + 32);
      v2 -= 32;
    }
    while (v2);
  }
}

void sentencepiece::SentencePieceText::SharedDtor(sentencepiece::SentencePieceText *this)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  google::protobuf::internal::ArenaStringPtr *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  std::string v10[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 486);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  v6 = (uint64_t *)*((_QWORD *)this + 9);
  v5 = (sentencepiece::SentencePieceText *)((char *)this + 72);
  if (v6 != &google::protobuf::internal::fixed_address_empty_string)
  {
    v7 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(v5);
    v8 = v7;
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    MEMORY[0x1C3BB9B44](v8, 0x1012C40EC159624);
  }
}

void sub_1C21B200C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceText::~SentencePieceText(sentencepiece::SentencePieceText *this)
{
  sentencepiece::SentencePieceText::SharedDtor(this);
  google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1);
  google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((sentencepiece::SentencePieceText *)((char *)this + 16));
}

{
  sentencepiece::SentencePieceText::~SentencePieceText(this);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t *google::protobuf::internal::InternalMetadata::Delete<std::string>(uint64_t *result)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *result;
  if ((*result & 1) != 0)
  {
    v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    if (!*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFFELL) && v2 != 0)
    {
      if (*(char *)(v2 + 31) < 0)
        operator delete(*(void **)(v2 + 8));
      JUMPOUT(0x1C3BB9B44);
    }
  }
  return result;
}

void google::protobuf::internal::ExtensionSet::~ExtensionSet(google::protobuf::internal::ExtensionSet *this)
{
  google::protobuf::internal::ArenaImpl ****v2;
  uint64_t v3;
  google::protobuf::internal::ArenaImpl ***v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_QWORD *)this)
  {
    v2 = (google::protobuf::internal::ArenaImpl ****)*((_QWORD *)this + 2);
    if (*((unsigned __int16 *)this + 4) >= 0x101u)
    {
      google::protobuf::internal::ExtensionSet::ForEach<std::__map_iterator<std::__tree_iterator<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::__tree_node<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,void *> *,long>>,google::protobuf::internal::ExtensionSet::~()::$_0>(*v2, v2 + 1);
    }
    else if (*((_WORD *)this + 5))
    {
      v3 = 32 * *((unsigned __int16 *)this + 5);
      v4 = (google::protobuf::internal::ArenaImpl ***)(v2 + 1);
      do
      {
        google::protobuf::internal::ExtensionSet::Extension::Free(v4);
        v4 += 4;
        v3 -= 32;
      }
      while (v3);
    }
    v5 = *((_QWORD *)this + 2);
    if (*((unsigned __int16 *)this + 4) >= 0x101u)
    {
      if (v5)
      {
        v6 = *((_QWORD *)this + 2);
        std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(v5, *(_QWORD **)(v5 + 8));
        MEMORY[0x1C3BB9B44](v6, 0x1020C4062D53EE8);
      }
    }
    else if (v5)
    {
      MEMORY[0x1C3BB9B20](v5, 0x1062C802AB6010CLL);
    }
  }
}

void google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(google::protobuf::internal::ArenaImpl **this)
{
  google::protobuf::internal::ArenaImpl *v1;

  v1 = *this;
  if (v1)
    google::protobuf::internal::ArenaImpl::SpaceAllocated(v1);
}

void google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(_QWORD *a1)
{
  sentencepiece::SentencePieceText_SentencePiece **v2;
  sentencepiece::SentencePieceText_SentencePiece **v3;
  uint64_t v4;

  v2 = (sentencepiece::SentencePieceText_SentencePiece **)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sentencepiece::SentencePieceText_SentencePiece::~SentencePieceText_SentencePiece(*v3);
          MEMORY[0x1C3BB9B44]();
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (sentencepiece::SentencePieceText_SentencePiece **)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sentencepiece::SentencePieceText_SentencePiece::~SentencePieceText_SentencePiece(sentencepiece::SentencePieceText_SentencePiece *this)
{
  sentencepiece::SentencePieceText_SentencePiece::SharedDtor(this);
  google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16));
}

{
  sentencepiece::SentencePieceText_SentencePiece::~SentencePieceText_SentencePiece(this);
  JUMPOUT(0x1C3BB9B44);
}

google::protobuf::internal::ArenaStringPtr *sentencepiece::SentencePieceText_SentencePiece::SharedDtor(sentencepiece::SentencePieceText_SentencePiece *this)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  google::protobuf::internal::ArenaStringPtr *result;
  uint64_t v6;
  uint64_t v7;
  google::protobuf::internal::ArenaStringPtr *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  std::string v13[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 140);
    v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  result = (sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 48);
  if (*((uint64_t **)this + 6) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v6 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(result);
    v7 = v6;
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    result = (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x1C3BB9B44](v7, 0x1012C40EC159624);
  }
  v9 = (uint64_t *)*((_QWORD *)this + 7);
  v8 = (sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 56);
  if (v9 != &google::protobuf::internal::fixed_address_empty_string)
  {
    v10 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(v8);
    v11 = v10;
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    return (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x1C3BB9B44](v11, 0x1012C40EC159624);
  }
  return result;
}

void sub_1C21B23B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(google::protobuf::internal::ArenaStringPtr *this)
{
  uint64_t result;
  std::string *v3;
  std::string *v4;
  char v5;
  std::string v6[2];

  result = *(_QWORD *)this;
  if ((result & 1) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 363);
    v3 = google::protobuf::internal::LogMessage::operator<<(v6, "CHECK failed: !tagged_ptr_.IsTagged(): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v6[0].__r_.__value_.__l.__data_);
    result = *(_QWORD *)this;
  }
  if (!result)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 364);
    v4 = google::protobuf::internal::LogMessage::operator<<(v6, "CHECK failed: tagged_ptr_.UnsafeGet() != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v6[0].__r_.__value_.__l.__data_);
    return *(_QWORD *)this;
  }
  return result;
}

void sub_1C21B2478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getMaxNumTokens(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this)
{
  uint64_t v1;
  uint64_t v2;
  void *__p[2];
  char v5;

  v1 = *((_QWORD *)this + 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "max_seq_length");
  v2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v1 + 8))(v1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1C21B24F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertE5MLModule::getModuleNetworkConfig(uint64_t a1, unsigned __int8 *a2)
{
  return snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getNetworkConfig(a1 + 432, a2);
}

uint64_t snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getNetworkConfig(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  NSObject *v15;
  void **v16;
  _BYTE *v17;
  std::string __p;
  void *v19[2];
  char v20;
  std::string v21;
  _BYTE buf[24];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)(a1 + 272);
  if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((_QWORD *)(a1 + 272), a2))
  {
    v5 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v4, a2);
    if (!v5)
      goto LABEL_27;
    if (*((_DWORD *)v5 + 16) == 1)
    {
      v6 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v4, a2);
      if (v6)
      {
        if (*((_DWORD *)v6 + 16) != 1)
          std::__throw_bad_variant_access[abi:ne180100]();
        return *((unsigned int *)v6 + 10);
      }
LABEL_27:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
  }
  v8 = *(int *)(a1 + 32);
  if (v8 >= 8)
  {
    v10 = SNLPOSLoggerForCategory(4);
    v9 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v8;
      _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
    }
  }
  else
  {
    v9 = off_1E7BED840[v8];
  }
  std::string::basic_string[abi:ne180100]<0>(v19, v9);
  std::operator+<char>();
  v11 = std::string::append(&__p, ".\n");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v21, "Note that only parameters of unsigned integer type are currently expected by SiriNaturalLanguageParsing.  This issue will likely cause SiriNaturalLanguageParsing to fail.");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  *(_QWORD *)&buf[16] = *((_QWORD *)&v13->__r_.__value_.__l + 2);
  *(_OWORD *)buf = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v15 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    v16 = v19;
    if (v20 < 0)
      v16 = (void **)v19[0];
    v17 = buf;
    if (buf[23] < 0)
      v17 = *(_BYTE **)buf;
    LODWORD(v21.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v21.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
    WORD2(v21.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v21.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v17;
    _os_log_impl(&dword_1C2196000, v15, OS_LOG_TYPE_DEBUG, "[%s] %s", (uint8_t *)&v21, 0x16u);
  }
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (v20 < 0)
    operator delete(v19[0]);
  return 0;
}

void sub_1C21B279C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance(void)::t) = &off_1E7BEB910;
    }
  }
}

void sub_1C21B2860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t) = &off_1E7BEB5B0;
    }
  }
}

void sub_1C21B28E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t) = &off_1E7BEB688;
    }
  }
}

void sub_1C21B2970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance(void)::t) = &off_1E7BEB760;
    }
  }
}

void sub_1C21B29F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::vector<unsigned long>>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::vector<unsigned long>>>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>>::get_instance(void)::t) = &off_1E7BEB7A8;
    }
  }
}

void sub_1C21B2A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::vector<unsigned long>>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::vector<unsigned long>>>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>>::get_instance(void)::t) = &off_1E7BEBB98;
    }
  }
}

void sub_1C21B2B08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t) = &off_1E7BEB640;
    }
  }
}

void sub_1C21B2B90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t) = &off_1E7BEBA30;
    }
  }
}

void sub_1C21B2C18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t) = &off_1E7BEB5F8;
    }
  }
}

void sub_1C21B2CA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<float>>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<float>>>::get_instance(void)::t) = &off_1E7BEB7F0;
    }
  }
}

void sub_1C21B2D28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t) = &off_1E7BEB568;
    }
  }
}

void sub_1C21B2DB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t) = &off_1E7BEB6D0;
    }
  }
}

void sub_1C21B2E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t) = &off_1E7BEBAC0;
    }
  }
}

void sub_1C21B2EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance();
      *boost::archive::detail::basic_oserializer::basic_oserializer(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance(void)::t) = &off_1E7BEBB08;
    }
  }
}

void sub_1C21B2F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_17()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance();
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance(void)::t;
  }
}

void boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance();
      *boost::archive::detail::basic_iserializer::basic_iserializer(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance(void)::t, (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance(void)::t) = &off_1E7BEAC20;
    }
  }
}

void sub_1C21B3010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::createModule(std::__fs::filesystem::path *a1@<X0>, char *a2@<X1>, _QWORD *a3@<X2>, nlv4_inference_orchestrator::inference_engine::BertModule **a4@<X8>)
{
  unsigned __int8 *v7;
  char v8;
  unsigned __int8 *v9;
  unsigned int v10;
  int v11;
  char v12;
  char v13;
  uint64_t v14;
  std::string::size_type size;
  void *v16;
  int v17;
  unsigned int v18;
  void *v19;
  void **v20;
  std::string *v21;
  int v22;
  NSObject *v23;
  uint64_t *v24;
  uint64_t *v25;
  nlv4_inference_orchestrator::inference_engine::BertModule *v26;
  __int128 v27;
  NSObject *v28;
  uint64_t *v29;
  uint64_t *v30;
  NSObject *v31;
  uint64_t *v32;
  std::string *v33;
  __int128 v34;
  const std::string::value_type *v35;
  std::__fs::filesystem::path *v36;
  std::string::pointer data;
  int v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  nlv4_inference_orchestrator::inference_engine::BertModule *v43;
  NSObject *v44;
  uint64_t *v45;
  uint64_t *v46;
  std::runtime_error *exception;
  std::string pn;
  std::string v49;
  std::string __p;
  std::__fs::filesystem::path v51;
  void *v52[2];
  int64_t v53;
  std::string v54;
  char v55;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a2);
  std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&__p, (uint64_t)&v51);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  snlp::common::e5ml::asset_finder::AssetFinder::findAssetTypesPresent(a1 + 5, &v51, (uint64_t)&__p);
  std::string::basic_string[abi:ne180100]<0>(v52, "locale");
  v7 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(a3, (unsigned __int8 *)v52);
  if (v7 && *((_DWORD *)v7 + 16) == 4)
  {
    if ((char)v7[63] < 0)
      std::string::__init_copy_ctor_external(&v54, *((const std::string::value_type **)v7 + 5), *((_QWORD *)v7 + 6));
    else
      v54 = *(std::string *)(v7 + 40);
    v8 = 1;
  }
  else
  {
    v8 = 0;
    v54.__r_.__value_.__s.__data_[0] = 0;
  }
  v55 = v8;
  if (SHIBYTE(v53) < 0)
    operator delete(v52[0]);
  std::string::basic_string[abi:ne180100]<0>(v52, "os_release");
  v9 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(a3, (unsigned __int8 *)v52);
  if (v9 && *((_DWORD *)v9 + 16) == 1)
  {
    v10 = *((_DWORD *)v9 + 10) & 0xFFFFFF00;
    v11 = *((_DWORD *)v9 + 10);
    v12 = 1;
  }
  else
  {
    v12 = 0;
    v11 = 0;
    v10 = 0;
  }
  if (SHIBYTE(v53) < 0)
    operator delete(v52[0]);
  v13 = v12 ^ 1;
  if (!v55)
    v13 = 1;
  if ((v13 & 1) != 0)
    goto LABEL_45;
  std::string::basic_string[abi:ne180100]<0>(v52, "zh_CN");
  v14 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  else
    size = v54.__r_.__value_.__l.__size_;
  v16 = (void *)HIBYTE(v53);
  v17 = SHIBYTE(v53);
  if (v53 < 0)
    v16 = v52[1];
  if ((void *)size != v16)
    goto LABEL_43;
  v18 = v10 | v11;
  v19 = v52[0];
  if (v53 >= 0)
    v20 = v52;
  else
    v20 = (void **)v52[0];
  if ((*((_BYTE *)&v54.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v54.__r_.__value_.__l.__data_, v20, v54.__r_.__value_.__l.__size_) || v18 <= 0xC83)
      goto LABEL_43;
  }
  else
  {
    if (*((_BYTE *)&v54.__r_.__value_.__s + 23))
    {
      v21 = &v54;
      while (v21->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v20)
      {
        v21 = (std::string *)((char *)v21 + 1);
        v20 = (void **)((char *)v20 + 1);
        if (!--v14)
          goto LABEL_35;
      }
      goto LABEL_43;
    }
LABEL_35:
    if (v18 < 0xC84)
    {
LABEL_43:
      if (v17 < 0)
        operator delete(v52[0]);
LABEL_45:
      v22 = 0;
      goto LABEL_46;
    }
  }
  if (v17 < 0)
    operator delete(v19);
  if (v18 >= 0xCE4)
    goto LABEL_45;
  v22 = 1;
LABEL_46:
  if (v55 && SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (v22)
  {
    v23 = SNLPOSLoggerForCategory(5);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v54.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C2196000, v23, OS_LOG_TYPE_DEBUG, "CN OWL asset fix to [SydneyE, Dawn), Asset Type identified as non-reshapable E5ML OWL", (uint8_t *)&v54, 2u);
    }
    v24 = std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::find<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>((uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, 2);
    if (!v24)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v25 = v24;
    v26 = (nlv4_inference_orchestrator::inference_engine::BertModule *)operator new();
    if ((*((char *)v25 + 47) & 0x80000000) == 0)
    {
      v54 = *(std::string *)((_BYTE *)v25 + 1);
LABEL_68:
      nlv4_inference_orchestrator::inference_engine::BertE5MLModule::BertE5MLModule(v26, (char *)&v54, (uint64_t)a3);
LABEL_69:
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      *a4 = v26;
      goto LABEL_90;
    }
    goto LABEL_67;
  }
  v27 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (!std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::find<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>((uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, 2))
  {
    if (!std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::find<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>(v27, *((unint64_t *)&v27 + 1), 1))
    {
      if (!std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::find<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>(v27, *((unint64_t *)&v27 + 1), 0))
      {
        std::string::basic_string[abi:ne180100]<0>(&v54, "Could not find v1 espresso assets or E5-ML espresso assets for OWL.");
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, &v54);
        exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
      }
      v44 = SNLPOSLoggerForCategory(5);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v54.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C2196000, v44, OS_LOG_TYPE_DEBUG, "Asset Type identified as pre-E5ML OWL", (uint8_t *)&v54, 2u);
      }
      v45 = std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::find<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>((uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, 0);
      if (!v45)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v46 = v45;
      v26 = (nlv4_inference_orchestrator::inference_engine::BertModule *)operator new();
      if (*((char *)v46 + 47) < 0)
        std::string::__init_copy_ctor_external(&v54, (const std::string::value_type *)v46[3], v46[4]);
      else
        v54 = *(std::string *)((_BYTE *)v46 + 1);
      nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::BertPreE5MLModule((uint64_t)v26, (uint64_t)&v54, (uint64_t)a3);
      goto LABEL_69;
    }
    v31 = SNLPOSLoggerForCategory(5);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v54.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C2196000, v31, OS_LOG_TYPE_DEBUG, "Asset Type identified as non-reshapable E5ML OWL", (uint8_t *)&v54, 2u);
    }
    v32 = std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::find<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>((uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, 1);
    if (!v32)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v25 = v32;
    v26 = (nlv4_inference_orchestrator::inference_engine::BertModule *)operator new();
    if ((*((char *)v25 + 47) & 0x80000000) == 0)
    {
      v54 = *(std::string *)((_BYTE *)v25 + 1);
      goto LABEL_68;
    }
LABEL_67:
    std::string::__init_copy_ctor_external(&v54, (const std::string::value_type *)v25[3], v25[4]);
    goto LABEL_68;
  }
  v28 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v54.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C2196000, v28, OS_LOG_TYPE_DEBUG, "Asset Type identified as Reshapable E5ML OWL", (uint8_t *)&v54, 2u);
  }
  v29 = std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::find<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>((uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, 2);
  if (!v29)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v30 = v29;
  if (SHIBYTE(v51.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, v51.__pn_.__r_.__value_.__l.__data_, v51.__pn_.__r_.__value_.__l.__size_);
  else
    pn = v51.__pn_;
  v33 = std::string::append(&pn, "/");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  data = a1[4].__pn_.__r_.__value_.__l.__data_;
  v36 = a1 + 4;
  v35 = data;
  v38 = SHIBYTE(v36->__pn_.__r_.__value_.__r.__words[2]);
  if (v38 >= 0)
    v39 = (const std::string::value_type *)v36;
  else
    v39 = v35;
  if (v38 >= 0)
    v40 = HIBYTE(v36->__pn_.__r_.__value_.__r.__words[2]);
  else
    v40 = v36->__pn_.__r_.__value_.__l.__size_;
  v41 = std::string::append(&v49, v39, v40);
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v53 = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)v52 = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  v43 = (nlv4_inference_orchestrator::inference_engine::BertModule *)operator new();
  if (*((char *)v30 + 47) < 0)
    std::string::__init_copy_ctor_external(&v54, (const std::string::value_type *)v30[3], v30[4]);
  else
    v54 = *(std::string *)((_BYTE *)v30 + 1);
  nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::BertReshapableE5MLModule(v43, (char *)&v54, (uint64_t)a3);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  *a4 = v43;
  if (SHIBYTE(v53) < 0)
    operator delete(v52[0]);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
LABEL_90:
  std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table((uint64_t)&__p);
  if (SHIBYTE(v51.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__pn_.__r_.__value_.__l.__data_);
}

void sub_1C21B36FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (*(char *)(v39 - 73) < 0)
    operator delete(*(void **)(v39 - 96));
  std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table((uint64_t)&a23);
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1C21B3870()
{
  JUMPOUT(0x1C21B3858);
}

void sub_1C21B3878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    JUMPOUT(0x1C21B3864);
  JUMPOUT(0x1C21B3868);
}

uint64_t *std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::find<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>(_QWORD *a1, int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = (v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void snlp::common::e5ml::asset_finder::AssetFinder::findAssetTypesPresent(std::__fs::filesystem::path *this@<X0>, const std::__fs::filesystem::path *a2@<X1>, uint64_t a3@<X8>)
{
  std::__fs::filesystem::path *v6;
  _BOOL4 v7;
  int v8;
  std::__fs::filesystem::path v9;
  std::__fs::filesystem::path v10;
  char v11;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  std::__fs::filesystem::operator/[abi:ne180100](&v10.__pn_, (uint64_t)a2, this);
  std::__fs::filesystem::__status(&v10, 0);
  if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__pn_.__r_.__value_.__l.__data_);
  if (v9.__pn_.__r_.__value_.__s.__data_[0] == 1)
  {
    LODWORD(v9.__pn_.__r_.__value_.__l.__data_) = 0;
    std::__fs::filesystem::operator/[abi:ne180100](&v10.__pn_, (uint64_t)a2, this);
    std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::__emplace_unique_key_args<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::piecewise_construct_t const&,std::tuple<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType&&>,std::tuple<std::__fs::filesystem::path&&>>((uint64_t *)a3, 0, &v9, (uint64_t)&v10);
    goto LABEL_9;
  }
  std::__fs::filesystem::operator/[abi:ne180100](&v10.__pn_, (uint64_t)a2, this + 2);
  std::__fs::filesystem::__status(&v10, 0);
  if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__pn_.__r_.__value_.__l.__data_);
  if (v9.__pn_.__r_.__value_.__s.__data_[0] == 1)
  {
    LODWORD(v9.__pn_.__r_.__value_.__l.__data_) = 0;
    std::__fs::filesystem::operator/[abi:ne180100](&v10.__pn_, (uint64_t)a2, this + 2);
    std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::__emplace_unique_key_args<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::piecewise_construct_t const&,std::tuple<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType&&>,std::tuple<std::__fs::filesystem::path&&>>((uint64_t *)a3, 0, &v9, (uint64_t)&v10);
LABEL_9:
    if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__pn_.__r_.__value_.__l.__data_);
  }
  v6 = this + 1;
  std::__fs::filesystem::operator/[abi:ne180100](&v10.__pn_, (uint64_t)a2, this + 1);
  std::__fs::filesystem::__status(&v10, 0);
  if (v9.__pn_.__r_.__value_.__s.__data_[0] == 1)
  {
    std::__fs::filesystem::operator/[abi:ne180100](&v9.__pn_, (uint64_t)a2, this + 2);
    std::__fs::filesystem::__status(&v9, 0);
    v7 = v11 == 1;
    if (SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__pn_.__r_.__value_.__l.__data_);
  }
  else
  {
    v7 = 0;
  }
  if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v10.__pn_.__r_.__value_.__l.__data_);
    if (!v7)
      return;
  }
  else if (!v7)
  {
    return;
  }
  std::__fs::filesystem::operator/[abi:ne180100](&v9.__pn_, (uint64_t)a2, this + 2);
  if (SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v10.__pn_, v9.__pn_.__r_.__value_.__l.__data_, v9.__pn_.__r_.__value_.__l.__size_);
  else
    v10 = v9;
  v8 = snlp::common::e5ml::asset_finder::AssetFinder::checkFastReshapeCompatibility((uint64_t)this);
  if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__pn_.__r_.__value_.__l.__data_);
    if (v8)
      goto LABEL_26;
  }
  else if (v8)
  {
LABEL_26:
    LODWORD(v9.__pn_.__r_.__value_.__l.__data_) = 2;
    std::__fs::filesystem::operator/[abi:ne180100](&v10.__pn_, (uint64_t)a2, v6);
    std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::__emplace_unique_key_args<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::piecewise_construct_t const&,std::tuple<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType&&>,std::tuple<std::__fs::filesystem::path&&>>((uint64_t *)a3, 2, &v9, (uint64_t)&v10);
    goto LABEL_29;
  }
  LODWORD(v9.__pn_.__r_.__value_.__l.__data_) = 1;
  std::__fs::filesystem::operator/[abi:ne180100](&v10.__pn_, (uint64_t)a2, v6);
  std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::__emplace_unique_key_args<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::piecewise_construct_t const&,std::tuple<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType&&>,std::tuple<std::__fs::filesystem::path&&>>((uint64_t *)a3, 1, &v9, (uint64_t)&v10);
LABEL_29:
  if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__pn_.__r_.__value_.__l.__data_);
}

void sub_1C21B3C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table(v21);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::__emplace_unique_key_args<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::piecewise_construct_t const&,std::tuple<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType&&>,std::tuple<std::__fs::filesystem::path&&>>(uint64_t *a1, int a2, _DWORD *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *i;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  void *v36;

  v8 = a2;
  v9 = a1[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = (v9 - 1) & a2;
    }
    v11 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (uint64_t *)*i)
      {
        v13 = i[1];
        if (v13 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  v14 = a1 + 2;
  v15 = (char *)operator new(0x30uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v8;
  *((_DWORD *)v15 + 4) = *a3;
  *(_OWORD *)(v15 + 24) = *(_OWORD *)a4;
  *((_QWORD *)v15 + 5) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  v16 = (float)(unint64_t)(a1[3] + 1);
  v17 = *((float *)a1 + 8);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = a1[1];
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v28 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = (void *)*a1;
          *a1 = (uint64_t)v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD *)*v14;
          if (*v14)
          {
            v26 = v25[1];
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v26) = v14;
            v31 = (_QWORD *)*v25;
            if (*v25)
            {
              do
              {
                v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v32))
                  {
                    *(_QWORD *)(*a1 + 8 * v32) = v25;
                    goto LABEL_55;
                  }
                  *v25 = *v31;
                  *v31 = **(_QWORD **)(*a1 + 8 * v32);
                  **(_QWORD **)(*a1 + 8 * v32) = v31;
                  v31 = v25;
                }
                v32 = v26;
LABEL_55:
                v25 = v31;
                v31 = (_QWORD *)*v31;
                v26 = v32;
              }
              while (v31);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v36 = (void *)*a1;
        *a1 = 0;
        if (v36)
          operator delete(v36);
        v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v33 = *a1;
  v34 = *(_QWORD **)(*a1 + 8 * v4);
  if (v34)
  {
    *(_QWORD *)v15 = *v34;
LABEL_72:
    *v34 = v15;
    goto LABEL_73;
  }
  *(_QWORD *)v15 = *v14;
  *v14 = v15;
  *(_QWORD *)(v33 + 8 * v4) = v14;
  if (*(_QWORD *)v15)
  {
    v35 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9)
        v35 %= v9;
    }
    else
    {
      v35 &= v9 - 1;
    }
    v34 = (_QWORD *)(*a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
}

void sub_1C21B40D0(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t snlp::common::e5ml::asset_finder::AssetFinder::checkFastReshapeCompatibility(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const void **v10;
  unsigned __int8 *v11;
  _BYTE *v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  nlohmann::detail::exception *exception;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE v33[8];
  uint64_t *v34;
  uint64_t v35;
  std::string *v36;
  _BYTE v37[24];
  _BYTE *v38;
  _QWORD v39[2];
  uint64_t v40;
  _QWORD v41[21];

  v41[19] = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v39);
  v38 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>((uint64_t)v33, v39, (uint64_t)v37);
  v2 = v38;
  if (v38 == v37)
  {
    v3 = 4;
    v2 = v37;
    goto LABEL_5;
  }
  if (v38)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  v29 = v33;
  v30 = 0;
  v31 = 0;
  v32 = 0x8000000000000000;
  v4 = v33[0];
  if (v33[0])
  {
    if (v33[0] == 2)
    {
      v31 = *v34;
    }
    else if (v33[0] == 1)
    {
      v30 = *v34;
    }
    else
    {
      v32 = 0;
    }
  }
  else
  {
    v32 = 1;
  }
  v5 = 0;
  while (1)
  {
    v26 = 0;
    v27 = 0;
    v25 = v33;
    v28 = 0x8000000000000000;
    if (v4 == 2)
    {
      v27 = v34[1];
    }
    else if (v4 == 1)
    {
      v26 = v34 + 1;
    }
    else
    {
      v28 = 1;
    }
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>(&v29, &v25))
    {
      break;
    }
    if (*v29 != 1)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v35, "cannot use key() for non-object iterators");
      nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 207, (uint64_t)&v35);
    }
    v6 = *(unsigned __int8 *)(v30 + 55);
    if ((v6 & 0x80u) == 0)
      v7 = *(unsigned __int8 *)(v30 + 55);
    else
      v7 = *(_QWORD *)(v30 + 40);
    v8 = *(unsigned __int8 *)(a1 + 95);
    v9 = (char)v8;
    if ((v8 & 0x80u) != 0)
      v8 = *(_QWORD *)(a1 + 80);
    if (v7 == v8)
    {
      v10 = (const void **)(v30 + 32);
      if (v9 >= 0)
        v11 = (unsigned __int8 *)(a1 + 72);
      else
        v11 = *(unsigned __int8 **)(a1 + 72);
      if ((v6 & 0x80) != 0)
      {
        if (memcmp(*v10, v11, *(_QWORD *)(v30 + 40)))
          goto LABEL_51;
LABEL_36:
        if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v29) == 1)
        {
          v12 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v29);
          v26 = 0;
          v27 = 0;
          v25 = v12;
          v28 = 0x8000000000000000;
          v13 = *v12;
          if (v13 == 1)
          {
            v26 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>(*((_QWORD *)v12 + 1), (_QWORD *)(a1 + 96));
          }
          else if (v13 == 2)
          {
            v27 = *(_QWORD *)(*((_QWORD *)v12 + 1) + 8);
          }
          else
          {
            v28 = 1;
          }
          v14 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v29);
          v22 = 0;
          v23 = 0;
          v21 = v14;
          v24 = 0x8000000000000000;
          v15 = *v14;
          if (v15 == 2)
          {
            v23 = *(_QWORD *)(*((_QWORD *)v14 + 1) + 8);
          }
          else if (v15 == 1)
          {
            v22 = *((_QWORD *)v14 + 1) + 8;
          }
          else
          {
            v24 = 1;
          }
          if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>(&v25, &v21))
          {
            v16 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v29);
            if (*(_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::at(v16, (_QWORD *)(a1 + 96)) == 3)
            {
              v17 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v29);
              v18 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::at(v17, (_QWORD *)(a1 + 96));
              LOBYTE(v35) = 3;
              v36 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(a1 + 120);
              LODWORD(v18) = nlohmann::operator==(v18, (unsigned __int8 *)&v35);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v36, 3);
              if ((_DWORD)v18)
                v5 = 1;
            }
          }
        }
        goto LABEL_51;
      }
      if (!*(_BYTE *)(v30 + 55))
        goto LABEL_36;
      while (*(unsigned __int8 *)v10 == *v11)
      {
        v10 = (const void **)((char *)v10 + 1);
        ++v11;
        if (!--v6)
          goto LABEL_36;
      }
    }
LABEL_51:
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++(&v29);
    v4 = v33[0];
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v34, v33[0]);
  v39[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v39 + *(_QWORD *)(v39[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1C3BB970C](&v40);
  std::istream::~istream();
  MEMORY[0x1C3BB9A90](v41);
  return v5 & 1;
}

void sub_1C21B44F4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char *a32,__int128 buf)
{
  char *v33;
  char *v36;
  uint64_t v37;
  void *v38;
  NSObject *v39;
  uint64_t v40;

  v36 = a32;
  if (a32 == v33)
  {
    v37 = 4;
    v36 = &a29;
  }
  else
  {
    if (!a32)
      goto LABEL_6;
    v37 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
LABEL_6:
  std::ifstream::~ifstream(&buf);
  if (a2 == 1)
  {
    v38 = __cxa_begin_catch(a1);
    v39 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      v40 = (*(uint64_t (**)(void *))(*(_QWORD *)v38 + 16))(v38);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v40;
      _os_log_impl(&dword_1C2196000, v39, OS_LOG_TYPE_ERROR, "E5ML bundle properties parsing failed: %s", (uint8_t *)&buf, 0xCu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C21B4464);
  }
  _Unwind_Resume(a1);
}

BOOL nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>(unsigned __int8 **a1, unsigned __int8 **a2)
{
  int v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  nlohmann::detail::exception *exception;
  _QWORD v7[3];

  if (*a1 != *a2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "cannot compare iterators of different containers");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 212, (uint64_t)v7);
  }
  v2 = **a1;
  if (v2 == 2)
  {
    v3 = a1[2];
    v4 = a2[2];
  }
  else if (v2 == 1)
  {
    v3 = a1[1];
    v4 = a2[1];
  }
  else
  {
    v3 = a1[3];
    v4 = a2[3];
  }
  return v3 == v4;
}

void sub_1C21B4700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

_BYTE *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*(uint64_t a1)
{
  _BYTE *result;
  int v3;
  nlohmann::detail::exception *v4;
  nlohmann::detail::exception *exception;
  _QWORD v6[3];

  result = *(_BYTE **)a1;
  v3 = *result;
  if (v3 == 1)
    return (_BYTE *)(*(_QWORD *)(a1 + 8) + 56);
  if (v3 == 2)
    return *(_BYTE **)(a1 + 16);
  if (!*result)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "cannot get value");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 214, (uint64_t)v6);
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v4 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "cannot get value");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v4, 214, (uint64_t)v6);
  }
  return result;
}

void sub_1C21B4838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::at(unsigned __int8 *a1, _QWORD *a2)
{
  uint64_t v3;
  nlohmann::detail::exception *exception;
  unint64_t v6;
  char *v7;
  std::string *v8;
  __int128 v9;
  std::string v10;
  __int128 v11;
  std::string::size_type v12;
  uint64_t v13;

  if (*a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v6 = *a1;
    if (v6 > 9)
      v7 = "number";
    else
      v7 = off_1E7BED038[v6];
    std::string::basic_string[abi:ne180100]<0>(&v10, v7);
    v8 = std::string::insert(&v10, 0, "cannot use at() with ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v12 = v8->__r_.__value_.__r.__words[2];
    v11 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 304, (uint64_t)&v11);
  }
  v3 = *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(*((_QWORD *)a1 + 1), &v13, a2);
  if (!v3)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v3 + 56;
}

void sub_1C21B4A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  int v21;
  void *v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v21 & 1) == 0)
    {
LABEL_8:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

_QWORD *std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v3 + 4, a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a2, v5 + 4))
    return v2;
  return v5;
}

uint64_t nlohmann::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v3;
  int v4;
  uint64_t result;
  BOOL v6;
  double v10;
  double v11;
  double v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const void **v23;
  unsigned __int8 *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 **v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  int v39;
  unsigned __int8 *v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  BOOL v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  size_t v52;

  v3 = *a1;
  v4 = *a2;
  if (v3 != v4)
  {
    if (v3 == 5 && v4 == 7)
    {
      v12 = (double)*((uint64_t *)a1 + 1);
    }
    else
    {
      if (v3 == 7 && v4 == 5)
      {
        v10 = *((double *)a1 + 1);
        v11 = (double)*((uint64_t *)a2 + 1);
        return v10 == v11;
      }
      if (v3 != 6 || v4 != 7)
      {
        if (v3 != 7 || v4 != 6)
        {
          if (v3 != 6 || v4 != 5)
          {
            result = 0;
            if (v3 != 5 || v4 != 6)
              return result;
          }
          return *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1);
        }
        v10 = *((double *)a1 + 1);
        v11 = (double)*((unint64_t *)a2 + 1);
        return v10 == v11;
      }
      v12 = (double)*((unint64_t *)a1 + 1);
    }
    return *((double *)a2 + 1) == v12;
  }
  result = 1;
  switch(v3)
  {
    case 0:
      return result;
    case 1:
      v13 = (_QWORD *)*((_QWORD *)a1 + 1);
      v14 = (_QWORD *)*((_QWORD *)a2 + 1);
      if (v13[2] != v14[2])
        return 0;
      v17 = (_QWORD *)*v13;
      v15 = v13 + 1;
      v16 = v17;
      if (v17 == v15)
        return result;
      v18 = (_QWORD *)*v14;
      break;
    case 2:
      v29 = (uint64_t *)*((_QWORD *)a1 + 1);
      v30 = (uint64_t *)*((_QWORD *)a2 + 1);
      v31 = *v29;
      v32 = v29[1];
      v33 = *v30;
      if (v32 - *v29 != v30[1] - *v30)
        return 0;
      while (v31 != v32)
      {
        result = nlohmann::operator==(v31, v33);
        if (!(_DWORD)result)
          break;
        v31 += 16;
        v33 += 16;
      }
      return result;
    case 3:
      v34 = (unsigned __int8 *)*((_QWORD *)a1 + 1);
      v35 = (unsigned __int8 **)*((_QWORD *)a2 + 1);
      v36 = v34[23];
      if ((v36 & 0x80u) == 0)
        v37 = (unsigned __int8 *)v34[23];
      else
        v37 = (unsigned __int8 *)*((_QWORD *)v34 + 1);
      v38 = (unsigned __int8 *)*((unsigned __int8 *)v35 + 23);
      v39 = (char)v38;
      if ((char)v38 < 0)
        v38 = v35[1];
      if (v37 != v38)
        return 0;
      if (v39 >= 0)
        v40 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      else
        v40 = *v35;
      if ((v36 & 0x80) != 0)
        return memcmp(*(const void **)v34, v40, *((_QWORD *)v34 + 1)) == 0;
      if (v34[23])
      {
        v41 = v36 - 1;
        do
        {
          v43 = *v34++;
          v42 = v43;
          v45 = *v40++;
          v44 = v45;
          v47 = v41-- != 0;
          result = v42 == v44;
        }
        while (v42 == v44 && v47);
      }
      return result;
    case 4:
      v48 = a1[8];
      v49 = a2[8];
      return v48 == v49;
    case 5:
    case 6:
      return *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1);
    case 7:
      v10 = *((double *)a1 + 1);
      v11 = *((double *)a2 + 1);
      return v10 == v11;
    case 8:
      v50 = *((_QWORD *)a1 + 1);
      v51 = *((_QWORD *)a2 + 1);
      v52 = *(_QWORD *)(v50 + 8) - *(_QWORD *)v50;
      if (v52 != *(_QWORD *)(v51 + 8) - *(_QWORD *)v51
        || memcmp(*(const void **)v50, *(const void **)v51, v52)
        || *(unsigned __int8 *)(v50 + 24) != *(unsigned __int8 *)(v51 + 24))
      {
        return 0;
      }
      v48 = *(unsigned __int8 *)(v50 + 25);
      v49 = *(unsigned __int8 *)(v51 + 25);
      return v48 == v49;
    default:
      return 0;
  }
  while (1)
  {
    v19 = *((unsigned __int8 *)v16 + 55);
    if ((v19 & 0x80u) == 0)
      v20 = *((unsigned __int8 *)v16 + 55);
    else
      v20 = v16[5];
    v21 = *((unsigned __int8 *)v18 + 55);
    v22 = (char)v21;
    if ((v21 & 0x80u) != 0)
      v21 = v18[5];
    if (v20 != v21)
      return 0;
    v23 = (const void **)(v16 + 4);
    if (v22 >= 0)
      v24 = (unsigned __int8 *)(v18 + 4);
    else
      v24 = (unsigned __int8 *)v18[4];
    if ((v19 & 0x80) != 0)
    {
      if (memcmp(*v23, v24, v16[5]))
        return 0;
    }
    else if (*((_BYTE *)v16 + 55))
    {
      while (*(unsigned __int8 *)v23 == *v24)
      {
        v23 = (const void **)((char *)v23 + 1);
        ++v24;
        if (!--v19)
          goto LABEL_41;
      }
      return 0;
    }
LABEL_41:
    result = nlohmann::operator==(v16 + 7, v18 + 7);
    if ((_DWORD)result)
    {
      v25 = (_QWORD *)v16[1];
      v26 = v16;
      if (v25)
      {
        do
        {
          v16 = v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v26[2];
          v6 = *v16 == (_QWORD)v26;
          v26 = v16;
        }
        while (!v6);
      }
      v27 = (_QWORD *)v18[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v18[2];
          v6 = *v28 == (_QWORD)v18;
          v18 = v28;
        }
        while (!v6);
      }
      result = 1;
      v18 = v28;
      if (v16 != v15)
        continue;
    }
    return result;
  }
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v8[2];
  _QWORD v9[3];
  _QWORD *v10;
  _BYTE v11[24];
  _BYTE *v12;
  void *v13[20];

  v13[19] = *(void **)MEMORY[0x1E0C80C00];
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v8[0] = a2;
  v8[1] = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 40);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::input_stream_adapter>((uint64_t)v11, (uint64_t)v8, v9);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parse((uint64_t)v11, 1, (unsigned __int8 *)a1);
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(v13);
  v4 = v12;
  if (v12 == v11)
  {
    v5 = 4;
    v4 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_10;
  }
  if (v10)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)v8);
}

void sub_1C21B4FB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unsigned __int8 *v2;
  uint64_t **v3;
  va_list v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD *);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~parser((uint64_t)va2);
  v5 = (va_list)v14;
  if (v14 == (_QWORD *)va1)
  {
    v6 = 4;
    va_copy(v5, va1);
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_6:
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)va);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v3, *v2);
  _Unwind_Resume(a1);
}

_QWORD *nlohmann::operator>>(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[3];
  _QWORD *v11;
  _BYTE v12[24];
  _BYTE *v13;
  void *v14[20];

  v14[19] = *(void **)MEMORY[0x1E0C80C00];
  v9[0] = a1;
  v9[1] = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  v11 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::input_stream_adapter>((uint64_t)v12, (uint64_t)v9, v10);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parse((uint64_t)v12, 0, a2);
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(v14);
  v4 = v13;
  if (v13 == v12)
  {
    v5 = 4;
    v4 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v11;
  if (v11 == v10)
  {
    v7 = 4;
    v6 = v10;
    goto LABEL_10;
  }
  if (v11)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)v9);
  return a1;
}

void sub_1C21B5124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list v3;
  uint64_t v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD *);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~parser((uint64_t)va2);
  v3 = (va_list)v12;
  if (v12 == (_QWORD *)va1)
  {
    v4 = 4;
    va_copy(v3, va1);
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)va);
  _Unwind_Resume(a1);
}

void nlohmann::detail::input_stream_adapter::~input_stream_adapter(nlohmann::detail::input_stream_adapter *this)
{
  if (*(_QWORD *)this)
    std::ios_base::clear((std::ios_base *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24)), *(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32) & 2);
}

void nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parse(uint64_t a1, int a2, unsigned __int8 *a3)
{
  char v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  int v59;
  std::string::size_type v60;
  uint64_t **v61;
  unsigned __int8 *v62;
  int v63;
  std::string::size_type v64;
  uint64_t **p_size;
  std::string *v66;
  unsigned __int8 *v67;
  int v68;
  std::string::size_type v69;
  uint64_t **v70;
  unsigned __int8 *v71;
  int v72;
  std::string::size_type v73;
  uint64_t **v74;
  unsigned __int8 *v75;
  int v76;
  std::string::size_type v77;
  uint64_t **v78;
  uint64_t v79;
  std::string::size_type v80;
  uint64_t v81;
  std::string::size_type v82;
  std::string *v83;
  uint64_t v84;
  std::string::size_type v85;
  uint64_t v86;
  std::string::size_type v87;
  uint64_t v88;
  std::string::size_type v89;
  uint64_t *v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t **v95;
  int v96;
  int v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  std::exception_vtbl *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  std::exception_vtbl *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  std::exception_vtbl *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  std::exception_vtbl *v127;
  char *v128;
  uint64_t v129;
  std::runtime_error_vtbl *v130;
  std::string::size_type size;
  uint64_t *v132;
  int v133;
  int v134;
  int v135;
  uint64_t **v136;
  int v137;
  int v138;
  int v139;
  uint64_t *v140;
  _QWORD *v141;
  uint64_t v142;
  unsigned __int8 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  std::string::size_type v148;
  uint64_t v149;
  uint64_t *v150;
  unint64_t v151;
  uint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  std::string::size_type v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  std::string::size_type v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unsigned __int8 v179;
  std::string::size_type v180;
  unsigned __int8 *v181;
  int v182;
  std::string::size_type v183;
  uint64_t **v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  std::string::value_type v194;
  std::string::size_type v195;
  uint64_t v196;
  std::string::size_type v197;
  uint64_t *v198;
  char *v199;
  char *v200;
  uint64_t v201;
  int v202;
  uint64_t *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  int v207;
  int v208;
  int v209;
  unint64_t v210;
  uint64_t v211;
  std::exception_vtbl *v212;
  char *v213;
  uint64_t v214;
  std::string::size_type v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  uint64_t **v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  std::string *v225;
  __int128 v226;
  std::string *v227;
  __int128 v228;
  std::string *v229;
  __int128 v230;
  std::string *v231;
  __int128 v232;
  uint64_t v233;
  std::exception_vtbl *v236;
  uint64_t v237;
  uint64_t *v238;
  char v239;
  uint64_t v240;
  char v241;
  uint64_t v242;
  char v243;
  uint64_t *v244;
  std::string v245;
  std::string v246;
  std::string v247;
  std::string v248;
  std::string __p;
  std::exception v250;
  std::runtime_error_vtbl *v251;
  std::runtime_error v252;
  uint64_t *v253;
  _QWORD v254[3];
  _QWORD *v255;
  unsigned __int8 *v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  char v262;
  _BYTE v263[24];
  _BYTE *v264;
  char v265;
  char v266;
  uint64_t v267;
  uint64_t v268;

  v268 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 24))
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = *(_BYTE *)(a1 + 184);
    v256 = a3;
    v257 = 0u;
    v236 = (std::exception_vtbl *)(a1 + 120);
    v237 = a1 + 40;
    v258 = 0u;
    LOBYTE(v259) = 0;
    BYTE1(v259) = v14;
    memset(&__p, 0, sizeof(__p));
LABEL_7:
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v250.__vftable) = 1;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(&v256, (unsigned __int8 *)&v250);
        goto LABEL_132;
      case 2:
        LOBYTE(v250.__vftable) = 0;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(&v256, (unsigned __int8 *)&v250);
        goto LABEL_132;
      case 3:
        if (v9 == v10)
        {
          v62 = v256;
          v63 = *v256;
          *v256 = 0;
          v248.__r_.__value_.__s.__data_[0] = v63;
          v64 = *((_QWORD *)v62 + 1);
          *((_QWORD *)v62 + 1) = 0;
          v248.__r_.__value_.__l.__size_ = v64;
          p_size = (uint64_t **)&v248.__r_.__value_.__l.__size_;
        }
        else
        {
          v23 = *(v10 - 1);
          if (*(_BYTE *)v23 == 2)
          {
            v24 = *(uint64_t **)(v23 + 8);
            v25 = v24[1];
            v26 = v24[2];
            if (v25 >= v26)
            {
              v105 = (uint64_t)(v25 - *v24) >> 4;
              v106 = v105 + 1;
              if ((unint64_t)(v105 + 1) >> 60)
                goto LABEL_358;
              v107 = v26 - *v24;
              if (v107 >> 3 > v106)
                v106 = v107 >> 3;
              if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF0)
                v108 = 0xFFFFFFFFFFFFFFFLL;
              else
                v108 = v106;
              v253 = v24 + 2;
              v109 = (std::exception_vtbl *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v108);
              v110 = (char *)v109 + 16 * v105;
              v250.__vftable = v109;
              v251 = (std::runtime_error_vtbl *)v110;
              v252.__imp_.__imp_ = (char *)v109 + 16 * v111;
              *v110 = 0;
              *((_QWORD *)v110 + 1) = 0;
              v252.__vftable = (std::runtime_error_vtbl *)(v110 + 16);
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(v24, &v250);
              v27 = v24[1];
              std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v250);
            }
            else
            {
              *(_BYTE *)v25 = 0;
              *(_QWORD *)(v25 + 8) = 0;
              v27 = v25 + 16;
              v24[1] = v25 + 16;
            }
            v24[1] = v27;
            goto LABEL_102;
          }
          v81 = *((_QWORD *)&v258 + 1);
          v63 = **((_BYTE **)&v258 + 1);
          **((_BYTE **)&v258 + 1) = 0;
          v247.__r_.__value_.__s.__data_[0] = v63;
          v82 = *(_QWORD *)(v81 + 8);
          *(_QWORD *)(v81 + 8) = 0;
          v247.__r_.__value_.__l.__size_ = v82;
          p_size = (uint64_t **)&v247.__r_.__value_.__l.__size_;
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(p_size, v63);
LABEL_102:
        v11 = v10;
        v12 = v10;
        v13 = v10;
        goto LABEL_132;
      case 4:
        if (v9 == v12)
        {
          v66 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>((uint64_t)v236);
          v67 = v256;
          v68 = *v256;
          *v256 = 3;
          v248.__r_.__value_.__s.__data_[0] = v68;
          v69 = *((_QWORD *)v67 + 1);
          *((_QWORD *)v67 + 1) = v66;
          v248.__r_.__value_.__l.__size_ = v69;
          v70 = (uint64_t **)&v248.__r_.__value_.__l.__size_;
        }
        else
        {
          v30 = *(v12 - 1);
          if (*(_BYTE *)v30 == 2)
          {
            v31 = *(uint64_t **)(v30 + 8);
            v32 = v31[1];
            v33 = v31[2];
            if (v32 >= v33)
            {
              v112 = (uint64_t)(v32 - *v31) >> 4;
              if ((unint64_t)(v112 + 1) >> 60)
                goto LABEL_358;
              v113 = v33 - *v31;
              v114 = v113 >> 3;
              if (v113 >> 3 <= (unint64_t)(v112 + 1))
                v114 = v112 + 1;
              if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF0)
                v115 = 0xFFFFFFFFFFFFFFFLL;
              else
                v115 = v114;
              v253 = v31 + 2;
              if (v115)
                v115 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v115);
              else
                v116 = 0;
              v130 = (std::runtime_error_vtbl *)(v115 + 16 * v112);
              v250.__vftable = (std::exception_vtbl *)v115;
              v251 = v130;
              v252.__vftable = v130;
              v252.__imp_.__imp_ = (const char *)(v115 + 16 * v116);
              LOBYTE(v130->~runtime_error) = 3;
              v130->~runtime_error_0 = 0;
              v130->~runtime_error_0 = (void (__cdecl *)(std::runtime_error *__hidden))nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>((uint64_t)v236);
              v252.__vftable = (std::runtime_error_vtbl *)((char *)v252.__vftable + 16);
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(v31, &v250);
              v34 = v31[1];
              std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v250);
            }
            else
            {
              *(_QWORD *)(v32 + 8) = 0;
              *(_BYTE *)v32 = 3;
              *(_QWORD *)(v32 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>((uint64_t)v236);
              v34 = v32 + 16;
              v31[1] = v34;
            }
            v31[1] = v34;
            goto LABEL_131;
          }
          v83 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>((uint64_t)v236);
          v84 = *((_QWORD *)&v258 + 1);
          v68 = **((_BYTE **)&v258 + 1);
          **((_BYTE **)&v258 + 1) = 3;
          v247.__r_.__value_.__s.__data_[0] = v68;
          v85 = *(_QWORD *)(v84 + 8);
          *(_QWORD *)(v84 + 8) = v83;
          v247.__r_.__value_.__l.__size_ = v85;
          v70 = (uint64_t **)&v247.__r_.__value_.__l.__size_;
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v70, v68);
LABEL_131:
        v13 = v12;
LABEL_132:
        size = __p.__r_.__value_.__l.__size_;
        if (!__p.__r_.__value_.__l.__size_)
        {
LABEL_148:
          if (__p.__r_.__value_.__r.__words[0])
            operator delete(__p.__r_.__value_.__l.__data_);
          if (a2)
          {
            v138 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v237);
            *(_DWORD *)(a1 + 32) = v138;
            if (v138 != 15)
            {
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(&__p, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
              v248 = *(std::string *)(a1 + 72);
              std::string::basic_string[abi:ne180100]<0>(&v246, "value");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(&v247, a1, 0xFu, (uint64_t)&v246);
              v245.__r_.__value_.__s.__data_[0] = 0;
              v245.__r_.__value_.__l.__size_ = 0;
              nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((nlohmann::detail::exception *)&v250, (uint64_t *)&v248, (uint64_t)&v247);
              nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)&v256, (uint64_t)&v250);
              v250.__vftable = (std::exception_vtbl *)&off_1E7BEC5E8;
              std::runtime_error::~runtime_error(&v252);
              std::exception::~exception(&v250);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v245.__r_.__value_.__l.__size_, 0);
              if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v247.__r_.__value_.__l.__data_);
              if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v246.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          if ((_BYTE)v259)
          {
            v139 = *a3;
            *a3 = 9;
            v140 = (uint64_t *)*((_QWORD *)a3 + 1);
            *((_QWORD *)a3 + 1) = 0;
            v238 = v140;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v238, v139);
          }
          if ((_QWORD)v257)
            operator delete((void *)v257);
          return;
        }
        v132 = (uint64_t *)*((_QWORD *)&v257 + 1);
        while (2)
        {
          if (((*(_QWORD *)(__p.__r_.__value_.__r.__words[0] + (((size - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (size - 1)) & 1) != 0)
          {
            v133 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v237);
            *(_DWORD *)(a1 + 32) = v133;
            if (v133 != 13)
            {
              if (v133 != 10)
              {
                *((_QWORD *)&v257 + 1) = v132;
                nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(&v248, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                v247 = *(std::string *)(a1 + 72);
                std::string::basic_string[abi:ne180100]<0>(&v245, "array");
                nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(&v246, a1, 0xAu, (uint64_t)&v245);
                v243 = 0;
                v244 = 0;
                nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((nlohmann::detail::exception *)&v250, (uint64_t *)&v247, (uint64_t)&v246);
                nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)&v256, (uint64_t)&v250);
                goto LABEL_329;
              }
              goto LABEL_140;
            }
            *((_QWORD *)&v257 + 1) = v132;
            *(_DWORD *)(a1 + 32) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v237);
          }
          else
          {
            v134 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v237);
            *(_DWORD *)(a1 + 32) = v134;
            if (v134 != 13)
            {
              if (v134 != 11)
              {
                *((_QWORD *)&v257 + 1) = v132;
                nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(&v248, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                v247 = *(std::string *)(a1 + 72);
                std::string::basic_string[abi:ne180100]<0>(&v245, "object");
                nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(&v246, a1, 0xBu, (uint64_t)&v245);
                v243 = 0;
                v244 = 0;
                nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((nlohmann::detail::exception *)&v250, (uint64_t *)&v247, (uint64_t)&v246);
                nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)&v256, (uint64_t)&v250);
                goto LABEL_329;
              }
LABEL_140:
              v132 = v8 - 1;
              v7 = v132;
              --v8;
              v10 = v132;
              v11 = v132;
              v12 = v132;
              v13 = v132;
              size = --__p.__r_.__value_.__l.__size_;
              if (!__p.__r_.__value_.__l.__size_)
              {
                *((_QWORD *)&v257 + 1) = v132;
                goto LABEL_148;
              }
              continue;
            }
            *((_QWORD *)&v257 + 1) = v132;
            v135 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v237);
            *(_DWORD *)(a1 + 32) = v135;
            if (v135 != 4)
              goto LABEL_341;
            v136 = *(uint64_t ***)(*(v7 - 1) + 8);
            v250.__vftable = v236;
            *((_QWORD *)&v258 + 1) = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v136, v236, (__int128 **)&v250)+ 56;
            v137 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v237);
            *(_DWORD *)(a1 + 32) = v137;
            if (v137 != 12)
              goto LABEL_342;
            v97 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v237);
LABEL_146:
            v8 = v7;
            *(_DWORD *)(a1 + 32) = v97;
LABEL_147:
            v10 = v7;
            v11 = v7;
            v12 = v7;
            v13 = v7;
          }
          goto LABEL_7;
        }
      case 5:
        v41 = *(_QWORD *)(a1 + 160);
        if (v9 == v13)
        {
          v71 = v256;
          v72 = *v256;
          *v256 = 6;
          v248.__r_.__value_.__s.__data_[0] = v72;
          v73 = *((_QWORD *)v71 + 1);
          *((_QWORD *)v71 + 1) = v41;
          v248.__r_.__value_.__l.__size_ = v73;
          v74 = (uint64_t **)&v248.__r_.__value_.__l.__size_;
LABEL_63:
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v74, v72);
          goto LABEL_132;
        }
        v42 = *(v13 - 1);
        if (*(_BYTE *)v42 != 2)
        {
          v86 = *((_QWORD *)&v258 + 1);
          v72 = **((_BYTE **)&v258 + 1);
          **((_BYTE **)&v258 + 1) = 6;
          v247.__r_.__value_.__s.__data_[0] = v72;
          v87 = *(_QWORD *)(v86 + 8);
          *(_QWORD *)(v86 + 8) = v41;
          v247.__r_.__value_.__l.__size_ = v87;
          v74 = (uint64_t **)&v247.__r_.__value_.__l.__size_;
          goto LABEL_63;
        }
        v43 = *(uint64_t **)(v42 + 8);
        v44 = v43[1];
        v45 = v43[2];
        if (v44 >= v45)
        {
          v233 = (uint64_t)(v44 - *v43) >> 4;
          v117 = v233 + 1;
          if ((unint64_t)(v233 + 1) >> 60)
LABEL_358:
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v118 = v45 - *v43;
          if (v118 >> 3 > v117)
            v117 = v118 >> 3;
          if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF0)
            v119 = 0xFFFFFFFFFFFFFFFLL;
          else
            v119 = v117;
          v253 = v43 + 2;
          v120 = (std::exception_vtbl *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v119);
          v121 = (char *)v120 + 16 * v233;
          v250.__vftable = v120;
          v251 = (std::runtime_error_vtbl *)v121;
          v252.__imp_.__imp_ = (char *)v120 + 16 * v122;
          *v121 = 6;
          *((_QWORD *)v121 + 1) = v41;
          v252.__vftable = (std::runtime_error_vtbl *)(v121 + 16);
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(v43, &v250);
          v46 = v43[1];
          std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v250);
        }
        else
        {
          *(_BYTE *)v44 = 6;
          *(_QWORD *)(v44 + 8) = v41;
          v46 = v44 + 16;
          v43[1] = v44 + 16;
        }
        v43[1] = v46;
        goto LABEL_132;
      case 6:
        v17 = *(_QWORD *)(a1 + 152);
        if (v9 == v11)
        {
          v58 = v256;
          v59 = *v256;
          *v256 = 5;
          v248.__r_.__value_.__s.__data_[0] = v59;
          v60 = *((_QWORD *)v58 + 1);
          *((_QWORD *)v58 + 1) = v17;
          v248.__r_.__value_.__l.__size_ = v60;
          v61 = (uint64_t **)&v248.__r_.__value_.__l.__size_;
        }
        else
        {
          v18 = *(v11 - 1);
          if (*(_BYTE *)v18 == 2)
          {
            v19 = *(uint64_t **)(v18 + 8);
            v20 = v19[1];
            v21 = v19[2];
            if (v20 >= v21)
            {
              v98 = (uint64_t)(v20 - *v19) >> 4;
              v99 = v98 + 1;
              if ((unint64_t)(v98 + 1) >> 60)
                goto LABEL_358;
              v100 = v21 - *v19;
              if (v100 >> 3 > v99)
                v99 = v100 >> 3;
              if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF0)
                v101 = 0xFFFFFFFFFFFFFFFLL;
              else
                v101 = v99;
              v253 = v19 + 2;
              v102 = (std::exception_vtbl *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v101);
              v103 = (char *)v102 + 16 * v98;
              v250.__vftable = v102;
              v251 = (std::runtime_error_vtbl *)v103;
              v252.__imp_.__imp_ = (char *)v102 + 16 * v104;
              *v103 = 5;
              *((_QWORD *)v103 + 1) = v17;
              v252.__vftable = (std::runtime_error_vtbl *)(v103 + 16);
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(v19, &v250);
              v22 = v19[1];
              std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v250);
            }
            else
            {
              *(_BYTE *)v20 = 5;
              *(_QWORD *)(v20 + 8) = v17;
              v22 = v20 + 16;
              v19[1] = v20 + 16;
            }
            v19[1] = v22;
            goto LABEL_93;
          }
          v79 = *((_QWORD *)&v258 + 1);
          v59 = **((_BYTE **)&v258 + 1);
          **((_BYTE **)&v258 + 1) = 5;
          v247.__r_.__value_.__s.__data_[0] = v59;
          v80 = *(_QWORD *)(v79 + 8);
          *(_QWORD *)(v79 + 8) = v17;
          v247.__r_.__value_.__l.__size_ = v80;
          v61 = (uint64_t **)&v247.__r_.__value_.__l.__size_;
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v61, v59);
LABEL_93:
        v12 = v11;
        v13 = v11;
        goto LABEL_132;
      case 7:
        v35 = *(_QWORD *)(a1 + 168);
        if ((v35 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(&v248, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(&v245, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          v229 = std::string::insert(&v245, 0, "number overflow parsing '");
          v230 = *(_OWORD *)&v229->__r_.__value_.__l.__data_;
          v246.__r_.__value_.__r.__words[2] = v229->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v246.__r_.__value_.__l.__data_ = v230;
          v229->__r_.__value_.__l.__size_ = 0;
          v229->__r_.__value_.__r.__words[2] = 0;
          v229->__r_.__value_.__r.__words[0] = 0;
          v231 = std::string::append(&v246, "'");
          v232 = *(_OWORD *)&v231->__r_.__value_.__l.__data_;
          v247.__r_.__value_.__r.__words[2] = v231->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v247.__r_.__value_.__l.__data_ = v232;
          v231->__r_.__value_.__l.__size_ = 0;
          v231->__r_.__value_.__r.__words[2] = 0;
          v231->__r_.__value_.__r.__words[0] = 0;
          v243 = 0;
          v244 = 0;
          nlohmann::detail::out_of_range::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((nlohmann::detail::exception *)&v250, 406, (uint64_t)&v247);
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::out_of_range>((uint64_t)&v256, (uint64_t)&v250);
          v250.__vftable = (std::exception_vtbl *)&off_1E7BEC5E8;
          std::runtime_error::~runtime_error(&v252);
          std::exception::~exception(&v250);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v244, 0);
          if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v247.__r_.__value_.__l.__data_);
          goto LABEL_330;
        }
        if (v9 == v8)
        {
          v75 = v256;
          v76 = *v256;
          *v256 = 7;
          v248.__r_.__value_.__s.__data_[0] = v76;
          v77 = *((_QWORD *)v75 + 1);
          *((_QWORD *)v75 + 1) = v35;
          v248.__r_.__value_.__l.__size_ = v77;
          v78 = (uint64_t **)&v248.__r_.__value_.__l.__size_;
        }
        else
        {
          v36 = *(v8 - 1);
          if (*(_BYTE *)v36 == 2)
          {
            v37 = *(uint64_t **)(v36 + 8);
            v38 = v37[1];
            v39 = v37[2];
            if (v38 >= v39)
            {
              v123 = (uint64_t)(v38 - *v37) >> 4;
              v124 = v123 + 1;
              if ((unint64_t)(v123 + 1) >> 60)
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              v125 = v39 - *v37;
              if (v125 >> 3 > v124)
                v124 = v125 >> 3;
              if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF0)
                v126 = 0xFFFFFFFFFFFFFFFLL;
              else
                v126 = v124;
              v253 = v37 + 2;
              v127 = (std::exception_vtbl *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v126);
              v128 = (char *)v127 + 16 * v123;
              v250.__vftable = v127;
              v251 = (std::runtime_error_vtbl *)v128;
              v252.__imp_.__imp_ = (char *)v127 + 16 * v129;
              *v128 = 7;
              *((_QWORD *)v128 + 1) = v35;
              v252.__vftable = (std::runtime_error_vtbl *)(v128 + 16);
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(v37, &v250);
              v40 = v37[1];
              std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v250);
            }
            else
            {
              *(_BYTE *)v38 = 7;
              *(_QWORD *)(v38 + 8) = v35;
              v40 = v38 + 16;
              v37[1] = v38 + 16;
            }
            v37[1] = v40;
            goto LABEL_127;
          }
          v88 = *((_QWORD *)&v258 + 1);
          v76 = **((_BYTE **)&v258 + 1);
          **((_BYTE **)&v258 + 1) = 7;
          v247.__r_.__value_.__s.__data_[0] = v76;
          v89 = *(_QWORD *)(v88 + 8);
          *(_QWORD *)(v88 + 8) = v35;
          v247.__r_.__value_.__l.__size_ = v89;
          v78 = (uint64_t **)&v247.__r_.__value_.__l.__size_;
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v78, v76);
LABEL_127:
        v10 = v8;
        v11 = v8;
        v12 = v8;
        v13 = v8;
        goto LABEL_132;
      case 8:
        LOBYTE(v250.__vftable) = 2;
        v15 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(&v256, (unsigned __int8 *)&v250);
        v16 = v15;
        if ((unint64_t)v8 >= (unint64_t)v258)
        {
          v47 = v8 - v9;
          v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 61)
            goto LABEL_357;
          v49 = v258 - (_QWORD)v9;
          if ((uint64_t)(v258 - (_QWORD)v9) >> 2 > v48)
            v48 = v49 >> 2;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
            v50 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v50 = v48;
          if (v50)
            v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v50);
          else
            v51 = 0;
          v9 = (uint64_t *)(v50 + 8 * v47);
          *v9 = v16;
          v7 = v9 + 1;
          v90 = (uint64_t *)v257;
          if (v8 != (uint64_t *)v257)
          {
            do
            {
              v91 = *--v8;
              *--v9 = v91;
            }
            while (v8 != v90);
            v8 = (uint64_t *)v257;
          }
          *(_QWORD *)&v257 = v9;
          *((_QWORD *)&v257 + 1) = v7;
          *(_QWORD *)&v258 = v50 + 8 * v51;
          if (v8)
            operator delete(v8);
        }
        else
        {
          *v8 = v15;
          v7 = v8 + 1;
        }
        *((_QWORD *)&v257 + 1) = v7;
        v92 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v237);
        *(_DWORD *)(a1 + 32) = v92;
        if (v92 != 10)
        {
          LOBYTE(v250.__vftable) = 1;
          std::vector<BOOL>::push_back((uint64_t *)&__p, &v250);
          v8 = v7;
          goto LABEL_147;
        }
        goto LABEL_81;
      case 9:
        LOBYTE(v250.__vftable) = 1;
        v28 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(&v256, (unsigned __int8 *)&v250);
        v29 = v28;
        if ((unint64_t)v8 >= (unint64_t)v258)
        {
          v52 = (uint64_t *)v257;
          v53 = (uint64_t)((uint64_t)v8 - v257) >> 3;
          v54 = v53 + 1;
          if ((unint64_t)(v53 + 1) >> 61)
LABEL_357:
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v55 = v258 - v257;
          if ((uint64_t)(v258 - v257) >> 2 > v54)
            v54 = v55 >> 2;
          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
            v56 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v56 = v54;
          if (v56)
            v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v56);
          else
            v57 = 0;
          v9 = (uint64_t *)(v56 + 8 * v53);
          *v9 = v29;
          v7 = v9 + 1;
          if (v8 != v52)
          {
            do
            {
              v93 = *--v8;
              *--v9 = v93;
            }
            while (v8 != v52);
            v8 = (uint64_t *)v257;
          }
          *(_QWORD *)&v257 = v9;
          *((_QWORD *)&v257 + 1) = v7;
          *(_QWORD *)&v258 = v56 + 8 * v57;
          if (v8)
            operator delete(v8);
        }
        else
        {
          *v8 = v28;
          v7 = v8 + 1;
        }
        *((_QWORD *)&v257 + 1) = v7;
        v94 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v237);
        *(_DWORD *)(a1 + 32) = v94;
        if (v94 != 11)
        {
          if (v94 == 4)
          {
            v95 = *(uint64_t ***)(*(v7 - 1) + 8);
            v250.__vftable = v236;
            *((_QWORD *)&v258 + 1) = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v95, v236, (__int128 **)&v250)+ 56;
            v96 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v237);
            *(_DWORD *)(a1 + 32) = v96;
            if (v96 == 12)
            {
              LOBYTE(v250.__vftable) = 0;
              std::vector<BOOL>::push_back((uint64_t *)&__p, &v250);
              v97 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v237);
              goto LABEL_146;
            }
LABEL_342:
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(&v248, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
            v247 = *(std::string *)(a1 + 72);
            std::string::basic_string[abi:ne180100]<0>(&v245, "object separator");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(&v246, a1, 0xCu, (uint64_t)&v245);
            v243 = 0;
            v244 = 0;
            nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((nlohmann::detail::exception *)&v250, (uint64_t *)&v247, (uint64_t)&v246);
            nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)&v256, (uint64_t)&v250);
          }
          else
          {
LABEL_341:
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(&v248, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
            v247 = *(std::string *)(a1 + 72);
            std::string::basic_string[abi:ne180100]<0>(&v245, "object key");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(&v246, a1, 4u, (uint64_t)&v245);
            v243 = 0;
            v244 = 0;
            nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((nlohmann::detail::exception *)&v250, (uint64_t *)&v247, (uint64_t)&v246);
            nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)&v256, (uint64_t)&v250);
          }
LABEL_329:
          v250.__vftable = (std::exception_vtbl *)&off_1E7BEC5E8;
          std::runtime_error::~runtime_error(&v252);
          std::exception::~exception(&v250);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v244, 0);
LABEL_330:
          if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v246.__r_.__value_.__l.__data_);
          if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v245.__r_.__value_.__l.__data_);
          if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v248.__r_.__value_.__l.__data_);
          goto LABEL_148;
        }
LABEL_81:
        v8 = --v7;
        *((_QWORD *)&v257 + 1) = v7;
        v10 = v7;
        v11 = v7;
        v12 = v7;
        v13 = v7;
        goto LABEL_132;
      case 0xE:
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(&v248, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
        v247 = *(std::string *)(a1 + 72);
        std::string::basic_string[abi:ne180100]<0>(&v245, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(&v246, a1, 0, (uint64_t)&v245);
        v243 = 0;
        v244 = 0;
        nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((nlohmann::detail::exception *)&v250, (uint64_t *)&v247, (uint64_t)&v246);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)&v256, (uint64_t)&v250);
        goto LABEL_329;
      default:
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(&v248, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
        v247 = *(std::string *)(a1 + 72);
        std::string::basic_string[abi:ne180100]<0>(&v245, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(&v246, a1, 0x10u, (uint64_t)&v245);
        v243 = 0;
        v244 = 0;
        nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((nlohmann::detail::exception *)&v250, (uint64_t *)&v247, (uint64_t)&v246);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)&v256, (uint64_t)&v250);
        goto LABEL_329;
    }
  }
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v254, a1);
  v5 = *(_BYTE *)(a1 + 184);
  v256 = a3;
  v257 = 0u;
  v258 = 0u;
  v259 = 0u;
  v260 = 0u;
  v261 = 0u;
  v262 = 0;
  v6 = (uint64_t)v255;
  if (!v255)
  {
LABEL_5:
    v264 = (_BYTE *)v6;
    goto LABEL_163;
  }
  if (v255 != v254)
  {
    v6 = (*(uint64_t (**)(void))(*v255 + 16))();
    goto LABEL_5;
  }
  v264 = v263;
  (*(void (**)(_QWORD *, _BYTE *))(v254[0] + 24))(v254, v263);
LABEL_163:
  v265 = v5;
  v266 = 9;
  v267 = 0;
  LOBYTE(v250.__vftable) = 1;
  std::vector<BOOL>::push_back((uint64_t *)&v258 + 1, &v250);
  v141 = v255;
  if (v255 == v254)
  {
    v142 = 4;
    v141 = v254;
    goto LABEL_167;
  }
  if (v255)
  {
    v142 = 5;
LABEL_167:
    (*(void (**)(void))(*v141 + 8 * v142))();
  }
  memset(&__p, 0, sizeof(__p));
  while (2)
  {
    v143 = 0;
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        v143 = 1;
        goto LABEL_171;
      case 2:
LABEL_171:
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(&v256, v143);
        goto LABEL_286;
      case 3:
        if (((*(_QWORD *)(*((_QWORD *)&v258 + 1) + (((unint64_t)(v259 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v259 - 1)) & 1) == 0)
          goto LABEL_286;
        v248.__r_.__value_.__s.__data_[0] = 0;
        v248.__r_.__value_.__l.__size_ = 0;
        LODWORD(v250.__vftable) = (*((_QWORD *)&v257 + 1) - (_QWORD)v257) >> 3;
        v245.__r_.__value_.__s.__data_[0] = 5;
        if (!v264)
          std::__throw_bad_function_call[abi:ne180100]();
        if (((*(uint64_t (**)(_BYTE *, std::exception *, std::string *, std::string *))(*(_QWORD *)v264 + 48))(v264, &v250, &v245, &v248) & 1) == 0)goto LABEL_285;
        if ((_QWORD)v257 == *((_QWORD *)&v257 + 1))
          goto LABEL_237;
        v158 = *(_QWORD *)(*((_QWORD *)&v257 + 1) - 8);
        if (!v158)
          goto LABEL_285;
        if (*(_BYTE *)v158 != 2)
          goto LABEL_254;
        v150 = *(uint64_t **)(v158 + 8);
        v151 = v150[1];
        v152 = v150 + 2;
        v159 = v150[2];
        if (v151 < v159)
          goto LABEL_236;
        v154 = (uint64_t)(v151 - *v150) >> 4;
        v160 = v154 + 1;
        if ((unint64_t)(v154 + 1) >> 60)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v161 = v159 - *v150;
        if (v161 >> 3 > v160)
          v160 = v161 >> 3;
        if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFF0)
          v157 = 0xFFFFFFFFFFFFFFFLL;
        else
          v157 = v160;
        goto LABEL_283;
      case 4:
        if (((*(_QWORD *)(*((_QWORD *)&v258 + 1) + (((unint64_t)(v259 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v259 - 1)) & 1) == 0)
          goto LABEL_286;
        v248.__r_.__value_.__s.__data_[0] = 3;
        v248.__r_.__value_.__l.__size_ = (std::string::size_type)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(a1 + 120);
        LODWORD(v250.__vftable) = (*((_QWORD *)&v257 + 1) - (_QWORD)v257) >> 3;
        v245.__r_.__value_.__s.__data_[0] = 5;
        if (!v264)
          std::__throw_bad_function_call[abi:ne180100]();
        if (((*(uint64_t (**)(_BYTE *, std::exception *, std::string *, std::string *))(*(_QWORD *)v264 + 48))(v264, &v250, &v245, &v248) & 1) == 0)goto LABEL_285;
        if ((_QWORD)v257 == *((_QWORD *)&v257 + 1))
          goto LABEL_237;
        v166 = *(_QWORD *)(*((_QWORD *)&v257 + 1) - 8);
        if (!v166)
          goto LABEL_285;
        if (*(_BYTE *)v166 != 2)
          goto LABEL_254;
        v150 = *(uint64_t **)(v166 + 8);
        v151 = v150[1];
        v152 = v150 + 2;
        v167 = v150[2];
        if (v151 < v167)
          goto LABEL_236;
        v154 = (uint64_t)(v151 - *v150) >> 4;
        v168 = v154 + 1;
        if ((unint64_t)(v154 + 1) >> 60)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v169 = v167 - *v150;
        if (v169 >> 3 > v168)
          v168 = v169 >> 3;
        if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFF0)
          v157 = 0xFFFFFFFFFFFFFFFLL;
        else
          v157 = v168;
        goto LABEL_283;
      case 5:
        if (((*(_QWORD *)(*((_QWORD *)&v258 + 1) + (((unint64_t)(v259 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v259 - 1)) & 1) == 0)
          goto LABEL_286;
        v175 = *(_QWORD *)(a1 + 160);
        v248.__r_.__value_.__s.__data_[0] = 6;
        v248.__r_.__value_.__l.__size_ = v175;
        LODWORD(v250.__vftable) = (*((_QWORD *)&v257 + 1) - (_QWORD)v257) >> 3;
        v245.__r_.__value_.__s.__data_[0] = 5;
        if (!v264)
          std::__throw_bad_function_call[abi:ne180100]();
        if (((*(uint64_t (**)(_BYTE *, std::exception *, std::string *, std::string *))(*(_QWORD *)v264 + 48))(v264, &v250, &v245, &v248) & 1) == 0)goto LABEL_285;
        if ((_QWORD)v257 == *((_QWORD *)&v257 + 1))
          goto LABEL_237;
        v176 = *(_QWORD *)(*((_QWORD *)&v257 + 1) - 8);
        if (!v176)
          goto LABEL_285;
        if (*(_BYTE *)v176 != 2)
          goto LABEL_254;
        v150 = *(uint64_t **)(v176 + 8);
        v151 = v150[1];
        v152 = v150 + 2;
        v177 = v150[2];
        if (v151 < v177)
          goto LABEL_236;
        v154 = (uint64_t)(v151 - *v150) >> 4;
        v210 = v154 + 1;
        if ((unint64_t)(v154 + 1) >> 60)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v211 = v177 - *v150;
        if (v211 >> 3 > v210)
          v210 = v211 >> 3;
        if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFF0)
          v157 = 0xFFFFFFFFFFFFFFFLL;
        else
          v157 = v210;
        goto LABEL_283;
      case 6:
        if (((*(_QWORD *)(*((_QWORD *)&v258 + 1) + (((unint64_t)(v259 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v259 - 1)) & 1) == 0)
          goto LABEL_286;
        v148 = *(_QWORD *)(a1 + 152);
        v248.__r_.__value_.__s.__data_[0] = 5;
        v248.__r_.__value_.__l.__size_ = v148;
        LODWORD(v250.__vftable) = (*((_QWORD *)&v257 + 1) - (_QWORD)v257) >> 3;
        v245.__r_.__value_.__s.__data_[0] = 5;
        if (!v264)
          std::__throw_bad_function_call[abi:ne180100]();
        if (((*(uint64_t (**)(_BYTE *, std::exception *, std::string *, std::string *))(*(_QWORD *)v264 + 48))(v264, &v250, &v245, &v248) & 1) == 0)goto LABEL_285;
        if ((_QWORD)v257 == *((_QWORD *)&v257 + 1))
          goto LABEL_237;
        v149 = *(_QWORD *)(*((_QWORD *)&v257 + 1) - 8);
        if (!v149)
          goto LABEL_285;
        if (*(_BYTE *)v149 != 2)
          goto LABEL_254;
        v150 = *(uint64_t **)(v149 + 8);
        v151 = v150[1];
        v152 = v150 + 2;
        v153 = v150[2];
        if (v151 < v153)
          goto LABEL_236;
        v154 = (uint64_t)(v151 - *v150) >> 4;
        v155 = v154 + 1;
        if ((unint64_t)(v154 + 1) >> 60)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v156 = v153 - *v150;
        if (v156 >> 3 > v155)
          v155 = v156 >> 3;
        if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFF0)
          v157 = 0xFFFFFFFFFFFFFFFLL;
        else
          v157 = v155;
        goto LABEL_283;
      case 7:
        v170 = *(_QWORD *)(a1 + 168);
        if ((v170 & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000)
        {
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(&v248, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(&v245, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          v225 = std::string::insert(&v245, 0, "number overflow parsing '");
          v226 = *(_OWORD *)&v225->__r_.__value_.__l.__data_;
          v246.__r_.__value_.__r.__words[2] = v225->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v246.__r_.__value_.__l.__data_ = v226;
          v225->__r_.__value_.__l.__size_ = 0;
          v225->__r_.__value_.__r.__words[2] = 0;
          v225->__r_.__value_.__r.__words[0] = 0;
          v227 = std::string::append(&v246, "'");
          v228 = *(_OWORD *)&v227->__r_.__value_.__l.__data_;
          v247.__r_.__value_.__r.__words[2] = v227->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v247.__r_.__value_.__l.__data_ = v228;
          v227->__r_.__value_.__l.__size_ = 0;
          v227->__r_.__value_.__r.__words[2] = 0;
          v227->__r_.__value_.__r.__words[0] = 0;
          v243 = 0;
          v244 = 0;
          nlohmann::detail::out_of_range::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((nlohmann::detail::exception *)&v250, 406, (uint64_t)&v247);
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::out_of_range>((uint64_t)&v256, (uint64_t)&v250);
          v250.__vftable = (std::exception_vtbl *)&off_1E7BEC5E8;
          std::runtime_error::~runtime_error(&v252);
          std::exception::~exception(&v250);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v244, 0);
          if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v247.__r_.__value_.__l.__data_);
          goto LABEL_304;
        }
        if (((*(_QWORD *)(*((_QWORD *)&v258 + 1) + (((unint64_t)(v259 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v259 - 1)) & 1) == 0)
          goto LABEL_286;
        v248.__r_.__value_.__s.__data_[0] = 7;
        v248.__r_.__value_.__l.__size_ = v170;
        LODWORD(v250.__vftable) = (*((_QWORD *)&v257 + 1) - (_QWORD)v257) >> 3;
        v245.__r_.__value_.__s.__data_[0] = 5;
        if (!v264)
          std::__throw_bad_function_call[abi:ne180100]();
        if (((*(uint64_t (**)(_BYTE *, std::exception *, std::string *, std::string *))(*(_QWORD *)v264 + 48))(v264, &v250, &v245, &v248) & 1) == 0)goto LABEL_285;
        if ((_QWORD)v257 == *((_QWORD *)&v257 + 1))
        {
LABEL_237:
          v179 = v248.__r_.__value_.__s.__data_[0];
          v180 = v248.__r_.__value_.__l.__size_;
          v248.__r_.__value_.__s.__data_[0] = 0;
          v248.__r_.__value_.__l.__size_ = 0;
          v181 = v256;
          v182 = *v256;
          *v256 = v179;
          v247.__r_.__value_.__s.__data_[0] = v182;
          v183 = *((_QWORD *)v181 + 1);
          *((_QWORD *)v181 + 1) = v180;
          v247.__r_.__value_.__l.__size_ = v183;
          v184 = (uint64_t **)&v247.__r_.__value_.__l.__size_;
LABEL_256:
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v184, v182);
          goto LABEL_285;
        }
        v171 = *(_QWORD *)(*((_QWORD *)&v257 + 1) - 8);
        if (!v171)
          goto LABEL_285;
        if (*(_BYTE *)v171 != 2)
        {
LABEL_254:
          v193 = *(_QWORD *)(v260 + (((unint64_t)--*((_QWORD *)&v260 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8));
          if (((v193 >> SBYTE8(v260)) & 1) == 0)
            goto LABEL_285;
          v194 = v248.__r_.__value_.__s.__data_[0];
          v195 = v248.__r_.__value_.__l.__size_;
          v248.__r_.__value_.__s.__data_[0] = 0;
          v248.__r_.__value_.__l.__size_ = 0;
          v196 = *((_QWORD *)&v261 + 1);
          v182 = **((_BYTE **)&v261 + 1);
          **((_BYTE **)&v261 + 1) = v194;
          v246.__r_.__value_.__s.__data_[0] = v182;
          v197 = *(_QWORD *)(v196 + 8);
          *(_QWORD *)(v196 + 8) = v195;
          v246.__r_.__value_.__l.__size_ = v197;
          v184 = (uint64_t **)&v246.__r_.__value_.__l.__size_;
          goto LABEL_256;
        }
        v150 = *(uint64_t **)(v171 + 8);
        v151 = v150[1];
        v152 = v150 + 2;
        v172 = v150[2];
        if (v151 < v172)
        {
LABEL_236:
          *(_BYTE *)v151 = v248.__r_.__value_.__s.__data_[0];
          *(_QWORD *)(v151 + 8) = v248.__r_.__value_.__l.__size_;
          v248.__r_.__value_.__s.__data_[0] = 0;
          v248.__r_.__value_.__l.__size_ = 0;
          v178 = v151 + 16;
          v150[1] = v151 + 16;
        }
        else
        {
          v154 = (uint64_t)(v151 - *v150) >> 4;
          v173 = v154 + 1;
          if ((unint64_t)(v154 + 1) >> 60)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v174 = v172 - *v150;
          if (v174 >> 3 > v173)
            v173 = v174 >> 3;
          if ((unint64_t)v174 >= 0x7FFFFFFFFFFFFFF0)
            v157 = 0xFFFFFFFFFFFFFFFLL;
          else
            v157 = v173;
LABEL_283:
          v253 = v152;
          v212 = (std::exception_vtbl *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v157);
          v213 = (char *)v212 + 16 * v154;
          v250.__vftable = v212;
          v251 = (std::runtime_error_vtbl *)v213;
          v252.__imp_.__imp_ = (char *)v212 + 16 * v214;
          *v213 = v248.__r_.__value_.__s.__data_[0];
          *((_QWORD *)v213 + 1) = v248.__r_.__value_.__l.__size_;
          v248.__r_.__value_.__s.__data_[0] = 0;
          v248.__r_.__value_.__l.__size_ = 0;
          v252.__vftable = (std::runtime_error_vtbl *)(v213 + 16);
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(v150, &v250);
          v178 = v150[1];
          std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v250);
        }
        v150[1] = v178;
LABEL_285:
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v248.__r_.__value_.__l.__size_, v248.__r_.__value_.__s.__data_[0]);
        goto LABEL_286;
      case 8:
        LOBYTE(v250.__vftable) = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)v264, (*((_QWORD *)&v257 + 1) - (_QWORD)v257) >> 3, 2);
        std::vector<BOOL>::push_back((uint64_t *)&v258 + 1, &v250);
        v144 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t *)&v256, 2u);
        v145 = v144;
        v146 = *((_QWORD *)&v257 + 1);
        if (*((_QWORD *)&v257 + 1) >= (unint64_t)v258)
        {
          v185 = (uint64_t)(*((_QWORD *)&v257 + 1) - v257) >> 3;
          if ((unint64_t)(v185 + 1) >> 61)
            goto LABEL_351;
          v186 = (uint64_t)(v258 - v257) >> 2;
          if (v186 <= v185 + 1)
            v186 = v185 + 1;
          if ((_QWORD)v258 - (_QWORD)v257 >= 0x7FFFFFFFFFFFFFF8uLL)
            v187 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v187 = v186;
          if (v187)
            v187 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v187);
          else
            v188 = 0;
          v198 = (uint64_t *)(v187 + 8 * v185);
          *v198 = v145;
          v147 = v198 + 1;
          v199 = (char *)*((_QWORD *)&v257 + 1);
          v200 = (char *)v257;
          if (*((_QWORD *)&v257 + 1) != (_QWORD)v257)
          {
            do
            {
              v201 = *((_QWORD *)v199 - 1);
              v199 -= 8;
              *--v198 = v201;
            }
            while (v199 != v200);
            v199 = (char *)v257;
          }
          *(_QWORD *)&v257 = v198;
          *((_QWORD *)&v257 + 1) = v147;
          *(_QWORD *)&v258 = v187 + 8 * v188;
          if (v199)
            operator delete(v199);
        }
        else
        {
          **((_QWORD **)&v257 + 1) = v144;
          v147 = (_QWORD *)(v146 + 8);
        }
        *((_QWORD *)&v257 + 1) = v147;
        v202 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(a1 + 40);
        *(_DWORD *)(a1 + 32) = v202;
        if (v202 == 10)
        {
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array((uint64_t)&v256);
          goto LABEL_286;
        }
        LOBYTE(v250.__vftable) = 1;
        std::vector<BOOL>::push_back((uint64_t *)&__p, &v250);
        continue;
      case 9:
        LOBYTE(v250.__vftable) = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)v264, (*((_QWORD *)&v257 + 1) - (_QWORD)v257) >> 3, 0);
        std::vector<BOOL>::push_back((uint64_t *)&v258 + 1, &v250);
        v162 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t *)&v256, 1u);
        v163 = v162;
        v164 = *((_QWORD *)&v257 + 1);
        if (*((_QWORD *)&v257 + 1) >= (unint64_t)v258)
        {
          v189 = (uint64_t)(*((_QWORD *)&v257 + 1) - v257) >> 3;
          if ((unint64_t)(v189 + 1) >> 61)
LABEL_351:
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v190 = (uint64_t)(v258 - v257) >> 2;
          if (v190 <= v189 + 1)
            v190 = v189 + 1;
          if ((_QWORD)v258 - (_QWORD)v257 >= 0x7FFFFFFFFFFFFFF8uLL)
            v191 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v191 = v190;
          if (v191)
            v191 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v191);
          else
            v192 = 0;
          v203 = (uint64_t *)(v191 + 8 * v189);
          *v203 = v163;
          v165 = v203 + 1;
          v204 = (char *)*((_QWORD *)&v257 + 1);
          v205 = (char *)v257;
          if (*((_QWORD *)&v257 + 1) != (_QWORD)v257)
          {
            do
            {
              v206 = *((_QWORD *)v204 - 1);
              v204 -= 8;
              *--v203 = v206;
            }
            while (v204 != v205);
            v204 = (char *)v257;
          }
          *(_QWORD *)&v257 = v203;
          *((_QWORD *)&v257 + 1) = v165;
          *(_QWORD *)&v258 = v191 + 8 * v192;
          if (v204)
            operator delete(v204);
        }
        else
        {
          **((_QWORD **)&v257 + 1) = v162;
          v165 = (_QWORD *)(v164 + 8);
        }
        *((_QWORD *)&v257 + 1) = v165;
        v207 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(a1 + 40);
        *(_DWORD *)(a1 + 32) = v207;
        if (v207 == 11)
        {
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object((uint64_t)&v256);
LABEL_286:
          v215 = __p.__r_.__value_.__l.__size_;
          if (!__p.__r_.__value_.__l.__size_)
            goto LABEL_310;
          while (1)
          {
            if (((*(_QWORD *)(__p.__r_.__value_.__r.__words[0] + (((v215 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v215 - 1)) & 1) != 0)
            {
              v216 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(a1 + 40);
              *(_DWORD *)(a1 + 32) = v216;
              if (v216 == 13)
                goto LABEL_299;
              if (v216 != 10)
              {
                nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(&v248, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                v247 = *(std::string *)(a1 + 72);
                std::string::basic_string[abi:ne180100]<0>(&v245, "array");
                nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(&v246, a1, 0xAu, (uint64_t)&v245);
                v243 = 0;
                v244 = 0;
                nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((nlohmann::detail::exception *)&v250, (uint64_t *)&v247, (uint64_t)&v246);
                nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)&v256, (uint64_t)&v250);
                goto LABEL_303;
              }
              nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array((uint64_t)&v256);
              goto LABEL_294;
            }
            v217 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(a1 + 40);
            *(_DWORD *)(a1 + 32) = v217;
            if (v217 == 13)
              break;
            if (v217 != 11)
            {
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(&v248, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
              v247 = *(std::string *)(a1 + 72);
              std::string::basic_string[abi:ne180100]<0>(&v245, "object");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(&v246, a1, 0xBu, (uint64_t)&v245);
              v243 = 0;
              v244 = 0;
              nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((nlohmann::detail::exception *)&v250, (uint64_t *)&v247, (uint64_t)&v246);
              nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)&v256, (uint64_t)&v250);
              goto LABEL_303;
            }
            nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object((uint64_t)&v256);
LABEL_294:
            v215 = --__p.__r_.__value_.__l.__size_;
            if (!__p.__r_.__value_.__l.__size_)
              goto LABEL_310;
          }
          v218 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(a1 + 40);
          *(_DWORD *)(a1 + 32) = v218;
          if (v218 != 4)
            goto LABEL_338;
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key((uint64_t)&v256, (__int128 *)(a1 + 120));
          v219 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(a1 + 40);
          *(_DWORD *)(a1 + 32) = v219;
          if (v219 != 12)
            goto LABEL_339;
LABEL_299:
          v209 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(a1 + 40);
LABEL_300:
          *(_DWORD *)(a1 + 32) = v209;
          continue;
        }
        if (v207 == 4)
        {
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key((uint64_t)&v256, (__int128 *)(a1 + 120));
          v208 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(a1 + 40);
          *(_DWORD *)(a1 + 32) = v208;
          if (v208 == 12)
          {
            LOBYTE(v250.__vftable) = 0;
            std::vector<BOOL>::push_back((uint64_t *)&__p, &v250);
            v209 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(a1 + 40);
            goto LABEL_300;
          }
LABEL_339:
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(&v248, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          v247 = *(std::string *)(a1 + 72);
          std::string::basic_string[abi:ne180100]<0>(&v245, "object separator");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(&v246, a1, 0xCu, (uint64_t)&v245);
          v243 = 0;
          v244 = 0;
          nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((nlohmann::detail::exception *)&v250, (uint64_t *)&v247, (uint64_t)&v246);
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)&v256, (uint64_t)&v250);
        }
        else
        {
LABEL_338:
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(&v248, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          v247 = *(std::string *)(a1 + 72);
          std::string::basic_string[abi:ne180100]<0>(&v245, "object key");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(&v246, a1, 4u, (uint64_t)&v245);
          v243 = 0;
          v244 = 0;
          nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((nlohmann::detail::exception *)&v250, (uint64_t *)&v247, (uint64_t)&v246);
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)&v256, (uint64_t)&v250);
        }
LABEL_303:
        v250.__vftable = (std::exception_vtbl *)&off_1E7BEC5E8;
        std::runtime_error::~runtime_error(&v252);
        std::exception::~exception(&v250);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v244, 0);
LABEL_304:
        if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v246.__r_.__value_.__l.__data_);
        if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v245.__r_.__value_.__l.__data_);
        if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v248.__r_.__value_.__l.__data_);
LABEL_310:
        if (__p.__r_.__value_.__r.__words[0])
          operator delete(__p.__r_.__value_.__l.__data_);
        if (a2)
        {
          v220 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(a1 + 40);
          *(_DWORD *)(a1 + 32) = v220;
          if (v220 != 15)
          {
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(&__p, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
            v248 = *(std::string *)(a1 + 72);
            std::string::basic_string[abi:ne180100]<0>(&v246, "value");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(&v247, a1, 0xFu, (uint64_t)&v246);
            v245.__r_.__value_.__s.__data_[0] = 0;
            v245.__r_.__value_.__l.__size_ = 0;
            nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((nlohmann::detail::exception *)&v250, (uint64_t *)&v248, (uint64_t)&v247);
            nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)&v256, (uint64_t)&v250);
            v250.__vftable = (std::exception_vtbl *)&off_1E7BEC5E8;
            std::runtime_error::~runtime_error(&v252);
            std::exception::~exception(&v250);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v245.__r_.__value_.__l.__size_, 0);
            if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v247.__r_.__value_.__l.__data_);
            if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v246.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        if (v262)
        {
          v221 = (uint64_t **)&v242;
          v222 = *a3;
          *a3 = 9;
          v241 = v222;
          v223 = *((_QWORD *)a3 + 1);
          *((_QWORD *)a3 + 1) = 0;
          v242 = v223;
          goto LABEL_324;
        }
        if (*a3 == 9)
        {
          v221 = (uint64_t **)&v240;
          *a3 = 0;
          v239 = 9;
          v224 = *((_QWORD *)a3 + 1);
          *((_QWORD *)a3 + 1) = 0;
          v240 = v224;
          v222 = 9;
LABEL_324:
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v221, v222);
        }
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser((uint64_t)&v256);
        return;
      case 0xE:
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(&v248, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
        v247 = *(std::string *)(a1 + 72);
        std::string::basic_string[abi:ne180100]<0>(&v245, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(&v246, a1, 0, (uint64_t)&v245);
        v243 = 0;
        v244 = 0;
        nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((nlohmann::detail::exception *)&v250, (uint64_t *)&v247, (uint64_t)&v246);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)&v256, (uint64_t)&v250);
        goto LABEL_303;
      default:
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(&v248, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
        v247 = *(std::string *)(a1 + 72);
        std::string::basic_string[abi:ne180100]<0>(&v245, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(&v246, a1, 0x10u, (uint64_t)&v245);
        v243 = 0;
        v244 = 0;
        nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((nlohmann::detail::exception *)&v250, (uint64_t *)&v247, (uint64_t)&v246);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)&v256, (uint64_t)&v250);
        goto LABEL_303;
    }
  }
}

void sub_1C21B7304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,std::exception a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  uint64_t **v61;
  std::runtime_error *v62;

  a51.__vftable = (std::exception_vtbl *)&off_1E7BEC5E8;
  std::runtime_error::~runtime_error(v62 + 1);
  std::exception::~exception(&a51);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v61, 0);
  if (a35 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (a46 < 0)
    operator delete(a41);
  if (a48)
    operator delete(a48);
  if (a61)
    operator delete(a61);
  _Unwind_Resume(a1);
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(void **this)
{
  void *v2;

  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  v2 = this[7];
  if (v2)
  {
    this[8] = v2;
    operator delete(v2);
  }
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)this);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::input_stream_adapter>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  lconv *v8;
  int v9;
  _QWORD *result;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v5 = a3 + 3;
  v6 = (_QWORD *)a3[3];
  if (!v6)
  {
    v5 = v13;
    goto LABEL_5;
  }
  if (v6 != a3)
  {
    v13[0] = a3[3];
LABEL_5:
    *v5 = 0;
    goto LABEL_7;
  }
  v13[0] = v12;
  (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v12);
LABEL_7:
  v7 = v13[0];
  if (!v13[0])
  {
LABEL_10:
    *(_QWORD *)(a1 + 24) = v7;
    goto LABEL_12;
  }
  if ((_QWORD *)v13[0] != v12)
  {
    v7 = (*(uint64_t (**)(void))(*(_QWORD *)v13[0] + 16))();
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 24) = a1;
  (*(void (**)(_QWORD *, uint64_t))(v12[0] + 24))(v12, a1);
LABEL_12:
  *(_OWORD *)(a1 + 40) = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = -1;
  *(_BYTE *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = "";
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v8 = localeconv();
  if (v8->decimal_point)
    v9 = *v8->decimal_point;
  else
    v9 = 46;
  *(_DWORD *)(a1 + 176) = v9;
  *(_BYTE *)(a1 + 184) = 1;
  *(_DWORD *)(a1 + 32) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(a1 + 40);
  result = (_QWORD *)v13[0];
  if ((_QWORD *)v13[0] == v12)
  {
    v11 = 4;
    result = v12;
  }
  else
  {
    if (!v13[0])
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_1C21B7A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

nlv4_inference_orchestrator::inference_engine::BertModule *nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::BertReshapableE5MLModule(nlv4_inference_orchestrator::inference_engine::BertModule *a1, char *a2, uint64_t a3)
{
  nlv4_inference_orchestrator::inference_engine::BertModule *v4;

  v4 = nlv4_inference_orchestrator::inference_engine::BertE5MLModule::BertE5MLModule(a1, a2, a3);
  *(_QWORD *)v4 = &off_1E7BE9928;
  nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::readPositionEmbeddings((uint64_t)v4, (_QWORD *)v4 + 113);
  *((_QWORD *)a1 + 119) = 2;
  return a1;
}

void sub_1C21B7AE0(_Unwind_Exception *a1)
{
  void **v1;

  nlv4_inference_orchestrator::inference_engine::BertE5MLModule::~BertE5MLModule(v1);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::readPositionEmbeddings@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  std::string::size_type size;
  std::string::size_type v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  int v14;
  _QWORD *v15;
  NSObject *v17;
  std::runtime_error *exception;
  std::runtime_error *v20;
  __int128 v21;
  std::string __p;
  std::string buf;
  _QWORD v24[2];
  _BYTE v25[408];
  _QWORD v26[20];

  v26[19] = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v24);
  if (*(_DWORD *)&v25[*(_QWORD *)(v24[0] - 24) + 16])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Error reading position embeddings file!");
    std::runtime_error::runtime_error(exception, &__p);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  *(_QWORD *)&v21 = v24;
  v4 = (_QWORD *)MEMORY[0x1C3BB9778](v24, (char *)&v21 + 8);
  if ((*((_BYTE *)v4 + *(_QWORD *)(*v4 - 24) + 32) & 5) != 0)
  {
    memset(&__p, 0, sizeof(__p));
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v21;
    if (v24)
    {
      do
      {
        size = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
        {
          v7 = (void *)__p.__r_.__value_.__r.__words[0];
          v8 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
          v9 = v8 + 1;
          if ((unint64_t)(v8 + 1) >> 62)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v10 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v9)
            v9 = v10 >> 1;
          if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
            v11 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v11 = v9;
          if (v11)
          {
            v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v11);
            size = __p.__r_.__value_.__l.__size_;
            v7 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            v12 = 0;
          }
          v13 = &v12[4 * v8];
          *(_DWORD *)v13 = buf.__r_.__value_.__r.__words[1];
          v6 = (std::string::size_type)(v13 + 4);
          while ((void *)size != v7)
          {
            v14 = *(_DWORD *)(size - 4);
            size -= 4;
            *((_DWORD *)v13 - 1) = v14;
            v13 -= 4;
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
          __p.__r_.__value_.__l.__size_ = v6;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v12[4 * v11];
          if (v7)
            operator delete(v7);
        }
        else
        {
          *(_DWORD *)__p.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[1];
          v6 = size + 4;
        }
        __p.__r_.__value_.__l.__size_ = v6;
        v15 = (_QWORD *)MEMORY[0x1C3BB9778](buf.__r_.__value_.__r.__words[0], &buf.__r_.__value_.__r.__words[1]);
      }
      while ((*((_BYTE *)v15 + *(_QWORD *)(*v15 - 24) + 32) & 5) == 0 && buf.__r_.__value_.__r.__words[0] != 0);
    }
  }
  if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
  {
    v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&buf, "Error reading OWL position embeddings!");
    std::runtime_error::runtime_error(v20, &buf);
    v20->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  v17 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (uint64_t)(__p.__r_.__value_.__l.__size_
                                                                                     - __p.__r_.__value_.__r.__words[0]) >> 2;
    _os_log_impl(&dword_1C2196000, v17, OS_LOG_TYPE_DEFAULT, "Position Embeddings size = %lu", (uint8_t *)&buf, 0xCu);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, *(const void **)(a1 + 136), *(_QWORD *)(a1 + 144), (uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 3);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v24[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v24 + *(_QWORD *)(v24[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1C3BB970C](v25);
  std::istream::~istream();
  return MEMORY[0x1C3BB9A90](v26);
}

void sub_1C21B7E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  void *v24;
  int v25;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (a12)
        operator delete(a12);
      std::ifstream::~ifstream(&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void nlv4_inference_orchestrator::inference_engine::BertModule::getTensorOutputs(nlv4_inference_orchestrator::inference_engine::BertModule *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *__p[2];
  uint64_t v8;
  void *v9[2];
  uint64_t v10;

  *(_BYTE *)(a2 + 96) = 0;
  *(_BYTE *)(a2 + 104) = 0;
  v4 = a2 + 104;
  *(_BYTE *)(a2 + 152) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_BYTE *)(a2 + 48) = 0;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 96))(__p);
  v5 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v5;
    operator delete(v5);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 16) = v8;
  __p[1] = 0;
  v8 = 0;
  __p[0] = 0;
  v6 = *(void **)(a2 + 24);
  if (v6)
  {
    *(_QWORD *)(a2 + 32) = v6;
    operator delete(v6);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    v6 = __p[0];
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)v9;
  *(_QWORD *)(a2 + 40) = v10;
  v9[1] = 0;
  v10 = 0;
  v9[0] = 0;
  if (v6)
  {
    __p[1] = v6;
    operator delete(v6);
  }
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::reset[abi:ne180100](a2 + 48);
  if (*((_BYTE *)this + 424))
  {
    (*(void (**)(void **__return_ptr, nlv4_inference_orchestrator::inference_engine::BertModule *))(*(_QWORD *)this + 104))(__p, this);
    std::optional<snlp::common::tensor::InferenceTensor>::operator=[abi:ne180100]<snlp::common::tensor::InferenceTensor,void>(a2 + 48, (uint64_t)__p);
    if (v9[0])
    {
      v9[1] = v9[0];
      operator delete(v9[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::reset[abi:ne180100](v4);
  if (*((_BYTE *)this + 425))
  {
    (*(void (**)(void **__return_ptr, nlv4_inference_orchestrator::inference_engine::BertModule *))(*(_QWORD *)this + 112))(__p, this);
    std::optional<snlp::common::tensor::InferenceTensor>::operator=[abi:ne180100]<snlp::common::tensor::InferenceTensor,void>(v4, (uint64_t)__p);
    if (v9[0])
    {
      v9[1] = v9[0];
      operator delete(v9[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_1C21B80BC(_Unwind_Exception *a1)
{
  nlv4_inference_orchestrator::inference_engine::BertModuleOutputType *v1;

  nlv4_inference_orchestrator::inference_engine::BertModuleOutputType::~BertModuleOutputType(v1);
  _Unwind_Resume(a1);
}

void snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getOutput(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, std::string *a3@<X8>)
{
  _QWORD *OutputPorts;
  _QWORD *v7;
  unsigned __int8 *v8;
  E5RT::TensorDescriptor *v9;
  uint64_t TensorShape;
  std::string *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  E5RT::BufferObject *v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  char *v21;
  unsigned __int8 *v22;
  E5RT::BufferObject *v23;
  uint64_t DataSpan;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *size;
  unint64_t v29;
  __int16 *v30;
  uint64_t v31;
  __int16 v32;
  unsigned __int8 *v39;
  E5RT::BufferObject *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned __int8 *v44;
  unsigned int v45;
  std::runtime_error *v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  std::runtime_error *exception;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  std::runtime_error *v56;
  std::string v57;
  std::string v58;
  std::string v59;

  OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperation **)(a1 + 176));
  if (!std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(OutputPorts, a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v52 = std::string::append(&v57, ")");
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    v54 = std::string::append(&v58, " does not exist.");
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v59);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
  }
  v7 = (_QWORD *)(a1 + 192);
  if (snlp::common::espresso_inference::e5ml::WeightsHandler::getDataTypeForPort((_QWORD *)(a1 + 192), a2) == 2)
  {
    v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v59, "The getOutput method is not yet implemented for UINT_8.");
    std::runtime_error::runtime_error(v56, &v59);
    v56->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
  }
  v8 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(OutputPorts, a2);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  E5RT::IOPort::GetPortDescriptor(*((E5RT::IOPort **)v8 + 5));
  v9 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v59.__r_.__value_.__l.__data_);
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(v9);
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a3, *(const void **)TensorShape, *(_QWORD *)(TensorShape + 8), (uint64_t)(*(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape) >> 3);
  a3[1].__r_.__value_.__r.__words[0] = 0;
  a3[1].__r_.__value_.__l.__size_ = 0;
  v11 = a3 + 1;
  a3[1].__r_.__value_.__r.__words[2] = 0;
  if (v59.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v59.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)v59.__r_.__value_.__l.__size_ + 16))(v59.__r_.__value_.__l.__size_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v59.__r_.__value_.__l.__size_);
    }
  }
  v14 = (_QWORD *)(a1 + 312);
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v14, a2))goto LABEL_47;
  v15 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v14, a2);
  if (!v15)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (!E5RT::MemoryObject::TryAsBuffer(*((E5RT::MemoryObject **)v15 + 5)))
  {
LABEL_47:
    v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v47 = std::string::append(&v57, ")");
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    v49 = std::string::append(&v58, " does not exist.");
    v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v46, &v59);
    v46->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
  }
  if (!snlp::common::espresso_inference::e5ml::WeightsHandler::getDataTypeForPort(v7, a2))
  {
    v22 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v14, a2);
    if (!v22)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v23 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(*((E5RT::MemoryObject **)v22 + 5));
    DataSpan = E5RT::BufferObject::GetDataSpan(v23);
    v26 = v25;
    v27 = 0;
    size = 0;
    v29 = v26 >> 1;
    if (v26 >= 2)
      v30 = (__int16 *)DataSpan;
    else
      v30 = 0;
    v31 = 2 * v29;
    memset(&v59, 0, sizeof(v59));
    if (2 * v29)
    {
      std::vector<int>::__vallocate[abi:ne180100](&v59, (uint64_t)(2 * v29) >> 1);
      size = (char *)v59.__r_.__value_.__l.__size_;
      if (v26 >= 2)
      {
        do
        {
          v32 = *v30++;
          _H0 = v32;
          __asm { FCVT            S0, H0 }
          *(_DWORD *)size = _S0;
          size += 4;
          v31 -= 2;
        }
        while (v31);
      }
      v59.__r_.__value_.__l.__size_ = (std::string::size_type)size;
      v27 = (char *)v59.__r_.__value_.__r.__words[0];
    }
    if (v11 == &v59)
      goto LABEL_43;
    goto LABEL_42;
  }
  if (snlp::common::espresso_inference::e5ml::WeightsHandler::getDataTypeForPort(v7, a2) != 1)
  {
    if (snlp::common::espresso_inference::e5ml::WeightsHandler::getDataTypeForPort(v7, a2) != 2)
      return;
    v39 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v14, a2);
    if (!v39)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v40 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(*((E5RT::MemoryObject **)v39 + 5));
    v41 = E5RT::BufferObject::GetDataSpan(v40);
    v43 = v42;
    v27 = 0;
    size = 0;
    if (v43)
      v44 = (unsigned __int8 *)v41;
    else
      v44 = 0;
    memset(&v59, 0, sizeof(v59));
    if (v43)
    {
      std::vector<int>::__vallocate[abi:ne180100](&v59, v43);
      size = (char *)v59.__r_.__value_.__l.__size_;
      do
      {
        v45 = *v44++;
        *(float *)size = (float)v45;
        size += 4;
        --v43;
      }
      while (v43);
      v59.__r_.__value_.__l.__size_ = (std::string::size_type)size;
      v27 = (char *)v59.__r_.__value_.__r.__words[0];
    }
    if (v11 == &v59)
      goto LABEL_43;
LABEL_42:
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&a3[1], v27, (uint64_t)size, (size - v27) >> 2);
    v27 = (char *)v59.__r_.__value_.__r.__words[0];
LABEL_43:
    if (!v27)
      return;
    v59.__r_.__value_.__l.__size_ = (std::string::size_type)v27;
    v21 = v27;
    goto LABEL_45;
  }
  v16 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v14, a2);
  if (!v16)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v17 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(*((E5RT::MemoryObject **)v16 + 5));
  v18 = E5RT::BufferObject::GetDataSpan(v17);
  if ((unint64_t)v19 >= 4)
    v20 = (const void *)v18;
  else
    v20 = 0;
  memset(&v59, 0, sizeof(v59));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v59, v20, (uint64_t)v20 + (v19 & 0xFFFFFFFFFFFFFFFCLL), v19 >> 2);
  if (v11 != &v59)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&a3[1], v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_, (uint64_t)(v59.__r_.__value_.__l.__size_ - v59.__r_.__value_.__r.__words[0]) >> 2);
  v21 = (char *)v59.__r_.__value_.__r.__words[0];
  if (v59.__r_.__value_.__r.__words[0])
  {
    v59.__r_.__value_.__l.__size_ = v59.__r_.__value_.__r.__words[0];
LABEL_45:
    operator delete(v21);
  }
}

void sub_1C21B85E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *v28;

  if (__p)
    operator delete(__p);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v28);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::BertE5MLModule::getEmbeddings(nlv4_inference_orchestrator::inference_engine::BertE5MLModule *this@<X0>, std::string *a2@<X8>)
{
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getOutput((uint64_t)this + 432, (unsigned __int8 *)this + 40, a2);
}

uint64_t boost::archive::archive_exception::append(boost::archive::archive_exception *this, uint64_t a2, char *a3)
{
  char v3;

  if (a2 <= 0x7E)
  {
    a2 = a2;
    while (1)
    {
      v3 = *a3;
      if (!*a3)
        break;
      ++a3;
      *((_BYTE *)this + a2++ + 8) = v3;
      if ((_DWORD)a2 == 127)
      {
        a2 = 127;
        break;
      }
    }
  }
  *((_BYTE *)this + a2 + 8) = 0;
  return a2;
}

uint64_t boost::archive::archive_exception::archive_exception(uint64_t result, uint64_t *a2, int a3, const char *a4, const char *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  uint64_t v17;
  uint64_t v18;
  uint64_t k;
  uint64_t v20;
  uint64_t m;
  uint64_t v22;
  const char *v23;
  const char *v24;
  uint64_t n;
  uint64_t v26;
  const char *v27;
  unsigned int v28;
  uint64_t ii;
  uint64_t v30;
  uint64_t jj;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  char v45;

  v5 = *a2;
  *(_QWORD *)result = *a2;
  *(_QWORD *)(result + *(_QWORD *)(v5 - 40)) = a2[1];
  *(_DWORD *)(result + 136) = a3;
  switch(a3)
  {
    case 0:
      v6 = 0;
      v7 = 23;
      do
      {
        *(_BYTE *)(result + 8 + v6) = aUninitializedE[v6];
        ++v6;
      }
      while (v6 != 23);
      goto LABEL_115;
    case 1:
      v9 = 0;
      v7 = 25;
      do
      {
        *(_BYTE *)(result + 8 + v9) = aUnknownDerived[v9];
        ++v9;
      }
      while (v9 != 25);
      goto LABEL_115;
    case 2:
      for (i = 0; i != 18; ++i)
        *(_BYTE *)(result + 8 + i) = aUnregisteredCl[i];
      *(_BYTE *)(result + 26) = 0;
      if (!a4)
        return result;
      v11 = 0;
      *(_DWORD *)(result + 26) = 2108704;
      v7 = 127;
      while (a4[v11])
      {
        *(_BYTE *)(result + 29 + v11) = a4[v11];
        v12 = (_DWORD)v11++ == 105;
        if (v12)
          goto LABEL_115;
      }
      v7 = (v11 + 21);
      goto LABEL_115;
    case 3:
      v13 = 0;
      v7 = 17;
      do
      {
        *(_BYTE *)(result + 8 + v13) = aInvalidSignatu[v13];
        ++v13;
      }
      while (v13 != 17);
      goto LABEL_115;
    case 4:
      v14 = 0;
      v7 = 19;
      do
      {
        *(_BYTE *)(result + 8 + v14) = aUnsupportedVer[v14];
        ++v14;
      }
      while (v14 != 19);
      goto LABEL_115;
    case 5:
      v15 = 0;
      v7 = 16;
      do
      {
        *(_BYTE *)(result + 8 + v15) = aPointerConflic[v15];
        ++v15;
      }
      while (v15 != 16);
      goto LABEL_115;
    case 6:
      for (j = 0; j != 26; ++j)
        *(_BYTE *)(result + 8 + j) = aIncompatibleNa[j];
      *(_BYTE *)(result + 34) = 0;
      if (!a4)
        return result;
      v17 = 0;
      *(_DWORD *)(result + 34) = 2108704;
      v7 = 127;
      while (a4[v17])
      {
        *(_BYTE *)(result + 37 + v17) = a4[v17];
        v12 = (_DWORD)v17++ == 97;
        if (v12)
          goto LABEL_115;
      }
      v7 = v17 + 29;
      goto LABEL_115;
    case 7:
      v18 = 0;
      v7 = 20;
      do
      {
        *(_BYTE *)(result + 8 + v18) = aArraySizeTooSh[v18];
        ++v18;
      }
      while (v18 != 20);
      goto LABEL_115;
    case 8:
      for (k = 0; k != 18; ++k)
        *(_BYTE *)(result + 8 + k) = aInputStreamErr[k];
      *(_BYTE *)(result + 26) = 0;
      if (!a4)
      {
        if (!a5)
          return result;
        LODWORD(v7) = 18;
        goto LABEL_101;
      }
      v7 = 0;
      *(_WORD *)(result + 26) = 45;
      while (a4[v7])
      {
        *(_BYTE *)(result + 27 + v7) = a4[v7];
        v12 = (_DWORD)v7++ == 107;
        if (v12)
        {
          LODWORD(v7) = 127;
          goto LABEL_99;
        }
      }
      LODWORD(v7) = v7 + 19;
LABEL_99:
      *(_BYTE *)(result + v7 + 8) = 0;
      if (!a5)
        return result;
      if (v7 > 0x7E)
        goto LABEL_113;
LABEL_101:
      v34 = 0;
      v35 = v7;
      v36 = result + v7 + 8;
      while (v34 != 1)
      {
        v37 = v35 + v34;
        *(_BYTE *)(v36 + v34) = asc_1C2313B84[v34];
        ++v34;
        if (v37 == 126)
          goto LABEL_112;
      }
      LODWORD(v7) = v35 + 1;
      *(_BYTE *)(v35 + 1 + result + 8) = 0;
      if ((v35 + 1) >= 0x7F)
        goto LABEL_114;
      v41 = 0;
      do
      {
        if (!a5[v41])
          goto LABEL_135;
        v42 = v7 + v41;
        *(_BYTE *)(v35 + result + 8 + v41 + 1) = a5[v41];
        ++v41;
      }
      while (v42 != 126);
      goto LABEL_134;
    case 9:
      v20 = 0;
      v7 = 19;
      do
      {
        *(_BYTE *)(result + 8 + v20) = aClassNameTooLo[v20];
        ++v20;
      }
      while (v20 != 19);
      goto LABEL_115;
    case 10:
      for (m = 0; m != 23; ++m)
        *(_BYTE *)(result + 8 + m) = aUnregisteredVo[m];
      v22 = 0;
      *(_BYTE *)(result + 31) = 0;
      v23 = "?";
      if (a4)
        v24 = a4;
      else
        v24 = "?";
      while (v24[v22])
      {
        *(_BYTE *)(result + 31 + v22) = v24[v22];
        v12 = (_DWORD)v22++ == 103;
        if (v12)
        {
          *(_BYTE *)(result + 135) = 0;
LABEL_112:
          LODWORD(v7) = 127;
          goto LABEL_113;
        }
      }
      LODWORD(v7) = v22 + 23;
      *(_BYTE *)(result + (v22 + 23) + 8) = 0;
      if ((v22 + 23) >= 0x7F)
      {
LABEL_113:
        *(_BYTE *)(result + v7 + 8) = 0;
        goto LABEL_114;
      }
      v32 = 0;
      while ((_DWORD)v32 != 2)
      {
        v33 = v7 + v32;
        *(_BYTE *)(result + v7 + 8 + v32) = asc_1C2313BB4[v32];
        ++v32;
        if (v33 == 126)
          goto LABEL_112;
      }
      *(_BYTE *)(result + (v22 + 25) + 8) = 0;
      if ((v22 + 25) >= 0x7F)
      {
        LODWORD(v7) = v22 + 25;
      }
      else
      {
        if (a5)
          v23 = a5;
        v7 = (v22 + 25);
        v44 = v7 + 8;
        while (1)
        {
          v45 = *v23;
          if (!*v23)
            break;
          ++v23;
          *(_BYTE *)(result + v44) = v45;
          LODWORD(v7) = v7 + 1;
          v12 = (_DWORD)v44++ == 134;
          if (v12)
          {
LABEL_134:
            LODWORD(v7) = 127;
            goto LABEL_114;
          }
        }
      }
      goto LABEL_114;
    case 11:
      for (n = 0; n != 14; ++n)
        *(_BYTE *)(result + 8 + n) = aClassVersion[n];
      v26 = 0;
      *(_BYTE *)(result + 22) = 0;
      if (a4)
        v27 = a4;
      else
        v27 = "<unknown class>";
      v28 = 127;
      while (v27[v26])
      {
        *(_BYTE *)(result + 22 + v26) = v27[v26];
        v12 = (_DWORD)v26++ == 112;
        if (v12)
          goto LABEL_91;
      }
      v28 = v26 + 14;
LABEL_91:
      v7 = v28;
      goto LABEL_115;
    case 12:
      for (ii = 0; ii != 41; ++ii)
        *(_BYTE *)(result + 8 + ii) = aCodeInstantiat[ii];
      *(_BYTE *)(result + 49) = 0;
      if (!a4)
        return result;
      v30 = 0;
      *(_DWORD *)(result + 49) = 2108704;
      v7 = 127;
      while (a4[v30])
      {
        *(_BYTE *)(result + 52 + v30) = a4[v30];
        v12 = (_DWORD)v30++ == 82;
        if (v12)
          goto LABEL_115;
      }
      v7 = v30 + 44;
      goto LABEL_115;
    case 13:
      for (jj = 0; jj != 19; ++jj)
        *(_BYTE *)(result + 8 + jj) = aOutputStreamEr[jj];
      *(_BYTE *)(result + 27) = 0;
      if (!a4)
      {
        if (!a5)
          return result;
        LODWORD(v7) = 19;
        goto LABEL_109;
      }
      v7 = 0;
      *(_WORD *)(result + 27) = 45;
      break;
    default:
      v8 = 0;
      v7 = 17;
      do
      {
        *(_BYTE *)(result + 8 + v8) = aProgrammingErr[v8];
        ++v8;
      }
      while (v8 != 17);
      goto LABEL_115;
  }
  while (a4[v7])
  {
    *(_BYTE *)(result + 28 + v7) = a4[v7];
    v12 = (_DWORD)v7++ == 106;
    if (v12)
    {
      LODWORD(v7) = 127;
      goto LABEL_107;
    }
  }
  LODWORD(v7) = v7 + 20;
LABEL_107:
  *(_BYTE *)(result + v7 + 8) = 0;
  if (!a5)
    return result;
  if (v7 > 0x7E)
    goto LABEL_113;
LABEL_109:
  v38 = 0;
  v35 = v7;
  v39 = result + v7 + 8;
  while (v38 != 1)
  {
    v40 = v35 + v38;
    *(_BYTE *)(v39 + v38) = asc_1C2313B84[v38];
    ++v38;
    if (v40 == 126)
      goto LABEL_112;
  }
  LODWORD(v7) = v35 + 1;
  *(_BYTE *)(v35 + 1 + result + 8) = 0;
  if ((v35 + 1) < 0x7F)
  {
    v41 = 0;
    while (a5[v41])
    {
      v43 = v7 + v41;
      *(_BYTE *)(v35 + result + 8 + v41 + 1) = a5[v41];
      ++v41;
      if (v43 == 126)
        goto LABEL_134;
    }
LABEL_135:
    LODWORD(v7) = v35 + 1 + v41;
  }
LABEL_114:
  v7 = v7;
LABEL_115:
  *(_BYTE *)(result + v7 + 8) = 0;
  return result;
}

uint64_t boost::archive::archive_exception::archive_exception(uint64_t result, int a2, const char *a3, const char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  uint64_t v15;
  uint64_t v16;
  uint64_t k;
  uint64_t v18;
  uint64_t m;
  uint64_t v20;
  const char *v21;
  const char *v22;
  uint64_t n;
  uint64_t v24;
  const char *v25;
  unsigned int v26;
  uint64_t ii;
  uint64_t v28;
  uint64_t jj;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  char v43;

  *(_QWORD *)result = off_1E7BEC080;
  *(_DWORD *)(result + 136) = a2;
  switch(a2)
  {
    case 0:
      v4 = 0;
      v5 = 23;
      do
      {
        *(_BYTE *)(result + 8 + v4) = aUninitializedE[v4];
        ++v4;
      }
      while (v4 != 23);
      goto LABEL_115;
    case 1:
      v7 = 0;
      v5 = 25;
      do
      {
        *(_BYTE *)(result + 8 + v7) = aUnknownDerived[v7];
        ++v7;
      }
      while (v7 != 25);
      goto LABEL_115;
    case 2:
      for (i = 0; i != 18; ++i)
        *(_BYTE *)(result + 8 + i) = aUnregisteredCl[i];
      *(_BYTE *)(result + 26) = 0;
      if (!a3)
        return result;
      v9 = 0;
      *(_DWORD *)(result + 26) = 2108704;
      v5 = 127;
      while (a3[v9])
      {
        *(_BYTE *)(result + 29 + v9) = a3[v9];
        v10 = (_DWORD)v9++ == 105;
        if (v10)
          goto LABEL_115;
      }
      v5 = (v9 + 21);
      goto LABEL_115;
    case 3:
      v11 = 0;
      v5 = 17;
      do
      {
        *(_BYTE *)(result + 8 + v11) = aInvalidSignatu[v11];
        ++v11;
      }
      while (v11 != 17);
      goto LABEL_115;
    case 4:
      v12 = 0;
      v5 = 19;
      do
      {
        *(_BYTE *)(result + 8 + v12) = aUnsupportedVer[v12];
        ++v12;
      }
      while (v12 != 19);
      goto LABEL_115;
    case 5:
      v13 = 0;
      v5 = 16;
      do
      {
        *(_BYTE *)(result + 8 + v13) = aPointerConflic[v13];
        ++v13;
      }
      while (v13 != 16);
      goto LABEL_115;
    case 6:
      for (j = 0; j != 26; ++j)
        *(_BYTE *)(result + 8 + j) = aIncompatibleNa[j];
      *(_BYTE *)(result + 34) = 0;
      if (!a3)
        return result;
      v15 = 0;
      *(_DWORD *)(result + 34) = 2108704;
      v5 = 127;
      while (a3[v15])
      {
        *(_BYTE *)(result + 37 + v15) = a3[v15];
        v10 = (_DWORD)v15++ == 97;
        if (v10)
          goto LABEL_115;
      }
      v5 = v15 + 29;
      goto LABEL_115;
    case 7:
      v16 = 0;
      v5 = 20;
      do
      {
        *(_BYTE *)(result + 8 + v16) = aArraySizeTooSh[v16];
        ++v16;
      }
      while (v16 != 20);
      goto LABEL_115;
    case 8:
      for (k = 0; k != 18; ++k)
        *(_BYTE *)(result + 8 + k) = aInputStreamErr[k];
      *(_BYTE *)(result + 26) = 0;
      if (!a3)
      {
        if (!a4)
          return result;
        LODWORD(v5) = 18;
        goto LABEL_101;
      }
      v5 = 0;
      *(_WORD *)(result + 26) = 45;
      while (a3[v5])
      {
        *(_BYTE *)(result + 27 + v5) = a3[v5];
        v10 = (_DWORD)v5++ == 107;
        if (v10)
        {
          LODWORD(v5) = 127;
          goto LABEL_99;
        }
      }
      LODWORD(v5) = v5 + 19;
LABEL_99:
      *(_BYTE *)(result + v5 + 8) = 0;
      if (!a4)
        return result;
      if (v5 > 0x7E)
        goto LABEL_113;
LABEL_101:
      v32 = 0;
      v33 = v5;
      v34 = result + v5 + 8;
      while (v32 != 1)
      {
        v35 = v33 + v32;
        *(_BYTE *)(v34 + v32) = asc_1C2313B84[v32];
        ++v32;
        if (v35 == 126)
          goto LABEL_112;
      }
      LODWORD(v5) = v33 + 1;
      *(_BYTE *)(v33 + 1 + result + 8) = 0;
      if ((v33 + 1) >= 0x7F)
        goto LABEL_114;
      v39 = 0;
      do
      {
        if (!a4[v39])
          goto LABEL_135;
        v40 = v5 + v39;
        *(_BYTE *)(v33 + result + 8 + v39 + 1) = a4[v39];
        ++v39;
      }
      while (v40 != 126);
      goto LABEL_134;
    case 9:
      v18 = 0;
      v5 = 19;
      do
      {
        *(_BYTE *)(result + 8 + v18) = aClassNameTooLo[v18];
        ++v18;
      }
      while (v18 != 19);
      goto LABEL_115;
    case 10:
      for (m = 0; m != 23; ++m)
        *(_BYTE *)(result + 8 + m) = aUnregisteredVo[m];
      v20 = 0;
      *(_BYTE *)(result + 31) = 0;
      v21 = "?";
      if (a3)
        v22 = a3;
      else
        v22 = "?";
      while (v22[v20])
      {
        *(_BYTE *)(result + 31 + v20) = v22[v20];
        v10 = (_DWORD)v20++ == 103;
        if (v10)
        {
          *(_BYTE *)(result + 135) = 0;
LABEL_112:
          LODWORD(v5) = 127;
          goto LABEL_113;
        }
      }
      LODWORD(v5) = v20 + 23;
      *(_BYTE *)(result + (v20 + 23) + 8) = 0;
      if ((v20 + 23) >= 0x7F)
      {
LABEL_113:
        *(_BYTE *)(result + v5 + 8) = 0;
        goto LABEL_114;
      }
      v30 = 0;
      while ((_DWORD)v30 != 2)
      {
        v31 = v5 + v30;
        *(_BYTE *)(result + v5 + 8 + v30) = asc_1C2313BB4[v30];
        ++v30;
        if (v31 == 126)
          goto LABEL_112;
      }
      *(_BYTE *)(result + (v20 + 25) + 8) = 0;
      if ((v20 + 25) >= 0x7F)
      {
        LODWORD(v5) = v20 + 25;
      }
      else
      {
        if (a4)
          v21 = a4;
        v5 = (v20 + 25);
        v42 = v5 + 8;
        while (1)
        {
          v43 = *v21;
          if (!*v21)
            break;
          ++v21;
          *(_BYTE *)(result + v42) = v43;
          LODWORD(v5) = v5 + 1;
          v10 = (_DWORD)v42++ == 134;
          if (v10)
          {
LABEL_134:
            LODWORD(v5) = 127;
            goto LABEL_114;
          }
        }
      }
      goto LABEL_114;
    case 11:
      for (n = 0; n != 14; ++n)
        *(_BYTE *)(result + 8 + n) = aClassVersion[n];
      v24 = 0;
      *(_BYTE *)(result + 22) = 0;
      if (a3)
        v25 = a3;
      else
        v25 = "<unknown class>";
      v26 = 127;
      while (v25[v24])
      {
        *(_BYTE *)(result + 22 + v24) = v25[v24];
        v10 = (_DWORD)v24++ == 112;
        if (v10)
          goto LABEL_91;
      }
      v26 = v24 + 14;
LABEL_91:
      v5 = v26;
      goto LABEL_115;
    case 12:
      for (ii = 0; ii != 41; ++ii)
        *(_BYTE *)(result + 8 + ii) = aCodeInstantiat[ii];
      *(_BYTE *)(result + 49) = 0;
      if (!a3)
        return result;
      v28 = 0;
      *(_DWORD *)(result + 49) = 2108704;
      v5 = 127;
      while (a3[v28])
      {
        *(_BYTE *)(result + 52 + v28) = a3[v28];
        v10 = (_DWORD)v28++ == 82;
        if (v10)
          goto LABEL_115;
      }
      v5 = v28 + 44;
      goto LABEL_115;
    case 13:
      for (jj = 0; jj != 19; ++jj)
        *(_BYTE *)(result + 8 + jj) = aOutputStreamEr[jj];
      *(_BYTE *)(result + 27) = 0;
      if (!a3)
      {
        if (!a4)
          return result;
        LODWORD(v5) = 19;
        goto LABEL_109;
      }
      v5 = 0;
      *(_WORD *)(result + 27) = 45;
      break;
    default:
      v6 = 0;
      v5 = 17;
      do
      {
        *(_BYTE *)(result + 8 + v6) = aProgrammingErr[v6];
        ++v6;
      }
      while (v6 != 17);
      goto LABEL_115;
  }
  while (a3[v5])
  {
    *(_BYTE *)(result + 28 + v5) = a3[v5];
    v10 = (_DWORD)v5++ == 106;
    if (v10)
    {
      LODWORD(v5) = 127;
      goto LABEL_107;
    }
  }
  LODWORD(v5) = v5 + 20;
LABEL_107:
  *(_BYTE *)(result + v5 + 8) = 0;
  if (!a4)
    return result;
  if (v5 > 0x7E)
    goto LABEL_113;
LABEL_109:
  v36 = 0;
  v33 = v5;
  v37 = result + v5 + 8;
  while (v36 != 1)
  {
    v38 = v33 + v36;
    *(_BYTE *)(v37 + v36) = asc_1C2313B84[v36];
    ++v36;
    if (v38 == 126)
      goto LABEL_112;
  }
  LODWORD(v5) = v33 + 1;
  *(_BYTE *)(v33 + 1 + result + 8) = 0;
  if ((v33 + 1) < 0x7F)
  {
    v39 = 0;
    while (a4[v39])
    {
      v41 = v5 + v39;
      *(_BYTE *)(v33 + result + 8 + v39 + 1) = a4[v39];
      ++v39;
      if (v41 == 126)
        goto LABEL_134;
    }
LABEL_135:
    LODWORD(v5) = v33 + 1 + v39;
  }
LABEL_114:
  v5 = v5;
LABEL_115:
  *(_BYTE *)(result + v5 + 8) = 0;
  return result;
}

__n128 boost::archive::archive_exception::archive_exception(boost::archive::archive_exception *this, const boost::archive::archive_exception *a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v3 = *(_QWORD *)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 40)) = *((_QWORD *)a2 + 1);
  *((_DWORD *)this + 34) = *(_DWORD *)(a3 + 136);
  v4 = *(_OWORD *)(a3 + 8);
  v5 = *(_OWORD *)(a3 + 24);
  v6 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)(a3 + 56);
  *(_OWORD *)((char *)this + 40) = v6;
  *(_OWORD *)((char *)this + 24) = v5;
  *(_OWORD *)((char *)this + 8) = v4;
  result = *(__n128 *)(a3 + 72);
  v8 = *(_OWORD *)(a3 + 88);
  v9 = *(_OWORD *)(a3 + 104);
  *(_OWORD *)((char *)this + 120) = *(_OWORD *)(a3 + 120);
  *(_OWORD *)((char *)this + 104) = v9;
  *(_OWORD *)((char *)this + 88) = v8;
  *(__n128 *)((char *)this + 72) = result;
  return result;
}

__n128 boost::archive::archive_exception::archive_exception(boost::archive::archive_exception *this, const boost::archive::archive_exception *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)this = off_1E7BEC080;
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  v2 = *(_OWORD *)((char *)a2 + 8);
  v3 = *(_OWORD *)((char *)a2 + 24);
  v4 = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 40) = v4;
  *(_OWORD *)((char *)this + 24) = v3;
  *(_OWORD *)((char *)this + 8) = v2;
  result = *(__n128 *)((char *)a2 + 72);
  v6 = *(_OWORD *)((char *)a2 + 88);
  v7 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)this + 120) = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)this + 104) = v7;
  *(_OWORD *)((char *)this + 88) = v6;
  *(__n128 *)((char *)this + 72) = result;
  return result;
}

void `virtual thunk to'boost::archive::archive_exception::~archive_exception(boost::archive::archive_exception *this)
{
  std::exception::~exception((std::exception *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  void *v1;

  std::exception::~exception((std::exception *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  operator delete(v1);
}

void boost::archive::archive_exception::~archive_exception(std::exception *this)
{
  void *v1;

  std::exception::~exception(this);
  operator delete(v1);
}

uint64_t boost::archive::archive_exception::what(boost::archive::archive_exception *this)
{
  return (uint64_t)this + 8;
}

uint64_t `virtual thunk to'boost::archive::archive_exception::what(boost::archive::archive_exception *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 32) + 8;
}

uint64_t boost::archive::archive_exception::archive_exception(uint64_t this, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)(this + *(_QWORD *)(v2 - 40)) = a2[1];
  *(_DWORD *)(this + 136) = 0;
  return this;
}

uint64_t boost::archive::archive_exception::archive_exception(uint64_t this)
{
  *(_QWORD *)this = off_1E7BEC080;
  *(_DWORD *)(this + 136) = 0;
  return this;
}

const char *boost::archive::BOOST_ARCHIVE_SIGNATURE(boost::archive *this)
{
  return "serialization::archive";
}

void boost::archive::BOOST_ARCHIVE_VERSION(_WORD *a1@<X8>)
{
  *a1 = 19;
}

_QWORD *boost::archive::detail::basic_iarchive_impl::load_preamble(_QWORD *result, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;

  if (!*((_BYTE *)a3 + 21))
  {
    v5 = result;
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3))
    {
      HIWORD(v6) = 0;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 24))(a2, (char *)&v6 + 6);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, (uint64_t)a3 + 20);
      result = (_QWORD *)(**(uint64_t (***)(uint64_t, uint64_t))a2)(a2, (uint64_t)(a3 + 2));
    }
    else
    {
      *((_BYTE *)a3 + 20) = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 32))(*a3, *((unsigned int *)v5 + 1));
      result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)*a3 + 40))(&v6);
      *((_DWORD *)a3 + 4) = v6;
    }
    *((_BYTE *)a3 + 21) = 1;
  }
  return result;
}

uint64_t boost::archive::detail::basic_iarchive::next_object_pointer(uint64_t this, void *a2)
{
  *(_QWORD *)(*(_QWORD *)(this + 32) + 96) = a2;
  return this;
}

boost::archive::detail::basic_iarchive *boost::archive::detail::basic_iarchive::basic_iarchive(boost::archive::detail::basic_iarchive *this, int a2)
{
  char *v4;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &unk_1E7BEC368;
  v4 = (char *)operator new(0x78uLL);
  boost::archive::BOOST_ARCHIVE_VERSION(v4);
  *((_DWORD *)v4 + 1) = a2;
  *((_QWORD *)v4 + 8) = 0;
  *((_QWORD *)v4 + 7) = 0;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_QWORD *)(v4 + 37) = 0;
  *((_QWORD *)v4 + 6) = v4 + 56;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 100) = 0u;
  *((_QWORD *)this + 4) = v4;
  return this;
}

void sub_1C21B9808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  operator delete(v10);
  std::vector<std::pair<void const*,boost::shared_ptr<void>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void boost::archive::detail::basic_iarchive::~basic_iarchive(boost::archive::detail::basic_iarchive *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = &unk_1E7BEC368;
  v1 = (void **)((char *)this + 8);
  boost::scoped_ptr<boost::archive::detail::basic_iarchive_impl>::~scoped_ptr((uint64_t *)this + 4);
  v2 = v1;
  std::vector<std::pair<void const*,boost::shared_ptr<void>>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t boost::archive::detail::basic_iarchive::set_library_version(uint64_t result, _WORD *a2)
{
  **(_WORD **)(result + 32) = *a2;
  return result;
}

uint64_t boost::archive::detail::basic_iarchive::reset_object_address(uint64_t this, _BYTE *a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void **i;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(this + 32);
  if (!*(_BYTE *)(v3 + 44))
  {
    v5 = *(unsigned int *)(v3 + 36);
    v4 = *(unsigned int *)(v3 + 40);
    if (v4 < v5)
    {
      for (i = (const void **)(*(_QWORD *)(v3 + 8) + 16 * v4); *i != a3; i += 2)
      {
        if (v5 == ++v4)
          return this;
      }
    }
    if (v4 < v5)
    {
      v7 = *(_QWORD *)(v3 + 8) + 16 * v4;
      v8 = v5 - v4;
      do
      {
        if (!*(_BYTE *)(v7 + 8))
          *(_QWORD *)v7 += a2 - a3;
        v7 += 16;
        --v8;
      }
      while (v8);
    }
  }
  return this;
}

uint64_t boost::archive::detail::basic_iarchive::load_object(boost::archive::detail::basic_iarchive_impl **this, unint64_t a2, const boost::archive::detail::basic_iserializer *a3)
{
  return boost::archive::detail::basic_iarchive_impl::load_object(this[4], (boost::archive::detail::basic_iarchive *)this, a2, a3);
}

uint64_t boost::archive::detail::basic_iarchive_impl::load_object(boost::archive::detail::basic_iarchive_impl *this, boost::archive::detail::basic_iarchive *a2, unint64_t a3, const boost::archive::detail::basic_iserializer *a4)
{
  uint64_t v8;
  _QWORD *v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t result;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  const boost::archive::detail::basic_iserializer *v37;
  _QWORD v38[2];
  const boost::archive::detail::basic_iserializer *v39;
  __int16 v40;

  *((_BYTE *)this + 44) = 0;
  if (*((_OWORD *)this + 6) != __PAIR128__((unint64_t)a4, a3))
  {
    v8 = *((_QWORD *)this + 8);
    v39 = a4;
    v40 = v8;
    v9 = std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__emplace_unique_key_args<boost::archive::detail::basic_iarchive_impl::cobject_type,boost::archive::detail::basic_iarchive_impl::cobject_type const&>((uint64_t **)this + 6, (uint64_t)&v39, (uint64_t)&v39);
    if (v10)
    {
      v37 = a4;
      v38[0] = 0;
      *(_QWORD *)((char *)v38 + 6) = 0;
      v11 = (_QWORD *)*((_QWORD *)this + 10);
      if ((unint64_t)v11 >= *((_QWORD *)this + 11))
      {
        v12 = std::vector<boost::archive::detail::basic_iarchive_impl::cobject_id>::__push_back_slow_path<boost::archive::detail::basic_iarchive_impl::cobject_id>((uint64_t *)this + 9, (uint64_t)&v37);
      }
      else
      {
        v12 = (uint64_t)(v11 + 3);
        *v11 = a4;
        v11[1] = 0;
        *(_QWORD *)((char *)v11 + 14) = 0;
      }
      *((_QWORD *)this + 10) = v12;
    }
    v13 = *((__int16 *)v9 + 20);
    v14 = *((_QWORD *)this + 9);
    v15 = (_QWORD *)(v14 + 24 * *((__int16 *)v9 + 20));
    v15[1] = *((_QWORD *)a4 + 2);
    boost::archive::detail::basic_iarchive_impl::load_preamble(this, (uint64_t)a2, v15);
    v16 = *((_DWORD *)this + 8);
    v17 = *(unsigned __int8 *)(v14 + 24 * v13 + 20);
    v18 = (*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 4;
    *((_DWORD *)this + 8) = v18;
    if (v17)
    {
      LODWORD(v37) = 0;
      result = (*(uint64_t (**)(boost::archive::detail::basic_iarchive *, const boost::archive::detail::basic_iserializer **))(*(_QWORD *)a2 + 8))(a2, &v37);
      v19 = *((_QWORD *)this + 1);
      v20 = *((_QWORD *)this + 2);
      v21 = v20 - v19;
      if (v37 < ((v20 - v19) >> 4))
      {
LABEL_25:
        *((_DWORD *)this + 8) = v16;
        goto LABEL_26;
      }
      v22 = *((_QWORD *)this + 3);
      if (v20 >= v22)
      {
        v25 = v21 >> 4;
        v26 = (v21 >> 4) + 1;
        if (v26 >> 60)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v27 = v22 - v19;
        if (v27 >> 3 > v26)
          v26 = v27 >> 3;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
          v28 = 0xFFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::aobject>>((uint64_t)this + 24, v28);
        v30 = &v29[16 * v25];
        v32 = &v29[16 * v31];
        *(_QWORD *)v30 = a3;
        v30[8] = 0;
        *((_WORD *)v30 + 5) = v13;
        v23 = v30 + 16;
        v34 = *((_QWORD *)this + 1);
        v33 = *((_QWORD *)this + 2);
        if (v33 != v34)
        {
          do
          {
            v35 = *(_QWORD *)(v33 - 16);
            v33 -= 16;
            v36 = *(_BYTE *)(v33 + 8);
            *((_QWORD *)v30 - 2) = v35;
            v30 -= 16;
            v30[8] = v36;
            *((_WORD *)v30 + 5) = *(_WORD *)(v33 + 10);
          }
          while (v33 != v34);
          v33 = *((_QWORD *)this + 1);
        }
        *((_QWORD *)this + 1) = v30;
        *((_QWORD *)this + 2) = v23;
        *((_QWORD *)this + 3) = v32;
        if (v33)
          operator delete((void *)v33);
      }
      else
      {
        *(_QWORD *)v20 = a3;
        *(_BYTE *)(v20 + 8) = 0;
        v23 = (char *)(v20 + 16);
        *(_WORD *)(v20 + 10) = v13;
      }
      *((_QWORD *)this + 2) = v23;
      *((_DWORD *)this + 9) = (unint64_t)&v23[-*((_QWORD *)this + 1)] >> 4;
    }
    result = (*(uint64_t (**)(const boost::archive::detail::basic_iserializer *, boost::archive::detail::basic_iarchive *, unint64_t, _QWORD))(*(_QWORD *)a4 + 16))(a4, a2, a3, *(unsigned int *)(v14 + 24 * v13 + 16));
    *((_DWORD *)this + 10) = v18;
    goto LABEL_25;
  }
  result = (*(uint64_t (**)(const boost::archive::detail::basic_iserializer *, boost::archive::detail::basic_iarchive *, unint64_t, _QWORD))(*(_QWORD *)a4 + 16))(a4, a2, a3, *((unsigned int *)this + 28));
LABEL_26:
  *((_BYTE *)this + 44) = 0;
  return result;
}

void sub_1C21B9B9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 44) = 0;
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::basic_iarchive::load_pointer(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(void))
{
  return boost::archive::detail::basic_iarchive_impl::load_pointer(*(_QWORD *)(a1 + 32), a1, a2, a3, a4);
}

uint64_t boost::archive::detail::basic_iarchive_impl::load_pointer(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(void))
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  __int16 v50;
  uint64_t v51;
  _QWORD v52[17];
  uint64_t v53;
  __int16 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 44) = 1;
  v50 = 0;
  (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)a2 + 16))(a2, &v50);
  v10 = v50;
  if (v50 == -1)
  {
    *a3 = 0;
  }
  else
  {
    if (v50 >= *(__int16 *)(a1 + 64))
    {
      if (!a4
        || (v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4),
            (*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12)))
      {
        v49 = &v53;
        (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)a2 + 32))(a2, &v49);
        if (!(_BYTE)v53
          || !boost::serialization::extended_type_info::find((boost::serialization::extended_type_info *)&v53, v13))
        {
          boost::archive::archive_exception::archive_exception((uint64_t)&v51, 2, 0, 0);
          boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)&v51);
        }
        a4 = a5();
      }
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4);
      v15 = *(_QWORD *)(a1 + 64);
      v53 = v14;
      v54 = v15;
      v16 = std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__emplace_unique_key_args<boost::archive::detail::basic_iarchive_impl::cobject_type,boost::archive::detail::basic_iarchive_impl::cobject_type const&>((uint64_t **)(a1 + 48), (uint64_t)&v53, (uint64_t)&v53);
      if (v17)
      {
        v51 = v14;
        v52[0] = 0;
        *(_QWORD *)((char *)v52 + 6) = 0;
        v18 = *(uint64_t **)(a1 + 80);
        if ((unint64_t)v18 >= *(_QWORD *)(a1 + 88))
        {
          v19 = std::vector<boost::archive::detail::basic_iarchive_impl::cobject_id>::__push_back_slow_path<boost::archive::detail::basic_iarchive_impl::cobject_id>((uint64_t *)(a1 + 72), (uint64_t)&v51);
        }
        else
        {
          v19 = (uint64_t)(v18 + 3);
          *v18 = v14;
          v18[1] = 0;
          *(uint64_t *)((char *)v18 + 14) = 0;
        }
        *(_QWORD *)(a1 + 80) = v19;
      }
      v11 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(v11 + 24 * *((__int16 *)v16 + 20) + 8) = *(_QWORD *)(v14 + 16);
      v10 = v50;
      *(_QWORD *)(v11 + 24 * v50 + 8) = a4;
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 72);
      a4 = *(_QWORD *)(v11 + 24 * v50 + 8);
      if (!a4)
      {
        boost::archive::archive_exception::archive_exception((uint64_t)&v51, 2, 0, 0);
        boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)&v51);
      }
    }
    boost::archive::detail::basic_iarchive_impl::load_preamble((_QWORD *)a1, a2, (_QWORD *)(v11 + 24 * v10));
    v20 = v11 + 24 * v10;
    v21 = *(unsigned __int8 *)(v20 + 20);
    if (*(_BYTE *)(v20 + 20)
      && (LODWORD(v51) = 0,
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 8))(a2, &v51),
          v22 = *(_QWORD *)(a1 + 8),
          v51 < ((unint64_t)(*(_QWORD *)(a1 + 16) - v22) >> 4)))
    {
      *a3 = *(_QWORD *)(v22 + 16 * v51);
    }
    else
    {
      v23 = *(_DWORD *)(a1 + 32);
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
      *a3 = v24;
      if (v21)
      {
        v47 = *(_QWORD *)(a1 + 104);
        v48 = *(_QWORD *)(a1 + 96);
        v46 = *(_DWORD *)(a1 + 112);
        v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4);
        v26 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 104) = v25;
        *(_DWORD *)(a1 + 112) = *(_DWORD *)(v11 + 24 * v10 + 16);
        v27 = *(_QWORD *)(a1 + 16);
        v28 = (uint64_t)(v27 - v26) >> 4;
        v29 = *(_DWORD *)(a1 + 36);
        v30 = *a3;
        v31 = v50;
        v32 = *(_QWORD *)(a1 + 24);
        if (v27 >= v32)
        {
          v34 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 60)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v35 = v32 - v26;
          if (v35 >> 3 > v34)
            v34 = v35 >> 3;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
            v36 = 0xFFFFFFFFFFFFFFFLL;
          else
            v36 = v34;
          v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::aobject>>(a1 + 24, v36);
          v38 = &v37[16 * v28];
          v40 = &v37[16 * v39];
          *(_QWORD *)v38 = v30;
          v38[8] = 0;
          *((_WORD *)v38 + 5) = v31;
          v33 = v38 + 16;
          v42 = *(_QWORD *)(a1 + 8);
          v41 = *(_QWORD *)(a1 + 16);
          if (v41 != v42)
          {
            do
            {
              v43 = *(_QWORD *)(v41 - 16);
              v41 -= 16;
              v44 = *(_BYTE *)(v41 + 8);
              *((_QWORD *)v38 - 2) = v43;
              v38 -= 16;
              v38[8] = v44;
              *((_WORD *)v38 + 5) = *(_WORD *)(v41 + 10);
            }
            while (v41 != v42);
            v41 = *(_QWORD *)(a1 + 8);
          }
          *(_QWORD *)(a1 + 8) = v38;
          *(_QWORD *)(a1 + 16) = v33;
          *(_QWORD *)(a1 + 24) = v40;
          if (v41)
            operator delete((void *)v41);
        }
        else
        {
          *(_QWORD *)v27 = v30;
          *(_BYTE *)(v27 + 8) = 0;
          v33 = (char *)(v27 + 16);
          *(_WORD *)(v27 + 10) = v31;
        }
        *(_QWORD *)(a1 + 16) = v33;
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, a2, *a3, *(unsigned int *)(a1 + 112));
        *(_BYTE *)(*(_QWORD *)(a1 + 8) + 16 * v28 + 8) = 1;
        *(_DWORD *)(a1 + 36) = v29;
        *(_DWORD *)(a1 + 112) = v46;
        *(_QWORD *)(a1 + 96) = v48;
        *(_QWORD *)(a1 + 104) = v47;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, a2, v24, *(unsigned int *)(v11 + 24 * v10 + 16));
      }
      *(_DWORD *)(a1 + 32) = v23;
    }
  }
  *(_BYTE *)(a1 + 44) = 1;
  return a4;
}

void sub_1C21B9FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::exception a16)
{
  uint64_t v16;

  *(_BYTE *)(v16 + 44) = 1;
  _Unwind_Resume(exception_object);
}

_QWORD *boost::archive::detail::basic_iarchive::register_basic_serializer(boost::archive::detail::basic_iarchive *this, const boost::archive::detail::basic_iserializer *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  const boost::archive::detail::basic_iserializer *v9;
  _QWORD v10[2];
  const boost::archive::detail::basic_iserializer *v11;
  __int16 v12;

  v3 = *((_QWORD *)this + 4);
  v4 = *(_QWORD *)(v3 + 64);
  v11 = a2;
  v12 = v4;
  result = std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__emplace_unique_key_args<boost::archive::detail::basic_iarchive_impl::cobject_type,boost::archive::detail::basic_iarchive_impl::cobject_type const&>((uint64_t **)(v3 + 48), (uint64_t)&v11, (uint64_t)&v11);
  v6 = (uint64_t)result;
  if (v7)
  {
    v9 = a2;
    v10[0] = 0;
    *(_QWORD *)((char *)v10 + 6) = 0;
    v8 = *(_QWORD **)(v3 + 80);
    if ((unint64_t)v8 >= *(_QWORD *)(v3 + 88))
    {
      result = (_QWORD *)std::vector<boost::archive::detail::basic_iarchive_impl::cobject_id>::__push_back_slow_path<boost::archive::detail::basic_iarchive_impl::cobject_id>((uint64_t *)(v3 + 72), (uint64_t)&v9);
    }
    else
    {
      result = v8 + 3;
      *v8 = a2;
      v8[1] = 0;
      *(_QWORD *)((char *)v8 + 14) = 0;
    }
    *(_QWORD *)(v3 + 80) = result;
  }
  *(_QWORD *)(*(_QWORD *)(v3 + 72) + 24 * *(__int16 *)(v6 + 40) + 8) = *((_QWORD *)a2 + 2);
  return result;
}

uint64_t boost::archive::detail::basic_iarchive::delete_created_pointers(uint64_t this)
{
  _QWORD *v1;
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD **)(this + 32);
  v3 = v1[1];
  for (i = v1[2]; v3 != i; v3 += 16)
  {
    if (*(_BYTE *)(v3 + 8))
    {
      v4 = *(_QWORD *)(v1[9] + 24 * *(__int16 *)(v3 + 10));
      this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 56))(v4, *(_QWORD *)v3);
      i = v1[2];
    }
  }
  return this;
}

uint64_t boost::archive::detail::basic_iarchive::get_library_version@<X0>(uint64_t this@<X0>, _WORD *a2@<X8>)
{
  *a2 = **(_WORD **)(this + 32);
  return this;
}

uint64_t boost::archive::detail::basic_iarchive::get_flags(boost::archive::detail::basic_iarchive *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 4) + 4);
}

void std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(a1, *a2);
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void std::vector<std::pair<void const*,boost::shared_ptr<void>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  unsigned int **v2;
  unsigned int **v4;
  void *v5;
  unsigned int **v6;

  v1 = *a1;
  v2 = (unsigned int **)**a1;
  if (v2)
  {
    v4 = (unsigned int **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 3;
        boost::detail::shared_count::~shared_count(v4 - 1);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void boost::detail::shared_count::~shared_count(unsigned int **this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v1 = *this;
  if (*this)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
      v5 = v1 + 3;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 24))(v1);
    }
  }
}

void std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E7BE5130, MEMORY[0x1E0DE42D0]);
}

void sub_1C21BA304(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::aobject>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void boost::serialization::throw_exception<boost::archive::archive_exception>(const boost::archive::archive_exception *a1)
{
  boost::archive::archive_exception *exception;
  void *v3;

  exception = (boost::archive::archive_exception *)__cxa_allocate_exception(0x90uLL);
  boost::archive::archive_exception::archive_exception(exception, a1);
}

_QWORD *std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__emplace_unique_key_args<boost::archive::detail::basic_iarchive_impl::cobject_type,boost::archive::detail::basic_iarchive_impl::cobject_type const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  _QWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__find_equal<boost::archive::detail::basic_iarchive_impl::cobject_type>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x30uLL);
    v6[4] = *(_QWORD *)a3;
    *((_WORD *)v6 + 20) = *(_WORD *)(a3 + 8);
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

_QWORD *std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__find_equal<boost::archive::detail::basic_iarchive_impl::cobject_type>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        if (!boost::serialization::extended_type_info::operator<(*(_QWORD *)(*(_QWORD *)a3 + 8), *(_QWORD *)(v4[4] + 8)))break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!boost::serialization::extended_type_info::operator<(*(_QWORD *)(v7[4] + 8), *(_QWORD *)(*(_QWORD *)a3 + 8)))break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t std::vector<boost::archive::detail::basic_iarchive_impl::cobject_id>::__push_back_slow_path<boost::archive::detail::basic_iarchive_impl::cobject_id>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v19 = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>(v7, v9);
  v11 = &v10[24 * v4];
  __p = v10;
  v16 = v11;
  v18 = &v10[24 * v12];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
  *((_WORD *)v11 + 10) = *(_WORD *)(a2 + 20);
  v17 = v11 + 24;
  std::vector<boost::archive::detail::basic_iarchive_impl::cobject_id>::__swap_out_circular_buffer(a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 = &v16[(v17 - v16 - 24) % 0x18uLL];
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_1C21BA7A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<boost::archive::detail::basic_iarchive_impl::cobject_id>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v2 + v5 - 8);
      *(_WORD *)(v6 - 4) = *(_WORD *)(v2 + v5 - 4);
      v5 -= 24;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t *boost::scoped_ptr<boost::archive::detail::basic_iarchive_impl>::~scoped_ptr(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(void **)(v2 + 72);
    if (v3)
    {
      *(_QWORD *)(v2 + 80) = v3;
      operator delete(v3);
    }
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(v2 + 48, *(_QWORD **)(v2 + 56));
    v4 = *(void **)(v2 + 8);
    if (v4)
    {
      *(_QWORD *)(v2 + 16) = v4;
      operator delete(v4);
    }
    operator delete((void *)v2);
  }
  return a1;
}

boost::archive::detail::basic_oarchive *boost::archive::detail::basic_oarchive::basic_oarchive(boost::archive::detail::basic_oarchive *this, int a2)
{
  _QWORD *v4;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &unk_1E7BEC3B8;
  v4 = operator new(0x60uLL);
  *(_DWORD *)v4 = a2;
  v4[2] = 0;
  v4[1] = v4 + 2;
  v4[5] = 0;
  v4[3] = 0;
  v4[4] = v4 + 5;
  v4[8] = 0;
  v4[6] = 0;
  v4[7] = v4 + 8;
  v4[10] = 0;
  v4[11] = 0;
  v4[9] = 0;
  *((_QWORD *)this + 4) = v4;
  return this;
}

void sub_1C21BA9A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<void const*,boost::shared_ptr<void>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void boost::archive::detail::basic_oarchive::~basic_oarchive(boost::archive::detail::basic_oarchive *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = &unk_1E7BEC3B8;
  v1 = (void **)((char *)this + 8);
  boost::scoped_ptr<boost::archive::detail::basic_oarchive_impl>::~scoped_ptr((_QWORD ***)this + 4);
  v2 = v1;
  std::vector<std::pair<void const*,boost::shared_ptr<void>>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t boost::archive::detail::basic_oarchive::save_object(boost::archive::detail::basic_oarchive_impl **this, unint64_t a2, const boost::archive::detail::basic_oserializer *a3)
{
  return boost::archive::detail::basic_oarchive_impl::save_object(this[4], (boost::archive::detail::basic_oarchive *)this, a2, a3);
}

uint64_t boost::archive::detail::basic_oarchive_impl::save_object(boost::archive::detail::basic_oarchive_impl *this, boost::archive::detail::basic_oarchive *a2, unint64_t a3, const boost::archive::detail::basic_oserializer *a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __int16 v11;
  unsigned int v12;
  char v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unsigned int v18;
  BOOL v19;
  char **v20;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  __int16 v25;
  int v26;
  uint64_t v27;
  const boost::archive::detail::basic_oserializer *v28;
  __int16 v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (*((_OWORD *)this + 5) == __PAIR128__((unint64_t)a4, a3))
    return (*(uint64_t (**)(const boost::archive::detail::basic_oserializer *, boost::archive::detail::basic_oarchive *, unint64_t))(*(_QWORD *)a4 + 16))(a4, a2, a3);
  v8 = *((_QWORD *)this + 6);
  v28 = a4;
  v29 = v8;
  v30 = 0;
  v9 = std::__tree<boost::archive::detail::basic_oarchive_impl::cobject_type>::__emplace_unique_key_args<boost::archive::detail::basic_oarchive_impl::cobject_type,boost::archive::detail::basic_oarchive_impl::cobject_type const&>((uint64_t **)this + 4, (uint64_t)&v28, (uint64_t)&v28);
  if ((*(unsigned int (**)(const boost::archive::detail::basic_oserializer *))(*(_QWORD *)a4 + 24))(a4)
    && !*((_BYTE *)v9 + 42))
  {
    HIWORD(v27) = *((_WORD *)v9 + 20);
    (*(void (**)(boost::archive::detail::basic_oarchive *, char *))(*(_QWORD *)a2 + 32))(a2, (char *)&v27 + 6);
    BYTE5(v27) = (*(uint64_t (**)(const boost::archive::detail::basic_oserializer *, _QWORD))(*(_QWORD *)a4 + 32))(a4, *(unsigned int *)this);
    (*(void (**)(boost::archive::detail::basic_oarchive *, char *))(*(_QWORD *)a2 + 56))(a2, (char *)&v27 + 5);
    (*(void (**)(uint64_t *__return_ptr, const boost::archive::detail::basic_oserializer *))(*(_QWORD *)a4 + 40))(&v27, a4);
    (**(void (***)(boost::archive::detail::basic_oarchive *, uint64_t *))a2)(a2, &v27);
    *((_BYTE *)v9 + 42) = 1;
  }
  if (((*(uint64_t (**)(const boost::archive::detail::basic_oserializer *, _QWORD))(*(_QWORD *)a4 + 32))(a4, *(unsigned int *)this) & 1) == 0)return (*(uint64_t (**)(const boost::archive::detail::basic_oserializer *, boost::archive::detail::basic_oarchive *, unint64_t))(*(_QWORD *)a4 + 16))(a4, a2, a3);
  v10 = *((_QWORD *)this + 3);
  v11 = *((_WORD *)v9 + 20);
  v24 = a3;
  v25 = v11;
  v26 = v10;
  v12 = *((_DWORD *)std::__tree<boost::archive::detail::basic_oarchive_impl::aobject>::__emplace_unique_key_args<boost::archive::detail::basic_oarchive_impl::aobject,boost::archive::detail::basic_oarchive_impl::aobject const&>((uint64_t **)this + 1, &v24, (uint64_t)&v24)+ 11);
  if (v13)
  {
    v23 = v12;
    (*(void (**)(boost::archive::detail::basic_oarchive *, unsigned int *))(*(_QWORD *)a2 + 8))(a2, &v23);
    return (*(uint64_t (**)(const boost::archive::detail::basic_oserializer *, boost::archive::detail::basic_oarchive *, unint64_t))(*(_QWORD *)a4 + 16))(a4, a2, a3);
  }
  else
  {
    v16 = (char *)*((_QWORD *)this + 8);
    v15 = (char *)this + 64;
    v14 = v16;
    if (v16)
    {
      v17 = v15;
      do
      {
        v18 = *((_DWORD *)v14 + 7);
        v19 = v18 >= v12;
        if (v18 >= v12)
          v20 = (char **)v14;
        else
          v20 = (char **)(v14 + 8);
        if (v19)
          v17 = v14;
        v14 = *v20;
      }
      while (*v20);
      if (v17 != v15 && v12 >= *((_DWORD *)v17 + 7))
      {
        boost::archive::archive_exception::archive_exception((uint64_t)&v28, 5, 0, 0);
        boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)&v28);
      }
    }
    v22 = v12;
    return (*(uint64_t (**)(boost::archive::detail::basic_oarchive *, unsigned int *))(*(_QWORD *)a2 + 16))(a2, &v22);
  }
}

void sub_1C21BACB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception a14)
{
  boost::archive::archive_exception::~archive_exception(&a14);
  _Unwind_Resume(a1);
}

uint64_t **boost::archive::detail::basic_oarchive::save_pointer(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return boost::archive::detail::basic_oarchive_impl::save_pointer(*(unsigned int **)(a1 + 32), a1, a2, a3);
}

uint64_t **boost::archive::detail::basic_oarchive_impl::save_pointer(unsigned int *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  __int16 v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t **result;
  unsigned int v20;
  unsigned int v21;
  __int16 v22;
  uint64_t v23;
  unsigned int v24[3];
  __int16 v25;
  _QWORD *v26;
  __int16 v27;
  char v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
  v9 = *((_QWORD *)a1 + 6);
  v26 = v8;
  v27 = v9;
  v28 = 0;
  v10 = std::__tree<boost::archive::detail::basic_oarchive_impl::cobject_type>::__emplace_unique_key_args<boost::archive::detail::basic_oarchive_impl::cobject_type,boost::archive::detail::basic_oarchive_impl::cobject_type const&>((uint64_t **)a1 + 4, (uint64_t)&v26, (uint64_t)&v26);
  if (*((_BYTE *)v10 + 42))
  {
    v22 = *((_WORD *)v10 + 20);
    (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)a2 + 40))(a2, &v22);
  }
  else
  {
    v25 = *((_WORD *)v10 + 20);
    (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)a2 + 24))(a2, &v25);
    if (*((_QWORD *)a1 + 6) > v9 && (*(unsigned int (**)(_QWORD *))(*v8 + 48))(v8))
    {
      v11 = v8[1];
      v12 = *(const char **)(v11 + 16);
      if (!v12)
      {
        boost::archive::archive_exception::archive_exception((uint64_t)&v26, 2, 0, 0);
        boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)&v26);
      }
      *(_QWORD *)v24 = *(_QWORD *)(v11 + 16);
      if (strlen(v12) >= 0x80)
      {
        boost::archive::archive_exception::archive_exception((uint64_t)&v26, 9, 0, 0);
        boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)&v26);
      }
      (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 48))(a2, v24);
    }
    if ((*(unsigned int (**)(_QWORD *))(*v8 + 24))(v8))
    {
      HIBYTE(v23) = (*(uint64_t (**)(_QWORD *, _QWORD))(*v8 + 32))(v8, *a1);
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 56))(a2, (char *)&v23 + 7);
      (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*v8 + 40))(&v23, v8);
      (**(void (***)(uint64_t, uint64_t *))a2)(a2, &v23);
    }
    *((_BYTE *)v10 + 42) = 1;
  }
  if (((*(uint64_t (**)(_QWORD *, _QWORD))(*v8 + 32))(v8, *a1) & 1) != 0)
  {
    v13 = *((_QWORD *)a1 + 3);
    v14 = *((_WORD *)v10 + 20);
    v26 = (_QWORD *)a3;
    v27 = v14;
    v29 = v13;
    v15 = *((_DWORD *)std::__tree<boost::archive::detail::basic_oarchive_impl::aobject>::__emplace_unique_key_args<boost::archive::detail::basic_oarchive_impl::aobject,boost::archive::detail::basic_oarchive_impl::aobject const&>((uint64_t **)a1 + 1, (unint64_t *)&v26, (uint64_t)&v26)+ 11);
    v24[0] = v15;
    if (!v16)
    {
      v21 = v15;
      return (uint64_t **)(*(uint64_t (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 16))(a2, &v21);
    }
    v20 = v15;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 8))(a2, &v20);
    v17 = *((_QWORD *)a1 + 10);
    v18 = *((_QWORD *)a1 + 11);
    *((_QWORD *)a1 + 10) = a3;
    *((_QWORD *)a1 + 11) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a4 + 24))(a4, a2, a3);
    result = std::__tree<boost::archive::object_id_type>::__emplace_unique_key_args<boost::archive::object_id_type,boost::archive::object_id_type const&>((uint64_t **)a1 + 7, v24, v24);
  }
  else
  {
    v17 = *((_QWORD *)a1 + 10);
    v18 = *((_QWORD *)a1 + 11);
    *((_QWORD *)a1 + 10) = a3;
    *((_QWORD *)a1 + 11) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
    result = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a4 + 24))(a4, a2, a3);
  }
  *((_QWORD *)a1 + 10) = v17;
  *((_QWORD *)a1 + 11) = v18;
  return result;
}

void sub_1C21BAFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception a14)
{
  boost::archive::archive_exception::~archive_exception(&a14);
  _Unwind_Resume(a1);
}

_QWORD *boost::archive::detail::basic_oarchive::register_basic_serializer(boost::archive::detail::basic_oarchive *this, const boost::archive::detail::basic_oserializer *a2)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t v4;
  const boost::archive::detail::basic_oserializer *v6;
  __int16 v7;
  char v8;

  v2 = *((_QWORD *)this + 4);
  v3 = (uint64_t **)(v2 + 32);
  v4 = *(_QWORD *)(v2 + 48);
  v6 = a2;
  v7 = v4;
  v8 = 0;
  return std::__tree<boost::archive::detail::basic_oarchive_impl::cobject_type>::__emplace_unique_key_args<boost::archive::detail::basic_oarchive_impl::cobject_type,boost::archive::detail::basic_oarchive_impl::cobject_type const&>(v3, (uint64_t)&v6, (uint64_t)&v6);
}

uint64_t boost::archive::detail::basic_oarchive::get_flags(boost::archive::detail::basic_oarchive *this)
{
  return **((unsigned int **)this + 4);
}

uint64_t boost::archive::detail::basic_oarchive::get_helper_collection(boost::archive::detail::basic_oarchive *this)
{
  return (uint64_t)this + 8;
}

_QWORD *std::__tree<boost::archive::detail::basic_oarchive_impl::aobject>::__emplace_unique_key_args<boost::archive::detail::basic_oarchive_impl::aobject,boost::archive::detail::basic_oarchive_impl::aobject const&>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = std::__tree<boost::archive::detail::basic_oarchive_impl::aobject>::__find_equal<boost::archive::detail::basic_oarchive_impl::aobject>((uint64_t)a1, &v9, a2);
  v6 = (_QWORD *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x30uLL);
    v6[4] = *(_QWORD *)a3;
    *((_WORD *)v6 + 20) = *(_WORD *)(a3 + 8);
    *((_DWORD *)v6 + 11) = *(_DWORD *)(a3 + 12);
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t *std::__tree<boost::archive::detail::basic_oarchive_impl::aobject>::__find_equal<boost::archive::detail::basic_oarchive_impl::aobject>(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  int v7;
  uint64_t *v8;
  unint64_t v9;
  int v10;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = *((__int16 *)a3 + 4);
    while (1)
    {
      while (1)
      {
        v8 = v4;
        v9 = v4[4];
        if (v6 >= v9)
          break;
LABEL_4:
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_12;
      }
      if (v6 <= v9)
      {
        v10 = *((__int16 *)v8 + 20);
        if (v7 < v10)
          goto LABEL_4;
        if (v10 >= v7)
          goto LABEL_12;
      }
      result = v8 + 1;
      v4 = (uint64_t *)v8[1];
      if (!v4)
        goto LABEL_12;
    }
  }
  v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

uint64_t **std::__tree<boost::archive::object_id_type>::__emplace_unique_key_args<boost::archive::object_id_type,boost::archive::object_id_type const&>(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

_QWORD *std::__tree<boost::archive::detail::basic_oarchive_impl::cobject_type>::__emplace_unique_key_args<boost::archive::detail::basic_oarchive_impl::cobject_type,boost::archive::detail::basic_oarchive_impl::cobject_type const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  _QWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__find_equal<boost::archive::detail::basic_iarchive_impl::cobject_type>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x30uLL);
    v6[4] = *(_QWORD *)a3;
    *((_WORD *)v6 + 20) = *(_WORD *)(a3 + 8);
    *((_BYTE *)v6 + 42) = *(_BYTE *)(a3 + 10);
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

_QWORD ***boost::scoped_ptr<boost::archive::detail::basic_oarchive_impl>::~scoped_ptr(_QWORD ***a1)
{
  _QWORD **v2;

  v2 = *a1;
  if (*a1)
  {
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy((uint64_t)(v2 + 7), v2[8]);
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy((uint64_t)(v2 + 4), v2[5]);
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy((uint64_t)(v2 + 1), v2[2]);
    operator delete(v2);
  }
  return a1;
}

uint64_t boost::archive::detail::basic_serializer_map::type_info_pointer_compare::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return boost::serialization::extended_type_info::operator<(*a2, *a3);
}

uint64_t boost::archive::detail::basic_serializer_map::insert(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;

  v3 = a2;
  std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::__emplace_unique_key_args<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer const* const&>(a1, &v3, (uint64_t *)&v3);
  return 1;
}

void boost::archive::detail::basic_serializer_map::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t **v3;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;

  v3 = a1 + 1;
  v2 = *a1;
  if (*a1 != (uint64_t *)(a1 + 1))
  {
    do
    {
      v6 = (uint64_t *)v2[1];
      if (v2[4] == a2)
      {
        v9 = v2;
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = (uint64_t *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (uint64_t *)v9[2];
            v8 = *v7 == (_QWORD)v9;
            v9 = v7;
          }
          while (!v8);
        }
        std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::__remove_node_pointer(a1, v2);
        operator delete(v2);
      }
      else if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v2[2];
          v8 = *v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
    }
    while (v7 != (uint64_t *)v3);
  }
}

uint64_t boost::archive::detail::basic_serializer_map::find(boost::archive::detail::basic_serializer_map *this, const boost::serialization::extended_type_info *a2)
{
  _QWORD *v3;
  const boost::serialization::extended_type_info **v5;
  const boost::serialization::extended_type_info *v6;

  v5 = &v6;
  v6 = a2;
  v3 = (_QWORD *)std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::find<boost::archive::detail::basic_serializer const*>((uint64_t)this, (uint64_t **)&v5);
  if ((_QWORD *)((char *)this + 8) == v3)
    return 0;
  else
    return v3[4];
}

uint64_t *std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::__emplace_unique_key_args<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer const* const&>(uint64_t **a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::__find_equal<boost::archive::detail::basic_serializer const*>((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    v6[4] = *a3;
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t *std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::__find_equal<boost::archive::detail::basic_serializer const*>(uint64_t a1, _QWORD *a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v7;

  v5 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        if (!boost::serialization::extended_type_info::operator<(**a3, *(_QWORD *)v4[4]))
          break;
        v4 = (uint64_t *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!boost::serialization::extended_type_info::operator<(*(_QWORD *)v7[4], **a3))
        break;
      v5 = v7 + 1;
      v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (uint64_t *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t *std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::find<boost::archive::detail::basic_serializer const*>(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = boost::serialization::extended_type_info::operator<(**(_QWORD **)(v3 + 32), **a2);
    v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || boost::serialization::extended_type_info::operator<(**a2, **(_QWORD **)(v5 + 32)))
    return v2;
  return v5;
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load(_QWORD *a1, _BYTE *a2)
{
  _QWORD *result;

  result = boost::archive::basic_text_iprimitive<std::istream>::load<short>(a1);
  *a2 = 0;
  return result;
}

{
  _QWORD *result;

  result = boost::archive::basic_text_iprimitive<std::istream>::load<short>(a1);
  *a2 = 0;
  return result;
}

{
  _QWORD *result;

  result = boost::archive::basic_text_iprimitive<std::istream>::load<unsigned short>(a1);
  *a2 = 0;
  return result;
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load<short>(_QWORD *a1)
{
  _QWORD *result;
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)MEMORY[0x1C3BB97A8](*a1);
  if ((*((_BYTE *)result + *(_QWORD *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_1C21BBA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load<unsigned short>(_QWORD *a1)
{
  _QWORD *result;
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)MEMORY[0x1C3BB97B4](*a1);
  if ((*((_BYTE *)result + *(_QWORD *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_1C21BBBAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load(_QWORD *a1, _DWORD *a2)
{
  _QWORD *result;

  result = boost::archive::basic_text_iprimitive<std::istream>::load<int>(a1);
  *a2 = 0;
  return result;
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load<int>(_QWORD *a1)
{
  _QWORD *result;
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)MEMORY[0x1C3BB9784](*a1);
  if ((*((_BYTE *)result + *(_QWORD *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_1C21BBC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_text_iprimitive<std::istream>::basic_text_iprimitive(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  std::ios_base *v12;
  std::locale *rdbuf;
  std::locale v15;
  std::locale v16;
  std::locale v17;

  *(_QWORD *)a1 = a2;
  v6 = *a2;
  v7 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)v7 + 2);
  v8 = (char *)a2 + *(_QWORD *)(v6 - 24);
  *(_QWORD *)(a1 + 40) = &off_1E7BEBEA8;
  v9 = a1 + 40;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = *((_QWORD *)v8 + 2);
  *(_QWORD *)(a1 + 48) = 0;
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v10 = std::locale::id::__get(MEMORY[0x1E0DE4BE8]);
  std::locale::__install_ctor((std::locale *)(v9 + 16), &v17, (std::locale::facet *)v9, v10);
  std::locale::~locale(&v17);
  v11 = *(_QWORD **)a1;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)a1;
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
  if ((a3 & 1) == 0)
  {
    std::istream::sync();
    v12 = (std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24));
    std::ios_base::getloc(v12);
    std::ios_base::imbue(v12, (const std::locale *)(v9 + 16));
    std::locale::~locale(&v17);
    rdbuf = (std::locale *)v12->__rdbuf_;
    if (rdbuf)
    {
      (*((void (**)(std::locale *, uint64_t))rdbuf->__locale_ + 2))(rdbuf, v9 + 16);
      std::locale::locale(&v16, rdbuf + 1);
      std::locale::operator=(rdbuf + 1, (const std::locale *)(v9 + 16));
      std::locale::~locale(&v16);
    }
    std::locale::~locale(&v15);
  }
  *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 8) &= ~1u;
  return a1;
}

{
  return __ZN5boost7archive21basic_text_iprimitiveINSt3__113basic_istreamIcNS2_11char_traitsIcEEEEEC2ERS6_b(a1, a2, a3);
}

void sub_1C21BBE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  std::locale *v14;
  std::locale *v15;

  std::locale::~locale(&a10);
  boost::archive::basic_istream_locale_saver<char,std::char_traits<char>>::~basic_istream_locale_saver(v15);
  std::locale::~locale(v14);
  MEMORY[0x1C3BB9A54](v13);
  *(_QWORD *)(*(_QWORD *)(v12 + 24) + 16) = *(_QWORD *)(v12 + 32);
  *(_DWORD *)(*(_QWORD *)(v12 + 8) + 8) = *(_DWORD *)(v12 + 16);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive(uint64_t a1)
{
  boost::archive::basic_istream_locale_saver<char,std::char_traits<char>>::~basic_istream_locale_saver((std::locale *)(a1 + 64));
  std::locale::~locale((std::locale *)(a1 + 56));
  MEMORY[0x1C3BB9A54](a1 + 40);
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_DWORD *)(a1 + 16);
  return a1;
}

{
  return __ZN5boost7archive21basic_text_iprimitiveINSt3__113basic_istreamIcNS2_11char_traitsIcEEEEED2Ev(a1);
}

uint64_t boost::archive::basic_text_iprimitive<std::istream>::load_binary(uint64_t result, _BYTE *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  char v8;
  __int16 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v3 = (_QWORD *)result;
    if ((*(_BYTE *)(*(_QWORD *)result + *(_QWORD *)(**(_QWORD **)result - 24) + 32) & 5) != 0)
    {
      boost::archive::archive_exception::archive_exception((uint64_t)v7, 8, 0, 0);
      boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v7);
    }
    v4 = a3;
    v7[0] = *(_QWORD *)result;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      boost::archive::iterators::transform_width<boost::archive::iterators::binary_from_base64<boost::archive::iterators::remove_whitespace<boost::archive::iterators::istream_iterator<char>>,int>,8,6,char>::fill((uint64_t)v7);
      LOBYTE(v9) = 0;
      *a2++ = HIBYTE(v9);
      --v4;
    }
    while (v4);
    v6 = MEMORY[0x1E0C80978];
    do
    {
      result = std::istream::get();
      if ((*(_BYTE *)(*v3 + *(_QWORD *)(*(_QWORD *)*v3 - 24) + 32) & 2) != 0)
        break;
      result = (result & 0x80) != 0
             ? __maskrune((char)result, 0x4000uLL)
             : *(_DWORD *)(v6 + 4 * (char)result + 60) & 0x4000u;
    }
    while (!(_DWORD)result);
  }
  return result;
}

void sub_1C21BBFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

void boost::archive::codecvt_null<char>::~codecvt_null()
{
  void *v0;

  v0 = (void *)MEMORY[0x1C3BB9A54]();
  operator delete(v0);
}

uint64_t boost::archive::codecvt_null<char>::do_always_noconv()
{
  return 1;
}

std::locale *boost::archive::basic_istream_locale_saver<char,std::char_traits<char>>::~basic_istream_locale_saver(std::locale *a1)
{
  std::ios_base *v2;
  std::locale *rdbuf;
  std::locale *v4;
  std::locale v6;
  std::locale v7;
  std::locale v8;

  std::istream::sync();
  v2 = (std::ios_base *)((char *)a1->__locale_ + *(_QWORD *)(*(_QWORD *)a1->__locale_ - 24));
  std::ios_base::getloc(v2);
  std::ios_base::imbue(v2, a1 + 1);
  std::locale::~locale(&v8);
  rdbuf = (std::locale *)v2->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, std::locale *))rdbuf->__locale_ + 2))(rdbuf, a1 + 1);
    v4 = rdbuf + 1;
    std::locale::locale(&v7, v4);
    std::locale::operator=(v4, a1 + 1);
    std::locale::~locale(&v7);
  }
  std::locale::~locale(&v6);
  std::locale::~locale(a1 + 1);
  return a1;
}

void sub_1C21BC0F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  __clang_call_terminate(a1);
}

uint64_t boost::archive::iterators::transform_width<boost::archive::iterators::binary_from_base64<boost::archive::iterators::remove_whitespace<boost::archive::iterators::istream_iterator<char>>,int>,8,6,char>::fill(uint64_t result)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  BOOL v8;

  v1 = result;
  v2 = 0;
  *(_BYTE *)(result + 33) = 0;
  v3 = *(_DWORD *)(result + 40);
  v4 = 8;
  do
  {
    if (v3)
    {
      v5 = *(_DWORD *)(v1 + 36);
    }
    else if (*(_BYTE *)(v1 + 44))
    {
      v5 = 0;
      *(_DWORD *)(v1 + 36) = 0;
      v3 = v4;
    }
    else
    {
      v5 = boost::iterators::transform_iterator<boost::archive::iterators::detail::to_6_bit<int>,boost::archive::iterators::remove_whitespace<boost::archive::iterators::istream_iterator<char>>,boost::use_default,boost::use_default>::dereference(v1);
      *(_BYTE *)(v1 + 17) = 0;
      result = *(_QWORD *)v1;
      if (*(_QWORD *)v1)
        result = std::istream::ignore();
      *(_DWORD *)(v1 + 36) = v5;
      v2 = *(unsigned __int8 *)(v1 + 33);
      v3 = 6;
    }
    if (v3 >= v4)
      v6 = v4;
    else
      v6 = v3;
    v7 = (v2 << v6) | (v5 >> (v3 - v6)) & ~(-1 << v6);
    v2 = (((_BYTE)v2 << v6) | (v5 >> (v3 - v6)) & ~(-1 << v6));
    *(_BYTE *)(v1 + 33) = v7;
    *(_DWORD *)(v1 + 40) = v3 - v6;
    v8 = v4 > v3;
    v3 -= v6;
    v4 -= v6;
  }
  while (v8);
  *(_BYTE *)(v1 + 32) = 1;
  return result;
}

uint64_t boost::iterators::transform_iterator<boost::archive::iterators::detail::to_6_bit<int>,boost::archive::iterators::remove_whitespace<boost::archive::iterators::istream_iterator<char>>,boost::use_default,boost::use_default>::dereference(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  unsigned int v4;

  if (!*(_BYTE *)(a1 + 17))
  {
    v2 = MEMORY[0x1E0C80978];
    while (1)
    {
      v3 = std::istream::peek();
      if ((v3 & 0x80) != 0)
      {
        if (!__maskrune(v3, 0x4000uLL))
        {
LABEL_9:
          *(_BYTE *)(a1 + 17) = 1;
          break;
        }
      }
      else if ((*(_DWORD *)(v2 + 4 * v3 + 60) & 0x4000) == 0)
      {
        goto LABEL_9;
      }
      if (*(_QWORD *)a1)
        std::istream::ignore();
    }
  }
  v4 = (char)std::istream::peek();
  return boost::archive::iterators::detail::to_6_bit<int>::operator()(a1 + 24, v4);
}

uint64_t boost::archive::iterators::detail::to_6_bit<int>::operator()(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  void (**v3)(boost::archive::iterators::dataflow_exception *__hidden);
  int v4;

  if (a2 > 0x7F
    || (result = boost::archive::iterators::detail::to_6_bit<int>::operator()(int)const::lookup_table[a2],
        (_DWORD)result == -1))
  {
    v3 = off_1E7BEC4B0;
    v4 = 1;
    boost::serialization::throw_exception<boost::archive::iterators::dataflow_exception>((uint64_t)&v3);
  }
  return result;
}

void sub_1C21BC2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9)
{
  std::exception::~exception(&a9);
  _Unwind_Resume(a1);
}

void boost::serialization::throw_exception<boost::archive::iterators::dataflow_exception>(uint64_t a1)
{
  _DWORD *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  *(_QWORD *)exception = off_1E7BEC4B0;
  exception[2] = *(_DWORD *)(a1 + 8);
}

void boost::archive::iterators::dataflow_exception::~dataflow_exception(std::exception *this)
{
  void *v1;

  std::exception::~exception(this);
  operator delete(v1);
}

const char *boost::archive::iterators::dataflow_exception::what(boost::archive::iterators::dataflow_exception *this)
{
  uint64_t v1;

  v1 = *((int *)this + 2);
  if (v1 > 4)
    return "unknown exception code";
  else
    return (&off_1E7BECEF0)[v1];
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

{
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<short>(a1);
}

{
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned short>(a1);
}

{
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<short>(a1);
}

{
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<int>(a1);
}

void sub_1C21BC3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::basic_text_oprimitive(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  std::ios_base *v12;
  std::locale *rdbuf;
  std::locale v15;
  std::locale v16;
  std::locale v17;

  *(_QWORD *)a1 = a2;
  v6 = *a2;
  v7 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)v7 + 2);
  v8 = (char *)a2 + *(_QWORD *)(v6 - 24);
  *(_QWORD *)(a1 + 40) = &off_1E7BEBEA8;
  v9 = a1 + 40;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = *((_QWORD *)v8 + 2);
  *(_QWORD *)(a1 + 48) = 0;
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v10 = std::locale::id::__get(MEMORY[0x1E0DE4BE8]);
  std::locale::__install_ctor((std::locale *)(v9 + 16), &v17, (std::locale::facet *)v9, v10);
  std::locale::~locale(&v17);
  v11 = *(_QWORD **)a1;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)a1;
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
  if ((a3 & 1) == 0)
  {
    std::ostream::flush();
    v12 = (std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24));
    std::ios_base::getloc(v12);
    std::ios_base::imbue(v12, (const std::locale *)(v9 + 16));
    std::locale::~locale(&v17);
    rdbuf = (std::locale *)v12->__rdbuf_;
    if (rdbuf)
    {
      (*((void (**)(std::locale *, uint64_t))rdbuf->__locale_ + 2))(rdbuf, v9 + 16);
      std::locale::locale(&v16, rdbuf + 1);
      std::locale::operator=(rdbuf + 1, (const std::locale *)(v9 + 16));
      std::locale::~locale(&v16);
    }
    std::locale::~locale(&v15);
  }
  *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 8) &= ~1u;
  return a1;
}

{
  return __ZN5boost7archive21basic_text_oprimitiveINSt3__113basic_ostreamIcNS2_11char_traitsIcEEEEEC2ERS6_b(a1, a2, a3);
}

void sub_1C21BC624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  std::locale *v14;
  std::locale *v15;

  std::locale::~locale(&a10);
  boost::archive::basic_ostream_locale_saver<char,std::char_traits<char>>::~basic_ostream_locale_saver(v15);
  std::locale::~locale(v14);
  MEMORY[0x1C3BB9A54](v13);
  *(_QWORD *)(*(_QWORD *)(v12 + 24) + 16) = *(_QWORD *)(v12 + 32);
  *(_DWORD *)(*(_QWORD *)(v12 + 8) + 8) = *(_DWORD *)(v12 + 16);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive(uint64_t a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  if (!MEMORY[0x1C3BB9B08]())
  {
    std::ios_base::getloc((const std::ios_base *)(*(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 - 24)));
    v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
    std::locale::~locale(&v4);
    std::ostream::put();
    std::ostream::flush();
  }
  boost::archive::basic_ostream_locale_saver<char,std::char_traits<char>>::~basic_ostream_locale_saver((std::locale *)(a1 + 64));
  std::locale::~locale((std::locale *)(a1 + 56));
  MEMORY[0x1C3BB9A54](a1 + 40);
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_DWORD *)(a1 + 16);
  return a1;
}

{
  return __ZN5boost7archive21basic_text_oprimitiveINSt3__113basic_ostreamIcNS2_11char_traitsIcEEEEED2Ev(a1);
}

void sub_1C21BC748(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  __clang_call_terminate(a1);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::put(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::put();
}

{
  return __ZN5boost7archive21basic_text_oprimitiveINSt3__113basic_ostreamIcNS2_11char_traitsIcEEEEE3putEc(a1);
}

void sub_1C21BC7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::put(uint64_t a1, _BYTE *a2)
{
  unsigned __int8 *v2;
  uint64_t result;

  if (*a2)
  {
    v2 = a2 + 1;
    do
      result = std::ostream::put();
    while (*v2++);
  }
  return result;
}

uint64_t *boost::archive::basic_text_oprimitive<std::ostream>::save_binary(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  char v12;
  int v13;
  char v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  char v18;
  int v19;
  char v20;
  int v21;
  _BYTE v22[144];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v3 = result;
    if ((*(_BYTE *)(*result + *(_QWORD *)(*(_QWORD *)*result - 24) + 32) & 5) != 0)
    {
      boost::archive::archive_exception::archive_exception((uint64_t)v22, 13, 0, 0);
      boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v22);
    }
    std::ostream::put();
    v6 = *v3;
    v16 = a2;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v9 = v6;
    v10 = a2 + a3;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    result = std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::ostream_iterator<char>>((uint64_t)&v16, (uint64_t)&v10, &v9, (uint64_t)v22);
    v7 = a3 % 3;
    if (v7)
      v8 = v6 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      result = (uint64_t *)std::ostream::put();
      if (v7 == 1)
        return (uint64_t *)std::ostream::put();
    }
  }
  return result;
}

{
  return __ZN5boost7archive21basic_text_oprimitiveINSt3__113basic_ostreamIcNS2_11char_traitsIcEEEEE11save_binaryEPKvm(result, a2, a3);
}

void sub_1C21BC984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::exception a20)
{
  boost::archive::archive_exception::~archive_exception(&a20);
  _Unwind_Resume(a1);
}

_QWORD *std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::ostream_iterator<char>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  __int16 v4;
  char v5;
  int v6;
  __int16 v7;
  char v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  int v15;
  char v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  char v20;
  int v21;
  char v22;
  int v23;

  v4 = *(_WORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 10);
  v6 = *(_DWORD *)(a1 + 12);
  v18 = *(_QWORD *)a1;
  v19 = v4;
  v20 = v5;
  v21 = v6;
  v22 = 0;
  v23 = *(_DWORD *)(a1 + 32);
  v7 = *(_WORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 10);
  v9 = *(_DWORD *)(a2 + 12);
  v12 = *(_QWORD *)a2;
  v13 = v7;
  v14 = v8;
  v15 = v9;
  v16 = 0;
  v17 = *(_DWORD *)(a2 + 32);
  v11 = *a3;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::ostream_iterator<char>,0>(&v18, &v12, &v11, a4);
}

_QWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::ostream_iterator<char>,0>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  __int16 v5;
  char v6;
  int v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  char v11;
  int v12;
  int v13;
  _QWORD *result;
  __int16 v15;
  char v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  char v23;
  int v24;
  char v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  char v29;
  int v30;
  char v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  char v35;
  int v36;
  int v37;
  uint64_t v38;

  v5 = *((_WORD *)a1 + 4);
  v6 = *((_BYTE *)a1 + 10);
  v7 = *((_DWORD *)a1 + 3);
  v8 = *((_DWORD *)a1 + 8);
  v9 = *a2;
  v10 = *((_WORD *)a2 + 4);
  v11 = *((_BYTE *)a2 + 10);
  v12 = *((_DWORD *)a2 + 3);
  v13 = *((_DWORD *)a2 + 8);
  v27 = *a1;
  v28 = v5;
  v29 = v6;
  v30 = v7;
  v31 = 0;
  v32 = v8;
  v22 = v10;
  v23 = v11;
  v24 = v12;
  v25 = 0;
  v26 = v13;
  v20 = *a3;
  v21 = v9;
  result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::ostream_iterator<char>>((uint64_t)&v27, &v21, &v20, (uint64_t)&v33);
  v15 = v34;
  v16 = v35;
  v17 = v36;
  v18 = v37;
  v19 = v38;
  *(_QWORD *)a4 = v33;
  *(_WORD *)(a4 + 8) = v15;
  *(_BYTE *)(a4 + 10) = v16;
  *(_DWORD *)(a4 + 12) = v17;
  *(_BYTE *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 32) = v18;
  *(_QWORD *)(a4 + 40) = v19;
  return result;
}

_QWORD *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::ostream_iterator<char>>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  _QWORD *result;
  int v11;
  int v12;
  __int16 v13;
  char v14;

  while (1)
  {
    v8 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 == *a2)
      break;
    v9 = *(_DWORD *)(a1 + 32);
LABEL_4:
    if (v9 != 76 && !*(_BYTE *)(a1 + 8))
      boost::archive::iterators::transform_width<char const*,6,8,char>::fill(a1);
    result = boost::archive::iterators::ostream_iterator<char>::put_val(a3);
    v11 = *(_DWORD *)(a1 + 32);
    if (v11 == 76)
    {
      v12 = 0;
    }
    else
    {
      v12 = v11 + 1;
      *(_BYTE *)(a1 + 8) = 0;
    }
    *(_DWORD *)(a1 + 32) = v12;
  }
  *(_BYTE *)(a1 + 16) = 1;
  v9 = *(_DWORD *)(a1 + 32);
  if (*(_DWORD *)(a1 + 12))
    goto LABEL_4;
  v13 = *(_WORD *)(a1 + 8);
  v14 = *(_BYTE *)(a1 + 10);
  *(_QWORD *)a4 = v8;
  *(_WORD *)(a4 + 8) = v13;
  *(_BYTE *)(a4 + 10) = v14;
  *(_DWORD *)(a4 + 12) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 32) = v9;
  *(_QWORD *)(a4 + 40) = *a3;
  return result;
}

uint64_t boost::archive::iterators::transform_width<char const*,6,8,char>::fill(uint64_t result)
{
  int v1;
  unsigned int v2;
  char v3;
  unsigned int v4;
  char *v5;
  unsigned int v6;
  BOOL v7;

  LOBYTE(v1) = 0;
  *(_BYTE *)(result + 9) = 0;
  v2 = *(_DWORD *)(result + 12);
  v3 = *(_BYTE *)(result + 10);
  v4 = 6;
  do
  {
    if (!v2)
    {
      if (*(_BYTE *)(result + 16))
      {
        v3 = 0;
        v2 = v4;
      }
      else
      {
        v5 = (char *)(*(_QWORD *)result)++;
        v3 = *v5;
        v2 = 8;
      }
      *(_BYTE *)(result + 10) = v3;
    }
    if (v2 >= v4)
      v6 = v4;
    else
      v6 = v2;
    v1 = (v1 << v6) | (v3 >> (v2 - v6)) & ~(-1 << v6);
    *(_BYTE *)(result + 9) = v1;
    *(_DWORD *)(result + 12) = v2 - v6;
    v7 = v4 > v2;
    v2 -= v6;
    v4 -= v6;
  }
  while (v7);
  *(_BYTE *)(result + 8) = 1;
  return result;
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<short>(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

void sub_1C21BCD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned short>(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

void sub_1C21BCDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<int>(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

void sub_1C21BCE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

std::locale *boost::archive::basic_ostream_locale_saver<char,std::char_traits<char>>::~basic_ostream_locale_saver(std::locale *a1)
{
  std::ios_base *v2;
  std::locale *rdbuf;
  std::locale *v4;
  std::locale v6;
  std::locale v7;
  std::locale v8;

  std::ostream::flush();
  v2 = (std::ios_base *)((char *)a1->__locale_ + *(_QWORD *)(*(_QWORD *)a1->__locale_ - 24));
  std::ios_base::getloc(v2);
  std::ios_base::imbue(v2, a1 + 1);
  std::locale::~locale(&v8);
  rdbuf = (std::locale *)v2->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, std::locale *))rdbuf->__locale_ + 2))(rdbuf, a1 + 1);
    v4 = rdbuf + 1;
    std::locale::locale(&v7, v4);
    std::locale::operator=(v4, a1 + 1);
    std::locale::~locale(&v7);
  }
  std::locale::~locale(&v6);
  std::locale::~locale(a1 + 1);
  return a1;
}

void sub_1C21BCF24(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  __clang_call_terminate(a1);
}

_QWORD *boost::archive::iterators::ostream_iterator<char>::put_val(_QWORD *a1)
{
  _QWORD *result;

  result = (_QWORD *)*a1;
  if (result)
  {
    result = (_QWORD *)std::ostream::put();
    if (*(_DWORD *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32))
      *a1 = 0;
  }
  return result;
}

uint64_t boost::archive::detail::archive_serializer_map<boost::archive::binary_iarchive>::insert(uint64_t *a1)
{
  uint64_t *instance;

  instance = boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::binary_iarchive>>::get_instance();
  return boost::archive::detail::basic_serializer_map::insert((uint64_t **)instance, a1);
}

void boost::archive::detail::archive_serializer_map<boost::archive::binary_iarchive>::erase(uint64_t a1)
{
  uint64_t *instance;

  if (!boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::binary_iarchive>>::get_is_destroyed(void)::is_destroyed_flag)
  {
    instance = boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::binary_iarchive>>::get_instance();
    boost::archive::detail::basic_serializer_map::erase((uint64_t **)instance, a1);
  }
}

uint64_t boost::archive::detail::archive_serializer_map<boost::archive::binary_iarchive>::find(const boost::serialization::extended_type_info *a1)
{
  uint64_t *instance;

  instance = boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::binary_iarchive>>::get_instance();
  return boost::archive::detail::basic_serializer_map::find((boost::archive::detail::basic_serializer_map *)instance, a1);
}

uint64_t boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::This(uint64_t a1)
{
  return a1 - 40;
}

uint64_t boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 64))(*a1, a2, 1);
  if (result != 1)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[144];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned long>(a1, (uint64_t)&v6);
  v4 = v6;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 64))(*a1, a2, v6);
  if (result != v4)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v7, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v7);
  }
  *(_BYTE *)(a2 + v6) = 0;
  return result;
}

{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[144];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned long>(a1, (uint64_t)&v6);
  v4 = 4 * v6;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 64))(*a1, a2, 4 * v6);
  if (result != v4)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v7, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v7);
  }
  *(_DWORD *)(a2 + 4 * v6) = 0;
  return result;
}

{
  return __ZN5boost7archive23basic_binary_iprimitiveINS0_15binary_iarchiveEcNSt3__111char_traitsIcEEE4loadERb(a1, a2);
}

void sub_1C21BD098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load_binary(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _BYTE v5[144];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 64))(*a1);
  if (result != a3)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v5, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v5);
  }
  return result;
}

void sub_1C21BD134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

void boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load(_QWORD *a1, std::string *a2)
{
  std::string::size_type v4;
  uint64_t *v5;
  std::string::size_type __n;
  _BYTE v7[144];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  __n = 0;
  boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned long>(a1, (uint64_t)&__n);
  std::string::resize(a2, __n, 0);
  v4 = __n;
  if (__n)
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = (uint64_t *)a2;
    else
      v5 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
    if ((*(uint64_t (**)(_QWORD, uint64_t *, std::string::size_type))(*(_QWORD *)*a1 + 64))(*a1, v5, __n) != v4)
    {
      boost::archive::archive_exception::archive_exception((uint64_t)v7, 8, 0, 0);
      boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v7);
    }
  }
}

{
  __ZN5boost7archive23basic_binary_iprimitiveINS0_15binary_iarchiveEcNSt3__111char_traitsIcEEE4loadERNS3_12basic_stringIcS5_NS3_9allocatorIcEEEE(a1, a2);
}

void sub_1C21BD214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned long>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 64))(*a1, a2, 8);
  if (result != 8)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C21BD2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load(_QWORD *a1, std::wstring *a2)
{
  uint64_t *v4;
  std::wstring::size_type v5;
  uint64_t result;
  std::wstring::size_type __n;
  _BYTE v8[144];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  __n = 0;
  boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned long>(a1, (uint64_t)&__n);
  std::wstring::resize(a2, __n, 0);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = (uint64_t *)a2;
  else
    v4 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
  v5 = 4 * __n;
  result = (*(uint64_t (**)(_QWORD, uint64_t *, std::wstring::size_type))(*(_QWORD *)*a1 + 64))(*a1, v4, 4 * __n);
  if (result != v5)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v8, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v8);
  }
  return result;
}

void sub_1C21BD390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

void sub_1C21BD460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

void sub_1C21BD534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::init(_QWORD *a1)
{
  uint64_t result;
  int v3;
  char v4;
  _BYTE v5[144];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = 0;
  boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned char>(a1, (uint64_t)&v4);
  if (v4 != 4)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v5, 6, "size of int", 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v5);
  }
  boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned char>(a1, (uint64_t)&v4);
  if (v4 != 8)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v5, 6, "size of long", 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v5);
  }
  boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned char>(a1, (uint64_t)&v4);
  if (v4 != 4)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v5, 6, "size of float", 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v5);
  }
  boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned char>(a1, (uint64_t)&v4);
  if (v4 != 8)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v5, 6, "size of double", 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v5);
  }
  v3 = 0;
  result = boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<int>(a1, (uint64_t)&v3);
  if (v3 != 1)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v5, 6, "endian setting", 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v5);
  }
  return result;
}

{
  return __ZN5boost7archive23basic_binary_iprimitiveINS0_15binary_iarchiveEcNSt3__111char_traitsIcEEE4initEv(a1);
}

void sub_1C21BD6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned char>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 64))(*a1, a2, 1);
  if (result != 1)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C21BD784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<int>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 64))(*a1, a2, 4);
  if (result != 4)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C21BD820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

std::locale *boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::basic_binary_iprimitive(std::locale *a1, const std::locale *a2, char a3)
{
  std::locale::facet *v5;
  const std::locale *v6;
  uint64_t v7;
  std::locale *locale;
  std::locale v10;
  std::locale v11;

  a1->__locale_ = (std::locale::__imp *)a2;
  a1[1].__locale_ = (std::locale::__imp *)&off_1E7BEBEA8;
  v5 = (std::locale::facet *)&a1[1];
  a1[2].__locale_ = 0;
  a1[3].__locale_ = (std::locale::__imp *)a2;
  v6 = a2 + 1;
  std::locale::locale(a1 + 4, a2 + 1);
  std::locale::locale(&v11, v6);
  v7 = std::locale::id::__get(MEMORY[0x1E0DE4BE8]);
  std::locale::__install_ctor(a1 + 5, &v11, v5, v7);
  std::locale::~locale(&v11);
  if ((a3 & 1) == 0)
  {
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)a1->__locale_ + 48))(a1->__locale_);
    locale = (std::locale *)a1->__locale_;
    (*(void (**)(std::locale::__imp *, std::locale *))(*(_QWORD *)a1->__locale_ + 16))(a1->__locale_, a1 + 5);
    std::locale::locale(&v10, locale + 1);
    std::locale::operator=(locale + 1, a1 + 5);
    std::locale::~locale(&v10);
  }
  return a1;
}

{
  return __ZN5boost7archive23basic_binary_iprimitiveINS0_15binary_iarchiveEcNSt3__111char_traitsIcEEEC2ERNS3_15basic_streambufIcS5_EEb(a1, a2, a3);
}

void sub_1C21BD928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  uint64_t v10;
  std::locale *v11;
  std::locale *v12;

  std::locale::~locale(v12);
  boost::archive::basic_streambuf_locale_saver<char,std::char_traits<char>>::~basic_streambuf_locale_saver(v11);
  MEMORY[0x1C3BB9A54](v10);
  _Unwind_Resume(a1);
}

std::locale *boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::~basic_binary_iprimitive(std::locale *a1)
{
  std::locale::~locale(a1 + 5);
  boost::archive::basic_streambuf_locale_saver<char,std::char_traits<char>>::~basic_streambuf_locale_saver(a1 + 3);
  MEMORY[0x1C3BB9A54](&a1[1]);
  return a1;
}

{
  std::locale::~locale(a1 + 5);
  boost::archive::basic_streambuf_locale_saver<char,std::char_traits<char>>::~basic_streambuf_locale_saver(a1 + 3);
  MEMORY[0x1C3BB9A54](&a1[1]);
  return a1;
}

{
  return __ZN5boost7archive23basic_binary_iprimitiveINS0_15binary_iarchiveEcNSt3__111char_traitsIcEEED2Ev(a1);
}

uint64_t boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::load_override(uint64_t a1, BOOL *a2)
{
  _QWORD *v4;
  uint64_t result;
  BOOL v6;
  BOOL v7;
  char v8;
  unsigned __int16 v9;

  boost::archive::detail::basic_iarchive::get_library_version(a1, &v9);
  v4 = (_QWORD *)(a1 + 40);
  if (v9 < 7u)
  {
    v7 = 0;
    result = boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load(v4, (uint64_t)&v7);
    v6 = v7;
  }
  else
  {
    v8 = 0;
    result = boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<signed char>(v4, (uint64_t)&v8);
    v6 = v8 != 0;
  }
  *a2 = v6;
  return result;
}

uint64_t boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::load_override(uint64_t a1, _WORD *a2)
{
  uint64_t result;
  __int16 v5;
  unsigned __int16 v6;

  boost::archive::detail::basic_iarchive::get_library_version(a1, &v6);
  if (v6 >= 8u)
    return boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<boost::archive::class_id_type>((_QWORD *)(a1 + 40), (uint64_t)a2);
  v5 = 0;
  result = boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<short>((_QWORD *)(a1 + 40), (uint64_t)&v5);
  *a2 = v5;
  return result;
}

{
  return __ZN5boost7archive21basic_binary_iarchiveINS0_15binary_iarchiveEE13load_overrideERNS0_13class_id_typeE(a1, a2);
}

uint64_t boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::load_override(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  int v5;
  _QWORD *v6;
  int v7;
  unsigned __int8 v8;
  unsigned __int16 v9;
  unsigned __int8 v10;
  unsigned __int16 v11;

  boost::archive::detail::basic_iarchive::get_library_version(a1, &v11);
  if (v11 >= 8u)
    return boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<boost::archive::version_type>((_QWORD *)(a1 + 40), (uint64_t)a2);
  if (v11 == 7)
  {
    v10 = 0;
    result = boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned char>((_QWORD *)(a1 + 40), (uint64_t)&v10);
    v5 = v10;
  }
  else if (v11 < 6u)
  {
    v6 = (_QWORD *)(a1 + 40);
    if (v11 < 3u)
    {
      v7 = 0;
      result = boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned int>(v6, (uint64_t)&v7);
      v5 = v7;
    }
    else
    {
      v8 = 0;
      result = boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned char>(v6, (uint64_t)&v8);
      v5 = v8;
    }
  }
  else
  {
    v9 = 0;
    result = boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned short>((_QWORD *)(a1 + 40), (uint64_t)&v9);
    v5 = v9;
  }
  *a2 = v5;
  return result;
}

{
  uint64_t result;
  int v5;
  unsigned __int16 v6;

  boost::archive::detail::basic_iarchive::get_library_version(a1, &v6);
  if (v6 >= 7u)
    return boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<boost::serialization::item_version_type>((_QWORD *)(a1 + 40), (uint64_t)a2);
  v5 = 0;
  result = boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned int>((_QWORD *)(a1 + 40), (uint64_t)&v5);
  *a2 = v5;
  return result;
}

{
  return __ZN5boost7archive21basic_binary_iarchiveINS0_15binary_iarchiveEE13load_overrideERNS0_12version_typeE(a1, a2);
}

{
  return __ZN5boost7archive21basic_binary_iarchiveINS0_15binary_iarchiveEE13load_overrideERNS_13serialization17item_version_typeE(a1, a2);
}

uint64_t boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::load_override(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  unsigned int v5;
  unsigned __int16 v6;

  boost::archive::detail::basic_iarchive::get_library_version(a1, &v6);
  if (v6 >= 6u)
    return boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<boost::serialization::collection_size_type>((_QWORD *)(a1 + 40), (uint64_t)a2);
  v5 = 0;
  result = boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned int>((_QWORD *)(a1 + 40), (uint64_t)&v5);
  *a2 = v5;
  return result;
}

{
  return __ZN5boost7archive21basic_binary_iarchiveINS0_15binary_iarchiveEE13load_overrideERNS_13serialization20collection_size_typeE(a1, a2);
}

void boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::load_override(uint64_t a1, void **a2)
{
  size_t size;
  std::string *p_src;
  std::string::size_type v6;
  std::string __src;
  _BYTE v8[144];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  memset(&__src, 0, sizeof(__src));
  std::string::reserve(&__src, 0x80uLL);
  boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load((_QWORD *)(a1 + 40), &__src);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __src.__r_.__value_.__l.__size_;
    if (__src.__r_.__value_.__l.__size_ >= 0x80)
    {
      boost::archive::archive_exception::archive_exception((uint64_t)v8, 9, 0, 0);
      boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v8);
    }
    p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    p_src = &__src;
  }
  memcpy(*a2, p_src, size);
  v6 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
  if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = __src.__r_.__value_.__l.__size_;
  *((_BYTE *)*a2 + v6) = 0;
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
}

{
  __ZN5boost7archive21basic_binary_iarchiveINS0_15binary_iarchiveEE13load_overrideERNS0_15class_name_typeE(a1, a2);
}

void sub_1C21BDD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::exception a15)
{
  boost::archive::archive_exception::~archive_exception(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::init(uint64_t a1)
{
  uint64_t v2;
  boost::archive *v3;
  const char *v4;
  const char *v5;
  size_t size;
  std::string *p_p;
  _QWORD *v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  int v15;
  __int16 v16;
  std::string __p;
  _WORD v18[72];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  memset(&__p, 0, sizeof(__p));
  v2 = a1 + 40;
  boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load((_QWORD *)(a1 + 40), &__p);
  v4 = boost::archive::BOOST_ARCHIVE_SIGNATURE(v3);
  v5 = v4;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  if (size != strlen(v4)
    || ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (p_p = &__p)
      : (p_p = (std::string *)__p.__r_.__value_.__r.__words[0]),
        memcmp(p_p, v5, size)))
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v18, 3, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v18);
  }
  v8 = *(_QWORD **)v2;
  v9 = *(unsigned __int8 **)(*(_QWORD *)v2 + 24);
  if (v9 == *(unsigned __int8 **)(*(_QWORD *)v2 + 32))
  {
    v10 = (*(uint64_t (**)(_QWORD *))(*v8 + 80))(v8);
  }
  else
  {
    v8[3] = v9 + 1;
    v10 = *v9;
  }
  if (v10 >= 6)
  {
    if (v10 == 6)
    {
      v11 = *(_QWORD *)v2;
      v13 = (unsigned __int8 **)(*(_QWORD *)v2 + 24);
      v12 = *v13;
      v14 = *(unsigned __int8 **)(*(_QWORD *)v2 + 32);
      goto LABEL_18;
    }
    v11 = *(_QWORD *)v2;
    v13 = (unsigned __int8 **)(*(_QWORD *)v2 + 24);
    v12 = *v13;
    v14 = *(unsigned __int8 **)(*(_QWORD *)v2 + 32);
    if (v10 > 7)
    {
LABEL_18:
      if (v12 != v14)
      {
LABEL_19:
        *v13 = v12 + 1;
        goto LABEL_23;
      }
      goto LABEL_28;
    }
    if (v12 == v14)
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
    else
      v15 = *v12;
    if (!v15)
    {
      v11 = *(_QWORD *)v2;
      v13 = (unsigned __int8 **)(*(_QWORD *)v2 + 24);
      v12 = *v13;
      if (*v13 != *(unsigned __int8 **)(*(_QWORD *)v2 + 32))
        goto LABEL_19;
LABEL_28:
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 80))(v11);
    }
  }
LABEL_23:
  v16 = v10;
  boost::archive::detail::basic_iarchive::set_library_version(a1, &v16);
  boost::archive::BOOST_ARCHIVE_VERSION(v18);
  if (v18[0] < (unsigned __int16)v10)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v18, 4, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v18);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

{
  __ZN5boost7archive21basic_binary_iarchiveINS0_15binary_iarchiveEE4initEv(a1);
}

void sub_1C21BDF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::exception a17)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

boost::archive::detail::basic_iarchive *boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::basic_binary_iarchive(boost::archive::detail::basic_iarchive *a1, int a2)
{
  boost::archive::detail::basic_iarchive *result;

  result = boost::archive::detail::basic_iarchive::basic_iarchive(a1, a2);
  *(_QWORD *)result = &unk_1E7BEC2B8;
  return result;
}

{
  boost::archive::detail::basic_iarchive *result;

  result = boost::archive::detail::basic_iarchive::basic_iarchive(a1, a2);
  *(_QWORD *)result = &unk_1E7BEC2B8;
  return result;
}

uint64_t boost::archive::binary_iarchive_impl<boost::archive::binary_iarchive,char,std::char_traits<char>>::init(uint64_t result, char a2)
{
  uint64_t v2;

  if ((a2 & 1) == 0)
  {
    v2 = result;
    boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::init(result);
    return boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::init((_QWORD *)(v2 + 40));
  }
  return result;
}

std::locale *boost::archive::binary_iarchive_impl<boost::archive::binary_iarchive,char,std::char_traits<char>>::binary_iarchive_impl(std::locale *a1, const std::locale *a2, int a3)
{
  boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::basic_binary_iprimitive(a1 + 5, a2, (a3 & 2) != 0);
  boost::archive::detail::basic_iarchive::basic_iarchive((boost::archive::detail::basic_iarchive *)a1, a3);
  a1->__locale_ = (std::locale::__imp *)&unk_1E7BEC208;
  return a1;
}

{
  return __ZN5boost7archive20binary_iarchive_implINS0_15binary_iarchiveEcNSt3__111char_traitsIcEEEC2ERNS3_15basic_streambufIcS5_EEj(a1, a2, a3);
}

void sub_1C21BE05C(_Unwind_Exception *a1)
{
  std::locale *v1;

  boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::~basic_binary_iprimitive(v1);
  _Unwind_Resume(a1);
}

std::locale *boost::archive::binary_iarchive_impl<boost::archive::binary_iarchive,char,std::char_traits<char>>::binary_iarchive_impl(std::locale *a1, _QWORD *a2, int a3)
{
  boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::basic_binary_iprimitive(a1 + 5, *(const std::locale **)((char *)a2 + *(_QWORD *)(*a2 - 24) + 40), (a3 & 2) != 0);
  boost::archive::detail::basic_iarchive::basic_iarchive((boost::archive::detail::basic_iarchive *)a1, a3);
  a1->__locale_ = (std::locale::__imp *)&unk_1E7BEC208;
  return a1;
}

{
  return __ZN5boost7archive20binary_iarchive_implINS0_15binary_iarchiveEcNSt3__111char_traitsIcEEEC2ERNS3_13basic_istreamIcS5_EEj(a1, a2, a3);
}

void sub_1C21BE0DC(_Unwind_Exception *a1)
{
  std::locale *v1;

  boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::~basic_binary_iprimitive(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::common_iarchive<boost::archive::binary_iarchive>::vload(uint64_t a1, uint64_t a2)
{
  return boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<boost::archive::object_id_type>((_QWORD *)(a1 + 40), a2);
}

{
  return boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<boost::archive::tracking_type>((_QWORD *)(a1 + 40), a2);
}

std::locale *boost::archive::binary_iarchive_impl<boost::archive::binary_iarchive,char,std::char_traits<char>>::~binary_iarchive_impl(std::locale *a1)
{
  std::locale *v2;

  boost::archive::detail::basic_iarchive::~basic_iarchive((boost::archive::detail::basic_iarchive *)a1);
  std::locale::~locale(v2 + 10);
  boost::archive::basic_streambuf_locale_saver<char,std::char_traits<char>>::~basic_streambuf_locale_saver(a1 + 8);
  MEMORY[0x1C3BB9A54](&a1[6]);
  return a1;
}

void boost::archive::binary_iarchive_impl<boost::archive::binary_iarchive,char,std::char_traits<char>>::~binary_iarchive_impl(std::locale *a1)
{
  std::locale *v2;

  boost::archive::detail::basic_iarchive::~basic_iarchive((boost::archive::detail::basic_iarchive *)a1);
  std::locale::~locale(v2 + 10);
  boost::archive::basic_streambuf_locale_saver<char,std::char_traits<char>>::~basic_streambuf_locale_saver(a1 + 8);
  MEMORY[0x1C3BB9A54](&a1[6]);
  operator delete(a1);
}

void boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::~basic_binary_iarchive(boost::archive::detail::basic_iarchive *a1)
{
  void *v1;

  boost::archive::detail::basic_iarchive::~basic_iarchive(a1);
  operator delete(v1);
}

uint64_t boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::binary_iarchive>>::~singleton_wrapper(uint64_t a1)
{
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::binary_iarchive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

std::locale *boost::archive::basic_streambuf_locale_saver<char,std::char_traits<char>>::~basic_streambuf_locale_saver(std::locale *a1)
{
  std::locale *locale;
  std::locale v4;

  (*(void (**)(std::locale::__imp *))(*(_QWORD *)a1->__locale_ + 48))(a1->__locale_);
  locale = (std::locale *)a1->__locale_;
  (*(void (**)(std::locale::__imp *, std::locale *))(*(_QWORD *)a1->__locale_ + 16))(a1->__locale_, a1 + 1);
  std::locale::locale(&v4, ++locale);
  std::locale::operator=(locale, a1 + 1);
  std::locale::~locale(&v4);
  std::locale::~locale(a1 + 1);
  return a1;
}

uint64_t boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<signed char>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 64))(*a1, a2, 1);
  if (result != 1)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C21BE2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<boost::archive::class_id_type>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 64))(*a1, a2, 2);
  if (result != 2)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C21BE388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<short>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 64))(*a1, a2, 2);
  if (result != 2)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C21BE424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<boost::archive::version_type>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 64))(*a1, a2, 4);
  if (result != 4)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C21BE4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned short>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 64))(*a1, a2, 2);
  if (result != 2)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C21BE55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned int>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 64))(*a1, a2, 4);
  if (result != 4)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C21BE5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<boost::serialization::item_version_type>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 64))(*a1, a2, 4);
  if (result != 4)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C21BE694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<boost::serialization::collection_size_type>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 64))(*a1, a2, 8);
  if (result != 8)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C21BE730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<boost::archive::object_id_type>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 64))(*a1, a2, 4);
  if (result != 4)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C21BE7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<boost::archive::tracking_type>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 64))(*a1, a2, 1);
  if (result != 1)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C21BE868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::archive_serializer_map<boost::archive::binary_oarchive>::insert(uint64_t *a1)
{
  uint64_t *instance;

  instance = boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::binary_oarchive>>::get_instance();
  return boost::archive::detail::basic_serializer_map::insert((uint64_t **)instance, a1);
}

void boost::archive::detail::archive_serializer_map<boost::archive::binary_oarchive>::erase(uint64_t a1)
{
  uint64_t *instance;

  if (!boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::binary_oarchive>>::get_is_destroyed(void)::is_destroyed_flag)
  {
    instance = boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::binary_oarchive>>::get_instance();
    boost::archive::detail::basic_serializer_map::erase((uint64_t **)instance, a1);
  }
}

uint64_t boost::archive::detail::archive_serializer_map<boost::archive::binary_oarchive>::find(const boost::serialization::extended_type_info *a1)
{
  uint64_t *instance;

  instance = boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::binary_oarchive>>::get_instance();
  return boost::archive::detail::basic_serializer_map::find((boost::archive::detail::basic_serializer_map *)instance, a1);
}

uint64_t boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::This(uint64_t a1)
{
  return a1 - 40;
}

uint64_t boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save(_QWORD *a1, char a2)
{
  uint64_t result;
  char v3;
  _BYTE v4[144];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  result = (*(uint64_t (**)(_QWORD, char *, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, &v3, 1);
  if (result != 1)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v4, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v4);
  }
  return result;
}

void sub_1C21BE998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save_binary(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _BYTE v5[144];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 96))(*a1);
  if (result != a3)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v5, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v5);
  }
  return result;
}

void sub_1C21BEA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _BYTE v10[144];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = (char *)a2 + 23;
  v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = a2[1];
  v9 = v4;
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<unsigned long>(a1, (uint64_t)&v9);
  if (*v5 >= 0)
    v6 = a2;
  else
    v6 = (uint64_t *)*a2;
  v7 = v9;
  result = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, v6, v9);
  if (result != v7)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v10, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v10);
  }
  return result;
}

{
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _BYTE v10[144];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = (char *)a2 + 23;
  v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = a2[1];
  v9 = v4;
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<unsigned long>(a1, (uint64_t)&v9);
  if (*v5 >= 0)
    v6 = a2;
  else
    v6 = (uint64_t *)*a2;
  v7 = 4 * v9;
  result = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, v6, 4 * v9);
  if (result != v7)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v10, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v10);
  }
  return result;
}

{
  return __ZN5boost7archive23basic_binary_oprimitiveINS0_15binary_oarchiveEcNSt3__111char_traitsIcEEE4saveERKNS3_12basic_stringIcS5_NS3_9allocatorIcEEEE(a1, a2);
}

void sub_1C21BEB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<unsigned long>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, a2, 8);
  if (result != 8)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C21BEBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

void sub_1C21BECAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save(_QWORD *a1, char *__s)
{
  size_t v4;
  uint64_t result;
  size_t v6;
  _BYTE v7[144];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = strlen(__s);
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<unsigned long>(a1, (uint64_t)&v6);
  v4 = v6;
  result = (*(uint64_t (**)(_QWORD, char *, size_t))(*(_QWORD *)*a1 + 96))(*a1, __s, v6);
  if (result != v4)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v7, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v7);
  }
  return result;
}

void sub_1C21BED80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save(_QWORD *a1, __int32 *a2)
{
  uint64_t v4;
  uint64_t result;
  size_t v6;
  _BYTE v7[144];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = wcslen(a2);
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<unsigned long>(a1, (uint64_t)&v6);
  v4 = 4 * v6;
  result = (*(uint64_t (**)(_QWORD, __int32 *, size_t))(*(_QWORD *)*a1 + 96))(*a1, a2, 4 * v6);
  if (result != v4)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v7, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v7);
  }
  return result;
}

void sub_1C21BEE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::init(_QWORD *a1)
{
  int v3;
  char v4;
  char v5;
  char v6;
  char v7;

  v7 = 4;
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<unsigned char>(a1, (uint64_t)&v7);
  v6 = 8;
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<unsigned char>(a1, (uint64_t)&v6);
  v5 = 4;
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<unsigned char>(a1, (uint64_t)&v5);
  v4 = 8;
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<unsigned char>(a1, (uint64_t)&v4);
  v3 = 1;
  return boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<int>(a1, (uint64_t)&v3);
}

{
  return __ZN5boost7archive23basic_binary_oprimitiveINS0_15binary_oarchiveEcNSt3__111char_traitsIcEEE4initEv(a1);
}

uint64_t boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<unsigned char>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, a2, 1);
  if (result != 1)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C21BEF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<int>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, a2, 4);
  if (result != 4)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C21BF01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

std::locale *boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::basic_binary_oprimitive(std::locale *a1, const std::locale *a2, char a3)
{
  std::locale::facet *v5;
  const std::locale *v6;
  uint64_t v7;
  std::locale *locale;
  std::locale v10;
  std::locale v11;

  a1->__locale_ = (std::locale::__imp *)a2;
  a1[1].__locale_ = (std::locale::__imp *)&off_1E7BEBEA8;
  v5 = (std::locale::facet *)&a1[1];
  a1[2].__locale_ = 0;
  a1[3].__locale_ = (std::locale::__imp *)a2;
  v6 = a2 + 1;
  std::locale::locale(a1 + 4, a2 + 1);
  std::locale::locale(&v11, v6);
  v7 = std::locale::id::__get(MEMORY[0x1E0DE4BE8]);
  std::locale::__install_ctor(a1 + 5, &v11, v5, v7);
  std::locale::~locale(&v11);
  if ((a3 & 1) == 0)
  {
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)a1->__locale_ + 48))(a1->__locale_);
    locale = (std::locale *)a1->__locale_;
    (*(void (**)(std::locale::__imp *, std::locale *))(*(_QWORD *)a1->__locale_ + 16))(a1->__locale_, a1 + 5);
    std::locale::locale(&v10, locale + 1);
    std::locale::operator=(locale + 1, a1 + 5);
    std::locale::~locale(&v10);
  }
  return a1;
}

{
  return __ZN5boost7archive23basic_binary_oprimitiveINS0_15binary_oarchiveEcNSt3__111char_traitsIcEEEC2ERNS3_15basic_streambufIcS5_EEb(a1, a2, a3);
}

void sub_1C21BF124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  uint64_t v10;
  std::locale *v11;
  std::locale *v12;

  std::locale::~locale(v12);
  boost::archive::basic_streambuf_locale_saver<char,std::char_traits<char>>::~basic_streambuf_locale_saver(v11);
  MEMORY[0x1C3BB9A54](v10);
  _Unwind_Resume(a1);
}

std::locale *boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::~basic_binary_oprimitive(std::locale *a1)
{
  std::locale::~locale(a1 + 5);
  boost::archive::basic_streambuf_locale_saver<char,std::char_traits<char>>::~basic_streambuf_locale_saver(a1 + 3);
  MEMORY[0x1C3BB9A54](&a1[1]);
  return a1;
}

{
  std::locale::~locale(a1 + 5);
  boost::archive::basic_streambuf_locale_saver<char,std::char_traits<char>>::~basic_streambuf_locale_saver(a1 + 3);
  MEMORY[0x1C3BB9A54](&a1[1]);
  return a1;
}

{
  return __ZN5boost7archive23basic_binary_oprimitiveINS0_15binary_oarchiveEcNSt3__111char_traitsIcEEED2Ev(a1);
}

void boost::archive::basic_binary_oarchive<boost::archive::binary_oarchive>::save_override(boost::archive::detail::basic_oarchive *a1, char **a2)
{
  void *__p[2];
  char v4;

  std::string::basic_string[abi:ne180100]<0>(__p, *a2);
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save((_QWORD *)a1 + 5, (uint64_t *)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

{
  __ZN5boost7archive21basic_binary_oarchiveINS0_15binary_oarchiveEE13save_overrideERKNS0_15class_name_typeE(a1, a2);
}

void sub_1C21BF220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::archive::basic_binary_oarchive<boost::archive::binary_oarchive>::init(boost::archive *a1)
{
  char *v2;
  __int16 v3;
  void *__p[2];
  char v5;

  v2 = (char *)boost::archive::BOOST_ARCHIVE_SIGNATURE(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, v2);
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save((_QWORD *)a1 + 5, (uint64_t *)__p);
  boost::archive::BOOST_ARCHIVE_VERSION(&v3);
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::library_version_type>((_QWORD *)a1 + 5, (uint64_t)&v3);
  if (v5 < 0)
    operator delete(__p[0]);
}

{
  __ZN5boost7archive21basic_binary_oarchiveINS0_15binary_oarchiveEE4initEv(a1);
}

void sub_1C21BF2B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

boost::archive::detail::basic_oarchive *boost::archive::basic_binary_oarchive<boost::archive::binary_oarchive>::basic_binary_oarchive(boost::archive::detail::basic_oarchive *a1, int a2)
{
  boost::archive::detail::basic_oarchive *result;

  result = boost::archive::detail::basic_oarchive::basic_oarchive(a1, a2);
  *(_QWORD *)result = &unk_1E7BEC308;
  return result;
}

{
  boost::archive::detail::basic_oarchive *result;

  result = boost::archive::detail::basic_oarchive::basic_oarchive(a1, a2);
  *(_QWORD *)result = &unk_1E7BEC308;
  return result;
}

boost::archive *boost::archive::binary_oarchive_impl<boost::archive::binary_oarchive,char,std::char_traits<char>>::init(boost::archive *result, char a2)
{
  boost::archive *v2;

  if ((a2 & 1) == 0)
  {
    v2 = result;
    boost::archive::basic_binary_oarchive<boost::archive::binary_oarchive>::init(result);
    return (boost::archive *)boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::init((_QWORD *)v2 + 5);
  }
  return result;
}

std::locale *boost::archive::binary_oarchive_impl<boost::archive::binary_oarchive,char,std::char_traits<char>>::binary_oarchive_impl(std::locale *a1, const std::locale *a2, int a3)
{
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::basic_binary_oprimitive(a1 + 5, a2, (a3 & 2) != 0);
  boost::archive::detail::basic_oarchive::basic_oarchive((boost::archive::detail::basic_oarchive *)a1, a3);
  a1->__locale_ = (std::locale::__imp *)&unk_1E7BEC258;
  return a1;
}

{
  return __ZN5boost7archive20binary_oarchive_implINS0_15binary_oarchiveEcNSt3__111char_traitsIcEEEC2ERNS3_15basic_streambufIcS5_EEj(a1, a2, a3);
}

void sub_1C21BF3A0(_Unwind_Exception *a1)
{
  std::locale *v1;

  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::~basic_binary_oprimitive(v1);
  _Unwind_Resume(a1);
}

std::locale *boost::archive::binary_oarchive_impl<boost::archive::binary_oarchive,char,std::char_traits<char>>::binary_oarchive_impl(std::locale *a1, _QWORD *a2, int a3)
{
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::basic_binary_oprimitive(a1 + 5, *(const std::locale **)((char *)a2 + *(_QWORD *)(*a2 - 24) + 40), (a3 & 2) != 0);
  boost::archive::detail::basic_oarchive::basic_oarchive((boost::archive::detail::basic_oarchive *)a1, a3);
  a1->__locale_ = (std::locale::__imp *)&unk_1E7BEC258;
  return a1;
}

{
  return __ZN5boost7archive20binary_oarchive_implINS0_15binary_oarchiveEcNSt3__111char_traitsIcEEEC2ERNS3_13basic_ostreamIcS5_EEj(a1, a2, a3);
}

void sub_1C21BF420(_Unwind_Exception *a1)
{
  std::locale *v1;

  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::~basic_binary_oprimitive(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::common_oarchive<boost::archive::binary_oarchive>::vsave(boost::archive::detail::basic_oarchive *a1, uint64_t a2)
{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  return boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::archive::version_type>((_QWORD *)a1 + 5, a2);
}

{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  return boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::archive::object_id_type>((_QWORD *)a1 + 5, a2);
}

{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  return boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::archive::object_reference_type>((_QWORD *)a1 + 5, a2);
}

{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  return boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::archive::class_id_type>((_QWORD *)a1 + 5, a2);
}

{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  return boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::archive::class_id_reference_type>((_QWORD *)a1 + 5, a2);
}

{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  return boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::archive::tracking_type>((_QWORD *)a1 + 5, a2);
}

std::locale *boost::archive::binary_oarchive_impl<boost::archive::binary_oarchive,char,std::char_traits<char>>::~binary_oarchive_impl(std::locale *a1)
{
  std::locale *v2;

  boost::archive::detail::basic_oarchive::~basic_oarchive((boost::archive::detail::basic_oarchive *)a1);
  std::locale::~locale(v2 + 10);
  boost::archive::basic_streambuf_locale_saver<char,std::char_traits<char>>::~basic_streambuf_locale_saver(a1 + 8);
  MEMORY[0x1C3BB9A54](&a1[6]);
  return a1;
}

void boost::archive::binary_oarchive_impl<boost::archive::binary_oarchive,char,std::char_traits<char>>::~binary_oarchive_impl(std::locale *a1)
{
  std::locale *v2;

  boost::archive::detail::basic_oarchive::~basic_oarchive((boost::archive::detail::basic_oarchive *)a1);
  std::locale::~locale(v2 + 10);
  boost::archive::basic_streambuf_locale_saver<char,std::char_traits<char>>::~basic_streambuf_locale_saver(a1 + 8);
  MEMORY[0x1C3BB9A54](&a1[6]);
  operator delete(a1);
}

void boost::archive::basic_binary_oarchive<boost::archive::binary_oarchive>::~basic_binary_oarchive(boost::archive::detail::basic_oarchive *a1)
{
  void *v1;

  boost::archive::detail::basic_oarchive::~basic_oarchive(a1);
  operator delete(v1);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

uint64_t boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::binary_oarchive>>::~singleton_wrapper(uint64_t a1)
{
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::binary_oarchive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::library_version_type>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, a2, 2);
  if (result != 2)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C21BF758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::archive::version_type>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, a2, 4);
  if (result != 4)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C21BF7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::archive::object_id_type>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, a2, 4);
  if (result != 4)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C21BF890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::archive::object_reference_type>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, a2, 4);
  if (result != 4)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C21BF92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::archive::class_id_type>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, a2, 2);
  if (result != 2)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C21BF9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::archive::class_id_reference_type>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, a2, 2);
  if (result != 2)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C21BFA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::archive::tracking_type>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 96))(*a1, a2, 1);
  if (result != 1)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C21BFB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info::key_unregister(boost::serialization::extended_type_info *this)
{
  BOOL v1;
  uint64_t *instance;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  boost::serialization::extended_type_info *v8;

  if (*((_QWORD *)this + 2))
    v1 = boost::serialization::detail::singleton_wrapper<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_is_destroyed(void)::is_destroyed_flag == 0;
  else
    v1 = 0;
  if (v1)
  {
    instance = boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_instance();
    v8 = this;
    v4 = std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__lower_bound<boost::serialization::extended_type_info const*>((uint64_t)instance, (uint64_t *)&v8, (_QWORD *)instance[1], instance + 1);
    v8 = this;
    v5 = std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__upper_bound<boost::serialization::extended_type_info const*>((uint64_t)instance, (uint64_t *)&v8, (_QWORD *)instance[1], instance + 1);
    if (v4 != v5)
    {
      while ((boost::serialization::extended_type_info *)v4[4] != this)
      {
        v6 = (uint64_t *)v4[1];
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = (uint64_t *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (uint64_t *)v4[2];
            v1 = *v7 == (_QWORD)v4;
            v4 = v7;
          }
          while (!v1);
        }
        v4 = v7;
        if (v7 == v5)
          return;
      }
      std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::__remove_node_pointer((uint64_t **)instance, v4);
      operator delete(v4);
    }
  }
}

uint64_t boost::serialization::extended_type_info::find(boost::serialization::extended_type_info *this, const char *a2)
{
  uint64_t *instance;
  uint64_t *v4;
  uint64_t (***v6)(boost::serialization::detail::extended_type_info_arg *__hidden, const boost::serialization::extended_type_info *);
  uint64_t (**v7)(boost::serialization::detail::extended_type_info_arg *__hidden, const boost::serialization::extended_type_info *);
  int v8;
  boost::serialization::extended_type_info *v9;

  instance = boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_instance();
  v8 = 0;
  v9 = this;
  v6 = &v7;
  v7 = off_1E7BEBC70;
  v4 = std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::find<boost::serialization::extended_type_info const*>((uint64_t)instance, (uint64_t *)&v6);
  if (instance + 1 == v4)
    return 0;
  else
    return v4[4];
}

uint64_t boost::serialization::extended_type_info::operator<(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;

  if (a1 == a2)
    return 0;
  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a2 + 8);
  if (v2 == v3)
    return (**(uint64_t (***)(uint64_t))a1)(a1);
  else
    return v2 < v3;
}

uint64_t boost::serialization::extended_type_info::operator==(_DWORD *a1, _DWORD *a2)
{
  if (a1 == a2)
    return 1;
  if (a1[2] == a2[2])
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 8))(a1);
  return 0;
}

uint64_t boost::serialization::detail::extended_type_info_arg::is_less_than(boost::serialization::detail::extended_type_info_arg *this, const boost::serialization::extended_type_info *a2)
{
  return 0;
}

uint64_t boost::serialization::detail::extended_type_info_arg::is_equal(boost::serialization::detail::extended_type_info_arg *this, const boost::serialization::extended_type_info *a2)
{
  return 0;
}

uint64_t boost::serialization::detail::extended_type_info_arg::get_debug_info(boost::serialization::detail::extended_type_info_arg *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t boost::serialization::detail::extended_type_info_arg::construct(boost::serialization::detail::extended_type_info_arg *this, uint64_t a2, ...)
{
  return 0;
}

uint64_t boost::serialization::detail::singleton_wrapper<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::~singleton_wrapper(uint64_t a1)
{
  boost::serialization::detail::singleton_wrapper<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t *std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__emplace_multi<boost::serialization::extended_type_info const*>(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t **leaf_high;
  uint64_t v7;

  v4 = (uint64_t *)operator new(0x28uLL);
  v4[4] = *a2;
  leaf_high = (uint64_t **)std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__find_leaf_high((uint64_t)a1, &v7, v4 + 4);
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at(a1, v7, leaf_high, v4);
  return v4;
}

void sub_1C21BFD9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__find_leaf_high(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v6 = *a3;
    do
    {
      while (1)
      {
        v5 = v4;
        v7 = v4[4];
        if (v6 == v7)
          break;
        v8 = *(const char **)(v6 + 16);
        v9 = *(const char **)(v7 + 16);
        if (v8 == v9 || (strcmp(v8, v9) & 0x80000000) == 0)
          break;
        v4 = (_QWORD *)*v5;
        result = v5;
        if (!*v5)
          goto LABEL_11;
      }
      v4 = (_QWORD *)v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_11:
  *a2 = v5;
  return result;
}

_QWORD *std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__lower_bound<boost::serialization::extended_type_info const*>(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;

  if (a3)
  {
    v5 = a3;
    v6 = *a2;
    do
    {
      v7 = v5[4];
      if (v7 == v6 || (v8 = *(const char **)(v7 + 16), v9 = *(const char **)(v6 + 16), v8 == v9))
      {
        a4 = v5;
      }
      else if (strcmp(v8, v9) < 0)
      {
        ++v5;
      }
      else
      {
        a4 = v5;
      }
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  return a4;
}

_QWORD *std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__upper_bound<boost::serialization::extended_type_info const*>(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  int v10;
  _QWORD *v11;

  if (a3)
  {
    v5 = a3;
    v6 = *a2;
    do
    {
      v7 = v5[4];
      if (v6 == v7 || (v8 = *(const char **)(v6 + 16), v9 = *(const char **)(v7 + 16), v8 == v9))
      {
        v11 = v5 + 1;
      }
      else
      {
        v10 = strcmp(v8, v9);
        v11 = v5 + 1;
        if (v10 < 0)
        {
          v11 = v5;
          a4 = v5;
        }
      }
      v5 = (_QWORD *)*v11;
    }
    while (*v11);
  }
  return a4;
}

_QWORD *std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::find<boost::serialization::extended_type_info const*>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  const char *v7;
  const char *v8;

  v3 = (_QWORD *)(a1 + 8);
  v4 = std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__lower_bound<boost::serialization::extended_type_info const*>(a1, a2, *(_QWORD **)(a1 + 8), (_QWORD *)(a1 + 8));
  if (v3 == v4)
    return v3;
  v5 = v4;
  v6 = v4[4];
  if (*a2 != v6)
  {
    v7 = *(const char **)(*a2 + 16);
    v8 = *(const char **)(v6 + 16);
    if (v7 != v8 && strcmp(v7, v8) < 0)
      return v3;
  }
  return v5;
}

BOOL std::type_info::before[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if ((v2 & 0x8000000000000000) != 0 && (v3 & 0x8000000000000000) != 0)
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) >> 31;
  else
    return v2 < v3;
}

BOOL boost::serialization::typeid_system::extended_type_info_typeid_0::is_equal(boost::serialization::typeid_system::extended_type_info_typeid_0 *this, const boost::serialization::extended_type_info *a2)
{
  return std::type_info::operator==[abi:ne180100](*((_QWORD *)this + 3), *((_QWORD *)a2 + 3));
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

uint64_t *boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister(uint64_t *this)
{
  uint64_t v1;
  BOOL v2;
  uint64_t *instance;
  uint64_t *v4;
  uint64_t v5;

  v1 = (uint64_t)this;
  if (this[3])
    v2 = boost::serialization::detail::singleton_wrapper<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_is_destroyed(void)::is_destroyed_flag == 0;
  else
    v2 = 0;
  if (v2)
  {
    instance = boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_instance();
    v5 = v1;
    this = (uint64_t *)std::__tree<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>::find<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>((uint64_t)instance, &v5);
    if (instance + 1 != this)
    {
      v4 = this;
      do
      {
        std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::__remove_node_pointer((uint64_t **)instance, v4);
        operator delete(v4);
        v5 = v1;
        this = (uint64_t *)std::__tree<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>::find<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>((uint64_t)instance, &v5);
        v4 = this;
      }
      while (instance + 1 != this);
    }
  }
  *(_QWORD *)(v1 + 24) = 0;
  return this;
}

uint64_t boost::serialization::typeid_system::extended_type_info_typeid_0::get_extended_type_info(boost::serialization::typeid_system::extended_type_info_typeid_0 *this, const std::type_info *a2)
{
  uint64_t *instance;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  _QWORD v8[3];
  const std::type_info *v9;

  boost::serialization::extended_type_info::extended_type_info((uint64_t)v8, 1, 0);
  v8[0] = off_1E7BEA360;
  v9 = a2;
  instance = boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_instance();
  v7 = v8;
  v4 = std::__tree<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>::find<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>((uint64_t)instance, &v7);
  if (instance + 1 == (uint64_t *)v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(v4 + 32);
  v8[0] = off_1E7BEA360;
  v9 = 0;
  boost::serialization::extended_type_info::~extended_type_info((boost::serialization::extended_type_info *)v8);
  return v5;
}

void sub_1C21C0158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  a14 = 0;
  boost::serialization::extended_type_info::~extended_type_info((boost::serialization::extended_type_info *)&a11);
  _Unwind_Resume(a1);
}

void boost::serialization::typeid_system::extended_type_info_typeid_arg::~extended_type_info_typeid_arg(boost::serialization::typeid_system::extended_type_info_typeid_arg *this)
{
  *(_QWORD *)this = off_1E7BEA360;
  *((_QWORD *)this + 3) = 0;
  boost::serialization::extended_type_info::~extended_type_info(this);
}

{
  void *v1;

  *(_QWORD *)this = off_1E7BEA360;
  *((_QWORD *)this + 3) = 0;
  boost::serialization::extended_type_info::~extended_type_info(this);
  operator delete(v1);
}

uint64_t boost::serialization::typeid_system::extended_type_info_typeid_0::get_debug_info(boost::serialization::typeid_system::extended_type_info_typeid_0 *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    return *(_QWORD *)(v1 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  else
    return 0;
}

uint64_t boost::serialization::typeid_system::extended_type_info_typeid_arg::construct(boost::serialization::typeid_system::extended_type_info_typeid_arg *this, uint64_t a2, ...)
{
  return 0;
}

uint64_t boost::serialization::detail::singleton_wrapper<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::~singleton_wrapper(uint64_t a1)
{
  boost::serialization::detail::singleton_wrapper<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t std::__tree<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>::find<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = (***(uint64_t (****)(_QWORD, _QWORD))(v3 + 32))(*(_QWORD *)(v3 + 32), *a2);
    v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || (**(unsigned int (***)(_QWORD, _QWORD))*a2)(*a2, *(_QWORD *)(v5 + 32)))
    return v2;
  return v5;
}

uint64_t boost::archive::detail::archive_serializer_map<boost::archive::text_iarchive>::insert(uint64_t *a1)
{
  uint64_t *instance;

  instance = boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_instance();
  return boost::archive::detail::basic_serializer_map::insert((uint64_t **)instance, a1);
}

void boost::archive::detail::archive_serializer_map<boost::archive::text_iarchive>::erase(uint64_t a1)
{
  uint64_t *instance;

  if (!boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_is_destroyed(void)::is_destroyed_flag)
  {
    instance = boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_instance();
    boost::archive::detail::basic_serializer_map::erase((uint64_t **)instance, a1);
  }
}

uint64_t boost::archive::detail::archive_serializer_map<boost::archive::text_iarchive>::find(const boost::serialization::extended_type_info *a1)
{
  uint64_t *instance;

  instance = boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_instance();
  return boost::archive::detail::basic_serializer_map::find((boost::archive::detail::basic_serializer_map *)instance, a1);
}

void boost::archive::basic_text_iarchive<boost::archive::text_iarchive>::load_override(uint64_t a1, void **a2)
{
  size_t size;
  std::string *p_src;
  std::string::size_type v6;
  std::string __src;
  _BYTE v8[144];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  memset(&__src, 0, sizeof(__src));
  std::string::reserve(&__src, 0x80uLL);
  boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load(a1, &__src);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __src.__r_.__value_.__l.__size_;
    if (__src.__r_.__value_.__l.__size_ >= 0x80)
    {
      boost::archive::archive_exception::archive_exception((uint64_t)v8, 9, 0, 0);
      boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v8);
    }
    p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    p_src = &__src;
  }
  memcpy(*a2, p_src, size);
  v6 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
  if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = __src.__r_.__value_.__l.__size_;
  *((_BYTE *)*a2 + v6) = 0;
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
}

{
  __ZN5boost7archive19basic_text_iarchiveINS0_13text_iarchiveEE13load_overrideERNS0_15class_name_typeE(a1, a2);
}

void sub_1C21C0408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::exception a15)
{
  boost::archive::archive_exception::~archive_exception(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void boost::archive::basic_text_iarchive<boost::archive::text_iarchive>::init(uint64_t a1)
{
  boost::archive *v2;
  const char *v3;
  const char *v4;
  size_t size;
  std::string *p_p;
  __int16 v7;
  unsigned __int16 v8;
  std::string __p;
  _WORD v10[72];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  memset(&__p, 0, sizeof(__p));
  boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load(a1, &__p);
  v3 = boost::archive::BOOST_ARCHIVE_SIGNATURE(v2);
  v4 = v3;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  if (size != strlen(v3)
    || ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (p_p = &__p)
      : (p_p = (std::string *)__p.__r_.__value_.__r.__words[0]),
        memcmp(p_p, v4, size)))
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v10, 3, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v10);
  }
  v8 = 0;
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::library_version_type>((_QWORD *)(a1 + 40));
  v7 = 0;
  boost::archive::detail::basic_iarchive::set_library_version(a1, &v7);
  boost::archive::BOOST_ARCHIVE_VERSION(v10);
  if (v10[0] < v8)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v10, 4, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v10);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

{
  __ZN5boost7archive19basic_text_iarchiveINS0_13text_iarchiveEE4initEv(a1);
}

void sub_1C21C0570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::exception a17)
{
  boost::archive::archive_exception::~archive_exception(&a17);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

boost::archive::detail::basic_iarchive *boost::archive::basic_text_iarchive<boost::archive::text_iarchive>::basic_text_iarchive(boost::archive::detail::basic_iarchive *a1, int a2)
{
  boost::archive::detail::basic_iarchive *result;

  result = boost::archive::detail::basic_iarchive::basic_iarchive(a1, a2);
  *(_QWORD *)result = &unk_1E7BEC158;
  return result;
}

{
  boost::archive::detail::basic_iarchive *result;

  result = boost::archive::detail::basic_iarchive::basic_iarchive(a1, a2);
  *(_QWORD *)result = &unk_1E7BEC158;
  return result;
}

void boost::archive::basic_text_iarchive<boost::archive::text_iarchive>::~basic_text_iarchive(boost::archive::detail::basic_iarchive *a1)
{
  void *v1;

  boost::archive::detail::basic_iarchive::~basic_iarchive(a1);
  operator delete(v1);
}

_QWORD *boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load(uint64_t a1, _DWORD *a2)
{
  _QWORD *result;

  result = boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((_QWORD *)(a1 + 40));
  *a2 = 0;
  return result;
}

{
  _QWORD *result;

  result = boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((_QWORD *)(a1 + 40));
  *a2 = 0;
  return result;
}

uint64_t boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load(uint64_t a1, _BYTE *a2)
{
  uint64_t result;

  boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long>((_QWORD *)(a1 + 40));
  std::istream::get();
  result = std::istream::read();
  *a2 = 0;
  return result;
}

uint64_t boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long>((_QWORD *)(a1 + 40));
  std::istream::get();
  result = std::istream::read();
  *a2 = 0;
  return result;
}

void boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load(uint64_t a1, std::string *a2)
{
  boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long>((_QWORD *)(a1 + 40));
  std::istream::get();
  std::string::resize(a2, 0, 0);
}

{
  __ZN5boost7archive18text_iarchive_implINS0_13text_iarchiveEE4loadERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(a1, a2);
}

uint64_t boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load(uint64_t a1, std::wstring *a2)
{
  boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long>((_QWORD *)(a1 + 40));
  std::wstring::resize(a2, 0, 0);
  std::istream::get();
  return std::istream::read();
}

boost::archive::detail::basic_iarchive *boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::text_iarchive_impl(boost::archive::detail::basic_iarchive *a1, uint64_t *a2, int a3)
{
  boost::archive::basic_text_iprimitive<std::istream>::basic_text_iprimitive((uint64_t)a1 + 40, a2, (a3 & 2) != 0);
  boost::archive::detail::basic_iarchive::basic_iarchive(a1, a3);
  *(_QWORD *)a1 = &unk_1E7BEC0A8;
  return a1;
}

{
  return __ZN5boost7archive18text_iarchive_implINS0_13text_iarchiveEEC2ERNSt3__113basic_istreamIcNS4_11char_traitsIcEEEEj(a1, a2, a3);
}

void sub_1C21C0884(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive(v1);
  _Unwind_Resume(a1);
}

boost::archive::detail::basic_iarchive *boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::~text_iarchive_impl(boost::archive::detail::basic_iarchive *a1)
{
  uint64_t v2;

  boost::archive::detail::basic_iarchive::~basic_iarchive(a1);
  boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive(v2 + 40);
  return a1;
}

{
  uint64_t v2;

  boost::archive::detail::basic_iarchive::~basic_iarchive(a1);
  boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive(v2 + 40);
  return a1;
}

void boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::~text_iarchive_impl(boost::archive::detail::basic_iarchive *a1)
{
  uint64_t v2;

  boost::archive::detail::basic_iarchive::~basic_iarchive(a1);
  boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive(v2 + 40);
  operator delete(a1);
}

_QWORD *boost::archive::detail::common_iarchive<boost::archive::text_iarchive>::vload(uint64_t a1, _DWORD *a2)
{
  _QWORD *result;

  result = boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((_QWORD *)(a1 + 40));
  *a2 = 0;
  return result;
}

_QWORD *boost::archive::detail::common_iarchive<boost::archive::text_iarchive>::vload(uint64_t a1)
{
  return boost::archive::basic_text_iprimitive<std::istream>::load<boost::archive::object_id_type>((_QWORD *)(a1 + 40));
}

{
  return boost::archive::basic_text_iprimitive<std::istream>::load<boost::archive::class_id_type>((_QWORD *)(a1 + 40));
}

{
  return boost::archive::basic_text_iprimitive<std::istream>::load<boost::archive::tracking_type>((_QWORD *)(a1 + 40));
}

uint64_t boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::~singleton_wrapper(uint64_t a1)
{
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::library_version_type>(_QWORD *a1)
{
  _QWORD *result;
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)MEMORY[0x1C3BB97B4](*a1);
  if ((*((_BYTE *)result + *(_QWORD *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_1C21C0A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>(_QWORD *a1)
{
  _QWORD *result;
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)MEMORY[0x1C3BB9790](*a1);
  if ((*((_BYTE *)result + *(_QWORD *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_1C21C0AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long>(_QWORD *a1)
{
  _QWORD *result;
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)MEMORY[0x1C3BB979C](*a1);
  if ((*((_BYTE *)result + *(_QWORD *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_1C21C0B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load<boost::archive::object_id_type>(_QWORD *a1)
{
  _QWORD *result;
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)MEMORY[0x1C3BB9790](*a1);
  if ((*((_BYTE *)result + *(_QWORD *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_1C21C0C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load<boost::archive::class_id_type>(_QWORD *a1)
{
  _QWORD *result;
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)MEMORY[0x1C3BB97A8](*a1);
  if ((*((_BYTE *)result + *(_QWORD *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_1C21C0CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load<boost::archive::tracking_type>(_QWORD *a1)
{
  _QWORD *result;
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)MEMORY[0x1C3BB976C](*a1);
  if ((*((_BYTE *)result + *(_QWORD *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_1C21C0D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::archive_serializer_map<boost::archive::text_oarchive>::insert(uint64_t *a1)
{
  uint64_t *instance;

  instance = boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_instance();
  return boost::archive::detail::basic_serializer_map::insert((uint64_t **)instance, a1);
}

void boost::archive::detail::archive_serializer_map<boost::archive::text_oarchive>::erase(uint64_t a1)
{
  uint64_t *instance;

  if (!boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_is_destroyed(void)::is_destroyed_flag)
  {
    instance = boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_instance();
    boost::archive::detail::basic_serializer_map::erase((uint64_t **)instance, a1);
  }
}

uint64_t boost::archive::detail::archive_serializer_map<boost::archive::text_oarchive>::find(const boost::serialization::extended_type_info *a1)
{
  uint64_t *instance;

  instance = boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_instance();
  return boost::archive::detail::basic_serializer_map::find((boost::archive::detail::basic_serializer_map *)instance, a1);
}

uint64_t boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = result;
  v2 = *(_DWORD *)(result + 40);
  switch(v2)
  {
    case 0:
      goto LABEL_5;
    case 2:
      return boost::archive::basic_text_oprimitive<std::ostream>::put((_QWORD *)(result + 48));
    case 1:
      result = boost::archive::basic_text_oprimitive<std::ostream>::put((_QWORD *)(result + 48));
LABEL_5:
      *(_DWORD *)(v1 + 40) = 2;
      break;
  }
  return result;
}

{
  return __ZN5boost7archive19basic_text_oarchiveINS0_13text_oarchiveEE8newtokenEv(result);
}

uint64_t boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newline(uint64_t result)
{
  *(_DWORD *)(result + 40) = 1;
  return result;
}

uint64_t boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::save_override(boost::archive::detail::basic_oarchive *a1)
{
  *((_DWORD *)a1 + 10) = 1;
  return boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::object_id_type>(a1);
}

void boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::save_override(boost::archive::detail::basic_oarchive *a1, char **a2)
{
  void *__p[2];
  char v4;

  std::string::basic_string[abi:ne180100]<0>(__p, *a2);
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save(a1, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

{
  __ZN5boost7archive19basic_text_oarchiveINS0_13text_oarchiveEE13save_overrideERKNS0_15class_name_typeE(a1, a2);
}

void sub_1C21C0ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::init(boost::archive *a1)
{
  char *v2;
  __int16 v3;
  void *__p[2];
  char v5;

  v2 = (char *)boost::archive::BOOST_ARCHIVE_SIGNATURE(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, v2);
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save(a1, (uint64_t)__p);
  boost::archive::BOOST_ARCHIVE_VERSION(&v3);
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::library_version_type>(a1);
  if (v5 < 0)
    operator delete(__p[0]);
}

{
  __ZN5boost7archive19basic_text_oarchiveINS0_13text_oarchiveEE4initEv(a1);
}

void sub_1C21C0F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

boost::archive::detail::basic_oarchive *boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::basic_text_oarchive(boost::archive::detail::basic_oarchive *a1, int a2)
{
  boost::archive::detail::basic_oarchive *result;

  result = boost::archive::detail::basic_oarchive::basic_oarchive(a1, a2);
  *(_QWORD *)result = &unk_1E7BEC1A8;
  *((_DWORD *)result + 10) = 0;
  return result;
}

{
  boost::archive::detail::basic_oarchive *result;

  result = boost::archive::detail::basic_oarchive::basic_oarchive(a1, a2);
  *(_QWORD *)result = &unk_1E7BEC1A8;
  *((_DWORD *)result + 10) = 0;
  return result;
}

void boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::~basic_text_oarchive(boost::archive::detail::basic_oarchive *a1)
{
  void *v1;

  boost::archive::detail::basic_oarchive::~basic_oarchive(a1);
  operator delete(v1);
}

uint64_t boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save(uint64_t a1)
{
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken(a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned int>((_QWORD *)(a1 + 48));
}

{
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken(a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned int>((_QWORD *)(a1 + 48));
}

_QWORD *boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save(boost::archive::detail::basic_oarchive *a1, char *__s)
{
  size_t v4;

  strlen(__s);
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned long>(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  v4 = strlen(__s);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a1 + 6), (uint64_t)__s, v4);
}

uint64_t boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save(boost::archive::detail::basic_oarchive *a1, __int32 *a2)
{
  wcslen(a2);
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned long>(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return std::ostream::write();
}

_QWORD *boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save(boost::archive::detail::basic_oarchive *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned long>(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *(_QWORD *)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a1 + 6), v5, v6);
}

{
  return __ZN5boost7archive18text_oarchive_implINS0_13text_oarchiveEE4saveERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(a1, a2);
}

uint64_t boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned long>(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return std::ostream::write();
}

boost::archive::detail::basic_oarchive *boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::text_oarchive_impl(boost::archive::detail::basic_oarchive *a1, uint64_t *a2, int a3)
{
  boost::archive::basic_text_oprimitive<std::ostream>::basic_text_oprimitive((uint64_t)a1 + 48, a2, (a3 & 2) != 0);
  boost::archive::detail::basic_oarchive::basic_oarchive(a1, a3);
  *((_DWORD *)a1 + 10) = 0;
  *(_QWORD *)a1 = &unk_1E7BEC0F8;
  return a1;
}

{
  return __ZN5boost7archive18text_oarchive_implINS0_13text_oarchiveEEC2ERNSt3__113basic_ostreamIcNS4_11char_traitsIcEEEEj(a1, a2, a3);
}

void sub_1C21C1268(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive(v1);
  _Unwind_Resume(a1);
}

boost::archive::detail::basic_oarchive *boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::~text_oarchive_impl(boost::archive::detail::basic_oarchive *a1)
{
  uint64_t v2;

  boost::archive::detail::basic_oarchive::~basic_oarchive(a1);
  boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive(v2 + 48);
  return a1;
}

{
  uint64_t v2;

  boost::archive::detail::basic_oarchive::~basic_oarchive(a1);
  boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive(v2 + 48);
  return a1;
}

void boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::~text_oarchive_impl(boost::archive::detail::basic_oarchive *a1)
{
  uint64_t v2;

  boost::archive::detail::basic_oarchive::~basic_oarchive(a1);
  boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive(v2 + 48);
  operator delete(a1);
}

uint64_t *boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save_binary(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v6;
  uint64_t *result;

  v6 = (uint64_t *)(a1 + 48);
  boost::archive::basic_text_oprimitive<std::ostream>::put((_QWORD *)(a1 + 48));
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a1);
  result = boost::archive::basic_text_oprimitive<std::ostream>::save_binary(v6, a2, a3);
  *(_DWORD *)(a1 + 40) = 1;
  return result;
}

uint64_t boost::archive::detail::common_oarchive<boost::archive::text_oarchive>::vsave(boost::archive::detail::basic_oarchive *a1)
{
  *((_DWORD *)a1 + 10) = 1;
  return boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::object_id_type>(a1);
}

uint64_t boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::~singleton_wrapper(uint64_t a1)
{
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::object_id_type>(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::archive::object_id_type>((_QWORD *)a1 + 6);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::archive::object_id_type>(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

void sub_1C21C1490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::library_version_type>(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::serialization::library_version_type>((_QWORD *)a1 + 6);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::serialization::library_version_type>(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

void sub_1C21C1578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned int>(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

void sub_1C21C161C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned long>(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned long>((_QWORD *)a1 + 6);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned long>(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

void sub_1C21C1704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1C3BB97E4](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1C3BB97F0](v13);
  return a1;
}

void sub_1C21C1820(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1C3BB97F0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1C21C1800);
}

void sub_1C21C1868(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_1C21C199C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::version_type>(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned int>((_QWORD *)a1 + 6);
}

uint64_t boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::object_reference_type>(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::archive::object_reference_type>((_QWORD *)a1 + 6);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::archive::object_reference_type>(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

void sub_1C21C1B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::class_id_type>(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::archive::class_id_type>((_QWORD *)a1 + 6);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::archive::class_id_type>(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

void sub_1C21C1C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::class_id_reference_type>(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::archive::class_id_reference_type>((_QWORD *)a1 + 6);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::archive::class_id_reference_type>(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

void sub_1C21C1D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::tracking_type>(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::archive::tracking_type>((_QWORD *)a1 + 6);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::archive::tracking_type>(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

void sub_1C21C1E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

_QWORD *Darts::DoubleArrayImpl<void,void,int,void>::~DoubleArrayImpl(_QWORD *a1)
{
  uint64_t v2;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E7BEA0E8;
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x1C3BB9B20](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  return a1;
}

void sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void **v4;
  unint64_t v5;
  void *__p[2];
  unsigned __int8 v7;

  v3 = *a1;
  std::stringbuf::str();
  if ((v7 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v5 = v7;
  else
    v5 = (unint64_t)__p[1];
  sentencepiece::util::Status::Status(a2, v3, v4, v5);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_1C21C1F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::util::StatusBuilder::~StatusBuilder(sentencepiece::util::StatusBuilder *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *((_QWORD *)this + 1) = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 8) = *(_QWORD *)(v2 + 24);
  *((_QWORD *)this + 2) = MEMORY[0x1E0DE4FB8] + 16;
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3BB9A90]((char *)this + 120);
}

void **sentencepiece::ModelInterface::model_proto(sentencepiece::ModelInterface *this)
{
  void **v1;
  void **result;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;

  v1 = (void **)*((_QWORD *)this + 1);
  if (!v1 || (v3 = *v1, result = v1 - 2, v3 != &unk_1E7BE8610))
  {
    v8 = 1;
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.cc", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") [", 3);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(model_proto = dynamic_cast<const ModelProto *>(model_proto_))", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"] ", 2);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v8);
    return 0;
  }
  return result;
}

void sub_1C21C2064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::~ModelInterface(sentencepiece::ModelInterface *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E7BE8848;
  sentencepiece::util::Status::~Status((sentencepiece::ModelInterface *)((char *)this + 96));
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = &off_1E7BEA0E8;
  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    MEMORY[0x1C3BB9B20](v2, 0x1000C8052888210);
    *((_QWORD *)this + 10) = 0;
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = &off_1E7BEA0E8;
  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    MEMORY[0x1C3BB9B20](v3, 0x1000C8052888210);
    *((_QWORD *)this + 6) = 0;
  }
  std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100]((uint64_t **)this + 2, 0);
}

const char *sentencepiece::ModelInterface::bos_piece(sentencepiece::ModelInterface *this)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  else
    return "<s>";
}

const char *sentencepiece::ModelInterface::eos_piece(sentencepiece::ModelInterface *this)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
  else
    return "</s>";
}

const char *sentencepiece::ModelInterface::pad_piece(sentencepiece::ModelInterface *this)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
  else
    return "<pad>";
}

uint64_t sentencepiece::ModelInterface::LookupPredictive@<X0>(sentencepiece::logging *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v10;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    v10 = 0;
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.cc", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v10);
  }
  return sentencepiece::util::Status::Status(a2, 12, "Not implemented.", 16);
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v10;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    v10 = 0;
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.cc", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v10);
  }
  return sentencepiece::util::Status::Status(a2, 12, "Not implemented.", 16);
}

void sub_1C21C22D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void sub_1C21C23C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::InitializePieces(sentencepiece::ModelInterface *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  uint64_t **v13;
  unint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  size_t v22;
  void *v23;
  unsigned int v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  size_t v30;
  __int128 *v31;
  const void *v32;
  const char *v33;
  size_t v34;
  void *v35;
  std::string *v36;
  __int128 v37;
  const char *v38;
  std::string *v39;
  __int128 v40;
  size_t v41;
  std::string v42;
  _DWORD *v43;
  void *__p;
  unint64_t v45;
  uint64_t *v46;
  _QWORD *v47[2];
  _QWORD **v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD **v51;
  _QWORD *v52;
  uint64_t v53;
  __int128 v54;
  int64_t v55;

  v52 = 0;
  v53 = 0;
  v50 = 0;
  v51 = &v52;
  v48 = &v49;
  v49 = 0;
  *((_DWORD *)this + 22) = -1;
  v47[0] = 0;
  v47[1] = 0;
  v46 = (uint64_t *)v47;
  LOBYTE(v54) = 0;
  std::vector<BOOL>::vector(&__p, 0x100uLL, (unsigned __int8 *)&v54);
  v2 = *((_QWORD *)this + 1);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  if (*(int *)(v3 + 64) < 1)
  {
LABEL_38:
    if (*((_DWORD *)this + 22) == -1)
    {
      sentencepiece::util::Status::Status(&v54, 13, "unk is not defined.", 19);
      sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54);
    }
    else
    {
      v25 = *(_BYTE **)(v3 + 80);
      if (!v25)
        v25 = &sentencepiece::_TrainerSpec_default_instance_;
      if (!v25[248]
        || (*(_QWORD *)&v54 = __p,
            DWORD2(v54) = 0,
            std::__find_BOOL[abi:ne180100]<false,std::vector<BOOL>,false>((uint64_t)&v54, v45, (uint64_t)&v42),
            v42.__r_.__value_.__l.__data_ == (char *)__p + 8 * (v45 >> 6))
        && LODWORD(v42.__r_.__value_.__r.__words[1]) == (v45 & 0x3F))
      {
        if (!v53
          || (sentencepiece::BuildTrie((_QWORD *)this + 3, &v51, (int *)this + 23, &v54),
              sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54),
              sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v54),
              (*(void (**)(__int128 *__return_ptr, sentencepiece::ModelInterface *))(*(_QWORD *)this + 16))(&v54, this), v26 = v54, sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v54), !v26))
        {
          if (!v50
            || (sentencepiece::BuildTrie((_QWORD *)this + 7, &v48, 0, &v54),
                sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54),
                sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v54),
                (*(void (**)(__int128 *__return_ptr, sentencepiece::ModelInterface *))(*(_QWORD *)this + 16))(&v54, this), v27 = v54, sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v54), !v27))
          {
            absl::make_unique<sentencepiece::normalizer::PrefixMatcher,std::set<std::string_view> &>((uint64_t)&v46, (uint64_t *)&v54);
            v28 = (uint64_t *)v54;
            *(_QWORD *)&v54 = 0;
            std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100]((uint64_t **)this + 2, v28);
            std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100]((uint64_t **)&v54, 0);
          }
        }
        goto LABEL_69;
      }
      sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54);
    }
LABEL_68:
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v54);
    goto LABEL_69;
  }
  v4 = 0;
  while (1)
  {
    v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(v3 + 56, v4);
    v6 = v5;
    v7 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFFFFELL;
    v8 = *(unsigned __int8 *)(v7 + 23);
    if (*(char *)(v7 + 23) < 0)
    {
      if (!*(_QWORD *)(v7 + 8))
      {
LABEL_50:
        sentencepiece::util::Status::Status(&v54, 13, "piece must not be empty.", 24);
        sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54);
        goto LABEL_68;
      }
    }
    else if (!*(_BYTE *)(v7 + 23))
    {
      goto LABEL_50;
    }
    v9 = *(_DWORD *)(v5 + 60);
    v10 = v9 > 5;
    v11 = (1 << v9) & 0x32;
    v12 = v10 || v11 == 0;
    v13 = (uint64_t **)(v12 ? &v48 : &v51);
    if ((v8 & 0x80) != 0)
    {
      v14 = *(_QWORD *)v7;
      v8 = *(_QWORD *)(v7 + 8);
    }
    else
    {
      v14 = v7;
    }
    *(_QWORD *)&v54 = v14;
    *((_QWORD *)&v54 + 1) = v8;
    LODWORD(v55) = v4;
    std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__emplace_unique_key_args<std::string_view,std::pair<std::string_view const,int> const&>(v13, (uint64_t)&v54, (uint64_t)&v54);
    if ((v15 & 1) == 0)
      break;
    v16 = *(_DWORD *)(v6 + 60);
    if (v16 == 4)
    {
      v17 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v17 + 23) < 0)
      {
        v19 = *(_QWORD *)v17;
        v18 = *(_QWORD *)(v17 + 8);
      }
      else
      {
        v18 = *(unsigned __int8 *)(v17 + 23);
        v19 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      }
      *(_QWORD *)&v54 = v19;
      *((_QWORD *)&v54 + 1) = v18;
      std::__tree<std::string_view>::__emplace_unique_key_args<std::string_view,std::string_view>(&v46, (uint64_t)&v54, &v54);
      v16 = *(_DWORD *)(v6 + 60);
    }
    if (v16 == 6)
    {
      v20 = *(_BYTE **)(v3 + 80);
      if (!v20)
        v20 = &sentencepiece::_TrainerSpec_default_instance_;
      if (!v20[248])
      {
        std::operator+<char>();
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v55 = v36->__r_.__value_.__r.__words[2];
        v54 = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        if (v55 >= 0)
          v38 = (const char *)&v54;
        else
          v38 = (const char *)v54;
LABEL_78:
        v41 = strlen(v38);
        sentencepiece::util::Status::Status(&v43, 13, v38, v41);
        sentencepiece::util::Status::operator=((uint64_t *)this + 12, &v43);
        sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v43);
        if (SHIBYTE(v55) < 0)
          operator delete((void *)v54);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        {
          v35 = (void *)v42.__r_.__value_.__r.__words[0];
          goto LABEL_82;
        }
        goto LABEL_69;
      }
      v21 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v21 + 23) < 0)
      {
        v23 = *(void **)v21;
        v22 = *(_QWORD *)(v21 + 8);
      }
      else
      {
        v22 = *(unsigned __int8 *)(v21 + 23);
        v23 = (void *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      v24 = sentencepiece::PieceToByte(v23, v22);
      if ((v24 & 0x80000000) != 0)
      {
        std::operator+<char>();
        v39 = std::string::append(&v42, " is invalid.");
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v55 = v39->__r_.__value_.__r.__words[2];
        v54 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (v55 >= 0)
          v38 = (const char *)&v54;
        else
          v38 = (const char *)v54;
        goto LABEL_78;
      }
      *(_QWORD *)((char *)__p + (((unint64_t)v24 >> 3) & 0x1FFFFFF8)) |= 1 << v24;
    }
    else if (v16 == 2)
    {
      if ((*((_DWORD *)this + 22) & 0x80000000) == 0)
      {
        sentencepiece::util::Status::Status(&v54, 13, "unk is already defined.", 23);
        sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54);
        goto LABEL_68;
      }
      *((_DWORD *)this + 22) = v4;
    }
    if (++v4 >= *(_DWORD *)(v3 + 64))
      goto LABEL_38;
  }
  v29 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v29 + 23) >= 0)
    v30 = *(unsigned __int8 *)(v29 + 23);
  else
    v30 = *(_QWORD *)(v29 + 8);
  v31 = &v54;
  std::string::basic_string[abi:ne180100]((uint64_t)&v54, v30 + 20);
  if (v55 < 0)
    v31 = (__int128 *)v54;
  if (v30)
  {
    if (*(char *)(v29 + 23) >= 0)
      v32 = (const void *)v29;
    else
      v32 = *(const void **)v29;
    memmove(v31, v32, v30);
  }
  strcpy((char *)v31 + v30, " is already defined.");
  if (v55 >= 0)
    v33 = (const char *)&v54;
  else
    v33 = (const char *)v54;
  v34 = strlen(v33);
  sentencepiece::util::Status::Status(&v42, 13, v33, v34);
  sentencepiece::util::Status::operator=((uint64_t *)this + 12, &v42);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v42);
  if (SHIBYTE(v55) < 0)
  {
    v35 = (void *)v54;
LABEL_82:
    operator delete(v35);
  }
LABEL_69:
  if (__p)
    operator delete(__p);
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy((uint64_t)&v46, v47[0]);
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy((uint64_t)&v48, v49);
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy((uint64_t)&v51, v52);
}

void sub_1C21C29F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20,uint64_t a21,char a22,_QWORD *a23,uint64_t a24,char a25,_QWORD *a26)
{
  uint64_t v26;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a15);
  if (*(char *)(v26 - 89) < 0)
    operator delete(*(void **)(v26 - 112));
  if (a14 < 0)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy((uint64_t)&a19, a20);
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy((uint64_t)&a22, a23);
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::PieceToByte(void *__src, size_t __len)
{
  unsigned __int8 v4;
  _QWORD *v5;
  void **v6;
  size_t v7;
  size_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  void *__dst[2];
  unint64_t v13;

  {
    sentencepiece::PieceToByte(std::string_view)::kMap = sentencepiece::PieceToByte(std::string_view)::$_0::operator()();
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (_QWORD *)sentencepiece::PieceToByte(std::string_view)::kMap;
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = (void *)__len;
    v13 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_9;
  }
  HIBYTE(v13) = __len;
  v6 = __dst;
  if (__len)
LABEL_9:
    memmove(v6, __src, __len);
  *((_BYTE *)v6 + __len) = 0;
  v9 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v5, (unsigned __int8 *)__dst);
  v10 = v9;
  if (SHIBYTE(v13) < 0)
  {
    operator delete(__dst[0]);
    if (v10)
      return v10[40];
  }
  else if (v9)
  {
    return v10[40];
  }
  return 0xFFFFFFFFLL;
}

void sub_1C21C2C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sentencepiece::BuildTrie(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  _QWORD *v30;
  char *v31;
  unint64_t v32;
  _DWORD *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  char *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  char *v47;
  int v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v55;
  _BYTE *v56;
  void *__p;
  char *v58;
  char *v59;
  void *v60;
  char *v61;
  char *v62;

  if (a2[2])
  {
    v60 = 0;
    v61 = 0;
    v62 = 0;
    __p = 0;
    v58 = 0;
    v59 = 0;
    v5 = a2 + 1;
    v4 = (_QWORD *)*a2;
    do
    {
      v6 = v4[4];
      v7 = v61;
      if (v61 >= v62)
      {
        v9 = (v61 - (_BYTE *)v60) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v10 = (v62 - (_BYTE *)v60) >> 2;
        if (v10 <= v9 + 1)
          v10 = v9 + 1;
        if ((unint64_t)(v62 - (_BYTE *)v60) >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v62, v11);
        else
          v12 = 0;
        v13 = &v12[8 * v9];
        *(_QWORD *)v13 = v6;
        v8 = v13 + 8;
        v15 = (char *)v60;
        v14 = v61;
        if (v61 != v60)
        {
          do
          {
            v16 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          v14 = (char *)v60;
        }
        v60 = v13;
        v61 = v8;
        v62 = &v12[8 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_QWORD *)v61 = v6;
        v8 = v7 + 8;
      }
      v61 = v8;
      v17 = v58;
      if (v58 >= v59)
      {
        v19 = (char *)__p;
        v20 = (v58 - (_BYTE *)__p) >> 2;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v22 = v59 - (_BYTE *)__p;
        if ((v59 - (_BYTE *)__p) >> 1 > v21)
          v21 = v22 >> 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
          v23 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v59, v23);
          v19 = (char *)__p;
          v17 = v58;
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[4 * v20];
        *(_DWORD *)v25 = *((_DWORD *)v4 + 12);
        v18 = v25 + 4;
        while (v17 != v19)
        {
          v26 = *((_DWORD *)v17 - 1);
          v17 -= 4;
          *((_DWORD *)v25 - 1) = v26;
          v25 -= 4;
        }
        __p = v25;
        v58 = v18;
        v59 = &v24[4 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_DWORD *)v58 = *((_DWORD *)v4 + 12);
        v18 = v17 + 4;
      }
      v58 = v18;
      v27 = (_QWORD *)v4[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v4[2];
          v29 = *v28 == (_QWORD)v4;
          v4 = v28;
        }
        while (!v29);
      }
      v4 = v28;
    }
    while (v28 != v5);
    if (Darts::DoubleArrayImpl<void,void,int,void>::build(a1, (v61 - (_BYTE *)v60) >> 3, (unint64_t)v60, 0, (unint64_t)__p, 0))
    {
      sentencepiece::util::Status::Status(a4, 13, "cannot build double-array.", 26);
    }
    else if (a3)
    {
      std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::vector(&v55, 0x400uLL);
      *a3 = 0;
      v30 = (_QWORD *)*a2;
      if ((_QWORD *)*a2 == v5)
        goto LABEL_81;
      v31 = (char *)v55;
      v32 = (v56 - (_BYTE *)v55) >> 4;
      v33 = (_DWORD *)a1[2];
      do
      {
        v34 = (_BYTE *)v30[4];
        v35 = v30[5];
        v36 = (*v33 >> 10 << ((*v33 >> 6) & 8));
        if (v35)
        {
          v37 = 0;
          v38 = 0;
          do
          {
            v39 = v34[v37];
            v40 = v36 ^ v39;
            v41 = v33[v40];
            if ((v41 & 0x800000FF) != (_DWORD)v39)
              break;
            v36 = v40 ^ (v41 >> 10 << ((v41 >> 6) & 8));
            if ((v41 & 0x100) != 0)
            {
              if (v38 < v32)
              {
                v42 = &v31[16 * v38];
                *(_DWORD *)v42 = v33[v36] & 0x7FFFFFFF;
                *((_QWORD *)v42 + 1) = v37 + 1;
              }
              ++v38;
            }
            ++v37;
          }
          while (v35 != v37);
        }
        else
        {
          v43 = *v34;
          if (*v34)
          {
            v38 = 0;
            v44 = 1;
            do
            {
              v45 = v36 ^ v43;
              v46 = v33[v45];
              if ((v46 & 0x800000FF) != v43)
                break;
              v36 = v45 ^ (v46 >> 10 << ((v46 >> 6) & 8));
              if ((v46 & 0x100) != 0)
              {
                if (v38 < v32)
                {
                  v47 = &v31[16 * v38];
                  *(_DWORD *)v47 = v33[v36] & 0x7FFFFFFF;
                  *((_QWORD *)v47 + 1) = v44;
                }
                ++v38;
              }
              v43 = v34[v44++];
            }
            while (v43);
          }
          else
          {
            LODWORD(v38) = 0;
          }
        }
        v48 = *a3;
        if (*a3 <= (int)v38)
          v48 = v38;
        *a3 = v48;
        v49 = (_QWORD *)v30[1];
        if (v49)
        {
          do
          {
            v50 = v49;
            v49 = (_QWORD *)*v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            v50 = (_QWORD *)v30[2];
            v29 = *v50 == (_QWORD)v30;
            v30 = v50;
          }
          while (!v29);
        }
        v30 = v50;
      }
      while (v50 != v5);
      if (!v48)
LABEL_81:
        sentencepiece::util::Status::Status(a4, 13, "no entry is found in the trie.", 30);
      else
        sentencepiece::util::Status::Status(a4);
      if (v55)
      {
        v56 = v55;
        operator delete(v55);
      }
    }
    else
    {
      sentencepiece::util::Status::Status(a4);
    }
    if (__p)
    {
      v58 = (char *)__p;
      operator delete(__p);
    }
    if (v60)
    {
      v61 = (char *)v60;
      operator delete(v60);
    }
  }
  else
  {
    sentencepiece::util::Status::Status(a4, 13, "no pieces are loaded.", 21);
  }
}

void sub_1C21C30D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t absl::make_unique<sentencepiece::normalizer::PrefixMatcher,std::set<std::string_view> &>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sentencepiece::normalizer::PrefixMatcher::PrefixMatcher(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1C21C3178(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::MemoryMappableString(sentencepiece::ModelInterface *this@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string *v8;
  std::string::size_type v9;
  int v10;
  int v11;
  int v12;
  std::string *p_p;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  const std::string::value_type *v18;
  uint64_t v19;
  std::string::size_type v20;
  std::string *v21;
  std::string *v22;
  std::string::size_type v23;
  uint64_t v24;
  const std::string::value_type *v25;
  char *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string *v29;
  std::string::size_type v30;
  std::string __p;
  std::string v32;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v32;
  else
    v4 = (std::string *)v32.__r_.__value_.__r.__words[0];
  LODWORD(v4->__r_.__value_.__l.__data_) = *((_DWORD *)this + 22);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v32;
  else
    v5 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    size = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v32;
  else
    v7 = (std::string *)v32.__r_.__value_.__r.__words[0];
  LODWORD(v7->__r_.__value_.__l.__data_) = *((_DWORD *)this + 23);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v32;
  else
    v8 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    v9 = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  sentencepiece::normalizer::PrefixMatcher::MemoryMappableString(*((sentencepiece::normalizer::PrefixMatcher **)this + 2), &v32);
  v10 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  v11 = v32.__r_.__value_.__r.__words[1];
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((v10 & 0x80u) == 0)
    v12 = v10;
  else
    v12 = v11;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(p_p->__r_.__value_.__l.__data_) = v12;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &__p;
  else
    v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v15 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v32;
  else
    v16 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    v17 = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v16, v17);
  sentencepiece::mmap_util::Padding(a2);
  v19 = *((_QWORD *)this + 4);
  v18 = (const std::string::value_type *)*((_QWORD *)this + 5);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  v20 = 4 * v19;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &__p;
  else
    v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(v21->__r_.__value_.__l.__data_) = v20;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &__p;
  else
    v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v23 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::append(a2, v18, v20);
  sentencepiece::mmap_util::Padding(a2);
  v26 = (char *)this + 64;
  v24 = *((_QWORD *)this + 8);
  v25 = (const std::string::value_type *)*((_QWORD *)v26 + 1);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  v27 = 4 * v24;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &__p;
  else
    v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(v28->__r_.__value_.__l.__data_) = v27;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &__p;
  else
    v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v30 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v29, v30);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::append(a2, v25, v27);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_1C21C3460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SplitIntoWords(unsigned __int8 *__s1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, unsigned __int8 ***a5@<X8>)
{
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 **v13;
  char *v14;
  char *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unsigned __int8 **v26;
  char *v27;
  char *v28;
  unsigned __int8 **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned __int8 **v36;
  char *v37;
  char *v38;
  unsigned __int8 **v39;
  unsigned __int8 **v40;
  int v41;
  _QWORD *v42;
  unsigned __int8 *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unsigned __int8 **v54;
  char *v55;
  char *v56;
  unsigned __int8 **v57;

  v6 = __s1;
  v8 = &__s1[a2];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((a3 & 1) == 0)
  {
    if (a2 < 1)
      return;
    v40 = 0;
    v41 = 0;
    v42 = a5 + 2;
    v43 = __s1;
    while (1)
    {
      v44 = asc_1C231416F[(unint64_t)*v43 >> 4];
      if ((int)v8 - (int)v43 < v44)
        v44 = (_DWORD)v8 - (_DWORD)v43;
      v45 = v44;
      if (v44 == 3)
      {
        v46 = memcmp(v43, "▁", 3uLL);
        v47 = v46 == 0;
        if (v43 == v6)
          goto LABEL_62;
        if ((v41 & a4 & 1) == 0 && !v46)
        {
          v47 = 1;
LABEL_62:
          if ((unint64_t)v40 >= *v42)
          {
            v48 = ((char *)v40 - (char *)*a5) >> 4;
            if ((unint64_t)(v48 + 1) >> 60)
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            v49 = *v42 - (_QWORD)*a5;
            v50 = v49 >> 3;
            if (v49 >> 3 <= (unint64_t)(v48 + 1))
              v50 = v48 + 1;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
              v51 = 0xFFFFFFFFFFFFFFFLL;
            else
              v51 = v50;
            v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::aobject>>((uint64_t)(a5 + 2), v51);
            v54 = (unsigned __int8 **)&v52[16 * v48];
            *v54 = v43;
            v54[1] = 0;
            v56 = (char *)*a5;
            v55 = (char *)a5[1];
            v57 = v54;
            if (v55 != (char *)*a5)
            {
              do
              {
                *((_OWORD *)v57 - 1) = *((_OWORD *)v55 - 1);
                v57 -= 2;
                v55 -= 16;
              }
              while (v55 != v56);
              v55 = (char *)*a5;
            }
            v40 = v54 + 2;
            *a5 = v57;
            a5[1] = v54 + 2;
            a5[2] = (unsigned __int8 **)&v52[16 * v53];
            if (v55)
              operator delete(v55);
          }
          else
          {
            *v40 = v43;
            v40[1] = 0;
            v40 += 2;
          }
          a5[1] = v40;
          goto LABEL_76;
        }
        if ((v41 & 1) != 0)
        {
          v47 = v41 & (v46 == 0);
          goto LABEL_76;
        }
      }
      else if (v43 == v6)
      {
        v47 = 0;
        goto LABEL_62;
      }
      v47 = 0;
LABEL_76:
      *(v40 - 1) += v45;
      v43 += v45;
      v41 = v47;
      if (v43 >= v8)
        return;
    }
  }
  if (a2 >= 1)
  {
    v9 = a5 + 2;
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::aobject>>((uint64_t)(a5 + 2), 1uLL);
    v12 = (unsigned __int8 **)&v10[2 * v11];
    *v10 = v6;
    v10[1] = 0;
    v13 = (unsigned __int8 **)(v10 + 2);
    v15 = (char *)*a5;
    v14 = (char *)a5[1];
    if (v14 != (char *)*a5)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v14 - 1);
        v10 -= 2;
        v14 -= 16;
      }
      while (v14 != v15);
      v14 = (char *)*a5;
    }
    *a5 = (unsigned __int8 **)v10;
    a5[1] = v13;
    a5[2] = v12;
    if (v14)
      operator delete(v14);
    v16 = 0;
    a5[1] = v13;
    do
    {
      v17 = asc_1C231416F[(unint64_t)*v6 >> 4];
      if ((int)v8 - (int)v6 < v17)
        v17 = (_DWORD)v8 - (_DWORD)v6;
      v18 = v17;
      if (v17 == 3)
      {
        v19 = memcmp(v6, "▁", 3uLL) == 0;
        if (v19)
          goto LABEL_18;
      }
      else
      {
        v19 = 0;
      }
      if ((v16 & a4) != 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          v20 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v20 + 1) >> 60)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v21 = *v9 - (_QWORD)*a5;
          v22 = v21 >> 3;
          if (v21 >> 3 <= (unint64_t)(v20 + 1))
            v22 = v20 + 1;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::aobject>>((uint64_t)(a5 + 2), v23);
          v26 = (unsigned __int8 **)&v24[16 * v20];
          *v26 = v6;
          v26[1] = 0;
          v28 = (char *)*a5;
          v27 = (char *)a5[1];
          v29 = v26;
          if (v27 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v29 - 1) = *((_OWORD *)v27 - 1);
              v29 -= 2;
              v27 -= 16;
            }
            while (v27 != v28);
            v27 = (char *)*a5;
          }
          v13 = v26 + 2;
          *a5 = v29;
          a5[1] = v26 + 2;
          a5[2] = (unsigned __int8 **)&v24[16 * v25];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        v16 = 0;
        a5[1] = v13;
        goto LABEL_31;
      }
LABEL_18:
      v16 = v19;
LABEL_31:
      *(v13 - 1) += v18;
      v6 += v18;
      if (v6 < v8 && v19 && (a4 & 1) == 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          v30 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v30 + 1) >> 60)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v31 = *v9 - (_QWORD)*a5;
          v32 = v31 >> 3;
          if (v31 >> 3 <= (unint64_t)(v30 + 1))
            v32 = v30 + 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
            v33 = 0xFFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::aobject>>((uint64_t)(a5 + 2), v33);
          v36 = (unsigned __int8 **)&v34[16 * v30];
          *v36 = v6;
          v36[1] = 0;
          v38 = (char *)*a5;
          v37 = (char *)a5[1];
          v39 = v36;
          if (v37 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v39 - 1) = *((_OWORD *)v37 - 1);
              v39 -= 2;
              v37 -= 16;
            }
            while (v37 != v38);
            v37 = (char *)*a5;
          }
          v13 = v36 + 2;
          *a5 = v39;
          a5[1] = v36 + 2;
          a5[2] = (unsigned __int8 **)&v34[16 * v35];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        a5[1] = v13;
      }
    }
    while (v6 < v8);
  }
}

void sub_1C21C391C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::ByteToPiece@<X0>(sentencepiece *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;

  v3 = this;
  return absl::StrFormat<unsigned char>("<0x%02X>", &v3, a2);
}

uint64_t absl::StrFormat<unsigned char>@<X0>(char *__format@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  char *v8;

  v6 = snprintf(0, 0, __format, *a2);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  std::string::resize((std::string *)a3, v6, 0);
  v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (char *)a3;
  else
    v8 = *(char **)a3;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a3 + 8);
  return snprintf(v8, v7 + 1, __format, *a2);
}

void sub_1C21C3A0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::PieceToByte(std::string_view)::$_0::operator()()
{
  uint64_t v0;
  int v1;
  void *__p[2];
  char v4;
  void **v5;

  v0 = operator new();
  v1 = 0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_DWORD *)(v0 + 32) = 1065353216;
  do
  {
    LOBYTE(v5) = v1;
    absl::StrFormat<unsigned char>("<0x%02X>", (unsigned __int8 *)&v5, (uint64_t)__p);
    v5 = __p;
    *((_BYTE *)std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v5)+ 40) = v1;
    if (v4 < 0)
      operator delete(__p[0]);
    ++v1;
  }
  while (v1 != 256);
  return v0;
}

void sub_1C21C3AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Darts::DoubleArrayImpl<void,void,int,void>::build(_QWORD *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, void (*a6)(unint64_t, uint64_t))
{
  uint64_t v9;
  size_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  int *v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  void (*v19)(unint64_t, uint64_t);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  unint64_t v25[4];

  v25[0] = a2;
  v25[1] = a3;
  v25[2] = a4;
  v25[3] = a5;
  v19 = a6;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  Darts::Details::DoubleArrayBuilder::build<int>(&v19, v25);
  v9 = *((_QWORD *)&v20 + 1);
  v10 = 4 * *((_QWORD *)&v20 + 1);
  v11 = (_DWORD *)operator new[]();
  v12 = v11;
  if (v9)
    bzero(v11, v10);
  v13 = *((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v14 = (int *)v20;
    v15 = v12;
    do
    {
      v16 = *v14++;
      *v15++ = v16;
      --v13;
    }
    while (v13);
  }
  a1[1] = 0;
  a1[2] = 0;
  v17 = a1[3];
  if (v17)
  {
    MEMORY[0x1C3BB9B20](v17, 0x1000C8052888210);
    a1[3] = 0;
  }
  a1[1] = v9;
  a1[2] = v12;
  a1[3] = v12;
  if (a6)
    a6(a2 + 1, a2 + 1);
  Darts::Details::DoubleArrayBuilder::~DoubleArrayBuilder((Darts::Details::DoubleArrayBuilder *)&v19);
  return 0;
}

void sub_1C21C3C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Darts::Details::DoubleArrayBuilder::~DoubleArrayBuilder((Darts::Details::DoubleArrayBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::NBestEncode(sentencepiece::logging *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    v9 = 0;
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.h", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v9);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_1C21C3CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::SampleEncode(sentencepiece::logging *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    v9 = 0;
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.h", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v9);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_1C21C3DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::SampleEncodeAndScore(sentencepiece::logging *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  void *__p;
  void *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    LOBYTE(__p) = 0;
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.h", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&__p);
  }
  __p = 0;
  v11 = 0;
  v13 = 0;
  v12 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v9 = (char *)operator new(0x20uLL);
  *a2 = v9;
  a2[1] = v9;
  a2[2] = v9 + 32;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v14, (uint64_t)v9);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_1C21C3F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = v14;
  *(_QWORD *)(v13 + 8) = v15;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float sentencepiece::ModelInterface::CalculateEntropy(sentencepiece::logging *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v8;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    v8 = 0;
    v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.h", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"(", 1);
    v2 = (_QWORD *)std::ostream::operator<<();
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)") ", 2);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"LOG(", 4);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"ERROR", 5);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v8);
  }
  return 0.0;
}

void sub_1C21C402C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::ModelInterface::IsSampleEncodeAvailable(sentencepiece::ModelInterface *this)
{
  return 0;
}

uint64_t sentencepiece::ModelInterface::IsNBestEncodeAvailable(sentencepiece::ModelInterface *this)
{
  return 0;
}

uint64_t sentencepiece::ModelInterface::IsSampleEncodeAndScoreAvailable(sentencepiece::ModelInterface *this)
{
  return 0;
}

uint64_t sentencepiece::ModelInterface::IsCalculateEntropyAvailable(sentencepiece::ModelInterface *this)
{
  return 0;
}

uint64_t sentencepiece::ModelInterface::IsUnused(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 128))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::IsUserDefined(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::IsByte(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 144))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::ByteFallbackEnabled(sentencepiece::ModelInterface *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

BOOL sentencepiece::ModelInterface::VerifyOutputsEquivalent(int a1, void *__s1, size_t a3, void *__s2, uint64_t a5)
{
  return a3 == a5 && memcmp(__s1, __s2, a3) == 0;
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1C21C41A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BB9A90](v1);
  _Unwind_Resume(a1);
}

void sentencepiece::error::Die::~Die(sentencepiece::error::Die *this)
{
  const std::locale::facet *v2;
  sentencepiece::error *v3;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x1E0DE4A50] + *(_QWORD *)(*MEMORY[0x1E0DE4A50] - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  v3 = (sentencepiece::error *)std::ostream::flush();
  if (*(_BYTE *)this)
    sentencepiece::error::Abort(v3);
}

void sub_1C21C4260(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  __clang_call_terminate(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1C21C4338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_BYTE *)i + 40) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_1C21C45C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned char>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned char>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>((char *)v4, *(__int128 **)v6, *(__int128 **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1C21C4E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<std::string_view,int>>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1C21C4ED0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<std::string_view,int>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 32);
      v3 -= 32;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 24) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

void std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 32);
      v4 -= 32;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 24) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void Darts::DoubleArrayImpl<void,void,int,void>::~DoubleArrayImpl(_QWORD *a1)
{
  uint64_t v2;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E7BEA0E8;
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x1C3BB9B20](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  JUMPOUT(0x1C3BB9B44);
}

uint64_t **std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

_OWORD *std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__emplace_unique_key_args<std::string_view,std::pair<std::string_view const,int> const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

_QWORD *std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (uint64_t)(v4 + 4);
        if (!std::less<std::string_view>::operator()[abi:ne180100](v7, a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string_view>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t std::less<std::string_view>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  size_t v4;
  const void *v5;
  size_t v6;
  size_t v7;
  int v8;
  unsigned int v9;

  v3 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(const void **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  if (v6 >= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(a3 + 8);
  v8 = memcmp(v3, v5, v7);
  if (v4 < v6)
    v9 = -1;
  else
    v9 = 1;
  if (v4 == v6)
    v9 = 0;
  if (v8)
    v9 = v8;
  return v9 >> 31;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t *std::__tree<std::string_view>::__emplace_unique_key_args<std::string_view,std::string_view>(uint64_t **a1, uint64_t a2, _OWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t std::__find_BOOL[abi:ne180100]<false,std::vector<BOOL>,false>@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = *(unsigned int *)(result + 8);
  v4 = *(_QWORD **)result;
  if (!(_DWORD)v3)
    goto LABEL_9;
  v5 = (64 - v3);
  if (v5 >= a2)
    v6 = a2;
  else
    v6 = (64 - v3);
  if (((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4) != 0)
  {
    v7 = __rbit64((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4);
LABEL_22:
    *(_QWORD *)a3 = v4;
    *(_DWORD *)(a3 + 8) = __clz(v7);
    return result;
  }
  if (v5 < a2)
  {
    a2 -= v6;
    *(_QWORD *)result = ++v4;
LABEL_9:
    if (a2 < 0x40)
    {
LABEL_12:
      if (!a2 || (v8 = (0xFFFFFFFFFFFFFFFFLL >> -(char)a2) & ~*v4) == 0)
      {
        *(_QWORD *)a3 = v4;
        *(_DWORD *)(a3 + 8) = a2;
        return result;
      }
    }
    else
    {
      while (*v4 == -1)
      {
        *(_QWORD *)result = ++v4;
        a2 -= 64;
        if (a2 <= 0x3F)
          goto LABEL_12;
      }
      v8 = ~*v4;
    }
    v7 = __rbit64(v8);
    goto LABEL_22;
  }
  v9 = v3 + a2 - 63;
  if (v9 < 0)
    v9 = v3 + a2;
  v10 = v9 >> 6;
  v11 = (v3 + a2) >> 6;
  if ((a2 & 0x8000000000000000) != 0)
    v11 = v10;
  *(_QWORD *)a3 = &v4[v11];
  *(_DWORD *)(a3 + 8) = ((_BYTE)v3 + (_BYTE)a2) & 0x3F;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void Darts::Details::DoubleArrayBuilder::build<int>(void (**a1)(unint64_t, uint64_t), unint64_t *a2)
{
  _OWORD v3[3];
  _OWORD v4[6];
  _OWORD v5[3];
  uint64_t v6;

  if (a2[3])
  {
    v6 = 0;
    memset(v5, 0, sizeof(v5));
    memset(v4, 0, sizeof(v4));
    memset(v3, 0, sizeof(v3));
    Darts::Details::DoubleArrayBuilder::build_dawg<int>(a1, a2, (Darts::Details::DawgBuilder *)v3);
    Darts::Details::DoubleArrayBuilder::build_from_dawg((Darts::Details::DoubleArrayBuilder *)a1, (const Darts::Details::DawgBuilder *)v3);
    Darts::Details::AutoPool<Darts::Details::DawgNode>::clear((uint64_t *)v3);
    Darts::Details::AutoPool<Darts::Details::DawgUnit>::clear((uint64_t *)&v3[1] + 1);
    Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)v4);
    Darts::Details::BitVector::clear((Darts::Details::BitVector *)((char *)&v4[1] + 8));
    Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)&v4[4] + 1);
    Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)v5);
    Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)&v5[1] + 1);
    v6 = 0;
    Darts::Details::DawgBuilder::~DawgBuilder((Darts::Details::DawgBuilder *)v3);
  }
  else
  {
    Darts::Details::DoubleArrayBuilder::build_from_keyset<int>((uint64_t)a1, a2);
  }
}

void sub_1C21C5818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Darts::Details::DawgBuilder::~DawgBuilder((Darts::Details::DawgBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *Darts::Details::AutoPool<unsigned char>::~AutoPool(uint64_t *a1)
{
  Darts::Details::AutoPool<unsigned char>::clear(a1);
  if (*a1)
  {
    MEMORY[0x1C3BB9B20](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t Darts::Details::AutoPool<unsigned char>::clear(uint64_t *a1)
{
  uint64_t result;

  Darts::Details::AutoPool<unsigned char>::resize(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x1C3BB9B20](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *Darts::Details::AutoPool<unsigned char>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)Darts::Details::AutoPool<unsigned char>::resize_buf(result, a2);
    v4 = v3[1];
  }
  if (v4 < a2)
    v3[1] = a2;
  return result;
}

uint64_t Darts::Details::AutoPool<unsigned char>::resize_buf(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_BYTE *)(v5 + i) = *(_BYTE *)(result + i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x1C3BB9B20);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

void Darts::Details::Exception::~Exception(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1C3BB9B44);
}

const char *Darts::Details::Exception::what(Darts::Details::Exception *this)
{
  if (*((_QWORD *)this + 1))
    return (const char *)*((_QWORD *)this + 1);
  else
    return "";
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::~AutoPool(uint64_t *a1)
{
  Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::clear(a1);
  if (*a1)
  {
    MEMORY[0x1C3BB9B20](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::clear(uint64_t *a1)
{
  uint64_t result;

  Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x1C3BB9B20](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;

  v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    v4 = a2;
  }
  if (a1[2] < a2)
  {
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize_buf(a1, a2);
    v4 = a1[1];
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

uint64_t Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize_buf(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x1C3BB9B20);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t Darts::Details::DoubleArrayBuilder::build_dawg<int>(void (**a1)(unint64_t, uint64_t), unint64_t *a2, Darts::Details::DawgBuilder *this)
{
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  unint64_t v11;
  int v12;
  int *v13;
  char v14;
  int v15;
  int v16;

  Darts::Details::DawgBuilder::init(this);
  if (*a2)
  {
    v6 = 0;
    do
    {
      v7 = a2[2];
      v8 = *(const char **)(a2[1] + 8 * v6);
      if (v7)
      {
        v9 = *(_QWORD *)(v7 + 8 * v6);
      }
      else
      {
        while (v8[v7++])
          ;
        v9 = v7 - 1;
      }
      v11 = a2[3];
      if (v11)
        v12 = *(_DWORD *)(v11 + 4 * v6);
      else
        v12 = v6;
      Darts::Details::DawgBuilder::insert(this, v8, v9, v12);
      ++v6;
      if (*a1)
        (*a1)(v6, *a2 + 1);
    }
    while (v6 < *a2);
  }
  Darts::Details::DawgBuilder::flush((uint64_t)this, 0);
  v13 = *(int **)this;
  v14 = *(_BYTE *)(*(_QWORD *)this + 8);
  v15 = **(_DWORD **)this;
  if (v14)
    v16 = (2 * *((unsigned __int8 *)v13 + 9)) | (4 * v15);
  else
    v16 = 2 * v15;
  **((_DWORD **)this + 3) = v16 | *((unsigned __int8 *)v13 + 10);
  **((_BYTE **)this + 6) = v14;
  Darts::Details::AutoPool<Darts::Details::DawgNode>::clear((uint64_t *)this);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 15);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 18);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 21);
  return Darts::Details::BitVector::build((Darts::Details::DawgBuilder *)((char *)this + 72));
}

uint64_t Darts::Details::DoubleArrayBuilder::build_from_dawg(Darts::Details::DoubleArrayBuilder *this, const Darts::Details::DawgBuilder *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  char v23;
  int j;
  int *v25;
  _DWORD *v26;
  uint64_t v27;
  unsigned int v28;
  int *v29;
  int v30;
  uint64_t result;
  uint64_t v32;

  v4 = *((_QWORD *)a2 + 4);
  v5 = 1;
  do
  {
    v6 = v5;
    v5 *= 2;
  }
  while (v6 < v4);
  v7 = (unsigned int **)((char *)this + 8);
  if (*((_QWORD *)this + 3) < v6)
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize_buf((uint64_t *)this + 1, v6);
  v8 = operator new[]();
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v8;
  if (v9)
    MEMORY[0x1C3BB9B20](v9, 0x1000C8052888210);
  v10 = *((_QWORD *)a2 + 13);
  if (v10)
    bzero(*((void **)this + 8), 4 * v10);
  v11 = operator new[]();
  for (i = 0; i != 49152; i += 12)
  {
    v13 = v11 + i;
    *(_WORD *)(v13 + 8) = 0;
    *(_QWORD *)v13 = 0;
  }
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v11;
  if (v14)
    MEMORY[0x1C3BB9B20](v14, 0x1000C80CBA68D63);
  if (!*((_QWORD *)this + 2))
    Darts::Details::DoubleArrayBuilder::expand_units(this);
  v15 = (int *)*((_QWORD *)this + 4);
  v16 = v15[1];
  if (!*((_DWORD *)this + 18))
  {
    *((_DWORD *)this + 18) = v16;
    if (!v16)
      *((_DWORD *)this + 18) = *((_QWORD *)this + 2);
  }
  v17 = *v15;
  v15[3 * (*v15 & 0xFFF) + 1] = v16;
  v15[3 * (v15[1] & 0xFFF)] = v17;
  *((_WORD *)v15 + 4) = 257;
  **v7 = **v7 & 0x80000100 | 0x400;
  if (**((_DWORD **)a2 + 3) >= 4u)
  {
    Darts::Details::DoubleArrayBuilder::build_from_dawg(this, a2, 0, 0);
    v15 = (int *)*((_QWORD *)this + 4);
  }
  v18 = *((_QWORD *)this + 2) >> 8;
  if (v18 <= 0x10)
    v19 = 0;
  else
    v19 = v18 - 16;
  v32 = *((_QWORD *)this + 2) >> 8;
  if (v19 != (_DWORD)v18)
  {
    v20 = v19 << 8;
    do
    {
      v21 = 0;
      v22 = (v19 << 8);
      while (1)
      {
        v23 = v20 + v21;
        if (!BYTE1(v15[3 * ((v20 + v21) & 0xFFF) + 2]))
          break;
        if (++v21 == 256)
        {
          v23 = 0;
          break;
        }
      }
      for (j = 0; j != 256; ++j)
      {
        if (!LOBYTE(v15[3 * (v22 & 0xFFF) + 2]))
        {
          if (*((_QWORD *)this + 2) <= v22)
          {
            Darts::Details::DoubleArrayBuilder::expand_units(this);
            v15 = (int *)*((_QWORD *)this + 4);
          }
          v25 = &v15[3 * (v22 & 0xFFF)];
          v28 = v25[1];
          v26 = v25 + 1;
          v27 = v28;
          if (v22 == *((_DWORD *)this + 18))
          {
            *((_DWORD *)this + 18) = v27;
            if (v22 == v27)
              *((_DWORD *)this + 18) = *((_QWORD *)this + 2);
          }
          v29 = &v15[3 * (v22 & 0xFFF)];
          v30 = *v29;
          v15[3 * (v30 & 0xFFF) + 1] = v27;
          v15[3 * (*v26 & 0xFFF)] = v30;
          *((_BYTE *)v29 + 8) = 1;
          LOBYTE((*v7)[v22]) = v23 ^ (v20 + j);
        }
        ++v22;
      }
      ++v19;
      v20 += 256;
    }
    while (v19 != (_DWORD)v32);
  }
  if (v15)
  {
    MEMORY[0x1C3BB9B20](v15, 0x1000C80CBA68D63);
    *((_QWORD *)this + 4) = 0;
  }
  Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)this + 5);
  result = *((_QWORD *)this + 8);
  if (result)
  {
    result = MEMORY[0x1C3BB9B20](result, 0x1000C8052888210);
    *((_QWORD *)this + 8) = 0;
  }
  return result;
}

uint64_t Darts::Details::DoubleArrayBuilder::build_from_keyset<int>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int **v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  char v20;
  int j;
  int *v22;
  _DWORD *v23;
  uint64_t v24;
  unsigned int v25;
  int *v26;
  int v27;
  uint64_t v29;

  v4 = *a2;
  v5 = 1;
  do
  {
    v6 = v5;
    v5 *= 2;
  }
  while (v6 < v4);
  v7 = (unsigned int **)(a1 + 8);
  if (*(_QWORD *)(a1 + 24) < v6)
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize_buf((uint64_t *)(a1 + 8), v6);
  v8 = operator new[]();
  for (i = 0; i != 49152; i += 12)
  {
    v10 = v8 + i;
    *(_WORD *)(v10 + 8) = 0;
    *(_QWORD *)v10 = 0;
  }
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  if (v11)
    MEMORY[0x1C3BB9B20](v11, 0x1000C80CBA68D63);
  if (!*(_QWORD *)(a1 + 16))
    Darts::Details::DoubleArrayBuilder::expand_units((Darts::Details::DoubleArrayBuilder *)a1);
  v12 = *(int **)(a1 + 32);
  v13 = v12[1];
  if (!*(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 72) = v13;
    if (!v13)
      *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
  }
  v14 = *v12;
  v12[3 * (*v12 & 0xFFF) + 1] = v13;
  v12[3 * (v12[1] & 0xFFF)] = v14;
  *((_WORD *)v12 + 4) = 257;
  **v7 = **v7 & 0x80000100 | 0x400;
  if (*a2)
  {
    Darts::Details::DoubleArrayBuilder::build_from_keyset<int>(a1, a2, 0, *a2, 0, 0);
    v12 = *(int **)(a1 + 32);
  }
  v15 = *(_QWORD *)(a1 + 16) >> 8;
  if (v15 <= 0x10)
    v16 = 0;
  else
    v16 = v15 - 16;
  v29 = *(_QWORD *)(a1 + 16) >> 8;
  if (v16 != (_DWORD)v15)
  {
    v17 = v16 << 8;
    do
    {
      v18 = 0;
      v19 = (v16 << 8);
      while (1)
      {
        v20 = v17 + v18;
        if (!BYTE1(v12[3 * ((v17 + v18) & 0xFFF) + 2]))
          break;
        if (++v18 == 256)
        {
          v20 = 0;
          break;
        }
      }
      for (j = 0; j != 256; ++j)
      {
        if (!LOBYTE(v12[3 * (v19 & 0xFFF) + 2]))
        {
          if (*(_QWORD *)(a1 + 16) <= v19)
          {
            Darts::Details::DoubleArrayBuilder::expand_units((Darts::Details::DoubleArrayBuilder *)a1);
            v12 = *(int **)(a1 + 32);
          }
          v22 = &v12[3 * (v19 & 0xFFF)];
          v25 = v22[1];
          v23 = v22 + 1;
          v24 = v25;
          if (v19 == *(_DWORD *)(a1 + 72))
          {
            *(_DWORD *)(a1 + 72) = v24;
            if (v19 == v24)
              *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          }
          v26 = &v12[3 * (v19 & 0xFFF)];
          v27 = *v26;
          v12[3 * (v27 & 0xFFF) + 1] = v24;
          v12[3 * (*v23 & 0xFFF)] = v27;
          *((_BYTE *)v26 + 8) = 1;
          LOBYTE((*v7)[v19]) = v20 ^ (v17 + j);
        }
        ++v19;
      }
      ++v16;
      v17 += 256;
    }
    while (v16 != (_DWORD)v29);
  }
  if (v12)
  {
    MEMORY[0x1C3BB9B20](v12, 0x1000C80CBA68D63);
    *(_QWORD *)(a1 + 32) = 0;
  }
  return Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)(a1 + 40));
}

uint64_t *Darts::Details::AutoStack<unsigned int>::~AutoStack(uint64_t *a1)
{
  Darts::Details::AutoPool<unsigned int>::clear(a1);
  return Darts::Details::AutoPool<unsigned int>::~AutoPool(a1);
}

uint64_t Darts::Details::AutoPool<unsigned int>::clear(uint64_t *a1)
{
  uint64_t result;

  Darts::Details::AutoPool<unsigned int>::resize(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x1C3BB9B20](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *Darts::Details::AutoPool<unsigned int>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)Darts::Details::AutoPool<unsigned int>::resize_buf(result, a2);
    v4 = v3[1];
  }
  if (v4 < a2)
    v3[1] = a2;
  return result;
}

uint64_t Darts::Details::AutoPool<unsigned int>::resize_buf(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x1C3BB9B20);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *Darts::Details::AutoPool<unsigned int>::~AutoPool(uint64_t *a1)
{
  Darts::Details::AutoPool<unsigned int>::clear(a1);
  if (*a1)
  {
    MEMORY[0x1C3BB9B20](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

void Darts::Details::BitVector::~BitVector(Darts::Details::BitVector *this)
{
  uint64_t v2;

  Darts::Details::BitVector::clear(this);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    MEMORY[0x1C3BB9B20](v2, 0x1000C8052888210);
    *((_QWORD *)this + 3) = 0;
  }
  Darts::Details::AutoPool<unsigned int>::~AutoPool((uint64_t *)this);
}

uint64_t Darts::Details::BitVector::clear(Darts::Details::BitVector *this)
{
  uint64_t result;

  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this);
  result = *((_QWORD *)this + 3);
  if (result)
  {
    result = MEMORY[0x1C3BB9B20](result, 0x1000C8052888210);
    *((_QWORD *)this + 3) = 0;
  }
  return result;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgUnit>::~AutoPool(uint64_t *a1)
{
  Darts::Details::AutoPool<Darts::Details::DawgUnit>::clear(a1);
  if (*a1)
  {
    MEMORY[0x1C3BB9B20](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t Darts::Details::AutoPool<Darts::Details::DawgUnit>::clear(uint64_t *a1)
{
  uint64_t result;

  Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x1C3BB9B20](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;

  v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    v4 = a2;
  }
  if (a1[2] < a2)
  {
    Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize_buf(a1, a2);
    v4 = a1[1];
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

uint64_t Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize_buf(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x1C3BB9B20);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgNode>::~AutoPool(uint64_t *a1)
{
  Darts::Details::AutoPool<Darts::Details::DawgNode>::clear(a1);
  if (*a1)
  {
    MEMORY[0x1C3BB9B20](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t Darts::Details::AutoPool<Darts::Details::DawgNode>::clear(uint64_t *a1)
{
  uint64_t result;

  Darts::Details::AutoPool<Darts::Details::DawgNode>::resize(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x1C3BB9B20](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgNode>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)Darts::Details::AutoPool<Darts::Details::DawgNode>::resize_buf(result, a2);
    v4 = v3[1];
  }
  for (; v4 < a2; v4 = v3[1])
  {
    v3[1] = v4 + 1;
    v5 = *v3 + 12 * v4;
    *(_DWORD *)(v5 + 7) = 0;
    *(_QWORD *)v5 = 0;
  }
  return result;
}

uint64_t Darts::Details::AutoPool<Darts::Details::DawgNode>::resize_buf(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    v8 = 0;
    do
    {
      v9 = v5 + v8;
      v10 = *(_QWORD *)(result + v8);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(result + v8 + 8);
      *(_QWORD *)v9 = v10;
      v8 += 12;
      --v7;
    }
    while (v7);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x1C3BB9B20);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *Darts::Details::DawgBuilder::init(Darts::Details::DawgBuilder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;

  v7 = 0;
  Darts::Details::AutoPool<unsigned int>::resize((uint64_t *)this + 15, 0x400uLL, &v7);
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    v3 = *(_QWORD *)this + 12 * *(unsigned int *)(*((_QWORD *)this + 21) + 4 * v2 - 4);
    *(_DWORD *)(v3 + 7) = 0;
    *(_QWORD *)v3 = 0;
    --*((_QWORD *)this + 22);
  }
  else
  {
    Darts::Details::AutoPool<Darts::Details::DawgNode>::append((uint64_t *)this);
  }
  Darts::Details::BitVector::append((uint64_t *)this + 9);
  Darts::Details::AutoPool<Darts::Details::DawgUnit>::append((uint64_t *)this + 3);
  v4 = *((_QWORD *)this + 7);
  if (v4 == *((_QWORD *)this + 8))
  {
    Darts::Details::AutoPool<unsigned char>::resize_buf((uint64_t *)this + 6, v4 + 1);
    v4 = *((_QWORD *)this + 7);
  }
  *((_QWORD *)this + 7) = v4 + 1;
  *((_QWORD *)this + 24) = 1;
  *(_BYTE *)(*(_QWORD *)this + 8) = -1;
  v6 = 0;
  return Darts::Details::AutoPool<unsigned int>::append((uint64_t *)this + 18, &v6);
}

_QWORD *Darts::Details::DawgBuilder::insert(_QWORD *this, const char *a2, unint64_t a3, int a4)
{
  int v5;
  _QWORD *v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  unsigned int v21;
  _QWORD *exception;
  const char *v23;
  int v24;
  unsigned int v25;

  if (a4 < 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1106: exception: failed to"
          " insert key: negative value";
    goto LABEL_27;
  }
  if (!a3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1108: exception: failed to"
          " insert key: zero-length key";
LABEL_27:
    *exception = &off_1E7BEA108;
    exception[1] = v23;
  }
  v5 = a4;
  v7 = this;
  v8 = 0;
  v9 = 0;
  v10 = *this;
  while (1)
  {
    v11 = *(_DWORD *)(v10 + 12 * v9);
    if (!v11)
      goto LABEL_12;
    v12 = a2[v8];
    if (v8 < a3 && !a2[v8])
    {
      exception = __cxa_allocate_exception(0x10uLL);
      v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1122: exception: failed "
            "to insert key: invalid null character";
      goto LABEL_27;
    }
    v13 = *(unsigned __int8 *)(v10 + 12 * v11 + 8);
    if (v12 < v13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1127: exception: failed "
            "to insert key: wrong key order";
      goto LABEL_27;
    }
    if (v12 > v13)
      break;
    ++v8;
    v9 = *(_DWORD *)(v10 + 12 * v9);
    if (v8 > a3)
      return this;
  }
  *(_BYTE *)(v10 + 12 * v11 + 10) = 1;
  this = (_QWORD *)Darts::Details::DawgBuilder::flush((uint64_t)this, v11);
LABEL_12:
  if (v8 <= a3)
  {
    v24 = v5;
    do
    {
      if (v8 >= a3)
        v14 = 0;
      else
        v14 = a2[v8];
      v25 = 0;
      v15 = v7[22];
      if (v15)
      {
        v16 = *(_DWORD *)(v7[21] + 4 * v15 - 4);
        v17 = *v7 + 12 * v16;
        *(_DWORD *)(v17 + 7) = 0;
        *(_QWORD *)v17 = 0;
        --v7[22];
      }
      else
      {
        v16 = *((_DWORD *)v7 + 2);
        Darts::Details::AutoPool<Darts::Details::DawgNode>::append(v7);
      }
      v25 = v16;
      v18 = *v7;
      v19 = (int *)(*v7 + 12 * v9);
      v20 = *v19;
      if (!*v19)
        *(_BYTE *)(v18 + 12 * v16 + 9) = 1;
      *(_DWORD *)(v18 + 12 * v16 + 4) = v20;
      v21 = v25;
      *(_BYTE *)(v18 + 12 * v25 + 8) = v14;
      *v19 = v21;
      this = Darts::Details::AutoPool<unsigned int>::append(v7 + 18, &v25);
      v9 = v25;
      ++v8;
    }
    while (v8 <= a3);
    v5 = v24;
  }
  *(_DWORD *)(*v7 + 12 * v9) = v5;
  return this;
}

uint64_t *Darts::Details::AutoPool<unsigned int>::resize(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  v5 = result;
  v6 = result[1];
  if (v6 > a2)
  {
    result[1] = a2;
    v6 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)Darts::Details::AutoPool<unsigned int>::resize_buf(result, a2);
    v6 = v5[1];
  }
  if (v6 < a2)
  {
    v7 = *v5;
    do
      *(_DWORD *)(v7 + 4 * v6++) = *a3;
    while (a2 != v6);
    v5[1] = a2;
  }
  return result;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgNode>::append(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  v2 = result[1];
  if (v2 == result[2])
  {
    result = (uint64_t *)Darts::Details::AutoPool<Darts::Details::DawgNode>::resize_buf(result, v2 + 1);
    v2 = v1[1];
  }
  v1[1] = v2 + 1;
  v3 = *v1 + 12 * v2;
  *(_DWORD *)(v3 + 7) = 0;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t *Darts::Details::BitVector::append(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;

  v1 = this;
  v2 = this[5];
  if ((v2 & 0x1F) == 0)
  {
    v3 = 0;
    this = Darts::Details::AutoPool<unsigned int>::append(this, &v3);
    v2 = v1[5];
  }
  v1[5] = v2 + 1;
  return this;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgUnit>::append(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = result;
  v2 = result[1];
  if (v2 == result[2])
  {
    result = (uint64_t *)Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize_buf(result, v2 + 1);
    v2 = v1[1];
  }
  v1[1] = v2 + 1;
  *(_DWORD *)(*v1 + 4 * v2) = 0;
  return result;
}

uint64_t *Darts::Details::AutoPool<unsigned int>::append(uint64_t *result, _DWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 == result[2])
  {
    result = (uint64_t *)Darts::Details::AutoPool<unsigned int>::resize_buf(result, v4 + 1);
    v4 = v3[1];
  }
  v3[1] = v4 + 1;
  *(_DWORD *)(*v3 + 4 * v4) = *a2;
  return result;
}

uint64_t Darts::Details::DawgBuilder::flush(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int *v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned int v37;
  int v38;
  unsigned int v39;

  v2 = this;
  v3 = *(_QWORD *)(this + 152) - 1;
  v4 = *(_DWORD *)(*(_QWORD *)(this + 144) + 4 * v3);
  if (v4 != a2)
  {
    v35 = (uint64_t *)(this + 120);
    v5 = (_QWORD *)(this + 24);
    v6 = (_QWORD *)(this + 72);
    while (1)
    {
      *(_QWORD *)(v2 + 152) = v3;
      v7 = *(_QWORD *)(v2 + 128);
      if (*(_QWORD *)(v2 + 192) >= v7 - (v7 >> 2))
      {
        v8 = 2 * v7;
        Darts::Details::AutoPool<unsigned int>::clear(v35);
        v38 = 0;
        Darts::Details::AutoPool<unsigned int>::resize(v35, v8, &v38);
        v9 = *(_QWORD *)(v2 + 32);
        if (v9 >= 2)
        {
          v10 = *(_QWORD *)(v2 + 48);
          for (i = 1; i != v9; ++i)
          {
            if (!*(_BYTE *)(v10 + i) || (*(_DWORD *)(*v5 + 4 * i) & 2) != 0)
            {
              v12 = 0;
              if ((_DWORD)i)
              {
                v13 = i;
                do
                {
                  v14 = *(_DWORD *)(*v5 + 4 * v13);
                  v15 = (v14 ^ ~(*(unsigned __int8 *)(v10 + v13) << 24)) + (v14 << 15);
                  v16 = 2057 * ((5 * (v15 ^ (v15 >> 12))) ^ ((5 * (v15 ^ (v15 >> 12))) >> 4));
                  v12 ^= HIWORD(v16) ^ v16;
                  v17 = __CFADD__(v13++, 1);
                }
                while (!v17 && (v14 & 1) != 0);
              }
              v18 = *(_QWORD *)(v2 + 120);
              do
              {
                v19 = (unint64_t)v12 % *(_QWORD *)(v2 + 128);
                v12 = v19 + 1;
              }
              while (*(_DWORD *)(v18 + 4 * v19));
              *(_DWORD *)(v18 + 4 * v19) = i;
            }
          }
        }
      }
      v20 = 0;
      if (v4)
      {
        v21 = v4;
        do
        {
          ++v20;
          v21 = *(_DWORD *)(*(_QWORD *)v2 + 12 * v21 + 4);
        }
        while (v21);
      }
      v37 = 0;
      this = Darts::Details::DawgBuilder::find_node((Darts::Details::DawgBuilder *)v2, v4, &v37);
      if ((_DWORD)this)
      {
        v22 = this;
        *(_DWORD *)(*v6 + 4 * (this >> 5)) |= 1 << this;
        if (v4)
          goto LABEL_22;
        goto LABEL_23;
      }
      if (!v20)
        break;
      do
      {
        Darts::Details::BitVector::append((uint64_t *)(v2 + 72));
        this = (uint64_t)Darts::Details::AutoPool<Darts::Details::DawgUnit>::append((uint64_t *)(v2 + 24));
        v25 = *(_QWORD *)(v2 + 56);
        if (v25 == *(_QWORD *)(v2 + 64))
        {
          this = Darts::Details::AutoPool<unsigned char>::resize_buf((uint64_t *)(v2 + 48), v25 + 1);
          v25 = *(_QWORD *)(v2 + 56);
        }
        *(_QWORD *)(v2 + 56) = v25 + 1;
        --v20;
      }
      while (v20);
      v26 = *(_DWORD *)(v2 + 112) - 1;
      if (v4)
        goto LABEL_32;
LABEL_37:
      v22 = v26 + 1;
      *(_DWORD *)(*(_QWORD *)(v2 + 120) + 4 * v37) = v26 + 1;
      ++*(_QWORD *)(v2 + 192);
      if (v4)
      {
        do
        {
LABEL_22:
          v23 = *(_DWORD *)(*(_QWORD *)v2 + 12 * v4 + 4);
          v39 = v4;
          this = (uint64_t)Darts::Details::AutoPool<unsigned int>::append((uint64_t *)(v2 + 168), &v39);
          v4 = v23;
        }
        while (v23);
      }
LABEL_23:
      v24 = *(_QWORD *)(v2 + 144);
      v3 = *(_QWORD *)(v2 + 152) - 1;
      *(_DWORD *)(*(_QWORD *)v2 + 12 * *(unsigned int *)(v24 + 4 * v3)) = v22;
      v4 = *(_DWORD *)(v24 + 4 * v3);
      if (v4 == a2)
        goto LABEL_2;
    }
    v26 = 0;
    if (!v4)
      goto LABEL_37;
LABEL_32:
    v27 = *(_QWORD *)v2;
    v28 = v4;
    do
    {
      v29 = v28;
      v30 = (int *)(v27 + 12 * v28);
      v31 = *((unsigned __int8 *)v30 + 8);
      v32 = *v30;
      if (v31)
        v33 = (2 * *(unsigned __int8 *)(v27 + 12 * v29 + 9)) | (4 * v32);
      else
        v33 = 2 * v32;
      v34 = 3 * v29;
      *(_DWORD *)(*(_QWORD *)(v2 + 24) + 4 * v26) = v33 | *(unsigned __int8 *)(v27 + 4 * v34 + 10);
      *(_BYTE *)(*(_QWORD *)(v2 + 48) + v26--) = v31;
      v27 = *(_QWORD *)v2;
      v28 = *(_DWORD *)(*(_QWORD *)v2 + 4 * v34 + 4);
    }
    while (v28);
    goto LABEL_37;
  }
LABEL_2:
  *(_QWORD *)(v2 + 152) = v3;
  return this;
}

uint64_t Darts::Details::DawgBuilder::find_node(Darts::Details::DawgBuilder *this, unsigned int a2, unsigned int *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int *v24;
  int v25;
  int v26;
  int v27;

  v3 = a2;
  if (a2)
  {
    LODWORD(v4) = 0;
    v5 = *(_QWORD *)this;
    v6 = a2;
    do
    {
      v7 = (int *)(v5 + 12 * v6);
      v8 = *((unsigned __int8 *)v7 + 8);
      v9 = *v7;
      if (v8)
        v10 = (2 * *(unsigned __int8 *)(v5 + 12 * v6 + 9)) | (4 * v9);
      else
        v10 = 2 * v9;
      v11 = v5 + 12 * v6;
      v12 = ((v10 | *(unsigned __int8 *)(v11 + 10)) ^ ~(v8 << 24)) + ((v10 | *(unsigned __int8 *)(v11 + 10)) << 15);
      v13 = 2057 * ((5 * (v12 ^ (v12 >> 12))) ^ ((5 * (v12 ^ (v12 >> 12))) >> 4));
      v4 = v4 ^ HIWORD(v13) ^ v13;
      v6 = *(unsigned int *)(v11 + 4);
    }
    while ((_DWORD)v6);
  }
  else
  {
    v4 = 0;
  }
  v15 = *((_QWORD *)this + 15);
  v14 = *((_QWORD *)this + 16);
  v16 = v4 % v14;
  *a3 = v4 % v14;
  v17 = *(unsigned int *)(v15 + 4 * (v4 % v14));
  if ((_DWORD)v17)
  {
    v18 = *(_QWORD *)this;
    v19 = (unsigned int *)(*(_QWORD *)this + 12 * a2 + 4);
    v20 = *((_QWORD *)this + 3);
    do
    {
      v21 = *v19;
      v22 = v17;
      if ((_DWORD)v21)
      {
        v22 = v17;
        while ((*(_DWORD *)(v20 + 4 * v22) & 1) != 0)
        {
          ++v22;
          LODWORD(v21) = *(_DWORD *)(v18 + 12 * v21 + 4);
          if (!(_DWORD)v21)
            goto LABEL_15;
        }
      }
      else
      {
LABEL_15:
        if ((*(_DWORD *)(v20 + 4 * v22) & 1) == 0)
        {
          if (!v3)
            return v17;
          v23 = v3;
          while (1)
          {
            v24 = (int *)(v18 + 12 * v23);
            v25 = *((unsigned __int8 *)v24 + 8);
            v26 = *v24;
            v27 = v25 ? (2 * *(unsigned __int8 *)(v18 + 12 * v23 + 9)) | (4 * v26) : 2 * v26;
            if ((v27 | *(unsigned __int8 *)(v18 + 12 * v23 + 10)) != *(_DWORD *)(v20 + 4 * v22)
              || v25 != *(unsigned __int8 *)(*((_QWORD *)this + 6) + v22))
            {
              break;
            }
            v23 = *(unsigned int *)(v18 + 12 * v23 + 4);
            --v22;
            if (!(_DWORD)v23)
              return v17;
          }
        }
      }
      v16 = (v16 + 1) % v14;
      *a3 = v16;
      v17 = *(unsigned int *)(v15 + 4 * v16);
    }
    while ((_DWORD)v17);
  }
  return v17;
}

uint64_t Darts::Details::BitVector::build(Darts::Details::BitVector *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = operator new[]();
  result = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v2;
  if (result)
    result = MEMORY[0x1C3BB9B20](result, 0x1000C8052888210);
  *((_QWORD *)this + 4) = 0;
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = 0;
    v6 = (_DWORD *)*((_QWORD *)this + 3);
    v7 = *(unsigned int **)this;
    do
    {
      *v6++ = v5;
      v8 = *v7++;
      v9 = ((((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) >> 2) & 0x33333333)
          + ((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) & 0x33333333)
          + (((((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) >> 2) & 0x33333333)
            + ((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
      v5 += ((_BYTE)v9 + BYTE1(v9) + ((v9 + (v9 >> 8)) >> 16)) & 0x3F;
      --v4;
    }
    while (v4);
    *((_QWORD *)this + 4) = v5;
  }
  return result;
}

unsigned int *Darts::Details::DoubleArrayBuilderUnit::set_offset(unsigned int *this, unsigned int a2)
{
  int v2;
  _QWORD *exception;

  if (a2 >> 29)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = &off_1E7BEA108;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1339: exception: "
                   "failed to modify unit: too large offset";
  }
  v2 = (4 * a2) | 0x200;
  if (a2 < 0x200000)
    v2 = a2 << 10;
  *this = *this & 0x800001FF | v2;
  return this;
}

unsigned int *Darts::Details::DoubleArrayBuilder::build_from_dawg(Darts::Details::DoubleArrayBuilder *this, const Darts::Details::DawgBuilder *a2, unsigned int a3, unsigned int a4)
{
  Darts::Details::BitVector *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *result;
  int v19;
  int v20;

  v8 = (const Darts::Details::DawgBuilder *)((char *)a2 + 72);
  v9 = *(unsigned int *)(*((_QWORD *)a2 + 3) + 4 * a3);
  v10 = v9 >> 2;
  v11 = v9 >> 7;
  v12 = 1 << (v9 >> 2);
  if ((v12 & *(_DWORD *)(*((_QWORD *)a2 + 9) + 4 * (v9 >> 7))) != 0
    && (v13 = *(_DWORD *)(*((_QWORD *)this + 8)
                        + 4
                        * (Darts::Details::BitVector::rank((const Darts::Details::DawgBuilder *)((char *)a2 + 72), v10)- 1))) != 0&& ((v14 = v13 ^ a4, ((v13 ^ a4) & 0x1FE00000) != 0) ? (v15 = (v13 ^ a4) == 0) : (v15 = 1), v15))
  {
    if (*(_BYTE *)(*((_QWORD *)a2 + 6) + v10))
    {
      v16 = *((_QWORD *)this + 1);
      v17 = a4;
    }
    else
    {
      v17 = a4;
      v16 = *((_QWORD *)this + 1);
      *(_DWORD *)(v16 + 4 * a4) |= 0x100u;
    }
    return Darts::Details::DoubleArrayBuilderUnit::set_offset((unsigned int *)(v16 + 4 * v17), v14);
  }
  else
  {
    result = (unsigned int *)Darts::Details::DoubleArrayBuilder::arrange_from_dawg(this, a2, a3, a4);
    v19 = (int)result;
    if ((*(_DWORD *)(*((_QWORD *)a2 + 9) + 4 * v11) & v12) != 0)
    {
      result = (unsigned int *)Darts::Details::BitVector::rank(v8, v10);
      *(_DWORD *)(*((_QWORD *)this + 8) + 4 * ((_DWORD)result - 1)) = v19;
    }
    do
    {
      if (*(_BYTE *)(*((_QWORD *)a2 + 6) + v10))
        result = (unsigned int *)Darts::Details::DoubleArrayBuilder::build_from_dawg(this, a2, v10, v19 ^ *(unsigned __int8 *)(*((_QWORD *)a2 + 6) + v10));
      if ((_DWORD)v10 == -1)
        break;
      v20 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v10);
      LODWORD(v10) = v10 + 1;
    }
    while ((v20 & 1) != 0);
  }
  return result;
}

void Darts::Details::DoubleArrayBuilder::expand_units(Darts::Details::DoubleArrayBuilder *this)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int i;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v2 = (uint64_t *)((char *)this + 8);
  v3 = *((_QWORD *)this + 2);
  v4 = (v3 + 256);
  v5 = (v3 >> 8) - 16;
  if (v5 >= 0xFFFFFFEF)
  {
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize((uint64_t *)this + 1, (v3 + 256));
  }
  else
  {
    v6 = 0;
    v7 = v5 << 8;
    v8 = *((_QWORD *)this + 4);
    while (1)
    {
      v9 = v7 + v6;
      if (!*(_BYTE *)(v8 + 12 * (((_DWORD)v7 + v6) & 0xFFF) + 9))
        break;
      if (++v6 == 256)
      {
        v9 = 0;
        break;
      }
    }
    v10 = 0;
    v11 = 3072 * ((v3 >> 8) & 0xF);
    do
    {
      if (!*(_BYTE *)(v8 + v11 + v10 + 8))
      {
        if (*((_QWORD *)this + 2) <= v7)
        {
          Darts::Details::DoubleArrayBuilder::expand_units(this);
          v8 = *((_QWORD *)this + 4);
        }
        v12 = (int *)(v8 + v11 + v10);
        v13 = v12[1];
        if (v7 == *((_DWORD *)this + 18))
        {
          *((_DWORD *)this + 18) = v13;
          if (v7 == v13)
            *((_DWORD *)this + 18) = *((_QWORD *)this + 2);
        }
        v14 = *v12;
        *(_DWORD *)(v8 + 12 * (*v12 & 0xFFF) + 4) = v13;
        *(_DWORD *)(v8 + 12 * (v12[1] & 0xFFF)) = v14;
        *((_BYTE *)v12 + 8) = 1;
        *(_BYTE *)(*v2 + 4 * v7) = v9 ^ v7;
      }
      ++v7;
      v10 += 12;
    }
    while ((_DWORD)v10 != 3072);
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize(v2, (v3 + 256));
    v15 = v3;
    if (v3 < (unint64_t)v4)
    {
      v16 = *((_QWORD *)this + 4);
      do
        *(_WORD *)(v16 + 12 * (v15++ & 0xFFF) + 8) = 0;
      while (v4 != v15);
    }
  }
  v17 = *((_QWORD *)this + 4);
  if ((int)v3 + 1 < v4)
  {
    for (i = 0; i != 255; ++i)
    {
      v19 = v3 + i;
      *(_DWORD *)(v17 + 12 * (v19 & 0xFFF) + 4) = v19 + 1;
      *(_DWORD *)(v17 + 12 * ((v19 + 1) & 0xFFF)) = v19;
    }
  }
  v20 = 12 * (v3 & 0xFFF);
  *(_DWORD *)(v17 + v20) = v3 + 255;
  v21 = *((_DWORD *)this + 18);
  v22 = 12 * (v21 & 0xFFF);
  *(_DWORD *)(v17 + v20) = *(_DWORD *)(v17 + v22);
  LOWORD(v20) = *(_DWORD *)(v17 + v22);
  *(_DWORD *)(v17 + 12 * (((_DWORD)v3 + 255) & 0xFFF) + 4) = v21;
  *(_DWORD *)(v17 + 12 * (v20 & 0xFFF) + 4) = v3;
  *(_DWORD *)(v17 + v22) = v3 + 255;
}

uint64_t Darts::Details::DoubleArrayBuilder::arrange_from_dawg(Darts::Details::DoubleArrayBuilder *this, const Darts::Details::DawgBuilder *a2, unsigned int a3, unsigned int a4)
{
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _BOOL4 v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int *v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  char v35;

  v8 = (uint64_t *)((char *)this + 40);
  Darts::Details::AutoPool<unsigned char>::resize((uint64_t *)this + 5, 0);
  v9 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * a3);
  if (v9 >= 4)
  {
    v10 = v9 >> 2;
    do
    {
      v35 = *(_BYTE *)(*((_QWORD *)a2 + 6) + v10);
      Darts::Details::AutoPool<unsigned char>::append(v8, &v35);
      v11 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v10);
      v13 = __CFADD__(v10++, 1);
    }
    while ((v11 & 1) != 0 && !v13);
  }
  v14 = *((unsigned int *)this + 18);
  v15 = *((_QWORD *)this + 2);
  if (v15 <= v14)
  {
LABEL_20:
    v19 = a4 | v15;
  }
  else
  {
    v17 = *((_QWORD *)this + 4);
    v16 = (unsigned __int8 *)*((_QWORD *)this + 5);
    v18 = *((_DWORD *)this + 18);
    while (1)
    {
      v19 = v18 ^ *v16;
      v20 = ((unsigned __int16)v18 ^ *v16) & 0xFFF;
      if (!*(_BYTE *)(v17 + 12 * (((unsigned __int16)v18 ^ *v16) & 0xFFF) + 9)
        && (!((v18 ^ *v16) ^ a4) || ((v19 ^ a4) & 0x1FE00000) == 0))
      {
        v21 = *((_QWORD *)this + 6);
        if (v21 < 2)
          goto LABEL_21;
        if (!*(_BYTE *)(v17 + 12 * (v20 ^ v16[1]) + 8))
          break;
      }
LABEL_19:
      v18 = *(_DWORD *)(v17 + 12 * (v18 & 0xFFF) + 4);
      if (v18 == (_DWORD)v14)
        goto LABEL_20;
    }
    v22 = 2;
    while (v21 != v22)
    {
      if (*(unsigned __int8 *)(v17 + 12 * (v20 ^ v16[v22++]) + 8))
      {
        if (v22 - 1 >= v21)
          break;
        goto LABEL_19;
      }
    }
  }
LABEL_21:
  Darts::Details::DoubleArrayBuilderUnit::set_offset((unsigned int *)(*((_QWORD *)this + 1) + 4 * a4), v19 ^ a4);
  if (*((_QWORD *)this + 6))
  {
    v24 = 0;
    v25 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * a3) >> 2;
    do
    {
      v26 = v19 ^ *(unsigned __int8 *)(*((_QWORD *)this + 5) + v24);
      if (*((_QWORD *)this + 2) <= v26)
        Darts::Details::DoubleArrayBuilder::expand_units(this);
      if (*((_DWORD *)this + 18) == (_DWORD)v26)
      {
        v27 = v26 & 0xFFF;
        v28 = *((_QWORD *)this + 4);
        v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
        *((_DWORD *)this + 18) = v29;
        if (v29 == (_DWORD)v26)
        {
          *((_DWORD *)this + 18) = *((_QWORD *)this + 2);
          v29 = v26;
        }
      }
      else
      {
        v28 = *((_QWORD *)this + 4);
        v27 = v26 & 0xFFF;
        v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
      }
      v30 = (int *)(v28 + 12 * v27);
      v31 = *v30;
      *(_DWORD *)(v28 + 12 * (*v30 & 0xFFF) + 4) = v29;
      *(_DWORD *)(v28 + 12 * (v30[1] & 0xFFF)) = v31;
      *((_BYTE *)v30 + 8) = 1;
      v32 = *((_QWORD *)this + 1);
      if (*(_BYTE *)(*((_QWORD *)a2 + 6) + v25))
      {
        *(_BYTE *)(v32 + 4 * v26) = *(_BYTE *)(*v8 + v24);
        v33 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v25);
      }
      else
      {
        *(_DWORD *)(v32 + 4 * a4) |= 0x100u;
        v33 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v25);
        *(_DWORD *)(v32 + 4 * v26) = (v33 >> 1) | 0x80000000;
      }
      v25 = ((int)(v33 << 31) >> 31) & (v25 + 1);
      ++v24;
    }
    while (v24 < *((_QWORD *)this + 6));
  }
  else
  {
    v28 = *((_QWORD *)this + 4);
  }
  *(_BYTE *)(v28 + 12 * (v19 & 0xFFF) + 9) = 1;
  return v19;
}

uint64_t Darts::Details::BitVector::rank(Darts::Details::BitVector *this, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = (a2 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
  v3 = *(_DWORD *)(*((_QWORD *)this + 3) + v2);
  LODWORD(v2) = *(_DWORD *)(*(_QWORD *)this + v2) & (0xFFFFFFFF >> ~(_BYTE)a2);
  LODWORD(v2) = ((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
               + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)
               + (((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
                 + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
  return (((_BYTE)v2 + BYTE1(v2) + ((v2 + (v2 >> 8)) >> 16)) & 0x3Fu) + v3;
}

uint64_t *Darts::Details::AutoPool<unsigned char>::append(uint64_t *result, _BYTE *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 == result[2])
  {
    result = (uint64_t *)Darts::Details::AutoPool<unsigned char>::resize_buf(result, v4 + 1);
    v4 = v3[1];
  }
  v3[1] = v4 + 1;
  *(_BYTE *)(*v3 + v4) = *a2;
  return result;
}

void Darts::Details::DawgBuilder::~DawgBuilder(Darts::Details::DawgBuilder *this)
{
  Darts::Details::AutoPool<Darts::Details::DawgNode>::clear((uint64_t *)this);
  Darts::Details::AutoPool<Darts::Details::DawgUnit>::clear((uint64_t *)this + 3);
  Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)this + 6);
  Darts::Details::BitVector::clear((Darts::Details::DawgBuilder *)((char *)this + 72));
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 15);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 18);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 21);
  *((_QWORD *)this + 24) = 0;
  Darts::Details::AutoStack<unsigned int>::~AutoStack((uint64_t *)this + 21);
  Darts::Details::AutoStack<unsigned int>::~AutoStack((uint64_t *)this + 18);
  Darts::Details::AutoPool<unsigned int>::~AutoPool((uint64_t *)this + 15);
  Darts::Details::BitVector::~BitVector((Darts::Details::DawgBuilder *)((char *)this + 72));
  Darts::Details::AutoPool<unsigned char>::~AutoPool((uint64_t *)this + 6);
  Darts::Details::AutoPool<Darts::Details::DawgUnit>::~AutoPool((uint64_t *)this + 3);
  Darts::Details::AutoPool<Darts::Details::DawgNode>::~AutoPool((uint64_t *)this);
}

uint64_t Darts::Details::DoubleArrayBuilder::build_from_keyset<int>(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t result;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  int v17;

  while (1)
  {
    result = Darts::Details::DoubleArrayBuilder::arrange_from_keyset<int>(a1, a2, a3, a4, a5, a6);
    v12 = result;
    if (a3 < a4)
    {
      v13 = a2[2];
      while (v13 && *(_QWORD *)(v13 + 8 * a3) <= a5 || !*(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5))
      {
        if (a4 == ++a3)
          return result;
      }
    }
    if (a3 == a4)
      break;
    v14 = a2[2];
    if (v14 && *(_QWORD *)(v14 + 8 * a3) <= a5)
      v15 = 0;
    else
      v15 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
    v16 = a3 + 1;
    if (a3 + 1 < a4)
    {
      do
      {
        if (v14 && *(_QWORD *)(v14 + 8 * v16) <= a5)
          v17 = 0;
        else
          v17 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * v16) + a5);
        if (v17 != v15)
        {
          Darts::Details::DoubleArrayBuilder::build_from_keyset<int>(a1, a2, a3, v16, a5 + 1, v12 ^ v15);
          v14 = a2[2];
          if (v14 && *(_QWORD *)(v14 + 8 * v16) <= a5)
            v15 = 0;
          else
            v15 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * v16) + a5);
          a3 = v16;
        }
        ++v16;
      }
      while (a4 != v16);
    }
    a6 = v12 ^ v15;
    ++a5;
  }
  return result;
}

uint64_t Darts::Details::DoubleArrayBuilder::arrange_from_keyset<int>(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int *v35;
  int v36;
  uint64_t v37;
  _QWORD *exception;
  const char *v40;
  unsigned __int8 v41;

  v12 = (uint64_t *)(a1 + 40);
  Darts::Details::AutoPool<unsigned char>::resize((uint64_t *)(a1 + 40), 0);
  v13 = -1;
  if (a3 < a4)
  {
    do
    {
      v41 = 0;
      v14 = a2[2];
      if (v14)
      {
        if (*(_QWORD *)(v14 + 8 * a3) > a5)
        {
          v41 = *(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
          if (!v41)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1675: exception: f"
                  "ailed to build double-array: invalid null character";
            goto LABEL_52;
          }
          goto LABEL_17;
        }
      }
      else
      {
        v41 = *(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
        if (v41)
          goto LABEL_17;
      }
      v15 = a2[3];
      if (v15)
      {
        if ((*(_DWORD *)(v15 + 4 * a3) & 0x80000000) != 0)
          goto LABEL_51;
      }
      else if ((a3 & 0x80000000) != 0)
      {
LABEL_51:
        exception = __cxa_allocate_exception(0x10uLL);
        v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1677: exception: faile"
              "d to build double-array: negative value";
LABEL_52:
        *exception = &off_1E7BEA108;
        exception[1] = v40;
      }
      if (v13 == -1)
      {
        if (v15)
          v13 = *(_DWORD *)(v15 + 4 * a3);
        else
          v13 = a3;
      }
      if (*(_QWORD *)a1)
        (*(void (**)(unint64_t, uint64_t))a1)(a3 + 1, *a2 + 1);
LABEL_17:
      v16 = *(_QWORD *)(a1 + 48);
      if (!v16)
        goto LABEL_21;
      v17 = *(unsigned __int8 *)(v16 + *v12 - 1);
      if (v41 != v17)
      {
        if (v41 < v17)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1692: exception: fai"
                "led to build double-array: wrong key order";
          goto LABEL_52;
        }
LABEL_21:
        Darts::Details::AutoPool<unsigned char>::append(v12, &v41);
      }
      ++a3;
    }
    while (a4 != a3);
  }
  v18 = *(unsigned int *)(a1 + 72);
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 <= v18)
  {
LABEL_35:
    v23 = a6 | v19;
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 32);
    v20 = *(unsigned __int8 **)(a1 + 40);
    v22 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      v23 = v22 ^ *v20;
      v24 = ((unsigned __int16)v22 ^ *v20) & 0xFFF;
      if (!*(_BYTE *)(v21 + 12 * (((unsigned __int16)v22 ^ *v20) & 0xFFF) + 9)
        && (!((v22 ^ *v20) ^ a6) || ((v23 ^ a6) & 0x1FE00000) == 0))
      {
        v25 = *(_QWORD *)(a1 + 48);
        if (v25 < 2)
          goto LABEL_36;
        if (!*(_BYTE *)(v21 + 12 * (v24 ^ v20[1]) + 8))
          break;
      }
LABEL_34:
      v22 = *(_DWORD *)(v21 + 12 * (v22 & 0xFFF) + 4);
      if (v22 == (_DWORD)v18)
        goto LABEL_35;
    }
    v26 = 2;
    while (v25 != v26)
    {
      if (*(unsigned __int8 *)(v21 + 12 * (v24 ^ v20[v26++]) + 8))
      {
        if (v26 - 1 >= v25)
          break;
        goto LABEL_34;
      }
    }
  }
LABEL_36:
  Darts::Details::DoubleArrayBuilderUnit::set_offset((unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * a6), v23 ^ a6);
  if (*(_QWORD *)(a1 + 48))
  {
    v28 = 0;
    v29 = v13 | 0x80000000;
    v30 = *v12;
    do
    {
      v31 = v23 ^ *(unsigned __int8 *)(v30 + v28);
      if (*(_QWORD *)(a1 + 16) <= v31)
        Darts::Details::DoubleArrayBuilder::expand_units((Darts::Details::DoubleArrayBuilder *)a1);
      if (*(_DWORD *)(a1 + 72) == (_DWORD)v31)
      {
        v32 = v31 & 0xFFF;
        v33 = *(_QWORD *)(a1 + 32);
        v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
        *(_DWORD *)(a1 + 72) = v34;
        if (v34 == (_DWORD)v31)
        {
          *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          v34 = v31;
        }
      }
      else
      {
        v33 = *(_QWORD *)(a1 + 32);
        v32 = v31 & 0xFFF;
        v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
      }
      v35 = (int *)(v33 + 12 * v32);
      v36 = *v35;
      *(_DWORD *)(v33 + 12 * (*v35 & 0xFFF) + 4) = v34;
      *(_DWORD *)(v33 + 12 * (v35[1] & 0xFFF)) = v36;
      *((_BYTE *)v35 + 8) = 1;
      v30 = *(_QWORD *)(a1 + 40);
      v37 = *(_QWORD *)(a1 + 8);
      if (*(_BYTE *)(v30 + v28))
      {
        *(_BYTE *)(v37 + 4 * v31) = *(_BYTE *)(v30 + v28);
      }
      else
      {
        *(_DWORD *)(v37 + 4 * a6) |= 0x100u;
        *(_DWORD *)(v37 + 4 * v31) = v29;
      }
      ++v28;
    }
    while (v28 < *(_QWORD *)(a1 + 48));
  }
  else
  {
    v33 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(v33 + 12 * (v23 & 0xFFF) + 9) = 1;
  return v23;
}

void Darts::Details::DoubleArrayBuilder::~DoubleArrayBuilder(Darts::Details::DoubleArrayBuilder *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)((char *)this + 8);
  Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::clear((uint64_t *)this + 1);
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    MEMORY[0x1C3BB9B20](v3, 0x1000C80CBA68D63);
    *((_QWORD *)this + 4) = 0;
  }
  Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)this + 5);
  v4 = *((_QWORD *)this + 8);
  if (v4)
  {
    MEMORY[0x1C3BB9B20](v4, 0x1000C8052888210);
    *((_QWORD *)this + 8) = 0;
  }
  *((_DWORD *)this + 18) = 0;
  Darts::Details::AutoPool<unsigned char>::~AutoPool((uint64_t *)this + 5);
  v5 = *((_QWORD *)this + 4);
  if (v5)
  {
    MEMORY[0x1C3BB9B20](v5, 0x1000C80CBA68D63);
    *((_QWORD *)this + 4) = 0;
  }
  Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::~AutoPool(v2);
}

_QWORD *std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1C21C822C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::aobject>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

sentencepiece::normalizer::Normalizer *sentencepiece::normalizer::Normalizer::Normalizer(sentencepiece::normalizer::Normalizer *this, const sentencepiece::NormalizerSpec *a2, const sentencepiece::TrainerSpec *a3)
{
  unint64_t v5;
  unint64_t v6;

  *(_QWORD *)this = &off_1E7BE8700;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = (char *)a2 + 16;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = *((_BYTE *)a3 + 245);
  sentencepiece::util::Status::Status((_QWORD *)this + 7);
  v5 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    v5 = *(_QWORD *)v5;
    v6 = *(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v6 = *(unsigned __int8 *)(v5 + 23);
  }
  sentencepiece::normalizer::Normalizer::Init((uint64_t)this, (unsigned int *)v5, v6);
  return this;
}

void sub_1C21C830C(_Unwind_Exception *a1)
{
  sentencepiece::util::Status *v1;
  uint64_t *v2;
  uint64_t v4;

  sentencepiece::util::Status::~Status(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

sentencepiece::normalizer::Normalizer *sentencepiece::normalizer::Normalizer::Normalizer(sentencepiece::normalizer::Normalizer *this, const sentencepiece::NormalizerSpec *a2)
{
  unint64_t v4;
  unint64_t v5;

  *(_QWORD *)this = &off_1E7BE8700;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = (char *)a2 + 16;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  sentencepiece::util::Status::Status((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    v4 = *(_QWORD *)v4;
    v5 = *(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = *(unsigned __int8 *)(v4 + 23);
  }
  sentencepiece::normalizer::Normalizer::Init((uint64_t)this, (unsigned int *)v4, v5);
  return this;
}

void sub_1C21C83C4(_Unwind_Exception *a1)
{
  sentencepiece::util::Status *v1;
  uint64_t *v2;
  uint64_t v4;

  sentencepiece::util::Status::~Status(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void sentencepiece::normalizer::Normalizer::~Normalizer(sentencepiece::normalizer::Normalizer *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7BE8700;
  sentencepiece::util::Status::~Status((sentencepiece::normalizer::Normalizer *)((char *)this + 56));
  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7BE8700;
  sentencepiece::util::Status::~Status((sentencepiece::normalizer::Normalizer *)((char *)this + 56));
  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1C3BB9B44);
}

_QWORD *sentencepiece::normalizer::Normalizer::DecodePrecompiledCharsMap@<X0>(unsigned int *a1@<X0>, unint64_t a2@<X1>, unsigned int **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned int *v7;
  unsigned int *v8;
  const char *v10;
  uint64_t v11;

  if (a2 < 5 || (v7 = (unsigned int *)*a1, a2 <= (unint64_t)v7))
  {
    v10 = "Blob for normalization rule is broken.";
    v11 = 38;
  }
  else
  {
    if ((unint64_t)(v7 + 1) < a2)
    {
      v8 = a1 + 1;
      *a3 = v8;
      a3[1] = v7;
      *a4 = (char *)v7 + (_QWORD)v8;
      a4[1] = a2 - (_QWORD)v7 - 4;
      return sentencepiece::util::Status::Status(a5);
    }
    v10 = "Trie data size exceeds the input blob size.";
    v11 = 43;
  }
  return (_QWORD *)sentencepiece::util::Status::Status(a5, 13, v10, v11);
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

void sentencepiece::normalizer::Normalizer::Normalize(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *__p;
  void *v4;
  uint64_t v5;

  __p = 0;
  v4 = 0;
  v5 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 32))(&v2);
  sentencepiece::util::Status::IgnoreError((sentencepiece::util::Status *)&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_1C21C85A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a9);
  if (*(char *)(v11 + 23) < 0)
    operator delete(*(void **)v11);
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sentencepiece::normalizer::Normalizer::MemoryMappableString(sentencepiece::normalizer::Normalizer *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _DWORD *v5;
  uint64_t v6;
  const std::string::value_type *v7;
  uint64_t v8;
  std::string::size_type v9;
  std::string *v10;
  std::string *v11;
  std::string::size_type size;
  std::string v13;

  v4 = *((unsigned __int8 *)this + 48);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  std::string::resize((std::string *)a2, 4uLL, 0);
  if (*(char *)(a2 + 23) >= 0)
    v5 = (_DWORD *)a2;
  else
    v5 = *(_DWORD **)a2;
  *v5 = v4;
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    v8 = *(_QWORD *)(v6 + 8);
    v7 = *(const std::string::value_type **)(v6 + 16);
    memset(&v13, 0, sizeof(v13));
    std::string::resize(&v13, 4uLL, 0);
    v9 = 4 * v8;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v13;
    else
      v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
    LODWORD(v10->__r_.__value_.__l.__data_) = v9;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v13;
    else
      v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    else
      size = v13.__r_.__value_.__l.__size_;
    std::string::append((std::string *)a2, (const std::string::value_type *)v11, size);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    std::string::append((std::string *)a2, v7, v9);
    std::string::append((std::string *)a2, *((const std::string::value_type **)this + 2), *((_QWORD *)this + 3));
  }
}

void sub_1C21C86D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

_QWORD *sentencepiece::normalizer::PrefixMatcher::PrefixMatcher(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  char v28;
  void *__p;
  char *v30;
  char *v31;

  *a1 = 0;
  v4 = a2[2];
  if (v4)
  {
    __p = 0;
    v30 = 0;
    v31 = 0;
    std::vector<char const*>::reserve(&__p, v4);
    v7 = (_QWORD *)*a2;
    v5 = a2 + 1;
    v6 = v7;
    if (v7 != v5)
    {
      v8 = v30;
      do
      {
        v9 = v6[4];
        if (v8 >= v31)
        {
          v10 = (v8 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v10 + 1) >> 61)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v11 = (v31 - (_BYTE *)__p) >> 2;
          if (v11 <= v10 + 1)
            v11 = v10 + 1;
          if ((unint64_t)(v31 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v12 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v12 = v11;
          if (v12)
            v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v31, v12);
          else
            v13 = 0;
          v14 = &v13[8 * v10];
          *(_QWORD *)v14 = v9;
          v8 = v14 + 8;
          v16 = (char *)__p;
          v15 = v30;
          if (v30 != __p)
          {
            do
            {
              v17 = *((_QWORD *)v15 - 1);
              v15 -= 8;
              *((_QWORD *)v14 - 1) = v17;
              v14 -= 8;
            }
            while (v15 != v16);
            v15 = (char *)__p;
          }
          __p = v14;
          v30 = v8;
          v31 = &v13[8 * v12];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_QWORD *)v8 = v9;
          v8 += 8;
        }
        v30 = v8;
        v18 = (_QWORD *)v6[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v6[2];
            v20 = *v19 == (_QWORD)v6;
            v6 = v19;
          }
          while (!v20);
        }
        v6 = v19;
      }
      while (v19 != v5);
    }
    v21 = (_QWORD *)operator new();
    *v21 = &off_1E7BEA0E8;
    v21[1] = 0;
    v21[2] = 0;
    v21[3] = 0;
    v22 = (_QWORD *)*a1;
    *a1 = v21;
    if (v22)
    {
      (*(void (**)(_QWORD *))(*v22 + 8))(v22);
      v21 = (_QWORD *)*a1;
    }
    if (Darts::DoubleArrayImpl<void,void,int,void>::build(v21, (v30 - (_BYTE *)__p) >> 3, (unint64_t)__p, 0, 0, 0))
    {
      v28 = 1;
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"normalizer.cc", 13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"(", 1);
      v24 = (_QWORD *)std::ostream::operator<<();
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(0) == (trie_->build(key.size(), const_cast<char **>(&key[0]), nullptr, nullptr))", 81);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"] ", 2);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v28);
    }
    if (__p)
    {
      v30 = (char *)__p;
      operator delete(__p);
    }
  }
  return a1;
}

void sub_1C21C895C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14)
{
  uint64_t *v14;
  uint64_t v16;

  if (__p)
    operator delete(__p);
  v16 = *v14;
  *v14 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(exception_object);
}

void std::vector<char const*>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *sentencepiece::normalizer::PrefixMatcher::MemoryMappableString@<X0>(sentencepiece::normalizer::PrefixMatcher *this@<X0>, _QWORD *a2@<X8>)
{
  if (*(_QWORD *)this)
    return std::string::basic_string[abi:ne180100](a2, *(void **)(*(_QWORD *)this + 16), 4 * *(_QWORD *)(*(_QWORD *)this + 8));
  else
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sentencepiece::ModelFactory::Create(sentencepiece::ModelFactory *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  sentencepiece::unigram::Model *v11;

  if (*((_QWORD *)this + 10))
    v4 = (_DWORD *)*((_QWORD *)this + 10);
  else
    v4 = &sentencepiece::_TrainerSpec_default_instance_;
  switch(v4[68])
  {
    case 1:
      absl::make_unique<sentencepiece::unigram::Model,sentencepiece::ModelProto const&>(this, &v11);
      goto LABEL_12;
    case 2:
      absl::make_unique<sentencepiece::bpe::Model,sentencepiece::ModelProto const&>(this, &v11);
      goto LABEL_12;
    case 3:
      absl::make_unique<sentencepiece::word::Model,sentencepiece::ModelProto const&>(this, &v11);
      goto LABEL_12;
    case 4:
      absl::make_unique<sentencepiece::character::Model,sentencepiece::ModelProto const&>(this, &v11);
LABEL_12:
      *a2 = v11;
      break;
    default:
      if ((int)sentencepiece::logging::GetMinLogLevel(this) <= 2)
      {
        LOBYTE(v11) = 0;
        v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"model_factory.cc", 16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(", 1);
        v6 = (_QWORD *)std::ostream::operator<<();
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)") ", 2);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"LOG(", 4);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ERROR", 5);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)") ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Unknown model_type: ", 20);
        std::ostream::operator<<();
        sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v11);
      }
      *a2 = 0;
      break;
  }
}

void sub_1C21C8D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)va);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::unigram::Model,sentencepiece::ModelProto const&>@<X0>(const sentencepiece::ModelProto *a1@<X0>, sentencepiece::unigram::Model **a2@<X8>)
{
  sentencepiece::unigram::Model *v4;
  uint64_t result;

  v4 = (sentencepiece::unigram::Model *)operator new();
  result = sentencepiece::unigram::Model::Model(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1C21C8DBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::bpe::Model,sentencepiece::ModelProto const&>@<X0>(const sentencepiece::ModelProto *a1@<X0>, sentencepiece::bpe::Model **a2@<X8>)
{
  sentencepiece::bpe::Model *v4;
  uint64_t result;

  v4 = (sentencepiece::bpe::Model *)operator new();
  result = sentencepiece::bpe::Model::Model(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1C21C8E30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::word::Model,sentencepiece::ModelProto const&>@<X0>(const sentencepiece::ModelProto *a1@<X0>, sentencepiece::word::Model **a2@<X8>)
{
  sentencepiece::word::Model *v4;
  uint64_t result;

  v4 = (sentencepiece::word::Model *)operator new();
  result = sentencepiece::word::Model::Model(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1C21C8EA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::character::Model,sentencepiece::ModelProto const&>@<X0>(const sentencepiece::ModelProto *a1@<X0>, sentencepiece::character::Model **a2@<X8>)
{
  sentencepiece::character::Model *v4;
  uint64_t result;

  v4 = (sentencepiece::character::Model *)operator new();
  result = sentencepiece::character::Model::Model(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1C21C8F18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::unigram::Model,sentencepiece::MemoryMappedModelProto const&,std::string_view &>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = sentencepiece::unigram::Model::Model(v6, a1, *a2, a2[1]);
  *a3 = v6;
  return result;
}

void sub_1C21C8F94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

void sentencepiece::ImmutableSentencePieceText::~ImmutableSentencePieceText(sentencepiece::ImmutableSentencePieceText *this)
{
  *(_QWORD *)this = &off_1E7BE8F40;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &off_1E7BE8F40;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t sentencepiece::ImmutableSentencePieceText::mutable_proto(sentencepiece::ImmutableSentencePieceText *this)
{
  uint64_t result;
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = (char *)this + 16;
  result = *((_QWORD *)this + 2);
  if (!result)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN13sentencepiece17SentencePieceTextENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v7);
    std::shared_ptr<sentencepiece::SentencePieceText>::operator=[abi:ne180100]((uint64_t)v3, &v7);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
    if (*((_QWORD *)&v7 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    result = *((_QWORD *)this + 2);
    *((_QWORD *)this + 1) = result;
  }
  return result;
}

uint64_t std::shared_ptr<sentencepiece::SentencePieceText>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sentencepiece::ImmutableNBestSentencePieceText::~ImmutableNBestSentencePieceText(sentencepiece::ImmutableNBestSentencePieceText *this)
{
  *(_QWORD *)this = &off_1E7BE8FA0;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E7BE8FA0;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t sentencepiece::ImmutableNBestSentencePieceText::mutable_proto(sentencepiece::ImmutableNBestSentencePieceText *this)
{
  uint64_t result;
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v2 = (char *)this + 8;
  result = *((_QWORD *)this + 1);
  if (!result)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN13sentencepiece22NBestSentencePieceTextENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v6);
    std::shared_ptr<sentencepiece::SentencePieceText>::operator=[abi:ne180100]((uint64_t)v2, &v6);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
    if (*((_QWORD *)&v6 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    return *(_QWORD *)v2;
  }
  return result;
}

_QWORD *sentencepiece::ImmutableNBestSentencePieceText::SerializeAsString@<X0>(sentencepiece::ImmutableNBestSentencePieceText *this@<X0>, _QWORD *a2@<X8>)
{
  google::protobuf::MessageLite *v2;

  v2 = (google::protobuf::MessageLite *)*((_QWORD *)this + 1);
  if (v2)
    return (_QWORD *)google::protobuf::MessageLite::SerializeAsString(v2, (uint64_t)a2);
  else
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

void sentencepiece::SentencePieceProcessor::~SentencePieceProcessor(void **this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *this = &off_1E7BE8C50;
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  v2 = this[11];
  this[11] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  v3 = this[8];
  if (v3)
  {
    this[9] = v3;
    operator delete(v3);
  }
  v4 = this[5];
  if (v4)
  {
    this[6] = v4;
    operator delete(v4);
  }
  v5 = this[4];
  this[4] = 0;
  if (v5)
    (*(void (**)(void *))(*(_QWORD *)v5 + 8))(v5);
  v6 = this[3];
  this[3] = 0;
  if (v6)
    (*(void (**)(void *))(*(_QWORD *)v6 + 8))(v6);
  v7 = this[2];
  this[2] = 0;
  if (v7)
    (*(void (**)(void *))(*(_QWORD *)v7 + 8))(v7);
  v8 = this[1];
  this[1] = 0;
  if (v8)
    (*(void (**)(void *))(*(_QWORD *)v8 + 8))(v8);
}

{
  sentencepiece::SentencePieceProcessor::~SentencePieceProcessor(this);
  JUMPOUT(0x1C3BB9B44);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *a1 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1C3BB970C](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1C3BB9A90](a1 + 53);
  return a1;
}

uint64_t absl::make_unique<sentencepiece::ModelProto>@<X0>(sentencepiece::ModelProto **a1@<X8>)
{
  sentencepiece::ModelProto *v2;
  uint64_t result;

  v2 = (sentencepiece::ModelProto *)operator new();
  result = sentencepiece::ModelProto::ModelProto(v2, 0);
  *a1 = v2;
  return result;
}

void sub_1C21C93B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10A1C4047CE62CFLL);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::io::LoadModelProto@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, google::protobuf::MessageLite *a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  char *v6;
  unsigned int v7;
  uint64_t result;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a2)
    return sentencepiece::util::Status::Status(a4, 5, "model file path should not be empty.", 36);
  sentencepiece::filesystem::NewReadableFile(a1, a2, 1, &v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    v13 = 0;
    v14 = 0;
    v15 = 0;
    if (((*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v16 + 32))(v16, &v13) & 1) != 0)
    {
      if (v15 >= 0)
        v6 = (char *)&v13;
      else
        v6 = v13;
      if (v15 >= 0)
        v7 = HIBYTE(v15);
      else
        v7 = v14;
      if ((google::protobuf::MessageLite::ParseFromArray(a3, v6, v7) & 1) != 0)
      {
        sentencepiece::util::Status::Status(a4);
LABEL_18:
        if (SHIBYTE(v15) < 0)
          operator delete(v13);
        goto LABEL_20;
      }
      v9 = 13;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"model_proto->ParseFromArray(serialized.data(), serialized.size())", 65);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a4);
    }
    else
    {
      v9 = 13;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"input->ReadAll(&serialized)", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a4);
    }
    v10[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v10[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v11 < 0)
      operator delete((void *)v10[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C3BB9A90](&v12);
    goto LABEL_18;
  }
LABEL_20:
  result = v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1C21C9688(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  v3 = *(_QWORD *)(v1 - 56);
  *(_QWORD *)(v1 - 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::LoadOrDie(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  char v9;
  uint64_t v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v10);
  if (v10)
  {
    v9 = 1;
    v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"(", 1);
    v2 = (_QWORD *)std::ostream::operator<<();
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)") [", 3);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"_status.ok()", 12);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"] ", 2);
    sentencepiece::util::Status::ToString((sentencepiece::util::Status *)&v10, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v9);
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
}

void sub_1C21C97DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)(v15 - 25));
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)(v15 - 24));
  _Unwind_Resume(a1);
}

sentencepiece::ModelProto *sentencepiece::SentencePieceProcessor::Load(sentencepiece::SentencePieceProcessor *this, const sentencepiece::ModelProto *a2)
{
  sentencepiece::ModelProto *v4;
  uint64_t v5;
  sentencepiece::ModelProto *result;
  uint64_t v7;
  sentencepiece::ModelProto *v8;
  sentencepiece::ModelProto *v9;

  absl::make_unique<sentencepiece::ModelProto>(&v9);
  sentencepiece::ModelProto::CopyFrom(v9, a2);
  v8 = v9;
  v9 = 0;
  (*(void (**)(sentencepiece::SentencePieceProcessor *, sentencepiece::ModelProto **))(*(_QWORD *)this + 40))(this, &v8);
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    sentencepiece::ModelProto::~ModelProto(v4);
    MEMORY[0x1C3BB9B44](v5);
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    sentencepiece::ModelProto::~ModelProto(result);
    return (sentencepiece::ModelProto *)MEMORY[0x1C3BB9B44](v7, 0x10A1C4047CE62CFLL);
  }
  return result;
}

void sub_1C21C98C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, sentencepiece::ModelProto *a9, sentencepiece::ModelProto *a10)
{
  std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0);
  std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a10, 0);
  _Unwind_Resume(a1);
}

sentencepiece::ModelProto *sentencepiece::SentencePieceProcessor::LoadFromSerializedProto@<X0>(uint64_t a1@<X0>, char *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  sentencepiece::ModelProto *v8;
  sentencepiece::ModelProto *v9;
  uint64_t v10;
  sentencepiece::ModelProto *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  sentencepiece::ModelProto *v15;
  unsigned int v16;
  _QWORD v17[11];
  char v18;
  uint64_t v19;
  sentencepiece::ModelProto *v20;

  absl::make_unique<sentencepiece::ModelProto>(&v20);
  if ((google::protobuf::MessageLite::ParseFromArray(v20, a2, a3) & 1) != 0)
  {
    v8 = v20;
    v20 = 0;
    v15 = v8;
    (*(void (**)(uint64_t, sentencepiece::ModelProto **))(*(_QWORD *)a1 + 40))(a1, &v15);
    v9 = v15;
    v15 = 0;
    if (v9)
    {
      sentencepiece::ModelProto::~ModelProto(v9);
      MEMORY[0x1C3BB9B44](v10);
    }
  }
  else
  {
    v16 = 13;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"model_proto->ParseFromArray(serialized.data(), serialized.size())", 65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v16, a4);
    v17[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v17[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v18 < 0)
      operator delete((void *)v17[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C3BB9A90](&v19);
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    sentencepiece::ModelProto::~ModelProto(result);
    return (sentencepiece::ModelProto *)MEMORY[0x1C3BB9B44](v12, 0x10A1C4047CE62CFLL, v13, v14);
  }
  return result;
}

void sub_1C21C9AB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100]((sentencepiece::ModelProto **)(v1 - 56), 0);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::Load(sentencepiece::logging *a1@<X0>, uint64_t *a2@<X1>, sentencepiece::util::Status *a3@<X8>)
{
  uint64_t v6;
  _BYTE *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__split_buffer<std::string>::pointer first;
  uint64_t v23;
  std::__split_buffer<std::string>::pointer v24;
  const sentencepiece::NormalizerSpec *v25;
  const sentencepiece::TrainerSpec *v26;
  std::__split_buffer<std::string>::pointer v27;
  uint64_t v28;
  std::__split_buffer<std::string>::pointer v29;
  const sentencepiece::NormalizerSpec *v30;
  std::string *v31;
  const sentencepiece::NormalizerSpec *v32;
  unint64_t v33;
  std::__split_buffer<std::string>::pointer v34;
  uint64_t v35;
  std::__split_buffer<std::string>::pointer v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  const std::string::value_type *v56;
  std::string::size_type v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  std::string *v61;
  std::string::size_type size;
  sentencepiece::logging *v63;
  unint64_t v64;
  size_t v65;
  void *v66;
  std::vector<std::string>::pointer end;
  __int128 v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  std::string *v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  sentencepiece::logging *MinLogLevel;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  std::string __p;
  std::string v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::vector<std::string> v101;
  std::__split_buffer<std::string> __v;

  v6 = *a2;
  v7 = *(_BYTE **)(*a2 + 88);
  if (!v7)
    v7 = &sentencepiece::_NormalizerSpec_default_instance_;
  if (v7[80])
  {
    if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 0)
    {
      LOBYTE(__v.__first_) = 0;
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
      v9 = (_QWORD *)std::ostream::operator<<();
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)") ", 2);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"LOG(", 4);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"INFO", 4);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Enable Apple addition for backward compatibility", 48);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&__v);
    }
    v6 = *a2;
    *(_DWORD *)(v6 + 48) = *(_DWORD *)(*a2 + 48) | 1;
    v14 = *(_QWORD *)(v6 + 80);
    if (!v14)
    {
      v15 = *(_QWORD *)(v6 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      v14 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::TrainerSpec>((uint64_t)v16);
      *(_QWORD *)(v6 + 80) = v14;
      v6 = *a2;
    }
    *(_DWORD *)(v14 + 40) |= 0x4000u;
    *(_BYTE *)(v14 + 245) = 1;
    *(_DWORD *)(v6 + 48) |= 2u;
    v17 = *(_QWORD *)(v6 + 88);
    if (!v17)
    {
      v18 = *(_QWORD *)(v6 + 8);
      v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
      if ((v18 & 1) != 0)
        v19 = (_QWORD *)*v19;
      v17 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>((uint64_t)v19);
      *(_QWORD *)(v6 + 88) = v17;
      v6 = *a2;
    }
    *(_DWORD *)(v17 + 48) |= 0x10u;
    *(_BYTE *)(v17 + 81) = 1;
  }
  *a2 = 0;
  if (v6)
    v20 = v6 + 16;
  else
    v20 = 0;
  v21 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = v20;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v20 = *((_QWORD *)a1 + 4);
  }
  sentencepiece::ModelFactory::Create((sentencepiece::ModelFactory *)(v20 - 16), &__v);
  first = __v.__first_;
  __v.__first_ = 0;
  v23 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = first;
  if (v23)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = __v.__first_;
    __v.__first_ = 0;
    if (v24)
      (*(void (**)(std::__split_buffer<std::string>::pointer))(v24->__r_.__value_.__r.__words[0] + 8))(v24);
  }
  if (*(_QWORD *)(v20 + 72))
    v25 = *(const sentencepiece::NormalizerSpec **)(v20 + 72);
  else
    v25 = (const sentencepiece::NormalizerSpec *)&sentencepiece::_NormalizerSpec_default_instance_;
  if (*(_QWORD *)(v20 + 64))
    v26 = *(const sentencepiece::TrainerSpec **)(v20 + 64);
  else
    v26 = (const sentencepiece::TrainerSpec *)&sentencepiece::_TrainerSpec_default_instance_;
  absl::make_unique<sentencepiece::normalizer::Normalizer,sentencepiece::NormalizerSpec const&,sentencepiece::TrainerSpec const&>(v25, v26, (sentencepiece::normalizer::Normalizer **)&__v);
  v27 = __v.__first_;
  __v.__first_ = 0;
  v28 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v27;
  if (v28)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v29 = __v.__first_;
    __v.__first_ = 0;
    if (v29)
      (*(void (**)(std::__split_buffer<std::string>::pointer))(v29->__r_.__value_.__r.__words[0] + 8))(v29);
  }
  if ((*(_DWORD *)(v20 + 32) & 8) != 0)
  {
    v30 = *(const sentencepiece::NormalizerSpec **)(v20 + 88);
    if (!v30)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__v, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4990);
      v31 = google::protobuf::internal::LogMessage::operator<<((std::string *)&__v, "CHECK failed: !value || denormalizer_spec_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v101, (const char **)&v31->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&__v.__first_);
      v30 = *(const sentencepiece::NormalizerSpec **)(v20 + 88);
    }
    if (v30)
      v32 = v30;
    else
      v32 = (const sentencepiece::NormalizerSpec *)&sentencepiece::_NormalizerSpec_default_instance_;
    v33 = *((_QWORD *)v32 + 8) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v33 + 23) < 0)
    {
      if (!*(_QWORD *)(v33 + 8))
        goto LABEL_45;
    }
    else if (!*(_BYTE *)(v33 + 23))
    {
      goto LABEL_45;
    }
    absl::make_unique<sentencepiece::normalizer::Normalizer,sentencepiece::NormalizerSpec const&>(v32, (sentencepiece::normalizer::Normalizer **)&__v);
    v34 = __v.__first_;
    __v.__first_ = 0;
    v35 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 3) = v34;
    if (v35)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      v36 = __v.__first_;
      __v.__first_ = 0;
      if (v36)
        (*(void (**)(std::__split_buffer<std::string>::pointer))(v36->__r_.__value_.__r.__words[0] + 8))(v36);
    }
  }
LABEL_45:
  v37 = *((_QWORD *)a1 + 2);
  v38 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 1) + 32))(*((_QWORD *)a1 + 1));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v38);
  (*(void (**)(sentencepiece::logging *))(*(_QWORD *)a1 + 88))(a1);
  if (!*(_QWORD *)a3)
  {
    sentencepiece::util::Status::~Status(a3);
    memset(&v101, 0, sizeof(v101));
    v98 = 0;
    v99 = 0;
    v100 = 0;
    v39 = *(int **)(v20 + 80);
    if (!v39)
      v39 = (int *)&sentencepiece::_SelfTestData_default_instance_;
    v40 = *((_QWORD *)v39 + 7);
    if (v40)
      v41 = (uint64_t *)(v40 + 8);
    else
      v41 = 0;
    v42 = v39[12];
    if ((_DWORD)v42)
    {
      v43 = &v41[v42];
      while (1)
      {
        v44 = *v41;
        v45 = *(_QWORD *)(*v41 + 24) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v45 + 23) < 0)
        {
          v47 = *(_QWORD *)v45;
          v46 = *(_QWORD *)(v45 + 8);
        }
        else
        {
          v46 = *(unsigned __int8 *)(v45 + 23);
          v47 = *(_QWORD *)(*v41 + 24) & 0xFFFFFFFFFFFFFFFELL;
        }
        (*(void (**)(sentencepiece::logging *, unint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v47, v46, &v98);
        if (*(_QWORD *)a3)
          break;
        sentencepiece::util::Status::~Status(a3);
        memset(&v97, 0, sizeof(v97));
        v48 = v98;
        if (v98 == v99)
        {
          v52 = v98;
        }
        else
        {
          v49 = *(char *)(v98 + 23);
          if (v49 >= 0)
            v50 = (const std::string::value_type *)v98;
          else
            v50 = *(const std::string::value_type **)v98;
          if (v49 >= 0)
            v51 = *(unsigned __int8 *)(v98 + 23);
          else
            v51 = *(_QWORD *)(v98 + 8);
          std::string::append(&v97, v50, v51);
          v48 = v98;
          v52 = v99;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v52 - v48) >> 3) >= 2)
        {
          v53 = 0;
          v54 = 1;
          do
          {
            std::string::append(&v97, " ", 1uLL);
            v55 = *(char *)(v98 + v53 + 47);
            if (v55 >= 0)
              v56 = (const std::string::value_type *)(v98 + v53 + 24);
            else
              v56 = *(const std::string::value_type **)(v98 + v53 + 24);
            if (v55 >= 0)
              v57 = *(unsigned __int8 *)(v98 + v53 + 47);
            else
              v57 = *(_QWORD *)(v98 + v53 + 32);
            std::string::append(&v97, v56, v57);
            ++v54;
            v53 += 24;
          }
          while (v54 < 0xAAAAAAAAAAAAAAABLL * ((v99 - v98) >> 3));
        }
        v58 = *(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v58 + 23) < 0)
        {
          v60 = *(_QWORD *)v58;
          v59 = *(_QWORD *)(v58 + 8);
        }
        else
        {
          v59 = *(unsigned __int8 *)(v58 + 23);
          v60 = *(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFFELL;
        }
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v61 = &v97;
        else
          v61 = (std::string *)v97.__r_.__value_.__r.__words[0];
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v97.__r_.__value_.__r.__words[2]);
        else
          size = v97.__r_.__value_.__l.__size_;
        v63 = (sentencepiece::logging *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t, std::string *, std::string::size_type))(**((_QWORD **)a1 + 1) + 192))(*((_QWORD *)a1 + 1), v60, v59, v61, size);
        if ((v63 & 1) == 0)
        {
          v64 = *(_QWORD *)(v44 + 24) & 0xFFFFFFFFFFFFFFFELL;
          if (*(char *)(v64 + 23) < 0)
          {
            v66 = *(void **)v64;
            v65 = *(_QWORD *)(v64 + 8);
          }
          else
          {
            v65 = *(unsigned __int8 *)(v64 + 23);
            v66 = (void *)(*(_QWORD *)(v44 + 24) & 0xFFFFFFFFFFFFFFFELL);
          }
          absl::StrCat<char [2],std::string,char [2],std::string>(v66, v65, "\t", (void **)(*(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFFELL), "\t", (void **)&v97.__r_.__value_.__l.__data_, &__p);
          end = v101.__end_;
          if (v101.__end_ >= v101.__end_cap_.__value_)
          {
            v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v101.__end_ - (char *)v101.__begin_) >> 3);
            v70 = v69 + 1;
            if (v69 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v101.__end_cap_.__value_ - (char *)v101.__begin_) >> 3) > v70)
              v70 = 0x5555555555555556 * (((char *)v101.__end_cap_.__value_ - (char *)v101.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v101.__end_cap_.__value_ - (char *)v101.__begin_) >> 3) >= 0x555555555555555)
              v71 = 0xAAAAAAAAAAAAAAALL;
            else
              v71 = v70;
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v101.__end_cap_;
            if (v71)
              v72 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)&v101.__end_cap_, v71);
            else
              v72 = 0;
            v73 = v72 + v69;
            __v.__first_ = v72;
            __v.__begin_ = v73;
            __v.__end_cap_.__value_ = &v72[v71];
            v74 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            v73->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v73->__r_.__value_.__l.__data_ = v74;
            memset(&__p, 0, sizeof(__p));
            __v.__end_ = v73 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v101, &__v);
            v75 = v101.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&__v);
            v101.__end_ = v75;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
            v68 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            v101.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v68;
            v101.__end_ = end + 1;
          }
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v97.__r_.__value_.__l.__data_);
        if (++v41 == v43)
        {
          if (v101.__begin_ == v101.__end_)
            goto LABEL_119;
          MinLogLevel = (sentencepiece::logging *)sentencepiece::logging::GetMinLogLevel(v63);
          if ((int)MinLogLevel <= 0)
          {
            LOBYTE(__v.__first_) = 0;
            v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"(", 1);
            v78 = (_QWORD *)std::ostream::operator<<();
            v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)") ", 2);
            v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"LOG(", 4);
            v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"INFO", 4);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)") ", 2);
            v82 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"/", 1);
            v83 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" samples did not pass the test.", 31);
            sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&__v);
          }
          begin = v101.__begin_;
          v85 = v101.__end_;
          if (v101.__begin_ != v101.__end_)
          {
            v86 = (_QWORD *)MEMORY[0x1E0DE4A50];
            do
            {
              MinLogLevel = (sentencepiece::logging *)sentencepiece::logging::GetMinLogLevel(MinLogLevel);
              if ((int)MinLogLevel <= 0)
              {
                LOBYTE(__v.__first_) = 0;
                v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"sentencepiece_processor.cc", 26);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"(", 1);
                v88 = (_QWORD *)std::ostream::operator<<();
                v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)") ", 2);
                v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"LOG(", 4);
                v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"INFO", 4);
                v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)") ", 2);
                v93 = SHIBYTE(begin->__r_.__value_.__r.__words[2]);
                if (v93 >= 0)
                  v94 = (uint64_t)begin;
                else
                  v94 = begin->__r_.__value_.__r.__words[0];
                if (v93 >= 0)
                  v95 = HIBYTE(begin->__r_.__value_.__r.__words[2]);
                else
                  v95 = begin->__r_.__value_.__l.__size_;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, v94, v95);
                sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&__v);
              }
              ++begin;
            }
            while (begin != v85);
          }
          sentencepiece::util::Status::Status(a3, 13, "Self-test failures. See LOG(INFO).", 34);
          break;
        }
      }
    }
    else
    {
LABEL_119:
      sentencepiece::util::Status::Status(a3);
    }
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v98;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v101;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  }
}

void sub_1C21CA364(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, void *a8, uint64_t a9, int __pa, __int16 __p_4, char __p_6, char __p_7, uint64_t a14, uint64_t a15, void *a16, char a17, uint64_t a18, uint64_t a19, std::__split_buffer<std::string> *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  google::protobuf::internal::LogMessage::~LogMessage((void **)&a25);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::normalizer::Normalizer,sentencepiece::NormalizerSpec const&,sentencepiece::TrainerSpec const&>@<X0>(const sentencepiece::NormalizerSpec *a1@<X0>, const sentencepiece::TrainerSpec *a2@<X1>, sentencepiece::normalizer::Normalizer **a3@<X8>)
{
  sentencepiece::normalizer::Normalizer *v6;
  uint64_t result;

  v6 = (sentencepiece::normalizer::Normalizer *)operator new();
  result = sentencepiece::normalizer::Normalizer::Normalizer(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_1C21CA478(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::normalizer::Normalizer,sentencepiece::NormalizerSpec const&>@<X0>(const sentencepiece::NormalizerSpec *a1@<X0>, sentencepiece::normalizer::Normalizer **a2@<X8>)
{
  sentencepiece::normalizer::Normalizer *v4;
  uint64_t result;

  v4 = (sentencepiece::normalizer::Normalizer *)operator new();
  result = sentencepiece::normalizer::Normalizer::Normalizer(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1C21CA4EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

void absl::StrCat<char [2],std::string,char [2],std::string>(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, char *a5@<X4>, void **a6@<X5>, std::string *a7@<X8>)
{
  size_t v12;
  std::string *p_p;
  std::string::size_type size;
  std::string *v15;
  std::string __p;
  std::string __dst;

  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  v12 = strlen(a3);
  absl::StrCat<std::string,char [2],std::string>(a3, v12, a4, a5, a6, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a7 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1C21CA5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::SetEncodeExtraOptions(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  sentencepiece::SentencePieceProcessor::ParseExtraOptions((sentencepiece::ModelInterface **)a1, a2, a3, (char **)(a1 + 40), a4);
}

void sentencepiece::SentencePieceProcessor::ParseExtraOptions(sentencepiece::ModelInterface **a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char **a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  const char *v27;
  size_t v28;
  uint64_t v29;
  const char *v30;
  size_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *__p[2];
  __int128 v45;
  uint64_t v46;
  _QWORD v47[21];

  v47[19] = *MEMORY[0x1E0C80C00];
  a4[1] = *a4;
  if (a3)
  {
    (*((void (**)(sentencepiece::ModelInterface **))*a1 + 11))(a1);
    if (!*(_QWORD *)a5)
    {
      sentencepiece::util::Status::~Status(a5);
      if ((v10 & 1) == 0
      {
        v43 = xmmword_1E7BECF58;
        *(_OWORD *)__p = unk_1E7BECF68;
        v45 = xmmword_1E7BECF78;
        v46 = 3;
        v39 = xmmword_1E7BECF18;
        v40 = unk_1E7BECF28;
        v41 = xmmword_1E7BECF38;
        v42 = *(_OWORD *)&off_1E7BECF48;
        std::map<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>::map[abi:ne180100]((uint64_t)&sentencepiece::SentencePieceProcessor::ParseExtraOptions(std::string_view,std::vector<sentencepiece::SentencePieceProcessor::ExtraOption> *)const::extra_option_map, (uint64_t)&v39, 5);
        __cxa_atexit((void (*)(void *))std::map<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>::~map[abi:ne180100], &sentencepiece::SentencePieceProcessor::ParseExtraOptions(std::string_view,std::vector<sentencepiece::SentencePieceProcessor::ExtraOption> *)const::extra_option_map, &dword_1C2196000);
      }
      absl::internal::Splitter::Splitter((char **)&v37, a2, a3, ":", 1, 0);
      v11 = (uint64_t *)v37;
      v12 = v38;
      if (v37 == v38)
      {
LABEL_29:
        if (v11)
        {
          v38 = v11;
          operator delete(v11);
        }
        sentencepiece::util::Status::Status(a5);
      }
      else
      {
        while (1)
        {
          v13 = std::__tree<std::string_view>::find<std::string_view>((uint64_t)&sentencepiece::SentencePieceProcessor::ParseExtraOptions(std::string_view,std::vector<sentencepiece::SentencePieceProcessor::ExtraOption> *)const::extra_option_map, (uint64_t)v11);
          v14 = v13;
          if (v13 == (_QWORD *)&unk_1EF770218)
            break;
          v16 = a4[1];
          v15 = (unint64_t)a4[2];
          if ((unint64_t)v16 >= v15)
          {
            v18 = *a4;
            v19 = (v16 - *a4) >> 2;
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 62)
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            v21 = v15 - (_QWORD)v18;
            if (v21 >> 1 > v20)
              v20 = v21 >> 1;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
              v22 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v22 = v20;
            if (v22)
            {
              v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v22);
              v18 = *a4;
              v16 = a4[1];
            }
            else
            {
              v23 = 0;
            }
            v24 = &v23[4 * v19];
            *(_DWORD *)v24 = *((_DWORD *)v14 + 12);
            v17 = v24 + 4;
            while (v16 != v18)
            {
              v25 = *((_DWORD *)v16 - 1);
              v16 -= 4;
              *((_DWORD *)v24 - 1) = v25;
              v24 -= 4;
            }
            *a4 = v24;
            a4[1] = v17;
            a4[2] = &v23[4 * v22];
            if (v18)
              operator delete(v18);
          }
          else
          {
            *(_DWORD *)v16 = *((_DWORD *)v13 + 12);
            v17 = v16 + 4;
          }
          a4[1] = v17;
          v26 = *((_DWORD *)v14 + 12);
          if (v26 == 1)
          {
            v27 = sentencepiece::ModelInterface::bos_piece(a1[1]);
            v28 = strlen(v27);
            v29 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*a1 + 63))(a1, v27, v28);
            if (((*((uint64_t (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 66))(a1, v29) & 1) != 0)
            {
              LODWORD(v39) = 13;
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v39 + 8);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)") [", 3);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->bos_piece().data())))", 68);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"] ", 2);
              v33 = sentencepiece::ModelInterface::bos_piece(a1[1]);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)v33, v34);
              sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a5);
              goto LABEL_38;
            }
            v26 = *((_DWORD *)v14 + 12);
          }
          if (v26 == 2)
          {
            v30 = sentencepiece::ModelInterface::eos_piece(a1[1]);
            v31 = strlen(v30);
            v32 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*a1 + 63))(a1, v30, v31);
            if (((*((uint64_t (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 66))(a1, v32) & 1) != 0)
            {
              LODWORD(v39) = 13;
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v39 + 8);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)") [", 3);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->eos_piece().data())))", 68);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"] ", 2);
              v35 = sentencepiece::ModelInterface::eos_piece(a1[1]);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)v35, v36);
              sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a5);
LABEL_38:
              *((_QWORD *)&v39 + 1) = *MEMORY[0x1E0DE4F60];
              *(_QWORD *)((char *)&v39 + *(_QWORD *)(*((_QWORD *)&v39 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
              *(_QWORD *)&v40 = MEMORY[0x1E0DE4FB8] + 16;
              if (SBYTE7(v45) < 0)
                operator delete(__p[0]);
              goto LABEL_40;
            }
          }
          v11 += 2;
          if (v11 == v12)
          {
            v11 = (uint64_t *)v37;
            goto LABEL_29;
          }
        }
        LODWORD(v39) = 13;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v39 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"it != extra_option_map.end()", 28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"option \"", 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, *v11, v11[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"\" is not available.", 19);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a5);
        *((_QWORD *)&v39 + 1) = *MEMORY[0x1E0DE4F60];
        *(_QWORD *)((char *)&v39 + *(_QWORD *)(*((_QWORD *)&v39 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x1E0DE4F60]
                                                                                              + 24);
        *(_QWORD *)&v40 = MEMORY[0x1E0DE4FB8] + 16;
        if (SBYTE7(v45) < 0)
          operator delete(__p[0]);
LABEL_40:
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1C3BB9A90](v47);
        if (v37)
        {
          v38 = (uint64_t *)v37;
          operator delete(v37);
        }
      }
    }
  }
  else
  {
    sentencepiece::util::Status::Status(a5);
  }
}

void sub_1C21CACC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SetDecodeExtraOptions(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  sentencepiece::SentencePieceProcessor::ParseExtraOptions((sentencepiece::ModelInterface **)a1, a2, a3, (char **)(a1 + 64), a4);
}

void sentencepiece::SentencePieceProcessor::SetVocabulary(_QWORD *a1@<X0>, _OWORD **a2@<X1>, sentencepiece::util::Status *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  _QWORD *v19;
  _QWORD v20[2];
  unsigned int v21;
  _QWORD *v22[11];
  char v23;
  uint64_t v24;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*a1 + 88))(a3);
  if (*(_QWORD *)a3)
    return;
  sentencepiece::util::Status::~Status(a3);
  v6 = a1[4];
  if (!v6 || *(_UNKNOWN **)v6 != &unk_1E7BE8610)
  {
    v21 = 13;
    v7 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"SetVocabulary is not supported when mmap-based model is loaded.", 63);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v21, (uint64_t)a3);
LABEL_5:
    v22[0] = *(_QWORD **)MEMORY[0x1E0DE4F60];
    *(_QWORD **)((char *)v22 + *(v22[0] - 3)) = *(_QWORD **)(MEMORY[0x1E0DE4F60] + 24);
    v22[1] = (_QWORD *)(MEMORY[0x1E0DE4FB8] + 16);
    if (v23 < 0)
      operator delete(v22[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C3BB9A90](&v24);
    return;
  }
  v8 = &sentencepiece::_TrainerSpec_default_instance_;
  if (*(_QWORD *)(v6 + 64))
    v8 = *(_DWORD **)(v6 + 64);
  if ((v8[68] - 1) >= 2)
  {
    v21 = 13;
    v19 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"type == TrainerSpec::UNIGRAM || type == TrainerSpec::BPE", 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Vocabulary constraint is only enabled in subword units.", 55);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v21, (uint64_t)a3);
    goto LABEL_5;
  }
  std::set<std::string_view>::set[abi:ne180100]<std::__wrap_iter<std::string_view const*>>((uint64_t)&v21, *a2, a2[1]);
  if (*(int *)(v6 + 48) >= 1)
  {
    v9 = 0;
    do
    {
      v10 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(v6 + 40, v9);
      v11 = v10;
      if ((*(_DWORD *)(v10 + 60) - 2) >= 3)
      {
        v12 = *(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v12 + 23) < 0)
        {
          v14 = *(_QWORD *)v12;
          v13 = *(_QWORD *)(v12 + 8);
        }
        else
        {
          v13 = *(unsigned __int8 *)(v12 + 23);
          v14 = *(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFFELL;
        }
        v20[0] = v14;
        v20[1] = v13;
        if (v22 == std::__tree<std::string_view>::find<std::string_view>((uint64_t)&v21, (uint64_t)v20)
          && ((v15 = *(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL, *(char *)(v15 + 23) < 0)
            ? (unsigned __int8 *)(v17 = *(unsigned __int8 **)v15, v16 = *(_QWORD *)(v15 + 8))
            : (v16 = *(unsigned __int8 *)(v15 + 23),
               v17 = (unsigned __int8 *)(*(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL)),
              v16 != asc_1C231416F[(unint64_t)*v17 >> 4]))
        {
          if (!sentencepiece::ModelProto_SentencePiece_Type_IsValid((sentencepiece *)5))
LABEL_32:
            __assert_rtn("_internal_set_type", "sentencepiece_model.pb.h", 4686, "::sentencepiece::ModelProto_SentencePiece_Type_IsValid(value)");
          v18 = 5;
        }
        else
        {
          if (!sentencepiece::ModelProto_SentencePiece_Type_IsValid((sentencepiece *)1))
            goto LABEL_32;
          v18 = 1;
        }
        *(_DWORD *)(v11 + 40) |= 4u;
        *(_DWORD *)(v11 + 60) = v18;
      }
      ++v9;
    }
    while (v9 < *(_DWORD *)(v6 + 48));
  }
  sentencepiece::util::Status::Status(a3);
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy((uint64_t)&v21, v22[0]);
}

void sub_1C21CB0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::SentencePieceProcessor::ResetVocabulary@<X0>(sentencepiece::SentencePieceProcessor *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  result = (*(_QWORD *(**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)this + 88))(a2);
  if (!*(_QWORD *)a2)
  {
    sentencepiece::util::Status::~Status(a2);
    v5 = *((_QWORD *)this + 4);
    if (v5 && *(_UNKNOWN **)v5 == &unk_1E7BE8610)
    {
      v7 = *(_QWORD *)(v5 + 56);
      if (v7)
        v8 = (uint64_t *)(v7 + 8);
      else
        v8 = 0;
      v9 = *(int *)(v5 + 48);
      if ((_DWORD)v9)
      {
        v10 = 8 * v9;
        do
        {
          v11 = *v8;
          if (*(_DWORD *)(*v8 + 60) == 5)
          {
            if (!sentencepiece::ModelProto_SentencePiece_Type_IsValid((sentencepiece *)1))
              sentencepiece::SentencePieceProcessor::ResetVocabulary();
            *(_DWORD *)(v11 + 40) |= 4u;
            *(_DWORD *)(v11 + 60) = 1;
          }
          ++v8;
          v10 -= 8;
        }
        while (v10);
      }
      return sentencepiece::util::Status::Status(a2);
    }
    else
    {
      v12 = 13;
      v6 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"ResetVocabulary is not supported when mmap-based model is loaded.", 65);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v12, (uint64_t)a2);
      v13[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v13[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v14 < 0)
        operator delete((void *)v13[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1C3BB9A90](&v15);
    }
  }
  return result;
}

void sub_1C21CB320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::LoadVocabulary@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, sentencepiece::util::Status *a5@<X8>)
{
  void **v8;
  unint64_t v9;
  std::vector<std::string>::pointer end;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  std::vector<std::string>::pointer v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  const char *data;
  uint64_t size;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  uint64_t result;
  void *__p;
  _QWORD v25[11];
  char v26;
  uint64_t v27;
  std::vector<std::string> v28;
  uint64_t v29;
  std::string *v30;
  unint64_t v31;
  void **v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36[4];

  sentencepiece::filesystem::NewReadableFile(a2, a3, 0, &v35);
  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
  if (!*(_QWORD *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    while ((*(unsigned int (**)(uint64_t, void ***))(*(_QWORD *)v35 + 24))(v35, &v32))
    {
      if (v34 >= 0)
        v8 = (void **)&v32;
      else
        v8 = v32;
      if (v34 >= 0)
        v9 = HIBYTE(v34);
      else
        v9 = v33;
      absl::internal::Splitter::Splitter((char **)&__p, (uint64_t)v8, v9, "\t", 1, 0);
      std::vector<std::string>::vector(&v28, (uint64_t)(v25[0] - (_QWORD)__p) >> 4);
      end = v28.__end_;
      if (v28.__end_ == v28.__begin_)
      {
        v14 = v28.__end_;
      }
      else
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        end = v28.__begin_;
        do
        {
          MEMORY[0x1C3BB9640](&end[v11], *(_QWORD *)((char *)__p + v12), *(_QWORD *)((char *)__p + v12 + 8));
          ++v13;
          end = v28.__begin_;
          v14 = v28.__end_;
          ++v11;
          v12 += 16;
        }
        while (v13 < 0xAAAAAAAAAAAAAAABLL * (((char *)v28.__end_ - (char *)v28.__begin_) >> 3));
      }
      if (__p)
      {
        v25[0] = __p;
        operator delete(__p);
        end = v28.__begin_;
        v14 = v28.__end_;
      }
      v15 = (char *)v14 - (char *)end;
      if (!v15)
      {
        LODWORD(__p) = 13;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v25);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(v.size()) >= (1)", 17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&__p, (uint64_t)a5);
LABEL_42:
        v25[0] = *MEMORY[0x1E0DE4F60];
        *(_QWORD *)((char *)v25 + *(_QWORD *)(v25[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
        v25[1] = MEMORY[0x1E0DE4FB8] + 16;
        if (v26 < 0)
          operator delete((void *)v25[9]);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1C3BB9A90](&v27);
        __p = &v28;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        goto LABEL_45;
      }
      if (SHIBYTE(end->__r_.__value_.__r.__words[2]) < 0)
      {
        if (!end->__r_.__value_.__l.__size_)
        {
LABEL_40:
          LODWORD(__p) = 13;
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v25);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(", 1);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)") [", 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"!v[0].empty()", 13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"] ", 2);
          sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&__p, (uint64_t)a5);
          goto LABEL_42;
        }
      }
      else if (!*((_BYTE *)&end->__r_.__value_.__s + 23))
      {
        goto LABEL_40;
      }
      v16 = 0xAAAAAAAAAAAAAAABLL * (v15 >> 3);
      v17 = 1;
      v36[0] = 1;
      if (v16 >= 2)
      {
        if (SHIBYTE(end[1].__r_.__value_.__r.__words[2]) < 0)
        {
          data = end[1].__r_.__value_.__l.__data_;
          size = end[1].__r_.__value_.__l.__size_;
        }
        else
        {
          data = (const char *)&end[1];
          size = HIBYTE(end[1].__r_.__value_.__r.__words[2]);
        }
        if (!absl::SimpleAtoi<int>(data, size, (uint64_t)v36))
        {
          LODWORD(__p) = 13;
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v25);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(", 1);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)") [", 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"absl::SimpleAtoi(v[1], &freq)", 29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"] ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Could not parse the frequency", 29);
          sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&__p, (uint64_t)a5);
          goto LABEL_42;
        }
        v17 = v36[0];
      }
      if (v17 >= a4)
      {
        v20 = v30;
        if ((unint64_t)v30 >= v31)
        {
          v22 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>(&v29, (__int128 *)v28.__begin_);
        }
        else
        {
          if (SHIBYTE(v28.__begin_->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v30, v28.__begin_->__r_.__value_.__l.__data_, v28.__begin_->__r_.__value_.__l.__size_);
          }
          else
          {
            v21 = *(_OWORD *)&v28.__begin_->__r_.__value_.__l.__data_;
            v30->__r_.__value_.__r.__words[2] = v28.__begin_->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
          }
          v22 = v20 + 1;
        }
        v30 = v22;
      }
      __p = &v28;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 112))(a1, &__p);
    if (__p)
    {
      v25[0] = __p;
      operator delete(__p);
    }
LABEL_45:
    __p = &v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (SHIBYTE(v34) < 0)
      operator delete(v32);
  }
  result = v35;
  v35 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1C21CB83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  uint64_t v12;

  __p = (void *)(v10 - 176);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (void *)(v10 - 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v10 - 105) < 0)
    operator delete(*(void **)(v10 - 128));
  v12 = *(_QWORD *)(v10 - 104);
  *(_QWORD *)(v10 - 104) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  _Unwind_Resume(a1);
}

BOOL absl::SimpleAtoi<int>(const char *a1, uint64_t a2, uint64_t a3)
{
  size_t v5;
  _QWORD *v6;
  _BOOL8 v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11);
  v5 = strlen(a1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)a1, v5);
  if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
  {
    v7 = 0;
  }
  else
  {
    v8 = (_QWORD *)MEMORY[0x1C3BB9784](v11, a3);
    v7 = (*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) == 0;
  }
  v11[0] = *MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v12[0] = v9;
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3BB9A90](&v14);
  return v7;
}

void sub_1C21CBA28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::`anonymous namespace'::ToPieceArray@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  result = std::vector<std::string_view>::vector(a2, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  v4 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (_QWORD *)(v4 + v5);
      LODWORD(v4) = *(char *)(v4 + v5 + 23);
      if ((v4 & 0x80000000) != 0)
      {
        v9 = (_QWORD *)*v8;
        v4 = v8[1];
      }
      else
      {
        v4 = v4;
        v9 = v8;
      }
      v10 = (_QWORD *)(*result + v6);
      *v10 = v9;
      v10[1] = v4;
      ++v7;
      v4 = *a1;
      v6 += 16;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v7);
  }
  return result;
}

void sentencepiece::SentencePieceProcessor::Encode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  int v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  _QWORD *v24;
  unsigned int v25;
  _QWORD v26[6];
  int v27;
  uint64_t v28;
  void *__p;
  char v30;
  uint64_t v31;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a5);
  if (!*(_QWORD *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    if (a4)
    {
      a4[1] = *a4;
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v25, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 232))(a1, a2, a3, &v25);
      if (!*(_QWORD *)a5)
      {
        sentencepiece::util::Status::~Status(a5);
        if (v28)
          v10 = v28 + 8;
        else
          v10 = 0;
        if (v27)
        {
          v11 = a4 + 2;
          v12 = a4[1];
          v13 = v10 + 8 * v27;
          do
          {
            v14 = *(_DWORD *)(*(_QWORD *)v10 + 64);
            if ((unint64_t)v12 >= *v11)
            {
              v16 = *a4;
              v17 = (v12 - *a4) >> 2;
              v18 = v17 + 1;
              if ((unint64_t)(v17 + 1) >> 62)
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              v19 = *v11 - (_QWORD)v16;
              if (v19 >> 1 > v18)
                v18 = v19 >> 1;
              if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
                v20 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v20 = v18;
              if (v20)
              {
                v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v20);
                v16 = *a4;
                v12 = a4[1];
              }
              else
              {
                v21 = 0;
              }
              v22 = &v21[4 * v17];
              *(_DWORD *)v22 = v14;
              v15 = v22 + 4;
              while (v12 != v16)
              {
                v23 = *((_DWORD *)v12 - 1);
                v12 -= 4;
                *((_DWORD *)v22 - 1) = v23;
                v22 -= 4;
              }
              *a4 = v22;
              a4[1] = v15;
              a4[2] = &v21[4 * v20];
              if (v16)
                operator delete(v16);
            }
            else
            {
              *(_DWORD *)v12 = v14;
              v15 = v12 + 4;
            }
            a4[1] = v15;
            v10 += 8;
            v12 = v15;
          }
          while (v10 != v13);
        }
        sentencepiece::util::Status::Status(a5);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v25);
    }
    else
    {
      v25 = 13;
      v24 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"ids", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v25, (uint64_t)a5);
      v26[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v26 + *(_QWORD *)(v26[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v26[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v30 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C3BB9A90](&v31);
    }
  }
}

void sub_1C21CBDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::Decode(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void *__p[3];

  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 160))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

{
  void *__p[3];

  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 272))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1C21CBE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::Decode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  _QWORD *v8;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a4);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(_BYTE **)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 23) = 0;
      }
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v9, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 272))(a1, a2, &v9);
      if (!*(_QWORD *)a4)
      {
        sentencepiece::util::Status::~Status(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v10[8] & 0xFFFFFFFFFFFFFFFELL));
        sentencepiece::util::Status::Status(a4);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v9);
    }
    else
    {
      v9 = 13;
      v8 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"detokenized", 11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a4);
      v10[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v10[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v11 < 0)
        operator delete((void *)v10[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C3BB9A90](&v12);
    }
  }
}

{
  _QWORD *v8;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a4);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(_BYTE **)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 23) = 0;
      }
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v9, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 280))(a1, a2, &v9);
      if (!*(_QWORD *)a4)
      {
        sentencepiece::util::Status::~Status(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v10[8] & 0xFFFFFFFFFFFFFFFELL));
        sentencepiece::util::Status::Status(a4);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v9);
    }
    else
    {
      v9 = 13;
      v8 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"detokenized", 11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a4);
      v10[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v10[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v11 < 0)
        operator delete((void *)v10[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C3BB9A90](&v12);
    }
  }
}

void sub_1C21CC040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sub_1C21CC250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::NBestEncode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, sentencepiece::util::Status *a6@<X8>)
{
  uint64_t v12;
  void **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 *v27;
  std::string *v28;
  unint64_t v29;
  void **v30;
  _QWORD v31[2];
  int v32;
  uint64_t v33;
  void *__p;
  char v35;
  uint64_t v36;
  __int128 **v37;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*(_QWORD *)a6)
  {
    sentencepiece::util::Status::~Status(a6);
    if (a5)
    {
      v12 = *a5;
      v13 = (void **)a5[1];
      while (v13 != (void **)v12)
      {
        v13 -= 3;
        v30 = v13;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v30);
      }
      a5[1] = v12;
      sentencepiece::NBestSentencePieceText::NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v30, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void ***))(*(_QWORD *)a1 + 240))(a1, a2, a3, a4, &v30);
      if (!*(_QWORD *)a6)
      {
        sentencepiece::util::Status::~Status(a6);
        if (v33)
          v14 = (uint64_t *)(v33 + 8);
        else
          v14 = 0;
        if (v32)
        {
          v15 = &v14[v32];
          do
          {
            v16 = *v14;
            v27 = 0;
            v28 = 0;
            v29 = 0;
            v17 = *(_QWORD *)(v16 + 64);
            if (v17)
              v18 = v17 + 8;
            else
              v18 = 0;
            v19 = *(int *)(v16 + 56);
            if ((_DWORD)v19)
            {
              v20 = 0;
              v21 = 8 * v19;
              do
              {
                v22 = *(_QWORD *)(*(_QWORD *)v18 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if ((unint64_t)v20 >= v29)
                {
                  v20 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v27, (__int128 *)v22);
                }
                else
                {
                  if (*(char *)(v22 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)v22, *(_QWORD *)(v22 + 8));
                  }
                  else
                  {
                    v23 = *(_OWORD *)v22;
                    v20->__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 16);
                    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v23;
                  }
                  ++v20;
                }
                v28 = v20;
                v18 += 8;
                v21 -= 8;
              }
              while (v21);
            }
            v24 = a5[1];
            if (v24 >= a5[2])
            {
              v25 = std::vector<std::vector<std::string>>::__emplace_back_slow_path<std::vector<std::string>&>(a5, &v27);
            }
            else
            {
              std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string>&>((uint64_t)a5, &v27);
              v25 = v24 + 24;
            }
            a5[1] = v25;
            v37 = &v27;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
            ++v14;
          }
          while (v14 != v15);
        }
        sentencepiece::util::Status::Status(a6);
      }
      sentencepiece::NBestSentencePieceText::~NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v30);
    }
    else
    {
      LODWORD(v30) = 13;
      v26 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"pieces", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v30, (uint64_t)a6);
      v31[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v31 + *(_QWORD *)(v31[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v31[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v35 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C3BB9A90](&v36);
    }
  }
}

{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  void *__p;
  char *v34;
  char *v35;
  unsigned int v36;
  _QWORD v37[2];
  int v38;
  uint64_t v39;
  void *v40;
  char v41;
  uint64_t v42;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*(_QWORD *)a6)
  {
    sentencepiece::util::Status::~Status(a6);
    if (a5)
    {
      std::vector<std::vector<int>>::__clear[abi:ne180100](a5);
      sentencepiece::NBestSentencePieceText::NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v36, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 240))(a1, a2, a3, a4, &v36);
      if (!*(_QWORD *)a6)
      {
        sentencepiece::util::Status::~Status(a6);
        if (v39)
          v12 = (uint64_t *)(v39 + 8);
        else
          v12 = 0;
        if (v38)
        {
          v32 = &v12[v38];
          do
          {
            v13 = *v12;
            __p = 0;
            v34 = 0;
            v35 = 0;
            v14 = *(_QWORD *)(v13 + 64);
            if (v14)
              v15 = v14 + 8;
            else
              v15 = 0;
            v16 = *(int *)(v13 + 56);
            if ((_DWORD)v16)
            {
              v17 = 0;
              v18 = v15 + 8 * v16;
              do
              {
                v19 = *(_DWORD *)(*(_QWORD *)v15 + 64);
                if (v17 >= v35)
                {
                  v21 = (char *)__p;
                  v22 = (v17 - (_BYTE *)__p) >> 2;
                  v23 = v22 + 1;
                  if ((unint64_t)(v22 + 1) >> 62)
                    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
                  v24 = v35 - (_BYTE *)__p;
                  if ((v35 - (_BYTE *)__p) >> 1 > v23)
                    v23 = v24 >> 1;
                  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
                    v25 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v25 = v23;
                  if (v25)
                  {
                    v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v35, v25);
                    v21 = (char *)__p;
                    v17 = v34;
                  }
                  else
                  {
                    v26 = 0;
                  }
                  v27 = &v26[4 * v22];
                  *(_DWORD *)v27 = v19;
                  v20 = v27 + 4;
                  while (v17 != v21)
                  {
                    v28 = *((_DWORD *)v17 - 1);
                    v17 -= 4;
                    *((_DWORD *)v27 - 1) = v28;
                    v27 -= 4;
                  }
                  __p = v27;
                  v34 = v20;
                  v35 = &v26[4 * v25];
                  if (v21)
                    operator delete(v21);
                }
                else
                {
                  *(_DWORD *)v17 = v19;
                  v20 = v17 + 4;
                }
                v34 = v20;
                v15 += 8;
                v17 = v20;
              }
              while (v15 != v18);
            }
            v29 = a5[1];
            if (v29 >= a5[2])
            {
              v30 = std::vector<std::vector<int>>::__emplace_back_slow_path<std::vector<int>&>(a5, (uint64_t)&__p);
            }
            else
            {
              std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&>((uint64_t)a5, (uint64_t)&__p);
              v30 = v29 + 24;
            }
            a5[1] = v30;
            if (__p)
            {
              v34 = (char *)__p;
              operator delete(__p);
            }
            ++v12;
          }
          while (v12 != v32);
        }
        sentencepiece::util::Status::Status(a6);
      }
      sentencepiece::NBestSentencePieceText::~NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v36);
    }
    else
    {
      v36 = 13;
      v31 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"ids", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v36, (uint64_t)a6);
      v37[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v37 + *(_QWORD *)(v37[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v37[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v41 < 0)
        operator delete(v40);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C3BB9A90](&v42);
    }
  }
}

void sub_1C21CC570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

void sub_1C21CC90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a14);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, sentencepiece::util::Status *a6@<X8>, float a7@<S0>)
{
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 *v17;
  _QWORD *v18;
  unsigned int v19;
  _QWORD v20[6];
  int v21;
  uint64_t v22;
  void *__p;
  char v24;
  uint64_t v25;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*(_QWORD *)a6)
  {
    sentencepiece::util::Status::~Status(a6);
    if (a5)
    {
      std::vector<std::string>::__clear[abi:ne180100](a5);
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v19, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(_QWORD *)a1 + 248))(a1, a2, a3, a4, &v19, a7);
      if (!*(_QWORD *)a6)
      {
        sentencepiece::util::Status::~Status(a6);
        if (v22)
          v14 = v22 + 8;
        else
          v14 = 0;
        if (v21)
        {
          v15 = a5[1];
          v16 = 8 * v21;
          do
          {
            v17 = (__int128 *)(*(_QWORD *)(*(_QWORD *)v14 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v15 >= a5[2])
            {
              v15 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a5, v17);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a5, v17);
              v15 += 24;
            }
            a5[1] = v15;
            v14 += 8;
            v16 -= 8;
          }
          while (v16);
        }
        sentencepiece::util::Status::Status(a6);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v19);
    }
    else
    {
      v19 = 13;
      v18 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"pieces", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v19, (uint64_t)a6);
      v20[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v20[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v24 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C3BB9A90](&v25);
    }
  }
}

void sub_1C21CCBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X4>, sentencepiece::util::Status *a6@<X8>, float a7@<S0>)
{
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  int v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  _QWORD *v28;
  unsigned int v29;
  _QWORD v30[6];
  int v31;
  uint64_t v32;
  void *__p;
  char v34;
  uint64_t v35;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*(_QWORD *)a6)
  {
    sentencepiece::util::Status::~Status(a6);
    if (a5)
    {
      a5[1] = *a5;
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v29, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(_QWORD *)a1 + 248))(a1, a2, a3, a4, &v29, a7);
      if (!*(_QWORD *)a6)
      {
        sentencepiece::util::Status::~Status(a6);
        if (v32)
          v14 = v32 + 8;
        else
          v14 = 0;
        if (v31)
        {
          v15 = a5 + 2;
          v16 = a5[1];
          v17 = v14 + 8 * v31;
          do
          {
            v18 = *(_DWORD *)(*(_QWORD *)v14 + 64);
            if ((unint64_t)v16 >= *v15)
            {
              v20 = *a5;
              v21 = (v16 - *a5) >> 2;
              v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 62)
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              v23 = *v15 - (_QWORD)v20;
              if (v23 >> 1 > v22)
                v22 = v23 >> 1;
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
                v24 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v24 = v22;
              if (v24)
              {
                v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a5 + 2), v24);
                v20 = *a5;
                v16 = a5[1];
              }
              else
              {
                v25 = 0;
              }
              v26 = &v25[4 * v21];
              *(_DWORD *)v26 = v18;
              v19 = v26 + 4;
              while (v16 != v20)
              {
                v27 = *((_DWORD *)v16 - 1);
                v16 -= 4;
                *((_DWORD *)v26 - 1) = v27;
                v26 -= 4;
              }
              *a5 = v26;
              a5[1] = v19;
              a5[2] = &v25[4 * v24];
              if (v20)
                operator delete(v20);
            }
            else
            {
              *(_DWORD *)v16 = v18;
              v19 = v16 + 4;
            }
            a5[1] = v19;
            v14 += 8;
            v16 = v19;
          }
          while (v14 != v17);
        }
        sentencepiece::util::Status::Status(a6);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v29);
    }
    else
    {
      v29 = 13;
      v28 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"ids", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v29, (uint64_t)a6);
      v30[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v30[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v34 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C3BB9A90](&v35);
    }
  }
}

void sub_1C21CCEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScore(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, sentencepiece::util::Status *a8@<X8>, float a9@<S0>)
{
  uint64_t v18;
  void **v19;
  std::string *v20;
  std::string *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::string *end;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  std::vector<std::string> v35;
  void **v36;
  _QWORD v37[2];
  int v38;
  uint64_t v39;
  void *__p;
  char v41;
  uint64_t v42;
  void **v43[2];

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a8);
  if (!*(_QWORD *)a8)
  {
    sentencepiece::util::Status::~Status(a8);
    if (a7)
    {
      v18 = *a7;
      v19 = (void **)a7[1];
      while (v19 != (void **)v18)
      {
        v19 -= 4;
        v36 = v19;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v36);
      }
      a7[1] = v18;
      sentencepiece::NBestSentencePieceText::NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v36, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void ***, float))(*(_QWORD *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v36, a9);
      if (!*(_QWORD *)a8)
      {
        sentencepiece::util::Status::~Status(a8);
        v20 = (std::string *)*a7;
        v21 = (std::string *)a7[1];
        while (v21 != v20)
        {
          v21 = (std::string *)((char *)v21 - 32);
          v35.__begin_ = v21;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
        }
        a7[1] = (uint64_t)v20;
        std::vector<std::pair<std::vector<std::string>,float>>::reserve(a7, v38);
        if (v39)
          v23 = (uint64_t *)(v39 + 8);
        else
          v23 = 0;
        if (v38)
        {
          v24 = &v23[v38];
          do
          {
            v25 = *v23;
            memset(&v35, 0, sizeof(v35));
            std::vector<std::string>::reserve(&v35, *(int *)(v25 + 56));
            v26 = *(_QWORD *)(v25 + 64);
            if (v26)
              v27 = v26 + 8;
            else
              v27 = 0;
            v28 = *(int *)(v25 + 56);
            if ((_DWORD)v28)
            {
              end = v35.__end_;
              v30 = 8 * v28;
              do
              {
                v31 = *(_QWORD *)(*(_QWORD *)v27 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if (end >= v35.__end_cap_.__value_)
                {
                  end = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v35, (__int128 *)v31);
                }
                else
                {
                  if (*(char *)(v31 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)v31, *(_QWORD *)(v31 + 8));
                  }
                  else
                  {
                    v32 = *(_OWORD *)v31;
                    end->__r_.__value_.__r.__words[2] = *(_QWORD *)(v31 + 16);
                    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v32;
                  }
                  ++end;
                }
                v35.__end_ = end;
                v27 += 8;
                v30 -= 8;
              }
              while (v30);
            }
            LODWORD(v43[0]) = *(_DWORD *)(v25 + 80);
            v33 = a7[1];
            if (v33 >= a7[2])
            {
              v34 = std::vector<std::pair<std::vector<std::string>,float>>::__emplace_back_slow_path<std::vector<std::string>&,float>(a7, (__int128 **)&v35, v43);
            }
            else
            {
              std::vector<std::pair<std::vector<std::string>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string>&,float>((uint64_t)a7, (__int128 **)&v35, (float *)v43);
              v34 = v33 + 32;
            }
            a7[1] = v34;
            v43[0] = (void **)&v35;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v43);
            ++v23;
          }
          while (v23 != v24);
        }
        sentencepiece::util::Status::Status(a8);
      }
      sentencepiece::NBestSentencePieceText::~NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v36);
    }
    else
    {
      LODWORD(v36) = 13;
      v22 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"pieces", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v36, (uint64_t)a8);
      v37[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v37 + *(_QWORD *)(v37[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v37[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v41 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C3BB9A90](&v42);
    }
  }
}

{
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::vector<int>::pointer end;
  int v25;
  int *v26;
  std::vector<int>::pointer begin;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  int *v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  sentencepiece::util::Status *v38;
  uint64_t *v39;
  int v40;
  std::vector<int> v41;
  unsigned int v42;
  _QWORD v43[2];
  int v44;
  uint64_t v45;
  void *__p;
  char v47;
  uint64_t v48;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a8);
  if (!*(_QWORD *)a8)
  {
    sentencepiece::util::Status::~Status(a8);
    if (a7)
    {
      std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__clear[abi:ne180100](a7);
      sentencepiece::NBestSentencePieceText::NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v42, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(_QWORD *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v42, a9);
      if (!*(_QWORD *)a8)
      {
        v38 = a8;
        sentencepiece::util::Status::~Status(a8);
        std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__clear[abi:ne180100](a7);
        std::vector<std::pair<std::vector<int>,float>>::reserve(a7, v44);
        if (v45)
          v18 = (uint64_t *)(v45 + 8);
        else
          v18 = 0;
        if (v44)
        {
          v39 = &v18[v44];
          do
          {
            v19 = *v18;
            memset(&v41, 0, sizeof(v41));
            std::vector<int>::reserve(&v41, *(int *)(v19 + 56));
            v20 = *(_QWORD *)(v19 + 64);
            if (v20)
              v21 = v20 + 8;
            else
              v21 = 0;
            v22 = *(int *)(v19 + 56);
            if ((_DWORD)v22)
            {
              v23 = v21 + 8 * v22;
              end = v41.__end_;
              do
              {
                v25 = *(_DWORD *)(*(_QWORD *)v21 + 64);
                if (end >= v41.__end_cap_.__value_)
                {
                  begin = v41.__begin_;
                  v28 = end - v41.__begin_;
                  v29 = v28 + 1;
                  if ((unint64_t)(v28 + 1) >> 62)
                    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
                  v30 = (char *)v41.__end_cap_.__value_ - (char *)v41.__begin_;
                  if (((char *)v41.__end_cap_.__value_ - (char *)v41.__begin_) >> 1 > v29)
                    v29 = v30 >> 1;
                  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
                    v31 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v31 = v29;
                  if (v31)
                  {
                    v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v41.__end_cap_, v31);
                    begin = v41.__begin_;
                    end = v41.__end_;
                  }
                  else
                  {
                    v32 = 0;
                  }
                  v33 = (int *)&v32[4 * v28];
                  *v33 = v25;
                  v26 = v33 + 1;
                  while (end != begin)
                  {
                    v34 = *--end;
                    *--v33 = v34;
                  }
                  v41.__begin_ = v33;
                  v41.__end_ = v26;
                  v41.__end_cap_.__value_ = (int *)&v32[4 * v31];
                  if (begin)
                    operator delete(begin);
                }
                else
                {
                  *end = v25;
                  v26 = end + 1;
                }
                v41.__end_ = v26;
                v21 += 8;
                end = v26;
              }
              while (v21 != v23);
            }
            v40 = *(_DWORD *)(v19 + 80);
            v35 = a7[1];
            if (v35 >= a7[2])
            {
              v36 = std::vector<std::pair<std::vector<int>,float>>::__emplace_back_slow_path<std::vector<int>&,float>(a7, (uint64_t)&v41, &v40);
            }
            else
            {
              std::vector<std::pair<std::vector<int>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&,float>((uint64_t)a7, (uint64_t)&v41, (float *)&v40);
              v36 = v35 + 32;
            }
            a7[1] = v36;
            if (v41.__begin_)
            {
              v41.__end_ = v41.__begin_;
              operator delete(v41.__begin_);
            }
            ++v18;
          }
          while (v18 != v39);
        }
        sentencepiece::util::Status::Status(v38);
      }
      sentencepiece::NBestSentencePieceText::~NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v42);
    }
    else
    {
      v42 = 13;
      v37 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"ids", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v42, (uint64_t)a8);
      v43[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v43 + *(_QWORD *)(v43[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v43[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v47 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C3BB9A90](&v48);
    }
  }
}

void sub_1C21CD23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<std::vector<std::string>,float>>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::vector<std::string>,float>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 32 * v6;
    std::vector<std::pair<std::vector<std::string>,float>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::pair<std::vector<std::string>,float>>::~__split_buffer(v7);
  }
  return result;
}

void sub_1C21CD30C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<std::string>,float>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *value;
  int64_t v5;
  uint64_t v6;
  std::__split_buffer<std::string> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_1C21CD3BC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void sub_1C21CD774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a16);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<int>,float>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::vector<std::string>,float>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    std::vector<std::pair<std::vector<int>,float>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1C21CD83C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *value;
  int64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  std::vector<int>::pointer begin;
  int *end;
  int *v12;
  int v13;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, __n);
    v7 = (int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = (int *)&v6[4 * v8];
    begin = this->__begin_;
    end = this->__end_;
    v12 = v7;
    if (end != this->__begin_)
    {
      v12 = v7;
      do
      {
        v13 = *--end;
        *--v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
      operator delete(begin);
  }
}

void sentencepiece::SentencePieceProcessor::NBestEncode(sentencepiece::ModelInterface **a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, sentencepiece::util::Status *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  void *__p;
  char v33;
  _BYTE v34[152];

  (*((void (**)(sentencepiece::util::Status *__return_ptr))*a1 + 11))(a5);
  if (*(_QWORD *)a5)
    return;
  sentencepiece::util::Status::~Status(a5);
  if (a4)
  {
    sentencepiece::NBestSentencePieceText::Clear((sentencepiece::NBestSentencePieceText *)a4);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    (*(void (**)(sentencepiece::ModelInterface *, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v26, &v23);
    if (!*(_QWORD *)a5)
    {
      sentencepiece::util::Status::~Status(a5);
      if (((*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)a1[1] + 88))(a1[1]) & 1) != 0)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1[1] + 48))(&v21);
        v10 = v21;
        v11 = v22;
        if (v21 != v22)
        {
          while (1)
          {
            v12 = *(int **)(a4 + 32);
            if (!v12)
              break;
            v13 = *(int *)(a4 + 24);
            v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *(_DWORD *)(a4 + 28))
              {
LABEL_12:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a4 + 16), v14 + 1);
                v12 = *(int **)(a4 + 32);
                v14 = *v12;
              }
              *v12 = v14 + 1;
              v15 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(*(_QWORD *)(a4 + 16));
              v16 = *(_QWORD *)(a4 + 32);
              v17 = *(int *)(a4 + 24);
              *(_DWORD *)(a4 + 24) = v17 + 1;
              *(_QWORD *)(v16 + 8 * v17 + 8) = v15;
              goto LABEL_14;
            }
            *(_DWORD *)(a4 + 24) = v13 + 1;
            v15 = *(_QWORD *)&v12[2 * v13 + 2];
LABEL_14:
            v18 = *(_DWORD *)(v10 + 24);
            *(_DWORD *)(v15 + 40) |= 2u;
            *(_DWORD *)(v15 + 80) = v18;
            if (v28 >= 0)
              v19 = HIBYTE(v28);
            else
              v19 = v27;
            sentencepiece::SentencePieceProcessor::PopulateSentencePieceText(a1, a2, a3, v19, (uint64_t *)&v23, (unsigned __int8 ***)v10, v15, a5);
            if (*(_QWORD *)a5)
              goto LABEL_29;
            sentencepiece::util::Status::~Status(a5);
            v10 += 32;
            if (v10 == v11)
            {
              sentencepiece::util::Status::Status(a5);
              goto LABEL_29;
            }
          }
          v14 = *(_DWORD *)(a4 + 28);
          goto LABEL_12;
        }
        LODWORD(v29) = 13;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"!nbests.empty()", 15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"NBestEncode returns empty result.", 33);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v29, (uint64_t)a5);
        v30 = *MEMORY[0x1E0DE4F60];
        *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
        v31 = MEMORY[0x1E0DE4FB8] + 16;
        if (v33 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1C3BB9A90](v34);
LABEL_29:
        v29 = (void **)&v21;
        std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](&v29);
      }
      else
      {
        LODWORD(v29) = 13;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"model_->IsNBestEncodeAvailable()", 32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"NBestEncode is not available for the current model.", 51);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v29, (uint64_t)a5);
        v30 = *MEMORY[0x1E0DE4F60];
        *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
        v31 = MEMORY[0x1E0DE4FB8] + 16;
        if (v33 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1C3BB9A90](v34);
      }
    }
    if (v23)
    {
      v24 = v23;
      operator delete(v23);
    }
    if (SHIBYTE(v28) < 0)
      operator delete(v26);
  }
  else
  {
    LODWORD(v29) = 13;
    v20 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"nbest_spt", 9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"output proto is null", 20);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v29, (uint64_t)a5);
    v30 = *MEMORY[0x1E0DE4F60];
    *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v31 = MEMORY[0x1E0DE4FB8] + 16;
    if (v33 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C3BB9A90](v34);
  }
}

void sub_1C21CDE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncode(sentencepiece::ModelInterface **a1@<X0>, char *a2@<X1>, size_t a3@<X2>, int a4@<W3>, sentencepiece::SentencePieceText *a5@<X4>, sentencepiece::util::Status *a6@<X8>, float a7@<S0>)
{
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  char v17;
  uint64_t v18;
  sentencepiece::random *v19;
  float *v20;
  uint64_t v21;
  float *v22;
  float v23;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *RandomGenerator;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30[3];
  uint64_t v31;
  uint64_t v32;
  void *__p;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  float *v40[11];
  char v41;
  uint64_t v42;

  (*((void (**)(sentencepiece::util::Status *__return_ptr))*a1 + 11))(a6);
  if (*(_QWORD *)a6)
    return;
  sentencepiece::util::Status::~Status(a6);
  if (a5)
  {
    sentencepiece::SentencePieceText::Clear(a5);
    if (a4 < 513)
    {
      v36 = 0;
      v37 = 0;
      v38 = 0;
      __p = 0;
      v34 = 0;
      v35 = 0;
      (*(void (**)(sentencepiece::ModelInterface *, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v36, &__p);
      if (*(_QWORD *)a6)
      {
LABEL_5:
        if (__p)
        {
          v34 = __p;
          operator delete(__p);
        }
        if (SHIBYTE(v38) < 0)
          operator delete(v36);
        return;
      }
      sentencepiece::util::Status::~Status(a6);
      v16 = (*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)a1[1] + 88))(a1[1]);
      if (a4 >= 0)
        v17 = v16;
      else
        v17 = 0;
      if ((v17 & 1) != 0)
      {
        if (a4 > 1)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1[1] + 48))(&v31);
          if (v31 == v32)
          {
            LODWORD(v39) = 13;
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(", 1);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") [", 3);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"!nbests.empty()", 15);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"NBestEncode returns empty result.", 33);
            sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a6);
            sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&v39);
            v39 = &v31;
            std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
            goto LABEL_5;
          }
          LODWORD(v30[0]) = 0;
          v19 = (sentencepiece::random *)std::vector<float>::vector(&v39, (v32 - v31) >> 5, v30);
          if (v32 != v31)
          {
            v20 = (float *)v39;
            if ((unint64_t)((v32 - v31) >> 5) <= 1)
              v21 = 1;
            else
              v21 = (v32 - v31) >> 5;
            v22 = (float *)(v31 + 24);
            do
            {
              v23 = *v22;
              v22 += 8;
              *v20++ = expf(v23 * a7);
              --v21;
            }
            while (v21);
          }
          RandomGenerator = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)sentencepiece::random::GetRandomGenerator(v19);
          std::discrete_distribution<int>::param_type::param_type[abi:ne180100]<std::__wrap_iter<float *>>((uint64_t)v30, (float *)v39, v40[0]);
          v25 = HIBYTE(v38);
          v26 = v37;
          v27 = std::discrete_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((int)v30, RandomGenerator, (double **)v30);
          if ((v25 & 0x80u) == 0)
            v28 = v25;
          else
            v28 = v26;
          sentencepiece::SentencePieceProcessor::PopulateSentencePieceText(a1, a2, a3, v28, (uint64_t *)&__p, (unsigned __int8 ***)(v31 + 32 * v27), (uint64_t)a5, a6);
          v29 = *(_QWORD *)a6;
          if (!*(_QWORD *)a6)
            sentencepiece::util::Status::~Status(a6);
          if (v30[0])
          {
            v30[1] = v30[0];
            operator delete(v30[0]);
          }
          if (v39)
          {
            v40[0] = (float *)v39;
            operator delete(v39);
          }
          v39 = &v31;
          std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
          if (v29)
            goto LABEL_5;
          goto LABEL_51;
        }
        (*(void (**)(void **__return_ptr))(*(_QWORD *)a1[1] + 40))(&v39);
        if (v38 >= 0)
          v18 = HIBYTE(v38);
        else
          v18 = v37;
      }
      else
      {
        if (((*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)a1[1] + 80))(a1[1]) & 1) == 0)
        {
          LODWORD(v39) = 13;
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(", 1);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") [", 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"model_->IsSampleEncodeAvailable()", 33);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"SampleEncode is not available for the current model.", 52);
          sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a6);
          sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&v39);
          goto LABEL_5;
        }
        (*(void (**)(void **__return_ptr, float))(*(_QWORD *)a1[1] + 56))(&v39, a7);
        if (v38 >= 0)
          v18 = HIBYTE(v38);
        else
          v18 = v37;
      }
      sentencepiece::SentencePieceProcessor::PopulateSentencePieceText(a1, a2, a3, v18, (uint64_t *)&__p, (unsigned __int8 ***)&v39, (uint64_t)a5, a6);
      if (*(_QWORD *)a6)
      {
        if (v39)
        {
          v40[0] = (float *)v39;
          operator delete(v39);
        }
        goto LABEL_5;
      }
      sentencepiece::util::Status::~Status(a6);
      if (v39)
      {
        v40[0] = (float *)v39;
        operator delete(v39);
      }
LABEL_51:
      sentencepiece::util::Status::Status(a6);
      goto LABEL_5;
    }
    LODWORD(v39) = 13;
    v15 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(nbest_size) <= (512)", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"nbest_size must be nbest_size <= 512", 36);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a6);
  }
  else
  {
    LODWORD(v39) = 13;
    v14 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"spt", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"output proto is null", 20);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a6);
  }
  v40[0] = *(float **)MEMORY[0x1E0DE4F60];
  *(float **)((char *)v40 + *((_QWORD *)v40[0] - 3)) = *(float **)(MEMORY[0x1E0DE4F60] + 24);
  v40[1] = (float *)(MEMORY[0x1E0DE4FB8] + 16);
  if (v41 < 0)
    operator delete(v40[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3BB9A90](&v42);
}

void sub_1C21CE5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char *a24,uint64_t a25)
{
  a24 = &a12;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScore(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X6>, sentencepiece::util::Status *a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *__p;
  char v35;
  _BYTE v36[152];

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8)) & 1) != 0)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    (*(void (**)(_QWORD, char *, size_t, void **, void **))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, &v28, &v25);
    if (!*(_QWORD *)a5)
    {
      sentencepiece::util::Status::~Status(a5);
      (*(void (**)(uint64_t *__return_ptr, float))(**(_QWORD **)(a1 + 8) + 64))(&v23, a6);
      v12 = v23;
      v13 = v24;
      if (v23 != v24)
      {
        while (1)
        {
          v14 = *(int **)(a4 + 32);
          if (!v14)
            break;
          v15 = *(int *)(a4 + 24);
          v16 = *v14;
          if ((int)v15 >= *v14)
          {
            if (v16 == *(_DWORD *)(a4 + 28))
            {
LABEL_9:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a4 + 16), v16 + 1);
              v14 = *(int **)(a4 + 32);
              v16 = *v14;
            }
            *v14 = v16 + 1;
            v17 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(*(_QWORD *)(a4 + 16));
            v18 = *(_QWORD *)(a4 + 32);
            v19 = *(int *)(a4 + 24);
            *(_DWORD *)(a4 + 24) = v19 + 1;
            *(_QWORD *)(v18 + 8 * v19 + 8) = v17;
            goto LABEL_11;
          }
          *(_DWORD *)(a4 + 24) = v15 + 1;
          v17 = *(_QWORD *)&v14[2 * v15 + 2];
LABEL_11:
          v20 = *(_DWORD *)(v12 + 24);
          *(_DWORD *)(v17 + 40) |= 2u;
          *(_DWORD *)(v17 + 80) = v20;
          if (v30 >= 0)
            v21 = HIBYTE(v30);
          else
            v21 = v29;
          sentencepiece::SentencePieceProcessor::PopulateSentencePieceText((sentencepiece::ModelInterface **)a1, a2, a3, v21, (uint64_t *)&v25, (unsigned __int8 ***)v12, v17, a5);
          if (*(_QWORD *)a5)
            goto LABEL_23;
          sentencepiece::util::Status::~Status(a5);
          v12 += 32;
          if (v12 == v13)
          {
            sentencepiece::util::Status::Status(a5);
            goto LABEL_23;
          }
        }
        v16 = *(_DWORD *)(a4 + 28);
        goto LABEL_9;
      }
      LODWORD(v31) = 13;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"!results.empty()", 16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"SampleEncodeAndScore returns empty result.", 42);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v31, (uint64_t)a5);
      v32 = *MEMORY[0x1E0DE4F60];
      *(uint64_t *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v33 = MEMORY[0x1E0DE4FB8] + 16;
      if (v35 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C3BB9A90](v36);
LABEL_23:
      v31 = (void **)&v23;
      std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](&v31);
    }
    if (v25)
    {
      v26 = v25;
      operator delete(v25);
    }
    if (SHIBYTE(v30) < 0)
      operator delete(v28);
  }
  else
  {
    LODWORD(v31) = 13;
    v22 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"model_->IsSampleEncodeAndScoreAvailable()", 41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"SampleEncodeAndScore is not available for the current model.", 60);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v31, (uint64_t)a5);
    v32 = *MEMORY[0x1E0DE4F60];
    *(uint64_t *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v33 = MEMORY[0x1E0DE4FB8] + 16;
    if (v35 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C3BB9A90](v36);
  }
}

void sub_1C21CEADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::CalculateEntropy(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float *a4@<X3>, sentencepiece::util::Status *a5@<X8>, float a6@<S0>)
{
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  void *__p;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  uint64_t v23;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8)) & 1) != 0)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    __p = 0;
    v16 = 0;
    v17 = 0;
    (*(void (**)(_QWORD, uint64_t, uint64_t, void **, void **))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, &v18, &__p);
    if (!*(_QWORD *)a5)
    {
      sentencepiece::util::Status::~Status(a5);
      if (v20 >= 0)
        v12 = &v18;
      else
        v12 = v18;
      if (v20 >= 0)
        v13 = HIBYTE(v20);
      else
        v13 = v19;
      *a4 = (*(float (**)(_QWORD, void *, uint64_t, float))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8), v12, v13, a6);
      sentencepiece::util::Status::Status(a5);
    }
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v20) < 0)
      operator delete(v18);
  }
  else
  {
    LODWORD(v18) = 13;
    v14 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"model_->IsCalculateEntropyAvailable()", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"CalculateEntropy is not available for the current model.", 56);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v18, (uint64_t)a5);
    v19 = *MEMORY[0x1E0DE4F60];
    *(uint64_t *)((char *)&v19 + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v20 = MEMORY[0x1E0DE4FB8] + 16;
    if (v22 < 0)
      operator delete(v21);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C3BB9A90](&v23);
  }
}

void sub_1C21CED64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void sub_1C21CEE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::Decode(sentencepiece::ModelInterface **a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  uint64_t v4;
  sentencepiece::ModelInterface *v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  google::protobuf::internal::ArenaImpl *v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  google::protobuf::internal::ArenaImpl *v26;
  int v27;
  _BOOL4 v28;
  int v29;
  int v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  size_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  __int128 *p_dst;
  sentencepiece::ModelInterface *v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  size_t v47;
  _BOOL4 v49;
  sentencepiece::ModelInterface *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  sentencepiece::ModelInterface *v54;
  uint64_t *v55;
  __int128 v56;
  void *__p[2];
  uint64_t v58;
  _QWORD v59[2];
  _QWORD *v60[2];
  uint64_t *v61;
  __int128 v62;
  uint64_t v63;
  BOOL v64;
  void *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  _QWORD *v71;
  __int128 __dst;
  unint64_t v73;

  v4 = a3;
  v68 = a3;
  (*((void (**)(sentencepiece::util::Status *__return_ptr))*a1 + 11))(a4);
  if (*(_QWORD *)a4)
    return;
  sentencepiece::util::Status::~Status(a4);
  if (v4)
  {
    sentencepiece::SentencePieceText::Clear((sentencepiece::SentencePieceText *)v4);
    v8 = a1[4];
    if (v8 && (*(unsigned int (**)(sentencepiece::ModelInterface *))(*(_QWORD *)v8 + 72))(v8))
      v9 = (char *)(*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)a1[4] + 24))(a1[4]);
    else
    v10 = *a2;
    v11 = a2[1];
    if (*a2 != v11)
    {
      while (1)
      {
        v12 = *v10;
        v13 = v10[1];
        v14 = v68;
        v15 = *(int **)(v68 + 64);
        if (!v15)
          break;
        v16 = *(int *)(v68 + 56);
        v17 = *v15;
        if ((int)v16 >= *v15)
        {
          if (v17 == *(_DWORD *)(v68 + 60))
          {
LABEL_14:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v68 + 48), v17 + 1);
            v15 = *(int **)(v68 + 64);
            v17 = *v15;
          }
          *v15 = v17 + 1;
          v18 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(_QWORD *)(v14 + 48));
          v19 = *(_QWORD *)(v14 + 64);
          v20 = *(int *)(v14 + 56);
          *(_DWORD *)(v14 + 56) = v20 + 1;
          *(_QWORD *)(v19 + 8 * v20 + 8) = v18;
          goto LABEL_16;
        }
        *(_DWORD *)(v68 + 56) = v16 + 1;
        v18 = *(_QWORD *)&v15[2 * v16 + 2];
LABEL_16:
        *(_DWORD *)(v18 + 40) |= 1u;
        v21 = *(_QWORD *)(v18 + 8);
        v22 = (google::protobuf::internal::ArenaImpl *)(v21 & 0xFFFFFFFFFFFFFFFELL);
        if ((v21 & 1) != 0)
          v22 = *(google::protobuf::internal::ArenaImpl **)v22;
        v23 = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)(v18 + 48), v22);
        MEMORY[0x1C3BB9640](v23, v12, v13);
        v24 = (*((uint64_t (**)(sentencepiece::ModelInterface **, uint64_t, uint64_t))*a1 + 63))(a1, v12, v13);
        *(_DWORD *)(v18 + 40) |= 4u;
        *(_DWORD *)(v18 + 64) = v24;
        v10 += 2;
        if (v10 == v11)
        {
          v4 = v68;
          goto LABEL_20;
        }
      }
      v17 = *(_DWORD *)(v68 + 60);
      goto LABEL_14;
    }
LABEL_20:
    sentencepiece::SentencePieceProcessor::ApplyExtraOptions(a1, (uint64_t)(a1 + 8), v4, a4);
    if (*(_QWORD *)a4)
      return;
    sentencepiece::util::Status::~Status(a4);
    v61 = 0;
    *(_DWORD *)(v4 + 40) |= 1u;
    v25 = *(_QWORD *)(v4 + 8);
    v26 = (google::protobuf::internal::ArenaImpl *)(v25 & 0xFFFFFFFFFFFFFFFELL);
    if ((v25 & 1) != 0)
      v26 = *(google::protobuf::internal::ArenaImpl **)v26;
    v60[1] = &v61;
    v61 = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)(v4 + 72), v26);
    v58 = 0;
    v59[0] = &v68;
    v59[1] = v60;
    v60[0] = &v68;
    __p[0] = 0;
    __p[1] = 0;
    v27 = *(_DWORD *)(v4 + 56);
    if (v27 >= 1)
    {
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 1;
      while (1)
      {
        v32 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(v4 + 48, v30);
        if (!(*((unsigned int (**)(sentencepiece::ModelInterface **, _QWORD))*a1 + 69))(a1, *(unsigned int *)(v32 + 64)))break;
        ++v30;
LABEL_68:
        v4 = v68;
        v27 = *(_DWORD *)(v68 + 56);
        if (v30 >= v27)
          goto LABEL_89;
      }
      sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_2::operator()((uint64_t)v59, v29, v30, a4);
      if (*(_QWORD *)a4)
        goto LABEL_95;
      sentencepiece::util::Status::~Status(a4);
      if (!v28)
      {
        if (*((char *)v61 + 23) < 0)
        {
          if (!v61[1])
          {
LABEL_32:
            v33 = *(_QWORD *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL;
            if (*(char *)(v33 + 23) < 0)
            {
              v35 = *(unsigned __int8 **)v33;
              v34 = *(_QWORD *)(v33 + 8);
            }
            else
            {
              v34 = *(unsigned __int8 *)(v33 + 23);
              v35 = (unsigned __int8 *)(*(_QWORD *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL);
            }
            v36 = *(unsigned int *)(v32 + 64);
            if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 67))(a1, v36))
            {
              std::string::basic_string[abi:ne180100]<0>(&v62, "");
LABEL_58:
              v64 = 0;
LABEL_59:
              if (SHIBYTE(v58) < 0)
                operator delete(__p[0]);
              v58 = v63;
              *(_OWORD *)__p = v62;
              v28 = v64;
              if (v63 >= 0)
                v46 = __p;
              else
                v46 = (void **)v62;
              if (v63 >= 0)
                v47 = HIBYTE(v63);
              else
                v47 = *((_QWORD *)&v62 + 1);
              sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_1::operator()(v60, v30++, v46, v47);
              v29 = v30;
              goto LABEL_68;
            }
            if (!(*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 66))(a1, v36))
            {
              if ((v31 & 1) != 0
                && ((v40 = a1[4]) == 0
                 || (v41 = (*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)v40 + 152))(v40),
                     ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41) & 1) != 0)
                 || (v42 = (*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)a1[4] + 152))(a1[4]),
                     (*(unsigned int (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42))))
              {
                if (v34 >= 3)
                {
                  v49 = *(unsigned __int16 *)v35 != 38626 || v35[2] != 129;
                  if (!v49)
                  {
                    v35 += 3;
                    v34 -= 3;
                  }
                  v43 = !v49;
                }
                else
                {
                  v43 = 0;
                }
                v50 = a1[4];
                if (v50)
                {
                  v51 = (*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)v50 + 152))(v50);
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51))
                    v43 = 0;
                }
              }
              else
              {
                v43 = 0;
              }
              v52 = operator new(0x20uLL);
              v70 = v52 + 4;
              v71 = v52 + 4;
              v52[1] = 3;
              v52[2] = " ";
              v52[3] = 1;
              v69 = v52;
              absl::StrReplaceAll(v35, v34, (uint64_t *)&v69, (uint64_t)&__dst);
              v62 = __dst;
              v63 = v73;
              v73 = 0;
              __dst = 0uLL;
              v64 = v43;
              if (v69)
              {
                v70 = v69;
                operator delete(v69);
              }
              goto LABEL_59;
            }
            v37 = (const void *)(*((uint64_t (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 64))(a1, v36);
            if (v38 == v34 && !memcmp(v37, v35, v34))
            {
              std::string::basic_string[abi:ne180100]<0>(&v62, v9);
              goto LABEL_58;
            }
            if (v34 >= 0x7FFFFFFFFFFFFFF8)
              std::string::__throw_length_error[abi:ne180100]();
            if (v34 >= 0x17)
            {
              v44 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v34 | 7) != 0x17)
                v44 = v34 | 7;
              v45 = v44 + 1;
              p_dst = (__int128 *)operator new(v44 + 1);
              *((_QWORD *)&__dst + 1) = v34;
              v73 = v45 | 0x8000000000000000;
              *(_QWORD *)&__dst = p_dst;
            }
            else
            {
              HIBYTE(v73) = v34;
              p_dst = &__dst;
              if (!v34)
                goto LABEL_57;
            }
            memmove(p_dst, v35, v34);
LABEL_57:
            *((_BYTE *)p_dst + v34) = 0;
            v62 = __dst;
            v63 = v73;
            goto LABEL_58;
          }
        }
        else if (!*((_BYTE *)v61 + 23))
        {
          goto LABEL_32;
        }
      }
      v31 = 0;
      goto LABEL_32;
    }
    v29 = 0;
LABEL_89:
    sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_2::operator()((uint64_t)v59, v29, v27, a4);
    if (!*(_QWORD *)a4)
    {
      sentencepiece::util::Status::~Status(a4);
      v54 = a1[3];
      if (v54)
      {
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v54 + 40))(&v62);
        v55 = v61;
        if (*((char *)v61 + 23) < 0)
          operator delete((void *)*v61);
        v56 = v62;
        v55[2] = v63;
        *(_OWORD *)v55 = v56;
      }
      sentencepiece::util::Status::Status(a4);
    }
LABEL_95:
    if (SHIBYTE(v58) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LODWORD(v62) = 13;
    v53 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v62 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v62 + 1, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v62 + 1, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v62 + 1, (uint64_t)"spt", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v62 + 1, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v62 + 1, (uint64_t)"output proto is null", 20);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v62, (uint64_t)a4);
    *((_QWORD *)&v62 + 1) = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)&v62 + *(_QWORD *)(*((_QWORD *)&v62 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v63 = MEMORY[0x1E0DE4FB8] + 16;
    if (v66 < 0)
      operator delete(v65);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C3BB9A90](&v67);
  }
}

void sub_1C21CF55C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_2::operator()(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, sentencepiece::util::Status *a4@<X8>)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  int v13;
  unint64_t *v14;
  int v15;
  int v16;
  std::string::size_type size;
  unint64_t v18;
  std::string *v19;
  int v20;
  std::string::size_type v21;
  size_t v22;
  size_t v23;
  std::string *v24;
  size_t v25;
  unint64_t v26;
  const char *v27;
  int v28;
  size_t v29;
  const char *v30;
  size_t v31;
  sentencepiece::util::Status *v32;
  char v33[8];
  unsigned int v34;
  _QWORD v35[11];
  char v36;
  uint64_t v37;
  std::string v38;

  if (a2 >= a3)
  {
    sentencepiece::util::Status::Status(a4);
  }
  else
  {
    memset(&v38, 0, sizeof(v38));
    v8 = a2;
    do
    {
      v9 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(**(_QWORD **)a1 + 48, v8);
      v10 = *(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v10 + 23) < 0)
      {
        v12 = *(void **)v10;
        v11 = *(_QWORD *)(v10 + 8);
      }
      else
      {
        v11 = *(unsigned __int8 *)(v10 + 23);
        v12 = (void *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      v13 = sentencepiece::PieceToByte(v12, v11);
      if (v13 < 0)
      {
        v34 = 13;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(0) <= (byte)", 13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v34, (uint64_t)a4);
        goto LABEL_50;
      }
      std::string::append(&v38, 1uLL, v13);
      ++v8;
    }
    while (a3 != v8);
    v32 = a4;
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    else
      v15 = v38.__r_.__value_.__r.__words[1];
    if (v15 >= 1)
    {
      v16 = 0;
      while (1)
      {
        *(_QWORD *)v33 = 0;
        size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v38.__r_.__value_.__l.__size_;
        if (size < v16)
          std::__throw_out_of_range[abi:ne180100]("string_view::substr");
        v18 = v16;
        v19 = (std::string *)v38.__r_.__value_.__r.__words[0];
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = &v38;
        if (sentencepiece::string_util::DecodeUTF8((sentencepiece::string_util *)((char *)v19 + v18), (const char *)v19 + size, v33, v14) != 65533)break;
        v20 = v18 + a2;
        if (*(_QWORD *)v33 != 1)
        {
          if (*(_QWORD *)v33 != 3)
          {
            v34 = 13;
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v35);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)") [", 3);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(consumed) == (1)", 17);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"] ", 2);
            sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v34, (uint64_t)v32);
            goto LABEL_50;
          }
          goto LABEL_23;
        }
        LODWORD(v23) = *(_DWORD *)v33;
LABEL_42:
        v16 = v18 + v23;
        if (v16 >= v15)
          goto LABEL_47;
      }
      v20 = v18 + a2;
LABEL_23:
      v21 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v21 = v38.__r_.__value_.__l.__size_;
      v22 = v21 - v18;
      if (v21 < v18)
        std::__throw_out_of_range[abi:ne180100]("string_view::substr");
      v23 = *(_QWORD *)v33;
      v24 = &v38;
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v24 = (std::string *)v38.__r_.__value_.__r.__words[0];
      if (v22 >= *(_QWORD *)v33)
        v25 = *(_QWORD *)v33;
      else
        v25 = v22;
      if (*(_QWORD *)v33)
      {
        v26 = 0;
        v27 = (char *)v24 + v18;
        v28 = v20;
        do
        {
          v29 = v23 - 1;
          if (v26 == v29)
            v30 = v27;
          else
            v30 = "";
          if (v26 == v29)
            v31 = v25;
          else
            v31 = 0;
          sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_1::operator()(*(_QWORD ***)(a1 + 8), v28 + v26++, v30, v31);
          v23 = *(_QWORD *)v33;
        }
        while (*(_QWORD *)v33 > v26);
      }
      goto LABEL_42;
    }
    v16 = 0;
LABEL_47:
    if (v16 + a2 == a3)
    {
      sentencepiece::util::Status::Status(v32);
      goto LABEL_53;
    }
    v34 = 13;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(token_index_begin + offset) == (token_index_end)", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v34, (uint64_t)v32);
LABEL_50:
    v35[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v35 + *(_QWORD *)(v35[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v35[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v36 < 0)
      operator delete((void *)v35[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C3BB9A90](&v37);
LABEL_53:
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
  }
}

void sub_1C21CFA54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  if (*(char *)(v11 - 89) < 0)
    operator delete(*(void **)(v11 - 112));
  _Unwind_Resume(exception_object);
}

std::string *sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_1::operator()(_QWORD **a1, int a2, const void *a3, size_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 __dst;
  unint64_t v20;

  v7 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(**a1 + 48, a2);
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (a4 >= 0x17)
  {
    v10 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v10 = a4 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = a4;
    v20 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v20) = a4;
  p_dst = &__dst;
  if (a4)
LABEL_8:
    memmove(p_dst, a3, a4);
  *((_BYTE *)p_dst + a4) = 0;
  *(_DWORD *)(v8 + 40) |= 2u;
  v12 = *(_QWORD *)(v8 + 8);
  v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFFELL);
  if ((v12 & 1) != 0)
    v13 = (_QWORD *)*v13;
  google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v8 + 56), &__dst, (uint64_t)v13);
  if (SHIBYTE(v20) < 0)
    operator delete((void *)__dst);
  v14 = *a1[1];
  if (*(char *)(v14 + 23) < 0)
    v15 = *(_QWORD *)(v14 + 8);
  else
    LODWORD(v15) = *(unsigned __int8 *)(v14 + 23);
  v16 = *(_DWORD *)(v8 + 40);
  *(_DWORD *)(v8 + 40) = v16 | 8;
  *(_DWORD *)(v8 + 68) = v15;
  if (*(char *)(v14 + 23) < 0)
    v17 = *(_QWORD *)(v14 + 8);
  else
    LODWORD(v17) = *(unsigned __int8 *)(v14 + 23);
  *(_DWORD *)(v8 + 40) = v16 | 0x18;
  *(_DWORD *)(v8 + 72) = v17 + a4;
  return std::string::append((std::string *)v14, (const std::string::value_type *)a3, a4);
}

void sub_1C21CFC14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::Decode(uint64_t a1@<X0>, int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  int *v9;
  int *v10;
  int v11;
  std::string::size_type v12;
  std::vector<std::string>::pointer end;
  std::string *v14;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  int v18;
  std::vector<std::string> v19;

  memset(&v19, 0, sizeof(v19));
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 496))(a1);
  std::vector<std::string>::reserve(&v19, a2[1] - *a2);
  v9 = *a2;
  v10 = a2[1];
  if (*a2 == v10)
  {
LABEL_8:
    (*(void (**)(uint64_t, std::vector<std::string> *, uint64_t))(*(_QWORD *)a1 + 264))(a1, &v19, a3);
  }
  else
  {
    while (1)
    {
      v11 = *v9;
      v18 = v11;
      if (v11 < 0 || v11 >= v8)
        break;
      __p.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 512))(a1);
      __p.__r_.__value_.__l.__size_ = v12;
      end = v19.__end_;
      if (v19.__end_ >= v19.__end_cap_.__value_)
      {
        v14 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string_view>((uint64_t)&v19, (uint64_t)&__p);
      }
      else
      {
        std::allocator<std::string>::construct[abi:ne180100]<std::string,std::string_view>((int)&v19.__end_cap_, v19.__end_, (uint64_t)&__p);
        v14 = end + 1;
      }
      v19.__end_ = v14;
      if (++v9 == v10)
        goto LABEL_8;
    }
    absl::StrCat<int>("Invalid id: ", 0xCuLL, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sentencepiece::util::Status::Status(a4, 11, p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1C21CFDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18)
{
  if (a15 < 0)
    operator delete(__p);
  __p = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void absl::StrCat<int>(void *__src@<X0>, size_t __len@<X1>, std::string *a3@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  void *v7[2];
  unsigned __int8 v8;
  std::string __dst;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  std::ostream::operator<<();
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3BB9A90](&v12);
  if ((v8 & 0x80u) == 0)
    v4 = v7;
  else
    v4 = (void **)v7[0];
  if ((v8 & 0x80u) == 0)
    v5 = v8;
  else
    v5 = (std::string::size_type)v7[1];
  v6 = std::string::append(&__dst, (const std::string::value_type *)v4, v5);
  *a3 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1C21CFF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

float sentencepiece::SentencePieceProcessor::GetScore(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  uint64_t v4;
  sentencepiece::logging *v5;
  float v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  char v17;
  uint64_t v18;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v18);
  v4 = v18;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v18);
  if (!v4)
    return (*(float (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1), a2);
  v6 = 0.0;
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    v17 = 0;
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") ", 2);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"LOG(", 4);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ERROR", 5);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v18, this);
    v13 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v18);
    v14 = strlen(v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v18);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v17);
  }
  return v6;
}

void sub_1C21D00B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::IsUnused(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  uint64_t v4;
  sentencepiece::logging *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  char v16;
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v17);
  v4 = v17;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  if (!v4)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 160))(*((_QWORD *)this + 1), a2);
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    v16 = 0;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ERROR", 5);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v17, this);
    v12 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v17);
    v13 = strlen(v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v16);
  }
  return 0;
}

void sub_1C21D0228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::IsByte(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  uint64_t v4;
  sentencepiece::logging *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  char v16;
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v17);
  v4 = v17;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  if (!v4)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 176))(*((_QWORD *)this + 1), a2);
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    v16 = 0;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ERROR", 5);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v17, this);
    v12 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v17);
    v13 = strlen(v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v16);
  }
  return 0;
}

void sub_1C21D039C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::bos_id(sentencepiece::ModelInterface **this)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sentencepiece::ModelInterface::bos_piece(this[1]);
  v3 = strlen(v2);
  v4 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*this + 63))(this, v2, v3);
  if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*this + 67))(this, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sentencepiece::SentencePieceProcessor::eos_id(sentencepiece::ModelInterface **this)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sentencepiece::ModelInterface::eos_piece(this[1]);
  v3 = strlen(v2);
  v4 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*this + 63))(this, v2, v3);
  if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*this + 67))(this, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sentencepiece::SentencePieceProcessor::pad_id(sentencepiece::ModelInterface **this)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sentencepiece::ModelInterface::pad_piece(this[1]);
  v3 = strlen(v2);
  v4 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*this + 63))(this, v2, v3);
  if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*this + 67))(this, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

_QWORD *sentencepiece::SentencePieceProcessor::LookupPredictive@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  _QWORD *result;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  result = ((_QWORD *(*)(sentencepiece::util::Status *__return_ptr))(*a1)[11])(a5);
  if (!*(_QWORD *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    if (a4)
    {
      std::vector<std::string>::__clear[abi:ne180100](a4);
      v11 = *((char *)a2 + 23);
      if (v11 >= 0)
        v12 = a2;
      else
        v12 = (uint64_t *)*a2;
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)a2 + 23);
      else
        v13 = a2[1];
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, uint64_t, uint64_t *))(*a1[1] + 200))(a1[1], v12, v13, a3, a4);
    }
    else
    {
      v15 = 13;
      v14 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"pieces", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v15, (uint64_t)a5);
      v16[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v16[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v17 < 0)
        operator delete((void *)v16[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1C3BB9A90](&v18);
    }
  }
  return result;
}

void sub_1C21D06B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::SentencePieceProcessor::LookupPredictive@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  _QWORD *result;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  result = ((_QWORD *(*)(sentencepiece::util::Status *__return_ptr))(*a1)[11])(a5);
  if (!*(_QWORD *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    if (a4)
    {
      a4[1] = *a4;
      v11 = *((char *)a2 + 23);
      if (v11 >= 0)
        v12 = a2;
      else
        v12 = (uint64_t *)*a2;
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)a2 + 23);
      else
        v13 = a2[1];
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, uint64_t, _QWORD *))(*a1[1] + 208))(a1[1], v12, v13, a3, a4);
    }
    else
    {
      v15 = 13;
      v14 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"ids", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v15, (uint64_t)a5);
      v16[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v16[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v17 < 0)
        operator delete((void *)v16[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1C3BB9A90](&v18);
    }
  }
  return result;
}

void sub_1C21D0890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t std::make_unique[abi:ne180100]<sentencepiece::normalizer::Normalizer,sentencepiece::MemoryMappedNormalizerSpec const&,std::string_view>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = sentencepiece::normalizer::Normalizer::Normalizer(v6, a1, *a2, a2[1]);
  *a3 = v6;
  return result;
}

void sub_1C21D0928(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::CopyAndLoadFromMemoryMappedFile(sentencepiece::SentencePieceProcessor *this, const char *a2)
{
  char *v3;
  uint64_t v4;

  v3 = (char *)this + 96;
  MEMORY[0x1C3BB9640]((char *)this + 96, a2);
  if (*((char *)this + 119) < 0)
  {
    v3 = (char *)*((_QWORD *)this + 12);
    v4 = *((_QWORD *)this + 13);
  }
  else
  {
    v4 = *((unsigned __int8 *)this + 119);
  }
  return (*(uint64_t (**)(sentencepiece::SentencePieceProcessor *, char *, uint64_t))(*(_QWORD *)this + 48))(this, v3, v4);
}

void sentencepiece::Mmap<char>::open(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  std::string *v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  std::string::value_type *v13;
  std::string *v14;
  int v15;
  int v16;
  std::string::size_type size;
  std::__fs::filesystem::path *v18;
  std::string *v19;
  off_t st_size;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  std::string __p[3];
  void *v27;
  char v28;
  _BYTE v29[152];
  std::string v30;
  std::__fs::filesystem::path v31;
  stat v32;

  sentencepiece::Mmap<char>::close(a1);
  if (!a3)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p[0] = *(std::string *)a2;
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = __p;
    else
      v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    v9 = open((const char *)v8, 0, __p[0].__r_.__value_.__r.__words[0], __p[0].__r_.__value_.__l.__size_, __p[0].__r_.__value_.__r.__words[2]);
    v10 = v9;
    *(_DWORD *)(a1 + 24) = v9;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0)
        goto LABEL_52;
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_52;
    }
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
    v11 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(fd = ::open(filename.string().data(), mode)) >= 0", 50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    v12 = *(unsigned __int8 *)(a2 + 23);
    if ((v12 & 0x80u) == 0)
      v13 = (std::string::value_type *)a2;
    else
      v13 = *(std::string::value_type **)a2;
    if ((v12 & 0x80u) != 0)
      v12 = *(_QWORD *)(a2 + 8);
LABEL_66:
    std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, v13, &v13[v12], 0x22u, 0x5Cu);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a4);
    __p[0].__r_.__value_.__l.__size_ = *MEMORY[0x1E0DE4F60];
    *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1]
                              + *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60]
                                                                                                + 24);
    __p[0].__r_.__value_.__r.__words[2] = MEMORY[0x1E0DE4FB8] + 16;
    if (v28 < 0)
      operator delete(v27);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C3BB9A90](v29);
    return;
  }
  std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)a2, (uint64_t)&v31);
  std::__fs::filesystem::path::filename[abi:ne180100]((const std::__fs::filesystem::path *)a2, (uint64_t)&v30);
  std::__fs::filesystem::__status(&v31, 0);
  if (__p[0].__r_.__value_.__s.__data_[0] != 2)
    goto LABEL_30;
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(__p, v31.__pn_.__r_.__value_.__l.__data_, v31.__pn_.__r_.__value_.__l.__size_);
  else
    __p[0] = v31.__pn_;
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = __p;
  else
    v14 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  v15 = open((const char *)v14, 0, __p[0].__r_.__value_.__r.__words[0], __p[0].__r_.__value_.__l.__size_, __p[0].__r_.__value_.__r.__words[2]);
  v16 = v15;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0)
      goto LABEL_27;
LABEL_30:
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"std::filesystem::is_directory(dir) && (dirfd = ::open(dir.string().data(), mode)) >= 0", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    size = HIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]);
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v31;
    else
      v18 = (std::__fs::filesystem::path *)v31.__pn_.__r_.__value_.__r.__words[0];
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v31.__pn_.__r_.__value_.__l.__size_;
    std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, v18, (_BYTE *)v18 + size, 0x22u, 0x5Cu);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a4);
    __p[0].__r_.__value_.__l.__size_ = *MEMORY[0x1E0DE4F60];
    *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1]
                              + *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60]
                                                                                                + 24);
    __p[0].__r_.__value_.__r.__words[2] = MEMORY[0x1E0DE4FB8] + 16;
    if (v28 < 0)
      operator delete(v27);
    goto LABEL_37;
  }
  if (v15 < 0)
    goto LABEL_30;
LABEL_27:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(__p, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  else
    __p[0] = v30;
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = __p;
  else
    v19 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  *(_DWORD *)(a1 + 24) = openat_authenticated_np(v16, (const char *)v19, 0, -1);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  close(v16);
  if ((*(_DWORD *)(a1 + 24) & 0x80000000) == 0)
  {
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__pn_.__r_.__value_.__l.__data_);
LABEL_52:
    if (fstat(*(_DWORD *)(a1 + 24), &v32) < 0)
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
      v22 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"::fstat(fd, &st) >= 0", 21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"failed to get file size: ", 25);
      v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0)
        v13 = (std::string::value_type *)a2;
      else
        v13 = *(std::string::value_type **)a2;
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      st_size = v32.st_size;
      *(_QWORD *)(a1 + 16) = v32.st_size;
      v21 = mmap(0, st_size, 1, 1, *(_DWORD *)(a1 + 24), 0);
      if (v21 != (void *)-1)
      {
        *(_QWORD *)(a1 + 8) = v21;
        close(*(_DWORD *)(a1 + 24));
        *(_DWORD *)(a1 + 24) = -1;
        sentencepiece::util::Status::Status(a4);
        return;
      }
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
      v23 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(p = reinterpret_cast<char*>( ::mmap(0, length, PROT_READ, MAP_SHARED, fd, 0))) != MAP_FAILED", 93);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"mmap() failed: ", 15);
      v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0)
        v13 = (std::string::value_type *)a2;
      else
        v13 = *(std::string::value_type **)a2;
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(a2 + 8);
    }
    goto LABEL_66;
  }
  LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"fd >= 0", 7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
  v24 = *(unsigned __int8 *)(a2 + 23);
  if ((v24 & 0x80u) == 0)
    v25 = (_BYTE *)a2;
  else
    v25 = *(_BYTE **)a2;
  if ((v24 & 0x80u) != 0)
    v24 = *(_QWORD *)(a2 + 8);
  std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, v25, &v25[v24], 0x22u, 0x5Cu);
  sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a4);
  __p[0].__r_.__value_.__l.__size_ = *MEMORY[0x1E0DE4F60];
  *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1]
                            + *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60]
                                                                                              + 24);
  __p[0].__r_.__value_.__r.__words[2] = MEMORY[0x1E0DE4FB8] + 16;
  if (v28 < 0)
    operator delete(v27);
LABEL_37:
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3BB9A90](v29);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__pn_.__r_.__value_.__l.__data_);
}

void sub_1C21D1144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 - 217) < 0)
    operator delete(*(void **)(v14 - 240));
  if (*(char *)(v14 - 193) < 0)
    operator delete(*(void **)(v14 - 216));
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::MMapAuthenticated(_QWORD *a1@<X0>, char *a2@<X1>, sentencepiece::util::Status *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::string __p;

  v6 = operator new();
  *(_QWORD *)v6 = &off_1E7BE9130;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 24) = -1;
  v7 = a1[11];
  a1[11] = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v6 = a1[11];
  }
  v8 = a2;
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&__p, &v8);
  sentencepiece::Mmap<char>::open(v6, (uint64_t)&__p, 1, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*(_QWORD *)a3)
  {
    sentencepiece::util::Status::~Status(a3);
    (*(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 48))(a1, *(_QWORD *)(a1[11] + 8), *(_QWORD *)(a1[11] + 16));
  }
}

void sub_1C21D12DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::EncodeAsPieces(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 136))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_1C21D1340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::EncodeAsIds(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 144))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_1C21D13A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::NBestEncodeAsPieces(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 176))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_1C21D1404(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::NBestEncodeAsIds(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 184))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_1C21D1464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAsPieces(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 192))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_1C21D14C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAsIds(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 200))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_1C21D1524(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScoreAsPieces(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 208))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_1C21D1588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::vector<std::string>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScoreAsIds(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 216))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_1C21D15E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::DecodePieces(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 152))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_1C21D1648(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1C21D16AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::DecodeIds(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 168))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_1C21D1710(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

float sentencepiece::SentencePieceProcessor::CalculateEntropy(uint64_t a1)
{
  float v1;
  uint64_t v3;
  float v4;

  v4 = 0.0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 224))(&v3);
  v1 = v4;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v3);
  return v1;
}

void sentencepiece::SentencePieceProcessor::EncodeAsSerializedProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  void (**v13)(sentencepiece::ImmutableSentencePieceText *__hidden);
  google::protobuf::MessageLite *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v13 = &off_1E7BE8F40;
  v15 = 0;
  v16 = 0;
  v14 = (google::protobuf::MessageLite *)sentencepiece::SentencePieceText::default_instance(a1);
  v8 = sentencepiece::ImmutableSentencePieceText::mutable_proto((sentencepiece::ImmutableSentencePieceText *)&v13);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(&v12, a1, a2, a3, v8);
  google::protobuf::MessageLite::SerializeAsString(v14, a4);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v12);
  v13 = &off_1E7BE8F40;
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1C21D1848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2 + 16);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAsSerializedProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  void (**v17)(sentencepiece::ImmutableSentencePieceText *__hidden);
  google::protobuf::MessageLite *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v17 = &off_1E7BE8F40;
  v19 = 0;
  v20 = 0;
  v18 = (google::protobuf::MessageLite *)sentencepiece::SentencePieceText::default_instance(a1);
  v12 = sentencepiece::ImmutableSentencePieceText::mutable_proto((sentencepiece::ImmutableSentencePieceText *)&v17);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 248))(&v16, a1, a2, a3, a4, v12, a6);
  google::protobuf::MessageLite::SerializeAsString(v18, a5);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v16);
  v17 = &off_1E7BE8F40;
  v13 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1C21D1964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2 + 16);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::NBestEncodeAsSerializedProto(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  std::__shared_weak_count *v16;

  v15[1] = 0;
  v16 = 0;
  v15[0] = &off_1E7BE8FA0;
  v10 = sentencepiece::ImmutableNBestSentencePieceText::mutable_proto((sentencepiece::ImmutableNBestSentencePieceText *)v15);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(&v14, a1, a2, a3, a4, v10);
  sentencepiece::ImmutableNBestSentencePieceText::SerializeAsString((sentencepiece::ImmutableNBestSentencePieceText *)v15, a5);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v14);
  v15[0] = &off_1E7BE8FA0;
  v11 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1C21D1A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a9);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v10 + 8);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScoreAsSerializedProto(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>, float a8@<S0>)
{
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  std::__shared_weak_count *v22;

  v21[1] = 0;
  v22 = 0;
  v21[0] = &off_1E7BE8FA0;
  v16 = sentencepiece::ImmutableNBestSentencePieceText::mutable_proto((sentencepiece::ImmutableNBestSentencePieceText *)v21);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 256))(&v20, a1, a2, a3, a4, a5, a6, v16, a8);
  sentencepiece::ImmutableNBestSentencePieceText::SerializeAsString((sentencepiece::ImmutableNBestSentencePieceText *)v21, a7);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v20);
  v21[0] = &off_1E7BE8FA0;
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1C21D1B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a9);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v10 + 8);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::DecodePiecesAsSerializedProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  void (**v11)(sentencepiece::ImmutableSentencePieceText *__hidden);
  google::protobuf::MessageLite *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v11 = &off_1E7BE8F40;
  v13 = 0;
  v14 = 0;
  v12 = (google::protobuf::MessageLite *)sentencepiece::SentencePieceText::default_instance(a1);
  v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto((sentencepiece::ImmutableSentencePieceText *)&v11);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(_QWORD *)a1 + 264))(&v10, a1, a2, v6);
  google::protobuf::MessageLite::SerializeAsString(v12, a3);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
  v11 = &off_1E7BE8F40;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  void (**v11)(sentencepiece::ImmutableSentencePieceText *__hidden);
  google::protobuf::MessageLite *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v11 = &off_1E7BE8F40;
  v13 = 0;
  v14 = 0;
  v12 = (google::protobuf::MessageLite *)sentencepiece::SentencePieceText::default_instance(a1);
  v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto((sentencepiece::ImmutableSentencePieceText *)&v11);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(_QWORD *)a1 + 272))(&v10, a1, a2, v6);
  google::protobuf::MessageLite::SerializeAsString(v12, a3);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
  v11 = &off_1E7BE8F40;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1C21D1C88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2 + 16);
  _Unwind_Resume(a1);
}

void sub_1C21D1D7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2 + 16);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::DecodeIdsAsSerializedProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  void (**v11)(sentencepiece::ImmutableSentencePieceText *__hidden);
  google::protobuf::MessageLite *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v11 = &off_1E7BE8F40;
  v13 = 0;
  v14 = 0;
  v12 = (google::protobuf::MessageLite *)sentencepiece::SentencePieceText::default_instance(a1);
  v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto((sentencepiece::ImmutableSentencePieceText *)&v11);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(&v10, a1, a2, v6);
  google::protobuf::MessageLite::SerializeAsString(v12, a3);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
  v11 = &off_1E7BE8F40;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1C21D1E70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2 + 16);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::EncodeAsImmutableProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, sentencepiece::ImmutableSentencePieceText *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a4 = &off_1E7BE8F40;
  *((_QWORD *)a4 + 1) = sentencepiece::SentencePieceText::default_instance(a1);
  *((_QWORD *)a4 + 2) = 0;
  *((_QWORD *)a4 + 3) = 0;
  v8 = sentencepiece::ImmutableSentencePieceText::mutable_proto(a4);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(&v9, a1, a2, a3, v8);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v9);
}

void sub_1C21D1F28(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAsImmutableProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, sentencepiece::ImmutableSentencePieceText *a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a5 = &off_1E7BE8F40;
  *((_QWORD *)a5 + 1) = sentencepiece::SentencePieceText::default_instance(a1);
  *((_QWORD *)a5 + 2) = 0;
  *((_QWORD *)a5 + 3) = 0;
  v12 = sentencepiece::ImmutableSentencePieceText::mutable_proto(a5);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 248))(&v13, a1, a2, a3, a4, v12, a6);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v13);
}

void sub_1C21D1FF0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::NBestEncodeAsImmutableProto(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, sentencepiece::ImmutableNBestSentencePieceText *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a5 = &off_1E7BE8FA0;
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)a5 + 2) = 0;
  v9 = sentencepiece::ImmutableNBestSentencePieceText::mutable_proto(a5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(&v10, a1, a2, a3, a4, v9);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
}

void sub_1C21D20A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = v3;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScoreAsImmutableProto(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, sentencepiece::ImmutableNBestSentencePieceText *a7@<X8>, float a8@<S0>)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a7 = &off_1E7BE8FA0;
  *((_QWORD *)a7 + 1) = 0;
  *((_QWORD *)a7 + 2) = 0;
  v15 = sentencepiece::ImmutableNBestSentencePieceText::mutable_proto(a7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 256))(&v16, a1, a2, a3, a4, a5, a6, v15, a8);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v16);
}

void sub_1C21D2178(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::DecodePiecesAsImmutableProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, sentencepiece::ImmutableSentencePieceText *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a3 = &off_1E7BE8F40;
  *((_QWORD *)a3 + 1) = sentencepiece::SentencePieceText::default_instance(a1);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto(a3);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(_QWORD *)a1 + 264))(&v7, a1, a2, v6);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v7);
}

{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a3 = &off_1E7BE8F40;
  *((_QWORD *)a3 + 1) = sentencepiece::SentencePieceText::default_instance(a1);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto(a3);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(_QWORD *)a1 + 272))(&v7, a1, a2, v6);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v7);
}

void sub_1C21D2218(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void sub_1C21D22B8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::DecodeIdsAsImmutableProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, sentencepiece::ImmutableSentencePieceText *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a3 = &off_1E7BE8F40;
  *((_QWORD *)a3 + 1) = sentencepiece::SentencePieceText::default_instance(a1);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto(a3);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(&v7, a1, a2, v6);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v7);
}

void sub_1C21D2358(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1C21D242C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *std::vector<int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1C21D2548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3BB9A90](a1 + 112);
  return a1;
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1C21D26A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char **absl::internal::Splitter::Splitter(char **a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4, uint64_t a5, int a6)
{
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  _BOOL4 v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  BOOL v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;

  v9 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v10 = 0;
  if (a5)
  {
    v11 = a6;
    if (a3)
    {
      v9 = 0;
      v10 = 0;
      v14 = (unsigned __int8 *)(a2 + a3);
      v15 = a1 + 2;
      while (2)
      {
        v16 = &v10[a2];
        v17 = &v10[a2];
LABEL_5:
        v18 = a5;
        v19 = a4;
        while (*v17 != *v19)
        {
          ++v19;
          if (!--v18)
          {
            if (++v17 != v14)
              goto LABEL_5;
            goto LABEL_37;
          }
        }
        if (v17 != v14)
        {
          v20 = &v17[-a2];
          if (&v17[-a2] != (unsigned __int8 *)-1)
          {
            v21 = (unsigned __int8 *)(v20 - v10);
            v22 = v20 >= v10;
            if (!v11)
              v22 = v20 > v10;
            if (v22)
            {
              v23 = (unsigned __int8 *)(a3 - (_QWORD)v10);
              if (v23 >= v21)
                v24 = v21;
              else
                v24 = v23;
              if ((unint64_t)v9 >= *v15)
              {
                v25 = ((char *)v9 - *a1) >> 4;
                if ((unint64_t)(v25 + 1) >> 60)
                  std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
                v26 = *v15 - (_QWORD)*a1;
                v27 = v26 >> 3;
                if (v26 >> 3 <= (unint64_t)(v25 + 1))
                  v27 = v25 + 1;
                if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
                  v28 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v28 = v27;
                if (v28)
                  v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::aobject>>((uint64_t)v15, v28);
                else
                  v29 = 0;
                v30 = &v29[16 * v25];
                *(_QWORD *)v30 = v16;
                *((_QWORD *)v30 + 1) = v24;
                v32 = *a1;
                v31 = a1[1];
                v33 = v30;
                if (v31 != *a1)
                {
                  do
                  {
                    *((_OWORD *)v33 - 1) = *((_OWORD *)v31 - 1);
                    v33 -= 16;
                    v31 -= 16;
                  }
                  while (v31 != v32);
                  v31 = *a1;
                }
                v9 = (unsigned __int8 **)(v30 + 16);
                *a1 = v33;
                a1[1] = v30 + 16;
                a1[2] = &v29[16 * v28];
                if (v31)
                  operator delete(v31);
                v11 = a6;
                v15 = a1 + 2;
              }
              else
              {
                *v9 = v16;
                v9[1] = v24;
                v9 += 2;
              }
              a1[1] = (char *)v9;
            }
            v10 = v20 + 1;
            if (a3 > (unint64_t)(v20 + 1))
              continue;
          }
        }
        break;
      }
    }
  }
LABEL_37:
  v34 = a3 > (unint64_t)v10;
  v35 = a3 - (_QWORD)v10;
  if (v34)
  {
    v36 = &v10[a2];
    v37 = (unint64_t)a1[2];
    if ((unint64_t)v9 >= v37)
    {
      v39 = ((char *)v9 - *a1) >> 4;
      if ((unint64_t)(v39 + 1) >> 60)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v40 = v37 - (_QWORD)*a1;
      v41 = v40 >> 3;
      if (v40 >> 3 <= (unint64_t)(v39 + 1))
        v41 = v39 + 1;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
        v42 = 0xFFFFFFFFFFFFFFFLL;
      else
        v42 = v41;
      if (v42)
        v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::aobject>>((uint64_t)(a1 + 2), v42);
      else
        v43 = 0;
      v44 = &v43[16 * v39];
      v45 = &v43[16 * v42];
      *(_QWORD *)v44 = v36;
      *((_QWORD *)v44 + 1) = v35;
      v38 = v44 + 16;
      v47 = *a1;
      v46 = a1[1];
      if (v46 != *a1)
      {
        do
        {
          *((_OWORD *)v44 - 1) = *((_OWORD *)v46 - 1);
          v44 -= 16;
          v46 -= 16;
        }
        while (v46 != v47);
        v46 = *a1;
      }
      *a1 = v44;
      a1[1] = v38;
      a1[2] = v45;
      if (v46)
        operator delete(v46);
    }
    else
    {
      *v9 = v36;
      v9[1] = (unsigned __int8 *)v35;
      v38 = (char *)(v9 + 2);
    }
    a1[1] = v38;
  }
  return a1;
}

void sub_1C21D296C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::vector<std::string>::pointer end;
  size_t v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::pair<std::string_view,int>>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(end, v5);
    this->__end_ = (std::vector<std::string>::pointer)((char *)end + v5);
  }
  return this;
}

void sub_1C21D2A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

_QWORD *std::vector<std::string_view>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1C21D2B14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void absl::StrReplaceAll(void *__src@<X0>, size_t __len@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::string *p_dst;
  std::string::size_type size;
  char *v10;
  int64_t v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string __dst;
  std::string *v18;
  std::string::size_type v19;

  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v6 = *a3;
  v7 = a3[1];
  while (v6 != v7)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v10 = *(char **)v6;
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(const std::string::value_type **)(v6 + 16);
    v13 = *(_QWORD *)(v6 + 24);
    v18 = p_dst;
    v19 = size;
    if (v11)
    {
      v14 = std::string_view::find[abi:ne180100]((uint64_t *)&v18, v10, v11, 0);
      if (v14 == -1)
      {
        v16 = 0;
      }
      else
      {
        v15 = v14;
        v16 = 0;
        do
        {
          std::string::append((std::string *)a4, (const std::string::value_type *)v18 + v16, v15 - v16);
          std::string::append((std::string *)a4, v12, v13);
          v16 = v15 + v11;
          v15 = std::string_view::find[abi:ne180100]((uint64_t *)&v18, v10, v11, v15 + v11);
        }
        while (v15 != -1);
      }
      p_dst = (std::string *)((char *)v18 + v16);
      size = v19 - v16;
    }
    std::string::append((std::string *)a4, (const std::string::value_type *)p_dst, size);
    std::string::operator=(&__dst, (const std::string *)a4);
    v6 += 32;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1C21D2C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::string_view::find[abi:ne180100](uint64_t *a1, char *a2, int64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  void *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v13;
  uint64_t v14;
  char *v15;

  v4 = a1[1];
  if (v4 < a4)
    return -1;
  if (a3)
  {
    v6 = *a1;
    v7 = (void *)(*a1 + a4);
    v8 = (char *)(v6 + v4);
    v9 = v6 + v4 - (_QWORD)v7;
    if (v9 >= a3)
    {
      v13 = *a2;
      do
      {
        v14 = v9 - a3;
        if (v14 == -1)
          break;
        v15 = (char *)memchr(v7, v13, v14 + 1);
        if (!v15)
          break;
        v10 = v15;
        if (!memcmp(v15, a2, a3))
          goto LABEL_6;
        v7 = v10 + 1;
        v9 = v8 - (v10 + 1);
      }
      while (v9 >= a3);
    }
    v10 = v8;
LABEL_6:
    if (v10 == v8)
      return -1;
    else
      return (uint64_t)&v10[-v6];
  }
  return a4;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E7BE5138, MEMORY[0x1E0DE42E0]);
}

void sub_1C21D2DB8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<std::pair<std::vector<std::string>,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1C21D3078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN13sentencepiece17SentencePieceTextENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x70uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN13sentencepiece17SentencePieceTextENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1C21D30CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN13sentencepiece17SentencePieceTextENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E7BECAA0;
  sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)(a1 + 3), 0);
  return a1;
}

void sub_1C21D3118(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<sentencepiece::SentencePieceText>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7BECAA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<sentencepiece::SentencePieceText>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7BECAA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3BB9B44);
}

void std::__shared_ptr_emplace<sentencepiece::SentencePieceText>::__on_zero_shared(uint64_t a1)
{
  sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)(a1 + 24));
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN13sentencepiece22NBestSentencePieceTextENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x48uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN13sentencepiece22NBestSentencePieceTextENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1C21D31AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN13sentencepiece22NBestSentencePieceTextENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E7BECAD8;
  sentencepiece::NBestSentencePieceText::NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)(a1 + 3), 0);
  return a1;
}

void sub_1C21D31F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<sentencepiece::NBestSentencePieceText>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7BECAD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<sentencepiece::NBestSentencePieceText>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7BECAD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3BB9B44);
}

void std::__shared_ptr_emplace<sentencepiece::NBestSentencePieceText>::__on_zero_shared(uint64_t a1)
{
  sentencepiece::NBestSentencePieceText::~NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)(a1 + 24));
}

sentencepiece::ModelProto *std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](sentencepiece::ModelProto **a1, sentencepiece::ModelProto *a2)
{
  sentencepiece::ModelProto *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sentencepiece::ModelProto::~ModelProto(result);
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

void absl::StrCat<std::string,char [2],std::string>(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, char *a4@<X3>, void **a5@<X4>, std::string *a6@<X8>)
{
  int v10;
  void *v11;
  size_t v12;
  std::string *p_p;
  std::string::size_type size;
  std::string *v15;
  std::string __p;
  std::string __dst;

  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  v10 = *((char *)a3 + 23);
  if (v10 >= 0)
    v11 = a3;
  else
    v11 = *a3;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a3 + 23);
  else
    v12 = (size_t)a3[1];
  absl::StrCat<char [2],std::string>(v11, v12, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a6 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1C21D3360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void absl::StrCat<char [2],std::string>(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, std::string *a5@<X8>)
{
  size_t v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  std::string __p;
  std::string __dst;

  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  v8 = strlen(a3);
  absl::StrCat<std::string>(a3, v8, a4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v11 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a5 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1C21D3450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void absl::StrCat<std::string>(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, std::string *a4@<X8>)
{
  int v6;
  void *v7;
  size_t v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  void *__p[2];
  unsigned __int8 v13;
  std::string __dst;

  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  v6 = *((char *)a3 + 23);
  if (v6 >= 0)
    v7 = a3;
  else
    v7 = *a3;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)a3 + 23);
  else
    v8 = (size_t)a3[1];
  std::string::basic_string[abi:ne180100](__p, v7, v8);
  if ((v13 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v10 = v13;
  else
    v10 = (std::string::size_type)__p[1];
  v11 = std::string::append(&__dst, (const std::string::value_type *)v9, v10);
  *a4 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if ((char)v13 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1C21D3538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::set<std::string_view>::set[abi:ne180100]<std::__wrap_iter<std::string_view const*>>(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  _QWORD *v4;
  _OWORD *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::string_view>::__emplace_hint_unique_key_args<std::string_view,std::string_view const&>((uint64_t **)a1, v4, (uint64_t)v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_1C21D373C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string_view>::__emplace_hint_unique_key_args<std::string_view,std::string_view const&>(uint64_t **a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = std::__tree<std::string_view>::__find_equal<std::string_view>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::string_view>::__find_equal<std::string_view>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2
    || std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (uint64_t)(a2 + 4)))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(v12 + 4), a5))
      goto LABEL_16;
    return std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, a3, a5);
  }
  if (std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(a2 + 4), a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (uint64_t)(v15 + 4)))return std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

_QWORD *std::__tree<std::string_view>::find<std::string_view>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = std::less<std::string_view>::operator()[abi:ne180100](v5, (uint64_t)(v3 + 4), a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string_view>::operator()[abi:ne180100](v5, a2, (uint64_t)(v6 + 4)))
    return v2;
  return v6;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1C21D3B00(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1C3BB9A90](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3BB9A90](a1 + 128);
  return a1;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_1C21D3C04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1C21D3D18(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string>&>(uint64_t a1, __int128 **a2)
{
  std::string *v3;
  std::string *result;

  v3 = *(std::string **)(a1 + 8);
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 1;
  return result;
}

void sub_1C21D3D80(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::string>>::__emplace_back_slow_path<std::vector<std::string>&>(uint64_t *a1, __int128 **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  uint64_t v12;
  void *v14[2];
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  ++v15;
  std::vector<std::vector<std::string>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<std::string>>::~__split_buffer(v14);
  return v12;
}

void sub_1C21D3E94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::pair<std::string_view,int>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1C21D3F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1C21D3FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

uint64_t std::vector<std::vector<std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::string>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::string>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::string>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

_QWORD *std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1C21D42B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<int>>::__emplace_back_slow_path<std::vector<int>&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1C21D43C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C21D4430(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<int>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<int>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<int>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t std::vector<std::pair<std::vector<std::string>,float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::vector<std::string>,float>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 4;
  }
}

void **std::__split_buffer<std::pair<std::vector<std::string>,float>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::pair<std::vector<std::string>,float>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::pair<std::vector<std::string>,float>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 32);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

float std::vector<std::pair<std::vector<std::string>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string>&,float>(uint64_t a1, __int128 **a2, float *a3)
{
  uint64_t v5;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_1C21D4918(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<std::string>,float>>::__emplace_back_slow_path<std::vector<std::string>&,float>(uint64_t *a1, __int128 **a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  uint64_t v14;
  void *v16[2];
  std::string *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::vector<std::string>,float>>>(v9, v11);
  else
    v12 = 0;
  v13 = (std::string *)&v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  v13->__r_.__value_.__r.__words[0] = 0;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  LODWORD(v13[1].__r_.__value_.__l.__data_) = *a3;
  v17 = (std::string *)((char *)v17 + 32);
  std::vector<std::pair<std::vector<std::string>,float>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<std::pair<std::vector<std::string>,float>>::~__split_buffer(v16);
  return v14;
}

void sub_1C21D4A18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<std::string>,float>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<int>,float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::pair<std::vector<int>,float>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::pair<std::vector<int>,float>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 32);
    *(_QWORD *)(a1 + 16) = v2 - 32;
    if (v5)
    {
      *(_QWORD *)(v2 - 24) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

float std::vector<std::pair<std::vector<int>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&,float>(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v5;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v5, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_1C21D4CA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<int>,float>>::__emplace_back_slow_path<std::vector<int>&,float>(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::vector<std::string>,float>>>(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v13, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  std::vector<std::pair<std::vector<int>,float>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1C21D4D9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::discrete_distribution<int>::param_type::param_type[abi:ne180100]<std::__wrap_iter<float *>>(uint64_t a1, float *a2, float *a3)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)a1, a2, a3, a3 - a2);
  std::discrete_distribution<int>::param_type::__init((double **)a1);
  return a1;
}

void sub_1C21D4DEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::discrete_distribution<int>::param_type::__init(double **a1)
{
  double *v1;
  double *v2;
  uint64_t v4;
  double v5;
  double *v6;
  double v7;
  double *v8;
  uint64_t v9;
  double *v10;
  double *v11;
  double v12;
  double *v13;
  double v14;
  double *v15;
  double *v16;
  __int128 v17;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 != v2)
  {
    if ((unint64_t)((char *)v2 - (char *)v1) < 9)
    {
      a1[1] = v1;
      std::vector<double>::shrink_to_fit((uint64_t)a1);
    }
    else
    {
      v4 = v2 - v1;
      v5 = 0.0;
      v6 = *a1;
      do
      {
        v7 = *v6++;
        v5 = v5 + v7;
      }
      while (v6 != v2);
      while (v1 < v2)
      {
        *v1 = *v1 / v5;
        ++v1;
      }
      std::vector<double>::vector(&v16, v4 - 1);
      v8 = *a1;
      v9 = (uint64_t)(a1[1] - 1);
      v10 = v16;
      if (*a1 != (double *)v9)
      {
        v11 = v8 + 1;
        v12 = *v8;
        *v16 = *v8;
        if (v8 + 1 != (double *)v9)
        {
          v13 = v10 + 1;
          do
          {
            v14 = *v11++;
            v12 = v12 + v14;
            *v13++ = v12;
          }
          while (v11 != (double *)v9);
        }
      }
      *a1 = v10;
      v15 = a1[2];
      *(_OWORD *)(a1 + 1) = v17;
      v16 = v8;
      *((_QWORD *)&v17 + 1) = v15;
      if (v8)
      {
        *(_QWORD *)&v17 = v8;
        operator delete(v8);
      }
    }
  }
}

char *std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(char *result, float *a2, float *a3, unint64_t a4)
{
  char *v6;
  double *v7;
  float v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    v7 = (double *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1C21D4F58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::vector<double>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - (uint64_t)v4) >> 3)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 8 * v6;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[8 * v6];
      v11 = &v7[8 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *(_QWORD *)(v12 - 8) = v13;
          v12 -= 8;
        }
        while (v8 != v4);
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1C21D50C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::discrete_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(int a1, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this, double **a3)
{
  double *v5;
  double *v6;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v7;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8;
  unint64_t v9;
  unint64_t v10;
  double *v11;
  double *v12;
  double v13;

  v5 = *a3;
  v6 = a3[1];
  v7 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this);
  v8 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this);
  if (v6 != v5)
  {
    v9 = v6 - v5;
    do
    {
      v10 = v9 >> 1;
      v11 = &v5[v9 >> 1];
      v13 = *v11;
      v12 = v11 + 1;
      v9 += ~(v9 >> 1);
      if (((double)v7 + (double)v8 * 4294967300.0) * 5.42101086e-20 + 0.0 < v13)
        v9 = v10;
      else
        v5 = v12;
    }
    while (v9);
    v6 = v5;
  }
  return (unint64_t)((char *)v6 - (char *)*a3) >> 3;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i;
  size_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;

  i = this->__i_;
  v2 = (i + 1) % 0x270;
  v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)i << 15) & 0xEFC60000 ^ i ^ ((((_DWORD)i << 15) & 0xEFC60000 ^ i) >> 18);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string_view>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  std::string *v7;
  uint64_t v8;
  std::__split_buffer<std::string> __v;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
  if (v6)
    v7 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>(a1 + 16, v6);
  else
    v7 = 0;
  __v.__first_ = v7;
  __v.__begin_ = v7 + v3;
  __v.__end_cap_.__value_ = &v7[v6];
  std::allocator<std::string>::construct[abi:ne180100]<std::string,std::string_view>(a1 + 16, __v.__begin_, a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v8 = *(_QWORD *)(a1 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v8;
}

void sub_1C21D5328(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::allocator<std::string>::construct[abi:ne180100]<std::string,std::string_view>(int a1, _BYTE *__dst, uint64_t a3)
{
  _QWORD *v3;
  size_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = __dst;
  v4 = *(_QWORD *)(a3 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = *(const void **)a3;
  if (v4 >= 0x17)
  {
    v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v6 = v4 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v3[1] = v4;
    v3[2] = v7 | 0x8000000000000000;
    *v3 = v8;
    v3 = v8;
  }
  else
  {
    __dst[23] = v4;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v3, v5, v4);
LABEL_9:
  *((_BYTE *)v3 + v4) = 0;
}

uint64_t *sentencepiece::swap(uint64_t *this, sentencepiece::SentencePieceText_SentencePiece *a2, sentencepiece::SentencePieceText_SentencePiece *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  if (a2 != (sentencepiece::SentencePieceText_SentencePiece *)this)
  {
    v3 = this[1];
    v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFFELL);
    if ((v3 & 1) != 0)
      v4 = (_QWORD *)*v4;
    v5 = *((_QWORD *)a2 + 1);
    v6 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL);
    if ((v5 & 1) != 0)
      v6 = (_QWORD *)*v6;
    if (v4 == v6)
      return sentencepiece::SentencePieceText_SentencePiece::InternalSwap((sentencepiece::SentencePieceText_SentencePiece *)this, a2);
    else
      return (uint64_t *)google::protobuf::internal::GenericSwap((google::protobuf::internal *)this, a2, a3);
  }
  return this;
}

uint64_t std::map<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>::map[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 24 * a3;
    do
    {
      std::__tree<std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,sentencepiece::SentencePieceProcessor::ExtraOption> const&>((uint64_t **)a1, v4, a2, a2);
      a2 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_1C21D5480(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,sentencepiece::SentencePieceProcessor::ExtraOption> const&>(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = std::__tree<std::string_view>::__find_equal<std::string_view>(a1, a2, &v11, &v10, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *sentencepiece::Mmap<char>::~Mmap(_QWORD *a1)
{
  *a1 = &off_1E7BE9130;
  sentencepiece::Mmap<char>::close((uint64_t)a1);
  return a1;
}

void sentencepiece::Mmap<char>::~Mmap(_QWORD *a1)
{
  *a1 = &off_1E7BE9130;
  sentencepiece::Mmap<char>::close((uint64_t)a1);
  JUMPOUT(0x1C3BB9B44);
}

double std::__fs::filesystem::path::parent_path[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__parent_path(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

double std::__fs::filesystem::path::filename[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__filename(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

_QWORD *std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, _BYTE *a2, _BYTE *a3, unsigned __int8 __c, unsigned __int8 a5)
{
  int v10;
  std::string *v11;
  std::string::size_type size;
  _QWORD *v13;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  std::string::push_back(&v15, __c);
  while (a2 != a3)
  {
    v10 = *a2;
    if (v10 == a5 || v10 == __c)
    {
      std::string::push_back(&v15, a5);
      LOBYTE(v10) = *a2;
    }
    std::string::push_back(&v15, v10);
    ++a2;
  }
  std::string::push_back(&v15, __c);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v15;
  else
    v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    size = v15.__r_.__value_.__l.__size_;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v11, size);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v13;
}

void sub_1C21D57FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, char **a2)
{
  char *v3;
  char *v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *a2;
  v4 = v3 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_1C21D585C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_1C21D59D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

void sentencepiece::SentencePieceProcessor::ResetVocabulary()
{
  __assert_rtn("_internal_set_type", "sentencepiece_model.pb.h", 4686, "::sentencepiece::ModelProto_SentencePiece_Type_IsValid(value)");
}

void sentencepiece::unigram::Lattice::~Lattice(sentencepiece::unigram::Lattice *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E7BE9390;
  sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::~FreeList((_QWORD *)this + 12);
  v3 = (void **)((char *)this + 72);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 48);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  sentencepiece::unigram::Lattice::~Lattice(this);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Allocate(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t result;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[4];
  if (v4 >= v3)
  {
    v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v5 = a1[1];
  v6 = (char **)(a1 + 1);
  if (v2 == (a1[2] - v5) >> 3)
  {
    v7 = 48 * v3;
    is_mul_ok(v3, 0x30uLL);
    v8 = (_QWORD *)operator new[]();
    v9 = v8;
    if (v3)
    {
      v10 = v8;
      do
      {
        *v10 = 0;
        v10[1] = 0;
        v10 += 6;
        v7 -= 48;
      }
      while (v7);
    }
    bzero(v8, 48 * a1[6]);
    v11 = a1[3];
    v12 = (_QWORD *)a1[2];
    if ((unint64_t)v12 >= v11)
    {
      v14 = ((char *)v12 - *v6) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v15 = v11 - (_QWORD)*v6;
      v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1))
        v16 = v14 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v17);
      else
        v18 = 0;
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *(_QWORD *)v19 = v9;
      v13 = v19 + 8;
      v22 = (char *)a1[1];
      v21 = (char *)a1[2];
      if (v21 != v22)
      {
        do
        {
          v23 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *((_QWORD *)v19 - 1) = v23;
          v19 -= 8;
        }
        while (v21 != v22);
        v21 = *v6;
      }
      a1[1] = v19;
      a1[2] = v13;
      a1[3] = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v12 = v9;
      v13 = v12 + 1;
    }
    a1[2] = v13;
    v5 = a1[1];
    v4 = a1[4];
    v2 = a1[5];
  }
  result = *(_QWORD *)(v5 + 8 * v2) + 48 * v4;
  a1[4] = v4 + 1;
  return result;
}

void sentencepiece::unigram::Lattice::Clear(sentencepiece::unigram::Lattice *this)
{
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)this + 6);
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)this + 9);
  *((_QWORD *)this + 1) = "";
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 4) = *((_QWORD *)this + 3);
  sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Free((uint64_t)this + 96);
}

void sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Free(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2 + 1 < (int)((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3))
    v3 = v2 + 1;
  else
    v3 = (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = 8 * v3;
    do
    {
      bzero(*(void **)(*(_QWORD *)(a1 + 8) + v4), 48 * *(_QWORD *)(a1 + 48));
      v4 += 8;
    }
    while (v5 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
}

void sentencepiece::unigram::Lattice::SetSentence(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  char **v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  _DWORD *v34;
  void **v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  _DWORD *v49;
  _DWORD *v50;
  void **v51;
  void **v52;
  _QWORD *v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;

  sentencepiece::unigram::Lattice::Clear((sentencepiece::unigram::Lattice *)a1);
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  v6 = (char **)(a1 + 24);
  std::vector<char const*>::reserve((void **)(a1 + 24), a3 + 1);
  if (a3)
  {
    v7 = (_QWORD *)(a1 + 40);
    v8 = *(_QWORD **)(a1 + 32);
    do
    {
      if ((int)a3 >= asc_1C231416F[(unint64_t)*a2 >> 4])
        v9 = asc_1C231416F[(unint64_t)*a2 >> 4];
      else
        v9 = a3;
      if ((unint64_t)v8 >= *v7)
      {
        v10 = ((char *)v8 - *v6) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          goto LABEL_76;
        v11 = *v7 - (_QWORD)*v6;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 40, v13);
        else
          v14 = 0;
        v15 = &v14[8 * v10];
        *(_QWORD *)v15 = a2;
        v8 = v15 + 8;
        v17 = *(char **)(a1 + 24);
        v16 = *(char **)(a1 + 32);
        if (v16 != v17)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *((_QWORD *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          v16 = *v6;
        }
        *(_QWORD *)(a1 + 24) = v15;
        *(_QWORD *)(a1 + 32) = v8;
        *(_QWORD *)(a1 + 40) = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v8++ = a2;
      }
      *(_QWORD *)(a1 + 32) = v8;
      a2 += v9;
      a3 -= v9;
    }
    while (a3);
  }
  else
  {
    v8 = *(_QWORD **)(a1 + 32);
  }
  v19 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v8 >= v19)
  {
    v21 = ((char *)v8 - *v6) >> 3;
    if ((unint64_t)(v21 + 1) >> 61)
LABEL_76:
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v22 = v19 - (_QWORD)*v6;
    v23 = v22 >> 2;
    if (v22 >> 2 <= (unint64_t)(v21 + 1))
      v23 = v21 + 1;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v23;
    if (v24)
      v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 40, v24);
    else
      v25 = 0;
    v26 = &v25[8 * v21];
    v27 = &v25[8 * v24];
    *(_QWORD *)v26 = a2;
    v20 = v26 + 8;
    v29 = *(char **)(a1 + 24);
    v28 = *(char **)(a1 + 32);
    if (v28 != v29)
    {
      do
      {
        v30 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *((_QWORD *)v26 - 1) = v30;
        v26 -= 8;
      }
      while (v28 != v29);
      v28 = *v6;
    }
    *(_QWORD *)(a1 + 24) = v26;
    *(_QWORD *)(a1 + 32) = v20;
    *(_QWORD *)(a1 + 40) = v27;
    if (v28)
      operator delete(v28);
  }
  else
  {
    *v8 = a2;
    v20 = v8 + 1;
  }
  *(_QWORD *)(a1 + 32) = v20;
  v31 = (((unint64_t)v20 - *(_QWORD *)(a1 + 24)) >> 3) - 1;
  v32 = v31 & ~(v31 >> 31);
  std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::resize((uint64_t *)(a1 + 48), v32 + 1);
  std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::resize((uint64_t *)(a1 + 72), v32 + 1);
  v33 = 0;
  do
  {
    std::vector<char const*>::reserve((void **)(*(_QWORD *)(a1 + 48) + v33), 0x10uLL);
    std::vector<char const*>::reserve((void **)(*(_QWORD *)(a1 + 72) + v33), 0x10uLL);
    v33 += 24;
  }
  while (24 * v32 + 24 != v33);
  v34 = (_DWORD *)sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Allocate((_QWORD *)(a1 + 96));
  v34[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v34[7] = -1;
  v34[4] = 0;
  v35 = *(void ***)(a1 + 72);
  v36 = v35[1];
  v37 = (unint64_t)v35[2];
  if ((unint64_t)v36 >= v37)
  {
    v39 = ((char *)v36 - (_BYTE *)*v35) >> 3;
    if ((unint64_t)(v39 + 1) >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v40 = v37 - (_QWORD)*v35;
    v41 = v40 >> 2;
    if (v40 >> 2 <= (unint64_t)(v39 + 1))
      v41 = v39 + 1;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
      v42 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v42 = v41;
    if (v42)
      v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v35 + 2), v42);
    else
      v43 = 0;
    v44 = &v43[8 * v39];
    v45 = &v43[8 * v42];
    *(_QWORD *)v44 = v34;
    v38 = v44 + 8;
    v47 = (char *)*v35;
    v46 = (char *)v35[1];
    if (v46 != *v35)
    {
      do
      {
        v48 = *((_QWORD *)v46 - 1);
        v46 -= 8;
        *((_QWORD *)v44 - 1) = v48;
        v44 -= 8;
      }
      while (v46 != v47);
      v46 = (char *)*v35;
    }
    *v35 = v44;
    v35[1] = v38;
    v35[2] = v45;
    if (v46)
      operator delete(v46);
  }
  else
  {
    *v36 = v34;
    v38 = v36 + 1;
  }
  v35[1] = v38;
  v49 = (_DWORD *)sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Allocate((_QWORD *)(a1 + 96));
  v50 = v49;
  v49[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v49[7] = -1;
  v49[4] = v32;
  v51 = (void **)(*(_QWORD *)(a1 + 48) + 24 * v32);
  v52 = v51 + 1;
  v53 = v51[1];
  v54 = (unint64_t)v51[2];
  if ((unint64_t)v53 >= v54)
  {
    v56 = ((char *)v53 - (_BYTE *)*v51) >> 3;
    if ((unint64_t)(v56 + 1) >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v57 = v54 - (_QWORD)*v51;
    v58 = v57 >> 2;
    if (v57 >> 2 <= (unint64_t)(v56 + 1))
      v58 = v56 + 1;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
      v59 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v59 = v58;
    if (v59)
      v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v51 + 2), v59);
    else
      v60 = 0;
    v61 = &v60[8 * v56];
    v62 = &v60[8 * v59];
    *(_QWORD *)v61 = v50;
    v55 = v61 + 8;
    v63 = (char *)*v52;
    v64 = (char *)*v51;
    if (*v52 != *v51)
    {
      do
      {
        v65 = *((_QWORD *)v63 - 1);
        v63 -= 8;
        *((_QWORD *)v61 - 1) = v65;
        v61 -= 8;
      }
      while (v63 != v64);
      v63 = (char *)*v51;
    }
    *v51 = v61;
    *v52 = v55;
    v51[2] = v62;
    if (v63)
      operator delete(v63);
  }
  else
  {
    *v53 = v49;
    v55 = v53 + 1;
  }
  *v52 = v55;
}

void std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t sentencepiece::unigram::Lattice::Insert(sentencepiece::unigram::Lattice *this, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  void **v13;
  uint64_t *v14;
  unint64_t v15;
  char **v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void **v28;
  void **v29;
  uint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v6 = sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Allocate((_QWORD *)this + 12);
  v7 = v6;
  v8 = *((_DWORD *)this + 32) + *((_DWORD *)this + 34) * *((_DWORD *)this + 36) - 1;
  *(_DWORD *)(v6 + 20) = a3;
  *(_DWORD *)(v6 + 24) = v8;
  *(_DWORD *)(v6 + 16) = a2;
  v9 = *((_QWORD *)this + 3);
  v10 = *(_QWORD *)(v9 + 8 * (a3 + a2));
  v11 = *(_QWORD *)(v9 + 8 * a2);
  *(_QWORD *)v6 = v11;
  *(_QWORD *)(v6 + 8) = (int)v10 - (int)v11;
  v12 = (uint64_t **)(*((_QWORD *)this + 6) + 24 * a2);
  v13 = (void **)(v12 + 1);
  v14 = v12[1];
  v16 = (char **)(v12 + 2);
  v15 = (unint64_t)v12[2];
  if ((unint64_t)v14 >= v15)
  {
    v18 = v14 - *v12;
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v19 = v15 - (_QWORD)*v12;
    v20 = v19 >> 2;
    if (v19 >> 2 <= (unint64_t)(v18 + 1))
      v20 = v18 + 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    if (v21)
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v16, v21);
    else
      v22 = 0;
    v23 = (uint64_t *)&v22[8 * v18];
    v24 = &v22[8 * v21];
    *v23 = v7;
    v17 = v23 + 1;
    v25 = (char *)*v13;
    v26 = (char *)*v12;
    if (*v13 != *v12)
    {
      do
      {
        v27 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *--v23 = v27;
      }
      while (v25 != v26);
      v25 = (char *)*v12;
    }
    *v12 = v23;
    *v13 = v17;
    *v16 = v24;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v14 = v6;
    v17 = v14 + 1;
  }
  *v13 = v17;
  v28 = (void **)(*((_QWORD *)this + 9) + 24 * (*(_DWORD *)(v7 + 20) + a2));
  v29 = v28 + 1;
  v30 = (uint64_t *)v28[1];
  v31 = (unint64_t)v28[2];
  if ((unint64_t)v30 >= v31)
  {
    v33 = ((char *)v30 - (_BYTE *)*v28) >> 3;
    if ((unint64_t)(v33 + 1) >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v34 = v31 - (_QWORD)*v28;
    v35 = v34 >> 2;
    if (v34 >> 2 <= (unint64_t)(v33 + 1))
      v35 = v33 + 1;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v35;
    if (v36)
      v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v28 + 2), v36);
    else
      v37 = 0;
    v38 = (uint64_t *)&v37[8 * v33];
    v39 = &v37[8 * v36];
    *v38 = v7;
    v32 = v38 + 1;
    v40 = (char *)*v29;
    v41 = (char *)*v28;
    if (*v29 != *v28)
    {
      do
      {
        v42 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        *--v38 = v42;
      }
      while (v40 != v41);
      v40 = (char *)*v28;
    }
    *v28 = v38;
    *v29 = v32;
    v28[2] = v39;
    if (v40)
      operator delete(v40);
  }
  else
  {
    *v30 = v7;
    v32 = v30 + 1;
  }
  *v29 = v32;
  return v7;
}

void sentencepiece::unigram::Lattice::Viterbi(sentencepiece::unigram::Lattice *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void *v33;
  char *v34;
  char *v36;
  uint64_t v37;
  BOOL v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  void *__p;
  char *v46;
  char *v47;

  v3 = 0;
  v4 = ((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3) - 1;
  v5 = v4 & ~(v4 >> 31);
  v6 = *((_QWORD *)this + 6);
  while (1)
  {
    v7 = (uint64_t **)(v6 + 24 * v3);
    v8 = *v7;
    v9 = v7[1];
    if (v8 != v9)
      break;
LABEL_14:
    if (++v3 == v5 + 1)
    {
      __p = 0;
      v46 = 0;
      v47 = 0;
      v21 = **(_QWORD **)(v6 + 24 * v5);
      v22 = *(_DWORD *)(v21 + 36);
      v23 = *(_QWORD *)(v21 + 40);
      if (*(_QWORD *)(v23 + 40))
      {
        v24 = 0;
        do
        {
          if (v24 >= v47)
          {
            v25 = (v24 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v25 + 1) >> 61)
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            v26 = (v47 - (_BYTE *)__p) >> 2;
            if (v26 <= v25 + 1)
              v26 = v25 + 1;
            if ((unint64_t)(v47 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v27 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v27 = v26;
            if (v27)
              v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v47, v27);
            else
              v28 = 0;
            v29 = &v28[8 * v25];
            *(_QWORD *)v29 = v23;
            v24 = v29 + 8;
            v31 = (char *)__p;
            v30 = v46;
            if (v46 != __p)
            {
              do
              {
                v32 = *((_QWORD *)v30 - 1);
                v30 -= 8;
                *((_QWORD *)v29 - 1) = v32;
                v29 -= 8;
              }
              while (v30 != v31);
              v30 = (char *)__p;
            }
            __p = v29;
            v46 = v24;
            v47 = &v28[8 * v27];
            if (v30)
              operator delete(v30);
          }
          else
          {
            *(_QWORD *)v24 = v23;
            v24 += 8;
          }
          v46 = v24;
          v23 = *(_QWORD *)(v23 + 40);
        }
        while (*(_QWORD *)(v23 + 40));
        v33 = __p;
        v34 = v24 - 8;
        if (__p != v24 && v34 > __p)
        {
          v36 = (char *)__p + 8;
          do
          {
            v37 = *((_QWORD *)v36 - 1);
            *((_QWORD *)v36 - 1) = *(_QWORD *)v34;
            *(_QWORD *)v34 = v37;
            v34 -= 8;
            v38 = v36 >= v34;
            v36 += 8;
          }
          while (!v38);
          v33 = __p;
          v24 = v46;
        }
      }
      else
      {
        v24 = 0;
        v33 = 0;
      }
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      std::vector<sentencepiece::unigram::Lattice::Node *>::__init_with_size[abi:ne180100]<sentencepiece::unigram::Lattice::Node **,sentencepiece::unigram::Lattice::Node **>((_QWORD *)a2, v33, (uint64_t)v24, (v24 - (_BYTE *)v33) >> 3);
      *(_DWORD *)(a2 + 24) = v22;
      if (__p)
      {
        v46 = (char *)__p;
        operator delete(__p);
      }
      return;
    }
  }
  v10 = (uint64_t **)(*((_QWORD *)this + 9) + 24 * v3);
  v11 = *v10;
  v12 = v10[1];
  while (1)
  {
    v13 = *v8;
    *(_QWORD *)(*v8 + 40) = 0;
    if (v11 == v12)
      break;
    v14 = 0;
    v15 = 0.0;
    v16 = v11;
    do
    {
      v18 = *v16++;
      v17 = v18;
      v19 = *(float *)(v18 + 36) + *(float *)(v13 + 32);
      if (v19 > v15 || v14 == 0)
      {
        v15 = v19;
        v14 = v17;
      }
    }
    while (v16 != v12);
    if (!v14)
      break;
    *(_QWORD *)(v13 + 40) = v14;
    *(float *)(v13 + 36) = v15;
    if (++v8 == v9)
      goto LABEL_14;
  }
  if ((int)sentencepiece::logging::GetMinLogLevel(this) <= 2)
  {
    LOBYTE(__p) = 0;
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"(", 1);
    v40 = (_QWORD *)std::ostream::operator<<();
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") ", 2);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"LOG(", 4);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"ERROR", 5);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Failed to find the best path in Viterbi.", 40);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&__p);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = 0;
}

void sub_1C21D6774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Lattice::ForwardAlgorithm(sentencepiece::unigram::Lattice *this@<X0>, float a2@<S0>, uint64_t *a3@<X8>)
{
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  _QWORD *v20;
  float v21;
  float v22;
  double v23;
  long double v24;
  uint64_t *v25;
  sentencepiece::unigram::Lattice *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v6 = ((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3) - 1;
  v7 = v6 & ~(v6 >> 31);
  v8 = *((_QWORD *)this + 16) + *((_QWORD *)this + 17) * *((_QWORD *)this + 18);
  v29 = 0;
  v25 = a3;
  std::vector<float>::vector(a3, v8, &v29);
  v9 = 0;
  v28 = *((_QWORD *)this + 6);
  v26 = this;
  v27 = (v7 + 1);
  do
  {
    v10 = (uint64_t *)(v28 + 24 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 != v12)
    {
      v13 = *((_QWORD *)v26 + 9) + 24 * v9;
      v15 = *(_QWORD **)v13;
      v14 = *(_QWORD **)(v13 + 8);
      v16 = *v25;
      do
      {
        if (v15 != v14)
        {
          v17 = *(unsigned int *)(*(_QWORD *)v11 + 24);
          v18 = *v15;
          v19 = *(float *)(v16 + 4 * v17);
          v20 = v15;
          do
          {
            v21 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a2 * *(float *)(*v20 + 32));
            if (*v20 != v18)
            {
              if (v21 >= v19)
                v22 = v19;
              else
                v22 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a2 * *(float *)(*v20 + 32));
              if (v19 >= v21)
                v21 = v19;
              if (v21 <= (float)(v22 + 50.0))
              {
                v23 = v21;
                v24 = exp((float)(v22 - v21));
                v21 = log(v24 + 1.0) + v23;
              }
            }
            *(float *)(v16 + 4 * v17) = v21;
            ++v20;
            v19 = v21;
          }
          while (v20 != v14);
        }
        v11 += 8;
      }
      while (v11 != v12);
    }
    ++v9;
  }
  while (v9 != v27);
}

float sentencepiece::unigram::Lattice::CalculateEntropy(sentencepiece::unigram::Lattice *this, float a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  float *v14;
  float *v15;
  uint64_t v16;
  float v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  void *v22;
  float v23;
  unsigned int v25;
  sentencepiece::unigram::Lattice *v26;
  uint64_t v27;
  void *__p[3];
  void *v29[3];

  v5 = *((_QWORD *)this + 3);
  v4 = *((_QWORD *)this + 4);
  v6 = *((_QWORD *)this + 16) + *((_QWORD *)this + 17) * *((_QWORD *)this + 18);
  LODWORD(__p[0]) = 0;
  std::vector<float>::vector(v29, v6, __p);
  sentencepiece::unigram::Lattice::ForwardAlgorithm(this, a2, (uint64_t *)__p);
  v7 = 0;
  v27 = *((_QWORD *)this + 6);
  v25 = (((unint64_t)(v4 - v5) >> 3) - 1) & ~((int)(((unint64_t)(v4 - v5) >> 3) - 1) >> 31);
  v26 = this;
  do
  {
    v8 = (uint64_t *)(v27 + 24 * v7);
    v9 = *v8;
    v10 = v8[1];
    if (*v8 != v10)
    {
      v11 = (uint64_t **)(*((_QWORD *)v26 + 9) + 24 * v7);
      v12 = *v11;
      v13 = v11[1];
      v14 = (float *)__p[0];
      v15 = (float *)v29[0];
      do
      {
        if (v12 != v13)
        {
          v16 = *(unsigned int *)(*(_QWORD *)v9 + 24);
          v17 = v15[v16];
          v18 = v12;
          do
          {
            v19 = *v18++;
            v20 = *(unsigned int *)(v19 + 24);
            v21 = (float)(v14[v20] + (float)(a2 * *(float *)(v19 + 32))) - v14[v16];
            v17 = v17 + (float)(expf(v21) * (float)(v21 + v15[v20]));
            v15[v16] = v17;
          }
          while (v18 != v13);
        }
        v9 += 8;
      }
      while (v9 != v10);
    }
    ++v7;
  }
  while (v7 != v25 + 1);
  v22 = v29[0];
  v23 = *((float *)v29[0] + *(unsigned int *)(**(_QWORD **)(v27 + 24 * v25) + 24));
  if (!__p[0] || (__p[1] = __p[0], operator delete(__p[0]), (v22 = v29[0]) != 0))
  {
    v29[1] = v22;
    operator delete(v22);
  }
  return -v23;
}

void sub_1C21D6ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Lattice::NBest(sentencepiece::unigram::Lattice *this@<X0>, float a2@<S0>, uint64_t a3@<X1>, int a4@<W2>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  sentencepiece::random *v18;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *RandomGenerator;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v20;
  float v21;
  float v22;
  int v23;
  int v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD **v34;
  _QWORD *i;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  sentencepiece::random *MinLogLevel;
  int v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  unint64_t v57;
  float v58;
  float v59;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v60;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v61;
  float v62;
  float v63;
  int v64;
  double *v65;
  float v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  void *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  int v96;
  unint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint8x8_t v103;
  unint64_t v104;
  _QWORD *v105;
  _QWORD *j;
  unint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint8x8_t v110;
  _QWORD *v111;
  _QWORD *k;
  unint64_t v113;
  _QWORD *v114;
  float v115;
  _BOOL4 v116;
  unint64_t v117;
  unint64_t v118;
  int8x8_t prime;
  void *v120;
  void *v121;
  uint64_t v122;
  _QWORD **v123;
  unint64_t v124;
  uint8x8_t v125;
  unint64_t v126;
  uint8x8_t v127;
  uint64_t v128;
  _QWORD *m;
  unint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  void *v147;
  int v148;
  char v149;
  int v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v155;
  void *v156[2];
  __int128 v157;
  float v158;
  _BYTE v159[48];
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  void *v163;
  _BYTE *v164;
  void *v165[3];
  void *v166[3];
  void *v167[4];
  void *__p[3];
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t (**v173)();
  __int128 v174;
  _QWORD v175[3];
  uint64_t v176;
  uint64_t v177;

  v177 = *MEMORY[0x1E0C80C00];
  if (a3 == 1)
  {
    if ((a4 & 1) == 0)
    {
      sentencepiece::unigram::Lattice::Viterbi(this, (uint64_t)&v173);
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      *(_QWORD *)v159 = a5;
      v159[8] = 0;
      v147 = operator new(0x20uLL);
      *a5 = (uint64_t)v147;
      a5[1] = (uint64_t)v147;
      a5[2] = (uint64_t)v147 + 32;
      a5[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> const*,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> const*,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>((uint64_t)(a5 + 2), (uint64_t)&v173, (uint64_t)&v175[1], (uint64_t)v147);
      if (v173)
      {
        *(_QWORD *)&v174 = v173;
        operator delete(v173);
      }
      return;
    }
  }
  else if (!a3)
  {
    if ((int)sentencepiece::logging::GetMinLogLevel(this) <= 1)
    {
      LOBYTE(v173) = 0;
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"(", 1);
      v10 = (_QWORD *)std::ostream::operator<<();
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"LOG(", 4);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"WARNING", 7);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)") ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"nbest_size >= 1. Returns empty result.", 38);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v173);
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  v174 = 0u;
  memset(v175, 0, sizeof(v175));
  v173 = &off_1E7BE9240;
  v176 = 512;
  v170 = 0uLL;
  v171 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  v169 = v15;
  v16 = ((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3) - 1;
  *(_QWORD *)v15 = **(_QWORD **)(*((_QWORD *)this + 6) + 24 * (v16 & ~(v16 >> 31)));
  *(_QWORD *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 20) = 0;
  v17 = *((_QWORD *)this + 16) + *((_QWORD *)this + 17) * *((_QWORD *)this + 18);
  *(_DWORD *)v159 = 0;
  std::vector<float>::vector(__p, v17, v159);
  if (a4)
  {
    sentencepiece::unigram::Lattice::ForwardAlgorithm(this, a2, (uint64_t *)v159);
    v18 = (sentencepiece::random *)__p[0];
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = *(_OWORD *)v159;
    __p[2] = *(void **)&v159[16];
    RandomGenerator = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)sentencepiece::random::GetRandomGenerator(v18);
    v20 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(RandomGenerator);
    v21 = logf((float)((float)((float)v20 * 2.3283e-10) + 0.0) + 0.0000001);
    v22 = -logf(-v21);
  }
  else
  {
    sentencepiece::unigram::Lattice::Viterbi(this, (uint64_t)v167);
    if (v167[0])
    {
      v167[1] = v167[0];
      operator delete(v167[0]);
    }
    v22 = *(float *)(*(_QWORD *)v15 + 36);
  }
  *(float *)(v15 + 16) = v22;
  v148 = 0;
  v149 = 0;
  if (10 * (int)a3 >= 512)
    v23 = 512;
  else
    v23 = 10 * a3;
  if (v23 <= 1)
    v24 = 1;
  else
    v24 = v23;
  v150 = v24;
  while (1)
  {
    v25 = v170;
    if ((_QWORD)v170 == *((_QWORD *)&v170 + 1))
      break;
    v26 = *(uint64_t **)v170;
    if ((uint64_t)(*((_QWORD *)&v170 + 1) - v170) >= 9)
    {
      v27 = 0;
      v28 = (uint64_t)(*((_QWORD *)&v170 + 1) - v170) >> 3;
      v29 = (_QWORD *)v170;
      do
      {
        v30 = v29;
        v29 += v27 + 1;
        v31 = 2 * v27;
        v27 = (2 * v27) | 1;
        v32 = v31 + 2;
        if (v32 < v28 && *(float *)(*v29 + 16) < *(float *)(v29[1] + 16))
        {
          ++v29;
          v27 = v32;
        }
        *v30 = *v29;
      }
      while (v27 <= (uint64_t)((unint64_t)(v28 - 2) >> 1));
      if (v29 == (_QWORD *)(*((_QWORD *)&v25 + 1) - 8))
      {
        *v29 = v26;
      }
      else
      {
        *v29 = **((_QWORD **)&v25 + 1);
        **((_QWORD **)&v25 + 1) = v26;
      }
    }
    *((_QWORD *)&v170 + 1) -= 8;
    v33 = *v26;
    v34 = (_QWORD **)*((_QWORD *)this + 9);
    if (*v26 == **v34)
    {
      std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::resize(a5, ((a5[1] - *a5) >> 5) + 1);
      for (i = (_QWORD *)v26[1]; i[1]; i = (_QWORD *)i[1])
      {
        v36 = a5[1];
        v37 = *(_QWORD **)(v36 - 24);
        v38 = *(_QWORD *)(v36 - 16);
        if ((unint64_t)v37 >= v38)
        {
          v40 = *(_QWORD *)(v36 - 32);
          v41 = ((uint64_t)v37 - v40) >> 3;
          if ((unint64_t)(v41 + 1) >> 61)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v42 = v38 - v40;
          v43 = v42 >> 2;
          if (v42 >> 2 <= (unint64_t)(v41 + 1))
            v43 = v41 + 1;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
            v44 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          if (v44)
            v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v36 - 16, v44);
          else
            v45 = 0;
          v46 = &v45[8 * v41];
          *(_QWORD *)v46 = *i;
          v39 = v46 + 8;
          v48 = *(char **)(v36 - 32);
          v47 = *(char **)(v36 - 24);
          if (v47 != v48)
          {
            do
            {
              v49 = *((_QWORD *)v47 - 1);
              v47 -= 8;
              *((_QWORD *)v46 - 1) = v49;
              v46 -= 8;
            }
            while (v47 != v48);
            v47 = *(char **)(v36 - 32);
          }
          *(_QWORD *)(v36 - 32) = v46;
          *(_QWORD *)(v36 - 24) = v39;
          *(_QWORD *)(v36 - 16) = &v45[8 * v44];
          if (v47)
            operator delete(v47);
        }
        else
        {
          *v37 = *i;
          v39 = v37 + 1;
        }
        *(_QWORD *)(v36 - 24) = v39;
      }
      v50 = a5[1];
      *(_DWORD *)(v50 - 8) = *((_DWORD *)v26 + 4);
      if (a3 == (v50 - *a5) >> 5)
        break;
    }
    else
    {
      v51 = (int)(v34[3 * *(int *)(v33 + 16) + 1] - v34[3 * *(int *)(v33 + 16)]);
      *(_DWORD *)v159 = 0;
      std::vector<float>::vector(v166, v51, v159);
      *(_DWORD *)v159 = 0;
      std::vector<float>::vector(v165, v51, v159);
      *(_QWORD *)v159 = 0;
      MinLogLevel = (sentencepiece::random *)std::vector<double>::vector(&v163, v51, v159);
      v53 = *(_DWORD *)(v33 + 16);
      v54 = *((_QWORD *)this + 9);
      if (a4)
      {
        v55 = *(_QWORD *)(v54 + 24 * v53);
        v56 = -100000000.0;
        if (*(_QWORD *)(v54 + 24 * v53 + 8) != v55)
        {
          v57 = 0;
          v58 = *((float *)__p[0] + *(unsigned int *)(v33 + 24));
          v56 = -100000000.0;
          do
          {
            v59 = (float)((float)(*((float *)v26 + 5)
                                + *((float *)__p[0] + *(unsigned int *)(*(_QWORD *)(v55 + 8 * v57) + 24)))
                        + (float)(a2 * *(float *)(*(_QWORD *)(v55 + 8 * v57) + 32)))
                - v58;
            *((float *)v166[0] + v57) = v59;
            v60 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)sentencepiece::random::GetRandomGenerator(MinLogLevel);
            v61 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v60);
            v62 = logf((float)((float)((float)v61 * 2.3283e-10) + 0.0) + 0.0000001);
            v63 = v59 - logf(-v62);
            *((float *)v165[0] + v57) = v63;
            if (v63 > v56)
              v56 = v63;
            ++v57;
            v64 = *(_DWORD *)(v33 + 16);
            v54 = *((_QWORD *)this + 9);
            v55 = *(_QWORD *)(v54 + 24 * v64);
          }
          while (v57 < (*(_QWORD *)(v54 + 24 * v64 + 8) - v55) >> 3);
          v53 = *(_DWORD *)(v33 + 16);
        }
        v65 = (double *)v163;
        if (v164 != v163)
        {
          v66 = *((float *)v26 + 4);
          v67 = (float *)v165[0];
          if ((unint64_t)((v164 - (_BYTE *)v163) >> 3) <= 1)
            v5 = 1;
          else
            v5 = (v164 - (_BYTE *)v163) >> 3;
          do
          {
            v68 = *v67++;
            v69 = expf(v68 - v56);
            v70 = (float)(v66 - v68) + log1pf(-v69);
            v71 = v66 - fmaxf(v70, 0.0);
            v72 = expf(-fabsf(v70));
            *v65++ = (float)(v71 - log1pf(v72));
            --v5;
          }
          while (v5);
        }
      }
      v73 = *(_QWORD *)(v54 + 24 * v53);
      if (*(_QWORD *)(v54 + 24 * v53 + 8) != v73)
      {
        v74 = 0;
        do
        {
          v75 = *(_QWORD *)(v73 + 8 * v74);
          *(_QWORD *)v159 = v76;
          *(_QWORD *)v76 = v75;
          if (a4)
          {
            *(_DWORD *)(v76 + 20) = *((_DWORD *)v166[0] + v74);
            v77 = *((double *)v163 + v74);
          }
          else
          {
            *(float *)(v76 + 20) = *(float *)(v75 + 32) + *((float *)v26 + 5);
            v77 = *(float *)(v75 + 36) + *((float *)v26 + 5);
          }
          *(float *)(v76 + 16) = v77;
          *(_QWORD *)(v76 + 8) = v26;
          ++v74;
          v73 = *(_QWORD *)(*((_QWORD *)this + 9) + 24 * *(int *)(v33 + 16));
        }
        while (v74 < (*(_QWORD *)(*((_QWORD *)this + 9) + 24 * *(int *)(v33 + 16) + 8) - v73) >> 3);
      }
      if (!(((unint64_t)(v175[1] + v175[2] * v176) < 0x3B9ACA00) | v149 & 1))
      {
        MinLogLevel = (sentencepiece::random *)sentencepiece::logging::GetMinLogLevel(MinLogLevel);
        if ((int)MinLogLevel <= 1)
        {
          v159[0] = 0;
          v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"(", 1);
          v79 = (_QWORD *)std::ostream::operator<<();
          v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)") ", 2);
          v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"LOG(", 4);
          v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"WARNING", 7);
          v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)") ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"Allocator size exceeds ", 23);
          v84 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)" with an example of length ", 27);
          std::ostream::operator<<();
          sentencepiece::error::Die::~Die((sentencepiece::error::Die *)v159);
        }
        v149 = 1;
      }
      v85 = *((_QWORD *)&v170 + 1);
      v86 = (void *)v170;
      if (*((_QWORD *)&v170 + 1) - (_QWORD)v170 >= 0x13879uLL)
      {
        v161 = 0uLL;
        v162 = 0;
        memset(&v159[8], 0, 40);
        *(_QWORD *)v159 = &off_1E7BE9240;
        v160 = 512;
        *(_OWORD *)v156 = 0u;
        v157 = 0u;
        v158 = 1.0;
        ++v148;
        if ((int)sentencepiece::logging::GetMinLogLevel(MinLogLevel) <= 1)
        {
          LOBYTE(v172) = 0;
          v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"(", 1);
          v88 = (_QWORD *)std::ostream::operator<<();
          v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)") ", 2);
          v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"LOG(", 4);
          v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"WARNING", 7);
          v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)") ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"Too big agenda size ", 20);
          v93 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)". Shrinking (round ", 19);
          v94 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)") down to ", 10);
          v95 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)".", 1);
          sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v172);
        }
        if (10 * (int)a3 >= 1)
        {
          v96 = 0;
          while (1)
          {
            v151 = (_QWORD *)v170;
            v152 = v85;
            v97 = *(_QWORD *)v170;
            v155 = 0;
            v172 = 0;
            if (!v97)
              goto LABEL_181;
            v98 = &v172;
            v99 = (unint64_t)v156[1];
            do
            {
              v100 = 0x9DDFEA08EB382D69 * (((8 * v97) + 8) ^ HIDWORD(v97));
              v101 = 0x9DDFEA08EB382D69 * (HIDWORD(v97) ^ (v100 >> 47) ^ v100);
              v102 = 0x9DDFEA08EB382D69 * (v101 ^ (v101 >> 47));
              if (v99)
              {
                v103 = (uint8x8_t)vcnt_s8((int8x8_t)v99);
                v103.i16[0] = vaddlv_u8(v103);
                if (v103.u32[0] > 1uLL)
                {
                  v104 = 0x9DDFEA08EB382D69 * (v101 ^ (v101 >> 47));
                  if (v102 >= v99)
                    v104 = v102 % v99;
                }
                else
                {
                  v104 = v102 & (v99 - 1);
                }
                v105 = (_QWORD *)*((_QWORD *)v156[0] + v104);
                if (v105)
                {
                  for (j = (_QWORD *)*v105; j; j = (_QWORD *)*j)
                  {
                    v107 = j[1];
                    if (v107 == v102)
                    {
                      if (j[2] == v97)
                      {
                        *v98 = j[3];
                        goto LABEL_181;
                      }
                    }
                    else
                    {
                      if (v103.u32[0] > 1uLL)
                      {
                        if (v107 >= v99)
                          v107 %= v99;
                      }
                      else
                      {
                        v107 &= v99 - 1;
                      }
                      if (v107 != v104)
                        break;
                    }
                  }
                }
              }
              v109 = *(_OWORD *)v97;
              *(_QWORD *)(v108 + 16) = *(_QWORD *)(v97 + 16);
              *(_OWORD *)v108 = v109;
              *v98 = v108;
              v99 = (unint64_t)v156[1];
              if (v156[1])
              {
                v110 = (uint8x8_t)vcnt_s8((int8x8_t)v156[1]);
                v110.i16[0] = vaddlv_u8(v110);
                if (v110.u32[0] > 1uLL)
                {
                  v5 = v102;
                  if ((void *)v102 >= v156[1])
                    v5 = v102 % (unint64_t)v156[1];
                }
                else
                {
                  v5 = ((unint64_t)v156[1] - 1) & v102;
                }
                v111 = (_QWORD *)*((_QWORD *)v156[0] + v5);
                if (v111)
                {
                  for (k = (_QWORD *)*v111; k; k = (_QWORD *)*k)
                  {
                    v113 = k[1];
                    if (v113 == v102)
                    {
                      if (k[2] == v97)
                        goto LABEL_170;
                    }
                    else
                    {
                      if (v110.u32[0] > 1uLL)
                      {
                        if ((void *)v113 >= v156[1])
                          v113 %= (unint64_t)v156[1];
                      }
                      else
                      {
                        v113 &= (unint64_t)v156[1] - 1;
                      }
                      if (v113 != v5)
                        break;
                    }
                  }
                }
              }
              v114 = operator new(0x20uLL);
              *v114 = 0;
              v114[1] = v102;
              v114[2] = v97;
              v114[3] = v108;
              v115 = (float)(unint64_t)(*((_QWORD *)&v157 + 1) + 1);
              if (!v99 || (float)(v158 * (float)v99) < v115)
              {
                v116 = (v99 & (v99 - 1)) == 0;
                if (v99 < 3)
                  v116 = 0;
                v117 = (2 * v99) | !v116;
                v118 = vcvtps_u32_f32(v115 / v158);
                if (v117 <= v118)
                  prime = (int8x8_t)v118;
                else
                  prime = (int8x8_t)v117;
                if (*(_QWORD *)&prime == 1)
                {
                  prime = (int8x8_t)2;
                }
                else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
                {
                  prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
                  v99 = (unint64_t)v156[1];
                }
                if (*(_QWORD *)&prime <= v99)
                {
                  if (*(_QWORD *)&prime < v99)
                  {
                    v126 = vcvtps_u32_f32((float)*((unint64_t *)&v157 + 1) / v158);
                    if (v99 < 3
                      || (v127 = (uint8x8_t)vcnt_s8((int8x8_t)v99), v127.i16[0] = vaddlv_u8(v127), v127.u32[0] > 1uLL))
                    {
                      v126 = std::__next_prime(v126);
                    }
                    else
                    {
                      v128 = 1 << -(char)__clz(v126 - 1);
                      if (v126 >= 2)
                        v126 = v128;
                    }
                    if (*(_QWORD *)&prime <= v126)
                      prime = (int8x8_t)v126;
                    if (*(_QWORD *)&prime >= v99)
                    {
                      v99 = (unint64_t)v156[1];
                    }
                    else
                    {
                      if (prime)
                        goto LABEL_126;
                      v134 = v156[0];
                      v156[0] = 0;
                      if (v134)
                        operator delete(v134);
                      v99 = 0;
                      v156[1] = 0;
                    }
                  }
                }
                else
                {
LABEL_126:
                  if (*(_QWORD *)&prime >> 61)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v120 = operator new(8 * *(_QWORD *)&prime);
                  v121 = v156[0];
                  v156[0] = v120;
                  if (v121)
                    operator delete(v121);
                  v122 = 0;
                  v156[1] = (void *)prime;
                  do
                    *((_QWORD *)v156[0] + v122++) = 0;
                  while (*(_QWORD *)&prime != v122);
                  v123 = (_QWORD **)v157;
                  if ((_QWORD)v157)
                  {
                    v124 = *(_QWORD *)(v157 + 8);
                    v125 = (uint8x8_t)vcnt_s8(prime);
                    v125.i16[0] = vaddlv_u8(v125);
                    if (v125.u32[0] > 1uLL)
                    {
                      if (v124 >= *(_QWORD *)&prime)
                        v124 %= *(_QWORD *)&prime;
                    }
                    else
                    {
                      v124 &= *(_QWORD *)&prime - 1;
                    }
                    *((_QWORD *)v156[0] + v124) = &v157;
                    for (m = *v123; m; v124 = v130)
                    {
                      v130 = m[1];
                      if (v125.u32[0] > 1uLL)
                      {
                        if (v130 >= *(_QWORD *)&prime)
                          v130 %= *(_QWORD *)&prime;
                      }
                      else
                      {
                        v130 &= *(_QWORD *)&prime - 1;
                      }
                      if (v130 != v124)
                      {
                        if (!*((_QWORD *)v156[0] + v130))
                        {
                          *((_QWORD *)v156[0] + v130) = v123;
                          goto LABEL_151;
                        }
                        *v123 = (_QWORD *)*m;
                        *m = **((_QWORD **)v156[0] + v130);
                        **((_QWORD **)v156[0] + v130) = m;
                        m = v123;
                      }
                      v130 = v124;
LABEL_151:
                      v123 = (_QWORD **)m;
                      m = (_QWORD *)*m;
                    }
                  }
                  v99 = (unint64_t)prime;
                }
                if ((v99 & (v99 - 1)) != 0)
                {
                  if (v102 >= v99)
                    v5 = v102 % v99;
                  else
                    v5 = v102;
                }
                else
                {
                  v5 = (v99 - 1) & v102;
                }
              }
              v131 = v156[0];
              v132 = (_QWORD *)*((_QWORD *)v156[0] + v5);
              if (v132)
              {
                *v114 = *v132;
LABEL_168:
                *v132 = v114;
                goto LABEL_169;
              }
              *v114 = v157;
              *(_QWORD *)&v157 = v114;
              v131[v5] = &v157;
              if (*v114)
              {
                v133 = *(_QWORD *)(*v114 + 8);
                if ((v99 & (v99 - 1)) != 0)
                {
                  if (v133 >= v99)
                    v133 %= v99;
                }
                else
                {
                  v133 &= v99 - 1;
                }
                v132 = (char *)v156[0] + 8 * v133;
                goto LABEL_168;
              }
LABEL_169:
              ++*((_QWORD *)&v157 + 1);
LABEL_170:
              v97 = *(_QWORD *)(v97 + 8);
              v98 = (uint64_t *)(v108 + 8);
            }
            while (v97);
LABEL_181:
            v155 = v172;
            if (v152 - (uint64_t)v151 >= 9)
            {
              v135 = 0;
              v136 = (v152 - (uint64_t)v151) >> 3;
              v137 = *v151;
              v138 = v151;
              do
              {
                v139 = v138;
                v138 += v135 + 1;
                v140 = 2 * v135;
                v135 = (2 * v135) | 1;
                v141 = v140 + 2;
                if (v141 < v136 && *(float *)(*v138 + 16) < *(float *)(v138[1] + 16))
                {
                  ++v138;
                  v135 = v141;
                }
                *v139 = *v138;
              }
              while (v135 <= (uint64_t)((unint64_t)(v136 - 2) >> 1));
              v142 = (_QWORD *)(v152 - 8);
              if (v138 == (_QWORD *)(v152 - 8))
              {
                *v138 = v137;
              }
              else
              {
                *v138 = *v142;
                *v142 = v137;
              }
            }
            v85 = *((_QWORD *)&v170 + 1) - 8;
            *((_QWORD *)&v170 + 1) -= 8;
            if (++v96 == v150)
            {
              v86 = (void *)v170;
              break;
            }
          }
        }
        if (v86)
        {
          *((_QWORD *)&v170 + 1) = v86;
          operator delete(v86);
        }
        v170 = v161;
        v171 = v162;
        v143 = v174;
        v174 = *(_OWORD *)&v159[8];
        *(_OWORD *)&v159[8] = v143;
        v144 = *(_QWORD *)&v159[24];
        v145 = v176;
        *(_QWORD *)&v159[24] = v175[0];
        v146 = *(_OWORD *)&v175[1];
        *(_OWORD *)&v175[1] = *(_OWORD *)&v159[32];
        *(_OWORD *)&v159[32] = v146;
        v175[0] = v144;
        v176 = v160;
        v160 = v145;
      }
      if (v163)
      {
        v164 = v163;
        operator delete(v163);
      }
      if (v165[0])
      {
        v165[1] = v165[0];
        operator delete(v165[0]);
      }
      if (v166[0])
      {
        v166[1] = v166[0];
        operator delete(v166[0]);
      }
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((_QWORD)v170)
    operator delete((void *)v170);
}

void sub_1C21D7B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  uint64_t v57;
  void *v59;

  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  v59 = a57;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  if (v59)
    operator delete(v59);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::model::FreeList<sentencepiece::unigram::`anonymous namespace'::Hypothesis>::Allocate(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t result;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[4];
  if (v4 >= v3)
  {
    v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v5 = a1[1];
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x18uLL);
    v6 = (void *)operator new[]();
    bzero(v6, 24 * a1[6]);
    v8 = (_QWORD *)a1[2];
    v7 = a1[3];
    if ((unint64_t)v8 >= v7)
    {
      v10 = (_QWORD *)a1[1];
      v11 = v8 - v10;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v13 = v7 - (_QWORD)v10;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = (char *)operator new(8 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[8 * v11];
      *(_QWORD *)v16 = v6;
      v9 = v16 + 8;
      if (v8 != v10)
      {
        do
        {
          v17 = *--v8;
          *((_QWORD *)v16 - 1) = v17;
          v16 -= 8;
        }
        while (v8 != v10);
        v8 = (_QWORD *)a1[1];
      }
      a1[1] = v16;
      a1[2] = v9;
      a1[3] = &v15[8 * v14];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v8 = v6;
      v9 = v8 + 1;
    }
    a1[2] = v9;
    v5 = a1[1];
    v4 = a1[4];
    v2 = a1[5];
  }
  result = *(_QWORD *)(v5 + 8 * v2) + 24 * v4;
  a1[4] = v4 + 1;
  return result;
}

uint64_t std::priority_queue<sentencepiece::unigram::`anonymous namespace'::Hypothesis *,std::vector<sentencepiece::unigram::`anonymous namespace'::Hypothesis *>,sentencepiece::unigram::Lattice::NBest(unsigned long,BOOL,float)::HypothesisComparator>::push(uint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = (_QWORD *)a1[1];
  v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = ((uint64_t)v5 - *a1) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v10 = v4 - v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = *a2;
    v6 = (uint64_t)(v13 + 8);
    if (v5 != (_QWORD *)v7)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != (_QWORD *)v7);
      v5 = (_QWORD *)*a1;
    }
    *a1 = (uint64_t)v13;
    a1[1] = v6;
    a1[2] = (uint64_t)&v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = *a2;
    v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
}

void std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 32 * a2;
      if (v3 != v5)
      {
        v6 = a1[1];
        do
        {
          v8 = *(void **)(v6 - 32);
          v6 -= 32;
          v7 = v8;
          if (v8)
          {
            *(_QWORD *)(v3 - 24) = v7;
            operator delete(v7);
          }
          v3 = v6;
        }
        while (v6 != v5);
      }
      a1[1] = v5;
    }
  }
  else
  {
    std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::__append(a1, a2 - v4);
  }
}

_QWORD *sentencepiece::model::FreeList<sentencepiece::unigram::`anonymous namespace'::Hypothesis>::~FreeList(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E7BE9240;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x1C3BB9B20](*v2, 0x1020C8062D53EE8);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sentencepiece::unigram::Lattice::Sample(sentencepiece::unigram::Lattice *this@<X0>, float a2@<S0>, void **a3@<X8>)
{
  unint64_t v6;
  sentencepiece::random *v7;
  int v8;
  uint64_t v9;
  float v10;
  float *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float v16;
  float *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  float *v23;
  void *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  BOOL v46;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *RandomGenerator;
  void *v48[3];
  void *v49[2];
  float *v50;
  void *__p[2];
  float *v52;

  if ((int)(((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3) - 1) <= 0)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    v6 = *((_QWORD *)this + 16) + *((_QWORD *)this + 17) * *((_QWORD *)this + 18);
    LODWORD(v49[0]) = 0;
    std::vector<float>::vector(__p, v6, v49);
    sentencepiece::unigram::Lattice::ForwardAlgorithm(this, a2, (uint64_t *)v49);
    v7 = (sentencepiece::random *)__p[0];
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = *(_OWORD *)v49;
    v52 = v50;
    RandomGenerator = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)sentencepiece::random::GetRandomGenerator(v7);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v49[0] = 0;
    v49[1] = 0;
    v50 = 0;
    v8 = ((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3) - 1;
    v9 = **(_QWORD **)(*((_QWORD *)this + 6) + 24 * (v8 & ~(v8 >> 31)));
    v10 = *((float *)__p[0] + *(unsigned int *)(v9 + 24));
    do
    {
      v11 = (float *)v49[0];
      v49[1] = v49[0];
      v12 = (uint64_t *)(*((_QWORD *)this + 9) + 24 * *(unsigned int *)(v9 + 16));
      v14 = *v12;
      v13 = v12[1];
      v15 = (float *)v49[0];
      if (*v12 != v13)
      {
        do
        {
          v16 = exp((float)((float)(*((float *)__p[0] + *(unsigned int *)(*(_QWORD *)v14 + 24))
                                  + (float)(a2 * *(float *)(*(_QWORD *)v14 + 32)))
                          - v10));
          if (v11 >= v50)
          {
            v17 = (float *)v49[0];
            v18 = ((char *)v11 - (char *)v49[0]) >> 2;
            v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 62)
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            v20 = (char *)v50 - (char *)v49[0];
            if (((char *)v50 - (char *)v49[0]) >> 1 > v19)
              v19 = v20 >> 1;
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
              v21 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v21 = v19;
            if (v21)
            {
              v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v50, v21);
              v17 = (float *)v49[0];
              v11 = (float *)v49[1];
            }
            else
            {
              v22 = 0;
            }
            v23 = (float *)&v22[4 * v18];
            *v23 = v16;
            v24 = v23 + 1;
            while (v11 != v17)
            {
              v25 = *((_DWORD *)v11-- - 1);
              *((_DWORD *)v23-- - 1) = v25;
            }
            v49[0] = v23;
            v49[1] = v24;
            v50 = (float *)&v22[4 * v21];
            if (v17)
              operator delete(v17);
            v11 = (float *)v24;
          }
          else
          {
            *v11++ = v16;
          }
          v49[1] = v11;
          v14 += 8;
        }
        while (v14 != v13);
        v15 = (float *)v49[0];
      }
      std::discrete_distribution<int>::param_type::param_type[abi:ne180100]<std::__wrap_iter<float *>>((uint64_t)v48, v15, v11);
      v26 = *(_DWORD *)(v9 + 16);
      v27 = *((_QWORD *)this + 9);
      v9 = *(_QWORD *)(*(_QWORD *)(v27 + 24 * v26)
                     + 8
                     * (int)std::discrete_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((int)v48, RandomGenerator, (double **)v48));
      v28 = ***((_QWORD ***)this + 9);
      if (v9 != v28)
      {
        v10 = *((float *)__p[0] + *(unsigned int *)(v9 + 24));
        v30 = a3[1];
        v29 = (unint64_t)a3[2];
        if ((unint64_t)v30 >= v29)
        {
          v32 = ((char *)v30 - (_BYTE *)*a3) >> 3;
          if ((unint64_t)(v32 + 1) >> 61)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v33 = v29 - (_QWORD)*a3;
          v34 = v33 >> 2;
          if (v33 >> 2 <= (unint64_t)(v32 + 1))
            v34 = v32 + 1;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
            v35 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v35 = v34;
          if (v35)
            v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a3 + 2), v35);
          else
            v36 = 0;
          v37 = &v36[8 * v32];
          *(_QWORD *)v37 = v9;
          v31 = v37 + 8;
          v39 = (char *)*a3;
          v38 = (char *)a3[1];
          if (v38 != *a3)
          {
            do
            {
              v40 = *((_QWORD *)v38 - 1);
              v38 -= 8;
              *((_QWORD *)v37 - 1) = v40;
              v37 -= 8;
            }
            while (v38 != v39);
            v38 = (char *)*a3;
          }
          *a3 = v37;
          a3[1] = v31;
          a3[2] = &v36[8 * v35];
          if (v38)
            operator delete(v38);
        }
        else
        {
          *v30 = v9;
          v31 = v30 + 1;
        }
        a3[1] = v31;
      }
      if (v48[0])
      {
        v48[1] = v48[0];
        operator delete(v48[0]);
      }
    }
    while (v9 != v28);
    v42 = (unint64_t)*a3;
    v41 = (char *)a3[1];
    if (*a3 != v41)
    {
      v43 = v41 - 8;
      if ((unint64_t)v43 > v42)
      {
        v44 = v42 + 8;
        do
        {
          v45 = *(_QWORD *)(v44 - 8);
          *(_QWORD *)(v44 - 8) = *(_QWORD *)v43;
          *(_QWORD *)v43 = v45;
          v43 -= 8;
          v46 = v44 >= (unint64_t)v43;
          v44 += 8;
        }
        while (!v46);
      }
    }
    if (v49[0])
    {
      v49[1] = v49[0];
      operator delete(v49[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_1C21D83CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Model::PopulateNodes(sentencepiece::unigram::Model *this, sentencepiece::unigram::Lattice *a2)
{
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  _BYTE *v10;
  char *v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  unint64_t *v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  void *__p;
  _BYTE *v46;

  v4 = *((float *)this + 26);
  v5 = ((*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3) - 1;
  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a2 + 2);
  std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::vector(&__p, *((int *)this + 23) + 1);
  v42 = v5;
  if ((int)v5 < 1)
    goto LABEL_40;
  v43 = 0;
  v8 = 0;
  v9 = v4 + -10.0;
  v41 = v6 + (int)v7;
  do
  {
    v10 = *(_BYTE **)(*((_QWORD *)a2 + 3) + 8 * v8);
    v11 = (char *)__p;
    v12 = (v46 - (_BYTE *)__p) >> 4;
    v13 = (_DWORD *)*((_QWORD *)this + 5);
    v14 = (*v13 >> 10 << ((*v13 >> 6) & 8));
    if ((v41 - (_QWORD)v10) << 32)
    {
      v15 = 0;
      v16 = 0;
      do
      {
        v17 = v10[v15];
        v18 = v14 ^ v17;
        v19 = v13[v18];
        if ((v19 & 0x800000FF) != (_DWORD)v17)
          break;
        v14 = v18 ^ (v19 >> 10 << ((v19 >> 6) & 8));
        if ((v19 & 0x100) != 0)
        {
          if (v16 < v12)
          {
            v20 = &v11[16 * v16];
            *(_DWORD *)v20 = v13[v14] & 0x7FFFFFFF;
            *((_QWORD *)v20 + 1) = v15 + 1;
          }
          ++v16;
        }
        ++v15;
      }
      while ((_DWORD)v41 - (_DWORD)v10 != v15);
    }
    else
    {
      v21 = *v10;
      if (*v10)
      {
        v16 = 0;
        v22 = 1;
        do
        {
          v23 = v14 ^ v21;
          v24 = v13[v23];
          if ((v24 & 0x800000FF) != v21)
            break;
          v14 = v23 ^ (v24 >> 10 << ((v24 >> 6) & 8));
          if ((v24 & 0x100) != 0)
          {
            if (v16 < v12)
            {
              v25 = &v11[16 * v16];
              *(_DWORD *)v25 = v13[v14] & 0x7FFFFFFF;
              *((_QWORD *)v25 + 1) = v22;
            }
            ++v16;
          }
          v21 = v10[v22++];
        }
        while (v21);
      }
      else
      {
        v16 = 0;
      }
    }
    if (v16 >= v12)
    {
      v44 = 1;
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
      v27 = (_QWORD *)std::ostream::operator<<();
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)") [", 3);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"(num_nodes) < (trie_results.size())", 35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"] ", 2);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v44);
    }
    if (!v16)
    {
LABEL_38:
      v40 = sentencepiece::unigram::Lattice::Insert(a2, v8, 1);
      *(_DWORD *)(v40 + 28) = *((_DWORD *)this + 22);
      *(float *)(v40 + 32) = v9;
      goto LABEL_39;
    }
    v30 = 0;
    v31 = 0;
    do
    {
      while (1)
      {
        v32 = (unint64_t *)(*((_QWORD *)a2 + 3) + v43);
        v33 = -1;
        do
        {
          v34 = *v32++;
          ++v33;
        }
        while (v34 < (unint64_t)&v10[*((_QWORD *)__p + 2 * v30 + 1)]);
        v35 = *((unsigned int *)__p + 4 * v30);
        if (((*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 128))(*((_QWORD *)this + 1), v35) & 1) != 0)
          break;
        v36 = v8;
        v37 = sentencepiece::unigram::Lattice::Insert(a2, v8, v33);
        *(_DWORD *)(v37 + 28) = v35;
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1), v35))
        {
          v38 = (float)(*((float *)this + 27) * (float)v33) + -0.1;
        }
        else
        {
          v38 = (*(float (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1), v35);
        }
        v39 = v38;
        *(float *)(v37 + 32) = v39;
        if (!v31)
        {
          v31 = *(_DWORD *)(v37 + 20) == 1;
          v8 = v36;
          break;
        }
        ++v30;
        v31 = 1;
        v8 = v36;
        if (v30 == v16)
          goto LABEL_39;
      }
      ++v30;
    }
    while (v30 != v16);
    if (!v31)
      goto LABEL_38;
LABEL_39:
    ++v8;
    v43 += 8;
  }
  while (v8 != v42);
LABEL_40:
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
}

void sub_1C21D87C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Model::LookupPredictive(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, sentencepiece::util::Status *a6@<X8>)
{
  void *v12;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  void *__p;
  unsigned int *v22;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(&__p);
  v12 = __p;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&__p);
  if (v12)
  {
    sentencepiece::util::Status::Status(a6, (const sentencepiece::util::Status *)(a1 + 96));
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
    v14 = (unsigned int *)__p;
    v15 = v22;
    if (__p != v22)
    {
      do
      {
        v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, v16) & 1) == 0)
        {
          v20[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, v16);
          v20[1] = v17;
          v18 = *(_QWORD *)(a5 + 8);
          if (v18 >= *(_QWORD *)(a5 + 16))
          {
            v19 = std::vector<std::string>::__emplace_back_slow_path<std::string_view>(a5, (uint64_t)v20);
          }
          else
          {
            std::allocator<std::string>::construct[abi:ne180100]<std::string,std::string_view>(a5 + 16, *(_BYTE **)(a5 + 8), (uint64_t)v20);
            v19 = v18 + 24;
            *(_QWORD *)(a5 + 8) = v18 + 24;
          }
          *(_QWORD *)(a5 + 8) = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sentencepiece::util::Status::Status(a6, (const sentencepiece::util::Status *)(a1 + 96));
    if (__p)
    {
      v22 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

{
  void *v12;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  void *__p;
  unsigned int *v29;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(&__p);
  v12 = __p;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&__p);
  if (v12)
  {
    sentencepiece::util::Status::Status(a6, (const sentencepiece::util::Status *)(a1 + 96));
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
    v14 = (unsigned int *)__p;
    v15 = v29;
    if (__p != v29)
    {
      do
      {
        v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, v16) & 1) == 0)
        {
          v18 = *(_DWORD **)(a5 + 8);
          v17 = *(_QWORD *)(a5 + 16);
          if ((unint64_t)v18 >= v17)
          {
            v20 = *(_DWORD **)a5;
            v21 = ((uint64_t)v18 - *(_QWORD *)a5) >> 2;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62)
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            v23 = v17 - (_QWORD)v20;
            if (v23 >> 1 > v22)
              v22 = v23 >> 1;
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
              v24 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v24 = v22;
            if (v24)
            {
              v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a5 + 16, v24);
              v20 = *(_DWORD **)a5;
              v18 = *(_DWORD **)(a5 + 8);
            }
            else
            {
              v25 = 0;
            }
            v26 = &v25[4 * v21];
            *(_DWORD *)v26 = v16;
            v19 = v26 + 4;
            while (v18 != v20)
            {
              v27 = *--v18;
              *((_DWORD *)v26 - 1) = v27;
              v26 -= 4;
            }
            *(_QWORD *)a5 = v26;
            *(_QWORD *)(a5 + 8) = v19;
            *(_QWORD *)(a5 + 16) = &v25[4 * v24];
            if (v20)
              operator delete(v20);
          }
          else
          {
            *v18 = v16;
            v19 = v18 + 1;
          }
          *(_QWORD *)(a5 + 8) = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sentencepiece::util::Status::Status(a6, (const sentencepiece::util::Status *)(a1 + 96));
    if (__p)
    {
      v29 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

void sub_1C21D8960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::`anonymous namespace'::LookupPredictiveInternal(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  unint64_t v12;

  if (a4 != -1)
    a5 = a4;
  std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::vector(a6, a5);
  v12 = Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(a1, a2, *a6, (a6[1] - *a6) >> 4, a3, a4);
  std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::resize((uint64_t)a6, v12);
}

void sub_1C21D8A0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C21D8BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

sentencepiece::unigram::Model *sentencepiece::unigram::Model::Model(sentencepiece::unigram::Model *this, const sentencepiece::ModelProto *a2)
{
  sentencepiece::ModelInterface *v4;
  unint64_t v5;
  float v6;
  float v7;

  v4 = sentencepiece::ModelInterface::ModelInterface(this);
  *((_QWORD *)v4 + 13) = 0;
  *((_DWORD *)v4 + 28) = 0;
  *(_QWORD *)v4 = &off_1E7BE92A0;
  *((_QWORD *)v4 + 1) = (char *)a2 + 16;
  sentencepiece::ModelInterface::InitializePieces(v4);
  v5 = 0;
  *((_QWORD *)this + 13) = 0x8000007F7FFFFFLL;
  while (v5 < (*(int (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1)))
  {
    if ((*(unsigned int (**)(_QWORD, unint64_t))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1), v5))
    {
      v6 = (*(float (**)(_QWORD, unint64_t))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1), v5);
      if (v6 >= *((float *)this + 26))
        v6 = *((float *)this + 26);
      *((float *)this + 26) = v6;
      v7 = (*(float (**)(_QWORD, unint64_t))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1), v5);
      if (*((float *)this + 27) >= v7)
        v7 = *((float *)this + 27);
      *((float *)this + 27) = v7;
    }
    ++v5;
  }
  return this;
}

void sub_1C21D8CF4(_Unwind_Exception *a1)
{
  sentencepiece::ModelInterface *v1;

  sentencepiece::ModelInterface::~ModelInterface(v1);
  _Unwind_Resume(a1);
}

sentencepiece::ModelInterface *sentencepiece::ModelInterface::ModelInterface(sentencepiece::ModelInterface *this)
{
  *(_QWORD *)this = off_1E7BE8848;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &off_1E7BEA0E8;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = &off_1E7BEA0E8;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  sentencepiece::util::Status::Status((_QWORD *)this + 12);
  return this;
}

void sub_1C21D8D80(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v5 = v2;
  *(_QWORD *)(v1 + 56) = v5;
  *v4 = 0;
  v4[1] = 0;
  v7 = *(_QWORD *)(v1 + 80);
  if (v7)
  {
    MEMORY[0x1C3BB9B20](v7, 0x1000C8052888210);
    *(_QWORD *)(v1 + 80) = 0;
  }
  *(_QWORD *)(v1 + 24) = &off_1E7BEA0E8;
  *v3 = 0;
  v3[1] = 0;
  v8 = *(_QWORD *)(v1 + 48);
  if (v8)
  {
    MEMORY[0x1C3BB9B20](v8, 0x1000C8052888210);
    *(_QWORD *)(v1 + 48) = 0;
  }
  std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100]((uint64_t **)(v1 + 16), 0);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::unigram::Model::Model(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  BOOL v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v17;

  v7 = a4 > 7;
  if (a4 <= 7)
    v8 = 0;
  else
    v8 = a4 - 8;
  if (v7)
    v9 = (char *)(a3 + 2);
  else
    v9 = "";
  v10 = sentencepiece::ModelInterface::ModelInterface(a1, a2, v9, v8);
  *(_DWORD *)(v10 + 104) = 0;
  v11 = (_DWORD *)(v10 + 104);
  *(_QWORD *)v10 = &off_1E7BE92A0;
  *(_DWORD *)(v10 + 108) = 0;
  v12 = (_DWORD *)(v10 + 108);
  *(_DWORD *)(v10 + 112) = 0;
  v13 = (uint64_t *)(v10 + 96);
  sentencepiece::util::Status::Status((sentencepiece::util::Status *)&v17, (const sentencepiece::util::Status *)(v10 + 96));
  v14 = v17;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  if (!v14)
  {
    sentencepiece::mmap_util::DecodePrefix<float>(a3, a4, v11, &v17);
    sentencepiece::util::Status::operator=(v13, &v17);
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    (*(void (**)(_DWORD **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v17, a1);
    v15 = v17;
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    if (!v15)
    {
      sentencepiece::mmap_util::DecodePrefix<float>(a3 + 1, a4 - 4, v12, &v17);
      sentencepiece::util::Status::operator=(v13, &v17);
      sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    }
  }
  return a1;
}

void sub_1C21D8F14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  sentencepiece::ModelInterface *v2;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  sentencepiece::ModelInterface::~ModelInterface(v2);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::mmap_util::DecodePrefix<float>@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v8[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x1C3BB9A90](&v10);
  }
  else
  {
    *a3 = *a1;
    return sentencepiece::util::Status::Status(a4);
  }
}

void sub_1C21D909C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::unigram::Model::~Model(sentencepiece::unigram::Model *this)
{
  sentencepiece::ModelInterface::~ModelInterface(this);
  JUMPOUT(0x1C3BB9B44);
}

void sentencepiece::unigram::Model::Encode(sentencepiece::unigram::Model *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD *v24;
  void (**v25)(sentencepiece::unigram::Lattice *__hidden);
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  if (*((_DWORD *)a1 + 28))
  {
    (*(void (**)(void (***__return_ptr)(sentencepiece::unigram::Lattice *__hidden), sentencepiece::unigram::Model *))(*(_QWORD *)a1 + 16))(&v25, a1);
    if (v25)
    {
      sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v25);
LABEL_4:
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      return;
    }
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v25);
    if (!a3)
      goto LABEL_4;
    v25 = &off_1E7BE9390;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0;
    v32 = &off_1E7BE9260;
    v33 = 0u;
    v34 = 0u;
    v35 = 0;
    v36 = 1024;
    sentencepiece::unigram::Lattice::SetSentence((uint64_t)&v25, a2, a3);
    sentencepiece::unigram::Model::PopulateNodes(a1, (sentencepiece::unigram::Lattice *)&v25);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sentencepiece::unigram::Lattice::Viterbi((sentencepiece::unigram::Lattice *)&v25, (uint64_t)&v23);
    v8 = v23;
    v9 = v24;
    if (v23 != v24)
    {
      v10 = a4 + 2;
      v11 = (char *)a4[1];
      do
      {
        v12 = *v8;
        if ((unint64_t)v11 >= *v10)
        {
          v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v11[-*a4] >> 3);
          v14 = v13 + 1;
          if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3) > v14)
            v14 = 0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v10 - *a4) >> 3) >= 0x555555555555555)
            v15 = 0xAAAAAAAAAAAAAAALL;
          else
            v15 = v14;
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)(a4 + 2), v15);
          v18 = &v16[24 * v13];
          *(_OWORD *)v18 = *(_OWORD *)v12;
          *((_DWORD *)v18 + 4) = *(_DWORD *)(v12 + 28);
          v20 = (char *)*a4;
          v19 = (char *)a4[1];
          v21 = v18;
          if (v19 != (char *)*a4)
          {
            do
            {
              v22 = *(_OWORD *)(v19 - 24);
              *((_QWORD *)v21 - 1) = *((_QWORD *)v19 - 1);
              *(_OWORD *)(v21 - 24) = v22;
              v21 -= 24;
              v19 -= 24;
            }
            while (v19 != v20);
            v19 = (char *)*a4;
          }
          v11 = v18 + 24;
          *a4 = v21;
          a4[1] = v18 + 24;
          a4[2] = &v16[24 * v17];
          if (v19)
            operator delete(v19);
        }
        else
        {
          *(_OWORD *)v11 = *(_OWORD *)v12;
          *((_DWORD *)v11 + 4) = *(_DWORD *)(v12 + 28);
          v11 += 24;
        }
        a4[1] = v11;
        ++v8;
      }
      while (v8 != v9);
      v8 = v23;
    }
    if (v8)
    {
      v24 = v8;
      operator delete(v8);
    }
    sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&v25);
  }
  else
  {
    sentencepiece::unigram::Model::EncodeOptimized((uint64_t)a1, (uint64_t)a2, a3, a4);
  }
}

void sub_1C21D9354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::unigram::Model::EncodeOptimized(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float *v13;
  int v14;
  float v15;
  unint64_t v16;
  float v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  double v29;
  double v30;
  float v31;
  float *v32;
  int *v33;
  int v34;
  float v35;
  char *v37;
  _QWORD *v38;
  unsigned int v39;
  float *v40;
  unint64_t v41;
  unsigned int *v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  char **v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  __int128 *v57;
  char *i;
  __int128 v59;
  int v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  float *v64;
  _QWORD *v65;
  uint64_t v66;
  __int128 v67;

  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 16))(&v67);
  if ((_QWORD)v67)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v67);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v67);
  if (!a3)
    goto LABEL_3;
  v8 = *(float *)(a1 + 104);
  v9 = (a3 << 32) + 0x100000000;
  v66 = a2;
  if (a3 << 32 == 0xFFFFFFFF00000000)
  {
    v12 = 0;
  }
  else
  {
    if (v9 < 0)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v10 = v9 >> 32;
    v11 = 3 * v10;
    v12 = (float *)operator new(12 * v10);
    v13 = v12;
    do
    {
      *(_QWORD *)v13 = 0xFFFFFFFFLL;
      v13[2] = NAN;
      v13 += 3;
    }
    while (v13 != &v12[v11]);
    a2 = v66;
  }
  if ((int)a3 <= 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    v65 = a4;
    v14 = 0;
    v15 = v8 + -10.0;
    v16 = (int)a3;
    v62 = (char *)(v12 + 5);
    v63 = a3;
    v64 = v12;
    v61 = (int)a3;
    do
    {
      v17 = v12[3 * v14 + 1];
      if ((int)a3 - v14 >= asc_1C231416F[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4])
        v18 = asc_1C231416F[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4];
      else
        v18 = a3 - v14;
      if (v16 <= v14)
        goto LABEL_31;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = a2 + v14;
      v23 = v16 - v14;
      v24 = (int *)&v62[12 * v14];
      do
      {
        v25 = *(_QWORD *)(a1 + 40);
        v26 = *(unsigned __int8 *)(v22 + v19);
        LODWORD(v21) = (*(_DWORD *)(v25 + 4 * v21) >> 10 << ((*(_DWORD *)(v25 + 4 * v21) >> 6) & 8)) ^ v21 ^ v26;
        v27 = *(_DWORD *)(v25 + 4 * v21);
        if ((v27 & 0x800000FF) != v26)
          break;
        if ((v27 & 0x100) != 0)
        {
          v28 = *(_DWORD *)(v25 + 4 * ((v27 >> 10 << ((v27 >> 6) & 8)) ^ v21)) & 0x7FFFFFFF;
          if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), v28) & 1) == 0)
          {
            if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v28))
            {
              v29 = (float)(*(float *)(a1 + 108) * (float)(unint64_t)(v19 + 1)) + -0.1;
            }
            else
            {
              v29 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v28);
            }
            v30 = v29 + v17;
            if (*v24 == -1 || v30 > *((float *)v24 - 1))
            {
              v31 = v30;
              *((float *)v24 - 1) = v31;
              *v24 = v14;
              *(v24 - 2) = v28;
            }
            v20 |= v18 - 1 == v19;
          }
        }
        ++v19;
        v24 += 3;
      }
      while (v23 != v19);
      LODWORD(a3) = v63;
      v12 = v64;
      a2 = v66;
      v16 = v61;
      if ((v20 & 1) == 0)
      {
LABEL_31:
        v32 = &v12[3 * v18 + 3 * v14];
        v34 = *((_DWORD *)v32 + 2);
        v33 = (int *)(v32 + 2);
        v35 = v15 + v17;
        if (v34 == -1 || v35 > *((float *)v33 - 1))
        {
          *((float *)v33 - 1) = v35;
          *v33 = v14;
          v12[3 * v18 + 3 * v14] = *(float *)(a1 + 88);
        }
      }
      v14 += v18;
    }
    while (v14 < (int)a3);
    v37 = 0;
    v65[2] = 0;
    v38 = v65 + 2;
    *v65 = 0;
    v65[1] = 0;
    v39 = a3;
    do
    {
      v40 = &v12[3 * v39];
      v42 = (unsigned int *)(v40 + 2);
      v41 = *((int *)v40 + 2);
      if (v63 < v41)
        std::__throw_out_of_range[abi:ne180100]("string_view::substr");
      v43 = v39 - v41;
      v44 = v66 + v41;
      if (v63 - v41 >= v43)
        v45 = v43;
      else
        v45 = v63 - v41;
      if ((unint64_t)v37 >= *v38)
      {
        v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v37[-*v65] >> 3);
        v48 = v47 + 1;
        if (v47 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3) > v48)
          v48 = 0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v38 - *v65) >> 3) >= 0x555555555555555)
          v49 = 0xAAAAAAAAAAAAAAALL;
        else
          v49 = v48;
        v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)v38, v49);
        v52 = &v50[24 * v47];
        *(_QWORD *)v52 = v44;
        *((_QWORD *)v52 + 1) = v45;
        *((float *)v52 + 4) = *v40;
        v46 = (char **)v65;
        v54 = (char *)*v65;
        v53 = (char *)v65[1];
        v55 = v52;
        if (v53 == (char *)*v65)
        {
          v12 = v64;
        }
        else
        {
          v12 = v64;
          do
          {
            v56 = *(_OWORD *)(v53 - 24);
            *((_QWORD *)v55 - 1) = *((_QWORD *)v53 - 1);
            *(_OWORD *)(v55 - 24) = v56;
            v55 -= 24;
            v53 -= 24;
          }
          while (v53 != v54);
          v53 = (char *)*v65;
        }
        v37 = v52 + 24;
        *v65 = v55;
        v65[1] = v52 + 24;
        v65[2] = &v50[24 * v51];
        if (v53)
          operator delete(v53);
      }
      else
      {
        *(_QWORD *)v37 = v44;
        *((_QWORD *)v37 + 1) = v45;
        *((float *)v37 + 4) = *v40;
        v37 += 24;
        v12 = v64;
        v46 = (char **)v65;
      }
      v46[1] = v37;
      v39 = *v42;
    }
    while ((int)*v42 > 0);
    v57 = (__int128 *)*v46;
    if (*v46 != v37)
    {
      for (i = v37 - 24; v57 < (__int128 *)i; i -= 24)
      {
        v67 = *v57;
        v59 = v67;
        *v57 = *(_OWORD *)i;
        *(_OWORD *)i = v59;
        v60 = *((_DWORD *)v57 + 4);
        *((_DWORD *)v57 + 4) = *((_DWORD *)i + 4);
        *((_DWORD *)i + 4) = v60;
        v57 = (__int128 *)((char *)v57 + 24);
      }
    }
  }
  if (v12)
    operator delete(v12);
}

void sub_1C21D9874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v15;

  v15 = *(void **)a14;
  if (*(_QWORD *)a14)
  {
    *(_QWORD *)(a14 + 8) = v15;
    operator delete(v15);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Model::NBestEncode(sentencepiece::unigram::Model *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  char *v10;
  void *v11;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t i;
  uint64_t *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  float *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  void *v35;
  char *v36;
  char *v37;
  __int128 v38;
  void *v39;
  void *__p[13];
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(__p);
  if (__p[0])
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)__p);
LABEL_3:
    memset(__p, 0, 24);
    std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>((char *)__p, 0, 0, 0);
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    *(_QWORD *)&v38 = a5;
    BYTE8(v38) = 0;
    v10 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v10;
    a5[1] = (uint64_t)v10;
    a5[2] = (uint64_t)(v10 + 32);
    a5[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v10);
    v11 = __p[0];
    if (!__p[0])
      return;
    __p[1] = __p[0];
    goto LABEL_5;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)__p);
  if (!a3)
    goto LABEL_3;
  if (a4 >= 1024)
    v12 = 1024;
  else
    v12 = a4;
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = v12;
  if (v13 > 1)
  {
    __p[0] = &off_1E7BE9390;
    memset(&__p[1], 0, 88);
    __p[12] = &off_1E7BE9260;
    v41 = 0u;
    v42 = 0u;
    v43 = 0;
    v44 = 1024;
    sentencepiece::unigram::Lattice::SetSentence((uint64_t)__p, a2, a3);
    sentencepiece::unigram::Model::PopulateNodes(a1, (sentencepiece::unigram::Lattice *)__p);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    v34 = a5;
    sentencepiece::unigram::Lattice::NBest((sentencepiece::unigram::Lattice *)__p, 0.0, v13, 0, (uint64_t *)&v38);
    v33 = *((_QWORD *)&v38 + 1);
    for (i = v38; i != v33; i += 32)
    {
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v16 = *(uint64_t **)i;
      v17 = *(uint64_t **)(i + 8);
      if (*(uint64_t **)i != v17)
      {
        v18 = 0;
        do
        {
          v19 = *v16;
          if (v18 >= v37)
          {
            v20 = 0xAAAAAAAAAAAAAAABLL * ((v18 - (_BYTE *)v35) >> 3);
            v21 = v20 + 1;
            if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((v37 - (_BYTE *)v35) >> 3) > v21)
              v21 = 0x5555555555555556 * ((v37 - (_BYTE *)v35) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v37 - (_BYTE *)v35) >> 3) >= 0x555555555555555)
              v22 = 0xAAAAAAAAAAAAAAALL;
            else
              v22 = v21;
            v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)&v37, v22);
            v25 = &v23[24 * v20];
            *(_OWORD *)v25 = *(_OWORD *)v19;
            *((_DWORD *)v25 + 4) = *(_DWORD *)(v19 + 28);
            v27 = (char *)v35;
            v26 = v36;
            v28 = v25;
            if (v36 != v35)
            {
              do
              {
                v29 = *(_OWORD *)(v26 - 24);
                *((_QWORD *)v28 - 1) = *((_QWORD *)v26 - 1);
                *(_OWORD *)(v28 - 24) = v29;
                v28 -= 24;
                v26 -= 24;
              }
              while (v26 != v27);
              v26 = (char *)v35;
            }
            v18 = v25 + 24;
            v35 = v28;
            v36 = v25 + 24;
            v37 = &v23[24 * v24];
            if (v26)
              operator delete(v26);
          }
          else
          {
            *(_OWORD *)v18 = *(_OWORD *)v19;
            *((_DWORD *)v18 + 4) = *(_DWORD *)(v19 + 28);
            v18 += 24;
          }
          v36 = v18;
          ++v16;
        }
        while (v16 != v17);
      }
      v30 = (float *)(i + 24);
      v31 = v34[1];
      if (v31 >= v34[2])
      {
        v32 = std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,float const&>(v34, (__int128 **)&v35, v30);
      }
      else
      {
        std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<std::string_view,int>>&,float const&>((uint64_t)v34, (__int128 **)&v35, v30);
        v32 = v31 + 32;
      }
      v34[1] = v32;
      if (v35)
      {
        v36 = (char *)v35;
        operator delete(v35);
      }
    }
    v35 = &v38;
    std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
    sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)__p);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, sentencepiece::unigram::Model *, unsigned __int8 *, uint64_t))(*(_QWORD *)a1 + 40))(&v38, a1, a2, a3);
    *(_OWORD *)__p = v38;
    __p[2] = v39;
    v39 = 0;
    v38 = 0uLL;
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    v35 = a5;
    LOBYTE(v36) = 0;
    v14 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v14;
    a5[1] = (uint64_t)v14;
    a5[2] = (uint64_t)(v14 + 32);
    a5[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v14);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v11 = (void *)v38;
    if ((_QWORD)v38)
    {
      *((_QWORD *)&v38 + 1) = v38;
LABEL_5:
      operator delete(v11);
    }
  }
}

void sub_1C21D9CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  a12 = a11;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&__p);
  _Unwind_Resume(a1);
}

void sentencepiece::unigram::Model::SampleEncode(sentencepiece::unigram::Model *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>, float a5@<S0>)
{
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  _QWORD *v25;
  _QWORD *v26;
  void (**v27)(sentencepiece::unigram::Lattice *__hidden);
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t (**v34)();
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 16))(&v27);
  if (v27)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v27);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v27);
  if (!a3)
    goto LABEL_3;
  v27 = &off_1E7BE9390;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0;
  v34 = &off_1E7BE9260;
  v35 = 0u;
  v36 = 0u;
  v37 = 0;
  v38 = 1024;
  sentencepiece::unigram::Lattice::SetSentence((uint64_t)&v27, a2, a3);
  sentencepiece::unigram::Model::PopulateNodes(a1, (sentencepiece::unigram::Lattice *)&v27);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sentencepiece::unigram::Lattice::Sample((sentencepiece::unigram::Lattice *)&v27, a5, (void **)&v25);
  v10 = v25;
  v11 = v26;
  if (v25 != v26)
  {
    v12 = 0;
    v13 = a4 + 2;
    do
    {
      v14 = *v10;
      if ((unint64_t)v12 >= *v13)
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v12[-*a4] >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(*v13 - *a4) >> 3) > v16)
          v16 = 0x5555555555555556 * ((uint64_t)(*v13 - *a4) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v13 - *a4) >> 3) >= 0x555555555555555)
          v17 = 0xAAAAAAAAAAAAAAALL;
        else
          v17 = v16;
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)(a4 + 2), v17);
        v20 = &v18[24 * v15];
        *(_OWORD *)v20 = *(_OWORD *)v14;
        *((_DWORD *)v20 + 4) = *(_DWORD *)(v14 + 28);
        v22 = (char *)*a4;
        v21 = (char *)a4[1];
        v23 = v20;
        if (v21 != (char *)*a4)
        {
          do
          {
            v24 = *(_OWORD *)(v21 - 24);
            *((_QWORD *)v23 - 1) = *((_QWORD *)v21 - 1);
            *(_OWORD *)(v23 - 24) = v24;
            v23 -= 24;
            v21 -= 24;
          }
          while (v21 != v22);
          v21 = (char *)*a4;
        }
        v12 = v20 + 24;
        *a4 = v23;
        a4[1] = v20 + 24;
        a4[2] = &v18[24 * v19];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *(_OWORD *)v12 = *(_OWORD *)v14;
        *((_DWORD *)v12 + 4) = *(_DWORD *)(v14 + 28);
        v12 += 24;
      }
      a4[1] = v12;
      ++v10;
    }
    while (v10 != v11);
    v10 = v25;
  }
  if (v10)
  {
    v26 = v10;
    operator delete(v10);
  }
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&v27);
}

void sub_1C21D9FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::unigram::Model::SampleEncodeAndScore(sentencepiece::unigram::Model *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, int a6@<W5>, uint64_t *j@<X8>, float a8@<S0>)
{
  sentencepiece::unigram::Model *v14;
  sentencepiece::logging *v16;
  float v17;
  uint64_t *v18;
  uint64_t *v19;
  __int128 *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  __int128 *v28;
  __int128 *v29;
  __int128 *v30;
  __int128 v31;
  char *v32;
  float v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  __int128 *v41;
  __int128 *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  __int128 *v49;
  char *v50;
  uint64_t v51;
  double v52;
  double v53;
  float v54;
  __int128 *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  __int128 *v63;
  __int128 *v64;
  __int128 *v65;
  __int128 v66;
  char *v67;
  uint64_t v68;
  __int128 *v69;
  __int128 *v70;
  __int128 *v71;
  void *v72;
  void *v73;
  void *v74;
  float v75;
  __int128 *i;
  uint64_t *v77;
  uint64_t *v78;
  char *v79;
  float v80;
  uint64_t v81;
  float v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  __int128 v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  float v97;
  double v98;
  long double v99;
  long double v100;
  double v101;
  float v102;
  uint64_t *v103;
  int v104;
  int v105;
  sentencepiece::unigram::Model *v106;
  sentencepiece::unigram::Model *v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  uint64_t v110;
  uint64_t v111;
  __int128 *v112;
  float v113;
  void *__p[13];
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  double v120;
  __int128 *v121;
  __int128 *v122;
  char *v123;
  void *v124[3];
  void **v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t (**v132)();
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  unint64_t v139;

  v14 = a1;
  (*(void (**)(void ***__return_ptr))(*(_QWORD *)a1 + 16))(&v125);
  if (v125)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v125);
LABEL_3:
    *j = 0;
    j[1] = 0;
    j[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v125);
  if (!a3)
    goto LABEL_3;
  v137 = 0;
  v138 = 0;
  v139 = 0;
  v125 = (void **)&off_1E7BE9390;
  v126 = 0u;
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v130 = 0u;
  v131 = 0;
  v132 = &off_1E7BE9260;
  v133 = 0u;
  v134 = 0u;
  v135 = 0;
  v136 = 1024;
  sentencepiece::unigram::Lattice::SetSentence((uint64_t)&v125, a2, a3);
  sentencepiece::unigram::Model::PopulateNodes(v14, (sentencepiece::unigram::Lattice *)&v125);
  sentencepiece::unigram::Lattice::ForwardAlgorithm((sentencepiece::unigram::Lattice *)&v125, a8, (uint64_t *)v124);
  v17 = *((float *)v124[0]
        + *(unsigned int *)(**(_QWORD **)(*((_QWORD *)&v128 + 1)
                                        + 24
                                        * ((((*((_QWORD *)&v127 + 1) - (_QWORD)v127) >> 3) - 1) & ~((int)(((*((_QWORD *)&v127 + 1) - (_QWORD)v127) >> 3) - 1) >> 31)))
                          + 24));
  if (a6)
  {
    if ((a5 & 1) == 0)
    {
      if ((int)sentencepiece::logging::GetMinLogLevel(v16) <= 2)
      {
        LOBYTE(__p[0]) = 0;
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
        v36 = (_QWORD *)std::ostream::operator<<();
        v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)") ", 2);
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"LOG(", 4);
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"ERROR", 5);
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)") ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"include_best not supported for wor false", 40);
        sentencepiece::error::Die::~Die((sentencepiece::error::Die *)__p);
      }
      goto LABEL_113;
    }
    v104 = a4;
    v105 = a6;
    v106 = v14;
    v108 = a2;
    v110 = a3;
    v121 = 0;
    v122 = 0;
    v123 = 0;
    sentencepiece::unigram::Lattice::Viterbi((sentencepiece::unigram::Lattice *)&v125, (uint64_t)__p);
    v18 = (uint64_t *)__p[0];
    v19 = (uint64_t *)__p[1];
    if (__p[0] != __p[1])
    {
      v20 = v122;
      do
      {
        v21 = *v18;
        if (v20 >= (__int128 *)v123)
        {
          v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v121) >> 3);
          v23 = v22 + 1;
          if (v22 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((v123 - (char *)v121) >> 3) > v23)
            v23 = 0x5555555555555556 * ((v123 - (char *)v121) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v123 - (char *)v121) >> 3) >= 0x555555555555555)
            v24 = 0xAAAAAAAAAAAAAAALL;
          else
            v24 = v23;
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)&v123, v24);
          v27 = &v25[24 * v22];
          *(_OWORD *)v27 = *(_OWORD *)v21;
          *((_DWORD *)v27 + 4) = *(_DWORD *)(v21 + 28);
          v29 = v121;
          v28 = v122;
          v30 = (__int128 *)v27;
          if (v122 != v121)
          {
            do
            {
              v31 = *(__int128 *)((char *)v28 - 24);
              *((_QWORD *)v30 - 1) = *((_QWORD *)v28 - 1);
              *(__int128 *)((char *)v30 - 24) = v31;
              v30 = (__int128 *)((char *)v30 - 24);
              v28 = (__int128 *)((char *)v28 - 24);
            }
            while (v28 != v29);
            v28 = v121;
          }
          v20 = (__int128 *)(v27 + 24);
          v121 = v30;
          v122 = (__int128 *)(v27 + 24);
          v123 = &v25[24 * v26];
          if (v28)
            operator delete(v28);
        }
        else
        {
          *v20 = *(_OWORD *)v21;
          *((_DWORD *)v20 + 4) = *(_DWORD *)(v21 + 28);
          v20 = (__int128 *)((char *)v20 + 24);
        }
        v122 = v20;
        ++v18;
      }
      while (v18 != v19);
    }
    v119 = 0.0;
    v32 = v138;
    if ((unint64_t)v138 >= v139)
    {
      v34 = std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,double>(&v137, &v121, &v119);
      a2 = v108;
      a3 = v110;
    }
    else
    {
      *(_QWORD *)v138 = 0;
      *((_QWORD *)v32 + 1) = 0;
      *((_QWORD *)v32 + 2) = 0;
      std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v32, v121, v122, 0xAAAAAAAAAAAAAAABLL * (((char *)v122 - (char *)v121) >> 3));
      a2 = v108;
      a3 = v110;
      v33 = v119;
      *((float *)v32 + 6) = v33;
      v34 = (uint64_t)(v32 + 32);
    }
    a4 = v104;
    v14 = v106;
    a6 = v105;
    v138 = (char *)v34;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v121)
    {
      v122 = v121;
      operator delete(v121);
    }
  }
  if ((a5 & 1) != 0)
  {
    sentencepiece::unigram::Lattice::NBest((sentencepiece::unigram::Lattice *)&v125, a8, a4 + 1, 1, (uint64_t *)&v121);
    v103 = j;
    if (a6)
    {
      std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::vector(&v119, ((char *)v122 - (char *)v121) >> 5);
      v42 = v121;
      v41 = v122;
      if (v122 != v121)
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        do
        {
          if (&v42[v43] != (__int128 *)(*(_QWORD *)&v119 + v44))
          {
            std::vector<sentencepiece::unigram::Lattice::Node *>::__assign_with_size[abi:ne180100]<sentencepiece::unigram::Lattice::Node **,sentencepiece::unigram::Lattice::Node **>((char *)(*(_QWORD *)&v119 + v44), *(char **)&v42[v43], *((_QWORD *)&v42[v43] + 1), (uint64_t)(*((_QWORD *)&v42[v43] + 1) - *(_QWORD *)&v42[v43]) >> 3);
            v42 = v121;
            v41 = v122;
          }
          ++v45;
          v44 += 24;
          v43 += 2;
        }
        while (v45 < ((char *)v41 - (char *)v42) >> 5);
      }
      sentencepiece::unigram::Lattice::Viterbi((sentencepiece::unigram::Lattice *)&v125, (uint64_t)__p);
      v46 = std::__find_impl[abi:ne180100]<std::vector<sentencepiece::unigram::Lattice::Node *> *,std::vector<sentencepiece::unigram::Lattice::Node *> *,std::vector<sentencepiece::unigram::Lattice::Node *>,std::__identity>(*(uint64_t *)&v119, *(uint64_t *)&v120, (uint64_t)__p);
      v47 = (int)(-1431655765 * ((unint64_t)(v46 - *(_QWORD *)&v119) >> 3));
      if (v47 == ((char *)v122 - (char *)v121) >> 5)
      {
        v49 = v122 - 2;
        v48 = (void *)*((_QWORD *)v122 - 4);
        if (v48)
        {
          *((_QWORD *)v122 - 3) = v48;
          operator delete(v48);
        }
      }
      else
      {
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,0>((__n128 *)&v121[2 * v47 + 2], (__n128 *)v122, (uint64_t)&v121[2 * v47]);
        v49 = v69;
        v70 = v122;
        if (v122 != v69)
        {
          v71 = v122;
          do
          {
            v73 = (void *)*((_QWORD *)v71 - 4);
            v71 -= 2;
            v72 = v73;
            if (v73)
            {
              *((_QWORD *)v70 - 3) = v72;
              operator delete(v72);
            }
            v70 = v71;
          }
          while (v71 != v49);
        }
      }
      v122 = v49;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      __p[0] = &v119;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
    v74 = (void *)*((_QWORD *)v122 - 4);
    v112 = v122 - 2;
    v75 = *((float *)v122 - 2);
    if (v74)
    {
      *((_QWORD *)v122 - 3) = v74;
      operator delete(v74);
    }
    v122 = v112;
    for (i = v121; i != v112; i += 2)
    {
      memset(__p, 0, 24);
      v77 = *(uint64_t **)i;
      v78 = (uint64_t *)*((_QWORD *)i + 1);
      if (*(uint64_t **)i == v78)
      {
        v80 = 0.0;
      }
      else
      {
        v79 = 0;
        v80 = 0.0;
        do
        {
          v81 = *v77;
          v82 = *(float *)(*v77 + 32);
          if (v79 >= __p[2])
          {
            v83 = 0xAAAAAAAAAAAAAAABLL * ((v79 - (char *)__p[0]) >> 3);
            v84 = v83 + 1;
            if (v83 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3) > v84)
              v84 = 0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[2] - (char *)__p[0]) >> 3) >= 0x555555555555555)
              v85 = 0xAAAAAAAAAAAAAAALL;
            else
              v85 = v84;
            v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)&__p[2], v85);
            v88 = &v86[24 * v83];
            *(_OWORD *)v88 = *(_OWORD *)v81;
            *((_DWORD *)v88 + 4) = *(_DWORD *)(v81 + 28);
            v90 = (char *)__p[0];
            v89 = (char *)__p[1];
            v91 = v88;
            if (__p[1] != __p[0])
            {
              do
              {
                v92 = *(_OWORD *)(v89 - 24);
                *((_QWORD *)v91 - 1) = *((_QWORD *)v89 - 1);
                *(_OWORD *)(v91 - 24) = v92;
                v91 -= 24;
                v89 -= 24;
              }
              while (v89 != v90);
              v89 = (char *)__p[0];
            }
            v79 = v88 + 24;
            __p[0] = v91;
            __p[1] = v88 + 24;
            __p[2] = &v86[24 * v87];
            if (v89)
              operator delete(v89);
          }
          else
          {
            *(_OWORD *)v79 = *(_OWORD *)v81;
            *((_DWORD *)v79 + 4) = *(_DWORD *)(v81 + 28);
            v79 += 24;
          }
          __p[1] = v79;
          v80 = v80 + (float)(a8 * v82);
          ++v77;
        }
        while (v77 != v78);
      }
      *(float *)&v119 = v80 - v17;
      v93 = v138;
      if ((unint64_t)v138 >= v139)
      {
        v94 = std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,float>(&v137, (__int128 **)__p, &v119);
      }
      else
      {
        *(_QWORD *)v138 = 0;
        *((_QWORD *)v93 + 1) = 0;
        *((_QWORD *)v93 + 2) = 0;
        std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v93, (__int128 *)__p[0], (__int128 *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
        *((_DWORD *)v93 + 6) = LODWORD(v119);
        v94 = (uint64_t)(v93 + 32);
      }
      v138 = (char *)v94;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    v95 = v137;
    v96 = v138;
    for (j = v103; (char *)v95 != v96; v95 += 32)
    {
      v97 = *(float *)(v95 + 24);
      if (v97 != 0.0)
      {
        v98 = v97 - v75;
        v99 = exp(v98);
        if (v98 <= -10.0)
        {
          v101 = v98 + v99 * -0.5 + v99 * v99 / 24.0 + pow(v99, 4.0) / -2880.0;
        }
        else
        {
          v100 = expm1(-v99);
          v101 = log(-v100);
        }
        v102 = v101;
        *(float *)(v95 + 24) = v102;
      }
    }
    __p[0] = &v121;
    std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v51 = v137;
    v50 = v138;
  }
  else
  {
    v51 = v137;
    v50 = v138;
    if (a4 > (unint64_t)((uint64_t)&v138[-v137] >> 5))
    {
      v109 = a2;
      v111 = a3;
      v107 = v14;
      do
      {
        memset(&__p[1], 0, 88);
        __p[0] = &off_1E7BE9390;
        __p[12] = &off_1E7BE9260;
        v115 = 0u;
        v116 = 0u;
        v117 = 0;
        v118 = 1024;
        sentencepiece::unigram::Lattice::SetSentence((uint64_t)__p, a2, a3);
        sentencepiece::unigram::Model::PopulateNodes(v14, (sentencepiece::unigram::Lattice *)__p);
        v121 = 0;
        v122 = 0;
        v123 = 0;
        sentencepiece::unigram::Lattice::Sample((sentencepiece::unigram::Lattice *)__p, a8, (void **)&v119);
        v53 = v119;
        v52 = v120;
        v54 = 0.0;
        if (*(_QWORD *)&v119 != *(_QWORD *)&v120)
        {
          v55 = v122;
          do
          {
            v56 = **(_QWORD **)&v53;
            if (v55 >= (__int128 *)v123)
            {
              v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (char *)v121) >> 3);
              v58 = v57 + 1;
              if (v57 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((v123 - (char *)v121) >> 3) > v58)
                v58 = 0x5555555555555556 * ((v123 - (char *)v121) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v123 - (char *)v121) >> 3) >= 0x555555555555555)
                v59 = 0xAAAAAAAAAAAAAAALL;
              else
                v59 = v58;
              v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)&v123, v59);
              v62 = &v60[24 * v57];
              *(_OWORD *)v62 = *(_OWORD *)v56;
              *((_DWORD *)v62 + 4) = *(_DWORD *)(v56 + 28);
              v64 = v121;
              v63 = v122;
              v65 = (__int128 *)v62;
              if (v122 != v121)
              {
                do
                {
                  v66 = *(__int128 *)((char *)v63 - 24);
                  *((_QWORD *)v65 - 1) = *((_QWORD *)v63 - 1);
                  *(__int128 *)((char *)v65 - 24) = v66;
                  v65 = (__int128 *)((char *)v65 - 24);
                  v63 = (__int128 *)((char *)v63 - 24);
                }
                while (v63 != v64);
                v63 = v121;
              }
              v55 = (__int128 *)(v62 + 24);
              v121 = v65;
              v122 = (__int128 *)(v62 + 24);
              v123 = &v60[24 * v61];
              if (v63)
                operator delete(v63);
            }
            else
            {
              *v55 = *(_OWORD *)v56;
              *((_DWORD *)v55 + 4) = *(_DWORD *)(v56 + 28);
              v55 = (__int128 *)((char *)v55 + 24);
            }
            v122 = v55;
            v54 = v54 + (float)(a8 * *(float *)(v56 + 32));
            *(_QWORD *)&v53 += 8;
          }
          while (*(_QWORD *)&v53 != *(_QWORD *)&v52);
        }
        v113 = v54 - v17;
        v67 = v138;
        if ((unint64_t)v138 >= v139)
        {
          v68 = std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,float>(&v137, &v121, &v113);
        }
        else
        {
          *(_QWORD *)v138 = 0;
          *((_QWORD *)v67 + 1) = 0;
          *((_QWORD *)v67 + 2) = 0;
          std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v67, v121, v122, 0xAAAAAAAAAAAAAAABLL * (((char *)v122 - (char *)v121) >> 3));
          *((float *)v67 + 6) = v113;
          v68 = (uint64_t)(v67 + 32);
        }
        a2 = v109;
        a3 = v111;
        v14 = v107;
        v138 = (char *)v68;
        if (v119 != 0.0)
        {
          v120 = v119;
          operator delete(*(void **)&v119);
        }
        if (v121)
        {
          v122 = v121;
          operator delete(v121);
        }
        sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)__p);
        v51 = v137;
        v50 = v138;
      }
      while (a4 > (unint64_t)((uint64_t)&v138[-v137] >> 5));
    }
  }
  *j = v51;
  j[1] = (uint64_t)v50;
  j[2] = v139;
  j = &v137;
LABEL_113:
  *j = 0;
  j[1] = 0;
  j[2] = 0;
  if (v124[0])
  {
    v124[1] = v124[0];
    operator delete(v124[0]);
  }
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&v125);
  v125 = (void **)&v137;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](&v125);
}

void sub_1C21DAABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *__p, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void **a44)
{
  uint64_t v44;
  uint64_t v45;
  void *v47;

  if (__p)
  {
    a17 = __p;
    operator delete(__p);
  }
  __p = &a35;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a38;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v47 = *(void **)(v44 + 200);
  if (v47)
  {
    *(_QWORD *)(v44 + 208) = v47;
    operator delete(v47);
  }
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&a44);
  a44 = (void **)(v45 - 160);
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](&a44);
  _Unwind_Resume(a1);
}

float sentencepiece::unigram::Model::CalculateEntropy(sentencepiece::unigram::Model *a1, unsigned __int8 *a2, uint64_t a3, float a4)
{
  float v6;
  void (**v8)(sentencepiece::unigram::Lattice *__hidden);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v8 = &off_1E7BE9390;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0;
  v15 = &off_1E7BE9260;
  v16 = 0u;
  v17 = 0u;
  v18 = 0;
  v19 = 1024;
  sentencepiece::unigram::Lattice::SetSentence((uint64_t)&v8, a2, a3);
  sentencepiece::unigram::Model::PopulateNodes(a1, (sentencepiece::unigram::Lattice *)&v8);
  v6 = sentencepiece::unigram::Lattice::CalculateEntropy((sentencepiece::unigram::Lattice *)&v8, a4);
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&v8);
  return v6;
}

void sub_1C21DACC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)va);
  _Unwind_Resume(a1);
}

BOOL sentencepiece::unigram::Model::VerifyOutputsEquivalent(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  sentencepiece::logging *v26;
  float v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  _BYTE *v45;
  void *__p;
  _QWORD *v47;
  uint64_t v48;
  char __s[2];

  strcpy(__s, " ");
  v10 = strlen(__s);
  absl::internal::Splitter::Splitter((char **)&v44, a2, a3, (unsigned __int8 *)__s, v10, 0);
  v47 = 0;
  v48 = 0;
  __p = 0;
  std::vector<std::string_view>::__init_with_size[abi:ne180100]<std::string_view*,std::string_view*>(&__p, v44, (uint64_t)v45, (v45 - (_BYTE *)v44) >> 4);
  v11 = __p;
  v12 = v47;
  if (__p == v47)
  {
    v14 = 0.0;
    if (__p)
    {
LABEL_11:
      v47 = v11;
      operator delete(v11);
    }
  }
  else
  {
    v13 = *(float *)(a1 + 104) + -10.0;
    v14 = 0.0;
    do
    {
      v15 = v11[1];
      v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, *v11, v15);
      if ((_DWORD)v16 == *(_DWORD *)(a1 + 88))
      {
        v14 = v13 + v14;
      }
      else
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v16))
          v17 = (float)(*(float *)(a1 + 108) * (float)(int)v15) + -0.1;
        else
          v17 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v16);
        v14 = v17 + v14;
      }
      v11 += 2;
    }
    while (v11 != v12);
    v11 = __p;
    if (__p)
      goto LABEL_11;
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  strcpy(__s, " ");
  v18 = strlen(__s);
  absl::internal::Splitter::Splitter((char **)&v44, a4, a5, (unsigned __int8 *)__s, v18, 0);
  v42 = 0;
  v43 = 0;
  v41 = 0;
  std::vector<std::string_view>::__init_with_size[abi:ne180100]<std::string_view*,std::string_view*>(&v41, v44, (uint64_t)v45, (v45 - (_BYTE *)v44) >> 4);
  v19 = v41;
  v20 = v42;
  if (v41 != v42)
  {
    v21 = *(float *)(a1 + 104) + -10.0;
    v22 = 0.0;
    do
    {
      v23 = v19[1];
      v24 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, *v19, v23);
      if ((_DWORD)v24 == *(_DWORD *)(a1 + 88))
      {
        v22 = v21 + v22;
      }
      else
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v24))
          v25 = (float)(*(float *)(a1 + 108) * (float)(int)v23) + -0.1;
        else
          v25 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v24);
        v22 = v25 + v22;
      }
      v19 += 2;
    }
    while (v19 != v20);
    v19 = v41;
    if (!v41)
      goto LABEL_25;
    goto LABEL_24;
  }
  v22 = 0.0;
  if (v41)
  {
LABEL_24:
    v42 = v19;
    operator delete(v19);
  }
LABEL_25:
  v26 = (sentencepiece::logging *)v44;
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  v27 = vabds_f32(v14, v22);
  if (v27 > 0.0000001 && (int)sentencepiece::logging::GetMinLogLevel(v26) <= 1)
  {
    LOBYTE(v44) = 0;
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"(", 1);
    v29 = (_QWORD *)std::ostream::operator<<();
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)") ", 2);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"LOG(", 4);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"WARNING", 7);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)") ", 2);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Two sentence piece sequences are not equivalent! Left: ", 55);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, a2, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", Score: ", 9);
    v36 = (_QWORD *)std::ostream::operator<<();
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)". Right: ", 9);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, a4, a5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)", Score: ", 9);
    v39 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)".", 1);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v44);
  }
  return v27 <= 0.0000001;
}

void sub_1C21DB0A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Model::MemoryMappableString(sentencepiece::unigram::Model *this@<X0>, std::string *a2@<X8>)
{
  std::string *p_p;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string __p;
  std::string v13;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  sentencepiece::ModelInterface::MemoryMappableString(this, &v13);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(p_p->__r_.__value_.__l.__data_) = *((_DWORD *)this + 26);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &__p;
  else
    v5 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &__p;
  else
    v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(v7->__r_.__value_.__l.__data_) = *((_DWORD *)this + 27);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &__p;
  else
    v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v9 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v13;
  else
    v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    v11 = v13.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_1C21DB240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::unigram::Model::IsSampleEncodeAvailable(sentencepiece::unigram::Model *this)
{
  return 1;
}

uint64_t sentencepiece::unigram::Model::IsNBestEncodeAvailable(sentencepiece::unigram::Model *this)
{
  return 1;
}

uint64_t sentencepiece::unigram::Model::IsSampleEncodeAndScoreAvailable(sentencepiece::unigram::Model *this)
{
  return 1;
}

uint64_t sentencepiece::unigram::Model::IsCalculateEntropyAvailable(sentencepiece::unigram::Model *this)
{
  return 1;
}

_QWORD *std::vector<sentencepiece::unigram::Lattice::Node *>::__init_with_size[abi:ne180100]<sentencepiece::unigram::Lattice::Node **,sentencepiece::unigram::Lattice::Node **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C21DB314(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(uint64_t a1, _BYTE *a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  unsigned int *v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  int *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  BOOL v31;
  unsigned __int32 v32;
  int i;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  __n128 v41;
  int v42;
  _OWORD v43[2];
  __int128 v44;

  v9 = *(unsigned int **)(a1 + 16);
  v10 = *v9;
  if (a5)
  {
    v11 = *a2;
    v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v11;
    v10 = v9[v12];
    if ((v10 & 0x800000FF) == v11)
    {
      v13 = a5 - 1;
      v14 = a2 + 1;
      while (1)
      {
        v15 = v12;
        if (!v13)
          goto LABEL_16;
        v16 = *v14++;
        v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v16;
        v10 = v9[v12];
        --v13;
        if ((v10 & 0x800000FF) != v16)
          goto LABEL_14;
      }
    }
  }
  else
  {
    v17 = *a2;
    if (!*a2)
    {
      v15 = 0;
      LODWORD(v12) = 0;
LABEL_16:
      if ((v10 & 0x100) != 0)
        v22 = v9[(v10 >> 10 << ((v10 >> 6) & 8)) ^ v12] & 0x7FFFFFFF;
      else
        v22 = -1;
      goto LABEL_19;
    }
    v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v17;
    v10 = v9[v18];
    if ((v10 & 0x800000FF) == v17)
    {
      v19 = a2 + 1;
      LODWORD(v12) = v18;
      while (1)
      {
        v15 = v18;
        v21 = *v19++;
        v20 = v21;
        if (!v21)
          goto LABEL_16;
        v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v20;
        v10 = v9[v18];
        LODWORD(v12) = v18;
        if ((v10 & 0x800000FF) != v20)
          goto LABEL_14;
      }
    }
  }
  v15 = 0;
LABEL_14:
  v22 = -2;
LABEL_19:
  v44 = 0u;
  memset(v43, 0, sizeof(v43));
  v41.n128_u32[0] = 0;
  v41.n128_u64[1] = v15;
  v42 = v22;
  std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::push_back(v43, &v41);
  v23 = *((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v24 = 0;
    do
    {
      v25 = (int *)(*(_QWORD *)(*((_QWORD *)&v43[0] + 1) + 8 * ((unint64_t)v44 / 0xAA))
                  + 24 * ((unint64_t)v44 % 0xAA));
      v26 = *v25;
      v27 = v25[2];
      v28 = v25[4];
      *(_QWORD *)&v44 = v44 + 1;
      *((_QWORD *)&v44 + 1) = v23 - 1;
      if ((unint64_t)v44 >= 0x154)
      {
        operator delete(**((void ***)&v43[0] + 1));
        *((_QWORD *)&v43[0] + 1) += 8;
        *(_QWORD *)&v44 = v44 - 170;
      }
      if ((v28 & 0x80000000) == 0)
      {
        v29 = a3 + 16 * v24;
        *(_DWORD *)v29 = v28;
        *(_QWORD *)(v29 + 8) = a5;
        ++v24;
      }
      v31 = a6 >= 0 && v26 > a6;
      if (v24 >= a4 || v31)
        break;
      if (v28 != -2)
      {
        v32 = v26 + 1;
        for (i = 1; i != 256; ++i)
        {
          v34 = *(_QWORD *)(a1 + 16);
          v35 = (*(_DWORD *)(v34 + 4 * v27) >> 10 << ((*(_DWORD *)(v34 + 4 * v27) >> 6) & 8)) ^ v27 ^ i;
          v36 = *(_DWORD *)(v34 + 4 * v35);
          if (i == (v36 & 0x800000FF))
          {
            if ((v36 & 0x100) != 0)
              v37 = *(_DWORD *)(v34 + 4 * ((v36 >> 10 << ((v36 >> 6) & 8)) ^ v35)) & 0x7FFFFFFF;
            else
              v37 = -1;
            v41.n128_u32[0] = v32;
            v41.n128_u64[1] = v35;
            v42 = v37;
            std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::push_back(v43, &v41);
          }
        }
      }
      v23 = *((_QWORD *)&v44 + 1);
    }
    while (*((_QWORD *)&v44 + 1));
  }
  else
  {
    v24 = 0;
  }
  std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::~deque[abi:ne180100](v43);
  return v24;
}

void sub_1C21DB61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::__append((void **)a1, a2 - v2);
  }
}

__n128 std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::push_back(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (__n128 *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *v8 = result;
  ++a1[5];
  return result;
}

void std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1C21DB9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *> &>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *> &>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 85;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 170;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

void std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::aobject>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

_QWORD *std::vector<std::string_view>::__init_with_size[abi:ne180100]<std::string_view*,std::string_view*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C21DC0C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::~FreeList(_QWORD *a1)
{
  sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::~FreeList(a1);
  JUMPOUT(0x1C3BB9B44);
}

_QWORD *sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::~FreeList(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E7BE9260;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x1C3BB9B20](*v2, 0x1070C8005A2B047);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1C21DC2D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<sentencepiece::unigram::Lattice::Node *>>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<sentencepiece::unigram::Lattice::Node *>>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<sentencepiece::unigram::Lattice::Node *>>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<sentencepiece::unigram::Lattice::Node *>>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> const*,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> const*,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<sentencepiece::unigram::Lattice::Node *>::__init_with_size[abi:ne180100]<sentencepiece::unigram::Lattice::Node **,sentencepiece::unigram::Lattice::Node **>((_QWORD *)v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1C21DC4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>::operator()[abi:ne180100](a1);
  return a1;
}

void sentencepiece::model::FreeList<sentencepiece::unigram::`anonymous namespace'::Hypothesis>::~FreeList(_QWORD *a1)
{
  JUMPOUT(0x1C3BB9B44);
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,sentencepiece::unigram::Lattice::NBest(unsigned long,BOOL,float)::HypothesisComparator &,std::__wrap_iter<sentencepiece::unigram::`anonymous namespace'::Hypothesis **>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  _QWORD *v10;

  if (a3 >= 2)
  {
    v3 = (unint64_t)(a3 - 2) >> 1;
    v4 = (_QWORD *)(result + 8 * v3);
    v5 = *v4;
    v8 = *(_QWORD *)(a2 - 8);
    v6 = (_QWORD *)(a2 - 8);
    v7 = v8;
    v9 = *(float *)(v8 + 16);
    if (*(float *)(*v4 + 16) < v9)
    {
      do
      {
        v10 = v4;
        *v6 = v5;
        if (!v3)
          break;
        v3 = (v3 - 1) >> 1;
        v4 = (_QWORD *)(result + 8 * v3);
        v5 = *v4;
        v6 = v10;
      }
      while (*(float *)(*v4 + 16) < v9);
      *v10 = v7;
    }
  }
  return result;
}

uint64_t std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD v19[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      v14 = 32 * a2;
      v15 = v7 + 32 * a2;
      do
      {
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        v7 += 32;
        v14 -= 32;
      }
      while (v14);
      v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - *a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v19[4] = result;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::vector<std::string>,float>>>(result, v12);
    else
      v13 = 0;
    v16 = &v13[32 * v10];
    v19[0] = v13;
    v19[1] = v16;
    v19[3] = &v13[32 * v12];
    v17 = 32 * a2;
    v18 = &v16[32 * a2];
    do
    {
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_DWORD *)v16 + 6) = 0;
      *((_QWORD *)v16 + 2) = 0;
      v16 += 32;
      v17 -= 32;
    }
    while (v17);
    v19[2] = v18;
    std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::__swap_out_circular_buffer(a1, v19);
    return std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v19);
  }
  return result;
}

void sub_1C21DC6AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1C21DC874(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<std::string_view,int>>&,float const&>(uint64_t a1, __int128 **a2, float *a3)
{
  uint64_t v5;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>((char *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_1C21DC8F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,float const&>(uint64_t *a1, __int128 **a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::vector<std::string>,float>>>(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1C21DC9F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,double>(uint64_t *a1, __int128 **a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  float v14;
  uint64_t v15;
  _QWORD v17[2];
  char *v18;
  char *v19;
  uint64_t *v20;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v20 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::vector<std::string>,float>>>(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v17[0] = v12;
  v17[1] = v13;
  v18 = v13;
  v19 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v14 = *a3;
  *((float *)v13 + 6) = v14;
  v18 += 32;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__swap_out_circular_buffer(a1, v17);
  v15 = a1[1];
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1C21DCC58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<std::string_view,int>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1C21DCCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<sentencepiece::unigram::Lattice::Node *>::__assign_with_size[abi:ne180100]<sentencepiece::unigram::Lattice::Node **,sentencepiece::unigram::Lattice::Node **>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<double>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t std::__find_impl[abi:ne180100]<std::vector<sentencepiece::unigram::Lattice::Node *> *,std::vector<sentencepiece::unigram::Lattice::Node *> *,std::vector<sentencepiece::unigram::Lattice::Node *>,std::__identity>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const void *v5;
  size_t v6;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *(const void **)a3;
    v6 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    while (*(_QWORD *)(v3 + 8) - *(_QWORD *)v3 != v6 || memcmp(*(const void **)v3, v5, v6))
    {
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

__n128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,0>(__n128 *a1, __n128 *a2, uint64_t a3)
{
  __n128 *v4;
  __n128 *v5;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    std::vector<sentencepiece::unigram::Lattice::Node *>::__move_assign(a3, v4);
    *(_DWORD *)(a3 + 24) = v4[1].n128_u32[2];
    a3 += 32;
    v4 += 2;
  }
  while (v4 != v5);
  return v5;
}

__n128 std::vector<sentencepiece::unigram::Lattice::Node *>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,float>(uint64_t *a1, __int128 **a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::vector<std::string>,float>>>(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1C21DD030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

sentencepiece::character::Model *sentencepiece::character::Model::Model(sentencepiece::character::Model *this, const sentencepiece::ModelProto *a2)
{
  sentencepiece::ModelInterface *v4;

  v4 = sentencepiece::ModelInterface::ModelInterface(this);
  *(_QWORD *)v4 = &off_1E7BE93B0;
  *((_QWORD *)v4 + 1) = (char *)a2 + 16;
  sentencepiece::ModelInterface::InitializePieces(v4);
  return this;
}

void sub_1C21DD080(_Unwind_Exception *a1)
{
  sentencepiece::ModelInterface *v1;

  sentencepiece::ModelInterface::~ModelInterface(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::character::Model::~Model(sentencepiece::character::Model *this)
{
  sentencepiece::ModelInterface::~ModelInterface(this);
  JUMPOUT(0x1C3BB9B44);
}

void sentencepiece::character::Model::Encode(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  uint64_t v8;
  int v9;
  int v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 16))(&v25);
  if (v25)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v25);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v25);
  if (!a3)
    goto LABEL_3;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  do
  {
    v8 = (int)sentencepiece::normalizer::PrefixMatcher::PrefixMatch(a1[2], a2, a3, 0);
    v9 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(*a1 + 112))(a1, a2, v8);
    v10 = v9;
    v12 = (char *)a4[1];
    v11 = (char *)a4[2];
    if (v12 >= v11)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (_BYTE *)*a4) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)*a4) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)(a4 + 2), v17);
      v20 = &v18[24 * v14];
      *(_QWORD *)v20 = a2;
      *((_QWORD *)v20 + 1) = v8;
      *((_DWORD *)v20 + 4) = v10;
      v22 = (char *)*a4;
      v21 = (char *)a4[1];
      v23 = v20;
      if (v21 != *a4)
      {
        do
        {
          v24 = *(_OWORD *)(v21 - 24);
          *((_QWORD *)v23 - 1) = *((_QWORD *)v21 - 1);
          *(_OWORD *)(v23 - 24) = v24;
          v23 -= 24;
          v21 -= 24;
        }
        while (v21 != v22);
        v21 = (char *)*a4;
      }
      v13 = v20 + 24;
      *a4 = v23;
      a4[1] = v20 + 24;
      a4[2] = &v18[24 * v19];
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_QWORD *)v12 = a2;
      *((_QWORD *)v12 + 1) = v8;
      v13 = v12 + 24;
      *((_DWORD *)v12 + 4) = v9;
    }
    a4[1] = v13;
    a2 += v8;
    a3 -= v8;
  }
  while (a3);
}

void sub_1C21DD280(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

sentencepiece::word::Model *sentencepiece::word::Model::Model(sentencepiece::word::Model *this, const sentencepiece::ModelProto *a2)
{
  sentencepiece::ModelInterface *v4;

  v4 = sentencepiece::ModelInterface::ModelInterface(this);
  *(_QWORD *)v4 = &off_1E7BE9150;
  *((_QWORD *)v4 + 1) = (char *)a2 + 16;
  sentencepiece::ModelInterface::InitializePieces(v4);
  return this;
}

void sub_1C21DD2E0(_Unwind_Exception *a1)
{
  sentencepiece::ModelInterface *v1;

  sentencepiece::ModelInterface::~ModelInterface(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::word::Model::~Model(sentencepiece::word::Model *this)
{
  sentencepiece::ModelInterface::~ModelInterface(this);
  JUMPOUT(0x1C3BB9B44);
}

void sentencepiece::word::Model::Encode(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  int v10;
  int v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  unsigned __int8 **v26;
  unsigned __int8 **v27;

  (*(void (**)(unsigned __int8 ***__return_ptr))(*(_QWORD *)a1 + 16))(&v26);
  if (v26)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v26);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v26);
  if (!a3)
    goto LABEL_3;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sentencepiece::SplitIntoWords(a2, a3, 0, 0, &v26);
  v8 = v26;
  v9 = v27;
  if (v26 != v27)
  {
    do
    {
      v10 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, unsigned __int8 *))(*(_QWORD *)a1 + 112))(a1, *v8, v8[1]);
      v11 = v10;
      v13 = (char *)a4[1];
      v12 = (char *)a4[2];
      if (v13 >= v12)
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (_BYTE *)*a4) >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v17 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (_BYTE *)*a4) >> 3);
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v16;
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)(a4 + 2), v18);
        v21 = &v19[24 * v15];
        *(_OWORD *)v21 = *(_OWORD *)v8;
        *((_DWORD *)v21 + 4) = v11;
        v23 = (char *)*a4;
        v22 = (char *)a4[1];
        v24 = v21;
        if (v22 != *a4)
        {
          do
          {
            v25 = *(_OWORD *)(v22 - 24);
            *((_QWORD *)v24 - 1) = *((_QWORD *)v22 - 1);
            *(_OWORD *)(v24 - 24) = v25;
            v24 -= 24;
            v22 -= 24;
          }
          while (v22 != v23);
          v22 = (char *)*a4;
        }
        v14 = v21 + 24;
        *a4 = v24;
        a4[1] = v21 + 24;
        a4[2] = &v19[24 * v20];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_OWORD *)v13 = *(_OWORD *)v8;
        *((_DWORD *)v13 + 4) = v10;
        v14 = v13 + 24;
      }
      a4[1] = v14;
      v8 += 2;
    }
    while (v8 != v9);
    v8 = v26;
  }
  if (v8)
  {
    v27 = v8;
    operator delete(v8);
  }
}

void sub_1C21DD504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void InitDefaultsscc_info_NBestSentencePieceText_sentencepiece_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", a4);
  sentencepiece::NBestSentencePieceText::NBestSentencePieceText((uint64_t)&sentencepiece::_NBestSentencePieceText_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_NBestSentencePieceText_default_instance_, v4);
}

void InitDefaultsscc_info_SentencePieceText_sentencepiece_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", a4);
  sentencepiece::SentencePieceText::SentencePieceText((uint64_t)&sentencepiece::_SentencePieceText_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_SentencePieceText_default_instance_, v4);
}

void InitDefaultsscc_info_SentencePieceText_SentencePiece_sentencepiece_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", a4);
  sentencepiece::SentencePieceText_SentencePiece::SentencePieceText_SentencePiece((uint64_t)&sentencepiece::_SentencePieceText_SentencePiece_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_SentencePieceText_SentencePiece_default_instance_, v4);
}

void sentencepiece::SentencePieceText_SentencePiece::Clear(sentencepiece::SentencePieceText_SentencePiece *this)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16));
  v2 = *((_DWORD *)this + 10);
  if ((v2 & 3) != 0)
  {
    if ((v2 & 1) != 0)
    {
      v3 = *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v3 + 23) < 0)
      {
        **(_BYTE **)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
        if ((v2 & 2) == 0)
          goto LABEL_11;
        goto LABEL_6;
      }
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
    if ((v2 & 2) == 0)
      goto LABEL_11;
LABEL_6:
    v4 = *((_QWORD *)this + 7) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
LABEL_11:
  if ((v2 & 0x1C) != 0)
  {
    *((_DWORD *)this + 18) = 0;
    *((_QWORD *)this + 8) = 0;
  }
  *((_DWORD *)this + 10) = 0;
  v5 = *((_QWORD *)this + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 31) < 0)
    {
      **(_BYTE **)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v6 + 8) = 0;
      *(_BYTE *)(v6 + 31) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::SentencePieceText_SentencePiece::_InternalParse(sentencepiece::SentencePieceText_SentencePiece *this, google::protobuf::internal *a2, int32x2_t *a3)
{
  int v5;
  _QWORD *v7;
  google::protobuf::internal *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  google::protobuf::internal::ArenaImpl *v12;
  uint64_t **v13;
  google::protobuf::internal *v14;
  const char *v15;
  int v16;
  uint64_t v17;
  std::string *v18;
  google::protobuf::internal *v19;
  google::protobuf::internal *v20;
  const char *v21;
  int v22;
  google::protobuf::internal *v23;
  const char *v24;
  int v25;
  BOOL v26;
  google::protobuf::internal *TagFallback;
  unsigned int v28;
  std::string *v29;
  google::protobuf::internal *v30;
  int v31;
  google::protobuf::internal *v32;
  int v33;
  google::protobuf::internal *v34;
  int v35;
  google::protobuf::internal *v36;

  v36 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v36, a3[11].i32[1]) & 1) == 0)
  {
    v7 = (_QWORD *)((char *)this + 8);
    while (1)
    {
      v8 = (google::protobuf::internal *)((char *)v36 + 1);
      v9 = *(unsigned __int8 *)v36;
      if (*(char *)v36 < 0)
      {
        v10 = v9 + (*(unsigned __int8 *)v8 << 7);
        v9 = v10 - 128;
        if (*(char *)v8 < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v36, (const char *)(v10 - 128));
          v36 = TagFallback;
          if (!TagFallback)
            goto LABEL_56;
          v8 = TagFallback;
          v9 = v28;
          goto LABEL_8;
        }
        v8 = (google::protobuf::internal *)((char *)v36 + 2);
      }
      v36 = v8;
LABEL_8:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10)
            goto LABEL_37;
          *((_DWORD *)this + 10) |= 1u;
          v11 = *((_QWORD *)this + 1);
          v12 = (google::protobuf::internal::ArenaImpl *)(v11 & 0xFFFFFFFFFFFFFFFELL);
          if ((v11 & 1) != 0)
            v12 = *(google::protobuf::internal::ArenaImpl **)v12;
          v13 = (uint64_t **)((char *)this + 48);
          goto LABEL_22;
        case 2u:
          if (v9 != 16)
            goto LABEL_37;
          v5 |= 4u;
          v14 = (google::protobuf::internal *)((char *)v8 + 1);
          LODWORD(v15) = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0)
            goto LABEL_17;
          v16 = *(char *)v14;
          v15 = (const char *)(v15 + (v16 << 7) - 128);
          if (v16 < 0)
          {
            v30 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow32(v8, v15);
            v36 = v30;
            *((_DWORD *)this + 16) = v31;
            if (!v30)
              goto LABEL_56;
          }
          else
          {
            v14 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_17:
            v36 = v14;
            *((_DWORD *)this + 16) = (_DWORD)v15;
          }
          goto LABEL_35;
        case 3u:
          if (v9 != 26)
            goto LABEL_37;
          *((_DWORD *)this + 10) |= 2u;
          v17 = *((_QWORD *)this + 1);
          v12 = (google::protobuf::internal::ArenaImpl *)(v17 & 0xFFFFFFFFFFFFFFFELL);
          if ((v17 & 1) != 0)
            v12 = *(google::protobuf::internal::ArenaImpl **)v12;
          v13 = (uint64_t **)((char *)this + 56);
LABEL_22:
          v18 = (std::string *)google::protobuf::internal::ArenaStringPtr::Mutable(v13, v12);
          v19 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v18, (std::string::value_type *)v36, (uint64_t)a3);
          goto LABEL_23;
        case 4u:
          if (v9 != 32)
            goto LABEL_37;
          v5 |= 8u;
          v20 = (google::protobuf::internal *)((char *)v8 + 1);
          LODWORD(v21) = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0)
            goto LABEL_29;
          v22 = *(char *)v20;
          v21 = (const char *)(v21 + (v22 << 7) - 128);
          if (v22 < 0)
          {
            v32 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow32(v8, v21);
            v36 = v32;
            *((_DWORD *)this + 17) = v33;
            if (!v32)
              goto LABEL_56;
          }
          else
          {
            v20 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_29:
            v36 = v20;
            *((_DWORD *)this + 17) = (_DWORD)v21;
          }
          goto LABEL_35;
        case 5u:
          if (v9 != 40)
            goto LABEL_37;
          v5 |= 0x10u;
          v23 = (google::protobuf::internal *)((char *)v8 + 1);
          LODWORD(v24) = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0)
            goto LABEL_34;
          v25 = *(char *)v23;
          v24 = (const char *)(v24 + (v25 << 7) - 128);
          if (v25 < 0)
          {
            v34 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow32(v8, v24);
            v36 = v34;
            *((_DWORD *)this + 18) = v35;
            if (!v34)
              goto LABEL_56;
          }
          else
          {
            v23 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_34:
            v36 = v23;
            *((_DWORD *)this + 18) = (_DWORD)v24;
          }
          goto LABEL_35;
        default:
LABEL_37:
          if (v9)
            v26 = (v9 & 7) == 4;
          else
            v26 = 1;
          if (v26)
          {
            a3[10].i32[0] = v9 - 1;
            goto LABEL_2;
          }
          if (v9 < 0x640)
          {
            if ((*v7 & 1) != 0)
            {
              v29 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
            }
            else
            {
              v29 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
              v8 = v36;
            }
            v19 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, v29, v8, (google::protobuf::internal::ParseContext *)a3);
          }
          else
          {
            v19 = (google::protobuf::internal *)google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16), v9, v8, (uint64_t)&sentencepiece::_SentencePieceText_SentencePiece_default_instance_, (uint64_t *)this + 1, a3);
          }
LABEL_23:
          v36 = v19;
          if (!v19)
          {
LABEL_56:
            v36 = 0;
            goto LABEL_2;
          }
LABEL_35:
          if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v36, a3[11].i32[1]) & 1) != 0)goto LABEL_2;
          break;
      }
    }
  }
LABEL_2:
  *((_DWORD *)this + 10) |= v5;
  return v36;
}

unsigned __int8 *sentencepiece::SentencePieceText_SentencePiece::_InternalSerialize(sentencepiece::SentencePieceText_SentencePiece *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = a2;
  v6 = *((_DWORD *)this + 10);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 4) == 0)
      goto LABEL_3;
LABEL_11:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v8 = *((_DWORD *)this + 16);
    *v4 = 16;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v10 | 0x80;
          v13 = v10 >> 7;
          ++v4;
          v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        *(v4 - 1) = v13;
        if ((v6 & 2) != 0)
          goto LABEL_27;
      }
      else
      {
        v4[2] = v10;
        v4 += 3;
        if ((v6 & 2) != 0)
          goto LABEL_27;
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
      if ((v6 & 2) != 0)
        goto LABEL_27;
    }
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v6 & 4) != 0)
    goto LABEL_11;
LABEL_3:
  if ((v6 & 2) == 0)
    goto LABEL_4;
LABEL_27:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 7) & 0xFFFFFFFFFFFFFFFELL, v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_39;
    goto LABEL_6;
  }
LABEL_28:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v15 = *((_DWORD *)this + 17);
  *v4 = 32;
  if (v15 > 0x7F)
  {
    v4[1] = v15 | 0x80;
    v16 = v15 >> 7;
    if (v15 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v16 | 0x80;
        v17 = v16 >> 7;
        ++v4;
        v18 = v16 >> 14;
        v16 >>= 7;
      }
      while (v18);
      *(v4 - 1) = v17;
      if ((v6 & 0x10) == 0)
        goto LABEL_39;
    }
    else
    {
      v4[2] = v16;
      v4 += 3;
      if ((v6 & 0x10) == 0)
        goto LABEL_39;
    }
  }
  else
  {
    v4[1] = v15;
    v4 += 2;
    if ((v6 & 0x10) == 0)
      goto LABEL_39;
  }
LABEL_6:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v7 = *((_DWORD *)this + 18);
  *v4 = 40;
  if (v7 > 0x7F)
  {
    v4[1] = v7 | 0x80;
    v9 = v7 >> 7;
    if (v7 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v9 | 0x80;
        v11 = v9 >> 7;
        ++v4;
        v12 = v9 >> 14;
        v9 >>= 7;
      }
      while (v12);
      *(v4 - 1) = v11;
    }
    else
    {
      v4[2] = v9;
      v4 += 3;
    }
  }
  else
  {
    v4[1] = v7;
    v4 += 2;
  }
LABEL_39:
  v19 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16), 200, 0x20000000, (unsigned __int8 *)v4, a3);
  v20 = v19;
  v21 = *((_QWORD *)this + 1);
  if ((v21 & 1) == 0)
    return v20;
  v23 = v21 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v23 + 31) < 0)
  {
    v24 = *(void **)(v23 + 8);
    v25 = *(_QWORD *)(v23 + 16);
  }
  else
  {
    v24 = (void *)(v23 + 8);
    LODWORD(v25) = *(unsigned __int8 *)(v23 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)v19 >= (int)v25)
  {
    v26 = (int)v25;
    memcpy(v19, v24, (int)v25);
    v20 += v26;
    return v20;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v24, v25, v19);
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(google::protobuf::io::EpsCopyOutputStream *a1, int a2, uint64_t a3, char *a4)
{
  int64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  const void *v16;

  if (*(char *)(a3 + 23) < 0)
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (v4 > 127)
      return google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a1, a2, (void **)a3, a4);
  }
  else
  {
    v4 = *(unsigned __int8 *)(a3 + 23);
  }
  v5 = 8 * a2;
  v6 = 1;
  v7 = 2;
  v8 = 3;
  v9 = 4;
  if ((8 * a2) >> 28)
    v9 = 5;
  if (v5 >= 0x200000)
    v8 = v9;
  if (v5 >= 0x4000)
    v7 = v8;
  if (v5 >= 0x80)
    v6 = v7;
  if ((uint64_t)(*(_QWORD *)a1 + ~(unint64_t)&a4[v6] + 16) < v4)
    return google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a1, a2, (void **)a3, a4);
  v10 = v5 | 2;
  if ((v5 | 2) > 0x7F)
  {
    *a4 = v5 | 0x82;
    v12 = v5 >> 7;
    if (v10 >> 14)
    {
      v11 = (unsigned __int8 *)(a4 + 2);
      do
      {
        *(v11 - 1) = v12 | 0x80;
        v13 = v12 >> 7;
        ++v11;
        v14 = v12 >> 14;
        v12 >>= 7;
      }
      while (v14);
      *(v11 - 1) = v13;
    }
    else
    {
      a4[1] = v12;
      v11 = (unsigned __int8 *)(a4 + 2);
    }
  }
  else
  {
    *a4 = v10;
    v11 = (unsigned __int8 *)(a4 + 1);
  }
  *v11 = v4;
  v15 = (char *)(v11 + 1);
  if (*(char *)(a3 + 23) >= 0)
    v16 = (const void *)a3;
  else
    v16 = *(const void **)a3;
  memcpy(v15, v16, v4);
  return (unsigned __int8 *)&v15[v4];
}

uint64_t sentencepiece::SentencePieceText_SentencePiece::ByteSizeLong(sentencepiece::SentencePieceText_SentencePiece *this)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  result = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16));
  v3 = *((_DWORD *)this + 10);
  if ((v3 & 0x1F) == 0)
    goto LABEL_8;
  if ((v3 & 1) != 0)
  {
    v5 = *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v7 = v6;
    result += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 2) == 0)
    {
LABEL_4:
      if ((v3 & 4) == 0)
        goto LABEL_5;
LABEL_16:
      result += ((9 * (__clz(*((_DWORD *)this + 16) | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v3 & 8) == 0)
      {
LABEL_6:
        if ((v3 & 0x10) == 0)
          goto LABEL_8;
        goto LABEL_7;
      }
      goto LABEL_17;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_4;
  }
  v8 = *((_QWORD *)this + 7) & 0xFFFFFFFFFFFFFFFELL;
  v9 = *(unsigned __int8 *)(v8 + 23);
  v10 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  result += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 4) != 0)
    goto LABEL_16;
LABEL_5:
  if ((v3 & 8) == 0)
    goto LABEL_6;
LABEL_17:
  result += ((9 * (__clz(*((_DWORD *)this + 17) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 0x10) != 0)
LABEL_7:
    result += ((9 * (__clz(*((_DWORD *)this + 18) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v4 = *((_QWORD *)this + 1);
  if ((v4 & 1) != 0)
  {
    v11 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0)
      v12 = *(_QWORD *)(v11 + 16);
    else
      v12 = *(unsigned __int8 *)(v11 + 31);
    result += v12;
  }
  *((_DWORD *)this + 11) = result;
  return result;
}

void sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom(sentencepiece::SentencePieceText_SentencePiece *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::SentencePieceText_SentencePiece *__hidden))a2 != &off_1E7BE8FC0)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::SentencePieceText_SentencePiece::MergeFrom(this, a2);
}

void sentencepiece::SentencePieceText_SentencePiece::MergeFrom(sentencepiece::SentencePieceText_SentencePiece *this, const sentencepiece::SentencePieceText_SentencePiece *a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  google::protobuf::internal::ArenaImpl *v16;
  __int128 *v17;
  uint64_t v18;
  google::protobuf::internal::ArenaImpl *v19;
  char v20;
  std::string v21[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 375);
    v4 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16), (const sentencepiece::SentencePieceText_SentencePiece *)((char *)a2 + 16));
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  v13 = *((_DWORD *)a2 + 10);
  if ((v13 & 0x1F) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFFFFELL);
      *((_DWORD *)this + 10) |= 1u;
      v15 = *((_QWORD *)this + 1);
      v16 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = *(google::protobuf::internal::ArenaImpl **)v16;
      google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 48), v14, v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0)
          goto LABEL_17;
        goto LABEL_28;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    v17 = (__int128 *)(*((_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 10) |= 2u;
    v18 = *((_QWORD *)this + 1);
    v19 = (google::protobuf::internal::ArenaImpl *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if ((v18 & 1) != 0)
      v19 = *(google::protobuf::internal::ArenaImpl **)v19;
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 56), v17, v19);
    if ((v13 & 4) == 0)
    {
LABEL_17:
      if ((v13 & 8) == 0)
        goto LABEL_18;
      goto LABEL_29;
    }
LABEL_28:
    *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
    if ((v13 & 8) == 0)
    {
LABEL_18:
      if ((v13 & 0x10) == 0)
      {
LABEL_20:
        *((_DWORD *)this + 10) |= v13;
        return;
      }
LABEL_19:
      *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
      goto LABEL_20;
    }
LABEL_29:
    *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
    if ((v13 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
}

void sub_1C21DE11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceText_SentencePiece::IsInitialized(sentencepiece::SentencePieceText_SentencePiece *this)
{
  return google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16));
}

uint64_t *sentencepiece::SentencePieceText_SentencePiece::InternalSwap(sentencepiece::SentencePieceText_SentencePiece *this, sentencepiece::SentencePieceText_SentencePiece *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  google::protobuf::internal::ArenaImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  google::protobuf::internal::ArenaImpl *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *result;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  google::protobuf::internal::ExtensionSet::Swap((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16), (sentencepiece::SentencePieceText_SentencePiece *)((char *)a2 + 16));
  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      v10 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)a2 + 1);
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
LABEL_21:
      v11 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    v7 = 0;
    v8 = *((_DWORD *)this + 10);
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v8;
    v9 = (google::protobuf::internal::ArenaImpl *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_9;
  }
  v10 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
  if ((v4 & 1) == 0)
    goto LABEL_21;
LABEL_6:
  v11 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
LABEL_7:
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(_OWORD *)v11;
  v14 = *(_QWORD *)(v10 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v10;
  *(_QWORD *)(v11 + 16) = v14;
  *(_OWORD *)v10 = v13;
  *(_QWORD *)(v10 + 16) = v12;
  v15 = *((_QWORD *)this + 1);
  LODWORD(v14) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v14;
  v9 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
  if ((v15 & 1) != 0)
  {
    v16 = *(google::protobuf::internal::ArenaImpl **)v9;
    v7 = 1;
    goto LABEL_10;
  }
  v7 = 0;
LABEL_9:
  v16 = v9;
LABEL_10:
  if (*((uint64_t **)this + 6) != &google::protobuf::internal::fixed_address_empty_string
    || *((uint64_t **)a2 + 6) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v17 = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)this + 6, v16);
    v18 = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)a2 + 6, v16);
    v19 = v17[2];
    v20 = *(_OWORD *)v17;
    v21 = v18[2];
    *(_OWORD *)v17 = *(_OWORD *)v18;
    v17[2] = v21;
    *(_OWORD *)v18 = v20;
    v18[2] = v19;
    v7 = *v5 & 1;
    v9 = (google::protobuf::internal::ArenaImpl *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  result = (uint64_t *)((char *)this + 56);
  if (v7)
    v9 = *(google::protobuf::internal::ArenaImpl **)v9;
  if ((uint64_t *)*result != &google::protobuf::internal::fixed_address_empty_string
    || *((uint64_t **)a2 + 7) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v23 = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)result, v9);
    result = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)a2 + 7, v9);
    v24 = v23[2];
    v25 = *(_OWORD *)v23;
    v26 = result[2];
    *(_OWORD *)v23 = *(_OWORD *)result;
    v23[2] = v26;
    *(_OWORD *)result = v25;
    result[2] = v24;
  }
  v27 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v27;
  LODWORD(v27) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v27;
  return result;
}

_QWORD *sentencepiece::SentencePieceText_SentencePiece::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.SentencePieceText.SentencePiece");
}

void *sentencepiece::SentencePieceText::default_instance(sentencepiece::SentencePieceText *this)
{
  if (atomic_load(scc_info_SentencePieceText_sentencepiece_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SentencePieceText_sentencepiece_2eproto);
  return &sentencepiece::_SentencePieceText_default_instance_;
}

google::protobuf::internal *sentencepiece::SentencePieceText::_InternalParse(sentencepiece::SentencePieceText *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  int v5;
  _QWORD *v7;
  google::protobuf::internal *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v13;
  google::protobuf::internal *v14;
  char *v15;
  google::protobuf::internal *v16;
  int *v17;
  uint64_t v18;
  int v19;
  sentencepiece::SentencePieceText_SentencePiece *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  google::protobuf::internal::ArenaImpl *v24;
  std::string *v25;
  google::protobuf::internal *TagFallback;
  unsigned int v27;
  std::string *v28;
  google::protobuf::internal *v29;

  v29 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v29, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    v7 = (_QWORD *)((char *)this + 8);
    while (1)
    {
      v8 = (google::protobuf::internal *)((char *)v29 + 1);
      v9 = *(unsigned __int8 *)v29;
      if ((*(char *)v29 & 0x80000000) == 0)
        goto LABEL_7;
      v10 = v9 + (*(unsigned __int8 *)v8 << 7);
      v9 = v10 - 128;
      if ((*(char *)v8 & 0x80000000) == 0)
        break;
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v29, (const char *)(v10 - 128));
      v29 = TagFallback;
      if (!TagFallback)
        goto LABEL_48;
      v8 = TagFallback;
      v9 = v27;
LABEL_8:
      v11 = v9 >> 3;
      if (v9 >> 3 == 3)
      {
        if (v9 == 29)
        {
          v5 |= 2u;
          *((_DWORD *)this + 20) = *(_DWORD *)v8;
          v29 = (google::protobuf::internal *)((char *)v8 + 4);
          goto LABEL_44;
        }
        goto LABEL_14;
      }
      if (v11 == 2)
      {
        if (v9 == 18)
        {
          v15 = (char *)v8 - 1;
          while (1)
          {
            v16 = (google::protobuf::internal *)(v15 + 1);
            v29 = (google::protobuf::internal *)(v15 + 1);
            v17 = (int *)*((_QWORD *)this + 8);
            if (!v17)
              break;
            v18 = *((int *)this + 14);
            v19 = *v17;
            if ((int)v18 >= *v17)
            {
              if (v19 == *((_DWORD *)this + 15))
              {
LABEL_29:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 12, v19 + 1);
                v17 = (int *)*((_QWORD *)this + 8);
                v19 = *v17;
              }
              *v17 = v19 + 1;
              v20 = (sentencepiece::SentencePieceText_SentencePiece *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*((_QWORD *)this + 6));
              v21 = *((_QWORD *)this + 8);
              v22 = *((int *)this + 14);
              *((_DWORD *)this + 14) = v22 + 1;
              *(_QWORD *)(v21 + 8 * v22 + 8) = v20;
              v16 = v29;
              goto LABEL_31;
            }
            *((_DWORD *)this + 14) = v18 + 1;
            v20 = *(sentencepiece::SentencePieceText_SentencePiece **)&v17[2 * v18 + 2];
LABEL_31:
            v15 = google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SentencePieceText_SentencePiece>(a3, v20, v16);
            v29 = (google::protobuf::internal *)v15;
            if (!v15)
              goto LABEL_48;
            if (*(_QWORD *)a3 <= (unint64_t)v15 || *v15 != 18)
              goto LABEL_44;
          }
          v19 = *((_DWORD *)this + 15);
          goto LABEL_29;
        }
LABEL_14:
        if (v9)
          v13 = (v9 & 7) == 4;
        else
          v13 = 1;
        if (v13)
        {
          *((_DWORD *)a3 + 20) = v9 - 1;
          goto LABEL_2;
        }
        if (v9 < 0x640)
        {
          if ((*v7 & 1) != 0)
          {
            v28 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            v28 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
            v8 = v29;
          }
          v14 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, v28, v8, a3);
        }
        else
        {
          v14 = (google::protobuf::internal *)google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::SentencePieceText *)((char *)this + 16), v9, v8, (uint64_t)&sentencepiece::_SentencePieceText_default_instance_, (uint64_t *)this + 1, (int32x2_t *)a3);
        }
        goto LABEL_43;
      }
      if (v11 != 1 || v9 != 10)
        goto LABEL_14;
      *((_DWORD *)this + 10) |= 1u;
      v23 = *((_QWORD *)this + 1);
      v24 = (google::protobuf::internal::ArenaImpl *)(v23 & 0xFFFFFFFFFFFFFFFELL);
      if ((v23 & 1) != 0)
        v24 = *(google::protobuf::internal::ArenaImpl **)v24;
      v25 = (std::string *)google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)this + 9, v24);
      v14 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v25, (std::string::value_type *)v29, (uint64_t)a3);
LABEL_43:
      v29 = v14;
      if (!v14)
      {
LABEL_48:
        v29 = 0;
        goto LABEL_2;
      }
LABEL_44:
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v29, *((_DWORD *)a3 + 23)) & 1) != 0)
        goto LABEL_2;
    }
    v8 = (google::protobuf::internal *)((char *)v29 + 2);
LABEL_7:
    v29 = v8;
    goto LABEL_8;
  }
LABEL_2:
  *((_DWORD *)this + 10) |= v5;
  return v29;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SentencePieceText_SentencePiece>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::SentencePieceText_SentencePiece *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)sentencepiece::SentencePieceText_SentencePiece::_InternalParse(a2, (google::protobuf::internal *)v8, (int32x2_t *)this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

unsigned __int8 *sentencepiece::SentencePieceText::_InternalSerialize(sentencepiece::SentencePieceText *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  sentencepiece::SentencePieceText_SentencePiece *v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a2;
  v6 = *((_DWORD *)this + 10);
  if ((v6 & 1) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFFFFELL, a2);
  v7 = *((_DWORD *)this + 14);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if (*(_QWORD *)a3 <= (unint64_t)v4)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v9 = (sentencepiece::SentencePieceText_SentencePiece *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((uint64_t)this + 48, i);
      *v4 = 18;
      v10 = *((_DWORD *)v9 + 11);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        v12 = v10 >> 7;
        if (v10 >> 14)
        {
          v11 = v4 + 3;
          do
          {
            *(v11 - 1) = v12 | 0x80;
            v13 = v12 >> 7;
            ++v11;
            v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v11 - 1) = v13;
        }
        else
        {
          v4[2] = v12;
          v11 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v10;
        v11 = v4 + 2;
      }
      v4 = (char *)sentencepiece::SentencePieceText_SentencePiece::_InternalSerialize(v9, v11, a3);
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)v4)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v15 = *((_DWORD *)this + 20);
    *v4 = 29;
    *(_DWORD *)(v4 + 1) = v15;
    v4 += 5;
  }
  v16 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::SentencePieceText *)((char *)this + 16), 200, 0x20000000, (unsigned __int8 *)v4, a3);
  v17 = v16;
  v18 = *((_QWORD *)this + 1);
  if ((v18 & 1) == 0)
    return v17;
  v20 = v18 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v20 + 31) < 0)
  {
    v21 = *(void **)(v20 + 8);
    v22 = *(_QWORD *)(v20 + 16);
  }
  else
  {
    v21 = (void *)(v20 + 8);
    LODWORD(v22) = *(unsigned __int8 *)(v20 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)v16 >= (int)v22)
  {
    v23 = (int)v22;
    memcpy(v16, v21, (int)v22);
    v17 += v23;
    return v17;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v21, v22, v16);
}

uint64_t sentencepiece::SentencePieceText::ByteSizeLong(sentencepiece::SentencePieceText *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sentencepiece::SentencePieceText_SentencePiece **v6;
  uint64_t v7;
  sentencepiece::SentencePieceText_SentencePiece *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;

  v2 = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::SentencePieceText *)((char *)this + 16));
  v3 = *((int *)this + 14);
  v4 = v2 + v3;
  v5 = *((_QWORD *)this + 8);
  if (v5)
    v6 = (sentencepiece::SentencePieceText_SentencePiece **)(v5 + 8);
  else
    v6 = 0;
  if ((_DWORD)v3)
  {
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      v9 = sentencepiece::SentencePieceText_SentencePiece::ByteSizeLong(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  v10 = *((_DWORD *)this + 10);
  if ((v10 & 3) != 0)
  {
    if ((v10 & 1) != 0)
    {
      v11 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFFFFELL;
      v12 = *(unsigned __int8 *)(v11 + 23);
      v13 = *(_QWORD *)(v11 + 8);
      if ((v12 & 0x80u) == 0)
        v13 = v12;
      v4 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v10 & 2) != 0)
      v4 += 5;
  }
  v14 = *((_QWORD *)this + 1);
  if ((v14 & 1) != 0)
  {
    v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v16 + 31) < 0)
      v17 = *(_QWORD *)(v16 + 16);
    else
      v17 = *(unsigned __int8 *)(v16 + 31);
    v4 += v17;
  }
  *((_DWORD *)this + 11) = v4;
  return v4;
}

void sentencepiece::SentencePieceText::CheckTypeAndMergeFrom(sentencepiece::SentencePieceText *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::SentencePieceText *__hidden))a2 != &off_1E7BE8A18)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::SentencePieceText::MergeFrom(this, a2);
}

void sentencepiece::SentencePieceText::MergeFrom(sentencepiece::SentencePieceText *this, const sentencepiece::SentencePieceText *a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  google::protobuf::internal::ArenaImpl *v16;
  char v17;
  std::string v18[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 674);
    v4 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::SentencePieceText *)((char *)this + 16), (const sentencepiece::SentencePieceText *)((char *)a2 + 16));
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((signed int **)this + 6, (uint64_t)a2 + 48);
  v13 = *((_DWORD *)a2 + 10);
  if ((v13 & 3) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFFFFELL);
      *((_DWORD *)this + 10) |= 1u;
      v15 = *((_QWORD *)this + 1);
      v16 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = *(google::protobuf::internal::ArenaImpl **)v16;
      google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::SentencePieceText *)((char *)this + 72), v14, v16);
    }
    if ((v13 & 2) != 0)
      *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
    *((_DWORD *)this + 10) |= v13;
  }
}

void sub_1C21DEB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceText::IsInitialized(sentencepiece::SentencePieceText *this)
{
  uint64_t result;

  result = google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::SentencePieceText *)((char *)this + 16));
  if ((_DWORD)result)
    return google::protobuf::internal::AllAreInitialized<sentencepiece::SentencePieceText_SentencePiece>((uint64_t)this + 48);
  return result;
}

BOOL google::protobuf::internal::AllAreInitialized<sentencepiece::SentencePieceText_SentencePiece>(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  do
  {
    v3 = v2;
    v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4)
      break;
    v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(a1, v2);
  }
  while ((google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v5 + 16)) & 1) != 0);
  return v3 < 1;
}

_QWORD *sentencepiece::SentencePieceText::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.SentencePieceText");
}

uint64_t sentencepiece::NBestSentencePieceText::NBestSentencePieceText(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E7BE8BD0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if (atomic_load(scc_info_NBestSentencePieceText_sentencepiece_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_NBestSentencePieceText_sentencepiece_2eproto);
  return a1;
}

void sub_1C21DEC60(_Unwind_Exception *a1)
{
  google::protobuf::internal::ArenaImpl **v1;

  google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::~RepeatedPtrField(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::NBestSentencePieceText::~NBestSentencePieceText(sentencepiece::NBestSentencePieceText *this)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v3 = (uint64_t *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  v4 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) != 0)
  {
    if (!*v4)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v4)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 755);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  google::protobuf::internal::InternalMetadata::Delete<std::string>(v3);
  google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 2);
}

{
  sentencepiece::NBestSentencePieceText::~NBestSentencePieceText(this);
  JUMPOUT(0x1C3BB9B44);
}

void sub_1C21DED0C(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  __clang_call_terminate(a1);
}

void sentencepiece::NBestSentencePieceText::Clear(sentencepiece::NBestSentencePieceText *this)
{
  uint64_t v2;
  unint64_t v3;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>((uint64_t)this + 16);
  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 31) < 0)
    {
      **(_BYTE **)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v3 + 8) = 0;
      *(_BYTE *)(v3 + 31) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::NBestSentencePieceText::_InternalParse(sentencepiece::NBestSentencePieceText *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  _QWORD *v5;
  google::protobuf::internal *v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  std::string *v10;
  char *v11;
  google::protobuf::internal *v12;
  int *v13;
  uint64_t v14;
  int v15;
  sentencepiece::SentencePieceText *v16;
  uint64_t v17;
  uint64_t v18;
  google::protobuf::internal *TagFallback;
  unsigned int v20;
  google::protobuf::internal *v22;

  v22 = a2;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v22, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    v5 = (_QWORD *)((char *)this + 8);
    while (1)
    {
      v6 = (google::protobuf::internal *)((char *)v22 + 1);
      v7 = *(unsigned __int8 *)v22;
      if ((*(char *)v22 & 0x80000000) == 0)
        goto LABEL_6;
      v8 = v7 + (*(unsigned __int8 *)v6 << 7);
      v7 = v8 - 128;
      if ((*(char *)v6 & 0x80000000) == 0)
        break;
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v22, (const char *)(v8 - 128));
      v22 = TagFallback;
      if (!TagFallback)
        return 0;
      v6 = TagFallback;
      v7 = v20;
LABEL_7:
      if (v7 == 10)
      {
        v11 = (char *)v6 - 1;
        while (1)
        {
          v12 = (google::protobuf::internal *)(v11 + 1);
          v22 = (google::protobuf::internal *)(v11 + 1);
          v13 = (int *)*((_QWORD *)this + 4);
          if (!v13)
            break;
          v14 = *((int *)this + 6);
          v15 = *v13;
          if ((int)v14 >= *v13)
          {
            if (v15 == *((_DWORD *)this + 7))
            {
LABEL_22:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 4, v15 + 1);
              v13 = (int *)*((_QWORD *)this + 4);
              v15 = *v13;
            }
            *v13 = v15 + 1;
            v16 = (sentencepiece::SentencePieceText *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(*((_QWORD *)this + 2));
            v17 = *((_QWORD *)this + 4);
            v18 = *((int *)this + 6);
            *((_DWORD *)this + 6) = v18 + 1;
            *(_QWORD *)(v17 + 8 * v18 + 8) = v16;
            v12 = v22;
            goto LABEL_24;
          }
          *((_DWORD *)this + 6) = v14 + 1;
          v16 = *(sentencepiece::SentencePieceText **)&v13[2 * v14 + 2];
LABEL_24:
          v11 = google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SentencePieceText>(a3, v16, v12);
          v22 = (google::protobuf::internal *)v11;
          if (!v11)
            return 0;
          if (*(_QWORD *)a3 <= (unint64_t)v11 || *v11 != 10)
            goto LABEL_27;
        }
        v15 = *((_DWORD *)this + 7);
        goto LABEL_22;
      }
      if (v7)
        v9 = (v7 & 7) == 4;
      else
        v9 = 1;
      if (v9)
      {
        *((_DWORD *)a3 + 20) = v7 - 1;
        return v22;
      }
      if ((*v5 & 1) != 0)
      {
        v10 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v10 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
        v6 = v22;
      }
      v22 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v7, v10, v6, a3);
      if (!v22)
        return 0;
LABEL_27:
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v22, *((_DWORD *)a3 + 23)))return v22;
    }
    v6 = (google::protobuf::internal *)((char *)v22 + 2);
LABEL_6:
    v22 = v6;
    goto LABEL_7;
  }
  return v22;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SentencePieceText>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::SentencePieceText *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)sentencepiece::SentencePieceText::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

unsigned __int8 *sentencepiece::NBestSentencePieceText::_InternalSerialize(sentencepiece::NBestSentencePieceText *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6;
  int i;
  sentencepiece::SentencePieceText *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *((_DWORD *)this + 6);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v8 = (sentencepiece::SentencePieceText *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>((uint64_t)this + 16, i);
      *a2 = 10;
      v9 = *((_DWORD *)v8 + 11);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v10 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v10 - 1) = v11 | 0x80;
            v12 = v11 >> 7;
            ++v10;
            v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          v10 = (unsigned __int8 *)(a2 + 3);
        }
      }
      else
      {
        a2[1] = v9;
        v10 = (unsigned __int8 *)(a2 + 2);
      }
      a2 = (char *)sentencepiece::SentencePieceText::_InternalSerialize(v8, (char *)v10, a3);
    }
  }
  v14 = *((_QWORD *)this + 1);
  if ((v14 & 1) == 0)
    return (unsigned __int8 *)a2;
  v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 31) < 0)
  {
    v17 = *(void **)(v16 + 8);
    v18 = *(_QWORD *)(v16 + 16);
  }
  else
  {
    v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)a2 >= (int)v18)
  {
    v19 = (int)v18;
    memcpy(a2, v17, (int)v18);
    a2 += v19;
    return (unsigned __int8 *)a2;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v17, v18, (unsigned __int8 *)a2);
}

uint64_t sentencepiece::NBestSentencePieceText::ByteSizeLong(sentencepiece::NBestSentencePieceText *this)
{
  uint64_t v2;
  uint64_t v3;
  sentencepiece::SentencePieceText **v4;
  uint64_t v5;
  sentencepiece::SentencePieceText *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;

  v2 = *((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (sentencepiece::SentencePieceText **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = sentencepiece::SentencePieceText::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((_QWORD *)this + 1);
  if ((v8 & 1) != 0)
  {
    v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0)
      v11 = *(_QWORD *)(v10 + 16);
    else
      v11 = *(unsigned __int8 *)(v10 + 31);
    v2 += v11;
  }
  *((_DWORD *)this + 10) = v2;
  return v2;
}

void sentencepiece::NBestSentencePieceText::CheckTypeAndMergeFrom(sentencepiece::NBestSentencePieceText *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::NBestSentencePieceText *__hidden))a2 != &off_1E7BE8BD0)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::NBestSentencePieceText::MergeFrom(this, a2);
}

void sentencepiece::NBestSentencePieceText::MergeFrom(sentencepiece::NBestSentencePieceText *this, const sentencepiece::NBestSentencePieceText *a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  char v13;
  std::string v14[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 877);
    v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>((signed int **)this + 2, (uint64_t)a2 + 16);
}

void sub_1C21DF344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL sentencepiece::NBestSentencePieceText::IsInitialized(sentencepiece::NBestSentencePieceText *this)
{
  return google::protobuf::internal::AllAreInitialized<sentencepiece::SentencePieceText>((uint64_t)this + 16);
}

BOOL google::protobuf::internal::AllAreInitialized<sentencepiece::SentencePieceText>(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  do
  {
    v3 = v2;
    v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4)
      break;
    v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(a1, v2);
    if (!google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v5 + 16)))
      break;
  }
  while (google::protobuf::internal::AllAreInitialized<sentencepiece::SentencePieceText_SentencePiece>(v5 + 48));
  return v3 < 1;
}

_QWORD *sentencepiece::NBestSentencePieceText::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.NBestSentencePieceText");
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(uint64_t a1)
{
  uint64_t AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x58uLL);
    sentencepiece::SentencePieceText::SentencePieceText(AlignedNoHook, a1);
  }
  else
  {
    AlignedNoHook = operator new();
    sentencepiece::SentencePieceText::SentencePieceText(AlignedNoHook, 0);
  }
  return AlignedNoHook;
}

void sub_1C21DF468(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10A1C40431D3885);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NBestSentencePieceText>(uint64_t a1)
{
  uint64_t AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x30uLL);
    sentencepiece::NBestSentencePieceText::NBestSentencePieceText(AlignedNoHook, a1);
  }
  else
  {
    AlignedNoHook = operator new();
    sentencepiece::NBestSentencePieceText::NBestSentencePieceText(AlignedNoHook, 0);
  }
  return AlignedNoHook;
}

void sub_1C21DF51C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceText_SentencePiece::New(sentencepiece::SentencePieceText_SentencePiece *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(0);
}

uint64_t sentencepiece::SentencePieceText_SentencePiece::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(a2);
}

uint64_t sentencepiece::SentencePieceText_SentencePiece::GetCachedSize(sentencepiece::SentencePieceText_SentencePiece *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t google::protobuf::MessageLite::InternalGetTable(google::protobuf::MessageLite *this)
{
  return 0;
}

uint64_t sentencepiece::SentencePieceText::New(sentencepiece::SentencePieceText *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(0);
}

uint64_t sentencepiece::SentencePieceText::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(a2);
}

uint64_t sentencepiece::SentencePieceText::GetCachedSize(sentencepiece::SentencePieceText *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t sentencepiece::NBestSentencePieceText::New(sentencepiece::NBestSentencePieceText *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NBestSentencePieceText>(0);
}

uint64_t sentencepiece::NBestSentencePieceText::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NBestSentencePieceText>(a2);
}

uint64_t sentencepiece::NBestSentencePieceText::GetCachedSize(sentencepiece::NBestSentencePieceText *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(google::protobuf::internal::EpsCopyInputStream *this, const char **a2, int a3)
{
  unint64_t v6;
  std::string *v7;
  signed int v9;
  std::string *v10;
  char v11;
  char v12;
  std::string v13[2];

  v6 = (unint64_t)*a2;
  if (!*a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 209);
    v7 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: *ptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    v6 = (unint64_t)*a2;
  }
  if (v6 < *(_QWORD *)this)
    return 0;
  v9 = v6 - *((_DWORD *)this + 2);
  if (v9 >= 17)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 212);
    v10 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (overrun) <= (kSlopBytes): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  if (*((_DWORD *)this + 7) == v9)
  {
    if (v9 >= 1 && !*((_QWORD *)this + 2))
      *a2 = 0;
    return 1;
  }
  else
  {
    *a2 = (const char *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(this, v9, a3);
    return v11 & 1;
  }
}

void sub_1C21DF6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>(uint64_t *a1)
{
  unint64_t v2;
  uint64_t AlignedAndAddCleanup;

  v2 = *a1 & 0xFFFFFFFFFFFFFFFELL;
  if ((*a1 & 1) != 0)
  {
    v2 = *(_QWORD *)v2;
    if (v2)
      goto LABEL_3;
LABEL_7:
    AlignedAndAddCleanup = operator new();
    goto LABEL_8;
  }
  if (!v2)
    goto LABEL_7;
LABEL_3:
  if ((*(_BYTE *)(v2 + 24) & 1) != 0)
  AlignedAndAddCleanup = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v2, (google::protobuf::internal::SerialArena::Block *)0x20, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::internal::InternalMetadata::Container<std::string>>);
LABEL_8:
  *(_OWORD *)AlignedAndAddCleanup = 0u;
  *(_OWORD *)(AlignedAndAddCleanup + 16) = 0u;
  *a1 = AlignedAndAddCleanup | 1;
  *(_QWORD *)AlignedAndAddCleanup = v2;
  return AlignedAndAddCleanup + 8;
}

void google::protobuf::internal::arena_destruct_object<google::protobuf::internal::InternalMetadata::Container<std::string>>(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  sentencepiece::SentencePieceText **v3;
  sentencepiece::SentencePieceText *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (sentencepiece::SentencePieceText **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      sentencepiece::SentencePieceText::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1C21DF818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::EpsCopyInputStream::PushLimit(google::protobuf::internal::EpsCopyInputStream *this, const char *a2, unsigned int a3)
{
  int v4;
  std::string *v6;
  uint64_t v7;
  int v8;
  char v10;
  std::string v11[2];

  v4 = (int)a2;
  if (a3 >= 0x7FFFFFF0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 128);
    v6 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v7 = *((_QWORD *)this + 1);
  v8 = v4 - v7 + a3;
  *(_QWORD *)this = v7 + (v8 & (v8 >> 31));
  LODWORD(v7) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = v8;
  return (v7 - v8);
}

void sub_1C21DF8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(signed int **this, uint64_t a2)
{
  std::string *v4;
  unsigned int v5;
  sentencepiece::SentencePieceText_SentencePiece **v6;
  unsigned int *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  if ((signed int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (sentencepiece::SentencePieceText_SentencePiece **)(*(_QWORD *)(a2 + 16) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, v5);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((uint64_t *)this, (sentencepiece::SentencePieceText_SentencePiece **)v7, v6, v5, *this[2] - *((_DWORD *)this + 2));
    v8 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v8;
    v9 = this[2];
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_1C21DF9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(uint64_t *a1, sentencepiece::SentencePieceText_SentencePiece **a2, sentencepiece::SentencePieceText_SentencePiece **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  sentencepiece::SentencePieceText_SentencePiece **v11;
  sentencepiece::SentencePieceText_SentencePiece **v12;
  sentencepiece::SentencePieceText_SentencePiece *v13;
  sentencepiece::SentencePieceText_SentencePiece *v14;
  sentencepiece::SentencePieceText_SentencePiece *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  sentencepiece::SentencePieceText_SentencePiece **v19;
  sentencepiece::SentencePieceText_SentencePiece **v20;
  sentencepiece::SentencePieceText_SentencePiece *v21;
  sentencepiece::SentencePieceText_SentencePiece *v22;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      google::protobuf::internal::GenericTypeHandler<sentencepiece::SentencePieceText_SentencePiece>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = (sentencepiece::SentencePieceText_SentencePiece *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(v18);
      google::protobuf::internal::GenericTypeHandler<sentencepiece::SentencePieceText_SentencePiece>::Merge(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void google::protobuf::internal::GenericTypeHandler<sentencepiece::SentencePieceText_SentencePiece>::Merge(sentencepiece::SentencePieceText_SentencePiece *a1, sentencepiece::SentencePieceText_SentencePiece *this)
{
  sentencepiece::SentencePieceText_SentencePiece::MergeFrom(this, a1);
}

void google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(_QWORD *a1)
{
  sentencepiece::SentencePieceText **v2;
  sentencepiece::SentencePieceText **v3;
  uint64_t v4;

  v2 = (sentencepiece::SentencePieceText **)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sentencepiece::SentencePieceText::~SentencePieceText(*v3);
          MEMORY[0x1C3BB9B44]();
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (sentencepiece::SentencePieceText **)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(signed int **this, uint64_t a2)
{
  std::string *v4;
  unsigned int v5;
  sentencepiece::SentencePieceText **v6;
  unsigned int *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  if ((signed int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (sentencepiece::SentencePieceText **)(*(_QWORD *)(a2 + 16) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, v5);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>((uint64_t *)this, (sentencepiece::SentencePieceText **)v7, v6, v5, *this[2] - *((_DWORD *)this + 2));
    v8 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v8;
    v9 = this[2];
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_1C21DFC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(uint64_t *a1, sentencepiece::SentencePieceText **a2, sentencepiece::SentencePieceText **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  sentencepiece::SentencePieceText **v11;
  sentencepiece::SentencePieceText **v12;
  sentencepiece::SentencePieceText *v13;
  sentencepiece::SentencePieceText *v14;
  sentencepiece::SentencePieceText *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  sentencepiece::SentencePieceText **v19;
  sentencepiece::SentencePieceText **v20;
  sentencepiece::SentencePieceText *v21;
  sentencepiece::SentencePieceText *v22;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      google::protobuf::internal::GenericTypeHandler<sentencepiece::SentencePieceText>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = (sentencepiece::SentencePieceText *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(v18);
      google::protobuf::internal::GenericTypeHandler<sentencepiece::SentencePieceText>::Merge(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void google::protobuf::internal::GenericTypeHandler<sentencepiece::SentencePieceText>::Merge(sentencepiece::SentencePieceText *a1, sentencepiece::SentencePieceText *this)
{
  sentencepiece::SentencePieceText::MergeFrom(this, a1);
}

void OUTLINED_FUNCTION_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 94, a4);
}

void sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0("down_cast", "casts.h", a3, "f == nullptr || dynamic_cast<To>(f) != nullptr");
}

void InitDefaultsscc_info_ModelProto_sentencepiece_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", a4);
  sentencepiece::ModelProto::ModelProto((uint64_t)&sentencepiece::_ModelProto_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_ModelProto_default_instance_, v4);
}

void InitDefaultsscc_info_ModelProto_SentencePiece_sentencepiece_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", a4);
  sentencepiece::ModelProto_SentencePiece::ModelProto_SentencePiece(sentencepiece::_ModelProto_SentencePiece_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))sentencepiece::_ModelProto_SentencePiece_default_instance_, v4);
}

void InitDefaultsscc_info_NormalizerSpec_sentencepiece_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", a4);
  sentencepiece::NormalizerSpec::NormalizerSpec((uint64_t)&sentencepiece::_NormalizerSpec_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_NormalizerSpec_default_instance_, v4);
}

void InitDefaultsscc_info_SelfTestData_sentencepiece_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", a4);
  sentencepiece::SelfTestData::SelfTestData((uint64_t)&sentencepiece::_SelfTestData_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_SelfTestData_default_instance_, v4);
}

void InitDefaultsscc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", a4);
  sentencepiece::_SelfTestData_Sample_default_instance_ = (uint64_t)&off_1E7BE8A98;
  *(_QWORD *)algn_1EF7704D8 = 0;
  qword_1EF7704E0 = 0;
  if (atomic_load(scc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto);
  qword_1EF7704E8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EF7704F0 = &google::protobuf::internal::fixed_address_empty_string;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_SelfTestData_Sample_default_instance_, v4);
}

void InitDefaultsscc_info_TrainerSpec_sentencepiece_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", a4);
  sentencepiece::TrainerSpec::TrainerSpec((uint64_t)&sentencepiece::_TrainerSpec_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_TrainerSpec_default_instance_, v4);
}

BOOL sentencepiece::ModelProto_SentencePiece_Type_IsValid(sentencepiece *this)
{
  return ((_DWORD)this - 1) < 6;
}

uint64_t sentencepiece::TrainerSpec::TrainerSpec(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E7BE8748;
  *(_QWORD *)(a1 + 8) = a2;
  google::protobuf::internal::ExtensionSet::ExtensionSet(a1 + 16, a2);
  *(_QWORD *)(a1 + 128) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = a2;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a2;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  if (atomic_load(scc_info_TrainerSpec_sentencepiece_5fmodel_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_TrainerSpec_sentencepiece_5fmodel_2eproto);
  *(_QWORD *)(a1 + 152) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(a1 + 160) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(a1 + 168) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 272) = 0x1F4000000001;
  *(_QWORD *)(a1 + 280) = 0xF42403F7FDF3BLL;
  *(_DWORD *)(a1 + 288) = 1061158912;
  *(_OWORD *)(a1 + 292) = xmmword_1C230A960;
  *(_DWORD *)(a1 + 308) = 16843009;
  *(_WORD *)(a1 + 312) = 257;
  *(_DWORD *)(a1 + 316) = 1;
  *(_QWORD *)(a1 + 320) = 0xFFFFFFFF00000002;
  return a1;
}

void sub_1C21E0068(_Unwind_Exception *a1)
{
  google::protobuf::internal::ExtensionSet *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v3);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v5);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v4);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2);
  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::TrainerSpec::~TrainerSpec(sentencepiece::TrainerSpec *this)
{
  sentencepiece::TrainerSpec::SharedDtor(this);
  google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 128);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 104);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 80);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 56);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((sentencepiece::TrainerSpec *)((char *)this + 16));
}

{
  sentencepiece::TrainerSpec::~TrainerSpec(this);
  JUMPOUT(0x1C3BB9B44);
}

google::protobuf::internal::ArenaStringPtr *sentencepiece::TrainerSpec::SharedDtor(sentencepiece::TrainerSpec *this)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  google::protobuf::internal::ArenaStringPtr *result;
  uint64_t v20;
  uint64_t v21;
  google::protobuf::internal::ArenaStringPtr *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  std::string v27[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 519);
    v4 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  if (*((uint64_t **)this + 19) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v5 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 152));
    v6 = v5;
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    MEMORY[0x1C3BB9B44](v6, 0x1012C40EC159624);
  }
  if (*((uint64_t **)this + 20) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v7 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 160));
    v8 = v7;
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    MEMORY[0x1C3BB9B44](v8, 0x1012C40EC159624);
  }
  if (*((uint64_t **)this + 21) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v9 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 168));
    v10 = v9;
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    MEMORY[0x1C3BB9B44](v10, 0x1012C40EC159624);
  }
  if (*((_QWORD *)this + 22))
  {
    v11 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 176));
    v12 = v11;
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    MEMORY[0x1C3BB9B44](v12, 0x1012C40EC159624);
  }
  if (*((_QWORD *)this + 23))
  {
    v13 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 184));
    v14 = v13;
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    MEMORY[0x1C3BB9B44](v14, 0x1012C40EC159624);
  }
  if (*((_QWORD *)this + 24))
  {
    v15 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 192));
    v16 = v15;
    if (*(char *)(v15 + 23) < 0)
      operator delete(*(void **)v15);
    MEMORY[0x1C3BB9B44](v16, 0x1012C40EC159624);
  }
  if (*((_QWORD *)this + 25))
  {
    v17 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 200));
    v18 = v17;
    if (*(char *)(v17 + 23) < 0)
      operator delete(*(void **)v17);
    MEMORY[0x1C3BB9B44](v18, 0x1012C40EC159624);
  }
  result = (sentencepiece::TrainerSpec *)((char *)this + 208);
  if (*((_QWORD *)this + 26))
  {
    v20 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(result);
    v21 = v20;
    if (*(char *)(v20 + 23) < 0)
      operator delete(*(void **)v20);
    result = (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x1C3BB9B44](v21, 0x1012C40EC159624);
  }
  v23 = (uint64_t *)*((_QWORD *)this + 27);
  v22 = (sentencepiece::TrainerSpec *)((char *)this + 216);
  if (v23 != &google::protobuf::internal::fixed_address_empty_string)
  {
    v24 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(v22);
    v25 = v24;
    if (*(char *)(v24 + 23) < 0)
      operator delete(*(void **)v24);
    return (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x1C3BB9B44](v25, 0x1012C40EC159624);
  }
  return result;
}

void sub_1C21E03AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sentencepiece::TrainerSpec::Clear(sentencepiece::TrainerSpec *this)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::TrainerSpec *)((char *)this + 16));
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 56);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 80);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 104);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 128);
  v2 = *((_DWORD *)this + 10);
  if (!(_BYTE)v2)
    goto LABEL_10;
  if ((v2 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 19) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_16;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_16;
    }
LABEL_4:
    if ((v2 & 4) == 0)
      goto LABEL_5;
LABEL_20:
    v5 = *((_QWORD *)this + 21) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      if ((v2 & 8) != 0)
        goto LABEL_24;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
      if ((v2 & 8) != 0)
        goto LABEL_24;
    }
LABEL_6:
    if ((v2 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
  if ((v2 & 2) == 0)
    goto LABEL_4;
LABEL_16:
  v4 = *((_QWORD *)this + 20) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    **(_BYTE **)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    if ((v2 & 4) != 0)
      goto LABEL_20;
  }
  else
  {
    *(_BYTE *)v4 = 0;
    *(_BYTE *)(v4 + 23) = 0;
    if ((v2 & 4) != 0)
      goto LABEL_20;
  }
LABEL_5:
  if ((v2 & 8) == 0)
    goto LABEL_6;
LABEL_24:
  google::protobuf::internal::ArenaStringPtr::ClearToDefault((std::string *)((char *)this + 176), (unint64_t *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_surface_);
  if ((v2 & 0x10) == 0)
  {
LABEL_7:
    if ((v2 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  google::protobuf::internal::ArenaStringPtr::ClearToDefault((std::string *)((char *)this + 184), (unint64_t *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_piece_);
  if ((v2 & 0x20) == 0)
  {
LABEL_8:
    if ((v2 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  google::protobuf::internal::ArenaStringPtr::ClearToDefault((std::string *)this + 8, (unint64_t *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_bos_piece_);
  if ((v2 & 0x40) != 0)
  {
LABEL_27:
    google::protobuf::internal::ArenaStringPtr::ClearToDefault((std::string *)((char *)this + 200), (unint64_t *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_eos_piece_);
    if ((v2 & 0x80) != 0)
      goto LABEL_28;
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_32;
    goto LABEL_29;
  }
LABEL_9:
  if ((v2 & 0x80) == 0)
    goto LABEL_10;
LABEL_28:
  google::protobuf::internal::ArenaStringPtr::ClearToDefault((std::string *)((char *)this + 208), (unint64_t *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_pad_piece_);
  if ((v2 & 0x100) == 0)
    goto LABEL_32;
LABEL_29:
  v6 = *((_QWORD *)this + 27) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v6 + 23) < 0)
  {
    **(_BYTE **)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
  }
  else
  {
    *(_BYTE *)v6 = 0;
    *(_BYTE *)(v6 + 23) = 0;
  }
LABEL_32:
  if ((v2 & 0xFE00) != 0)
  {
    *((_QWORD *)this + 28) = 0;
    *((_QWORD *)this + 29) = 0;
    *(_QWORD *)((char *)this + 239) = 0;
  }
  if ((v2 & 0xFF0000) != 0)
  {
    *(_QWORD *)((char *)this + 247) = 0;
    *((_BYTE *)this + 271) = 0;
    *(_QWORD *)((char *)this + 255) = 0;
    *(_QWORD *)((char *)this + 263) = 0;
    *((_DWORD *)this + 68) = 1;
  }
  if (HIBYTE(v2))
  {
    *(_QWORD *)((char *)this + 276) = 0x3F7FDF3B00001F40;
    *(_QWORD *)((char *)this + 284) = 0x3F400000000F4240;
    *(_OWORD *)((char *)this + 292) = xmmword_1C230A960;
  }
  if (*((_BYTE *)this + 44))
  {
    *((_WORD *)this + 156) = 257;
    *((_DWORD *)this + 77) = 16843009;
    *(_QWORD *)((char *)this + 316) = 0x200000001;
  }
  *((_DWORD *)this + 81) = -1;
  *((_QWORD *)this + 5) = 0;
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) != 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v8 + 31) < 0)
    {
      **(_BYTE **)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v8 + 8) = 0;
      *(_BYTE *)(v8 + 31) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::TrainerSpec::_InternalParse(sentencepiece::TrainerSpec *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  char v5;
  google::protobuf::internal *result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  google::protobuf::internal *v11;
  unsigned int v12;
  unsigned int v13;
  std::string::value_type *v14;
  int *v15;
  uint64_t v16;
  int v17;
  std::string *AlignedAndAddCleanup;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  google::protobuf::internal::ArenaImpl *v24;
  uint64_t **v25;
  google::protobuf::internal *v26;
  unint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  google::protobuf::internal *v31;
  int v32;
  std::string::value_type *v33;
  int *v34;
  uint64_t v35;
  int v36;
  std::string *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  google::protobuf::internal *v42;
  int v43;
  uint64_t v44;
  google::protobuf::internal *v45;
  int v46;
  google::protobuf::internal *v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  google::protobuf::internal *v51;
  int v52;
  unint64_t v53;
  google::protobuf::internal *v54;
  int v55;
  unint64_t v56;
  google::protobuf::internal *v57;
  int v58;
  int v59;
  unint64_t v60;
  google::protobuf::internal *v61;
  int v62;
  unint64_t v63;
  google::protobuf::internal *v64;
  int v65;
  unint64_t v66;
  google::protobuf::internal *v67;
  int v68;
  google::protobuf::internal *v69;
  unint64_t v70;
  int v71;
  unint64_t v72;
  google::protobuf::internal *v73;
  int v74;
  google::protobuf::internal *v75;
  unint64_t v76;
  int v77;
  google::protobuf::internal *v78;
  unint64_t v79;
  int v80;
  google::protobuf::internal *v81;
  unint64_t v82;
  int v83;
  google::protobuf::internal *v84;
  unint64_t v85;
  int v86;
  google::protobuf::internal *v87;
  unint64_t v88;
  int v89;
  google::protobuf::internal *v90;
  unint64_t v91;
  int v92;
  std::string::value_type *v93;
  int *v94;
  uint64_t v95;
  int v96;
  std::string *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::string::value_type *v101;
  int *v102;
  uint64_t v103;
  int v104;
  std::string *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  google::protobuf::internal *v109;
  unint64_t v110;
  int v111;
  google::protobuf::internal *v112;
  unint64_t v113;
  int v114;
  google::protobuf::internal *v115;
  unint64_t v116;
  int v117;
  google::protobuf::internal *v118;
  unint64_t v119;
  int v120;
  uint64_t v121;
  unint64_t v122;
  google::protobuf::internal *v123;
  int v124;
  unint64_t v125;
  google::protobuf::internal *v126;
  int v127;
  unint64_t v128;
  google::protobuf::internal *v129;
  int v130;
  unint64_t v131;
  google::protobuf::internal *v132;
  int v133;
  uint64_t v134;
  google::protobuf::Arena *v135;
  char **v136;
  google::protobuf::internal::ArenaStringPtr *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  google::protobuf::internal *v141;
  unint64_t v142;
  int v143;
  google::protobuf::internal *v144;
  unint64_t v145;
  int v146;
  int v147;
  google::protobuf::internal *v148;
  unint64_t v149;
  int v150;
  uint64_t v151;
  std::string *v152;
  uint64_t v153;
  int v154;
  BOOL v155;
  std::string *v156;
  unint64_t v157;
  int v158;
  int v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  std::string *v186;
  uint64_t *v187;
  google::protobuf::internal *v188;

  v188 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v188, *((_DWORD *)a3 + 23));
  result = v188;
  if ((v5 & 1) != 0)
    return result;
  v187 = (uint64_t *)((char *)this + 8);
  v7 = (uint64_t *)((char *)this + 128);
  v8 = (uint64_t *)((char *)this + 104);
  v9 = (uint64_t *)((char *)this + 80);
  v10 = (uint64_t *)((char *)this + 56);
  while (2)
  {
    v11 = (google::protobuf::internal *)((char *)result + 1);
    v12 = *(unsigned __int8 *)result;
    if ((*(char *)result & 0x80000000) == 0)
      goto LABEL_7;
    v13 = v12 + (*(unsigned __int8 *)v11 << 7);
    v12 = v13 - 128;
    if ((*(char *)v11 & 0x80000000) == 0)
    {
      v11 = (google::protobuf::internal *)((char *)result + 2);
LABEL_7:
      v188 = v11;
      goto LABEL_8;
    }
    result = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(result, (const char *)(v13 - 128));
    v188 = result;
    if (!result)
      return result;
    v11 = result;
    v12 = v22;
LABEL_8:
    switch(v12 >> 3)
    {
      case 1u:
        if (v12 != 10)
          goto LABEL_279;
        result = (google::protobuf::internal *)((char *)v11 - 1);
        while (2)
        {
          v14 = (char *)result + 1;
          v188 = (google::protobuf::internal *)((char *)result + 1);
          v15 = (int *)*((_QWORD *)this + 9);
          if (!v15)
          {
            v17 = *((_DWORD *)this + 17);
LABEL_16:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 14, v17 + 1);
            v15 = (int *)*((_QWORD *)this + 9);
            v17 = *v15;
            goto LABEL_17;
          }
          v16 = *((int *)this + 16);
          v17 = *v15;
          if ((int)v16 < *v15)
          {
            *((_DWORD *)this + 16) = v16 + 1;
            AlignedAndAddCleanup = *(std::string **)&v15[2 * v16 + 2];
            goto LABEL_23;
          }
          if (v17 == *((_DWORD *)this + 17))
            goto LABEL_16;
LABEL_17:
          *v15 = v17 + 1;
          v19 = *v10;
          if (*v10)
          {
            if ((*(_BYTE *)(v19 + 24) & 1) != 0)
            AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v19, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
          }
          else
          {
            AlignedAndAddCleanup = (std::string *)operator new();
          }
          AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
          AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
          AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
          v20 = *((_QWORD *)this + 9);
          v21 = *((int *)this + 16);
          *((_DWORD *)this + 16) = v21 + 1;
          *(_QWORD *)(v20 + 8 * v21 + 8) = AlignedAndAddCleanup;
          v14 = (std::string::value_type *)v188;
LABEL_23:
          result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v14, (uint64_t)a3);
          v188 = result;
          if (result)
          {
            if (*(_QWORD *)a3 <= (unint64_t)result || *(_BYTE *)result != 10)
              goto LABEL_277;
            continue;
          }
          return result;
        }
      case 2u:
        if (v12 != 18)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 1u;
        v23 = *((_QWORD *)this + 1);
        v24 = (google::protobuf::internal::ArenaImpl *)(v23 & 0xFFFFFFFFFFFFFFFELL);
        if ((v23 & 1) != 0)
          v24 = *(google::protobuf::internal::ArenaImpl **)v24;
        v25 = (uint64_t **)((char *)this + 152);
        goto LABEL_269;
      case 3u:
        if (v12 != 24)
          goto LABEL_279;
        v26 = (google::protobuf::internal *)((char *)v11 + 1);
        v27 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_37;
        v28 = *(char *)v26;
        v29 = v27 + (v28 << 7);
        v27 = (v29 - 128);
        if (v28 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, (v29 - 128));
          v188 = result;
          if (!result)
            return result;
          v27 = v157;
        }
        else
        {
          v26 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_37:
          v188 = v26;
        }
        if ((v27 - 1) > 3)
        {
          if ((*v187 & 1) != 0)
            v186 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          else
            v186 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>(v187);
          google::protobuf::internal::WriteVarint(3, v27, v186);
        }
        else
        {
          *((_DWORD *)this + 10) |= 0x800000u;
          *((_DWORD *)this + 68) = v27;
        }
        goto LABEL_277;
      case 4u:
        if (v12 != 32)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x1000000u;
        v31 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v30) = *(unsigned __int8 *)v11;
        if ((v30 & 0x80) == 0)
          goto LABEL_44;
        v32 = *(char *)v31;
        v30 = v30 + (v32 << 7) - 128;
        if (v32 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v30);
          v188 = result;
          *((_DWORD *)this + 69) = v158;
          if (!result)
            return result;
        }
        else
        {
          v31 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_44:
          v188 = v31;
          *((_DWORD *)this + 69) = v30;
        }
        goto LABEL_277;
      case 5u:
        if (v12 != 42)
          goto LABEL_279;
        result = (google::protobuf::internal *)((char *)v11 - 1);
        while (1)
        {
          v33 = (char *)result + 1;
          v188 = (google::protobuf::internal *)((char *)result + 1);
          v34 = (int *)*((_QWORD *)this + 12);
          if (!v34)
            break;
          v35 = *((int *)this + 22);
          v36 = *v34;
          if ((int)v35 >= *v34)
          {
            if (v36 == *((_DWORD *)this + 23))
            {
LABEL_52:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 20, v36 + 1);
              v34 = (int *)*((_QWORD *)this + 12);
              v36 = *v34;
            }
            *v34 = v36 + 1;
            v38 = *v9;
            if (*v9)
            {
              if ((*(_BYTE *)(v38 + 24) & 1) != 0)
              v37 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v38, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
            }
            else
            {
              v37 = (std::string *)operator new();
            }
            v37->__r_.__value_.__r.__words[0] = 0;
            v37->__r_.__value_.__l.__size_ = 0;
            v37->__r_.__value_.__r.__words[2] = 0;
            v39 = *((_QWORD *)this + 12);
            v40 = *((int *)this + 22);
            *((_DWORD *)this + 22) = v40 + 1;
            *(_QWORD *)(v39 + 8 * v40 + 8) = v37;
            v33 = (std::string::value_type *)v188;
            goto LABEL_59;
          }
          *((_DWORD *)this + 22) = v35 + 1;
          v37 = *(std::string **)&v34[2 * v35 + 2];
LABEL_59:
          result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v37, v33, (uint64_t)a3);
          v188 = result;
          if (!result)
            return result;
          if (*(_QWORD *)a3 <= (unint64_t)result || *(_BYTE *)result != 42)
            goto LABEL_277;
        }
        v36 = *((_DWORD *)this + 23);
        goto LABEL_52;
      case 6u:
        if (v12 != 48)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x200u;
        v42 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v41) = *(unsigned __int8 *)v11;
        if ((v41 & 0x80) == 0)
          goto LABEL_67;
        v43 = *(char *)v42;
        v41 = v41 + (v43 << 7) - 128;
        if (v43 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v41);
          v188 = result;
          *((_DWORD *)this + 56) = v159;
          if (!result)
            return result;
        }
        else
        {
          v42 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_67:
          v188 = v42;
          *((_DWORD *)this + 56) = v41;
        }
        goto LABEL_277;
      case 7u:
        if (v12 != 58)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 2u;
        v44 = *((_QWORD *)this + 1);
        v24 = (google::protobuf::internal::ArenaImpl *)(v44 & 0xFFFFFFFFFFFFFFFELL);
        if ((v44 & 1) != 0)
          v24 = *(google::protobuf::internal::ArenaImpl **)v24;
        v25 = (uint64_t **)((char *)this + 160);
        goto LABEL_269;
      case 0xAu:
        if (v12 != 85)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x2000000u;
        v46 = *(_DWORD *)v11;
        v45 = (google::protobuf::internal *)((char *)v11 + 4);
        *((_DWORD *)this + 70) = v46;
        goto LABEL_259;
      case 0xBu:
        if (v12 != 88)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x800u;
        v47 = (google::protobuf::internal *)((char *)v11 + 1);
        v48 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_78;
        v49 = *(char *)v47;
        v48 = v48 + (v49 << 7) - 128;
        if (v49 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v48);
          v188 = result;
          *((_QWORD *)this + 29) = v160;
          if (!result)
            return result;
        }
        else
        {
          v47 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_78:
          v188 = v47;
          *((_QWORD *)this + 29) = v48;
        }
        goto LABEL_277;
      case 0xCu:
        if (v12 != 96)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x400u;
        v51 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v50) = *(unsigned __int8 *)v11;
        if ((v50 & 0x80) == 0)
          goto LABEL_83;
        v52 = *(char *)v51;
        v50 = v50 + (v52 << 7) - 128;
        if (v52 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v50);
          v188 = result;
          *((_DWORD *)this + 57) = v161;
          if (!result)
            return result;
        }
        else
        {
          v51 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_83:
          v188 = v51;
          *((_DWORD *)this + 57) = v50;
        }
        goto LABEL_277;
      case 0xDu:
        if (v12 != 104)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x1000u;
        v54 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v53) = *(unsigned __int8 *)v11;
        if ((v53 & 0x80) == 0)
          goto LABEL_88;
        v55 = *(char *)v54;
        v53 = v53 + (v55 << 7) - 128;
        if (v55 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v53);
          v188 = result;
          *((_DWORD *)this + 60) = v162;
          if (!result)
            return result;
        }
        else
        {
          v54 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_88:
          v188 = v54;
          *((_DWORD *)this + 60) = v53;
        }
        goto LABEL_277;
      case 0xEu:
        if (v12 != 112)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x4000000u;
        v57 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v56) = *(unsigned __int8 *)v11;
        if ((v56 & 0x80) == 0)
          goto LABEL_93;
        v58 = *(char *)v57;
        v56 = v56 + (v58 << 7) - 128;
        if (v58 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v56);
          v188 = result;
          *((_DWORD *)this + 71) = v163;
          if (!result)
            return result;
        }
        else
        {
          v57 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_93:
          v188 = v57;
          *((_DWORD *)this + 71) = v56;
        }
        goto LABEL_277;
      case 0xFu:
        if (v12 != 125)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x8000000u;
        v59 = *(_DWORD *)v11;
        v45 = (google::protobuf::internal *)((char *)v11 + 4);
        *((_DWORD *)this + 72) = v59;
        goto LABEL_259;
      case 0x10u:
        if (v12 != 128)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x10000000u;
        v61 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v60) = *(unsigned __int8 *)v11;
        if ((v60 & 0x80) == 0)
          goto LABEL_100;
        v62 = *(char *)v61;
        v60 = v60 + (v62 << 7) - 128;
        if (v62 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v60);
          v188 = result;
          *((_DWORD *)this + 73) = v164;
          if (!result)
            return result;
        }
        else
        {
          v61 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_100:
          v188 = v61;
          *((_DWORD *)this + 73) = v60;
        }
        goto LABEL_277;
      case 0x11u:
        if (v12 != 136)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x20000000u;
        v64 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v63) = *(unsigned __int8 *)v11;
        if ((v63 & 0x80) == 0)
          goto LABEL_105;
        v65 = *(char *)v64;
        v63 = v63 + (v65 << 7) - 128;
        if (v65 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v63);
          v188 = result;
          *((_DWORD *)this + 74) = v165;
          if (!result)
            return result;
        }
        else
        {
          v64 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_105:
          v188 = v64;
          *((_DWORD *)this + 74) = v63;
        }
        goto LABEL_277;
      case 0x12u:
        if (v12 != 144)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x40000000u;
        v67 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v66) = *(unsigned __int8 *)v11;
        if ((v66 & 0x80) == 0)
          goto LABEL_110;
        v68 = *(char *)v67;
        v66 = v66 + (v68 << 7) - 128;
        if (v68 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v66);
          v188 = result;
          *((_DWORD *)this + 75) = v166;
          if (!result)
            return result;
        }
        else
        {
          v67 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_110:
          v188 = v67;
          *((_DWORD *)this + 75) = v66;
        }
        goto LABEL_277;
      case 0x13u:
        if (v12 != 152)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 1u;
        v69 = (google::protobuf::internal *)((char *)v11 + 1);
        v70 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_115;
        v71 = *(char *)v69;
        v70 = v70 + (v71 << 7) - 128;
        if (v71 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v70);
          v188 = result;
          *((_BYTE *)this + 308) = v167 != 0;
          if (!result)
            return result;
        }
        else
        {
          v69 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_115:
          v188 = v69;
          *((_BYTE *)this + 308) = v70 != 0;
        }
        goto LABEL_277;
      case 0x14u:
        if (v12 != 160)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x80000000;
        v73 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v72) = *(unsigned __int8 *)v11;
        if ((v72 & 0x80) == 0)
          goto LABEL_120;
        v74 = *(char *)v73;
        v72 = v72 + (v74 << 7) - 128;
        if (v74 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v72);
          v188 = result;
          *((_DWORD *)this + 76) = v168;
          if (!result)
            return result;
        }
        else
        {
          v73 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_120:
          v188 = v73;
          *((_DWORD *)this + 76) = v72;
        }
        goto LABEL_277;
      case 0x15u:
        if (v12 != 168)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 2u;
        v75 = (google::protobuf::internal *)((char *)v11 + 1);
        v76 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_125;
        v77 = *(char *)v75;
        v76 = v76 + (v77 << 7) - 128;
        if (v77 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v76);
          v188 = result;
          *((_BYTE *)this + 309) = v169 != 0;
          if (!result)
            return result;
        }
        else
        {
          v75 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_125:
          v188 = v75;
          *((_BYTE *)this + 309) = v76 != 0;
        }
        goto LABEL_277;
      case 0x16u:
        if (v12 != 176)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 8u;
        v78 = (google::protobuf::internal *)((char *)v11 + 1);
        v79 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_130;
        v80 = *(char *)v78;
        v79 = v79 + (v80 << 7) - 128;
        if (v80 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v79);
          v188 = result;
          *((_BYTE *)this + 311) = v170 != 0;
          if (!result)
            return result;
        }
        else
        {
          v78 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_130:
          v188 = v78;
          *((_BYTE *)this + 311) = v79 != 0;
        }
        goto LABEL_277;
      case 0x17u:
        if (v12 != 184)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 4u;
        v81 = (google::protobuf::internal *)((char *)v11 + 1);
        v82 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_135;
        v83 = *(char *)v81;
        v82 = v82 + (v83 << 7) - 128;
        if (v83 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v82);
          v188 = result;
          *((_BYTE *)this + 310) = v171 != 0;
          if (!result)
            return result;
        }
        else
        {
          v81 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_135:
          v188 = v81;
          *((_BYTE *)this + 310) = v82 != 0;
        }
        goto LABEL_277;
      case 0x18u:
        if (v12 != 192)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x4000u;
        v84 = (google::protobuf::internal *)((char *)v11 + 1);
        v85 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_140;
        v86 = *(char *)v84;
        v85 = v85 + (v86 << 7) - 128;
        if (v86 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v85);
          v188 = result;
          *((_BYTE *)this + 245) = v172 != 0;
          if (!result)
            return result;
        }
        else
        {
          v84 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_140:
          v188 = v84;
          *((_BYTE *)this + 245) = v85 != 0;
        }
        goto LABEL_277;
      case 0x19u:
        if (v12 != 200)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x10000u;
        v87 = (google::protobuf::internal *)((char *)v11 + 1);
        v88 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_145;
        v89 = *(char *)v87;
        v88 = v88 + (v89 << 7) - 128;
        if (v89 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v88);
          v188 = result;
          *((_BYTE *)this + 247) = v173 != 0;
          if (!result)
            return result;
        }
        else
        {
          v87 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_145:
          v188 = v87;
          *((_BYTE *)this + 247) = v88 != 0;
        }
        goto LABEL_277;
      case 0x1Au:
        if (v12 != 208)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x8000u;
        v90 = (google::protobuf::internal *)((char *)v11 + 1);
        v91 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_150;
        v92 = *(char *)v90;
        v91 = v91 + (v92 << 7) - 128;
        if (v92 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v91);
          v188 = result;
          *((_BYTE *)this + 246) = v174 != 0;
          if (!result)
            return result;
        }
        else
        {
          v90 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_150:
          v188 = v90;
          *((_BYTE *)this + 246) = v91 != 0;
        }
        goto LABEL_277;
      case 0x1Eu:
        if (v12 != 242)
          goto LABEL_279;
        result = (google::protobuf::internal *)((char *)v11 - 2);
        while (1)
        {
          v93 = (char *)result + 2;
          v188 = (google::protobuf::internal *)((char *)result + 2);
          v94 = (int *)*((_QWORD *)this + 15);
          if (!v94)
            break;
          v95 = *((int *)this + 28);
          v96 = *v94;
          if ((int)v95 >= *v94)
          {
            if (v96 == *((_DWORD *)this + 29))
            {
LABEL_158:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 26, v96 + 1);
              v94 = (int *)*((_QWORD *)this + 15);
              v96 = *v94;
            }
            *v94 = v96 + 1;
            v98 = *v8;
            if (*v8)
            {
              if ((*(_BYTE *)(v98 + 24) & 1) != 0)
              v97 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v98, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
            }
            else
            {
              v97 = (std::string *)operator new();
            }
            v97->__r_.__value_.__r.__words[0] = 0;
            v97->__r_.__value_.__l.__size_ = 0;
            v97->__r_.__value_.__r.__words[2] = 0;
            v99 = *((_QWORD *)this + 15);
            v100 = *((int *)this + 28);
            *((_DWORD *)this + 28) = v100 + 1;
            *(_QWORD *)(v99 + 8 * v100 + 8) = v97;
            v93 = (std::string::value_type *)v188;
            goto LABEL_165;
          }
          *((_DWORD *)this + 28) = v95 + 1;
          v97 = *(std::string **)&v94[2 * v95 + 2];
LABEL_165:
          result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v97, v93, (uint64_t)a3);
          v188 = result;
          if (!result)
            return result;
          if (*(_QWORD *)a3 <= (unint64_t)result || *(_WORD *)result != 498)
            goto LABEL_277;
        }
        v96 = *((_DWORD *)this + 29);
        goto LABEL_158;
      case 0x1Fu:
        if (v12 != 250)
          goto LABEL_279;
        result = (google::protobuf::internal *)((char *)v11 - 2);
        break;
      case 0x20u:
        if ((_BYTE)v12)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 0x10u;
        v109 = (google::protobuf::internal *)((char *)v11 + 1);
        v110 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_191;
        v111 = *(char *)v109;
        v110 = v110 + (v111 << 7) - 128;
        if (v111 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v110);
          v188 = result;
          *((_BYTE *)this + 312) = v175 != 0;
          if (!result)
            return result;
        }
        else
        {
          v109 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_191:
          v188 = v109;
          *((_BYTE *)this + 312) = v110 != 0;
        }
        goto LABEL_277;
      case 0x21u:
        if (v12 != 8)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 0x20u;
        v112 = (google::protobuf::internal *)((char *)v11 + 1);
        v113 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_196;
        v114 = *(char *)v112;
        v113 = v113 + (v114 << 7) - 128;
        if (v114 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v113);
          v188 = result;
          *((_BYTE *)this + 313) = v176 != 0;
          if (!result)
            return result;
        }
        else
        {
          v112 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_196:
          v188 = v112;
          *((_BYTE *)this + 313) = v113 != 0;
        }
        goto LABEL_277;
      case 0x22u:
        if (v12 != 16)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x40000u;
        v115 = (google::protobuf::internal *)((char *)v11 + 1);
        v116 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_201;
        v117 = *(char *)v115;
        v116 = v116 + (v117 << 7) - 128;
        if (v117 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v116);
          v188 = result;
          *((_BYTE *)this + 249) = v177 != 0;
          if (!result)
            return result;
        }
        else
        {
          v115 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_201:
          v188 = v115;
          *((_BYTE *)this + 249) = v116 != 0;
        }
        goto LABEL_277;
      case 0x23u:
        if (v12 != 24)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x20000u;
        v118 = (google::protobuf::internal *)((char *)v11 + 1);
        v119 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_206;
        v120 = *(char *)v118;
        v119 = v119 + (v120 << 7) - 128;
        if (v120 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v119);
          v188 = result;
          *((_BYTE *)this + 248) = v178 != 0;
          if (!result)
            return result;
        }
        else
        {
          v118 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_206:
          v188 = v118;
          *((_BYTE *)this + 248) = v119 != 0;
        }
        goto LABEL_277;
      case 0x24u:
        if (v12 != 34)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 4u;
        v121 = *((_QWORD *)this + 1);
        v24 = (google::protobuf::internal::ArenaImpl *)(v121 & 0xFFFFFFFFFFFFFFFELL);
        if ((v121 & 1) != 0)
          v24 = *(google::protobuf::internal::ArenaImpl **)v24;
        v25 = (uint64_t **)((char *)this + 168);
        goto LABEL_269;
      case 0x28u:
        if (v12 != 64)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x100000u;
        v123 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v122) = *(unsigned __int8 *)v11;
        if ((v122 & 0x80) == 0)
          goto LABEL_215;
        v124 = *(char *)v123;
        v122 = v122 + (v124 << 7) - 128;
        if (v124 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v122);
          v188 = result;
          *((_DWORD *)this + 63) = v179;
          if (!result)
            return result;
        }
        else
        {
          v123 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_215:
          v188 = v123;
          *((_DWORD *)this + 63) = v122;
        }
        goto LABEL_277;
      case 0x29u:
        if (v12 != 72)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 0x40u;
        v126 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v125) = *(unsigned __int8 *)v11;
        if ((v125 & 0x80) == 0)
          goto LABEL_220;
        v127 = *(char *)v126;
        v125 = v125 + (v127 << 7) - 128;
        if (v127 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v125);
          v188 = result;
          *((_DWORD *)this + 79) = v180;
          if (!result)
            return result;
        }
        else
        {
          v126 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_220:
          v188 = v126;
          *((_DWORD *)this + 79) = v125;
        }
        goto LABEL_277;
      case 0x2Au:
        if (v12 != 80)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 0x80u;
        v129 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v128) = *(unsigned __int8 *)v11;
        if ((v128 & 0x80) == 0)
          goto LABEL_225;
        v130 = *(char *)v129;
        v128 = v128 + (v130 << 7) - 128;
        if (v130 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v128);
          v188 = result;
          *((_DWORD *)this + 80) = v181;
          if (!result)
            return result;
        }
        else
        {
          v129 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_225:
          v188 = v129;
          *((_DWORD *)this + 80) = v128;
        }
        goto LABEL_277;
      case 0x2Bu:
        if (v12 != 88)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 0x100u;
        v132 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v131) = *(unsigned __int8 *)v11;
        if ((v131 & 0x80) == 0)
          goto LABEL_230;
        v133 = *(char *)v132;
        v131 = v131 + (v133 << 7) - 128;
        if (v133 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v131);
          v188 = result;
          *((_DWORD *)this + 81) = v182;
          if (!result)
            return result;
        }
        else
        {
          v132 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_230:
          v188 = v132;
          *((_DWORD *)this + 81) = v131;
        }
        goto LABEL_277;
      case 0x2Cu:
        if (v12 != 98)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 8u;
        v153 = *((_QWORD *)this + 1);
        v135 = (google::protobuf::Arena *)(v153 & 0xFFFFFFFFFFFFFFFELL);
        if ((v153 & 1) != 0)
          v135 = *(google::protobuf::Arena **)v135;
        v136 = &sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_surface_;
        v137 = (sentencepiece::TrainerSpec *)((char *)this + 176);
        goto LABEL_274;
      case 0x2Du:
        if (v12 != 106)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x10u;
        v134 = *((_QWORD *)this + 1);
        v135 = (google::protobuf::Arena *)(v134 & 0xFFFFFFFFFFFFFFFELL);
        if ((v134 & 1) != 0)
          v135 = *(google::protobuf::Arena **)v135;
        v136 = &sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_piece_;
        v137 = (sentencepiece::TrainerSpec *)((char *)this + 184);
        goto LABEL_274;
      case 0x2Eu:
        if (v12 != 114)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x20u;
        v138 = *((_QWORD *)this + 1);
        v135 = (google::protobuf::Arena *)(v138 & 0xFFFFFFFFFFFFFFFELL);
        if ((v138 & 1) != 0)
          v135 = *(google::protobuf::Arena **)v135;
        v136 = &sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_bos_piece_;
        v137 = (sentencepiece::TrainerSpec *)((char *)this + 192);
        goto LABEL_274;
      case 0x2Fu:
        if (v12 != 122)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x40u;
        v139 = *((_QWORD *)this + 1);
        v135 = (google::protobuf::Arena *)(v139 & 0xFFFFFFFFFFFFFFFELL);
        if ((v139 & 1) != 0)
          v135 = *(google::protobuf::Arena **)v135;
        v136 = &sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_eos_piece_;
        v137 = (sentencepiece::TrainerSpec *)((char *)this + 200);
        goto LABEL_274;
      case 0x30u:
        if (v12 != 130)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x80u;
        v140 = *((_QWORD *)this + 1);
        v135 = (google::protobuf::Arena *)(v140 & 0xFFFFFFFFFFFFFFFELL);
        if ((v140 & 1) != 0)
          v135 = *(google::protobuf::Arena **)v135;
        v136 = &sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_pad_piece_;
        v137 = (sentencepiece::TrainerSpec *)((char *)this + 208);
LABEL_274:
        v152 = google::protobuf::internal::ArenaStringPtr::Mutable(v137, (const google::protobuf::internal::LazyString *)v136, v135);
        goto LABEL_275;
      case 0x31u:
        if (v12 != 136)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x80000u;
        v141 = (google::protobuf::internal *)((char *)v11 + 1);
        v142 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_251;
        v143 = *(char *)v141;
        v142 = v142 + (v143 << 7) - 128;
        if (v143 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v142);
          v188 = result;
          *((_BYTE *)this + 250) = v183 != 0;
          if (!result)
            return result;
        }
        else
        {
          v141 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_251:
          v188 = v141;
          *((_BYTE *)this + 250) = v142 != 0;
        }
        goto LABEL_277;
      case 0x32u:
        if (v12 != 144)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x2000u;
        v144 = (google::protobuf::internal *)((char *)v11 + 1);
        v145 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_256;
        v146 = *(char *)v144;
        v145 = v145 + (v146 << 7) - 128;
        if (v146 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v145);
          v188 = result;
          *((_BYTE *)this + 244) = v184 != 0;
          if (!result)
            return result;
        }
        else
        {
          v144 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_256:
          v188 = v144;
          *((_BYTE *)this + 244) = v145 != 0;
        }
        goto LABEL_277;
      case 0x33u:
        if (v12 != 157)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x200000u;
        v147 = *(_DWORD *)v11;
        v45 = (google::protobuf::internal *)((char *)v11 + 4);
        *((_DWORD *)this + 64) = v147;
LABEL_259:
        v188 = v45;
        goto LABEL_277;
      case 0x34u:
        if (v12 != 160)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x400000u;
        v148 = (google::protobuf::internal *)((char *)v11 + 1);
        v149 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_264;
        v150 = *(char *)v148;
        v149 = v149 + (v150 << 7) - 128;
        if (v150 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v149);
          v188 = result;
          *((_QWORD *)this + 33) = v185;
          if (!result)
            return result;
        }
        else
        {
          v148 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_264:
          v188 = v148;
          *((_QWORD *)this + 33) = v149;
        }
        goto LABEL_277;
      case 0x35u:
        if (v12 != 170)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x100u;
        v151 = *((_QWORD *)this + 1);
        v24 = (google::protobuf::internal::ArenaImpl *)(v151 & 0xFFFFFFFFFFFFFFFELL);
        if ((v151 & 1) != 0)
          v24 = *(google::protobuf::internal::ArenaImpl **)v24;
        v25 = (uint64_t **)((char *)this + 216);
LABEL_269:
        v152 = (std::string *)google::protobuf::internal::ArenaStringPtr::Mutable(v25, v24);
LABEL_275:
        result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v152, (std::string::value_type *)v188, (uint64_t)a3);
        goto LABEL_276;
      default:
LABEL_279:
        if (v12)
          v155 = (v12 & 7) == 4;
        else
          v155 = 1;
        if (v155)
        {
          *((_DWORD *)a3 + 20) = v12 - 1;
          return v11;
        }
        if (v12 < 0x640)
        {
          if ((*v187 & 1) != 0)
          {
            v156 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            v156 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>(v187);
            v11 = v188;
          }
          result = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v12, v156, v11, a3);
        }
        else
        {
          result = (google::protobuf::internal *)google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::TrainerSpec *)((char *)this + 16), v12, v11, (uint64_t)&sentencepiece::_TrainerSpec_default_instance_, v187, (int32x2_t *)a3);
        }
LABEL_276:
        v188 = result;
        if (!result)
          return result;
LABEL_277:
        v154 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v188, *((_DWORD *)a3 + 23));
        result = v188;
        if (v154)
          return result;
        continue;
    }
    break;
  }
  while (1)
  {
    v101 = (char *)result + 2;
    v188 = (google::protobuf::internal *)((char *)result + 2);
    v102 = (int *)*((_QWORD *)this + 18);
    if (!v102)
      break;
    v103 = *((int *)this + 34);
    v104 = *v102;
    if ((int)v103 >= *v102)
    {
      if (v104 == *((_DWORD *)this + 35))
      {
LABEL_176:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 32, v104 + 1);
        v102 = (int *)*((_QWORD *)this + 18);
        v104 = *v102;
      }
      *v102 = v104 + 1;
      v106 = *v7;
      if (*v7)
      {
        if ((*(_BYTE *)(v106 + 24) & 1) != 0)
        v105 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v106, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
      }
      else
      {
        v105 = (std::string *)operator new();
      }
      v105->__r_.__value_.__r.__words[0] = 0;
      v105->__r_.__value_.__l.__size_ = 0;
      v105->__r_.__value_.__r.__words[2] = 0;
      v107 = *((_QWORD *)this + 18);
      v108 = *((int *)this + 34);
      *((_DWORD *)this + 34) = v108 + 1;
      *(_QWORD *)(v107 + 8 * v108 + 8) = v105;
      v101 = (std::string::value_type *)v188;
      goto LABEL_183;
    }
    *((_DWORD *)this + 34) = v103 + 1;
    v105 = *(std::string **)&v102[2 * v103 + 2];
LABEL_183:
    result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v105, v101, (uint64_t)a3);
    v188 = result;
    if (!result)
      return result;
    if (*(_QWORD *)a3 <= (unint64_t)result || *(_WORD *)result != 506)
      goto LABEL_277;
  }
  v104 = *((_DWORD *)this + 35);
  goto LABEL_176;
}

unsigned __int8 *sentencepiece::TrainerSpec::_InternalSerialize(sentencepiece::TrainerSpec *this, unsigned __int8 *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6;
  int i;
  uint64_t v8;
  int64_t v9;
  const void *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int j;
  uint64_t v22;
  int64_t v23;
  const void *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unsigned __int8 v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  unsigned __int8 v65;
  unsigned __int8 v66;
  unsigned __int8 v67;
  int v68;
  unsigned __int8 v69;
  unsigned __int8 v70;
  unsigned __int8 v71;
  int v72;
  int k;
  uint64_t v74;
  int64_t v75;
  const void *v76;
  int v77;
  int m;
  uint64_t v79;
  int64_t v80;
  const void *v81;
  int v82;
  unsigned __int8 v83;
  unsigned __int8 v84;
  int v85;
  unsigned __int8 v86;
  unsigned __int8 v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  uint64_t v108;
  unsigned __int8 v110;
  unsigned __int8 v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;

  v6 = *((_DWORD *)this + 16);
  if (v6 >= 1)
  {
    for (i = 0; v6 != i; ++i)
    {
      v8 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 56, i);
      if (*(char *)(v8 + 23) < 0)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9 > 127)
          goto LABEL_13;
      }
      else
      {
        v9 = *(unsigned __int8 *)(v8 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)a2 + 14 >= v9)
      {
        *a2 = 10;
        a2[1] = v9;
        if (*(char *)(v8 + 23) >= 0)
          v10 = (const void *)v8;
        else
          v10 = *(const void **)v8;
        memcpy(a2 + 2, v10, v9);
        a2 += v9 + 2;
        continue;
      }
LABEL_13:
      a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 1, v8, (char *)a2);
    }
  }
  v11 = *((_DWORD *)this + 10);
  if ((v11 & 1) != 0)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 19) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
    if ((v11 & 0x800000) == 0)
    {
LABEL_16:
      if ((v11 & 0x1000000) == 0)
        goto LABEL_38;
      goto LABEL_17;
    }
  }
  else if ((v11 & 0x800000) == 0)
  {
    goto LABEL_16;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v13 = *((int *)this + 68);
  *a2 = 24;
  if (v13 > 0x7F)
  {
    a2[1] = v13 | 0x80;
    v15 = v13 >> 7;
    if (v13 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v15 | 0x80;
        v18 = v15 >> 7;
        ++a2;
        v19 = v15 >> 14;
        v15 >>= 7;
      }
      while (v19);
      *(a2 - 1) = v18;
      if ((v11 & 0x1000000) == 0)
        goto LABEL_38;
    }
    else
    {
      a2[2] = v15;
      a2 += 3;
      if ((v11 & 0x1000000) == 0)
        goto LABEL_38;
    }
  }
  else
  {
    a2[1] = v13;
    a2 += 2;
    if ((v11 & 0x1000000) == 0)
      goto LABEL_38;
  }
LABEL_17:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v12 = *((int *)this + 69);
  *a2 = 32;
  if (v12 > 0x7F)
  {
    a2[1] = v12 | 0x80;
    v14 = v12 >> 7;
    if (v12 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v14 | 0x80;
        v16 = v14 >> 7;
        ++a2;
        v17 = v14 >> 14;
        v14 >>= 7;
      }
      while (v17);
      *(a2 - 1) = v16;
    }
    else
    {
      a2[2] = v14;
      a2 += 3;
    }
  }
  else
  {
    a2[1] = v12;
    a2 += 2;
  }
LABEL_38:
  v20 = *((_DWORD *)this + 22);
  if (v20 >= 1)
  {
    for (j = 0; v20 != j; ++j)
    {
      v22 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 80, j);
      if (*(char *)(v22 + 23) < 0)
      {
        v23 = *(_QWORD *)(v22 + 8);
        if (v23 > 127)
          goto LABEL_50;
      }
      else
      {
        v23 = *(unsigned __int8 *)(v22 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)a2 + 14 >= v23)
      {
        *a2 = 42;
        a2[1] = v23;
        if (*(char *)(v22 + 23) >= 0)
          v24 = (const void *)v22;
        else
          v24 = *(const void **)v22;
        memcpy(a2 + 2, v24, v23);
        a2 += v23 + 2;
        continue;
      }
LABEL_50:
      a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 5, v22, (char *)a2);
    }
  }
  if ((v11 & 0x200) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v26 = *((int *)this + 56);
    *a2 = 48;
    if (v26 > 0x7F)
    {
      a2[1] = v26 | 0x80;
      v28 = v26 >> 7;
      if (v26 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v28 | 0x80;
          v31 = v28 >> 7;
          ++a2;
          v32 = v28 >> 14;
          v28 >>= 7;
        }
        while (v32);
        *(a2 - 1) = v31;
        if ((v11 & 2) != 0)
          goto LABEL_82;
      }
      else
      {
        a2[2] = v28;
        a2 += 3;
        if ((v11 & 2) != 0)
          goto LABEL_82;
      }
    }
    else
    {
      a2[1] = v26;
      a2 += 2;
      if ((v11 & 2) != 0)
        goto LABEL_82;
    }
LABEL_53:
    if ((v11 & 0x2000000) == 0)
      goto LABEL_54;
    goto LABEL_83;
  }
  if ((v11 & 2) == 0)
    goto LABEL_53;
LABEL_82:
  a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((_QWORD *)this + 20) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
  if ((v11 & 0x2000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x800) == 0)
      goto LABEL_55;
    goto LABEL_86;
  }
LABEL_83:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v33 = *((_DWORD *)this + 70);
  *a2 = 85;
  *(_DWORD *)(a2 + 1) = v33;
  a2 += 5;
  if ((v11 & 0x800) == 0)
  {
LABEL_55:
    if ((v11 & 0x400) == 0)
      goto LABEL_56;
LABEL_97:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v38 = *((int *)this + 57);
    *a2 = 96;
    if (v38 > 0x7F)
    {
      a2[1] = v38 | 0x80;
      v39 = v38 >> 7;
      if (v38 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v39 | 0x80;
          v40 = v39 >> 7;
          ++a2;
          v41 = v39 >> 14;
          v39 >>= 7;
        }
        while (v41);
        *(a2 - 1) = v40;
        if ((v11 & 0x1000) != 0)
          goto LABEL_108;
      }
      else
      {
        a2[2] = v39;
        a2 += 3;
        if ((v11 & 0x1000) != 0)
          goto LABEL_108;
      }
    }
    else
    {
      a2[1] = v38;
      a2 += 2;
      if ((v11 & 0x1000) != 0)
        goto LABEL_108;
    }
LABEL_57:
    if ((v11 & 0x4000000) == 0)
      goto LABEL_58;
LABEL_119:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v46 = *((int *)this + 71);
    *a2 = 112;
    if (v46 > 0x7F)
    {
      a2[1] = v46 | 0x80;
      v47 = v46 >> 7;
      if (v46 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v47 | 0x80;
          v48 = v47 >> 7;
          ++a2;
          v49 = v47 >> 14;
          v47 >>= 7;
        }
        while (v49);
        *(a2 - 1) = v48;
        if ((v11 & 0x8000000) != 0)
          goto LABEL_130;
      }
      else
      {
        a2[2] = v47;
        a2 += 3;
        if ((v11 & 0x8000000) != 0)
          goto LABEL_130;
      }
    }
    else
    {
      a2[1] = v46;
      a2 += 2;
      if ((v11 & 0x8000000) != 0)
        goto LABEL_130;
    }
LABEL_59:
    if ((v11 & 0x10000000) == 0)
      goto LABEL_60;
LABEL_133:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v51 = *((int *)this + 73);
    *(_WORD *)a2 = 384;
    if (v51 > 0x7F)
    {
      a2[2] = v51 | 0x80;
      v52 = v51 >> 7;
      if (v51 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v52 | 0x80;
          v53 = v52 >> 7;
          ++a2;
          v54 = v52 >> 14;
          v52 >>= 7;
        }
        while (v54);
        *(a2 - 1) = v53;
        if ((v11 & 0x20000000) != 0)
          goto LABEL_144;
      }
      else
      {
        a2[3] = v52;
        a2 += 4;
        if ((v11 & 0x20000000) != 0)
          goto LABEL_144;
      }
    }
    else
    {
      a2[2] = v51;
      a2 += 3;
      if ((v11 & 0x20000000) != 0)
        goto LABEL_144;
    }
LABEL_61:
    if ((v11 & 0x40000000) == 0)
      goto LABEL_155;
    goto LABEL_62;
  }
LABEL_86:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v34 = *((_QWORD *)this + 29);
  *a2 = 88;
  if (v34 > 0x7F)
  {
    a2[1] = v34 | 0x80;
    v35 = v34 >> 7;
    if (v34 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v35 | 0x80;
        v36 = v35 >> 7;
        ++a2;
        v37 = v35 >> 14;
        v35 >>= 7;
      }
      while (v37);
      *(a2 - 1) = v36;
      if ((v11 & 0x400) != 0)
        goto LABEL_97;
    }
    else
    {
      a2[2] = v35;
      a2 += 3;
      if ((v11 & 0x400) != 0)
        goto LABEL_97;
    }
  }
  else
  {
    a2[1] = v34;
    a2 += 2;
    if ((v11 & 0x400) != 0)
      goto LABEL_97;
  }
LABEL_56:
  if ((v11 & 0x1000) == 0)
    goto LABEL_57;
LABEL_108:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v42 = *((int *)this + 60);
  *a2 = 104;
  if (v42 > 0x7F)
  {
    a2[1] = v42 | 0x80;
    v43 = v42 >> 7;
    if (v42 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v43 | 0x80;
        v44 = v43 >> 7;
        ++a2;
        v45 = v43 >> 14;
        v43 >>= 7;
      }
      while (v45);
      *(a2 - 1) = v44;
      if ((v11 & 0x4000000) != 0)
        goto LABEL_119;
    }
    else
    {
      a2[2] = v43;
      a2 += 3;
      if ((v11 & 0x4000000) != 0)
        goto LABEL_119;
    }
  }
  else
  {
    a2[1] = v42;
    a2 += 2;
    if ((v11 & 0x4000000) != 0)
      goto LABEL_119;
  }
LABEL_58:
  if ((v11 & 0x8000000) == 0)
    goto LABEL_59;
LABEL_130:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v50 = *((_DWORD *)this + 72);
  *a2 = 125;
  *(_DWORD *)(a2 + 1) = v50;
  a2 += 5;
  if ((v11 & 0x10000000) != 0)
    goto LABEL_133;
LABEL_60:
  if ((v11 & 0x20000000) == 0)
    goto LABEL_61;
LABEL_144:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v55 = *((int *)this + 74);
  *(_WORD *)a2 = 392;
  if (v55 > 0x7F)
  {
    a2[2] = v55 | 0x80;
    v56 = v55 >> 7;
    if (v55 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v56 | 0x80;
        v57 = v56 >> 7;
        ++a2;
        v58 = v56 >> 14;
        v56 >>= 7;
      }
      while (v58);
      *(a2 - 1) = v57;
      if ((v11 & 0x40000000) == 0)
        goto LABEL_155;
    }
    else
    {
      a2[3] = v56;
      a2 += 4;
      if ((v11 & 0x40000000) == 0)
        goto LABEL_155;
    }
  }
  else
  {
    a2[2] = v55;
    a2 += 3;
    if ((v11 & 0x40000000) == 0)
      goto LABEL_155;
  }
LABEL_62:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v25 = *((int *)this + 75);
  *(_WORD *)a2 = 400;
  if (v25 > 0x7F)
  {
    a2[2] = v25 | 0x80;
    v27 = v25 >> 7;
    if (v25 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v27 | 0x80;
        v29 = v27 >> 7;
        ++a2;
        v30 = v27 >> 14;
        v27 >>= 7;
      }
      while (v30);
      *(a2 - 1) = v29;
    }
    else
    {
      a2[3] = v27;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v25;
    a2 += 3;
  }
LABEL_155:
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v59 = *((_BYTE *)this + 308);
    *(_WORD *)a2 = 408;
    a2[2] = v59;
    a2 += 3;
  }
  if ((*((_DWORD *)this + 10) & 0x80000000) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v60 = *((int *)this + 76);
    *(_WORD *)a2 = 416;
    if (v60 > 0x7F)
    {
      a2[2] = v60 | 0x80;
      v61 = v60 >> 7;
      if (v60 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v61 | 0x80;
          v62 = v61 >> 7;
          ++a2;
          v63 = v61 >> 14;
          v61 >>= 7;
        }
        while (v63);
        *(a2 - 1) = v62;
      }
      else
      {
        a2[3] = v61;
        a2 += 4;
      }
    }
    else
    {
      a2[2] = v60;
      a2 += 3;
    }
  }
  v64 = *((_DWORD *)this + 11);
  if ((v64 & 2) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v65 = *((_BYTE *)this + 309);
    *(_WORD *)a2 = 424;
    a2[2] = v65;
    a2 += 3;
    if ((v64 & 8) == 0)
    {
LABEL_171:
      if ((v64 & 4) == 0)
        goto LABEL_182;
      goto LABEL_179;
    }
  }
  else if ((v64 & 8) == 0)
  {
    goto LABEL_171;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v66 = *((_BYTE *)this + 311);
  *(_WORD *)a2 = 432;
  a2[2] = v66;
  a2 += 3;
  if ((v64 & 4) != 0)
  {
LABEL_179:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v67 = *((_BYTE *)this + 310);
    *(_WORD *)a2 = 440;
    a2[2] = v67;
    a2 += 3;
  }
LABEL_182:
  v68 = *((_DWORD *)this + 10);
  if ((v68 & 0x4000) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v69 = *((_BYTE *)this + 245);
    *(_WORD *)a2 = 448;
    a2[2] = v69;
    a2 += 3;
    if ((v68 & 0x10000) == 0)
    {
LABEL_184:
      if ((v68 & 0x8000) == 0)
        goto LABEL_195;
      goto LABEL_192;
    }
  }
  else if ((v68 & 0x10000) == 0)
  {
    goto LABEL_184;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v70 = *((_BYTE *)this + 247);
  *(_WORD *)a2 = 456;
  a2[2] = v70;
  a2 += 3;
  if ((v68 & 0x8000) != 0)
  {
LABEL_192:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v71 = *((_BYTE *)this + 246);
    *(_WORD *)a2 = 464;
    a2[2] = v71;
    a2 += 3;
  }
LABEL_195:
  v72 = *((_DWORD *)this + 28);
  if (v72 >= 1)
  {
    for (k = 0; v72 != k; ++k)
    {
      v74 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 104, k);
      if (*(char *)(v74 + 23) < 0)
      {
        v75 = *(_QWORD *)(v74 + 8);
        if (v75 > 127)
          goto LABEL_207;
      }
      else
      {
        v75 = *(unsigned __int8 *)(v74 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)a2 + 13 >= v75)
      {
        *(_WORD *)a2 = 498;
        a2[2] = v75;
        if (*(char *)(v74 + 23) >= 0)
          v76 = (const void *)v74;
        else
          v76 = *(const void **)v74;
        memcpy(a2 + 3, v76, v75);
        a2 += v75 + 3;
        continue;
      }
LABEL_207:
      a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 30, v74, (char *)a2);
    }
  }
  v77 = *((_DWORD *)this + 34);
  if (v77 >= 1)
  {
    for (m = 0; v77 != m; ++m)
    {
      v79 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 128, m);
      if (*(char *)(v79 + 23) < 0)
      {
        v80 = *(_QWORD *)(v79 + 8);
        if (v80 > 127)
          goto LABEL_220;
      }
      else
      {
        v80 = *(unsigned __int8 *)(v79 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)a2 + 13 >= v80)
      {
        *(_WORD *)a2 = 506;
        a2[2] = v80;
        if (*(char *)(v79 + 23) >= 0)
          v81 = (const void *)v79;
        else
          v81 = *(const void **)v79;
        memcpy(a2 + 3, v81, v80);
        a2 += v80 + 3;
        continue;
      }
LABEL_220:
      a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 31, v79, (char *)a2);
    }
  }
  v82 = *((_DWORD *)this + 11);
  if ((v82 & 0x10) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v83 = *((_BYTE *)this + 312);
    *(_WORD *)a2 = 640;
    a2[2] = v83;
    a2 += 3;
  }
  if ((v82 & 0x20) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v84 = *((_BYTE *)this + 313);
    *(_WORD *)a2 = 648;
    a2[2] = v84;
    a2 += 3;
  }
  v85 = *((_DWORD *)this + 10);
  if ((v85 & 0x40000) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v86 = *((_BYTE *)this + 249);
    *(_WORD *)a2 = 656;
    a2[2] = v86;
    a2 += 3;
    if ((v85 & 0x20000) == 0)
    {
LABEL_231:
      if ((v85 & 4) == 0)
        goto LABEL_232;
      goto LABEL_240;
    }
  }
  else if ((v85 & 0x20000) == 0)
  {
    goto LABEL_231;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v87 = *((_BYTE *)this + 248);
  *(_WORD *)a2 = 664;
  a2[2] = v87;
  a2 += 3;
  if ((v85 & 4) == 0)
  {
LABEL_232:
    if ((v85 & 0x100000) == 0)
      goto LABEL_250;
    goto LABEL_241;
  }
LABEL_240:
  a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 36, *((_QWORD *)this + 21) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
  if ((v85 & 0x100000) == 0)
    goto LABEL_250;
LABEL_241:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v88 = *((int *)this + 63);
  *(_WORD *)a2 = 704;
  if (v88 > 0x7F)
  {
    a2[2] = v88 | 0x80;
    v89 = v88 >> 7;
    if (v88 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v89 | 0x80;
        v90 = v89 >> 7;
        ++a2;
        v91 = v89 >> 14;
        v89 >>= 7;
      }
      while (v91);
      *(a2 - 1) = v90;
    }
    else
    {
      a2[3] = v89;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v88;
    a2 += 3;
  }
LABEL_250:
  v92 = *((_DWORD *)this + 11);
  if ((v92 & 0x40) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v94 = *((int *)this + 79);
    *(_WORD *)a2 = 712;
    if (v94 > 0x7F)
    {
      a2[2] = v94 | 0x80;
      v96 = v94 >> 7;
      if (v94 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v96 | 0x80;
          v99 = v96 >> 7;
          ++a2;
          v100 = v96 >> 14;
          v96 >>= 7;
        }
        while (v100);
        *(a2 - 1) = v99;
        if ((v92 & 0x80) != 0)
          goto LABEL_273;
      }
      else
      {
        a2[3] = v96;
        a2 += 4;
        if ((v92 & 0x80) != 0)
          goto LABEL_273;
      }
    }
    else
    {
      a2[2] = v94;
      a2 += 3;
      if ((v92 & 0x80) != 0)
        goto LABEL_273;
    }
LABEL_252:
    if ((v92 & 0x100) == 0)
      goto LABEL_284;
    goto LABEL_253;
  }
  if ((v92 & 0x80) == 0)
    goto LABEL_252;
LABEL_273:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v101 = *((int *)this + 80);
  *(_WORD *)a2 = 720;
  if (v101 > 0x7F)
  {
    a2[2] = v101 | 0x80;
    v102 = v101 >> 7;
    if (v101 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v102 | 0x80;
        v103 = v102 >> 7;
        ++a2;
        v104 = v102 >> 14;
        v102 >>= 7;
      }
      while (v104);
      *(a2 - 1) = v103;
      if ((v92 & 0x100) == 0)
        goto LABEL_284;
    }
    else
    {
      a2[3] = v102;
      a2 += 4;
      if ((v92 & 0x100) == 0)
        goto LABEL_284;
    }
  }
  else
  {
    a2[2] = v101;
    a2 += 3;
    if ((v92 & 0x100) == 0)
      goto LABEL_284;
  }
LABEL_253:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v93 = *((int *)this + 81);
  *(_WORD *)a2 = 728;
  if (v93 > 0x7F)
  {
    a2[2] = v93 | 0x80;
    v95 = v93 >> 7;
    if (v93 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v95 | 0x80;
        v97 = v95 >> 7;
        ++a2;
        v98 = v95 >> 14;
        v95 >>= 7;
      }
      while (v98);
      *(a2 - 1) = v97;
    }
    else
    {
      a2[3] = v95;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v93;
    a2 += 3;
  }
LABEL_284:
  v105 = *((_DWORD *)this + 10);
  if ((v105 & 8) != 0)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 44, *((_QWORD *)this + 22) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
    if ((v105 & 0x10) == 0)
    {
LABEL_286:
      if ((v105 & 0x20) == 0)
        goto LABEL_287;
      goto LABEL_299;
    }
  }
  else if ((v105 & 0x10) == 0)
  {
    goto LABEL_286;
  }
  a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 45, *((_QWORD *)this + 23) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
  if ((v105 & 0x20) == 0)
  {
LABEL_287:
    if ((v105 & 0x40) == 0)
      goto LABEL_288;
    goto LABEL_300;
  }
LABEL_299:
  a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 46, *((_QWORD *)this + 24) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
  if ((v105 & 0x40) == 0)
  {
LABEL_288:
    if ((v105 & 0x80) == 0)
      goto LABEL_289;
    goto LABEL_301;
  }
LABEL_300:
  a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 47, *((_QWORD *)this + 25) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
  if ((v105 & 0x80) == 0)
  {
LABEL_289:
    if ((v105 & 0x80000) == 0)
      goto LABEL_290;
    goto LABEL_302;
  }
LABEL_301:
  a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 48, *((_QWORD *)this + 26) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
  if ((v105 & 0x80000) == 0)
  {
LABEL_290:
    if ((v105 & 0x2000) == 0)
      goto LABEL_291;
    goto LABEL_305;
  }
LABEL_302:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v110 = *((_BYTE *)this + 250);
  *(_WORD *)a2 = 904;
  a2[2] = v110;
  a2 += 3;
  if ((v105 & 0x2000) == 0)
  {
LABEL_291:
    if ((v105 & 0x200000) == 0)
      goto LABEL_292;
    goto LABEL_308;
  }
LABEL_305:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v111 = *((_BYTE *)this + 244);
  *(_WORD *)a2 = 912;
  a2[2] = v111;
  a2 += 3;
  if ((v105 & 0x200000) == 0)
  {
LABEL_292:
    if ((v105 & 0x400000) == 0)
      goto LABEL_293;
    goto LABEL_311;
  }
LABEL_308:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v112 = *((_DWORD *)this + 64);
  *(_WORD *)a2 = 925;
  *(_DWORD *)(a2 + 2) = v112;
  a2 += 6;
  if ((v105 & 0x400000) == 0)
  {
LABEL_293:
    if ((v105 & 0x100) == 0)
      goto LABEL_295;
    goto LABEL_294;
  }
LABEL_311:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v113 = *((_QWORD *)this + 33);
  *(_WORD *)a2 = 928;
  if (v113 <= 0x7F)
  {
    a2[2] = v113;
    a2 += 3;
    if ((v105 & 0x100) == 0)
      goto LABEL_295;
LABEL_294:
    a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 53, *((_QWORD *)this + 27) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
    goto LABEL_295;
  }
  a2[2] = v113 | 0x80;
  v114 = v113 >> 7;
  if (v113 >> 14)
  {
    a2 += 4;
    do
    {
      *(a2 - 1) = v114 | 0x80;
      v115 = v114 >> 7;
      ++a2;
      v116 = v114 >> 14;
      v114 >>= 7;
    }
    while (v116);
    *(a2 - 1) = v115;
    if ((v105 & 0x100) != 0)
      goto LABEL_294;
  }
  else
  {
    a2[3] = v114;
    a2 += 4;
    if ((v105 & 0x100) != 0)
      goto LABEL_294;
  }
LABEL_295:
  v106 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::TrainerSpec *)((char *)this + 16), 200, 0x20000000, a2, a3);
  v107 = v106;
  v108 = *((_QWORD *)this + 1);
  if ((v108 & 1) == 0)
    return v107;
  v117 = v108 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v117 + 31) < 0)
  {
    v118 = *(void **)(v117 + 8);
    v119 = *(_QWORD *)(v117 + 16);
  }
  else
  {
    v118 = (void *)(v117 + 8);
    LODWORD(v119) = *(unsigned __int8 *)(v117 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)v106 >= (int)v119)
  {
    v120 = (int)v119;
    memcpy(v106, v118, (int)v119);
    v107 += v120;
    return v107;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v118, v119, v106);
}

uint64_t sentencepiece::TrainerSpec::ByteSizeLong(sentencepiece::TrainerSpec *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;

  v2 = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::TrainerSpec *)((char *)this + 16));
  v3 = *((unsigned int *)this + 16);
  v4 = v2 + v3;
  if ((int)v3 >= 1)
  {
    v5 = 0;
    do
    {
      v6 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 56, v5);
      v7 = *(unsigned __int8 *)(v6 + 23);
      if ((v7 & 0x80u) != 0)
        v7 = *(_QWORD *)(v6 + 8);
      v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      ++v5;
    }
    while ((_DWORD)v3 != v5);
  }
  v8 = *((unsigned int *)this + 22);
  v9 = v4 + v8;
  if ((int)v8 >= 1)
  {
    v10 = 0;
    do
    {
      v11 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 80, v10);
      v12 = *(unsigned __int8 *)(v11 + 23);
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(v11 + 8);
      v9 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      ++v10;
    }
    while ((_DWORD)v8 != v10);
  }
  v13 = *((unsigned int *)this + 28);
  v14 = v9 + 2 * v13;
  if ((int)v13 >= 1)
  {
    v15 = 0;
    do
    {
      v16 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 104, v15);
      v17 = *(unsigned __int8 *)(v16 + 23);
      if ((v17 & 0x80u) != 0)
        v17 = *(_QWORD *)(v16 + 8);
      v14 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6);
      ++v15;
    }
    while ((_DWORD)v13 != v15);
  }
  v18 = *((unsigned int *)this + 34);
  v19 = v14 + 2 * v18;
  if ((int)v18 >= 1)
  {
    v20 = 0;
    do
    {
      v21 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 128, v20);
      v22 = *(unsigned __int8 *)(v21 + 23);
      if ((v22 & 0x80u) != 0)
        v22 = *(_QWORD *)(v21 + 8);
      v19 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6);
      ++v20;
    }
    while ((_DWORD)v18 != v20);
  }
  v23 = *((_DWORD *)this + 10);
  if (!(_BYTE)v23)
    goto LABEL_33;
  if ((v23 & 1) != 0)
  {
    v58 = *((_QWORD *)this + 19) & 0xFFFFFFFFFFFFFFFELL;
    v59 = *(unsigned __int8 *)(v58 + 23);
    v60 = *(_QWORD *)(v58 + 8);
    if ((v59 & 0x80u) == 0)
      v60 = v59;
    v19 += v60 + ((9 * (__clz(v60 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v23 & 2) == 0)
    {
LABEL_24:
      if ((v23 & 4) == 0)
        goto LABEL_25;
      goto LABEL_131;
    }
  }
  else if ((v23 & 2) == 0)
  {
    goto LABEL_24;
  }
  v61 = *((_QWORD *)this + 20) & 0xFFFFFFFFFFFFFFFELL;
  v62 = *(unsigned __int8 *)(v61 + 23);
  v63 = *(_QWORD *)(v61 + 8);
  if ((v62 & 0x80u) == 0)
    v63 = v62;
  v19 += v63 + ((9 * (__clz(v63 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v23 & 4) == 0)
  {
LABEL_25:
    if ((v23 & 8) == 0)
      goto LABEL_26;
    goto LABEL_134;
  }
LABEL_131:
  v64 = *((_QWORD *)this + 21) & 0xFFFFFFFFFFFFFFFELL;
  v65 = *(unsigned __int8 *)(v64 + 23);
  v66 = *(_QWORD *)(v64 + 8);
  if ((v65 & 0x80u) == 0)
    v66 = v65;
  v19 += v66 + ((9 * (__clz(v66 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 8) == 0)
  {
LABEL_26:
    if ((v23 & 0x10) == 0)
      goto LABEL_27;
    goto LABEL_137;
  }
LABEL_134:
  v67 = *((_QWORD *)this + 22) & 0xFFFFFFFFFFFFFFFELL;
  v68 = *(unsigned __int8 *)(v67 + 23);
  v69 = *(_QWORD *)(v67 + 8);
  if ((v68 & 0x80u) == 0)
    v69 = v68;
  v19 += v69 + ((9 * (__clz(v69 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x10) == 0)
  {
LABEL_27:
    if ((v23 & 0x20) == 0)
      goto LABEL_28;
LABEL_140:
    v73 = *((_QWORD *)this + 24) & 0xFFFFFFFFFFFFFFFELL;
    v74 = *(unsigned __int8 *)(v73 + 23);
    v75 = *(_QWORD *)(v73 + 8);
    if ((v74 & 0x80u) == 0)
      v75 = v74;
    v19 += v75 + ((9 * (__clz(v75 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v23 & 0x40) == 0)
    {
LABEL_29:
      if ((v23 & 0x80) == 0)
        goto LABEL_33;
      goto LABEL_30;
    }
    goto LABEL_143;
  }
LABEL_137:
  v70 = *((_QWORD *)this + 23) & 0xFFFFFFFFFFFFFFFELL;
  v71 = *(unsigned __int8 *)(v70 + 23);
  v72 = *(_QWORD *)(v70 + 8);
  if ((v71 & 0x80u) == 0)
    v72 = v71;
  v19 += v72 + ((9 * (__clz(v72 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x20) != 0)
    goto LABEL_140;
LABEL_28:
  if ((v23 & 0x40) == 0)
    goto LABEL_29;
LABEL_143:
  v76 = *((_QWORD *)this + 25) & 0xFFFFFFFFFFFFFFFELL;
  v77 = *(unsigned __int8 *)(v76 + 23);
  v78 = *(_QWORD *)(v76 + 8);
  if ((v77 & 0x80u) == 0)
    v78 = v77;
  v19 += v78 + ((9 * (__clz(v78 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x80) != 0)
  {
LABEL_30:
    v24 = *((_QWORD *)this + 26) & 0xFFFFFFFFFFFFFFFELL;
    v25 = *(unsigned __int8 *)(v24 + 23);
    v26 = *(_QWORD *)(v24 + 8);
    if ((v25 & 0x80u) == 0)
      v26 = v25;
    v19 += v26 + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
LABEL_33:
  if ((v23 & 0xFF00) == 0)
    goto LABEL_50;
  if ((v23 & 0x100) != 0)
  {
    v79 = *((_QWORD *)this + 27) & 0xFFFFFFFFFFFFFFFELL;
    v80 = *(unsigned __int8 *)(v79 + 23);
    v81 = *(_QWORD *)(v79 + 8);
    if ((v80 & 0x80u) == 0)
      v81 = v80;
    v19 += v81 + ((9 * (__clz(v81 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v23 & 0x200) == 0)
    {
LABEL_36:
      if ((v23 & 0x400) == 0)
        goto LABEL_37;
      goto LABEL_154;
    }
  }
  else if ((v23 & 0x200) == 0)
  {
    goto LABEL_36;
  }
  v82 = *((_DWORD *)this + 56);
  v83 = (9 * (__clz(v82 | 1) ^ 0x1F) + 73) >> 6;
  if (v82 >= 0)
    v84 = v83;
  else
    v84 = 10;
  v19 += v84 + 1;
  if ((v23 & 0x400) == 0)
  {
LABEL_37:
    if ((v23 & 0x800) == 0)
      goto LABEL_38;
LABEL_158:
    v19 += ((9 * (__clz(*((_QWORD *)this + 29) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v23 & 0x1000) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
LABEL_154:
  v85 = *((_DWORD *)this + 57);
  v86 = (9 * (__clz(v85 | 1) ^ 0x1F) + 73) >> 6;
  if (v85 >= 0)
    v87 = v86;
  else
    v87 = 10;
  v19 += v87 + 1;
  if ((v23 & 0x800) != 0)
    goto LABEL_158;
LABEL_38:
  if ((v23 & 0x1000) != 0)
  {
LABEL_39:
    v27 = *((_DWORD *)this + 60);
    v28 = (9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6;
    if (v27 >= 0)
      v29 = v28;
    else
      v29 = 10;
    v19 += v29 + 1;
  }
LABEL_43:
  v30 = v19 + 3;
  if ((v23 & 0x2000) == 0)
    v30 = v19;
  if ((v23 & 0x4000) != 0)
    v30 += 3;
  if ((v23 & 0x8000) != 0)
    v19 = v30 + 3;
  else
    v19 = v30;
LABEL_50:
  if ((v23 & 0xFF0000) != 0)
  {
    v31 = v19 + 3;
    if ((v23 & 0x10000) == 0)
      v31 = v19;
    if ((v23 & 0x20000) != 0)
      v31 += 3;
    if ((v23 & 0x40000) != 0)
      v31 += 3;
    if ((v23 & 0x80000) != 0)
      v31 += 3;
    if ((v23 & 0x100000) != 0)
    {
      v32 = *((_DWORD *)this + 63);
      v33 = (9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6;
      if (v32 >= 0)
        v34 = v33;
      else
        v34 = 10;
      v31 += v34 + 2;
    }
    if ((v23 & 0x200000) != 0)
      v19 = v31 + 6;
    else
      v19 = v31;
    if ((v23 & 0x400000) != 0)
      v19 += ((9 * (__clz(*((_QWORD *)this + 33) | 1) ^ 0x3F) + 73) >> 6) + 2;
    if ((v23 & 0x800000) != 0)
    {
      v35 = *((_DWORD *)this + 68);
      v36 = (9 * (__clz(v35 | 1) ^ 0x1F) + 73) >> 6;
      if (v35 >= 0)
        v37 = v36;
      else
        v37 = 10;
      v19 += v37 + 1;
    }
  }
  if (!HIBYTE(v23))
    goto LABEL_94;
  if ((v23 & 0x1000000) != 0)
  {
    v38 = *((_DWORD *)this + 69);
    v39 = (9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6;
    if (v38 >= 0)
      v40 = v39;
    else
      v40 = 10;
    v19 += v40 + 1;
  }
  v41 = v19 + 5;
  if ((v23 & 0x2000000) == 0)
    v41 = v19;
  if ((v23 & 0x4000000) != 0)
  {
    v42 = *((_DWORD *)this + 71);
    v43 = (9 * (__clz(v42 | 1) ^ 0x1F) + 73) >> 6;
    if (v42 >= 0)
      v44 = v43;
    else
      v44 = 10;
    v41 += v44 + 1;
  }
  if ((v23 & 0x8000000) != 0)
    v19 = v41 + 5;
  else
    v19 = v41;
  if ((v23 & 0x10000000) == 0)
  {
    if ((v23 & 0x20000000) == 0)
      goto LABEL_92;
LABEL_164:
    v91 = *((_DWORD *)this + 74);
    v92 = ((9 * (__clz(v91 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v91 >= 0)
      v93 = v92;
    else
      v93 = 12;
    v19 += v93;
    if ((v23 & 0x40000000) == 0)
    {
LABEL_93:
      if ((v23 & 0x80000000) == 0)
        goto LABEL_94;
      goto LABEL_172;
    }
    goto LABEL_168;
  }
  v88 = *((_DWORD *)this + 73);
  v89 = (9 * (__clz(v88 | 1) ^ 0x1F) + 73) >> 6;
  if (v88 >= 0)
    v90 = v89;
  else
    v90 = 10;
  v19 += v90 + 2;
  if ((v23 & 0x20000000) != 0)
    goto LABEL_164;
LABEL_92:
  if ((v23 & 0x40000000) == 0)
    goto LABEL_93;
LABEL_168:
  v94 = *((_DWORD *)this + 75);
  v95 = ((9 * (__clz(v94 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if (v94 >= 0)
    v96 = v95;
  else
    v96 = 12;
  v19 += v96;
  if ((v23 & 0x80000000) != 0)
  {
LABEL_172:
    v97 = *((_DWORD *)this + 76);
    v98 = ((9 * (__clz(v97 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v97 >= 0)
      v99 = v98;
    else
      v99 = 12;
    v19 += v99;
  }
LABEL_94:
  v45 = *((_DWORD *)this + 11);
  if ((_BYTE)v45)
  {
    v46 = v19 + 3;
    if ((v45 & 1) == 0)
      v46 = v19;
    if ((v45 & 2) != 0)
      v46 += 3;
    if ((v45 & 4) != 0)
      v46 += 3;
    if ((v45 & 8) != 0)
      v46 += 3;
    if ((v45 & 0x10) != 0)
      v46 += 3;
    if ((v45 & 0x20) != 0)
      v19 = v46 + 3;
    else
      v19 = v46;
    if ((v45 & 0x40) != 0)
    {
      v47 = *((_DWORD *)this + 79);
      v48 = ((9 * (__clz(v47 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v47 >= 0)
        v49 = v48;
      else
        v49 = 12;
      v19 += v49;
    }
    if ((v45 & 0x80) != 0)
    {
      v50 = *((_DWORD *)this + 80);
      v51 = ((9 * (__clz(v50 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v50 >= 0)
        v52 = v51;
      else
        v52 = 12;
      v19 += v52;
    }
  }
  if ((v45 & 0x100) != 0)
  {
    v53 = *((_DWORD *)this + 81);
    v54 = ((9 * (__clz(v53 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v53 >= 0)
      v55 = v54;
    else
      v55 = 12;
    v19 += v55;
  }
  v56 = *((_QWORD *)this + 1);
  if ((v56 & 1) != 0)
  {
    v100 = v56 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v100 + 31) < 0)
      v101 = *(_QWORD *)(v100 + 16);
    else
      v101 = *(unsigned __int8 *)(v100 + 31);
    v19 += v101;
  }
  *((_DWORD *)this + 12) = v19;
  return v19;
}

void sentencepiece::TrainerSpec::CheckTypeAndMergeFrom(sentencepiece::TrainerSpec *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::TrainerSpec *__hidden))a2 != &off_1E7BE8748)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::TrainerSpec::MergeFrom(this, a2);
}

void sentencepiece::TrainerSpec::MergeFrom(sentencepiece::TrainerSpec *this, const sentencepiece::TrainerSpec *a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  unsigned int v13;
  __int128 *v14;
  uint64_t v15;
  google::protobuf::internal::ArenaImpl *v16;
  __int128 *v17;
  uint64_t v18;
  google::protobuf::internal::ArenaImpl *v19;
  __int128 *v20;
  uint64_t v21;
  google::protobuf::internal::ArenaImpl *v22;
  __int128 *v23;
  uint64_t v24;
  google::protobuf::internal::ArenaImpl *v25;
  __int128 *v26;
  uint64_t v27;
  google::protobuf::internal::ArenaImpl *v28;
  __int128 *v29;
  uint64_t v30;
  google::protobuf::internal::ArenaImpl *v31;
  __int128 *v32;
  uint64_t v33;
  google::protobuf::internal::ArenaImpl *v34;
  __int128 *v35;
  uint64_t v36;
  google::protobuf::internal::ArenaImpl *v37;
  int v38;
  int v39;
  __int128 *v40;
  uint64_t v41;
  google::protobuf::internal::ArenaImpl *v42;
  char v43;
  std::string v44[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v44, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 1671);
    v4 = google::protobuf::internal::LogMessage::operator<<(v44, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v43, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v44[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::TrainerSpec *)((char *)this + 16), (const sentencepiece::TrainerSpec *)((char *)a2 + 16));
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int **)this + 7, (uint64_t)a2 + 56);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int **)this + 10, (uint64_t)a2 + 80);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int **)this + 13, (uint64_t)a2 + 104);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int **)this + 16, (uint64_t)a2 + 128);
  v13 = *((_DWORD *)a2 + 10);
  if (!(_BYTE)v13)
    goto LABEL_47;
  if ((v13 & 1) != 0)
  {
    v14 = (__int128 *)(*((_QWORD *)a2 + 19) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 10) |= 1u;
    v15 = *((_QWORD *)this + 1);
    v16 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
    if ((v15 & 1) != 0)
      v16 = *(google::protobuf::internal::ArenaImpl **)v16;
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 152), v14, v16);
    if ((v13 & 2) == 0)
    {
LABEL_16:
      if ((v13 & 4) == 0)
        goto LABEL_17;
      goto LABEL_29;
    }
  }
  else if ((v13 & 2) == 0)
  {
    goto LABEL_16;
  }
  v17 = (__int128 *)(*((_QWORD *)a2 + 20) & 0xFFFFFFFFFFFFFFFELL);
  *((_DWORD *)this + 10) |= 2u;
  v18 = *((_QWORD *)this + 1);
  v19 = (google::protobuf::internal::ArenaImpl *)(v18 & 0xFFFFFFFFFFFFFFFELL);
  if ((v18 & 1) != 0)
    v19 = *(google::protobuf::internal::ArenaImpl **)v19;
  google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 160), v17, v19);
  if ((v13 & 4) == 0)
  {
LABEL_17:
    if ((v13 & 8) == 0)
      goto LABEL_18;
    goto LABEL_32;
  }
LABEL_29:
  v20 = (__int128 *)(*((_QWORD *)a2 + 21) & 0xFFFFFFFFFFFFFFFELL);
  *((_DWORD *)this + 10) |= 4u;
  v21 = *((_QWORD *)this + 1);
  v22 = (google::protobuf::internal::ArenaImpl *)(v21 & 0xFFFFFFFFFFFFFFFELL);
  if ((v21 & 1) != 0)
    v22 = *(google::protobuf::internal::ArenaImpl **)v22;
  google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 168), v20, v22);
  if ((v13 & 8) == 0)
  {
LABEL_18:
    if ((v13 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_32:
  v23 = (__int128 *)(*((_QWORD *)a2 + 22) & 0xFFFFFFFFFFFFFFFELL);
  *((_DWORD *)this + 10) |= 8u;
  v24 = *((_QWORD *)this + 1);
  v25 = (google::protobuf::internal::ArenaImpl *)(v24 & 0xFFFFFFFFFFFFFFFELL);
  if ((v24 & 1) != 0)
    v25 = *(google::protobuf::internal::ArenaImpl **)v25;
  google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 176), v23, v25);
  if ((v13 & 0x10) == 0)
  {
LABEL_19:
    if ((v13 & 0x20) == 0)
      goto LABEL_20;
LABEL_38:
    v29 = (__int128 *)(*((_QWORD *)a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 10) |= 0x20u;
    v30 = *((_QWORD *)this + 1);
    v31 = (google::protobuf::internal::ArenaImpl *)(v30 & 0xFFFFFFFFFFFFFFFELL);
    if ((v30 & 1) != 0)
      v31 = *(google::protobuf::internal::ArenaImpl **)v31;
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 192), v29, v31);
    if ((v13 & 0x40) == 0)
    {
LABEL_21:
      if ((v13 & 0x80) == 0)
        goto LABEL_47;
      goto LABEL_44;
    }
    goto LABEL_41;
  }
LABEL_35:
  v26 = (__int128 *)(*((_QWORD *)a2 + 23) & 0xFFFFFFFFFFFFFFFELL);
  *((_DWORD *)this + 10) |= 0x10u;
  v27 = *((_QWORD *)this + 1);
  v28 = (google::protobuf::internal::ArenaImpl *)(v27 & 0xFFFFFFFFFFFFFFFELL);
  if ((v27 & 1) != 0)
    v28 = *(google::protobuf::internal::ArenaImpl **)v28;
  google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 184), v26, v28);
  if ((v13 & 0x20) != 0)
    goto LABEL_38;
LABEL_20:
  if ((v13 & 0x40) == 0)
    goto LABEL_21;
LABEL_41:
  v32 = (__int128 *)(*((_QWORD *)a2 + 25) & 0xFFFFFFFFFFFFFFFELL);
  *((_DWORD *)this + 10) |= 0x40u;
  v33 = *((_QWORD *)this + 1);
  v34 = (google::protobuf::internal::ArenaImpl *)(v33 & 0xFFFFFFFFFFFFFFFELL);
  if ((v33 & 1) != 0)
    v34 = *(google::protobuf::internal::ArenaImpl **)v34;
  google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 200), v32, v34);
  if ((v13 & 0x80) != 0)
  {
LABEL_44:
    v35 = (__int128 *)(*((_QWORD *)a2 + 26) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 10) |= 0x80u;
    v36 = *((_QWORD *)this + 1);
    v37 = (google::protobuf::internal::ArenaImpl *)(v36 & 0xFFFFFFFFFFFFFFFELL);
    if ((v36 & 1) != 0)
      v37 = *(google::protobuf::internal::ArenaImpl **)v37;
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 208), v35, v37);
  }
LABEL_47:
  if ((v13 & 0xFF00) == 0)
    goto LABEL_58;
  if ((v13 & 0x100) != 0)
  {
    v40 = (__int128 *)(*((_QWORD *)a2 + 27) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 10) |= 0x100u;
    v41 = *((_QWORD *)this + 1);
    v42 = (google::protobuf::internal::ArenaImpl *)(v41 & 0xFFFFFFFFFFFFFFFELL);
    if ((v41 & 1) != 0)
      v42 = *(google::protobuf::internal::ArenaImpl **)v42;
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 216), v40, v42);
    if ((v13 & 0x200) == 0)
    {
LABEL_50:
      if ((v13 & 0x400) == 0)
        goto LABEL_51;
      goto LABEL_97;
    }
  }
  else if ((v13 & 0x200) == 0)
  {
    goto LABEL_50;
  }
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  if ((v13 & 0x400) == 0)
  {
LABEL_51:
    if ((v13 & 0x800) == 0)
      goto LABEL_52;
    goto LABEL_98;
  }
LABEL_97:
  *((_DWORD *)this + 57) = *((_DWORD *)a2 + 57);
  if ((v13 & 0x800) == 0)
  {
LABEL_52:
    if ((v13 & 0x1000) == 0)
      goto LABEL_53;
    goto LABEL_99;
  }
LABEL_98:
  *((_QWORD *)this + 29) = *((_QWORD *)a2 + 29);
  if ((v13 & 0x1000) == 0)
  {
LABEL_53:
    if ((v13 & 0x2000) == 0)
      goto LABEL_54;
    goto LABEL_100;
  }
LABEL_99:
  *((_DWORD *)this + 60) = *((_DWORD *)a2 + 60);
  if ((v13 & 0x2000) == 0)
  {
LABEL_54:
    if ((v13 & 0x4000) == 0)
      goto LABEL_55;
LABEL_101:
    *((_BYTE *)this + 245) = *((_BYTE *)a2 + 245);
    if ((v13 & 0x8000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
LABEL_100:
  *((_BYTE *)this + 244) = *((_BYTE *)a2 + 244);
  if ((v13 & 0x4000) != 0)
    goto LABEL_101;
LABEL_55:
  if ((v13 & 0x8000) != 0)
LABEL_56:
    *((_BYTE *)this + 246) = *((_BYTE *)a2 + 246);
LABEL_57:
  *((_DWORD *)this + 10) |= v13;
LABEL_58:
  if ((v13 & 0xFF0000) == 0)
    goto LABEL_69;
  if ((v13 & 0x10000) != 0)
  {
    *((_BYTE *)this + 247) = *((_BYTE *)a2 + 247);
    if ((v13 & 0x20000) == 0)
    {
LABEL_61:
      if ((v13 & 0x40000) == 0)
        goto LABEL_62;
      goto LABEL_105;
    }
  }
  else if ((v13 & 0x20000) == 0)
  {
    goto LABEL_61;
  }
  *((_BYTE *)this + 248) = *((_BYTE *)a2 + 248);
  if ((v13 & 0x40000) == 0)
  {
LABEL_62:
    if ((v13 & 0x80000) == 0)
      goto LABEL_63;
    goto LABEL_106;
  }
LABEL_105:
  *((_BYTE *)this + 249) = *((_BYTE *)a2 + 249);
  if ((v13 & 0x80000) == 0)
  {
LABEL_63:
    if ((v13 & 0x100000) == 0)
      goto LABEL_64;
    goto LABEL_107;
  }
LABEL_106:
  *((_BYTE *)this + 250) = *((_BYTE *)a2 + 250);
  if ((v13 & 0x100000) == 0)
  {
LABEL_64:
    if ((v13 & 0x200000) == 0)
      goto LABEL_65;
    goto LABEL_108;
  }
LABEL_107:
  *((_DWORD *)this + 63) = *((_DWORD *)a2 + 63);
  if ((v13 & 0x200000) == 0)
  {
LABEL_65:
    if ((v13 & 0x400000) == 0)
      goto LABEL_66;
LABEL_109:
    *((_QWORD *)this + 33) = *((_QWORD *)a2 + 33);
    if ((v13 & 0x800000) == 0)
      goto LABEL_68;
    goto LABEL_67;
  }
LABEL_108:
  *((_DWORD *)this + 64) = *((_DWORD *)a2 + 64);
  if ((v13 & 0x400000) != 0)
    goto LABEL_109;
LABEL_66:
  if ((v13 & 0x800000) != 0)
LABEL_67:
    *((_DWORD *)this + 68) = *((_DWORD *)a2 + 68);
LABEL_68:
  *((_DWORD *)this + 10) |= v13;
LABEL_69:
  if (!HIBYTE(v13))
    goto LABEL_79;
  if ((v13 & 0x1000000) != 0)
  {
    *((_DWORD *)this + 69) = *((_DWORD *)a2 + 69);
    if ((v13 & 0x2000000) == 0)
    {
LABEL_72:
      if ((v13 & 0x4000000) == 0)
        goto LABEL_73;
      goto LABEL_121;
    }
  }
  else if ((v13 & 0x2000000) == 0)
  {
    goto LABEL_72;
  }
  *((_DWORD *)this + 70) = *((_DWORD *)a2 + 70);
  if ((v13 & 0x4000000) == 0)
  {
LABEL_73:
    if ((v13 & 0x8000000) == 0)
      goto LABEL_74;
    goto LABEL_122;
  }
LABEL_121:
  *((_DWORD *)this + 71) = *((_DWORD *)a2 + 71);
  if ((v13 & 0x8000000) == 0)
  {
LABEL_74:
    if ((v13 & 0x10000000) == 0)
      goto LABEL_75;
    goto LABEL_123;
  }
LABEL_122:
  *((_DWORD *)this + 72) = *((_DWORD *)a2 + 72);
  if ((v13 & 0x10000000) == 0)
  {
LABEL_75:
    if ((v13 & 0x20000000) == 0)
      goto LABEL_76;
    goto LABEL_124;
  }
LABEL_123:
  *((_DWORD *)this + 73) = *((_DWORD *)a2 + 73);
  if ((v13 & 0x20000000) == 0)
  {
LABEL_76:
    if ((v13 & 0x40000000) == 0)
      goto LABEL_77;
LABEL_125:
    *((_DWORD *)this + 75) = *((_DWORD *)a2 + 75);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_78;
LABEL_126:
    *((_DWORD *)this + 76) = *((_DWORD *)a2 + 76);
    goto LABEL_78;
  }
LABEL_124:
  *((_DWORD *)this + 74) = *((_DWORD *)a2 + 74);
  if ((v13 & 0x40000000) != 0)
    goto LABEL_125;
LABEL_77:
  if ((v13 & 0x80000000) != 0)
    goto LABEL_126;
LABEL_78:
  *((_DWORD *)this + 10) |= v13;
LABEL_79:
  v38 = *((_DWORD *)a2 + 11);
  if (!(_BYTE)v38)
    goto LABEL_90;
  if ((v38 & 1) != 0)
  {
    *((_BYTE *)this + 308) = *((_BYTE *)a2 + 308);
    if ((v38 & 2) == 0)
    {
LABEL_82:
      if ((v38 & 4) == 0)
        goto LABEL_83;
      goto LABEL_113;
    }
  }
  else if ((v38 & 2) == 0)
  {
    goto LABEL_82;
  }
  *((_BYTE *)this + 309) = *((_BYTE *)a2 + 309);
  if ((v38 & 4) == 0)
  {
LABEL_83:
    if ((v38 & 8) == 0)
      goto LABEL_84;
    goto LABEL_114;
  }
LABEL_113:
  *((_BYTE *)this + 310) = *((_BYTE *)a2 + 310);
  if ((v38 & 8) == 0)
  {
LABEL_84:
    if ((v38 & 0x10) == 0)
      goto LABEL_85;
    goto LABEL_115;
  }
LABEL_114:
  *((_BYTE *)this + 311) = *((_BYTE *)a2 + 311);
  if ((v38 & 0x10) == 0)
  {
LABEL_85:
    if ((v38 & 0x20) == 0)
      goto LABEL_86;
    goto LABEL_116;
  }
LABEL_115:
  *((_BYTE *)this + 312) = *((_BYTE *)a2 + 312);
  if ((v38 & 0x20) == 0)
  {
LABEL_86:
    if ((v38 & 0x40) == 0)
      goto LABEL_87;
LABEL_117:
    *((_DWORD *)this + 79) = *((_DWORD *)a2 + 79);
    if ((v38 & 0x80) == 0)
      goto LABEL_89;
    goto LABEL_88;
  }
LABEL_116:
  *((_BYTE *)this + 313) = *((_BYTE *)a2 + 313);
  if ((v38 & 0x40) != 0)
    goto LABEL_117;
LABEL_87:
  if ((v38 & 0x80) != 0)
LABEL_88:
    *((_DWORD *)this + 80) = *((_DWORD *)a2 + 80);
LABEL_89:
  *((_DWORD *)this + 11) |= v38;
LABEL_90:
  if ((v38 & 0x100) != 0)
  {
    v39 = *((_DWORD *)a2 + 81);
    *((_DWORD *)this + 11) |= 0x100u;
    *((_DWORD *)this + 81) = v39;
  }
}

void sub_1C21E3BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::TrainerSpec::IsInitialized(sentencepiece::TrainerSpec *this)
{
  return google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::TrainerSpec *)((char *)this + 16));
}

_QWORD *sentencepiece::TrainerSpec::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.TrainerSpec");
}

uint64_t sentencepiece::NormalizerSpec::NormalizerSpec(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E7BE8938;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_1E7BE89D8;
  google::protobuf::internal::ExtensionSet::ExtensionSet(a1 + 24, a2);
  *(_QWORD *)(a1 + 48) = 0;
  if (atomic_load(scc_info_NormalizerSpec_sentencepiece_5fmodel_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_NormalizerSpec_sentencepiece_5fmodel_2eproto);
  *(_QWORD *)(a1 + 56) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(a1 + 64) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(a1 + 72) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(a1 + 80) = 16843008;
  return a1;
}

void sub_1C21E3C58(_Unwind_Exception *a1)
{
  google::protobuf::internal::ExtensionSet *v1;

  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::NormalizerSpec::~NormalizerSpec(sentencepiece::NormalizerSpec *this)
{
  sentencepiece::NormalizerSpec::SharedDtor(this);
  google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((sentencepiece::NormalizerSpec *)((char *)this + 24));
}

{
  sentencepiece::NormalizerSpec::~NormalizerSpec(this);
  JUMPOUT(0x1C3BB9B44);
}

google::protobuf::internal::ArenaStringPtr *sentencepiece::NormalizerSpec::SharedDtor(sentencepiece::NormalizerSpec *this)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  google::protobuf::internal::ArenaStringPtr *result;
  uint64_t v8;
  uint64_t v9;
  google::protobuf::internal::ArenaStringPtr *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  std::string v15[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 1972);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  if (*((uint64_t **)this + 7) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v5 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::NormalizerSpec *)((char *)this + 56));
    v6 = v5;
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    MEMORY[0x1C3BB9B44](v6, 0x1012C40EC159624);
  }
  result = (sentencepiece::NormalizerSpec *)((char *)this + 64);
  if (*((uint64_t **)this + 8) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v8 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(result);
    v9 = v8;
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    result = (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x1C3BB9B44](v9, 0x1012C40EC159624);
  }
  v11 = (uint64_t *)*((_QWORD *)this + 9);
  v10 = (sentencepiece::NormalizerSpec *)((char *)this + 72);
  if (v11 != &google::protobuf::internal::fixed_address_empty_string)
  {
    v12 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(v10);
    v13 = v12;
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    return (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x1C3BB9B44](v13, 0x1012C40EC159624);
  }
  return result;
}

void sub_1C21E3DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'sentencepiece::NormalizerSpec::~NormalizerSpec(sentencepiece::NormalizerSpec *this)
{
  sentencepiece::NormalizerSpec::~NormalizerSpec((sentencepiece::NormalizerSpec *)((char *)this - 16));
}

{
  sentencepiece::NormalizerSpec::~NormalizerSpec((sentencepiece::NormalizerSpec *)((char *)this - 16));
  JUMPOUT(0x1C3BB9B44);
}

void sentencepiece::NormalizerSpec::Clear(sentencepiece::NormalizerSpec *this)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::NormalizerSpec *)((char *)this + 24));
  v2 = *((_DWORD *)this + 12);
  if ((v2 & 7) != 0)
  {
    if ((v2 & 1) == 0)
    {
      if ((v2 & 2) == 0)
        goto LABEL_4;
LABEL_10:
      v4 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v4 + 23) < 0)
      {
        **(_BYTE **)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
        if ((v2 & 4) == 0)
          goto LABEL_17;
      }
      else
      {
        *(_BYTE *)v4 = 0;
        *(_BYTE *)(v4 + 23) = 0;
        if ((v2 & 4) == 0)
          goto LABEL_17;
      }
      goto LABEL_14;
    }
    v3 = *((_QWORD *)this + 7) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_10;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_10;
    }
LABEL_4:
    if ((v2 & 4) == 0)
      goto LABEL_17;
LABEL_14:
    v5 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
  }
LABEL_17:
  if ((v2 & 0x78) != 0)
    *((_DWORD *)this + 20) = 16843008;
  *((_DWORD *)this + 12) = 0;
  v6 = *((_QWORD *)this + 1);
  if ((v6 & 1) != 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v7 + 31) < 0)
    {
      **(_BYTE **)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v7 + 8) = 0;
      *(_BYTE *)(v7 + 31) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::NormalizerSpec::_InternalParse(sentencepiece::NormalizerSpec *this, google::protobuf::internal *a2, int32x2_t *a3)
{
  int v5;
  _QWORD *v7;
  google::protobuf::internal *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  google::protobuf::internal::ArenaImpl *v12;
  uint64_t **v13;
  google::protobuf::internal *v14;
  unint64_t v15;
  int v16;
  google::protobuf::internal *TagFallback;
  unsigned int v18;
  uint64_t v19;
  google::protobuf::internal *v20;
  unint64_t v21;
  int v22;
  google::protobuf::internal *v23;
  unint64_t v24;
  int v25;
  google::protobuf::internal *v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  std::string *v30;
  google::protobuf::internal *v31;
  BOOL v32;
  std::string *v33;
  google::protobuf::internal *v34;
  uint64_t v35;
  google::protobuf::internal *v36;
  uint64_t v37;
  google::protobuf::internal *v38;
  uint64_t v39;
  google::protobuf::internal *v40;
  uint64_t v41;
  google::protobuf::internal *v42;

  v42 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v42, a3[11].i32[1]) & 1) == 0)
  {
    v7 = (_QWORD *)((char *)this + 8);
    while (1)
    {
      v8 = (google::protobuf::internal *)((char *)v42 + 1);
      v9 = *(unsigned __int8 *)v42;
      if (*(char *)v42 < 0)
      {
        v10 = v9 + (*(unsigned __int8 *)v8 << 7);
        v9 = v10 - 128;
        if (*(char *)v8 < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v42, (const char *)(v10 - 128));
          v42 = TagFallback;
          if (!TagFallback)
            goto LABEL_67;
          v8 = TagFallback;
          v9 = v18;
          goto LABEL_8;
        }
        v8 = (google::protobuf::internal *)((char *)v42 + 2);
      }
      v42 = v8;
LABEL_8:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10)
            goto LABEL_48;
          *((_DWORD *)this + 12) |= 1u;
          v11 = *((_QWORD *)this + 1);
          v12 = (google::protobuf::internal::ArenaImpl *)(v11 & 0xFFFFFFFFFFFFFFFELL);
          if ((v11 & 1) != 0)
            v12 = *(google::protobuf::internal::ArenaImpl **)v12;
          v13 = (uint64_t **)((char *)this + 56);
          goto LABEL_44;
        case 2u:
          if (v9 != 18)
            goto LABEL_48;
          *((_DWORD *)this + 12) |= 2u;
          v19 = *((_QWORD *)this + 1);
          v12 = (google::protobuf::internal::ArenaImpl *)(v19 & 0xFFFFFFFFFFFFFFFELL);
          if ((v19 & 1) != 0)
            v12 = *(google::protobuf::internal::ArenaImpl **)v12;
          v13 = (uint64_t **)((char *)this + 64);
          goto LABEL_44;
        case 3u:
          if (v9 != 24)
            goto LABEL_48;
          v5 |= 0x10u;
          v20 = (google::protobuf::internal *)((char *)v8 + 1);
          v21 = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0)
            goto LABEL_29;
          v22 = *(char *)v20;
          v21 = v21 + (v22 << 7) - 128;
          if (v22 < 0)
          {
            v36 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v8, v21);
            v42 = v36;
            *((_BYTE *)this + 81) = v37 != 0;
            if (!v36)
              goto LABEL_67;
          }
          else
          {
            v20 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_29:
            v42 = v20;
            *((_BYTE *)this + 81) = v21 != 0;
          }
          goto LABEL_46;
        case 4u:
          if (v9 != 32)
            goto LABEL_48;
          v5 |= 0x20u;
          v23 = (google::protobuf::internal *)((char *)v8 + 1);
          v24 = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0)
            goto LABEL_34;
          v25 = *(char *)v23;
          v24 = v24 + (v25 << 7) - 128;
          if (v25 < 0)
          {
            v38 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v8, v24);
            v42 = v38;
            *((_BYTE *)this + 82) = v39 != 0;
            if (!v38)
              goto LABEL_67;
          }
          else
          {
            v23 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_34:
            v42 = v23;
            *((_BYTE *)this + 82) = v24 != 0;
          }
          goto LABEL_46;
        case 5u:
          if (v9 != 40)
            goto LABEL_48;
          v5 |= 0x40u;
          v26 = (google::protobuf::internal *)((char *)v8 + 1);
          v27 = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0)
            goto LABEL_39;
          v28 = *(char *)v26;
          v27 = v27 + (v28 << 7) - 128;
          if (v28 < 0)
          {
            v40 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v8, v27);
            v42 = v40;
            *((_BYTE *)this + 83) = v41 != 0;
            if (!v40)
              goto LABEL_67;
          }
          else
          {
            v26 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_39:
            v42 = v26;
            *((_BYTE *)this + 83) = v27 != 0;
          }
          goto LABEL_46;
        case 6u:
          if (v9 != 50)
            goto LABEL_48;
          *((_DWORD *)this + 12) |= 4u;
          v29 = *((_QWORD *)this + 1);
          v12 = (google::protobuf::internal::ArenaImpl *)(v29 & 0xFFFFFFFFFFFFFFFELL);
          if ((v29 & 1) != 0)
            v12 = *(google::protobuf::internal::ArenaImpl **)v12;
          v13 = (uint64_t **)((char *)this + 72);
LABEL_44:
          v30 = (std::string *)google::protobuf::internal::ArenaStringPtr::Mutable(v13, v12);
          v31 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v30, (std::string::value_type *)v42, (uint64_t)a3);
          goto LABEL_45;
        default:
          if (v9 >> 3 == 200 && v9 == 64)
          {
            v5 |= 8u;
            v14 = (google::protobuf::internal *)((char *)v8 + 1);
            v15 = *(unsigned __int8 *)v8;
            if ((*(char *)v8 & 0x80000000) == 0)
              goto LABEL_18;
            v16 = *(char *)v14;
            v15 = v15 + (v16 << 7) - 128;
            if ((v16 & 0x80000000) == 0)
            {
              v14 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_18:
              v42 = v14;
              *((_BYTE *)this + 80) = v15 != 0;
              goto LABEL_46;
            }
            v34 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v8, v15);
            v42 = v34;
            *((_BYTE *)this + 80) = v35 != 0;
            if (!v34)
              goto LABEL_67;
          }
          else
          {
LABEL_48:
            if (v9)
              v32 = (v9 & 7) == 4;
            else
              v32 = 1;
            if (v32)
            {
              a3[10].i32[0] = v9 - 1;
              goto LABEL_2;
            }
            if (v9 < 0x648)
            {
              if ((*v7 & 1) != 0)
              {
                v33 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
              }
              else
              {
                v33 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
                v8 = v42;
              }
              v31 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, v33, v8, (google::protobuf::internal::ParseContext *)a3);
            }
            else
            {
              v31 = (google::protobuf::internal *)google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::NormalizerSpec *)((char *)this + 24), v9, v8, (uint64_t)&sentencepiece::_NormalizerSpec_default_instance_, (uint64_t *)this + 1, a3);
            }
LABEL_45:
            v42 = v31;
            if (!v31)
            {
LABEL_67:
              v42 = 0;
              goto LABEL_2;
            }
          }
LABEL_46:
          if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v42, a3[11].i32[1]) & 1) != 0)goto LABEL_2;
          break;
      }
    }
  }
LABEL_2:
  *((_DWORD *)this + 12) |= v5;
  return v42;
}

unsigned __int8 *sentencepiece::NormalizerSpec::_InternalSerialize(sentencepiece::NormalizerSpec *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  char v7;
  char v8;
  char v9;
  char v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a2;
  v6 = *((_DWORD *)this + 12);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 7) & 0xFFFFFFFFFFFFFFFELL, a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFFFFELL, v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_4:
    if ((v6 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_11:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v7 = *((_BYTE *)this + 81);
  *v4 = 24;
  v4[1] = v7;
  v4 += 2;
  if ((v6 & 0x20) == 0)
  {
LABEL_5:
    if ((v6 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_14:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v8 = *((_BYTE *)this + 82);
  *v4 = 32;
  v4[1] = v8;
  v4 += 2;
  if ((v6 & 0x40) == 0)
  {
LABEL_6:
    if ((v6 & 4) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_17:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v9 = *((_BYTE *)this + 83);
  *v4 = 40;
  v4[1] = v9;
  v4 += 2;
  if ((v6 & 4) == 0)
  {
LABEL_7:
    if ((v6 & 8) == 0)
      goto LABEL_24;
    goto LABEL_21;
  }
LABEL_20:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFFFFELL, v4);
  if ((v6 & 8) == 0)
    goto LABEL_24;
LABEL_21:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v10 = *((_BYTE *)this + 80);
  *(_WORD *)v4 = 3264;
  v4[2] = v10;
  v4 += 3;
LABEL_24:
  v11 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::NormalizerSpec *)((char *)this + 24), 201, 0x20000000, (unsigned __int8 *)v4, a3);
  v12 = v11;
  v13 = *((_QWORD *)this + 1);
  if ((v13 & 1) == 0)
    return v12;
  v15 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v15 + 31) < 0)
  {
    v16 = *(void **)(v15 + 8);
    v17 = *(_QWORD *)(v15 + 16);
  }
  else
  {
    v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)v11 >= (int)v17)
  {
    v18 = (int)v17;
    memcpy(v11, v16, (int)v17);
    v12 += v18;
    return v12;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v16, v17, v11);
}

uint64_t sentencepiece::NormalizerSpec::ByteSizeLong(sentencepiece::NormalizerSpec *this)
{
  uint64_t result;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  result = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::NormalizerSpec *)((char *)this + 24));
  v3 = *((_DWORD *)this + 12);
  if ((v3 & 0x7F) == 0)
    goto LABEL_17;
  if ((v3 & 1) == 0)
  {
    if ((v3 & 2) == 0)
      goto LABEL_4;
LABEL_22:
    v12 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFFFFELL;
    v13 = *(unsigned __int8 *)(v12 + 23);
    v14 = *(_QWORD *)(v12 + 8);
    if ((v13 & 0x80u) == 0)
      v14 = v13;
    result += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 4) == 0)
      goto LABEL_8;
    goto LABEL_5;
  }
  v9 = *((_QWORD *)this + 7) & 0xFFFFFFFFFFFFFFFELL;
  v10 = *(unsigned __int8 *)(v9 + 23);
  v11 = *(_QWORD *)(v9 + 8);
  if ((v10 & 0x80u) == 0)
    v11 = v10;
  result += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 2) != 0)
    goto LABEL_22;
LABEL_4:
  if ((v3 & 4) != 0)
  {
LABEL_5:
    v4 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFFFFELL;
    v5 = *(unsigned __int8 *)(v4 + 23);
    v6 = *(_QWORD *)(v4 + 8);
    if ((v5 & 0x80u) == 0)
      v6 = v5;
    result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  v7 = result + 3;
  if ((v3 & 8) == 0)
    v7 = result;
  if ((v3 & 0x10) != 0)
    v7 += 2;
  if ((v3 & 0x20) != 0)
    v7 += 2;
  if ((v3 & 0x40) != 0)
    result = v7 + 2;
  else
    result = v7;
LABEL_17:
  v8 = *((_QWORD *)this + 1);
  if ((v8 & 1) != 0)
  {
    v15 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v15 + 31) < 0)
      v16 = *(_QWORD *)(v15 + 16);
    else
      v16 = *(unsigned __int8 *)(v15 + 31);
    result += v16;
  }
  *((_DWORD *)this + 13) = result;
  return result;
}

void sentencepiece::NormalizerSpec::CheckTypeAndMergeFrom(sentencepiece::NormalizerSpec *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::NormalizerSpec *__hidden))a2 != &off_1E7BE8938)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::NormalizerSpec::MergeFrom(this, a2);
}

void sentencepiece::NormalizerSpec::MergeFrom(sentencepiece::NormalizerSpec *this, const sentencepiece::NormalizerSpec *a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  google::protobuf::internal::ArenaImpl *v16;
  __int128 *v17;
  uint64_t v18;
  google::protobuf::internal::ArenaImpl *v19;
  __int128 *v20;
  uint64_t v21;
  google::protobuf::internal::ArenaImpl *v22;
  char v23;
  std::string v24[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2246);
    v4 = google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v23, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::NormalizerSpec *)((char *)this + 24), (const sentencepiece::NormalizerSpec *)((char *)a2 + 24));
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  v13 = *((_DWORD *)a2 + 12);
  if ((v13 & 0x7F) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*((_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFFELL);
      *((_DWORD *)this + 12) |= 1u;
      v15 = *((_QWORD *)this + 1);
      v16 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = *(google::protobuf::internal::ArenaImpl **)v16;
      google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::NormalizerSpec *)((char *)this + 56), v14, v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0)
          goto LABEL_17;
        goto LABEL_30;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    v17 = (__int128 *)(*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 12) |= 2u;
    v18 = *((_QWORD *)this + 1);
    v19 = (google::protobuf::internal::ArenaImpl *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if ((v18 & 1) != 0)
      v19 = *(google::protobuf::internal::ArenaImpl **)v19;
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::NormalizerSpec *)((char *)this + 64), v17, v19);
    if ((v13 & 4) == 0)
    {
LABEL_17:
      if ((v13 & 8) == 0)
        goto LABEL_18;
      goto LABEL_33;
    }
LABEL_30:
    v20 = (__int128 *)(*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 12) |= 4u;
    v21 = *((_QWORD *)this + 1);
    v22 = (google::protobuf::internal::ArenaImpl *)(v21 & 0xFFFFFFFFFFFFFFFELL);
    if ((v21 & 1) != 0)
      v22 = *(google::protobuf::internal::ArenaImpl **)v22;
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::NormalizerSpec *)((char *)this + 72), v20, v22);
    if ((v13 & 8) == 0)
    {
LABEL_18:
      if ((v13 & 0x10) == 0)
        goto LABEL_19;
      goto LABEL_34;
    }
LABEL_33:
    *((_BYTE *)this + 80) = *((_BYTE *)a2 + 80);
    if ((v13 & 0x10) == 0)
    {
LABEL_19:
      if ((v13 & 0x20) == 0)
        goto LABEL_20;
      goto LABEL_35;
    }
LABEL_34:
    *((_BYTE *)this + 81) = *((_BYTE *)a2 + 81);
    if ((v13 & 0x20) == 0)
    {
LABEL_20:
      if ((v13 & 0x40) == 0)
      {
LABEL_22:
        *((_DWORD *)this + 12) |= v13;
        return;
      }
LABEL_21:
      *((_BYTE *)this + 83) = *((_BYTE *)a2 + 83);
      goto LABEL_22;
    }
LABEL_35:
    *((_BYTE *)this + 82) = *((_BYTE *)a2 + 82);
    if ((v13 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
}

void sub_1C21E48BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::NormalizerSpec::IsInitialized(sentencepiece::NormalizerSpec *this)
{
  return google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::NormalizerSpec *)((char *)this + 24));
}

_QWORD *sentencepiece::NormalizerSpec::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.NormalizerSpec");
}

void sentencepiece::SelfTestData_Sample::~SelfTestData_Sample(sentencepiece::SelfTestData_Sample *this)
{
  sentencepiece::SelfTestData_Sample::SharedDtor(this);
  google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1);
}

{
  sentencepiece::SelfTestData_Sample::~SelfTestData_Sample(this);
  JUMPOUT(0x1C3BB9B44);
}

google::protobuf::internal::ArenaStringPtr *sentencepiece::SelfTestData_Sample::SharedDtor(sentencepiece::SelfTestData_Sample *this)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  google::protobuf::internal::ArenaStringPtr *result;
  uint64_t v6;
  uint64_t v7;
  google::protobuf::internal::ArenaStringPtr *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  std::string v13[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2362);
    v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  result = (sentencepiece::SelfTestData_Sample *)((char *)this + 24);
  if (*((uint64_t **)this + 3) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v6 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(result);
    v7 = v6;
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    result = (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x1C3BB9B44](v7, 0x1012C40EC159624);
  }
  v9 = (uint64_t *)*((_QWORD *)this + 4);
  v8 = (sentencepiece::SelfTestData_Sample *)((char *)this + 32);
  if (v9 != &google::protobuf::internal::fixed_address_empty_string)
  {
    v10 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(v8);
    v11 = v10;
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    return (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x1C3BB9B44](v11, 0x1012C40EC159624);
  }
  return result;
}

void sub_1C21E4A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SelfTestData_Sample::Clear(uint64_t this)
{
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_DWORD *)(this + 16);
  if ((v1 & 3) != 0)
  {
    if ((v1 & 1) != 0)
    {
      v2 = *(_QWORD *)(this + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v2 + 23) < 0)
      {
        **(_BYTE **)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
        if ((v1 & 2) == 0)
          goto LABEL_11;
        goto LABEL_6;
      }
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
    if ((v1 & 2) == 0)
      goto LABEL_11;
LABEL_6:
    v3 = *(_QWORD *)(this + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  *(_DWORD *)(this + 16) = 0;
  v4 = *(_QWORD *)(this + 8);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(_BYTE **)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 31) = 0;
    }
  }
  return this;
}

google::protobuf::internal *sentencepiece::SelfTestData_Sample::_InternalParse(sentencepiece::SelfTestData_Sample *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  _QWORD *v6;
  google::protobuf::internal *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v11;
  std::string *v12;
  google::protobuf::internal *v13;
  uint64_t v14;
  google::protobuf::internal::ArenaImpl *v15;
  uint64_t **v16;
  uint64_t v17;
  std::string *v18;
  google::protobuf::internal *TagFallback;
  unsigned int v20;
  google::protobuf::internal *v21;

  v21 = a2;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v21, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    v6 = (_QWORD *)((char *)this + 8);
    while (1)
    {
      v7 = (google::protobuf::internal *)((char *)v21 + 1);
      v8 = *(unsigned __int8 *)v21;
      if ((*(char *)v21 & 0x80000000) == 0)
        goto LABEL_7;
      v9 = v8 + (*(unsigned __int8 *)v7 << 7);
      v8 = v9 - 128;
      if ((*(char *)v7 & 0x80000000) == 0)
        break;
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v21, (const char *)(v9 - 128));
      v21 = TagFallback;
      if (!TagFallback)
        return 0;
      v7 = TagFallback;
      v8 = v20;
LABEL_8:
      if (v8 >> 3 == 2)
      {
        if (v8 == 18)
        {
          *((_DWORD *)this + 4) |= 2u;
          v14 = *((_QWORD *)this + 1);
          v15 = (google::protobuf::internal::ArenaImpl *)(v14 & 0xFFFFFFFFFFFFFFFELL);
          if ((v14 & 1) != 0)
            v15 = *(google::protobuf::internal::ArenaImpl **)v15;
          v16 = (uint64_t **)((char *)this + 32);
          goto LABEL_27;
        }
      }
      else if (v8 >> 3 == 1 && v8 == 10)
      {
        *((_DWORD *)this + 4) |= 1u;
        v17 = *((_QWORD *)this + 1);
        v15 = (google::protobuf::internal::ArenaImpl *)(v17 & 0xFFFFFFFFFFFFFFFELL);
        if ((v17 & 1) != 0)
          v15 = *(google::protobuf::internal::ArenaImpl **)v15;
        v16 = (uint64_t **)((char *)this + 24);
LABEL_27:
        v18 = (std::string *)google::protobuf::internal::ArenaStringPtr::Mutable(v16, v15);
        v13 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v18, (std::string::value_type *)v21, (uint64_t)a3);
        goto LABEL_28;
      }
      if (v8)
        v11 = (v8 & 7) == 4;
      else
        v11 = 1;
      if (v11)
      {
        *((_DWORD *)a3 + 20) = v8 - 1;
        return v21;
      }
      if ((*v6 & 1) != 0)
      {
        v12 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v12 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
        v7 = v21;
      }
      v13 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, v12, v7, a3);
LABEL_28:
      v21 = v13;
      if (!v13)
        return 0;
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v21, *((_DWORD *)a3 + 23)) & 1) != 0)
        return v21;
    }
    v7 = (google::protobuf::internal *)((char *)v21 + 2);
LABEL_7:
    v21 = v7;
    goto LABEL_8;
  }
  return v21;
}

unsigned __int8 *sentencepiece::SelfTestData_Sample::_InternalSerialize(sentencepiece::SelfTestData_Sample *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (unsigned __int8 *)a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v6 & 2) != 0)
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 4) & 0xFFFFFFFFFFFFFFFELL, (char *)v4);
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) == 0)
    return v4;
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 31) < 0)
  {
    v10 = *(void **)(v9 + 8);
    v11 = *(_QWORD *)(v9 + 16);
  }
  else
  {
    v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v11)
  {
    v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v10, v11, v4);
}

uint64_t sentencepiece::SelfTestData_Sample::ByteSizeLong(sentencepiece::SelfTestData_Sample *this)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 3) == 0)
  {
    v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v3 = *((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFFELL;
  v4 = *(unsigned __int8 *)(v3 + 23);
  v5 = *(_QWORD *)(v3 + 8);
  if ((v4 & 0x80u) == 0)
    v5 = v4;
  v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    v6 = *((_QWORD *)this + 4) & 0xFFFFFFFFFFFFFFFELL;
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 1) != 0)
  {
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0)
      v12 = *(_QWORD *)(v11 + 16);
    else
      v12 = *(unsigned __int8 *)(v11 + 31);
    v2 += v12;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void sentencepiece::SelfTestData_Sample::CheckTypeAndMergeFrom(sentencepiece::SelfTestData_Sample *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::SelfTestData_Sample *__hidden))a2 != &off_1E7BE8A98)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::SelfTestData_Sample::MergeFrom(this, a2);
}

void sentencepiece::SelfTestData_Sample::MergeFrom(sentencepiece::SelfTestData_Sample *this, const sentencepiece::SelfTestData_Sample *a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  google::protobuf::internal::ArenaImpl *v16;
  __int128 *v17;
  uint64_t v18;
  google::protobuf::internal::ArenaImpl *v19;
  char v20;
  std::string v21[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2516);
    v4 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  v13 = *((_DWORD *)a2 + 4);
  if ((v13 & 3) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*((_QWORD *)a2 + 3) & 0xFFFFFFFFFFFFFFFELL);
      *((_DWORD *)this + 4) |= 1u;
      v15 = *((_QWORD *)this + 1);
      v16 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = *(google::protobuf::internal::ArenaImpl **)v16;
      google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::SelfTestData_Sample *)((char *)this + 24), v14, v16);
    }
    if ((v13 & 2) != 0)
    {
      v17 = (__int128 *)(*((_QWORD *)a2 + 4) & 0xFFFFFFFFFFFFFFFELL);
      *((_DWORD *)this + 4) |= 2u;
      v18 = *((_QWORD *)this + 1);
      v19 = (google::protobuf::internal::ArenaImpl *)(v18 & 0xFFFFFFFFFFFFFFFELL);
      if ((v18 & 1) != 0)
        v19 = *(google::protobuf::internal::ArenaImpl **)v19;
      google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::SelfTestData_Sample *)((char *)this + 32), v17, v19);
    }
  }
}

void sub_1C21E4FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SelfTestData_Sample::IsInitialized(sentencepiece::SelfTestData_Sample *this)
{
  return 1;
}

_QWORD *sentencepiece::SelfTestData_Sample::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.SelfTestData.Sample");
}

uint64_t sentencepiece::SelfTestData::SelfTestData(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E7BE87C8;
  *(_QWORD *)(a1 + 8) = a2;
  google::protobuf::internal::ExtensionSet::ExtensionSet(a1 + 16, a2);
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  if (atomic_load(scc_info_SelfTestData_sentencepiece_5fmodel_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SelfTestData_sentencepiece_5fmodel_2eproto);
  return a1;
}

void sub_1C21E5058(_Unwind_Exception *a1)
{
  google::protobuf::internal::ExtensionSet *v1;
  google::protobuf::internal::ArenaImpl **v2;

  google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::~RepeatedPtrField(v2);
  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::SelfTestData::~SelfTestData(sentencepiece::SelfTestData *this)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v3 = (uint64_t *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  v4 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) != 0)
  {
    if (!*v4)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v4)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2589);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  google::protobuf::internal::InternalMetadata::Delete<std::string>(v3);
  google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 5);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((sentencepiece::SelfTestData *)((char *)this + 16));
}

{
  sentencepiece::SelfTestData::~SelfTestData(this);
  JUMPOUT(0x1C3BB9B44);
}

void sub_1C21E5110(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  __clang_call_terminate(a1);
}

void sentencepiece::SelfTestData::Clear(sentencepiece::SelfTestData *this)
{
  uint64_t v2;
  unint64_t v3;

  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::SelfTestData *)((char *)this + 16));
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>((uint64_t)this + 40);
  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 31) < 0)
    {
      **(_BYTE **)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v3 + 8) = 0;
      *(_BYTE *)(v3 + 31) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::SelfTestData::_InternalParse(sentencepiece::SelfTestData *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  _QWORD *v5;
  google::protobuf::internal *v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned __int8 *v10;
  char *v11;
  google::protobuf::internal *v12;
  int *v13;
  uint64_t v14;
  int v15;
  sentencepiece::SelfTestData_Sample *v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  google::protobuf::internal *TagFallback;
  unsigned int v21;
  google::protobuf::internal *v23;

  v23 = a2;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v23, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    v5 = (_QWORD *)((char *)this + 8);
    while (1)
    {
      v6 = (google::protobuf::internal *)((char *)v23 + 1);
      v7 = *(unsigned __int8 *)v23;
      if ((*(char *)v23 & 0x80000000) == 0)
        goto LABEL_6;
      v8 = v7 + (*(unsigned __int8 *)v6 << 7);
      v7 = v8 - 128;
      if ((*(char *)v6 & 0x80000000) == 0)
        break;
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v23, (const char *)(v8 - 128));
      v23 = TagFallback;
      if (!TagFallback)
        return 0;
      v6 = TagFallback;
      v7 = v21;
LABEL_7:
      if (v7 == 10)
      {
        v11 = (char *)v6 - 1;
        while (1)
        {
          v12 = (google::protobuf::internal *)(v11 + 1);
          v23 = (google::protobuf::internal *)(v11 + 1);
          v13 = (int *)*((_QWORD *)this + 7);
          if (!v13)
            break;
          v14 = *((int *)this + 12);
          v15 = *v13;
          if ((int)v14 >= *v13)
          {
            if (v15 == *((_DWORD *)this + 13))
            {
LABEL_20:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 10, v15 + 1);
              v13 = (int *)*((_QWORD *)this + 7);
              v15 = *v13;
            }
            *v13 = v15 + 1;
            v16 = (sentencepiece::SelfTestData_Sample *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData_Sample>(*((_QWORD *)this + 5));
            v17 = *((_QWORD *)this + 7);
            v18 = *((int *)this + 12);
            *((_DWORD *)this + 12) = v18 + 1;
            *(_QWORD *)(v17 + 8 * v18 + 8) = v16;
            v12 = v23;
            goto LABEL_22;
          }
          *((_DWORD *)this + 12) = v14 + 1;
          v16 = *(sentencepiece::SelfTestData_Sample **)&v13[2 * v14 + 2];
LABEL_22:
          v11 = google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SelfTestData_Sample>(a3, v16, v12);
          v23 = (google::protobuf::internal *)v11;
          if (!v11)
            return 0;
          if (*(_QWORD *)a3 <= (unint64_t)v11 || *v11 != 10)
            goto LABEL_30;
        }
        v15 = *((_DWORD *)this + 13);
        goto LABEL_20;
      }
      if (v7)
        v9 = (v7 & 7) == 4;
      else
        v9 = 1;
      if (v9)
      {
        *((_DWORD *)a3 + 20) = v7 - 1;
        return v23;
      }
      if (v7 < 0x640)
      {
        if ((*v5 & 1) != 0)
        {
          v19 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v19 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
          v6 = v23;
        }
        v10 = google::protobuf::internal::UnknownFieldParse(v7, v19, v6, a3);
      }
      else
      {
        v10 = google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::SelfTestData *)((char *)this + 16), v7, v6, (uint64_t)&sentencepiece::_SelfTestData_default_instance_, (uint64_t *)this + 1, (int32x2_t *)a3);
      }
      v23 = (google::protobuf::internal *)v10;
      if (!v10)
        return 0;
LABEL_30:
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v23, *((_DWORD *)a3 + 23)))return v23;
    }
    v6 = (google::protobuf::internal *)((char *)v23 + 2);
LABEL_6:
    v23 = v6;
    goto LABEL_7;
  }
  return v23;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SelfTestData_Sample>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::SelfTestData_Sample *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)sentencepiece::SelfTestData_Sample::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

unsigned __int8 *sentencepiece::SelfTestData::_InternalSerialize(sentencepiece::SelfTestData *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6;
  int i;
  sentencepiece::SelfTestData_Sample *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *((_DWORD *)this + 12);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v8 = (sentencepiece::SelfTestData_Sample *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>((uint64_t)this + 40, i);
      *a2 = 10;
      v9 = *((_DWORD *)v8 + 5);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v10 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v10 - 1) = v11 | 0x80;
            v12 = v11 >> 7;
            ++v10;
            v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          v10 = (unsigned __int8 *)(a2 + 3);
        }
      }
      else
      {
        a2[1] = v9;
        v10 = (unsigned __int8 *)(a2 + 2);
      }
      a2 = (char *)sentencepiece::SelfTestData_Sample::_InternalSerialize(v8, (char *)v10, a3);
    }
  }
  v14 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::SelfTestData *)((char *)this + 16), 200, 0x20000000, (unsigned __int8 *)a2, a3);
  v15 = v14;
  v16 = *((_QWORD *)this + 1);
  if ((v16 & 1) == 0)
    return v15;
  v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v18 + 31) < 0)
  {
    v19 = *(void **)(v18 + 8);
    v20 = *(_QWORD *)(v18 + 16);
  }
  else
  {
    v19 = (void *)(v18 + 8);
    LODWORD(v20) = *(unsigned __int8 *)(v18 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)v14 >= (int)v20)
  {
    v21 = (int)v20;
    memcpy(v14, v19, (int)v20);
    v15 += v21;
    return v15;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v19, v20, v14);
}

uint64_t sentencepiece::SelfTestData::ByteSizeLong(sentencepiece::SelfTestData *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sentencepiece::SelfTestData_Sample **v6;
  uint64_t v7;
  sentencepiece::SelfTestData_Sample *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;

  v2 = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::SelfTestData *)((char *)this + 16));
  v3 = *((int *)this + 12);
  v4 = v2 + v3;
  v5 = *((_QWORD *)this + 7);
  if (v5)
    v6 = (sentencepiece::SelfTestData_Sample **)(v5 + 8);
  else
    v6 = 0;
  if ((_DWORD)v3)
  {
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      v9 = sentencepiece::SelfTestData_Sample::ByteSizeLong(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  v10 = *((_QWORD *)this + 1);
  if ((v10 & 1) != 0)
  {
    v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v12 + 31) < 0)
      v13 = *(_QWORD *)(v12 + 16);
    else
      v13 = *(unsigned __int8 *)(v12 + 31);
    v4 += v13;
  }
  *((_DWORD *)this + 16) = v4;
  return v4;
}

void sentencepiece::SelfTestData::CheckTypeAndMergeFrom(sentencepiece::SelfTestData *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::SelfTestData *__hidden))a2 != &off_1E7BE87C8)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::SelfTestData::MergeFrom(this, a2);
}

void sentencepiece::SelfTestData::MergeFrom(sentencepiece::SelfTestData *this, const sentencepiece::SelfTestData *a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  char v13;
  std::string v14[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2724);
    v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::SelfTestData *)((char *)this + 16), (const sentencepiece::SelfTestData *)((char *)a2 + 16));
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>((signed int **)this + 5, (uint64_t)a2 + 40);
}

void sub_1C21E57B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SelfTestData::IsInitialized(sentencepiece::SelfTestData *this)
{
  return google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::SelfTestData *)((char *)this + 16));
}

_QWORD *sentencepiece::SelfTestData::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.SelfTestData");
}

_QWORD *sentencepiece::ModelProto_SentencePiece::ModelProto_SentencePiece(_QWORD *a1, uint64_t a2)
{
  *a1 = &off_1E7BE8EC0;
  a1[1] = a2;
  google::protobuf::internal::ExtensionSet::ExtensionSet((uint64_t)(a1 + 2), a2);
  a1[5] = 0;
  if (atomic_load(scc_info_ModelProto_SentencePiece_sentencepiece_5fmodel_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ModelProto_SentencePiece_sentencepiece_5fmodel_2eproto);
  a1[6] = &google::protobuf::internal::fixed_address_empty_string;
  a1[7] = 0x100000000;
  return a1;
}

void sub_1C21E5850(_Unwind_Exception *a1)
{
  google::protobuf::internal::ExtensionSet *v1;

  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelProto_SentencePiece::~ModelProto_SentencePiece(sentencepiece::ModelProto_SentencePiece *this)
{
  sentencepiece::ModelProto_SentencePiece::SharedDtor(this);
  google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16));
}

{
  sentencepiece::ModelProto_SentencePiece::~ModelProto_SentencePiece(this);
  JUMPOUT(0x1C3BB9B44);
}

void sentencepiece::ModelProto_SentencePiece::SharedDtor(sentencepiece::ModelProto_SentencePiece *this)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  google::protobuf::internal::ArenaStringPtr *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  std::string v10[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2813);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  v6 = (uint64_t *)*((_QWORD *)this + 6);
  v5 = (sentencepiece::ModelProto_SentencePiece *)((char *)this + 48);
  if (v6 != &google::protobuf::internal::fixed_address_empty_string)
  {
    v7 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(v5);
    v8 = v7;
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    MEMORY[0x1C3BB9B44](v8, 0x1012C40EC159624);
  }
}

void sub_1C21E5960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelProto_SentencePiece::Clear(sentencepiece::ModelProto_SentencePiece *this)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16));
  v2 = *((_DWORD *)this + 10);
  if ((v2 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  if ((v2 & 6) != 0)
    *((_QWORD *)this + 7) = 0x100000000;
  *((_DWORD *)this + 10) = 0;
  v4 = *((_QWORD *)this + 1);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(_BYTE **)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 31) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::ModelProto_SentencePiece::_InternalParse(sentencepiece::ModelProto_SentencePiece *this, google::protobuf::internal *a2, int32x2_t *a3)
{
  int v5;
  _QWORD *v7;
  google::protobuf::internal *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v13;
  google::protobuf::internal *v14;
  google::protobuf::internal *v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  google::protobuf::internal::ArenaImpl *v20;
  std::string *v21;
  google::protobuf::internal *TagFallback;
  unsigned int v23;
  std::string *v24;
  unint64_t v25;
  std::string *v26;
  google::protobuf::internal *v27;

  v27 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v27, a3[11].i32[1]) & 1) == 0)
  {
    v7 = (_QWORD *)((char *)this + 8);
    while (1)
    {
      v8 = (google::protobuf::internal *)((char *)v27 + 1);
      v9 = *(unsigned __int8 *)v27;
      if ((*(char *)v27 & 0x80000000) == 0)
        goto LABEL_7;
      v10 = v9 + (*(unsigned __int8 *)v8 << 7);
      v9 = v10 - 128;
      if ((*(char *)v8 & 0x80000000) == 0)
        break;
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v27, (const char *)(v10 - 128));
      v27 = TagFallback;
      if (!TagFallback)
        goto LABEL_48;
      v8 = TagFallback;
      v9 = v23;
LABEL_8:
      v11 = v9 >> 3;
      if (v9 >> 3 == 3)
      {
        if (v9 == 24)
        {
          v15 = (google::protobuf::internal *)((char *)v8 + 1);
          v16 = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0)
            goto LABEL_24;
          v17 = *(char *)v15;
          v18 = v16 + (v17 << 7);
          v16 = (v18 - 128);
          if (v17 < 0)
          {
            v27 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v8, (v18 - 128));
            if (!v27)
            {
LABEL_48:
              v27 = 0;
              goto LABEL_2;
            }
            v16 = v25;
          }
          else
          {
            v15 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_24:
            v27 = v15;
          }
          if ((v16 - 1) > 5)
          {
            if ((*v7 & 1) != 0)
              v26 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
            else
              v26 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
            google::protobuf::internal::WriteVarint(3, v16, v26);
          }
          else
          {
            *((_DWORD *)this + 10) |= 4u;
            *((_DWORD *)this + 15) = v16;
          }
          goto LABEL_38;
        }
      }
      else if (v11 == 2)
      {
        if (v9 == 21)
        {
          v5 |= 2u;
          *((_DWORD *)this + 14) = *(_DWORD *)v8;
          v27 = (google::protobuf::internal *)((char *)v8 + 4);
          goto LABEL_38;
        }
      }
      else if (v11 == 1 && v9 == 10)
      {
        *((_DWORD *)this + 10) |= 1u;
        v19 = *((_QWORD *)this + 1);
        v20 = (google::protobuf::internal::ArenaImpl *)(v19 & 0xFFFFFFFFFFFFFFFELL);
        if ((v19 & 1) != 0)
          v20 = *(google::protobuf::internal::ArenaImpl **)v20;
        v21 = (std::string *)google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)this + 6, v20);
        v14 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v21, (std::string::value_type *)v27, (uint64_t)a3);
        goto LABEL_37;
      }
      if (v9)
        v13 = (v9 & 7) == 4;
      else
        v13 = 1;
      if (v13)
      {
        a3[10].i32[0] = v9 - 1;
        goto LABEL_2;
      }
      if (v9 < 0x640)
      {
        if ((*v7 & 1) != 0)
        {
          v24 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v24 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
          v8 = v27;
        }
        v14 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, v24, v8, (google::protobuf::internal::ParseContext *)a3);
      }
      else
      {
        v14 = (google::protobuf::internal *)google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16), v9, v8, (uint64_t)sentencepiece::_ModelProto_SentencePiece_default_instance_, (uint64_t *)this + 1, a3);
      }
LABEL_37:
      v27 = v14;
      if (!v14)
        goto LABEL_48;
LABEL_38:
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v27, a3[11].i32[1]) & 1) != 0)goto LABEL_2;
    }
    v8 = (google::protobuf::internal *)((char *)v27 + 2);
LABEL_7:
    v27 = v8;
    goto LABEL_8;
  }
LABEL_2:
  *((_DWORD *)this + 10) |= v5;
  return v27;
}

unsigned __int8 *sentencepiece::ModelProto_SentencePiece::_InternalSerialize(sentencepiece::ModelProto_SentencePiece *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a2;
  v6 = *((_DWORD *)this + 10);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFFELL, a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_18;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v7 = *((_DWORD *)this + 14);
  *v4 = 21;
  *(_DWORD *)(v4 + 1) = v7;
  v4 += 5;
  if ((v6 & 4) != 0)
  {
LABEL_9:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v8 = *((int *)this + 15);
    *v4 = 24;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      v9 = v8 >> 7;
      if (v8 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v9 | 0x80;
          v10 = v9 >> 7;
          ++v4;
          v11 = v9 >> 14;
          v9 >>= 7;
        }
        while (v11);
        *(v4 - 1) = v10;
      }
      else
      {
        v4[2] = v9;
        v4 += 3;
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
    }
  }
LABEL_18:
  v12 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16), 200, 0x20000000, (unsigned __int8 *)v4, a3);
  v13 = v12;
  v14 = *((_QWORD *)this + 1);
  if ((v14 & 1) == 0)
    return v13;
  v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 31) < 0)
  {
    v17 = *(void **)(v16 + 8);
    v18 = *(_QWORD *)(v16 + 16);
  }
  else
  {
    v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)v12 >= (int)v18)
  {
    v19 = (int)v18;
    memcpy(v12, v17, (int)v18);
    v13 += v19;
    return v13;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v17, v18, v12);
}

uint64_t sentencepiece::ModelProto_SentencePiece::ByteSizeLong(sentencepiece::ModelProto_SentencePiece *this)
{
  uint64_t result;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  result = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16));
  v3 = *((_DWORD *)this + 10);
  if ((v3 & 7) != 0)
  {
    if ((v3 & 1) != 0)
    {
      v4 = *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFFELL;
      v5 = *(unsigned __int8 *)(v4 + 23);
      v6 = *(_QWORD *)(v4 + 8);
      if ((v5 & 0x80u) == 0)
        v6 = v5;
      result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v3 & 2) != 0)
      result += 5;
    if ((v3 & 4) != 0)
    {
      v7 = *((_DWORD *)this + 15);
      if (v7 < 0)
        v8 = 11;
      else
        v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
      result += v8;
    }
  }
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 1) != 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0)
      v11 = *(_QWORD *)(v10 + 16);
    else
      v11 = *(unsigned __int8 *)(v10 + 31);
    result += v11;
  }
  *((_DWORD *)this + 11) = result;
  return result;
}

void sentencepiece::ModelProto_SentencePiece::CheckTypeAndMergeFrom(sentencepiece::ModelProto_SentencePiece *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::ModelProto_SentencePiece *__hidden))a2 != &off_1E7BE8EC0)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::ModelProto_SentencePiece::MergeFrom(this, a2);
}

void sentencepiece::ModelProto_SentencePiece::MergeFrom(sentencepiece::ModelProto_SentencePiece *this, const sentencepiece::ModelProto_SentencePiece *a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  google::protobuf::internal::ArenaImpl *v16;
  char v17;
  std::string v18[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3001);
    v4 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16), (const sentencepiece::ModelProto_SentencePiece *)((char *)a2 + 16));
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  v13 = *((_DWORD *)a2 + 10);
  if ((v13 & 7) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFFFFELL);
      *((_DWORD *)this + 10) |= 1u;
      v15 = *((_QWORD *)this + 1);
      v16 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = *(google::protobuf::internal::ArenaImpl **)v16;
      google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::ModelProto_SentencePiece *)((char *)this + 48), v14, v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0)
        {
LABEL_18:
          *((_DWORD *)this + 10) |= v13;
          return;
        }
LABEL_17:
        *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
        goto LABEL_18;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
    if ((v13 & 4) == 0)
      goto LABEL_18;
    goto LABEL_17;
  }
}

void sub_1C21E6090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::ModelProto_SentencePiece::IsInitialized(sentencepiece::ModelProto_SentencePiece *this)
{
  return google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16));
}

_QWORD *sentencepiece::ModelProto_SentencePiece::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.ModelProto.SentencePiece");
}

uint64_t sentencepiece::ModelProto::ModelProto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E7BE84F8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_1E7BE8610;
  google::protobuf::internal::ExtensionSet::ExtensionSet(a1 + 24, a2);
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (atomic_load(scc_info_ModelProto_sentencepiece_5fmodel_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ModelProto_sentencepiece_5fmodel_2eproto);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  return a1;
}

void sub_1C21E6144(_Unwind_Exception *a1)
{
  google::protobuf::internal::ExtensionSet *v1;
  google::protobuf::internal::ArenaImpl **v2;

  google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::~RepeatedPtrField(v2);
  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelProto::~ModelProto(sentencepiece::ModelProto *this)
{
  sentencepiece::ModelProto::SharedDtor(this);
  google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1);
  google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 7);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((sentencepiece::ModelProto *)((char *)this + 24));
}

{
  sentencepiece::ModelProto::~ModelProto(this);
  JUMPOUT(0x1C3BB9B44);
}

void sentencepiece::ModelProto::SharedDtor(sentencepiece::ModelProto *this)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  sentencepiece::TrainerSpec *v5;
  sentencepiece::NormalizerSpec *v6;
  sentencepiece::SelfTestData *v7;
  sentencepiece::NormalizerSpec *v8;
  char v9;
  std::string v10[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3145);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  if (this != (sentencepiece::ModelProto *)&sentencepiece::_ModelProto_default_instance_)
  {
    v5 = (sentencepiece::TrainerSpec *)*((_QWORD *)this + 10);
    if (v5)
    {
      sentencepiece::TrainerSpec::~TrainerSpec(v5);
      MEMORY[0x1C3BB9B44]();
    }
    v6 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 11);
    if (v6)
    {
      sentencepiece::NormalizerSpec::~NormalizerSpec(v6);
      MEMORY[0x1C3BB9B44]();
    }
    v7 = (sentencepiece::SelfTestData *)*((_QWORD *)this + 12);
    if (v7)
    {
      sentencepiece::SelfTestData::~SelfTestData(v7);
      MEMORY[0x1C3BB9B44]();
    }
    v8 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 13);
    if (v8)
    {
      sentencepiece::NormalizerSpec::~NormalizerSpec(v8);
      MEMORY[0x1C3BB9B44]();
    }
  }
}

void sub_1C21E62B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'sentencepiece::ModelProto::~ModelProto(sentencepiece::ModelProto *this)
{
  sentencepiece::ModelProto::~ModelProto((sentencepiece::ModelProto *)((char *)this - 16));
}

{
  sentencepiece::ModelProto::~ModelProto((sentencepiece::ModelProto *)((char *)this - 16));
  JUMPOUT(0x1C3BB9B44);
}

void sentencepiece::ModelProto::Clear(sentencepiece::ModelProto *this)
{
  int v2;
  sentencepiece::TrainerSpec *v3;
  std::string *v4;
  sentencepiece::NormalizerSpec *v5;
  std::string *v6;
  sentencepiece::SelfTestData *v7;
  std::string *v8;
  sentencepiece::NormalizerSpec *v9;
  std::string *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  std::string v14[2];

  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::ModelProto *)((char *)this + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56);
  v2 = *((_DWORD *)this + 12);
  if ((v2 & 0xF) != 0)
  {
    if ((v2 & 1) != 0)
    {
      v3 = (sentencepiece::TrainerSpec *)*((_QWORD *)this + 10);
      if (!v3)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3178);
        v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: trainer_spec_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
        v3 = (sentencepiece::TrainerSpec *)*((_QWORD *)this + 10);
      }
      sentencepiece::TrainerSpec::Clear(v3);
    }
    if ((v2 & 2) != 0)
    {
      v5 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 11);
      if (!v5)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3182);
        v6 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: normalizer_spec_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v6->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
        v5 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 11);
      }
      sentencepiece::NormalizerSpec::Clear(v5);
    }
    if ((v2 & 4) != 0)
    {
      v7 = (sentencepiece::SelfTestData *)*((_QWORD *)this + 12);
      if (!v7)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3186);
        v8 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: self_test_data_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v8->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
        v7 = (sentencepiece::SelfTestData *)*((_QWORD *)this + 12);
      }
      sentencepiece::SelfTestData::Clear(v7);
    }
    if ((v2 & 8) != 0)
    {
      v9 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 13);
      if (!v9)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3190);
        v10 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: denormalizer_spec_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
        v9 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 13);
      }
      sentencepiece::NormalizerSpec::Clear(v9);
    }
  }
  *((_DWORD *)this + 12) = 0;
  v11 = *((_QWORD *)this + 1);
  if ((v11 & 1) != 0)
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v12 + 31) < 0)
    {
      **(_BYTE **)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 31) = 0;
    }
  }
}

void sub_1C21E64D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *sentencepiece::ModelProto::_InternalParse(sentencepiece::ModelProto *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  _QWORD *v6;
  google::protobuf::internal *v7;
  unsigned int v8;
  unsigned int v9;
  char *v10;
  google::protobuf::internal *v11;
  int *v12;
  uint64_t v13;
  int v14;
  sentencepiece::ModelProto_SentencePiece *v15;
  uint64_t v16;
  uint64_t v17;
  sentencepiece::TrainerSpec *v18;
  _QWORD *v19;
  google::protobuf::internal *v20;
  sentencepiece::NormalizerSpec *v21;
  _QWORD *v22;
  sentencepiece::SelfTestData *v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  google::protobuf::internal *TagFallback;
  unsigned int v28;
  std::string *v29;
  google::protobuf::internal *v30;

  v30 = a2;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v30, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    v6 = (_QWORD *)((char *)this + 8);
    while (2)
    {
      v7 = (google::protobuf::internal *)((char *)v30 + 1);
      v8 = *(unsigned __int8 *)v30;
      if (*(char *)v30 < 0)
      {
        v9 = v8 + (*(unsigned __int8 *)v7 << 7);
        v8 = v9 - 128;
        if (*(char *)v7 < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v30, (const char *)(v9 - 128));
          v30 = TagFallback;
          if (!TagFallback)
            return 0;
          v7 = TagFallback;
          v8 = v28;
LABEL_8:
          switch(v8 >> 3)
          {
            case 1u:
              if (v8 != 10)
                goto LABEL_49;
              v10 = (char *)v7 - 1;
              break;
            case 2u:
              if (v8 != 18)
                goto LABEL_49;
              *((_DWORD *)this + 12) |= 1u;
              v18 = (sentencepiece::TrainerSpec *)*((_QWORD *)this + 10);
              if (!v18)
              {
                v19 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
                if ((*v6 & 1) != 0)
                  v19 = (_QWORD *)*v19;
                v18 = (sentencepiece::TrainerSpec *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::TrainerSpec>((uint64_t)v19);
                *((_QWORD *)this + 10) = v18;
                v7 = v30;
              }
              v20 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::TrainerSpec>(a3, v18, v7);
              goto LABEL_46;
            case 3u:
              if (v8 != 26)
                goto LABEL_49;
              *((_DWORD *)this + 12) |= 2u;
              v21 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 11);
              if (v21)
                goto LABEL_45;
              v22 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
              if ((*v6 & 1) != 0)
                v22 = (_QWORD *)*v22;
              v21 = (sentencepiece::NormalizerSpec *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>((uint64_t)v22);
              *((_QWORD *)this + 11) = v21;
              goto LABEL_44;
            case 4u:
              if (v8 != 34)
                goto LABEL_49;
              *((_DWORD *)this + 12) |= 4u;
              v23 = (sentencepiece::SelfTestData *)*((_QWORD *)this + 12);
              if (!v23)
              {
                v24 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
                if ((*v6 & 1) != 0)
                  v24 = (_QWORD *)*v24;
                v23 = (sentencepiece::SelfTestData *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData>((uint64_t)v24);
                *((_QWORD *)this + 12) = v23;
                v7 = v30;
              }
              v20 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SelfTestData>(a3, v23, v7);
              goto LABEL_46;
            case 5u:
              if (v8 != 42)
                goto LABEL_49;
              *((_DWORD *)this + 12) |= 8u;
              v21 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 13);
              if (v21)
                goto LABEL_45;
              v25 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
              if ((*v6 & 1) != 0)
                v25 = (_QWORD *)*v25;
              v21 = (sentencepiece::NormalizerSpec *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>((uint64_t)v25);
              *((_QWORD *)this + 13) = v21;
LABEL_44:
              v7 = v30;
LABEL_45:
              v20 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::NormalizerSpec>(a3, v21, v7);
              goto LABEL_46;
            default:
LABEL_49:
              if (v8)
                v26 = (v8 & 7) == 4;
              else
                v26 = 1;
              if (v26)
              {
                *((_DWORD *)a3 + 20) = v8 - 1;
                return v30;
              }
              if (v8 < 0x640)
              {
                if ((*v6 & 1) != 0)
                {
                  v29 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
                }
                else
                {
                  v29 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
                  v7 = v30;
                }
                v20 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, v29, v7, a3);
              }
              else
              {
                v20 = (google::protobuf::internal *)google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::ModelProto *)((char *)this + 24), v8, v7, (uint64_t)&sentencepiece::_ModelProto_default_instance_, (uint64_t *)this + 1, (int32x2_t *)a3);
              }
LABEL_46:
              v30 = v20;
              if (!v20)
                return 0;
LABEL_47:
              if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v30, *((_DWORD *)a3 + 23)) & 1) != 0)return v30;
              continue;
          }
          while (1)
          {
            v11 = (google::protobuf::internal *)(v10 + 1);
            v30 = (google::protobuf::internal *)(v10 + 1);
            v12 = (int *)*((_QWORD *)this + 9);
            if (!v12)
              break;
            v13 = *((int *)this + 16);
            v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *((_DWORD *)this + 17))
              {
LABEL_16:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 14, v14 + 1);
                v12 = (int *)*((_QWORD *)this + 9);
                v14 = *v12;
              }
              *v12 = v14 + 1;
              v15 = (sentencepiece::ModelProto_SentencePiece *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto_SentencePiece>(*((_QWORD *)this + 7));
              v16 = *((_QWORD *)this + 9);
              v17 = *((int *)this + 16);
              *((_DWORD *)this + 16) = v17 + 1;
              *(_QWORD *)(v16 + 8 * v17 + 8) = v15;
              v11 = v30;
              goto LABEL_18;
            }
            *((_DWORD *)this + 16) = v13 + 1;
            v15 = *(sentencepiece::ModelProto_SentencePiece **)&v12[2 * v13 + 2];
LABEL_18:
            v10 = google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::ModelProto_SentencePiece>(a3, v15, v11);
            v30 = (google::protobuf::internal *)v10;
            if (!v10)
              return 0;
            if (*(_QWORD *)a3 <= (unint64_t)v10 || *v10 != 10)
              goto LABEL_47;
          }
          v14 = *((_DWORD *)this + 17);
          goto LABEL_16;
        }
        v7 = (google::protobuf::internal *)((char *)v30 + 2);
      }
      break;
    }
    v30 = v7;
    goto LABEL_8;
  }
  return v30;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::ModelProto_SentencePiece>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::ModelProto_SentencePiece *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)sentencepiece::ModelProto_SentencePiece::_InternalParse(a2, (google::protobuf::internal *)v8, (int32x2_t *)this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::TrainerSpec>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::TrainerSpec *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)sentencepiece::TrainerSpec::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::NormalizerSpec>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::NormalizerSpec *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)sentencepiece::NormalizerSpec::_InternalParse(a2, (google::protobuf::internal *)v8, (int32x2_t *)this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SelfTestData>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::SelfTestData *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)sentencepiece::SelfTestData::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

unsigned __int8 *sentencepiece::ModelProto::_InternalSerialize(sentencepiece::ModelProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6;
  int i;
  sentencepiece::ModelProto_SentencePiece *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  sentencepiece::TrainerSpec *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  sentencepiece::NormalizerSpec *v21;
  unsigned int v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  sentencepiece::SelfTestData *v27;
  unsigned int v28;
  unsigned __int8 *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  sentencepiece::NormalizerSpec *v33;
  unsigned int v34;
  unsigned __int8 *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;

  v6 = *((_DWORD *)this + 16);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v8 = (sentencepiece::ModelProto_SentencePiece *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, i);
      *a2 = 10;
      v9 = *((_DWORD *)v8 + 11);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v10 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v10 - 1) = v11 | 0x80;
            v12 = v11 >> 7;
            ++v10;
            v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          v10 = (unsigned __int8 *)(a2 + 3);
        }
      }
      else
      {
        a2[1] = v9;
        v10 = (unsigned __int8 *)(a2 + 2);
      }
      a2 = (char *)sentencepiece::ModelProto_SentencePiece::_InternalSerialize(v8, (char *)v10, a3);
    }
  }
  v14 = *((_DWORD *)this + 12);
  if ((v14 & 1) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v15 = (sentencepiece::TrainerSpec *)*((_QWORD *)this + 10);
    *a2 = 18;
    v16 = *((_DWORD *)v15 + 12);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      v18 = v16 >> 7;
      if (v16 >> 14)
      {
        v17 = (unsigned __int8 *)(a2 + 3);
        do
        {
          *(v17 - 1) = v18 | 0x80;
          v19 = v18 >> 7;
          ++v17;
          v20 = v18 >> 14;
          v18 >>= 7;
        }
        while (v20);
        *(v17 - 1) = v19;
      }
      else
      {
        a2[2] = v18;
        v17 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v16;
      v17 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)sentencepiece::TrainerSpec::_InternalSerialize(v15, v17, a3);
    if ((v14 & 2) == 0)
    {
LABEL_15:
      if ((v14 & 4) == 0)
        goto LABEL_16;
      goto LABEL_38;
    }
  }
  else if ((v14 & 2) == 0)
  {
    goto LABEL_15;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v21 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 11);
  *a2 = 26;
  v22 = *((_DWORD *)v21 + 13);
  if (v22 > 0x7F)
  {
    a2[1] = v22 | 0x80;
    v24 = v22 >> 7;
    if (v22 >> 14)
    {
      v23 = (unsigned __int8 *)(a2 + 3);
      do
      {
        *(v23 - 1) = v24 | 0x80;
        v25 = v24 >> 7;
        ++v23;
        v26 = v24 >> 14;
        v24 >>= 7;
      }
      while (v26);
      *(v23 - 1) = v25;
    }
    else
    {
      a2[2] = v24;
      v23 = (unsigned __int8 *)(a2 + 3);
    }
  }
  else
  {
    a2[1] = v22;
    v23 = (unsigned __int8 *)(a2 + 2);
  }
  a2 = (char *)sentencepiece::NormalizerSpec::_InternalSerialize(v21, (char *)v23, a3);
  if ((v14 & 4) == 0)
  {
LABEL_16:
    if ((v14 & 8) == 0)
      goto LABEL_58;
    goto LABEL_48;
  }
LABEL_38:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v27 = (sentencepiece::SelfTestData *)*((_QWORD *)this + 12);
  *a2 = 34;
  v28 = *((_DWORD *)v27 + 16);
  if (v28 > 0x7F)
  {
    a2[1] = v28 | 0x80;
    v30 = v28 >> 7;
    if (v28 >> 14)
    {
      v29 = (unsigned __int8 *)(a2 + 3);
      do
      {
        *(v29 - 1) = v30 | 0x80;
        v31 = v30 >> 7;
        ++v29;
        v32 = v30 >> 14;
        v30 >>= 7;
      }
      while (v32);
      *(v29 - 1) = v31;
    }
    else
    {
      a2[2] = v30;
      v29 = (unsigned __int8 *)(a2 + 3);
    }
  }
  else
  {
    a2[1] = v28;
    v29 = (unsigned __int8 *)(a2 + 2);
  }
  a2 = (char *)sentencepiece::SelfTestData::_InternalSerialize(v27, (char *)v29, a3);
  if ((v14 & 8) != 0)
  {
LABEL_48:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v33 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 13);
    *a2 = 42;
    v34 = *((_DWORD *)v33 + 13);
    if (v34 > 0x7F)
    {
      a2[1] = v34 | 0x80;
      v36 = v34 >> 7;
      if (v34 >> 14)
      {
        v35 = (unsigned __int8 *)(a2 + 3);
        do
        {
          *(v35 - 1) = v36 | 0x80;
          v37 = v36 >> 7;
          ++v35;
          v38 = v36 >> 14;
          v36 >>= 7;
        }
        while (v38);
        *(v35 - 1) = v37;
      }
      else
      {
        a2[2] = v36;
        v35 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v34;
      v35 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)sentencepiece::NormalizerSpec::_InternalSerialize(v33, (char *)v35, a3);
  }
LABEL_58:
  v39 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::ModelProto *)((char *)this + 24), 200, 0x20000000, (unsigned __int8 *)a2, a3);
  v40 = v39;
  v41 = *((_QWORD *)this + 1);
  if ((v41 & 1) == 0)
    return v40;
  v43 = v41 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v43 + 31) < 0)
  {
    v44 = *(void **)(v43 + 8);
    v45 = *(_QWORD *)(v43 + 16);
  }
  else
  {
    v44 = (void *)(v43 + 8);
    LODWORD(v45) = *(unsigned __int8 *)(v43 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)v39 >= (int)v45)
  {
    v46 = (int)v45;
    memcpy(v39, v44, (int)v45);
    v40 += v46;
    return v40;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v44, v45, v39);
}

uint64_t sentencepiece::ModelProto::ByteSizeLong(sentencepiece::ModelProto *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sentencepiece::ModelProto_SentencePiece **v6;
  uint64_t v7;
  sentencepiece::ModelProto_SentencePiece *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::ModelProto *)((char *)this + 24));
  v3 = *((int *)this + 16);
  v4 = v2 + v3;
  v5 = *((_QWORD *)this + 9);
  if (v5)
    v6 = (sentencepiece::ModelProto_SentencePiece **)(v5 + 8);
  else
    v6 = 0;
  if ((_DWORD)v3)
  {
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      v9 = sentencepiece::ModelProto_SentencePiece::ByteSizeLong(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  v10 = *((_DWORD *)this + 12);
  if ((v10 & 0xF) == 0)
    goto LABEL_13;
  if ((v10 & 1) == 0)
  {
    if ((v10 & 2) == 0)
      goto LABEL_10;
LABEL_16:
    v15 = sentencepiece::NormalizerSpec::ByteSizeLong(*((sentencepiece::NormalizerSpec **)this + 11));
    v4 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v10 & 4) == 0)
    {
LABEL_11:
      if ((v10 & 8) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_17;
  }
  v14 = sentencepiece::TrainerSpec::ByteSizeLong(*((sentencepiece::TrainerSpec **)this + 10));
  v4 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 2) != 0)
    goto LABEL_16;
LABEL_10:
  if ((v10 & 4) == 0)
    goto LABEL_11;
LABEL_17:
  v16 = sentencepiece::SelfTestData::ByteSizeLong(*((sentencepiece::SelfTestData **)this + 12));
  v4 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 8) != 0)
  {
LABEL_12:
    v11 = sentencepiece::NormalizerSpec::ByteSizeLong(*((sentencepiece::NormalizerSpec **)this + 13));
    v4 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_13:
  v12 = *((_QWORD *)this + 1);
  if ((v12 & 1) != 0)
  {
    v17 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v17 + 31) < 0)
      v18 = *(_QWORD *)(v17 + 16);
    else
      v18 = *(unsigned __int8 *)(v17 + 31);
    v4 += v18;
  }
  *((_DWORD *)this + 13) = v4;
  return v4;
}

void sentencepiece::ModelProto::CheckTypeAndMergeFrom(sentencepiece::ModelProto *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::ModelProto *__hidden))a2 != &off_1E7BE84F8)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::ModelProto::MergeFrom(this, a2);
}

void sentencepiece::ModelProto::MergeFrom(sentencepiece::ModelProto *this, const sentencepiece::ModelProto *a2)
{
  std::string *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  sentencepiece::TrainerSpec *v14;
  _QWORD *v15;
  const sentencepiece::TrainerSpec *v16;
  sentencepiece::NormalizerSpec *v17;
  _QWORD *v18;
  const sentencepiece::NormalizerSpec *v19;
  sentencepiece::SelfTestData *v20;
  _QWORD *v21;
  const sentencepiece::SelfTestData *v22;
  sentencepiece::NormalizerSpec *v23;
  _QWORD *v24;
  const sentencepiece::NormalizerSpec *v25;
  char v26;
  std::string v27[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3397);
    v4 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::ModelProto *)((char *)this + 24), (const sentencepiece::ModelProto *)((char *)a2 + 24));
  v5 = (_QWORD *)((char *)this + 8);
  v6 = *((_QWORD *)a2 + 1);
  if ((v6 & 1) != 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    v8 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
    if ((*v5 & 1) != 0)
      v9 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v7 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v8;
    else
      v11 = *(const std::string::value_type **)(v7 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v7 + 31);
    else
      v12 = *(_QWORD *)(v7 + 16);
    std::string::append(v9, v11, v12);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((signed int **)this + 7, (uint64_t)a2 + 56);
  v13 = *((_DWORD *)a2 + 12);
  if ((v13 & 0xF) != 0)
  {
    if ((v13 & 1) != 0)
    {
      *((_DWORD *)this + 12) |= 1u;
      v14 = (sentencepiece::TrainerSpec *)*((_QWORD *)this + 10);
      if (!v14)
      {
        v15 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v5 & 1) != 0)
          v15 = (_QWORD *)*v15;
        v14 = (sentencepiece::TrainerSpec *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::TrainerSpec>((uint64_t)v15);
        *((_QWORD *)this + 10) = v14;
      }
      if (*((_QWORD *)a2 + 10))
        v16 = (const sentencepiece::TrainerSpec *)*((_QWORD *)a2 + 10);
      else
        v16 = (const sentencepiece::TrainerSpec *)&sentencepiece::_TrainerSpec_default_instance_;
      sentencepiece::TrainerSpec::MergeFrom(v14, v16);
    }
    if ((v13 & 2) != 0)
    {
      *((_DWORD *)this + 12) |= 2u;
      v17 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 11);
      if (!v17)
      {
        v18 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v5 & 1) != 0)
          v18 = (_QWORD *)*v18;
        v17 = (sentencepiece::NormalizerSpec *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>((uint64_t)v18);
        *((_QWORD *)this + 11) = v17;
      }
      if (*((_QWORD *)a2 + 11))
        v19 = (const sentencepiece::NormalizerSpec *)*((_QWORD *)a2 + 11);
      else
        v19 = (const sentencepiece::NormalizerSpec *)&sentencepiece::_NormalizerSpec_default_instance_;
      sentencepiece::NormalizerSpec::MergeFrom(v17, v19);
      if ((v13 & 4) == 0)
      {
LABEL_25:
        if ((v13 & 8) == 0)
          return;
        goto LABEL_43;
      }
    }
    else if ((v13 & 4) == 0)
    {
      goto LABEL_25;
    }
    *((_DWORD *)this + 12) |= 4u;
    v20 = (sentencepiece::SelfTestData *)*((_QWORD *)this + 12);
    if (!v20)
    {
      v21 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
      if ((*v5 & 1) != 0)
        v21 = (_QWORD *)*v21;
      v20 = (sentencepiece::SelfTestData *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData>((uint64_t)v21);
      *((_QWORD *)this + 12) = v20;
    }
    if (*((_QWORD *)a2 + 12))
      v22 = (const sentencepiece::SelfTestData *)*((_QWORD *)a2 + 12);
    else
      v22 = (const sentencepiece::SelfTestData *)&sentencepiece::_SelfTestData_default_instance_;
    sentencepiece::SelfTestData::MergeFrom(v20, v22);
    if ((v13 & 8) != 0)
    {
LABEL_43:
      *((_DWORD *)this + 12) |= 8u;
      v23 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 13);
      if (!v23)
      {
        v24 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v5 & 1) != 0)
          v24 = (_QWORD *)*v24;
        v23 = (sentencepiece::NormalizerSpec *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>((uint64_t)v24);
        *((_QWORD *)this + 13) = v23;
      }
      if (*((_QWORD *)a2 + 13))
        v25 = (const sentencepiece::NormalizerSpec *)*((_QWORD *)a2 + 13);
      else
        v25 = (const sentencepiece::NormalizerSpec *)&sentencepiece::_NormalizerSpec_default_instance_;
      sentencepiece::NormalizerSpec::MergeFrom(v23, v25);
    }
  }
}

void sub_1C21E7350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelProto::CopyFrom(sentencepiece::ModelProto *this, const sentencepiece::ModelProto *a2)
{
  if (a2 != this)
  {
    sentencepiece::ModelProto::Clear(this);
    sentencepiece::ModelProto::MergeFrom(this, a2);
  }
}

uint64_t sentencepiece::ModelProto::IsInitialized(sentencepiece::ModelProto *this)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  std::string *v5;
  uint64_t v6;
  std::string *v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  char v12;
  std::string v13[2];

  result = google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::ModelProto *)((char *)this + 24));
  if (!(_DWORD)result)
    return result;
  result = google::protobuf::internal::AllAreInitialized<sentencepiece::ModelProto_SentencePiece>((uint64_t)this + 56);
  if (!(_DWORD)result)
    return result;
  v3 = *((_DWORD *)this + 12);
  if ((v3 & 1) != 0)
  {
    v4 = *((_QWORD *)this + 10);
    if (!v4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4741);
      v5 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !value || trainer_spec_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v5->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
      v4 = *((_QWORD *)this + 10);
    }
    result = google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v4 + 16));
    if (!(_DWORD)result)
      return result;
    v3 = *((_DWORD *)this + 12);
  }
  if ((v3 & 2) != 0)
  {
    v6 = *((_QWORD *)this + 11);
    if (!v6)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4824);
      v7 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !value || normalizer_spec_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
      v6 = *((_QWORD *)this + 11);
    }
    result = google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v6 + 24));
    if (!(_DWORD)result)
      return result;
    v3 = *((_DWORD *)this + 12);
  }
  if ((v3 & 4) == 0)
  {
LABEL_18:
    if ((v3 & 8) == 0)
      return 1;
    v10 = *((_QWORD *)this + 13);
    if (!v10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4990);
      v11 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !value || denormalizer_spec_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
      v10 = *((_QWORD *)this + 13);
    }
    result = google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v10 + 24));
    if ((_DWORD)result)
      return 1;
    return result;
  }
  v8 = *((_QWORD *)this + 12);
  if (!v8)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4907);
    v9 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !value || self_test_data_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    v8 = *((_QWORD *)this + 12);
  }
  result = google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v8 + 16));
  if ((_DWORD)result)
  {
    v3 = *((_DWORD *)this + 12);
    goto LABEL_18;
  }
  return result;
}

void sub_1C21E7550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL google::protobuf::internal::AllAreInitialized<sentencepiece::ModelProto_SentencePiece>(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  do
  {
    v3 = v2;
    v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4)
      break;
    v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(a1, v2);
  }
  while ((google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v5 + 16)) & 1) != 0);
  return v3 < 1;
}

_QWORD *sentencepiece::ModelProto::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.ModelProto");
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::TrainerSpec>(uint64_t a1)
{
  uint64_t AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x148uLL);
    sentencepiece::TrainerSpec::TrainerSpec(AlignedNoHook, a1);
  }
  else
  {
    AlignedNoHook = operator new();
    sentencepiece::TrainerSpec::TrainerSpec(AlignedNoHook, 0);
  }
  return AlignedNoHook;
}

void sub_1C21E7674(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10A1C4074230EEALL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>(uint64_t a1)
{
  uint64_t AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x58uLL);
    sentencepiece::NormalizerSpec::NormalizerSpec(AlignedNoHook, a1);
  }
  else
  {
    AlignedNoHook = operator new();
    sentencepiece::NormalizerSpec::NormalizerSpec(AlignedNoHook, 0);
  }
  return AlignedNoHook;
}

void sub_1C21E7728(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10A1C402CDD3876);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData_Sample>(uint64_t a1)
{
  _QWORD *AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = (_QWORD *)google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x28uLL);
    *AlignedNoHook = &off_1E7BE8A98;
    AlignedNoHook[1] = a1;
    AlignedNoHook[2] = 0;
    if (atomic_load(scc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto))
      goto LABEL_7;
  }
  else
  {
    AlignedNoHook = (_QWORD *)operator new();
    *AlignedNoHook = &off_1E7BE8A98;
    AlignedNoHook[1] = 0;
    AlignedNoHook[2] = 0;
    if (atomic_load(scc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto))
LABEL_7:
      google::protobuf::internal::InitSCCImpl(scc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto);
  }
  AlignedNoHook[3] = &google::protobuf::internal::fixed_address_empty_string;
  AlignedNoHook[4] = &google::protobuf::internal::fixed_address_empty_string;
  return AlignedNoHook;
}

void sub_1C21E7834(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x1081C400F7E8713);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData>(uint64_t a1)
{
  uint64_t AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x48uLL);
    sentencepiece::SelfTestData::SelfTestData(AlignedNoHook, a1);
  }
  else
  {
    AlignedNoHook = operator new();
    sentencepiece::SelfTestData::SelfTestData(AlignedNoHook, 0);
  }
  return AlignedNoHook;
}

void sub_1C21E78E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10A1C4075D007F8);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto_SentencePiece>(uint64_t a1)
{
  _QWORD *AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = (_QWORD *)google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x40uLL);
    sentencepiece::ModelProto_SentencePiece::ModelProto_SentencePiece(AlignedNoHook, a1);
  }
  else
  {
    AlignedNoHook = (_QWORD *)operator new();
    sentencepiece::ModelProto_SentencePiece::ModelProto_SentencePiece(AlignedNoHook, 0);
  }
  return AlignedNoHook;
}

void sub_1C21E799C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10A1C40F497E4DALL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto>(uint64_t a1)
{
  uint64_t AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x70uLL);
    sentencepiece::ModelProto::ModelProto(AlignedNoHook, a1);
  }
  else
  {
    AlignedNoHook = operator new();
    sentencepiece::ModelProto::ModelProto(AlignedNoHook, 0);
  }
  return AlignedNoHook;
}

void sub_1C21E7A50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10A1C4047CE62CFLL);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::TrainerSpec::New(sentencepiece::TrainerSpec *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::TrainerSpec>(0);
}

uint64_t sentencepiece::TrainerSpec::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::TrainerSpec>(a2);
}

uint64_t sentencepiece::TrainerSpec::GetCachedSize(sentencepiece::TrainerSpec *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t sentencepiece::NormalizerSpec::New(sentencepiece::NormalizerSpec *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>(0);
}

uint64_t sentencepiece::NormalizerSpec::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>(a2);
}

uint64_t sentencepiece::NormalizerSpec::GetCachedSize(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned int *)this + 13);
}

uint64_t sentencepiece::NormalizerSpec::add_suffix_space(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 80);
}

uint64_t sentencepiece::NormalizerSpec::add_dummy_prefix(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 81);
}

uint64_t sentencepiece::NormalizerSpec::remove_extra_whitespaces(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 82);
}

uint64_t sentencepiece::NormalizerSpec::escape_whitespaces(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 83);
}

uint64_t `non-virtual thunk to'sentencepiece::NormalizerSpec::add_dummy_prefix(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 65);
}

uint64_t `non-virtual thunk to'sentencepiece::NormalizerSpec::remove_extra_whitespaces(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 66);
}

uint64_t `non-virtual thunk to'sentencepiece::NormalizerSpec::escape_whitespaces(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 67);
}

uint64_t `non-virtual thunk to'sentencepiece::NormalizerSpec::add_suffix_space(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 64);
}

_QWORD *sentencepiece::SelfTestData_Sample::New(sentencepiece::SelfTestData_Sample *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData_Sample>(0);
}

_QWORD *sentencepiece::SelfTestData_Sample::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData_Sample>(a2);
}

uint64_t sentencepiece::SelfTestData_Sample::GetCachedSize(sentencepiece::SelfTestData_Sample *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t sentencepiece::SelfTestData::New(sentencepiece::SelfTestData *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData>(0);
}

uint64_t sentencepiece::SelfTestData::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData>(a2);
}

uint64_t sentencepiece::SelfTestData::GetCachedSize(sentencepiece::SelfTestData *this)
{
  return *((unsigned int *)this + 16);
}

_QWORD *sentencepiece::ModelProto_SentencePiece::New(sentencepiece::ModelProto_SentencePiece *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto_SentencePiece>(0);
}

_QWORD *sentencepiece::ModelProto_SentencePiece::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto_SentencePiece>(a2);
}

uint64_t sentencepiece::ModelProto_SentencePiece::GetCachedSize(sentencepiece::ModelProto_SentencePiece *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t sentencepiece::ModelProto::New(sentencepiece::ModelProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto>(0);
}

uint64_t sentencepiece::ModelProto::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto>(a2);
}

uint64_t sentencepiece::ModelProto::GetCachedSize(sentencepiece::ModelProto *this)
{
  return *((unsigned int *)this + 13);
}

uint64_t sentencepiece::ModelProto::PieceSize(sentencepiece::ModelProto *this)
{
  return *((unsigned int *)this + 16);
}

char *sentencepiece::ModelProto::UnkSurface(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 10);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[22];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EF76F3F8);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_surface_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sentencepiece::ModelProto::UnkPiece(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 10);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[23];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EF76F300);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_piece_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sentencepiece::ModelProto::BosPiece(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 10);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[24];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EF76F398);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_bos_piece_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sentencepiece::ModelProto::EosPiece(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 10);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[25];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EF76F3B8);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_eos_piece_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sentencepiece::ModelProto::PadPiece(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 10);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[26];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EF76F3D8);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_pad_piece_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

uint64_t sentencepiece::ModelProto::ByteFallback(sentencepiece::ModelProto *this)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 10);
  if (!v1)
    v1 = (unsigned __int8 *)&sentencepiece::_TrainerSpec_default_instance_;
  return v1[248];
}

uint64_t sentencepiece::ModelProto::HasUnkSurface(sentencepiece::ModelProto *this)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)&sentencepiece::_TrainerSpec_default_instance_;
  if (*((_QWORD *)this + 10))
    v1 = (unsigned __int8 *)*((_QWORD *)this + 10);
  return (v1[40] >> 3) & 1;
}

char *sentencepiece::ModelProto::IdToPiece(sentencepiece::ModelProto *this, int a2)
{
  char *result;

  result = (char *)(*(_QWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 48) & 0xFFFFFFFFFFFFFFFELL);
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

float sentencepiece::ModelProto::GetScore(sentencepiece::ModelProto *this, int a2)
{
  return *(float *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 56);
}

BOOL sentencepiece::ModelProto::PieceIsNormal(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 60) == 1;
}

BOOL sentencepiece::ModelProto::PieceIsUnknown(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 60) == 2;
}

BOOL sentencepiece::ModelProto::PieceIsControl(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 60) == 3;
}

BOOL sentencepiece::ModelProto::PieceIsUnused(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 60) == 5;
}

BOOL sentencepiece::ModelProto::PieceIsUserDefined(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 60) == 4;
}

BOOL sentencepiece::ModelProto::PieceIsByte(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 60) == 6;
}

uint64_t sentencepiece::ModelProto::NormalizerSpec(sentencepiece::ModelProto *this)
{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 11);
  if (!v1)
    v1 = &sentencepiece::_NormalizerSpec_default_instance_;
  return (uint64_t)v1 + 16;
}

uint64_t sentencepiece::ModelProto::DenormalizerSpec(sentencepiece::ModelProto *this)
{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 13);
  if (!v1)
    v1 = &sentencepiece::_NormalizerSpec_default_instance_;
  return (uint64_t)v1 + 16;
}

uint64_t sentencepiece::ModelProto::GetModelType(sentencepiece::ModelProto *this)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (_DWORD *)*((_QWORD *)this + 10);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[68];
  v3 = v2 - 2;
  v4 = v2 - 1;
  if (v3 >= 3)
    return 0;
  else
    return v4;
}

uint64_t `non-virtual thunk to'sentencepiece::ModelProto::PieceSize(sentencepiece::ModelProto *this)
{
  return *((unsigned int *)this + 12);
}

char *`non-virtual thunk to'sentencepiece::ModelProto::UnkSurface(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 8);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[22];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EF76F3F8);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_surface_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *`non-virtual thunk to'sentencepiece::ModelProto::UnkPiece(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 8);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[23];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EF76F300);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_piece_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *`non-virtual thunk to'sentencepiece::ModelProto::BosPiece(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 8);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[24];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EF76F398);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_bos_piece_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *`non-virtual thunk to'sentencepiece::ModelProto::EosPiece(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 8);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[25];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EF76F3B8);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_eos_piece_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *`non-virtual thunk to'sentencepiece::ModelProto::PadPiece(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 8);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[26];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EF76F3D8);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_pad_piece_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

uint64_t `non-virtual thunk to'sentencepiece::ModelProto::ByteFallback(sentencepiece::ModelProto *this)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 8);
  if (!v1)
    v1 = (unsigned __int8 *)&sentencepiece::_TrainerSpec_default_instance_;
  return v1[248];
}

uint64_t `non-virtual thunk to'sentencepiece::ModelProto::HasUnkSurface(sentencepiece::ModelProto *this)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)&sentencepiece::_TrainerSpec_default_instance_;
  if (*((_QWORD *)this + 8))
    v1 = (unsigned __int8 *)*((_QWORD *)this + 8);
  return (v1[40] >> 3) & 1;
}

uint64_t `non-virtual thunk to'sentencepiece::ModelProto::GetModelType(sentencepiece::ModelProto *this)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (_DWORD *)*((_QWORD *)this + 8);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[68];
  v3 = v2 - 2;
  v4 = v2 - 1;
  if (v3 >= 3)
    return 0;
  else
    return v4;
}

char *`non-virtual thunk to'sentencepiece::ModelProto::IdToPiece(sentencepiece::ModelProto *this, int a2)
{
  char *result;

  result = (char *)(*(_QWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 48) & 0xFFFFFFFFFFFFFFFELL);
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

float `non-virtual thunk to'sentencepiece::ModelProto::GetScore(sentencepiece::ModelProto *this, int a2)
{
  return *(float *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 56);
}

BOOL `non-virtual thunk to'sentencepiece::ModelProto::PieceIsNormal(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 60) == 1;
}

BOOL `non-virtual thunk to'sentencepiece::ModelProto::PieceIsUnknown(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 60) == 2;
}

BOOL `non-virtual thunk to'sentencepiece::ModelProto::PieceIsControl(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 60) == 3;
}

BOOL `non-virtual thunk to'sentencepiece::ModelProto::PieceIsUnused(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 60) == 5;
}

BOOL `non-virtual thunk to'sentencepiece::ModelProto::PieceIsUserDefined(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 60) == 4;
}

BOOL `non-virtual thunk to'sentencepiece::ModelProto::PieceIsByte(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 60) == 6;
}

uint64_t `non-virtual thunk to'sentencepiece::ModelProto::NormalizerSpec(sentencepiece::ModelProto *this)
{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 9);
  if (!v1)
    v1 = &sentencepiece::_NormalizerSpec_default_instance_;
  return (uint64_t)v1 + 16;
}

uint64_t `non-virtual thunk to'sentencepiece::ModelProto::DenormalizerSpec(sentencepiece::ModelProto *this)
{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 11);
  if (!v1)
    v1 = &sentencepiece::_NormalizerSpec_default_instance_;
  return (uint64_t)v1 + 16;
}

void google::protobuf::internal::arena_destruct_object<std::string>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1C21E83C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::string *v4;
  char v5;
  std::string v6[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v4 = google::protobuf::internal::LogMessage::operator<<(v6, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v6[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v2 = *(_QWORD *)(a1 + 16) + 8;
    do
    {
      v3 = *(_QWORD *)v2;
      if (*(char *)(*(_QWORD *)v2 + 23) < 0)
      {
        **(_BYTE **)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v3 = 0;
        *(_BYTE *)(v3 + 23) = 0;
      }
      v2 += 8;
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1C21E848C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1C21E8560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (uint64_t *)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      sentencepiece::SelfTestData_Sample::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1C21E8614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  sentencepiece::ModelProto_SentencePiece **v3;
  sentencepiece::ModelProto_SentencePiece *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (sentencepiece::ModelProto_SentencePiece **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      sentencepiece::ModelProto_SentencePiece::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1C21E86C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  const std::string **v6;
  unsigned int *v7;
  int v8;
  int *v9;
  char v10;
  std::string v11[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (const std::string **)(*(_QWORD *)(a2 + 16) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, v5);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((std::string *)this, (std::string **)v7, v6, v5, *this[2] - *((_DWORD *)this + 2));
    v8 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v8;
    v9 = this[2];
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_1C21E87AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(std::string *result, std::string **a2, const std::string **a3, signed int a4, signed int a5)
{
  std::string::__raw *v9;
  uint64_t v10;
  const std::string **v11;
  std::string **v12;
  const std::string *v13;
  const std::string *v14;
  std::string *v15;
  int v16;
  std::string::size_type v17;
  const std::string **v18;
  std::string **v19;
  const std::string *v20;
  std::string *AlignedAndAddCleanup;
  std::string *v22;

  v9 = (std::string::__raw *)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = std::string::operator=(v15, v13);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = v9->__words[0];
    v18 = &a3[a5];
    v19 = &a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        if ((*(_BYTE *)(v17 + 24) & 1) != 0)
        AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v17, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
      }
      else
      {
        AlignedAndAddCleanup = (std::string *)operator new();
      }
      v22 = AlignedAndAddCleanup;
      AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
      AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
      AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
      result = std::string::operator=(AlignedAndAddCleanup, v20);
      *v19++ = v22;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

void google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>(_QWORD *a1)
{
  sentencepiece::SelfTestData_Sample **v2;
  sentencepiece::SelfTestData_Sample **v3;
  uint64_t v4;

  v2 = (sentencepiece::SelfTestData_Sample **)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sentencepiece::SelfTestData_Sample::~SelfTestData_Sample(*v3);
          MEMORY[0x1C3BB9B44]();
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (sentencepiece::SelfTestData_Sample **)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>(signed int **this, uint64_t a2)
{
  std::string *v4;
  unsigned int v5;
  sentencepiece::SelfTestData_Sample **v6;
  unsigned int *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  if ((signed int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (sentencepiece::SelfTestData_Sample **)(*(_QWORD *)(a2 + 16) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, v5);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>((uint64_t *)this, (sentencepiece::SelfTestData_Sample **)v7, v6, v5, *this[2] - *((_DWORD *)this + 2));
    v8 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v8;
    v9 = this[2];
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_1C21E8A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>(uint64_t *a1, sentencepiece::SelfTestData_Sample **a2, sentencepiece::SelfTestData_Sample **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  sentencepiece::SelfTestData_Sample **v11;
  sentencepiece::SelfTestData_Sample **v12;
  sentencepiece::SelfTestData_Sample *v13;
  sentencepiece::SelfTestData_Sample *v14;
  sentencepiece::SelfTestData_Sample *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  sentencepiece::SelfTestData_Sample **v19;
  sentencepiece::SelfTestData_Sample **v20;
  sentencepiece::SelfTestData_Sample *v21;
  sentencepiece::SelfTestData_Sample *v22;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      google::protobuf::internal::GenericTypeHandler<sentencepiece::SelfTestData_Sample>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = (sentencepiece::SelfTestData_Sample *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData_Sample>(v18);
      google::protobuf::internal::GenericTypeHandler<sentencepiece::SelfTestData_Sample>::Merge(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void google::protobuf::internal::GenericTypeHandler<sentencepiece::SelfTestData_Sample>::Merge(sentencepiece::SelfTestData_Sample *a1, sentencepiece::SelfTestData_Sample *this)
{
  sentencepiece::SelfTestData_Sample::MergeFrom(this, a1);
}

void google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(_QWORD *a1)
{
  sentencepiece::ModelProto_SentencePiece **v2;
  sentencepiece::ModelProto_SentencePiece **v3;
  uint64_t v4;

  v2 = (sentencepiece::ModelProto_SentencePiece **)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sentencepiece::ModelProto_SentencePiece::~ModelProto_SentencePiece(*v3);
          MEMORY[0x1C3BB9B44]();
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (sentencepiece::ModelProto_SentencePiece **)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(signed int **this, uint64_t a2)
{
  std::string *v4;
  unsigned int v5;
  sentencepiece::ModelProto_SentencePiece **v6;
  unsigned int *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  if ((signed int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (sentencepiece::ModelProto_SentencePiece **)(*(_QWORD *)(a2 + 16) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, v5);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t *)this, (sentencepiece::ModelProto_SentencePiece **)v7, v6, v5, *this[2] - *((_DWORD *)this + 2));
    v8 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v8;
    v9 = this[2];
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_1C21E8CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(uint64_t *a1, sentencepiece::ModelProto_SentencePiece **a2, sentencepiece::ModelProto_SentencePiece **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  sentencepiece::ModelProto_SentencePiece **v11;
  sentencepiece::ModelProto_SentencePiece **v12;
  sentencepiece::ModelProto_SentencePiece *v13;
  sentencepiece::ModelProto_SentencePiece *v14;
  sentencepiece::ModelProto_SentencePiece *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  sentencepiece::ModelProto_SentencePiece **v19;
  sentencepiece::ModelProto_SentencePiece **v20;
  sentencepiece::ModelProto_SentencePiece *v21;
  sentencepiece::ModelProto_SentencePiece *v22;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      google::protobuf::internal::GenericTypeHandler<sentencepiece::ModelProto_SentencePiece>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = (sentencepiece::ModelProto_SentencePiece *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto_SentencePiece>(v18);
      google::protobuf::internal::GenericTypeHandler<sentencepiece::ModelProto_SentencePiece>::Merge(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void google::protobuf::internal::GenericTypeHandler<sentencepiece::ModelProto_SentencePiece>::Merge(sentencepiece::ModelProto_SentencePiece *a1, sentencepiece::ModelProto_SentencePiece *this)
{
  sentencepiece::ModelProto_SentencePiece::MergeFrom(this, a1);
}

_QWORD *sentencepiece::filesystem::NewReadableFile@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  char v7;
  _QWORD v8[2];

  v8[0] = a1;
  v8[1] = a2;
  v7 = a3;
  result = absl::make_unique<sentencepiece::filesystem::PosixReadableFile,std::string_view &,BOOL &>((uint64_t)v8, &v6);
  *a4 = v6;
  return result;
}

_QWORD *absl::make_unique<sentencepiece::filesystem::PosixReadableFile,std::string_view &,BOOL &>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  result = sentencepiece::filesystem::PosixReadableFile::PosixReadableFile(v4, *(const char **)a1, *(_QWORD *)(a1 + 8));
  *a2 = v4;
  return result;
}

void sub_1C21E8E10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::filesystem::PosixReadableFile::PosixReadableFile(_QWORD *a1, const char *a2, uint64_t a3)
{
  uint64_t *v6;
  _QWORD *v7;
  size_t v8;
  int *v9;
  void **v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  unsigned int v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;
  _DWORD *v19;

  *a1 = &off_1E7BE86C8;
  v6 = a1 + 1;
  sentencepiece::util::Status::Status(a1 + 1);
  if (a3)
  {
    v7 = (_QWORD *)operator new();
    std::ifstream::basic_ifstream(v7);
  }
  else
  {
    v7 = (_QWORD *)MEMORY[0x1E0DE4948];
  }
  a1[2] = v7;
  if ((*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 5) != 0)
  {
    v15 = 5;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\"", 1);
    v8 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)a2, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\": ", 3);
    v9 = __error();
    sentencepiece::util::StrError((sentencepiece::util *)*v9);
    if ((v14 & 0x80u) == 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v11 = v14;
    else
      v11 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v10, v11);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v15, (uint64_t)&v19);
    sentencepiece::util::Status::operator=(v6, &v19);
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v19);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v16[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v16[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v17 < 0)
      operator delete((void *)v16[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C3BB9A90](&v18);
  }
  return a1;
}

void sub_1C21E900C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sentencepiece::util::Status *v15;
  uint64_t v16;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)(v16 - 56));
  if (a14 < 0)
    operator delete(__p);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a15);
  sentencepiece::util::Status::~Status(v15);
  _Unwind_Resume(a1);
}

void sentencepiece::filesystem::PosixReadableFile::~PosixReadableFile(sentencepiece::filesystem::PosixReadableFile *this)
{
  sentencepiece::filesystem::PosixReadableFile::~PosixReadableFile(this);
  JUMPOUT(0x1C3BB9B44);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7BE86C8;
  v2 = *((_QWORD *)this + 2);
  if (v2 != MEMORY[0x1E0DE4948] && v2 != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sentencepiece::util::Status::~Status((sentencepiece::filesystem::PosixReadableFile *)((char *)this + 8));
}

uint64_t sentencepiece::filesystem::PosixReadableFile::status@<X0>(sentencepiece::filesystem::PosixReadableFile *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  return sentencepiece::util::Status::Status(a2, (sentencepiece::filesystem::PosixReadableFile *)((char *)this + 8));
}

BOOL sentencepiece::filesystem::PosixReadableFile::ReadLine(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  const std::locale::facet *v4;
  unsigned __int8 v5;
  _QWORD *v6;
  std::locale v8;

  v3 = *(_QWORD **)(a1 + 16);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
  v4 = std::locale::use_facet(&v8, MEMORY[0x1E0DE4A90]);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v8);
  v6 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, a2, v5);
  return (*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) == 0;
}

void sub_1C21E9154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

BOOL sentencepiece::filesystem::PosixReadableFile::ReadAll(sentencepiece::logging *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v11;

  v2 = (_QWORD *)*((_QWORD *)a1 + 2);
  v3 = (_QWORD *)MEMORY[0x1E0DE4948];
  if (v2 == (_QWORD *)MEMORY[0x1E0DE4948])
  {
    if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
    {
      v11 = 0;
      v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"filesystem.cc", 13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
      v5 = (_QWORD *)std::ostream::operator<<();
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") ", 2);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"LOG(", 4);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ERROR", 5);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ReadAll is not supported for stdin.", 35);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v11);
    }
  }
  else
  {
    std::string::__assign_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(a2, *(_QWORD **)((char *)v2 + *(_QWORD *)(*v2 - 24) + 40), 0);
  }
  return v2 != v3;
}

void sub_1C21E9260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x1C3BB9754](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1C21E93F8(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1C21E93C4);
  }
  __cxa_rethrow();
}

void sub_1C21E943C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::string::__assign_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  std::string *p_p;
  std::string::size_type size;
  std::string __p;

  std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&__p, a2, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  MEMORY[0x1C3BB9640](a1, p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1C21E94B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(std::string *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  std::string::value_type *v5;
  std::string::value_type v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v8 = a3;
  v9 = a2;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  while (1)
  {
    result = std::istreambuf_iterator<char>::equal[abi:ne180100](&v9, &v8);
    if ((result & 1) != 0)
      break;
    v5 = (std::string::value_type *)v9[3];
    if (v5 == (std::string::value_type *)v9[4])
      v6 = (*(uint64_t (**)(_QWORD *))(*v9 + 72))(v9);
    else
      v6 = *v5;
    std::string::push_back(a1, v6);
    v7 = v9[3];
    if (v7 == v9[4])
      (*(void (**)(_QWORD *))(*v9 + 80))(v9);
    else
      v9[3] = v7 + 1;
  }
  return result;
}

void sub_1C21E9568(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_1C21E9584(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::istreambuf_iterator<char>::equal[abi:ne180100](_QWORD **a1, _QWORD **a2)
{
  _QWORD *v4;
  _BOOL4 v5;
  _QWORD *v6;
  _BOOL4 v7;

  v4 = *a1;
  if (v4)
  {
    if (v4[3] != v4[4])
    {
      v5 = 0;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD *))(*v4 + 72))(v4) != -1)
    {
      v5 = *a1 == 0;
      goto LABEL_8;
    }
    *a1 = 0;
  }
  v5 = 1;
LABEL_8:
  v6 = *a2;
  if (!*a2)
    goto LABEL_14;
  if (v6[3] == v6[4])
  {
    if ((*(unsigned int (**)(_QWORD *))(*v6 + 72))(v6) != -1)
    {
      v7 = *a2 == 0;
      return v5 ^ v7 ^ 1u;
    }
    *a2 = 0;
LABEL_14:
    v7 = 1;
    return v5 ^ v7 ^ 1u;
  }
  v7 = 0;
  return v5 ^ v7 ^ 1u;
}

_QWORD *std::ofstream::basic_ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FB0];
  v3 = MEMORY[0x1E0DE4FB0] + 64;
  a1[52] = MEMORY[0x1E0DE4FB0] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x1C3BB9700](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_1C21E9720(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3BB9A90](v1 + 416);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::GetRandomGeneratorSeed(sentencepiece *this)
{
  unsigned int v1;
  uint64_t v2;
  std::random_device v4;

  if (v1 != -1)
  std::random_device::random_device[abi:ne180100](&v4);
  v2 = MEMORY[0x1C3BB988C](&v4);
  std::random_device::~random_device(&v4);
  return v2;
}

void sub_1C21E97B4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
  unsigned int *v12;

  std::random_device::~random_device(&a11);
  __cxa_begin_catch(a1);
  atomic_load(v12);
  __cxa_end_catch();
  JUMPOUT(0x1C21E97A0);
}

std::random_device *std::random_device::random_device[abi:ne180100](std::random_device *a1)
{
  std::string __token;

  std::string::basic_string[abi:ne180100]<0>(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__token.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1C21E9830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::logging::GetMinLogLevel(sentencepiece::logging *this)
{
}

uint64_t sentencepiece::random::GetRandomGenerator(sentencepiece::random *this)
{
  uint64_t (*v1)(_QWORD);
  sentencepiece *v2;
  _DWORD *v4;
  uint64_t (*v5)(_QWORD);
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  if ((*(_BYTE *)v2 & 1) == 0)
  {
    sentencepiece::GetRandomGeneratorSeed(v2);
    v4 = (_DWORD *)sentencepiece::random::GetRandomGenerator(void)::mt(&sentencepiece::random::GetRandomGenerator(void)::mt);
    *v4 = v6;
    do
    {
      v7 = v5(&sentencepiece::random::GetRandomGenerator(void)::mt);
      *(_DWORD *)(v7 + 4 * v9) = v8;
    }
    while (v9 != 623);
    *(_QWORD *)(v5(&sentencepiece::random::GetRandomGenerator(void)::mt) + 2496) = 0;
  }
  return sentencepiece::random::GetRandomGenerator(void)::mt(&sentencepiece::random::GetRandomGenerator(void)::mt);
}

uint64_t sentencepiece::util::StrError(sentencepiece::util *this)
{
  size_t v1;
  _QWORD *v2;
  _QWORD v4[11];
  char v5;
  uint64_t v6;
  char __strerrbuf[1024];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  strerror_r((int)this, __strerrbuf, 0x3FFuLL);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  v1 = strlen(__strerrbuf);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)__strerrbuf, v1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" Error #", 8);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v4[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v5 < 0)
    operator delete((void *)v4[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3BB9A90](&v6);
}

void sub_1C21E9A20(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sentencepiece::mmap_util::Padding(std::string *this)
{
  std::string::size_type size;
  std::string::size_type v3;

  LOBYTE(size) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if ((size & 3) != 0)
  {
    do
    {
      std::string::push_back(this, 0);
      LOBYTE(v3) = *((_BYTE *)&this->__r_.__value_.__s + 23);
      if ((v3 & 0x80u) != 0)
        v3 = this->__r_.__value_.__l.__size_;
    }
    while ((v3 & 3) != 0);
  }
}

void sentencepiece::mmap_util::RoundUp()
{
  __assert_rtn("RoundUp", "util.cc", 276, "multiple");
}

sentencepiece::bpe::Model *sentencepiece::bpe::Model::Model(sentencepiece::bpe::Model *this, const sentencepiece::ModelProto *a2)
{
  sentencepiece::ModelInterface *v4;

  v4 = sentencepiece::ModelInterface::ModelInterface(this);
  *(_QWORD *)v4 = &off_1E7BE9040;
  *((_QWORD *)v4 + 1) = (char *)a2 + 16;
  sentencepiece::ModelInterface::InitializePieces(v4);
  return this;
}

void sub_1C21E9B00(_Unwind_Exception *a1)
{
  sentencepiece::ModelInterface *v1;

  sentencepiece::ModelInterface::~ModelInterface(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::bpe::Model::~Model(sentencepiece::bpe::Model *this)
{
  sentencepiece::ModelInterface::~ModelInterface(this);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t sentencepiece::bpe::Model::IsSampleEncodeAvailable(sentencepiece::bpe::Model *this)
{
  return 1;
}

uint64_t sentencepiece::bpe::Model::IsNBestEncodeAvailable(sentencepiece::bpe::Model *this)
{
  return 0;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPairComparator &,std::__wrap_iter<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair **>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  float v13;

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v4 = v3 >> 1;
    v5 = result + 8 * (v3 >> 1);
    v6 = *(_DWORD **)v5;
    v7 = *(_QWORD *)(a2 - 8);
    v8 = *(float *)(*(_QWORD *)v5 + 8);
    v9 = *(float *)(v7 + 8);
    if (v8 < v9 || v8 == v9 && *v6 > *(_DWORD *)v7)
    {
      *(_QWORD *)(a2 - 8) = v6;
      if (v3 >= 2)
      {
        while (1)
        {
          v11 = v4 - 1;
          v4 = (v4 - 1) >> 1;
          v10 = result + 8 * v4;
          v12 = *(_DWORD **)v10;
          v13 = *(float *)(*(_QWORD *)v10 + 8);
          if (v13 >= v9 && (v13 != v9 || *v12 <= *(_DWORD *)v7))
            break;
          *(_QWORD *)v5 = v12;
          v5 = result + 8 * v4;
          if (v11 <= 1)
            goto LABEL_11;
        }
      }
      v10 = v5;
LABEL_11:
      *(_QWORD *)v10 = v7;
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *v15;
  uint64_t *v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_view_hash<char>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v18 = a2;
        v16 = *(uint64_t **)a2;
        v17 = *(_QWORD *)(v18 + 8);
        do
        {
          v19 = *((_QWORD *)v15 + 1);
          if (v19 == v10)
          {
            if (*((_QWORD *)v15 + 3) == v17 && !memcmp(*((const void **)v15 + 2), v16, v17))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v19 >= v11)
                v19 %= v11;
            }
            else
            {
              v19 &= v11 - 1;
            }
            if (v19 != v4)
              break;
          }
          v15 = *(void **)v15;
        }
        while (v15);
      }
    }
  }
  v15 = operator new(0x40uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v10;
  *((_OWORD *)v15 + 1) = **a4;
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)v15 = *v27;
LABEL_40:
    *v27 = v15;
    goto LABEL_41;
  }
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v26 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_40;
  }
LABEL_41:
  ++*v8;
  return v15;
}

void sub_1C21E9E48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__string_view_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  char v4;

  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v4, a2, a3);
}

void sentencepiece::model::FreeList<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair>::~FreeList(_QWORD *a1)
{
  sentencepiece::model::FreeList<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair>::~FreeList(a1);
  JUMPOUT(0x1C3BB9B44);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1C3BB9B44);
}

void std::__function::__func<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2,std::allocator<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2>,void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::~__func()
{
  JUMPOUT(0x1C3BB9B44);
}

__n128 std::__function::__func<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2,std::allocator<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2>,void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7BEC6F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2,std::allocator<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2>,void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7BEC6F0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2,std::allocator<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2>,void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2,std::allocator<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2>,void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::target_type()
{
}

uint64_t **std::__hash_table<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>>>::find<std::string_view>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  uint64_t *v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;

  v4 = std::__string_view_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v14 = a2;
    v12 = *(uint64_t **)a2;
    v13 = *(_QWORD *)(v14 + 8);
    do
    {
      v15 = (unint64_t)v11[1];
      if (v15 == v6)
      {
        if (v11[3] == (uint64_t *)v13 && !memcmp(v11[2], v12, v13))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(_QWORD *)&v5)
            v15 %= *(_QWORD *)&v5;
        }
        else
        {
          v15 &= *(_QWORD *)&v5 - 1;
        }
        if (v15 != v9)
          return 0;
      }
      v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

_QWORD *std::__function::__value_func<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1C21EA240(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sentencepiece::error::Abort(sentencepiece::error *this)
{
  _QWORD *v1;
  sentencepiece *v2;

  if (!sentencepiece::error::gTestCounter)
  {
    v1 = std::operator<<[abi:ne180100]<std::char_traits<char>>(MEMORY[0x1E0DE4A50], "Program terminated with an unrecoverable error.");
    v2 = (sentencepiece *)std::endl[abi:ne180100]<char,std::char_traits<char>>(v1);
    sentencepiece::ShutdownLibrary(v2);
    exit(-1);
  }
  sentencepiece::error::gTestCounter = 2;
}

_QWORD *std::operator<<[abi:ne180100]<std::char_traits<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);
}

_QWORD *std::endl[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_1C21EA344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::util::Status::Status(uint64_t a1, int a2, const void *a3, size_t a4)
{
  uint64_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 __dst;
  unint64_t v16;

  v8 = operator new();
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)v8 = a2;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 >= 0x17)
  {
    v10 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v10 = a4 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = a4;
    v16 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v16) = a4;
  p_dst = &__dst;
  if (a4)
LABEL_8:
    memmove(p_dst, a3, a4);
  *((_BYTE *)p_dst + a4) = 0;
  v12 = *(_QWORD *)a1 + 8;
  if (*(char *)(*(_QWORD *)a1 + 31) < 0)
    operator delete(*(void **)v12);
  v13 = __dst;
  *(_QWORD *)(v12 + 16) = v16;
  *(_OWORD *)v12 = v13;
  return a1;
}

void sub_1C21EA464(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    std::default_delete<sentencepiece::util::Status::Rep>::operator()[abi:ne180100]((uint64_t)v1, v3);
  _Unwind_Resume(exception_object);
}

const char *sentencepiece::util::Status::error_message(sentencepiece::util::Status *this)
{
  uint64_t v1;
  const char *result;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return "";
  result = (const char *)(v1 + 8);
  if (*(char *)(v1 + 31) < 0)
    return *(const char **)result;
  return result;
}

std::string *sentencepiece::util::Status::ToString@<X0>(sentencepiece::util::Status *this@<X0>, std::string *a2@<X8>)
{
  _DWORD *v3;
  unsigned int v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;

  v3 = *(_DWORD **)this;
  if (!*(_QWORD *)this)
    return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "OK");
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v5 = *v3 - 1;
  if (v5 < 0x10)
    MEMORY[0x1C3BB9634](a2, off_1E7BECF90[v5]);
  std::string::append(a2, ": ");
  v6 = *(char *)(*(_QWORD *)this + 31);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)(*(_QWORD *)this + 8);
  else
    v7 = *(const std::string::value_type **)(*(_QWORD *)this + 8);
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(*(_QWORD *)this + 31);
  else
    v8 = *(_QWORD *)(*(_QWORD *)this + 16);
  return std::string::append(a2, v7, v8);
}

void sub_1C21EA558(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::default_delete<sentencepiece::util::Status::Rep>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 31) < 0)
      operator delete(*(void **)(a2 + 8));
    JUMPOUT(0x1C3BB9B44);
  }
}

_QWORD *google::protobuf::internal::ArenaImpl::thread_cache(google::protobuf::internal::ArenaImpl *this)
{
  unsigned __int8 v1;
  pthread_key_t *v3;

  if ((v1 & 1) == 0
  {
    v3 = (pthread_key_t *)operator new();
    pthread_key_create(v3, (void (__cdecl *)(void *))google::protobuf::internal::ThreadLocalStorage<google::protobuf::internal::ArenaImpl::ThreadCache>::Delete);
    google::protobuf::internal::ArenaImpl::thread_cache(void)::thread_cache_ = (uint64_t)v3;
  }
  return google::protobuf::internal::ThreadLocalStorage<google::protobuf::internal::ArenaImpl::ThreadCache>::Get((pthread_key_t *)google::protobuf::internal::ArenaImpl::thread_cache(void)::thread_cache_);
}

void sub_1C21EA63C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x1000C4000313F17);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::internal::ThreadLocalStorage<google::protobuf::internal::ArenaImpl::ThreadCache>::Get(pthread_key_t *a1)
{
  _QWORD *v2;

  v2 = pthread_getspecific(*a1);
  if (!v2)
  {
    v2 = operator new(0x40uLL, (std::align_val_t)0x40uLL);
    *(_OWORD *)v2 = xmmword_1C230ADC0;
    v2[2] = 0;
    pthread_setspecific(*a1, v2);
  }
  return v2;
}

uint64_t google::protobuf::internal::SerialArena::Block::Pointer(google::protobuf::internal::SerialArena::Block *this, unint64_t a2)
{
  std::string *v4;
  char v6;
  std::string v7[2];

  if (*((_QWORD *)this + 2) < a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 111);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: n <= size_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  return (uint64_t)this + a2;
}

void sub_1C21EA754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::internal::SerialArena::New(google::protobuf::internal::SerialArena *this, google::protobuf::internal::SerialArena::Block *a2, void *a3, google::protobuf::internal::ArenaImpl *a4)
{
  unint64_t v7;
  unint64_t v8;
  std::string *v9;
  _QWORD *v10;
  uint64_t v11;
  char v13;
  std::string v14[2];

  v7 = *((_QWORD *)this + 1);
  v8 = v7 + 72;
  if (v7 + 72 > *((_QWORD *)this + 2))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arena.cc", 398);
    v9 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (pos + ArenaImpl::kSerialArenaSize) <= (b->size()): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  v10 = (_QWORD *)google::protobuf::internal::SerialArena::Block::Pointer(this, v7);
  *((_QWORD *)this + 1) = v8;
  *v10 = a3;
  v10[1] = a2;
  v10[2] = this;
  v10[5] = google::protobuf::internal::SerialArena::Block::Pointer(this, v8);
  v11 = google::protobuf::internal::SerialArena::Block::Pointer(this, *((_QWORD *)this + 2));
  v10[3] = 0;
  v10[7] = 0;
  v10[8] = 0;
  v10[6] = v11;
  return v10;
}

void sub_1C21EA858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t google::protobuf::internal::ArenaImpl::SpaceAllocated(google::protobuf::internal::ArenaImpl *this)
{
  return *((_QWORD *)this + 2);
}

void *google::protobuf::internal::ArenaImpl::NewBuffer(google::protobuf::internal::ArenaImpl *this, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  size_t v9;
  void *result;
  unint64_t *v11;
  unint64_t v12;
  char v13;
  std::string v14[2];

  v5 = *((_QWORD *)this + 4);
  if (a2 == -1)
  {
    if (v5)
      v7 = *(_QWORD *)v5;
    else
      v7 = 256;
  }
  else
  {
    if (v5)
      v6 = *(_QWORD *)(v5 + 8);
    else
      v6 = 0x2000;
    if (v6 >= 2 * a2)
      v7 = 2 * a2;
    else
      v7 = v6;
  }
  if (a3 >= 0xFFFFFFFFFFFFFFE8)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arena.cc", 245);
    v8 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (min_bytes) <= (std::numeric_limits<size_t>::max() - kBlockHeaderSize): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v8->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
    v5 = *((_QWORD *)this + 4);
  }
  if (v7 <= a3 + 24)
    v9 = a3 + 24;
  else
    v9 = v7;
  if (v5)
    result = (void *)(*(uint64_t (**)(size_t))(v5 + 16))(v9);
  else
    result = operator new(v9);
  v11 = (unint64_t *)((char *)this + 16);
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + v9, v11));
  return result;
}

void sub_1C21EA9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal::SerialArena::Block *google::protobuf::internal::SerialArena::NewBlock(google::protobuf::internal::SerialArena *this, google::protobuf::internal::SerialArena::Block *a2, google::protobuf::internal::ArenaImpl *a3, google::protobuf::internal::ArenaImpl *a4)
{
  uint64_t v7;
  google::protobuf::internal::SerialArena::Block *v8;
  uint64_t v9;

  if (this)
    v7 = *((_QWORD *)this + 2);
  else
    v7 = -1;
  v8 = (google::protobuf::internal::SerialArena::Block *)google::protobuf::internal::ArenaImpl::NewBuffer(a3, v7, (unint64_t)a2);
  return google::protobuf::internal::SerialArena::Block::Block(v8, v9, (unint64_t)this, 0, 0);
}

_QWORD *google::protobuf::internal::SerialArena::AddCleanupFallback(google::protobuf::internal::SerialArena *this, void *a2, void (*a3)(void *), google::protobuf::internal::ArenaImpl *a4)
{
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;

  result = (_QWORD *)*((_QWORD *)this + 3);
  do
  {
    if (result)
    {
      if ((unint64_t)(2 * *result) >= 0x40)
        v8 = 64;
      else
        v8 = 2 * *result;
    }
    else
    {
      v8 = 8;
    }
    result = (_QWORD *)google::protobuf::internal::SerialArena::AllocateAligned(this, (google::protobuf::internal::SerialArena::Block *)((16 * (_WORD)v8 + 23) & 0xFF0), (uint64_t)a3, a4);
    v9 = *((_QWORD *)this + 3);
    *result = v8;
    result[1] = v9;
    *((_QWORD *)this + 3) = result;
    *((_QWORD *)this + 7) = result + 2;
    *((_QWORD *)this + 8) = &result[2 * v8 + 2];
  }
  while (!(16 * v8));
  result[2] = a2;
  result[3] = a3;
  *((_QWORD *)this + 7) = result + 4;
  return result;
}

unint64_t google::protobuf::internal::SerialArena::AllocateAligned(google::protobuf::internal::SerialArena *this, google::protobuf::internal::SerialArena::Block *a2, uint64_t a3, google::protobuf::internal::ArenaImpl *a4)
{
  std::string *v6;
  unint64_t result;
  unint64_t v8;
  std::string *v9;
  char v10;
  std::string v11[2];

  if ((google::protobuf::internal::SerialArena::Block *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFF8) != a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 159);
    v6 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (internal::AlignUpTo8(n)) == (n): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  result = *((_QWORD *)this + 5);
  v8 = *((_QWORD *)this + 6);
  if (v8 < result)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 160);
    v9 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (limit_) >= (ptr_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    result = *((_QWORD *)this + 5);
    v8 = *((_QWORD *)this + 6);
  }
  if (v8 - result < (unint64_t)a2)
    return google::protobuf::internal::SerialArena::AllocateAlignedFallback(this, a2, a3, a4);
  *((_QWORD *)this + 5) = (char *)a2 + result;
  return result;
}

void sub_1C21EAB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(google::protobuf::internal::ArenaImpl *this, google::protobuf::internal::SerialArena::Block *a2, void (*a3)(void *))
{
  google::protobuf::internal::ArenaImpl *v6;
  google::protobuf::internal::ArenaImpl *v7;
  google::protobuf::internal::SerialArena *v8;
  _QWORD *v10;

  v6 = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  if (*((_QWORD *)v6 + 1) == *((_QWORD *)this + 3))
  {
    v8 = (google::protobuf::internal::SerialArena *)*((_QWORD *)v6 + 2);
    return google::protobuf::internal::SerialArena::AllocateAlignedAndAddCleanup(v8, a2, a3, v7);
  }
  v10 = google::protobuf::internal::ArenaImpl::thread_cache(v6);
  v8 = (google::protobuf::internal::SerialArena *)atomic_load((unint64_t *)this + 1);
  if (v8 && *((_QWORD **)v8 + 1) == v10)
    return google::protobuf::internal::SerialArena::AllocateAlignedAndAddCleanup(v8, a2, a3, v7);
  return google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanupFallback(this, a2, a3);
}

void *google::protobuf::internal::SerialArena::AllocateAlignedAndAddCleanup(google::protobuf::internal::SerialArena *this, google::protobuf::internal::SerialArena::Block *a2, void (*a3)(void *), google::protobuf::internal::ArenaImpl *a4)
{
  void *Aligned;
  google::protobuf::internal::ArenaImpl *v7;
  void *v8;
  _QWORD *v9;

  Aligned = (void *)google::protobuf::internal::SerialArena::AllocateAligned(this, a2, (uint64_t)a3, a4);
  v8 = Aligned;
  v9 = (_QWORD *)*((_QWORD *)this + 7);
  if (v9 == *((_QWORD **)this + 8))
  {
    google::protobuf::internal::SerialArena::AddCleanupFallback(this, Aligned, a3, v7);
  }
  else
  {
    *v9 = Aligned;
    v9[1] = a3;
    *((_QWORD *)this + 7) = v9 + 2;
  }
  return v8;
}

void *google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanupFallback(google::protobuf::internal::ArenaImpl *this, google::protobuf::internal::SerialArena::Block *a2, void (*a3)(void *))
{
  google::protobuf::internal::SerialArena::Block *v6;
  google::protobuf::internal::ArenaImpl *SerialArenaFallback;
  google::protobuf::internal::ArenaImpl *v8;

  v6 = (google::protobuf::internal::SerialArena::Block *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  SerialArenaFallback = google::protobuf::internal::ArenaImpl::GetSerialArenaFallback(this, v6);
  return google::protobuf::internal::SerialArena::AllocateAlignedAndAddCleanup(SerialArenaFallback, a2, a3, v8);
}

unint64_t google::protobuf::internal::ArenaImpl::AllocateAlignedFallback(google::protobuf::internal::ArenaImpl *this, google::protobuf::internal::SerialArena::Block *a2)
{
  google::protobuf::internal::SerialArena::Block *v4;
  google::protobuf::internal::ArenaImpl *SerialArenaFallback;
  uint64_t v6;
  google::protobuf::internal::ArenaImpl *v7;

  v4 = (google::protobuf::internal::SerialArena::Block *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  SerialArenaFallback = google::protobuf::internal::ArenaImpl::GetSerialArenaFallback(this, v4);
  return google::protobuf::internal::SerialArena::AllocateAligned(SerialArenaFallback, a2, v6, v7);
}

google::protobuf::internal::ArenaImpl *google::protobuf::internal::ArenaImpl::GetSerialArenaFallback(google::protobuf::internal::ArenaImpl *this, google::protobuf::internal::SerialArena::Block *a2)
{
  unint64_t *v3;
  google::protobuf::internal::ArenaImpl *v4;
  google::protobuf::internal::SerialArena *v5;
  uint64_t v6;
  google::protobuf::internal::ArenaImpl *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  google::protobuf::internal::ArenaImpl *v12;
  unint64_t v13;

  v3 = (unint64_t *)this;
  v4 = (google::protobuf::internal::ArenaImpl *)atomic_load((unint64_t *)this);
  if (!v4)
  {
LABEL_4:
    v5 = (google::protobuf::internal::SerialArena *)google::protobuf::internal::ArenaImpl::NewBuffer(this, -1, 0x48uLL);
    *(_OWORD *)v5 = xmmword_1C230ADD0;
    *((_QWORD *)v5 + 2) = v6;
    this = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::SerialArena::New(v5, a2, v3, v7);
    v4 = this;
    v8 = *v3;
    *((_QWORD *)this + 4) = *v3;
    v9 = __ldxr(v3);
    if (v9 == v8)
    {
      if (__stlxr((unint64_t)this, v3))
        goto LABEL_8;
      goto LABEL_14;
    }
    __clrex();
LABEL_8:
    while (1)
    {
      *((_QWORD *)this + 4) = v9;
      v10 = __ldxr(v3);
      if (v10 != v9)
        break;
      if (__stlxr((unint64_t)this, v3))
        goto LABEL_12;
      v11 = 1;
LABEL_13:
      v9 = v10;
      if ((v11 & 1) != 0)
        goto LABEL_14;
    }
    __clrex();
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
  while (*((google::protobuf::internal::SerialArena::Block **)v4 + 1) != a2)
  {
    v4 = (google::protobuf::internal::ArenaImpl *)*((_QWORD *)v4 + 4);
    if (!v4)
      goto LABEL_4;
  }
LABEL_14:
  v12 = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  *((_QWORD *)v12 + 2) = v4;
  v13 = v3[3];
  google::protobuf::internal::ArenaImpl::thread_cache(v12)[1] = v13;
  atomic_store((unint64_t)v4, v3 + 1);
  return v4;
}

uint64_t google::protobuf::internal::SerialArena::AllocateAlignedFallback(google::protobuf::internal::SerialArena *this, google::protobuf::internal::SerialArena::Block *a2, uint64_t a3, google::protobuf::internal::ArenaImpl *a4)
{
  google::protobuf::internal::SerialArena *v6;
  unint64_t *v7;

  v6 = (google::protobuf::internal::SerialArena *)*((_QWORD *)this + 2);
  *((_QWORD *)v6 + 1) = *((_QWORD *)v6 + 2) - *((_QWORD *)this + 6) + *((_QWORD *)this + 5);
  v7 = (unint64_t *)google::protobuf::internal::SerialArena::NewBlock(v6, a2, *(google::protobuf::internal::ArenaImpl **)this, a4);
  *((_QWORD *)this + 2) = v7;
  *((_QWORD *)this + 5) = google::protobuf::internal::SerialArena::Block::Pointer((google::protobuf::internal::SerialArena::Block *)v7, v7[1]);
  *((_QWORD *)this + 6) = google::protobuf::internal::SerialArena::Block::Pointer(*((google::protobuf::internal::SerialArena::Block **)this + 2), *(_QWORD *)(*((_QWORD *)this + 2) + 16));
  return google::protobuf::internal::SerialArena::AllocateAligned(this, (unint64_t)a2);
}

unint64_t google::protobuf::internal::ArenaImpl::AllocateAligned(google::protobuf::internal::ArenaImpl *this, google::protobuf::internal::SerialArena::Block *a2)
{
  google::protobuf::internal::ArenaImpl *v4;
  uint64_t v5;
  google::protobuf::internal::ArenaImpl *v6;
  google::protobuf::internal::SerialArena *v7;
  _QWORD *v9;

  v4 = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  if (*((_QWORD *)v4 + 1) == *((_QWORD *)this + 3))
  {
    v7 = (google::protobuf::internal::SerialArena *)*((_QWORD *)v4 + 2);
    return google::protobuf::internal::SerialArena::AllocateAligned(v7, a2, v5, v6);
  }
  v9 = google::protobuf::internal::ArenaImpl::thread_cache(v4);
  v7 = (google::protobuf::internal::SerialArena *)atomic_load((unint64_t *)this + 1);
  if (v7 && *((_QWORD **)v7 + 1) == v9)
    return google::protobuf::internal::SerialArena::AllocateAligned(v7, a2, v5, v6);
  return google::protobuf::internal::ArenaImpl::AllocateAlignedFallback(this, a2);
}

google::protobuf::internal::SerialArena::Block *google::protobuf::internal::SerialArena::Block::Block(google::protobuf::internal::SerialArena::Block *this, uint64_t a2, unint64_t a3, unsigned int a4, int a5)
{
  uint64_t v6;
  std::string *v7;
  char v9;
  std::string v10[2];

  v6 = 2;
  if (!a5)
    v6 = 0;
  *(_QWORD *)this = v6 | a4 | a3;
  *((_QWORD *)this + 1) = 24;
  *((_QWORD *)this + 2) = a2;
  if ((a3 & 3) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 107);
    v7 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (reinterpret_cast<uintptr_t>(next) & 3) == (0u): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1C21EAF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ThreadLocalStorage<google::protobuf::internal::ArenaImpl::ThreadCache>::Delete(uint64_t result)
{
  if (result)
    JUMPOUT(0x1C3BB9B38);
  return result;
}

google::protobuf::internal::LazyString *google::protobuf::internal::LazyString::Init(google::protobuf::internal::LazyString *this)
{
  unsigned __int8 v2;
  google::protobuf::internal::LazyString *v3;

  {
    __cxa_atexit((void (*)(void *))google::protobuf::internal::WrappedMutex::~WrappedMutex, &google::protobuf::internal::LazyString::Init(void)const::mu, &dword_1C2196000);
  }
  std::mutex::lock(&google::protobuf::internal::LazyString::Init(void)const::mu);
  v3 = (google::protobuf::internal::LazyString *)atomic_load((unint64_t *)this + 3);
  if (!v3)
  {
    std::string::basic_string[abi:ne180100](this, *(void **)this, *((_QWORD *)this + 1));
    atomic_store((unint64_t)this, (unint64_t *)this + 3);
    v3 = this;
  }
  std::mutex::unlock(&google::protobuf::internal::LazyString::Init(void)const::mu);
  return v3;
}

void google::protobuf::internal::ArenaStringPtr::Set(google::protobuf::internal::ArenaStringPtr *this, uint64_t a2, __int128 *a3, google::protobuf::internal::ArenaImpl *a4)
{
  std::string *AlignedAndAddCleanup;
  std::string *v8;
  __int128 v9;

  if (*(_QWORD *)this != a2)
  {
    google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(this);
    JUMPOUT(0x1C3BB9640);
  }
  if (!a4)
  {
    AlignedAndAddCleanup = (std::string *)operator new();
    v8 = AlignedAndAddCleanup;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)&AlignedAndAddCleanup->__r_.__value_.__l.__data_ = *a3;
      AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
      goto LABEL_11;
    }
LABEL_10:
    std::string::__init_copy_ctor_external(AlignedAndAddCleanup, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
    goto LABEL_11;
  }
  if ((*((_BYTE *)a4 + 24) & 1) != 0)
  AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(a4, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  v8 = AlignedAndAddCleanup;
  if (*((char *)a3 + 23) < 0)
    goto LABEL_10;
  v9 = *a3;
  AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)&AlignedAndAddCleanup->__r_.__value_.__l.__data_ = v9;
LABEL_11:
  *(_QWORD *)this = v8;
}

void sub_1C21EB180(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ArenaStringPtr::Set(google::protobuf::internal::ArenaStringPtr *a1, __int128 *a2, google::protobuf::internal::ArenaImpl *a3)
{
  google::protobuf::internal::ArenaStringPtr::Set(a1, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, a2, a3);
}

{
  google::protobuf::internal::ArenaStringPtr::Set(a1, 0, a2, a3);
}

uint64_t *google::protobuf::internal::ArenaStringPtr::Mutable(uint64_t **a1, google::protobuf::internal::ArenaImpl *a2)
{
  if (*a1 == &google::protobuf::internal::fixed_address_empty_string)
    return google::protobuf::internal::ArenaStringPtr::MutableSlow<>(a1, a2);
  else
    return (uint64_t *)google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((google::protobuf::internal::ArenaStringPtr *)a1);
}

uint64_t *google::protobuf::internal::ArenaStringPtr::MutableSlow<>(uint64_t **a1, google::protobuf::internal::ArenaImpl *this)
{
  std::string *v4;
  uint64_t *result;
  char v6;
  std::string v7[2];

  if (*a1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arenastring.cc", 147);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: IsDefault(default_value): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  if (this)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
    result = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  }
  else
  {
    result = (uint64_t *)operator new();
  }
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  *a1 = result;
  return result;
}

void sub_1C21EB2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::ArenaStringPtr::Mutable(google::protobuf::internal::ArenaStringPtr *this, const google::protobuf::internal::LazyString *a2, google::protobuf::Arena *a3)
{
  if (*(_QWORD *)this)
    return (std::string *)google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(this);
  else
    return google::protobuf::internal::ArenaStringPtr::MutableSlow<google::protobuf::internal::LazyString>((std::string **)this, a3, a2);
}

std::string *google::protobuf::internal::ArenaStringPtr::MutableSlow<google::protobuf::internal::LazyString>(std::string **a1, google::protobuf::internal::ArenaImpl *this, google::protobuf::internal::LazyString *a3)
{
  std::string *v6;
  google::protobuf::internal::LazyString *v7;
  std::string *AlignedAndAddCleanup;
  std::string *v9;
  __int128 v10;
  char v12;
  std::string v13[2];

  if (*a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arenastring.cc", 147);
    v6 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: IsDefault(default_value): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  v7 = (google::protobuf::internal::LazyString *)atomic_load((unint64_t *)a3 + 3);
  if (v7)
  {
    if (this)
      goto LABEL_5;
  }
  else
  {
    v7 = google::protobuf::internal::LazyString::Init(a3);
    if (this)
    {
LABEL_5:
      if ((*((_BYTE *)this + 24) & 1) != 0)
      AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
      v9 = AlignedAndAddCleanup;
      if (*((char *)v7 + 23) < 0)
        goto LABEL_8;
LABEL_11:
      v10 = *(_OWORD *)v7;
      v9->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
      goto LABEL_12;
    }
  }
  AlignedAndAddCleanup = (std::string *)operator new();
  v9 = AlignedAndAddCleanup;
  if ((*((char *)v7 + 23) & 0x80000000) == 0)
    goto LABEL_11;
LABEL_8:
  std::string::__init_copy_ctor_external(AlignedAndAddCleanup, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
LABEL_12:
  *a1 = v9;
  return v9;
}

void sub_1C21EB43C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::ArenaStringPtr::ClearToDefault(std::string *result, unint64_t *a2)
{
  std::string *v3;
  google::protobuf::internal::LazyString *v4;

  if (result->__r_.__value_.__r.__words[0])
  {
    v3 = (std::string *)google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((google::protobuf::internal::ArenaStringPtr *)result);
    v4 = (google::protobuf::internal::LazyString *)atomic_load(a2 + 3);
    if (!v4)
      v4 = google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)a2);
    return std::string::operator=(v3, (const std::string *)v4);
  }
  return result;
}

unint64_t google::protobuf::io::EpsCopyOutputStream::Flush(google::protobuf::io::EpsCopyOutputStream *this, char *a2)
{
  void *v4;
  unint64_t v5;
  int v6;
  std::string *v7;
  std::string *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  char v14;
  std::string v15[2];

  while (1)
  {
    v5 = *(_QWORD *)this;
    v4 = (void *)*((_QWORD *)this + 1);
    if (!v4)
    {
      v10 = v5 - (_QWORD)a2;
      v9 = v10 + 16;
      *((_QWORD *)this + 1) = a2;
      if ((((_DWORD)v10 + 16) & 0x80000000) == 0)
        return v9;
      goto LABEL_12;
    }
    v6 = (_DWORD)a2 - v5;
    if ((unint64_t)a2 <= v5)
      break;
    if (*((_BYTE *)this + 56))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 685);
      v7 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: !had_error_: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    }
    if (v6 >= 17)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 686);
      v8 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: overrun <= kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    }
    a2 = &google::protobuf::io::EpsCopyOutputStream::Next(this)[v6];
    if (*((_BYTE *)this + 56))
      return 0;
  }
  memcpy(v4, (char *)this + 16, a2 - ((char *)this + 16));
  v11 = *(_QWORD *)this;
  *((_QWORD *)this + 1) += a2 - ((char *)this + 16);
  v9 = v11 - (_QWORD)a2;
  if ((((_DWORD)v11 - (_DWORD)a2) & 0x80000000) == 0)
    return v9;
LABEL_12:
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 700);
  v12 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: s >= 0: ");
  google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  return v9;
}

void sub_1C21EB638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::io::EpsCopyOutputStream::Next(google::protobuf::io::EpsCopyOutputStream *this)
{
  std::string *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  std::string *v9;
  std::string::size_type v10;
  char v11;
  int v12;
  std::string v13[2];

  if (*((_BYTE *)this + 56))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 788);
    v2 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !had_error_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v2->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  if (*((_QWORD *)this + 6))
  {
    v3 = (char *)this + 16;
    v5 = *(char **)this;
    v4 = (void *)*((_QWORD *)this + 1);
    if (v4)
    {
      memcpy(v4, (char *)this + 16, v5 - v3);
      v12 = 0;
      do
      {
        v13[0].__r_.__value_.__r.__words[0] = 0;
        if (((*(uint64_t (**)(_QWORD, std::string *, int *))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), v13, &v12) & 1) == 0)
        {
          *((_BYTE *)this + 56) = 1;
          goto LABEL_14;
        }
        v6 = v12;
      }
      while (!v12);
      v5 = (char *)v13[0].__r_.__value_.__r.__words[0];
      if (v12 >= 17)
      {
        *(_OWORD *)v13[0].__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)this;
        *(_QWORD *)this = &v5[v6 - 16];
        *((_QWORD *)this + 1) = 0;
        return v5;
      }
      if (v12 <= 0)
      {
        v10 = v13[0].__r_.__value_.__r.__words[0];
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 810);
        v9 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: size > 0: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v9->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
        LODWORD(v6) = v12;
        v5 = (char *)v10;
      }
      *(_OWORD *)v3 = *(_OWORD *)*(_QWORD *)this;
      v7 = &v3[(int)v6];
    }
    else
    {
      *(_OWORD *)v3 = *(_OWORD *)v5;
      v7 = (char *)this + 32;
    }
    *(_QWORD *)this = v7;
    *((_QWORD *)this + 1) = v5;
  }
  else
  {
    *((_BYTE *)this + 56) = 1;
    v3 = (char *)this + 16;
LABEL_14:
    *(_QWORD *)this = (char *)this + 32;
  }
  return v3;
}

void sub_1C21EB7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::io::EpsCopyOutputStream::Trim(google::protobuf::io::EpsCopyOutputStream *this, char *a2)
{
  unint64_t v3;

  if (!*((_BYTE *)this + 56))
  {
    v3 = google::protobuf::io::EpsCopyOutputStream::Flush(this, a2);
    if ((_DWORD)v3)
      (*(void (**)(_QWORD, unint64_t))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), v3);
    a2 = (char *)this + 16;
    *(_QWORD *)this = (char *)this + 16;
    *((_QWORD *)this + 1) = (char *)this + 16;
  }
  return a2;
}

char *google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(google::protobuf::io::EpsCopyOutputStream *this, char *a2)
{
  char *v3;
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  while (!*((_BYTE *)this + 56))
  {
    v3 = &a2[-*(_QWORD *)this];
    if ((v3 & 0x80000000) != 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 829);
      v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: overrun >= 0: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
      goto LABEL_6;
    }
    if (v3 > 0x10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 830);
      v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: overrun <= kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
LABEL_6:
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
    }
    a2 = &google::protobuf::io::EpsCopyOutputStream::Next(this)[(int)v3];
    if ((unint64_t)a2 < *(_QWORD *)this)
      return a2;
  }
  return (char *)this + 16;
}

void sub_1C21EB938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(google::protobuf::io::EpsCopyOutputStream *this, char *a2, int a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  int i;

  v4 = a4;
  for (i = google::protobuf::io::EpsCopyOutputStream::GetSize(this, a4);
        a3 > i;
        i = google::protobuf::io::EpsCopyOutputStream::GetSize(this, v4))
  {
    memcpy(v4, a2, i);
    a3 -= i;
    a2 += i;
    v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, (char *)&v4[i]);
  }
  memcpy(v4, a2, a3);
  return &v4[a3];
}

uint64_t google::protobuf::io::EpsCopyOutputStream::GetSize(google::protobuf::io::EpsCopyOutputStream *this, unsigned __int8 *a2)
{
  uint64_t v3;
  std::string *v5;
  char v7;
  std::string v8[2];

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this + 16 < (unint64_t)a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 838);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: ptr <= end_ + kSlopBytes: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
    v3 = *(_QWORD *)this;
  }
  return v3 - (_QWORD)a2 + 16;
}

void sub_1C21EBA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteAliasedRaw(google::protobuf::io::EpsCopyOutputStream *this, void *a2, uint64_t a3, char *a4)
{
  char *v8;

  if (google::protobuf::io::EpsCopyOutputStream::GetSize(this, (unsigned __int8 *)a4) <= (int)a3)
  {
    v8 = google::protobuf::io::EpsCopyOutputStream::Trim(this, a4);
    if (((*(uint64_t (**)(_QWORD, void *, uint64_t))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), a2, a3) & 1) == 0)
    {
      *((_BYTE *)this + 56) = 1;
      v8 = (char *)this + 16;
      *(_QWORD *)this = (char *)this + 32;
    }
    return (unsigned __int8 *)v8;
  }
  if (*(_QWORD *)this - (_QWORD)a4 >= (int)a3)
  {
    memcpy(a4, a2, (int)a3);
    return (unsigned __int8 *)&a4[(int)a3];
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(this, (char *)a2, a3, (unsigned __int8 *)a4);
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(google::protobuf::io::EpsCopyOutputStream *this, int a2, void **a3, char *a4)
{
  char *v4;
  unint64_t v8;
  uint64_t v9;
  std::string *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  void *v18;
  unsigned int v20;
  unsigned int v21;
  char v22;
  std::string v23[2];

  v4 = a4;
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this <= (unint64_t)a4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, a4);
    v8 = *(_QWORD *)this;
  }
  if (*((char *)a3 + 23) >= 0)
    v9 = *((unsigned __int8 *)a3 + 23);
  else
    v9 = *((unsigned int *)a3 + 2);
  if (v8 <= (unint64_t)v4)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 858);
    v10 = google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: ptr < end_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v22, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v23[0].__r_.__value_.__l.__data_);
  }
  v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    *v4 = (8 * a2) | 0x82;
    v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      v12 = v4 + 2;
      do
      {
        *(v12 - 1) = v13 | 0x80;
        v14 = v13 >> 7;
        ++v12;
        v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - 1) = v14;
    }
    else
    {
      v4[1] = v13;
      v12 = v4 + 2;
    }
  }
  else
  {
    *v4 = v11;
    v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      v16 = v20 >> 7;
      v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v16) = v9;
  }
  *v12 = v16;
  v17 = v12 + 1;
  if (*((char *)a3 + 23) >= 0)
    v18 = a3;
  else
    v18 = *a3;
  return google::protobuf::io::EpsCopyOutputStream::WriteRawMaybeAliased(this, v18, v9, v17);
}

void sub_1C21EBCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteRawMaybeAliased(google::protobuf::io::EpsCopyOutputStream *this, void *a2, uint64_t a3, char *a4)
{
  uint64_t v6;

  if (*((_BYTE *)this + 57))
    return google::protobuf::io::EpsCopyOutputStream::WriteAliasedRaw(this, a2, a3, a4);
  if (*(_QWORD *)this - (_QWORD)a4 < (int)a3)
    return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(this, (char *)a2, a3, (unsigned __int8 *)a4);
  v6 = (int)a3;
  memcpy(a4, a2, (int)a3);
  return (unsigned __int8 *)&a4[v6];
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(google::protobuf::io::EpsCopyOutputStream *this, int a2, uint64_t a3, char *a4)
{
  char *v4;
  unint64_t v8;
  uint64_t v9;
  std::string *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 *v17;
  char *v18;
  unsigned int v20;
  unsigned int v21;
  char v22;
  std::string v23[2];

  v4 = a4;
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this <= (unint64_t)a4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, a4);
    v8 = *(_QWORD *)this;
  }
  if (*(char *)(a3 + 23) >= 0)
    LODWORD(v9) = *(unsigned __int8 *)(a3 + 23);
  else
    v9 = *(_QWORD *)(a3 + 8);
  if (v8 <= (unint64_t)v4)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 858);
    v10 = google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: ptr < end_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v22, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v23[0].__r_.__value_.__l.__data_);
  }
  v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    *v4 = (8 * a2) | 0x82;
    v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      v12 = v4 + 2;
      do
      {
        *(v12 - 1) = v13 | 0x80;
        v14 = v13 >> 7;
        ++v12;
        v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - 1) = v14;
    }
    else
    {
      v4[1] = v13;
      v12 = v4 + 2;
    }
  }
  else
  {
    *v4 = v11;
    v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      v16 = v20 >> 7;
      v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v16) = v9;
  }
  *v12 = v16;
  v17 = v12 + 1;
  if (*(char *)(a3 + 23) >= 0)
    v18 = (char *)a3;
  else
    v18 = *(char **)a3;
  if (*(_QWORD *)this - (_QWORD)v17 < (int)v9)
    return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(this, v18, v9, v17);
  memcpy(v17, v18, (int)v9);
  return &v17[(int)v9];
}

void sub_1C21EBEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::VerifyVersion(google::protobuf::internal *this, google::protobuf::internal *a2, const std::string::value_type *a3, const char *a4)
{
  const std::string::value_type *v7;
  std::string::size_type v8;
  const std::string::value_type *p_p;
  std::string::size_type v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  void *__p;
  std::string::size_type v16;
  unsigned __int8 v17;
  void *v18;
  std::string::size_type v19;
  unsigned __int8 v20;
  const char *v21;
  const char *v22;
  int v23;
  std::string v24;
  char __str[127];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if ((int)a2 > 3014000)
  {
    LODWORD(v21) = 3;
    v22 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/common.cc";
    v23 = 76;
    memset(&v24, 0, sizeof(v24));
    std::string::append(&v24, "This program requires version ");
    google::protobuf::internal::VersionString(a2, &v18);
    if ((v20 & 0x80u) == 0)
      v7 = (const std::string::value_type *)&v18;
    else
      v7 = (const std::string::value_type *)v18;
    if ((v20 & 0x80u) == 0)
      v8 = v20;
    else
      v8 = v19;
    std::string::append(&v24, v7, v8);
    std::string::append(&v24, " of the Protocol Buffer runtime library, but the installed version is ");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 14, 0);
    v26 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, __str);
    if ((v17 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v17 & 0x80u) == 0)
      v10 = v17;
    else
      v10 = v16;
    std::string::append(&v24, p_p, v10);
    std::string::append(&v24, ".  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v24, a3);
    std::string::append(&v24, "\".)");
    google::protobuf::internal::LogMessage::Finish(&v21);
    if ((char)v17 < 0)
      operator delete(__p);
    if ((char)v20 < 0)
      operator delete(v18);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  if ((int)this < 3014000)
  {
    LODWORD(v21) = 3;
    v22 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/common.cc";
    v23 = 87;
    memset(&v24, 0, sizeof(v24));
    std::string::append(&v24, "This program was compiled against version ");
    google::protobuf::internal::VersionString(this, &v18);
    if ((v20 & 0x80u) == 0)
      v11 = (const std::string::value_type *)&v18;
    else
      v11 = (const std::string::value_type *)v18;
    if ((v20 & 0x80u) == 0)
      v12 = v20;
    else
      v12 = v19;
    std::string::append(&v24, v11, v12);
    std::string::append(&v24, " of the Protocol Buffer runtime library, which is not compatible with the installed version (");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 14, 0);
    v26 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, __str);
    if ((v17 & 0x80u) == 0)
      v13 = (const std::string::value_type *)&__p;
    else
      v13 = (const std::string::value_type *)__p;
    if ((v17 & 0x80u) == 0)
      v14 = v17;
    else
      v14 = v16;
    std::string::append(&v24, v13, v14);
    std::string::append(&v24, ").  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v24, a3);
    std::string::append(&v24, "\".)");
    google::protobuf::internal::LogMessage::Finish(&v21);
    if ((char)v17 < 0)
      operator delete(__p);
    if ((char)v20 < 0)
      operator delete(v18);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_1C21EC1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::internal::LogMessage::LogMessage(uint64_t result, int a2, uint64_t a3, int a4)
{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

std::string *google::protobuf::internal::LogMessage::operator<<(std::string *a1, const std::string::value_type *a2)
{
  std::string::append(a1 + 1, a2);
  return a1;
}

{
  std::string *v3;
  std::string::size_type v4;
  std::string::size_type v5;

  v3 = a1 + 1;
  v4 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    v5 = v4;
  }
  std::string::append(v3, a2, v5);
  return a1;
}

_QWORD *google::protobuf::internal::VersionString@<X0>(google::protobuf::internal *this@<X0>, _QWORD *a2@<X8>)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x80uLL, "%d.%d.%d", (int)this / 1000000, (int)this / 1000 % 1000, (int)this % 1000);
  __str[127] = 0;
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

const char **google::protobuf::internal::LogFinisher::operator=(int a1, const char **this)
{
  return google::protobuf::internal::LogMessage::Finish(this);
}

void google::protobuf::internal::LogMessage::~LogMessage(void **this)
{
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

uint64_t google::protobuf::internal::DefaultLogHandler(uint64_t result, const char *a2, int a3, uint64_t a4)
{
  FILE **v4;
  const char *v5;

  if ((result & 0x80000000) == 0)
  {
    v4 = (FILE **)MEMORY[0x1E0C80C10];
    if (*(char *)(a4 + 23) >= 0)
      v5 = (const char *)a4;
    else
      v5 = *(const char **)a4;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "[libprotobuf %s %s:%d] %s\n", google::protobuf::internal::DefaultLogHandler(google::protobuf::LogLevel,char const*,int,std::string const&)::level_names[result], a2, a3, v5);
    return fflush(*v4);
  }
  return result;
}

std::string *google::protobuf::internal::LogMessage::operator<<(std::string *a1, int a2)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x80uLL, "%d", a2);
  __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

std::string *google::protobuf::internal::LogMessage::operator<<(std::string *a1, uint64_t a2)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x80uLL, "%lu", a2);
  __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

const char **google::protobuf::internal::LogMessage::Finish(const char **this)
{
  const char **v1;
  uint64_t v2;
  int v3;
  void *exception;

  v1 = this;
  if (*(_DWORD *)this == 3)
  {
    v2 = 3;
  }
  else
  {
    v3 = atomic_load((unsigned int *)&google::protobuf::internal::log_silencer_count_);
    if (v3 > 0)
      goto LABEL_6;
    v2 = *(unsigned int *)this;
  }
  this = (const char **)google::protobuf::internal::log_handler_(v2, v1[1], *((_DWORD *)v1 + 4), (uint64_t)(v1 + 3));
LABEL_6:
  if (*(_DWORD *)v1 == 3)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException(exception, v1[1], *((unsigned int *)v1 + 4), v1 + 3);
  }
  return this;
}

void sub_1C21EC5F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void google::protobuf::FatalException::~FatalException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1E7BEC4F8;
  if (SHIBYTE(this[5].__vftable) < 0)
    operator delete(this[3].__vftable);
  std::exception::~exception(this);
}

{
  google::protobuf::FatalException::~FatalException(this);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t google::protobuf::FatalException::what(google::protobuf::FatalException *this)
{
  uint64_t result;

  result = (uint64_t)this + 24;
  if (*((char *)this + 47) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t google::protobuf::FatalException::FatalException(uint64_t a1, uint64_t a2, int a3, __int128 *a4)
{
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = &off_1E7BEC4F8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  v5 = (std::string *)(a1 + 24);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v6 = *a4;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_1C21EC6E0(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::GeneratedExtensionFinder::Find(uint64_t a1, int a2, _OWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  __int128 v14;

  {
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 8);
      v5 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
      v6 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ (v5 >> 47) ^ v5);
      v7 = (0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47))) ^ a2;
      v8 = (uint8x8_t)vcnt_s8(v3);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        v9 = v7;
        if (v7 >= *(_QWORD *)&v3)
          v9 = v7 % *(_QWORD *)&v3;
      }
      else
      {
        v9 = (*(_QWORD *)&v3 - 1) & v7;
      }
      if (v10)
      {
        for (i = *v10; i; i = (uint64_t *)*i)
        {
          v12 = i[1];
          if (v7 == v12)
          {
            if (i[2] == v4 && *((_DWORD *)i + 6) == a2)
            {
              v14 = *((_OWORD *)i + 3);
              *a3 = *((_OWORD *)i + 2);
              a3[1] = v14;
              return 1;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= *(_QWORD *)&v3)
                v12 %= *(_QWORD *)&v3;
            }
            else
            {
              v12 &= *(_QWORD *)&v3 - 1;
            }
            if (v12 != v9)
              return 0;
          }
        }
      }
    }
  }
  return 0;
}

void google::protobuf::internal::ExtensionSet::Extension::Clear(google::protobuf::internal::ExtensionSet::Extension *this)
{
  uint64_t v2;
  std::string *v3;
  uint64_t v4;
  std::string *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char v10;
  std::string v11[2];

  if (*((_BYTE *)this + 9))
  {
    v2 = *((unsigned __int8 *)this + 8);
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v3 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v3->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    }
    switch(v2)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
        **(_DWORD **)this = 0;
        break;
      case 9:
      case 12:
        google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(*(_QWORD *)this);
        break;
      case 10:
      case 11:
        google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(*(_QWORD *)this);
        break;
      default:
        return;
    }
  }
  else if ((*((_BYTE *)this + 10) & 1) == 0)
  {
    v4 = *((unsigned __int8 *)this + 8);
    if ((v4 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v5 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    }
    v6 = google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v4];
    if (v6 == 10)
    {
      v8 = **(_QWORD **)this;
      if ((*((_BYTE *)this + 10) & 0x10) != 0)
        v9 = *(void (**)(void))(v8 + 112);
      else
        v9 = *(void (**)(void))(v8 + 40);
      v9();
    }
    else if (v6 == 9)
    {
      v7 = *(_QWORD *)this;
      if (*(char *)(*(_QWORD *)this + 23) < 0)
      {
        **(_BYTE **)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v7 = 0;
        *(_BYTE *)(v7 + 23) = 0;
      }
    }
    *((_BYTE *)this + 10) = *((_BYTE *)this + 10) & 0xF0 | 1;
  }
}

void sub_1C21EC99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::SetInt32(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, int a4, uint64_t *a5)
{
  uint64_t **v8;
  uint64_t **v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  v8 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v9 = v8;
  v8[2] = a5;
  if (v10)
  {
    *((_BYTE *)v8 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 1)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v12 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT32): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v9 + 9) = 0;
  }
  else
  {
    if (*((_BYTE *)v8 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = *((unsigned __int8 *)v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v14] != 1)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v16 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT32): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
  }
  *((_BYTE *)v9 + 10) &= 0xF0u;
  *(_DWORD *)v9 = a4;
}

void sub_1C21ECB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddInt32(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, int a4, int a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *AlignedAndAddCleanup;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 1)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v15 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT32): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v16, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<int>>);
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = v16;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = 0;
    }
    *v12 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v18 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v19] != 1)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v21 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT32): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v22 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    google::protobuf::RepeatedField<int>::Reserve(v23, v24 + 1);
    result = google::protobuf::RepeatedField<int>::elements((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    result = google::protobuf::RepeatedField<int>::elements((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_1C21ECEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::SetInt64(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t **v8;
  uint64_t **v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  v8 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v9 = v8;
  v8[2] = a5;
  if (v10)
  {
    *((_BYTE *)v8 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 2)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v12 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT64): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v9 + 9) = 0;
  }
  else
  {
    if (*((_BYTE *)v8 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = *((unsigned __int8 *)v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v14] != 2)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v16 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT64): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
  }
  *((_BYTE *)v9 + 10) &= 0xF0u;
  *v9 = a4;
}

void sub_1C21ED0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddInt64(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, int a4, uint64_t a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *AlignedAndAddCleanup;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 2)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v15 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT64): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v16, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<long long>>);
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = v16;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = 0;
    }
    *v12 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v18 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v19] != 2)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v21 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT64): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v22 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    google::protobuf::RepeatedField<long long>::Reserve(v23, v24 + 1);
    result = google::protobuf::RepeatedField<long long>::elements((uint64_t)v23);
    *(_QWORD *)(result + 8 * v24) = a5;
  }
  else
  {
    result = google::protobuf::RepeatedField<long long>::elements((uint64_t)v23);
    *(_QWORD *)(result + 8 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_1C21ED3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::SetUInt32(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, int a4, uint64_t *a5)
{
  uint64_t **v8;
  uint64_t **v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  v8 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v9 = v8;
  v8[2] = a5;
  if (v10)
  {
    *((_BYTE *)v8 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 3)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v12 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v9 + 9) = 0;
  }
  else
  {
    if (*((_BYTE *)v8 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = *((unsigned __int8 *)v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v14] != 3)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v16 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
  }
  *((_BYTE *)v9 + 10) &= 0xF0u;
  *(_DWORD *)v9 = a4;
}

void sub_1C21ED600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddUInt32(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, int a4, int a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *AlignedAndAddCleanup;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 3)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v15 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v16, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<unsigned int>>);
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = v16;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = 0;
    }
    *v12 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v18 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v19] != 3)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v21 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v22 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    google::protobuf::RepeatedField<unsigned int>::Reserve(v23, v24 + 1);
    result = google::protobuf::RepeatedField<unsigned int>::elements((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    result = google::protobuf::RepeatedField<unsigned int>::elements((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_1C21ED918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::SetUInt64(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t **v8;
  uint64_t **v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  v8 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v9 = v8;
  v8[2] = a5;
  if (v10)
  {
    *((_BYTE *)v8 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v12 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v9 + 9) = 0;
  }
  else
  {
    if (*((_BYTE *)v8 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = *((unsigned __int8 *)v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v14] != 4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v16 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
  }
  *((_BYTE *)v9 + 10) &= 0xF0u;
  *v9 = a4;
}

void sub_1C21EDB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddUInt64(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, int a4, uint64_t a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *AlignedAndAddCleanup;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v15 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v16, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<unsigned long long>>);
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = v16;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = 0;
    }
    *v12 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v18 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v19] != 4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v21 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v22 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    google::protobuf::RepeatedField<unsigned long long>::Reserve(v23, v24 + 1);
    result = google::protobuf::RepeatedField<unsigned long long>::elements((uint64_t)v23);
    *(_QWORD *)(result + 8 * v24) = a5;
  }
  else
  {
    result = google::protobuf::RepeatedField<unsigned long long>::elements((uint64_t)v23);
    *(_QWORD *)(result + 8 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_1C21EDE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::SetFloat(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, uint64_t *a4, float a5)
{
  uint64_t **v8;
  uint64_t **v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  v8 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v9 = v8;
  v8[2] = a4;
  if (v10)
  {
    *((_BYTE *)v8 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 6)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v12 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v9 + 9) = 0;
  }
  else
  {
    if (*((_BYTE *)v8 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = *((unsigned __int8 *)v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v14] != 6)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v16 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
  }
  *((_BYTE *)v9 + 10) &= 0xF0u;
  *(float *)v9 = a5;
}

void sub_1C21EE070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddFloat(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, int a4, uint64_t *a5, float a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *AlignedAndAddCleanup;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v12 = v11;
  v11[2] = a5;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 6)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v15 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v16, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<float>>);
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = v16;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = 0;
    }
    *v12 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v18 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v19] != 6)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v21 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v22 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    google::protobuf::RepeatedField<float>::Reserve(v23, v24 + 1);
    result = google::protobuf::RepeatedField<float>::elements((uint64_t)v23);
    *(float *)(result + 4 * v24) = a6;
  }
  else
  {
    result = google::protobuf::RepeatedField<float>::elements((uint64_t)v23);
    *(float *)(result + 4 * v24) = a6;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_1C21EE390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::SetDouble(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, uint64_t *a4, double a5)
{
  uint64_t **v8;
  uint64_t **v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  v8 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v9 = v8;
  v8[2] = a4;
  if (v10)
  {
    *((_BYTE *)v8 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v12 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v9 + 9) = 0;
  }
  else
  {
    if (*((_BYTE *)v8 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = *((unsigned __int8 *)v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v14] != 5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v16 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
  }
  *((_BYTE *)v9 + 10) &= 0xF0u;
  *(double *)v9 = a5;
}

void sub_1C21EE5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddDouble(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, int a4, uint64_t *a5, double a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *AlignedAndAddCleanup;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v12 = v11;
  v11[2] = a5;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v15 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v16, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<double>>);
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = v16;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = 0;
    }
    *v12 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v18 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v19] != 5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v21 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v22 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    google::protobuf::RepeatedField<double>::Reserve(v23, v24 + 1);
    result = google::protobuf::RepeatedField<double>::elements((uint64_t)v23);
    *(double *)(result + 8 * v24) = a6;
  }
  else
  {
    result = google::protobuf::RepeatedField<double>::elements((uint64_t)v23);
    *(double *)(result + 8 * v24) = a6;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_1C21EE8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::SetBool(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, char a4, uint64_t *a5)
{
  uint64_t **v8;
  _BYTE *v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  v8 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v9 = v8;
  v8[2] = a5;
  if (v10)
  {
    *((_BYTE *)v8 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 7)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v12 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v9[9] = 0;
  }
  else
  {
    if (*((_BYTE *)v8 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = v9[8];
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v14] != 7)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v16 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
  }
  v9[10] &= 0xF0u;
  *v9 = a4;
}

void sub_1C21EEAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddBool(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, int a4, char a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *AlignedAndAddCleanup;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 7)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v15 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v16, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<BOOL>>);
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = v16;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = 0;
    }
    *v12 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v18 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v19] != 7)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v21 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v22 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    google::protobuf::RepeatedField<BOOL>::Reserve(v23, v24 + 1);
    result = google::protobuf::RepeatedField<BOOL>::elements((uint64_t)v23);
    *(_BYTE *)(result + v24) = a5;
  }
  else
  {
    result = google::protobuf::RepeatedField<BOOL>::elements((uint64_t)v23);
    *(_BYTE *)(result + v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_1C21EEE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, char a4, uint64_t *a5)
{
  uint64_t **v9;
  uint64_t **v10;
  char v11;
  uint64_t v12;
  void (*v13)(void *);
  uint64_t *AlignedAndAddCleanup;
  uint64_t v15;
  void (*v16)(void *);

  v9 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v10 = v9;
  v9[2] = a5;
  if (v11)
  {
    *((_BYTE *)v9 + 9) = 1;
    *((_BYTE *)v9 + 8) = a3;
    *((_BYTE *)v9 + 11) = a4;
    switch(a3)
    {
      case 1:
        v12 = *(_QWORD *)a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
        v13 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<double>>;
        goto LABEL_31;
      case 2:
        v12 = *(_QWORD *)a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
        v13 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<float>>;
        goto LABEL_31;
      case 3:
      case 16:
      case 18:
        v12 = *(_QWORD *)a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
        v13 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<long long>>;
        goto LABEL_31;
      case 4:
      case 6:
        v12 = *(_QWORD *)a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
        v13 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<unsigned long long>>;
        goto LABEL_31;
      case 5:
      case 14:
      case 15:
      case 17:
        v12 = *(_QWORD *)a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
        v13 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<int>>;
        goto LABEL_31;
      case 7:
      case 13:
        v12 = *(_QWORD *)a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
        v13 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<unsigned int>>;
        goto LABEL_31;
      case 8:
        v12 = *(_QWORD *)a1;
        if (v12)
        {
          if ((*(_BYTE *)(v12 + 24) & 1) != 0)
          v13 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<BOOL>>;
LABEL_31:
          AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v12, (google::protobuf::internal::SerialArena::Block *)0x10, v13);
          *AlignedAndAddCleanup = 0;
          AlignedAndAddCleanup[1] = v12;
        }
        else
        {
LABEL_32:
          AlignedAndAddCleanup = (uint64_t *)operator new();
          *AlignedAndAddCleanup = 0;
          AlignedAndAddCleanup[1] = 0;
        }
        goto LABEL_44;
      case 9:
      case 12:
        v15 = *(_QWORD *)a1;
        if (!v15)
          goto LABEL_42;
        if ((*(_BYTE *)(v15 + 24) & 1) != 0)
        v16 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedPtrField<std::string>>;
        goto LABEL_41;
      case 10:
      case 11:
        v15 = *(_QWORD *)a1;
        if (v15)
        {
          if ((*(_BYTE *)(v15 + 24) & 1) != 0)
          v16 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>>;
LABEL_41:
          AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v15, (google::protobuf::internal::SerialArena::Block *)0x18, v16);
          AlignedAndAddCleanup[2] = 0;
          *AlignedAndAddCleanup = v15;
        }
        else
        {
LABEL_42:
          AlignedAndAddCleanup = (uint64_t *)operator new();
          AlignedAndAddCleanup[2] = 0;
          *AlignedAndAddCleanup = 0;
        }
        AlignedAndAddCleanup[1] = 0;
LABEL_44:
        *v10 = AlignedAndAddCleanup;
        break;
      default:
        return *v10;
    }
  }
  return *v10;
}

void google::protobuf::internal::ExtensionSet::SetEnum(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, int a4, uint64_t *a5)
{
  uint64_t **v8;
  uint64_t **v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  v8 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v9 = v8;
  v8[2] = a5;
  if (v10)
  {
    *((_BYTE *)v8 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 8)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 460);
      v12 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v9 + 9) = 0;
  }
  else
  {
    if (*((_BYTE *)v8 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 463);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = *((unsigned __int8 *)v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v14] != 8)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 463);
      v16 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
  }
  *((_BYTE *)v9 + 10) &= 0xF0u;
  *(_DWORD *)v9 = a4;
}

void sub_1C21EF360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddEnum(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, int a4, int a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *AlignedAndAddCleanup;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 8)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 488);
      v15 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v16, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<int>>);
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = v16;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = 0;
    }
    *v12 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 494);
      v18 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v19] != 8)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 494);
      v21 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 495);
      v22 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    google::protobuf::RepeatedField<int>::Reserve(v23, v24 + 1);
    result = google::protobuf::RepeatedField<int>::elements((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    result = google::protobuf::RepeatedField<int>::elements((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_1C21EF678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::MutableString(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, uint64_t *a4)
{
  uint64_t **v7;
  unsigned __int8 *v8;
  char v9;
  std::string *v10;
  std::string *v11;
  uint64_t v12;
  _QWORD *AlignedAndAddCleanup;
  std::string *v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  char v19;
  std::string v20[2];

  v7 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v8 = (unsigned __int8 *)v7;
  v7[2] = a4;
  if (v9)
  {
    *((_BYTE *)v7 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v10 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v10->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 9)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 520);
      v11 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_STRING): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    }
    v8[9] = 0;
    v12 = *(_QWORD *)a1;
    if (v12)
    {
      if ((*(_BYTE *)(v12 + 24) & 1) != 0)
      AlignedAndAddCleanup = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v12, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
    }
    else
    {
      AlignedAndAddCleanup = (_QWORD *)operator new();
    }
    *AlignedAndAddCleanup = 0;
    AlignedAndAddCleanup[1] = 0;
    AlignedAndAddCleanup[2] = 0;
    *(_QWORD *)v8 = AlignedAndAddCleanup;
  }
  else
  {
    if (*((_BYTE *)v7 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 524);
      v14 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    }
    v15 = v8[8];
    if ((v15 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v16 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v15] != 9)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 524);
      v17 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_STRING): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v17->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    }
  }
  v8[10] &= 0xF0u;
  return *(_QWORD *)v8;
}

void sub_1C21EF904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::internal::ExtensionSet::AddString(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, uint64_t *a4)
{
  uint64_t **v7;
  uint64_t **v8;
  char v9;
  std::string *v10;
  std::string *v11;
  uint64_t v12;
  uint64_t *AlignedAndAddCleanup;
  std::string *v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  uint64_t *v18;
  int *v19;
  uint64_t v20;
  int v21;
  _QWORD *result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  std::string v27[2];

  v7 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v8 = v7;
  v7[2] = a4;
  if (v9)
  {
    *((_BYTE *)v7 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v10 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v10->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 9)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 550);
      v11 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_STRING): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v8 + 9) = 1;
    *((_BYTE *)v8 + 11) = 0;
    v12 = *(_QWORD *)a1;
    if (v12)
    {
      if ((*(_BYTE *)(v12 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v12, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedPtrField<std::string>>);
      AlignedAndAddCleanup[2] = 0;
      *AlignedAndAddCleanup = v12;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      AlignedAndAddCleanup[2] = 0;
      *AlignedAndAddCleanup = 0;
    }
    AlignedAndAddCleanup[1] = 0;
    *v8 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v7 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 556);
      v14 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
    }
    v15 = *((unsigned __int8 *)v8 + 8);
    if ((v15 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v16 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v15] != 9)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 556);
      v17 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_STRING): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v17->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
    }
  }
  v18 = *v8;
  v19 = (int *)v18[2];
  if (!v19)
  {
    v21 = *((_DWORD *)v18 + 3);
LABEL_23:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v18, v21 + 1);
    v19 = (int *)v18[2];
    v21 = *v19;
    goto LABEL_24;
  }
  v20 = *((int *)v18 + 2);
  v21 = *v19;
  if ((int)v20 < *v19)
  {
    *((_DWORD *)v18 + 2) = v20 + 1;
    return *(_QWORD **)&v19[2 * v20 + 2];
  }
  if (v21 == *((_DWORD *)v18 + 3))
    goto LABEL_23;
LABEL_24:
  *v19 = v21 + 1;
  v23 = *v18;
  if (*v18)
  {
    if ((*(_BYTE *)(v23 + 24) & 1) != 0)
    result = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v23, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  }
  else
  {
    result = (_QWORD *)operator new();
  }
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  v24 = v18[2];
  v25 = *((int *)v18 + 2);
  *((_DWORD *)v18 + 2) = v25 + 1;
  *(_QWORD *)(v24 + 8 * v25 + 8) = result;
  return result;
}

void sub_1C21EFC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::MutableMessage(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t **v9;
  uint64_t **v10;
  char v11;
  std::string *v12;
  std::string *v13;
  uint64_t result;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  char v19;
  char v20;
  std::string v21[2];

  v9 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v10 = v9;
  v9[2] = a5;
  if (v11)
  {
    *((_BYTE *)v9 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v12 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 591);
      v13 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v10 + 9) = 0;
    *((_BYTE *)v10 + 10) &= 0xFu;
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, *(_QWORD *)a1);
    *v10 = (uint64_t *)result;
    *((_BYTE *)v10 + 10) &= 0xF0u;
  }
  else
  {
    if (*((_BYTE *)v9 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 598);
      v15 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
    }
    v16 = *((unsigned __int8 *)v10 + 8);
    if ((v16 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v17 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v17->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v16] != 10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 598);
      v18 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
    }
    v19 = *((_BYTE *)v10 + 10);
    *((_BYTE *)v10 + 10) = v19 & 0xF0;
    result = (uint64_t)*v10;
    if ((v19 & 0x10) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a4);
  }
  return result;
}

void sub_1C21EFED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddMessage(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t **v9;
  unsigned __int8 *v10;
  char v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  _QWORD *AlignedAndAddCleanup;
  std::string *v16;
  uint64_t v17;
  std::string *v18;
  std::string *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  std::string v26[2];

  v9 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v10 = (unsigned __int8 *)v9;
  v9[2] = a5;
  if (v11)
  {
    *((_BYTE *)v9 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v12 = google::protobuf::internal::LogMessage::operator<<(v26, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v25, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v26[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 762);
      v13 = google::protobuf::internal::LogMessage::operator<<(v26, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v25, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v26[0].__r_.__value_.__l.__data_);
    }
    v10[9] = 1;
    v14 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      if ((*(_BYTE *)(v14 + 24) & 1) != 0)
      AlignedAndAddCleanup = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v14, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>>);
      AlignedAndAddCleanup[2] = 0;
      *AlignedAndAddCleanup = v14;
    }
    else
    {
      AlignedAndAddCleanup = (_QWORD *)operator new();
      AlignedAndAddCleanup[2] = 0;
      *AlignedAndAddCleanup = 0;
    }
    AlignedAndAddCleanup[1] = 0;
    *(_QWORD *)v10 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v9 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 767);
      v16 = google::protobuf::internal::LogMessage::operator<<(v26, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v25, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v26[0].__r_.__value_.__l.__data_);
    }
    v17 = v10[8];
    if ((v17 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v18 = google::protobuf::internal::LogMessage::operator<<(v26, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v25, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v26[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v17] != 10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 767);
      v19 = google::protobuf::internal::LogMessage::operator<<(v26, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v25, (const char **)&v19->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v26[0].__r_.__value_.__l.__data_);
    }
  }
  v20 = *(_QWORD *)v10;
  v21 = *(_DWORD **)(*(_QWORD *)v10 + 16);
  if (!v21
    || (v22 = *(int *)(v20 + 8), (int)v22 >= *v21)
    || (*(_DWORD *)(v20 + 8) = v22 + 1, (v23 = *(_QWORD *)&v21[2 * v22 + 2]) == 0))
  {
    v23 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, *(_QWORD *)a1);
    google::protobuf::internal::RepeatedPtrFieldBase::AddAllocatedInternal<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(*(unsigned int **)v10, v23);
  }
  return v23;
}

void sub_1C21F01BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::MergeFrom(google::protobuf::internal::ExtensionSet *this, const google::protobuf::internal::ExtensionSet *a2)
{
  unsigned int v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char *v13;
  unint64_t v14;
  int *v15;
  int *v16;
  const google::protobuf::internal::ExtensionSet::Extension *v17;
  int v18;

  if (*((unsigned __int16 *)this + 4) <= 0x100u)
  {
    v4 = *((unsigned __int16 *)a2 + 4);
    v5 = (char *)*((_QWORD *)this + 2);
    v6 = *((unsigned __int16 *)this + 5);
    v7 = &v5[32 * v6];
    v8 = *((_QWORD *)a2 + 2);
    if (v4 > 0x100)
    {
    }
    else
    {
      v9 = *((unsigned __int16 *)a2 + 5);
      v10 = v8 + 32 * v9;
      v12 = (_DWORD)v6 == 0;
      v11 = 0;
      v12 = v12 || (_DWORD)v9 == 0;
      if (!v12)
      {
        do
        {
          if (*(_DWORD *)v5 == *(_DWORD *)v8)
            v13 = v5 + 32;
          else
            v13 = v5;
          if (*(_DWORD *)v5 < *(_DWORD *)v8)
          {
            v5 += 32;
          }
          else
          {
            v8 += 32;
            v5 = v13;
          }
          ++v11;
        }
        while (v5 != v7 && v8 != v10);
      }
      v14 = v11 + ((v10 - v8) >> 5) + ((v7 - v5) >> 5);
    }
    google::protobuf::internal::ExtensionSet::GrowCapacity(this, v14);
  }
  v15 = (int *)*((_QWORD *)a2 + 2);
  if (*((unsigned __int16 *)a2 + 4) >= 0x101u)
  {
    google::protobuf::internal::ExtensionSet::ForEach<std::__map_iterator<std::__tree_iterator<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::__tree_node<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,void *> *,long>>,google::protobuf::internal::ExtensionSet::MergeFrom(google::protobuf::internal::ExtensionSet const&)::$_0>(*(_QWORD **)v15, (_QWORD *)v15 + 1, this);
  }
  else if (*((_WORD *)a2 + 5))
  {
    v16 = &v15[8 * *((unsigned __int16 *)a2 + 5)];
    do
    {
      v17 = (const google::protobuf::internal::ExtensionSet::Extension *)(v15 + 2);
      v18 = *v15;
      v15 += 8;
      google::protobuf::internal::ExtensionSet::InternalExtensionMergeFrom(this, v18, v17);
    }
    while (v15 != v16);
  }
}

_QWORD *google::protobuf::internal::ExtensionSet::GrowCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  char *v11;
  char *v12;
  __int128 v13;
  BOOL v14;
  int v15;
  __int128 v16;
  uint64_t v17;

  v2 = *((unsigned __int16 *)this + 4);
  if (v2 <= 0x100 && v2 < a2)
  {
    v4 = this;
    do
    {
      if ((_WORD)v2)
        LOWORD(v2) = 4 * v2;
      else
        LOWORD(v2) = 1;
    }
    while ((unsigned __int16)v2 < a2);
    v5 = (char *)this[2];
    v6 = *((unsigned __int16 *)this + 5);
    v7 = *this;
    if ((unsigned __int16)v2 < 0x101u)
    {
      v8 = 32 * (unsigned __int16)v2;
      if (v7)
      {
        if ((*(_BYTE *)(v7 + 24) & 1) != 0)
        {
          v8 = 32 * (unsigned __int16)v2;
        }
        this = (_QWORD *)google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)v7, v8);
      }
      else
      {
        this = operator new[](v8);
      }
      v9 = (uint64_t **)this;
      if ((_DWORD)v6)
        this = memmove(this, v5, 32 * v6);
    }
    else
    {
      if (v7)
      {
        if ((*(_BYTE *)(v7 + 24) & 1) != 0)
        this = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v7, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::map<int,google::protobuf::internal::ExtensionSet::Extension>>);
      }
      else
      {
        this = (_QWORD *)operator new();
      }
      v9 = (uint64_t **)this;
      this[1] = 0;
      v10 = this + 1;
      this[2] = 0;
      *this = this + 1;
      if ((_DWORD)v6)
      {
        v11 = &v5[32 * v6];
        v12 = v5;
        do
        {
          v15 = *(_DWORD *)v12;
          v13 = *(_OWORD *)(v12 + 8);
          v17 = *((_QWORD *)v12 + 3);
          v16 = v13;
          this = std::__tree<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::__map_value_compare<int,std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::less<int>,true>,std::allocator<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>>>::__emplace_hint_unique_key_args<int,std::pair<int const,google::protobuf::internal::ExtensionSet::Extension>>(v9, v10, &v15, &v15);
          v10 = this;
          v12 += 32;
        }
        while (v12 != v11);
      }
    }
    if (*v4)
      v14 = 1;
    else
      v14 = v5 == 0;
    if (!v14)
      this = (_QWORD *)MEMORY[0x1C3BB9B20](v5, 0x1062C802AB6010CLL);
    *((_WORD *)v4 + 4) = v2;
    v4[2] = v9;
    if ((unsigned __int16)v2 >= 0x101u)
      *((_WORD *)v4 + 5) = 0;
  }
  return this;
}

uint64_t google::protobuf::internal::`anonymous namespace'::SizeOfUnion<google::protobuf::internal::ExtensionSet::KeyValue *,std::__map_iterator<std::__tree_iterator<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::__tree_node<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,void *> *,long>>>(char *a1, char *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  v4 = 0;
  if (a1 != a2 && a3 != a4)
  {
    v4 = 0;
    do
    {
      v5 = *((_DWORD *)a3 + 8);
      if (*(_DWORD *)a1 >= v5)
      {
        if (*(_DWORD *)a1 == v5)
        {
          a1 += 32;
          v6 = (_QWORD *)a3[1];
          if (v6)
          {
            do
            {
              a3 = v6;
              v6 = (_QWORD *)*v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              v7 = a3;
              a3 = (_QWORD *)a3[2];
            }
            while ((_QWORD *)*a3 != v7);
          }
        }
        else
        {
          v8 = (_QWORD *)a3[1];
          if (v8)
          {
            do
            {
              a3 = v8;
              v8 = (_QWORD *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              v9 = a3;
              a3 = (_QWORD *)a3[2];
            }
            while ((_QWORD *)*a3 != v9);
          }
        }
      }
      else
      {
        a1 += 32;
      }
      ++v4;
    }
    while (a1 != a2 && a3 != a4);
  }
  if (a3 == a4)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v11 = (_QWORD *)a3[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)a3[2];
          v13 = *v12 == (_QWORD)a3;
          a3 = v12;
        }
        while (!v13);
      }
      ++v10;
      a3 = v12;
    }
    while (v12 != a4);
  }
  return v4 + ((a2 - a1) >> 5) + v10;
}

void google::protobuf::internal::ExtensionSet::InternalExtensionMergeFrom(google::protobuf::internal::ExtensionSet *this, int a2, const google::protobuf::internal::ExtensionSet::Extension *a3)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int **v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t AlignedAndAddCleanup;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  int v36;
  __int128 *v37;
  __int128 v38;
  uint64_t *v39;
  uint64_t **v40;
  uint64_t **v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  std::string *v53;
  std::string *v54;
  std::string *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::string __p;
  char v62;
  std::string v63[2];

  if (*((_BYTE *)a3 + 9))
  {
    v6 = (uint64_t *)*((_QWORD *)a3 + 2);
    v7 = google::protobuf::internal::ExtensionSet::Insert(this, a2);
    v8 = (unsigned int **)v7;
    v7[2] = v6;
    v10 = v9;
    if (v9)
    {
      *((_BYTE *)v7 + 8) = *((_BYTE *)a3 + 8);
      *((_BYTE *)v7 + 11) = *((_BYTE *)a3 + 11);
      *((_BYTE *)v7 + 9) = 1;
    }
    else
    {
      if (*((unsigned __int8 *)v7 + 8) != *((unsigned __int8 *)a3 + 8))
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 931);
        v13 = google::protobuf::internal::LogMessage::operator<<(v63, "CHECK failed: (extension->type) == (other_extension.type): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v62, (const char **)&v13->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v63[0].__r_.__value_.__l.__data_);
      }
      if (*((unsigned __int8 *)v8 + 11) != *((unsigned __int8 *)a3 + 11))
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 932);
        v14 = google::protobuf::internal::LogMessage::operator<<(v63, "CHECK failed: (extension->is_packed) == (other_extension.is_packed): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v62, (const char **)&v14->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v63[0].__r_.__value_.__l.__data_);
      }
      if (!*((_BYTE *)v8 + 9))
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 933);
        v15 = google::protobuf::internal::LogMessage::operator<<(v63, "CHECK failed: extension->is_repeated: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v62, (const char **)&v15->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v63[0].__r_.__value_.__l.__data_);
      }
    }
    v16 = *((unsigned __int8 *)a3 + 8);
    if ((v16 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v17 = google::protobuf::internal::LogMessage::operator<<(v63, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v62, (const char **)&v17->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v63[0].__r_.__value_.__l.__data_);
    }
    switch(v16)
    {
      case 1:
        if (v10)
        {
          v26 = *(_QWORD *)this;
          if (v26)
          {
            if ((*(_BYTE *)(v26 + 24) & 1) != 0)
            AlignedAndAddCleanup = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v26, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<double>>);
            *(_QWORD *)AlignedAndAddCleanup = 0;
            *(_QWORD *)(AlignedAndAddCleanup + 8) = v26;
          }
          else
          {
            AlignedAndAddCleanup = operator new();
            *(_QWORD *)AlignedAndAddCleanup = 0;
            *(_QWORD *)(AlignedAndAddCleanup + 8) = 0;
          }
          *v8 = (unsigned int *)AlignedAndAddCleanup;
        }
        else
        {
          AlignedAndAddCleanup = (uint64_t)*v8;
        }
        google::protobuf::RepeatedField<double>::MergeFrom((int *)AlignedAndAddCleanup, *(int **)a3);
        break;
      case 2:
        if (v10)
        {
          v28 = *(_QWORD *)this;
          if (v28)
          {
            if ((*(_BYTE *)(v28 + 24) & 1) != 0)
            v29 = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v28, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<float>>);
            *(_QWORD *)v29 = 0;
            *(_QWORD *)(v29 + 8) = v28;
          }
          else
          {
            v29 = operator new();
            *(_QWORD *)v29 = 0;
            *(_QWORD *)(v29 + 8) = 0;
          }
          *v8 = (unsigned int *)v29;
        }
        else
        {
          v29 = (uint64_t)*v8;
        }
        google::protobuf::RepeatedField<float>::MergeFrom((int *)v29, *(int **)a3);
        break;
      case 3:
      case 16:
      case 18:
        if (v10)
        {
          v20 = *(_QWORD *)this;
          if (v20)
          {
            if ((*(_BYTE *)(v20 + 24) & 1) != 0)
            v21 = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v20, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<long long>>);
            *(_QWORD *)v21 = 0;
            *(_QWORD *)(v21 + 8) = v20;
          }
          else
          {
            v21 = operator new();
            *(_QWORD *)v21 = 0;
            *(_QWORD *)(v21 + 8) = 0;
          }
          *v8 = (unsigned int *)v21;
        }
        else
        {
          v21 = (uint64_t)*v8;
        }
        google::protobuf::RepeatedField<long long>::MergeFrom((int *)v21, *(int **)a3);
        break;
      case 4:
      case 6:
        if (v10)
        {
          v24 = *(_QWORD *)this;
          if (v24)
          {
            if ((*(_BYTE *)(v24 + 24) & 1) != 0)
            v25 = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v24, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<unsigned long long>>);
            *(_QWORD *)v25 = 0;
            *(_QWORD *)(v25 + 8) = v24;
          }
          else
          {
            v25 = operator new();
            *(_QWORD *)v25 = 0;
            *(_QWORD *)(v25 + 8) = 0;
          }
          *v8 = (unsigned int *)v25;
        }
        else
        {
          v25 = (uint64_t)*v8;
        }
        google::protobuf::RepeatedField<unsigned long long>::MergeFrom((int *)v25, *(int **)a3);
        break;
      case 5:
      case 14:
      case 15:
      case 17:
        if (v10)
        {
          v18 = *(_QWORD *)this;
          if (v18)
          {
            if ((*(_BYTE *)(v18 + 24) & 1) != 0)
            v19 = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v18, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<int>>);
            *(_QWORD *)v19 = 0;
            *(_QWORD *)(v19 + 8) = v18;
          }
          else
          {
            v19 = operator new();
            *(_QWORD *)v19 = 0;
            *(_QWORD *)(v19 + 8) = 0;
          }
          *v8 = (unsigned int *)v19;
        }
        else
        {
          v19 = (uint64_t)*v8;
        }
        google::protobuf::RepeatedField<int>::MergeFrom((int *)v19, *(int **)a3);
        break;
      case 7:
      case 13:
        if (v10)
        {
          v22 = *(_QWORD *)this;
          if (v22)
          {
            if ((*(_BYTE *)(v22 + 24) & 1) != 0)
            v23 = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v22, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<unsigned int>>);
            *(_QWORD *)v23 = 0;
            *(_QWORD *)(v23 + 8) = v22;
          }
          else
          {
            v23 = operator new();
            *(_QWORD *)v23 = 0;
            *(_QWORD *)(v23 + 8) = 0;
          }
          *v8 = (unsigned int *)v23;
        }
        else
        {
          v23 = (uint64_t)*v8;
        }
        google::protobuf::RepeatedField<unsigned int>::MergeFrom((int *)v23, *(int **)a3);
        break;
      case 8:
        if (v10)
        {
          v30 = *(_QWORD *)this;
          if (v30)
          {
            if ((*(_BYTE *)(v30 + 24) & 1) != 0)
            v31 = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v30, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<BOOL>>);
            *(_QWORD *)v31 = 0;
            *(_QWORD *)(v31 + 8) = v30;
          }
          else
          {
            v31 = operator new();
            *(_QWORD *)v31 = 0;
            *(_QWORD *)(v31 + 8) = 0;
          }
          *v8 = (unsigned int *)v31;
        }
        else
        {
          v31 = (uint64_t)*v8;
        }
        google::protobuf::RepeatedField<BOOL>::MergeFrom((int *)v31, *(int **)a3);
        break;
      case 9:
      case 12:
        if (v10)
        {
          v32 = *(_QWORD *)this;
          if (v32)
          {
            if ((*(_BYTE *)(v32 + 24) & 1) != 0)
            v33 = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v32, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedPtrField<std::string>>);
            *(_QWORD *)(v33 + 16) = 0;
            *(_QWORD *)v33 = v32;
          }
          else
          {
            v33 = operator new();
            *(_QWORD *)(v33 + 16) = 0;
            *(_QWORD *)v33 = 0;
          }
          *(_QWORD *)(v33 + 8) = 0;
          *v8 = (unsigned int *)v33;
        }
        else
        {
          v33 = (uint64_t)*v8;
        }
        google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int **)v33, *(_QWORD *)a3);
        break;
      case 10:
      case 11:
        if (v10)
        {
          v34 = *(_QWORD *)this;
          if (*(_QWORD *)this)
          {
            if ((*(_BYTE *)(v34 + 24) & 1) != 0)
            v35 = (unsigned int *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v34, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>>);
            *((_QWORD *)v35 + 2) = 0;
            *(_QWORD *)v35 = v34;
          }
          else
          {
            v35 = (unsigned int *)operator new();
            *((_QWORD *)v35 + 2) = 0;
            *(_QWORD *)v35 = 0;
          }
          *((_QWORD *)v35 + 1) = 0;
          *v8 = v35;
        }
        v45 = *(_QWORD *)a3;
        if (*(int *)(v45 + 8) >= 1)
        {
          v46 = 0;
          do
          {
            v47 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(v45, v46);
            v48 = v47;
            v49 = *v8;
            v50 = (_DWORD *)*((_QWORD *)*v8 + 2);
            if (!v50
              || (v51 = (int)v49[2], (int)v51 >= *v50)
              || (v49[2] = v51 + 1, (v52 = *(_QWORD *)&v50[2 * v51 + 2]) == 0))
            {
              v52 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, *(_QWORD *)this);
              google::protobuf::internal::RepeatedPtrFieldBase::AddAllocatedInternal<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(*v8, v52);
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 64))(v52, v48);
            ++v46;
          }
          while (v46 < *(_DWORD *)(v45 + 8));
        }
        break;
      default:
        return;
    }
    return;
  }
  if ((*((_BYTE *)a3 + 10) & 1) != 0)
    return;
  v11 = *((unsigned __int8 *)a3 + 8);
  if ((v11 - 19) <= 0xFFFFFFED)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    v12 = google::protobuf::internal::LogMessage::operator<<(v63, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v62, (const char **)&v12->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v63[0].__r_.__value_.__l.__data_);
  }
  switch(v11)
  {
    case 1:
      google::protobuf::internal::ExtensionSet::SetDouble(this, a2, *((unsigned __int8 *)a3 + 8), *((uint64_t **)a3 + 2), *(double *)a3);
      return;
    case 2:
      google::protobuf::internal::ExtensionSet::SetFloat(this, a2, *((unsigned __int8 *)a3 + 8), *((uint64_t **)a3 + 2), *(float *)a3);
      return;
    case 3:
    case 16:
    case 18:
      google::protobuf::internal::ExtensionSet::SetInt64(this, a2, *((unsigned __int8 *)a3 + 8), *(uint64_t **)a3, *((uint64_t **)a3 + 2));
      return;
    case 4:
    case 6:
      google::protobuf::internal::ExtensionSet::SetUInt64(this, a2, *((unsigned __int8 *)a3 + 8), *(uint64_t **)a3, *((uint64_t **)a3 + 2));
      return;
    case 5:
    case 15:
    case 17:
      google::protobuf::internal::ExtensionSet::SetInt32(this, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, *((uint64_t **)a3 + 2));
      return;
    case 7:
    case 13:
      google::protobuf::internal::ExtensionSet::SetUInt32(this, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, *((uint64_t **)a3 + 2));
      return;
    case 8:
      google::protobuf::internal::ExtensionSet::SetBool(this, a2, *((unsigned __int8 *)a3 + 8), *(_BYTE *)a3, *((uint64_t **)a3 + 2));
      return;
    case 9:
    case 12:
      v36 = *((unsigned __int8 *)a3 + 8);
      v37 = *(__int128 **)a3;
      if (*(char *)(*(_QWORD *)a3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v37, *((_QWORD *)v37 + 1));
      }
      else
      {
        v38 = *v37;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v37 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v38;
      }
      google::protobuf::internal::ExtensionSet::SetString(this, a2, v36, (__n128 *)&__p, *((uint64_t **)a3 + 2));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return;
    case 10:
    case 11:
      v39 = (uint64_t *)*((_QWORD *)a3 + 2);
      v40 = google::protobuf::internal::ExtensionSet::Insert(this, a2);
      v41 = v40;
      v40[2] = v39;
      if (v42)
      {
        *((_BYTE *)v40 + 8) = *((_BYTE *)a3 + 8);
        *((_BYTE *)v40 + 11) = *((_BYTE *)a3 + 11);
        *((_BYTE *)v40 + 9) = 0;
        v43 = *((_BYTE *)v40 + 10) & 0xF;
        if ((*((_BYTE *)a3 + 10) & 0x10) != 0)
        {
          *((_BYTE *)v40 + 10) = v43 | 0x10;
          v59 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)a3 + 16))(*(_QWORD *)a3, *(_QWORD *)this);
          *v41 = (uint64_t *)v59;
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 104))(v59, *(_QWORD *)a3);
          goto LABEL_135;
        }
        *((_BYTE *)v40 + 10) = v43;
        v44 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)a3 + 32))(*(_QWORD *)a3, *(_QWORD *)this);
        *v41 = (uint64_t *)v44;
        goto LABEL_133;
      }
      if (*((unsigned __int8 *)v40 + 8) != *((unsigned __int8 *)a3 + 8))
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1026);
        v53 = google::protobuf::internal::LogMessage::operator<<(v63, "CHECK failed: (extension->type) == (other_extension.type): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v62, (const char **)&v53->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v63[0].__r_.__value_.__l.__data_);
      }
      if (*((unsigned __int8 *)v41 + 11) != *((unsigned __int8 *)a3 + 11))
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1027);
        v54 = google::protobuf::internal::LogMessage::operator<<(v63, "CHECK failed: (extension->is_packed) == (other_extension.is_packed): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v62, (const char **)&v54->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v63[0].__r_.__value_.__l.__data_);
      }
      if (*((_BYTE *)v41 + 9))
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1028);
        v55 = google::protobuf::internal::LogMessage::operator<<(v63, "CHECK failed: !extension->is_repeated: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v62, (const char **)&v55->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v63[0].__r_.__value_.__l.__data_);
      }
      v56 = *v41;
      v57 = *(_QWORD *)a3;
      if ((*((_BYTE *)a3 + 10) & 0x10) == 0)
      {
        v58 = *v56;
        if ((*((_BYTE *)v41 + 10) & 0x10) == 0)
        {
          (*(void (**)(uint64_t *, uint64_t))(v58 + 64))(v56, v57);
          goto LABEL_135;
        }
        v44 = (*(uint64_t (**)(uint64_t *, uint64_t))(v58 + 32))(*v41, v57);
LABEL_133:
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 64))(v44, *(_QWORD *)a3);
        goto LABEL_135;
      }
      if ((*((_BYTE *)v41 + 10) & 0x10) != 0)
      {
        (*(void (**)(uint64_t *, uint64_t))(*v56 + 104))(v56, v57);
      }
      else
      {
        v60 = (*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)v57 + 24))(*(_QWORD *)a3, *v41);
        (*(void (**)(uint64_t *, uint64_t))(*v56 + 64))(v56, v60);
      }
LABEL_135:
      *((_BYTE *)v41 + 10) &= 0xF0u;
      return;
    case 14:
      google::protobuf::internal::ExtensionSet::SetEnum(this, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, *((uint64_t **)a3 + 2));
      return;
    default:
      return;
  }
}

void sub_1C21F10FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16)
{
  google::protobuf::internal::LogMessage::~LogMessage(&a16);
  _Unwind_Resume(a1);
}

__n128 google::protobuf::internal::ExtensionSet::SetString(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, __n128 *a4, uint64_t *a5)
{
  uint64_t v6;
  __n128 *v7;
  __n128 result;

  v6 = google::protobuf::internal::ExtensionSet::MutableString(a1, a2, a3, a5);
  v7 = (__n128 *)v6;
  if (*(char *)(v6 + 23) < 0)
    operator delete(*(void **)v6);
  result = *a4;
  v7[1].n128_u64[0] = a4[1].n128_u64[0];
  *v7 = result;
  a4[1].n128_u8[7] = 0;
  a4->n128_u8[0] = 0;
  return result;
}

void google::protobuf::internal::ExtensionSet::Swap(google::protobuf::internal::ExtensionSet *this, google::protobuf::internal::ExtensionSet *a2)
{
  __int16 v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  if (*(_QWORD *)this == *(_QWORD *)a2)
  {
    v4 = *((_WORD *)this + 4);
    *((_WORD *)this + 4) = *((_WORD *)a2 + 4);
    *((_WORD *)a2 + 4) = v4;
    v5 = *((_WORD *)this + 5);
    *((_WORD *)this + 5) = *((_WORD *)a2 + 5);
    *((_WORD *)a2 + 5) = v5;
    v6 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    google::protobuf::internal::ExtensionSet::MergeFrom((google::protobuf::internal::ExtensionSet *)&v7, a2);
    google::protobuf::internal::ExtensionSet::Clear(a2);
    google::protobuf::internal::ExtensionSet::MergeFrom(a2, this);
    google::protobuf::internal::ExtensionSet::Clear(this);
    google::protobuf::internal::ExtensionSet::MergeFrom(this, (const google::protobuf::internal::ExtensionSet *)&v7);
    google::protobuf::internal::ExtensionSet::~ExtensionSet((google::protobuf::internal::ExtensionSet *)&v7);
  }
}

void sub_1C21F1268(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((google::protobuf::internal::ExtensionSet *)va);
  _Unwind_Resume(a1);
}

uint64_t **google::protobuf::internal::ExtensionSet::Insert(google::protobuf::internal::ExtensionSet *this, int a2)
{
  unsigned int v3;
  uint64_t **v4;
  uint64_t v6;
  uint64_t **v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t **v11;
  int v12;
  uint64_t **result;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *((unsigned __int16 *)this + 4);
  v4 = (uint64_t **)*((_QWORD *)this + 2);
  if (v3 >= 0x101)
  {
    *((_QWORD *)&v14 + 1) = 0;
    v15 = 0;
    v16 = 0;
    LODWORD(v14) = a2;
    return std::__tree<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::__map_value_compare<int,std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::less<int>,true>,std::allocator<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>>>::__emplace_unique_key_args<int,std::pair<int const,google::protobuf::internal::ExtensionSet::Extension>>(v4, (int *)&v14, &v14)+ 5;
  }
  v6 = *((unsigned __int16 *)this + 5);
  v7 = &v4[4 * v6];
  if (!*((_WORD *)this + 5))
  {
    if (!*((_WORD *)this + 4))
      goto LABEL_18;
    LOWORD(v6) = 0;
LABEL_17:
    *((_WORD *)this + 5) = v6 + 1;
    *(_DWORD *)v7 = a2;
    v7[1] = 0;
    result = v7 + 1;
    v7[2] = 0;
    v7[3] = 0;
    return result;
  }
  v8 = *((unsigned __int16 *)this + 5);
  do
  {
    v9 = v8 >> 1;
    v10 = &v4[4 * (v8 >> 1)];
    v12 = *(_DWORD *)v10;
    v11 = v10 + 4;
    v8 += ~(v8 >> 1);
    if (v12 < a2)
      v4 = v11;
    else
      v8 = v9;
  }
  while (v8);
  if (v4 != v7)
  {
    if (*(_DWORD *)v4 == a2)
      return v4 + 1;
    if (v6 < v3)
    {
      memmove(v4 + 4, v4, (char *)v7 - (char *)v4);
      LOWORD(v6) = *((_WORD *)this + 5);
      v7 = v4;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  if (v6 < v3)
    goto LABEL_17;
LABEL_18:
  google::protobuf::internal::ExtensionSet::GrowCapacity(this, v6 + 1);
  return (uint64_t **)google::protobuf::internal::ExtensionSet::Insert(this, a2);
}

uint64_t google::protobuf::internal::ExtensionSet::IsInitialized(google::protobuf::internal::ExtensionSet *this)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t IsInitialized;
  google::protobuf::internal::ExtensionSet::Extension *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;

  v1 = (_QWORD *)*((_QWORD *)this + 2);
  if (*((unsigned __int16 *)this + 4) >= 0x101u)
  {
    v8 = (_QWORD *)*v1;
    v7 = v1 + 1;
    v6 = v8;
    if (v8 == v7)
    {
      return 1;
    }
    else
    {
      do
      {
        IsInitialized = google::protobuf::internal::ExtensionSet::Extension::IsInitialized((google::protobuf::internal::ExtensionSet::Extension *)(v6 + 5));
        if (!(_DWORD)IsInitialized)
          break;
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v6[2];
            v11 = *v10 == (_QWORD)v6;
            v6 = v10;
          }
          while (!v11);
        }
        v6 = v10;
      }
      while (v10 != v7);
    }
  }
  else
  {
    while (1)
    {
      v3 = *((_QWORD *)this + 2) + 32 * *((unsigned __int16 *)this + 5);
      IsInitialized = v1 == (_QWORD *)v3;
      if (v1 == (_QWORD *)v3)
        break;
      v5 = (google::protobuf::internal::ExtensionSet::Extension *)(v1 + 1);
      if (!google::protobuf::internal::ExtensionSet::Extension::IsInitialized(v5))
        break;
      v1 = (_QWORD *)((char *)v5 + 24);
      if (*((unsigned __int16 *)this + 4) > 0x100u)
        google::protobuf::internal::ExtensionSet::IsInitialized();
    }
  }
  return IsInitialized;
}

uint64_t google::protobuf::internal::ExtensionSet::Extension::IsInitialized(google::protobuf::internal::ExtensionSet::Extension *this)
{
  uint64_t v2;
  std::string *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9;
  std::string v10[2];

  v2 = *((unsigned __int8 *)this + 8);
  if ((v2 - 19) <= 0xFFFFFFED)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    v3 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v3->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v2] != 10)
    return 1;
  if (*((_BYTE *)this + 9))
  {
    v4 = *(_QWORD *)this;
    if (*(int *)(*(_QWORD *)this + 8) >= 1)
    {
      v5 = 0;
      while (1)
      {
        v6 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(v4, v5);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6) & 1) == 0)
          break;
        ++v5;
        v4 = *(_QWORD *)this;
        if (v5 >= *(_DWORD *)(*(_QWORD *)this + 8))
          return 1;
      }
      return 0;
    }
    return 1;
  }
  if ((*((_BYTE *)this + 10) & 1) != 0)
    return 1;
  v7 = **(_QWORD **)this;
  if ((*((_BYTE *)this + 10) & 0x10) != 0)
    return ((*(uint64_t (**)(void))(v7 + 72))() & 1) != 0;
  result = (*(uint64_t (**)(void))(v7 + 48))();
  if ((_DWORD)result)
    return 1;
  return result;
}

void sub_1C21F15A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::FindExtensionInfoFromFieldNumber(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, _BYTE *a6)
{
  uint64_t result;
  uint64_t v10;
  std::string *v11;
  unsigned int v12;
  std::string *v13;
  char v14;
  std::string v15[2];

  result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)a4 + 16))(a4, a3, a5);
  if ((_DWORD)result)
  {
    v10 = *a5;
    if ((v10 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    }
    v12 = google::protobuf::internal::WireFormatLite::kWireTypeForFieldType[v10];
    *a6 = 0;
    if (a2 == 2 && a5[1])
    {
      if (v12 > 5)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 82);
        v13 = google::protobuf::internal::LogMessage::operator<<(v15, "can't reach here.");
        google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v13->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
      }
      else
      {
        result = 1;
        if (((1 << v12) & 0x1C) == 0)
        {
          *a6 = 1;
          return result;
        }
      }
    }
    return v12 == a2;
  }
  return result;
}

void sub_1C21F16D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::internal::ExtensionSet::ParseField(google::protobuf::internal::ExtensionSet *a1, unint64_t a2, google::protobuf::internal *a3, uint64_t a4, uint64_t *a5, int32x2_t *a6)
{
  unsigned int v9;
  unint64_t v11;
  std::string *v13;
  unsigned __int8 v14[39];
  unsigned __int8 v15;
  _QWORD v16[2];

  v9 = a2;
  v16[0] = &off_1E7BEC520;
  v16[1] = a4;
  v11 = a2 >> 3;
  v15 = 0;
  if ((google::protobuf::internal::ExtensionSet::FindExtensionInfoFromFieldNumber((uint64_t)a1, a2 & 7, a2 >> 3, (uint64_t)v16, v14, &v15) & 1) != 0)return (unsigned __int8 *)google::protobuf::internal::ExtensionSet::ParseFieldWithExtensionInfo<std::string>(a1, v11, v15, (uint64_t)v14, a5, a3, a6);
  if ((*a5 & 1) != 0)
    v13 = (std::string *)((*a5 & 0xFFFFFFFFFFFFFFFELL) + 8);
  else
    v13 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>(a5);
  return google::protobuf::internal::UnknownFieldParse(v9, v13, a3, (google::protobuf::internal::ParseContext *)a6);
}

google::protobuf::internal *google::protobuf::internal::ExtensionSet::ParseFieldWithExtensionInfo<std::string>(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, uint64_t a4, uint64_t *a5, google::protobuf::internal *this, int32x2_t *a7)
{
  google::protobuf::internal *v8;
  int v11;
  google::protobuf::internal::ExtensionSet *v12;
  std::string *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  google::protobuf::internal::ParseContext *v17;
  google::protobuf::internal *result;
  uint64_t *v19;
  google::protobuf::internal::ParseContext *v20;
  uint64_t *v21;
  google::protobuf::internal::ParseContext *v22;
  uint64_t *v23;
  google::protobuf::internal::ParseContext *v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  google::protobuf::MessageLite *v28;
  int v29;
  int v30;
  uint64_t *v31;
  int v32;
  unint64_t v33;
  uint64_t *v34;
  google::protobuf::internal::ParseContext *v35;
  uint64_t *v36;
  google::protobuf::internal::ParseContext *v37;
  uint64_t *v38;
  google::protobuf::internal::ParseContext *v39;
  uint64_t *v40;
  google::protobuf::internal::ParseContext *v41;
  uint64_t *v42;
  google::protobuf::internal::ParseContext *v43;
  uint64_t *v44;
  google::protobuf::internal::ParseContext *v45;
  uint64_t *v46;
  google::protobuf::internal::ParseContext *v47;
  uint64_t *v48;
  google::protobuf::internal::ParseContext *v49;
  uint64_t *v50;
  google::protobuf::internal::ParseContext *v51;
  double v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t *v57;
  int v58;
  int v59;
  uint64_t *v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  uint64_t *v68;
  int v69;
  unint64_t v70;
  std::string *v71;
  int v72;
  std::string::value_type *v73;
  char *SizeFallback;
  int v75;
  int v76;
  int v77;
  uint64_t *v78;
  int v79;
  int v80;
  int v81;
  uint64_t *v82;
  int v83;
  uint64_t *v84;
  int v85;
  int v86;
  int v87;
  BOOL v88;
  uint64_t v89;
  __int32 v90;
  int v91;
  uint64_t *v92;
  int v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  std::string *v100;
  char v101;
  std::string v102;
  uint64_t *v103;
  int v104;

  v8 = this;
  v11 = a2;
  v12 = a1;
  if (a3)
  {
    switch(*(_BYTE *)a4)
    {
      case 1:
        v34 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 1, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedDoubleParser((google::protobuf::internal *)v34, v8, (const char *)a7, v35);
        break;
      case 2:
        v36 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 2, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedFloatParser((google::protobuf::internal *)v36, v8, (const char *)a7, v37);
        break;
      case 3:
        v38 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 3, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedInt64Parser((google::protobuf::internal *)v38, v8, (const char *)a7, v39);
        break;
      case 4:
        v40 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 4, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedUInt64Parser((google::protobuf::internal *)v40, v8, (const char *)a7, v41);
        break;
      case 5:
        v16 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 5, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser((google::protobuf::internal *)v16, v8, (const char *)a7, v17);
        break;
      case 6:
        v42 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 6, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedFixed64Parser((google::protobuf::internal *)v42, v8, (const char *)a7, v43);
        break;
      case 7:
        v44 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 7, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedFixed32Parser((google::protobuf::internal *)v44, v8, (const char *)a7, v45);
        break;
      case 8:
        v46 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 8, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedBoolParser((google::protobuf::internal *)v46, v8, (const char *)a7, v47);
        break;
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/extension_set_inl.h", 79);
        v13 = google::protobuf::internal::LogMessage::operator<<(&v102, "Non-primitive types can't be packed.");
        google::protobuf::internal::LogFinisher::operator=((int)&v101, (const char **)&v13->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v102.__r_.__value_.__l.__data_);
        return v8;
      case 0xD:
        v19 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 13, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedUInt32Parser((google::protobuf::internal *)v19, v8, (const char *)a7, v20);
        break;
      case 0xE:
        v102.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 14, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        *(_OWORD *)&v102.__r_.__value_.__r.__words[1] = *(_OWORD *)(a4 + 8);
        v103 = a5;
        v104 = v11;
        return google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::PackedEnumParserArg<std::string>(void *,char const*,google::protobuf::internal::ParseContext *,BOOL (*)(void const*,int),void const*,google::protobuf::internal::InternalMetadata *,int)::{lambda(unsigned long long)#1}>((uint64_t)a7, v8, (uint64_t)&v102);
      case 0xF:
        v21 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 15, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedSFixed32Parser((google::protobuf::internal *)v21, v8, (const char *)a7, v22);
        break;
      case 0x10:
        v48 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 16, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedSFixed64Parser((google::protobuf::internal *)v48, v8, (const char *)a7, v49);
        break;
      case 0x11:
        v23 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 17, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedSInt32Parser((google::protobuf::internal *)v23, v8, (const char *)a7, v24);
        break;
      case 0x12:
        v50 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 18, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedSInt64Parser((google::protobuf::internal *)v50, v8, (const char *)a7, v51);
        break;
      default:
        return v8;
    }
    return result;
  }
  switch(*(_BYTE *)a4)
  {
    case 1:
      v8 = (google::protobuf::internal *)((char *)this + 8);
      v52 = *(double *)this;
      if (*(_BYTE *)(a4 + 1))
        google::protobuf::internal::ExtensionSet::AddDouble(a1, a2, 1, *(unsigned __int8 *)(a4 + 2), *(uint64_t **)(a4 + 24), v52);
      else
        google::protobuf::internal::ExtensionSet::SetDouble(a1, a2, 1, *(uint64_t **)(a4 + 24), v52);
      return v8;
    case 2:
      v8 = (google::protobuf::internal *)((char *)this + 4);
      v53 = *(float *)this;
      if (*(_BYTE *)(a4 + 1))
        google::protobuf::internal::ExtensionSet::AddFloat(a1, a2, 2, *(unsigned __int8 *)(a4 + 2), *(uint64_t **)(a4 + 24), v53);
      else
        google::protobuf::internal::ExtensionSet::SetFloat(a1, a2, 2, *(uint64_t **)(a4 + 24), v53);
      return v8;
    case 3:
      v54 = *(unsigned __int8 *)this;
      if (*(char *)this < 0)
      {
        v80 = v54 + (*((unsigned __int8 *)this + 1) << 7);
        v54 = (v80 - 128);
        if (*((char *)this + 1) < 0)
        {
          v8 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(this, (v80 - 128));
          if (!v8)
            return v8;
          v54 = v97;
        }
        else
        {
          v8 = (google::protobuf::internal *)((char *)this + 2);
        }
      }
      else
      {
        v8 = (google::protobuf::internal *)((char *)this + 1);
      }
      if (*(_BYTE *)(a4 + 1))
      {
        v67 = *(unsigned __int8 *)(a4 + 2);
        v68 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v69 = 3;
        goto LABEL_136;
      }
      v92 = *(uint64_t **)(a4 + 24);
      a1 = v12;
      a2 = v11;
      v93 = 3;
      goto LABEL_138;
    case 4:
      v55 = *(unsigned __int8 *)this;
      if (*(char *)this < 0)
      {
        v81 = v55 + (*((unsigned __int8 *)this + 1) << 7);
        v55 = (v81 - 128);
        if (*((char *)this + 1) < 0)
        {
          v8 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(this, (v81 - 128));
          if (!v8)
            return v8;
          v55 = v98;
        }
        else
        {
          v8 = (google::protobuf::internal *)((char *)this + 2);
        }
      }
      else
      {
        v8 = (google::protobuf::internal *)((char *)this + 1);
      }
      if (*(_BYTE *)(a4 + 1))
      {
        v56 = *(unsigned __int8 *)(a4 + 2);
        v57 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v58 = 4;
        goto LABEL_117;
      }
      v82 = *(uint64_t **)(a4 + 24);
      a1 = v12;
      a2 = v11;
      v83 = 4;
      goto LABEL_119;
    case 5:
      v25 = *(unsigned __int8 *)this;
      if (*(char *)this < 0)
      {
        v76 = v25 + (*((unsigned __int8 *)this + 1) << 7);
        v25 = v76 - 128;
        if (*((char *)this + 1) < 0)
        {
          v8 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(this, (v76 - 128));
          if (!v8)
            return v8;
          v25 = v94;
        }
        else
        {
          v8 = (google::protobuf::internal *)((char *)this + 2);
        }
      }
      else
      {
        v8 = (google::protobuf::internal *)((char *)this + 1);
      }
      if (*(_BYTE *)(a4 + 1))
      {
        v30 = *(unsigned __int8 *)(a4 + 2);
        v31 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v32 = 5;
        goto LABEL_104;
      }
      v78 = *(uint64_t **)(a4 + 24);
      a1 = v12;
      a2 = v11;
      v79 = 5;
      v95 = v25;
      goto LABEL_107;
    case 6:
      v8 = (google::protobuf::internal *)((char *)this + 8);
      v55 = *(_QWORD *)this;
      if (*(_BYTE *)(a4 + 1))
      {
        v56 = *(unsigned __int8 *)(a4 + 2);
        v57 = *(uint64_t **)(a4 + 24);
        v58 = 6;
LABEL_117:
        google::protobuf::internal::ExtensionSet::AddUInt64(a1, a2, v58, v56, v55, v57);
      }
      else
      {
        v82 = *(uint64_t **)(a4 + 24);
        v83 = 6;
LABEL_119:
        google::protobuf::internal::ExtensionSet::SetUInt64(a1, a2, v83, (uint64_t *)v55, v82);
      }
      return v8;
    case 7:
      v8 = (google::protobuf::internal *)((char *)this + 4);
      v29 = *(_DWORD *)this;
      if (*(_BYTE *)(a4 + 1))
      {
        v59 = *(unsigned __int8 *)(a4 + 2);
        v60 = *(uint64_t **)(a4 + 24);
        v61 = 7;
        goto LABEL_98;
      }
      v84 = *(uint64_t **)(a4 + 24);
      v85 = 7;
      v86 = *(_DWORD *)this;
      goto LABEL_100;
    case 8:
      v62 = *(unsigned __int8 *)this;
      if (*(char *)this < 0)
      {
        v62 = v62 + (*((unsigned __int8 *)this + 1) << 7) - 128;
        if (*((char *)this + 1) < 0)
        {
          v8 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(this, v62);
          if (!v8)
            return v8;
        }
        else
        {
          v8 = (google::protobuf::internal *)((char *)this + 2);
        }
      }
      else
      {
        v8 = (google::protobuf::internal *)((char *)this + 1);
      }
      if (*(_BYTE *)(a4 + 1))
        google::protobuf::internal::ExtensionSet::AddBool(v12, v11, 8, *(unsigned __int8 *)(a4 + 2), v62 != 0, *(uint64_t **)(a4 + 24));
      else
        google::protobuf::internal::ExtensionSet::SetBool(v12, v11, 8, v62 != 0, *(uint64_t **)(a4 + 24));
      return v8;
    case 9:
    case 0xC:
      v14 = *(uint64_t **)(a4 + 24);
      if (*(_BYTE *)(a4 + 1))
        v15 = (uint64_t)google::protobuf::internal::ExtensionSet::AddString(a1, a2, 9, v14);
      else
        v15 = google::protobuf::internal::ExtensionSet::MutableString(a1, a2, 9, v14);
      v71 = (std::string *)v15;
      v72 = *(unsigned __int8 *)v8;
      if ((*(char *)v8 & 0x80000000) == 0)
      {
        v73 = (char *)v8 + 1;
        return google::protobuf::internal::EpsCopyInputStream::ReadString((uint64_t)a7, v73, v72, v71);
      }
      SizeFallback = google::protobuf::internal::ReadSizeFallback(v8, (const char *)*(unsigned __int8 *)v8);
      if (SizeFallback)
      {
        v73 = SizeFallback;
        v72 = v75;
        return google::protobuf::internal::EpsCopyInputStream::ReadString((uint64_t)a7, v73, v72, v71);
      }
      return 0;
    case 0xA:
      v63 = *(_QWORD *)(a4 + 8);
      v64 = *(uint64_t **)(a4 + 24);
      if (*(_BYTE *)(a4 + 1))
        v65 = google::protobuf::internal::ExtensionSet::AddMessage(a1, a2, 10, v63, v64);
      else
        v65 = google::protobuf::internal::ExtensionSet::MutableMessage(a1, a2, 10, v63, v64);
      v87 = a7[11].i32[0];
      v88 = __OFSUB__(v87--, 1);
      a7[11].i32[0] = v87;
      if (v87 < 0 != v88)
        return 0;
      ++a7[11].i32[1];
      v89 = (*(uint64_t (**)(uint64_t, google::protobuf::internal *, int32x2_t *))(*(_QWORD *)v65 + 88))(v65, v8, a7);
      a7[11] = vadd_s32(a7[11], (int32x2_t)0xFFFFFFFF00000001);
      v90 = a7[10].i32[0];
      a7[10].i32[0] = 0;
      if (v90 == ((8 * v11) | 3))
        return (google::protobuf::internal *)v89;
      else
        return 0;
    case 0xB:
      v26 = *(_QWORD *)(a4 + 8);
      v27 = *(uint64_t **)(a4 + 24);
      if (*(_BYTE *)(a4 + 1))
        v28 = (google::protobuf::MessageLite *)google::protobuf::internal::ExtensionSet::AddMessage(a1, a2, 11, v26, v27);
      else
        v28 = (google::protobuf::MessageLite *)google::protobuf::internal::ExtensionSet::MutableMessage(a1, a2, 11, v26, v27);
      return (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage((google::protobuf::internal::ParseContext *)a7, v28, (const char *)v8);
    case 0xD:
      v29 = *(unsigned __int8 *)this;
      if (*(char *)this < 0)
      {
        v77 = v29 + (*((unsigned __int8 *)this + 1) << 7);
        v29 = v77 - 128;
        if (*((char *)this + 1) < 0)
        {
          v8 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(this, (v77 - 128));
          if (!v8)
            return v8;
          v29 = v96;
        }
        else
        {
          v8 = (google::protobuf::internal *)((char *)this + 2);
        }
      }
      else
      {
        v8 = (google::protobuf::internal *)((char *)this + 1);
      }
      if (*(_BYTE *)(a4 + 1))
      {
        v59 = *(unsigned __int8 *)(a4 + 2);
        v60 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v61 = 13;
LABEL_98:
        google::protobuf::internal::ExtensionSet::AddUInt32(a1, a2, v61, v59, v29, v60);
      }
      else
      {
        v84 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v85 = 13;
        v86 = v29;
LABEL_100:
        google::protobuf::internal::ExtensionSet::SetUInt32(a1, a2, v85, v86, v84);
      }
      return v8;
    case 0xE:
      v66 = *(unsigned __int8 *)this;
      if (*(char *)this < 0)
      {
        v91 = v66 + (*((unsigned __int8 *)this + 1) << 7);
        v66 = (v91 - 128);
        if (*((char *)this + 1) < 0)
        {
          v8 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(this, (v91 - 128));
          if (!v8)
            return v8;
          v66 = v99;
        }
        else
        {
          v8 = (google::protobuf::internal *)((char *)this + 2);
        }
      }
      else
      {
        v8 = (google::protobuf::internal *)((char *)this + 1);
      }
      if (((*(uint64_t (**)(_QWORD, unint64_t))(a4 + 8))(*(_QWORD *)(a4 + 16), v66) & 1) != 0)
      {
        if (*(_BYTE *)(a4 + 1))
          google::protobuf::internal::ExtensionSet::AddEnum(v12, v11, 14, *(unsigned __int8 *)(a4 + 2), v66, *(uint64_t **)(a4 + 24));
        else
          google::protobuf::internal::ExtensionSet::SetEnum(v12, v11, 14, v66, *(uint64_t **)(a4 + 24));
      }
      else
      {
        if ((*a5 & 1) != 0)
          v100 = (std::string *)((*a5 & 0xFFFFFFFFFFFFFFFELL) + 8);
        else
          v100 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>(a5);
        google::protobuf::internal::WriteVarint(v11, v66, v100);
      }
      return v8;
    case 0xF:
      v8 = (google::protobuf::internal *)((char *)this + 4);
      v25 = *(_DWORD *)this;
      if (*(_BYTE *)(a4 + 1))
      {
        v30 = *(unsigned __int8 *)(a4 + 2);
        v31 = *(uint64_t **)(a4 + 24);
        v32 = 15;
        goto LABEL_104;
      }
      v78 = *(uint64_t **)(a4 + 24);
      v79 = 15;
      goto LABEL_106;
    case 0x10:
      v8 = (google::protobuf::internal *)((char *)this + 8);
      v54 = *(_QWORD *)this;
      if (*(_BYTE *)(a4 + 1))
      {
        v67 = *(unsigned __int8 *)(a4 + 2);
        v68 = *(uint64_t **)(a4 + 24);
        v69 = 16;
        goto LABEL_136;
      }
      v92 = *(uint64_t **)(a4 + 24);
      v93 = 16;
      goto LABEL_138;
    case 0x11:
      LODWORD(v33) = *(unsigned __int8 *)this;
      if (*(char *)this < 0)
      {
        v33 = v33 + (*((unsigned __int8 *)this + 1) << 7) - 128;
        if (*((char *)this + 1) < 0)
        {
          v8 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(this, v33);
          if (!v8)
            return v8;
        }
        else
        {
          v8 = (google::protobuf::internal *)((char *)this + 2);
        }
      }
      else
      {
        v8 = (google::protobuf::internal *)((char *)this + 1);
      }
      v25 = -(v33 & 1) ^ (v33 >> 1);
      if (*(_BYTE *)(a4 + 1))
      {
        v30 = *(unsigned __int8 *)(a4 + 2);
        v31 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v32 = 17;
LABEL_104:
        google::protobuf::internal::ExtensionSet::AddInt32(a1, a2, v32, v30, v25, v31);
      }
      else
      {
        v78 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v79 = 17;
LABEL_106:
        v95 = v25;
LABEL_107:
        google::protobuf::internal::ExtensionSet::SetInt32(a1, a2, v79, v95, v78);
      }
      return v8;
    case 0x12:
      v70 = *(unsigned __int8 *)this;
      if (*(char *)this < 0)
      {
        v70 = v70 + (*((unsigned __int8 *)this + 1) << 7) - 128;
        if (*((char *)this + 1) < 0)
        {
          v8 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(this, v70);
          if (!v8)
            return v8;
        }
        else
        {
          v8 = (google::protobuf::internal *)((char *)this + 2);
        }
      }
      else
      {
        v8 = (google::protobuf::internal *)((char *)this + 1);
      }
      v54 = -(uint64_t)(v70 & 1) ^ (v70 >> 1);
      if (*(_BYTE *)(a4 + 1))
      {
        v67 = *(unsigned __int8 *)(a4 + 2);
        v68 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v69 = 18;
LABEL_136:
        google::protobuf::internal::ExtensionSet::AddInt64(a1, a2, v69, v67, v54, v68);
      }
      else
      {
        v92 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v93 = 18;
LABEL_138:
        google::protobuf::internal::ExtensionSet::SetInt64(a1, a2, v93, (uint64_t *)v54, v92);
      }
      return v8;
    default:
      return v8;
  }
}

void sub_1C21F2310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::internal::ExtensionSet::_InternalSerialize(google::protobuf::internal::ExtensionSet *this, signed int a2, int a3, unsigned __int8 *a4, google::protobuf::io::EpsCopyOutputStream *a5)
{
  unsigned int *v7;
  unint64_t v8;
  unsigned int *v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  signed int v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  int **v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  BOOL v26;

  v7 = (unsigned int *)*((_QWORD *)this + 2);
  if (*((unsigned __int16 *)this + 4) >= 0x101u)
  {
    v18 = *((_QWORD *)v7 + 1);
    v17 = v7 + 2;
    v16 = v18;
    if (v18)
    {
      v19 = (int **)v17;
      do
      {
        v20 = *(_DWORD *)(v16 + 32);
        v21 = v20 < a2;
        if (v20 >= a2)
          v22 = (uint64_t *)v16;
        else
          v22 = (uint64_t *)(v16 + 8);
        if (!v21)
          v19 = (int **)v16;
        v16 = *v22;
      }
      while (*v22);
      if (v19 != (int **)v17)
      {
        do
        {
          v23 = *((unsigned int *)v19 + 8);
          if ((int)v23 >= a3)
            break;
          a4 = google::protobuf::internal::ExtensionSet::Extension::InternalSerializeFieldWithCachedSizesToArray(v19 + 5, v23, (char *)a4, a5);
          v24 = (unsigned int *)v19[1];
          if (v24)
          {
            do
            {
              v25 = v24;
              v24 = *(unsigned int **)v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              v25 = (unsigned int *)v19[2];
              v26 = *(_QWORD *)v25 == (_QWORD)v19;
              v19 = (int **)v25;
            }
            while (!v26);
          }
          v19 = (int **)v25;
        }
        while (v25 != v17);
      }
    }
  }
  else
  {
    v8 = *((unsigned __int16 *)this + 5);
    if (*((_WORD *)this + 5))
    {
      v9 = &v7[8 * v8];
      do
      {
        v10 = v8 >> 1;
        v11 = &v7[8 * (v8 >> 1)];
        v13 = *v11;
        v12 = v11 + 8;
        v8 += ~(v8 >> 1);
        if (v13 < a2)
          v7 = v12;
        else
          v8 = v10;
      }
      while (v8);
      while (v7 != v9)
      {
        v14 = *v7;
        if ((int)v14 >= a3)
          break;
        a4 = google::protobuf::internal::ExtensionSet::Extension::InternalSerializeFieldWithCachedSizesToArray((int **)v7 + 1, v14, (char *)a4, a5);
        v7 += 8;
      }
    }
  }
  return a4;
}

unsigned __int8 *google::protobuf::internal::ExtensionSet::Extension::InternalSerializeFieldWithCachedSizesToArray(int **this, uint64_t a2, char *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  unsigned int v8;
  _BYTE *v9;
  int v10;
  std::string *v11;
  int *v12;
  unsigned int v13;
  unsigned int v14;
  int **v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  std::string *v19;
  int *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  std::string *v40;
  std::string *v41;
  int *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int *v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  int *v54;
  int v55;
  int *v56;
  int v57;
  int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  int *v63;
  int v64;
  int *v65;
  int v66;
  int *v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int *v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int *v79;
  int v80;
  int *v81;
  int v82;
  int *v83;
  int v84;
  int *v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  int *v91;
  int v92;
  int *v93;
  int v94;
  uint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  int *v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  char v105;
  int v106;
  _DWORD *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  int *v111;
  int v112;
  unsigned int v113;
  char v114;
  unsigned int v115;
  unint64_t v116;
  _BYTE *v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int *v124;
  int v125;
  unsigned int v126;
  char v127;
  unsigned int v128;
  unint64_t v129;
  _BYTE *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  int *v137;
  int v138;
  unsigned int v139;
  char v140;
  unsigned int v141;
  unint64_t v142;
  _BYTE *v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  int *v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  char v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  _QWORD *v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  int *v162;
  int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  char v167;
  int v168;
  _DWORD *v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  int *v173;
  int v174;
  unsigned int v175;
  char v176;
  unsigned int v177;
  char v178;
  _BYTE *v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  uint64_t v183;
  int v184;
  unsigned int v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int64_t v191;
  _BYTE *v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  char *v196;
  const void *v197;
  uint64_t v198;
  int v199;
  unsigned int v200;
  char v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  char v205;
  uint64_t v206;
  char *v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  char *v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t v215;
  int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  char v220;
  uint64_t v221;
  uint64_t v222;
  _BYTE *v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  _BYTE *v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t v232;
  int v233;
  unsigned int v234;
  uint64_t v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int64_t v240;
  _BYTE *v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  char *v245;
  const void *v246;
  int *v247;
  int v248;
  unsigned int v249;
  char v250;
  unsigned int v251;
  unsigned int v252;
  _BYTE *v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  int *v260;
  int v261;
  unsigned int v262;
  char v263;
  unsigned int v264;
  unint64_t v265;
  _BYTE *v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  int *v273;
  int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  char v278;
  int v279;
  _DWORD *v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  int *v284;
  int v285;
  unsigned int v286;
  unsigned int v287;
  char v288;
  unsigned int v289;
  unsigned int v290;
  uint64_t v291;
  _QWORD *v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  int *v296;
  int v297;
  unsigned int v298;
  char v299;
  unsigned int v300;
  int v301;
  _BYTE *v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  int *v310;
  int v311;
  unsigned int v312;
  char v313;
  unsigned int v314;
  uint64_t v315;
  _BYTE *v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unsigned int v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int *v327;
  unsigned int v328;
  unsigned int v329;
  unint64_t v330;
  unsigned int v331;
  char *v332;
  unsigned int v333;
  unsigned int v334;
  unsigned int v335;
  unsigned int v336;
  unsigned int v337;
  unsigned int v338;
  int *v339;
  int64_t v340;
  int *v341;
  unsigned int v342;
  unsigned int v343;
  unsigned int v344;
  char *v345;
  int *v346;
  unsigned int v347;
  _BYTE *v348;
  unsigned int v349;
  unsigned int v350;
  int v351;
  unsigned int v352;
  uint64_t v353;
  unsigned int v354;
  unsigned int v355;
  unsigned int v356;
  unsigned int v357;
  unsigned int v358;
  unsigned int v360;
  unsigned int v361;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unsigned int v369;
  unsigned int v370;
  _BYTE *v371;
  unsigned int v372;
  unsigned int v373;
  unsigned int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unsigned int v379;
  unsigned int v380;
  unsigned int v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t v384;
  unsigned int v385;
  unsigned int v386;
  unint64_t v387;
  unsigned int v388;
  unsigned int v389;
  unint64_t v390;
  unsigned int v391;
  unsigned int v392;
  unsigned int v393;
  unsigned int v394;
  unsigned int v395;
  unsigned int v396;
  unsigned int v397;
  unsigned int v398;
  unsigned int v399;
  unsigned int v400;
  unsigned int v401;
  unsigned int v402;
  unsigned int v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  unsigned int v408;
  unint64_t v409;
  unint64_t v410;
  unsigned int v411;
  unsigned int v412;
  unsigned int v413;
  unint64_t v414;
  unsigned int v415;
  unsigned int v416;
  unint64_t v417;
  unint64_t v418;
  unsigned int v419;
  char *v420;
  unsigned int v421;
  unsigned int v422;
  unsigned int v423;
  _BYTE *v424;
  unsigned int v425;
  unsigned int v426;
  unsigned int v427;
  unsigned int v429;
  unsigned int v430;
  char v431;
  std::string v432[2];

  v5 = a3;
  if (*((_BYTE *)this + 9))
  {
    if (*((_BYTE *)this + 11))
    {
      if (*((_DWORD *)this + 3))
      {
        if (*(_QWORD *)a4 <= (unint64_t)a3)
          v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, a3);
        v8 = (8 * a2) | 2;
        if (v8 > 0x7F)
        {
          *v5 = (8 * a2) | 0x82;
          v32 = (8 * a2) >> 7;
          if (v8 >> 14)
          {
            v9 = v5 + 2;
            do
            {
              *(v9 - 1) = v32 | 0x80;
              v33 = v32 >> 7;
              ++v9;
              v34 = v32 >> 14;
              v32 >>= 7;
            }
            while (v34);
            *(v9 - 1) = v33;
          }
          else
          {
            v5[1] = v32;
            v9 = v5 + 2;
          }
        }
        else
        {
          *v5 = v8;
          v9 = v5 + 1;
        }
        v35 = *((int *)this + 3);
        if (v35 > 0x7F)
        {
          *v9 = v35 | 0x80;
          v36 = v35 >> 7;
          if (v35 >> 14)
          {
            v5 = v9 + 2;
            do
            {
              *(v5 - 1) = v36 | 0x80;
              v37 = v36 >> 7;
              ++v5;
              v38 = v36 >> 14;
              v36 >>= 7;
            }
            while (v38);
            *(v5 - 1) = v37;
          }
          else
          {
            v9[1] = v36;
            v5 = v9 + 2;
          }
        }
        else
        {
          *v9 = v35;
          v5 = v9 + 1;
        }
        v39 = *((unsigned __int8 *)this + 8);
        if ((v39 - 19) <= 0xFFFFFFED)
        {
          google::protobuf::internal::LogMessage::LogMessage((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
          v40 = google::protobuf::internal::LogMessage::operator<<(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
          google::protobuf::internal::LogFinisher::operator=((int)&v431, (const char **)&v40->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&v432[0].__r_.__value_.__l.__data_);
        }
        switch(v39)
        {
          case 1:
            v63 = *this;
            if (**this >= 1)
            {
              v64 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v63 = *this;
                }
                *(_QWORD *)v5 = *(_QWORD *)google::protobuf::RepeatedField<double>::Get(v63, v64);
                v5 += 8;
                ++v64;
                v63 = *this;
              }
              while (v64 < **this);
            }
            break;
          case 2:
            v65 = *this;
            if (**this >= 1)
            {
              v66 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v65 = *this;
                }
                *(_DWORD *)v5 = *(_DWORD *)google::protobuf::RepeatedField<float>::Get(v65, v66);
                v5 += 4;
                ++v66;
                v65 = *this;
              }
              while (v66 < **this);
            }
            break;
          case 3:
            v67 = *this;
            if (**this >= 1)
            {
              v68 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v67 = *this;
                }
                v69 = *(_QWORD *)google::protobuf::RepeatedField<long long>::Get(v67, v68);
                if (v69 > 0x7F)
                {
                  *v5 = v69 | 0x80;
                  v70 = v69 >> 7;
                  if (v69 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v70 | 0x80;
                      v71 = v70 >> 7;
                      ++v5;
                      v72 = v70 >> 14;
                      v70 >>= 7;
                    }
                    while (v72);
                    *(v5 - 1) = v71;
                  }
                  else
                  {
                    v5[1] = v70;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v69;
                }
                ++v68;
                v67 = *this;
              }
              while (v68 < **this);
            }
            break;
          case 4:
            v73 = *this;
            if (**this >= 1)
            {
              v74 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v73 = *this;
                }
                v75 = *(_QWORD *)google::protobuf::RepeatedField<unsigned long long>::Get(v73, v74);
                if (v75 > 0x7F)
                {
                  *v5 = v75 | 0x80;
                  v76 = v75 >> 7;
                  if (v75 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v76 | 0x80;
                      v77 = v76 >> 7;
                      ++v5;
                      v78 = v76 >> 14;
                      v76 >>= 7;
                    }
                    while (v78);
                    *(v5 - 1) = v77;
                  }
                  else
                  {
                    v5[1] = v76;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v75;
                }
                ++v74;
                v73 = *this;
              }
              while (v74 < **this);
            }
            break;
          case 5:
            v42 = *this;
            if (**this >= 1)
            {
              v43 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v42 = *this;
                }
                v44 = *(int *)google::protobuf::RepeatedField<int>::Get(v42, v43);
                if (v44 > 0x7F)
                {
                  *v5 = v44 | 0x80;
                  v45 = v44 >> 7;
                  if (v44 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v45 | 0x80;
                      v46 = v45 >> 7;
                      ++v5;
                      v47 = v45 >> 14;
                      v45 >>= 7;
                    }
                    while (v47);
                    *(v5 - 1) = v46;
                  }
                  else
                  {
                    v5[1] = v45;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v44;
                }
                ++v43;
                v42 = *this;
              }
              while (v43 < **this);
            }
            break;
          case 6:
            v79 = *this;
            if (**this >= 1)
            {
              v80 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v79 = *this;
                }
                *(_QWORD *)v5 = *(_QWORD *)google::protobuf::RepeatedField<unsigned long long>::Get(v79, v80);
                v5 += 8;
                ++v80;
                v79 = *this;
              }
              while (v80 < **this);
            }
            break;
          case 7:
            v81 = *this;
            if (**this >= 1)
            {
              v82 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v81 = *this;
                }
                *(_DWORD *)v5 = *(_DWORD *)google::protobuf::RepeatedField<unsigned int>::Get(v81, v82);
                v5 += 4;
                ++v82;
                v81 = *this;
              }
              while (v82 < **this);
            }
            break;
          case 8:
            v83 = *this;
            if (**this >= 1)
            {
              v84 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v83 = *this;
                }
                *v5++ = *(_BYTE *)google::protobuf::RepeatedField<BOOL>::Get(v83, v84++);
                v83 = *this;
              }
              while (v84 < **this);
            }
            break;
          case 9:
          case 10:
          case 11:
          case 12:
            google::protobuf::internal::LogMessage::LogMessage((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1966);
            v41 = google::protobuf::internal::LogMessage::operator<<(v432, "Non-primitive types can't be packed.");
            google::protobuf::internal::LogFinisher::operator=((int)&v431, (const char **)&v41->__r_.__value_.__l.__data_);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&v432[0].__r_.__value_.__l.__data_);
            break;
          case 13:
            v48 = *this;
            if (**this >= 1)
            {
              v49 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v48 = *this;
                }
                v50 = *(_DWORD *)google::protobuf::RepeatedField<unsigned int>::Get(v48, v49);
                if (v50 > 0x7F)
                {
                  *v5 = v50 | 0x80;
                  v51 = v50 >> 7;
                  if (v50 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v51 | 0x80;
                      v52 = v51 >> 7;
                      ++v5;
                      v53 = v51 >> 14;
                      v51 >>= 7;
                    }
                    while (v53);
                    *(v5 - 1) = v52;
                  }
                  else
                  {
                    v5[1] = v51;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v50;
                }
                ++v49;
                v48 = *this;
              }
              while (v49 < **this);
            }
            break;
          case 14:
            v85 = *this;
            if (**this >= 1)
            {
              v86 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v85 = *this;
                }
                v87 = *(int *)google::protobuf::RepeatedField<int>::Get(v85, v86);
                if (v87 > 0x7F)
                {
                  *v5 = v87 | 0x80;
                  v88 = v87 >> 7;
                  if (v87 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v88 | 0x80;
                      v89 = v88 >> 7;
                      ++v5;
                      v90 = v88 >> 14;
                      v88 >>= 7;
                    }
                    while (v90);
                    *(v5 - 1) = v89;
                  }
                  else
                  {
                    v5[1] = v88;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v87;
                }
                ++v86;
                v85 = *this;
              }
              while (v86 < **this);
            }
            break;
          case 15:
            v54 = *this;
            if (**this >= 1)
            {
              v55 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v54 = *this;
                }
                *(_DWORD *)v5 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get(v54, v55);
                v5 += 4;
                ++v55;
                v54 = *this;
              }
              while (v55 < **this);
            }
            break;
          case 16:
            v91 = *this;
            if (**this >= 1)
            {
              v92 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v91 = *this;
                }
                *(_QWORD *)v5 = *(_QWORD *)google::protobuf::RepeatedField<long long>::Get(v91, v92);
                v5 += 8;
                ++v92;
                v91 = *this;
              }
              while (v92 < **this);
            }
            break;
          case 17:
            v56 = *this;
            if (**this >= 1)
            {
              v57 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v56 = *this;
                }
                v58 = (int *)google::protobuf::RepeatedField<int>::Get(v56, v57);
                v59 = (2 * *v58) ^ (*v58 >> 31);
                if (v59 > 0x7F)
                {
                  *v5 = v59 | 0x80;
                  v60 = v59 >> 7;
                  if (v59 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v60 | 0x80;
                      v61 = v60 >> 7;
                      ++v5;
                      v62 = v60 >> 14;
                      v60 >>= 7;
                    }
                    while (v62);
                    *(v5 - 1) = v61;
                  }
                  else
                  {
                    v5[1] = v60;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v59;
                }
                ++v57;
                v56 = *this;
              }
              while (v57 < **this);
            }
            break;
          case 18:
            v93 = *this;
            if (**this >= 1)
            {
              v94 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v93 = *this;
                }
                v95 = (uint64_t *)google::protobuf::RepeatedField<long long>::Get(v93, v94);
                v96 = (2 * *v95) ^ (*v95 >> 63);
                if (v96 > 0x7F)
                {
                  *v5 = v96 | 0x80;
                  v97 = v96 >> 7;
                  if (v96 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v97 | 0x80;
                      v98 = v97 >> 7;
                      ++v5;
                      v99 = v97 >> 14;
                      v97 >>= 7;
                    }
                    while (v99);
                    *(v5 - 1) = v98;
                  }
                  else
                  {
                    v5[1] = v97;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v96;
                }
                ++v94;
                v93 = *this;
              }
              while (v94 < **this);
            }
            break;
          default:
            return (unsigned __int8 *)v5;
        }
      }
      return (unsigned __int8 *)v5;
    }
    v18 = *((unsigned __int8 *)this + 8);
    if ((v18 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v19 = google::protobuf::internal::LogMessage::operator<<(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v431, (const char **)&v19->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v432[0].__r_.__value_.__l.__data_);
    }
    switch(v18)
    {
      case 1:
        v20 = *this;
        if (**this >= 1)
        {
          v21 = 0;
          v22 = 8 * a2;
          v23 = (8 * a2) | 1;
          v24 = (8 * a2) | 0x81;
          v25 = (a2 >> 4) & 0x1FFFFFF;
          v26 = v22 >> 7;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v20 = *this;
            }
            v27 = *(_QWORD *)google::protobuf::RepeatedField<double>::Get(v20, v21);
            if (v23 > 0x7F)
            {
              *v5 = v24;
              if (v23 >= 0x4000)
              {
                v28 = v5 + 2;
                v29 = v25;
                do
                {
                  *((_BYTE *)v28 - 1) = v29 | 0x80;
                  v30 = v29 >> 7;
                  v28 = (_QWORD *)((char *)v28 + 1);
                  v31 = v29 >> 14;
                  v29 >>= 7;
                }
                while (v31);
                *((_BYTE *)v28 - 1) = v30;
              }
              else
              {
                v5[1] = v26;
                v28 = v5 + 2;
              }
            }
            else
            {
              *v5 = v23;
              v28 = v5 + 1;
            }
            *v28 = v27;
            v5 = (char *)(v28 + 1);
            ++v21;
            v20 = *this;
          }
          while (v21 < **this);
        }
        return (unsigned __int8 *)v5;
      case 2:
        v100 = *this;
        if (**this >= 1)
        {
          v101 = 0;
          v102 = (8 * a2) | 5;
          v103 = (a2 >> 4) & 0x1FFFFFF;
          v104 = (8 * a2) >> 7;
          v105 = (8 * a2) | 0x85;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v100 = *this;
            }
            v106 = *(_DWORD *)google::protobuf::RepeatedField<float>::Get(v100, v101);
            if (v102 > 0x7F)
            {
              *v5 = v105;
              if (v102 >= 0x4000)
              {
                v107 = v5 + 2;
                v108 = v103;
                do
                {
                  *((_BYTE *)v107 - 1) = v108 | 0x80;
                  v109 = v108 >> 7;
                  v107 = (_DWORD *)((char *)v107 + 1);
                  v110 = v108 >> 14;
                  v108 >>= 7;
                }
                while (v110);
                *((_BYTE *)v107 - 1) = v109;
              }
              else
              {
                v5[1] = v104;
                v107 = v5 + 2;
              }
            }
            else
            {
              *v5 = v102;
              v107 = v5 + 1;
            }
            *v107 = v106;
            v5 = (char *)(v107 + 1);
            ++v101;
            v100 = *this;
          }
          while (v101 < **this);
        }
        return (unsigned __int8 *)v5;
      case 3:
        v111 = *this;
        if (**this >= 1)
        {
          v112 = 0;
          v113 = 8 * a2;
          v114 = (8 * a2) | 0x80;
          v115 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v111 = *this;
            }
            v116 = *(_QWORD *)google::protobuf::RepeatedField<long long>::Get(v111, v112);
            if (v113 > 0x7F)
            {
              *v5 = v114;
              if (v113 >= 0x4000)
              {
                v117 = v5 + 2;
                v118 = v115;
                do
                {
                  *(v117 - 1) = v118 | 0x80;
                  v119 = v118 >> 7;
                  ++v117;
                  v120 = v118 >> 14;
                  v118 >>= 7;
                }
                while (v120);
                *(v117 - 1) = v119;
              }
              else
              {
                v5[1] = v113 >> 7;
                v117 = v5 + 2;
              }
            }
            else
            {
              v117 = v5 + 1;
              *v5 = v113;
            }
            if (v116 > 0x7F)
            {
              *v117 = v116 | 0x80;
              v121 = v116 >> 7;
              if (v116 >> 14)
              {
                v5 = v117 + 2;
                do
                {
                  *(v5 - 1) = v121 | 0x80;
                  v122 = v121 >> 7;
                  ++v5;
                  v123 = v121 >> 14;
                  v121 >>= 7;
                }
                while (v123);
                *(v5 - 1) = v122;
              }
              else
              {
                v117[1] = v121;
                v5 = v117 + 2;
              }
            }
            else
            {
              *v117 = v116;
              v5 = v117 + 1;
            }
            ++v112;
            v111 = *this;
          }
          while (v112 < **this);
        }
        return (unsigned __int8 *)v5;
      case 4:
        v124 = *this;
        if (**this >= 1)
        {
          v125 = 0;
          v126 = 8 * a2;
          v127 = (8 * a2) | 0x80;
          v128 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v124 = *this;
            }
            v129 = *(_QWORD *)google::protobuf::RepeatedField<unsigned long long>::Get(v124, v125);
            if (v126 > 0x7F)
            {
              *v5 = v127;
              if (v126 >= 0x4000)
              {
                v130 = v5 + 2;
                v131 = v128;
                do
                {
                  *(v130 - 1) = v131 | 0x80;
                  v132 = v131 >> 7;
                  ++v130;
                  v133 = v131 >> 14;
                  v131 >>= 7;
                }
                while (v133);
                *(v130 - 1) = v132;
              }
              else
              {
                v5[1] = v126 >> 7;
                v130 = v5 + 2;
              }
            }
            else
            {
              v130 = v5 + 1;
              *v5 = v126;
            }
            if (v129 > 0x7F)
            {
              *v130 = v129 | 0x80;
              v134 = v129 >> 7;
              if (v129 >> 14)
              {
                v5 = v130 + 2;
                do
                {
                  *(v5 - 1) = v134 | 0x80;
                  v135 = v134 >> 7;
                  ++v5;
                  v136 = v134 >> 14;
                  v134 >>= 7;
                }
                while (v136);
                *(v5 - 1) = v135;
              }
              else
              {
                v130[1] = v134;
                v5 = v130 + 2;
              }
            }
            else
            {
              *v130 = v129;
              v5 = v130 + 1;
            }
            ++v125;
            v124 = *this;
          }
          while (v125 < **this);
        }
        return (unsigned __int8 *)v5;
      case 5:
        v137 = *this;
        if (**this >= 1)
        {
          v138 = 0;
          v139 = 8 * a2;
          v140 = (8 * a2) | 0x80;
          v141 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v137 = *this;
            }
            v142 = *(int *)google::protobuf::RepeatedField<int>::Get(v137, v138);
            if (v139 > 0x7F)
            {
              *v5 = v140;
              if (v139 >= 0x4000)
              {
                v143 = v5 + 2;
                v144 = v141;
                do
                {
                  *(v143 - 1) = v144 | 0x80;
                  v145 = v144 >> 7;
                  ++v143;
                  v146 = v144 >> 14;
                  v144 >>= 7;
                }
                while (v146);
                *(v143 - 1) = v145;
              }
              else
              {
                v5[1] = v139 >> 7;
                v143 = v5 + 2;
              }
            }
            else
            {
              v143 = v5 + 1;
              *v5 = v139;
            }
            if (v142 > 0x7F)
            {
              *v143 = v142 | 0x80;
              v147 = v142 >> 7;
              if (v142 >> 14)
              {
                v5 = v143 + 2;
                do
                {
                  *(v5 - 1) = v147 | 0x80;
                  v148 = v147 >> 7;
                  ++v5;
                  v149 = v147 >> 14;
                  v147 >>= 7;
                }
                while (v149);
                *(v5 - 1) = v148;
              }
              else
              {
                v143[1] = v147;
                v5 = v143 + 2;
              }
            }
            else
            {
              *v143 = v142;
              v5 = v143 + 1;
            }
            ++v138;
            v137 = *this;
          }
          while (v138 < **this);
        }
        return (unsigned __int8 *)v5;
      case 6:
        v150 = *this;
        if (**this >= 1)
        {
          v151 = 0;
          v152 = 8 * a2;
          v153 = (8 * a2) | 1;
          v154 = (8 * a2) | 0x81;
          v155 = (a2 >> 4) & 0x1FFFFFF;
          v156 = v152 >> 7;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v150 = *this;
            }
            v157 = *(_QWORD *)google::protobuf::RepeatedField<unsigned long long>::Get(v150, v151);
            if (v153 > 0x7F)
            {
              *v5 = v154;
              if (v153 >= 0x4000)
              {
                v158 = v5 + 2;
                v159 = v155;
                do
                {
                  *((_BYTE *)v158 - 1) = v159 | 0x80;
                  v160 = v159 >> 7;
                  v158 = (_QWORD *)((char *)v158 + 1);
                  v161 = v159 >> 14;
                  v159 >>= 7;
                }
                while (v161);
                *((_BYTE *)v158 - 1) = v160;
              }
              else
              {
                v5[1] = v156;
                v158 = v5 + 2;
              }
            }
            else
            {
              *v5 = v153;
              v158 = v5 + 1;
            }
            *v158 = v157;
            v5 = (char *)(v158 + 1);
            ++v151;
            v150 = *this;
          }
          while (v151 < **this);
        }
        return (unsigned __int8 *)v5;
      case 7:
        v162 = *this;
        if (**this >= 1)
        {
          v163 = 0;
          v164 = (8 * a2) | 5;
          v165 = (a2 >> 4) & 0x1FFFFFF;
          v166 = (8 * a2) >> 7;
          v167 = (8 * a2) | 0x85;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v162 = *this;
            }
            v168 = *(_DWORD *)google::protobuf::RepeatedField<unsigned int>::Get(v162, v163);
            if (v164 > 0x7F)
            {
              *v5 = v167;
              if (v164 >= 0x4000)
              {
                v169 = v5 + 2;
                v170 = v165;
                do
                {
                  *((_BYTE *)v169 - 1) = v170 | 0x80;
                  v171 = v170 >> 7;
                  v169 = (_DWORD *)((char *)v169 + 1);
                  v172 = v170 >> 14;
                  v170 >>= 7;
                }
                while (v172);
                *((_BYTE *)v169 - 1) = v171;
              }
              else
              {
                v5[1] = v166;
                v169 = v5 + 2;
              }
            }
            else
            {
              *v5 = v164;
              v169 = v5 + 1;
            }
            *v169 = v168;
            v5 = (char *)(v169 + 1);
            ++v163;
            v162 = *this;
          }
          while (v163 < **this);
        }
        return (unsigned __int8 *)v5;
      case 8:
        v173 = *this;
        if (**this >= 1)
        {
          v174 = 0;
          v175 = 8 * a2;
          v176 = (8 * a2) | 0x80;
          v177 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v173 = *this;
            }
            v178 = *(_BYTE *)google::protobuf::RepeatedField<BOOL>::Get(v173, v174);
            if (v175 > 0x7F)
            {
              *v5 = v176;
              if (v175 >= 0x4000)
              {
                v179 = v5 + 2;
                v180 = v177;
                do
                {
                  *(v179 - 1) = v180 | 0x80;
                  v181 = v180 >> 7;
                  ++v179;
                  v182 = v180 >> 14;
                  v180 >>= 7;
                }
                while (v182);
                *(v179 - 1) = v181;
              }
              else
              {
                v5[1] = v175 >> 7;
                v179 = v5 + 2;
              }
            }
            else
            {
              *v5 = v175;
              v179 = v5 + 1;
            }
            *v179 = v178;
            v5 = v179 + 1;
            ++v174;
            v173 = *this;
          }
          while (v174 < **this);
        }
        return (unsigned __int8 *)v5;
      case 9:
        v183 = (uint64_t)*this;
        if ((*this)[2] < 1)
          return (unsigned __int8 *)v5;
        v184 = 0;
        v185 = 8 * a2;
        v186 = 4;
        if (((a2 >> 25) & 0xF) != 0)
          v186 = 5;
        v187 = (8 * a2) | 2;
        v188 = 1;
        if (v185 >= 0x80)
          v188 = 2;
        if (v185 < 0x200000)
          v186 = 3;
        if (v185 >= 0x4000)
          v189 = v186;
        else
          v189 = v188;
        v429 = v185 >> 7;
        while (1)
        {
          if (*(_QWORD *)a4 <= (unint64_t)v5)
          {
            v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
            v183 = (uint64_t)*this;
          }
          v190 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v183, v184);
          if (*(char *)(v190 + 23) < 0)
          {
            v191 = *(_QWORD *)(v190 + 8);
            if (v191 > 127)
              goto LABEL_326;
          }
          else
          {
            v191 = *(unsigned __int8 *)(v190 + 23);
          }
          if ((uint64_t)(*(_QWORD *)a4 + ~(unint64_t)&v5[v189] + 16) >= v191)
          {
            if (v187 > 0x7F)
            {
              *v5 = (8 * a2) | 0x82;
              if (v187 >= 0x4000)
              {
                v192 = v5 + 2;
                v193 = (a2 >> 4) & 0x1FFFFFF;
                do
                {
                  *(v192 - 1) = v193 | 0x80;
                  v194 = v193 >> 7;
                  ++v192;
                  v195 = v193 >> 14;
                  v193 >>= 7;
                }
                while (v195);
                *(v192 - 1) = v194;
              }
              else
              {
                v5[1] = v429;
                v192 = v5 + 2;
              }
            }
            else
            {
              v192 = v5 + 1;
              *v5 = v187;
            }
            *v192 = v191;
            v196 = v192 + 1;
            if (*(char *)(v190 + 23) >= 0)
              v197 = (const void *)v190;
            else
              v197 = *(const void **)v190;
            memcpy(v196, v197, v191);
            v5 = &v196[v191];
            goto LABEL_324;
          }
LABEL_326:
          v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a4, a2, v190, v5);
LABEL_324:
          ++v184;
          v183 = (uint64_t)*this;
          if (v184 >= (*this)[2])
            return (unsigned __int8 *)v5;
        }
      case 10:
        v198 = (uint64_t)*this;
        if ((*this)[2] >= 1)
        {
          v199 = 0;
          v200 = (8 * a2) | 3;
          v201 = (8 * a2) | 0x83;
          v202 = (a2 >> 4) & 0x1FFFFFF;
          v203 = (8 * a2) | 4;
          v204 = (8 * a2) >> 7;
          v205 = (8 * a2) | 0x84;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v198 = (uint64_t)*this;
            }
            v206 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(v198, v199);
            if (v200 > 0x7F)
            {
              *v5 = v201;
              if (v200 >= 0x4000)
              {
                v207 = v5 + 2;
                v208 = v202;
                do
                {
                  *(v207 - 1) = v208 | 0x80;
                  v209 = v208 >> 7;
                  ++v207;
                  v210 = v208 >> 14;
                  v208 >>= 7;
                }
                while (v210);
                *(v207 - 1) = v209;
              }
              else
              {
                v5[1] = v204;
                v207 = v5 + 2;
              }
            }
            else
            {
              v207 = v5 + 1;
              *v5 = v200;
            }
            v211 = (char *)(*(uint64_t (**)(uint64_t, char *, google::protobuf::io::EpsCopyOutputStream *))(*(_QWORD *)v206 + 96))(v206, v207, a4);
            if (*(_QWORD *)a4 <= (unint64_t)v211)
              v211 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v211);
            if (v203 > 0x7F)
            {
              *v211 = v205;
              if (v203 >= 0x4000)
              {
                v5 = v211 + 2;
                v212 = v202;
                do
                {
                  *(v5 - 1) = v212 | 0x80;
                  v213 = v212 >> 7;
                  ++v5;
                  v214 = v212 >> 14;
                  v212 >>= 7;
                }
                while (v214);
                *(v5 - 1) = v213;
              }
              else
              {
                v211[1] = v204;
                v5 = v211 + 2;
              }
            }
            else
            {
              v5 = v211 + 1;
              *v211 = v203;
            }
            ++v199;
            v198 = (uint64_t)*this;
          }
          while (v199 < (*this)[2]);
        }
        return (unsigned __int8 *)v5;
      case 11:
        v215 = (uint64_t)*this;
        if ((*this)[2] >= 1)
        {
          v216 = 0;
          v217 = (8 * a2) | 2;
          v218 = (a2 >> 4) & 0x1FFFFFF;
          v219 = (8 * a2) >> 7;
          v220 = (8 * a2) | 0x82;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v215 = (uint64_t)*this;
            }
            v221 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(v215, v216);
            v222 = v221;
            if (v217 > 0x7F)
            {
              *v5 = v220;
              if (v217 >= 0x4000)
              {
                v223 = v5 + 2;
                v224 = v218;
                do
                {
                  *(v223 - 1) = v224 | 0x80;
                  v225 = v224 >> 7;
                  ++v223;
                  v226 = v224 >> 14;
                  v224 >>= 7;
                }
                while (v226);
                *(v223 - 1) = v225;
              }
              else
              {
                v5[1] = v219;
                v223 = v5 + 2;
              }
            }
            else
            {
              v223 = v5 + 1;
              *v5 = v217;
            }
            v227 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v221 + 80))(v221);
            if (v227 > 0x7F)
            {
              *v223 = v227 | 0x80;
              v229 = v227 >> 7;
              if (v227 >> 14)
              {
                v228 = v223 + 2;
                do
                {
                  *(v228 - 1) = v229 | 0x80;
                  v230 = v229 >> 7;
                  ++v228;
                  v231 = v229 >> 14;
                  v229 >>= 7;
                }
                while (v231);
                *(v228 - 1) = v230;
              }
              else
              {
                v223[1] = v229;
                v228 = v223 + 2;
              }
            }
            else
            {
              *v223 = v227;
              v228 = v223 + 1;
            }
            v5 = (char *)(*(uint64_t (**)(uint64_t, _BYTE *, google::protobuf::io::EpsCopyOutputStream *))(*(_QWORD *)v222 + 96))(v222, v228, a4);
            ++v216;
            v215 = (uint64_t)*this;
          }
          while (v216 < (*this)[2]);
        }
        return (unsigned __int8 *)v5;
      case 12:
        v232 = (uint64_t)*this;
        if ((*this)[2] < 1)
          return (unsigned __int8 *)v5;
        v233 = 0;
        v234 = 8 * a2;
        v235 = 4;
        if (((a2 >> 25) & 0xF) != 0)
          v235 = 5;
        v236 = (8 * a2) | 2;
        v237 = 1;
        if (v234 >= 0x80)
          v237 = 2;
        if (v234 < 0x200000)
          v235 = 3;
        if (v234 >= 0x4000)
          v238 = v235;
        else
          v238 = v237;
        v430 = v234 >> 7;
        break;
      case 13:
        v247 = *this;
        if (**this >= 1)
        {
          v248 = 0;
          v249 = 8 * a2;
          v250 = (8 * a2) | 0x80;
          v251 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v247 = *this;
            }
            v252 = *(_DWORD *)google::protobuf::RepeatedField<unsigned int>::Get(v247, v248);
            if (v249 > 0x7F)
            {
              *v5 = v250;
              if (v249 >= 0x4000)
              {
                v253 = v5 + 2;
                v254 = v251;
                do
                {
                  *(v253 - 1) = v254 | 0x80;
                  v255 = v254 >> 7;
                  ++v253;
                  v256 = v254 >> 14;
                  v254 >>= 7;
                }
                while (v256);
                *(v253 - 1) = v255;
              }
              else
              {
                v5[1] = v249 >> 7;
                v253 = v5 + 2;
              }
            }
            else
            {
              v253 = v5 + 1;
              *v5 = v249;
            }
            if (v252 > 0x7F)
            {
              *v253 = v252 | 0x80;
              v257 = v252 >> 7;
              if (v252 >> 14)
              {
                v5 = v253 + 2;
                do
                {
                  *(v5 - 1) = v257 | 0x80;
                  v258 = v257 >> 7;
                  ++v5;
                  v259 = v257 >> 14;
                  v257 >>= 7;
                }
                while (v259);
                *(v5 - 1) = v258;
              }
              else
              {
                v253[1] = v257;
                v5 = v253 + 2;
              }
            }
            else
            {
              *v253 = v252;
              v5 = v253 + 1;
            }
            ++v248;
            v247 = *this;
          }
          while (v248 < **this);
        }
        return (unsigned __int8 *)v5;
      case 14:
        v260 = *this;
        if (**this >= 1)
        {
          v261 = 0;
          v262 = 8 * a2;
          v263 = (8 * a2) | 0x80;
          v264 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v260 = *this;
            }
            v265 = *(int *)google::protobuf::RepeatedField<int>::Get(v260, v261);
            if (v262 > 0x7F)
            {
              *v5 = v263;
              if (v262 >= 0x4000)
              {
                v266 = v5 + 2;
                v267 = v264;
                do
                {
                  *(v266 - 1) = v267 | 0x80;
                  v268 = v267 >> 7;
                  ++v266;
                  v269 = v267 >> 14;
                  v267 >>= 7;
                }
                while (v269);
                *(v266 - 1) = v268;
              }
              else
              {
                v5[1] = v262 >> 7;
                v266 = v5 + 2;
              }
            }
            else
            {
              v266 = v5 + 1;
              *v5 = v262;
            }
            if (v265 > 0x7F)
            {
              *v266 = v265 | 0x80;
              v270 = v265 >> 7;
              if (v265 >> 14)
              {
                v5 = v266 + 2;
                do
                {
                  *(v5 - 1) = v270 | 0x80;
                  v271 = v270 >> 7;
                  ++v5;
                  v272 = v270 >> 14;
                  v270 >>= 7;
                }
                while (v272);
                *(v5 - 1) = v271;
              }
              else
              {
                v266[1] = v270;
                v5 = v266 + 2;
              }
            }
            else
            {
              *v266 = v265;
              v5 = v266 + 1;
            }
            ++v261;
            v260 = *this;
          }
          while (v261 < **this);
        }
        return (unsigned __int8 *)v5;
      case 15:
        v273 = *this;
        if (**this >= 1)
        {
          v274 = 0;
          v275 = (8 * a2) | 5;
          v276 = (a2 >> 4) & 0x1FFFFFF;
          v277 = (8 * a2) >> 7;
          v278 = (8 * a2) | 0x85;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v273 = *this;
            }
            v279 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get(v273, v274);
            if (v275 > 0x7F)
            {
              *v5 = v278;
              if (v275 >= 0x4000)
              {
                v280 = v5 + 2;
                v281 = v276;
                do
                {
                  *((_BYTE *)v280 - 1) = v281 | 0x80;
                  v282 = v281 >> 7;
                  v280 = (_DWORD *)((char *)v280 + 1);
                  v283 = v281 >> 14;
                  v281 >>= 7;
                }
                while (v283);
                *((_BYTE *)v280 - 1) = v282;
              }
              else
              {
                v5[1] = v277;
                v280 = v5 + 2;
              }
            }
            else
            {
              *v5 = v275;
              v280 = v5 + 1;
            }
            *v280 = v279;
            v5 = (char *)(v280 + 1);
            ++v274;
            v273 = *this;
          }
          while (v274 < **this);
        }
        return (unsigned __int8 *)v5;
      case 16:
        v284 = *this;
        if (**this >= 1)
        {
          v285 = 0;
          v286 = 8 * a2;
          v287 = (8 * a2) | 1;
          v288 = (8 * a2) | 0x81;
          v289 = (a2 >> 4) & 0x1FFFFFF;
          v290 = v286 >> 7;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v284 = *this;
            }
            v291 = *(_QWORD *)google::protobuf::RepeatedField<long long>::Get(v284, v285);
            if (v287 > 0x7F)
            {
              *v5 = v288;
              if (v287 >= 0x4000)
              {
                v292 = v5 + 2;
                v293 = v289;
                do
                {
                  *((_BYTE *)v292 - 1) = v293 | 0x80;
                  v294 = v293 >> 7;
                  v292 = (_QWORD *)((char *)v292 + 1);
                  v295 = v293 >> 14;
                  v293 >>= 7;
                }
                while (v295);
                *((_BYTE *)v292 - 1) = v294;
              }
              else
              {
                v5[1] = v290;
                v292 = v5 + 2;
              }
            }
            else
            {
              *v5 = v287;
              v292 = v5 + 1;
            }
            *v292 = v291;
            v5 = (char *)(v292 + 1);
            ++v285;
            v284 = *this;
          }
          while (v285 < **this);
        }
        return (unsigned __int8 *)v5;
      case 17:
        v296 = *this;
        if (**this >= 1)
        {
          v297 = 0;
          v298 = 8 * a2;
          v299 = (8 * a2) | 0x80;
          v300 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v296 = *this;
            }
            v301 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get(v296, v297);
            if (v298 > 0x7F)
            {
              *v5 = v299;
              if (v298 >= 0x4000)
              {
                v302 = v5 + 2;
                v303 = v300;
                do
                {
                  *(v302 - 1) = v303 | 0x80;
                  v304 = v303 >> 7;
                  ++v302;
                  v305 = v303 >> 14;
                  v303 >>= 7;
                }
                while (v305);
                *(v302 - 1) = v304;
              }
              else
              {
                v5[1] = v298 >> 7;
                v302 = v5 + 2;
              }
            }
            else
            {
              v302 = v5 + 1;
              *v5 = v298;
            }
            v306 = (2 * v301) ^ (v301 >> 31);
            if (v306 > 0x7F)
            {
              *v302 = v306 | 0x80;
              v307 = v306 >> 7;
              if (v306 >> 14)
              {
                v5 = v302 + 2;
                do
                {
                  *(v5 - 1) = v307 | 0x80;
                  v308 = v307 >> 7;
                  ++v5;
                  v309 = v307 >> 14;
                  v307 >>= 7;
                }
                while (v309);
                *(v5 - 1) = v308;
              }
              else
              {
                v302[1] = v307;
                v5 = v302 + 2;
              }
            }
            else
            {
              *v302 = v306;
              v5 = v302 + 1;
            }
            ++v297;
            v296 = *this;
          }
          while (v297 < **this);
        }
        return (unsigned __int8 *)v5;
      case 18:
        v310 = *this;
        if (**this >= 1)
        {
          v311 = 0;
          v312 = 8 * a2;
          v313 = (8 * a2) | 0x80;
          v314 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v310 = *this;
            }
            v315 = *(_QWORD *)google::protobuf::RepeatedField<long long>::Get(v310, v311);
            if (v312 > 0x7F)
            {
              *v5 = v313;
              if (v312 >= 0x4000)
              {
                v316 = v5 + 2;
                v317 = v314;
                do
                {
                  *(v316 - 1) = v317 | 0x80;
                  v318 = v317 >> 7;
                  ++v316;
                  v319 = v317 >> 14;
                  v317 >>= 7;
                }
                while (v319);
                *(v316 - 1) = v318;
              }
              else
              {
                v5[1] = v312 >> 7;
                v316 = v5 + 2;
              }
            }
            else
            {
              v316 = v5 + 1;
              *v5 = v312;
            }
            v320 = (2 * v315) ^ (v315 >> 63);
            if (v320 > 0x7F)
            {
              *v316 = v320 | 0x80;
              v321 = v320 >> 7;
              if (v320 >> 14)
              {
                v5 = v316 + 2;
                do
                {
                  *(v5 - 1) = v321 | 0x80;
                  v322 = v321 >> 7;
                  ++v5;
                  v323 = v321 >> 14;
                  v321 >>= 7;
                }
                while (v323);
                *(v5 - 1) = v322;
              }
              else
              {
                v316[1] = v321;
                v5 = v316 + 2;
              }
            }
            else
            {
              *v316 = v320;
              v5 = v316 + 1;
            }
            ++v311;
            v310 = *this;
          }
          while (v311 < **this);
        }
        return (unsigned __int8 *)v5;
      default:
        return (unsigned __int8 *)v5;
    }
    while (1)
    {
      if (*(_QWORD *)a4 <= (unint64_t)v5)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
        v232 = (uint64_t)*this;
      }
      v239 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v232, v233);
      if (*(char *)(v239 + 23) < 0)
      {
        v240 = *(_QWORD *)(v239 + 8);
        if (v240 > 127)
          goto LABEL_399;
      }
      else
      {
        v240 = *(unsigned __int8 *)(v239 + 23);
      }
      if ((uint64_t)(*(_QWORD *)a4 + ~(unint64_t)&v5[v238] + 16) >= v240)
      {
        if (v236 > 0x7F)
        {
          *v5 = (8 * a2) | 0x82;
          if (v236 >= 0x4000)
          {
            v241 = v5 + 2;
            v242 = (a2 >> 4) & 0x1FFFFFF;
            do
            {
              *(v241 - 1) = v242 | 0x80;
              v243 = v242 >> 7;
              ++v241;
              v244 = v242 >> 14;
              v242 >>= 7;
            }
            while (v244);
            *(v241 - 1) = v243;
          }
          else
          {
            v5[1] = v430;
            v241 = v5 + 2;
          }
        }
        else
        {
          v241 = v5 + 1;
          *v5 = v236;
        }
        *v241 = v240;
        v245 = v241 + 1;
        if (*(char *)(v239 + 23) >= 0)
          v246 = (const void *)v239;
        else
          v246 = *(const void **)v239;
        memcpy(v245, v246, v240);
        v5 = &v245[v240];
        goto LABEL_397;
      }
LABEL_399:
      v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a4, a2, v239, v5);
LABEL_397:
      ++v233;
      v232 = (uint64_t)*this;
      if (v233 >= (*this)[2])
        return (unsigned __int8 *)v5;
    }
  }
  if ((*((_BYTE *)this + 10) & 1) != 0)
    return (unsigned __int8 *)v5;
  v10 = *((unsigned __int8 *)this + 8);
  if ((v10 - 19) <= 0xFFFFFFED)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    v11 = google::protobuf::internal::LogMessage::operator<<(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v431, (const char **)&v11->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v432[0].__r_.__value_.__l.__data_);
  }
  switch(v10)
  {
    case 1:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v12 = *this;
      v13 = (8 * a2) | 1;
      if (v13 <= 0x7F)
        goto LABEL_575;
      *v5 = (8 * a2) | 0x81;
      v14 = (8 * a2) >> 7;
      if (!(v13 >> 14))
        goto LABEL_602;
      v15 = (int **)(v5 + 2);
      do
      {
        *((_BYTE *)v15 - 1) = v14 | 0x80;
        v16 = v14 >> 7;
        v15 = (int **)((char *)v15 + 1);
        v17 = v14 >> 14;
        v14 >>= 7;
      }
      while (v17);
      goto LABEL_693;
    case 2:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v324 = *(_DWORD *)this;
      v325 = (8 * a2) | 5;
      if (v325 <= 0x7F)
        goto LABEL_571;
      *v5 = (8 * a2) | 0x85;
      v326 = (8 * a2) >> 7;
      if (!(v325 >> 14))
        goto LABEL_600;
      v327 = (unsigned int *)(v5 + 2);
      do
      {
        *((_BYTE *)v327 - 1) = v326 | 0x80;
        v328 = v326 >> 7;
        v327 = (unsigned int *)((char *)v327 + 1);
        v329 = v326 >> 14;
        v326 >>= 7;
      }
      while (v329);
      goto LABEL_689;
    case 3:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v330 = (unint64_t)*this;
      v331 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v331 | 0x80;
        v355 = v331 >> 7;
        if (v331 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v355 | 0x80;
            v380 = v355 >> 7;
            ++v332;
            v381 = v355 >> 14;
            v355 >>= 7;
          }
          while (v381);
          *(v332 - 1) = v380;
        }
        else
        {
          v5[1] = v355;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v331;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F)
        goto LABEL_684;
      *v332 = v330 | 0x80;
      v382 = v330 >> 7;
      if (!(v330 >> 14))
        goto LABEL_686;
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        v383 = v382 >> 7;
        ++v5;
        v384 = v382 >> 14;
        v382 >>= 7;
      }
      while (v384);
      goto LABEL_718;
    case 4:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v330 = (unint64_t)*this;
      v333 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v333 | 0x80;
        v356 = v333 >> 7;
        if (v333 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v356 | 0x80;
            v385 = v356 >> 7;
            ++v332;
            v386 = v356 >> 14;
            v356 >>= 7;
          }
          while (v386);
          *(v332 - 1) = v385;
        }
        else
        {
          v5[1] = v356;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v333;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F)
        goto LABEL_684;
      *v332 = v330 | 0x80;
      v382 = v330 >> 7;
      if (!(v330 >> 14))
        goto LABEL_686;
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        v383 = v382 >> 7;
        ++v5;
        v387 = v382 >> 14;
        v382 >>= 7;
      }
      while (v387);
      goto LABEL_718;
    case 5:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v330 = *(int *)this;
      v334 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v334 | 0x80;
        v357 = v334 >> 7;
        if (v334 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v357 | 0x80;
            v388 = v357 >> 7;
            ++v332;
            v389 = v357 >> 14;
            v357 >>= 7;
          }
          while (v389);
          *(v332 - 1) = v388;
        }
        else
        {
          v5[1] = v357;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v334;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F)
        goto LABEL_684;
      *v332 = v330 | 0x80;
      v382 = v330 >> 7;
      if (!(v330 >> 14))
        goto LABEL_686;
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        v383 = v382 >> 7;
        ++v5;
        v390 = v382 >> 14;
        v382 >>= 7;
      }
      while (v390);
      goto LABEL_718;
    case 6:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v12 = *this;
      v13 = (8 * a2) | 1;
      if (v13 <= 0x7F)
        goto LABEL_575;
      *v5 = (8 * a2) | 0x81;
      v14 = (8 * a2) >> 7;
      if (!(v13 >> 14))
        goto LABEL_602;
      v15 = (int **)(v5 + 2);
      do
      {
        *((_BYTE *)v15 - 1) = v14 | 0x80;
        v16 = v14 >> 7;
        v15 = (int **)((char *)v15 + 1);
        v335 = v14 >> 14;
        v14 >>= 7;
      }
      while (v335);
      goto LABEL_693;
    case 7:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v324 = *(_DWORD *)this;
      v325 = (8 * a2) | 5;
      if (v325 <= 0x7F)
        goto LABEL_571;
      *v5 = (8 * a2) | 0x85;
      v326 = (8 * a2) >> 7;
      if (!(v325 >> 14))
        goto LABEL_600;
      v327 = (unsigned int *)(v5 + 2);
      do
      {
        *((_BYTE *)v327 - 1) = v326 | 0x80;
        v328 = v326 >> 7;
        v327 = (unsigned int *)((char *)v327 + 1);
        v336 = v326 >> 14;
        v326 >>= 7;
      }
      while (v336);
      goto LABEL_689;
    case 8:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      LOBYTE(v337) = *(_BYTE *)this;
      v338 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v338 | 0x80;
        v358 = v338 >> 7;
        if (v338 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v358 | 0x80;
            v391 = v358 >> 7;
            ++v332;
            v392 = v358 >> 14;
            v358 >>= 7;
          }
          while (v392);
          *(v332 - 1) = v391;
        }
        else
        {
          v5[1] = v358;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v338;
        v332 = v5 + 1;
      }
      goto LABEL_677;
    case 9:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v339 = *this;
      if (*((char *)*this + 23) < 0)
      {
        v340 = *((_QWORD *)v339 + 1);
        if (v340 > 127)
          return google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a4, a2, (uint64_t)v339, v5);
      }
      else
      {
        v340 = *((unsigned __int8 *)*this + 23);
      }
      v364 = 8 * a2;
      v365 = 1;
      v366 = 2;
      v367 = 3;
      v368 = 4;
      if ((8 * a2) >> 28)
        v368 = 5;
      if (v364 >= 0x200000)
        v367 = v368;
      if (v364 >= 0x4000)
        v366 = v367;
      if (v364 >= 0x80)
        v365 = v366;
      if ((uint64_t)(*(_QWORD *)a4 + ~(unint64_t)&v5[v365] + 16) < v340)
        return google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a4, a2, (uint64_t)v339, v5);
      v369 = v364 | 2;
      if ((v364 | 2) <= 0x7F)
        goto LABEL_633;
      *v5 = v364 | 0x82;
      v370 = v364 >> 7;
      if (!(v369 >> 14))
        goto LABEL_635;
      v371 = v5 + 2;
      do
      {
        *(v371 - 1) = v370 | 0x80;
        v372 = v370 >> 7;
        ++v371;
        v373 = v370 >> 14;
        v370 >>= 7;
      }
      while (v373);
      goto LABEL_727;
    case 10:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v341 = *this;
      v342 = 8 * a2;
      v343 = (8 * a2) | 3;
      v344 = (8 * a2) >> 7;
      if (v343 > 0x7F)
      {
        *v5 = (8 * a2) | 0x83;
        if (v343 >> 14)
        {
          v345 = v5 + 2;
          v393 = v342 >> 7;
          do
          {
            *(v345 - 1) = v393 | 0x80;
            v394 = v393 >> 7;
            ++v345;
            v395 = v393 >> 14;
            v393 >>= 7;
          }
          while (v395);
          *(v345 - 1) = v394;
        }
        else
        {
          v5[1] = v344;
          v345 = v5 + 2;
        }
      }
      else
      {
        *v5 = v343;
        v345 = v5 + 1;
      }
      v332 = (char *)(*(uint64_t (**)(int *, char *, google::protobuf::io::EpsCopyOutputStream *))(*(_QWORD *)v341 + 96))(v341, v345, a4);
      if (*(_QWORD *)a4 <= (unint64_t)v332)
        v332 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v332);
      v337 = v342 | 4;
      if ((v342 | 4) <= 0x7F)
        goto LABEL_677;
      *v332 = v342 | 0x84;
      if (!(v337 >> 14))
      {
        v332[1] = v344;
        return (unsigned __int8 *)(v332 + 2);
      }
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v344 | 0x80;
        v411 = v344 >> 7;
        ++v5;
        v412 = v344 >> 14;
        v344 >>= 7;
      }
      while (v412);
      goto LABEL_715;
    case 11:
      if ((*((_BYTE *)this + 10) & 0x10) != 0)
        return (unsigned __int8 *)(*(uint64_t (**)(int *, uint64_t, char *, google::protobuf::io::EpsCopyOutputStream *))(*(_QWORD *)*this + 136))(*this, a2, v5, a4);
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v346 = *this;
      v347 = (8 * a2) | 2;
      if (v347 > 0x7F)
      {
        *v5 = (8 * a2) | 0x82;
        v379 = (8 * a2) >> 7;
        if (v347 >> 14)
        {
          v348 = v5 + 2;
          do
          {
            *(v348 - 1) = v379 | 0x80;
            v421 = v379 >> 7;
            ++v348;
            v422 = v379 >> 14;
            v379 >>= 7;
          }
          while (v422);
          *(v348 - 1) = v421;
        }
        else
        {
          v5[1] = v379;
          v348 = v5 + 2;
        }
      }
      else
      {
        *v5 = v347;
        v348 = v5 + 1;
      }
      v423 = (*(uint64_t (**)(int *))(*(_QWORD *)v346 + 80))(v346);
      if (v423 > 0x7F)
      {
        *v348 = v423 | 0x80;
        v425 = v423 >> 7;
        if (v423 >> 14)
        {
          v424 = v348 + 2;
          do
          {
            *(v424 - 1) = v425 | 0x80;
            v426 = v425 >> 7;
            ++v424;
            v427 = v425 >> 14;
            v425 >>= 7;
          }
          while (v427);
          *(v424 - 1) = v426;
        }
        else
        {
          v348[1] = v425;
          v424 = v348 + 2;
        }
      }
      else
      {
        *v348 = v423;
        v424 = v348 + 1;
      }
      return (unsigned __int8 *)(*(uint64_t (**)(int *, _BYTE *, google::protobuf::io::EpsCopyOutputStream *))(*(_QWORD *)v346 + 96))(v346, v424, a4);
    case 12:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v339 = *this;
      if (*((char *)*this + 23) < 0)
      {
        v340 = *((_QWORD *)v339 + 1);
        if (v340 > 127)
          return google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a4, a2, (uint64_t)v339, v5);
      }
      else
      {
        v340 = *((unsigned __int8 *)*this + 23);
      }
      v374 = 8 * a2;
      v375 = 1;
      v376 = 2;
      v377 = 3;
      v378 = 4;
      if ((8 * a2) >> 28)
        v378 = 5;
      if (v374 >= 0x200000)
        v377 = v378;
      if (v374 >= 0x4000)
        v376 = v377;
      if (v374 >= 0x80)
        v375 = v376;
      if ((uint64_t)(*(_QWORD *)a4 + ~(unint64_t)&v5[v375] + 16) < v340)
        return google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a4, a2, (uint64_t)v339, v5);
      v369 = v374 | 2;
      if ((v374 | 2) > 0x7F)
      {
        *v5 = v374 | 0x82;
        v370 = v374 >> 7;
        if (v369 >> 14)
        {
          v371 = v5 + 2;
          do
          {
            *(v371 - 1) = v370 | 0x80;
            v372 = v370 >> 7;
            ++v371;
            v419 = v370 >> 14;
            v370 >>= 7;
          }
          while (v419);
LABEL_727:
          *(v371 - 1) = v372;
        }
        else
        {
LABEL_635:
          v5[1] = v370;
          v371 = v5 + 2;
        }
      }
      else
      {
LABEL_633:
        *v5 = v369;
        v371 = v5 + 1;
      }
      *v371 = v340;
      v420 = v371 + 1;
      if (*((char *)v339 + 23) < 0)
        v339 = *(int **)v339;
      memcpy(v420, v339, v340);
      return (unsigned __int8 *)&v420[v340];
    case 13:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v337 = *(_DWORD *)this;
      v349 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v349 | 0x80;
        v360 = v349 >> 7;
        if (v349 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v360 | 0x80;
            v396 = v360 >> 7;
            ++v332;
            v397 = v360 >> 14;
            v360 >>= 7;
          }
          while (v397);
          *(v332 - 1) = v396;
        }
        else
        {
          v5[1] = v360;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v349;
        v332 = v5 + 1;
      }
      if (v337 <= 0x7F)
      {
LABEL_677:
        *v332 = v337;
        return (unsigned __int8 *)(v332 + 1);
      }
      *v332 = v337 | 0x80;
      v398 = v337 >> 7;
      if (!(v337 >> 14))
      {
        v332[1] = v398;
        return (unsigned __int8 *)(v332 + 2);
      }
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v398 | 0x80;
        v411 = v398 >> 7;
        ++v5;
        v413 = v398 >> 14;
        v398 >>= 7;
      }
      while (v413);
LABEL_715:
      *(v5 - 1) = v411;
      return (unsigned __int8 *)v5;
    case 14:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v330 = *(int *)this;
      v350 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v350 | 0x80;
        v361 = v350 >> 7;
        if (v350 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v361 | 0x80;
            v399 = v361 >> 7;
            ++v332;
            v400 = v361 >> 14;
            v361 >>= 7;
          }
          while (v400);
          *(v332 - 1) = v399;
        }
        else
        {
          v5[1] = v361;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v350;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F)
      {
LABEL_684:
        *v332 = v330;
        return (unsigned __int8 *)(v332 + 1);
      }
      *v332 = v330 | 0x80;
      v382 = v330 >> 7;
      if (!(v330 >> 14))
      {
LABEL_686:
        v332[1] = v382;
        return (unsigned __int8 *)(v332 + 2);
      }
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        v383 = v382 >> 7;
        ++v5;
        v414 = v382 >> 14;
        v382 >>= 7;
      }
      while (v414);
LABEL_718:
      *(v5 - 1) = v383;
      return (unsigned __int8 *)v5;
    case 15:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v324 = *(_DWORD *)this;
      v325 = (8 * a2) | 5;
      if (v325 > 0x7F)
      {
        *v5 = (8 * a2) | 0x85;
        v326 = (8 * a2) >> 7;
        if (v325 >> 14)
        {
          v327 = (unsigned int *)(v5 + 2);
          do
          {
            *((_BYTE *)v327 - 1) = v326 | 0x80;
            v328 = v326 >> 7;
            v327 = (unsigned int *)((char *)v327 + 1);
            v401 = v326 >> 14;
            v326 >>= 7;
          }
          while (v401);
LABEL_689:
          *((_BYTE *)v327 - 1) = v328;
        }
        else
        {
LABEL_600:
          v5[1] = v326;
          v327 = (unsigned int *)(v5 + 2);
        }
      }
      else
      {
LABEL_571:
        *v5 = v325;
        v327 = (unsigned int *)(v5 + 1);
      }
      *v327 = v324;
      return (unsigned __int8 *)(v327 + 1);
    case 16:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v12 = *this;
      v13 = (8 * a2) | 1;
      if (v13 > 0x7F)
      {
        *v5 = (8 * a2) | 0x81;
        v14 = (8 * a2) >> 7;
        if (v13 >> 14)
        {
          v15 = (int **)(v5 + 2);
          do
          {
            *((_BYTE *)v15 - 1) = v14 | 0x80;
            v16 = v14 >> 7;
            v15 = (int **)((char *)v15 + 1);
            v402 = v14 >> 14;
            v14 >>= 7;
          }
          while (v402);
LABEL_693:
          *((_BYTE *)v15 - 1) = v16;
        }
        else
        {
LABEL_602:
          v5[1] = v14;
          v15 = (int **)(v5 + 2);
        }
      }
      else
      {
LABEL_575:
        *v5 = v13;
        v15 = (int **)(v5 + 1);
      }
      *v15 = v12;
      return (unsigned __int8 *)(v15 + 1);
    case 17:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v351 = *(_DWORD *)this;
      v352 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v352 | 0x80;
        v362 = v352 >> 7;
        if (v352 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v362 | 0x80;
            v403 = v362 >> 7;
            ++v332;
            v404 = v362 >> 14;
            v362 >>= 7;
          }
          while (v404);
          *(v332 - 1) = v403;
        }
        else
        {
          v5[1] = v362;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v352;
        v332 = v5 + 1;
      }
      v405 = (2 * v351) ^ (v351 >> 31);
      if (v405 <= 0x7F)
      {
        *v332 = v405;
        return (unsigned __int8 *)(v332 + 1);
      }
      *v332 = v405 | 0x80;
      v406 = v405 >> 7;
      if (!(v405 >> 14))
      {
        v332[1] = v406;
        return (unsigned __int8 *)(v332 + 2);
      }
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v406 | 0x80;
        v415 = v406 >> 7;
        ++v5;
        v416 = v406 >> 14;
        v406 >>= 7;
      }
      while (v416);
      *(v5 - 1) = v415;
      return (unsigned __int8 *)v5;
    case 18:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v353 = (uint64_t)*this;
      v354 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v354 | 0x80;
        v363 = v354 >> 7;
        if (v354 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v363 | 0x80;
            v407 = v363 >> 7;
            ++v332;
            v408 = v363 >> 14;
            v363 >>= 7;
          }
          while (v408);
          *(v332 - 1) = v407;
        }
        else
        {
          v5[1] = v363;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v354;
        v332 = v5 + 1;
      }
      v409 = (2 * v353) ^ (v353 >> 63);
      if (v409 > 0x7F)
      {
        *v332 = v409 | 0x80;
        v410 = v409 >> 7;
        if (v409 >> 14)
        {
          v5 = v332 + 2;
          do
          {
            *(v5 - 1) = v410 | 0x80;
            v417 = v410 >> 7;
            ++v5;
            v418 = v410 >> 14;
            v410 >>= 7;
          }
          while (v418);
          *(v5 - 1) = v417;
        }
        else
        {
          v332[1] = v410;
          return (unsigned __int8 *)(v332 + 2);
        }
      }
      else
      {
        *v332 = v409;
        return (unsigned __int8 *)(v332 + 1);
      }
      return (unsigned __int8 *)v5;
    default:
      return (unsigned __int8 *)v5;
  }
}

void sub_1C21F4E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::ByteSize(google::protobuf::internal::ExtensionSet *this)
{
  int *v1;
  uint64_t v2;
  int *v3;
  int **v4;
  int v5;
  int *v6;
  int *v7;
  int *v8;
  unint64_t v9;
  int *v10;
  int *v11;
  BOOL v12;

  v1 = (int *)*((_QWORD *)this + 2);
  if (*((unsigned __int16 *)this + 4) < 0x101u)
  {
    if (*((_WORD *)this + 5))
    {
      v2 = 0;
      v3 = &v1[8 * *((unsigned __int16 *)this + 5)];
      do
      {
        v4 = (int **)(v1 + 2);
        v5 = *v1;
        v1 += 8;
        v2 += google::protobuf::internal::ExtensionSet::Extension::ByteSize(v4, v5);
      }
      while (v1 != v3);
      return v2;
    }
    return 0;
  }
  v8 = *(int **)v1;
  v6 = v1 + 2;
  v7 = v8;
  if (v8 == v6)
    return 0;
  v2 = 0;
  do
  {
    v9 = google::protobuf::internal::ExtensionSet::Extension::ByteSize((int **)v7 + 5, v7[8]);
    v10 = (int *)*((_QWORD *)v7 + 1);
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = *(int **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (int *)*((_QWORD *)v7 + 2);
        v12 = *(_QWORD *)v11 == (_QWORD)v7;
        v7 = v11;
      }
      while (!v12);
    }
    v2 += v9;
    v7 = v11;
  }
  while (v11 != v6);
  return v2;
}

unint64_t google::protobuf::internal::ExtensionSet::Extension::ByteSize(int **this, int a2)
{
  int v4;
  unsigned __int8 v5;
  std::string *v6;
  std::string *v7;
  unint64_t v8;
  int v9;
  unsigned __int8 v10;
  std::string *v11;
  int v12;
  std::string *v13;
  int v14;
  char v15;
  std::string *v16;
  unint64_t v17;
  unsigned int v18;
  char v19;
  std::string *v20;
  uint64_t v21;
  int *v22;
  int v23;
  int *v24;
  int v25;
  int *v26;
  int *v27;
  int v28;
  int *v29;
  int v30;
  int *v31;
  int v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  int v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  int v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  int v51;
  int v52;
  int *v53;
  int v54;
  int v55;
  int *v56;
  int v57;
  int v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  int v82;
  int v83;
  int *v84;
  int v85;
  int v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  int v91;
  int v92;
  int *v93;
  int *v94;
  int v95;
  int v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t (*v99)(void);
  int v100;
  uint64_t v101;
  char v102;
  std::string v103[2];

  if (*((_BYTE *)this + 9))
  {
    v4 = *((unsigned __int8 *)this + 8);
    v5 = v4 - 19;
    if (*((_BYTE *)this + 11))
    {
      if ((v4 - 19) <= 0xEDu)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        v6 = google::protobuf::internal::LogMessage::operator<<(v103, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v102, (const char **)&v6->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v103[0].__r_.__value_.__l.__data_);
      }
      switch(v4)
      {
        case 1:
        case 6:
        case 16:
          v21 = 8 * **this;
          goto LABEL_63;
        case 2:
        case 7:
        case 15:
          v21 = 4 * **this;
          goto LABEL_63;
        case 3:
          v27 = *this;
          if (**this < 1)
            goto LABEL_7;
          v21 = 0;
          v28 = 0;
          do
          {
            v21 += (9 * (__clz(*(_QWORD *)google::protobuf::RepeatedField<long long>::Get(v27, v28++) | 1) ^ 0x3F) + 73) >> 6;
            v27 = *this;
          }
          while (v28 < **this);
          goto LABEL_63;
        case 4:
          v29 = *this;
          if (**this < 1)
            goto LABEL_7;
          v21 = 0;
          v30 = 0;
          do
          {
            v21 += (9
                  * (__clz(*(_QWORD *)google::protobuf::RepeatedField<unsigned long long>::Get(v29, v30++) | 1) ^ 0x3F)
                  + 73) >> 6;
            v29 = *this;
          }
          while (v30 < **this);
          goto LABEL_63;
        case 5:
          v31 = *this;
          if (**this < 1)
            goto LABEL_7;
          v21 = 0;
          v32 = 0;
          do
          {
            v33 = (int *)google::protobuf::RepeatedField<int>::Get(v31, v32);
            v34 = (9 * (__clz(*v33 | 1) ^ 0x1F) + 73) >> 6;
            if (*v33 >= 0)
              v35 = v34;
            else
              v35 = 10;
            v21 += v35;
            ++v32;
            v31 = *this;
          }
          while (v32 < **this);
          goto LABEL_63;
        case 8:
          v21 = **this;
          goto LABEL_63;
        case 9:
        case 10:
        case 11:
        case 12:
          google::protobuf::internal::LogMessage::LogMessage((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1599);
          v7 = google::protobuf::internal::LogMessage::operator<<(v103, "Non-primitive types can't be packed.");
          google::protobuf::internal::LogFinisher::operator=((int)&v102, (const char **)&v7->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&v103[0].__r_.__value_.__l.__data_);
          goto LABEL_7;
        case 13:
          v22 = *this;
          if (**this < 1)
            goto LABEL_7;
          v21 = 0;
          v23 = 0;
          do
          {
            v21 += (9 * (__clz(*(_DWORD *)google::protobuf::RepeatedField<unsigned int>::Get(v22, v23++) | 1) ^ 0x1F)
                  + 73) >> 6;
            v22 = *this;
          }
          while (v23 < **this);
          goto LABEL_63;
        case 14:
          v36 = *this;
          if (**this < 1)
            goto LABEL_7;
          v21 = 0;
          v37 = 0;
          do
          {
            v38 = (int *)google::protobuf::RepeatedField<int>::Get(v36, v37);
            v39 = (9 * (__clz(*v38 | 1) ^ 0x1F) + 73) >> 6;
            if (*v38 >= 0)
              v40 = v39;
            else
              v40 = 10;
            v21 += v40;
            ++v37;
            v36 = *this;
          }
          while (v37 < **this);
          goto LABEL_63;
        case 17:
          v24 = *this;
          if (**this < 1)
            goto LABEL_7;
          v21 = 0;
          v25 = 0;
          do
          {
            v26 = (int *)google::protobuf::RepeatedField<int>::Get(v24, v25);
            v21 += (9 * (__clz((2 * *v26) ^ (*v26 >> 31) | 1) ^ 0x1F) + 73) >> 6;
            ++v25;
            v24 = *this;
          }
          while (v25 < **this);
          goto LABEL_63;
        case 18:
          v41 = *this;
          if (**this < 1)
            goto LABEL_7;
          v21 = 0;
          v42 = 0;
          do
          {
            v43 = (uint64_t *)google::protobuf::RepeatedField<long long>::Get(v41, v42);
            v21 += (9 * (__clz((2 * *v43) ^ (*v43 >> 63) | 1) ^ 0x3F) + 73) >> 6;
            ++v42;
            v41 = *this;
          }
          while (v42 < **this);
LABEL_63:
          *((_DWORD *)this + 3) = v21;
          v44 = v21 + ((9 * (__clz((8 * a2) | 3) ^ 0x1F) + 73) >> 6) + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6);
          if (v21)
            v8 = v44;
          else
            v8 = 0;
          break;
        default:
LABEL_7:
          v8 = 0;
          *((_DWORD *)this + 3) = 0;
          break;
      }
    }
    else
    {
      if ((v4 - 19) > 0xEDu)
      {
        v14 = *((unsigned __int8 *)this + 8);
      }
      else
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        v13 = google::protobuf::internal::LogMessage::operator<<(v103, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v102, (const char **)&v13->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v103[0].__r_.__value_.__l.__data_);
        v14 = *((unsigned __int8 *)this + 8);
        v5 = v14 - 19;
      }
      v15 = v4 == 10;
      if (v5 <= 0xEDu)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        v16 = google::protobuf::internal::LogMessage::operator<<(v103, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v102, (const char **)&v16->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v103[0].__r_.__value_.__l.__data_);
      }
      v17 = (unint64_t)((9 * (__clz((8 * a2) | 1) ^ 0x1F) + 73) >> 6) << v15;
      switch(v14)
      {
        case 1:
        case 6:
        case 16:
          v18 = v17 + 8;
          goto LABEL_27;
        case 2:
        case 7:
        case 15:
          v18 = v17 + 4;
LABEL_27:
          v8 = v18 * (unint64_t)**this;
          break;
        case 3:
          v50 = *this;
          v51 = **this;
          v8 = v17 * (unint64_t)v51;
          if (v51 >= 1)
          {
            v52 = 0;
            do
            {
              v8 += (9 * (__clz(*(_QWORD *)google::protobuf::RepeatedField<long long>::Get(v50, v52++) | 1) ^ 0x3F)
                   + 73) >> 6;
              v50 = *this;
            }
            while (v52 < **this);
          }
          break;
        case 4:
          v53 = *this;
          v54 = **this;
          v8 = v17 * (unint64_t)v54;
          if (v54 >= 1)
          {
            v55 = 0;
            do
            {
              v8 += (9
                   * (__clz(*(_QWORD *)google::protobuf::RepeatedField<unsigned long long>::Get(v53, v55++) | 1) ^ 0x3F)
                   + 73) >> 6;
              v53 = *this;
            }
            while (v55 < **this);
          }
          break;
        case 5:
          v56 = *this;
          v57 = **this;
          v8 = v17 * (unint64_t)v57;
          if (v57 >= 1)
          {
            v58 = 0;
            do
            {
              v59 = (int *)google::protobuf::RepeatedField<int>::Get(v56, v58);
              v60 = (9 * (__clz(*v59 | 1) ^ 0x1F) + 73) >> 6;
              if (*v59 >= 0)
                v61 = v60;
              else
                v61 = 10;
              v8 += v61;
              ++v58;
              v56 = *this;
            }
            while (v58 < **this);
          }
          break;
        case 8:
          v8 = **this + **this * (unint64_t)v17;
          break;
        case 9:
          v62 = (uint64_t)*this;
          v63 = (*this)[2];
          v8 = v17 * (unint64_t)v63;
          if (v63 >= 1)
          {
            v64 = 0;
            do
            {
              v65 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v62, v64);
              v66 = *(unsigned __int8 *)(v65 + 23);
              if ((v66 & 0x80u) != 0)
                v66 = *(_QWORD *)(v65 + 8);
              v8 += v66 + ((9 * (__clz(v66 | 1) ^ 0x1F) + 73) >> 6);
              ++v64;
              v62 = (uint64_t)*this;
            }
            while (v64 < (*this)[2]);
          }
          break;
        case 10:
          v67 = (uint64_t)*this;
          v68 = (*this)[2];
          v8 = v17 * (unint64_t)v68;
          if (v68 >= 1)
          {
            v69 = 0;
            do
            {
              v70 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(v67, v69);
              v8 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 72))(v70);
              ++v69;
              v67 = (uint64_t)*this;
            }
            while (v69 < (*this)[2]);
          }
          break;
        case 11:
          v71 = (uint64_t)*this;
          v72 = (*this)[2];
          v8 = v17 * (unint64_t)v72;
          if (v72 >= 1)
          {
            v73 = 0;
            do
            {
              v74 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(v71, v73);
              v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 72))(v74);
              v8 += v75 + ((9 * (__clz(v75 | 1) ^ 0x1F) + 73) >> 6);
              ++v73;
              v71 = (uint64_t)*this;
            }
            while (v73 < (*this)[2]);
          }
          break;
        case 12:
          v76 = (uint64_t)*this;
          v77 = (*this)[2];
          v8 = v17 * (unint64_t)v77;
          if (v77 >= 1)
          {
            v78 = 0;
            do
            {
              v79 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v76, v78);
              v80 = *(unsigned __int8 *)(v79 + 23);
              if ((v80 & 0x80u) != 0)
                v80 = *(_QWORD *)(v79 + 8);
              v8 += v80 + ((9 * (__clz(v80 | 1) ^ 0x1F) + 73) >> 6);
              ++v78;
              v76 = (uint64_t)*this;
            }
            while (v78 < (*this)[2]);
          }
          break;
        case 13:
          v81 = *this;
          v82 = **this;
          v8 = v17 * (unint64_t)v82;
          if (v82 >= 1)
          {
            v83 = 0;
            do
            {
              v8 += (9 * (__clz(*(_DWORD *)google::protobuf::RepeatedField<unsigned int>::Get(v81, v83++) | 1) ^ 0x1F)
                   + 73) >> 6;
              v81 = *this;
            }
            while (v83 < **this);
          }
          break;
        case 14:
          v84 = *this;
          v85 = **this;
          v8 = v17 * (unint64_t)v85;
          if (v85 >= 1)
          {
            v86 = 0;
            do
            {
              v87 = (int *)google::protobuf::RepeatedField<int>::Get(v84, v86);
              v88 = (9 * (__clz(*v87 | 1) ^ 0x1F) + 73) >> 6;
              if (*v87 >= 0)
                v89 = v88;
              else
                v89 = 10;
              v8 += v89;
              ++v86;
              v84 = *this;
            }
            while (v86 < **this);
          }
          break;
        case 17:
          v90 = *this;
          v91 = **this;
          v8 = v17 * (unint64_t)v91;
          if (v91 >= 1)
          {
            v92 = 0;
            do
            {
              v93 = (int *)google::protobuf::RepeatedField<int>::Get(v90, v92);
              v8 += (9 * (__clz((2 * *v93) ^ (*v93 >> 31) | 1) ^ 0x1F) + 73) >> 6;
              ++v92;
              v90 = *this;
            }
            while (v92 < **this);
          }
          break;
        case 18:
          v94 = *this;
          v95 = **this;
          v8 = v17 * (unint64_t)v95;
          if (v95 >= 1)
          {
            v96 = 0;
            do
            {
              v97 = (uint64_t *)google::protobuf::RepeatedField<long long>::Get(v94, v96);
              v8 += (9 * (__clz((2 * *v97) ^ (*v97 >> 63) | 1) ^ 0x3F) + 73) >> 6;
              ++v96;
              v94 = *this;
            }
            while (v96 < **this);
          }
          break;
        default:
          return 0;
      }
    }
  }
  else if ((*((_BYTE *)this + 10) & 1) != 0)
  {
    return 0;
  }
  else
  {
    v9 = *((unsigned __int8 *)this + 8);
    v10 = v9 - 19;
    if ((v9 - 19) > 0xEDu)
    {
      v12 = *((unsigned __int8 *)this + 8);
    }
    else
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v103, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v102, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v103[0].__r_.__value_.__l.__data_);
      v12 = *((unsigned __int8 *)this + 8);
      v10 = v12 - 19;
    }
    v19 = v9 == 10;
    if (v10 <= 0xEDu)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v103, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v102, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v103[0].__r_.__value_.__l.__data_);
    }
    v8 = (unint64_t)((9 * (__clz((8 * a2) | 1) ^ 0x1F) + 73) >> 6) << v19;
    switch(v12)
    {
      case 1:
      case 6:
      case 16:
        v8 += 8;
        return v8;
      case 2:
      case 7:
      case 15:
        v8 += 4;
        return v8;
      case 3:
      case 4:
        v46 = (uint64_t)*this;
        goto LABEL_138;
      case 5:
      case 14:
        v47 = (9 * (__clz(*(_DWORD *)this | 1) ^ 0x1F) + 73) >> 6;
        if (*(int *)this >= 0)
          v48 = v47;
        else
          v48 = 10;
        v8 += v48;
        return v8;
      case 8:
        return ++v8;
      case 9:
      case 12:
        v49 = *((_QWORD *)*this + 1);
        if (*((char *)*this + 23) >= 0)
          v49 = *((unsigned __int8 *)*this + 23);
        v8 += v49 + ((9 * (__clz(v49 | 1) ^ 0x1F) + 73) >> 6);
        return v8;
      case 10:
        v8 += (*(uint64_t (**)(int *))(*(_QWORD *)*this + 72))(*this);
        return v8;
      case 11:
        v98 = *(_QWORD *)*this;
        if ((*((_BYTE *)this + 10) & 0x10) != 0)
          v99 = *(uint64_t (**)(void))(v98 + 88);
        else
          v99 = *(uint64_t (**)(void))(v98 + 72);
        v101 = v99();
        v8 += v101 + ((9 * (__clz(v101 | 1) ^ 0x1F) + 73) >> 6);
        return v8;
      case 13:
        v100 = *(_DWORD *)this;
        goto LABEL_136;
      case 17:
        v100 = (2 * *(_DWORD *)this) ^ (*(int *)this >> 31);
LABEL_136:
        v8 += (9 * (__clz(v100 | 1) ^ 0x1F) + 73) >> 6;
        break;
      case 18:
        v46 = (2 * (_QWORD)*this) ^ ((uint64_t)*this >> 63);
LABEL_138:
        v8 += (9 * (__clz(v46 | 1) ^ 0x3F) + 73) >> 6;
        break;
      default:
        return v8;
    }
  }
  return v8;
}

void sub_1C21F5AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::Extension::Free(google::protobuf::internal::ArenaImpl ***this)
{
  uint64_t v2;
  std::string *v3;
  uint64_t v4;
  std::string *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  google::protobuf::internal::ArenaImpl **v9;
  char v10;
  std::string v11[2];

  v2 = *((unsigned __int8 *)this + 8);
  if (*((_BYTE *)this + 9))
  {
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v3 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v3->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    }
    switch(v2)
    {
      case 1:
        if (*this)
        {
          v4 = google::protobuf::RepeatedField<double>::~RepeatedField();
          goto LABEL_29;
        }
        break;
      case 2:
        if (*this)
        {
          v4 = google::protobuf::RepeatedField<float>::~RepeatedField();
          goto LABEL_29;
        }
        break;
      case 3:
      case 16:
      case 18:
        if (*this)
        {
          v4 = google::protobuf::RepeatedField<long long>::~RepeatedField();
          goto LABEL_29;
        }
        break;
      case 4:
      case 6:
        if (*this)
        {
          v4 = google::protobuf::RepeatedField<unsigned long long>::~RepeatedField();
          goto LABEL_29;
        }
        break;
      case 5:
      case 14:
      case 15:
      case 17:
        if (*this)
        {
          v4 = google::protobuf::RepeatedField<int>::~RepeatedField();
          goto LABEL_29;
        }
        break;
      case 7:
      case 13:
        if (*this)
        {
          v4 = google::protobuf::RepeatedField<unsigned int>::~RepeatedField();
          goto LABEL_29;
        }
        break;
      case 8:
        if (*this)
        {
          v4 = google::protobuf::RepeatedField<BOOL>::~RepeatedField();
LABEL_29:
          v8 = 0x1080C4057E67DB5;
          goto LABEL_35;
        }
        break;
      case 9:
      case 12:
        if (*this)
        {
          v4 = google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField();
          goto LABEL_34;
        }
        break;
      case 10:
      case 11:
        v9 = *this;
        if (v9)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(v9);
          google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(v9);
LABEL_34:
          v8 = 0x1020C4014030ADELL;
          goto LABEL_35;
        }
        break;
      default:
        return;
    }
  }
  else
  {
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v5 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    }
    v6 = google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v2];
    if (v6 == 10)
    {
      if (*this)
        (*((void (**)(google::protobuf::internal::ArenaImpl **))**this + 1))(*this);
    }
    else if (v6 == 9)
    {
      v7 = (uint64_t)*this;
      if (v7)
      {
        if (*(char *)(v7 + 23) < 0)
          operator delete(*(void **)v7);
        v4 = v7;
        v8 = 0x1012C40EC159624;
LABEL_35:
        MEMORY[0x1C3BB9B44](v4, v8);
      }
    }
  }
}

void sub_1C21F5D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GeneratedExtensionFinder::~GeneratedExtensionFinder(google::protobuf::internal::GeneratedExtensionFinder *this)
{
  JUMPOUT(0x1C3BB9B44);
}

void google::protobuf::internal::ExtensionSet::ForEach<std::__map_iterator<std::__tree_iterator<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::__tree_node<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,void *> *,long>>,google::protobuf::internal::ExtensionSet::~()::$_0>(google::protobuf::internal::ArenaImpl ***a1, google::protobuf::internal::ArenaImpl ****a2)
{
  google::protobuf::internal::ArenaImpl ***v3;
  google::protobuf::internal::ArenaImpl **v4;
  google::protobuf::internal::ArenaImpl ****v5;
  BOOL v6;

  if (a1 != (google::protobuf::internal::ArenaImpl ***)a2)
  {
    v3 = a1;
    do
    {
      google::protobuf::internal::ExtensionSet::Extension::Free(v3 + 5);
      v4 = v3[1];
      if (v4)
      {
        do
        {
          v5 = (google::protobuf::internal::ArenaImpl ****)v4;
          v4 = (google::protobuf::internal::ArenaImpl **)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (google::protobuf::internal::ArenaImpl ****)v3[2];
          v6 = *v5 == v3;
          v3 = (google::protobuf::internal::ArenaImpl ***)v5;
        }
        while (!v6);
      }
      v3 = (google::protobuf::internal::ArenaImpl ***)v5;
    }
    while (v5 != a2);
  }
}

void google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>>(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1C21F5ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned int *google::protobuf::internal::RepeatedPtrFieldBase::AddAllocatedInternal<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(unsigned int *this, uint64_t a2)
{
  int *v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;

  v2 = (int *)*((_QWORD *)this + 2);
  if (!v2)
    return google::protobuf::internal::RepeatedPtrFieldBase::UnsafeArenaAddAllocated<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(this, a2);
  v3 = *v2;
  if ((int)v3 >= (int)this[3])
    return google::protobuf::internal::RepeatedPtrFieldBase::UnsafeArenaAddAllocated<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(this, a2);
  v4 = v2 + 2;
  v5 = (int)this[2];
  if ((int)v5 < (int)v3)
    *(_QWORD *)&v4[2 * v3] = *(_QWORD *)&v4[2 * v5];
  *(_QWORD *)&v4[2 * v5] = a2;
  this[2] = v5 + 1;
  ++**((_DWORD **)this + 2);
  return this;
}

unsigned int *google::protobuf::internal::RepeatedPtrFieldBase::UnsafeArenaAddAllocated<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(unsigned int *this, uint64_t a2)
{
  unsigned int *v3;
  int *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;

  v3 = this;
  v4 = (int *)*((_QWORD *)this + 2);
  if (!v4)
  {
    v5 = this[3];
    goto LABEL_11;
  }
  v5 = this[2];
  v6 = this[3];
  if (v5 == v6)
  {
LABEL_11:
    this = google::protobuf::internal::RepeatedPtrFieldBase::Reserve(this, v5 + 1);
    goto LABEL_12;
  }
  v7 = *v4;
  if ((_DWORD)v7 != v6)
  {
    if (v5 >= (int)v7)
    {
      v9 = v7 + 1;
      goto LABEL_13;
    }
    *(_QWORD *)&v4[2 * v7 + 2] = *(_QWORD *)&v4[2 * v5 + 2];
LABEL_12:
    v4 = (int *)*((_QWORD *)v3 + 2);
    v9 = *v4 + 1;
LABEL_13:
    *v4 = v9;
    goto LABEL_14;
  }
  this = *(unsigned int **)&v4[2 * v5 + 2];
  if (this)
    v8 = *(_QWORD *)v3 == 0;
  else
    v8 = 0;
  if (v8)
  {
    this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
    v4 = (int *)*((_QWORD *)v3 + 2);
  }
LABEL_14:
  v10 = (int)v3[2];
  v3[2] = v10 + 1;
  *(_QWORD *)&v4[2 * v10 + 2] = a2;
  return this;
}

google::protobuf::internal::ExtensionSet *google::protobuf::internal::ExtensionSet::ForEach<std::__map_iterator<std::__tree_iterator<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::__tree_node<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,void *> *,long>>,google::protobuf::internal::ExtensionSet::MergeFrom(google::protobuf::internal::ExtensionSet const&)::$_0>(_QWORD *a1, _QWORD *a2, google::protobuf::internal::ExtensionSet *this)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      google::protobuf::internal::ExtensionSet::InternalExtensionMergeFrom(this, *((_DWORD *)v5 + 8), (const google::protobuf::internal::ExtensionSet::Extension *)(v5 + 5));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != a2);
  }
  return this;
}

google::protobuf::internal::EpsCopyInputStream *google::protobuf::internal::EpsCopyInputStream::ReadString(uint64_t a1, std::string::value_type *__s, int a3, std::string *a4)
{
  uint64_t v6;

  if (*(_QWORD *)(a1 + 8) - (_QWORD)__s + 16 < a3)
    return google::protobuf::internal::EpsCopyInputStream::ReadStringFallback(a1, __s, a3, a4);
  v6 = a3;
  MEMORY[0x1C3BB9640](a4, __s, a3);
  return (google::protobuf::internal::EpsCopyInputStream *)&__s[v6];
}

google::protobuf::internal *google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::PackedEnumParserArg<std::string>(void *,char const*,google::protobuf::internal::ParseContext *,BOOL (*)(void const*,int),void const*,google::protobuf::internal::InternalMetadata *,int)::{lambda(unsigned long long)#1}>(uint64_t a1, google::protobuf::internal *this, uint64_t a3)
{
  int v5;
  google::protobuf::internal *result;
  int v7;
  unint64_t v8;
  int v9;
  __int128 v10;
  signed int v11;
  std::string *v12;
  int v13;
  std::string *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  std::string *v18;
  _OWORD v19[2];
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;
  char v23;
  _OWORD v24[2];
  uint64_t v25;
  std::string v26;
  __int16 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = (google::protobuf::internal *)google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = (google::protobuf::internal *)((char *)this + 1);
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v15 = (unint64_t)result + v5;
    v16 = *(_OWORD *)(a3 + 16);
    v19[0] = *(_OWORD *)a3;
    v19[1] = v16;
    v20 = *(_QWORD *)(a3 + 32);
    result = (google::protobuf::internal *)google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::PackedEnumParserArg<std::string>(void *,char const*,google::protobuf::internal::ParseContext *,BOOL (*)(void const*,int),void const*,google::protobuf::internal::InternalMetadata *,int)::{lambda(unsigned long long)#1}>(result, v15, (unsigned int **)v19);
    if ((google::protobuf::internal *)v15 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      v10 = *(_OWORD *)(a3 + 16);
      v24[0] = *(_OWORD *)a3;
      v24[1] = v10;
      v25 = *(_QWORD *)(a3 + 32);
      result = (google::protobuf::internal *)google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::PackedEnumParserArg<std::string>(void *,char const*,google::protobuf::internal::ParseContext *,BOOL (*)(void const*,int),void const*,google::protobuf::internal::InternalMetadata *,int)::{lambda(unsigned long long)#1}>(result, v8, (unsigned int **)v24);
      if (!result)
        break;
      v11 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v11 >= 0x11)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v12 = google::protobuf::internal::LogMessage::operator<<(&v26, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v23, (const char **)&v12->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v26.__r_.__value_.__l.__data_);
      }
      v13 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v27 = 0;
        v26.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v22 = *(_QWORD *)(a3 + 32);
        v17 = *(_OWORD *)(a3 + 16);
        v21[0] = *(_OWORD *)a3;
        v21[1] = v17;
        v18 = (std::string *)google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::PackedEnumParserArg<std::string>(void *,char const*,google::protobuf::internal::ParseContext *,BOOL (*)(void const*,int),void const*,google::protobuf::internal::InternalMetadata *,int)::{lambda(unsigned long long)#1}>((google::protobuf::internal *)((char *)&v26 + v11), (unint64_t)&v26 + v13, (unsigned int **)v21);
        result = 0;
        if (v18 && v18 == (std::string *)((char *)&v26 + v13))
          return (google::protobuf::internal *)(*(_QWORD *)(a1 + 8) + v13);
        return result;
      }
      v5 = v5 - v9 - v11;
      if (v5 <= 0)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v14 = google::protobuf::internal::LogMessage::operator<<(&v26, "CHECK failed: (size) > (0): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v23, (const char **)&v14->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v26.__r_.__value_.__l.__data_);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = google::protobuf::internal::EpsCopyInputStream::Next((google::protobuf::internal::EpsCopyInputStream *)a1);
      if (!result)
        return result;
      result = (google::protobuf::internal *)((char *)result + v11);
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_1C21F630C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  google::protobuf::internal::LogMessage::~LogMessage(&a27);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::PackedEnumParserArg<std::string>(void *,char const*,google::protobuf::internal::ParseContext *,BOOL (*)(void const*,int),void const*,google::protobuf::internal::InternalMetadata *,int)::{lambda(unsigned long long)#1}>(google::protobuf::internal *this, unint64_t a2, unsigned int **a3)
{
  unsigned __int8 *v3;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t *v13;
  std::string *v14;

  v3 = (unsigned __int8 *)this;
  if ((unint64_t)this < a2)
  {
    do
    {
      v6 = *v3;
      if ((char)*v3 < 0)
      {
        v7 = v6 + (v3[1] << 7);
        v6 = (v7 - 128);
        if ((char)v3[1] < 0)
        {
          v3 = (unsigned __int8 *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v3, (v7 - 128));
          if (!v3)
            return v3;
          v6 = v8;
        }
        else
        {
          v3 += 2;
        }
      }
      else
      {
        ++v3;
      }
      if (((unsigned int (*)(unsigned int *, unint64_t))a3[1])(a3[2], v6))
      {
        v9 = (int *)*a3;
        v10 = **a3;
        if ((_DWORD)v10 == (*a3)[1])
        {
          v11 = v10 + 1;
          google::protobuf::RepeatedField<int>::Reserve((int *)*a3, v10 + 1);
          *(_DWORD *)(google::protobuf::RepeatedField<int>::elements((uint64_t)v9) + 4 * v10) = v6;
        }
        else
        {
          *(_DWORD *)(google::protobuf::RepeatedField<int>::elements((uint64_t)*a3) + 4 * v10) = v6;
          v11 = v10 + 1;
        }
        *v9 = v11;
      }
      else
      {
        v12 = *((_DWORD *)a3 + 8);
        v13 = (uint64_t *)a3[3];
        if ((*v13 & 1) != 0)
          v14 = (std::string *)((*v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
        else
          v14 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>(v13);
        google::protobuf::internal::WriteVarint(v12, v6, v14);
      }
    }
    while ((unint64_t)v3 < a2);
  }
  return v3;
}

char *google::protobuf::internal::EpsCopyInputStream::InitFrom(uint64_t a1, char *__src, int64_t __n)
{
  char *v6;
  uint64_t v7;
  char *v8;

  *(_DWORD *)(a1 + 84) = 0;
  if (__n >= 17)
  {
    *(_DWORD *)(a1 + 28) = 16;
    v6 = &__src[__n - 16];
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = a1 + 40;
    if (*(_QWORD *)(a1 + 72) != 1)
      return __src;
    v7 = 2;
    v8 = __src;
    goto LABEL_6;
  }
  v8 = (char *)(a1 + 40);
  memcpy((void *)(a1 + 40), __src, __n);
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)a1 = &v8[__n];
  *(_QWORD *)(a1 + 8) = &v8[__n];
  *(_QWORD *)(a1 + 16) = 0;
  if (*(_QWORD *)(a1 + 72) == 1)
  {
    v7 = __src - v8;
LABEL_6:
    *(_QWORD *)(a1 + 72) = v7;
  }
  return v8;
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (uint64_t *)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1C21F65A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(_QWORD *a1)
{
  unsigned int *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 2;
    v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
          (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t **std::__tree<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::__map_value_compare<int,std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::less<int>,true>,std::allocator<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>>>::__emplace_unique_key_args<int,std::pair<int const,google::protobuf::internal::ExtensionSet::Extension>>(uint64_t **a1, int *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;
  __int128 v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x40uLL);
    v11 = a3[1];
    *((_OWORD *)v10 + 2) = *a3;
    *((_OWORD *)v10 + 3) = v11;
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void google::protobuf::internal::arena_destruct_object<std::map<int,google::protobuf::internal::ExtensionSet::Extension>>(uint64_t a1)
{
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(a1, *(_QWORD **)(a1 + 8));
}

uint64_t *std::__tree<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::__map_value_compare<int,std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::less<int>,true>,std::allocator<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>>>::__emplace_hint_unique_key_args<int,std::pair<int const,google::protobuf::internal::ExtensionSet::Extension>>(uint64_t **a1, uint64_t *a2, int *a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  __int128 v9;
  uint64_t v11;
  uint64_t *v12;

  v6 = std::__tree<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::__map_value_compare<int,std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::less<int>,true>,std::allocator<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>>>::__find_equal<int>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x40uLL);
    v9 = a4[1];
    *((_OWORD *)v7 + 2) = *a4;
    *((_OWORD *)v7 + 3) = v9;
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at(a1, (uint64_t)v12, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::__map_value_compare<int,std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::less<int>,true>,std::allocator<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>>>::__find_equal<int>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void google::protobuf::internal::ExtensionSet::IsInitialized()
{
  __assert_rtn("flat_end", "extension_set.h", 829, "!is_large()");
}

uint64_t google::protobuf::internal::DestroyMessage(google::protobuf::internal *this, const void *a2)
{
  return (**(uint64_t (***)(google::protobuf::internal *))this)(this);
}

void google::protobuf::internal::DestroyString(void **this, const void *a2)
{
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void google::protobuf::internal::InitProtobufDefaultsSlow(google::protobuf::internal *this)
{
  unsigned __int8 v1;
  const void *v2;

  if ((v1 & 1) == 0)
  {
    {
      google::protobuf::internal::fixed_address_empty_string = 0;
      *(_QWORD *)algn_1EF770268 = 0;
      qword_1EF770270 = 0;
      google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyString, (void (*)(const void *))&google::protobuf::internal::fixed_address_empty_string, v2);
      atomic_store(1u, (unsigned __int8 *)&google::protobuf::internal::init_protobuf_defaults_state);
    }
  }
}

void sub_1C21F69DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::GenericSwap(google::protobuf::internal *this, google::protobuf::MessageLite *a2, google::protobuf::MessageLite *a3)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(google::protobuf::internal *, google::protobuf::MessageLite *, google::protobuf::MessageLite *))(*(_QWORD *)this + 24))(this, a2, a3);
  (*(void (**)(uint64_t, google::protobuf::internal *))(*(_QWORD *)v5 + 64))(v5, this);
  (*(void (**)(google::protobuf::internal *))(*(_QWORD *)this + 40))(this);
  (*(void (**)(google::protobuf::internal *, google::protobuf::MessageLite *))(*(_QWORD *)this + 64))(this, a2);
  (*(void (**)(google::protobuf::MessageLite *))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(google::protobuf::MessageLite *, uint64_t))(*(_QWORD *)a2 + 64))(a2, v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_1C21F6A90(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::InitSCCImpl(_DWORD *a1)
{
  unsigned __int8 v2;
  google::protobuf::internal *v3;
  uint64_t v4;
  std::string *v5;
  unsigned __int8 v6;
  char v7;
  std::string v8[2];

  if ((v2 & 1) == 0
  {
    __cxa_atexit((void (*)(void *))google::protobuf::internal::WrappedMutex::~WrappedMutex, &google::protobuf::internal::InitSCCImpl(google::protobuf::internal::SCCInfoBase *)::mu, &dword_1C2196000);
  }
  v3 = (google::protobuf::internal *)pthread_self();
  v4 = (uint64_t)v3;
  if (google::protobuf::internal::InitSCCImpl(google::protobuf::internal::SCCInfoBase *)::runner)
  {
    if (v3
      && v3 == (google::protobuf::internal *)google::protobuf::internal::InitSCCImpl(google::protobuf::internal::SCCInfoBase *)::runner)
    {
      goto LABEL_5;
    }
  }
  else if (!v3)
  {
LABEL_5:
    if (*a1 != 1)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/generated_message_util.cc", 785);
      v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (scc->visit_status.load(std::memory_order_relaxed)) == (SCCInfoBase::kRunning): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
    }
    return;
  }
  v6 = atomic_load((unsigned __int8 *)&google::protobuf::internal::init_protobuf_defaults_state);
  if ((v6 & 1) == 0)
    google::protobuf::internal::InitProtobufDefaultsSlow(v3);
  std::mutex::lock(&google::protobuf::internal::InitSCCImpl(google::protobuf::internal::SCCInfoBase *)::mu);
  google::protobuf::internal::InitSCCImpl(google::protobuf::internal::SCCInfoBase *)::runner = v4;
  google::protobuf::internal::InitSCCImpl(google::protobuf::internal::SCCInfoBase *)::runner = 0;
  std::mutex::unlock(&google::protobuf::internal::InitSCCImpl(google::protobuf::internal::SCCInfoBase *)::mu);
}

void sub_1C21F6BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *google::protobuf::internal::`anonymous namespace'::InitSCC_DFS(_DWORD *result)
{
  uint64_t (**v1)(void);
  _DWORD *v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;

  if (*result == -1)
  {
    v1 = (uint64_t (**)(void))result;
    *result = 1;
    v2 = result + 6;
    v3 = result[1];
    if (v3 >= 1)
    {
      for (i = 0; i < v3; ++i)
      {
        if (*(_QWORD *)&v2[2 * i])
        {
          v3 = *((_DWORD *)v1 + 1);
        }
      }
    }
    v5 = v3;
    v6 = *((_DWORD *)v1 + 2);
    if (v6 >= 1)
    {
      v7 = 0;
      v8 = &v2[2 * v5];
      do
      {
        if (**(_QWORD **)&v8[2 * v7])
        {
          v6 = *((_DWORD *)v1 + 2);
        }
        ++v7;
      }
      while (v7 < v6);
    }
    result = (_DWORD *)v1[2]();
    atomic_store(0, (unsigned int *)v1);
  }
  return result;
}

_QWORD *std::operator<<[abi:ne180100]<std::char_traits<char>>(_QWORD *a1, char *a2)
{
  char *v3;
  int v4;
  const std::locale::facet *v5;
  int v6;
  std::locale v8;

  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v5 = std::locale::use_facet(&v8, MEMORY[0x1E0DE4A90]);
    v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_1C21F6D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MergeFromImpl<false>(char *__src, int64_t __n, google::protobuf::MessageLite *a3, char a4)
{
  char *v6;
  BOOL v7;
  _BYTE v9[32];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0x7FFFFFFF00000000;
  v14 = google::protobuf::io::CodedInputStream::default_recursion_limit_;
  v15 = 0x80000000;
  v16 = 0;
  v17 = 0;
  v6 = google::protobuf::internal::EpsCopyInputStream::InitFrom((uint64_t)v9, __src, __n);
  if ((*(uint64_t (**)(google::protobuf::MessageLite *, char *, _BYTE *))(*(_QWORD *)a3 + 88))(a3, v6, v9))
    v7 = (_DWORD)v13 == 0;
  else
    v7 = 0;
  if (v7)
  {
    if ((a4 & 2) != 0
      || ((*(uint64_t (**)(google::protobuf::MessageLite *))(*(_QWORD *)a3 + 48))(a3) & 1) != 0)
    {
      return 1;
    }
    google::protobuf::MessageLite::LogInitializationErrorMessage(a3);
  }
  return 0;
}

_QWORD *google::protobuf::MessageLite::InitializationErrorString@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "(cannot determine missing fields for lite message)");
}

void google::protobuf::MessageLite::LogInitializationErrorMessage(google::protobuf::MessageLite *this)
{
  std::string *v2;
  char v3;
  std::string __p;
  std::string v5[2];

  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 133);
  v2 = google::protobuf::internal::LogMessage::operator<<(v5, (const std::string::value_type *)&__p);
  google::protobuf::internal::LogFinisher::operator=((int)&v3, (const char **)&v2->__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
}

void sub_1C21F6EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  if (a15 < 0)
    operator delete(__p);
  google::protobuf::internal::LogMessage::~LogMessage(&a16);
  _Unwind_Resume(a1);
}

void google::protobuf::`anonymous namespace'::InitializationErrorMessage(const std::string::value_type *this@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  const std::string::value_type *p_p;
  std::string::size_type v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  void *__p;
  std::string::size_type v12;
  unsigned __int8 v13;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a3, "Can't ");
  std::string::append(a3, this);
  std::string::append(a3, " message of type \"");
  (*(void (**)(void **__return_ptr, const char *))(*(_QWORD *)a2 + 16))(&__p, a2);
  if ((v13 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v13 & 0x80u) == 0)
    v8 = v13;
  else
    v8 = v12;
  std::string::append(a3, p_p, v8);
  if ((char)v13 < 0)
    operator delete(__p);
  std::string::append(a3, "\" because it is missing required fields: ");
  (*(void (**)(void **__return_ptr, const char *))(*(_QWORD *)a2 + 56))(&__p, a2);
  if ((v13 & 0x80u) == 0)
    v9 = (const std::string::value_type *)&__p;
  else
    v9 = (const std::string::value_type *)__p;
  if ((v13 & 0x80u) == 0)
    v10 = v13;
  else
    v10 = v12;
  std::string::append(a3, v9, v10);
  if ((char)v13 < 0)
    operator delete(__p);
}

void sub_1C21F6FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::MessageLite::ParseFromArray(google::protobuf::MessageLite *this, char *a2, unsigned int a3)
{
  int64_t v5;

  if ((a3 & 0x80000000) != 0)
    google::protobuf::MessageLite::ParseFromArray();
  v5 = a3;
  (*(void (**)(google::protobuf::MessageLite *))(*(_QWORD *)this + 40))(this);
  return google::protobuf::internal::MergeFromImpl<false>(a2, v5, this, 1);
}

BOOL google::protobuf::MessageLite::AppendToString(const char *a1, std::string *a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string __p;
  std::string v9[2];

  if (((*(uint64_t (**)(const char *))(*(_QWORD *)a1 + 48))(a1) & 1) == 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 449);
    v4 = google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: IsInitialized(): ");
    v5 = google::protobuf::internal::LogMessage::operator<<(v4, (const std::string::value_type *)&__p);
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
  }
  return google::protobuf::MessageLite::AppendPartialToString((uint64_t)a1, a2);
}

void sub_1C21F7144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  if (a15 < 0)
    operator delete(__p);
  google::protobuf::internal::LogMessage::~LogMessage(&a16);
  _Unwind_Resume(a1);
}

BOOL google::protobuf::MessageLite::AppendPartialToString(uint64_t a1, std::string *a2)
{
  std::string *v2;
  std::string::size_type size;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  char v14;
  std::string __p[2];
  std::string v16[2];
  uint64_t v17;
  __int16 v18;
  char v19;
  uint64_t v20;

  v2 = a2;
  v20 = *MEMORY[0x1E0C80C00];
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    size = a2->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = v5;
  v7 = v5 >> 31;
  if (v5 >> 31)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 457);
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    v10 = google::protobuf::internal::LogMessage::operator<<(v16, (const std::string::value_type *)__p);
    v11 = google::protobuf::internal::LogMessage::operator<<(v10, " exceeded maximum protobuf size of 2GB: ");
    v12 = google::protobuf::internal::LogMessage::operator<<(v11, v6);
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v9 = v16;
    goto LABEL_12;
  }
  std::string::resize(v2, v5 + size, 0);
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
  *(_OWORD *)&v16[0].__r_.__value_.__l.__data_ = (unint64_t)v2 + size + v6;
  v17 = 0;
  v18 = 0;
  v19 = google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ & 1;
  if (v16[0].__r_.__value_.__r.__words[0] != (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 360);
    v8 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: target + size == res: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
    v9 = __p;
LABEL_12:
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9->__r_.__value_.__l.__data_);
  }
  return v7 == 0;
}

void sub_1C21F7320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  google::protobuf::internal::LogMessage::~LogMessage(&__p);
  _Unwind_Resume(a1);
}

BOOL google::protobuf::MessageLite::SerializeAsString@<W0>(google::protobuf::MessageLite *this@<X0>, uint64_t a2@<X8>)
{
  _BOOL8 result;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = google::protobuf::MessageLite::AppendToString((const char *)this, (std::string *)a2);
  if (!result)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(_BYTE **)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 23) = 0;
    }
  }
  return result;
}

void sub_1C21F73B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void google::protobuf::internal::OnShutdownRun(google::protobuf::internal *this, void (*a2)(const void *), const void *a3)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v5 = google::protobuf::internal::ShutdownData::get(this);
  std::mutex::lock((std::mutex *)(v5 + 24));
  v6 = *(_QWORD **)(v5 + 8);
  v7 = *(_QWORD *)(v5 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v9 = ((uint64_t)v6 - *(_QWORD *)v5) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v11 = v7 - *(_QWORD *)v5;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::aobject>>(v5 + 16, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v9];
    v15 = &v13[16 * v12];
    *(_QWORD *)v14 = this;
    *((_QWORD *)v14 + 1) = a2;
    v8 = v14 + 16;
    v17 = *(char **)v5;
    v16 = *(char **)(v5 + 8);
    if (v16 != *(char **)v5)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      v16 = *(char **)v5;
    }
    *(_QWORD *)v5 = v14;
    *(_QWORD *)(v5 + 8) = v8;
    *(_QWORD *)(v5 + 16) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = this;
    v6[1] = a2;
    v8 = v6 + 2;
  }
  *(_QWORD *)(v5 + 8) = v8;
  std::mutex::unlock((std::mutex *)(v5 + 24));
}

void sub_1C21F74E0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ShutdownData::get(google::protobuf::internal::ShutdownData *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 850045863;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_QWORD *)(v3 + 80) = 0;
    google::protobuf::internal::ShutdownData::get(void)::data = v3;
  }
  return google::protobuf::internal::ShutdownData::get(void)::data;
}

void sub_1C21F7580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

google::protobuf::internal::ShutdownData *google::protobuf::ShutdownProtobufLibrary(google::protobuf::internal::ShutdownData *this)
{
  if ((google::protobuf::ShutdownProtobufLibrary(void)::is_shutdown & 1) == 0)
  {
    this = (google::protobuf::internal::ShutdownData *)google::protobuf::internal::ShutdownData::get(this);
    if (this)
    {
      google::protobuf::internal::ShutdownData::~ShutdownData(this);
      this = (google::protobuf::internal::ShutdownData *)MEMORY[0x1C3BB9B44]();
    }
    google::protobuf::ShutdownProtobufLibrary(void)::is_shutdown = 1;
  }
  return this;
}

void google::protobuf::internal::ShutdownData::~ShutdownData(google::protobuf::internal::ShutdownData *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void (*v6)(_QWORD);
  uint64_t v7;
  void *v8;

  v2 = *(_QWORD **)this;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = v3 - 2;
  if (*(_QWORD **)this != v3 && v4 > v2)
  {
    do
    {
      v6 = (void (*)(_QWORD))*v2;
      *v2 = *v4;
      *v4 = v6;
      v7 = v2[1];
      v2[1] = v4[1];
      v4[1] = v7;
      v2 += 2;
      v4 -= 2;
    }
    while (v2 < v4);
    v2 = *(_QWORD **)this;
    v3 = (_QWORD *)*((_QWORD *)this + 1);
  }
  while (v2 != v3)
  {
    ((void (*)(_QWORD))*v2)(v2[1]);
    v2 += 2;
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 24));
  v8 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v8;
    operator delete(v8);
  }
}

void google::protobuf::MessageLite::ParseFromArray()
{
  __assert_rtn("StringPiece", "stringpiece.h", 229, "len >= 0");
}

google::protobuf::internal::EpsCopyInputStream *google::protobuf::internal::EpsCopyInputStream::Next(google::protobuf::internal::EpsCopyInputStream *this)
{
  std::string *v2;
  google::protobuf::internal::EpsCopyInputStream *result;
  uint64_t v4;
  int v5;
  char v6;
  std::string v7[2];

  if (*((int *)this + 7) <= 16)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 158);
    v2 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: limit_ > kSlopBytes: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v2->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  result = google::protobuf::internal::EpsCopyInputStream::NextBuffer(this, 0, -1);
  v4 = *((_QWORD *)this + 1);
  if (result)
  {
    v5 = *((_DWORD *)this + 7) + (_DWORD)result - v4;
    *((_DWORD *)this + 7) = v5;
    v4 += v5 & (v5 >> 31);
  }
  else
  {
    *((_DWORD *)this + 20) = 1;
  }
  *(_QWORD *)this = v4;
  return result;
}

void sub_1C21F775C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal::EpsCopyInputStream *google::protobuf::internal::EpsCopyInputStream::NextBuffer(google::protobuf::internal::EpsCopyInputStream *this, unsigned int a2, int a3)
{
  google::protobuf::internal::EpsCopyInputStream *v3;
  char *v5;
  int v6;
  std::string *v7;
  int v8;
  std::string *v10;
  std::string *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  BOOL v17;
  const char *v18;
  char *SizeFallback;
  uint64_t v20;
  size_t v21;
  std::string *v22;
  std::string *v23;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char *v28;
  void *v29;
  unint64_t v30;
  char v31;
  void *__src;
  std::string v33[2];

  v3 = (google::protobuf::internal::EpsCopyInputStream *)*((_QWORD *)this + 2);
  if (!v3)
    return v3;
  v5 = (char *)this + 40;
  if (v3 != (google::protobuf::internal::EpsCopyInputStream *)((char *)this + 40))
  {
    v6 = *((_DWORD *)this + 6);
    if (v6 <= 16)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 105);
      v7 = google::protobuf::internal::LogMessage::operator<<(v33, "CHECK failed: size_ > kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((int)&__src, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v33[0].__r_.__value_.__l.__data_);
      v3 = (google::protobuf::internal::EpsCopyInputStream *)*((_QWORD *)this + 2);
      v6 = *((_DWORD *)this + 6);
    }
    *((_QWORD *)this + 1) = (char *)v3 + v6 - 16;
    *((_QWORD *)this + 2) = v5;
    if (*((_QWORD *)this + 9) == 1)
      *((_QWORD *)this + 9) = 2;
    return v3;
  }
  *(_OWORD *)v3 = *(_OWORD *)*((_QWORD *)this + 1);
  if (*((int *)this + 21) < 1)
    goto LABEL_46;
  v8 = a3;
  if (a3 < 0)
    goto LABEL_39;
  if ((a2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 53);
    v11 = google::protobuf::internal::LogMessage::operator<<(v33, "CHECK failed: overrun >= 0: ");
    google::protobuf::internal::LogFinisher::operator=((int)&__src, (const char **)&v11->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v33[0].__r_.__value_.__l.__data_);
LABEL_14:
    v12 = (unsigned __int8 *)this + 56;
    v13 = (unsigned __int8 *)v3 + (int)a2;
    v14 = v13;
    while (2)
    {
      v15 = (char)*v14++;
      v16 = v15;
      if (v15 < 0)
      {
        v16 = v16 + (*v14 << 7) - 128;
        if ((char)*v14 < 0)
        {
          v14 = v13 + 3;
          v20 = -21;
          while (1)
          {
            v16 += (*(v14 - 1) - 1) << (v20 + 35);
            if (((char)*(v14 - 1) & 0x80000000) == 0)
              break;
            ++v14;
            v20 += 7;
            if (!v20)
              goto LABEL_39;
          }
        }
        else
        {
          v14 = v13 + 2;
        }
      }
      if (v14 <= v12)
      {
        if (!v16)
          goto LABEL_46;
        switch(v16 & 7)
        {
          case 0:
            v33[0].__r_.__value_.__r.__words[0] = 0;
            v14 = google::protobuf::internal::VarintParse<unsigned long long>((char *)v14, v33);
            if (!v14)
              goto LABEL_39;
            goto LABEL_38;
          case 1:
            v14 += 8;
            goto LABEL_38;
          case 2:
            v18 = (const char *)*v14;
            if ((char)*v14 < 0)
            {
              SizeFallback = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v14, v18);
              if (!SizeFallback)
                goto LABEL_39;
            }
            else
            {
              SizeFallback = (char *)(v14 + 1);
            }
            if (v12 - (unsigned __int8 *)SizeFallback < (int)v18)
              goto LABEL_39;
            v14 = (unsigned __int8 *)&SizeFallback[(int)v18];
LABEL_38:
            v13 = v14;
            if (v14 >= v12)
              goto LABEL_39;
            continue;
          case 3:
            ++v8;
            goto LABEL_38;
          case 4:
            v17 = __OFSUB__(v8--, 1);
            if (v8 < 0 != v17)
              goto LABEL_46;
            goto LABEL_38;
          case 5:
            v14 += 4;
            goto LABEL_38;
          default:
            goto LABEL_39;
        }
      }
      goto LABEL_39;
    }
  }
  if (a2 >= 0x11)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 54);
    v10 = google::protobuf::internal::LogMessage::operator<<(v33, "CHECK failed: overrun <= kSlopBytes: ");
    google::protobuf::internal::LogFinisher::operator=((int)&__src, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v33[0].__r_.__value_.__l.__data_);
    goto LABEL_39;
  }
  if (a2 != 16)
    goto LABEL_14;
LABEL_39:
  __src = 0;
  if (!(*(unsigned int (**)(_QWORD, void **, char *))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), &__src, (char *)this + 24))
  {
LABEL_45:
    *((_DWORD *)this + 21) = 0;
LABEL_46:
    if (*((_QWORD *)this + 9) == 2)
      *((_QWORD *)this + 9) = *((_QWORD *)this + 1) - (_QWORD)v3;
    *((_QWORD *)this + 1) = (char *)this + 56;
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    return v3;
  }
  while (1)
  {
    v21 = *((unsigned int *)this + 6);
    *((_DWORD *)this + 21) -= v21;
    if ((int)v21 >= 17)
    {
      v27 = *((_QWORD *)this + 9);
      v26 = (_QWORD *)((char *)this + 72);
      v25 = v27;
      v28 = (char *)(v26 - 2);
      v29 = __src;
      *((_OWORD *)v26 - 1) = *(_OWORD *)__src;
      *(v26 - 7) = v29;
      goto LABEL_52;
    }
    if ((int)v21 >= 1)
      break;
    if ((_DWORD)v21)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 137);
      v22 = google::protobuf::internal::LogMessage::operator<<(v33, "CHECK failed: size_ == 0: ");
      v23 = google::protobuf::internal::LogMessage::operator<<(v22, *((_DWORD *)this + 6));
      google::protobuf::internal::LogFinisher::operator=((int)&v31, (const char **)&v23->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v33[0].__r_.__value_.__l.__data_);
    }
    if (((*(uint64_t (**)(_QWORD, void **, char *))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), &__src, (char *)this + 24) & 1) == 0)goto LABEL_45;
  }
  memcpy((char *)this + 56, __src, v21);
  v30 = *((_QWORD *)this + 9);
  v26 = (_QWORD *)((char *)this + 72);
  v25 = v30;
  v28 = (char *)v3 + v21;
  *(v26 - 7) = v3;
LABEL_52:
  *(v26 - 8) = v28;
  if (v25 > 1)
    *v26 = 1;
  return v3;
}

void sub_1C21F7B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::EpsCopyInputStream::DoneFallback(google::protobuf::internal::EpsCopyInputStream *this, signed int a2, int a3)
{
  int v3;
  signed int v5;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  google::protobuf::internal::EpsCopyInputStream *Buffer;
  uint64_t v14;
  int v15;
  uint64_t result;
  std::string *v17;
  char v18;
  std::string v19[2];

  v3 = *((_DWORD *)this + 7);
  if (v3 < a2)
    return 0;
  v5 = a2;
  if (v3 == a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 175);
    v7 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: overrun != limit_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
    v3 = *((_DWORD *)this + 7);
  }
  if (v3 <= v5)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 176);
    v8 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: overrun < limit_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v8->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
    v3 = *((_DWORD *)this + 7);
  }
  if (*(_QWORD *)this != *((_QWORD *)this + 1) + (v3 & (v3 >> 31)))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 181);
    v9 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: limit_end_ == buffer_end_ + (std::min)(0, limit_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
    v3 = *((_DWORD *)this + 7);
  }
  if (v3 <= 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 183);
    v10 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: limit_ > 0: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  if (*(_QWORD *)this != *((_QWORD *)this + 1))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 184);
    v11 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: limit_end_ == buffer_end_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v11->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  while (1)
  {
    if (v5 < 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 188);
      v12 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: overrun >= 0: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
    }
    Buffer = google::protobuf::internal::EpsCopyInputStream::NextBuffer(this, v5, a3);
    if (!Buffer)
      break;
    v14 = *((_QWORD *)this + 1);
    v15 = *((_DWORD *)this + 7) + (_DWORD)Buffer - v14;
    *((_DWORD *)this + 7) = v15;
    result = (uint64_t)Buffer + v5;
    v5 = result - v14;
    if ((int)result - (int)v14 < 0)
    {
      *(_QWORD *)this = v14 + (v15 & (v15 >> 31));
      return result;
    }
  }
  if (v5)
    return 0;
  if (*((int *)this + 7) <= 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 193);
    v17 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: limit_ > 0: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v17->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  result = *((_QWORD *)this + 1);
  *(_QWORD *)this = result;
  *((_DWORD *)this + 20) = 1;
  return result;
}

void sub_1C21F7DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal::EpsCopyInputStream *google::protobuf::internal::EpsCopyInputStream::SkipFallback(google::protobuf::internal::EpsCopyInputStream *this, const char *a2, int a3)
{
  int v5;
  BOOL v6;
  std::string *v7;
  google::protobuf::internal::EpsCopyInputStream *result;
  char v9;
  std::string v10[2];

  v5 = *((_DWORD *)this + 2) - (_DWORD)a2 + 16;
  while (1)
  {
    v6 = __OFSUB__(a3, v5);
    a3 -= v5;
    if ((a3 < 0) ^ v6 | (a3 == 0))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      v7 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: size > chunk_size: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
    }
    if (!*((_QWORD *)this + 2) || *((int *)this + 7) < 17)
      break;
    result = google::protobuf::internal::EpsCopyInputStream::Next(this);
    if (!result)
      return result;
    v5 = *((_DWORD *)this + 2) - (_DWORD)result;
    if (a3 <= v5)
      return (google::protobuf::internal::EpsCopyInputStream *)((char *)result + a3 + 16);
  }
  return 0;
}

void sub_1C21F7F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal::EpsCopyInputStream *google::protobuf::internal::EpsCopyInputStream::ReadStringFallback(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  int v5;
  const std::string::value_type *v6;
  uint64_t v8;
  std::string::size_type size;
  int v10;
  int v11;
  BOOL v12;
  std::string *v13;
  google::protobuf::internal::EpsCopyInputStream *result;
  char v15;
  std::string v16[2];

  v5 = a3;
  v6 = __s;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 - (uint64_t)__s + *(int *)(a1 + 28) >= a3)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      size = this->__r_.__value_.__l.__size_;
    else
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (a3 >= 50000000)
      v10 = 50000000;
    else
      v10 = a3;
    std::string::reserve(this, size + v10);
    v8 = *(_QWORD *)(a1 + 8);
  }
  v11 = v8 - (_DWORD)v6 + 16;
  while (1)
  {
    v12 = __OFSUB__(v5, v11);
    v5 -= v11;
    if ((v5 < 0) ^ v12 | (v5 == 0))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      v13 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: size > chunk_size: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    }
    if (!*(_QWORD *)(a1 + 16))
      break;
    std::string::append(this, v6, v11);
    if (*(int *)(a1 + 28) < 17)
      break;
    result = google::protobuf::internal::EpsCopyInputStream::Next((google::protobuf::internal::EpsCopyInputStream *)a1);
    if (!result)
      return result;
    v6 = (char *)result + 16;
    v11 = *(_DWORD *)(a1 + 8) - (_DWORD)result;
    if (v5 <= v11)
    {
      std::string::append(this, v6, v5);
      return (google::protobuf::internal::EpsCopyInputStream *)&v6[v5];
    }
  }
  return 0;
}

void sub_1C21F8090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal::EpsCopyInputStream *google::protobuf::internal::EpsCopyInputStream::AppendStringFallback(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  int v5;
  const std::string::value_type *v6;
  uint64_t v8;
  std::string::size_type size;
  int v10;
  int v11;
  BOOL v12;
  std::string *v13;
  google::protobuf::internal::EpsCopyInputStream *result;
  char v15;
  std::string v16[2];

  v5 = a3;
  v6 = __s;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 - (uint64_t)__s + *(int *)(a1 + 28) >= a3)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      size = this->__r_.__value_.__l.__size_;
    else
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (a3 >= 50000000)
      v10 = 50000000;
    else
      v10 = a3;
    std::string::reserve(this, size + v10);
    v8 = *(_QWORD *)(a1 + 8);
  }
  v11 = v8 - (_DWORD)v6 + 16;
  while (1)
  {
    v12 = __OFSUB__(v5, v11);
    v5 -= v11;
    if ((v5 < 0) ^ v12 | (v5 == 0))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      v13 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: size > chunk_size: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    }
    if (!*(_QWORD *)(a1 + 16))
      break;
    std::string::append(this, v6, v11);
    if (*(int *)(a1 + 28) < 17)
      break;
    result = google::protobuf::internal::EpsCopyInputStream::Next((google::protobuf::internal::EpsCopyInputStream *)a1);
    if (!result)
      return result;
    v6 = (char *)result + 16;
    v11 = *(_DWORD *)(a1 + 8) - (_DWORD)result;
    if (v5 <= v11)
    {
      std::string::append(this, v6, v5);
      return (google::protobuf::internal::EpsCopyInputStream *)&v6[v5];
    }
  }
  return 0;
}

void sub_1C21F81F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::MessageLite>(google::protobuf::internal::EpsCopyInputStream *this, uint64_t a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  const char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)(*(uint64_t (**)(uint64_t, const char *, google::protobuf::internal::EpsCopyInputStream *))(*(_QWORD *)a2 + 88))(a2, v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

void google::protobuf::internal::WriteVarint(int a1, unint64_t a2, std::string *this)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v5 = (8 * a1);
  if (v5 < 0x80)
  {
    LOBYTE(v6) = 8 * a1;
  }
  else
  {
    do
    {
      std::string::push_back(this, v5 | 0x80);
      v6 = v5 >> 7;
      v7 = v5 >> 14;
      v5 >>= 7;
    }
    while (v7);
  }
  std::string::push_back(this, v6);
  if (a2 < 0x80)
  {
    LOBYTE(v8) = a2;
  }
  else
  {
    do
    {
      std::string::push_back(this, a2 | 0x80);
      v8 = a2 >> 7;
      v9 = a2 >> 14;
      a2 >>= 7;
    }
    while (v9);
  }
  std::string::push_back(this, v8);
}

uint64_t google::protobuf::internal::VarintParseSlow32(google::protobuf::internal *this, const char *a2)
{
  uint64_t result;
  uint64_t v4;

  result = (uint64_t)this + 3;
  v4 = -21;
  while (1)
  {
    LODWORD(a2) = ((*(unsigned __int8 *)(result - 1) - 1) << (v4 + 35)) + (_DWORD)a2;
    if ((*(char *)(result - 1) & 0x80000000) == 0)
      break;
    ++result;
    v4 += 7;
    if (!v4)
    {
      while (*((char *)this + v4 + 5) < 0)
      {
        result = 0;
        if (++v4 == 5)
          return result;
      }
      return (uint64_t)this + v4 + 6;
    }
  }
  return result;
}

uint64_t google::protobuf::internal::VarintParseSlow64(google::protobuf::internal *this, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  int v6;

  a2 = a2;
  result = (uint64_t)this + 3;
  v4 = (char *)this + 2;
  v5 = 14;
  while (1)
  {
    v6 = *v4++;
    a2 += (v6 - 1) << v5;
    if ((v6 & 0x80000000) == 0)
      break;
    ++result;
    v5 += 7;
    if (v5 == 70)
      return 0;
  }
  return result;
}

uint64_t google::protobuf::internal::ReadTagFallback(google::protobuf::internal *this, const char *a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  int v6;

  result = (uint64_t)this + 3;
  v4 = (char *)this + 2;
  v5 = -21;
  while (1)
  {
    v6 = *v4++;
    LODWORD(a2) = ((v6 - 1) << (v5 + 35)) + (_DWORD)a2;
    if ((v6 & 0x80000000) == 0)
      break;
    ++result;
    v5 += 7;
    if (!v5)
      return 0;
  }
  return result;
}

char *google::protobuf::internal::ReadSizeFallback(google::protobuf::internal *this, const char *a2)
{
  char *result;
  uint64_t v4;
  unsigned int v5;
  char *v6;

  result = (char *)this + 2;
  v4 = -21;
  while (1)
  {
    LODWORD(a2) = ((*(result - 1) - 1) << (v4 + 28)) + (_DWORD)a2;
    if ((*(result - 1) & 0x80000000) == 0)
      break;
    ++result;
    v4 += 7;
    if (!v4)
    {
      v5 = *((unsigned __int8 *)this + 4);
      v6 = (char *)this + 5;
      if (a2 + (v5 << 28) - 0x10000000 > 0x7FFFFFEF)
        v6 = 0;
      if (v5 <= 7)
        return v6;
      else
        return 0;
    }
  }
  return result;
}

char *google::protobuf::internal::InlineGreedyStringParser(std::string *a1, std::string::value_type *this, uint64_t a3)
{
  int v5;
  std::string::value_type *v6;
  char *result;
  int v8;

  v5 = *this;
  if (*this < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)this, (const char *)*this);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = this + 1;
  }
  return (char *)google::protobuf::internal::EpsCopyInputStream::ReadString(a3, v6, v5, a1);
}

unsigned __int8 *google::protobuf::internal::PackedInt32Parser(google::protobuf::internal *this, google::protobuf::internal *a2, const char *a3, google::protobuf::internal::ParseContext *a4)
{
  return google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((uint64_t)a3, a2, (int *)this);
}

unsigned __int8 *google::protobuf::internal::PackedUInt32Parser(google::protobuf::internal *this, google::protobuf::internal *a2, const char *a3, google::protobuf::internal::ParseContext *a4)
{
  return google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<unsigned int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((uint64_t)a3, a2, (int *)this);
}

unsigned __int8 *google::protobuf::internal::PackedInt64Parser(google::protobuf::internal *this, google::protobuf::internal *a2, const char *a3, google::protobuf::internal::ParseContext *a4)
{
  return google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<long long,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((uint64_t)a3, a2, (int *)this);
}

unsigned __int8 *google::protobuf::internal::PackedUInt64Parser(google::protobuf::internal *this, google::protobuf::internal *a2, const char *a3, google::protobuf::internal::ParseContext *a4)
{
  return google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<unsigned long long,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((uint64_t)a3, a2, (int *)this);
}

unsigned __int8 *google::protobuf::internal::PackedSInt32Parser(google::protobuf::internal *this, google::protobuf::internal *a2, const char *a3, google::protobuf::internal::ParseContext *a4)
{
  return google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<int,true>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((uint64_t)a3, a2, (int *)this);
}

unsigned __int8 *google::protobuf::internal::PackedSInt64Parser(google::protobuf::internal *this, google::protobuf::internal *a2, const char *a3, google::protobuf::internal::ParseContext *a4)
{
  return google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<long long,true>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((uint64_t)a3, a2, (int *)this);
}

unsigned __int8 *google::protobuf::internal::PackedBoolParser(google::protobuf::internal *this, google::protobuf::internal *a2, const char *a3, google::protobuf::internal::ParseContext *a4)
{
  return google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<BOOL,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((uint64_t)a3, a2, (int *)this);
}

char *google::protobuf::internal::FixedParser<unsigned int>(int *a1, google::protobuf::internal *this, google::protobuf::internal::EpsCopyInputStream *a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = (char *)this + 1;
  }
  return (char *)google::protobuf::internal::EpsCopyInputStream::ReadPackedFixed<unsigned int>(a3, v6, v5, a1);
}

char *google::protobuf::internal::FixedParser<int>(int *a1, google::protobuf::internal *this, google::protobuf::internal::EpsCopyInputStream *a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = (char *)this + 1;
  }
  return (char *)google::protobuf::internal::EpsCopyInputStream::ReadPackedFixed<int>(a3, v6, v5, a1);
}

char *google::protobuf::internal::FixedParser<unsigned long long>(int *a1, google::protobuf::internal *this, google::protobuf::internal::EpsCopyInputStream *a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = (char *)this + 1;
  }
  return (char *)google::protobuf::internal::EpsCopyInputStream::ReadPackedFixed<unsigned long long>(a3, v6, v5, a1);
}

char *google::protobuf::internal::FixedParser<long long>(int *a1, google::protobuf::internal *this, google::protobuf::internal::EpsCopyInputStream *a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = (char *)this + 1;
  }
  return (char *)google::protobuf::internal::EpsCopyInputStream::ReadPackedFixed<long long>(a3, v6, v5, a1);
}

char *google::protobuf::internal::FixedParser<float>(int *a1, google::protobuf::internal *this, google::protobuf::internal::EpsCopyInputStream *a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = (char *)this + 1;
  }
  return (char *)google::protobuf::internal::EpsCopyInputStream::ReadPackedFixed<float>(a3, v6, v5, a1);
}

char *google::protobuf::internal::FixedParser<double>(int *a1, google::protobuf::internal *this, google::protobuf::internal::EpsCopyInputStream *a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = (char *)this + 1;
  }
  return (char *)google::protobuf::internal::EpsCopyInputStream::ReadPackedFixed<double>(a3, v6, v5, a1);
}

char *google::protobuf::internal::WireFormatParser<google::protobuf::internal::UnknownFieldLiteParserHelper>(google::protobuf::internal::UnknownFieldLiteParserHelper *a1, char *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char *v5;
  int v6;
  uint64_t v8;
  char *v10;

  v10 = a2;
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v10, *((_DWORD *)this + 23)) & 1) != 0)return v10;
    v5 = v10 + 1;
    v6 = *v10;
    if (*v10 < 0)
    {
      v6 = v6 + (*v5 << 7) - 128;
      if (*v5 < 0)
      {
        v5 = v10 + 3;
        v8 = -21;
        while (1)
        {
          v6 += (*(v5 - 1) - 1) << (v8 + 35);
          if ((*(v5 - 1) & 0x80000000) == 0)
            break;
          ++v5;
          v8 += 7;
          if (!v8)
            return 0;
        }
      }
      else
      {
        v5 = v10 + 2;
      }
    }
    v10 = v5;
    if (!v6 || (v6 & 7) == 4)
      break;
    v10 = (char *)google::protobuf::internal::FieldParser<google::protobuf::internal::UnknownFieldLiteParserHelper>(v6, a1, (google::protobuf::internal *)v5);
    if (!v10)
      return 0;
  }
  *((_DWORD *)this + 20) = v6 - 1;
  return v5;
}

unsigned __int8 *google::protobuf::internal::UnknownFieldParse(unsigned int a1, std::string *a2, google::protobuf::internal *a3, google::protobuf::internal::ParseContext *a4)
{
  std::string *v5;

  v5 = a2;
  return google::protobuf::internal::FieldParser<google::protobuf::internal::UnknownFieldLiteParserHelper>(a1, &v5, a3, a4);
}

unsigned __int8 *google::protobuf::internal::FieldParser<google::protobuf::internal::UnknownFieldLiteParserHelper>(unint64_t a1, std::string **this, google::protobuf::internal *a3, google::protobuf::internal::ParseContext *a4)
{
  unint64_t v4;
  unsigned __int8 *v5;
  std::string *v7;
  unsigned __int8 *v8;
  char v10;
  std::string v11[2];

  v4 = a1 >> 3;
  if (!(a1 >> 3))
    return 0;
  v5 = (unsigned __int8 *)a3;
  switch(a1 & 7)
  {
    case 0uLL:
      v11[0].__r_.__value_.__r.__words[0] = 0;
      v5 = google::protobuf::internal::VarintParse<unsigned long long>((char *)a3, v11);
      if (v5)
        google::protobuf::internal::UnknownFieldLiteParserHelper::AddVarint(this, v4, v11[0].__r_.__value_.__r.__words[0]);
      return v5;
    case 1uLL:
      v5 = (unsigned __int8 *)a3 + 8;
      google::protobuf::internal::UnknownFieldLiteParserHelper::AddFixed64((std::string *)this, v4, *(_QWORD *)a3);
      return v5;
    case 2uLL:
      v8 = (unsigned __int8 *)google::protobuf::internal::UnknownFieldLiteParserHelper::ParseLengthDelimited(this, v4, (std::string::value_type *)a3, a4);
      goto LABEL_10;
    case 3uLL:
      v8 = (unsigned __int8 *)google::protobuf::internal::UnknownFieldLiteParserHelper::ParseGroup(this, v4, (char *)a3, (int32x2_t *)a4);
LABEL_10:
      v5 = v8;
      break;
    case 4uLL:
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 758);
      v7 = google::protobuf::internal::LogMessage::operator<<(v11, "Can't happen");
      google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
      break;
    case 5uLL:
      v5 = (unsigned __int8 *)a3 + 4;
      google::protobuf::internal::UnknownFieldLiteParserHelper::AddFixed32((std::string *)this, v4, *(_DWORD *)a3);
      break;
    default:
      return 0;
  }
  return v5;
}

void sub_1C21F8A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::internal::VarintParse<unsigned long long>(char *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *result;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if (*a1 < 0)
  {
    v4 = a1[1];
    v5 = (v2 + (v4 << 7) - 128);
    if ((v4 & 0x80) != 0)
    {
      result = (unsigned __int8 *)(a1 + 3);
      v6 = 14;
      while (1)
      {
        v5 += (*(result - 1) - 1) << v6;
        if (((char)*(result - 1) & 0x80000000) == 0)
          break;
        ++result;
        v6 += 7;
        if (v6 == 70)
        {
          result = 0;
          v5 = 0;
          break;
        }
      }
      *a2 = v5;
    }
    else
    {
      *a2 = v5;
      return (unsigned __int8 *)(a1 + 2);
    }
  }
  else
  {
    *a2 = v2;
    return (unsigned __int8 *)(a1 + 1);
  }
  return result;
}

unsigned __int8 *google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(uint64_t a1, google::protobuf::internal *this, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = (unsigned __int8 *)google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = (unsigned __int8 *)this + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = google::protobuf::internal::LogMessage::operator<<(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v18.__r_.__value_.__l.__data_);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = google::protobuf::internal::LogMessage::operator<<(&v18, "CHECK failed: (size) > (0): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v18.__r_.__value_.__l.__data_);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)google::protobuf::internal::EpsCopyInputStream::Next((google::protobuf::internal::EpsCopyInputStream *)a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_1C21F8CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = google::protobuf::internal::VarintParse<unsigned long long>((char *)i, &v10);
    if (!i)
      break;
    v6 = v10;
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      google::protobuf::RepeatedField<int>::Reserve(a3, v7 + 1);
      *(_DWORD *)(google::protobuf::RepeatedField<int>::elements((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(google::protobuf::RepeatedField<int>::elements((uint64_t)a3) + 4 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<unsigned int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(uint64_t a1, google::protobuf::internal *this, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = (unsigned __int8 *)google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = (unsigned __int8 *)this + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<unsigned int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<unsigned int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = google::protobuf::internal::LogMessage::operator<<(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v18.__r_.__value_.__l.__data_);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<unsigned int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = google::protobuf::internal::LogMessage::operator<<(&v18, "CHECK failed: (size) > (0): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v18.__r_.__value_.__l.__data_);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)google::protobuf::internal::EpsCopyInputStream::Next((google::protobuf::internal::EpsCopyInputStream *)a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_1C21F8FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<unsigned int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = google::protobuf::internal::VarintParse<unsigned long long>((char *)i, &v10);
    if (!i)
      break;
    v6 = v10;
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      google::protobuf::RepeatedField<unsigned int>::Reserve(a3, v7 + 1);
      *(_DWORD *)(google::protobuf::RepeatedField<unsigned int>::elements((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(google::protobuf::RepeatedField<unsigned int>::elements((uint64_t)a3) + 4 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<long long,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(uint64_t a1, google::protobuf::internal *this, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = (unsigned __int8 *)google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = (unsigned __int8 *)this + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<long long,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<long long,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = google::protobuf::internal::LogMessage::operator<<(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v18.__r_.__value_.__l.__data_);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<long long,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = google::protobuf::internal::LogMessage::operator<<(&v18, "CHECK failed: (size) > (0): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v18.__r_.__value_.__l.__data_);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)google::protobuf::internal::EpsCopyInputStream::Next((google::protobuf::internal::EpsCopyInputStream *)a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_1C21F926C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<long long,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = google::protobuf::internal::VarintParse<unsigned long long>((char *)i, &v10);
    if (!i)
      break;
    v6 = v10;
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      google::protobuf::RepeatedField<long long>::Reserve(a3, v7 + 1);
      *(_QWORD *)(google::protobuf::RepeatedField<long long>::elements((uint64_t)a3) + 8 * v7) = v6;
    }
    else
    {
      *(_QWORD *)(google::protobuf::RepeatedField<long long>::elements((uint64_t)a3) + 8 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<unsigned long long,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(uint64_t a1, google::protobuf::internal *this, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = (unsigned __int8 *)google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = (unsigned __int8 *)this + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<unsigned long long,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<unsigned long long,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = google::protobuf::internal::LogMessage::operator<<(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v18.__r_.__value_.__l.__data_);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<unsigned long long,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = google::protobuf::internal::LogMessage::operator<<(&v18, "CHECK failed: (size) > (0): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v18.__r_.__value_.__l.__data_);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)google::protobuf::internal::EpsCopyInputStream::Next((google::protobuf::internal::EpsCopyInputStream *)a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_1C21F9538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<unsigned long long,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = google::protobuf::internal::VarintParse<unsigned long long>((char *)i, &v10);
    if (!i)
      break;
    v6 = v10;
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      google::protobuf::RepeatedField<unsigned long long>::Reserve(a3, v7 + 1);
      *(_QWORD *)(google::protobuf::RepeatedField<unsigned long long>::elements((uint64_t)a3) + 8 * v7) = v6;
    }
    else
    {
      *(_QWORD *)(google::protobuf::RepeatedField<unsigned long long>::elements((uint64_t)a3) + 8 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<int,true>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(uint64_t a1, google::protobuf::internal *this, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = (unsigned __int8 *)google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = (unsigned __int8 *)this + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<int,true>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<int,true>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = google::protobuf::internal::LogMessage::operator<<(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v18.__r_.__value_.__l.__data_);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<int,true>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = google::protobuf::internal::LogMessage::operator<<(&v18, "CHECK failed: (size) > (0): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v18.__r_.__value_.__l.__data_);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)google::protobuf::internal::EpsCopyInputStream::Next((google::protobuf::internal::EpsCopyInputStream *)a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_1C21F9804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<int,true>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = google::protobuf::internal::VarintParse<unsigned long long>((char *)i, &v10);
    if (!i)
      break;
    v6 = -(v10 & 1) ^ (v10 >> 1);
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      google::protobuf::RepeatedField<int>::Reserve(a3, v7 + 1);
      *(_DWORD *)(google::protobuf::RepeatedField<int>::elements((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(google::protobuf::RepeatedField<int>::elements((uint64_t)a3) + 4 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<long long,true>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(uint64_t a1, google::protobuf::internal *this, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = (unsigned __int8 *)google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = (unsigned __int8 *)this + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<long long,true>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<long long,true>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = google::protobuf::internal::LogMessage::operator<<(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v18.__r_.__value_.__l.__data_);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<long long,true>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = google::protobuf::internal::LogMessage::operator<<(&v18, "CHECK failed: (size) > (0): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v18.__r_.__value_.__l.__data_);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)google::protobuf::internal::EpsCopyInputStream::Next((google::protobuf::internal::EpsCopyInputStream *)a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_1C21F9ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<long long,true>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  unint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = google::protobuf::internal::VarintParse<unsigned long long>((char *)i, &v10);
    if (!i)
      break;
    v6 = -(uint64_t)(v10 & 1) ^ (v10 >> 1);
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      google::protobuf::RepeatedField<long long>::Reserve(a3, v7 + 1);
      *(_QWORD *)(google::protobuf::RepeatedField<long long>::elements((uint64_t)a3) + 8 * v7) = v6;
    }
    else
    {
      *(_QWORD *)(google::protobuf::RepeatedField<long long>::elements((uint64_t)a3) + 8 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<BOOL,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(uint64_t a1, google::protobuf::internal *this, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = (unsigned __int8 *)google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = (unsigned __int8 *)this + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<BOOL,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<BOOL,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = google::protobuf::internal::LogMessage::operator<<(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v18.__r_.__value_.__l.__data_);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<BOOL,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = google::protobuf::internal::LogMessage::operator<<(&v18, "CHECK failed: (size) > (0): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v18.__r_.__value_.__l.__data_);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)google::protobuf::internal::EpsCopyInputStream::Next((google::protobuf::internal::EpsCopyInputStream *)a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_1C21F9DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<BOOL,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  BOOL v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = google::protobuf::internal::VarintParse<unsigned long long>((char *)i, &v10);
    if (!i)
      break;
    v6 = v10 != 0;
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      google::protobuf::RepeatedField<BOOL>::Reserve(a3, v7 + 1);
      *(_BYTE *)(google::protobuf::RepeatedField<BOOL>::elements((uint64_t)a3) + v7) = v6;
    }
    else
    {
      *(_BYTE *)(google::protobuf::RepeatedField<BOOL>::elements((uint64_t)a3) + v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

google::protobuf::internal::EpsCopyInputStream *google::protobuf::internal::EpsCopyInputStream::ReadPackedFixed<unsigned int>(google::protobuf::internal::EpsCopyInputStream *a1, char *a2, int a3, int *a4)
{
  int v5;
  char *v6;
  int v7;
  void *v9;
  google::protobuf::internal::EpsCopyInputStream *result;
  void *v11;

  v5 = a3;
  v6 = a2;
  v7 = *((_DWORD *)a1 + 2) - (_DWORD)a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    google::protobuf::RepeatedField<unsigned int>::Reserve(a4, *a4 + (v5 >> 2));
    v11 = (void *)google::protobuf::RepeatedField<unsigned int>::AddNAlreadyReserved((uint64_t)a4, v5 >> 2);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFFC));
    if (v5 == (v5 & 0xFFFFFFFC))
      return (google::protobuf::internal::EpsCopyInputStream *)&v6[v5 & 0xFFFFFFFC];
    else
      return 0;
  }
  else
  {
    while (1)
    {
      google::protobuf::RepeatedField<unsigned int>::Reserve(a4, *a4 + (v7 >> 2));
      v9 = (void *)google::protobuf::RepeatedField<unsigned int>::AddNAlreadyReserved((uint64_t)a4, v7 >> 2);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFFC));
      if (*((int *)a1 + 7) < 17)
        return 0;
      result = google::protobuf::internal::EpsCopyInputStream::Next(a1);
      if (!result)
        return result;
      v5 -= v7 & 0xFFFFFFFC;
      v6 = (char *)result - (v7 & 3) + 16;
      v7 = *((_DWORD *)a1 + 2) - ((_DWORD)result - (v7 & 3));
      if (v5 <= v7)
        goto LABEL_5;
    }
  }
}

google::protobuf::internal::EpsCopyInputStream *google::protobuf::internal::EpsCopyInputStream::ReadPackedFixed<int>(google::protobuf::internal::EpsCopyInputStream *a1, char *a2, int a3, int *a4)
{
  int v5;
  char *v6;
  int v7;
  void *v9;
  google::protobuf::internal::EpsCopyInputStream *result;
  void *v11;

  v5 = a3;
  v6 = a2;
  v7 = *((_DWORD *)a1 + 2) - (_DWORD)a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    google::protobuf::RepeatedField<int>::Reserve(a4, *a4 + (v5 >> 2));
    v11 = (void *)google::protobuf::RepeatedField<int>::AddNAlreadyReserved((uint64_t)a4, v5 >> 2);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFFC));
    if (v5 == (v5 & 0xFFFFFFFC))
      return (google::protobuf::internal::EpsCopyInputStream *)&v6[v5 & 0xFFFFFFFC];
    else
      return 0;
  }
  else
  {
    while (1)
    {
      google::protobuf::RepeatedField<int>::Reserve(a4, *a4 + (v7 >> 2));
      v9 = (void *)google::protobuf::RepeatedField<int>::AddNAlreadyReserved((uint64_t)a4, v7 >> 2);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFFC));
      if (*((int *)a1 + 7) < 17)
        return 0;
      result = google::protobuf::internal::EpsCopyInputStream::Next(a1);
      if (!result)
        return result;
      v5 -= v7 & 0xFFFFFFFC;
      v6 = (char *)result - (v7 & 3) + 16;
      v7 = *((_DWORD *)a1 + 2) - ((_DWORD)result - (v7 & 3));
      if (v5 <= v7)
        goto LABEL_5;
    }
  }
}

google::protobuf::internal::EpsCopyInputStream *google::protobuf::internal::EpsCopyInputStream::ReadPackedFixed<unsigned long long>(google::protobuf::internal::EpsCopyInputStream *a1, char *a2, int a3, int *a4)
{
  int v5;
  char *v6;
  int v7;
  void *v9;
  google::protobuf::internal::EpsCopyInputStream *result;
  void *v11;

  v5 = a3;
  v6 = a2;
  v7 = *((_DWORD *)a1 + 2) - (_DWORD)a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    google::protobuf::RepeatedField<unsigned long long>::Reserve(a4, *a4 + (v5 >> 3));
    v11 = (void *)google::protobuf::RepeatedField<unsigned long long>::AddNAlreadyReserved((uint64_t)a4, v5 >> 3);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFF8));
    if (v5 == (v5 & 0xFFFFFFF8))
      return (google::protobuf::internal::EpsCopyInputStream *)&v6[v5 & 0xFFFFFFF8];
    else
      return 0;
  }
  else
  {
    while (1)
    {
      google::protobuf::RepeatedField<unsigned long long>::Reserve(a4, *a4 + (v7 >> 3));
      v9 = (void *)google::protobuf::RepeatedField<unsigned long long>::AddNAlreadyReserved((uint64_t)a4, v7 >> 3);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFF8));
      if (*((int *)a1 + 7) < 17)
        return 0;
      result = google::protobuf::internal::EpsCopyInputStream::Next(a1);
      if (!result)
        return result;
      v5 -= v7 & 0xFFFFFFF8;
      v6 = (char *)result - (v7 & 7) + 16;
      v7 = *((_DWORD *)a1 + 2) - ((_DWORD)result - (v7 & 7));
      if (v5 <= v7)
        goto LABEL_5;
    }
  }
}

google::protobuf::internal::EpsCopyInputStream *google::protobuf::internal::EpsCopyInputStream::ReadPackedFixed<long long>(google::protobuf::internal::EpsCopyInputStream *a1, char *a2, int a3, int *a4)
{
  int v5;
  char *v6;
  int v7;
  void *v9;
  google::protobuf::internal::EpsCopyInputStream *result;
  void *v11;

  v5 = a3;
  v6 = a2;
  v7 = *((_DWORD *)a1 + 2) - (_DWORD)a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    google::protobuf::RepeatedField<long long>::Reserve(a4, *a4 + (v5 >> 3));
    v11 = (void *)google::protobuf::RepeatedField<long long>::AddNAlreadyReserved((uint64_t)a4, v5 >> 3);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFF8));
    if (v5 == (v5 & 0xFFFFFFF8))
      return (google::protobuf::internal::EpsCopyInputStream *)&v6[v5 & 0xFFFFFFF8];
    else
      return 0;
  }
  else
  {
    while (1)
    {
      google::protobuf::RepeatedField<long long>::Reserve(a4, *a4 + (v7 >> 3));
      v9 = (void *)google::protobuf::RepeatedField<long long>::AddNAlreadyReserved((uint64_t)a4, v7 >> 3);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFF8));
      if (*((int *)a1 + 7) < 17)
        return 0;
      result = google::protobuf::internal::EpsCopyInputStream::Next(a1);
      if (!result)
        return result;
      v5 -= v7 & 0xFFFFFFF8;
      v6 = (char *)result - (v7 & 7) + 16;
      v7 = *((_DWORD *)a1 + 2) - ((_DWORD)result - (v7 & 7));
      if (v5 <= v7)
        goto LABEL_5;
    }
  }
}

google::protobuf::internal::EpsCopyInputStream *google::protobuf::internal::EpsCopyInputStream::ReadPackedFixed<float>(google::protobuf::internal::EpsCopyInputStream *a1, char *a2, int a3, int *a4)
{
  int v5;
  char *v6;
  int v7;
  void *v9;
  google::protobuf::internal::EpsCopyInputStream *result;
  void *v11;

  v5 = a3;
  v6 = a2;
  v7 = *((_DWORD *)a1 + 2) - (_DWORD)a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    google::protobuf::RepeatedField<float>::Reserve(a4, *a4 + (v5 >> 2));
    v11 = (void *)google::protobuf::RepeatedField<float>::AddNAlreadyReserved((uint64_t)a4, v5 >> 2);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFFC));
    if (v5 == (v5 & 0xFFFFFFFC))
      return (google::protobuf::internal::EpsCopyInputStream *)&v6[v5 & 0xFFFFFFFC];
    else
      return 0;
  }
  else
  {
    while (1)
    {
      google::protobuf::RepeatedField<float>::Reserve(a4, *a4 + (v7 >> 2));
      v9 = (void *)google::protobuf::RepeatedField<float>::AddNAlreadyReserved((uint64_t)a4, v7 >> 2);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFFC));
      if (*((int *)a1 + 7) < 17)
        return 0;
      result = google::protobuf::internal::EpsCopyInputStream::Next(a1);
      if (!result)
        return result;
      v5 -= v7 & 0xFFFFFFFC;
      v6 = (char *)result - (v7 & 3) + 16;
      v7 = *((_DWORD *)a1 + 2) - ((_DWORD)result - (v7 & 3));
      if (v5 <= v7)
        goto LABEL_5;
    }
  }
}

google::protobuf::internal::EpsCopyInputStream *google::protobuf::internal::EpsCopyInputStream::ReadPackedFixed<double>(google::protobuf::internal::EpsCopyInputStream *a1, char *a2, int a3, int *a4)
{
  int v5;
  char *v6;
  int v7;
  void *v9;
  google::protobuf::internal::EpsCopyInputStream *result;
  void *v11;

  v5 = a3;
  v6 = a2;
  v7 = *((_DWORD *)a1 + 2) - (_DWORD)a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    google::protobuf::RepeatedField<double>::Reserve(a4, *a4 + (v5 >> 3));
    v11 = (void *)google::protobuf::RepeatedField<double>::AddNAlreadyReserved((uint64_t)a4, v5 >> 3);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFF8));
    if (v5 == (v5 & 0xFFFFFFF8))
      return (google::protobuf::internal::EpsCopyInputStream *)&v6[v5 & 0xFFFFFFF8];
    else
      return 0;
  }
  else
  {
    while (1)
    {
      google::protobuf::RepeatedField<double>::Reserve(a4, *a4 + (v7 >> 3));
      v9 = (void *)google::protobuf::RepeatedField<double>::AddNAlreadyReserved((uint64_t)a4, v7 >> 3);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFF8));
      if (*((int *)a1 + 7) < 17)
        return 0;
      result = google::protobuf::internal::EpsCopyInputStream::Next(a1);
      if (!result)
        return result;
      v5 -= v7 & 0xFFFFFFF8;
      v6 = (char *)result - (v7 & 7) + 16;
      v7 = *((_DWORD *)a1 + 2) - ((_DWORD)result - (v7 & 7));
      if (v5 <= v7)
        goto LABEL_5;
    }
  }
}

void google::protobuf::internal::UnknownFieldLiteParserHelper::AddVarint(std::string **this, int a2, unint64_t a3)
{
  std::string *v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;

  v3 = *this;
  if (*this)
  {
    v6 = (8 * a2);
    if (v6 < 0x80)
    {
      LOBYTE(v7) = 8 * a2;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        v7 = v6 >> 7;
        v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    v9 = *this;
    if (a3 < 0x80)
    {
      LOBYTE(v10) = a3;
    }
    else
    {
      do
      {
        std::string::push_back(v9, a3 | 0x80);
        v10 = a3 >> 7;
        v11 = a3 >> 14;
        a3 >>= 7;
      }
      while (v11);
    }
    std::string::push_back(v9, v10);
  }
}

std::string *google::protobuf::internal::UnknownFieldLiteParserHelper::AddFixed64(std::string *this, int a2, uint64_t a3)
{
  std::string *v3;
  std::string **v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v3 = (std::string *)this->__r_.__value_.__r.__words[0];
  if (this->__r_.__value_.__r.__words[0])
  {
    v5 = (std::string **)this;
    v6 = (8 * a2) | 1u;
    if (v6 < 0x80)
    {
      LOBYTE(v7) = (8 * a2) | 1;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        v7 = v6 >> 7;
        v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    v9[0] = a3;
    return std::string::append(*v5, (const std::string::value_type *)v9, 8uLL);
  }
  return this;
}

google::protobuf::internal::EpsCopyInputStream *google::protobuf::internal::UnknownFieldLiteParserHelper::ParseLengthDelimited(std::string **this, int a2, std::string::value_type *a3, google::protobuf::internal::ParseContext *a4)
{
  int v7;
  std::string::value_type *v8;
  google::protobuf::internal::EpsCopyInputStream *result;
  int v10;
  std::string *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  std::string *v16;
  unint64_t v17;
  unint64_t v18;

  v7 = *a3;
  if (*a3 < 0)
  {
    result = (google::protobuf::internal::EpsCopyInputStream *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)a3, (const char *)*a3);
    if (!result)
      return result;
    v8 = (std::string::value_type *)result;
    v7 = v10;
  }
  else
  {
    v8 = a3 + 1;
  }
  v11 = *this;
  if (*this)
  {
    v12 = (8 * a2) | 2u;
    if (v12 < 0x80)
    {
      LOBYTE(v13) = v12;
    }
    else
    {
      do
      {
        std::string::push_back(v11, v12 | 0x80);
        v13 = v12 >> 7;
        v14 = v12 >> 14;
        v12 >>= 7;
      }
      while (v14);
    }
    std::string::push_back(v11, v13);
    v15 = v7;
    v16 = *this;
    if (v7 < 0x80)
    {
      LOBYTE(v17) = v7;
    }
    else
    {
      do
      {
        std::string::push_back(v16, v15 | 0x80);
        v17 = v15 >> 7;
        v18 = v15 >> 14;
        v15 >>= 7;
      }
      while (v18);
    }
    std::string::push_back(v16, v17);
    return google::protobuf::internal::EpsCopyInputStream::AppendString((uint64_t)a4, v8, v7, *this);
  }
  else if (*((_QWORD *)a4 + 1) - (_QWORD)v8 + 16 >= v7)
  {
    return (google::protobuf::internal::EpsCopyInputStream *)&v8[v7];
  }
  else
  {
    return google::protobuf::internal::EpsCopyInputStream::SkipFallback(a4, v8, v7);
  }
}

char *google::protobuf::internal::UnknownFieldLiteParserHelper::ParseGroup(std::string **this, int a2, char *a3, int32x2_t *a4)
{
  std::string *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  BOOL v13;
  char *v14;
  __int32 v15;
  char *v17;
  std::string *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v7 = *this;
  v8 = 8 * a2;
  if (*this)
  {
    v9 = v8 | 3u;
    if (v9 < 0x80)
    {
      LOBYTE(v10) = v8 | 3;
    }
    else
    {
      do
      {
        std::string::push_back(v7, v9 | 0x80);
        v10 = v9 >> 7;
        v11 = v9 >> 14;
        v9 >>= 7;
      }
      while (v11);
    }
    std::string::push_back(v7, v10);
  }
  v12 = a4[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a4[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  ++a4[11].i32[1];
  v14 = google::protobuf::internal::WireFormatParser<google::protobuf::internal::UnknownFieldLiteParserHelper>((google::protobuf::internal::UnknownFieldLiteParserHelper *)this, a3, (google::protobuf::internal::EpsCopyInputStream *)a4);
  a4[11] = vadd_s32(a4[11], (int32x2_t)0xFFFFFFFF00000001);
  v15 = a4[10].i32[0];
  a4[10].i32[0] = 0;
  if (v15 != (v8 | 3) || v14 == 0)
    return 0;
  v17 = v14;
  v18 = *this;
  if (v18)
  {
    v19 = v8 | 4u;
    if (v19 < 0x80)
    {
      LOBYTE(v20) = v8 | 4;
    }
    else
    {
      do
      {
        std::string::push_back(v18, v19 | 0x80);
        v20 = v19 >> 7;
        v21 = v19 >> 14;
        v19 >>= 7;
      }
      while (v21);
    }
    std::string::push_back(v18, v20);
  }
  return v17;
}

std::string *google::protobuf::internal::UnknownFieldLiteParserHelper::AddFixed32(std::string *this, int a2, int a3)
{
  std::string *v3;
  std::string **v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  std::string::value_type __s[4];

  v3 = (std::string *)this->__r_.__value_.__r.__words[0];
  if (this->__r_.__value_.__r.__words[0])
  {
    v5 = (std::string **)this;
    v6 = (8 * a2) | 5u;
    if (v6 < 0x80)
    {
      LOBYTE(v7) = (8 * a2) | 5;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        v7 = v6 >> 7;
        v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    *(_DWORD *)__s = a3;
    return std::string::append(*v5, __s, 4uLL);
  }
  return this;
}

google::protobuf::internal::EpsCopyInputStream *google::protobuf::internal::EpsCopyInputStream::AppendString(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  uint64_t v6;

  if (*(_QWORD *)(a1 + 8) - (_QWORD)__s + 16 < a3)
    return google::protobuf::internal::EpsCopyInputStream::AppendStringFallback(a1, __s, a3, this);
  v6 = a3;
  std::string::append(this, __s, a3);
  return (google::protobuf::internal::EpsCopyInputStream *)&__s[v6];
}

void google::protobuf::RepeatedField<BOOL>::Reserve(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  _QWORD *AlignedNoHook;
  void *v13;
  char v14;
  std::string v15[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(google::protobuf::RepeatedField<BOOL>::elements((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(google::protobuf::RepeatedField<BOOL>::elements((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  if (v6)
  {
    v11 = (v9 + 15) & 0x1FFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x1E0DE4EC8], v11);
    AlignedNoHook = (_QWORD *)google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)v6, v11);
  }
  else
  {
    AlignedNoHook = operator new(v9 + 8);
  }
  *AlignedNoHook = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = AlignedNoHook + 1;
  google::protobuf::RepeatedField<BOOL>::elements((uint64_t)a1);
  if (*a1 >= 1)
  {
    v13 = (void *)google::protobuf::RepeatedField<BOOL>::elements((uint64_t)a1);
    memcpy(v13, v5 + 1, *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_1C21FAB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<BOOL>::AddNAlreadyReserved(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = google::protobuf::internal::LogMessage::operator<<(v5, *(_DWORD *)(a1 + 4));
    v7 = google::protobuf::internal::LogMessage::operator<<(v6, ", ");
    v8 = google::protobuf::internal::LogMessage::operator<<(v7, *(_DWORD *)a1);
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_1C21FABC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<BOOL>::Mutable(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*a1 <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return google::protobuf::RepeatedField<BOOL>::elements((uint64_t)a1) + a2;
}

void sub_1C21FAC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<BOOL>::Get(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*a1 <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return google::protobuf::RepeatedField<BOOL>::elements((uint64_t)a1) + a2;
}

void sub_1C21FAD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<BOOL>::~RepeatedField(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = google::protobuf::RepeatedField<BOOL>::elements(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t google::protobuf::RepeatedField<BOOL>::elements(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = google::protobuf::internal::LogMessage::operator<<(v5, "CHECK failed: (total_size_) > (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_1C21FAE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::RepeatedField<BOOL>::MergeFrom(int *a1, int *a2)
{
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  if (a2 == a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  if (*a2)
  {
    v5 = *a1;
    google::protobuf::RepeatedField<BOOL>::Reserve(a1, *a1 + *a2);
    google::protobuf::RepeatedField<BOOL>::AddNAlreadyReserved((uint64_t)a1, *a2);
    v6 = (void *)google::protobuf::RepeatedField<BOOL>::Mutable(a1, v5);
    if (*a2 <= 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (index) < (current_size_): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
    }
    v8 = (const void *)google::protobuf::RepeatedField<BOOL>::elements((uint64_t)a2);
    memcpy(v6, v8, *a2);
  }
}

void sub_1C21FAF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::RepeatedField<int>::Reserve(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *AlignedNoHook;
  void *v14;
  char v15;
  std::string v16[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(google::protobuf::RepeatedField<int>::elements((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(google::protobuf::RepeatedField<int>::elements((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  v11 = 4 * v9;
  if (v6)
  {
    v12 = (v11 + 15) & 0x7FFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x1E0DE4EC8], v12);
    AlignedNoHook = (_QWORD *)google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)v6, v12);
  }
  else
  {
    AlignedNoHook = operator new(v11 + 8);
  }
  *AlignedNoHook = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = AlignedNoHook + 1;
  google::protobuf::RepeatedField<int>::elements((uint64_t)a1);
  if (*a1 >= 1)
  {
    v14 = (void *)google::protobuf::RepeatedField<int>::elements((uint64_t)a1);
    memcpy(v14, v5 + 1, 4 * *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_1C21FB128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<int>::AddNAlreadyReserved(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = google::protobuf::internal::LogMessage::operator<<(v5, *(_DWORD *)(a1 + 4));
    v7 = google::protobuf::internal::LogMessage::operator<<(v6, ", ");
    v8 = google::protobuf::internal::LogMessage::operator<<(v7, *(_DWORD *)a1);
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + 4 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_1C21FB1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<int>::Mutable(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*a1 <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return google::protobuf::RepeatedField<int>::elements((uint64_t)a1) + 4 * a2;
}

void sub_1C21FB2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<int>::Get(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*a1 <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return google::protobuf::RepeatedField<int>::elements((uint64_t)a1) + 4 * a2;
}

void sub_1C21FB394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<int>::~RepeatedField(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = google::protobuf::RepeatedField<int>::elements(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t google::protobuf::RepeatedField<int>::elements(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = google::protobuf::internal::LogMessage::operator<<(v5, "CHECK failed: (total_size_) > (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_1C21FB46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::RepeatedField<int>::MergeFrom(int *a1, int *a2)
{
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  if (a2 == a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  if (*a2)
  {
    v5 = *a1;
    google::protobuf::RepeatedField<int>::Reserve(a1, *a1 + *a2);
    google::protobuf::RepeatedField<int>::AddNAlreadyReserved((uint64_t)a1, *a2);
    v6 = (void *)google::protobuf::RepeatedField<int>::Mutable(a1, v5);
    if (*a2 <= 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (index) < (current_size_): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
    }
    v8 = (const void *)google::protobuf::RepeatedField<int>::elements((uint64_t)a2);
    memcpy(v6, v8, 4 * *a2);
  }
}

void sub_1C21FB590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::RepeatedField<unsigned int>::Reserve(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *AlignedNoHook;
  void *v14;
  char v15;
  std::string v16[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(google::protobuf::RepeatedField<unsigned int>::elements((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(google::protobuf::RepeatedField<unsigned int>::elements((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  v11 = 4 * v9;
  if (v6)
  {
    v12 = (v11 + 15) & 0x7FFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x1E0DE4EC8], v12);
    AlignedNoHook = (_QWORD *)google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)v6, v12);
  }
  else
  {
    AlignedNoHook = operator new(v11 + 8);
  }
  *AlignedNoHook = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = AlignedNoHook + 1;
  google::protobuf::RepeatedField<unsigned int>::elements((uint64_t)a1);
  if (*a1 >= 1)
  {
    v14 = (void *)google::protobuf::RepeatedField<unsigned int>::elements((uint64_t)a1);
    memcpy(v14, v5 + 1, 4 * *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_1C21FB750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<unsigned int>::AddNAlreadyReserved(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = google::protobuf::internal::LogMessage::operator<<(v5, *(_DWORD *)(a1 + 4));
    v7 = google::protobuf::internal::LogMessage::operator<<(v6, ", ");
    v8 = google::protobuf::internal::LogMessage::operator<<(v7, *(_DWORD *)a1);
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + 4 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_1C21FB80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<unsigned int>::Mutable(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*a1 <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return google::protobuf::RepeatedField<unsigned int>::elements((uint64_t)a1) + 4 * a2;
}

void sub_1C21FB8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<unsigned int>::Get(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*a1 <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return google::protobuf::RepeatedField<unsigned int>::elements((uint64_t)a1) + 4 * a2;
}

void sub_1C21FB9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<unsigned int>::~RepeatedField(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = google::protobuf::RepeatedField<unsigned int>::elements(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t google::protobuf::RepeatedField<unsigned int>::elements(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = google::protobuf::internal::LogMessage::operator<<(v5, "CHECK failed: (total_size_) > (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_1C21FBA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::RepeatedField<unsigned int>::MergeFrom(int *a1, int *a2)
{
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  if (a2 == a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  if (*a2)
  {
    v5 = *a1;
    google::protobuf::RepeatedField<unsigned int>::Reserve(a1, *a1 + *a2);
    google::protobuf::RepeatedField<unsigned int>::AddNAlreadyReserved((uint64_t)a1, *a2);
    v6 = (void *)google::protobuf::RepeatedField<unsigned int>::Mutable(a1, v5);
    if (*a2 <= 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (index) < (current_size_): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
    }
    v8 = (const void *)google::protobuf::RepeatedField<unsigned int>::elements((uint64_t)a2);
    memcpy(v6, v8, 4 * *a2);
  }
}

void sub_1C21FBBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::RepeatedField<long long>::Reserve(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *AlignedNoHook;
  void *v14;
  char v15;
  std::string v16[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(google::protobuf::RepeatedField<long long>::elements((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(google::protobuf::RepeatedField<long long>::elements((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  v11 = 8 * v9;
  if (v6)
  {
    v12 = (v11 + 15) & 0xFFFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x1E0DE4EC8], v12);
    AlignedNoHook = (_QWORD *)google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)v6, v12);
  }
  else
  {
    AlignedNoHook = operator new(v11 + 8);
  }
  *AlignedNoHook = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = AlignedNoHook + 1;
  google::protobuf::RepeatedField<long long>::elements((uint64_t)a1);
  if (*a1 >= 1)
  {
    v14 = (void *)google::protobuf::RepeatedField<long long>::elements((uint64_t)a1);
    memcpy(v14, v5 + 1, 8 * *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_1C21FBD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<long long>::AddNAlreadyReserved(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = google::protobuf::internal::LogMessage::operator<<(v5, *(_DWORD *)(a1 + 4));
    v7 = google::protobuf::internal::LogMessage::operator<<(v6, ", ");
    v8 = google::protobuf::internal::LogMessage::operator<<(v7, *(_DWORD *)a1);
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + 8 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_1C21FBE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<long long>::Mutable(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*a1 <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return google::protobuf::RepeatedField<long long>::elements((uint64_t)a1) + 8 * a2;
}

void sub_1C21FBF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<long long>::Get(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*a1 <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return google::protobuf::RepeatedField<long long>::elements((uint64_t)a1) + 8 * a2;
}

void sub_1C21FBFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<long long>::~RepeatedField(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = google::protobuf::RepeatedField<long long>::elements(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t google::protobuf::RepeatedField<long long>::elements(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = google::protobuf::internal::LogMessage::operator<<(v5, "CHECK failed: (total_size_) > (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_1C21FC0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::RepeatedField<long long>::MergeFrom(int *a1, int *a2)
{
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  if (a2 == a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  if (*a2)
  {
    v5 = *a1;
    google::protobuf::RepeatedField<long long>::Reserve(a1, *a1 + *a2);
    google::protobuf::RepeatedField<long long>::AddNAlreadyReserved((uint64_t)a1, *a2);
    v6 = (void *)google::protobuf::RepeatedField<long long>::Mutable(a1, v5);
    if (*a2 <= 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (index) < (current_size_): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
    }
    v8 = (const void *)google::protobuf::RepeatedField<long long>::elements((uint64_t)a2);
    memcpy(v6, v8, 8 * *a2);
  }
}

void sub_1C21FC1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::RepeatedField<unsigned long long>::Reserve(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *AlignedNoHook;
  void *v14;
  char v15;
  std::string v16[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(google::protobuf::RepeatedField<unsigned long long>::elements((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(google::protobuf::RepeatedField<unsigned long long>::elements((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  v11 = 8 * v9;
  if (v6)
  {
    v12 = (v11 + 15) & 0xFFFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x1E0DE4EC8], v12);
    AlignedNoHook = (_QWORD *)google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)v6, v12);
  }
  else
  {
    AlignedNoHook = operator new(v11 + 8);
  }
  *AlignedNoHook = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = AlignedNoHook + 1;
  google::protobuf::RepeatedField<unsigned long long>::elements((uint64_t)a1);
  if (*a1 >= 1)
  {
    v14 = (void *)google::protobuf::RepeatedField<unsigned long long>::elements((uint64_t)a1);
    memcpy(v14, v5 + 1, 8 * *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_1C21FC3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<unsigned long long>::AddNAlreadyReserved(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = google::protobuf::internal::LogMessage::operator<<(v5, *(_DWORD *)(a1 + 4));
    v7 = google::protobuf::internal::LogMessage::operator<<(v6, ", ");
    v8 = google::protobuf::internal::LogMessage::operator<<(v7, *(_DWORD *)a1);
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + 8 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_1C21FC45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<unsigned long long>::Mutable(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*a1 <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return google::protobuf::RepeatedField<unsigned long long>::elements((uint64_t)a1) + 8 * a2;
}

void sub_1C21FC530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<unsigned long long>::Get(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*a1 <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return google::protobuf::RepeatedField<unsigned long long>::elements((uint64_t)a1) + 8 * a2;
}

void sub_1C21FC60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<unsigned long long>::~RepeatedField(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = google::protobuf::RepeatedField<unsigned long long>::elements(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t google::protobuf::RepeatedField<unsigned long long>::elements(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = google::protobuf::internal::LogMessage::operator<<(v5, "CHECK failed: (total_size_) > (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_1C21FC6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::RepeatedField<unsigned long long>::MergeFrom(int *a1, int *a2)
{
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  if (a2 == a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  if (*a2)
  {
    v5 = *a1;
    google::protobuf::RepeatedField<unsigned long long>::Reserve(a1, *a1 + *a2);
    google::protobuf::RepeatedField<unsigned long long>::AddNAlreadyReserved((uint64_t)a1, *a2);
    v6 = (void *)google::protobuf::RepeatedField<unsigned long long>::Mutable(a1, v5);
    if (*a2 <= 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (index) < (current_size_): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
    }
    v8 = (const void *)google::protobuf::RepeatedField<unsigned long long>::elements((uint64_t)a2);
    memcpy(v6, v8, 8 * *a2);
  }
}

void sub_1C21FC808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::RepeatedField<float>::Reserve(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *AlignedNoHook;
  void *v14;
  char v15;
  std::string v16[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(google::protobuf::RepeatedField<float>::elements((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(google::protobuf::RepeatedField<float>::elements((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  v11 = 4 * v9;
  if (v6)
  {
    v12 = (v11 + 15) & 0x7FFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x1E0DE4EC8], v12);
    AlignedNoHook = (_QWORD *)google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)v6, v12);
  }
  else
  {
    AlignedNoHook = operator new(v11 + 8);
  }
  *AlignedNoHook = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = AlignedNoHook + 1;
  google::protobuf::RepeatedField<float>::elements((uint64_t)a1);
  if (*a1 >= 1)
  {
    v14 = (void *)google::protobuf::RepeatedField<float>::elements((uint64_t)a1);
    memcpy(v14, v5 + 1, 4 * *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_1C21FC9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<float>::AddNAlreadyReserved(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = google::protobuf::internal::LogMessage::operator<<(v5, *(_DWORD *)(a1 + 4));
    v7 = google::protobuf::internal::LogMessage::operator<<(v6, ", ");
    v8 = google::protobuf::internal::LogMessage::operator<<(v7, *(_DWORD *)a1);
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + 4 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_1C21FCA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<float>::Mutable(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*a1 <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return google::protobuf::RepeatedField<float>::elements((uint64_t)a1) + 4 * a2;
}

void sub_1C21FCB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<float>::Get(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*a1 <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return google::protobuf::RepeatedField<float>::elements((uint64_t)a1) + 4 * a2;
}

void sub_1C21FCC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<float>::~RepeatedField(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = google::protobuf::RepeatedField<float>::elements(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t google::protobuf::RepeatedField<float>::elements(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = google::protobuf::internal::LogMessage::operator<<(v5, "CHECK failed: (total_size_) > (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_1C21FCD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::RepeatedField<float>::MergeFrom(int *a1, int *a2)
{
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  if (a2 == a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  if (*a2)
  {
    v5 = *a1;
    google::protobuf::RepeatedField<float>::Reserve(a1, *a1 + *a2);
    google::protobuf::RepeatedField<float>::AddNAlreadyReserved((uint64_t)a1, *a2);
    v6 = (void *)google::protobuf::RepeatedField<float>::Mutable(a1, v5);
    if (*a2 <= 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (index) < (current_size_): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
    }
    v8 = (const void *)google::protobuf::RepeatedField<float>::elements((uint64_t)a2);
    memcpy(v6, v8, 4 * *a2);
  }
}

void sub_1C21FCE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::RepeatedField<double>::Reserve(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *AlignedNoHook;
  void *v14;
  char v15;
  std::string v16[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(google::protobuf::RepeatedField<double>::elements((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(google::protobuf::RepeatedField<double>::elements((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  v11 = 8 * v9;
  if (v6)
  {
    v12 = (v11 + 15) & 0xFFFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x1E0DE4EC8], v12);
    AlignedNoHook = (_QWORD *)google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)v6, v12);
  }
  else
  {
    AlignedNoHook = operator new(v11 + 8);
  }
  *AlignedNoHook = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = AlignedNoHook + 1;
  google::protobuf::RepeatedField<double>::elements((uint64_t)a1);
  if (*a1 >= 1)
  {
    v14 = (void *)google::protobuf::RepeatedField<double>::elements((uint64_t)a1);
    memcpy(v14, v5 + 1, 8 * *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_1C21FCFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<double>::AddNAlreadyReserved(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = google::protobuf::internal::LogMessage::operator<<(v5, *(_DWORD *)(a1 + 4));
    v7 = google::protobuf::internal::LogMessage::operator<<(v6, ", ");
    v8 = google::protobuf::internal::LogMessage::operator<<(v7, *(_DWORD *)a1);
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + 8 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_1C21FD0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<double>::Mutable(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*a1 <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return google::protobuf::RepeatedField<double>::elements((uint64_t)a1) + 8 * a2;
}

void sub_1C21FD180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<double>::Get(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*a1 <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return google::protobuf::RepeatedField<double>::elements((uint64_t)a1) + 8 * a2;
}

void sub_1C21FD25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<double>::~RepeatedField(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = google::protobuf::RepeatedField<double>::elements(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t google::protobuf::RepeatedField<double>::elements(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = google::protobuf::internal::LogMessage::operator<<(v5, "CHECK failed: (total_size_) > (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_1C21FD334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::RepeatedField<double>::MergeFrom(int *a1, int *a2)
{
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  if (a2 == a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  if (*a2)
  {
    v5 = *a1;
    google::protobuf::RepeatedField<double>::Reserve(a1, *a1 + *a2);
    google::protobuf::RepeatedField<double>::AddNAlreadyReserved((uint64_t)a1, *a2);
    v6 = (void *)google::protobuf::RepeatedField<double>::Mutable(a1, v5);
    if (*a2 <= 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (index) < (current_size_): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
    }
    v8 = (const void *)google::protobuf::RepeatedField<double>::elements((uint64_t)a2);
    memcpy(v6, v8, 8 * *a2);
  }
}

void sub_1C21FD458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(_QWORD *a1)
{
  unsigned int *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    v3 = (uint64_t *)(v2 + 2);
    v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        v5 = *v3;
        if (*v3)
        {
          if (*(char *)(v5 + 23) < 0)
            operator delete(*(void **)v5);
          MEMORY[0x1C3BB9B44](v5, 0x1012C40EC159624);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

std::string *std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *v15;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    v15 = (char *)v14 + size;
    while (v4 != a3)
    {
      v16 = *v4++;
      *v15++ = v16;
    }
    *v15 = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_1C21FD684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::vector<std::string> **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](std::vector<std::string> **a1, __int128 *a2)
{
  std::vector<std::string> *v4;
  std::vector<std::string>::pointer end;
  std::vector<std::string> *v6;
  std::allocator<std::string> *p_end_cap;
  std::string *v8;
  std::string *value;
  __int128 v10;
  std::string *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  std::string *v16;
  std::string *v17;
  __int128 v18;
  std::__split_buffer<std::string> __v;

  v4 = *a1;
  end = (*a1)->__end_;
  v6 = *a1;
  value = v6->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&v6->__end_cap_;
  v8 = value;
  if (end >= value)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v4->__begin_) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v4->__begin_) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v13;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v15)
      v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)p_end_cap, v15);
    else
      v16 = 0;
    v17 = v16 + v12;
    __v.__first_ = v16;
    __v.__begin_ = v17;
    __v.__end_cap_.__value_ = &v16[v15];
    v18 = *a2;
    v17->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    __v.__end_ = v17 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(v4, &__v);
    v11 = v4->__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    v10 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v11 = end + 1;
    v4->__end_ = end + 1;
  }
  v4->__end_ = v11;
  return a1;
}

void sub_1C21FD7D0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void sentencepiece::MemoryMappedNormalizerSpec::~MemoryMappedNormalizerSpec(sentencepiece::MemoryMappedNormalizerSpec *this)
{
  JUMPOUT(0x1C3BB9B44);
}

uint64_t sentencepiece::MemoryMappedNormalizerSpec::add_suffix_space(sentencepiece::MemoryMappedNormalizerSpec *this)
{
  return (*((unsigned __int8 *)this + 8) >> 3) & 1;
}

void sentencepiece::MemoryMappedModelProto::~MemoryMappedModelProto(sentencepiece::MemoryMappedModelProto *this)
{
  *(_QWORD *)this = &off_1E7BE8B18;
  sentencepiece::util::Status::~Status((sentencepiece::MemoryMappedModelProto *)((char *)this + 88));
}

{
  *(_QWORD *)this = &off_1E7BE8B18;
  sentencepiece::util::Status::~Status((sentencepiece::MemoryMappedModelProto *)((char *)this + 88));
  JUMPOUT(0x1C3BB9B44);
}

const char *sentencepiece::MemoryMappedModelProto::UnkSurface(sentencepiece::MemoryMappedModelProto *this)
{
  const char *v1;

  v1 = (const char *)(*((_QWORD *)this + 10) + **((unsigned int **)this + 9));
  strlen(v1);
  return v1;
}

const char *sentencepiece::MemoryMappedModelProto::BosPiece(sentencepiece::MemoryMappedModelProto *this)
{
  const char *v1;

  v1 = (const char *)(*((_QWORD *)this + 10) + *(unsigned int *)(*((_QWORD *)this + 9) + 8));
  strlen(v1);
  return v1;
}

const char *sentencepiece::MemoryMappedModelProto::EosPiece(sentencepiece::MemoryMappedModelProto *this)
{
  const char *v1;

  v1 = (const char *)(*((_QWORD *)this + 10) + *(unsigned int *)(*((_QWORD *)this + 9) + 12));
  strlen(v1);
  return v1;
}

const char *sentencepiece::MemoryMappedModelProto::PadPiece(sentencepiece::MemoryMappedModelProto *this)
{
  const char *v1;

  v1 = (const char *)(*((_QWORD *)this + 10) + *(unsigned int *)(*((_QWORD *)this + 9) + 16));
  strlen(v1);
  return v1;
}

uint64_t sentencepiece::MemoryMappedModelProto::ByteFallback(sentencepiece::MemoryMappedModelProto *this)
{
  return *((_DWORD *)this + 2) & 1;
}

uint64_t sentencepiece::MemoryMappedModelProto::HasUnkSurface(sentencepiece::MemoryMappedModelProto *this)
{
  return (*((unsigned __int8 *)this + 8) >> 1) & 1;
}

BOOL sentencepiece::MemoryMappedModelProto::PieceIsNormal(sentencepiece::MemoryMappedModelProto *this, int a2)
{
  return *(_BYTE *)(*((_QWORD *)this + 7) + a2) == 1;
}

BOOL sentencepiece::MemoryMappedModelProto::PieceIsUserDefined(sentencepiece::MemoryMappedModelProto *this, int a2)
{
  return *(_BYTE *)(*((_QWORD *)this + 7) + a2) == 5;
}

BOOL sentencepiece::MemoryMappedModelProto::PieceIsByte(sentencepiece::MemoryMappedModelProto *this, int a2)
{
  return *(_BYTE *)(*((_QWORD *)this + 7) + a2) == 6;
}

uint64_t sentencepiece::MemoryMappedModelProto::DenormalizerSpec(sentencepiece::MemoryMappedModelProto *this)
{
  return (uint64_t)this + 32;
}

void snlp::ssu::parse::SSUGraphBuilderApp::~SSUGraphBuilderApp(void **this)
{
  *this = off_1E7BE9AD8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E7BE9AD8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3BB9B44);
}

void snlp::ssu::parse::SSUGraphBuilderApp::identifierAppBundleId(snlp::ssu::parse::SSUGraphBuilderApp *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
}

void snlp::ssu::parse::SSUGraphBuilderApp::buildUtteranceIdentifier(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string **a3@<X8>)
{
  std::string *v5;
  void *v6[2];
  uint64_t v7;
  void *__p[2];
  char v9;
  char v10;
  void *v11[2];
  uint64_t v12;
  std::string v13;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(v6);
  v5 = (std::string *)operator new();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v13 = *(std::string *)a2;
  *(_OWORD *)v11 = *(_OWORD *)v6;
  v12 = v7;
  v6[1] = 0;
  v7 = 0;
  v6[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "item_id");
  v10 = 1;
  siri::ontology::UsoIdentifier::UsoIdentifier(v5, (uint64_t)&v13, (uint64_t)v11, (__int128 *)__p, 0x100000006uLL);
  *a3 = v5;
  if (v10 && v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7) < 0)
    operator delete(v6[0]);
}

void sub_1C21FDB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  MEMORY[0x1C3BB9B44](v28, 0x1012C40071C2685);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

std::string *siri::ontology::UsoIdentifier::UsoIdentifier(std::string *a1, uint64_t a2, uint64_t a3, __int128 *a4, std::string::size_type a5)
{
  std::string __p;
  char v11;
  std::string v12;
  std::string v13;
  std::string v14;
  char v15;
  std::string v16;
  std::string v17;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v13 = *(std::string *)a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v12 = *(std::string *)a3;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, a4);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v17, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  else
    v17 = v13;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v16, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  else
    v16 = v12;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v14, (__int128 *)&__p);
  *a1 = v17;
  a1[1] = v16;
  a1[2].__r_.__value_.__s.__data_[0] = 0;
  a1[3].__r_.__value_.__s.__data_[0] = 0;
  if (v15)
  {
    a1[2] = v14;
    a1[3].__r_.__value_.__s.__data_[0] = 1;
  }
  a1[3].__r_.__value_.__l.__size_ = 0;
  a1[3].__r_.__value_.__r.__words[2] = 0;
  a1[4].__r_.__value_.__l.__size_ = 0;
  a1[4].__r_.__value_.__r.__words[2] = 0;
  a1[4].__r_.__value_.__r.__words[0] = a5;
  if (v11 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1C21FDD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 41) < 0)
    operator delete(*(void **)(v28 - 64));
  if (a15 && a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v3;

  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_1C21FDE68(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *snlp::ssu::parse::SSUGraphBuilderApp::SSUGraphBuilderApp(_QWORD *a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = off_1E7BE9AD8;
  v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

{
  std::string *v3;
  __int128 v4;

  *a1 = off_1E7BE9AD8;
  v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::OneShotReplyRemodeller::OneShotReplyRemodeller(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, "TreeManipulation_OneShotReplyRemodeller");
  std::string::basic_string[abi:ne180100]<0>(v4 + 3, "UserAccepted");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 48), "UserStatedTask");
  *(_BYTE *)(a1 + 72) = nlv4_inference_orchestrator::post_processing::tree_manipulations::OneShotReplyRemodeller::contextContainsReplyMessageSystemOfferedDialogAct(a2);
  return a1;
}

void sub_1C21FDF9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::OneShotReplyRemodeller::contextContainsReplyMessageSystemOfferedDialogAct(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 112))
  {
    v1 = *(_QWORD *)(a1 + 88);
    v2 = *(_QWORD *)(a1 + 96);
    while (v1 != v2)
    {
      v3 = *(_QWORD *)(*(_QWORD *)v1 + 32);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          if (nlv4_inference_orchestrator::post_processing::tree_manipulations::OneShotReplyRemodeller::udaContainsReplyMessageGraph(v4))
            return 1;
        }
      }
      v1 += 8;
    }
  }
  return 0;
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::OneShotReplyRemodeller::udaContainsReplyMessageGraph(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  _BOOL8 result;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  BOOL v19;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
  {
    v5 = v2 + 80;
    v4 = *(_QWORD *)(v2 + 80);
    v3 = *(_QWORD *)(v5 + 8);
    if (v3 == v4 || (unint64_t)(v3 - v4) < 0x10)
      return 0;
    v7 = v4 + 8;
    do
    {
      v8 = *(_DWORD *)(*(_QWORD *)(v7 - 8) + 72);
      result = v8 == 1303;
      v10 = v8 == 1303 || v7 == v3;
      v7 += 8;
    }
    while (!v10);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 72);
    if (!v11)
      return 0;
    v12 = *(_QWORD *)(v11 + 8);
    if (!v12)
      return 0;
    v15 = v12 + 80;
    v14 = *(_QWORD *)(v12 + 80);
    v13 = *(_QWORD *)(v15 + 8);
    if (v13 == v14 || (unint64_t)(v13 - v14) < 0x10)
      return 0;
    v17 = v14 + 8;
    do
    {
      v18 = *(_DWORD *)(*(_QWORD *)(v17 - 8) + 72);
      result = v18 == 1303;
      v19 = v18 == 1303 || v17 == v13;
      v17 += 8;
    }
    while (!v19);
  }
  return result;
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::OneShotReplyRemodeller::getDescription(nlv4_inference_orchestrator::post_processing::tree_manipulations::OneShotReplyRemodeller *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::OneShotReplyRemodeller::apply(nlv4_inference_orchestrator::post_processing::tree_manipulations::OneShotReplyRemodeller *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  return *((_BYTE *)this + 72)
      && nlv4_inference_orchestrator::post_processing::tree_manipulations::OneShotReplyRemodeller::parseContainsUserAcceptedAndUserStatedTask(this, a2)&& nlv4_inference_orchestrator::post_processing::tree_manipulations::OneShotReplyRemodeller::pruneUserAcceptedDialogAct(this, a2);
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::OneShotReplyRemodeller::parseContainsUserAcceptedAndUserStatedTask(nlv4_inference_orchestrator::post_processing::tree_manipulations::OneShotReplyRemodeller *this, const nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  unsigned __int8 *v2;
  const void **v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const void **v17;
  unsigned __int8 *v18;
  _BOOL8 result;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  unsigned __int8 *v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  BOOL v33;

  v2 = (unsigned __int8 *)*((_QWORD *)a2 + 11);
  if (*((_QWORD *)a2 + 12) - (_QWORD)v2 != 288)
    return 0;
  v4 = (const void **)((char *)this + 24);
  v5 = *((unsigned __int8 *)this + 47);
  v6 = *((_QWORD *)this + 4);
  if ((v5 & 0x80u) == 0)
    v7 = *((unsigned __int8 *)this + 47);
  else
    v7 = *((_QWORD *)this + 4);
  v8 = (char)v2[23];
  if (v8 >= 0)
    v9 = v2[23];
  else
    v9 = *((_QWORD *)v2 + 1);
  if (v7 != v9)
    goto LABEL_36;
  if (v8 >= 0)
    v10 = (unsigned __int8 *)*((_QWORD *)a2 + 11);
  else
    v10 = *(unsigned __int8 **)v2;
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*v4, v10, v6))
      goto LABEL_36;
  }
  else if (*((_BYTE *)this + 47))
  {
    v11 = (unsigned __int8 *)this + 24;
    v12 = *((unsigned __int8 *)this + 47);
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v12)
        goto LABEL_19;
    }
    goto LABEL_36;
  }
LABEL_19:
  v13 = *((unsigned __int8 *)this + 71);
  if ((v13 & 0x80u) == 0)
    v14 = *((unsigned __int8 *)this + 71);
  else
    v14 = *((_QWORD *)this + 7);
  v15 = v2[167];
  v16 = (char)v15;
  if ((v15 & 0x80u) != 0)
    v15 = *((_QWORD *)v2 + 19);
  if (v14 == v15)
  {
    v17 = (const void **)((char *)this + 48);
    if (v16 >= 0)
      v18 = v2 + 144;
    else
      v18 = (unsigned __int8 *)*((_QWORD *)v2 + 18);
    if ((v13 & 0x80) != 0)
    {
      if (!memcmp(*v17, v18, *((_QWORD *)this + 7)))
        return 1;
    }
    else
    {
      if (!*((_BYTE *)this + 71))
        return 1;
      result = 1;
      while (*(unsigned __int8 *)v17 == *v18)
      {
        v17 = (const void **)((char *)v17 + 1);
        ++v18;
        if (!--v13)
          return result;
      }
    }
  }
LABEL_36:
  v20 = v2[167];
  v21 = (char)v20;
  if ((v20 & 0x80u) != 0)
    v20 = *((_QWORD *)v2 + 19);
  if (v7 != v20)
    return 0;
  if (v21 >= 0)
    v22 = v2 + 144;
  else
    v22 = (unsigned __int8 *)*((_QWORD *)v2 + 18);
  if ((v5 & 0x80) != 0)
  {
    if (!memcmp(*v4, v22, v6))
      goto LABEL_48;
    return 0;
  }
  if ((_DWORD)v5)
  {
    while (*(unsigned __int8 *)v4 == *v22)
    {
      v4 = (const void **)((char *)v4 + 1);
      ++v22;
      if (!--v5)
        goto LABEL_48;
    }
    return 0;
  }
LABEL_48:
  v23 = *((unsigned __int8 *)this + 71);
  if ((v23 & 0x80u) == 0)
    v24 = *((unsigned __int8 *)this + 71);
  else
    v24 = *((_QWORD *)this + 7);
  if (v24 != v9)
    return 0;
  v25 = (const void **)((char *)this + 48);
  if (v8 >= 0)
    v26 = v2;
  else
    v26 = *(unsigned __int8 **)v2;
  if ((v23 & 0x80) != 0)
    return memcmp(*v25, v26, *((_QWORD *)this + 7)) == 0;
  if (!*((_BYTE *)this + 71))
    return 1;
  v27 = v23 - 1;
  do
  {
    v29 = *(unsigned __int8 *)v25;
    v25 = (const void **)((char *)v25 + 1);
    v28 = v29;
    v31 = *v26++;
    v30 = v31;
    v33 = v27-- != 0;
    result = v28 == v30;
  }
  while (v28 == v30 && v33);
  return result;
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::OneShotReplyRemodeller::pruneUserAcceptedDialogAct(nlv4_inference_orchestrator::post_processing::tree_manipulations::OneShotReplyRemodeller *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  NSObject *v4;
  char *v5;
  __int128 *v6;
  unsigned __int8 *v7;
  const void **v8;
  size_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  const void **v15;
  size_t v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  NSObject *v23;
  _BOOL8 result;
  void **v25;
  __int16 v26[8];
  uint8_t buf[16];

  v4 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C2196000, v4, OS_LOG_TYPE_DEBUG, "Attempt pruning UserAccepted from a one shot reply UserAccepted + UserStatedTask prediction.", buf, 2u);
  }
  v7 = (unsigned __int8 *)*((_QWORD *)a2 + 11);
  v6 = (__int128 *)*((_QWORD *)a2 + 12);
  v5 = (char *)a2 + 88;
  if (0x8E38E38E38E38E39 * (((char *)v6 - (char *)v7) >> 4) < 2)
    return 0;
  v8 = (const void **)((char *)this + 24);
  v9 = *((unsigned __int8 *)this + 47);
  v10 = *((_QWORD *)this + 4);
  if ((v9 & 0x80u) == 0)
    v11 = v9;
  else
    v11 = v10;
  v12 = v7[23];
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *((_QWORD *)v7 + 1);
  if (v11 != v12)
  {
LABEL_20:
    v17 = v7[167];
    v18 = (char)v17;
    if ((v17 & 0x80u) != 0)
      v17 = *((_QWORD *)v7 + 19);
    if (v11 == v17)
    {
      if (v18 >= 0)
        v19 = v7 + 144;
      else
        v19 = (unsigned __int8 *)*((_QWORD *)v7 + 18);
      if ((v9 & 0x80) == 0)
      {
        if ((_DWORD)v9)
        {
          while (*(unsigned __int8 *)v8 == *v19)
          {
            v8 = (const void **)((char *)v8 + 1);
            ++v19;
            if (!--v9)
              goto LABEL_36;
          }
          goto LABEL_33;
        }
        goto LABEL_36;
      }
      if (!memcmp(*v8, v19, v10))
      {
LABEL_36:
        v20 = (__int128 *)(v7 + 288);
        v21 = v6;
        v22 = (uint64_t)(v7 + 144);
        goto LABEL_37;
      }
    }
LABEL_33:
    v23 = SNLPOSLoggerForCategory(1);
    result = os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG);
    if (!result)
      return result;
    v26[0] = 0;
    _os_log_impl(&dword_1C2196000, v23, OS_LOG_TYPE_DEBUG, "Could not find a UserAccepted dialog act to remove.", (uint8_t *)v26, 2u);
    return 0;
  }
  if (v13 >= 0)
    v14 = v7;
  else
    v14 = *(unsigned __int8 **)v7;
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(*v8, v14, v10))
      goto LABEL_20;
  }
  else if ((_DWORD)v9)
  {
    v15 = v8;
    v16 = v9;
    while (*(unsigned __int8 *)v15 == *v14)
    {
      v15 = (const void **)((char *)v15 + 1);
      ++v14;
      if (!--v16)
        goto LABEL_31;
    }
    goto LABEL_20;
  }
LABEL_31:
  v20 = (__int128 *)(v7 + 144);
  v21 = v6;
  v22 = (uint64_t)v7;
LABEL_37:
  v25 = (void **)std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *>(v20, v21, v22);
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__base_destruct_at_end[abi:ne180100]((uint64_t)v5, v25);
  return 1;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  void **v9;
  __int128 v10;
  __int128 v11;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      v6 = *v5;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a3 = v6;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      v7 = (void **)(a3 + 24);
      if (*(char *)(a3 + 47) < 0)
        operator delete(*v7);
      v8 = *(__int128 *)((char *)v5 + 24);
      *(_QWORD *)(a3 + 40) = *((_QWORD *)v5 + 5);
      *(_OWORD *)v7 = v8;
      *((_BYTE *)v5 + 47) = 0;
      *((_BYTE *)v5 + 24) = 0;
      v9 = (void **)(a3 + 48);
      if (*(char *)(a3 + 71) < 0)
        operator delete(*v9);
      v10 = v5[3];
      *(_QWORD *)(a3 + 64) = *((_QWORD *)v5 + 8);
      *(_OWORD *)v9 = v10;
      *((_BYTE *)v5 + 71) = 0;
      *((_BYTE *)v5 + 48) = 0;
      *(_OWORD *)(a3 + 72) = *(__int128 *)((char *)v5 + 72);
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vdeallocate(a3 + 88);
      *(_OWORD *)(a3 + 88) = *(__int128 *)((char *)v5 + 88);
      *(_QWORD *)(a3 + 104) = *((_QWORD *)v5 + 13);
      *((_QWORD *)v5 + 11) = 0;
      *((_QWORD *)v5 + 12) = 0;
      *((_QWORD *)v5 + 13) = 0;
      v11 = v5[8];
      *(_OWORD *)(a3 + 112) = v5[7];
      *(_OWORD *)(a3 + 128) = v11;
      a3 += 144;
      v5 += 9;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v4;
  void **v5;
  void **v6;
  void **v7;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    v5 = v4 - 7;
    do
    {
      v7 = v5;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v7);
      if (*((char *)v5 - 17) < 0)
        operator delete(*(v5 - 5));
      if (*((char *)v5 - 41) < 0)
        operator delete(*(v5 - 8));
      if (*((char *)v5 - 65) < 0)
        operator delete(*(v5 - 11));
      v6 = v5 - 11;
      v5 -= 18;
    }
    while (v6 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (uint64_t)v4 - 56;
      do
      {
        v8 = v6;
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v8);
        if (*(char *)(v6 - 17) < 0)
          operator delete(*(void **)(v6 - 40));
        if (*(char *)(v6 - 41) < 0)
          operator delete(*(void **)(v6 - 64));
        if (*(char *)(v6 - 65) < 0)
          operator delete(*(void **)(v6 - 88));
        v7 = (void *)(v6 - 88);
        v6 -= 144;
      }
      while (v7 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vdeallocate(uint64_t a1)
{
  if (*(_QWORD *)a1)
  {
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__base_destruct_at_end[abi:ne180100](a1, *(void ***)a1);
    operator delete(*(void **)a1);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
}

void std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::OneShotReplyRemodeller::isReplyMessageGraph(nlv4_inference_orchestrator::post_processing::tree_manipulations::OneShotReplyRemodeller *this, const UsoGraph *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v6;
  int v7;
  BOOL v8;

  v3 = *((_QWORD *)this + 10);
  v2 = *((_QWORD *)this + 11);
  if (v2 == v3 || (unint64_t)(v2 - v3) < 0x10)
    return 0;
  v6 = v3 + 8;
  do
  {
    v7 = *(_DWORD *)(*(_QWORD *)(v6 - 8) + 72);
    result = v7 == 1303;
    v8 = v7 == 1303 || v6 == v2;
    v6 += 8;
  }
  while (!v8);
  return result;
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::OneShotReplyRemodeller::isReplyMessageNode(uint64_t a1)
{
  return *(_DWORD *)(a1 + 72) == 1303;
}

uint64_t itfm_inference_orchestrator::inference_engine::ITFME5MLModule::ITFME5MLModule(uint64_t a1, char *a2, uint64_t a3, _DWORD *a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v12[5];
  char v13;

  LOBYTE(v12[0]) = 0;
  v13 = 0;
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::EspressoE5MLModule(a1, a2, a3, a4, (unsigned __int8 *)a1, v12);
  std::__optional_destruct_base<snlp::common::selflogging::NLXSchemaNLXClientEventMetadata,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v12);
  *(_DWORD *)(a1 + 352) = *a4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 360), "source_tokens_embeddings");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 384), "matched_spans");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 408), "context");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 432), "source_mask");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 456), "class_probabilities");
  v6 = *(std::__shared_weak_count **)(a1 + 184);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  _os_feature_enabled_impl();
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::allocateMemoryToPorts((E5RT::ExecutionStreamOperation **)a1);
  return a1;
}

void sub_1C21FE9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  char *v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;

  if (v10[479] < 0)
    operator delete(*v15);
  if (v10[455] < 0)
    operator delete(*v14);
  if (v10[431] < 0)
    operator delete(*v13);
  if (v10[407] < 0)
    operator delete(*v12);
  if (v10[383] < 0)
    operator delete(*v11);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::~EspressoE5MLModule((snlp::common::espresso_inference::e5ml::EspressoE5MLModule *)v10);
  _Unwind_Resume(a1);
}

void sub_1C21FEA4C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<snlp::common::selflogging::NLXSchemaNLXClientEventMetadata,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1C21FEA44);
}

uint64_t std::__optional_destruct_base<snlp::common::selflogging::NLXSchemaNLXClientEventMetadata,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 80))
  {
    if (*(char *)(a1 + 71) < 0)
      operator delete(*(void **)(a1 + 48));
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

void snlp::common::espresso_inference::e5ml::EspressoE5MLModule::~EspressoE5MLModule(snlp::common::espresso_inference::e5ml::EspressoE5MLModule *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;

  v2 = (_QWORD *)*((_QWORD *)this + 41);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v4)
    operator delete(v4);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)this + 272);
  std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table((uint64_t)this + 232);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 192);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
  if (*((_BYTE *)this + 160) && *((char *)this + 159) < 0)
    operator delete(*((void **)this + 17));
  std::__optional_destruct_base<snlp::common::selflogging::NLXSchemaNLXClientEventMetadata,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 48);
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>,0>(uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJijfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJijfbSD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>,0>(uint64_t a1)
{
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t itfm_inference_orchestrator::inference_engine::ITFME5MLModule::forward@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v14;
  _BYTE v15[40];

  if (a2[1] - *a2 <= 8uLL
    || (v5 = a2[12], (unint64_t)(a2[13] - v5) <= 8)
    || (v6 = a2[6], (unint64_t)(a2[7] - v6) <= 0x10))
  {
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
  }
  itfm_inference_orchestrator::inference_engine::ITFME5MLModule::reshapeStream((itfm_inference_orchestrator::inference_engine::ITFME5MLModule *)a1, *(_DWORD *)(*a2 + 8), *(_DWORD *)(v5 + 8), *(_DWORD *)(v6 + 16), (uint64_t)v15);
  E5RT::ExecutionStreamOperation::ReshapeOperation();
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::bindPorts((E5RT::ExecutionStreamOperation **)a1);
  itfm_inference_orchestrator::inference_engine::ITFME5MLModule::setInputs((unsigned __int8 *)a1, (uint64_t)a2);
  v8 = *(std::__shared_weak_count **)(a1 + 184);
  v14 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  E5RT::ExecutionStream::ExecuteStreamSync(*(E5RT::ExecutionStream **)(a1 + 24));
  E5RT::ExecutionStream::ResetStream(*(E5RT::ExecutionStream **)(a1 + 24));
  itfm_inference_orchestrator::inference_engine::ITFME5MLModule::getOutputs((itfm_inference_orchestrator::inference_engine::ITFME5MLModule *)a1, a3);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::unbindPorts((E5RT::ExecutionStreamOperation **)a1);
  return std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table((uint64_t)v15);
}

void sub_1C21FEDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::string *a12, void *__p, uint64_t a14, void *__pa, char a16, uint64_t a17, char a18)
{
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *v18;

  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v18);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void itfm_inference_orchestrator::inference_engine::ITFME5MLModule::reshapeStream(itfm_inference_orchestrator::inference_engine::ITFME5MLModule *this@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  unsigned __int8 *v17;
  char v18;
  unsigned int v19;
  int v20;
  NSObject *v21;
  void **v22;
  const char *v23;
  void **v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  void *__p[2];
  char v39;
  _BYTE buf[24];
  _BYTE v41[12];
  __int16 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v10 = SNLPOSLoggerForCategory(2);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    v11 = *((int *)this + 88);
    if (v11 >= 8)
    {
      v13 = SNLPOSLoggerForCategory(4);
      v12 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v11;
        _os_log_impl(&dword_1C2196000, v13, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
      }
    }
    else
    {
      v12 = off_1E7BED840[v11];
    }
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_DEBUG, "[%s] Reshaping encoder input stream.", buf, 0xCu);
  }
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_DWORD *)(a5 + 32) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(buf, "utterance_tokens_embedder_emb_dim");
  v14 = *((int *)this + 88);
  if (v14 >= 8)
  {
    v16 = SNLPOSLoggerForCategory(4);
    v15 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v41 = 136315394;
      *(_QWORD *)&v41[4] = "<UNDEFINED_COMPONENT>";
      v42 = 2048;
      v43 = v14;
      _os_log_impl(&dword_1C2196000, v16, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", v41, 0x16u);
    }
  }
  else
  {
    v15 = off_1E7BED840[v14];
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v15);
  if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((_QWORD *)this + 34, buf))
  {
    v17 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((_QWORD *)this + 34, buf);
    if (!v17)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if (*((_DWORD *)v17 + 16) == 1)
    {
      v18 = 0;
      v19 = *((_DWORD *)v17 + 10) & 0xFFFFFF00;
      v20 = *((_DWORD *)v17 + 10);
      goto LABEL_25;
    }
    v21 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v24 = __p;
      if (v39 < 0)
        v24 = (void **)__p[0];
      *(_DWORD *)v41 = 136315138;
      *(_QWORD *)&v41[4] = v24;
      v23 = "[%s] Could not reshape because the relevant dimensions could not be read from the config.";
LABEL_23:
      _os_log_impl(&dword_1C2196000, v21, OS_LOG_TYPE_ERROR, v23, v41, 0xCu);
    }
  }
  else
  {
    v21 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v22 = __p;
      if (v39 < 0)
        v22 = (void **)__p[0];
      *(_DWORD *)v41 = 136315138;
      *(_QWORD *)&v41[4] = v22;
      v23 = "[%s] Could not reshape because the relevant dimensions could not be found in the config.";
      goto LABEL_23;
    }
  }
  v20 = 0;
  v19 = 0;
  v18 = 1;
LABEL_25:
  if (v39 < 0)
    operator delete(__p[0]);
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if ((v18 & 1) != 0)
      return;
  }
  else if ((v18 & 1) != 0)
  {
    return;
  }
  v25 = operator new(0x18uLL);
  *(_QWORD *)&buf[8] = v25 + 3;
  *(_QWORD *)&buf[16] = v25 + 3;
  *v25 = 1;
  v25[1] = a2;
  v25[2] = a4;
  *(_QWORD *)buf = v25;
  E5RT::TensorDataType::TensorDataType();
  E5RT::TensorDescriptor::CreateTensorDesc();
  *(_QWORD *)v41 = (char *)this + 384;
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a5, (unsigned __int8 *)this + 384, (__int128 **)v41);
  v27 = *((_QWORD *)v26 + 5);
  *((_QWORD *)v26 + 5) = v37;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)__p);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  v28 = operator new(0x10uLL);
  *(_QWORD *)&buf[8] = v28 + 2;
  *(_QWORD *)&buf[16] = v28 + 2;
  *v28 = 1;
  v28[1] = a3;
  *(_QWORD *)buf = v28;
  E5RT::TensorDataType::TensorDataType();
  E5RT::TensorDescriptor::CreateTensorDesc();
  *(_QWORD *)v41 = (char *)this + 408;
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a5, (unsigned __int8 *)this + 408, (__int128 **)v41);
  v30 = *((_QWORD *)v29 + 5);
  *((_QWORD *)v29 + 5) = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)__p);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  v31 = operator new(0x18uLL);
  *(_QWORD *)&buf[8] = v31 + 3;
  *(_QWORD *)&buf[16] = v31 + 3;
  *v31 = 1;
  v31[1] = a2;
  v31[2] = v19 | v20;
  *(_QWORD *)buf = v31;
  E5RT::TensorDataType::TensorDataType();
  E5RT::TensorDescriptor::CreateTensorDesc();
  *(_QWORD *)v41 = (char *)this + 360;
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a5, (unsigned __int8 *)this + 360, (__int128 **)v41);
  v33 = *((_QWORD *)v32 + 5);
  *((_QWORD *)v32 + 5) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)__p);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  v34 = operator new(0x10uLL);
  *(_QWORD *)&buf[8] = v34 + 2;
  *(_QWORD *)&buf[16] = v34 + 2;
  *v34 = 1;
  v34[1] = a2;
  *(_QWORD *)buf = v34;
  E5RT::TensorDataType::TensorDataType();
  E5RT::TensorDescriptor::CreateTensorDesc();
  *(_QWORD *)v41 = (char *)this + 432;
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a5, (unsigned __int8 *)this + 432, (__int128 **)v41);
  v36 = *((_QWORD *)v35 + 5);
  *((_QWORD *)v35 + 5) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)__p);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
}

void sub_1C21FF4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a10);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table(v21);
  _Unwind_Resume(a1);
}

void itfm_inference_orchestrator::inference_engine::ITFME5MLModule::setInputs(unsigned __int8 *a1, uint64_t a2)
{
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)a1, a1 + 360, a2);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)a1, a1 + 384, a2 + 48);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)a1, a1 + 408, a2 + 96);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)a1, a1 + 432, a2 + 144);
}

void itfm_inference_orchestrator::inference_engine::ITFME5MLModule::getOutputs(itfm_inference_orchestrator::inference_engine::ITFME5MLModule *this@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  _BYTE *v4;
  uint64_t v5;
  void *__p;
  _BYTE *v7;
  uint64_t v8;
  std::string v9;
  void *v10;
  _BYTE *v11;

  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getOutput((uint64_t)this, (unsigned __int8 *)this + 456, &v9);
  v3 = 0;
  v4 = 0;
  v5 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v3, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_, (uint64_t)(v9.__r_.__value_.__l.__size_ - v9.__r_.__value_.__r.__words[0]) >> 3);
  __p = 0;
  v7 = 0;
  v8 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v10, (uint64_t)v11, (v11 - (_BYTE *)v10) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, v3, (uint64_t)v4, (v4 - (_BYTE *)v3) >> 3);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, __p, (uint64_t)v7, (v7 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  if (v3)
  {
    v4 = v3;
    operator delete(v3);
  }
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  if (v9.__r_.__value_.__r.__words[0])
  {
    v9.__r_.__value_.__l.__size_ = v9.__r_.__value_.__r.__words[0];
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1C21FF724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;
  void *v17;

  v17 = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = v17;
    operator delete(v17);
  }
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&__p);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a15);
  _Unwind_Resume(a1);
}

void itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C21FF860(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C21FF8D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void snlp::common::exception::SNLPException::~SNLPException(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1C3BB9B44);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<E5RT::OperandDescriptor const>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void sub_1C21FFE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  _Unwind_Resume(a1);
}

uint64_t snlp::common::feature_flags::isSNLPFeatureStoreEnabled(snlp::common::feature_flags *this)
{
  return _os_feature_enabled_impl();
}

uint64_t snlp::common::feature_flags::isSNLPMessageContentRuleEnabled(snlp::common::feature_flags *this)
{
  return _os_feature_enabled_impl();
}

uint64_t snlp::common::feature_flags::isSNLPWireAudioAccessoryMemory(snlp::common::feature_flags *this)
{
  return _os_feature_enabled_impl();
}

uint64_t snlp::common::feature_flags::isSNLPSalientEntityFeaturizationEnabled(snlp::common::feature_flags *this)
{
  return _os_feature_enabled_impl();
}

uint64_t snlp::common::feature_flags::isSNLPSSUForceInferenceEnabled(snlp::common::feature_flags *this)
{
  return _os_feature_enabled_impl();
}

void sub_1C2200100(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C2200184(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C220020C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::forward(nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule *this@<X0>, const nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD v19[3];
  _QWORD v20[3];
  _QWORD v21[3];
  _QWORD v22[3];
  _QWORD v23[3];
  _QWORD v24[3];
  _QWORD v25[3];
  _QWORD v26[3];
  _QWORD v27[3];
  _QWORD v28[3];
  _QWORD v29[3];

  memset(v18, 0, sizeof(v18));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v18, *(const void **)a2, *((_QWORD *)a2 + 1), (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3);
  memset(v19, 0, sizeof(v19));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v19, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 2);
  memset(v20, 0, sizeof(v20));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v20, *((const void **)a2 + 6), *((_QWORD *)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3);
  memset(v21, 0, sizeof(v21));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v21, *((const void **)a2 + 9), *((_QWORD *)a2 + 10), (uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 2);
  memset(v22, 0, sizeof(v22));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v22, *((const void **)a2 + 12), *((_QWORD *)a2 + 13), (uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 3);
  memset(v23, 0, sizeof(v23));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v23, *((const void **)a2 + 15), *((_QWORD *)a2 + 16), (uint64_t)(*((_QWORD *)a2 + 16) - *((_QWORD *)a2 + 15)) >> 2);
  memset(v24, 0, sizeof(v24));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v24, *((const void **)a2 + 18), *((_QWORD *)a2 + 19), (uint64_t)(*((_QWORD *)a2 + 19) - *((_QWORD *)a2 + 18)) >> 3);
  memset(v25, 0, sizeof(v25));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v25, *((const void **)a2 + 21), *((_QWORD *)a2 + 22), (uint64_t)(*((_QWORD *)a2 + 22) - *((_QWORD *)a2 + 21)) >> 2);
  memset(v26, 0, sizeof(v26));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v26, *((const void **)a2 + 24), *((_QWORD *)a2 + 25), (uint64_t)(*((_QWORD *)a2 + 25) - *((_QWORD *)a2 + 24)) >> 3);
  memset(v27, 0, sizeof(v27));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v27, *((const void **)a2 + 27), *((_QWORD *)a2 + 28), (uint64_t)(*((_QWORD *)a2 + 28) - *((_QWORD *)a2 + 27)) >> 2);
  memset(v28, 0, sizeof(v28));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v28, *((const void **)a2 + 30), *((_QWORD *)a2 + 31), (uint64_t)(*((_QWORD *)a2 + 31) - *((_QWORD *)a2 + 30)) >> 3);
  memset(v29, 0, sizeof(v29));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v29, *((const void **)a2 + 33), *((_QWORD *)a2 + 34), (uint64_t)(*((_QWORD *)a2 + 34) - *((_QWORD *)a2 + 33)) >> 2);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::setLastPrediction((uint64_t)this, (uint64_t)v18);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::setHidden((uint64_t)this, (uint64_t)v20);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::setMemory((uint64_t)this, (uint64_t)v22);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::setEncodings((uint64_t)this, (uint64_t)v24);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::setEncodingsLength((uint64_t)this, (uint64_t)v28);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::setAttentionIndex((uint64_t)this, (uint64_t)v26);
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::executePlan(this);
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::getPrediction((uint64_t)&v14);
  v6 = v15;
  *(_OWORD *)a3 = v14;
  *(_QWORD *)(a3 + 16) = v6;
  v7 = v17;
  *(_OWORD *)(a3 + 24) = v16;
  *(_QWORD *)(a3 + 40) = v7;
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::getHidden((uint64_t)&v14);
  v8 = v15;
  *(_OWORD *)(a3 + 48) = v14;
  *(_QWORD *)(a3 + 64) = v8;
  v9 = v17;
  *(_OWORD *)(a3 + 72) = v16;
  *(_QWORD *)(a3 + 88) = v9;
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::getMemory((uint64_t)&v14);
  v10 = v15;
  *(_OWORD *)(a3 + 96) = v14;
  *(_QWORD *)(a3 + 112) = v10;
  v11 = v17;
  *(_OWORD *)(a3 + 120) = v16;
  *(_QWORD *)(a3 + 136) = v11;
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::getAttentionIndex((uint64_t)&v14);
  v12 = v15;
  *(_OWORD *)(a3 + 144) = v14;
  *(_QWORD *)(a3 + 160) = v12;
  v13 = v17;
  *(_OWORD *)(a3 + 168) = v16;
  *(_QWORD *)(a3 + 184) = v13;
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType::~TransformerDecoderInputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *)v18);
}

void sub_1C22005A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46)
{
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *v46;

  nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType(v46);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType::~TransformerDecoderInputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *)&a15);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::setLastPrediction(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "old_prediction");
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1, (uint64_t)__p, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1C2200708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::setHidden(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "hidden");
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1, (uint64_t)__p, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1C220077C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::setMemory(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "memory");
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1, (uint64_t)__p, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1C22007F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::setEncodings(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "encodings");
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1, (uint64_t)__p, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1C2200864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::setEncodingsLength(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "num_of_utterance_tokens");
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1, (uint64_t)__p, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1C22008D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::setAttentionIndex(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "attention_index");
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1, (uint64_t)__p, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1C220094C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::getPrediction(uint64_t a1@<X8>)
{
  void *__p;
  char v4;

  std::string::basic_string[abi:ne180100]<0>(&__p, "out_predictions");
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::getOutput(a1);
  if (v4 < 0)
    operator delete(__p);
}

void sub_1C22009C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::getHidden(uint64_t a1@<X8>)
{
  void *__p;
  char v4;

  std::string::basic_string[abi:ne180100]<0>(&__p, "out_new_hidden");
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::getOutput(a1);
  if (v4 < 0)
    operator delete(__p);
}

void sub_1C2200A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::getMemory(uint64_t a1@<X8>)
{
  void *__p;
  char v4;

  std::string::basic_string[abi:ne180100]<0>(&__p, "out_new_memory");
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::getOutput(a1);
  if (v4 < 0)
    operator delete(__p);
}

void sub_1C2200AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::getAttentionIndex(uint64_t a1@<X8>)
{
  void *__p;
  char v4;

  std::string::basic_string[abi:ne180100]<0>(&__p, "out_new_attention_index");
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::getOutput(a1);
  if (v4 < 0)
    operator delete(__p);
}

void sub_1C2200B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType::~TransformerDecoderInputType(nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = (void *)*((_QWORD *)this + 33);
  if (v2)
  {
    *((_QWORD *)this + 34) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 30);
  if (v3)
  {
    *((_QWORD *)this + 31) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 27);
  if (v4)
  {
    *((_QWORD *)this + 28) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 24);
  if (v5)
  {
    *((_QWORD *)this + 25) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 21);
  if (v6)
  {
    *((_QWORD *)this + 22) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 18);
  if (v7)
  {
    *((_QWORD *)this + 19) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 15);
  if (v8)
  {
    *((_QWORD *)this + 16) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 12);
  if (v9)
  {
    *((_QWORD *)this + 13) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 9);
  if (v10)
  {
    *((_QWORD *)this + 10) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 6);
  if (v11)
  {
    *((_QWORD *)this + 7) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 3);
  if (v12)
  {
    *((_QWORD *)this + 4) = v12;
    operator delete(v12);
  }
  v13 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v13;
    operator delete(v13);
  }
}

void nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType(nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)*((_QWORD *)this + 21);
  if (v2)
  {
    *((_QWORD *)this + 22) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 18);
  if (v3)
  {
    *((_QWORD *)this + 19) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 15);
  if (v4)
  {
    *((_QWORD *)this + 16) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 12);
  if (v5)
  {
    *((_QWORD *)this + 13) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 9);
  if (v6)
  {
    *((_QWORD *)this + 10) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 6);
  if (v7)
  {
    *((_QWORD *)this + 7) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 3);
  if (v8)
  {
    *((_QWORD *)this + 4) = v8;
    operator delete(v8);
  }
  v9 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v9;
    operator delete(v9);
  }
}

void snlp::ssu::app::SSUAppAssets::loadAssetsFromDirectoryInner(uint64_t a1@<X0>, const void **a2@<X1>, snlp::ssu::cache::SSUCacheDirectory **a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  int *v9;
  unsigned int *v10;
  BOOL v11;
  BOOL v12;
  snlp::ssu::app::SSUFileWrapper *v13;
  int *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  int v17;
  void *v18;
  std::string *p_p;
  std::string::size_type size;
  std::string *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::string *v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  void *v37;
  std::string *v38;
  std::string::size_type v39;
  std::string *v40;
  std::string::size_type v41[2];
  std::string __p;
  void *v43;
  char v44;
  void *v45;
  char v46;
  void *v47;
  char v48;
  std::__shared_weak_count *v49;
  std::string v50;
  std::string v51;
  std::string v52;
  __int128 v53;
  unsigned __int8 v54;
  std::string v55[2];
  _QWORD v56[2];
  char v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  std::string v60;
  char v61;
  __int128 v62;
  char v63;
  char v64;

  v58 = 0;
  v59 = 0;
  snlp::ssu::cache::SSUCacheDirectory::buildTemporaryDirectoryPath(*a3, &v60);
  v7 = (std::__shared_weak_count *)operator new(0x38uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7BECB80;
  snlp::ssu::app::SSUCompressedFileWrapper::SSUCompressedFileWrapper((const std::__fs::filesystem::path *)&v7[1], (const void **)a1, a2, (uint64_t)&v60);
  v58 = v7 + 1;
  v59 = v7;
  v9 = (int *)*((_QWORD *)v7[2].~__shared_weak_count + 3);
  v10 = (unsigned int *)((char *)v9 + *(unsigned __int16 *)((char *)v9 - *v9 + 8));
  std::string::basic_string[abi:ne180100](&__p, (char *)v10 + *v10 + 4, *(unsigned int *)((char *)v10 + *v10));
  v11 = snlp::ssu::utilities::validateLocaleMatch((char *)&__p, (const char *)a2);
  v12 = v11;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v11)
      goto LABEL_3;
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(v56, "The request locale does not match the SSUFile locale");
    snlp::ssu::utilities::SSUResultOpt<snlp::ssu::app::SSUAppAssets>::withError(a4, (uint64_t)v56);
    if ((v57 & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_29;
      v22 = (void *)v60.__r_.__value_.__r.__words[0];
      goto LABEL_28;
    }
    v18 = (void *)v56[0];
LABEL_25:
    operator delete(v18);
    goto LABEL_26;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v12)
    goto LABEL_12;
LABEL_3:
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  v13 = (snlp::ssu::app::SSUFileWrapper *)v7[2].__vftable;
  v14 = *(int **)(*(_QWORD *)v13 + 24);
  v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 < 5u || (v16 = v15[2]) == 0)
  {
    v17 = 0;
    goto LABEL_15;
  }
  v17 = *(unsigned __int16 *)((char *)v14 + v16);
  if (v17 != 1)
  {
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(&v60, "Unrecognized asset directory format version: ");
    std::to_string(&__p, v17);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v21 = std::string::append(&v60, (const std::string::value_type *)p_p, size);
    v55[0] = *v21;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    snlp::ssu::utilities::SSUResultOpt<snlp::ssu::app::SSUAppAssets>::withError(a4, (uint64_t)v55);
    if (SHIBYTE(v55[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55[0].__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_26;
    v18 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_25;
  }
  snlp::ssu::app::SSUFileWrapper::getDataVersion(v13, &v53);
  if ((snlp::ssu::version::isValidAssetVersion((uint64_t)&v53) & 1) != 0)
  {
    if (*(char *)(a1 + 47) < 0)
      std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
    else
      v51 = *(std::string *)(a1 + 24);
    if (snlp::ssu::app::SSUAppAssets::directoryHasAssetVersion((uint64_t)&v51, a2, (const void **)&v53))
    {
      v41[0] = (std::string::size_type)&v7[1];
      v41[1] = (std::string::size_type)v7;
      do
        v32 = __ldxr(p_shared_owners);
      while (__stxr(v32 + 1, p_shared_owners));
      snlp::ssu::app::SSUAppAssets::SSUAppAssets(&__p, (__int128 *)a1, &v53, (__int128 *)a2, v31, v41);
      do
        v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      LOBYTE(v62) = 0;
      v64 = 0;
      snlp::ssu::app::SSUAppAssets::SSUAppAssets(&v60, (__int128 *)&__p);
      v61 = 1;
      snlp::ssu::utilities::SSUResultOpt<snlp::ssu::app::SSUAppAssets>::SSUResultOpt(a4, &v62, (uint64_t)&v60);
      std::__optional_destruct_base<snlp::ssu::app::SSUAppAssets,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v60);
      if (v64 && v63 < 0)
        operator delete((void *)v62);
      v34 = v49;
      if (v49)
      {
        v35 = (unint64_t *)&v49->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if (v48 < 0)
        operator delete(v47);
      if (v46 < 0)
        operator delete(v45);
      if (v44 < 0)
        operator delete(v43);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_85;
      v37 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v60, "Asset directory touch version file not present when expected for: ");
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
      else
        __p = v51;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = &__p;
      else
        v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v39 = __p.__r_.__value_.__l.__size_;
      v40 = std::string::append(&v60, (const std::string::value_type *)v38, v39);
      v50 = *v40;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      snlp::ssu::utilities::SSUResultOpt<snlp::ssu::app::SSUAppAssets>::withError(a4, (uint64_t)&v50);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_85;
      v37 = (void *)v60.__r_.__value_.__r.__words[0];
    }
    operator delete(v37);
LABEL_85:
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_88;
    v30 = (void *)v51.__r_.__value_.__r.__words[0];
    goto LABEL_87;
  }
  v26 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v60, "Asset version in SSU file is invalid: ");
  if ((v54 & 0x80u) == 0)
    v27 = (const std::string::value_type *)&v53;
  else
    v27 = (const std::string::value_type *)v53;
  if ((v54 & 0x80u) == 0)
    v28 = v54;
  else
    v28 = *((_QWORD *)&v53 + 1);
  v29 = std::string::append(v26, v27, v28);
  v52 = *v29;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  snlp::ssu::utilities::SSUResultOpt<snlp::ssu::app::SSUAppAssets>::withError(a4, (uint64_t)&v52);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
  {
    v30 = (void *)v60.__r_.__value_.__r.__words[0];
LABEL_87:
    operator delete(v30);
  }
LABEL_88:
  if ((char)v54 < 0)
  {
    v22 = (void *)v53;
LABEL_28:
    operator delete(v22);
  }
LABEL_29:
  v23 = v59;
  if (v59)
  {
    v24 = (unint64_t *)&v59->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1C2201198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;

  if (*(char *)(v59 - 193) < 0)
    operator delete(*(void **)(v59 - 216));
  if (a40 < 0)
    operator delete(__p);
  if (a53 < 0)
    operator delete(a48);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v59 - 232);
  _Unwind_Resume(a1);
}

void sub_1C22012EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;
  uint64_t v51;
  void *v54;
  char *v55;

  if (*(char *)(v51 - 233) < 0)
    operator delete(*(void **)(v51 - 256));
  if (*(char *)(v51 - 193) < 0)
    operator delete(*(void **)(v51 - 216));
  if (a2 == 1)
  {
    v54 = __cxa_begin_catch(a1);
    v55 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v54 + 16))(v54);
    std::string::basic_string[abi:ne180100]<0>(&__p, v55);
    snlp::ssu::utilities::SSUResultOpt<snlp::ssu::app::SSUAppAssets>::withError(v50, (uint64_t)&__p);
    if (a50 < 0)
      operator delete(__p);
    __cxa_end_catch();
    JUMPOUT(0x1C2200EC4);
  }
  JUMPOUT(0x1C22012DCLL);
}

void sub_1C22013B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a47 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1C22012DCLL);
}

void snlp::ssu::utilities::SSUResultOpt<snlp::ssu::app::SSUAppAssets>::withError(uint64_t a1, uint64_t a2)
{
  _BYTE v2[120];
  __int128 v3;
  uint64_t v4;
  char v5;

  v3 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v5 = 1;
  v2[0] = 0;
  v2[112] = 0;
  snlp::ssu::utilities::SSUResultOpt<snlp::ssu::app::SSUAppAssets>::SSUResultOpt(a1, &v3, (uint64_t)v2);
  std::__optional_destruct_base<snlp::ssu::app::SSUAppAssets,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v2);
  if (v5)
  {
    if (SHIBYTE(v4) < 0)
      operator delete((void *)v3);
  }
}

void sub_1C2201450(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::__optional_destruct_base<snlp::ssu::app::SSUAppAssets,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  if (*(_BYTE *)(v2 - 24))
  {
    if (*(char *)(v2 - 25) < 0)
      operator delete(*(void **)(v2 - 48));
  }
  _Unwind_Resume(a1);
}

BOOL snlp::ssu::app::SSUAppAssets::directoryHasAssetVersion(uint64_t a1, const void **a2, const void **a3)
{
  size_t v6;
  void **v7;
  const void *v8;
  size_t v9;
  std::string *v10;
  const void *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  _BOOL8 v19;
  std::string v21;
  void *__p[2];
  std::string::size_type v23;
  std::__fs::filesystem::path v24;
  void *v25[2];
  char v26;
  char v27;
  std::string v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*((char *)a3 + 23) >= 0)
    v6 = *((unsigned __int8 *)a3 + 23);
  else
    v6 = (size_t)a3[1];
  v7 = v25;
  std::string::basic_string[abi:ne180100]((uint64_t)v25, v6 + 8);
  if (v26 < 0)
    v7 = (void **)v25[0];
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0)
      v8 = a3;
    else
      v8 = *a3;
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, ".version");
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v28, (char *)v25);
  std::__fs::filesystem::operator/[abi:ne180100](&v24.__pn_, a1, (std::__fs::filesystem::path *)&v28);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (*((char *)a2 + 23) >= 0)
    v9 = *((unsigned __int8 *)a2 + 23);
  else
    v9 = (size_t)a2[1];
  v10 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v9 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v9)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    memmove(v10, v11, v9);
  }
  *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 46;
  v12 = *((char *)a3 + 23);
  if (v12 >= 0)
    v13 = (const std::string::value_type *)a3;
  else
    v13 = (const std::string::value_type *)*a3;
  if (v12 >= 0)
    v14 = *((unsigned __int8 *)a3 + 23);
  else
    v14 = (std::string::size_type)a3[1];
  v15 = std::string::append(&v21, v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::string::append(&v28, ".version");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v23 = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v28, (char *)__p);
  std::__fs::filesystem::operator/[abi:ne180100](&v21, a1, (std::__fs::filesystem::path *)&v28);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  std::__fs::filesystem::__status(&v24, 0);
  if (v27 == 1)
  {
    v19 = 1;
  }
  else
  {
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&v21, 0);
    v19 = v27 == 1;
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v24.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__pn_.__r_.__value_.__l.__data_);
  if (v26 < 0)
    operator delete(v25[0]);
  return v19;
}

void sub_1C2201714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 73) < 0)
    operator delete(*(void **)(v33 - 96));
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

std::string *snlp::ssu::app::SSUAppAssets::SSUAppAssets(std::string *this, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t a5, std::string::size_type *a6)
{
  __int128 v11;
  std::string *v12;
  __int128 v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string::size_type v17;
  unint64_t *v18;
  unint64_t v19;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v11 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v11;
  }
  v12 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v13 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v14 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v14;
  }
  v15 = this + 3;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v16 = *a3;
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  }
  v17 = a6[1];
  this[4].__r_.__value_.__r.__words[0] = *a6;
  this[4].__r_.__value_.__l.__size_ = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  return this;
}

void sub_1C2201998(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  snlp::ssu::matcher::SSUAppInfo::~SSUAppInfo((void **)v1);
  _Unwind_Resume(a1);
}

void snlp::ssu::app::SSUAppAssets::~SSUAppAssets(void **this)
{
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)(this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

std::string *snlp::ssu::app::SSUAppAssets::SSUAppAssets(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string::size_type v10;
  unint64_t *v11;
  unint64_t v12;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  v8 = this + 3;
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v9 = *(__int128 *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  v10 = *((_QWORD *)a2 + 13);
  this[4].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 12);
  this[4].__r_.__value_.__l.__size_ = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return this;
}

void sub_1C2201B40(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  snlp::ssu::matcher::SSUAppInfo::~SSUAppInfo((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::utilities::SSUResultOpt<snlp::ssu::app::SSUAppAssets>::SSUResultOpt(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v4;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  if (*(_BYTE *)(a3 + 112))
  {
    snlp::ssu::app::SSUAppAssets::SSUAppAssets((std::string *)(a1 + 32), (__int128 *)a3);
    *(_BYTE *)(a1 + 144) = 1;
  }
  return a1;
}

void sub_1C2201C04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__optional_destruct_base<snlp::ssu::app::SSUAppAssets,false>::~__optional_destruct_base[abi:ne180100](v2);
  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<snlp::ssu::app::SSUAppAssets,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 112))
  {
    std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](a1 + 96);
    if (*(char *)(a1 + 95) < 0)
      operator delete(*(void **)(a1 + 72));
    if (*(char *)(a1 + 71) < 0)
      operator delete(*(void **)(a1 + 48));
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

void snlp::ssu::matcher::SSUAppInfo::~SSUAppInfo(void **this)
{
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, char *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  v4 = (int)v3 < 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((int)v3 < 0)
    a2 = *(char **)a2;
  v3 = v3;
  if (v4)
    v3 = v5;
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, &a2[v3]);
  return a1;
}

void sub_1C2201D28(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::operator/[abi:ne180100](std::string *this, uint64_t a2, std::__fs::filesystem::path *a3)
{
  int v6;
  std::__fs::filesystem::path *v7;
  std::string::size_type size;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    *this = *(std::string *)a2;
  if (std::__fs::filesystem::path::__root_directory(a3).__size_)
    return std::string::operator=(this, &a3->__pn_);
  if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)this).__size_)
    std::string::push_back(this, 47);
  v6 = SHIBYTE(a3->__pn_.__r_.__value_.__r.__words[2]);
  if (v6 >= 0)
    v7 = a3;
  else
    v7 = (std::__fs::filesystem::path *)a3->__pn_.__r_.__value_.__r.__words[0];
  if (v6 >= 0)
    size = HIBYTE(a3->__pn_.__r_.__value_.__r.__words[2]);
  else
    size = a3->__pn_.__r_.__value_.__l.__size_;
  return std::string::append(this, (const std::string::value_type *)v7, size);
}

void sub_1C2201DE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<snlp::ssu::app::SSUCompressedFileWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7BECB80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<snlp::ssu::app::SSUCompressedFileWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7BECB80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3BB9B44);
}

void std::__shared_ptr_emplace<snlp::ssu::app::SSUCompressedFileWrapper>::__on_zero_shared(uint64_t a1)
{
  snlp::ssu::app::SSUCompressedFileWrapper::~SSUCompressedFileWrapper((snlp::ssu::app::SSUCompressedFileWrapper *)(a1 + 24));
}

void snlp::ssu::app::SSUAppAssets::loadAssetsFromDirectory(uint64_t a1@<X0>, const void **a2@<X1>, snlp::ssu::cache::SSUCacheDirectory **a3@<X2>, uint64_t a4@<X8>)
{
  snlp::ssu::cache::SSUCacheDirectory *v8;
  snlp::ssu::cache::SSUCacheDirectory *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  snlp::ssu::cache::SSUCacheDirectory *v17[2];
  std::string v18;
  std::string __p;
  std::string v20;
  char v21;
  std::string v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a1 + 47) < 0)
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  else
    v20 = *(std::string *)(a1 + 24);
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&v20, 0);
  if (v21 == 2)
  {
    v8 = *a3;
    v9 = a3[1];
    v17[0] = v8;
    v17[1] = v9;
    if (v9)
    {
      v10 = (unint64_t *)((char *)v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    snlp::ssu::app::SSUAppAssets::loadAssetsFromDirectoryInner(a1, a2, v17, a4);
    if (v9)
    {
      v12 = (unint64_t *)((char *)v9 + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        (*(void (**)(snlp::ssu::cache::SSUCacheDirectory *))(*(_QWORD *)v9 + 16))(v9);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v9);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v22, "Asset directory does not exist or is not a directory: ");
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v18, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
    else
      v18 = v20;
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v18;
    else
      v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    else
      size = v18.__r_.__value_.__l.__size_;
    v16 = std::string::append(&v22, (const std::string::value_type *)v14, size);
    __p = *v16;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    snlp::ssu::utilities::SSUResultOpt<snlp::ssu::app::SSUAppAssets>::withError(a4, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
}

void sub_1C22020D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v24;
  char v25;

  if (v25 < 0)
    operator delete(v24);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::app::SSUAppAssets::fileWrapper(snlp::ssu::app::SSUAppAssets *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 12) + 24);
}

void snlp::ssu::app::SSUAppAssets::getAssetVersion(snlp::ssu::app::SSUAppAssets *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 11);
  }
}

void snlp::ssu::app::SSUAppAssets::allSupportedCategories(snlp::ssu::app::SSUAppAssets *this@<X0>, unsigned __int8 **a2@<X8>)
{
  snlp::ssu::app::SSUAppAssets *v2;
  NSObject *v4;
  BOOL v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  snlp::ssu::app::SSUAppAssets *v14;
  uint64_t v15;

  v2 = this;
  v15 = *MEMORY[0x1E0C80C00];
  snlp::ssu::app::SSUFileWrapper::getAllCategoriesWithGroup(*(_QWORD *)(*((_QWORD *)this + 12) + 24), (const void **)this, a2);
  v4 = SNLPOSLoggerForCategory(8);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG);
  v6 = *a2;
  if (v5)
  {
    v7 = a2[1];
    if (*((char *)v2 + 23) < 0)
      v2 = *(snlp::ssu::app::SSUAppAssets **)v2;
    *(_DWORD *)buf = 134218242;
    v12 = (const char *)(v7 - v6);
    v13 = 2080;
    v14 = v2;
    _os_log_impl(&dword_1C2196000, v4, OS_LOG_TYPE_DEBUG, "Found %lu categories in app assets for group %s", buf, 0x16u);
  }
  else
  {
    v7 = a2[1];
  }
  for (; v6 != v7; ++v6)
  {
    v8 = *v6;
    v9 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v10 = "";
      if (v8 <= 3)
        v10 = EnumNamesSSUCategoryType(void)::names[v8];
      *(_DWORD *)buf = 136315138;
      v12 = v10;
      _os_log_impl(&dword_1C2196000, v9, OS_LOG_TYPE_DEBUG, "Found category: %s", buf, 0xCu);
    }
  }
}

void snlp::ssu::app::SSUAppAssets::loadNegativeExamples(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X8>)
{
  NSObject *v4;
  __int128 v5;
  uint64_t v6;
  _BYTE buf[24];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  snlp::ssu::app::SSUFileWrapper::getNegativeExampleUtterances(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 24), a2, a1, (uint64_t)&v5);
  v4 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v5 + 1) - v5) >> 3);
    _os_log_impl(&dword_1C2196000, v4, OS_LOG_TYPE_DEBUG, "Loaded %lu negative examples in app assets", buf, 0xCu);
  }
  *(_OWORD *)a3 = v5;
  *(_QWORD *)(a3 + 16) = v6;
  v6 = 0;
  v5 = 0uLL;
  *(_QWORD *)buf = &v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void snlp::ssu::app::SSUAppAssets::loadPositiveExamples(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, _QWORD *a3@<X8>)
{
  NSObject *v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  snlp::ssu::app::SSUFileWrapper::getPositiveExamples(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 24), a2, a1, a3);
  v4 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = 0x8E38E38E38E38E39 * ((uint64_t)(a3[1] - *a3) >> 3);
    v6 = 134217984;
    v7 = v5;
    _os_log_impl(&dword_1C2196000, v4, OS_LOG_TYPE_DEBUG, "Loaded %lu positive example intents from app assets", (uint8_t *)&v6, 0xCu);
  }
}

void std::vector<snlp::ssu::app::SSUAppIntent>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<snlp::ssu::app::SSUAppIntent>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<snlp::ssu::app::SSUAppIntent>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 + 24);
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<snlp::ssu::app::SSUAppParameter>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<snlp::ssu::app::SSUAppParameter>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *getVersionFileName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "version.yaml");
}

_QWORD *getConfigFileName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "config.json");
}

uint64_t getAssetDirectoryNCV@<X0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::locale::id *v5;
  const std::locale::facet *v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  std::sub_match<const char *> *p_p;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::runtime_error *v21;
  std::string *v22;
  __int128 v23;
  std::runtime_error *exception;
  std::string *v25;
  __int128 v26;
  std::string pn;
  _OWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  std::regex_traits<char> v37[2];
  std::__shared_weak_count *v38;
  void *__p;
  uint64_t v40;
  uint64_t v41;
  std::string v42[2];
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  std::string v51;
  _QWORD v52[21];

  v52[19] = *MEMORY[0x1E0C80C00];
  std::__fs::filesystem::__status(a1, 0);
  if (v51.__r_.__value_.__s.__data_[0] == 255 || v51.__r_.__value_.__s.__data_[0] == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(v42, a1->__pn_.__r_.__value_.__l.__data_, a1->__pn_.__r_.__value_.__l.__size_);
    else
      v42[0] = a1->__pn_;
    v25 = std::string::insert(v42, 0, "Version file not found at path: ");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v51);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
  }
  std::ifstream::basic_ifstream(&v51);
  __p = 0;
  v40 = 0;
  v41 = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v37, "^VERSION: (\\d+)\\.(\\d+)\\.(\\d+)");
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  memset(v28, 0, 41);
  v5 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  do
  {
    std::ios_base::getloc((const std::ios_base *)((char *)&v51 + *(_QWORD *)(v51.__r_.__value_.__r.__words[0] - 24)));
    v6 = std::locale::use_facet((const std::locale *)v42, v5);
    v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale((std::locale *)v42);
    v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v51, (uint64_t)&__p, v7);
    if ((*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) != 0)
    {
      v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if (SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&pn, a1->__pn_.__r_.__value_.__l.__data_, a1->__pn_.__r_.__value_.__l.__size_);
      else
        pn = a1->__pn_;
      v22 = std::string::insert(&pn, 0, "Version file has no parseable NCV key: ");
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v42[0].__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v42[0].__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v21, v42);
      v21->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
    }
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    memset(v42, 0, 41);
    v9 = HIBYTE(v41);
    if (v41 >= 0)
      p_p = (std::sub_match<const char *> *)&__p;
    else
      p_p = (std::sub_match<const char *> *)__p;
    if (v41 < 0)
      v9 = v40;
    std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v37, p_p, (std::sub_match<const char *> *)((char *)p_p + v9), (std::vector<std::csub_match> *)v42, 0);
    v11 = HIBYTE(v41);
    if (v41 >= 0)
      v12 = &__p;
    else
      v12 = __p;
    if (v41 < 0)
      v11 = v40;
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)v28, (uint64_t)v12, (uint64_t)v12 + v11, (uint64_t *)v42, 0);
    if (v42[0].__r_.__value_.__r.__words[0])
      operator delete(v42[0].__r_.__value_.__l.__data_);
    v13 = *(_QWORD *)&v28[0];
  }
  while (*((_QWORD *)&v28[0] + 1) - *(_QWORD *)&v28[0] != 96);
  sirinluinternalsnlp_intermediate::SNLPAssetVersion::SNLPAssetVersion((sirinluinternalsnlp_intermediate::SNLPAssetVersion *)a2);
  if (*(_BYTE *)(v13 + 40))
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(v42, *(char **)(v13 + 24), *(char **)(v13 + 32), *(_QWORD *)(v13 + 32) - *(_QWORD *)(v13 + 24));
  else
    memset(v42, 0, 24);
  v14 = std::stoi(v42, 0, 10);
  *(_BYTE *)(a2 + 28) |= 2u;
  *(_DWORD *)(a2 + 20) = v14;
  if (SHIBYTE(v42[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42[0].__r_.__value_.__l.__data_);
  if (*(_BYTE *)(v13 + 64))
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(v42, *(char **)(v13 + 48), *(char **)(v13 + 56), *(_QWORD *)(v13 + 56) - *(_QWORD *)(v13 + 48));
  else
    memset(v42, 0, 24);
  v15 = std::stoi(v42, 0, 10);
  *(_BYTE *)(a2 + 28) |= 1u;
  *(_DWORD *)(a2 + 16) = v15;
  if (SHIBYTE(v42[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42[0].__r_.__value_.__l.__data_);
  if (*(_BYTE *)(v13 + 88))
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(v42, *(char **)(v13 + 72), *(char **)(v13 + 80), *(_QWORD *)(v13 + 80) - *(_QWORD *)(v13 + 72));
  else
    memset(v42, 0, 24);
  v16 = std::stoi(v42, 0, 10);
  *(_BYTE *)(a2 + 28) |= 4u;
  *(_DWORD *)(a2 + 24) = v16;
  if (SHIBYTE(v42[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42[0].__r_.__value_.__l.__data_);
  if (v13)
    operator delete((void *)v13);
  v17 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  std::locale::~locale(&v37[0].__loc_);
  if (SHIBYTE(v41) < 0)
    operator delete(__p);
  v51.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F40];
  *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + *(_QWORD *)(v51.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1C3BB970C](&v51.__r_.__value_.__r.__words[2]);
  std::istream::~istream();
  return MEMORY[0x1C3BB9A90](v52);
}

void sub_1C2202FCC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::regex_traits<char> *std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](std::regex_traits<char> *a1, char *a2)
{
  std::regex_traits<char> *v4;
  size_t v5;

  v4 = std::regex_traits<char>::regex_traits(a1);
  v4[2].__ct_ = 0;
  *(_OWORD *)&v4[1].__col_ = 0u;
  *(_OWORD *)&v4[1].__loc_.__locale_ = 0u;
  v5 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>((uint64_t)a1, a2, &a2[v5]) != &a2[v5])
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_1C22031B0(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&v1[5]);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  int v9;
  int v10;
  const std::vector<std::csub_match>::value_type *v11;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::pointer begin;
  const std::vector<std::csub_match>::value_type *v14;
  std::sub_match<const char *> *first;
  std::sub_match<const char *> *second;
  uint64_t result;
  int v18;
  const char *v19;
  int v20;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0)
    this[4].__end_ = a2;
  LOBYTE(this[4].__begin_) = 1;
  if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (a2 == a3 || (v9 & 0x40) != 0)
      goto LABEL_18;
    v18 = v9 | 0x80;
    v19 = (char *)&a2->first + 1;
    if (v19 != (const char *)a3)
    {
      do
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        v20 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v19, (const char *)a3, (uint64_t *)this, v18, 0);
        begin = this->__begin_;
        end = this->__end_;
        if (v20)
          goto LABEL_8;
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), v11);
      }
      while (++v19 != (const char *)a3);
    }
    std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
    if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v18, 0))
    {
LABEL_18:
      result = 0;
      this->__end_ = this->__begin_;
      return result;
    }
  }
  begin = this->__begin_;
  end = this->__end_;
LABEL_8:
  if (end == begin)
    v14 = v11;
  else
    v14 = begin;
  first = (std::sub_match<const char *> *)v14->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)v14->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)v14->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;

  v10 = a4[6];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  v12 = *(char **)a1;
  v13 = *(char **)(a1 + 8);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*(_QWORD *)a1] >> 3);
  v15 = v11 - v14;
  if (v11 <= v14)
  {
    v22 = *(char **)(a1 + 8);
    if (v11 >= v14)
      goto LABEL_22;
    v22 = &v12[8 * ((a4[1] - *a4) >> 3)];
    goto LABEL_21;
  }
  v16 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v13) >> 3) >= v15)
  {
    v22 = &v13[24 * v15];
    v27 = 8 * ((a4[1] - *a4) >> 3) - 8 * ((uint64_t)&v13[-*(_QWORD *)a1] >> 3);
    do
    {
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      v13[16] = 0;
      v13 += 24;
      v27 -= 24;
    }
    while (v27);
LABEL_21:
    *(_QWORD *)(a1 + 8) = v22;
    goto LABEL_22;
  }
  if (v11 > 0xAAAAAAAAAAAAAAALL)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v12) >> 3);
  v18 = 2 * v17;
  if (2 * v17 <= v11)
    v18 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  if (v17 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v18;
  if (v19 > 0xAAAAAAAAAAAAAAALL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v20 = (char *)operator new(24 * v19);
  v21 = &v20[24 * v14];
  v22 = &v20[24 * v11];
  v23 = v21;
  v24 = 24 * v11 - 24 * v14;
  do
  {
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    v23[16] = 0;
    v23 += 24;
    v24 -= 24;
  }
  while (v24);
  v25 = *(char **)a1;
  if (v13 != *(char **)a1)
  {
    do
    {
      v26 = *(_OWORD *)(v13 - 24);
      *((_QWORD *)v21 - 1) = *((_QWORD *)v13 - 1);
      *(_OWORD *)(v21 - 24) = v26;
      v21 -= 24;
      v13 -= 24;
    }
    while (v13 != v25);
    v13 = *(char **)a1;
  }
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v22;
  *(_QWORD *)(a1 + 16) = &v20[24 * v19];
  if (v13)
  {
    operator delete(v13);
    v22 = *(char **)(a1 + 8);
  }
LABEL_22:
  v28 = *(char **)a1;
  if (v22 != *(char **)a1)
  {
    v29 = 0;
    v30 = 0;
    v32 = *a4;
    v31 = a4[1];
    do
    {
      v33 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v32) >> 3);
      v34 = (_QWORD *)(v32 + v29);
      if (v33 <= v30)
        v35 = a4 + 3;
      else
        v35 = v34;
      *(_QWORD *)&v28[v29] = a2 + *v35 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v30)
        v36 = a4 + 3;
      else
        v36 = (uint64_t *)(*a4 + v29);
      *(_QWORD *)(*(_QWORD *)a1 + v29 + 8) = a2 + v36[1] - v10;
      v32 = *a4;
      v31 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v31 - *a4) >> 3) <= v30)
        v37 = a4 + 3;
      else
        v37 = (uint64_t *)(*a4 + v29);
      v38 = *((_BYTE *)v37 + 16);
      v28 = *(char **)a1;
      v39 = *(_QWORD *)(a1 + 8);
      *(_BYTE *)(*(_QWORD *)a1 + v29 + 16) = v38;
      ++v30;
      v29 += 24;
    }
    while (v30 < 0xAAAAAAAAAAAAAAABLL * ((v39 - (uint64_t)v28) >> 3));
  }
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 40) = 0;
  v40 = a2 + a4[6] - v10;
  *(_QWORD *)(a1 + 48) = v40;
  *(_QWORD *)(a1 + 56) = a2 + a4[7] - v10;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a4 + 64);
  *(_QWORD *)(a1 + 72) = a2 + a4[9] - v10;
  *(_QWORD *)(a1 + 80) = a2 + a4[10] - v10;
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    *(_QWORD *)(a1 + 104) = v40;
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a4 + 96);
}

