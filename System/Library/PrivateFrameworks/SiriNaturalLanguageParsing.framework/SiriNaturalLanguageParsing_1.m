uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  int v7;
  const char *v9;
  const char *v10;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unsigned int v15;
  _DWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _OWORD *v20;
  const char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  __int128 *v29;
  __int128 *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  __int128 *v39;
  char *v40;
  char *v41;
  __int128 v42;
  char *v43;
  char *v44;
  int64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  __int128 v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  __int128 v60;
  char *v61;
  char *v62;
  char *v63;
  _QWORD *v64;
  _QWORD *v65;
  char *v66;
  uint64_t v68;
  void *v69;
  _BYTE *v70;
  unsigned int v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  const char *v95;
  BOOL v96;
  char v97;
  BOOL v98;
  uint64_t v99;
  char *v100;
  void **v101;
  _BYTE *v102;
  const char *v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  char *v109;
  char *v110;
  __int128 v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  char *v118;
  char *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  size_t v124;
  void *v125;
  char *v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  unint64_t v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t *v149;
  uint64_t *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  int64_t v154;
  char *v155;
  char *v156;
  char *v157;
  char v158;
  const char *v159;
  char v160;
  const char *v161;
  const char *i;
  const char *v163;
  __int16 v164;
  const char *v165;
  void *v166[2];
  __int128 v167;
  int64x2_t v168;
  _BYTE v169[56];
  void *__p[2];
  _QWORD v171[4];
  std::vector<std::csub_match>::value_type __x;

  v7 = a5;
  v9 = a3;
  v10 = a2;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  v165 = (const char *)(a3 - a2);
  v164 = a5;
  if (*(_DWORD *)(a1 + 28))
  {
    v166[0] = 0;
    v166[1] = 0;
    *(_QWORD *)&v167 = 0;
    v12 = *(_QWORD *)(a1 + 40);
    if (v12)
    {
      __x.first = a3;
      __x.second = a3;
      __x.matched = 0;
      *(_DWORD *)v169 = 0;
      memset(&v169[8], 0, 48);
      *(_OWORD *)__p = 0u;
      memset(v171, 0, 21);
      v166[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v166, (uint64_t)v169);
      if (__p[0])
        operator delete(__p[0]);
      if (*(_QWORD *)&v169[32])
        operator delete(*(void **)&v169[32]);
      v149 = a4;
      v13 = v166[1];
      *((_DWORD *)v166[1] - 24) = 0;
      *(v13 - 11) = v10;
      *(v13 - 10) = v10;
      v161 = v9;
      *(v13 - 9) = v9;
      std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 8), *(unsigned int *)(a1 + 28), &__x);
      std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v166[1] - 40), *(unsigned int *)(a1 + 32));
      v153 = 0;
      v155 = 0;
      v151 = 0;
      v152 = 0;
      v156 = 0;
      v148 = 0;
      v14 = 0;
      v158 = 0;
      v15 = 0;
      v16 = v166[1];
      *((_QWORD *)v166[1] - 2) = v12;
      *(v16 - 2) = v7;
      *((_BYTE *)v16 - 4) = a6;
      do
      {
        v17 = (++v15 & 0xFFF) != 0 || (int)(v15 >> 12) < (int)v165;
        if (!v17)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
        v19 = v16 - 4;
        v18 = *((_QWORD *)v16 - 2);
        v20 = v16 - 24;
        if (v18)
          (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v18 + 16))(v18, v16 - 24);
        switch(*(_DWORD *)v20)
        {
          case 0xFFFFFC18:
            v21 = (const char *)*((_QWORD *)v16 - 10);
            if ((v164 & 0x20) != 0 && v21 == v10 || (v164 & 0x1000) != 0 && v21 != v161)
              goto LABEL_21;
            v28 = v153;
            if ((v158 & ((uint64_t)v14 >= (uint64_t)&v21[-*((_QWORD *)v16 - 11)])) == 0)
            {
              v159 = &v21[-*((_QWORD *)v16 - 11)];
              v30 = (__int128 *)*((_QWORD *)v16 - 8);
              v29 = (__int128 *)*((_QWORD *)v16 - 7);
              v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v30) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v152 - (uint64_t)v155) >> 3) >= v31)
              {
                v37 = (uint64_t)v148;
                if (0xAAAAAAAAAAAAAAABLL * ((v153 - v155) >> 3) >= v31)
                {
                  if (v30 == v29)
                  {
                    v43 = v155;
                    v44 = v155;
                  }
                  else
                  {
                    v43 = v155;
                    v44 = v155;
                    do
                    {
                      *(_OWORD *)v44 = *v30;
                      v44[16] = *((_BYTE *)v30 + 16);
                      v44 += 24;
                      v30 = (__int128 *)((char *)v30 + 24);
                    }
                    while (v30 != v29);
                  }
                  v45 = v44 - v43;
                  v28 = v43;
                }
                else
                {
                  v39 = (__int128 *)((char *)v30 + 8 * ((v153 - v155) >> 3));
                  if (v153 != v155)
                  {
                    v40 = v155;
                    do
                    {
                      *(_OWORD *)v40 = *v30;
                      v40[16] = *((_BYTE *)v30 + 16);
                      v30 = (__int128 *)((char *)v30 + 24);
                      v40 += 24;
                    }
                    while (v30 != v39);
                  }
                  v41 = v153;
                  while (v39 != v29)
                  {
                    v42 = *v39;
                    *((_QWORD *)v41 + 2) = *((_QWORD *)v39 + 2);
                    *(_OWORD *)v41 = v42;
                    v41 += 24;
                    v39 = (__int128 *)((char *)v39 + 24);
                  }
                  v45 = v41 - v153;
                }
              }
              else
              {
                if (v155)
                {
                  operator delete(v155);
                  v152 = 0;
                }
                if (v31 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_217;
                v32 = 0x5555555555555556 * (v152 >> 3);
                if (v32 <= v31)
                  v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v30) >> 3);
                v33 = 0xAAAAAAAAAAAAAAABLL * (v152 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v32;
                if (v33 > 0xAAAAAAAAAAAAAAALL)
LABEL_217:
                  std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
                v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v33);
                v28 = v34;
                v36 = v34;
                if (v30 == v29)
                {
                  v37 = (uint64_t)v148;
                }
                else
                {
                  v37 = (uint64_t)v148;
                  do
                  {
                    v38 = *v30;
                    *((_QWORD *)v36 + 2) = *((_QWORD *)v30 + 2);
                    *(_OWORD *)v36 = v38;
                    v36 += 24;
                    v30 = (__int128 *)((char *)v30 + 24);
                  }
                  while (v30 != v29);
                }
                v152 = (uint64_t)&v34[24 * v35];
                v45 = v36 - v34;
                v155 = v34;
              }
              v47 = (char *)*((_QWORD *)v16 - 5);
              v46 = (char *)*((_QWORD *)v16 - 4);
              v48 = (v46 - v47) >> 4;
              if (v48 <= (v37 - (uint64_t)v156) >> 4)
              {
                v56 = (v151 - v156) >> 4;
                if (v56 >= v48)
                {
                  if (v47 == v46)
                  {
                    v63 = v156;
                    v62 = v156;
                  }
                  else
                  {
                    v62 = v156;
                    do
                    {
                      *(_QWORD *)v62 = *(_QWORD *)v47;
                      *((_QWORD *)v62 + 1) = *((_QWORD *)v47 + 1);
                      v62 += 16;
                      v47 += 16;
                    }
                    while (v47 != v46);
                    v63 = v156;
                  }
                  v61 = (char *)(v62 - v63);
                  v52 = v63;
                  v14 = v159;
                }
                else
                {
                  v57 = &v47[16 * v56];
                  if (v151 != v156)
                  {
                    v58 = v156;
                    do
                    {
                      *(_QWORD *)v58 = *(_QWORD *)v47;
                      *((_QWORD *)v58 + 1) = *((_QWORD *)v47 + 1);
                      v47 += 16;
                      v58 += 16;
                    }
                    while (v47 != v57);
                  }
                  if (v57 == v46)
                  {
                    v52 = v151;
                    v59 = v151;
                    v14 = v159;
                  }
                  else
                  {
                    v52 = v151;
                    v59 = v151;
                    v14 = v159;
                    do
                    {
                      v60 = *(_OWORD *)v57;
                      v57 += 16;
                      *(_OWORD *)v59 = v60;
                      v59 += 16;
                    }
                    while (v57 != v46);
                  }
                  v61 = (char *)(v59 - v52);
                }
              }
              else
              {
                v154 = v45;
                v49 = v28;
                if (v156)
                {
                  operator delete(v156);
                  v37 = 0;
                }
                if (v46 - v47 < 0)
                  goto LABEL_216;
                v50 = v37 >> 3;
                if (v37 >> 3 <= v48)
                  v50 = (v46 - v47) >> 4;
                v51 = (unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v50;
                if (v51 >> 60)
LABEL_216:
                  std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
                v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v51);
                v54 = v52;
                while (v47 != v46)
                {
                  v55 = *(_OWORD *)v47;
                  v47 += 16;
                  *(_OWORD *)v54 = v55;
                  v54 += 16;
                }
                v148 = &v52[16 * v53];
                v61 = (char *)(v54 - v52);
                v156 = v52;
                v28 = v49;
                v14 = v159;
                v45 = v154;
              }
              v153 = &v28[v45];
              v151 = &v61[(_QWORD)v52];
            }
            v64 = v166[1];
            if (v14 == v165)
            {
              v65 = v166[0];
              while (v64 != v65)
              {
                v64 -= 12;
                std::allocator<std::__state<char>>::destroy[abi:ne180100](v64);
              }
              v166[1] = v65;
              v158 = 1;
              v14 = v165;
            }
            else
            {
              v66 = (char *)v166[1] - 96;
              std::allocator<std::__state<char>>::destroy[abi:ne180100]((_QWORD *)v166[1] - 12);
              v166[1] = v66;
              v158 = 1;
            }
            break;
          case 0xFFFFFC1D:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            break;
          case 0xFFFFFC1F:
LABEL_21:
            v22 = (char *)v166[1] - 96;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((_QWORD *)v166[1] - 12);
            v166[1] = v22;
            break;
          case 0xFFFFFC20:
            v23 = *((_OWORD *)v16 - 5);
            *(_OWORD *)v169 = *v20;
            *(_OWORD *)&v169[16] = v23;
            memset(&v169[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v169[32], *((__int128 **)v16 - 8), *((__int128 **)v16 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v16 - 7) - *((_QWORD *)v16 - 8)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v171[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v16 - 5), *((__int128 **)v16 - 4), (uint64_t)(*((_QWORD *)v16 - 4) - *((_QWORD *)v16 - 5)) >> 4);
            v24 = *v19;
            *(_QWORD *)((char *)&v171[1] + 5) = *(_QWORD *)((char *)v16 - 11);
            v171[1] = v24;
            (*(void (**)(_QWORD, uint64_t, _DWORD *))(*(_QWORD *)*v19 + 24))(*v19, 1, v16 - 24);
            (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v171[1] + 24))(v171[1], 0, v169);
            v25 = (char *)v166[1];
            if (v166[1] >= (void *)v167)
            {
              v166[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v166, (uint64_t)v169);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              v26 = *(_OWORD *)&v169[16];
              *(_OWORD *)v166[1] = *(_OWORD *)v169;
              *((_OWORD *)v25 + 1) = v26;
              *((_QWORD *)v25 + 4) = 0;
              *((_QWORD *)v25 + 5) = 0;
              *((_QWORD *)v25 + 6) = 0;
              *((_QWORD *)v25 + 7) = 0;
              *((_OWORD *)v25 + 2) = *(_OWORD *)&v169[32];
              *((_QWORD *)v25 + 6) = *(_QWORD *)&v169[48];
              memset(&v169[32], 0, 24);
              *((_QWORD *)v25 + 8) = 0;
              *((_QWORD *)v25 + 9) = 0;
              *(_OWORD *)(v25 + 56) = *(_OWORD *)__p;
              *((_QWORD *)v25 + 9) = v171[0];
              __p[0] = 0;
              __p[1] = 0;
              v171[0] = 0;
              v27 = v171[1];
              *(_QWORD *)(v25 + 85) = *(_QWORD *)((char *)&v171[1] + 5);
              *((_QWORD *)v25 + 10) = v27;
              v166[1] = v25 + 96;
            }
            if (*(_QWORD *)&v169[32])
            {
              *(_QWORD *)&v169[40] = *(_QWORD *)&v169[32];
              operator delete(*(void **)&v169[32]);
            }
            break;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
        v16 = v166[1];
      }
      while (v166[0] != v166[1]);
      if ((v158 & 1) != 0)
      {
        v68 = *v149;
        *(_QWORD *)v68 = v10;
        *(_QWORD *)(v68 + 8) = &v14[(_QWORD)v10];
        *(_BYTE *)(v68 + 16) = 1;
        v69 = v155;
        if (v153 != v155)
        {
          v70 = v155 + 16;
          v71 = 1;
          do
          {
            v72 = v68 + 24 * v71;
            *(_OWORD *)v72 = *((_OWORD *)v70 - 1);
            v73 = *v70;
            v70 += 24;
            *(_BYTE *)(v72 + 16) = v73;
            v17 = 0xAAAAAAAAAAAAAAABLL * ((v153 - v155) >> 3) > v71++;
          }
          while (v17);
        }
        v74 = 1;
      }
      else
      {
        v74 = 0;
        v69 = v155;
      }
      if (v156)
        operator delete(v156);
      if (v69)
        operator delete(v69);
    }
    else
    {
      v74 = 0;
    }
    *(_QWORD *)v169 = v166;
    std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v169);
  }
  else
  {
    v167 = 0u;
    v168 = 0u;
    *(_OWORD *)v166 = 0u;
    v74 = *(_QWORD *)(a1 + 40);
    if (v74)
    {
      *(_DWORD *)v169 = 0;
      memset(&v169[8], 0, 48);
      *(_OWORD *)__p = 0uLL;
      memset(v171, 0, 21);
      std::deque<std::__state<char>>::push_back(v166, (uint64_t)v169);
      if (__p[0])
        operator delete(__p[0]);
      if (*(_QWORD *)&v169[32])
        operator delete(*(void **)&v169[32]);
      v150 = a4;
      v75 = v166[1];
      v76 = v168.i64[1] + v168.i64[0] - 1;
      v77 = v76 / 0x2A;
      v78 = *((_QWORD *)v166[1] + v76 / 0x2A);
      v79 = 3 * (v76 % 0x2A);
      v80 = v78 + 32 * v79;
      *(_DWORD *)v80 = 0;
      *(_QWORD *)(v80 + 8) = v10;
      *(_QWORD *)(v75[v77] + 32 * v79 + 16) = v10;
      *(_QWORD *)(v75[v77] + 32 * v79 + 24) = v9;
      std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v75[v77] + 32 * v79 + 56), *(unsigned int *)(a1 + 32));
      v160 = 0;
      v81 = 0;
      v82 = v168.i64[1];
      v83 = v166[1];
      v84 = v168.i64[1] + v168.i64[0] - 1;
      v85 = v84 / 0x2A;
      v86 = 3 * (v84 % 0x2A);
      *(_QWORD *)(*((_QWORD *)v166[1] + v85) + 32 * v86 + 80) = v74;
      v87 = v83[v85] + 32 * v86;
      *(_DWORD *)(v87 + 88) = v7;
      *(_BYTE *)(v87 + 92) = a6;
      v157 = 0;
      while (2)
      {
        if ((++v81 & 0xFFF) == 0 && (int)(v81 >> 12) >= (int)v165)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
        v89 = v82 + v168.i64[0] - 1;
        v90 = *((_QWORD *)v166[1] + v89 / 0x2A);
        v91 = v89 % 0x2A;
        v92 = v90 + 96 * (v89 % 0x2A);
        v94 = (_QWORD *)(v92 + 80);
        v93 = *(_QWORD *)(v92 + 80);
        if (v93)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v93 + 16))(v93, v90 + 96 * v91);
        switch(*(_DWORD *)v92)
        {
          case 0xFFFFFC18:
            v95 = *(const char **)(v90 + 96 * v91 + 16);
            v96 = (v7 & 0x1000) == 0 || v95 == v9;
            v97 = v96;
            v98 = v95 != v10 || (v7 & 0x20) == 0;
            if (!v98 || (v97 & 1) == 0)
              goto LABEL_200;
            v99 = (uint64_t)&v95[-*(_QWORD *)(v90 + 96 * v91 + 8)];
            v100 = v157;
            if ((v160 & ((uint64_t)v157 >= v99)) == 0)
              v100 = (char *)v99;
            if (v100 != v165)
            {
              v157 = v100;
              std::deque<std::__state<char>>::pop_back(v166);
              v160 = 1;
              goto LABEL_201;
            }
            v101 = (void **)v166[1];
            v102 = (_BYTE *)v167;
            if ((void *)v167 == v166[1])
            {
              v102 = v166[1];
            }
            else
            {
              v103 = v10;
              v104 = (char *)v166[1] + 8 * (v168.i64[0] / 0x2AuLL);
              v105 = (_QWORD *)(*v104 + 96 * (v168.i64[0] % 0x2AuLL));
              v106 = *((_QWORD *)v166[1] + (v168.i64[1] + v168.i64[0]) / 0x2AuLL)
                   + 96 * ((v168.i64[1] + v168.i64[0]) % 0x2AuLL);
              if (v105 != (_QWORD *)v106)
              {
                do
                {
                  std::allocator<std::__state<char>>::destroy[abi:ne180100](v105);
                  v105 += 12;
                  if ((_QWORD *)((char *)v105 - *v104) == (_QWORD *)4032)
                  {
                    v107 = (_QWORD *)v104[1];
                    ++v104;
                    v105 = v107;
                  }
                }
                while (v105 != (_QWORD *)v106);
                v101 = (void **)v166[1];
                v102 = (_BYTE *)v167;
              }
              v10 = v103;
            }
            v168.i64[1] = 0;
            v138 = v102 - (_BYTE *)v101;
            if (v138 >= 0x11)
            {
              do
              {
                operator delete(*v101);
                v101 = (void **)((char *)v166[1] + 8);
                v166[1] = v101;
                v138 = v167 - (_QWORD)v101;
              }
              while ((_QWORD)v167 - (_QWORD)v101 > 0x10uLL);
            }
            if (v138 >> 3 == 1)
            {
              v139 = 21;
            }
            else
            {
              if (v138 >> 3 != 2)
                goto LABEL_188;
              v139 = 42;
            }
            v168.i64[0] = v139;
LABEL_188:
            v160 = 1;
            v157 = (char *)v165;
LABEL_201:
            v82 = v168.i64[1];
            if (v168.i64[1])
              continue;
            if ((v160 & 1) != 0)
            {
              v147 = *v150;
              *(_QWORD *)v147 = v10;
              *(_QWORD *)(v147 + 8) = &v157[(_QWORD)v10];
              v74 = 1;
              *(_BYTE *)(v147 + 16) = 1;
            }
            else
            {
              v74 = 0;
            }
            break;
          case 0xFFFFFC19:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_201;
          case 0xFFFFFC1D:
            v108 = v168.i64[0];
            v109 = (char *)v166[1];
            v110 = (char *)v167;
            if (!v168.i64[0])
            {
              v113 = (uint64_t)(v167 - (unint64_t)v166[1]) >> 3;
              v114 = 42 * v113 - 1;
              if ((void *)v167 == v166[1])
                v114 = 0;
              if ((unint64_t)(v114 - v168.i64[1]) < 0x2A)
              {
                if (v113 >= (uint64_t)(*((_QWORD *)&v167 + 1) - (unint64_t)v166[0]) >> 3)
                {
                  if (*((void **)&v167 + 1) == v166[0])
                    v115 = 1;
                  else
                    v115 = (uint64_t)(*((_QWORD *)&v167 + 1) - (unint64_t)v166[0]) >> 2;
                  *(_QWORD *)&v169[32] = (char *)&v167 + 8;
                  *(_QWORD *)v169 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v115);
                  *(_QWORD *)&v169[8] = *(_QWORD *)v169;
                  *(_QWORD *)&v169[16] = *(_QWORD *)v169;
                  *(_QWORD *)&v169[24] = *(_QWORD *)v169 + 8 * v116;
                  v163 = v10;
                  __x.first = (const char *)operator new(0xFC0uLL);
                  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v169, &__x);
                  v117 = (uint64_t *)v166[1];
                  v118 = *(char **)&v169[16];
                  for (i = v9; v117 != (uint64_t *)v167; *(_QWORD *)&v169[16] += 8)
                  {
                    if (v118 == *(char **)&v169[24])
                    {
                      v119 = *(char **)&v169[8];
                      v120 = *(void **)v169;
                      if (*(_QWORD *)&v169[8] <= *(_QWORD *)v169)
                      {
                        if (v118 == *(char **)v169)
                          v127 = 1;
                        else
                          v127 = (uint64_t)&v118[-*(_QWORD *)v169] >> 2;
                        v128 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v127);
                        v130 = &v128[8 * (v127 >> 2)];
                        v131 = v118 - v119;
                        v96 = v118 == v119;
                        v118 = v130;
                        v9 = i;
                        if (!v96)
                        {
                          v118 = &v130[v131 & 0xFFFFFFFFFFFFFFF8];
                          v132 = 8 * (v131 >> 3);
                          v133 = v130;
                          do
                          {
                            v134 = *(_QWORD *)v119;
                            v119 += 8;
                            *(_QWORD *)v133 = v134;
                            v133 += 8;
                            v132 -= 8;
                          }
                          while (v132);
                        }
                        *(_QWORD *)v169 = v128;
                        *(_QWORD *)&v169[8] = v130;
                        *(_QWORD *)&v169[16] = v118;
                        *(_QWORD *)&v169[24] = &v128[8 * v129];
                        if (v120)
                          operator delete(v120);
                      }
                      else
                      {
                        v121 = (uint64_t)(*(_QWORD *)&v169[8] - *(_QWORD *)v169) >> 3;
                        if (v121 >= -1)
                          v122 = v121 + 1;
                        else
                          v122 = v121 + 2;
                        v123 = *(_QWORD *)&v169[8] - 8 * (v122 >> 1);
                        v124 = (size_t)&v118[-*(_QWORD *)&v169[8]];
                        if (v118 != *(char **)&v169[8])
                        {
                          v125 = (void *)(*(_QWORD *)&v169[8] - 8 * (v122 >> 1));
                          memmove(v125, *(const void **)&v169[8], v124);
                          v123 = (uint64_t)v125;
                          v118 = v119;
                        }
                        v126 = &v118[-8 * (v122 >> 1)];
                        v118 = (char *)(v123 + v124);
                        *(_QWORD *)&v169[8] = v126;
                        *(_QWORD *)&v169[16] = v123 + v124;
                        v9 = i;
                      }
                    }
                    v135 = *v117++;
                    *(_QWORD *)v118 = v135;
                    v118 = (char *)(*(_QWORD *)&v169[16] + 8);
                  }
                  v136 = v166[0];
                  *(_OWORD *)v166 = *(_OWORD *)v169;
                  *(_QWORD *)&v167 = v118;
                  *((_QWORD *)&v167 + 1) = *(_QWORD *)&v169[24];
                  v137 = 21;
                  if (&v118[-*(_QWORD *)&v169[8]] != (char *)8)
                    v137 = v168.i64[0] + 42;
                  v168.i64[0] = v137;
                  v10 = v163;
                  if (v136)
                    operator delete(v136);
                  LOWORD(v7) = v164;
                }
                else
                {
                  if (v166[1] == v166[0])
                  {
                    *(_QWORD *)v169 = operator new(0xFC0uLL);
                    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v166, v169);
                    *(_QWORD *)v169 = *(_QWORD *)(v167 - 8);
                    *(_QWORD *)&v167 = v167 - 8;
                  }
                  else
                  {
                    *(_QWORD *)v169 = operator new(0xFC0uLL);
                  }
                  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v166, v169);
                  v140 = 21;
                  if ((_QWORD)v167 - (unint64_t)v166[1] != 8)
                    v140 = v168.i64[0] + 42;
                  v168.i64[0] = v140;
                }
              }
              else
              {
                v168.i64[0] = 42;
                *(_QWORD *)v169 = *(_QWORD *)(v167 - 8);
                *(_QWORD *)&v167 = v167 - 8;
                std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v166, v169);
              }
              v108 = v168.i64[0];
              v109 = (char *)v166[1];
              v110 = (char *)v167;
            }
            v141 = &v109[8 * (v108 / 0x2A)];
            v142 = *(_QWORD *)v141 + 96 * (v108 % 0x2A);
            if (v110 == v109)
              v143 = 0;
            else
              v143 = v142;
            if (v143 == *(_QWORD *)v141)
              v143 = *((_QWORD *)v141 - 1) + 4032;
            v144 = *(_OWORD *)(v92 + 16);
            *(_OWORD *)(v143 - 96) = *(_OWORD *)v92;
            *(_OWORD *)(v143 - 80) = v144;
            v145 = v90 + 96 * v91;
            *(_QWORD *)(v143 - 56) = 0;
            *(_QWORD *)(v143 - 48) = 0;
            *(_QWORD *)(v143 - 64) = 0;
            *(_OWORD *)(v143 - 64) = *(_OWORD *)(v145 + 32);
            *(_QWORD *)(v143 - 48) = *(_QWORD *)(v145 + 48);
            *(_QWORD *)(v145 + 32) = 0;
            *(_QWORD *)(v145 + 40) = 0;
            *(_QWORD *)(v145 + 48) = 0;
            *(_QWORD *)(v143 - 40) = 0;
            *(_QWORD *)(v143 - 32) = 0;
            *(_QWORD *)(v143 - 24) = 0;
            *(_OWORD *)(v143 - 40) = *(_OWORD *)(v145 + 56);
            *(_QWORD *)(v143 - 24) = *(_QWORD *)(v145 + 72);
            *(_QWORD *)(v145 + 56) = 0;
            *(_QWORD *)(v145 + 64) = 0;
            *(_QWORD *)(v145 + 72) = 0;
            v146 = *v94;
            *(_QWORD *)(v143 - 11) = *(_QWORD *)(v92 + 85);
            *(_QWORD *)(v143 - 16) = v146;
            v168 = vaddq_s64(v168, (int64x2_t)xmmword_1C230B4D0);
            goto LABEL_200;
          case 0xFFFFFC1F:
LABEL_200:
            std::deque<std::__state<char>>::pop_back(v166);
            goto LABEL_201;
          case 0xFFFFFC20:
            v111 = *(_OWORD *)(v92 + 16);
            *(_OWORD *)v169 = *(_OWORD *)v92;
            *(_OWORD *)&v169[16] = v111;
            memset(&v169[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v169[32], *(__int128 **)(v90 + 96 * v91 + 32), *(__int128 **)(v90 + 96 * v91 + 40), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(v90 + 96 * v91 + 40) - *(_QWORD *)(v90 + 96 * v91 + 32)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v171[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(__int128 **)(v90 + 96 * v91 + 56), *(__int128 **)(v90 + 96 * v91 + 64), (uint64_t)(*(_QWORD *)(v90 + 96 * v91 + 64) - *(_QWORD *)(v90 + 96 * v91 + 56)) >> 4);
            v112 = *v94;
            *(_QWORD *)((char *)&v171[1] + 5) = *(_QWORD *)(v92 + 85);
            v171[1] = v112;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v94 + 24))(*v94, 1, v92);
            (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v171[1] + 24))(v171[1], 0, v169);
            std::deque<std::__state<char>>::push_back(v166, (uint64_t)v169);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            if (*(_QWORD *)&v169[32])
            {
              *(_QWORD *)&v169[40] = *(_QWORD *)&v169[32];
              operator delete(*(void **)&v169[32]);
            }
            goto LABEL_201;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
        break;
      }
    }
    std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)v166);
  }
  return v74;
}

void sub_1C2204640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  void *v37;

  operator delete(v37);
  if (__p)
    operator delete(__p);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  std::vector<std::csub_match>::pointer v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::pair<const char *, const char *> v14;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::size_type v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    end = this->__end_;
    v16 = end - begin;
    if (v16 >= __n)
      v17 = __n;
    else
      v17 = end - begin;
    if (v17)
    {
      v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      v19 = &end[__n - v16];
      v20 = 24 * __n - 24 * v16;
      do
      {
        v21 = __u->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](this, v10);
    v11 = this->__end_;
    v12 = &v11[__n];
    v13 = 24 * __n;
    do
    {
      v14 = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v11->matched = *(_QWORD *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

char *std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v12;
  signed int v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  const char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  uint64_t *v36;
  const char *v37;
  _BYTE v39[56];
  void *__p[2];
  _QWORD v41[4];
  std::vector<std::csub_match>::value_type __x;
  char *v43;
  char *v44;
  unint64_t v45;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)v39 = 0;
    memset(&v39[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v41, 0, 21);
    v44 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v43, (uint64_t)v39);
    if (__p[0])
      operator delete(__p[0]);
    if (*(_QWORD *)&v39[32])
      operator delete(*(void **)&v39[32]);
    v36 = a4;
    v12 = v44;
    *((_DWORD *)v44 - 24) = 0;
    *((_QWORD *)v12 - 11) = a2;
    *((_QWORD *)v12 - 10) = a2;
    *((_QWORD *)v12 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v12 - 64), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v44 - 40), *(unsigned int *)(a1 + 32));
    v37 = a3;
    v13 = (_DWORD)a3 - (_DWORD)a2;
    v14 = v44;
    *((_QWORD *)v44 - 2) = v6;
    *((_DWORD *)v14 - 2) = a5;
    *(v14 - 4) = a6;
    v15 = 1;
    while (2)
    {
      if ((v15 & 0xFFF) == 0 && (int)(v15 >> 12) >= v13)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v17 = v14 - 16;
      v16 = *((_QWORD *)v14 - 2);
      v18 = v14 - 96;
      if (v16)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v16 + 16))(v16, v14 - 96);
      switch(*(_DWORD *)v18)
      {
        case 0xFFFFFC18:
          v19 = (const char *)*((_QWORD *)v14 - 10);
          if ((a5 & 0x20) != 0 && v19 == a2 || (a5 & 0x1000) != 0 && v19 != v37)
            goto LABEL_16;
          v27 = *v36;
          *(_QWORD *)v27 = a2;
          *(_QWORD *)(v27 + 8) = v19;
          *(_BYTE *)(v27 + 16) = 1;
          v28 = *((_QWORD *)v14 - 8);
          v29 = *((_QWORD *)v14 - 7) - v28;
          if (v29)
          {
            v30 = 0xAAAAAAAAAAAAAAABLL * (v29 >> 3);
            v31 = (_BYTE *)(v28 + 16);
            v32 = 1;
            do
            {
              v33 = v27 + 24 * v32;
              *(_OWORD *)v33 = *((_OWORD *)v31 - 1);
              v34 = *v31;
              v31 += 24;
              *(_BYTE *)(v33 + 16) = v34;
            }
            while (v30 > v32++);
          }
          v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          v20 = v44 - 96;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((_QWORD *)v44 - 12);
          v44 = v20;
          goto LABEL_23;
        case 0xFFFFFC20:
          v21 = *((_OWORD *)v14 - 5);
          *(_OWORD *)v39 = *(_OWORD *)v18;
          *(_OWORD *)&v39[16] = v21;
          memset(&v39[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v39[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v41[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v14 - 5), *((__int128 **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
          v22 = *(_QWORD *)v17;
          *(_QWORD *)((char *)&v41[1] + 5) = *(_QWORD *)(v14 - 11);
          v41[1] = v22;
          (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v17 + 24))(*(_QWORD *)v17, 1, v14 - 96);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v41[1] + 24))(v41[1], 0, v39);
          v23 = v44;
          if ((unint64_t)v44 >= v45)
          {
            v44 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v43, (uint64_t)v39);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v24 = *(_OWORD *)&v39[16];
            *(_OWORD *)v44 = *(_OWORD *)v39;
            *((_OWORD *)v23 + 1) = v24;
            *((_QWORD *)v23 + 4) = 0;
            *((_QWORD *)v23 + 5) = 0;
            *((_QWORD *)v23 + 6) = 0;
            *((_QWORD *)v23 + 7) = 0;
            *((_OWORD *)v23 + 2) = *(_OWORD *)&v39[32];
            *((_QWORD *)v23 + 6) = *(_QWORD *)&v39[48];
            memset(&v39[32], 0, 24);
            *((_QWORD *)v23 + 8) = 0;
            *((_QWORD *)v23 + 9) = 0;
            *(_OWORD *)(v23 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v23 + 9) = v41[0];
            __p[0] = 0;
            __p[1] = 0;
            v41[0] = 0;
            v25 = v41[1];
            *(_QWORD *)(v23 + 85) = *(_QWORD *)((char *)&v41[1] + 5);
            *((_QWORD *)v23 + 10) = v25;
            v44 = v23 + 96;
          }
          if (*(_QWORD *)&v39[32])
          {
            *(_QWORD *)&v39[40] = *(_QWORD *)&v39[32];
            operator delete(*(void **)&v39[32]);
          }
LABEL_23:
          v14 = v44;
          ++v15;
          if (v43 != v44)
            continue;
          v6 = 0;
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  *(_QWORD *)v39 = &v43;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
  return v6;
}

void sub_1C2204CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  std::__state<char>::~__state(&a13);
  a13 = v18 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v21 -= 96;
      std::allocator<std::__state<char>>::destroy[abi:ne180100](v21);
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::pointer begin;
  unint64_t v7;
  unint64_t v8;
  std::sub_match<const char *> *value;
  unint64_t v11;
  std::vector<std::csub_match>::size_type v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  std::sub_match<const char *> *v16;
  std::sub_match<const char *> *v17;
  std::pair<const char *, const char *> *v18;
  std::vector<std::csub_match>::size_type v19;
  std::pair<const char *, const char *> v20;
  std::sub_match<const char *> *v21;
  std::sub_match<const char *> *v22;
  std::vector<std::csub_match>::pointer v23;
  std::pair<const char *, const char *> v24;
  std::sub_match<const char *> *v25;
  std::vector<std::csub_match>::size_type v26;
  std::pair<const char *, const char *> v27;

  begin = this->__begin_;
  end = this->__end_;
  v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  v8 = __sz - v7;
  if (__sz <= v7)
  {
    if (__sz < v7)
      this->__end_ = &begin[__sz];
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v8)
    {
      v25 = &end[v8];
      v26 = 24 * __sz - 8 * (((char *)end - (char *)this->__begin_) >> 3);
      do
      {
        v27 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__x->matched;
        end->std::pair<const char *, const char *> = v27;
        ++end;
        v26 -= 24;
      }
      while (v26);
      this->__end_ = v25;
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      v12 = 2 * v11;
      if (2 * v11 <= __sz)
        v12 = __sz;
      if (v11 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v13);
      v16 = (std::sub_match<const char *> *)&v14[24 * v7];
      v17 = (std::sub_match<const char *> *)&v14[24 * __sz];
      v18 = v16;
      v19 = 24 * __sz - 24 * v7;
      do
      {
        v20 = __x->std::pair<const char *, const char *>;
        v18[1].first = *(const char **)&__x->matched;
        *v18 = v20;
        v18 = (std::pair<const char *, const char *> *)((char *)v18 + 24);
        v19 -= 24;
      }
      while (v19);
      v21 = (std::sub_match<const char *> *)&v14[24 * v15];
      v23 = this->__begin_;
      v22 = this->__end_;
      if (v22 != this->__begin_)
      {
        do
        {
          v24 = v22[-1].std::pair<const char *, const char *>;
          *(_QWORD *)&v16[-1].matched = *(_QWORD *)&v22[-1].matched;
          v16[-1].std::pair<const char *, const char *> = v24;
          --v16;
          --v22;
        }
        while (v22 != v23);
        v22 = this->__begin_;
      }
      this->__begin_ = v16;
      this->__end_ = v17;
      this->__end_cap_.__value_ = v21;
      if (v22)
        operator delete(v22);
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;
  std::vector<std::pair<unsigned long, const char *>>::pointer end;
  std::vector<std::pair<unsigned long, const char *>>::size_type v5;
  std::vector<std::pair<unsigned long, const char *>>::size_type v6;
  std::pair<unsigned long, const char *> *value;
  uint64_t v8;
  std::vector<std::pair<unsigned long, const char *>>::size_type v9;
  unint64_t v10;
  char *v11;
  std::pair<unsigned long, const char *> *v12;
  uint64_t v13;
  std::pair<unsigned long, const char *> *v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;
  std::vector<std::pair<unsigned long, const char *>>::pointer v17;
  std::pair<unsigned long, const char *> *v18;

  begin = this->__begin_;
  end = this->__end_;
  v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5)
      return;
    v18 = &begin[__sz];
    goto LABEL_17;
  }
  v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 16 * v6);
    v18 = &end[v6];
LABEL_17:
    this->__end_ = v18;
    return;
  }
  if (__sz >> 60)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  v8 = (char *)value - (char *)begin;
  v9 = v8 >> 3;
  if (v8 >> 3 <= __sz)
    v9 = __sz;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v10 = 0xFFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v10);
  v12 = (std::pair<unsigned long, const char *> *)&v11[16 * v5];
  v14 = (std::pair<unsigned long, const char *> *)&v11[16 * v13];
  bzero(v12, 16 * v6);
  v15 = &v12[v6];
  v17 = this->__begin_;
  v16 = this->__end_;
  if (v16 != this->__begin_)
  {
    do
    {
      v12[-1] = v16[-1];
      --v12;
      --v16;
    }
    while (v16 != v17);
    v16 = this->__begin_;
  }
  this->__begin_ = v12;
  this->__end_ = v15;
  this->__end_cap_.__value_ = v14;
  if (v16)
    operator delete(v16);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BB95EC](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C22051B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::allocator<std::__state<char>>::destroy[abi:ne180100](_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1C22052AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1C220531C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BB95EC](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C2205370(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:ne180100](v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a1);
}

__n128 std::deque<std::__state<char>>::push_back(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  BOOL v35;
  size_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  int64_t v71;
  char *v72;
  unint64_t v73;
  __int128 v74;
  __n128 result;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void *v84;
  __int128 v85;
  __int128 v86;
  _QWORD *v87;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 42 * ((v4 - v5) >> 3) - 1;
  v7 = a1[4];
  v8 = a1[5] + v7;
  if (v6 == v8)
  {
    if (v7 < 0x2A)
    {
      v22 = (v4 - v5) >> 3;
      v23 = (char *)a1[3];
      v24 = (uint64_t)&v23[-*a1];
      if (v22 >= v24 >> 3)
      {
        if (v23 == (char *)*a1)
          v25 = 1;
        else
          v25 = v24 >> 2;
        v87 = a1 + 3;
        *(_QWORD *)&v85 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v25);
        *((_QWORD *)&v85 + 1) = v85 + 8 * v22;
        *(_QWORD *)&v86 = *((_QWORD *)&v85 + 1);
        *((_QWORD *)&v86 + 1) = v85 + 8 * v26;
        v84 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(&v85, &v84);
        v27 = a1[2];
        v29 = (char *)*((_QWORD *)&v85 + 1);
        v28 = (char *)v85;
        v31 = (char *)*((_QWORD *)&v86 + 1);
        v30 = (char *)v86;
        while (v27 != a1[1])
        {
          if (v29 == v28)
          {
            if (v30 >= v31)
            {
              if (v31 == v28)
                v37 = 1;
              else
                v37 = (v31 - v28) >> 2;
              v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v37);
              v40 = v38;
              v29 = &v38[(2 * v37 + 6) & 0xFFFFFFFFFFFFFFF8];
              v41 = v30 - v28;
              v35 = v30 == v28;
              v30 = v29;
              if (!v35)
              {
                v30 = &v29[v41 & 0xFFFFFFFFFFFFFFF8];
                v42 = 8 * (v41 >> 3);
                v43 = v29;
                v44 = v28;
                do
                {
                  v45 = *(_QWORD *)v44;
                  v44 += 8;
                  *(_QWORD *)v43 = v45;
                  v43 += 8;
                  v42 -= 8;
                }
                while (v42);
              }
              v31 = &v38[8 * v39];
              if (v28)
                operator delete(v28);
              v28 = v40;
            }
            else
            {
              v32 = (v31 - v30) >> 3;
              if (v32 >= -1)
                v33 = v32 + 1;
              else
                v33 = v32 + 2;
              v34 = &v30[8 * (v33 >> 1)];
              v29 = &v34[-(v30 - v28)];
              v36 = v30 - v28;
              v35 = v30 == v28;
              v30 = v34;
              if (!v35)
                memmove(v29, v28, v36);
            }
          }
          v46 = *(_QWORD *)(v27 - 8);
          v27 -= 8;
          *((_QWORD *)v29 - 1) = v46;
          v29 -= 8;
        }
        *(_QWORD *)&v85 = v28;
        *((_QWORD *)&v85 + 1) = v29;
        *(_QWORD *)&v86 = v30;
        *((_QWORD *)&v86 + 1) = v31;
        v48 = v85;
        v49 = v86;
        *(_QWORD *)&v85 = *a1;
        v47 = (void *)v85;
        *((_QWORD *)&v85 + 1) = v27;
        *(_OWORD *)a1 = v48;
        *((_OWORD *)a1 + 1) = v49;
        if (v47)
          operator delete(v47);
        goto LABEL_60;
      }
      if (v23 != v4)
      {
        *(_QWORD *)&v85 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v85);
LABEL_60:
        v5 = (char *)a1[1];
        v8 = a1[5] + a1[4];
        goto LABEL_61;
      }
      *(_QWORD *)&v85 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v85);
      v61 = (_QWORD *)a1[1];
      v4 = (char *)a1[2];
      v63 = *v61;
      v62 = (char *)(v61 + 1);
      v10 = v63;
      a1[1] = v62;
      if (v4 == (char *)a1[3])
      {
        v64 = (uint64_t)&v62[-*a1];
        if ((unint64_t)v62 > *a1)
        {
          v65 = v64 >> 3;
          v14 = v64 >> 3 < -1;
          v66 = (v64 >> 3) + 2;
          if (v14)
            v67 = v66;
          else
            v67 = v65 + 1;
          v68 = -(v67 >> 1);
          v69 = v67 >> 1;
          v70 = &v62[-8 * v69];
          v71 = v4 - v62;
          if (v4 != v62)
          {
            memmove(&v62[-8 * v69], v62, v4 - v62);
            v62 = (char *)a1[1];
          }
          v4 = &v70[v71];
          v72 = &v62[8 * v68];
          goto LABEL_58;
        }
        if (v4 == (char *)*a1)
          v77 = 1;
        else
          v77 = (uint64_t)&v4[-*a1] >> 2;
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v77);
        v52 = &v51[8 * (v77 >> 2)];
        v54 = &v51[8 * v78];
        v79 = (uint64_t *)a1[1];
        v4 = v52;
        v80 = a1[2] - (_QWORD)v79;
        if (v80)
        {
          v4 = &v52[v80 & 0xFFFFFFFFFFFFFFF8];
          v81 = 8 * (v80 >> 3);
          v82 = &v51[8 * (v77 >> 2)];
          do
          {
            v83 = *v79++;
            *(_QWORD *)v82 = v83;
            v82 += 8;
            v81 -= 8;
          }
          while (v81);
        }
LABEL_46:
        v60 = (void *)*a1;
        *a1 = v51;
        a1[1] = v52;
        a1[2] = v4;
        a1[3] = v54;
        if (v60)
        {
          operator delete(v60);
          v4 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v7 - 42;
      v11 = *(_QWORD *)v5;
      v9 = v5 + 8;
      v10 = v11;
      a1[1] = v9;
      if ((char *)a1[3] == v4)
      {
        v12 = (uint64_t)&v9[-*a1];
        if ((unint64_t)v9 > *a1)
        {
          v13 = v12 >> 3;
          v14 = v12 >> 3 < -1;
          v15 = (v12 >> 3) + 2;
          if (v14)
            v16 = v15;
          else
            v16 = v13 + 1;
          v17 = -(v16 >> 1);
          v18 = v16 >> 1;
          v19 = &v9[-8 * v18];
          v20 = v4 - v9;
          if (v4 == v9)
          {
            v21 = v4;
          }
          else
          {
            memmove(&v9[-8 * v18], v9, v4 - v9);
            v21 = (char *)a1[1];
          }
          v4 = &v19[v20];
          v72 = &v21[8 * v17];
LABEL_58:
          a1[1] = v72;
          a1[2] = v4;
          goto LABEL_59;
        }
        if (v4 == (char *)*a1)
          v50 = 1;
        else
          v50 = (uint64_t)&v4[-*a1] >> 2;
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v50);
        v52 = &v51[8 * (v50 >> 2)];
        v54 = &v51[8 * v53];
        v55 = (uint64_t *)a1[1];
        v4 = v52;
        v56 = a1[2] - (_QWORD)v55;
        if (v56)
        {
          v4 = &v52[v56 & 0xFFFFFFFFFFFFFFF8];
          v57 = 8 * (v56 >> 3);
          v58 = &v51[8 * (v50 >> 2)];
          do
          {
            v59 = *v55++;
            *(_QWORD *)v58 = v59;
            v58 += 8;
            v57 -= 8;
          }
          while (v57);
        }
        goto LABEL_46;
      }
    }
LABEL_59:
    *(_QWORD *)v4 = v10;
    a1[2] += 8;
    goto LABEL_60;
  }
LABEL_61:
  v73 = *(_QWORD *)&v5[8 * (v8 / 0x2A)] + 96 * (v8 % 0x2A);
  v74 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v73 = *(_OWORD *)a2;
  *(_OWORD *)(v73 + 16) = v74;
  *(_QWORD *)(v73 + 40) = 0;
  *(_QWORD *)(v73 + 48) = 0;
  *(_QWORD *)(v73 + 32) = 0;
  *(_OWORD *)(v73 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v73 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v73 + 56) = 0;
  *(_QWORD *)(v73 + 64) = 0;
  *(_QWORD *)(v73 + 72) = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v73 + 56) = result;
  *(_QWORD *)(v73 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v76 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v73 + 85) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v73 + 80) = v76;
  ++a1[5];
  return result;
}

void sub_1C22058CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  void *v11;

  operator delete(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::pop_back(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:ne180100]((_QWORD *)(*(_QWORD *)(a1[1] + 8 * (v2 / 0x2A))
                                                                     + 96 * (v2 % 0x2A)));
  v4 = a1[1];
  v3 = a1[2];
  if (v3 == v4)
    v5 = 0;
  else
    v5 = 42 * ((v3 - v4) >> 3) - 1;
  v6 = a1[4];
  v7 = a1[5] - 1;
  a1[5] = v7;
  if ((unint64_t)(v5 - (v7 + v6)) >= 0x54)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 / 0x2A];
    v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    v7 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v4) / 0x2A] + 96 * ((*(_QWORD *)(a1 + 40) + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        std::allocator<std::__state<char>>::destroy[abi:ne180100](v6);
        v6 += 96;
        if (v6 - (_BYTE *)*v5 == 4032)
        {
          v8 = (char *)v5[1];
          ++v5;
          v6 = v8;
        }
      }
      while (v6 != (char *)v7);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v9 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v10 = v9 >> 3;
  if (v10 == 1)
  {
    v11 = 21;
    goto LABEL_14;
  }
  if (v10 == 2)
  {
    v11 = 42;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v11;
  }
  if (v2 != v3)
  {
    do
    {
      v12 = *v2++;
      operator delete(v12);
    }
    while (v2 != v3);
    v14 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13 != v14)
      *(_QWORD *)(a1 + 16) = v13 + ((v14 - v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x1C3BB9A30]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x1E0DE4A90]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x1E0DE4C08]);
  return this;
}

void sub_1C2205DB8(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  std::__owns_one_state<char> *v8;
  unsigned int v9;
  char *v10;
  char *v11;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  std::__owns_one_state<char> *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  std::__owns_one_state<char> *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  v6 = (_QWORD *)operator new();
  *v6 = &off_1E7BEC778;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(a1 + 40, (uint64_t)v7);
  v8 = *(std::__owns_one_state<char> **)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v9 > 0x3F)
  {
    switch(v9)
    {
      case 0x40u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        v13 = (unsigned __int8 *)memchr(a2, 10, a3 - a2);
        if (v13)
          v14 = v13;
        else
          v14 = (unsigned __int8 *)a3;
        if (v14 == (unsigned __int8 *)a2)
        {
          v24 = (_QWORD *)operator new();
          v25 = *(_QWORD *)(a1 + 56);
          v26 = *(_QWORD *)(v25 + 8);
          v24[1] = v26;
          *(_QWORD *)(v25 + 8) = v24;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, (unsigned __int8 *)a2, v14);
        }
        if (v14 != (unsigned __int8 *)a3)
          ++v14;
        while (v14 != (unsigned __int8 *)a3)
        {
          v27 = (unsigned __int8 *)memchr(v14, 10, a3 - (char *)v14);
          if (v27)
            v28 = v27;
          else
            v28 = (unsigned __int8 *)a3;
          v29 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v28 == v14)
          {
            v30 = (_QWORD *)operator new();
            v31 = *(_QWORD *)(a1 + 56);
            v32 = *(_QWORD *)(v31 + 8);
            v30[1] = v32;
            *(_QWORD *)(v31 + 8) = v30;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v14, v28);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v8, v29);
          if (v28 == (unsigned __int8 *)a3)
            v14 = v28;
          else
            v14 = v28 + 1;
        }
        break;
      case 0x100u:
        v10 = (char *)memchr(a2, 10, a3 - a2);
        if (v10)
          v11 = v10;
        else
          v11 = a3;
        if (v11 == a2)
        {
          v15 = (_QWORD *)operator new();
          v16 = *(_QWORD *)(a1 + 56);
          v17 = *(_QWORD *)(v16 + 8);
          v15[1] = v17;
          *(_QWORD *)(v16 + 8) = v15;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, v11);
        }
        if (v11 != a3)
          ++v11;
        while (v11 != a3)
        {
          v18 = (char *)memchr(v11, 10, a3 - v11);
          if (v18)
            v19 = v18;
          else
            v19 = a3;
          v20 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v19 == v11)
          {
            v21 = (_QWORD *)operator new();
            v22 = *(_QWORD *)(a1 + 56);
            v23 = *(_QWORD *)(v22 + 8);
            v21[1] = v23;
            *(_QWORD *)(v22 + 8) = v21;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, v11, v19);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v8, v20);
          if (v19 == a3)
            v11 = v19;
          else
            v11 = v19 + 1;
        }
        break;
      default:
        goto LABEL_49;
    }
    return a3;
  }
  else if (v9)
  {
    if (v9 != 16)
    {
      if (v9 != 32)
LABEL_49:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
    }
    return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
  else
  {
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, a3);
  }
}

void sub_1C220611C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BB95EC](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C2206170(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = (_QWORD *)operator new();
  *v4 = &off_1E7BECD78;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  *(_QWORD *)&v5 = a2;
  *((_QWORD *)&v5 + 1) = v4;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1C2206218(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::__owns_one_state<char> *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__node<char> *v15;
  std::__owns_one_state<char> *v16;
  std::__node<char> *v17;

  end = a1->__end_;
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124)
      return (char *)v8;
    v12 = a1->__end_;
    v13 = v8 + 1;
    v14 = v8 + 1;
    do
    {
      v8 = v14;
      v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v14, a3);
    }
    while (v14 != v8);
    if (v8 == v13)
    {
      v15 = (std::__node<char> *)operator new();
      v16 = a1->__end_;
      v17 = v16->__first_;
      v15[1].__vftable = (std::__node<char>_vtbl *)v17;
      v16->__first_ = v15;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v12);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == a3)
    return a2;
  v4 = a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &off_1E7BECA10;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != v4)
  {
    do
    {
      v10 = v3;
      v3 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>((std::basic_regex<char> *)a1, v3, v4);
    }
    while (v3 != v10);
    if (v10 != v4)
    {
      if (v10 + 1 != v4 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &off_1E7BECA70;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v3;
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__owns_one_state<char> *v9;
  unsigned __int8 *v10;

  v3 = a3;
  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124)
      return (char *)v8;
    v9 = a1->__end_;
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, (char *)v8 + 1, v3);
    if (v10 == v8 + 1)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BB95EC](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C2206590(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
  std::__node<char> *v6;
  std::__node<char> *first;
  std::__node<char> *v8;
  std::__node<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v11;

  v6 = (std::__node<char> *)operator new();
  first = __sb->__first_;
  v6[1].__vftable = (std::__node<char>_vtbl *)__sa->__first_;
  v6[2].__vftable = (std::__node<char>_vtbl *)first;
  v6->__vftable = (std::__node<char>_vtbl *)&off_1E7BEC748;
  __sa->__first_ = v6;
  __sb->__first_ = 0;
  v8 = (std::__node<char> *)operator new();
  v9 = this->__end_->__first_;
  v8[1].__vftable = (std::__node<char>_vtbl *)v9;
  __sb->__first_ = v8;
  this->__end_->__first_ = 0;
  v10 = (std::__node<char> *)operator new();
  v11 = __sb->__first_;
  v10->__vftable = (std::__node<char>_vtbl *)&off_1E7BECDB0;
  v10[1].__vftable = (std::__node<char>_vtbl *)v11;
  this->__end_->__first_ = v10;
  this->__end_ = (std::__owns_one_state<char> *)__sb->__first_;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
  JUMPOUT(0x1C3BB9B44);
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E7BEC8F8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E7BEC8F8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1C3BB9B44);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  JUMPOUT(0x1C3BB9B44);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E7BEC8F8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E7BEC8F8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1C3BB9B44);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(uint64_t a1, char *a2, char *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (char *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BB95EC](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C22069A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  std::basic_regex<char>::value_type v13;
  char *v14;
  _BOOL4 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (**v25)();
  unsigned int v26;
  char *v27;
  char *v28;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  if (a2 == a3)
  {
LABEL_24:
    v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, a2, a3);
    goto LABEL_25;
  }
  v8 = *a2;
  v9 = (v8 - 36);
  if (v9 > 0x3A)
    goto LABEL_13;
  if (((1 << (v8 - 36)) & 0x5800000080004D1) == 0)
  {
    if (v9 == 5)
    {
      if (*(_DWORD *)(a1 + 36))
        goto LABEL_4;
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, *a2);
LABEL_33:
      v10 = (unsigned __int8 *)(a2 + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v10, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
LABEL_13:
    if ((v8 - 123) < 2)
      goto LABEL_4;
    goto LABEL_14;
  }
LABEL_4:
  v10 = (unsigned __int8 *)(a2 + 1);
  if (a2 + 1 == a3)
    goto LABEL_21;
  v11 = *a2;
  if (v11 != 92)
    goto LABEL_22;
  v12 = (char)*v10;
  v13 = *v10;
  if ((v12 - 36) <= 0x3A && ((1 << (v12 - 36)) & 0x5800000080004F1) != 0
    || (v12 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v13);
    v10 = (unsigned __int8 *)(a2 + 2);
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v10, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
  {
    v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, a2 + 1, a3, 0);
  }
  else
  {
    v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v13);
    v16 = 2;
    if (!v15)
      v16 = 0;
    v14 = &a2[v16];
  }
  if (v14 == a2)
  {
LABEL_21:
    v11 = *a2;
LABEL_22:
    if (v11 == 46)
    {
      v17 = (_QWORD *)operator new();
      v18 = *(_QWORD *)(a1 + 56);
      v19 = *(_QWORD *)(v18 + 8);
      *v17 = &off_1E7BEC7D8;
      v17[1] = v19;
      *(_QWORD *)(v18 + 8) = v17;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v10, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    goto LABEL_24;
  }
LABEL_25:
  if (v14 != a2 || v14 == a3)
    goto LABEL_37;
  v20 = *a2;
  switch(v20)
  {
    case '$':
      v21 = operator new();
      v22 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v23 = *(_QWORD *)(a1 + 56);
      v24 = *(_QWORD *)(v23 + 8);
      v25 = &off_1E7BECA70;
      goto LABEL_32;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
      v26 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 36);
      v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, a2 + 1, a3);
      if (v27 == a3 || (v28 = v27, *v27 != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v26);
      --*(_DWORD *)(a1 + 36);
      v14 = v28 + 1;
LABEL_37:
      v10 = (unsigned __int8 *)v14;
      if (v14 != a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v10, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
      return (unsigned __int8 *)a2;
    case '^':
      v21 = operator new();
      v22 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v23 = *(_QWORD *)(a1 + 56);
      v24 = *(_QWORD *)(v23 + 8);
      v25 = &off_1E7BECA10;
LABEL_32:
      *(_QWORD *)v21 = v25;
      *(_QWORD *)(v21 + 8) = v24;
      *(_BYTE *)(v21 + 16) = v22;
      *(_QWORD *)(v23 + 8) = v21;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      goto LABEL_33;
  }
  return (unsigned __int8 *)a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  uint64_t v2;
  unsigned int v3;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v2 = operator new();
    v3 = this->__marked_count_ + 1;
    this->__marked_count_ = v3;
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v2 = &off_1E7BECE40;
    *(_QWORD *)(v2 + 8) = first;
    *(_DWORD *)(v2 + 16) = v3;
    end->__first_ = (std::__node<char> *)v2;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BB95EC](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C2206D84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  uint64_t v4;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v4 = operator new();
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v4 = &off_1E7BECE10;
    *(_QWORD *)(v4 + 8) = first;
    *(_DWORD *)(v4 + 16) = a2;
    end->__first_ = (std::__node<char> *)v4;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  size_t v18;
  BOOL v19;
  BOOL v20;
  std::__owns_one_state<char> *v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  size_t __max;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123)
      return a2;
    v15 = a2 + 1;
    v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = (int)__max;
LABEL_33:
              v21 = __s;
              v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = (int)__max;
LABEL_45:
            v21 = __s;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v16 + 1, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t v17;
  unsigned int loop_count;
  std::__node<char> *v19;
  std::__node<char> *v20;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = (_QWORD *)operator new();
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new();
  loop_count = this->__loop_count_;
  v19 = __s->__first_;
  *(_QWORD *)v17 = &off_1E7BECE70;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = __min;
  *(_QWORD *)(v17 + 32) = __max;
  *(_DWORD *)(v17 + 40) = loop_count;
  *(_DWORD *)(v17 + 44) = v9;
  *(_DWORD *)(v17 + 48) = v8;
  *(_BYTE *)(v17 + 52) = __greedy;
  __s->__first_ = 0;
  v20 = (std::__node<char> *)operator new();
  v20->__vftable = (std::__node<char>_vtbl *)&off_1E7BEC928;
  v20[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v20;
  this->__end_ = *(std::__owns_one_state<char> **)(v17 + 16);
  __s->__first_ = (std::__node<char> *)v17;
  ++this->__loop_count_;
}

void sub_1C220720C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(unsigned __int8 *result, unsigned __int8 *a2, int *a3)
{
  int v3;
  int v4;
  int v5;

  if (result != a2)
  {
    v3 = *result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      v4 = v3 - 48;
      *a3 = v4;
      if (++result == a2)
      {
        return a2;
      }
      else
      {
        while (1)
        {
          v5 = *result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38)
            break;
          if (v4 >= 214748364)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          if (++result == a2)
            return a2;
        }
      }
    }
  }
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BB95EC](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C2207304(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BB95EC](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C2207350(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
  JUMPOUT(0x1C3BB9B44);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E7BEC8F8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E7BEC8F8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1C3BB9B44);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  uint64_t v10;

  v2 = result[10];
  v3 = a2[7];
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    v5 = *v4 + 1;
    *v4 = v5;
    v6 = *((_QWORD *)result + 3);
    v7 = *((_QWORD *)result + 4);
    v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      v10 = *(_QWORD *)(v3 + 16 * v2 + 8);
      v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8)
        goto LABEL_25;
LABEL_22:
      a2[10] = *((_QWORD *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *v4 = 0;
  if (*((_QWORD *)result + 4))
  {
    if (*((_QWORD *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((_QWORD *)result + 2);
  return result;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, _QWORD *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((_QWORD *)result + 2);
  }
  else
  {
    a3[10] = *((_QWORD *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  v2 = result[11];
  *(_QWORD *)(a2[7] + 16 * result[10] + 8) = a2[2];
  v3 = result[12];
  if (v2 != v3)
  {
    v4 = v2 - 1;
    v5 = a2[3];
    v6 = v3 - 1 - v4;
    v7 = (_BYTE *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((_QWORD *)v7 - 2) = v5;
      *((_QWORD *)v7 - 1) = v5;
      *v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    v5 = *(_QWORD *)(result + 8);
  }
  else
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 92))
  {
    if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8) || (*(_BYTE *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
  }
  *(_DWORD *)a2 = -994;
  v4 = *(_QWORD *)(result + 8);
LABEL_13:
  *(_QWORD *)(a2 + 80) = v4;
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v5;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;
  int v12;
  char *j;
  char *v14;
  int v15;
  char *v16;
  int v17;
  std::string *v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  unint64_t i;
  std::string::size_type size;
  int v24;
  std::string::size_type v25;
  std::string *p_p;
  std::string *v27;
  std::regex_traits<char>::char_class_type classname;
  char v29;
  std::string::size_type v30;
  std::string *v31;
  void *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string *v35;
  std::string::size_type v36;
  std::string v38;
  std::string v39;
  void *v40[2];
  uint64_t v41;
  std::string __p;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_135;
    v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if ((char *)v5 == a3)
      goto LABEL_135;
    v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(_BYTE *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if ((char *)v5 == a3)
      goto LABEL_135;
    v8 = a3 - 4;
    while (1)
    {
      v9 = (char *)v5;
      v10 = a3;
      if ((char *)v5 == a3)
        goto LABEL_113;
      v11 = *(unsigned __int8 *)v5;
      v10 = (char *)v5;
      if (v11 == 93)
        goto LABEL_113;
      memset(&v39, 0, sizeof(v39));
      if ((char *)(v5 + 1) != a3 && v11 == 91)
      {
        v12 = *(unsigned __int8 *)(v5 + 1);
        switch(v12)
        {
          case '.':
            v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, (char *)(v5 + 2), a3, (uint64_t)&v39);
            v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
            size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
            if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = v39.__r_.__value_.__l.__size_;
            if (size)
              goto LABEL_33;
            goto LABEL_27;
          case ':':
            if ((uint64_t)&a3[-v5 - 2] < 2)
              goto LABEL_134;
            for (i = 0; ; ++i)
            {
              v14 = (char *)(v5 + i + 2);
              if (*v14 == 58 && *(_BYTE *)(v5 + i + 3) == 93)
                break;
              if (&v8[-v5] == (char *)i)
                goto LABEL_134;
            }
            if (v14 == a3)
LABEL_134:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
            v24 = *(_DWORD *)(a1 + 24);
            std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__p, (char *)(v5 + 2), (char *)(v5 + i + 2), i);
            v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v25 = __p.__r_.__value_.__l.__size_;
            (*(void (**)(_QWORD, std::string *, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), p_p, (char *)p_p + v25);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v27 = &__p;
            else
              v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
            classname = std::__get_classname((const char *)v27, v24 & 1);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (!classname)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
            v29 = 0;
            *(_DWORD *)(v7 + 160) |= classname;
            goto LABEL_109;
          case '=':
            if ((uint64_t)&a3[-v5 - 2] < 2)
              goto LABEL_134;
            for (j = 0; ; ++j)
            {
              v14 = &j[v5 + 2];
              if (*v14 == 61 && j[v5 + 3] == 93)
                break;
              if (&v8[-v5] == j)
                goto LABEL_134;
            }
            if (v14 == a3)
              goto LABEL_134;
            std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&__p, a1, (char *)(v5 + 2), &j[v5 + 2]);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              v30 = __p.__r_.__value_.__l.__size_;
              if (!__p.__r_.__value_.__l.__size_)
LABEL_136:
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            else
            {
              v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
                goto LABEL_136;
              v31 = &__p;
            }
            std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>((uint64_t)v40, a1, (char *)v31, (char *)v31 + v30);
            v32 = (void *)HIBYTE(v41);
            if (v41 < 0)
              v32 = v40[1];
            if (v32)
            {
              std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100]((uint64_t *)v7, (__int128 *)v40);
            }
            else
            {
              v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v33 = __p.__r_.__value_.__l.__size_;
              if (v33 == 2)
              {
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v35 = &__p;
                else
                  v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v35->__r_.__value_.__s.__data_[0], v35->__r_.__value_.__s.__data_[1]);
              }
              else
              {
                if (v33 != 1)
                  std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v34 = &__p;
                else
                  v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
                std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v34->__r_.__value_.__s.__data_[0]);
              }
            }
            if (SHIBYTE(v41) < 0)
              operator delete(v40[0]);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v29 = 0;
LABEL_109:
            v5 = (uint64_t)(v14 + 2);
            v20 = v9;
            goto LABEL_110;
        }
      }
      v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
      v10 = v9;
LABEL_27:
      if ((v5 | 0x40) != 0x40)
      {
        LOBYTE(v15) = *v10;
LABEL_32:
        std::string::operator=(&v39, v15);
        ++v10;
        goto LABEL_33;
      }
      v15 = *v10;
      if (v15 != 92)
        goto LABEL_32;
      v16 = v10 + 1;
      if ((_DWORD)v5)
      {
        v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v16, a3, &v39);
      }
      else
      {
        v10 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v16, (std::basic_regex<char> *)a3, &v39, v7);
        v5 = 0;
      }
LABEL_33:
      if (v10 != a3)
      {
        v17 = *v10;
        if (v17 != 93)
        {
          v19 = v10 + 1;
          if (v10 + 1 != a3 && v17 == 45 && *v19 != 93)
          {
            memset(&__p, 0, sizeof(__p));
            v20 = v10 + 2;
            if (v10 + 2 != a3 && *v19 == 91 && *v20 == 46)
            {
              v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v10 + 3, a3, (uint64_t)&__p);
              goto LABEL_119;
            }
            if ((v5 | 0x40) == 0x40)
            {
              LODWORD(v19) = *v19;
              if ((_DWORD)v19 == 92)
              {
                if ((_DWORD)v5)
                  v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v10 + 2, a3, &__p);
                else
                  v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v10 + 2), (std::basic_regex<char> *)a3, &__p, v7);
LABEL_119:
                v20 = v21;
LABEL_120:
                *(_OWORD *)v40 = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
                v36 = v39.__r_.__value_.__r.__words[2];
                v38 = __p;
                memset(&v39, 0, sizeof(v39));
                v41 = v36;
                memset(&__p, 0, sizeof(__p));
                std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v7, (char *)v40, (char *)&v38);
                if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v38.__r_.__value_.__l.__data_);
                if (SHIBYTE(v41) < 0)
                  operator delete(v40[0]);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                v29 = 1;
LABEL_110:
                if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v39.__r_.__value_.__l.__data_);
                v10 = v20;
                if ((v29 & 1) == 0)
                  goto LABEL_114;
                goto LABEL_113;
              }
            }
            else
            {
              LOBYTE(v19) = *v19;
            }
            std::string::operator=(&__p, (std::string::value_type)v19);
            goto LABEL_120;
          }
        }
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v39.__r_.__value_.__l.__size_)
        {
          if (v39.__r_.__value_.__l.__size_ == 1)
          {
            v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
LABEL_42:
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v18->__r_.__value_.__s.__data_[0]);
LABEL_79:
            v29 = 1;
            v20 = v10;
            goto LABEL_110;
          }
          v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
LABEL_78:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v18->__r_.__value_.__s.__data_[0], v18->__r_.__value_.__s.__data_[1]);
          goto LABEL_79;
        }
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      else if (*((_BYTE *)&v39.__r_.__value_.__s + 23))
      {
        v18 = &v39;
        if (HIBYTE(v39.__r_.__value_.__r.__words[2]) == 1)
          goto LABEL_42;
        goto LABEL_78;
      }
LABEL_113:
      v5 = (uint64_t)v10;
LABEL_114:
      if ((char *)v5 == v9)
      {
        if (v9 != a3)
        {
          if (*v9 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v9;
          }
          if (v9 != a3 && *v9 == 93)
            return v9 + 1;
        }
LABEL_135:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
  }
  return a2;
}

void sub_1C2207F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BB95EC](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C2207FD8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
  uint64_t v4;
  std::__node<char> *first;
  unsigned int flags_low;
  char v7;
  int v8;
  BOOL v9;
  std::locale v11;
  std::string v12;

  v4 = operator new();
  first = this->__end_->__first_;
  flags_low = LOBYTE(this->__flags_);
  v7 = flags_low & 1;
  v8 = (flags_low >> 3) & 1;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_BYTE *)(v4 + 168) = __negate;
  *(_BYTE *)(v4 + 169) = v7;
  *(_BYTE *)(v4 + 170) = v8;
  std::locale::locale(&v11, (const std::locale *)(v4 + 16));
  std::locale::name(&v12, &v11);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = v12.__r_.__value_.__l.__size_ != 1 || *v12.__r_.__value_.__l.__data_ != 67;
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
    v9 = SHIBYTE(v12.__r_.__value_.__r.__words[2]) != 1 || v12.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v11);
  *(_BYTE *)(v4 + 171) = v9;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)v4;
  return (std::__bracket_expression<char, std::regex_traits<char>> *)v4;
}

void sub_1C2208138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  void (__cdecl ***v10)(std::__owns_one_state<char> *__hidden);
  std::locale *v11;
  void **v12;
  void (__cdecl **v14)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v15)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v16)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v17)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v14 = v10[14];
  if (v14)
  {
    v10[15] = v14;
    operator delete(v14);
  }
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v15 = v10[8];
  if (v15)
  {
    v10[9] = v15;
    operator delete(v15);
  }
  v16 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))*v12;
  if (*v12)
  {
    v10[6] = v16;
    operator delete(v16);
  }
  std::locale::~locale(v11);
  v17 = v10[1];
  if (v17)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v17 + 1))(v17);
  MEMORY[0x1C3BB9B44](v10, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  char v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  _BYTE *v28;
  char v29;
  _BYTE *v30;
  char v31;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      v6 = *(_QWORD *)(a1 + 40);
      v7 = &v5[-v6];
      v8 = (uint64_t)&v5[-v6 + 1];
      if (v8 >= 0)
      {
        v9 = v4 - v6;
        if (2 * v9 > v8)
          v8 = 2 * v9;
        if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
          v10 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        if (v10)
          v11 = operator new(v10);
        else
          v11 = 0;
        v19 = &v7[(_QWORD)v11];
        v20 = (char *)v11 + v10;
        v7[(_QWORD)v11] = v2;
        v18 = (uint64_t)&v7[(_QWORD)v11 + 1];
        if (v5 != (_BYTE *)v6)
        {
          v21 = &v5[~v6];
          do
          {
            v22 = *--v5;
            (v21--)[(_QWORD)v11] = v22;
          }
          while (v5 != (_BYTE *)v6);
LABEL_45:
          v5 = *(_BYTE **)(a1 + 40);
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v5 = *(_BYTE **)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v12)
    {
      v23 = *(_QWORD *)(a1 + 40);
      v24 = &v5[-v23];
      v25 = (uint64_t)&v5[-v23 + 1];
      if (v25 >= 0)
      {
        v26 = v12 - v23;
        if (2 * v26 > v25)
          v25 = 2 * v26;
        if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
          v27 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
          v11 = operator new(v27);
        else
          v11 = 0;
        v19 = &v24[(_QWORD)v11];
        v20 = (char *)v11 + v27;
        v24[(_QWORD)v11] = v2;
        v18 = (uint64_t)&v24[(_QWORD)v11 + 1];
        if (v5 != (_BYTE *)v23)
        {
          v30 = &v5[~v23];
          do
          {
            v31 = *--v5;
            (v30--)[(_QWORD)v11] = v31;
          }
          while (v5 != (_BYTE *)v23);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v18 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v12)
    goto LABEL_22;
  v13 = *(_QWORD *)(a1 + 40);
  v14 = &v5[-v13];
  v15 = (uint64_t)&v5[-v13 + 1];
  if (v15 < 0)
    goto LABEL_50;
  v16 = v12 - v13;
  if (2 * v16 > v15)
    v15 = 2 * v16;
  if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
    v17 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
    v11 = operator new(v17);
  else
    v11 = 0;
  v19 = &v14[(_QWORD)v11];
  v20 = (char *)v11 + v17;
  v14[(_QWORD)v11] = v2;
  v18 = (uint64_t)&v14[(_QWORD)v11 + 1];
  if (v5 != (_BYTE *)v13)
  {
    v28 = &v5[~v13];
    do
    {
      v29 = *--v5;
      (v28--)[(_QWORD)v11] = v29;
    }
    while (v5 != (_BYTE *)v13);
    goto LABEL_45;
  }
LABEL_46:
  v11 = v19;
LABEL_47:
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v18;
  *(_QWORD *)(a1 + 56) = v20;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 48) = v18;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  unint64_t v11;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  for (i = 0; ; ++i)
  {
    v6 = &a2[i];
    if (a2[i] == 46 && v6[1] == 93)
      break;
    if (a3 - a2 - 2 == i)
      goto LABEL_15;
  }
  if (v6 == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v10, a1, a2, &a2[i]);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v10;
  v7 = v11;
  *(_QWORD *)(a4 + 16) = v11;
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return v6 + 2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  int locale_low;
  int v7;
  int v8;
  std::string::value_type v9;
  std::string *v10;

  if (this == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        v10 = a4;
        v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
      v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
    }
    v9 = 0;
    v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  int v5;
  std::string *v6;
  std::string::value_type v7;
  char *v8;
  char v9;
  int v10;
  std::string::value_type v11;

  if (a2 == a3)
LABEL_52:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30)
    goto LABEL_52;
  v7 = v5 - 48;
  v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30)
      goto LABEL_39;
    v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      goto LABEL_39;
    }
  }
  v8 = a3;
LABEL_39:
  if (this)
    std::string::operator=(this, v7);
  else
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  return v8;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  unint64_t i;
  char *v7;
  char v8;
  char *v9;
  unint64_t j;
  char *v11;
  char v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void *v23;
  uint64_t v24;
  char *v25;
  char v26;
  _BYTE *v27;
  char *v28;
  char v29;
  _BYTE *v30;
  void *v31[2];
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  void *v35[2];
  uint64_t v36;
  void *__p[2];
  uint64_t v38;

  v3 = a3;
  v4 = a2;
  if (*(_BYTE *)(a1 + 170))
  {
    if (*(_BYTE *)(a1 + 169))
    {
      for (i = 0; ; ++i)
      {
        if (v4[23] < 0)
        {
          if (i >= *((_QWORD *)v4 + 1))
          {
LABEL_12:
            for (j = 0; ; ++j)
            {
              if (v3[23] < 0)
              {
                if (j >= *((_QWORD *)v3 + 1))
                  goto LABEL_35;
                v11 = *(char **)v3;
              }
              else
              {
                v11 = v3;
                if (j >= v3[23])
                  goto LABEL_35;
              }
              v12 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v11[j]);
              v13 = v3;
              if (v3[23] < 0)
                v13 = *(char **)v3;
              v13[j] = v12;
            }
          }
          v7 = *(char **)v4;
        }
        else
        {
          v7 = v4;
          if (i >= v4[23])
            goto LABEL_12;
        }
        v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v7[i]);
        v9 = v4;
        if (v4[23] < 0)
          v9 = *(char **)v4;
        v9[i] = v8;
      }
    }
    v15 = 0;
    v16 = a2[23];
    if ((v16 & 0x80) != 0)
      goto LABEL_26;
    while (v15 < v16)
    {
      while (1)
      {
        ++v15;
        if ((v16 & 0x80) == 0)
          break;
LABEL_26:
        if (v15 >= *((_QWORD *)a2 + 1))
          goto LABEL_29;
      }
    }
LABEL_29:
    v17 = 0;
    v18 = a3[23];
    if ((v18 & 0x80) != 0)
      goto LABEL_32;
    while (v17 < v18)
    {
      while (1)
      {
        ++v17;
        if ((v18 & 0x80) == 0)
          break;
LABEL_32:
        if (v17 >= *((_QWORD *)a3 + 1))
          goto LABEL_35;
      }
    }
LABEL_35:
    if (v4[23] < 0)
    {
      v20 = v4;
      v4 = *(char **)v4;
      v19 = *((_QWORD *)v20 + 1);
    }
    else
    {
      v19 = v4[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)&v33, a1 + 16, v4, &v4[v19]);
    if (v3[23] < 0)
    {
      v22 = v3;
      v3 = *(char **)v3;
      v21 = *((_QWORD *)v22 + 1);
    }
    else
    {
      v21 = v3[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)v31, a1 + 16, v3, &v3[v21]);
    *(_OWORD *)v35 = v33;
    v36 = v34;
    v34 = 0;
    *(_OWORD *)__p = *(_OWORD *)v31;
    v38 = v32;
    v31[0] = 0;
    v31[1] = 0;
    v32 = 0;
    v33 = 0uLL;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((void **)(a1 + 88), (__int128 *)v35);
    if (SHIBYTE(v38) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v36) < 0)
      operator delete(v35[0]);
    if (SHIBYTE(v32) < 0)
      operator delete(v31[0]);
    if (SHIBYTE(v34) < 0)
    {
      v23 = (void *)v33;
LABEL_69:
      operator delete(v23);
    }
  }
  else
  {
    if (a2[23] < 0)
      v14 = *((_QWORD *)a2 + 1);
    else
      v14 = a2[23];
    if (v14 != 1 || (a3[23] < 0 ? (v24 = *((_QWORD *)a3 + 1)) : (v24 = a3[23]), v24 != 1))
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    if (*(_BYTE *)(a1 + 169))
    {
      v25 = a2;
      if (a2[23] < 0)
        v25 = *(char **)a2;
      v26 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v25);
      v27 = v4;
      if (v4[23] < 0)
        v27 = *(_BYTE **)v4;
      *v27 = v26;
      v28 = v3;
      if (v3[23] < 0)
        v28 = *(char **)v3;
      v29 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v28);
      v30 = v3;
      if (v3[23] < 0)
        v30 = *(_BYTE **)v3;
      *v30 = v29;
    }
    *(_OWORD *)v35 = *(_OWORD *)v4;
    v36 = *((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = 0;
    *(_OWORD *)__p = *(_OWORD *)v3;
    v38 = *((_QWORD *)v3 + 2);
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((void **)(a1 + 88), (__int128 *)v35);
    if (SHIBYTE(v38) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v36) < 0)
    {
      v23 = v35[0];
      goto LABEL_69;
    }
  }
}

void sub_1C2208B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21)
{
  snlp::ssu::matcher::SSUAppInfo::~SSUAppInfo(&a21);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  _WORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int16 v38;
  char *v39;
  __int16 v40;

  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v8 = *(_WORD **)(a1 + 120);
    v16 = *(_QWORD *)(a1 + 128);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v8 < v16)
        goto LABEL_24;
      v17 = *(_QWORD *)(a1 + 112);
      v18 = (uint64_t)v8 - v17;
      if ((uint64_t)v8 - v17 > -3)
      {
        v19 = v18 >> 1;
        v20 = v16 - v17;
        if (v20 <= (v18 >> 1) + 1)
          v21 = v19 + 1;
        else
          v21 = v20;
        if (v20 >= 0x7FFFFFFFFFFFFFFELL)
          v22 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v22 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v22);
        else
          v23 = 0;
        v25 = (_WORD *)(v22 + 2 * v19);
        v26 = v22 + 2 * v23;
        *v25 = v6;
        v24 = v25 + 1;
        v37 = *(char **)(a1 + 112);
        v27 = *(char **)(a1 + 120);
        if (v27 == v37)
          goto LABEL_46;
        do
        {
          v38 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--v25 = v38;
        }
        while (v27 != v37);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v8 < v16)
        goto LABEL_24;
      v30 = *(_QWORD *)(a1 + 112);
      v31 = (uint64_t)v8 - v30;
      if ((uint64_t)v8 - v30 > -3)
      {
        v32 = v31 >> 1;
        v33 = v16 - v30;
        if (v33 <= (v31 >> 1) + 1)
          v34 = v32 + 1;
        else
          v34 = v33;
        if (v33 >= 0x7FFFFFFFFFFFFFFELL)
          v35 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v35 = v34;
        if (v35)
          v35 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v35);
        else
          v36 = 0;
        v25 = (_WORD *)(v35 + 2 * v32);
        v26 = v35 + 2 * v36;
        *v25 = v6;
        v24 = v25 + 1;
        v39 = *(char **)(a1 + 112);
        v27 = *(char **)(a1 + 120);
        if (v27 == v39)
          goto LABEL_46;
        do
        {
          v40 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--v25 = v40;
        }
        while (v27 != v39);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
  v8 = *(_WORD **)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
LABEL_24:
    *v8 = v6;
    v24 = v8 + 1;
    goto LABEL_48;
  }
  v9 = *(_QWORD *)(a1 + 112);
  v10 = (uint64_t)v8 - v9;
  if ((uint64_t)v8 - v9 <= -3)
    goto LABEL_49;
  v11 = v10 >> 1;
  v12 = v7 - v9;
  if (v12 <= (v10 >> 1) + 1)
    v13 = v11 + 1;
  else
    v13 = v12;
  if (v12 >= 0x7FFFFFFFFFFFFFFELL)
    v14 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v14 = v13;
  if (v14)
    v14 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v14);
  else
    v15 = 0;
  v25 = (_WORD *)(v14 + 2 * v11);
  v26 = v14 + 2 * v15;
  *v25 = v6;
  v24 = v25 + 1;
  v28 = *(char **)(a1 + 112);
  v27 = *(char **)(a1 + 120);
  if (v27 == v28)
    goto LABEL_46;
  do
  {
    v29 = *((_WORD *)v27 - 1);
    v27 -= 2;
    *--v25 = v29;
  }
  while (v27 != v28);
LABEL_45:
  v27 = *(char **)(a1 + 112);
LABEL_46:
  *(_QWORD *)(a1 + 112) = v25;
  *(_QWORD *)(a1 + 120) = v24;
  *(_QWORD *)(a1 + 128) = v26;
  if (v27)
    operator delete(v27);
LABEL_48:
  *(_QWORD *)(a1 + 120) = v24;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(uint64_t a1)
{
  if (a1 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a1);
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v5;
  void **v6;
  void *__p[2];
  unsigned __int8 v8;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a3, a4, a4 - a3);
  v5 = v8;
  if ((v8 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v8 & 0x80u) != 0)
    v5 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0)
    operator delete(__p[0]);
}

void sub_1C2208E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](void **a1, __int128 *a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 4);
    v10 = v9 + 1;
    if (v9 + 1 > 0x555555555555555)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x2AAAAAAAAAAAAAALL)
      v12 = 0x555555555555555;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0x555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(48 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[48 * v9];
    *((_QWORD *)v14 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v14 = *a2;
    v15 = &v13[48 * v12];
    v16 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    *(_OWORD *)(v14 + 24) = v16;
    *((_QWORD *)v14 + 5) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    v8 = v14 + 48;
    v17 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 == *a1)
    {
      *a1 = v14;
      a1[1] = v8;
      a1[2] = v15;
    }
    else
    {
      do
      {
        v19 = *((_OWORD *)v18 - 3);
        *((_QWORD *)v14 - 4) = *((_QWORD *)v18 - 4);
        *((_OWORD *)v14 - 3) = v19;
        *((_QWORD *)v18 - 5) = 0;
        *((_QWORD *)v18 - 4) = 0;
        *((_QWORD *)v18 - 6) = 0;
        v20 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 48;
        *((_QWORD *)v18 - 2) = 0;
        *((_QWORD *)v18 - 1) = 0;
        *((_QWORD *)v18 - 3) = 0;
        v18 -= 48;
      }
      while (v18 != v17);
      v18 = (char *)*a1;
      v21 = (uint64_t)a1[1];
      *a1 = v14;
      a1[1] = v8;
      a1[2] = v15;
      while ((char *)v21 != v18)
      {
        v21 -= 48;
        std::allocator<snlp::ssu::app::SSUAppParameter>::destroy[abi:ne180100](v21);
      }
    }
    if (v18)
      operator delete(v18);
  }
  else
  {
    v6 = *a2;
    *((_QWORD *)v4 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v6;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v7 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v4 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v4 + 24) = v7;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v8 = v4 + 48;
  }
  a1[1] = v8;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BB95EC](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C220901C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BB95EC](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C2209068(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  uint64_t v8;
  std::__node<char> *first;
  std::__node<char> *v10;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = operator new();
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &off_1E7BEC9B0;
    *(_QWORD *)(v8 + 8) = first;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = operator new();
    v10 = this->__end_->__first_;
    *(_QWORD *)v8 = &off_1E7BECA40;
    *(_QWORD *)(v8 + 8) = v10;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = v2;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &off_1E7BEC808;
  *(_QWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 16) = v2;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_1C22091A4(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  MEMORY[0x1C3BB9B44](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7BECA40;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7BECA40;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7BEC9B0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7BEC9B0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1)
{
  char v2;
  char v3;
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  void *v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  _BYTE *v20;
  uint64_t v21;
  char *v22;
  _BYTE *v23;
  char v24;
  unint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  unint64_t v28;
  size_t v29;
  char *v30;
  char *v31;
  _BYTE *v32;
  char v33;
  _BYTE *v34;
  char v35;

  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), 95);
    v3 = v2;
    v5 = *(_BYTE **)(a1 + 72);
    v4 = *(_QWORD *)(a1 + 80);
    if ((unint64_t)v5 < v4)
    {
      *v5 = v2;
      v6 = (uint64_t)(v5 + 1);
LABEL_32:
      *(_QWORD *)(a1 + 72) = v6;
      return;
    }
    v15 = *(_QWORD *)(a1 + 64);
    v16 = &v5[-v15];
    v17 = (uint64_t)&v5[-v15 + 1];
    if (v17 >= 0)
    {
      v18 = v4 - v15;
      if (2 * v18 > v17)
        v17 = 2 * v18;
      if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
        v19 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
        v20 = operator new(v19);
      else
        v20 = 0;
      v22 = &v20[v19];
      v16[(_QWORD)v20] = v3;
      v6 = (uint64_t)&v16[(_QWORD)v20 + 1];
      if (v5 == (_BYTE *)v15)
      {
        v20 = &v16[(_QWORD)v20];
      }
      else
      {
        v23 = &v5[~v15];
        do
        {
          v24 = *--v5;
          (v23--)[(_QWORD)v20] = v24;
        }
        while (v5 != (_BYTE *)v15);
        v5 = *(_BYTE **)(a1 + 64);
      }
      *(_QWORD *)(a1 + 64) = v20;
      *(_QWORD *)(a1 + 72) = v6;
      *(_QWORD *)(a1 + 80) = v22;
      if (v5)
        operator delete(v5);
      goto LABEL_32;
    }
LABEL_55:
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  }
  v8 = *(_BYTE **)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v8 >= v7)
    {
      v9 = *(_QWORD *)(a1 + 64);
      v10 = &v8[-v9];
      v11 = (uint64_t)&v8[-v9 + 1];
      if (v11 < 0)
        goto LABEL_55;
      v12 = v7 - v9;
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL)
        v13 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
        v14 = operator new(v13);
      else
        v14 = 0;
      v30 = &v10[(_QWORD)v14];
      v31 = (char *)v14 + v13;
      v10[(_QWORD)v14] = 95;
      v21 = (uint64_t)&v10[(_QWORD)v14 + 1];
      if (v8 != (_BYTE *)v9)
      {
        v32 = &v8[~v9];
        do
        {
          v33 = *--v8;
          (v32--)[(_QWORD)v14] = v33;
        }
        while (v8 != (_BYTE *)v9);
LABEL_50:
        v8 = *(_BYTE **)(a1 + 64);
        goto LABEL_52;
      }
      goto LABEL_51;
    }
  }
  else if ((unint64_t)v8 >= v7)
  {
    v25 = *(_QWORD *)(a1 + 64);
    v26 = &v8[-v25];
    v27 = (uint64_t)&v8[-v25 + 1];
    if (v27 < 0)
      goto LABEL_55;
    v28 = v7 - v25;
    if (2 * v28 > v27)
      v27 = 2 * v28;
    if (v28 >= 0x3FFFFFFFFFFFFFFFLL)
      v29 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    if (v29)
      v14 = operator new(v29);
    else
      v14 = 0;
    v30 = &v26[(_QWORD)v14];
    v31 = (char *)v14 + v29;
    v26[(_QWORD)v14] = 95;
    v21 = (uint64_t)&v26[(_QWORD)v14 + 1];
    if (v8 != (_BYTE *)v25)
    {
      v34 = &v8[~v25];
      do
      {
        v35 = *--v8;
        (v34--)[(_QWORD)v14] = v35;
      }
      while (v8 != (_BYTE *)v25);
      goto LABEL_50;
    }
LABEL_51:
    v14 = v30;
LABEL_52:
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = v21;
    *(_QWORD *)(a1 + 80) = v31;
    if (v8)
      operator delete(v8);
    goto LABEL_54;
  }
  *v8 = 95;
  v21 = (uint64_t)(v8 + 1);
LABEL_54:
  *(_QWORD *)(a1 + 72) = v21;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  std::basic_regex<char> *v4;
  int locale_low;
  std::string *v6;
  std::basic_regex<char>::value_type locale;
  int v8;
  int v9;
  char v10;
  char v11;
  char v12;
  char v13;
  std::string::value_type v14;
  char v15;
  std::string::value_type v16;
  uint64_t v17;

  v4 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            v6 = a4;
            locale = 10;
            goto LABEL_48;
          }
          locale = 10;
          goto LABEL_57;
        case 'r':
          if (a4)
          {
            v6 = a4;
            locale = 13;
            goto LABEL_48;
          }
          locale = 13;
          goto LABEL_57;
        case 't':
          if (a4)
          {
            v6 = a4;
            locale = 9;
            goto LABEL_48;
          }
          locale = 9;
          goto LABEL_57;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) != a3)
          {
            v8 = BYTE1(this->__traits_.__loc_.__locale_);
            if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
            {
              v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
              if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) != a3)
              {
                v9 = LOBYTE(v4->__traits_.__loc_.__locale_);
                if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38 || (v9 | 0x20u) - 97 < 6)
                  goto LABEL_23;
              }
            }
          }
          goto LABEL_62;
        case 'v':
          if (a4)
          {
            v6 = a4;
            locale = 11;
            goto LABEL_48;
          }
          locale = 11;
          break;
        case 'x':
LABEL_23:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_62;
          v10 = BYTE1(v4->__traits_.__loc_.__locale_);
          v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
            goto LABEL_28;
          v10 |= 0x20u;
          if ((v10 - 97) >= 6u)
            goto LABEL_62;
          v11 = -87;
LABEL_28:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_62;
          v12 = BYTE2(v4->__traits_.__loc_.__locale_);
          v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
            goto LABEL_33;
          v12 |= 0x20u;
          if ((v12 - 97) >= 6u)
            goto LABEL_62;
          v13 = -87;
LABEL_33:
          v14 = v13 + v12 + 16 * (v11 + v10);
          if (a4)
            std::string::operator=(a4, v14);
          else
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v14);
          return (std::basic_regex<char> *)((char *)v4 + 3);
        default:
          goto LABEL_43;
      }
      goto LABEL_57;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        v6 = a4;
        locale = 0;
        goto LABEL_48;
      }
      locale = 0;
LABEL_57:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          v6 = a4;
          locale = 12;
LABEL_48:
          std::string::operator=(v6, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        locale = 12;
        goto LABEL_57;
      }
LABEL_43:
      v17 = LOBYTE(this->__traits_.__loc_.__locale_);
      if ((_DWORD)v17 != 95 && ((v17 & 0x80) != 0 || (a1->__traits_.__ct_->__tab_[v17] & 0x500) == 0))
      {
        locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          v6 = a4;
          goto LABEL_48;
        }
        goto LABEL_57;
      }
LABEL_62:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_62;
    v15 = BYTE1(this->__traits_.__loc_.__locale_);
    if (((v15 & 0xDF) - 65) > 0x19u)
      goto LABEL_62;
    v16 = v15 & 0x1F;
    if (a4)
      std::string::operator=(a4, v16);
    else
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__s, a3, a4, a4 - a3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v13, *(_QWORD *)(a2 + 16), v10, (char *)v10 + size);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v13;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a1 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1C2209B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BB95EC](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C2209BBC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BB95EC](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C2209C08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a3, a4, a4 - a3);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a1 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a1;
      else
        v10 = *(_BYTE **)a1;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_1C2209D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 17;
  v4 = a1[18];
  if (v4 >= a1[19])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1C2209E68(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return MEMORY[0x1C3BB9B44](a1, 0x10F1C4061CF1F02);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char *current;
  char *last;
  char v6;
  char v7;
  uint64_t v8;
  _BOOL4 negate;
  std::string::size_type size;
  int v11;
  std::string::size_type v12;
  std::string *p_s;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v15;
  uint64_t v16;
  char *p_second;
  std::regex_traits<char> *p_traits;
  std::vector<std::pair<std::string, std::string>>::pointer v20;
  char v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::string::size_type v25;
  std::string *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  BOOL v29;
  int v30;
  size_t v31;
  char *v32;
  size_t v33;
  int v34;
  _BOOL4 v35;
  int v36;
  size_t v37;
  char *v38;
  size_t v39;
  int v40;
  BOOL v41;
  int v42;
  std::string::size_type v43;
  unsigned __int8 v44;
  std::vector<char>::pointer v45;
  unint64_t v46;
  int v47;
  std::regex_traits<char>::char_class_type v48;
  int v49;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v51;
  char *v52;
  std::vector<std::pair<std::string, std::string>>::pointer v53;
  std::vector<std::pair<std::string, std::string>>::pointer v54;
  unsigned int v55;
  int64_t v56;
  uint64_t v57;
  unint64_t v58;
  std::string::size_type v59;
  std::string *v60;
  uint64_t v61;
  unsigned __int8 *v62;
  BOOL v63;
  int v64;
  size_t v65;
  char *v66;
  size_t v67;
  int v68;
  _BOOL4 v69;
  int v70;
  size_t v71;
  char *v72;
  size_t v73;
  int v74;
  BOOL v75;
  std::vector<std::string>::pointer v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;
  unint64_t v80;
  __int128 v81;
  std::string::size_type v82;
  uint64_t v83;
  BOOL v84;
  std::string *v85;
  std::string::size_type v86;
  int v87;
  std::string *v88;
  std::string *v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  std::regex_traits<char>::char_class_type v93;
  int v94;
  std::vector<std::string>::pointer v95;
  uint64_t v96;
  int64_t v97;
  uint64_t v98;
  unint64_t v99;
  __int128 v100;
  std::string::size_type v101;
  uint64_t v102;
  BOOL v103;
  std::string *v104;
  std::string::size_type v105;
  int v106;
  std::string *v107;
  std::string *v108;
  uint64_t v109;
  int v110;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v113;
  std::regex_traits<char>::char_class_type neg_mask;
  int v115;
  std::__node<char> *first;
  int v117;
  char v118;
  char v119;
  uint64_t v120;
  _BOOL4 v121;
  _BOOL4 v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::string __p;
  __int16 v128;
  std::string v129;
  std::string __s;

  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v8 = 0;
    negate = this->__negate_;
    goto LABEL_238;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_67;
  v6 = *current;
  LOBYTE(v128) = *current;
  v7 = current[1];
  HIBYTE(v128) = v7;
  if (this->__icase_)
  {
    LOBYTE(v128) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(v128) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = v128;
  __s.__r_.__value_.__s.__data_[2] = 0;
  memset(&__p, 0, sizeof(__p));
  std::__get_collation_name(&v129, (const char *)&__s);
  __p = v129;
  size = HIBYTE(v129.__r_.__value_.__r.__words[2]);
  v11 = SHIBYTE(v129.__r_.__value_.__r.__words[2]);
  if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v129.__r_.__value_.__l.__size_;
  if (size)
    goto LABEL_11;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_11;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    v12 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      goto LABEL_16;
    p_s = &__s;
  }
  (*(void (**)(std::string *__return_ptr, const std::collate<char> *, std::string *, char *))(*(_QWORD *)this->__traits_.__col_ + 32))(&v129, this->__traits_.__col_, p_s, (char *)p_s + v12);
  if (v11 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v129;
  if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v129.__r_.__value_.__r.__words[2]) != 12 && HIBYTE(v129.__r_.__value_.__r.__words[2]) != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_11;
    }
    goto LABEL_180;
  }
  if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
  {
LABEL_180:
    std::string::operator=(&__p, &__s);
    goto LABEL_11;
  }
  *__p.__r_.__value_.__l.__data_ = 0;
  __p.__r_.__value_.__l.__size_ = 0;
LABEL_11:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
LABEL_16:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v43 = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v43)
      goto LABEL_18;
LABEL_67:
    negate = 0;
    v8 = 1;
    goto LABEL_68;
  }
  if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
    goto LABEL_67;
LABEL_18:
  begin = this->__digraphs_.__begin_;
  v15 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v15)
  {
    v16 = v15 >> 1;
    if ((unint64_t)(v15 >> 1) <= 1)
      v16 = 1;
    p_second = &begin->second;
    while (v128 != *(p_second - 1) || HIBYTE(v128) != *p_second)
    {
      p_second += 2;
      if (!--v16)
        goto LABEL_27;
    }
    goto LABEL_235;
  }
LABEL_27:
  p_traits = &this->__traits_;
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
  }
  else
  {
    std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v128, (char *)&v129);
    v20 = this->__ranges_.__begin_;
    v21 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    v22 = (char *)this->__ranges_.__end_ - (char *)v20;
    if (v22)
    {
      v23 = 0;
      v24 = v22 / 48;
      v118 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      else
        v25 = __s.__r_.__value_.__l.__size_;
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &__s;
      else
        v26 = (std::string *)__s.__r_.__value_.__r.__words[0];
      if (v24 <= 1)
        v27 = 1;
      else
        v27 = v22 / 48;
      v28 = (unsigned __int8 *)&v20->second.__r_.__value_.__r.__words[2] + 7;
      v29 = 1;
      while (1)
      {
        v30 = (char)*(v28 - 24);
        if (v30 >= 0)
          v31 = *(v28 - 24);
        else
          v31 = *(_QWORD *)(v28 - 39);
        if (v30 >= 0)
          v32 = (char *)(v28 - 47);
        else
          v32 = *(char **)(v28 - 47);
        if (v31 >= v25)
          v33 = v25;
        else
          v33 = v31;
        v34 = memcmp(v26, v32, v33);
        v35 = v25 >= v31;
        if (v34)
          v35 = v34 >= 0;
        if (v35)
        {
          v36 = (char)*v28;
          if (v36 >= 0)
            v37 = *v28;
          else
            v37 = *(_QWORD *)(v28 - 15);
          if (v36 >= 0)
            v38 = (char *)(v28 - 23);
          else
            v38 = *(char **)(v28 - 23);
          if (v25 >= v37)
            v39 = v37;
          else
            v39 = v25;
          v40 = memcmp(v38, v26, v39);
          v41 = v37 >= v25;
          if (v40)
            v41 = v40 >= 0;
          if (v41)
            break;
        }
        v29 = ++v23 < v24;
        v28 += 48;
        if (v27 == v23)
        {
          v42 = 0;
          negate = 0;
          goto LABEL_182;
        }
      }
      negate = 1;
      v42 = 5;
LABEL_182:
      p_traits = &this->__traits_;
      v21 = v118;
    }
    else
    {
      v29 = 0;
      v42 = 0;
      negate = 0;
    }
    if (v21 < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (v29)
      goto LABEL_213;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_217:
    if ((char)v128 < 0)
    {
      neg_mask = this->__neg_mask_;
    }
    else
    {
      mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      v113 = tab[v128];
      if (((v113 & mask) != 0 || v128 == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(v128) & 0x80000000) == 0
        && ((tab[HIBYTE(v128)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(v128) == 95))
      {
        goto LABEL_235;
      }
      neg_mask = this->__neg_mask_;
      if ((v113 & neg_mask) != 0 || v128 == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_234:
        v115 = negate;
LABEL_236:
        negate = v115;
        goto LABEL_237;
      }
    }
    if ((SHIBYTE(v128) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(v128)] & neg_mask) == 0)
      {
        v115 = 1;
        if (HIBYTE(v128) != 95 || (neg_mask & 0x80) == 0)
          goto LABEL_236;
      }
      goto LABEL_234;
    }
LABEL_235:
    v115 = 1;
    goto LABEL_236;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)p_traits, (char *)&v128, (char *)&v129);
  v95 = this->__equivalences_.__begin_;
  v96 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  v97 = (char *)this->__equivalences_.__end_ - (char *)v95;
  if (!v97)
  {
    if ((*((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    goto LABEL_217;
  }
  v98 = 0;
  v99 = v97 / 24;
  v100 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v101 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v101 = __s.__r_.__value_.__l.__size_;
  if (v99 <= 1)
    v102 = 1;
  else
    v102 = v97 / 24;
  v103 = 1;
  while (1)
  {
    v104 = &v95[v98];
    v105 = HIBYTE(v104->__r_.__value_.__r.__words[2]);
    v106 = (char)v105;
    if ((v105 & 0x80u) != 0)
      v105 = v104->__r_.__value_.__l.__size_;
    if (v101 != v105)
      goto LABEL_208;
    v107 = v106 >= 0 ? &v95[v98] : (std::string *)v104->__r_.__value_.__r.__words[0];
    if ((v96 & 0x80) == 0)
      break;
    v123 = v99;
    v126 = v96;
    v110 = memcmp((const void *)v100, v107, *((size_t *)&v100 + 1));
    v99 = v123;
    v96 = v126;
    if (!v110)
    {
      v42 = 5;
      negate = 1;
      goto LABEL_211;
    }
LABEL_208:
    v103 = ++v98 < v99;
    if (v98 == v102)
    {
      v42 = 0;
      goto LABEL_210;
    }
  }
  if (!(_DWORD)v96)
  {
    negate = 1;
    if (v103)
      goto LABEL_237;
    goto LABEL_217;
  }
  v108 = &__s;
  v109 = v96;
  do
  {
    if (v108->__r_.__value_.__s.__data_[0] != v107->__r_.__value_.__s.__data_[0])
      goto LABEL_208;
    v108 = (std::string *)((char *)v108 + 1);
    v107 = (std::string *)((char *)v107 + 1);
    --v109;
  }
  while (v109);
  negate = 1;
  v42 = 5;
LABEL_210:
  if ((v96 & 0x80) != 0)
LABEL_211:
    operator delete(__s.__r_.__value_.__l.__data_);
  if (!v103)
    goto LABEL_217;
LABEL_213:
  if (v42)
  {
LABEL_237:
    v8 = 2;
    goto LABEL_238;
  }
  v8 = 2;
LABEL_68:
  v44 = *a2->__current_;
  v129.__r_.__value_.__s.__data_[0] = v44;
  if (this->__icase_)
  {
    v44 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v44);
    v129.__r_.__value_.__s.__data_[0] = v44;
  }
  v45 = this->__chars_.__begin_;
  v46 = this->__chars_.__end_ - v45;
  if (v46)
  {
    if (v46 <= 1)
      v46 = 1;
    while (1)
    {
      v47 = *v45++;
      if (v47 == v44)
        break;
      if (!--v46)
        goto LABEL_75;
    }
LABEL_168:
    negate = 1;
    goto LABEL_238;
  }
LABEL_75:
  v48 = this->__neg_mask_;
  if (v48 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v44 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v44] & v48) == 0)
      v49 = (v44 == 95) & (v48 >> 7);
    else
      LOBYTE(v49) = 1;
    end = this->__neg_chars_.__end_;
    v51 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v44, end - this->__neg_chars_.__begin_);
    v52 = v51 ? v51 : end;
    if ((v49 & 1) == 0 && v52 == end)
      goto LABEL_168;
  }
  v53 = this->__ranges_.__begin_;
  v54 = this->__ranges_.__end_;
  if (v53 != v54)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v129, &v129.__r_.__value_.__s.__data_[1]);
      v53 = this->__ranges_.__begin_;
      v54 = this->__ranges_.__end_;
      v55 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else
    {
      v55 = 1;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v44;
    }
    v56 = (char *)v54 - (char *)v53;
    if (v56)
    {
      v124 = v8;
      v121 = negate;
      v57 = 0;
      v58 = v56 / 48;
      v119 = v55;
      if ((v55 & 0x80u) == 0)
        v59 = v55;
      else
        v59 = __s.__r_.__value_.__l.__size_;
      if ((v55 & 0x80u) == 0)
        v60 = &__s;
      else
        v60 = (std::string *)__s.__r_.__value_.__r.__words[0];
      if (v58 <= 1)
        v61 = 1;
      else
        v61 = v56 / 48;
      v62 = (unsigned __int8 *)&v53->second.__r_.__value_.__r.__words[2] + 7;
      v63 = 1;
      while (1)
      {
        v64 = (char)*(v62 - 24);
        if (v64 >= 0)
          v65 = *(v62 - 24);
        else
          v65 = *(_QWORD *)(v62 - 39);
        if (v64 >= 0)
          v66 = (char *)(v62 - 47);
        else
          v66 = *(char **)(v62 - 47);
        if (v65 >= v59)
          v67 = v59;
        else
          v67 = v65;
        v68 = memcmp(v60, v66, v67);
        v69 = v59 >= v65;
        if (v68)
          v69 = v68 >= 0;
        if (v69)
        {
          v70 = (char)*v62;
          if (v70 >= 0)
            v71 = *v62;
          else
            v71 = *(_QWORD *)(v62 - 15);
          if (v70 >= 0)
            v72 = (char *)(v62 - 23);
          else
            v72 = *(char **)(v62 - 23);
          if (v59 >= v71)
            v73 = v71;
          else
            v73 = v59;
          v74 = memcmp(v72, v60, v73);
          v75 = v71 >= v59;
          if (v74)
            v75 = v74 >= 0;
          if (v75)
            break;
        }
        v63 = ++v57 < v58;
        v62 += 48;
        if (v61 == v57)
        {
          negate = v121;
          goto LABEL_131;
        }
      }
      negate = 1;
LABEL_131:
      v8 = v124;
      if (v119 < 0)
LABEL_132:
        operator delete(__s.__r_.__value_.__l.__data_);
    }
    else
    {
      v63 = 0;
      if ((v55 & 0x80) != 0)
        goto LABEL_132;
    }
    if (v63)
      goto LABEL_238;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_163;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v129, &v129.__r_.__value_.__s.__data_[1]);
  v76 = this->__equivalences_.__begin_;
  v77 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  v78 = (char *)this->__equivalences_.__end_ - (char *)v76;
  if (!v78)
  {
    if ((*((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    goto LABEL_163;
  }
  v125 = v8;
  v79 = 0;
  v80 = v78 / 24;
  v81 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v82 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v82 = __s.__r_.__value_.__l.__size_;
  if (v80 <= 1)
    v83 = 1;
  else
    v83 = v78 / 24;
  v84 = 1;
  while (2)
  {
    v85 = &v76[v79];
    v86 = HIBYTE(v85->__r_.__value_.__r.__words[2]);
    v87 = (char)v86;
    if ((v86 & 0x80u) != 0)
      v86 = v85->__r_.__value_.__l.__size_;
    if (v82 != v86)
    {
LABEL_156:
      v84 = ++v79 < v80;
      if (v79 == v83)
      {
LABEL_157:
        v8 = v125;
        if ((v77 & 0x80) == 0)
          goto LABEL_159;
        goto LABEL_158;
      }
      continue;
    }
    break;
  }
  if (v87 >= 0)
    v88 = &v76[v79];
  else
    v88 = (std::string *)v85->__r_.__value_.__r.__words[0];
  if ((v77 & 0x80) != 0)
  {
    v122 = negate;
    v91 = v80;
    v120 = v83;
    v92 = memcmp((const void *)v81, v88, *((size_t *)&v81 + 1));
    v83 = v120;
    v80 = v91;
    negate = v122;
    if (!v92)
    {
      negate = 1;
      v8 = v125;
LABEL_158:
      operator delete(__s.__r_.__value_.__l.__data_);
      goto LABEL_159;
    }
    goto LABEL_156;
  }
  if ((_DWORD)v77)
  {
    v89 = &__s;
    v90 = v77;
    while (v89->__r_.__value_.__s.__data_[0] == v88->__r_.__value_.__s.__data_[0])
    {
      v89 = (std::string *)((char *)v89 + 1);
      v88 = (std::string *)((char *)v88 + 1);
      if (!--v90)
      {
        negate = 1;
        goto LABEL_157;
      }
    }
    goto LABEL_156;
  }
  negate = 1;
  v8 = v125;
LABEL_159:
  if (!v84)
  {
LABEL_163:
    if (v129.__r_.__value_.__s.__data_[0] < 0)
      goto LABEL_238;
    v93 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v129.__r_.__value_.__s.__data_[0]] & v93) == 0)
    {
      v94 = (v93 >> 7) & 1;
      if (v129.__r_.__value_.__s.__data_[0] != 95)
        v94 = 0;
      if (v94 != 1)
        goto LABEL_238;
    }
    goto LABEL_168;
  }
LABEL_238:
  if (negate == this->__negate_)
  {
    first = 0;
    v117 = -993;
  }
  else
  {
    a2->__current_ += v8;
    first = this->__first_;
    v117 = -995;
  }
  a2->__do_ = v117;
  a2->__node_ = first;
}

void sub_1C220A9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v5;
  void **v6;
  void *__p[2];
  unsigned __int8 v8;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a3, a4, a4 - a3);
  v5 = v8;
  if ((v8 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v8 & 0x80u) != 0)
    v5 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0)
    operator delete(__p[0]);
}

void sub_1C220AAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a3, a4, a4 - a3);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a1 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a1;
      else
        v10 = *(_BYTE **)a1;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_1C220ABA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BB95EC](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C220AD24(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  uint64_t (**v11)();

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    v11 = &off_1E7BEC898;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)v11;
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    v11 = &off_1E7BEC980;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &off_1E7BEC610;
  *(_QWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 16) = __i;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3BB9B44);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    v10 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7BEC980;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7BEC980;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24 * v2 + 16))
  {
    v4 = (unsigned __int8 **)(v3 + 24 * v2);
    v5 = *v4;
    v6 = v4[1] - *v4;
    v7 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v7 + v6;
        v8 = *(_QWORD *)(result + 8);
        goto LABEL_9;
      }
      v9 = v6;
      v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        v12 = *v5++;
        v11 = v12;
        v13 = *v10++;
        if (v11 != v13)
          break;
        if (!--v9)
          goto LABEL_8;
      }
    }
  }
  v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7BEC898;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7BEC898;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  char *v3;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  int v8;
  unsigned __int8 *v9;
  char *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int8 *v18;
  _BOOL4 v19;
  uint64_t v20;
  size_t v21;
  int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  int v25;
  unsigned __int8 *v26;
  size_t v27;
  size_t v28;
  std::basic_regex<char> *v29;
  int v31;
  int v32;

  v3 = (char *)a2;
  if (a2 != a3)
  {
    end = a1->__end_;
    marked_count = a1->__marked_count_;
    v9 = a2 + 1;
    v8 = *a2;
    if ((a2 + 1 != a3 || v8 != 36)
      && ((v8 - 46) > 0x2E || ((1 << (v8 - 46)) & 0x600000000001) == 0))
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
      goto LABEL_29;
    }
    v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(a1, a2, a3);
    if (v11 == v3)
    {
      if (*v3 == 46)
      {
        v12 = (std::__node<char> *)operator new();
        v13 = a1->__end_;
        first = v13->__first_;
        v12->__vftable = (std::__node<char>_vtbl *)&off_1E7BEC7D8;
        v12[1].__vftable = (std::__node<char>_vtbl *)first;
        v13->__first_ = v12;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
        goto LABEL_29;
      }
      v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, v3, (char *)a3);
    }
    if (v11 == v3 && v11 != (char *)a3)
    {
      if (v9 == a3 || *v3 != 92)
        return v3;
      v15 = *v9;
      if (v15 == 40)
      {
        v16 = (uint64_t)(v3 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        v17 = a1->__marked_count_;
        do
        {
          v18 = (unsigned __int8 *)v16;
          v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v16, a3);
        }
        while ((unsigned __int8 *)v16 != v18);
        if (v18 == a3 || v18 + 1 == a3 || *v18 != 92 || v18[1] != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        v11 = (char *)(v18 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v17);
      }
      else
      {
        v19 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v15);
        v20 = 2;
        if (!v19)
          v20 = 0;
        v11 = &v3[v20];
      }
    }
    v9 = (unsigned __int8 *)v11;
    if (v11 != v3)
    {
LABEL_29:
      if (v9 == a3)
        return (char *)a3;
      v21 = a1->__marked_count_ + 1;
      v22 = *v9;
      if (v22 == 42)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
        return (char *)(v9 + 1);
      }
      if (v9 + 1 == a3 || v22 != 92 || v9[1] != 123)
        return (char *)v9;
      v32 = 0;
      v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v9 + 2, a3, &v32);
      if (v23 == v9 + 2)
LABEL_45:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
      if (v23 != a3)
      {
        v24 = v23 + 1;
        v25 = *v23;
        if (v25 == 44)
        {
          v31 = -1;
          v26 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v23 + 1, a3, &v31);
          if (v26 != a3 && v26 + 1 != a3 && *v26 == 92 && v26[1] == 125)
          {
            v28 = v31;
            v27 = v32;
            if (v31 == -1)
            {
              v28 = -1;
            }
            else if (v31 < v32)
            {
              goto LABEL_45;
            }
            v3 = (char *)&v26[2 * (v26[1] == 125)];
            v29 = a1;
LABEL_53:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v29, v27, v28, end, marked_count + 1, v21, 1);
            return v3;
          }
        }
        else if (v24 != a3 && v25 == 92 && *v24 == 125)
        {
          v3 = (char *)(v23 + 2);
          v27 = v32;
          v29 = a1;
          v28 = v32;
          goto LABEL_53;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v3;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(std::basic_regex<char> *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;

  v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  int v6;
  int v7;
  char *v8;
  BOOL v9;
  char *v10;
  int v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t (**v19)();
  unsigned __int8 *result;
  int v21;
  BOOL v22;
  unsigned int marked_count;
  std::__owns_one_state<char> *v24;
  unsigned int v25;
  int *p_open_count;
  char *v27;
  char *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  char *v31;
  int v32;
  unsigned int v33;
  std::__node<char> *v34;
  std::__owns_one_state<char> *v35;
  std::__node<char> *v36;
  unsigned int v37;
  char *v38;
  int v39;
  int v40;
  std::basic_regex<char> *v41;
  BOOL v42;
  std::basic_regex<char> *v43;
  BOOL v44;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  int v46;
  std::__bracket_expression<char, std::regex_traits<char>> *v47;
  std::basic_regex<char> *v48;
  std::basic_regex<char> *v49;
  BOOL v50;
  std::basic_regex<char> v51;

  if (a2 == (unsigned __int8 *)a3)
    return a2;
  v6 = (char)*a2;
  v7 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == (unsigned __int8 *)a3)
        goto LABEL_32;
      v21 = a2[1];
      if (v21 == 66)
      {
        v22 = 1;
      }
      else
      {
        if (v21 != 98)
          goto LABEL_31;
        v22 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(a1, v22);
      return a2 + 2;
    }
    if (v6 != 94)
      goto LABEL_32;
    v15 = operator new();
    v16 = (a1->__flags_ & 0x5F0) == 1024;
    end = a1->__end_;
    first = end->__first_;
    v19 = &off_1E7BECA10;
LABEL_21:
    *(_QWORD *)v15 = v19;
    *(_QWORD *)(v15 + 8) = first;
    *(_BYTE *)(v15 + 16) = v16;
    end->__first_ = (std::__node<char> *)v15;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    return a2 + 1;
  }
  if (v6 == 36)
  {
    v15 = operator new();
    v16 = (a1->__flags_ & 0x5F0) == 1024;
    end = a1->__end_;
    first = end->__first_;
    v19 = &off_1E7BECA70;
    goto LABEL_21;
  }
  v9 = v6 == 40;
  v8 = (char *)(a2 + 1);
  v9 = !v9 || v8 == a3;
  if (!v9)
  {
    v10 = (char *)(a2 + 2);
    if (*v8 == 63 && v10 != a3)
    {
      v12 = *v10;
      if (v12 == 33)
      {
        std::regex_traits<char>::regex_traits(&v51.__traits_);
        memset(&v51.__flags_, 0, 40);
        v51.__flags_ = a1->__flags_;
        v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v51, a2 + 3, a3);
        marked_count = v51.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v51, 1, a1->__marked_count_);
        a1->__marked_count_ += marked_count;
        if (v13 == a3 || *v13 != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_30:
        std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&v51.__start_);
        std::locale::~locale(&v51.__traits_.__loc_);
        result = (unsigned __int8 *)(v13 + 1);
        if (v13 + 1 != (char *)a2)
          return result;
        goto LABEL_31;
      }
      if (v12 == 61)
      {
        std::regex_traits<char>::regex_traits(&v51.__traits_);
        memset(&v51.__flags_, 0, 40);
        v51.__flags_ = a1->__flags_;
        v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v51, a2 + 3, a3);
        v14 = v51.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v51, 0, a1->__marked_count_);
        a1->__marked_count_ += v14;
        if (v13 == a3 || *v13 != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        goto LABEL_30;
      }
    }
LABEL_31:
    v7 = *a2;
  }
LABEL_32:
  v24 = a1->__end_;
  v25 = a1->__marked_count_;
  if ((char)v7 <= 91)
  {
    result = a2;
    switch((char)v7)
    {
      case '$':
      case ')':
        return result;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_60;
      case '(':
        if (a2 + 1 == (unsigned __int8 *)a3)
          goto LABEL_97;
        if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
        {
          p_open_count = &a1->__open_count_;
          ++a1->__open_count_;
          v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(a1, a2 + 3, a3);
          if (v27 == a3)
            goto LABEL_97;
          v28 = v27;
          if (*v27 != 41)
            goto LABEL_97;
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
          v37 = a1->__marked_count_;
          p_open_count = &a1->__open_count_;
          ++a1->__open_count_;
          v38 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(a1, a2 + 1, a3);
          if (v38 == a3 || (v28 = v38, *v38 != 41))
LABEL_97:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v37);
        }
        --*p_open_count;
        v30 = (unsigned __int8 *)(v28 + 1);
        goto LABEL_57;
      case '*':
      case '+':
        goto LABEL_64;
      case '.':
        v34 = (std::__node<char> *)operator new();
        v35 = a1->__end_;
        v36 = v35->__first_;
        v34->__vftable = (std::__node<char>_vtbl *)&off_1E7BECDE0;
        v34[1].__vftable = (std::__node<char>_vtbl *)v36;
        v35->__first_ = v34;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
        goto LABEL_61;
      default:
        if ((char)v7 == 91)
        {
          v30 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, (char *)a2, a3);
          goto LABEL_57;
        }
        if ((char)v7 != 63)
          goto LABEL_60;
        goto LABEL_64;
    }
  }
  v29 = ((char)v7 - 92);
  if (v29 > 0x21)
  {
LABEL_60:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
LABEL_61:
    v30 = a2 + 1;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v30, (unsigned __int8 *)a3, v24, v25 + 1, a1->__marked_count_ + 1);
  }
  if (((1 << (v7 - 92)) & 0x300000006) != 0)
    return a2;
  if ((char)v7 != 92)
  {
    if (v29 == 31)
LABEL_64:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
    goto LABEL_60;
  }
  if (v7 != 92)
    return a2;
  v31 = (char *)(a2 + 1);
  if (a2 + 1 == (unsigned __int8 *)a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v32 = *v31;
  v33 = v32 - 48;
  if (v32 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v33);
LABEL_96:
    v30 = a2 + 2;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v30, (unsigned __int8 *)a3, v24, v25 + 1, a1->__marked_count_ + 1);
  }
  if ((v32 - 49) > 8)
    goto LABEL_76;
  v30 = a2 + 2;
  if (a2 + 2 == (unsigned __int8 *)a3)
  {
    v30 = (unsigned __int8 *)a3;
  }
  else
  {
    while (1)
    {
      v39 = *v30;
      if ((v39 - 48) > 9)
        break;
      if (v33 >= 0x19999999)
        goto LABEL_98;
      ++v30;
      v33 = v39 + 10 * v33 - 48;
      if (v30 == (unsigned __int8 *)a3)
      {
        v30 = (unsigned __int8 *)a3;
        break;
      }
    }
    if (!v33)
LABEL_98:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  if (v33 > v25)
    goto LABEL_98;
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v33);
  if (v30 == (unsigned __int8 *)v31)
  {
LABEL_76:
    v40 = *v31;
    if (v40 > 99)
    {
      if (v40 == 119)
      {
        v41 = a1;
        v42 = 0;
        goto LABEL_88;
      }
      if (v40 == 115)
      {
        v49 = a1;
        v50 = 0;
LABEL_94:
        started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v49, v50);
        v46 = started->__mask_ | 0x4000;
        goto LABEL_95;
      }
      if (v40 != 100)
      {
LABEL_89:
        v48 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
        if (v48 == (std::basic_regex<char> *)v31)
          v30 = a2;
        else
          v30 = (unsigned __int8 *)v48;
        goto LABEL_57;
      }
      v43 = a1;
      v44 = 0;
    }
    else
    {
      if (v40 != 68)
      {
        if (v40 != 83)
        {
          if (v40 == 87)
          {
            v41 = a1;
            v42 = 1;
LABEL_88:
            v47 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v41, v42);
            v47->__mask_ |= 0x500u;
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v47, 95);
            goto LABEL_96;
          }
          goto LABEL_89;
        }
        v49 = a1;
        v50 = 1;
        goto LABEL_94;
      }
      v43 = a1;
      v44 = 1;
    }
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v43, v44);
    v46 = started->__mask_ | 0x400;
LABEL_95:
    started->__mask_ = v46;
    goto LABEL_96;
  }
LABEL_57:
  result = a2;
  if (v30 != a2)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v30, (unsigned __int8 *)a3, v24, v25 + 1, a1->__marked_count_ + 1);
  return result;
}

void sub_1C220BC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3BB95EC](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1C220BC94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3BB9B44);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
  uint64_t v4;
  std::__node<char> *first;

  v4 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v4 = &off_1E7BEC868;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_BYTE *)(v4 + 40) = a2;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  uint64_t v8;
  std::__node<char> *first;
  std::__shared_weak_count *cntrl;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v8 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v8 = &off_1E7BEC7A8;
  *(_QWORD *)(v8 + 8) = first;
  std::locale::locale((std::locale *)(v8 + 16), &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *(_QWORD *)(v8 + 56) = a2->__start_.__ptr_;
  *(_QWORD *)(v8 + 64) = cntrl;
  if (cntrl)
  {
    p_shared_owners = (unint64_t *)&cntrl->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *(_QWORD *)(v8 + 72) = a2->__end_;
  *(_DWORD *)(v8 + 80) = a4;
  *(_BYTE *)(v8 + 84) = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E7BEC7A8;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E7BEC7A8;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1C3BB9B44);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  std::vector<std::csub_match>::size_type v4;
  uint64_t v5;
  const char *v6;
  BOOL v7;
  char v8;
  std::vector<std::csub_match>::pointer begin;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  std::sub_match<const char *> *v15;
  uint64_t v16;
  std::vector<std::csub_match> __p;
  std::vector<std::csub_match>::value_type v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  std::vector<std::csub_match>::value_type v23;
  char v24;
  uint64_t v25;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  memset(&v23, 0, 17);
  v24 = 0;
  v25 = 0;
  memset(&__p, 0, sizeof(__p));
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v5 = *(_QWORD *)(a2 + 16);
  v19.first = *(const char **)(a2 + 24);
  v19.second = v19.first;
  v19.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v19);
  v20 = v5;
  v21 = v5;
  v22 = 0;
  v23 = v19;
  v25 = v5;
  v24 = 1;
  v6 = *(const char **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v7 = v6 == *(const char **)(a2 + 8);
  else
    v7 = 0;
  v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v11 = *(_DWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = 2;
  v14 = 1;
  do
  {
    v15 = &begin[v14];
    v16 = v12 + 24 * (v11 + v13 - 2);
    *(std::pair<const char *, const char *> *)v16 = v15->std::pair<const char *, const char *>;
    *(_BYTE *)(v16 + 16) = v15->matched;
    v14 = v13;
  }
  while (v10 > v13++);
LABEL_14:
  operator delete(begin);
}

void sub_1C220C0C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7BEC868;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7BEC868;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_17;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  v7 = *(v4 - 1);
  v8 = *v4;
  v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  v11 = (_DWORD)v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    v12 = 0;
    v13 = -993;
  }
  else
  {
    v12 = *(_QWORD *)(result + 8);
    v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 80) = v12;
  return result;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3BB9B44);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__end_state<char>::~__end_state()
{
  JUMPOUT(0x1C3BB9B44);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void snlp::common::exception::SNLPAssetException::~SNLPAssetException(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t getAssetDirectoryGenerationNumber(const std::__fs::filesystem::path *a1)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  NSObject *v12;
  const std::__fs::filesystem::path *v13;
  unsigned __int8 v14;
  uint64_t v15;
  unsigned int v16;
  const std::string **v17;
  std::string::size_type size;
  std::sub_match<const char *> *p_p;
  char v20;
  void *v21;
  unint64_t v22;
  std::string *v23;
  std::string *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  int v29;
  std::runtime_error *exception;
  std::string *v31;
  __int128 v32;
  std::string __str;
  std::regex_traits<char> v34[2];
  std::__shared_weak_count *v35;
  std::string __p;
  unsigned __int8 *v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE v41[8];
  uint64_t *v42;
  std::string buf[2];
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  _BYTE v52[24];
  _BYTE *v53;
  std::string v54;
  _QWORD v55[21];

  v55[20] = *MEMORY[0x1E0C80C00];
  std::__fs::filesystem::__status(a1, 0);
  if (v54.__r_.__value_.__s.__data_[0] == 255 || v54.__r_.__value_.__s.__data_[0] == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(buf, a1->__pn_.__r_.__value_.__l.__data_, a1->__pn_.__r_.__value_.__l.__size_);
    else
      buf[0] = a1->__pn_;
    v31 = std::string::insert(buf, 0, "Config file not found at path: ");
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v54);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
  }
  std::ifstream::basic_ifstream(&v54);
  v53 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parse<std::ifstream &>((uint64_t)v41, &v54, (uint64_t)v52);
  v3 = v53;
  if (v53 == v52)
  {
    v4 = 4;
    v3 = v52;
  }
  else
  {
    if (!v53)
      goto LABEL_10;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_10:
  v37 = v41;
  v38 = 0;
  v39 = 0;
  v40 = 0x8000000000000000;
  v5 = v41[0];
  if (v41[0] == 1)
  {
    v7 = v42 + 1;
    v8 = v42[1];
    v38 = v42 + 1;
    if (!v8)
      goto LABEL_20;
    v9 = v42 + 1;
    do
    {
      v10 = std::string::compare((const std::string *)(v8 + 32), "snlp_gen");
      v11 = (uint64_t *)(v8 + 8);
      if (v10 >= 0)
      {
        v11 = (uint64_t *)v8;
        v9 = (uint64_t *)v8;
      }
      v8 = *v11;
    }
    while (*v11);
    if (v9 == v7 || std::string::compare((const std::string *)(v9 + 4), "snlp_gen") >= 1)
LABEL_20:
      v9 = v7;
    v38 = v9;
    v5 = v41[0];
  }
  else
  {
    if (v41[0] == 2)
    {
      v6 = v42[1];
      v39 = v6;
      buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
      buf[0].__r_.__value_.__l.__size_ = 0;
      buf[1].__r_.__value_.__r.__words[0] = 0x8000000000000000;
LABEL_26:
      buf[0].__r_.__value_.__r.__words[2] = v6;
      goto LABEL_29;
    }
    v40 = 1;
  }
  buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
  *(_OWORD *)&buf[0].__r_.__value_.__r.__words[1] = 0uLL;
  buf[1].__r_.__value_.__r.__words[0] = 0x8000000000000000;
  if (v5 == 1)
  {
    buf[0].__r_.__value_.__l.__size_ = (std::string::size_type)(v42 + 1);
  }
  else
  {
    if (v5 == 2)
    {
      v6 = v42[1];
      goto LABEL_26;
    }
    buf[1].__r_.__value_.__r.__words[0] = 1;
  }
LABEL_29:
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>,(decltype(nullptr))0>(&v37, (unsigned __int8 **)buf))
  {
    SNLPOSLoggerForCategory(0);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = a1;
      else
        v13 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
      _os_log_impl(&dword_1C2196000, v12, OS_LOG_TYPE_DEFAULT, "Config file exists and is parseable, but key 'snlp_gen' was not found. Path: %s", (uint8_t *)buf, 0xCu);
    }

    v14 = 0;
    v15 = 0;
    v16 = 0;
    goto LABEL_59;
  }
  v17 = (const std::string **)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v37);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get_impl<std::string,0>(&__p, v17);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v34, "^gen(\\d+)$");
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  memset(buf, 0, 41);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = (std::sub_match<const char *> *)&__p;
  else
    p_p = (std::sub_match<const char *> *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  v20 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(p_p, (std::sub_match<const char *> *)((char *)p_p + size), (uint64_t)buf, (uint64_t)v34);
  v21 = (void *)buf[0].__r_.__value_.__r.__words[0];
  if ((v20 & 1) != 0)
  {
    v22 = 0xAAAAAAAAAAAAAAABLL
        * ((uint64_t)(buf[0].__r_.__value_.__l.__size_ - buf[0].__r_.__value_.__r.__words[0]) >> 3);
    if (v22 <= 1)
      v23 = buf;
    else
      v23 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v23[1].__r_.__value_.__s.__data_[16])
    {
      if (v22 <= 1)
        v24 = buf;
      else
        v24 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
      std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__str, v24[1].__r_.__value_.__l.__data_, (char *)v24[1].__r_.__value_.__l.__size_, v24[1].__r_.__value_.__l.__size_ - v24[1].__r_.__value_.__r.__words[0]);
    }
    else
    {
      memset(&__str, 0, sizeof(__str));
    }
    v29 = std::stoul(&__str, 0, 10);
    v14 = v29;
    v16 = v29 & 0xFFFFFF00;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v15 = 0x100000000;
    if (!v21)
      goto LABEL_52;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    if (!buf[0].__r_.__value_.__r.__words[0])
      goto LABEL_52;
  }
  operator delete(v21);
LABEL_52:
  v25 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  std::locale::~locale(&v34[0].__loc_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_59:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v42, v41[0]);
  v54.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F40];
  *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + *(_QWORD *)(v54.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1C3BB970C](&v54.__r_.__value_.__r.__words[2]);
  std::istream::~istream();
  MEMORY[0x1C3BB9A90](v55);
  return v15 & 0x100000000 | v14 | v16 & 0xFFFFFF00;
}

void sub_1C220C8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, __int128 a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,unsigned __int8 a34,uint64_t a35,std::string *a36,uint64_t a37,std::string::size_type a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,void *a54)
{
  __int128 *v54;
  void *v55;
  _OWORD *v56;
  std::runtime_error *exception;
  std::string *v60;
  __int128 v61;

  if (v55)
    operator delete(v55);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::locale::~locale((std::locale *)&a16);
  if (a29 < 0)
    operator delete(__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a35, a34);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (*((char *)v54 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&a16, *(const std::string::value_type **)v54, *((_QWORD *)v54 + 1));
    }
    else
    {
      a16 = *v54;
      a17 = *((_QWORD *)v54 + 2);
    }
    v60 = std::string::insert((std::string *)&a16, 0, "Could not process config file at path: ");
    v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    a38 = v60->__r_.__value_.__r.__words[2];
    *v56 = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)&a36);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
  }
  std::ifstream::~ifstream(&a54);
  _Unwind_Resume(a1);
}

void sub_1C220CA78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;

  __cxa_free_exception(v39);
  __cxa_end_catch();
  JUMPOUT(0x1C220CAD4);
}

void sub_1C220CAE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,char *a48)
{
  char *v48;
  char *v49;
  uint64_t v50;

  v49 = a48;
  if (a48 == v48)
  {
    v50 = 4;
    v49 = &a45;
  }
  else
  {
    if (!a48)
      goto LABEL_6;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
LABEL_6:
  JUMPOUT(0x1C220C9CCLL);
}

void sub_1C220CB18(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(std::sub_match<const char *> *a1, std::sub_match<const char *> *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t result;
  std::vector<std::csub_match> __p[2];
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  memset(__p, 0, 41);
  v7 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a4, a1, a2, __p, 4160);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(a3, (uint64_t)a1, (uint64_t)a2, (uint64_t *)__p, 0);
  if (__p[0].__begin_)
    operator delete(__p[0].__begin_);
  if (!v7)
    return 0;
  if (!*(_BYTE *)(a3 + 88))
    return 1;
  result = 0;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  return result;
}

void sub_1C220CBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[5];

  if (result != a2)
  {
    v5 = result;
    v6 = (unint64_t *)(a3 + 2);
    v7 = a3[1];
    do
    {
      if (v7 >= *v6)
      {
        v8 = (uint64_t)(v7 - *a3) >> 4;
        if ((unint64_t)(v8 + 1) >> 60)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v9 = *v6 - *a3;
        v10 = v9 >> 3;
        if (v9 >> 3 <= (unint64_t)(v8 + 1))
          v10 = v8 + 1;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v11 = 0xFFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        v15[4] = v6;
        v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v11);
        v13 = &v12[16 * v8];
        v15[0] = v12;
        v15[1] = v13;
        v15[3] = &v12[16 * v14];
        *v13 = *(_BYTE *)v5;
        *((_QWORD *)v13 + 1) = *(_QWORD *)(v5 + 8);
        *(_BYTE *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        v15[2] = v13 + 16;
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a3, v15);
        v7 = a3[1];
        result = std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v15);
      }
      else
      {
        *(_BYTE *)v7 = *(_BYTE *)v5;
        *(_QWORD *)(v7 + 8) = *(_QWORD *)(v5 + 8);
        *(_BYTE *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        v7 += 16;
      }
      a3[1] = v7;
      v5 += 16;
    }
    while (v5 != a2);
  }
  return result;
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (uint64_t)v4 - 8;
      do
      {
        v7 = (void *)(v6 - 8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v6, *(unsigned __int8 *)(v6 - 8));
        v6 -= 16;
      }
      while (v7 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(nlohmann::detail::exception *a1, int a2, uint64_t a3)
{
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  const char *v15;
  void *__p[2];
  unsigned __int8 v17;
  void *v18[2];
  char v19;
  std::string v20;
  std::string v21;
  __int128 v22;
  int64_t v23;

  std::string::basic_string[abi:ne180100]<0>(v18, "type_error");
  nlohmann::detail::exception::name(&v20, (uint64_t)v18, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if ((v17 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v7 = v17;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v20, (const std::string::value_type *)v6, v7);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = *(char *)(a3 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)a3;
  else
    v11 = *(const std::string::value_type **)a3;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a3 + 23);
  else
    v12 = *(_QWORD *)(a3 + 8);
  v13 = std::string::append(&v21, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v23 = v13->__r_.__value_.__r.__words[2];
  v22 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (v19 < 0)
    operator delete(v18[0]);
  if (v23 >= 0)
    v15 = (const char *)&v22;
  else
    v15 = (const char *)v22;
  nlohmann::detail::exception::exception(a1, a2, v15);
  *(_QWORD *)a1 = &off_1E7BEC548;
  if (SHIBYTE(v23) < 0)
    operator delete((void *)v22);
}

void sub_1C220CF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::type_error::~type_error(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E7BEC5E8;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E7BEC5E8;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
  JUMPOUT(0x1C3BB9B44);
}

void nlohmann::detail::exception::~exception(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E7BEC5E8;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E7BEC5E8;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
  JUMPOUT(0x1C3BB9B44);
}

const char *nlohmann::detail::exception::what(const std::runtime_error *this)
{
  return std::runtime_error::what(this + 1);
}

void nlohmann::detail::exception::name(std::string *a1, uint64_t a2, int a3)
{
  std::string *v5;
  __int128 v6;
  std::string *p_p;
  std::string::size_type size;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  std::string __p;
  std::string v13;
  std::string v14;
  std::string v15;

  std::operator+<char>();
  v5 = std::string::append(&v13, ".");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v9 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v15, "] ");
  *a1 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_1C220D144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 41) < 0)
    operator delete(*(void **)(v26 - 64));
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

nlohmann::detail::exception *nlohmann::detail::exception::exception(nlohmann::detail::exception *this, int a2, const char *a3)
{
  *(_QWORD *)this = &off_1E7BEC5E8;
  *((_DWORD *)this + 2) = a2;
  std::runtime_error::runtime_error((std::runtime_error *)this + 1, a3);
  return this;
}

void sub_1C220D1E4(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(nlohmann::detail::exception *a1, int a2, uint64_t a3)
{
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  const char *v15;
  void *__p[2];
  unsigned __int8 v17;
  void *v18[2];
  char v19;
  std::string v20;
  std::string v21;
  __int128 v22;
  int64_t v23;

  std::string::basic_string[abi:ne180100]<0>(v18, "invalid_iterator");
  nlohmann::detail::exception::name(&v20, (uint64_t)v18, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if ((v17 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v7 = v17;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v20, (const std::string::value_type *)v6, v7);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = *(char *)(a3 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)a3;
  else
    v11 = *(const std::string::value_type **)a3;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a3 + 23);
  else
    v12 = *(_QWORD *)(a3 + 8);
  v13 = std::string::append(&v21, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v23 = v13->__r_.__value_.__r.__words[2];
  v22 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (v19 < 0)
    operator delete(v18[0]);
  if (v23 >= 0)
    v15 = (const char *)&v22;
  else
    v15 = (const char *)v22;
  nlohmann::detail::exception::exception(a1, a2, v15);
  *(_QWORD *)a1 = &off_1E7BEC5C0;
  if (SHIBYTE(v23) < 0)
    operator delete((void *)v22);
}

void sub_1C220D390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::invalid_iterator::~invalid_iterator(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E7BEC5E8;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E7BEC5E8;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~parser(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer((void **)(a1 + 40));
  v2 = *(_QWORD **)(a1 + 24);
  if (v2 == (_QWORD *)a1)
  {
    v3 = 4;
    v2 = (_QWORD *)a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(std::string *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  unsigned int v6;
  char __str[8];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      v6 = *v4;
      if (v6 > 0x1F)
      {
        std::string::push_back(this, v6);
      }
      else
      {
        v8 = 0;
        *(_QWORD *)__str = 0;
        snprintf(__str, 9uLL, "<U+%.4X>", v6);
        std::string::append(this, __str);
      }
      ++v4;
    }
    while (v4 != a3);
  }
}

void sub_1C220D5F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(std::string *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  uint64_t v13;
  std::string *v14;
  __int128 v15;
  std::string *p_p;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  void *v24;
  char *v25;
  std::string *v26;
  __int128 v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  char *v30;
  std::string *v31;
  __int128 v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string __p;
  std::string v36;
  std::string v37;
  std::string v38;
  __int128 v39;
  int64_t v40;

  std::string::basic_string[abi:ne180100]<0>(a1, "syntax error ");
  v8 = *(unsigned __int8 *)(a4 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8)
  {
    std::operator+<char>();
    v9 = std::string::append(&v38, " ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v40 = v9->__r_.__value_.__r.__words[2];
    v39 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0)
      v11 = (const std::string::value_type *)&v39;
    else
      v11 = (const std::string::value_type *)v39;
    if (v40 >= 0)
      v12 = HIBYTE(v40);
    else
      v12 = *((_QWORD *)&v39 + 1);
    std::string::append(a1, v11, v12);
    if (SHIBYTE(v40) < 0)
      operator delete((void *)v39);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
  }
  std::string::append(a1, "- ");
  v13 = *(int *)(a2 + 32);
  if ((_DWORD)v13 == 14)
  {
    std::string::basic_string[abi:ne180100]<0>(&v36, *(char **)(a2 + 144));
    v14 = std::string::append(&v36, "; last read: '");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(&__p, *(unsigned __int8 **)(a2 + 96), *(unsigned __int8 **)(a2 + 104));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v18 = std::string::append(&v37, (const std::string::value_type *)p_p, size);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v38, "'");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v40 = v20->__r_.__value_.__r.__words[2];
    v39 = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0)
      v22 = (const std::string::value_type *)&v39;
    else
      v22 = (const std::string::value_type *)v39;
    if (v40 >= 0)
      v23 = HIBYTE(v40);
    else
      v23 = *((_QWORD *)&v39 + 1);
    std::string::append(a1, v22, v23);
    if (SHIBYTE(v40) < 0)
      operator delete((void *)v39);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      v24 = (void *)v36.__r_.__value_.__r.__words[0];
      goto LABEL_52;
    }
LABEL_49:
    if (!a3)
      return;
    goto LABEL_53;
  }
  if (v13 > 0x10)
    v25 = "unknown token";
  else
    v25 = off_1E7BED088[v13];
  std::string::basic_string[abi:ne180100]<0>(&v38, v25);
  v26 = std::string::insert(&v38, 0, "unexpected ");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v40 = v26->__r_.__value_.__r.__words[2];
  v39 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0)
    v28 = (const std::string::value_type *)&v39;
  else
    v28 = (const std::string::value_type *)v39;
  if (v40 >= 0)
    v29 = HIBYTE(v40);
  else
    v29 = *((_QWORD *)&v39 + 1);
  std::string::append(a1, v28, v29);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_49;
  v24 = (void *)v38.__r_.__value_.__r.__words[0];
LABEL_52:
  operator delete(v24);
  if (!a3)
    return;
LABEL_53:
  if (a3 > 0x10)
    v30 = "unknown token";
  else
    v30 = off_1E7BED088[a3];
  std::string::basic_string[abi:ne180100]<0>(&v38, v30);
  v31 = std::string::insert(&v38, 0, "; expected ");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v40 = v31->__r_.__value_.__r.__words[2];
  v39 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0)
    v33 = (const std::string::value_type *)&v39;
  else
    v33 = (const std::string::value_type *)v39;
  if (v40 >= 0)
    v34 = HIBYTE(v40);
  else
    v34 = *((_QWORD *)&v39 + 1);
  std::string::append(a1, v33, v34);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
}

void sub_1C220D964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  if (*(char *)(v34 - 41) < 0)
    operator delete(*(void **)(v34 - 64));
  if (a33 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v33 + 23) < 0)
    operator delete(*(void **)v33);
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parse_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(nlohmann::detail::exception *a1, uint64_t *a2, uint64_t a3)
{
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  const char *v32;
  void *__p[2];
  int64_t v34;
  void *v35[2];
  char v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  __int128 v42;
  int64_t v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;

  std::string::basic_string[abi:ne180100]<0>(v35, "parse_error");
  nlohmann::detail::exception::name(&v37, (uint64_t)v35, 101);
  v6 = std::string::append(&v37, "parse error");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v45, a2[2] + 1);
  v8 = std::string::insert(&v45, 0, " at line ");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v46, ", column ");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v44, a2[1]);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v44;
  else
    v12 = (std::string *)v44.__r_.__value_.__r.__words[0];
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  else
    size = v44.__r_.__value_.__l.__size_;
  v14 = std::string::append(&v47, (const std::string::value_type *)v12, size);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v34 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (v34 >= 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if (v34 >= 0)
    v17 = HIBYTE(v34);
  else
    v17 = (std::string::size_type)__p[1];
  v18 = std::string::append(&v38, (const std::string::value_type *)v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v39, ": ");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v47, "");
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v47;
  else
    v22 = (std::string *)v47.__r_.__value_.__r.__words[0];
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  else
    v23 = v47.__r_.__value_.__l.__size_;
  v24 = std::string::append(&v40, (const std::string::value_type *)v22, v23);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = *(char *)(a3 + 23);
  if (v26 >= 0)
    v27 = (const std::string::value_type *)a3;
  else
    v27 = *(const std::string::value_type **)a3;
  if (v26 >= 0)
    v28 = *(unsigned __int8 *)(a3 + 23);
  else
    v28 = *(_QWORD *)(a3 + 8);
  v29 = std::string::append(&v41, v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v43 = v29->__r_.__value_.__r.__words[2];
  v42 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (v36 < 0)
    operator delete(v35[0]);
  v31 = *a2;
  if (v43 >= 0)
    v32 = (const char *)&v42;
  else
    v32 = (const char *)v42;
  nlohmann::detail::exception::exception(a1, 101, v32);
  *(_QWORD *)a1 = &off_1E7BEC570;
  *((_QWORD *)a1 + 4) = v31;
  if (SHIBYTE(v43) < 0)
    operator delete((void *)v42);
}

void sub_1C220DD60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (*(char *)(v54 - 169) < 0)
    operator delete(*(void **)(v54 - 192));
  _Unwind_Resume(exception_object);
}

void sub_1C220DE7C()
{
  JUMPOUT(0x1C220DE44);
}

void sub_1C220DE84()
{
  JUMPOUT(0x1C220DE54);
}

void sub_1C220DE8C()
{
  JUMPOUT(0x1C220DE64);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>(uint64_t result, uint64_t a2)
{
  void *exception;
  void *v4;

  *(_BYTE *)(result + 88) = 1;
  if (*(_BYTE *)(result + 128))
  {
    exception = __cxa_allocate_exception(0x28uLL);
    v4 = (void *)nlohmann::detail::parse_error::parse_error((uint64_t)exception, a2);
  }
  return result;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 144), *(unsigned __int8 *)(a1 + 136));
  v2 = *(_QWORD **)(a1 + 120);
  if (v2 == (_QWORD *)(a1 + 96))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 96);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = *(void **)(a1 + 56);
  if (v4)
    operator delete(v4);
  v5 = *(void **)(a1 + 32);
  if (v5)
    operator delete(v5);
  v6 = *(void **)(a1 + 8);
  if (v6)
  {
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>(uint64_t result, uint64_t a2)
{
  void *exception;
  void *v4;

  *(_BYTE *)(result + 40) = 1;
  if (*(_BYTE *)(result + 41))
  {
    exception = __cxa_allocate_exception(0x28uLL);
    v4 = (void *)nlohmann::detail::parse_error::parse_error((uint64_t)exception, a2);
  }
  return result;
}

uint64_t nlohmann::detail::parse_error::parse_error(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E7BEC5E8;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const std::runtime_error *)(a2 + 16));
  *(_QWORD *)a1 = &off_1E7BEC570;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

void nlohmann::detail::parse_error::~parse_error(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E7BEC5E8;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E7BEC5E8;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
  JUMPOUT(0x1C3BB9B44);
}

void nlohmann::detail::out_of_range::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(nlohmann::detail::exception *a1, int a2, uint64_t a3)
{
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  const char *v15;
  void *__p[2];
  unsigned __int8 v17;
  void *v18[2];
  char v19;
  std::string v20;
  std::string v21;
  __int128 v22;
  int64_t v23;

  std::string::basic_string[abi:ne180100]<0>(v18, "out_of_range");
  nlohmann::detail::exception::name(&v20, (uint64_t)v18, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if ((v17 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v7 = v17;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v20, (const std::string::value_type *)v6, v7);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = *(char *)(a3 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)a3;
  else
    v11 = *(const std::string::value_type **)a3;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a3 + 23);
  else
    v12 = *(_QWORD *)(a3 + 8);
  v13 = std::string::append(&v21, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v23 = v13->__r_.__value_.__r.__words[2];
  v22 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (v19 < 0)
    operator delete(v18[0]);
  if (v23 >= 0)
    v15 = (const char *)&v22;
  else
    v15 = (const char *)v22;
  nlohmann::detail::exception::exception(a1, a2, v15);
  *(_QWORD *)a1 = &off_1E7BEC598;
  if (SHIBYTE(v23) < 0)
    operator delete((void *)v22);
}

void sub_1C220E1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::out_of_range>(uint64_t result, uint64_t a2)
{
  void *exception;
  void *v4;

  *(_BYTE *)(result + 40) = 1;
  if (*(_BYTE *)(result + 41))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v4 = (void *)nlohmann::detail::out_of_range::out_of_range((uint64_t)exception, a2);
  }
  return result;
}

uint64_t nlohmann::detail::out_of_range::out_of_range(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E7BEC5E8;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const std::runtime_error *)(a2 + 16));
  *(_QWORD *)a1 = &off_1E7BEC598;
  return a1;
}

void nlohmann::detail::out_of_range::~out_of_range(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E7BEC5E8;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E7BEC5E8;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
  JUMPOUT(0x1C3BB9B44);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(uint64_t a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 32), *(unsigned __int8 *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

BOOL std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 < 0;
  else
    return v4 < v5;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint(int64x2_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  __int32 v5;
  __int32 v6;
  __int128 v8;
  uint64_t v9;

  v2 = 0;
  LODWORD(v3) = 0;
  v9 = *MEMORY[0x1E0C80C00];
  v8 = xmmword_1C230B510;
  while (1)
  {
    v4 = *(_DWORD *)((char *)&v8 + v2);
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1);
    v5 = a1[1].i32[1];
    v6 = v5 - 48;
    if ((v5 - 48) >= 0xA)
      break;
LABEL_7:
    v3 = ((v6 << v4) + v3);
    v2 += 4;
    if (v2 == 16)
      return v3;
  }
  if ((v5 - 65) <= 5)
  {
    v6 = v5 - 55;
    goto LABEL_7;
  }
  if ((v5 - 97) <= 5)
  {
    v6 = v5 - 87;
    goto LABEL_7;
  }
  return 0xFFFFFFFFLL;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  std::string *v6;
  _DWORD *v7;
  int v8;
  uint64_t result;

  v6 = (std::string *)(a1 + 80);
  std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
  if (!a3)
    return 1;
  v7 = &a2[a3];
  while (1)
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
    v8 = *(_DWORD *)(a1 + 20);
    if (*a2 > v8 || v8 > a2[1])
      break;
    std::string::push_back(v6, v8);
    a2 += 2;
    if (a2 == v7)
      return 1;
  }
  result = 0;
  *(_QWORD *)(a1 + 104) = "invalid string: ill-formed UTF-8 byte";
  return result;
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t **v22;
  char v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t **v28;
  void **v29;
  void **v30;
  void *v31;
  uint64_t *v32;
  BOOL v33;
  uint64_t *v34;
  void *v35;
  nlohmann::detail::exception *exception;
  nlohmann::detail::exception *v37;
  nlohmann::detail::exception *v38;
  unint64_t v39;
  char *v40;
  std::string *v41;
  std::string *v42;
  __int128 v43;
  __int128 v44;
  std::string::size_type v45;
  unint64_t v46;
  unsigned __int8 *v47;
  uint64_t *v48;
  uint64_t **v49;
  unint64_t v50;
  char v51[8];
  uint64_t *v52;
  uint64_t v53[3];

  v2 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v2 - 8)
    && (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()(*(_QWORD *)(a1 + 120), ((unint64_t)(v2 - *(_QWORD *)(a1 + 8)) >> 3) - 1, 1) & 1) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v51, (unsigned __int8 *)(a1 + 136));
    v3 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 16) - 8);
    v4 = *v3;
    *v3 = v51[0];
    v51[0] = v4;
    v5 = (uint64_t *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = v52;
    v52 = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v52, v4);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = v6 - 8;
  *(_QWORD *)(a1 + 16) = v6 - 8;
  --*(_QWORD *)(a1 + 40);
  if (v7 != v6 - 8)
  {
    v9 = *(unsigned __int8 **)(v6 - 16);
    if (v9)
    {
      v10 = *v9;
      if ((v10 - 1) <= 1)
      {
        v47 = v9;
        v48 = 0;
        v49 = 0;
        v50 = 0x8000000000000000;
        if (v10 == 2)
        {
          v49 = (uint64_t **)**((_QWORD **)v9 + 1);
        }
        else if (v10 == 1)
        {
          v48 = (uint64_t *)**((_QWORD **)v9 + 1);
        }
        else
        {
          v50 = 0;
        }
        while (1)
        {
          v11 = *(unsigned __int8 **)(v8 - 8);
          v45 = 0;
          v44 = (unint64_t)v11;
          v46 = 0x8000000000000000;
          v12 = *v11;
          if (v12 == 2)
          {
            v45 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8);
          }
          else if (v12 == 1)
          {
            *((_QWORD *)&v44 + 1) = *((_QWORD *)v11 + 1) + 8;
          }
          else
          {
            v46 = 1;
          }
          if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>(&v47, (unsigned __int8 **)&v44))
          {
            return;
          }
          if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(&v47) == 9)
            break;
          nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++(&v47);
          v8 = *(_QWORD *)(a1 + 16);
        }
        v13 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 16) - 8);
        if (v47 != v13)
        {
          exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v44, "iterator does not fit current value");
          nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 202, (uint64_t)&v44);
        }
        v14 = *v13;
        if (v14 != 2)
        {
          if (v14 == 1)
          {
            v15 = v48;
            v16 = (uint64_t **)*((_QWORD *)v13 + 1);
            v17 = (uint64_t *)v48[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (uint64_t *)*v17;
              }
              while (v17);
            }
            else
            {
              v32 = v48;
              do
              {
                v18 = (uint64_t *)v32[2];
                v33 = *v18 == (_QWORD)v32;
                v32 = v18;
              }
              while (!v33);
            }
            if (*v16 == v48)
              *v16 = v18;
            v34 = v16[1];
            v16[2] = (uint64_t *)((char *)v16[2] - 1);
            std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v34, v15);
            std::__destroy_at[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>((uint64_t)(v15 + 4));
            operator delete(v15);
            return;
          }
          if ((v14 - 3) > 5)
          {
            v38 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
            v39 = *v13;
            if (v39 > 9)
              v40 = "number";
            else
              v40 = off_1E7BED038[v39];
            v41 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v53, v40);
            v42 = std::string::insert(v41, 0, "cannot use erase() with ");
            v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
            v45 = v42->__r_.__value_.__r.__words[2];
            v44 = v43;
            v42->__r_.__value_.__l.__size_ = 0;
            v42->__r_.__value_.__r.__words[2] = 0;
            v42->__r_.__value_.__r.__words[0] = 0;
            nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v38, 307, (uint64_t)&v44);
          }
          if (v50)
          {
            v37 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(&v44, "iterator out of range");
            nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v37, 205, (uint64_t)&v44);
          }
          if (v14 == 8)
          {
            v30 = (void **)(v13 + 8);
            v29 = (void **)*((_QWORD *)v13 + 1);
            v35 = *v29;
            if (*v29)
            {
              v29[1] = v35;
              v31 = v35;
              goto LABEL_47;
            }
          }
          else
          {
            if (v14 != 3)
            {
LABEL_49:
              *v13 = 0;
              return;
            }
            v30 = (void **)(v13 + 8);
            v29 = (void **)*((_QWORD *)v13 + 1);
            if (*((char *)v29 + 23) < 0)
            {
              v31 = *v29;
LABEL_47:
              operator delete(v31);
              v29 = (void **)*v30;
            }
          }
          operator delete(v29);
          *v30 = 0;
          goto LABEL_49;
        }
        v19 = v49;
        v20 = *((_QWORD *)v13 + 1);
        v21 = *(uint64_t ***)(v20 + 8);
        v22 = v49 + 2;
        if (v49 + 2 != v21)
        {
          do
          {
            v19 = v22;
            v23 = *(_BYTE *)v22;
            v24 = v19[1];
            *(_BYTE *)v19 = 0;
            v19[1] = 0;
            v25 = *((unsigned __int8 *)v19 - 16);
            *((_BYTE *)v19 - 16) = v23;
            LOBYTE(v44) = v25;
            v26 = (uint64_t)*(v19 - 1);
            *(v19 - 1) = v24;
            *((_QWORD *)&v44 + 1) = v26;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v44 + 1, v25);
            v22 = v19 + 2;
          }
          while (v19 + 2 != v21);
          v21 = *(uint64_t ***)(v20 + 8);
        }
        if (v21 != v19)
        {
          v27 = v21 - 1;
          do
          {
            v28 = v27 - 1;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v27, *((unsigned __int8 *)v27 - 8));
            v27 -= 2;
          }
          while (v28 != v19);
        }
        *(_QWORD *)(v20 + 8) = v19;
      }
    }
  }
}

void sub_1C220EA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v16 - 33) < 0)
  {
    operator delete(*(void **)(v16 - 56));
    if ((v15 & 1) != 0)
      goto LABEL_8;
  }
  else if (v15)
  {
LABEL_8:
    __cxa_free_exception(v14);
  }
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(uint64_t a1, __int128 *a2)
{
  int v4;
  uint64_t **v5;
  char *v6;
  int v7;
  uint64_t *v8;
  char v9[8];
  uint64_t *v10;
  char v11;
  unsigned __int8 v12;
  std::string *v13;
  __int128 *v14;

  v12 = 3;
  v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>((uint64_t)a2);
  v4 = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()(*(_QWORD *)(a1 + 120), (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3, 4);
  v11 = v4;
  std::vector<BOOL>::push_back((uint64_t *)(a1 + 56), &v11);
  if (v4 && *(_QWORD *)(*(_QWORD *)(a1 + 16) - 8))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, (unsigned __int8 *)(a1 + 136));
    v5 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 8);
    v14 = a2;
    v6 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, a2, &v14);
    v7 = v6[56];
    v6 += 56;
    *v6 = v9[0];
    v9[0] = v7;
    v8 = (uint64_t *)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v10;
    v10 = v8;
    *(_QWORD *)(a1 + 80) = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v7);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v13, v12);
}

void sub_1C220EB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t *a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t **v12;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&a10, a9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v12, a12);
  _Unwind_Resume(a1);
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE v14[8];
  uint64_t *v15;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v2 - 8);
  v3 = v2 - 8;
  if (!v4)
  {
    *(_QWORD *)(a1 + 16) = v3;
    goto LABEL_5;
  }
  if (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()(*(_QWORD *)(a1 + 120), ((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3) - 1, 3))
  {
    *(_QWORD *)(a1 + 16) -= 8;
LABEL_5:
    --*(_QWORD *)(a1 + 40);
    return;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v14, (unsigned __int8 *)(a1 + 136));
  v5 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 16) - 8);
  v6 = *v5;
  *v5 = v14[0];
  v14[0] = v6;
  v7 = (uint64_t *)*((_QWORD *)v5 + 1);
  *((_QWORD *)v5 + 1) = v15;
  v15 = v7;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v15, v6);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8 - 8;
  --*(_QWORD *)(a1 + 40);
  if (v9 != v8 - 8)
  {
    v10 = *(_QWORD *)(v8 - 16);
    if (*(_BYTE *)v10 == 2)
    {
      v11 = *(_QWORD *)(v10 + 8);
      v12 = *(_QWORD *)(v11 + 8);
      v13 = *(unsigned __int8 *)(v12 - 16);
      v12 -= 16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v12 + 8), v13);
      *(_QWORD *)(v11 + 8) = v12;
    }
  }
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::out_of_range>(uint64_t result, uint64_t a2)
{
  void *exception;
  void *v4;

  *(_BYTE *)(result + 88) = 1;
  if (*(_BYTE *)(result + 128))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v4 = (void *)nlohmann::detail::out_of_range::out_of_range((uint64_t)exception, a2);
  }
  return result;
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(unsigned __int8 **a1, unsigned __int8 a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 v17;
  uint64_t *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unsigned __int8 v31;
  unint64_t v32;
  _QWORD v33[5];

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) != 0)
  {
    v31 = 4;
    v32 = a2;
    if ((std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)a1[15], (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v3 = a1[2];
      if (a1[1] == v3)
      {
        v9 = v31;
        v10 = (uint64_t **)&v30;
        v11 = (uint64_t *)v32;
        v31 = 0;
        v32 = 0;
        v12 = (uint64_t)*a1;
        v13 = **a1;
        *(_BYTE *)v12 = v9;
        v29 = v13;
        v14 = *(_QWORD *)(v12 + 8);
        *(_QWORD *)(v12 + 8) = v11;
        v30 = v14;
LABEL_11:
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v10, v13);
        goto LABEL_20;
      }
      v4 = *((_QWORD *)v3 - 1);
      if (v4)
      {
        if (*(_BYTE *)v4 == 2)
        {
          v5 = *(uint64_t **)(v4 + 8);
          v6 = v5[1];
          v7 = v5[2];
          if (v6 >= v7)
          {
            v21 = (uint64_t)(v6 - *v5) >> 4;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 60)
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            v23 = v7 - *v5;
            if (v23 >> 3 > v22)
              v22 = v23 >> 3;
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
              v24 = 0xFFFFFFFFFFFFFFFLL;
            else
              v24 = v22;
            v33[4] = v5 + 2;
            v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v24);
            v26 = (unsigned __int8 *)&v25[16 * v21];
            v33[0] = v25;
            v33[1] = v26;
            v33[3] = &v25[16 * v27];
            *v26 = v31;
            *((_QWORD *)v26 + 1) = v32;
            v31 = 0;
            v32 = 0;
            v33[2] = v26 + 16;
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(v5, v33);
            v8 = v5[1];
            std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v33);
          }
          else
          {
            *(_BYTE *)v6 = v31;
            *(_QWORD *)(v6 + 8) = v32;
            v31 = 0;
            v32 = 0;
            v8 = v6 + 16;
            v5[1] = v6 + 16;
          }
          v5[1] = v8;
          goto LABEL_20;
        }
        v15 = (unint64_t)(a1[8] - 1);
        v16 = *(_QWORD *)&a1[7][(v15 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v15;
        if (((v16 >> v15) & 1) != 0)
        {
          v17 = v31;
          v10 = (uint64_t **)&v28;
          v18 = (uint64_t *)v32;
          v31 = 0;
          v32 = 0;
          v19 = a1[10];
          v13 = *v19;
          *v19 = v17;
          v20 = *((_QWORD *)v19 + 1);
          *((_QWORD *)v19 + 1) = v18;
          v28 = v20;
          goto LABEL_11;
        }
      }
    }
LABEL_20:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v32, v31);
  }
}

void sub_1C220EF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t **v14;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()(uint64_t a1, int a2, char a3)
{
  char v4;
  int v5;

  v5 = a2;
  v4 = a3;
  if (!a1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *, char *))(*(_QWORD *)a1 + 48))(a1, &v5, &v4);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  size_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t **v20;
  char *v21;
  uint64_t *v22;
  __int128 v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  _QWORD *v34;
  char v35;
  char *v36;
  char **v37;
  char **v38;
  char v39;
  char *v40;
  char *v41;

  v3 = *a2;
  *(_BYTE *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  switch(v3)
  {
    case 1:
      v11 = (_QWORD *)*((_QWORD *)a2 + 1);
      v4 = (uint64_t)operator new(0x18uLL);
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)v4 = v4 + 8;
      v14 = (_QWORD *)*v11;
      v12 = v11 + 1;
      v13 = v14;
      if (v14 == v12)
        goto LABEL_38;
      break;
    case 2:
      v26 = (uint64_t *)*((_QWORD *)a2 + 1);
      v4 = (uint64_t)operator new(0x18uLL);
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)v4 = 0;
      v27 = *v26;
      v28 = v26[1];
      v34 = (_QWORD *)v4;
      v35 = 0;
      v29 = v28 - v27;
      if (v28 != v27)
      {
        if (v29 < 0)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v29 >> 4);
        *(_QWORD *)v4 = v30;
        *(_QWORD *)(v4 + 8) = v30;
        *(_QWORD *)(v4 + 16) = &v30[16 * v31];
        v40 = v30;
        v41 = v30;
        v36 = (char *)(v4 + 16);
        v37 = &v40;
        v38 = &v41;
        v32 = v30;
        v39 = 0;
        do
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v32, v27);
          v27 += 16;
          v32 = v41 + 16;
          v41 += 16;
        }
        while (v27 != v28);
        v39 = 1;
        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v36);
        *(_QWORD *)(v4 + 8) = v32;
      }
      goto LABEL_38;
    case 3:
      v4 = (uint64_t)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(*((_QWORD *)a2 + 1));
      goto LABEL_38;
    case 4:
      v4 = a2[8];
      goto LABEL_38;
    case 5:
    case 6:
    case 7:
      v4 = *((_QWORD *)a2 + 1);
      goto LABEL_38;
    case 8:
      v5 = *((_QWORD *)a2 + 1);
      v4 = (uint64_t)operator new(0x20uLL);
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)v4 = 0;
      v7 = *(const void **)v5;
      v6 = *(_QWORD *)(v5 + 8);
      v8 = v6 - *(_QWORD *)v5;
      if (v6 != *(_QWORD *)v5)
      {
        if ((v8 & 0x8000000000000000) != 0)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v9 = (char *)operator new(v6 - *(_QWORD *)v5);
        *(_QWORD *)v4 = v9;
        *(_QWORD *)(v4 + 8) = v9;
        v10 = &v9[v8];
        *(_QWORD *)(v4 + 16) = &v9[v8];
        memmove(v9, v7, v8);
        *(_QWORD *)(v4 + 8) = v10;
      }
      *(_WORD *)(v4 + 24) = *(_WORD *)(v5 + 24);
LABEL_38:
      *(_QWORD *)(a1 + 8) = v4;
      return a1;
    default:
      return a1;
  }
  while (1)
  {
    v15 = *(_QWORD *)(v4 + 8);
    v16 = (_QWORD *)(v4 + 8);
    if (*(_QWORD *)v4 == v4 + 8)
      goto LABEL_16;
    v17 = *(_QWORD **)(v4 + 8);
    v18 = (_QWORD *)(v4 + 8);
    if (v15)
    {
      do
      {
        v16 = v17;
        v17 = (_QWORD *)v17[1];
      }
      while (v17);
    }
    else
    {
      do
      {
        v16 = (_QWORD *)v18[2];
        v19 = *v16 == (_QWORD)v18;
        v18 = v16;
      }
      while (v19);
    }
    if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v16 + 4, v13 + 4))
    {
LABEL_16:
      if (!v15)
      {
        v34 = (_QWORD *)(v4 + 8);
        v20 = (uint64_t **)(v4 + 8);
LABEL_22:
        v21 = (char *)operator new(0x48uLL);
        v22 = (uint64_t *)v21;
        v36 = v21;
        v37 = (char **)(v4 + 8);
        LOBYTE(v38) = 0;
        if (*((char *)v13 + 55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v21 + 32), (const std::string::value_type *)v13[4], v13[5]);
        }
        else
        {
          v23 = *((_OWORD *)v13 + 2);
          *((_QWORD *)v21 + 6) = v13[6];
          *((_OWORD *)v21 + 2) = v23;
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v22 + 7, v13 + 7);
        LOBYTE(v38) = 1;
        std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at((uint64_t **)v4, (uint64_t)v34, v20, v22);
        v36 = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v36);
        goto LABEL_26;
      }
      v34 = v16;
      v20 = (uint64_t **)(v16 + 1);
    }
    else
    {
      v20 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(v4, &v34, v13 + 4);
    }
    if (!*v20)
      goto LABEL_22;
LABEL_26:
    v24 = (_QWORD *)v13[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v13[2];
        v19 = *v25 == (_QWORD)v13;
        v13 = v25;
      }
      while (!v19);
    }
    v13 = v25;
    if (v25 == v12)
      goto LABEL_38;
  }
}

void sub_1C220F284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  void *v9;

  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t **v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t **v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(uint64_t ****)(a1 + 16);
    v3 = **(uint64_t ****)(a1 + 8);
    if (v2 != v3)
    {
      v4 = v2 - 1;
      do
      {
        v5 = v4 - 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v4, *((unsigned __int8 *)v4 - 8));
        v4 -= 2;
      }
      while (v5 != v3);
    }
  }
  return a1;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(uint64_t *a1, unsigned __int8 a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 v17;
  uint64_t *v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t *v30;
  char v31;
  uint64_t *v32;
  unsigned __int8 v33;
  uint64_t *v34;
  _QWORD v35[5];

  if (((*(_QWORD *)(a1[4] + (((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*((_BYTE *)a1 + 40) - 1)) & 1) != 0)
  {
    v33 = a2;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v34, a2);
    v3 = (unsigned __int8 *)a1[2];
    if ((unsigned __int8 *)a1[1] == v3)
    {
      v10 = v33;
      v11 = v34;
      v33 = 0;
      v34 = 0;
      v12 = *a1;
      v13 = *(unsigned __int8 *)*a1;
      *(_BYTE *)v12 = v10;
      v31 = v13;
      v14 = *(uint64_t **)(v12 + 8);
      *(_QWORD *)(v12 + 8) = v11;
      v32 = v14;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v32, v13);
      v9 = *a1;
    }
    else
    {
      v4 = *((_QWORD *)v3 - 1);
      if (!v4)
        goto LABEL_11;
      if (*(_BYTE *)v4 == 2)
      {
        v5 = *(uint64_t **)(v4 + 8);
        v6 = v5[1];
        v7 = v5[2];
        if (v6 >= v7)
        {
          v22 = (uint64_t)(v6 - *v5) >> 4;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 60)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v24 = v7 - *v5;
          if (v24 >> 3 > v23)
            v23 = v24 >> 3;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
            v25 = 0xFFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          v35[4] = v5 + 2;
          v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v25);
          v27 = &v26[16 * v22];
          v35[0] = v26;
          v35[1] = v27;
          v35[3] = &v26[16 * v28];
          *v27 = v33;
          *((_QWORD *)v27 + 1) = v34;
          v33 = 0;
          v34 = 0;
          v35[2] = v27 + 16;
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(v5, v35);
          v8 = v5[1];
          std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v35);
        }
        else
        {
          *(_BYTE *)v6 = v33;
          *(_QWORD *)(v6 + 8) = v34;
          v33 = 0;
          v34 = 0;
          v8 = v6 + 16;
          v5[1] = v6 + 16;
        }
        v5[1] = v8;
        v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
        goto LABEL_20;
      }
      v15 = a1[8] - 1;
      v16 = *(_QWORD *)(a1[7] + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8));
      a1[8] = v15;
      if (((v16 >> v15) & 1) != 0)
      {
        v17 = v33;
        v18 = v34;
        v33 = 0;
        v34 = 0;
        v19 = (unsigned __int8 *)a1[10];
        v20 = *v19;
        *v19 = v17;
        v21 = (uint64_t *)*((_QWORD *)v19 + 1);
        *((_QWORD *)v19 + 1) = v18;
        v30 = v21;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v30, v20);
        v9 = a1[10];
      }
      else
      {
LABEL_11:
        v9 = 0;
      }
    }
LABEL_20:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v34, v33);
    return v9;
  }
  return 0;
}

void sub_1C220F58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t **v14;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v14, a14);
  _Unwind_Resume(a1);
}

unsigned __int8 *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(unsigned __int8 **a1)
{
  unsigned __int8 *result;
  int v3;
  nlohmann::detail::exception *exception;
  _QWORD v5[3];

  result = *a1;
  v3 = *result;
  if (v3 == 2)
    return a1[2];
  if (v3 == 1)
    return a1[1] + 56;
  if (a1[3])
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "cannot get value");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 214, (uint64_t)v5);
  }
  return result;
}

void sub_1C220F654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t uint32SetAsString@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  std::string __p;
  _QWORD v8[2];
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
  v4 = (_QWORD *)(a1 + 16);
  while (1)
  {
    v4 = (_QWORD *)*v4;
    if (!v4)
      break;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" ", 1);
    std::ostream::operator<<();
  }
  std::stringbuf::str();
  nlv4_inference_orchestrator::trees::trimWhitespace(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v8[0] = *MEMORY[0x1E0DE4F50];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v9[0] = v5;
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3BB9A90](&v11);
}

void sub_1C220F794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::trees::trimWhitespace(std::string *a1, const std::string *a2)
{
  void **v4;
  int v5;
  const std::string *v6;
  std::string::size_type size;
  size_t v8;
  std::string::size_type v9;
  const std::string *v10;
  std::string::size_type v11;
  std::string::size_type v12;
  uint64_t v14;
  void *__p[2];
  unsigned __int8 v16;
  char v17;

  v4 = __p;
  std::string::basic_string[abi:ne180100]<0>(__p, " \f\n\r\t\v");
  v5 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  if (v5 >= 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  if ((v16 & 0x80u) == 0)
  {
    v8 = v16;
  }
  else
  {
    v4 = (void **)__p[0];
    v8 = (size_t)__p[1];
  }
  if (!size)
    goto LABEL_22;
  if (v8)
  {
    v9 = size;
    v10 = v6;
    while (memchr(v4, v10->__r_.__value_.__s.__data_[0], v8))
    {
      v10 = (const std::string *)((char *)v10 + 1);
      if (!--v9)
        goto LABEL_22;
    }
  }
  else
  {
    v10 = v6;
  }
  v11 = (char *)v10 - (char *)v6;
  if (v11 == -1)
  {
LABEL_22:
    std::string::basic_string[abi:ne180100]<0>(a1, "");
  }
  else
  {
    while (size)
    {
      v12 = size;
      if (v8)
      {
        if (memchr(v4, *((char *)&v6[-1].__r_.__value_.__r.__words[2] + size-- + 7), v8))
          continue;
      }
      v14 = v12 - 1;
      goto LABEL_24;
    }
    v14 = -1;
LABEL_24:
    std::string::basic_string(a1, a2, v11, v14 - v11 + 1, (std::allocator<char> *)&v17);
  }
  if ((char)v16 < 0)
    operator delete(__p[0]);
}

void sub_1C220F910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void shaHashForFileContent(uint64_t *a1@<X0>, const void *a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  NSObject *v21;
  NSObject *v22;
  CC_SHA1_CTX *v23;
  uint64_t *v24;
  uint64_t *v25;
  char *v26;
  void *v27;
  uint64_t i;
  id v29;
  NSObject *v30;
  NSObject *v31;
  CC_SHA1_CTX *p_c;
  uint64_t *v33;
  void *v34;
  uint64_t *v35;
  char *v36;
  NSObject *v37;
  NSObject *v38;
  const char *v39;
  uint64_t *v40;
  CC_SHA1_CTX c;
  uint8_t buf[12];
  __int16 v43;
  uint64_t *v44;
  char v45;
  uint8_t v46[4];
  const char *v47;
  __int16 v48;
  uint64_t *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (*((char *)a1 + 23) >= 0)
    v10 = a1;
  else
    v10 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v10, 4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "fileExistsAtPath:isDirectory:", v11, 0);

  if ((v13 & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0C99DB0], "inputStreamWithFileAtPath:", v11);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14;
    if (v14)
    {
      objc_msgSend(v14, "open");
      CC_SHA1_Init(&c);
      v16 = 0;
      while (1)
      {
        v17 = objc_msgSend(v15, "read:maxLength:", a2, a3);
        v18 = v17;
        if (v17 < 1)
          break;
        CC_SHA1_Update(&c, a2, v17);
        v16 += v18;
        if (v16 >= 0x80000)
          goto LABEL_27;
      }
      if ((v17 & 0x8000000000000000) == 0)
      {
LABEL_27:
        CC_SHA1_Final(buf, &c);
        objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithCapacity:", 40);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        for (i = 0; i != 20; ++i)
          objc_msgSend(v27, "appendFormat:", CFSTR("%02x"), buf[i]);
        v29 = objc_retainAutorelease(v27);
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)a5, (char *)objc_msgSend(v29, "UTF8String"));
        *(_BYTE *)(a5 + 24) = 1;

        goto LABEL_57;
      }
      v35 = (uint64_t *)*a4;
      if (v35 >= 8)
      {
        SNLPOSLoggerForCategory(4);
        v37 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v46 = 136315394;
          v47 = "<UNDEFINED_COMPONENT>";
          v48 = 2048;
          v49 = v35;
          _os_log_impl(&dword_1C2196000, v37, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", v46, 0x16u);
        }

        v36 = "<UNDEFINED_COMPONENT>";
      }
      else
      {
        v36 = off_1E7BED840[v35];
      }
      std::string::basic_string[abi:ne180100]<0>(buf, v36);
      SNLPOSLoggerForCategory(4);
      v38 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      {
        v39 = (const char *)buf;
        if (v45 < 0)
          v39 = *(const char **)buf;
        if (*((char *)a1 + 23) >= 0)
          v40 = a1;
        else
          v40 = (uint64_t *)*a1;
        *(_DWORD *)v46 = 136315394;
        v47 = v39;
        v48 = 2080;
        v49 = v40;
        _os_log_impl(&dword_1C2196000, v38, OS_LOG_TYPE_DEBUG, "[%s] Error, input stream for file could not be read. Hash for file content cannot be calculated: %s", v46, 0x16u);
      }

      *(_BYTE *)a5 = 0;
      *(_BYTE *)(a5 + 24) = 0;
      if (v45 < 0)
      {
        v34 = *(void **)buf;
        goto LABEL_56;
      }
    }
    else
    {
      v25 = (uint64_t *)*a4;
      if (v25 >= 8)
      {
        SNLPOSLoggerForCategory(4);
        v30 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
          v43 = 2048;
          v44 = v25;
          _os_log_impl(&dword_1C2196000, v30, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
        }

        v26 = "<UNDEFINED_COMPONENT>";
      }
      else
      {
        v26 = off_1E7BED840[v25];
      }
      std::string::basic_string[abi:ne180100]<0>(&c, v26);
      SNLPOSLoggerForCategory(4);
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
      {
        p_c = &c;
        if ((c.Nl & 0x80000000) != 0)
          p_c = *(CC_SHA1_CTX **)&c.h0;
        if (*((char *)a1 + 23) >= 0)
          v33 = a1;
        else
          v33 = (uint64_t *)*a1;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = p_c;
        v43 = 2080;
        v44 = v33;
        _os_log_impl(&dword_1C2196000, v31, OS_LOG_TYPE_DEBUG, "[%s] Error, input stream for file could not be created. Hash for file content cannot be calculated: %s", buf, 0x16u);
      }

      *(_BYTE *)a5 = 0;
      *(_BYTE *)(a5 + 24) = 0;
      if (SHIBYTE(c.Nl) < 0)
      {
        v34 = *(void **)&c.h0;
LABEL_56:
        operator delete(v34);
      }
    }
LABEL_57:

  }
  else
  {
    v19 = (uint64_t *)*a4;
    if (v19 >= 8)
    {
      SNLPOSLoggerForCategory(4);
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
        v43 = 2048;
        v44 = v19;
        _os_log_impl(&dword_1C2196000, v21, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
      }

      v20 = "<UNDEFINED_COMPONENT>";
    }
    else
    {
      v20 = off_1E7BED840[v19];
    }
    std::string::basic_string[abi:ne180100]<0>(&c, v20);
    SNLPOSLoggerForCategory(4);
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      v23 = &c;
      if ((c.Nl & 0x80000000) != 0)
        v23 = *(CC_SHA1_CTX **)&c.h0;
      if (*((char *)a1 + 23) >= 0)
        v24 = a1;
      else
        v24 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v23;
      v43 = 2080;
      v44 = v24;
      _os_log_impl(&dword_1C2196000, v22, OS_LOG_TYPE_DEBUG, "[%s] Error, file doesn't exist. Hash for file content cannot be calculated: %s", buf, 0x16u);
    }

    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 24) = 0;
    if (SHIBYTE(c.Nl) < 0)
      operator delete(*(void **)&c.h0);
  }

}

void sub_1C220FEA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void shaHashForRecursivePath(char *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  const std::__fs::filesystem::path *v5;
  std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::element_type *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::element_type *v14;
  const std::__fs::filesystem::directory_entry *v15;
  BOOL v16;
  _BOOL4 v17;
  int v19;
  _BOOL4 v20;
  id v21;
  std::string::size_type v22;
  char *v23;
  char **v24;
  char **v25;
  char *v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  std::string *p_p;
  std::__fs::filesystem::path *p_buf;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *cntrl;
  uint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t **v41;
  uint64_t v42;
  unint64_t v43;
  std::__fs::filesystem::path::__string_view v44;
  uint64_t *v45;
  uint64_t **v46;
  uint64_t **v47;
  _QWORD *v48;
  std::string::size_type v49;
  std::string::size_type v50;
  std::string::size_type v51;
  uint64_t **v52;
  char *v53;
  uint64_t *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  std::string::size_type v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t **v61;
  id v63;
  std::string __p;
  char v65;
  std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::element_type *v66;
  std::__shared_weak_count *v67;
  char v68;
  std::__fs::filesystem::recursive_directory_iterator v69;
  std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::element_type *v70;
  std::__shared_weak_count *v71;
  BOOL v72;
  uint64_t **v73;
  uint64_t *v74;
  uint64_t v75;
  _BYTE v76[12];
  __int16 v77;
  std::__fs::filesystem::path *v78;
  std::string p;
  std::string v80;
  std::__fs::filesystem::path buf;
  uint64_t v82;
  std::__fs::filesystem::path::__string_view v83;
  std::__fs::filesystem::path::__string_view v84;

  v82 = *MEMORY[0x1E0C80C00];
  v5 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&p, a1);
  std::__fs::filesystem::__status(v5, 0);
  if (SHIBYTE(p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(p.__r_.__value_.__l.__data_);
  if (__p.__r_.__value_.__s.__data_[0] != 2)
  {
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)a3 = a3 + 8;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    return;
  }
  v74 = 0;
  v75 = 0;
  v73 = &v74;
  v63 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DF0]), "initWithLength:", 0x40000);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&p, a1);
  MEMORY[0x1C3BB997C](&v70, &p, 0, 0);
  if (SHIBYTE(p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(p.__r_.__value_.__l.__data_);
  v6 = v70;
  v7 = v71;
  if (!v71)
  {
    v69.__imp_.__ptr_ = v70;
    v69.__imp_.__cntrl_ = 0;
    v69.__rec_ = v72;
LABEL_18:
    v66 = 0;
    v67 = 0;
    v68 = 0;
    goto LABEL_19;
  }
  p_shared_owners = (unint64_t *)&v71->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = v71;
  v69.__imp_.__ptr_ = v6;
  v69.__imp_.__cntrl_ = v7;
  v69.__rec_ = v72;
  if (!v71)
    goto LABEL_18;
  v11 = (unint64_t *)&v71->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  v66 = 0;
  v67 = 0;
  v68 = 0;
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_19:
  v14 = v66;
  while (v69.__imp_.__ptr_ != v14)
  {
    v15 = std::__fs::filesystem::recursive_directory_iterator::__dereference(&v69);
    std::__fs::filesystem::path::filename[abi:ne180100](&v15->__p_, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&p, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      p = __p;
    if (SHIBYTE(p.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = p.__r_.__value_.__l.__size_ == 11
         && *(_QWORD *)p.__r_.__value_.__l.__data_ == 0x6A2E6769666E6F63
         && *(_QWORD *)(p.__r_.__value_.__r.__words[0] + 3) == 0x6E6F736A2E676966;
      operator delete(p.__r_.__value_.__l.__data_);
    }
    else if (SHIBYTE(p.__r_.__value_.__r.__words[2]) == 11)
    {
      v16 = p.__r_.__value_.__r.__words[0] == 0x6A2E6769666E6F63
         && *(std::string::size_type *)((char *)p.__r_.__value_.__r.__words + 3) == 0x6E6F736A2E676966;
      v17 = v16;
    }
    else
    {
      v17 = 0;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::__fs::filesystem::path::filename[abi:ne180100](&v15->__p_, (uint64_t)&buf);
    std::__fs::filesystem::path::extension[abi:ne180100]((uint64_t)&__p, &buf);
    v19 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&p, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      p = __p;
    if ((SHIBYTE(p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (SHIBYTE(p.__r_.__value_.__r.__words[2]) == 8)
      {
        v20 = p.__r_.__value_.__r.__words[0] == 0x737468676965772ELL;
        if ((v19 & 0x80000000) == 0)
          goto LABEL_58;
      }
      else
      {
        v20 = 0;
        if ((v19 & 0x80000000) == 0)
          goto LABEL_58;
      }
LABEL_57:
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_58;
    }
    v20 = p.__r_.__value_.__l.__size_ == 8 && *(_QWORD *)p.__r_.__value_.__l.__data_ == 0x737468676965772ELL;
    operator delete(p.__r_.__value_.__l.__data_);
    if (v19 < 0)
      goto LABEL_57;
LABEL_58:
    if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__pn_.__r_.__value_.__l.__data_);
    if (v17 || v20)
    {
      if (SHIBYTE(v15->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&p, v15->__p_.__pn_.__r_.__value_.__l.__data_, v15->__p_.__pn_.__r_.__value_.__l.__size_);
      else
        p = (std::string)v15->__p_;
      v21 = objc_retainAutorelease(v63);
      shaHashForFileContent((uint64_t *)&p, (const void *)objc_msgSend(v21, "mutableBytes"), objc_msgSend(v21, "length"), a2, (uint64_t)&__p);
      if (SHIBYTE(p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(p.__r_.__value_.__l.__data_);
      if (v65)
      {
        if (SHIBYTE(v15->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&p, v15->__p_.__pn_.__r_.__value_.__l.__data_, v15->__p_.__pn_.__r_.__value_.__l.__size_);
        else
          p = (std::string)v15->__p_;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v80, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        else
          v80 = __p;
        v83.__data_ = v76;
        v83.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)&p;
        v24 = (char **)std::__tree<std::__value_type<std::__fs::filesystem::path,std::string>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::string>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::string>>>::__find_equal<std::__fs::filesystem::path>((uint64_t)&v73, v83);
        if (!*v24)
        {
          v25 = v24;
          v26 = (char *)operator new(0x50uLL);
          buf.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)&v74;
          *(std::string *)(v26 + 32) = p;
          memset(&p, 0, sizeof(p));
          *(std::string *)(v26 + 56) = v80;
          memset(&v80, 0, sizeof(v80));
          buf.__pn_.__r_.__value_.__s.__data_[16] = 1;
          v27 = *(_QWORD *)v76;
          *(_QWORD *)v26 = 0;
          *((_QWORD *)v26 + 1) = 0;
          *((_QWORD *)v26 + 2) = v27;
          *v25 = v26;
          if (*v73)
          {
            v73 = (uint64_t **)*v73;
            v26 = *v25;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v74, (uint64_t *)v26);
          ++v75;
          buf.__pn_.__r_.__value_.__r.__words[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::__fs::filesystem::path,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::__fs::filesystem::path,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&buf);
        }
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v80.__r_.__value_.__l.__data_);
      }
      else
      {
        v22 = *a2;
        if (v22 >= 8)
        {
          SNLPOSLoggerForCategory(4);
          v28 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.__pn_.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
            WORD2(buf.__pn_.__r_.__value_.__r.__words[1]) = 2048;
            *(std::string::size_type *)((char *)&buf.__pn_.__r_.__value_.__r.__words[1] + 6) = v22;
            _os_log_impl(&dword_1C2196000, v28, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&buf, 0x16u);
          }

          v23 = "<UNDEFINED_COMPONENT>";
        }
        else
        {
          v23 = off_1E7BED840[v22];
        }
        std::string::basic_string[abi:ne180100]<0>(&p, v23);
        SNLPOSLoggerForCategory(4);
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          if ((p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &p;
          else
            p_p = (std::string *)p.__r_.__value_.__r.__words[0];
          if (SHIBYTE(v15->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&buf.__pn_, v15->__p_.__pn_.__r_.__value_.__l.__data_, v15->__p_.__pn_.__r_.__value_.__l.__size_);
          else
            buf.__pn_ = (std::__fs::filesystem::path::string_type)v15->__p_;
          p_buf = &buf;
          if ((buf.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_buf = (std::__fs::filesystem::path *)buf.__pn_.__r_.__value_.__r.__words[0];
          *(_DWORD *)v76 = 136315394;
          *(_QWORD *)&v76[4] = p_p;
          v77 = 2080;
          v78 = p_buf;
          _os_log_impl(&dword_1C2196000, v29, OS_LOG_TYPE_ERROR, "[%s] Error while calculating hash of file %s", v76, 0x16u);
          if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__pn_.__r_.__value_.__l.__data_);
        }

      }
      if (SHIBYTE(p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(p.__r_.__value_.__l.__data_);
      if (v65)
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    std::__fs::filesystem::recursive_directory_iterator::__increment(&v69, 0);
  }
  v32 = v67;
  if (v67)
  {
    v33 = (unint64_t *)&v67->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  cntrl = v69.__imp_.__cntrl_;
  if (v69.__imp_.__cntrl_)
  {
    v36 = &v69.__imp_.__cntrl_->__shared_owners_;
    do
      v37 = __ldaxr((unint64_t *)v36);
    while (__stlxr(v37 - 1, (unint64_t *)v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  v38 = v71;
  if (v71)
  {
    v39 = (unint64_t *)&v71->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }

  v41 = v73;
  if (v73 == &v74)
  {
    v42 = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)a3 = a3 + 8;
  }
  else
  {
    v42 = 0;
    do
    {
      v43 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&p, (uint64_t)(v41 + 7));
      v45 = v41[1];
      if (v45)
      {
        do
        {
          v46 = (uint64_t **)v45;
          v45 = (uint64_t *)*v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          v46 = (uint64_t **)v41[2];
          v16 = *v46 == (uint64_t *)v41;
          v41 = v46;
        }
        while (!v16);
      }
      v42 ^= v43;
      v41 = v46;
    }
    while (v46 != &v74);
    v47 = v73;
    *(_QWORD *)(a3 + 8) = 0;
    v48 = (_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = a3 + 8;
    if (v47 != &v74)
    {
      while (1)
      {
        v49 = *(_QWORD *)(a3 + 8);
        if (*(_QWORD **)a3 == v48)
          break;
        v50 = a3 + 8;
        if (v49)
        {
          do
          {
            v51 = v49;
            v49 = *(_QWORD *)(v49 + 8);
          }
          while (v49);
        }
        else
        {
          do
          {
            v51 = *(_QWORD *)(v50 + 16);
            v16 = *(_QWORD *)v51 == v50;
            v50 = v51;
          }
          while (v16);
        }
        v44.__data_ = (const std::string_view::value_type *)(v47 + 4);
        if (std::__fs::filesystem::operator<[abi:ne180100]((const std::__fs::filesystem::path *)(v51 + 32), v44))
        {
          if (!*v48)
            goto LABEL_133;
LABEL_135:
          __p.__r_.__value_.__r.__words[0] = v51;
          v52 = (uint64_t **)(v51 + 8);
          goto LABEL_137;
        }
        v84.__data_ = (const std::string_view::value_type *)&__p;
        v84.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)(v47 + 4);
        v52 = (uint64_t **)std::__tree<std::__value_type<std::__fs::filesystem::path,std::string>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::string>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::string>>>::__find_equal<std::__fs::filesystem::path>(a3, v84);
LABEL_137:
        if (!*v52)
          goto LABEL_138;
LABEL_147:
        v60 = v47[1];
        if (v60)
        {
          do
          {
            v61 = (uint64_t **)v60;
            v60 = (uint64_t *)*v60;
          }
          while (v60);
        }
        else
        {
          do
          {
            v61 = (uint64_t **)v47[2];
            v16 = *v61 == (uint64_t *)v47;
            v47 = v61;
          }
          while (!v16);
        }
        v47 = v61;
        if (v61 == &v74)
          goto LABEL_155;
      }
      v51 = a3 + 8;
      if (!v49)
      {
LABEL_133:
        __p.__r_.__value_.__r.__words[0] = a3 + 8;
        v52 = (uint64_t **)(a3 + 8);
LABEL_138:
        v53 = (char *)operator new(0x50uLL);
        v54 = (uint64_t *)v53;
        p.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
        p.__r_.__value_.__l.__size_ = a3 + 8;
        p.__r_.__value_.__s.__data_[16] = 0;
        if (*((char *)v47 + 55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v53 + 32), (const std::string::value_type *)v47[4], (std::string::size_type)v47[5]);
        }
        else
        {
          v55 = *((_OWORD *)v47 + 2);
          *((_QWORD *)v53 + 6) = v47[6];
          *((_OWORD *)v53 + 2) = v55;
        }
        v56 = (std::string *)(v54 + 7);
        if (*((char *)v47 + 79) < 0)
        {
          std::string::__init_copy_ctor_external(v56, (const std::string::value_type *)v47[7], (std::string::size_type)v47[8]);
        }
        else
        {
          v57 = *(_OWORD *)(v47 + 7);
          v54[9] = (uint64_t)v47[9];
          *(_OWORD *)&v56->__r_.__value_.__l.__data_ = v57;
        }
        p.__r_.__value_.__s.__data_[16] = 1;
        v58 = __p.__r_.__value_.__r.__words[0];
        *v54 = 0;
        v54[1] = 0;
        v54[2] = v58;
        *v52 = v54;
        v59 = **(_QWORD **)a3;
        if (v59)
        {
          *(_QWORD *)a3 = v59;
          v54 = *v52;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a3 + 8), v54);
        ++*(_QWORD *)(a3 + 16);
        p.__r_.__value_.__r.__words[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::__fs::filesystem::path,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::__fs::filesystem::path,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&p);
        goto LABEL_147;
      }
      goto LABEL_135;
    }
  }
LABEL_155:
  *(_QWORD *)(a3 + 24) = v42;
  std::__tree<std::__value_type<std::__fs::filesystem::path,std::string>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::string>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::string>>>::destroy(v74);
}

void sub_1C2210880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void **__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,_QWORD *a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,__int128 a41)
{
  _QWORD *v41;
  unsigned int *v42;
  uint64_t v43;
  void *v46;
  char *ComponentString;
  NSObject *v48;
  void **p_p;
  uint64_t v50;
  uint64_t v51;

  if (*(char *)(v43 - 153) < 0)
    operator delete(*(void **)(v43 - 176));

  if (a2 == 1)
  {
    v46 = __cxa_begin_catch(a1);
    ComponentString = (char *)snlp::common::logging::getComponentString(*v42);
    std::string::basic_string[abi:ne180100]<0>(&__p, ComponentString);
    SNLPOSLoggerForCategory(4);
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      if (a20 >= 0)
        p_p = (void **)&__p;
      else
        p_p = __p;
      if (*(char *)(a10 + 23) >= 0)
        v50 = a10;
      else
        v50 = *(_QWORD *)a10;
      v51 = (*(uint64_t (**)(void *))(*(_QWORD *)v46 + 16))(v46);
      *(_DWORD *)(v43 - 176) = 136315650;
      *(_QWORD *)((char *)&a41 + 4) = p_p;
      *(_WORD *)(v43 - 164) = 2080;
      *(_QWORD *)((char *)&a41 + 14) = v50;
      *(_WORD *)(v43 - 154) = 2080;
      *(_QWORD *)(v43 - 152) = v51;
      _os_log_impl(&dword_1C2196000, v48, OS_LOG_TYPE_ERROR, "[%s] Error iterating over directory %s: %s", (uint8_t *)(v43 - 176), 0x20u);
    }

    v41[1] = 0;
    *v41 = v41 + 1;
    v41[2] = 0;
    v41[3] = 0;
    if (a20 < 0)
      operator delete(__p);
    __cxa_end_catch();
    JUMPOUT(0x1C221083CLL);
  }
  std::__tree<std::__value_type<std::__fs::filesystem::path,std::string>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::string>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::string>>>::destroy(a35);
  _Unwind_Resume(a1);
}

double std::__fs::filesystem::path::extension[abi:ne180100](uint64_t a1, std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__extension(this);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

const char *snlp::common::logging::getComponentString(unsigned int a1)
{
  NSObject *v3;
  int v4;
  const char *v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a1 < 8)
    return off_1E7BED840[a1];
  SNLPOSLoggerForCategory(4);
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4 = 136315394;
    v5 = "<UNDEFINED_COMPONENT>";
    v6 = 2048;
    v7 = (int)a1;
    _os_log_impl(&dword_1C2196000, v3, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v4, 0x16u);
  }

  return "<UNDEFINED_COMPONENT>";
}

void std::__tree<std::__value_type<std::__fs::filesystem::path,std::string>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::string>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::string>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::__fs::filesystem::path,std::string>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::string>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::string>>>::destroy(*a1);
    std::__tree<std::__value_type<std::__fs::filesystem::path,std::string>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::string>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::string>>>::destroy(a1[1]);
    std::allocator<snlp::ssu::app::SSUAppParameter>::destroy[abi:ne180100]((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::__fs::filesystem::path,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::__fs::filesystem::path,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::allocator<snlp::ssu::app::SSUAppParameter>::destroy[abi:ne180100]((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t std::__fs::filesystem::operator<[abi:ne180100](const std::__fs::filesystem::path *a1, std::__fs::filesystem::path::__string_view a2)
{
  std::basic_string_view<_CharT, _Traits>::size_type v2;

  v2 = *((_QWORD *)a2.__data_ + 1);
  if (*((char *)a2.__data_ + 23) >= 0)
  {
    a2.__size_ = *((unsigned __int8 *)a2.__data_ + 23);
  }
  else
  {
    a2.__data_ = *(const std::string_view::value_type **)a2.__data_;
    a2.__size_ = v2;
  }
  return std::__fs::filesystem::path::__compare(a1, a2) >> 31;
}

_QWORD *std::__tree<std::__value_type<std::__fs::filesystem::path,std::string>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::string>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::string>>>::__find_equal<std::__fs::filesystem::path>(uint64_t a1, std::__fs::filesystem::path::__string_view a2)
{
  std::string_view::value_type *data;
  uint64_t v3;
  _QWORD *v4;
  const std::__fs::filesystem::path *size;
  _QWORD *v6;
  const std::__fs::filesystem::path *v7;

  data = (std::string_view::value_type *)a2.__data_;
  v4 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    size = (const std::__fs::filesystem::path *)a2.__size_;
    do
    {
      while (1)
      {
        v6 = (_QWORD *)v3;
        v7 = (const std::__fs::filesystem::path *)(v3 + 32);
        a2.__data_ = (const std::string_view::value_type *)(v3 + 32);
        if (!std::__fs::filesystem::operator<[abi:ne180100](size, a2))
          break;
        v3 = *v6;
        v4 = v6;
        if (!*v6)
          goto LABEL_10;
      }
      a2.__data_ = (const std::string_view::value_type *)size;
      if (!std::__fs::filesystem::operator<[abi:ne180100](v7, a2))
        break;
      v4 = v6 + 1;
      v3 = v6[1];
    }
    while (v3);
  }
  else
  {
    v6 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *(_QWORD *)data = v6;
  return v4;
}

void getBoltTaskId(_QWORD *a1@<X0>, int *a2@<X1>, std::string *a3@<X8>)
{
  unsigned __int8 *v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  __int128 v10;
  NSObject *v11;
  void **v12;
  void **v13;
  char v14;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "bolt_task_id");
  v6 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(a1, (unsigned __int8 *)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  v7 = *a2;
  if (v7 >= 8)
  {
    SNLPOSLoggerForCategory(4);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v18 = "<UNDEFINED_COMPONENT>";
      v19 = 2048;
      v20 = v7;
      _os_log_impl(&dword_1C2196000, v9, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
    }

    v8 = "<UNDEFINED_COMPONENT>";
  }
  else
  {
    v8 = off_1E7BED840[v7];
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v8);
  if (!v6)
  {
    SNLPOSLoggerForCategory(4);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v12 = __p;
      if (v16 < 0)
        v12 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v18 = (const char *)v12;
      _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEBUG, "[%s] Warning: config missing Bolt task ID", buf, 0xCu);
    }
    goto LABEL_21;
  }
  if (*((_DWORD *)v6 + 16) != 4)
  {
    SNLPOSLoggerForCategory(4);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v13 = __p;
      if (v16 < 0)
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v18 = (const char *)v13;
      _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEBUG, "[%s] Warning: config Bolt task ID is not a string", buf, 0xCu);
    }
LABEL_21:

    v14 = 0;
    a3->__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_24;
  }
  if ((char)v6[63] < 0)
  {
    std::string::__init_copy_ctor_external(a3, *((const std::string::value_type **)v6 + 5), *((_QWORD *)v6 + 6));
  }
  else
  {
    v10 = *(_OWORD *)(v6 + 40);
    a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 7);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v10;
  }
  v14 = 1;
LABEL_24:
  a3[1].__r_.__value_.__s.__data_[0] = v14;
  if (v16 < 0)
    operator delete(__p[0]);
}

void sub_1C2211060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void bundleInfoForAssetsDirectory(int *a1@<X0>, char *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_DWORD *)a5 = *a1;
  MEMORY[0x1C3BB865C](a5 + 8, a4);
  getBoltTaskId(a3, a1, (std::string *)(a5 + 40));
  shaHashForRecursivePath(a2, a1, a5 + 72);
}

void sub_1C22110F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  if (*(_BYTE *)(v3 + 64))
  {
    if (*(char *)(v3 + 63) < 0)
      operator delete(*v2);
  }
  MEMORY[0x1C3BB8674](v1);
  _Unwind_Resume(a1);
}

std::string *snlp::ssu::matcher::SSUCandidateEncoder::SSUCandidateEncoder(std::string *this, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 v7;
  std::string *v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  v8 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  return this;
}

void sub_1C22111BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void snlp::ssu::matcher::SSUCandidateEncoder::computeEncodedAppCandidates(snlp::ssu::matcher::SSUCandidateEncoder *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  void *v8[3];
  void *__p;
  void *v10;
  uint64_t v11;
  _BYTE v12[24];
  uint64_t v13;

  snlp::ssu::matcher::SSUCandidateEncoder::buildUtterancesBatch(a2, (unint64_t)a3, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 6) + 8) + 24), (uint64_t)v12);
  snlp::ssu::matcher::SSUCandidateEncoder::computeUtterancesBatchEncodings(a1, (const snlp::ssu::matcher::SSUCandidateEncoder::UtterancesBatch *)v12, (uint64_t)v8);
  snlp::ssu::matcher::SSUCandidateEncoder::persistOriginalEncodingToFeatureStore((uint64_t)a1, (const std::string *)a2, (unint64_t **)v8);
  snlp::ssu::matcher::SSUCandidateEncoder::buildEncodedAppCandidates(a3, (unint64_t **)v8, a4);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
  v8[0] = v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v8);
}

void sub_1C22112A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  snlp::ssu::matcher::SSUCandidateEncoder::UtterancesBatch::~UtterancesBatch((void **)va);
  _Unwind_Resume(a1);
}

void snlp::ssu::matcher::SSUCandidateEncoder::buildUtterancesBatch(__int128 *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint8x8_t v18;
  _QWORD **v19;
  _QWORD *i;
  unint64_t v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  std::string *v30;
  __int128 *v31;
  __int128 v32;
  NSObject *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  float v45;
  uint64_t v46;
  std::string *v47;
  unint64_t v48;
  uint8_t buf[4];
  unint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v7 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>(&v46, a1);
  v47 = v7;
  v43 = 0u;
  v44 = 0u;
  v8 = 1065353216;
  v45 = 1.0;
  v9 = *(_QWORD *)a2;
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)a2)
  {
    v10 = 0;
    v40 = a4;
    v11 = 1;
    v41 = (_QWORD *)a2;
    while (1)
    {
      v12 = v9 + (v10 << 8);
      v15 = *(_QWORD *)(v12 + 232);
      v13 = (uint64_t *)(v12 + 232);
      v14 = v15;
      v16 = v13[1];
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v47 - v46) >> 3) >= a3)
        goto LABEL_44;
      if (v14 != v16)
        break;
LABEL_58:
      ++v10;
      v9 = *(_QWORD *)a2;
      if (v10 >= (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 8)
      {
        v7 = v47;
        v35 = *((_QWORD *)&v43 + 1);
        v34 = v43;
        v37 = *((_QWORD *)&v44 + 1);
        v36 = v44;
        v8 = LODWORD(v45);
        a4 = v40;
        goto LABEL_61;
      }
    }
    v42 = v11;
    v17 = *((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1))
    {
      v18 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v43 + 8));
      v18.i16[0] = vaddlv_u8(v18);
      if (v18.u32[0] > 1uLL)
      {
        a2 = v10;
        if (v10 >= *((_QWORD *)&v43 + 1))
          a2 = v10 % *((_QWORD *)&v43 + 1);
      }
      else
      {
        a2 = (*((_QWORD *)&v43 + 1) - 1) & v10;
      }
      v19 = *(_QWORD ***)(v43 + 8 * a2);
      if (v19)
      {
        for (i = *v19; i; i = (_QWORD *)*i)
        {
          v21 = i[1];
          if (v21 == v10)
          {
            if (i[2] == v10)
            {
              a2 = (unint64_t)v41;
              goto LABEL_43;
            }
          }
          else
          {
            if (v18.u32[0] > 1uLL)
            {
              if (v21 >= *((_QWORD *)&v43 + 1))
                v21 %= *((_QWORD *)&v43 + 1);
            }
            else
            {
              v21 &= *((_QWORD *)&v43 + 1) - 1;
            }
            if (v21 != a2)
              break;
          }
        }
      }
    }
    i = operator new(0x20uLL);
    *i = 0;
    i[1] = v10;
    i[2] = v10;
    i[3] = 0;
    v22 = (float)(unint64_t)(*((_QWORD *)&v44 + 1) + 1);
    if (!v17 || (float)(v45 * (float)v17) < v22)
    {
      v23 = (v17 & (v17 - 1)) != 0;
      if (v17 < 3)
        v23 = 1;
      v24 = v23 | (2 * v17);
      v25 = vcvtps_u32_f32(v22 / v45);
      if (v24 <= v25)
        v26 = v25;
      else
        v26 = v24;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>((uint64_t)&v43, v26);
      v17 = *((_QWORD *)&v43 + 1);
      if ((*((_QWORD *)&v43 + 1) & (*((_QWORD *)&v43 + 1) - 1)) != 0)
      {
        if (v10 >= *((_QWORD *)&v43 + 1))
          a2 = v10 % *((_QWORD *)&v43 + 1);
        else
          a2 = v10;
      }
      else
      {
        a2 = (*((_QWORD *)&v43 + 1) - 1) & v10;
      }
    }
    v27 = v43;
    v28 = *(_QWORD **)(v43 + 8 * a2);
    if (v28)
    {
      *i = *v28;
      a2 = (unint64_t)v41;
    }
    else
    {
      *i = v44;
      *(_QWORD *)&v44 = i;
      *(_QWORD *)(v27 + 8 * a2) = &v44;
      a2 = (unint64_t)v41;
      if (!*i)
        goto LABEL_42;
      v29 = *(_QWORD *)(*i + 8);
      if ((v17 & (v17 - 1)) != 0)
      {
        if (v29 >= v17)
          v29 %= v17;
      }
      else
      {
        v29 &= v17 - 1;
      }
      v28 = (_QWORD *)(v43 + 8 * v29);
    }
    *v28 = i;
LABEL_42:
    ++*((_QWORD *)&v44 + 1);
    v16 = v13[1];
    v14 = *v13;
LABEL_43:
    i[3] = v42;
    v11 = v42 - 0x5555555555555555 * ((v16 - v14) >> 6);
LABEL_44:
    if (v14 != v16)
    {
      v30 = v47;
      while (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v30 - v46) >> 3) != a3)
      {
        if (!*(_BYTE *)(v14 + 88))
          std::__throw_bad_optional_access[abi:ne180100]();
        v31 = (__int128 *)(v14 + 24);
        if ((unint64_t)v30 >= v48)
        {
          v30 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>(&v46, v31);
        }
        else
        {
          if (*(char *)(v14 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(v30, *(const std::string::value_type **)(v14 + 24), *(_QWORD *)(v14 + 32));
          }
          else
          {
            v32 = *v31;
            v30->__r_.__value_.__r.__words[2] = *(_QWORD *)(v14 + 40);
            *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v32;
          }
          ++v30;
        }
        v47 = v30;
        v14 += 192;
        if (v14 == v16)
          goto LABEL_58;
      }
      v33 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v50 = a3;
        _os_log_impl(&dword_1C2196000, v33, OS_LOG_TYPE_DEFAULT, "Warning: skipping adding alternative candidate utterance to batch because we are at the max batch size (%lu)", buf, 0xCu);
      }
    }
    goto LABEL_58;
  }
  v37 = 0;
  v36 = 0;
  v35 = 0;
  v34 = 0;
LABEL_61:
  v38 = v48;
  *(_QWORD *)a4 = v46;
  *(_QWORD *)(a4 + 8) = v7;
  v47 = 0;
  v48 = 0;
  v46 = 0;
  v43 = 0uLL;
  *(_QWORD *)(a4 + 16) = v38;
  *(_QWORD *)(a4 + 24) = v34;
  *(_QWORD *)(a4 + 32) = v35;
  *(_QWORD *)(a4 + 40) = v36;
  *(_QWORD *)(a4 + 48) = v37;
  *(_DWORD *)(a4 + 56) = v8;
  if (v37)
  {
    v39 = *(_QWORD *)(v36 + 8);
    if ((v35 & (v35 - 1)) != 0)
    {
      if (v39 >= v35)
        v39 %= v35;
    }
    else
    {
      v39 &= v35 - 1;
    }
    *(_QWORD *)(v34 + 8 * v39) = a4 + 40;
    v44 = 0uLL;
  }
  *(_QWORD *)&v43 = &v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
}

void sub_1C2211758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  a15 = (void **)&a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void snlp::ssu::matcher::SSUCandidateEncoder::computeUtterancesBatchEncodings(snlp::ssu::matcher::SSUCandidateEncoder *this@<X0>, const snlp::ssu::matcher::SSUCandidateEncoder::UtterancesBatch *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *i;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  snlp::ssu::encoder::SSUEncoder::computeEncodings(*((_QWORD *)this + 6), (uint64_t *)a2, (uint64_t)&v25);
  *(_OWORD *)a3 = v25;
  *(_QWORD *)(a3 + 16) = v26;
  v25 = 0uLL;
  *(_OWORD *)(a3 + 24) = v27;
  *(_QWORD *)(a3 + 40) = v28;
  v26 = 0;
  v27 = 0uLL;
  v28 = 0;
  *(_OWORD *)(a3 + 48) = 0u;
  v6 = (uint64_t *)(a3 + 48);
  *(_OWORD *)(a3 + 64) = 0u;
  *(_DWORD *)(a3 + 80) = *((_DWORD *)a2 + 14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a3 + 48, *((_QWORD *)a2 + 4));
  v7 = (_QWORD *)*((_QWORD *)a2 + 5);
  if (v7)
  {
    v8 = (_QWORD *)(a3 + 64);
    v9 = *(_QWORD *)(a3 + 56);
    do
    {
      v10 = v7[2];
      if (v9)
      {
        v11 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v11.i16[0] = vaddlv_u8(v11);
        if (v11.u32[0] > 1uLL)
        {
          v3 = v7[2];
          if (v10 >= v9)
            v3 = v10 % v9;
        }
        else
        {
          v3 = (v9 - 1) & v10;
        }
        v12 = *(_QWORD **)(*v6 + 8 * v3);
        if (v12)
        {
          for (i = (_QWORD *)*v12; i; i = (_QWORD *)*i)
          {
            v14 = i[1];
            if (v14 == v10)
            {
              if (i[2] == v10)
                goto LABEL_41;
            }
            else
            {
              if (v11.u32[0] > 1uLL)
              {
                if (v14 >= v9)
                  v14 %= v9;
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v3)
                break;
            }
          }
        }
      }
      v15 = operator new(0x20uLL);
      *v15 = 0;
      v15[1] = v10;
      *((_OWORD *)v15 + 1) = *((_OWORD *)v7 + 1);
      v16 = (float)(unint64_t)(*(_QWORD *)(a3 + 72) + 1);
      v17 = *(float *)(a3 + 80);
      if (!v9 || (float)(v17 * (float)v9) < v16)
      {
        v18 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3)
          v18 = 1;
        v19 = v18 | (2 * v9);
        v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20)
          v21 = v20;
        else
          v21 = v19;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a3 + 48, v21);
        v9 = *(_QWORD *)(a3 + 56);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v10 >= v9)
            v3 = v10 % v9;
          else
            v3 = v10;
        }
        else
        {
          v3 = (v9 - 1) & v10;
        }
      }
      v22 = *v6;
      v23 = *(_QWORD **)(*v6 + 8 * v3);
      if (v23)
      {
        *v15 = *v23;
      }
      else
      {
        *v15 = *v8;
        *v8 = v15;
        *(_QWORD *)(v22 + 8 * v3) = v8;
        if (!*v15)
          goto LABEL_40;
        v24 = *(_QWORD *)(*v15 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v24 >= v9)
            v24 %= v9;
        }
        else
        {
          v24 &= v9 - 1;
        }
        v23 = (_QWORD *)(*v6 + 8 * v24);
      }
      *v23 = v15;
LABEL_40:
      ++*(_QWORD *)(a3 + 72);
LABEL_41:
      v7 = (_QWORD *)*v7;
    }
    while (v7);
  }
}

void sub_1C2211A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *v9;
  uint64_t v10;

  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v9);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a9);
  _Unwind_Resume(a1);
}

void snlp::ssu::matcher::SSUCandidateEncoder::persistOriginalEncodingToFeatureStore(uint64_t a1, const std::string *a2, unint64_t **a3)
{
  unint64_t v6;
  NSObject *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  int v32;
  char *v33;
  char *v34;
  int v35;
  char *v36;
  char *v37;
  void *v38;
  NSObject *v39;
  NSObject *v40;
  uint8_t v41[16];
  uint8_t buf[8];
  void *__p;
  char *v44;
  char *v45;
  std::string *v46;
  std::string *v47;
  std::string *v48;
  std::string v49;
  unint64_t *v50;
  unint64_t *v51;
  char *v52;
  _BYTE *v53;

  if ((_os_feature_enabled_impl() & 1) != 0)
  {
    snlp::ssu::matcher::SSUCandidateEncoder::getOriginalEncoding(a3, &v50);
    if (v51 == v50)
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
    v6 = *v50;
    if (*(char *)(a1 + 47) < 0)
      std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
    else
      v49 = *(std::string *)(a1 + 24);
    sirinluinternalssu::SSUEncodingResult::SSUEncodingResult((sirinluinternalssu::SSUEncodingResult *)buf);
    v8 = v46;
    if (!v46)
    {
      v8 = (std::string *)operator new();
      v8->__r_.__value_.__r.__words[0] = 0;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v9 = v46;
      v46 = v8;
      if (v9)
      {
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v9);
        v8 = v46;
      }
    }
    std::string::operator=(v8, (const std::string *)(a1 + 24));
    v10 = v47;
    if (!v47)
    {
      v10 = (std::string *)operator new();
      v10->__r_.__value_.__r.__words[0] = 0;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v11 = v47;
      v47 = v10;
      if (v11)
      {
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v11);
        v10 = v47;
      }
    }
    std::string::operator=(v10, (const std::string *)a1);
    v12 = v48;
    if (!v48)
    {
      v12 = (std::string *)operator new();
      v12->__r_.__value_.__r.__words[0] = 0;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v13 = v48;
      v48 = v12;
      if (v13)
      {
        std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v13);
        v12 = v48;
      }
    }
    std::string::operator=(v12, a2);
    std::vector<float>::reserve(&__p, v6);
    v14 = v52;
    if (v53 - v52 >= 1)
    {
      v15 = (v53 - v52) >> 2;
      v16 = v44;
      if (v15 <= (v45 - v44) >> 2)
      {
        if (v15 <= 0)
        {
          v22 = &v52[4 * v15];
          v23 = v44;
          v24 = &v44[4 * v15];
          v25 = &v44[-4 * v15];
          v26 = v44;
          if (v25 < v44)
          {
            v26 = v44;
            do
            {
              v27 = *(_DWORD *)v25;
              v25 += 4;
              *(_DWORD *)v26 = v27;
              v26 += 4;
            }
            while (v25 < v16);
          }
          v44 = v26;
          if (v23 != v24)
            memmove(&v23[-4 * ((v23 - v24) >> 2)], v16, v23 - v24);
          if (v22 != v14)
            memmove(v16, v14, 4 * v15);
        }
        else
        {
          v21 = v53 - v52;
          if (v53 != v52)
            memmove(v44, v52, v53 - v52);
          v44 = &v16[v21];
        }
      }
      else
      {
        v17 = (v44 - (_BYTE *)__p) >> 2;
        if ((unint64_t)(v17 + v15) >> 62)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v18 = (v45 - (_BYTE *)__p) >> 1;
        if (v18 <= v17 + v15)
          v18 = v17 + v15;
        if ((unint64_t)(v45 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFCLL)
          v19 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v45, v19);
        else
          v20 = 0;
        v28 = &v20[4 * v17];
        v29 = &v28[4 * v15];
        v30 = 4 * v15;
        v31 = v28;
        do
        {
          v32 = *(_DWORD *)v14;
          v14 += 4;
          *(_DWORD *)v31 = v32;
          v31 += 4;
          v30 -= 4;
        }
        while (v30);
        v33 = (char *)__p;
        if (__p != v16)
        {
          v34 = v16;
          do
          {
            v35 = *((_DWORD *)v34 - 1);
            v34 -= 4;
            *((_DWORD *)v28 - 1) = v35;
            v28 -= 4;
          }
          while (v34 != v33);
        }
        v36 = &v20[4 * v19];
        v37 = (char *)(v44 - v16);
        if (v44 != v16)
          memmove(v29, v16, v44 - v16);
        v38 = __p;
        __p = v28;
        v44 = &v37[(_QWORD)v29];
        v45 = v36;
        if (v38)
          operator delete(v38);
      }
    }
    v39 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v41 = 0;
      _os_log_impl(&dword_1C2196000, v39, OS_LOG_TYPE_DEBUG, "Inserting SSUEncodingResult into FeatureStore", v41, 2u);
    }
    if (!snlp::common::logging::feature_store_utilities::insertSSUEncodingResultToFeatureStore((uint64_t)buf, (uint64_t *)&v49))
    {
      v40 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v41 = 0;
        _os_log_impl(&dword_1C2196000, v40, OS_LOG_TYPE_ERROR, "Failed to insert SSUEncodingResult into FeatureStore", v41, 2u);
      }
    }
    MEMORY[0x1C3BB8554](buf);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (v52)
    {
      v53 = v52;
      operator delete(v52);
    }
    if (v50)
    {
      v51 = v50;
      operator delete(v50);
    }
  }
  else
  {
    v7 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_DEBUG, "Skipping insertion of SSUEncodingResult into FeatureStore because SNLPFeatureStoreEnabled feature flag is disabled", buf, 2u);
    }
  }
}

void sub_1C2211E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)(v24 - 96));
  _Unwind_Resume(a1);
}

void snlp::ssu::matcher::SSUCandidateEncoder::buildEncodedAppCandidates(uint64_t *a1@<X0>, unint64_t **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const std::string::value_type **v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  std::string::size_type v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __int128 *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  int v41;
  __int128 v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int data;
  __int128 v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  std::string v61;
  unint64_t v62;
  unint64_t *v63;
  __int128 v64;
  unint64_t v65;
  std::string v66[4];
  void *v67[2];
  char *v68;
  __int128 __p;
  uint64_t v70;
  __int128 v71;
  char *v72;
  __int128 v73;
  uint64_t v74;
  char v75;
  std::string v76;
  std::string v77[3];
  std::string v78[4];
  void *v79;
  void *v80;
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  __int128 v85;
  unint64_t v86;
  void *v87;
  _BYTE *v88;
  void *v89;
  _BYTE *v90;
  _QWORD v91[6];

  snlp::ssu::matcher::SSUCandidateEncoder::getOriginalEncoding(a2, &v87);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v57 = a3 + 2;
  v58 = a1;
  v7 = a1;
  v6 = *a1;
  v5 = v7[1];
  v8 = v5 - v6;
  if (v5 != v6)
  {
    if (v8 < 0)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v77[0].__r_.__value_.__l.__size_ = (std::string::size_type)(a3 + 2);
    v76.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::matcher::SSUCandidateEncoder::EncodedAppCandidates>>(v8 >> 8);
    v76.__r_.__value_.__l.__size_ = v76.__r_.__value_.__r.__words[0];
    v76.__r_.__value_.__r.__words[2] = v76.__r_.__value_.__r.__words[0];
    v77[0].__r_.__value_.__r.__words[0] = v76.__r_.__value_.__r.__words[0] + (v9 << 6);
    std::vector<snlp::ssu::matcher::SSUCandidateEncoder::EncodedAppCandidates>::__swap_out_circular_buffer(a3, &v76);
    std::__split_buffer<snlp::ssu::matcher::SSUCandidateEncoder::EncodedAppCandidates>::~__split_buffer((uint64_t)&v76);
    v6 = *v58;
    v5 = v58[1];
  }
  if (v5 != v6)
  {
    v10 = 0;
    v59 = a3;
    do
    {
      v11 = (int *)(v6 + (v10 << 8));
      v85 = 0uLL;
      v86 = 0;
      v12 = (uint64_t *)(v11 + 58);
      v13 = v11 + 60;
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v11 + 30) - *((_QWORD *)v11 + 29)) >> 6);
      v15 = v14 + 1;
      if (v14 != -1)
      {
        if (v15 > 0x111111111111111)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v77[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v86;
        v76.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>>(v15);
        v76.__r_.__value_.__l.__size_ = v76.__r_.__value_.__r.__words[0];
        v76.__r_.__value_.__r.__words[2] = v76.__r_.__value_.__r.__words[0];
        v77[0].__r_.__value_.__r.__words[0] = v76.__r_.__value_.__r.__words[0] + 240 * v16;
        std::vector<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>::__swap_out_circular_buffer((uint64_t *)&v85, &v76);
        std::__split_buffer<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>::~__split_buffer((uint64_t)&v76);
      }
      v17 = (const std::string::value_type **)(v11 + 10);
      if (*((char *)v11 + 63) < 0)
      {
        std::string::__init_copy_ctor_external(&v76, *v17, *((_QWORD *)v11 + 6));
      }
      else
      {
        v18 = *(_OWORD *)v17;
        v76.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 7);
        *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v18;
      }
      v19 = v6 + (v10 << 8);
      std::__optional_copy_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__optional_copy_base[abi:ne180100](v77, (__int128 *)(v19 + 64));
      std::__optional_copy_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__optional_copy_base[abi:ne180100](v78, v19 + 136);
      v79 = 0;
      v80 = 0;
      v81 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v79, v87, (uint64_t)v88, (v88 - (_BYTE *)v87) >> 3);
      v82 = 0;
      v83 = 0;
      v84 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v82, v89, (uint64_t)v90, (v90 - (_BYTE *)v89) >> 2);
      v20 = *((_QWORD *)&v85 + 1);
      if (*((_QWORD *)&v85 + 1) >= v86)
      {
        v22 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)&v85 + 1) - v85) >> 4);
        v23 = v22 + 1;
        if (v22 + 1 > 0x111111111111111)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v86 - v85) >> 4) > v23)
          v23 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v86 - v85) >> 4);
        if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v86 - v85) >> 4) >= 0x88888888888888)
          v24 = 0x111111111111111;
        else
          v24 = v23;
        v63 = &v86;
        if (v24)
          v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>>(v24);
        else
          v25 = 0;
        v26 = v24 + 240 * v22;
        v61.__r_.__value_.__r.__words[0] = v24;
        v61.__r_.__value_.__l.__size_ = v26;
        v62 = v24 + 240 * v25;
        std::allocator<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>::construct[abi:ne180100]<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate,snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>(v26, (__int128 *)&v76);
        v61.__r_.__value_.__r.__words[2] = v26 + 240;
        std::vector<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>::__swap_out_circular_buffer((uint64_t *)&v85, &v61);
        v21 = *((_QWORD *)&v85 + 1);
        std::__split_buffer<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>::~__split_buffer((uint64_t)&v61);
      }
      else
      {
        std::allocator<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>::construct[abi:ne180100]<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate,snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>(*((uint64_t *)&v85 + 1), (__int128 *)&v76);
        v21 = v20 + 240;
      }
      *((_QWORD *)&v85 + 1) = v21;
      if (*v13 != *v12)
      {
        v27 = 0;
        v28 = 0;
        while (1)
        {
          snlp::ssu::matcher::SSUCandidateEncoder::getAlternativeEncoding((snlp::ssu::matcher::SSUCandidateEncoder *)a2, v10, v28, &v71);
          if (!v75)
            break;
          v29 = *v12;
          if (0xAAAAAAAAAAAAAAABLL * ((*v13 - *v12) >> 6) <= v28)
            std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
          v30 = (__int128 *)(v29 + v27);
          if (*(char *)(v29 + v27 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
          }
          else
          {
            v31 = *v30;
            v61.__r_.__value_.__r.__words[2] = *((_QWORD *)v30 + 2);
            *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v31;
          }
          v32 = v29 + v27;
          std::__optional_copy_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__optional_copy_base[abi:ne180100]((std::string *)&v62, (__int128 *)(v32 + 24));
          std::__optional_copy_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__optional_copy_base[abi:ne180100](v66, v32 + 96);
          if (!v75)
            std::__throw_bad_optional_access[abi:ne180100]();
          *(_OWORD *)v67 = v71;
          v68 = v72;
          v72 = 0;
          __p = v73;
          v70 = v74;
          v71 = 0uLL;
          v74 = 0;
          v73 = 0uLL;
          v33 = *((_QWORD *)&v85 + 1);
          if (*((_QWORD *)&v85 + 1) >= v86)
          {
            v35 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)&v85 + 1) - v85) >> 4);
            v36 = v35 + 1;
            if (v35 + 1 > 0x111111111111111)
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v86 - v85) >> 4) > v36)
              v36 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v86 - v85) >> 4);
            if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v86 - v85) >> 4) >= 0x88888888888888)
              v37 = 0x111111111111111;
            else
              v37 = v36;
            v91[4] = &v86;
            if (v37)
              v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>>(v37);
            else
              v38 = 0;
            v39 = v37 + 240 * v35;
            v91[0] = v37;
            v91[1] = v39;
            v91[3] = v37 + 240 * v38;
            std::allocator<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>::construct[abi:ne180100]<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate,snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>(v39, (__int128 *)&v61);
            v91[2] = v39 + 240;
            std::vector<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>::__swap_out_circular_buffer((uint64_t *)&v85, v91);
            v34 = *((_QWORD *)&v85 + 1);
            std::__split_buffer<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>::~__split_buffer((uint64_t)v91);
          }
          else
          {
            std::allocator<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>::construct[abi:ne180100]<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate,snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>(*((uint64_t *)&v85 + 1), (__int128 *)&v61);
            v34 = v33 + 240;
          }
          *((_QWORD *)&v85 + 1) = v34;
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          a3 = v59;
          if (v67[0])
          {
            v67[1] = v67[0];
            operator delete(v67[0]);
          }
          std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v66);
          std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v62);
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v61.__r_.__value_.__l.__data_);
          std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v71);
          ++v28;
          v27 += 192;
          if (v28 >= 0xAAAAAAAAAAAAAAABLL * ((*v13 - *v12) >> 6))
            goto LABEL_55;
        }
        v40 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v61.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1C2196000, v40, OS_LOG_TYPE_DEFAULT, "Warning: skipping adding alternative candidate to encoded output due to model batch truncation", (uint8_t *)&v61, 2u);
        }
        std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v71);
      }
LABEL_55:
      v41 = *v11;
      v61.__r_.__value_.__s.__data_[4] = *((_BYTE *)v11 + 4);
      LODWORD(v61.__r_.__value_.__l.__data_) = v41;
      if (*((char *)v11 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v61.__r_.__value_.__r.__words[1], *((const std::string::value_type **)v11 + 1), *((_QWORD *)v11 + 2));
      }
      else
      {
        v42 = *(_OWORD *)(v11 + 2);
        v62 = *((_QWORD *)v11 + 3);
        *(_OWORD *)&v61.__r_.__value_.__r.__words[1] = v42;
      }
      LOBYTE(v63) = *((_BYTE *)v11 + 32);
      v64 = v85;
      v65 = v86;
      v85 = 0uLL;
      v86 = 0;
      v43 = a3[1];
      v44 = a3[2];
      if (v43 >= v44)
      {
        v48 = (uint64_t)(v43 - *a3) >> 6;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 58)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v50 = v44 - *a3;
        if (v50 >> 5 > v49)
          v49 = v50 >> 5;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFC0)
          v51 = 0x3FFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        *((_QWORD *)&v73 + 1) = v57;
        v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::matcher::SSUCandidateEncoder::EncodedAppCandidates>>(v51);
        v53 = &v52[64 * v48];
        *(_QWORD *)&v71 = v52;
        *((_QWORD *)&v71 + 1) = v53;
        *(_QWORD *)&v73 = &v52[64 * v54];
        data = (int)v61.__r_.__value_.__l.__data_;
        v53[4] = v61.__r_.__value_.__s.__data_[4];
        *(_DWORD *)v53 = data;
        v56 = *(_OWORD *)&v61.__r_.__value_.__r.__words[1];
        *((_QWORD *)v53 + 3) = v62;
        *(_OWORD *)(v53 + 8) = v56;
        v62 = 0;
        *(_OWORD *)&v61.__r_.__value_.__r.__words[1] = 0uLL;
        v53[32] = (char)v63;
        *((_QWORD *)v53 + 6) = 0;
        *((_QWORD *)v53 + 7) = 0;
        *((_QWORD *)v53 + 5) = 0;
        *(_OWORD *)(v53 + 40) = v64;
        *((_QWORD *)v53 + 7) = v65;
        v64 = 0uLL;
        v65 = 0;
        v72 = v53 + 64;
        std::vector<snlp::ssu::matcher::SSUCandidateEncoder::EncodedAppCandidates>::__swap_out_circular_buffer(a3, &v71);
        v47 = a3[1];
        std::__split_buffer<snlp::ssu::matcher::SSUCandidateEncoder::EncodedAppCandidates>::~__split_buffer((uint64_t)&v71);
      }
      else
      {
        v45 = (int)v61.__r_.__value_.__l.__data_;
        *(_BYTE *)(v43 + 4) = v61.__r_.__value_.__s.__data_[4];
        *(_DWORD *)v43 = v45;
        v46 = *(_OWORD *)&v61.__r_.__value_.__r.__words[1];
        *(_QWORD *)(v43 + 24) = v62;
        *(_OWORD *)(v43 + 8) = v46;
        v62 = 0;
        *(_OWORD *)&v61.__r_.__value_.__r.__words[1] = 0uLL;
        *(_BYTE *)(v43 + 32) = (_BYTE)v63;
        *(_QWORD *)(v43 + 48) = 0;
        *(_QWORD *)(v43 + 56) = 0;
        *(_QWORD *)(v43 + 40) = 0;
        *(_OWORD *)(v43 + 40) = v64;
        *(_QWORD *)(v43 + 56) = v65;
        v64 = 0uLL;
        v65 = 0;
        v47 = v43 + 64;
      }
      a3[1] = v47;
      *(_QWORD *)&v71 = &v64;
      std::vector<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
      if (SHIBYTE(v62) < 0)
        operator delete((void *)v61.__r_.__value_.__l.__size_);
      if (v82)
      {
        v83 = v82;
        operator delete(v82);
      }
      if (v79)
      {
        v80 = v79;
        operator delete(v79);
      }
      std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v78);
      std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v77);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
      std::vector<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
      ++v10;
      v6 = *v58;
    }
    while (v10 < (v58[1] - *v58) >> 8);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
}

void sub_1C22126A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 208) = v1;
  std::vector<snlp::ssu::matcher::SSUCandidateEncoder::EncodedAppCandidates>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 208));
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)(v2 - 184));
  _Unwind_Resume(a1);
}

void snlp::ssu::matcher::SSUCandidateEncoder::EncodingsBatch::~EncodingsBatch(snlp::ssu::matcher::SSUCandidateEncoder::EncodingsBatch *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

void snlp::ssu::matcher::SSUCandidateEncoder::UtterancesBatch::~UtterancesBatch(void **this)
{
  void **v2;

  v2 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t snlp::ssu::matcher::SSUCandidateEncoder::getOriginalEncoding@<X0>(unint64_t **a1@<X0>, _QWORD *a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  char v8;

  snlp::ssu::matcher::SSUCandidateEncoder::getEncodingAtIndex(a1, 0, (uint64_t)&v4);
  if (!v8)
    std::__throw_bad_optional_access[abi:ne180100]();
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, v4, v5, (v5 - (uint64_t)v4) >> 3);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, v6, v7, (v7 - (uint64_t)v6) >> 2);
  return std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v4);
}

void sub_1C22128E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__optional_copy_base[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  this->__r_.__value_.__s.__data_[0] = 0;
  this[2].__r_.__value_.__s.__data_[16] = 0;
  if (*((_BYTE *)a2 + 64))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    }
    std::unordered_set<std::string>::unordered_set((uint64_t)&this[1], (uint64_t)a2 + 24);
    this[2].__r_.__value_.__s.__data_[16] = 1;
  }
  return this;
}

void sub_1C2212984(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__optional_copy_base[abi:ne180100](std::string *this, uint64_t a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[3].__r_.__value_.__s.__data_[16] = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    std::__construct_at[abi:ne180100]<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo const&,snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo*>(this, (__int128 *)a2);
    this[3].__r_.__value_.__s.__data_[16] = 1;
  }
  return this;
}

void sub_1C22129F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 24);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

__n128 std::allocator<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>::construct[abi:ne180100]<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate,snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  if (*((_BYTE *)a2 + 88))
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v5;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a1 + 48, (uint64_t *)a2 + 6);
    *(_BYTE *)(a1 + 88) = 1;
  }
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  if (*((_BYTE *)a2 + 184))
  {
    v6 = a2[6];
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    *(_OWORD *)(a1 + 96) = v6;
    *((_QWORD *)a2 + 13) = 0;
    *((_QWORD *)a2 + 14) = 0;
    *((_QWORD *)a2 + 12) = 0;
    *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_OWORD *)(a1 + 136) = *(__int128 *)((char *)a2 + 136);
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
    *((_QWORD *)a2 + 17) = 0;
    *((_QWORD *)a2 + 18) = 0;
    *((_QWORD *)a2 + 19) = 0;
    v7 = a2[10];
    *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
    *(_OWORD *)(a1 + 160) = v7;
    *((_QWORD *)a2 + 21) = 0;
    *((_QWORD *)a2 + 22) = 0;
    *((_QWORD *)a2 + 20) = 0;
    *(_BYTE *)(a1 + 184) = 1;
  }
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 192) = a2[12];
  *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
  *((_QWORD *)a2 + 24) = 0;
  *((_QWORD *)a2 + 25) = 0;
  *((_QWORD *)a2 + 26) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  result = *(__n128 *)((char *)a2 + 216);
  *(__n128 *)(a1 + 216) = result;
  *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 29);
  *((_QWORD *)a2 + 27) = 0;
  *((_QWORD *)a2 + 28) = 0;
  *((_QWORD *)a2 + 29) = 0;
  return result;
}

void snlp::ssu::candidate::SSUCandidate::~SSUCandidate(void **this)
{
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 12));
  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void snlp::ssu::matcher::SSUCandidateEncoder::getAlternativeEncoding(snlp::ssu::matcher::SSUCandidateEncoder *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **i;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  int v15;
  const snlp::ssu::matcher::SSUCandidateEncoder::EncodingsBatch *v16;
  __int16 v17;
  uint64_t v18;
  uint8_t buf[4];
  const snlp::ssu::matcher::SSUCandidateEncoder::EncodingsBatch *v20;
  __int16 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = *((_QWORD *)this + 7);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = a2;
      if (v7 <= a2)
        v9 = a2 % v7;
    }
    else
    {
      v9 = (v7 - 1) & a2;
    }
    v10 = *(uint64_t ****)(*((_QWORD *)this + 6) + 8 * v9);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t **)*i)
      {
        v12 = (unint64_t)i[1];
        if (v12 == a2)
        {
          if (i[2] == (uint64_t *)a2)
          {
            snlp::ssu::matcher::SSUCandidateEncoder::getEncodingAtIndex((unint64_t **)this, (unint64_t)i[3] + a3, (uint64_t)buf);
            if (v23)
            {
              std::__optional_copy_base<snlp::common::tensor::InferenceTensor,false>::__optional_copy_base[abi:ne180100]((uint64_t)a4, (uint64_t)buf);
            }
            else
            {
              v14 = SNLPOSLoggerForCategory(8);
              if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
              {
                v15 = 134218240;
                v16 = (const snlp::ssu::matcher::SSUCandidateEncoder::EncodingsBatch *)a2;
                v17 = 2048;
                v18 = a3;
                _os_log_impl(&dword_1C2196000, v14, OS_LOG_TYPE_DEFAULT, "Warning: alternative encoding at appCandidatesIndex=%lu, alternativeIndex=%lu not present in the encodings batch. Skipping.", (uint8_t *)&v15, 0x16u);
              }
              *a4 = 0;
              a4[48] = 0;
            }
            std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v12 >= v7)
              v12 %= v7;
          }
          else
          {
            v12 &= v7 - 1;
          }
          if (v12 != v9)
            break;
        }
      }
    }
  }
  v13 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    v20 = (const snlp::ssu::matcher::SSUCandidateEncoder::EncodingsBatch *)a2;
    v21 = 2048;
    v22 = a3;
    _os_log_impl(&dword_1C2196000, v13, OS_LOG_TYPE_DEFAULT, "Warning: alternative encoding at appCandidatesIndex=%lu, alternativeIndex=%lu not present in the encodings batch. Skipping.", buf, 0x16u);
  }
  *a4 = 0;
  a4[48] = 0;
}

void sub_1C2212DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5048] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E90], MEMORY[0x1E0DE4380]);
}

uint64_t std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 88))
  {
    if (*(char *)(a1 + 87) < 0)
      operator delete(*(void **)(a1 + 64));
    v3 = (void **)(a1 + 40);
    std::vector<siri::ontology::UsoIdentifier>::__destroy_vector::operator()[abi:ne180100](&v3);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(_QWORD *)(a1 + 32) = v2;
      operator delete(v2);
    }
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

void snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate::~EncodedCandidate(snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 27);
  if (v2)
  {
    *((_QWORD *)this + 28) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 24);
  if (v3)
  {
    *((_QWORD *)this + 25) = v3;
    operator delete(v3);
  }
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 96);
  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 24);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::matcher::SSUCandidateEncoder::EncodedAppCandidates>>(unint64_t a1)
{
  if (a1 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a1 << 6);
}

uint64_t *std::vector<snlp::ssu::matcher::SSUCandidateEncoder::EncodedAppCandidates>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      v8 = *(_DWORD *)(v2 + v5 - 64);
      *(_BYTE *)(v6 - 60) = *(_BYTE *)(v2 + v5 - 60);
      *(_DWORD *)(v6 - 64) = v8;
      v9 = *(_OWORD *)(v2 + v5 - 56);
      *(_QWORD *)(v6 - 40) = *(_QWORD *)(v2 + v5 - 40);
      *(_OWORD *)(v6 - 56) = v9;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 56) = 0;
      *(_BYTE *)(v6 - 32) = *(_BYTE *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 16) = 0;
      *(_QWORD *)(v6 - 8) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v5 -= 64;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v10 = *result;
  *result = v4;
  a2[1] = v10;
  v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<snlp::ssu::matcher::SSUCandidateEncoder::EncodedAppCandidates>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    std::allocator<snlp::ssu::matcher::SSUCandidateEncoder::EncodedAppCandidates>::destroy[abi:ne180100](i - 64);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 240;
        std::allocator<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void snlp::ssu::matcher::SSUCandidateEncoder::EncodedAppCandidates::~EncodedAppCandidates(void **this)
{
  void **v2;

  v2 = this + 5;
  std::vector<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void std::vector<snlp::ssu::matcher::SSUCandidateEncoder::EncodedAppCandidates>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::allocator<snlp::ssu::matcher::SSUCandidateEncoder::EncodedAppCandidates>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<snlp::ssu::matcher::SSUCandidateEncoder::EncodedAppCandidates>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 40);
  std::vector<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::allocator<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 192);
  if (v3)
  {
    *(_QWORD *)(a1 + 200) = v3;
    operator delete(v3);
  }
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 96);
  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<siri::ontology::UsoIdentifier>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 120;
        std::allocator<siri::ontology::UsoIdentifier>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<siri::ontology::UsoIdentifier>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72) && *(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unint64_t **snlp::ssu::matcher::SSUCandidateEncoder::getEncodingAtIndex@<X0>(unint64_t **result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t *v4;
  unint64_t v6;
  unint64_t *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v4 = *result;
  if ((unint64_t)((char *)result[1] - (char *)*result) <= 8)
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
  if (*v4 <= a2)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 48) = 0;
  }
  else
  {
    v6 = v4[1];
    v7 = result[3];
    *(_QWORD *)&v9 = operator new(8uLL);
    *(_QWORD *)v9 = v6;
    *((_QWORD *)&v9 + 1) = v9 + 8;
    v10 = (unint64_t)(v9 + 8);
    v11 = 0uLL;
    result = (unint64_t **)std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((_QWORD *)&v10 + 1, (char *)v7 + 4 * v6 * a2, (uint64_t)v7 + 4 * v6 * a2 + 4 * v6, v6);
    v8 = v10;
    *(_OWORD *)a3 = v9;
    *(_OWORD *)(a3 + 16) = v8;
    *(_OWORD *)(a3 + 32) = v11;
    *(_BYTE *)(a3 + 48) = 1;
  }
  return result;
}

void sub_1C221339C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_copy_base<snlp::common::tensor::InferenceTensor,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2);
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

void sub_1C2213430(_Unwind_Exception *a1)
{
  void **v1;
  void *v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    operator delete(v3);
  }
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C22134B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>>(unint64_t a1)
{
  if (a1 >= 0x111111111111112)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(240 * a1);
}

void std::vector<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (__int128 *)*a1;
  v4 = (__int128 *)a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 240;
    v4 -= 15;
    std::allocator<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>::construct[abi:ne180100]<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate,snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>(v6, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 240;
    std::allocator<snlp::ssu::matcher::SSUCandidateEncoder::EncodedCandidate>::destroy[abi:ne180100](i - 240);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(void **__p)
{
  void **v1;
  void **v2;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (void **)*v1;
      if (*((char *)v1 + 39) < 0)
        operator delete(v1[2]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

std::string *std::__construct_at[abi:ne180100]<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo const&,snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *(__int128 *)((char *)a2 + 24);
  this[1].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  std::vector<siri::ontology::UsoIdentifier>::__init_with_size[abi:ne180100]<siri::ontology::UsoIdentifier*,siri::ontology::UsoIdentifier*>((std::string *)((char *)this + 40), *((_QWORD *)a2 + 5), *((_QWORD *)a2 + 6), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  v6 = (std::string *)((char *)this + 64);
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v7 = a2[4];
    this[3].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 10);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1C221379C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<siri::ontology::UsoIdentifier>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

std::string *std::vector<siri::ontology::UsoIdentifier>::__init_with_size[abi:ne180100]<siri::ontology::UsoIdentifier*,siri::ontology::UsoIdentifier*>(std::string *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  std::string *v6;
  std::string::size_type size;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = (std::string *)std::vector<siri::ontology::UsoIdentifier>::__vallocate[abi:ne180100](result, a4);
    size = v6->__r_.__value_.__l.__size_;
    if (a2 != a3)
    {
      v8 = 0;
      do
      {
        result = siri::ontology::UsoIdentifier::UsoIdentifier((std::string *)(size + v8), (__int128 *)(a2 + v8));
        v8 += 120;
      }
      while (a2 + v8 != a3);
      size += v8;
    }
    v6->__r_.__value_.__l.__size_ = size;
  }
  return result;
}

void sub_1C2213854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<siri::ontology::UsoIdentifier>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<siri::ontology::UsoIdentifier>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  char *result;

  if (a2 >= 0x222222222222223)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  v3 = 120 * a2;
  result = (char *)operator new(120 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[v3];
  return result;
}

std::string *siri::ontology::UsoIdentifier::UsoIdentifier(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 2, a2 + 3);
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = a2[5];
  this[4].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 12);
  this[4].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 13);
  this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 14);
  return this;
}

void sub_1C2213990(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1C2213A20(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  _QWORD *v16;
  std::string *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = operator new(0x28uLL);
  *v16 = 0;
  v16[1] = v9;
  v17 = (std::string *)(v16 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v16[4] = *(_QWORD *)(a3 + 16);
  }
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v23);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *v16 = *v25;
LABEL_41:
    *v25 = v16;
    goto LABEL_42;
  }
  *v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(v24 + 8 * v3) = a1 + 16;
  if (*v16)
  {
    v26 = *(_QWORD *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10)
        v26 %= v10;
    }
    else
    {
      v26 &= v10 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_41;
  }
LABEL_42:
  ++*v7;
}

void sub_1C2213E7C(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::default_delete<std::string>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  JUMPOUT(0x1C3BB9B44);
}

void nlv4_inference_orchestrator::inference_engine::BertE5MLModule::forward(E5RT::ExecutionStreamOperation **this, const nlv4_inference_orchestrator::inference_engine::BertModuleInputType *a2)
{
  NSObject *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  uint8_t v11[16];
  E5RT::ExecutionStreamOperation *v12;
  std::__shared_weak_count *v13;
  uint8_t buf[8];
  void *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C2196000, v4, OS_LOG_TYPE_DEBUG, "Executing non-reshapable E5-ML inference.", buf, 2u);
  }
  nlv4_inference_orchestrator::inference_engine::BertModuleInputType::BertModuleInputType((nlv4_inference_orchestrator::inference_engine::BertModuleInputType *)buf, a2);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::bindPorts(this + 54);
  (*((void (**)(E5RT::ExecutionStreamOperation **, uint8_t *))*this + 21))(this, buf);
  v5 = (std::__shared_weak_count *)this[77];
  v12 = this[76];
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v13)
  {
    v8 = &v13->__shared_owners_;
    do
      v9 = __ldaxr((unint64_t *)v8);
    while (__stlxr(v9 - 1, (unint64_t *)v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  E5RT::ExecutionStream::ExecuteStreamSync(this[57]);
  E5RT::ExecutionStream::ResetStream(this[57]);
  (*((void (**)(E5RT::ExecutionStreamOperation **))*this + 22))(this);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::unbindPorts(this + 54);
  v10 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_DEBUG, "Success Executing non-reshapable E5-ML inference.", v11, 2u);
  }
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v23);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v22);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v21);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v20);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v19);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v18);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (*(_QWORD *)buf)
  {
    v15 = *(void **)buf;
    operator delete(*(void **)buf);
  }
}

void sub_1C22142E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  nlv4_inference_orchestrator::inference_engine::BertModuleOutputType *v13;

  nlv4_inference_orchestrator::inference_engine::BertModuleOutputType::~BertModuleOutputType(v13);
  nlv4_inference_orchestrator::inference_engine::BertModuleInputType::~BertModuleInputType((nlv4_inference_orchestrator::inference_engine::BertModuleInputType *)&a13);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertE5MLModule::isDynamicReshapableE5ML(nlv4_inference_orchestrator::inference_engine::BertE5MLModule *this)
{
  return 0;
}

void nlv4_inference_orchestrator::inference_engine::BertE5MLModule::~BertE5MLModule(void **this)
{
  nlv4_inference_orchestrator::inference_engine::BertE5MLModule::~BertE5MLModule(this);
  JUMPOUT(0x1C3BB9B44);
}

{
  *this = &off_1E7BE96D0;
  if (*((char *)this + 903) < 0)
    operator delete(this[110]);
  if (*((char *)this + 879) < 0)
    operator delete(this[107]);
  if (*((char *)this + 855) < 0)
    operator delete(this[104]);
  if (*((char *)this + 831) < 0)
    operator delete(this[101]);
  if (*((char *)this + 807) < 0)
    operator delete(this[98]);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::~EspressoE5MLModule((snlp::common::espresso_inference::e5ml::EspressoE5MLModule *)(this + 54));
  nlv4_inference_orchestrator::inference_engine::BertModule::~BertModule(this);
}

void nlv4_inference_orchestrator::inference_engine::BertE5MLModule::getSentenceEmbeddings(nlv4_inference_orchestrator::inference_engine::BertE5MLModule *this@<X0>, std::string *a2@<X8>)
{
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getOutput((uint64_t)this + 432, (unsigned __int8 *)this + 64, a2);
}

void nlv4_inference_orchestrator::inference_engine::BertE5MLModule::getSubwordEmbeddings(nlv4_inference_orchestrator::inference_engine::BertE5MLModule *this@<X0>, std::string *a2@<X8>)
{
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getOutput((uint64_t)this + 432, (unsigned __int8 *)this + 88, a2);
}

void nlv4_inference_orchestrator::inference_engine::BertE5MLModule::getModuleOutput(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, std::string *a3@<X8>)
{
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getOutput(a1 + 432, a2, a3);
}

void nlv4_inference_orchestrator::inference_engine::BertE5MLModule::setInputTensors(nlv4_inference_orchestrator::inference_engine::BertE5MLModule *this, nlv4_inference_orchestrator::inference_engine::BertModuleInputType *a2)
{
  NSObject *v4;
  int v5;
  char *v6;
  std::runtime_error *exception;
  std::runtime_error *v8;
  std::runtime_error *v9;
  std::string v10;

  v4 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v10.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C2196000, v4, OS_LOG_TYPE_DEBUG, "setting Padded E5ML inputs.", (uint8_t *)&v10, 2u);
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this + 432, (unsigned __int8 *)this + 376, (uint64_t)a2);
  if (!*((_BYTE *)a2 + 96))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v10, "Received invalid tensor for utteranceTokensMask input!");
    std::runtime_error::runtime_error(exception, &v10);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this + 432, (unsigned __int8 *)this + 400, (uint64_t)a2 + 48);
  if (*((_BYTE *)a2 + 152) || *((_BYTE *)a2 + 208))
  {
    v5 = *((_DWORD *)this + 2);
    if (v5 == 2)
    {
      if (!*((_BYTE *)a2 + 152))
      {
        v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&v10, "Received invalid tensor for featurePoolingMask input!");
        std::runtime_error::runtime_error(v9, &v10);
        v9->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
      }
      v6 = (char *)a2 + 104;
    }
    else
    {
      if (v5 != 3)
        return;
      if (!*((_BYTE *)a2 + 208))
      {
        v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&v10, "Received invalid tensor for featurePoolingMask2D input!");
        std::runtime_error::runtime_error(v8, &v10);
        v8->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
      }
      v6 = (char *)a2 + 160;
    }
    snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this + 432, (unsigned __int8 *)this + 208, (uint64_t)v6);
  }
}

void sub_1C2214558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  char v15;

  if (a14 < 0)
    operator delete(__p);
  if ((v15 & 1) != 0)
    __cxa_free_exception(v14);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::BertModule::~BertModule(void **this)
{
  void *v2;

  *this = &unk_1E7BE9600;
  if (*((char *)this + 423) < 0)
    operator delete(this[50]);
  if (*((char *)this + 399) < 0)
    operator delete(this[47]);
  if (*((char *)this + 375) < 0)
    operator delete(this[44]);
  if (*((char *)this + 351) < 0)
    operator delete(this[41]);
  if (*((char *)this + 327) < 0)
    operator delete(this[38]);
  if (*((char *)this + 303) < 0)
    operator delete(this[35]);
  if (*((char *)this + 279) < 0)
    operator delete(this[32]);
  if (*((char *)this + 255) < 0)
    operator delete(this[29]);
  if (*((char *)this + 231) < 0)
    operator delete(this[26]);
  if (*((char *)this + 207) < 0)
    operator delete(this[23]);
  if (*((char *)this + 183) < 0)
    operator delete(this[20]);
  v2 = this[17];
  if (v2)
  {
    this[18] = v2;
    operator delete(v2);
  }
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

void nlv4_inference_orchestrator::inference_engine::BertModuleOutputType::~BertModuleOutputType(nlv4_inference_orchestrator::inference_engine::BertModuleOutputType *this)
{
  void *v2;
  void *v3;

  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 104);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 48);
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

void nlv4_inference_orchestrator::inference_engine::BertModuleInputType::~BertModuleInputType(nlv4_inference_orchestrator::inference_engine::BertModuleInputType *this)
{
  void *v2;
  void *v3;

  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 328);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 272);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 216);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 160);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 104);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 48);
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

void nlv4_inference_orchestrator::inference_engine::BertE5MLModule::setUtteranceTokens(uint64_t a1, uint64_t a2)
{
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput(a1 + 432, (unsigned __int8 *)(a1 + 376), a2);
}

void nlv4_inference_orchestrator::inference_engine::BertE5MLModule::setUtteranceTokensMask(uint64_t a1, uint64_t a2)
{
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput(a1 + 432, (unsigned __int8 *)(a1 + 400), a2);
}

void nlv4_inference_orchestrator::inference_engine::BertE5MLModule::setFeaturePoolingMask(uint64_t a1, uint64_t a2)
{
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput(a1 + 432, (unsigned __int8 *)(a1 + 208), a2);
}

void nlv4_inference_orchestrator::inference_engine::BertE5MLModule::setTypeIds(uint64_t a1, uint64_t a2)
{
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput(a1 + 432, (unsigned __int8 *)(a1 + 856), a2);
}

uint64_t snlp::ssu::cache::SSUCacheObjectParameter::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const void **v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v24;
  uint64_t result;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 0;
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  v9 = a1[47];
  if ((v9 & 0x80u) == 0)
    v10 = a1[47];
  else
    v10 = *((_QWORD *)a1 + 4);
  v11 = v6[47];
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = *((_QWORD *)v6 + 4);
  if (v10 != v11)
    return 0;
  v13 = (const void **)(a1 + 24);
  v16 = (unsigned __int8 *)*((_QWORD *)v6 + 3);
  v15 = v6 + 24;
  v14 = v16;
  if (v12 >= 0)
    v17 = v15;
  else
    v17 = v14;
  if ((v9 & 0x80) != 0)
    return memcmp(*v13, v17, *((_QWORD *)a1 + 4)) == 0;
  if (!a1[47])
    return 1;
  v18 = v9 - 1;
  do
  {
    v20 = *(unsigned __int8 *)v13;
    v13 = (const void **)((char *)v13 + 1);
    v19 = v20;
    v22 = *v17++;
    v21 = v22;
    v24 = v18-- != 0;
    result = v19 == v21;
  }
  while (v19 == v21 && v24);
  return result;
}

uint64_t snlp::ssu::cache::SSUCacheObjectIntent::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t result;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 0;
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  v11 = a1 + 24;
  v9 = (unsigned __int8 *)*((_QWORD *)a1 + 3);
  v10 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  v13 = v6 + 24;
  v12 = (unsigned __int8 *)*((_QWORD *)v6 + 3);
  if (v10 - v9 != *((_QWORD *)v13 + 1) - (_QWORD)v12)
    return 0;
  if (v9 == v10)
    return 1;
  do
  {
    result = snlp::ssu::cache::SSUCacheObjectParameter::operator==(v9, v12);
    if (!(_DWORD)result)
      break;
    v9 += 48;
    v12 += 48;
  }
  while (v9 != v10);
  return result;
}

uint64_t snlp::ssu::cache::SSUCacheObjectIntentList::operator==(unsigned __int8 **a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(unsigned __int8 **)a2;
  if (v3 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v2 == v3)
    return 1;
  do
  {
    result = snlp::ssu::cache::SSUCacheObjectIntent::operator==(v2, v4);
    if (!(_DWORD)result)
      break;
    v2 += 48;
    v4 += 48;
  }
  while (v2 != v3);
  return result;
}

uint64_t snlp::ssu::cache::SSUCacheObjectIntentList::operator!=(unsigned __int8 **a1, uint64_t a2)
{
  return snlp::ssu::cache::SSUCacheObjectIntentList::operator==(a1, a2) ^ 1;
}

unint64_t snlp::ssu::cache::SSUCacheObjectIntentList::numUniqueIntents(snlp::ssu::cache::SSUCacheObjectIntentList *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
}

void snlp::ssu::cache::SSUCacheObjectIntentList::getIntentWithIndex(snlp::ssu::cache::SSUCacheObjectIntentList *this@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4;
  __int128 *v6;
  __int128 v7;
  char v8;

  v4 = *(_QWORD *)this;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4) <= a2)
  {
    v8 = 0;
    a3->__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    v6 = (__int128 *)(v4 + 48 * a2);
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v7 = *v6;
      a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
    }
    a3[1].__r_.__value_.__r.__words[0] = 0;
    a3[1].__r_.__value_.__l.__size_ = 0;
    a3[1].__r_.__value_.__r.__words[2] = 0;
    std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::__init_with_size[abi:ne180100]<snlp::ssu::cache::SSUCacheObjectParameter*,snlp::ssu::cache::SSUCacheObjectParameter*>(a3[1].__r_.__value_.__r.__words, *(_QWORD *)(v4 + 48 * a2 + 24), *(_QWORD *)(v4 + 48 * a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v4 + 48 * a2 + 32) - *(_QWORD *)(v4 + 48 * a2 + 24)) >> 4));
    v8 = 1;
  }
  a3[2].__r_.__value_.__s.__data_[0] = v8;
}

void sub_1C2214BE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::__init_with_size[abi:ne180100]<snlp::ssu::cache::SSUCacheObjectParameter*,snlp::ssu::cache::SSUCacheObjectParameter*>(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 *v11;
  __int128 v12;
  std::string *v13;
  const std::string::value_type **v14;
  __int128 v15;

  if (a4)
  {
    if (a4 >= 0x555555555555556)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(a4);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[48 * v8];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = &v7[v9];
        v11 = (__int128 *)(a2 + v9);
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v7[v9], *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
        }
        else
        {
          v12 = *v11;
          *((_QWORD *)v10 + 2) = *((_QWORD *)v11 + 2);
          *(_OWORD *)v10 = v12;
        }
        v13 = (std::string *)&v7[v9 + 24];
        v14 = (const std::string::value_type **)(a2 + v9 + 24);
        if (*(char *)(a2 + v9 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(v13, *v14, *(_QWORD *)(a2 + v9 + 32));
        }
        else
        {
          v15 = *(_OWORD *)v14;
          *(_QWORD *)&v7[v9 + 40] = *(_QWORD *)(a2 + v9 + 40);
          *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v15;
        }
        v9 += 48;
      }
      while (a2 + v9 != a3);
      v7 += v9;
    }
    a1[1] = v7;
  }
}

void sub_1C2214D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a1);
}

uint64_t snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive::getNumEncodings(snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive *this)
{
  if (*((_QWORD *)this + 1) == *(_QWORD *)this)
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
  return **(_QWORD **)this;
}

uint64_t snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative::getNumEncodings(snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative *this)
{
  if (*((_QWORD *)this + 1) == *(_QWORD *)this)
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
  return **(_QWORD **)this;
}

void *boost::serialization::singleton_module::get_lock(boost::serialization::singleton_module *this)
{
  return &boost::serialization::singleton_module::get_lock(void)::lock;
}

void snlp::ssu::matcher::SSUMatcher::buildFromPathsWithLazyInitialize(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, std::string **a5@<X8>)
{
  const std::__fs::filesystem::path *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15[3];
  std::__shared_weak_count *v16;

  v8 = (const std::__fs::filesystem::path *)(a4 + 24);
  snlp::ssu::matcher::SSUMatcher::validateAssetVersion((uint64_t)(a4 + 24), a2, a3);
  v9 = (std::__shared_weak_count *)operator new(0x88uLL);
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7BECBB8;
  v15[0] = (uint64_t)snlp::ssu::encoder::SSUEncoderFactoryLazy::SSUEncoderFactoryLazy((snlp::ssu::encoder::SSUEncoderFactoryLazy *)&v9[1], v8);
  v15[1] = (uint64_t)v9;
  v15[2] = 0;
  v16 = 0;
  snlp::ssu::matcher::SSUMatcher::buildFromPaths(a1, a4, v15, a5);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1C2214EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::matcher::SSUMatcher::validateAssetVersion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v7[2];
  char v8;
  uint64_t AssetDirectoryGenerationNumber;
  std::__fs::filesystem::path v10;
  std::__fs::filesystem::path v11;
  std::string __p;
  _BYTE v13[32];

  std::string::basic_string[abi:ne180100]<0>(&v10, "version.yaml");
  v11 = v10;
  memset(&v10, 0, sizeof(v10));
  std::__fs::filesystem::operator/[abi:ne180100](&__p, a1, &v11);
  getAssetDirectoryNCV((const std::__fs::filesystem::path *)&__p, (uint64_t)v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__pn_.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v10, "config.json");
  v11 = v10;
  memset(&v10, 0, sizeof(v10));
  std::__fs::filesystem::operator/[abi:ne180100](&__p, a1, &v11);
  AssetDirectoryGenerationNumber = getAssetDirectoryGenerationNumber((const std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__pn_.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v7, "SSU");
  SNLPAssetVersionChecks::assertAssetVersionValid((uint64_t)v7, (uint64_t)&AssetDirectoryGenerationNumber, (uint64_t)v13, a2, a3);
  if (v8 < 0)
    operator delete(v7[0]);
  return MEMORY[0x1C3BB8674](v13);
}

void sub_1C2215088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3BB8674](v34 - 64);
  _Unwind_Resume(a1);
}

void sub_1C22150F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a19 < 0)
    operator delete(a14);
  JUMPOUT(0x1C22150ECLL);
}

void snlp::ssu::matcher::SSUMatcher::buildFromPaths(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, std::string **a4@<X8>)
{
  NSObject *v8;
  std::string *v9;
  std::string::size_type v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  snlp::ssu::matcher::SSUMatcherConfig *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  NSObject *v16;
  std::string::size_type v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::string *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  _QWORD *v98;
  std::__shared_weak_count *v99;
  std::string::size_type v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  _QWORD *v104;
  std::__shared_weak_count *v105;
  std::string::size_type v106;
  std::__shared_weak_count *v107;
  std::string v108;
  int v109;
  void *v110;
  char v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count *v114;
  void *v115;
  char v116;
  _QWORD *v117;
  std::__shared_weak_count *v118;
  std::string v119;
  uint64_t v120;
  std::string v121;
  _BYTE v122[16];
  int v123;
  int v124;
  int v125;
  std::string::size_type v126;
  std::__shared_weak_count *v127;
  std::string v128;
  char v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count *v132;
  void *v133;
  char v134;
  std::string::size_type v135;
  std::__shared_weak_count *v136;
  std::string buf;
  void *v138;
  char v139;
  void *v140;
  char v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count *v145;
  std::string __p;
  void *v147;
  char v148;
  void *v149;
  void *v150;
  _BYTE v151[24];
  uint64_t v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count *v155;
  char v156;
  std::locale v157[4];

  v157[1] = *(std::locale *)MEMORY[0x1E0C80C00];
  v8 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    snlp::ssu::matcher::SSUMatcherDirectories::toString((uint64_t *)&__p, (snlp::ssu::matcher::SSUMatcherDirectories *)a2);
    v9 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
    _os_log_impl(&dword_1C2196000, v8, OS_LOG_TYPE_DEBUG, "Building an SSUMatcher instance with directories %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  snlp::ssu::cache::SSUCacheDirectory::withDirectory((std::__fs::filesystem::path *)a2, (std::string **)&__p);
  v10 = __p.__r_.__value_.__r.__words[0];
  v126 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    v11 = (std::__shared_weak_count *)operator new();
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7BECCD0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
    v127 = v11;
    std::string::basic_string[abi:ne180100]<0>(&v128, "version.yaml");
    buf = v128;
    memset(&v128, 0, sizeof(v128));
    std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)(a2 + 24), (std::__fs::filesystem::path *)&buf);
    getAssetDirectoryNCV((const std::__fs::filesystem::path *)&__p, (uint64_t)v122);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v128.__r_.__value_.__l.__data_);
    boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format((uint64_t *)&__p, "%s.%s.%s");
    LODWORD(v128.__r_.__value_.__l.__data_) = v124;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)boost::io::detail::call_put_head<char,std::char_traits<char>,unsigned int const>;
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)boost::io::detail::call_put_last<char,std::char_traits<char>,unsigned int const>;
    boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t *)&__p, &buf);
    v109 = v123;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)boost::io::detail::call_put_head<char,std::char_traits<char>,unsigned int const>;
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)boost::io::detail::call_put_last<char,std::char_traits<char>,unsigned int const>;
    boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t *)&__p, &buf);
    LODWORD(v119.__r_.__value_.__l.__data_) = v125;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)boost::io::detail::call_put_head<char,std::char_traits<char>,unsigned int const>;
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)boost::io::detail::call_put_last<char,std::char_traits<char>,unsigned int const>;
    boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t *)&__p, &buf);
    boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(&v121, (uint64_t *)&__p);
    if (v156)
    {
      std::locale::~locale(v157);
      v156 = 0;
    }
    boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf((uint64_t)&v152);
    if ((v151[15] & 0x80000000) != 0)
      operator delete(v150);
    if (v147)
      operator delete(v147);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    v13 = (snlp::ssu::matcher::SSUMatcherConfig *)(a2 + 48);
    snlp::ssu::matcher::SSUMatcherConfig::loadMatcherConfig(v13, &v119);
    v14 = (std::__shared_weak_count *)operator new(0x20uLL);
    v14->__shared_owners_ = 0;
    v15 = (unint64_t *)&v14->__shared_owners_;
    v14->__shared_weak_owners_ = 0;
    v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7BECB48;
    v117 = &v14[1].__vftable;
    v118 = v14;
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v108, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
    else
      v108 = v119;
    v106 = v10;
    v107 = v11;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    v104 = &v14[1].__vftable;
    v105 = v14;
    do
      v19 = __ldxr(v15);
    while (__stxr(v19 + 1, v15));
    v20 = (std::__shared_weak_count *)a3[1];
    v102 = *a3;
    v103 = v20;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    snlp::ssu::matcher::SSUPersister::SSUPersister((uint64_t)&v109, (__int128 *)&v108, (uint64_t)&v106, (uint64_t)&v104, (uint64_t)&v102, (__int128 *)&v121);
    v23 = v103;
    if (v103)
    {
      v24 = (unint64_t *)&v103->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v105;
    if (v105)
    {
      v27 = (unint64_t *)&v105->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = v107;
    if (v107)
    {
      v30 = (unint64_t *)&v107->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
    v100 = v126;
    v101 = v127;
    if (v127)
    {
      v32 = (unint64_t *)&v127->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v98 = v117;
    v99 = v118;
    if (v118)
    {
      v34 = (unint64_t *)&v118->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v36 = (std::__shared_weak_count *)a3[1];
    v96 = *a3;
    v97 = v36;
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    snlp::ssu::matcher::SSURequestHandler::SSURequestHandler(&buf, (__int128 *)&v121, (__int128 *)v13, (__int128 *)&v119, (uint64_t)&v100, (uint64_t)&v98, (uint64_t)&v96);
    v39 = v97;
    if (v97)
    {
      v40 = (unint64_t *)&v97->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = v99;
    if (v99)
    {
      v43 = (unint64_t *)&v99->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = v101;
    if (v101)
    {
      v46 = (unint64_t *)&v101->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = (std::string *)operator new();
    v135 = v126;
    v136 = v127;
    if (v127)
    {
      v49 = (unint64_t *)&v127->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    snlp::ssu::matcher::SSUPersister::SSUPersister((uint64_t)&v128, (uint64_t)&v109);
    snlp::ssu::matcher::SSURequestHandler::SSURequestHandler(&__p, (__int128 *)&buf);
    snlp::ssu::matcher::SSUMatcher::SSUMatcher(v48, (__int128 *)&v119, a1, &v135, (uint64_t)&v128, (__int128 *)&__p);
    *a4 = v48;
    v51 = v155;
    if (v155)
    {
      v52 = (unint64_t *)&v155->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = v154;
    if (v154)
    {
      v55 = (unint64_t *)&v154->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v57 = v153;
    if (v153)
    {
      v58 = (unint64_t *)&v153->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    if (SHIBYTE(v150) < 0)
      operator delete(v149);
    if (v148 < 0)
      operator delete(v147);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v134 < 0)
      operator delete(v133);
    v60 = v132;
    if (v132)
    {
      v61 = (unint64_t *)&v132->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v63 = v131;
    if (v131)
    {
      v64 = (unint64_t *)&v131->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v66 = v130;
    if (v130)
    {
      v67 = (unint64_t *)&v130->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    if (v129 < 0)
      operator delete((void *)v128.__r_.__value_.__l.__size_);
    v69 = v136;
    if (v136)
    {
      v70 = (unint64_t *)&v136->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v72 = v145;
    if (v145)
    {
      v73 = (unint64_t *)&v145->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    v75 = v144;
    if (v144)
    {
      v76 = (unint64_t *)&v144->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    v78 = v143;
    if (v143)
    {
      v79 = (unint64_t *)&v143->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    if (v141 < 0)
      operator delete(v140);
    if (v139 < 0)
      operator delete(v138);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (v116 < 0)
      operator delete(v115);
    v81 = v114;
    if (v114)
    {
      v82 = (unint64_t *)&v114->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
    v84 = v113;
    if (v113)
    {
      v85 = (unint64_t *)&v113->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    v87 = v112;
    if (v112)
    {
      v88 = (unint64_t *)&v112->__shared_owners_;
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    if (v111 < 0)
      operator delete(v110);
    v90 = v118;
    if (v118)
    {
      v91 = (unint64_t *)&v118->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v119.__r_.__value_.__l.__data_);
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v121.__r_.__value_.__l.__data_);
    MEMORY[0x1C3BB8674](v122);
  }
  else
  {
    v127 = 0;
    v16 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      if (a2[23] >= 0)
        v17 = (std::string::size_type)a2;
      else
        v17 = *(_QWORD *)a2;
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v17;
      _os_log_impl(&dword_1C2196000, v16, OS_LOG_TYPE_ERROR, "Failed to build cache directory instance using root path: %s", (uint8_t *)&__p, 0xCu);
    }
    *a4 = 0;
  }
  v93 = v127;
  if (v127)
  {
    v94 = (unint64_t *)&v127->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
}

void sub_1C2215B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  snlp::ssu::matcher::SSUMatcherConfig::~SSUMatcherConfig(&a39);
  if (a52 < 0)
    operator delete(__p);
  MEMORY[0x1C3BB8674](&a53);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a57);
  _Unwind_Resume(a1);
}

void sub_1C2215D00()
{
  JUMPOUT(0x1C2215CF8);
}

uint64_t std::default_delete<snlp::ssu::cache::SSUCacheDirectory>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(result + 24));
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

int64x2_t *boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format(uint64_t *a1, char *a2)
{
  int64x2_t *v3;
  std::locale::facet *v4;
  int v5;
  std::string::size_type v6;
  __int8 v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string::size_type v10;
  std::string::size_type size;
  std::string *v12;
  std::string *v13;
  int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  std::string::size_type v17;
  const std::locale::facet *v18;
  char v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::string::size_type v36;
  std::string::size_type v37;
  std::string::size_type v38;
  std::string::size_type v39;
  std::string *v40;
  int64_t v41;
  int64_t v42;
  std::string *v43;
  std::string *v44;
  unsigned __int8 *v45;
  unint64_t v46;
  uint64_t v47;
  int *v48;
  unsigned int v49;
  unsigned __int8 *v50;
  int v51;
  char v52;
  uint64_t v53;
  int *v54;
  int *v55;
  int v56;
  int v57;
  int v58;
  unsigned __int8 *v59;
  std::string *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int *v67;
  int v68;
  int v69;
  std::string *v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  char v75;
  int v76;
  unsigned __int8 *v77;
  int v78;
  int v79;
  int v80;
  std::string *v81;
  int v82;
  int v83;
  int v84;
  _BOOL4 v86;
  int v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unsigned __int8 *v105;
  int v106;
  unsigned int v107;
  int v108;
  std::string *v109;
  std::string::size_type v110;
  std::string *v111;
  int v112;
  int v113;
  _DWORD *v114;
  char v115;
  __int32 v116;
  int v118;
  char v119;
  char v120;
  uint64_t v121;
  int v122;
  unsigned int v123;
  uint64_t v124;
  void *v125;
  unsigned __int8 v126;
  int v127;
  unsigned int v128;
  boost::io::detail *v129;
  std::string *v130;
  unsigned __int8 __c;
  std::string v133;
  char *v134;
  std::locale v135;
  void *v136[2];
  void *__p[2];
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  int v143;
  char v144;
  std::locale v145;
  uint64_t v146;
  int v147;
  uint64_t v148;

  v3 = (int64x2_t *)a1;
  v148 = *MEMORY[0x1E0C80C00];
  a1[8] = 0;
  v130 = (std::string *)(a1 + 8);
  v121 = (uint64_t)(a1 + 3);
  a1[9] = 0;
  a1[10] = 0;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)((char *)a1 + 45) = 0u;
  *((_BYTE *)a1 + 88) = -1;
  std::streambuf::basic_streambuf();
  v3[6].i64[0] = (uint64_t)&off_1E7BEBD60;
  v3[10].i64[0] = 0;
  v3[10].i8[8] = 0;
  v3[10].i32[3] = 24;
  v3[11].i8[8] = 0;
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v133, a2);
    boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::getloc(&v135, (uint64_t)v3);
    v4 = (std::locale::facet *)std::locale::use_facet(&v135, MEMORY[0x1E0DE4A90]);
    std::locale::~locale(&v135);
    __c = ((uint64_t (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 37);
    v5 = 0;
    v6 = 0;
    v7 = v3[5].i8[8];
    while (1)
    {
      v8 = std::string::find(&v133, __c, v6);
      if (v8 == -1)
        break;
      v9 = v8 + 1;
      v10 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v133.__r_.__value_.__r.__words[2]);
      else
        size = v133.__r_.__value_.__l.__size_;
      if (v9 >= size)
      {
        if ((v7 & 1) != 0)
        {
          v135.__locale_ = (std::locale::__imp *)&off_1E7BEBD38;
          v136[0] = (void *)v8;
          v136[1] = (void *)size;
          boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v135);
        }
        ++v5;
        break;
      }
      v12 = (std::string *)v133.__r_.__value_.__r.__words[0];
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v133;
      else
        v13 = (std::string *)v133.__r_.__value_.__r.__words[0];
      v14 = v13->__r_.__value_.__s.__data_[v9];
      if ((*((_BYTE *)&v133.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (v14 != *(unsigned __int8 *)(v133.__r_.__value_.__r.__words[0] + v8))
        {
          v10 = v133.__r_.__value_.__l.__size_;
          goto LABEL_17;
        }
LABEL_15:
        v6 = v8 + 2;
      }
      else
      {
        v12 = &v133;
        if (v14 == v133.__r_.__value_.__s.__data_[v8])
          goto LABEL_15;
LABEL_17:
        v15 = (unsigned __int8 *)v12 + v9;
        if (v9 != v10)
        {
          v16 = (unsigned __int8 *)v12 + v10;
          v17 = ~v8 + v10;
          while (((char)*v15 & 0x80000000) == 0 && (*((_DWORD *)&v4[1].~facet + *v15) & 0x400) != 0)
          {
            ++v15;
            if (!--v17)
            {
              v15 = v16;
              break;
            }
          }
        }
        v6 = v15 - (unsigned __int8 *)v13;
        if (v15 - (unsigned __int8 *)v13 < size && *v15 == __c)
          ++v6;
        ++v5;
      }
    }
    boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::getloc(&v135, (uint64_t)v3);
    v18 = std::locale::use_facet(&v135, MEMORY[0x1E0DE4A90]);
    v19 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 32);
    v20 = v5;
    std::locale::~locale(&v135);
    v21 = (char *)v3->i64[1];
    if (v21 == (char *)v3->i64[0])
    {
      LODWORD(v135.__locale_) = -1;
      v144 = 0;
      *(_OWORD *)v136 = 0u;
      *(_OWORD *)__p = 0u;
      v138 = 0u;
      v139 = 0;
      v140 = 6;
      v141 = v19;
      v143 = 0;
      v142 = 4098;
      v146 = 0x7FFFFFFFFFFFFFFFLL;
      v147 = 0;
      v22 = v3[1].i64[0];
      if (0xEEEEEEEEEEEEEEEFLL * ((v22 - (uint64_t)v21) >> 3) >= v5)
      {
        v29 = &v21[120 * v5];
        if ((_DWORD)v20)
        {
          v34 = 120 * v20;
          do
          {
            std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::construct[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>> const&>((uint64_t)v21, (uint64_t)&v135);
            v21 += 120;
            v34 -= 120;
          }
          while (v34);
        }
      }
      else
      {
        if (v21)
        {
          v3->i64[1] = (uint64_t)v21;
          operator delete(v21);
          v22 = 0;
          v3->i64[0] = 0;
          v3->i64[1] = 0;
          v3[1].i64[0] = 0;
        }
        v23 = 0xEEEEEEEEEEEEEEEFLL * (v22 >> 3);
        v24 = 2 * v23;
        if (2 * v23 <= v5)
          v24 = v5;
        if (v23 >= 0x111111111111111)
          v25 = 0x222222222222222;
        else
          v25 = v24;
        if (v25 > 0x222222222222222)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>>(v25);
        v3->i64[0] = (uint64_t)v26;
        v3->i64[1] = (uint64_t)v26;
        v3[1].i64[0] = (uint64_t)&v26[120 * v27];
        v28 = 120 * v5;
        v29 = &v26[v28];
        do
        {
          std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::construct[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>> const&>((uint64_t)v26, (uint64_t)&v135);
          v26 += 120;
          v28 -= 120;
        }
        while (v28);
      }
      v3->i64[1] = (uint64_t)v29;
      if (v144)
      {
        std::locale::~locale(&v145);
        v144 = 0;
      }
      if (SHIBYTE(v138) < 0)
        operator delete(__p[1]);
      if (SHIBYTE(__p[0]) < 0)
        operator delete(v136[0]);
    }
    else if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v21[-v3->i64[0]] >> 3) >= v5)
    {
      std::vector<BOOL>::resize(v121);
      if (v5)
        goto LABEL_51;
    }
    else
    {
      LODWORD(v135.__locale_) = -1;
      v144 = 0;
      *(_OWORD *)v136 = 0u;
      *(_OWORD *)__p = 0u;
      v138 = 0u;
      v139 = 0;
      v140 = 6;
      v141 = v19;
      v143 = 0;
      v142 = 4098;
      v146 = 0x7FFFFFFFFFFFFFFFLL;
      v147 = 0;
      std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::resize(v3, v5, (uint64_t)&v135);
      if (v144)
      {
        std::locale::~locale(&v145);
        v144 = 0;
      }
      if (SHIBYTE(v138) < 0)
        operator delete(__p[1]);
      if (SHIBYTE(__p[0]) < 0)
        operator delete(v136[0]);
      std::vector<BOOL>::resize(v121);
LABEL_51:
      v30 = 0;
      do
      {
        v31 = v3->i64[0];
        v32 = v3->i64[0] + v30;
        *(_DWORD *)v32 = -1;
        *(_QWORD *)(v32 + 104) = 0x7FFFFFFFFFFFFFFFLL;
        *(_DWORD *)(v32 + 112) = 0;
        std::string::resize((std::string *)(v32 + 8), 0, 0);
        std::string::resize((std::string *)(v32 + 32), 0, 0);
        v33 = v31 + v30;
        *(_OWORD *)(v33 + 56) = xmmword_1C230B520;
        *(_BYTE *)(v33 + 72) = v19;
        *(_DWORD *)(v33 + 84) = 0;
        *(_QWORD *)(v33 + 76) = 4098;
        v30 += 120;
        --v20;
      }
      while (v20);
    }
    std::string::resize(v130, 0, 0);
    v35 = 0;
    v36 = 0;
    v122 = -1;
    v123 = 0;
    v119 = 0;
    v120 = 1;
LABEL_64:
    v129 = (boost::io::detail *)(v35 - 1);
    v37 = v36;
    while (2)
    {
      v38 = std::string::find(&v133, __c, v37);
      if (v38 != -1)
      {
        v39 = v38;
        v40 = v130;
        if (v35)
          v40 = (std::string *)(v3->i64[0] + 120 * (_QWORD)v129 + 32);
        v41 = v39 + 1;
        v42 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
        v43 = (std::string *)v133.__r_.__value_.__r.__words[0];
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v43 = &v133;
        if (v43->__r_.__value_.__s.__data_[v41] == v43->__r_.__value_.__s.__data_[v39])
        {
          std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(v40, (char *)v43 + v36, (char *)v43 + v41);
          v36 = v39 + 2;
          v37 = v39 + 2;
LABEL_115:
          v3 = (int64x2_t *)a1;
          continue;
        }
        if (v39 != v36)
        {
          std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(v40, (char *)v43 + v36, (char *)v43 + v39);
          v42 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
          v36 = v39;
          v3 = (int64x2_t *)a1;
        }
        if ((v42 & 0x80) != 0)
        {
          v42 = v133.__r_.__value_.__l.__size_;
          v44 = (std::string *)v133.__r_.__value_.__r.__words[0];
        }
        else
        {
          v44 = &v133;
        }
        v45 = (unsigned __int8 *)v44 + v41;
        v46 = (unint64_t)v44 + v42;
        v134 = (char *)v44 + v42;
        v47 = v3->i64[0];
        v48 = (int *)(v3->i64[0] + 120 * v35);
        v49 = v3[5].u8[8];
        *v48 = -1;
        v125 = (void *)v42;
        if (v42 <= v41)
        {
          v50 = (unsigned __int8 *)v44 + v41;
          if ((v49 & 1) != 0)
          {
            v135.__locale_ = (std::locale::__imp *)&off_1E7BEBD38;
            v136[0] = (void *)v41;
            v136[1] = (void *)v42;
            boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v135);
          }
          goto LABEL_112;
        }
        v124 = v47;
        v127 = *v45;
        v128 = v49;
        v126 = ((uint64_t (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 124);
        v50 = v45;
        if (v127 == v126)
        {
          v50 = v45 + 1;
          if ((unint64_t)(v45 + 1) >= v46)
          {
            if ((v128 & 1) != 0)
            {
              v135.__locale_ = (std::locale::__imp *)&off_1E7BEBD38;
              v136[0] = (void *)(v41 + 1);
              v136[1] = v125;
              boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v135);
            }
LABEL_112:
            v70 = &v133;
            if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v70 = (std::string *)v133.__r_.__value_.__r.__words[0];
            v37 = v50 - (unsigned __int8 *)v70;
            goto LABEL_115;
          }
        }
        v51 = *v50;
        if (v51 == ((unsigned __int8 (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 48)
          || (char)*v50 < 0
          || (*((_DWORD *)&v4[1].~facet + *v50) & 0x400) == 0)
        {
LABEL_83:
          v52 = v128;
          if (v50 != (unsigned __int8 *)v46)
          {
            v53 = v124 + 120 * v35;
            v54 = (int *)(v53 + 76);
            v55 = (int *)(v53 + 112);
            while (1)
            {
              v56 = ((uint64_t (*)(std::locale::facet *, _QWORD, _QWORD))v4->__vftable[3].~facet)(v4, (char)*v50, 0);
              if (v56 <= 38)
              {
                if (v56 == 32)
                {
                  v58 = *v55 | 2;
LABEL_99:
                  *v55 = v58;
                  goto LABEL_100;
                }
                if (v56 != 35)
                  goto LABEL_127;
                v57 = *v54 | 0x600;
              }
              else
              {
                switch(v56)
                {
                  case '\'':
                    goto LABEL_100;
                  case '(':
                  case ')':
                  case '*':
                  case ',':
                  case '.':
                  case '/':
                    goto LABEL_127;
                  case '+':
                    v57 = *v54 | 0x800;
                    break;
                  case '-':
                    v57 = *v54 | 0x20;
                    break;
                  case '0':
                    v58 = *v55 | 1;
                    goto LABEL_99;
                  default:
                    if (v56 == 61)
                    {
                      v58 = *v55 | 4;
                      goto LABEL_99;
                    }
                    if (v56 != 95)
                    {
LABEL_127:
                      v74 = *v50;
                      if (v74 == ((unsigned __int8 (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 42))
                      {
                        ++v50;
                        goto LABEL_129;
                      }
                      if (v50 != (unsigned __int8 *)v46)
                      {
                        v75 = v128;
                        if (((char)*v50 & 0x80000000) == 0 && (*((_DWORD *)&v4[1].~facet + *v50) & 0x400) != 0)
                        {
                          v50 = boost::io::detail::str2int<long,std::__wrap_iter<char const*>,std::ctype<char>>(v50, &v134, (_QWORD *)(v124 + 120 * v35 + 56), v4);
                          goto LABEL_129;
                        }
                        goto LABEL_130;
                      }
                      if ((v128 & 1) == 0)
                      {
LABEL_155:
                        v59 = (unsigned __int8 *)v46;
                        goto LABEL_103;
                      }
LABEL_269:
                      v135.__locale_ = (std::locale::__imp *)&off_1E7BEBD38;
                      v136[0] = (void *)(v41 - (_QWORD)v45 + v46);
                      v136[1] = v125;
                      boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v135);
                    }
                    v57 = *v54 | 0x10;
                    break;
                }
              }
              *v54 = v57;
LABEL_100:
              if (++v50 == (unsigned __int8 *)v46)
              {
                v50 = (unsigned __int8 *)v46;
                v52 = v128;
                break;
              }
            }
          }
          v59 = v50;
          if ((v52 & 1) != 0)
          {
            v135.__locale_ = (std::locale::__imp *)&off_1E7BEBD38;
            v136[0] = (void *)(v41 - (_QWORD)v45 + v46);
            v136[1] = v125;
            boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v135);
          }
LABEL_103:
          v60 = &v133;
          if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v60 = (std::string *)v133.__r_.__value_.__r.__words[0];
          v3 = (int64x2_t *)a1;
          v61 = *a1;
          v62 = *a1 + 120 * v35;
          v65 = *(_DWORD *)(v62 + 112);
          v63 = (unsigned int *)(v62 + 112);
          v64 = v65;
          if ((v65 & 1) != 0)
          {
            v66 = v61 + 120 * v35;
            v69 = *(_DWORD *)(v66 + 76);
            v67 = (unsigned int *)(v66 + 76);
            v68 = v69;
            if ((v69 & 0x20) != 0)
            {
              v64 &= ~1u;
              *v63 = v64;
              if ((v64 & 2) == 0)
                goto LABEL_119;
              goto LABEL_109;
            }
            v64 &= ~2u;
            *v63 = v64;
            *(_BYTE *)(v61 + 120 * v35 + 72) = 48;
            *v67 = v68 & 0xFFFFFF4F | 0x10;
          }
          if ((v64 & 2) == 0)
            goto LABEL_119;
LABEL_109:
          if ((*(_BYTE *)(v61 + 120 * v35 + 77) & 8) != 0)
            *v63 = v64 & 0xFFFFFFFD;
LABEL_119:
          v36 = v59 - (unsigned __int8 *)v60;
          v71 = *(_DWORD *)(v61 + 120 * v35);
          v37 = v36;
          if (v71 != -3)
          {
            if (v71 == -2)
            {
              v119 = 1;
              v107 = v123;
            }
            else
            {
              v107 = v123;
              if (v71 == -1)
              {
                v120 = 0;
              }
              else
              {
                v108 = v122;
                if (v71 > v122)
                  v108 = v71;
                v122 = v108;
              }
            }
            v123 = v107 + 1;
            ++v35;
            goto LABEL_64;
          }
          continue;
        }
        if ((unsigned __int8 *)v46 == v50)
          goto LABEL_145;
        v72 = 0;
        while (((char)*v50 & 0x80000000) == 0)
        {
          v73 = *v50;
          if ((*((_DWORD *)&v4[1].~facet + v73) & 0x400) == 0)
            break;
          v72 = ((uint64_t (*)(std::locale::facet *, _QWORD, _QWORD))v4->__vftable[3].~facet)(v4, (char)v73, 0)+ 10 * v72- 48;
          if (++v50 == (unsigned __int8 *)v46)
            goto LABEL_145;
        }
        if (v46 <= (unint64_t)v50)
        {
          v46 = (unint64_t)v50;
LABEL_145:
          v3 = (int64x2_t *)a1;
          if ((v128 & 1) != 0)
          {
            v135.__locale_ = (std::locale::__imp *)&off_1E7BEBD38;
            v136[0] = (void *)(v41 - (_QWORD)v45 + v46);
            v136[1] = v125;
            boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v135);
          }
          v81 = &v133;
          if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v81 = (std::string *)v133.__r_.__value_.__r.__words[0];
          v37 = v46 - (_QWORD)v81;
          continue;
        }
        v80 = *v50;
        if (v80 == ((unsigned __int8 (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 37))
        {
          *v48 = v72 - 1;
          v59 = v50 + 1;
          if (v127 == v126 && (v128 & 1) != 0)
          {
            v135.__locale_ = (std::locale::__imp *)&off_1E7BEBD38;
            v136[0] = &v59[v41 - (_QWORD)v45];
            v136[1] = v125;
            boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v135);
          }
          goto LABEL_103;
        }
        v82 = *v50;
        if (v82 == ((unsigned __int8 (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 36))
        {
          *v48 = v72 - 1;
          ++v50;
          goto LABEL_83;
        }
        *(_QWORD *)(v124 + 120 * v35 + 56) = v72;
        *v48 = -1;
LABEL_129:
        v75 = v128;
LABEL_130:
        if ((unint64_t)v50 >= v46)
        {
          v46 = (unint64_t)v50;
          if ((v75 & 1) == 0)
            goto LABEL_155;
          goto LABEL_269;
        }
        v76 = *v50;
        if (v76 == ((unsigned __int8 (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 46))
        {
          v59 = v50 + 1;
          v77 = (unsigned __int8 *)v46;
          if (v50 + 1 == (unsigned __int8 *)v46)
            goto LABEL_159;
          v78 = *v59;
          if (v78 == ((unsigned __int8 (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 42))
          {
            v79 = 0;
            v59 = v50 + 2;
            v50 += 2;
LABEL_161:
            if (v50 == (unsigned __int8 *)v46)
            {
LABEL_178:
              if ((v128 & 1) != 0)
              {
                v135.__locale_ = (std::locale::__imp *)&off_1E7BEBD38;
                v136[0] = (void *)(v41 - (_QWORD)v45 + v46);
                v136[1] = v125;
                boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v135);
              }
              goto LABEL_103;
            }
            v118 = v79;
            v83 = 0;
            while (1)
            {
              v84 = ((uint64_t (*)(std::locale::facet *, _QWORD, _QWORD))v4->__vftable[3].~facet)(v4, (char)*v50, 0);
              if ((v84 - 73) <= 0x31)
              {
                if (((1 << (v84 - 73)) & 0x2400A80000008) != 0)
                  goto LABEL_176;
                if (v84 == 73)
                {
                  v83 = 73;
                  goto LABEL_176;
                }
              }
              switch(v84)
              {
                case '2':
                  if (v83 == 51)
                    goto LABEL_175;
                  goto LABEL_180;
                case '3':
                  if (v83 != 73)
                    goto LABEL_180;
                  v83 = 51;
                  break;
                case '4':
                  if (v83 != 54)
                    goto LABEL_180;
LABEL_175:
                  v83 = 0;
                  break;
                case '6':
                  if (v83 != 73)
                  {
LABEL_180:
                    boost::io::detail::maybe_throw_exception(v128, (uint64_t)&v59[v41 - (_QWORD)v45], (uint64_t)v125);
                    goto LABEL_103;
                  }
                  v83 = 54;
                  break;
                default:
                  v86 = v83 != 73 && v83 != 0;
                  if ((unint64_t)v59 >= v46 || v86)
                  {
                    v46 = (unint64_t)v59;
                    goto LABEL_178;
                  }
                  if (v127 == v126
                    && (v87 = *v59,
                        v87 == ((unsigned __int8 (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 124)))
                  {
                    ++v59;
                  }
                  else
                  {
                    switch(((unsigned int (*)(std::locale::facet *, _QWORD, _QWORD))v4->__vftable[3].~facet)(v4, (char)*v59, 0))
                    {
                      case 'A':
                        v96 = v124;
                        v97 = v124 + 120 * v35;
                        v98 = *(_DWORD *)(v97 + 76) | 0x4000;
                        *(_DWORD *)(v97 + 76) = v98;
                        goto LABEL_216;
                      case 'C':
                      case 'c':
                        *(_QWORD *)(v124 + 120 * v35 + 104) = 1;
                        goto LABEL_222;
                      case 'E':
                        v99 = v124;
                        v100 = v124 + 120 * v35;
                        v101 = *(_DWORD *)(v100 + 76) | 0x4000;
                        *(_DWORD *)(v100 + 76) = v101;
                        goto LABEL_220;
                      case 'F':
                        v94 = v124;
                        v102 = v124 + 120 * v35;
                        v95 = *(_DWORD *)(v102 + 76) | 0x4000;
                        *(_DWORD *)(v102 + 76) = v95;
                        goto LABEL_213;
                      case 'G':
                        v88 = v124 + 120 * v35;
                        v89 = *(_DWORD *)(v88 + 76) | 0x4000;
                        goto LABEL_211;
                      case 'S':
                      case 's':
                        if (v118)
                          *(_QWORD *)(v124 + 120 * v35 + 104) = *(_QWORD *)(v124 + 120 * v35 + 64);
                        *(_QWORD *)(v124 + 120 * v35 + 64) = 6;
                        goto LABEL_222;
                      case 'T':
                        if ((unint64_t)++v59 >= v46)
                        {
                          boost::io::detail::maybe_throw_exception(v128, (uint64_t)&v59[v41 - (_QWORD)v45], (uint64_t)v125);
                          v50 = v59;
                          goto LABEL_112;
                        }
                        v90 = v124 + 120 * v35;
                        *(_BYTE *)(v90 + 72) = *v59;
                        *(_DWORD *)(v90 + 112) |= 8u;
LABEL_203:
                        v93 = -2;
LABEL_218:
                        *v48 = v93;
LABEL_222:
                        v105 = v59 + 1;
                        if (v127 != v126)
                        {
                          ++v59;
                          goto LABEL_103;
                        }
                        if (v105 != (unsigned __int8 *)v46)
                        {
                          v106 = *v105;
                          if (v106 == ((unsigned __int8 (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 124))
                          {
                            v59 += 2;
                            goto LABEL_103;
                          }
                          v46 = (unint64_t)(v59 + 1);
                        }
                        boost::io::detail::maybe_throw_exception(v128, v41 - (_QWORD)v45 + v46, (uint64_t)v125);
                        ++v59;
                        break;
                      case 'X':
                        *(_DWORD *)(v124 + 120 * v35 + 76) |= 0x4000u;
                        goto LABEL_206;
                      case 'a':
                        v96 = v124;
                        v98 = *(_DWORD *)(v124 + 120 * v35 + 76);
LABEL_216:
                        v103 = v96 + 120 * v35;
                        v104 = v98 & 0xFFFFFEB1 | 0x104;
                        goto LABEL_221;
                      case 'b':
                        v88 = v124 + 120 * v35;
                        v89 = *(_DWORD *)(v88 + 76) | 1;
                        goto LABEL_211;
                      case 'd':
                      case 'g':
                      case 'i':
                      case 'u':
                        goto LABEL_222;
                      case 'e':
                        v99 = v124;
                        v101 = *(_DWORD *)(v124 + 120 * v35 + 76);
LABEL_220:
                        v103 = v99 + 120 * v35;
                        v104 = v101 | 0x100;
                        goto LABEL_221;
                      case 'f':
                        v94 = v124;
                        v95 = *(_DWORD *)(v124 + 120 * v35 + 76);
LABEL_213:
                        v103 = v94 + 120 * v35;
                        v104 = v95 | 4;
LABEL_221:
                        *(_DWORD *)(v103 + 76) = v104;
                        goto LABEL_222;
                      case 'n':
                        v93 = -3;
                        goto LABEL_218;
                      case 'o':
                        v88 = v124 + 120 * v35;
                        v89 = *(_DWORD *)(v88 + 76) & 0xFFFFFFB5 | 0x40;
                        goto LABEL_211;
                      case 'p':
                      case 'x':
LABEL_206:
                        v88 = v124 + 120 * v35;
                        v89 = *(_DWORD *)(v88 + 76) & 0xFFFFFFB5 | 8;
LABEL_211:
                        *(_DWORD *)(v88 + 76) = v89;
                        goto LABEL_222;
                      case 't':
                        v91 = ((uint64_t (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 32);
                        v92 = v124 + 120 * v35;
                        *(_BYTE *)(v92 + 72) = v91;
                        *(_DWORD *)(v92 + 112) |= 8u;
                        goto LABEL_203;
                      default:
                        boost::io::detail::maybe_throw_exception(v128, (uint64_t)&v59[v41 - (_QWORD)v45], (uint64_t)v125);
                        goto LABEL_222;
                    }
                  }
                  goto LABEL_103;
              }
LABEL_176:
              v50 = ++v59;
              if (v59 == (unsigned __int8 *)v46)
              {
                v59 = (unsigned __int8 *)v46;
                goto LABEL_178;
              }
            }
          }
          v77 = v50 + 1;
          if ((char)*v59 < 0 || (v77 = v50 + 1, (*((_DWORD *)&v4[1].~facet + *v59) & 0x400) == 0))
          {
LABEL_159:
            v79 = 0;
            *(_QWORD *)(v124 + 120 * v35 + 64) = 0;
          }
          else
          {
            v77 = boost::io::detail::str2int<long,std::__wrap_iter<char const*>,std::ctype<char>>(v50 + 1, &v134, (_QWORD *)(v124 + 120 * v35 + 64), v4);
            v59 = v77;
            v79 = 1;
          }
          v50 = v77;
          goto LABEL_161;
        }
        v79 = 0;
        v59 = v50;
        goto LABEL_161;
      }
      break;
    }
    v109 = v130;
    if (v35)
      v109 = (std::string *)(v3->i64[0] + 120 * (_QWORD)v129 + 32);
    v110 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
    if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v110 = v133.__r_.__value_.__l.__size_;
    v111 = &v133;
    if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v111 = (std::string *)v133.__r_.__value_.__r.__words[0];
    std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(v109, (char *)v111 + v36, (char *)v111 + v110);
    v112 = v122;
    if ((v120 & 1) == 0)
    {
      if ((v122 & 0x80000000) == 0 && (v3[5].i8[8] & 1) != 0)
      {
        v135.__locale_ = (std::locale::__imp *)&off_1E7BEBD38;
        v136[0] = (void *)v122;
        v136[1] = 0;
        boost::throw_exception<boost::io::bad_format_string>((uint64_t)&v135);
      }
      v113 = 0;
      if (v123)
      {
        v114 = (_DWORD *)v3->i64[0];
        do
        {
          if (*v114 == -1)
            *v114 = v113++;
          v114 += 30;
          --v35;
        }
        while (v35);
      }
      v112 = v113 - 1;
    }
    v115 = ((uint64_t (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 32);
    LODWORD(v135.__locale_) = -1;
    v144 = 0;
    *(_OWORD *)v136 = 0u;
    *(_OWORD *)__p = 0u;
    v138 = 0u;
    v139 = 0;
    v140 = 6;
    v141 = v115;
    v143 = 0;
    v142 = 4098;
    v146 = 0x7FFFFFFFFFFFFFFFLL;
    v147 = 0;
    std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::resize(v3, v123, (uint64_t)&v135);
    if (v144)
    {
      std::locale::~locale(&v145);
      v144 = 0;
    }
    if (SHIBYTE(v138) < 0)
      operator delete(__p[1]);
    if (SHIBYTE(__p[0]) < 0)
      operator delete(v136[0]);
    v116 = v3[3].i32[0];
    if ((v119 & 1) != 0)
    {
      v116 |= 4u;
      v3[3].i32[0] = v116;
    }
    v3[3].i32[2] = v112 + 1;
    v3[3].i32[0] = v116 & 0xFFFFFFFE | v120 & 1;
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v133.__r_.__value_.__l.__data_);
  }
  return v3;
}

void sub_1C2216F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,std::exception a31)
{
  std::exception::~exception(&a31);
  if (a29 < 0)
    operator delete(__p);
  if (*(_BYTE *)(a22 + 184))
  {
    std::locale::~locale((std::locale *)(a22 + 192));
    *(_BYTE *)(a22 + 184) = 0;
  }
  boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf(a11);
  if (*(char *)(a22 + 87) < 0)
    operator delete(*a21);
  if (*a13)
    operator delete(*a13);
  __p = (void *)a22;
  std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t boost::io::detail::call_put_last<char,std::char_traits<char>,unsigned int const>()
{
  return std::ostream::operator<<();
}

uint64_t *boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const std::locale *v16;
  std::ios_base *v17;
  std::locale *rdbuf;
  std::locale *v19;
  uint64_t v20;
  char *v21;
  int v22;
  int64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  std::string::value_type *v26;
  uint64_t v27;
  _BYTE *v28;
  char v29;
  int v30;
  const std::locale::facet *v31;
  unsigned __int8 v32;
  int v33;
  const std::locale::facet *v34;
  unsigned __int8 v35;
  uint64_t v36;
  int64_t v37;
  unint64_t *v38;
  int64_t v39;
  BOOL v40;
  unsigned int v41;
  uint64_t v42;
  int *v43;
  char v44;
  int v45;
  int v46;
  const std::locale::facet *v47;
  unsigned __int8 v48;
  unsigned __int8 *v49;
  std::string::value_type *v50;
  uint64_t v51;
  uint64_t v52;
  std::string::value_type *v53;
  unint64_t v54;
  unint64_t v55;
  std::string::size_type v56;
  unint64_t v57;
  unint64_t v58;
  std::string *v59;
  int v60;
  unint64_t v61;
  const std::ios_base *v62;
  std::ios_base::fmtflags fmtflags;
  const std::locale::facet *v64;
  int v65;
  const std::locale::facet *v66;
  unsigned __int8 v67;
  const std::locale::facet *v68;
  uint64_t v69;
  uint64_t v70;
  std::string::size_type v71;
  uint64_t v72;
  std::string::size_type v73;
  const std::ios_base *v74;
  std::ios_base::fmtflags v75;
  const std::locale::facet *v76;
  int v77;
  std::string::size_type v78;
  int64_t v79;
  std::string::size_type v80;
  std::string::size_type v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  std::string::value_type *__s;
  std::string::value_type *__sa;
  _QWORD *v90;
  std::string *v92;
  std::locale v93;
  unsigned int *v94;
  _BYTE v95[152];
  std::locale v96;
  _QWORD v97[2];
  unsigned int *v98;
  _BYTE v99[152];
  std::locale v100;

  if (*((_BYTE *)a1 + 60))
  {
    v4 = *a1;
    v3 = a1[1];
    if (v3 != *a1)
    {
      v5 = 0;
      v6 = 0;
      do
      {
        if (!a1[4]
          || (v7 = *(unsigned int *)(v4 + v5), (v7 & 0x80000000) != 0)
          || ((*(_QWORD *)(a1[3] + ((v7 >> 3) & 0x1FFFFFF8)) >> v7) & 1) == 0)
        {
          std::string::resize((std::string *)(v4 + v5 + 8), 0, 0);
          v4 = *a1;
          v3 = a1[1];
        }
        ++v6;
        v5 += 120;
      }
      while (v6 < 0xEEEEEEEEEEEEEEEFLL * ((v3 - v4) >> 3));
    }
    *((_DWORD *)a1 + 13) = 0;
    *((_BYTE *)a1 + 60) = 0;
    if (a1[4] && (v8 = *((unsigned int *)a1 + 14), (int)v8 >= 1))
    {
      v9 = 0;
      v10 = a1[3];
      while (((*(_QWORD *)(v10 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
      {
        *((_DWORD *)a1 + 13) = ++v9;
        if (v8 == v9)
          goto LABEL_18;
      }
      LODWORD(v8) = v9;
    }
    else
    {
      LODWORD(v8) = 0;
    }
  }
  else
  {
    LODWORD(v8) = *((_DWORD *)a1 + 13);
  }
LABEL_18:
  v11 = (unsigned int *)*((int *)a1 + 14);
  if ((int)v8 >= (int)v11)
  {
    if ((a1[11] & 4) != 0)
    {
      v97[0] = &off_1E7BEBD10;
      v97[1] = (int)v8;
      v98 = v11;
      boost::throw_exception<boost::io::too_many_args>((uint64_t)v97);
    }
  }
  else
  {
    v13 = *a1;
    v12 = a1[1];
    if (v12 != *a1)
    {
      v14 = 0;
      v90 = a1 + 12;
      while (*(_DWORD *)(v13 + 120 * v14) != *((_DWORD *)a1 + 13))
      {
LABEL_113:
        if (++v14 >= 0xEEEEEEEEEEEEEEEFLL * ((v12 - v13) >> 3))
        {
          LODWORD(v8) = *((_DWORD *)a1 + 13);
          goto LABEL_116;
        }
      }
      v15 = *((unsigned __int8 *)a1 + 184);
      if (*((_BYTE *)a1 + 184))
        v16 = (const std::locale *)(a1 + 24);
      else
        v16 = 0;
      boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::basic_oaltstringstream((uint64_t)v97, (uint64_t)v90);
      if (v15)
      {
        v17 = (std::ios_base *)((char *)v97 + *(_QWORD *)(v97[0] - 24));
        std::ios_base::getloc(v17);
        std::ios_base::imbue(v17, v16);
        std::locale::~locale(&v93);
        rdbuf = (std::locale *)v17->__rdbuf_;
        if (rdbuf)
        {
          (*((void (**)(std::locale *, const std::locale *))rdbuf->__locale_ + 2))(rdbuf, v16);
          v19 = rdbuf + 1;
          std::locale::locale(&v100, v19);
          std::locale::operator=(v19, v16);
          std::locale::~locale(&v100);
        }
        std::locale::~locale(&v96);
      }
      v20 = v13 + 120 * v14 + 56;
      boost::io::detail::stream_format_state<char,std::char_traits<char>>::apply_on(v20, (std::ios_base *)((char *)v97 + *(_QWORD *)(v97[0] - 24)), v16);
      ((void (*)(_QWORD *, _QWORD))a2[1])(v97, *a2);
      v21 = (char *)v97 + *(_QWORD *)(v97[0] - 24);
      v22 = *((_DWORD *)v21 + 2);
      v23 = *((_QWORD *)v21 + 3);
      v92 = (std::string *)(v13 + 120 * v14 + 8);
      std::string::resize(v92, 0, 0);
      if ((v22 & 0x10) != 0 && v23)
      {
        ((void (*)(_QWORD *, _QWORD))a2[2])(v97, *a2);
        v25 = (unsigned __int8 *)a1[17];
        v24 = (unsigned __int8 *)a1[18];
        v26 = (std::string::value_type *)(v24 - v25);
        v27 = v13 + 120 * v14;
        v29 = *(_BYTE *)(v27 + 112);
        v28 = (_BYTE *)(v27 + 112);
        if ((v29 & 2) != 0)
        {
          if (v24 == v25)
            goto LABEL_48;
          __s = (std::string::value_type *)(v24 - v25);
          v30 = *v25;
          std::ios_base::getloc((const std::ios_base *)((char *)v97 + *(_QWORD *)(v97[0] - 24)));
          v31 = std::locale::use_facet(&v93, MEMORY[0x1E0DE4A90]);
          v32 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 43);
          std::locale::~locale(&v93);
          v26 = __s;
          if (v30 != v32)
          {
            v33 = *v25;
            std::ios_base::getloc((const std::ios_base *)((char *)v97 + *(_QWORD *)(v97[0] - 24)));
            v34 = std::locale::use_facet(&v93, MEMORY[0x1E0DE4A90]);
            v35 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 45);
            std::locale::~locale(&v93);
            v26 = __s;
            if (v33 != v35)
            {
LABEL_48:
              v38 = (unint64_t *)(v13 + 120 * v14 + 104);
              v41 = 1;
LABEL_49:
              v49 = v25;
              v50 = v26;
              MEMORY[0x1C3BB9640](v92, v49);
              boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::clear_buffer(v90);
              boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::basic_oaltstringstream((uint64_t)&v93, (uint64_t)v90);
              boost::io::detail::stream_format_state<char,std::char_traits<char>>::apply_on(v20, (std::ios_base *)((char *)&v93 + *((_QWORD *)v93.__locale_ - 3)), v16);
              ((void (*)(std::locale *, _QWORD))a2[1])(&v93, *a2);
              *(_QWORD *)&v95[*((_QWORD *)v93.__locale_ - 3)] = 0;
              if (v41)
              {
                LOBYTE(v100.__locale_) = 32;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)&v100, 1);
              }
              ((void (*)(std::locale *, _QWORD))a2[2])(&v93, *a2);
              v52 = a1[17];
              v51 = a1[18];
              if (v51 == v52)
              {
                v52 = a1[18];
                v53 = v50;
                if ((*v28 & 2) == 0)
                {
LABEL_55:
                  v54 = v51 - v52;
                  if (v54 >= *v38)
                    v55 = *v38;
                  else
                    v55 = v54;
                  v40 = v23 > v55;
                  v56 = v23 - v55;
                  if (v40)
                  {
                    v57 = (unint64_t)&v53[v41];
                    if (v55 < v57)
                      v57 = v55;
                    v58 = v41;
                    if (v57 > v41)
                    {
                      v59 = (std::string *)v92->__r_.__value_.__r.__words[0];
                      if ((v92->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v59 = v92;
                      v58 = v41;
                      while (1)
                      {
                        v60 = v59->__r_.__value_.__s.__data_[0];
                        v59 = (std::string *)((char *)v59 + 1);
                        if (*(unsigned __int8 *)(v52 + v58) != v60)
                          break;
                        if (v57 == ++v58)
                        {
                          v58 = v57;
                          break;
                        }
                      }
                    }
                    if (v58 >= v55)
                      v61 = v41;
                    else
                      v61 = v58;
                    MEMORY[0x1C3BB9640](v92, v52, v61);
                    v62 = (const std::ios_base *)((char *)&v93 + *((_QWORD *)v93.__locale_ - 3));
                    fmtflags = v62[1].__fmtflags_;
                    if (fmtflags == -1)
                    {
                      std::ios_base::getloc(v62);
                      v64 = std::locale::use_facet(&v100, MEMORY[0x1E0DE4A90]);
                      fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v64->__vftable[2].~facet_0)(v64, 32);
                      std::locale::~locale(&v100);
                      v62[1].__fmtflags_ = fmtflags;
                    }
                    std::string::append(v92, v56, fmtflags);
                    std::string::append(v92, (const std::string::value_type *)(v52 + v61), v55 - v61);
                  }
                  else
                  {
                    MEMORY[0x1C3BB9640](v92, v52, v55);
                  }
                  std::ostream::~ostream();
                  boost::detail::shared_count::~shared_count(&v94);
                  MEMORY[0x1C3BB9A90](v95);
                  goto LABEL_112;
                }
                LOBYTE(v100.__locale_) = 32;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)&v100, 1);
                v52 = a1[17];
                v51 = a1[18];
                v41 = 1;
              }
              v53 = v50;
              goto LABEL_55;
            }
          }
        }
        v36 = v13 + 120 * v14;
        v39 = *(_QWORD *)(v36 + 104);
        v38 = (unint64_t *)(v36 + 104);
        v37 = v39;
        v40 = v26 == (std::string::value_type *)v23 && v23 <= v37;
        if (!v40)
        {
          v41 = 0;
          goto LABEL_49;
        }
        MEMORY[0x1C3BB9640](v92, v25, v23);
LABEL_112:
        boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::clear_buffer(v90);
        std::ostream::~ostream();
        boost::detail::shared_count::~shared_count(&v98);
        MEMORY[0x1C3BB9A90](v99);
        v13 = *a1;
        v12 = a1[1];
        goto LABEL_113;
      }
      if (v23 >= 1)
        *(_QWORD *)&v99[*(_QWORD *)(v97[0] - 24)] = 0;
      ((void (*)(_QWORD *, _QWORD))a2[2])(v97, *a2);
      v42 = v13 + 120 * v14;
      v44 = *(_BYTE *)(v42 + 112);
      v43 = (int *)(v42 + 112);
      __sa = (std::string::value_type *)a1[17];
      if ((v44 & 2) == 0)
        goto LABEL_43;
      if (a1[18] != a1[17])
      {
        v46 = *__sa;
        std::ios_base::getloc((const std::ios_base *)((char *)v97 + *(_QWORD *)(v97[0] - 24)));
        v47 = std::locale::use_facet(&v93, MEMORY[0x1E0DE4A90]);
        v48 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 43);
        std::locale::~locale(&v93);
        if (v46 == v48)
        {
          v45 = 0;
          goto LABEL_78;
        }
        v65 = *__sa;
        std::ios_base::getloc((const std::ios_base *)((char *)v97 + *(_QWORD *)(v97[0] - 24)));
        v66 = std::locale::use_facet(&v93, MEMORY[0x1E0DE4A90]);
        v67 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v66->__vftable[2].~facet_0)(v66, 45);
        std::locale::~locale(&v93);
        if (v65 == v67)
        {
LABEL_43:
          v45 = 0;
          goto LABEL_78;
        }
      }
      std::ios_base::getloc((const std::ios_base *)((char *)v97 + *(_QWORD *)(v97[0] - 24)));
      v68 = std::locale::use_facet(&v93, MEMORY[0x1E0DE4A90]);
      v45 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v68->__vftable[2].~facet_0)(v68, 32);
      std::locale::~locale(&v93);
LABEL_78:
      v69 = *(_QWORD *)(v13 + 120 * v14 + 104);
      if (v45)
        v70 = -1;
      else
        v70 = 0;
      v71 = v69 - (v45 != 0);
      v72 = a1[17];
      if (a1[18] - v72 >= v71)
        v73 = v71;
      else
        v73 = a1[18] - v72;
      v74 = (const std::ios_base *)((char *)v97 + *(_QWORD *)(v97[0] - 24));
      v75 = v74[1].__fmtflags_;
      if (v75 == -1)
      {
        std::ios_base::getloc(v74);
        v76 = std::locale::use_facet(&v93, MEMORY[0x1E0DE4A90]);
        v75 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v76->__vftable[2].~facet_0)(v76, 32);
        std::locale::~locale(&v93);
        v74[1].__fmtflags_ = v75;
      }
      v77 = *v43;
      std::string::resize(v92, 0, 0);
      if (v23 < 1 || v23 <= v73)
      {
        if (v45)
          v81 = v73 + 1;
        else
          v81 = v73;
        std::string::reserve(v92, v81);
        if (v45)
          std::string::append(v92, 1uLL, v45);
        if (v73)
          std::string::append(v92, __sa, v73);
        goto LABEL_112;
      }
      std::string::reserve(v92, v23);
      v78 = v23 - v73;
      v79 = v23 - v73 + v70;
      if ((v77 & 4) != 0)
      {
        if (v79 >= 0)
          v82 = v78 + v70;
        else
          v82 = v79 + 1;
        v80 = v82 >> 1;
        v79 -= v82 >> 1;
      }
      else
      {
        if ((v22 & 0x20) != 0)
        {
          v80 = v78 + v70;
          if (!v45)
          {
LABEL_108:
            if (v73)
              std::string::append(v92, __sa, v73);
            if (v80)
              std::string::append(v92, v80, v75);
            goto LABEL_112;
          }
LABEL_107:
          std::string::append(v92, 1uLL, v45);
          goto LABEL_108;
        }
        v80 = 0;
      }
      if (v79)
        std::string::append(v92, v79, v75);
      if (!v45)
        goto LABEL_108;
      goto LABEL_107;
    }
  }
LABEL_116:
  LODWORD(v83) = v8 + 1;
  *((_DWORD *)a1 + 13) = v8 + 1;
  if (a1[4])
  {
    v84 = *((int *)a1 + 14);
    if ((int)v83 < (int)v84)
    {
      v85 = a1[3];
      v83 = (int)v83;
      v86 = v8 + 2;
      do
      {
        if (((*(_QWORD *)(v85 + ((v83 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v83) & 1) == 0)
          break;
        ++v83;
        *((_DWORD *)a1 + 13) = v86++;
      }
      while (v84 != v83);
    }
  }
  return a1;
}

void sub_1C22179B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, boost::detail::shared_count *a9, uint64_t a10, uint64_t a11, uint64_t a12, boost::detail::shared_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,std::exception a41)
{
  std::exception::~exception(&a41);
  _Unwind_Resume(a1);
}

void boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(std::string *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string::size_type v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::string::size_type v12;
  uint64_t v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  unint64_t v23;
  std::string::size_type v24;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  _QWORD v28[3];

  v4 = *a2;
  v5 = a2[1] - *a2;
  if (v5)
  {
    v6 = *((int *)a2 + 13);
    v7 = *((int *)a2 + 14);
    if ((int)v6 < (int)v7 && (a2[11] & 2) != 0)
    {
      v28[0] = &off_1E7BEBCE8;
      v28[1] = v6;
      v28[2] = v7;
      boost::throw_exception<boost::io::too_few_args>((uint64_t)v28);
    }
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
    this->__r_.__value_.__r.__words[2] = 0;
    if (*((char *)a2 + 87) < 0)
      v8 = a2[9];
    else
      v8 = *((unsigned __int8 *)a2 + 87);
    v9 = v5 / 120;
    if (v9 <= 1)
      v9 = 1;
    v10 = (_QWORD *)(v4 + 56);
    do
    {
      if (*((char *)v10 - 25) < 0)
        v11 = *(v10 - 5);
      else
        v11 = *((unsigned __int8 *)v10 - 25);
      v12 = v11 + v8;
      if (*((_DWORD *)v10 - 14) == -2 && v12 <= *v10)
        v12 = *v10;
      if (*((char *)v10 - 1) < 0)
        v13 = *(v10 - 2);
      else
        v13 = *((unsigned __int8 *)v10 - 1);
      v8 = v13 + v12;
      v10 += 15;
      --v9;
    }
    while (v9);
    std::string::reserve(this, v8);
    v14 = *((char *)a2 + 87);
    if (v14 >= 0)
      v15 = (const std::string::value_type *)(a2 + 8);
    else
      v15 = (const std::string::value_type *)a2[8];
    if (v14 >= 0)
      v16 = *((unsigned __int8 *)a2 + 87);
    else
      v16 = a2[9];
    std::string::append(this, v15, v16);
    v17 = *a2;
    if (a2[1] != *a2)
    {
      v18 = 0;
      v19 = 40;
      do
      {
        v20 = *(char *)(v17 + v19 - 9);
        if (v20 >= 0)
          v21 = (const std::string::value_type *)(v17 + v19 - 32);
        else
          v21 = *(const std::string::value_type **)(v17 + v19 - 32);
        if (v20 >= 0)
          v22 = *(unsigned __int8 *)(v17 + v19 - 9);
        else
          v22 = *(_QWORD *)(v17 + v19 - 24);
        std::string::append(this, v21, v22);
        if (*(_DWORD *)(v17 + v19 - 40) == -2)
        {
          v23 = *(_QWORD *)(v17 + v19 + 16);
          v24 = SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0
              ? this->__r_.__value_.__l.__size_
              : HIBYTE(this->__r_.__value_.__r.__words[2]);
          if (v23 > v24)
            std::string::append(this, v23 - v24, *(_BYTE *)(v17 + v19 + 32));
        }
        v25 = *(char *)(v17 + v19 + 15);
        if (v25 >= 0)
          v26 = (const std::string::value_type *)(v17 + v19 - 8);
        else
          v26 = *(const std::string::value_type **)(v17 + v19 - 8);
        if (v25 >= 0)
          v27 = *(unsigned __int8 *)(v17 + v19 + 15);
        else
          v27 = *(_QWORD *)(v17 + v19);
        std::string::append(this, v26, v27);
        ++v18;
        v17 = *a2;
        v19 += 120;
      }
      while (v18 < 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 3));
    }
    *((_BYTE *)a2 + 60) = 1;
  }
  else if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(this, (const std::string::value_type *)a2[8], a2[9]);
  }
  else
  {
    *this = *(std::string *)(a2 + 8);
  }
}

void sub_1C2217CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E7BEBD60;
  if (*(_BYTE *)(a1 + 72))
    operator delete(*(void **)(a1 + 16));
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return std::streambuf::~streambuf();
}

void std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 120;
        std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::~basic_format(uint64_t a1)
{
  void *v2;
  void **v4;

  if (*(_BYTE *)(a1 + 184))
  {
    std::locale::~locale((std::locale *)(a1 + 192));
    *(_BYTE *)(a1 + 184) = 0;
  }
  boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf(a1 + 96);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(void **)(a1 + 24);
  if (v2)
    operator delete(v2);
  v4 = (void **)a1;
  std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void snlp::ssu::matcher::SSURequestHandler::~SSURequestHandler(void **this)
{
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)(this + 18));
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)(this + 16));
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)(this + 14));
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void snlp::ssu::matcher::SSUPersister::~SSUPersister(void **this)
{
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)(this + 8));
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)(this + 6));
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void snlp::ssu::matcher::SSUMatcherConfig::~SSUMatcherConfig(void **this)
{
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t snlp::ssu::matcher::SSUPersister::SSUPersister(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::string *v14;
  __int128 v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = (std::string *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  return a1;
}

void sub_1C2218038(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

std::string *snlp::ssu::matcher::SSURequestHandler::SSURequestHandler(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::string::size_type v7;
  unint64_t *v8;
  unint64_t v9;
  std::string::size_type v10;
  unint64_t *v11;
  unint64_t v12;
  std::string::size_type v13;
  unint64_t *v14;
  unint64_t v15;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  std::unordered_map<SSUCategoryType,snlp::ssu::similarity::SSUSimilaritySearchConfiguration>::unordered_map((uint64_t)&this[3], (uint64_t)a2 + 72);
  v7 = *((_QWORD *)a2 + 15);
  this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 14);
  this[5].__r_.__value_.__r.__words[0] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *((_QWORD *)a2 + 17);
  this[5].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 16);
  this[5].__r_.__value_.__r.__words[2] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *((_QWORD *)a2 + 19);
  this[6].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 18);
  this[6].__r_.__value_.__l.__size_ = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  return this;
}

void sub_1C221818C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *snlp::ssu::matcher::SSUMatcher::SSUMatcher(std::string *this, __int128 *a2, uint64_t a3, std::string::size_type *a4, uint64_t a5, __int128 *a6)
{
  __int128 v11;
  std::string::size_type v12;
  unint64_t *v13;
  unint64_t v14;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v11 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v11;
  }
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[1], a3);
  snlp::ssu::matcher::SSUPersister::SSUPersister((uint64_t)&this[2].__r_.__value_.__r.__words[2], a5);
  snlp::ssu::matcher::SSURequestHandler::SSURequestHandler(this + 7, a6);
  v12 = a4[1];
  this[13].__r_.__value_.__r.__words[2] = *a4;
  this[14].__r_.__value_.__r.__words[0] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  this[14].__r_.__value_.__l.__size_ = 850045863;
  *(_OWORD *)&this[14].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[15].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[16].__r_.__value_.__l.__data_ = 0u;
  this[16].__r_.__value_.__r.__words[2] = 0;
  return this;
}

void sub_1C22182AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  snlp::ssu::matcher::SSUPersister::~SSUPersister(v3);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<SSUCategoryType,snlp::ssu::similarity::SSUSimilaritySearchConfiguration>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t ***v10;
  uint64_t **i;
  unint64_t v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(a1 + 8);
    do
    {
      v8 = *((char *)v5 + 16);
      if (v7)
      {
        v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          v2 = *((char *)v5 + 16);
          if (v7 <= v8)
            v2 = v8 % v7;
        }
        else
        {
          v2 = (v7 - 1) & v8;
        }
        v10 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v2);
        if (v10)
        {
          for (i = *v10; i; i = (uint64_t **)*i)
          {
            v12 = (unint64_t)i[1];
            if (v12 == v8)
            {
              if (*((unsigned __int8 *)i + 16) == v8)
                goto LABEL_41;
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v7)
                  v12 %= v7;
              }
              else
              {
                v12 &= v7 - 1;
              }
              if (v12 != v2)
                break;
            }
          }
        }
      }
      v13 = operator new(0x40uLL);
      *v13 = 0;
      v13[1] = v8;
      v14 = *((_OWORD *)v5 + 1);
      v15 = *((_OWORD *)v5 + 3);
      *((_OWORD *)v13 + 2) = *((_OWORD *)v5 + 2);
      *((_OWORD *)v13 + 3) = v15;
      *((_OWORD *)v13 + 1) = v14;
      v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v17 = *(float *)(a1 + 32);
      if (!v7 || (float)(v17 * (float)v7) < v16)
      {
        v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v18 = 1;
        v19 = v18 | (2 * v7);
        v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20)
          v21 = v20;
        else
          v21 = v19;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v21);
        v7 = *(_QWORD *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v8)
            v2 = v8 % v7;
          else
            v2 = v8;
        }
        else
        {
          v2 = (v7 - 1) & v8;
        }
      }
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v23)
      {
        *v13 = *v23;
      }
      else
      {
        *v13 = *v6;
        *v6 = v13;
        *(_QWORD *)(v22 + 8 * v2) = v6;
        if (!*v13)
          goto LABEL_40;
        v24 = *(_QWORD *)(*v13 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7)
            v24 %= v7;
        }
        else
        {
          v24 &= v7 - 1;
        }
        v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
      }
      *v23 = v13;
LABEL_40:
      ++*(_QWORD *)(a1 + 24);
LABEL_41:
      v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1C2218520(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<snlp::ssu::similarity::SSUSimilarityScore>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7BECB48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<snlp::ssu::similarity::SSUSimilarityScore>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7BECB48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3BB9B44);
}

void std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88))
  {
    std::locale::~locale((std::locale *)(a1 + 96));
    *(_BYTE *)(a1 + 88) = 0;
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf(uint64_t a1)
{
  boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf(a1);
  JUMPOUT(0x1C3BB9B44);
}

double boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::seekoff@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double result;

  v5 = a1[6];
  if (v5 && a1[8] < v5)
    a1[8] = v5;
  if ((a4 & 8) != 0)
  {
    v6 = a1[3];
    if (v6)
    {
      if (a3)
      {
        if (a3 == 1)
        {
          if ((a4 & 0x10) != 0)
            goto LABEL_29;
          goto LABEL_21;
        }
        if (a3 != 2)
          goto LABEL_29;
        v7 = a1 + 8;
      }
      else
      {
        v7 = a1 + 2;
      }
      a2 = a2 - v6 + *v7;
LABEL_21:
      if (a1[2] <= (unint64_t)(v6 + a2) && (unint64_t)(v6 + a2) <= a1[8])
      {
        v11 = v6 + (int)a2;
        a1[3] = v11;
        if ((a4 & 0x10) == 0 || !v5)
          goto LABEL_27;
        LODWORD(v11) = v11 - v5;
LABEL_26:
        a1[6] = v5 + (int)v11;
LABEL_27:
        v8 = a2;
        goto LABEL_30;
      }
LABEL_29:
      v8 = -1;
      goto LABEL_30;
    }
  }
  v8 = -1;
  if ((a4 & 0x10) != 0 && v5)
  {
    if (!a3)
    {
      v10 = a1[5];
      v9 = v10 - v5;
      goto LABEL_16;
    }
    if (a3 == 2)
    {
      v9 = a1[8] - v5;
      v10 = a1[5];
LABEL_16:
      v11 = v9 + a2;
      if (v10 <= v5 + v11)
      {
        a2 = v11;
        if (v5 + v11 <= a1[8])
          goto LABEL_26;
      }
      goto LABEL_29;
    }
  }
LABEL_30:
  result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 128) = v8;
  return result;
}

double boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::seekpos@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v4 = *(_QWORD *)(a2 + 128);
  v5 = a1[6];
  if (v5 && a1[8] < v5)
    a1[8] = v5;
  if (v4 == -1)
    goto LABEL_16;
  if ((a3 & 8) != 0)
  {
    v6 = a1[3];
    if (v6)
    {
      if ((v4 & 0x8000000000000000) == 0)
      {
        v7 = a1[2];
        if (v4 <= a1[8] - v7)
        {
          v8 = v6 + (int)v4 - (int)v6 + (int)v7;
          a1[3] = v8;
          if ((a3 & 0x10) == 0 || !v5)
            goto LABEL_20;
          v9 = v8 - v5;
LABEL_19:
          a1[6] = v5 + v9;
LABEL_20:
          v10 = v4;
          goto LABEL_17;
        }
      }
      goto LABEL_16;
    }
  }
  if ((a3 & 0x10) == 0)
  {
LABEL_16:
    v10 = -1;
    goto LABEL_17;
  }
  v10 = -1;
  if (v5 && (v4 & 0x8000000000000000) == 0)
  {
    v11 = a1[2];
    if (v4 <= a1[8] - v11)
    {
      v9 = v4 - v5 + v11;
      goto LABEL_19;
    }
    goto LABEL_16;
  }
LABEL_17:
  result = 0.0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)(a4 + 128) = v10;
  return result;
}

uint64_t boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::underflow(uint64_t a1)
{
  unsigned __int8 *v1;
  unint64_t v3;
  unint64_t v4;

  v1 = *(unsigned __int8 **)(a1 + 24);
  if (v1)
  {
    if ((unint64_t)v1 < *(_QWORD *)(a1 + 32))
      return *v1;
    if ((*(_BYTE *)(a1 + 76) & 8) != 0)
    {
      v3 = *(_QWORD *)(a1 + 48);
      if (v3)
      {
        v4 = *(_QWORD *)(a1 + 64);
        if ((unint64_t)v1 < v3 || (unint64_t)v1 < v4)
        {
          if (v4 < v3)
          {
            *(_QWORD *)(a1 + 64) = v3;
            v4 = v3;
          }
          *(_QWORD *)(a1 + 32) = v4;
          return *v1;
        }
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::pbackfail(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _BYTE *v3;
  int v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 && *(_QWORD *)(a1 + 16) < v2)
  {
    if ((_DWORD)a2 == -1 || (*(_DWORD *)(a1 + 76) & 0x10) != 0)
    {
      v3 = (_BYTE *)(v2 - 1);
      *(_QWORD *)(a1 + 24) = v3;
      if ((_DWORD)a2 == -1)
        return 0;
      goto LABEL_10;
    }
    v4 = *(unsigned __int8 *)(v2 - 1);
    v3 = (_BYTE *)(v2 - 1);
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = v3;
LABEL_10:
      *v3 = a2;
      return a2;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::overflow(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v4;
  unint64_t v5;
  size_t v6;
  void *v7;
  unint64_t v8;
  BOOL v9;
  _BYTE *v10;
  size_t v11;
  int v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;

  if ((_DWORD)a2 == -1)
    return 0;
  v2 = a2;
  v4 = *(_BYTE **)(a1 + 48);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v4 < v5)
    {
      *(_QWORD *)(a1 + 48) = v4 + 1;
      *v4 = a2;
      return v2;
    }
    if ((*(_BYTE *)(a1 + 76) & 0x10) == 0)
      return 0xFFFFFFFFLL;
    v7 = *(void **)(a1 + 16);
    v6 = v5 - (_QWORD)v7;
  }
  else
  {
    if ((*(_BYTE *)(a1 + 76) & 0x10) == 0)
      return 0xFFFFFFFFLL;
    v6 = 0;
    v7 = *(void **)(a1 + 16);
  }
  v8 = v6 >> 1;
  if (v6 >> 1 <= 0x100)
    v8 = 256;
  while (__CFADD__(v8, v6))
  {
    v9 = v8 >= 2;
    v8 >>= 1;
    if (!v9)
    {
      v10 = 0;
      v11 = v6;
LABEL_18:
      memmove(v10, v7, v6);
      v12 = 0;
      goto LABEL_20;
    }
  }
  v11 = v8 + v6;
  v10 = operator new(v8 + v6);
  if (v6)
    goto LABEL_18;
  v12 = 1;
LABEL_20:
  if (*(_BYTE *)(a1 + 72))
    operator delete(v7);
  *(_BYTE *)(a1 + 72) = 1;
  if (v12)
  {
    v13 = &v10[v11];
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = &v10[v11];
    *(_QWORD *)(a1 + 64) = v10;
    if ((*(_BYTE *)(a1 + 76) & 8) != 0)
    {
      v14 = v10 + 1;
      *(_QWORD *)(a1 + 16) = v10;
      *(_QWORD *)(a1 + 24) = v10;
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v10;
      *(_QWORD *)(a1 + 24) = 0;
      v14 = v10;
    }
  }
  else
  {
    v15 = &v10[*(_QWORD *)(a1 + 64) - (_QWORD)v7];
    v16 = *(_QWORD *)(a1 + 40);
    v17 = *(_DWORD *)(a1 + 48) - v16;
    v18 = v16 - (_QWORD)v7;
    v20 = *(_QWORD *)(a1 + 16);
    v19 = *(_QWORD *)(a1 + 24);
    v21 = &v10[v18];
    v13 = &v10[v11];
    *(_QWORD *)(a1 + 56) = &v10[v11];
    *(_QWORD *)(a1 + 64) = v15;
    v22 = &v21[v17];
    *(_QWORD *)(a1 + 40) = v21;
    *(_QWORD *)(a1 + 48) = v22;
    if ((*(_BYTE *)(a1 + 76) & 8) != 0)
    {
      v23 = &v10[(int)v19 - (int)v20];
      v14 = v22 + 1;
      *(_QWORD *)(a1 + 16) = v10;
      *(_QWORD *)(a1 + 24) = v23;
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v10;
      *(_QWORD *)(a1 + 24) = 0;
      v14 = v10;
    }
    v10 = &v21[v17];
  }
  *(_QWORD *)(a1 + 32) = v14;
  if (v10 == v13)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 104))(a1, v2);
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v10 + 1;
    *v10 = v2;
  }
  return v2;
}

void boost::throw_exception<boost::io::too_few_args>(uint64_t a1)
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  *exception = &unk_1E7BEBCB8;
  exception[1] = &off_1E7BEBCE8;
  *((_OWORD *)exception + 1) = *(_OWORD *)(a1 + 8);
  exception[6] = 0;
  exception[7] = 0;
  *((_DWORD *)exception + 16) = -1;
  *exception = &off_1E7BEA130;
  exception[1] = &unk_1E7BEA160;
  exception[4] = &unk_1E7BEA188;
  exception[5] = 0;
}

uint64_t boost::wrapexcept<boost::io::too_few_args>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_1E7BEC4D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *a1 = 0;
  return a1;
}

uint64_t boost::wrapexcept<boost::io::too_few_args>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E7BEBCB8;
  *(_QWORD *)(v2 + 8) = &off_1E7BEBCE8;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v2 + 32) = &unk_1E7BEC4D8;
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 40) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_DWORD *)(v2 + 64) = *(_DWORD *)(a1 + 64);
  *(_QWORD *)v2 = &off_1E7BEA130;
  *(_QWORD *)(v2 + 8) = &unk_1E7BEA160;
  *(_QWORD *)(v2 + 32) = &unk_1E7BEA188;
  boost::exception_detail::copy_boost_exception(v2 + 32, a1 + 32);
  return v2;
}

void sub_1C2218C18(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::exception *v2;

  std::exception::~exception(v2);
  MEMORY[0x1C3BB9B44](v1, 0x10F1C40A1B86278);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::too_few_args>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::io::too_few_args>::wrapexcept((uint64_t)exception, a1);
}

void sub_1C2218C98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::too_few_args>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_1E7BEC4D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  JUMPOUT(0x1C3BB9B44);
}

void `non-virtual thunk to'boost::wrapexcept<boost::io::too_few_args>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E7BEC4D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
}

{
  *(_QWORD *)(a1 + 24) = &unk_1E7BEC4D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x1C3BB9B44);
}

const char *boost::io::too_few_args::what(boost::io::too_few_args *this)
{
  return "boost::too_few_args: format-string referred to more arguments than were passed";
}

void `non-virtual thunk to'boost::wrapexcept<boost::io::too_few_args>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_1E7BEC4D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
}

{
  *a1 = &unk_1E7BEC4D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::wrapexcept<boost::io::too_few_args>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E7BEBCB8;
  *(_QWORD *)(a1 + 8) = &off_1E7BEBCE8;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = &unk_1E7BEC4D8;
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)a1 = &off_1E7BEA130;
  *(_QWORD *)(a1 + 8) = &unk_1E7BEA160;
  *(_QWORD *)(a1 + 32) = &unk_1E7BEA188;
  return a1;
}

void sub_1C2218EA4(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::copy_boost_exception(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v7);
    v5 = v7;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return result;
}

void sub_1C2218F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  _Unwind_Resume(exception_object);
}

void boost::io::too_few_args::~too_few_args(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1C3BB9B44);
}

void boost::throw_exception<boost::io::too_many_args>(uint64_t a1)
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  *exception = &unk_1E7BEBCB8;
  exception[1] = &off_1E7BEBD10;
  *((_OWORD *)exception + 1) = *(_OWORD *)(a1 + 8);
  exception[6] = 0;
  exception[7] = 0;
  *((_DWORD *)exception + 16) = -1;
  *exception = &off_1E7BEA1A8;
  exception[1] = &unk_1E7BEA1D8;
  exception[4] = &unk_1E7BEA200;
  exception[5] = 0;
}

uint64_t boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::basic_oaltstringstream(uint64_t a1, uint64_t a2)
{
  std::ios_base *v4;
  _QWORD *v5;
  void *v6;

  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FF8] + 16;
  v4 = (std::ios_base *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = (_QWORD *)operator new();
  v5[1] = 0x100000001;
  *v5 = &off_1E7BEBE60;
  v5[2] = a2;
  v6 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = &unk_1E7BE5C38;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = &unk_1E7BE5C60;
  std::ios_base::init(v4, v6);
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = -1;
  *(_QWORD *)a1 = &off_1E7BEBDE8;
  *(_QWORD *)(a1 + 24) = off_1E7BEBE10;
  return a1;
}

void sub_1C2219130(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int **v2;

  boost::detail::shared_count::~shared_count(v2);
  MEMORY[0x1C3BB9A90](v1);
  _Unwind_Resume(a1);
}

void boost::io::detail::stream_format_state<char,std::char_traits<char>>::apply_on(uint64_t a1, std::ios_base *this, const std::locale *a3)
{
  std::locale *rdbuf;
  std::locale *v6;
  std::locale *v7;
  std::locale *v9;
  std::locale *v10;
  std::streamsize v11;
  std::ios_base::fmtflags v12;
  const std::locale::facet *v13;
  std::ios_base::fmtflags v14;
  uint64_t v15;
  char v16;
  std::locale v17;
  std::locale v18;

  if (*(_BYTE *)(a1 + 32))
  {
    std::ios_base::getloc(this);
    std::ios_base::imbue(this, (const std::locale *)(a1 + 40));
    std::locale::~locale(&v18);
    rdbuf = (std::locale *)this->__rdbuf_;
    if (rdbuf)
    {
      (*((void (**)(void *, uint64_t))rdbuf->__locale_ + 2))(this->__rdbuf_, a1 + 40);
      v6 = rdbuf + 1;
      std::locale::locale(&v17, v6);
      std::locale::operator=(v6, (const std::locale *)(a1 + 40));
      std::locale::~locale(&v17);
    }
    v7 = (std::locale *)&v16;
  }
  else
  {
    if (!a3)
      goto LABEL_10;
    std::ios_base::getloc(this);
    std::ios_base::imbue(this, a3);
    std::locale::~locale(&v18);
    v9 = (std::locale *)this->__rdbuf_;
    if (v9)
    {
      (*((void (**)(void *, const std::locale *))v9->__locale_ + 2))(this->__rdbuf_, a3);
      v10 = v9 + 1;
      std::locale::locale(&v17, v10);
      std::locale::operator=(v10, a3);
      std::locale::~locale(&v17);
    }
    v7 = (std::locale *)&v15;
  }
  std::locale::~locale(v7);
LABEL_10:
  if (*(_QWORD *)a1 != -1)
    this->__width_ = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11 != -1)
    this->__precision_ = v11;
  v12 = *(char *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    if (this[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(this);
      v13 = std::locale::use_facet(&v18, MEMORY[0x1E0DE4A90]);
      v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 32);
      std::locale::~locale(&v18);
      this[1].__fmtflags_ = v14;
    }
    this[1].__fmtflags_ = v12;
  }
  this->__fmtflags_ = *(_DWORD *)(a1 + 20);
  std::ios_base::clear(this, *(_DWORD *)(a1 + 24));
  this->__exceptions_ = *(_DWORD *)(a1 + 28);
  std::ios_base::clear(this, this->__rdstate_);
}

void sub_1C2219320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  std::locale::~locale((std::locale *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::clear_buffer(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  BOOL v5;
  _OWORD v6[8];
  uint64_t v7;
  _QWORD v8[17];
  _OWORD v9[8];
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v11 = *MEMORY[0x1E0C80C00];
  v2 = result[6];
  if (v2)
    v3 = v2 == result[5];
  else
    v3 = 1;
  if (!v3)
  {
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    result = (*(_QWORD *(**)(_QWORD *__return_ptr, _QWORD *, _OWORD *, uint64_t))(*result + 40))(v8, result, v9, 16);
  }
  v4 = v1[3];
  if (v4)
    v5 = v4 == v1[2];
  else
    v5 = 1;
  if (!v5)
  {
    v7 = 0;
    memset(v6, 0, sizeof(v6));
    return (*(_QWORD *(**)(_QWORD *__return_ptr, _QWORD *, _OWORD *, uint64_t))(*v1 + 40))(v8, v1, v6, 8);
  }
  return result;
}

uint64_t boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_oaltstringstream(uint64_t a1)
{
  uint64_t v2;

  v2 = std::ostream::~ostream();
  boost::detail::shared_count::~shared_count((unsigned int **)(v2 + 16));
  MEMORY[0x1C3BB9A90](a1 + 24);
  return a1;
}

void boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_oaltstringstream(uint64_t a1)
{
  uint64_t v2;

  v2 = std::ostream::~ostream();
  boost::detail::shared_count::~shared_count((unsigned int **)(v2 + 16));
  MEMORY[0x1C3BB9A90](a1 + 24);
  JUMPOUT(0x1C3BB9B44);
}

void `virtual thunk to'boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_oaltstringstream(_QWORD *a1)
{
  unsigned int **v1;

  v1 = (unsigned int **)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ostream::~ostream();
  boost::detail::shared_count::~shared_count(v1 + 2);
  JUMPOUT(0x1C3BB9A90);
}

{
  unsigned int **v1;

  v1 = (unsigned int **)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ostream::~ostream();
  boost::detail::shared_count::~shared_count(v1 + 2);
  MEMORY[0x1C3BB9A90](v1 + 3);
  JUMPOUT(0x1C3BB9B44);
}

void boost::detail::sp_counted_impl_pd<boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>> *,boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::No_Op>::~sp_counted_impl_pd()
{
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  return this;
}

uint64_t boost::detail::sp_counted_impl_pd<boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>> *,boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::No_Op>::get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t boost::detail::sp_counted_impl_pd<boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>> *,boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::No_Op>::get_local_deleter(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_pd<boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>> *,boost::io::basic_oaltstringstream<char,std::char_traits<char>,std::allocator<char>>::No_Op>::get_untyped_deleter(uint64_t a1)
{
  return a1 + 24;
}

uint64_t boost::wrapexcept<boost::io::too_many_args>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_1E7BEC4D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<boost::io::too_many_args>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E7BEBCB8;
  *(_QWORD *)(v2 + 8) = &off_1E7BEBD10;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v2 + 32) = &unk_1E7BEC4D8;
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 40) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_DWORD *)(v2 + 64) = *(_DWORD *)(a1 + 64);
  *(_QWORD *)v2 = &off_1E7BEA1A8;
  *(_QWORD *)(v2 + 8) = &unk_1E7BEA1D8;
  *(_QWORD *)(v2 + 32) = &unk_1E7BEA200;
  boost::exception_detail::copy_boost_exception(v2 + 32, a1 + 32);
  return v2;
}

void sub_1C22196DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::exception *v2;

  std::exception::~exception(v2);
  MEMORY[0x1C3BB9B44](v1, 0x10F1C40A1B86278);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::too_many_args>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::io::too_many_args>::wrapexcept((uint64_t)exception, a1);
}

void sub_1C221975C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::too_many_args>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_1E7BEC4D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  JUMPOUT(0x1C3BB9B44);
}

void `non-virtual thunk to'boost::wrapexcept<boost::io::too_many_args>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E7BEC4D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
}

{
  *(_QWORD *)(a1 + 24) = &unk_1E7BEC4D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x1C3BB9B44);
}

const char *boost::io::too_many_args::what(boost::io::too_many_args *this)
{
  return "boost::too_many_args: format-string referred to fewer arguments than were passed";
}

void `non-virtual thunk to'boost::wrapexcept<boost::io::too_many_args>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_1E7BEC4D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
}

{
  *a1 = &unk_1E7BEC4D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::wrapexcept<boost::io::too_many_args>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E7BEBCB8;
  *(_QWORD *)(a1 + 8) = &off_1E7BEBD10;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = &unk_1E7BEC4D8;
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)a1 = &off_1E7BEA1A8;
  *(_QWORD *)(a1 + 8) = &unk_1E7BEA1D8;
  *(_QWORD *)(a1 + 32) = &unk_1E7BEA200;
  return a1;
}

void sub_1C2219968(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void boost::io::too_many_args::~too_many_args(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1C3BB9B44);
}

std::locale *boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::getloc(std::locale *a1, uint64_t a2)
{
  if (!*(_BYTE *)(a2 + 184))
    JUMPOUT(0x1C3BB9A30);
  return std::locale::locale(a1, (const std::locale *)(a2 + 192));
}

void boost::throw_exception<boost::io::bad_format_string>(uint64_t a1)
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  *exception = &unk_1E7BEBCB8;
  exception[1] = &off_1E7BEBD38;
  *((_OWORD *)exception + 1) = *(_OWORD *)(a1 + 8);
  exception[6] = 0;
  exception[7] = 0;
  *((_DWORD *)exception + 16) = -1;
  *exception = &off_1E7BEA220;
  exception[1] = &unk_1E7BEA250;
  exception[4] = &unk_1E7BEA278;
  exception[5] = 0;
}

void std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::resize(int64x2_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int64x2_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int64x2_t v36;
  char *v37;
  int64x2_t *v38;

  v5 = a1->i64[0];
  v6 = a1->i64[1];
  v7 = 0xEEEEEEEEEEEEEEEFLL * ((v6 - a1->i64[0]) >> 3);
  v8 = a2 - v7;
  if (a2 <= v7)
  {
    if (a2 < v7)
    {
      v31 = v5 + 120 * a2;
      while (v6 != v31)
      {
        v6 -= 120;
        std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::destroy[abi:ne180100](v6);
      }
      a1->i64[1] = v31;
    }
  }
  else
  {
    v10 = a1[1].i64[0];
    if (0xEEEEEEEEEEEEEEEFLL * ((v10 - v6) >> 3) >= v8)
    {
      v32 = v6 + 120 * v8;
      v33 = 120 * a2 - 8 * ((v6 - a1->i64[0]) >> 3);
      do
      {
        std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::construct[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>> const&>(v6, a3);
        v6 += 120;
        v33 -= 120;
      }
      while (v33);
      a1->i64[1] = v32;
    }
    else
    {
      if (a2 > 0x222222222222222)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v38 = a1 + 1;
      v11 = 0xEEEEEEEEEEEEEEEFLL * ((v10 - v5) >> 3);
      v12 = 2 * v11;
      if (2 * v11 <= a2)
        v12 = a2;
      if (v11 >= 0x111111111111111)
        v13 = 0x222222222222222;
      else
        v13 = v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>>(v13);
      v15 = (uint64_t)&v14[120 * v7];
      v35 = v14;
      v36.i64[0] = v15;
      v36.i64[1] = v15;
      v37 = &v14[120 * v16];
      v17 = 120 * a2;
      v18 = &v14[120 * a2];
      v19 = v17 - 120 * v7;
      do
      {
        std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::construct[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>> const&>(v15, a3);
        v15 += 120;
        v19 -= 120;
      }
      while (v19);
      v21 = a1->i64[0];
      v20 = a1->u64[1];
      v22 = v36.i64[0];
      if (v20 == a1->i64[0])
      {
        v30 = vdupq_n_s64(v20);
      }
      else
      {
        v23 = 0;
        do
        {
          v24 = v22 + v23;
          v25 = v20 + v23;
          *(_DWORD *)(v24 - 120) = *(_DWORD *)(v20 + v23 - 120);
          v26 = *(_OWORD *)(v20 + v23 - 112);
          *(_QWORD *)(v24 - 96) = *(_QWORD *)(v20 + v23 - 96);
          *(_OWORD *)(v24 - 112) = v26;
          *(_QWORD *)(v25 - 104) = 0;
          *(_QWORD *)(v25 - 96) = 0;
          *(_QWORD *)(v25 - 112) = 0;
          v27 = *(_OWORD *)(v20 + v23 - 88);
          *(_QWORD *)(v24 - 72) = *(_QWORD *)(v20 + v23 - 72);
          *(_OWORD *)(v24 - 88) = v27;
          *(_QWORD *)(v25 - 80) = 0;
          *(_QWORD *)(v25 - 72) = 0;
          *(_QWORD *)(v25 - 88) = 0;
          v28 = *(_OWORD *)(v20 + v23 - 48);
          *(_OWORD *)(v24 - 64) = *(_OWORD *)(v20 + v23 - 64);
          *(_OWORD *)(v24 - 48) = v28;
          *(_BYTE *)(v24 - 32) = 0;
          if (*(_BYTE *)(v20 + v23 - 32))
          {
            std::locale::locale((std::locale *)(v24 - 24), (const std::locale *)(v25 - 24));
            *(_BYTE *)(v24 - 32) = 1;
          }
          v29 = *(_QWORD *)(v25 - 16);
          *(_DWORD *)(v24 - 8) = *(_DWORD *)(v25 - 8);
          *(_QWORD *)(v24 - 16) = v29;
          v23 -= 120;
        }
        while (v20 + v23 != v21);
        v22 += v23;
        v30 = *a1;
      }
      a1->i64[0] = v22;
      a1->i64[1] = (uint64_t)v18;
      v36 = v30;
      v34 = (char *)a1[1].i64[0];
      a1[1].i64[0] = (uint64_t)v37;
      v37 = v34;
      v35 = (char *)v30.i64[0];
      std::__split_buffer<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::~__split_buffer((uint64_t)&v35);
    }
  }
}

void sub_1C2219C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>::~format_item(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88))
  {
    std::locale::~locale((std::locale *)(a1 + 96));
    *(_BYTE *)(a1 + 88) = 0;
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::construct[abi:ne180100]<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>,boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>> const&>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 88) = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    std::locale::locale((std::locale *)(a1 + 96), (const std::locale *)(a2 + 96));
    *(_BYTE *)(a1 + 88) = 1;
  }
  v8 = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v8;
}

void sub_1C2219DAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>>(unint64_t a1)
{
  if (a1 >= 0x222222222222223)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(120 * a1);
}

uint64_t std::__split_buffer<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 120;
    std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::destroy[abi:ne180100](i - 120);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t boost::wrapexcept<boost::io::bad_format_string>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_1E7BEC4D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<boost::io::bad_format_string>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E7BEBCB8;
  *(_QWORD *)(v2 + 8) = &off_1E7BEBD38;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v2 + 32) = &unk_1E7BEC4D8;
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 40) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_DWORD *)(v2 + 64) = *(_DWORD *)(a1 + 64);
  *(_QWORD *)v2 = &off_1E7BEA220;
  *(_QWORD *)(v2 + 8) = &unk_1E7BEA250;
  *(_QWORD *)(v2 + 32) = &unk_1E7BEA278;
  boost::exception_detail::copy_boost_exception(v2 + 32, a1 + 32);
  return v2;
}

void sub_1C2219F58(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::exception *v2;

  std::exception::~exception(v2);
  MEMORY[0x1C3BB9B44](v1, 0x10F1C40A1B86278);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::bad_format_string>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::io::bad_format_string>::wrapexcept((uint64_t)exception, a1);
}

void sub_1C2219FD8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::io::bad_format_string>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_1E7BEC4D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  JUMPOUT(0x1C3BB9B44);
}

void `non-virtual thunk to'boost::wrapexcept<boost::io::bad_format_string>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E7BEC4D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
}

{
  *(_QWORD *)(a1 + 24) = &unk_1E7BEC4D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x1C3BB9B44);
}

const char *boost::io::bad_format_string::what(boost::io::bad_format_string *this)
{
  return "boost::bad_format_string: format-string is ill-formed";
}

void `non-virtual thunk to'boost::wrapexcept<boost::io::bad_format_string>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_1E7BEC4D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
}

{
  *a1 = &unk_1E7BEC4D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::wrapexcept<boost::io::bad_format_string>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E7BEBCB8;
  *(_QWORD *)(a1 + 8) = &off_1E7BEBD38;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = &unk_1E7BEC4D8;
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)a1 = &off_1E7BEA220;
  *(_QWORD *)(a1 + 8) = &unk_1E7BEA250;
  *(_QWORD *)(a1 + 32) = &unk_1E7BEA278;
  return a1;
}

void sub_1C221A1E4(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void boost::io::bad_format_string::~bad_format_string(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::io::detail::maybe_throw_exception(uint64_t this, uint64_t a2, uint64_t a3)
{
  _QWORD v3[3];

  if ((this & 1) != 0)
  {
    v3[0] = &off_1E7BEBD38;
    v3[1] = a2;
    v3[2] = a3;
    boost::throw_exception<boost::io::bad_format_string>((uint64_t)v3);
  }
  return this;
}

void sub_1C221A260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  _Unwind_Resume(a1);
}

unsigned __int8 *boost::io::detail::str2int<long,std::__wrap_iter<char const*>,std::ctype<char>>(unsigned __int8 *a1, char **a2, _QWORD *a3, _QWORD *a4)
{
  unsigned __int8 *v4;
  uint64_t v8;

  v4 = a1;
  for (*a3 = 0; v4 != (unsigned __int8 *)*a2; ++v4)
  {
    if ((char)*v4 < 0)
      break;
    v8 = *v4;
    if ((*(_DWORD *)(a4[2] + 4 * v8) & 0x400) == 0)
      break;
    *a3 = 10 * *a3
        + (*(int (**)(_QWORD *, _QWORD, _QWORD))(*a4 + 72))(a4, (char)v8, 0)
        - 48;
  }
  return v4;
}

uint64_t std::vector<BOOL>::resize(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  return result;
}

void std::__shared_ptr_pointer<snlp::ssu::cache::SSUCacheDirectory  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t std::__shared_ptr_pointer<snlp::ssu::cache::SSUCacheDirectory  *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<snlp::ssu::cache::SSUCacheDirectory>::operator()[abi:ne180100](*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<snlp::ssu::cache::SSUCacheDirectory  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_emplace<snlp::ssu::encoder::SSUEncoderFactoryLazy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7BECBB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<snlp::ssu::encoder::SSUEncoderFactoryLazy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7BECBB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t std::__shared_ptr_emplace<snlp::ssu::encoder::SSUEncoderFactoryLazy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void snlp::ssu::matcher::SSUMatcher::buildFromPathsWithImmediateInitialize(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, std::string **a5@<X8>)
{
  snlp::ssu::encoder *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15[3];
  std::__shared_weak_count *v16;

  v8 = (snlp::ssu::encoder *)(a4 + 24);
  snlp::ssu::matcher::SSUMatcher::validateAssetVersion((uint64_t)(a4 + 24), a2, a3);
  v9 = (std::__shared_weak_count *)operator new(0x30uLL);
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7BECBF0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E7BE9B60;
  snlp::ssu::encoder::buildEncoder(v8, &v9[1].__shared_owners_);
  v15[0] = (uint64_t)&v9[1];
  v15[1] = (uint64_t)v9;
  v15[2] = 0;
  v16 = 0;
  snlp::ssu::matcher::SSUMatcher::buildFromPaths(a1, a4, v15, a5);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1C221A508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<snlp::ssu::encoder::SSUEncoderFactoryPreemptive>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7BECBF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<snlp::ssu::encoder::SSUEncoderFactoryPreemptive>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7BECBF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t std::__shared_ptr_emplace<snlp::ssu::encoder::SSUEncoderFactoryPreemptive>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void snlp::ssu::matcher::SSUMatcher::getLocale(snlp::ssu::matcher::SSUMatcher *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

void snlp::ssu::matcher::SSUMatcher::performFullCacheUpdate(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, int64x2_t *a4@<X8>)
{
  NSObject *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  NSObject *v14;
  char *v15;
  _QWORD *v16;
  uint64_t updated;
  NSObject *v18;
  char *v19;
  NSObject *v20;
  const char *v21;
  NSObject *v22;
  char *v23;
  NSObject *v24;
  __n128 v25;
  unint64_t v26;
  int v27;
  NSObject *v28;
  _BOOL4 v29;
  unint64_t v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  std::mutex *v34;
  uint8_t v35[4];
  char *v36;
  uint8_t buf[4];
  unint64_t v38;
  __int16 v39;
  _QWORD *v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v34 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  v8 = SNLPOSLoggerForCategory(8);
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)v9)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4);
    *(_DWORD *)buf = 134217984;
    v38 = v10;
    _os_log_impl(&dword_1C2196000, v8, OS_LOG_TYPE_DEBUG, "Performing a full cache update for %lu apps", buf, 0xCu);
  }
  a4->i64[0] = 0;
  a4->i64[1] = 0;
  a4[1].i64[0] = 0;
  v11 = *a2;
  v12 = a2[1];
  if (*a2 != v12)
  {
    do
    {
      if (snlp::ssu::matcher::SSUMatcher::appAssetDirectoryExists((snlp::ssu::matcher::SSUMatcher *)v9, (const std::__fs::filesystem::path *)v11))
      {
        snlp::ssu::matcher::SSUPersister::updateCacheForAppIfRequired((snlp::ssu::matcher::SSUPersister *)(a1 + 64), (const snlp::ssu::matcher::SSUAppInfo *)v11, (uint64_t)buf);
        if (v41)
        {
          v13 = a4->u64[1];
          if (v13 >= a4[1].i64[0])
            goto LABEL_26;
LABEL_16:
          std::allocator<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::construct[abi:ne180100]<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo const&>((std::string *)a4->i64[1], (__int128 *)buf);
          updated = v13 + 56;
          a4->i64[1] = v13 + 56;
          goto LABEL_27;
        }
        v18 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          v19 = v11;
          if (v11[23] < 0)
            v19 = *(char **)v11;
          *(_DWORD *)v35 = 136315138;
          v36 = v19;
          v20 = v18;
          v21 = "Cache update failed for app %s. Continuing with other apps.";
LABEL_25:
          _os_log_impl(&dword_1C2196000, v20, OS_LOG_TYPE_ERROR, v21, v35, 0xCu);
        }
      }
      else
      {
        v14 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          v15 = v11;
          if (v11[23] < 0)
            v15 = *(char **)v11;
          v16 = v11 + 24;
          if (v11[47] < 0)
            v16 = (_QWORD *)*v16;
          *(_DWORD *)buf = 136315394;
          v38 = (unint64_t)v15;
          v39 = 2080;
          v40 = v16;
          _os_log_impl(&dword_1C2196000, v14, OS_LOG_TYPE_DEBUG, "Cannot find SSU app assets for given app: %s (tried %s). Cleaning up cache files for it and removing it from the registry.", buf, 0x16u);
        }
        snlp::ssu::matcher::SSUPersister::removeCacheFilesForApp(a1 + 64, v11, (uint64_t)buf);
        if (v41)
        {
          v13 = a4->u64[1];
          if (v13 < a4[1].i64[0])
            goto LABEL_16;
LABEL_26:
          updated = std::vector<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::__emplace_back_slow_path<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo const&>(a4, (__int128 *)buf);
LABEL_27:
          a4->i64[1] = updated;
          goto LABEL_28;
        }
        v22 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          v23 = v11;
          if (v11[23] < 0)
            v23 = *(char **)v11;
          *(_DWORD *)v35 = 136315138;
          v36 = v23;
          v20 = v22;
          v21 = "Removing cache files failed for app %s.";
          goto LABEL_25;
        }
      }
LABEL_28:
      v9 = std::__optional_destruct_base<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
      v11 += 48;
    }
    while (v11 != v12);
  }
  if (*(_BYTE *)(a3 + 24))
  {
    v24 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      if (!*(_BYTE *)(a3 + 24))
        std::__throw_bad_optional_access[abi:ne180100]();
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
      *(_DWORD *)buf = 134217984;
      v38 = v26;
      _os_log_impl(&dword_1C2196000, v24, OS_LOG_TYPE_DEBUG, "Performing a full cache update for %lu configured user shortcuts", buf, 0xCu);
    }
    if (!*(_BYTE *)(a3 + 24))
      std::__throw_bad_optional_access[abi:ne180100]();
    snlp::ssu::matcher::SSUPersister::updateCacheForUserShortcutsIfRequired(a1 + 64, (uint64_t *)a3, (uint64_t)buf, v25);
    v27 = v41;
    v28 = SNLPOSLoggerForCategory(8);
    v29 = os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG);
    if (v27)
    {
      if (v29)
      {
        *(_WORD *)v35 = 0;
        _os_log_impl(&dword_1C2196000, v28, OS_LOG_TYPE_DEBUG, "Completed user shortcuts database change handling successfully", v35, 2u);
      }
      if (!v41)
        std::__throw_bad_optional_access[abi:ne180100]();
      v30 = a4->u64[1];
      if (v30 >= a4[1].i64[0])
      {
        v31 = std::vector<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::__emplace_back_slow_path<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo const&>(a4, (__int128 *)buf);
      }
      else
      {
        std::allocator<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::construct[abi:ne180100]<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo const&>((std::string *)a4->i64[1], (__int128 *)buf);
        v31 = v30 + 56;
        a4->i64[1] = v30 + 56;
      }
      a4->i64[1] = v31;
    }
    else if (v29)
    {
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_1C2196000, v28, OS_LOG_TYPE_DEBUG, "User shortcuts database change handling failed", v35, 2u);
    }
    std::__optional_destruct_base<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
  }
  if (!snlp::ssu::cache::SSUCacheDirectory::clearCacheFilesOutsideLocale(*(snlp::ssu::cache::SSUCacheDirectory **)(a1 + 96), (unsigned __int8 *)(a1 + 72)))
  {
    v32 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C2196000, v32, OS_LOG_TYPE_ERROR, "Failed to clear cache files outside the current locale. Stale cache files will remain on disk.", buf, 2u);
    }
  }
  v33 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C2196000, v33, OS_LOG_TYPE_DEBUG, "Completed full cache update", buf, 2u);
  }
  std::mutex::unlock(v34);
}

void sub_1C221AA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v18 + 8) = v17;
  std::__optional_destruct_base<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a17);
  a17 = v18;
  std::vector<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

BOOL snlp::ssu::matcher::SSUMatcher::appAssetDirectoryExists(snlp::ssu::matcher::SSUMatcher *this, const std::__fs::filesystem::path *a2)
{
  char v3;

  std::__fs::filesystem::__status(a2 + 1, 0);
  return v3 == 2;
}

_QWORD *std::allocator<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::construct[abi:ne180100]<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo const&>(std::string *this, __int128 *a2)
{
  __int128 v4;
  int v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_DWORD *)a2 + 6);
  this[1].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[1].__r_.__value_.__l.__data_) = v5;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  return std::vector<snlp::ssu::selflogging::SSUBackgroundUpdateAppCategoryInfo>::__init_with_size[abi:ne180100]<snlp::ssu::selflogging::SSUBackgroundUpdateAppCategoryInfo*,snlp::ssu::selflogging::SSUBackgroundUpdateAppCategoryInfo*>(&this[1].__r_.__value_.__l.__size_, *((const void **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4);
}

void sub_1C221AC7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::__emplace_back_slow_path<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo const&>(int64x2_t *a1, __int128 *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  int64x2_t *v22;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((a1->i64[1] - a1->i64[0]) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x492492492492492)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[1].i64[0] - a1->i64[0]) >> 3)) >= 0x249249249249249)
    v6 = 0x492492492492492;
  else
    v6 = v3;
  v22 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x492492492492492)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(56 * v6);
  }
  else
  {
    v7 = 0;
  }
  v19 = v7;
  v20.i64[0] = (uint64_t)&v7[56 * v2];
  v21 = &v7[56 * v6];
  std::allocator<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::construct[abi:ne180100]<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo const&>((std::string *)v20.i64[0], a2);
  v8 = v20.i64[0];
  v9 = v20.i64[0] + 56;
  v20.i64[1] = v20.i64[0] + 56;
  v11 = a1->i64[0];
  v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    v16 = vdupq_n_s64(v10);
  }
  else
  {
    v12 = 0;
    do
    {
      v13 = v8 + v12;
      v14 = v10 + v12;
      v15 = *(_OWORD *)(v10 + v12 - 56);
      *(_QWORD *)(v13 - 40) = *(_QWORD *)(v10 + v12 - 40);
      *(_OWORD *)(v13 - 56) = v15;
      *(_QWORD *)(v14 - 48) = 0;
      *(_QWORD *)(v14 - 40) = 0;
      *(_QWORD *)(v14 - 56) = 0;
      *(_DWORD *)(v13 - 32) = *(_DWORD *)(v10 + v12 - 32);
      *(_QWORD *)(v13 - 16) = 0;
      *(_QWORD *)(v13 - 8) = 0;
      *(_QWORD *)(v13 - 24) = 0;
      *(_OWORD *)(v13 - 24) = *(_OWORD *)(v10 + v12 - 24);
      *(_QWORD *)(v13 - 8) = *(_QWORD *)(v10 + v12 - 8);
      *(_QWORD *)(v14 - 24) = 0;
      *(_QWORD *)(v14 - 16) = 0;
      *(_QWORD *)(v14 - 8) = 0;
      v12 -= 56;
    }
    while (v10 + v12 != v11);
    v8 += v12;
    v16 = *a1;
    v9 = v20.i64[1];
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  v20 = v16;
  v17 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  std::__split_buffer<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::~__split_buffer((uint64_t)&v19);
  return v9;
}

void sub_1C221AE38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(void **)(a1 + 32);
    if (v2)
    {
      *(_QWORD *)(a1 + 40) = v2;
      operator delete(v2);
    }
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__split_buffer<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    std::allocator<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::destroy[abi:ne180100](i - 56);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::vector<snlp::ssu::selflogging::SSUBackgroundUpdateAppCategoryInfo>::__init_with_size[abi:ne180100]<snlp::ssu::selflogging::SSUBackgroundUpdateAppCategoryInfo*,snlp::ssu::selflogging::SSUBackgroundUpdateAppCategoryInfo*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 60)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[2 * v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1C221B00C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void snlp::ssu::matcher::SSUMatcher::registerApp(snlp::ssu::matcher::SSUMatcher *this@<X0>, const snlp::ssu::matcher::SSUAppInfo *a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  NSObject *v7;
  const snlp::ssu::matcher::SSUAppInfo *v8;
  char *v9;
  int v10;
  NSObject *v11;
  const char *v12;
  int v13;
  void *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v6 = (std::mutex *)((char *)this + 344);
  std::mutex::lock((std::mutex *)((char *)this + 344));
  v7 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = *(const snlp::ssu::matcher::SSUAppInfo **)a2;
    if (*((char *)a2 + 47) >= 0)
      v9 = (char *)a2 + 24;
    else
      v9 = (char *)*((_QWORD *)a2 + 3);
    v13 = 136315394;
    v14 = v8;
    v15 = 2080;
    v16 = v9;
    _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_DEBUG, "Handling app registration for app with bundle ID %s and asset path %s", (uint8_t *)&v13, 0x16u);
  }
  snlp::ssu::matcher::SSUPersister::updateCacheForAppIfRequired((snlp::ssu::matcher::SSUMatcher *)((char *)this + 64), a2, a3);
  v10 = *(unsigned __int8 *)(a3 + 56);
  v11 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    v12 = "TRUE";
    if (!v10)
      v12 = "FALSE";
    v13 = 136315138;
    v14 = (void *)v12;
    _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEBUG, "Completed app registration with isSuccess=%s", (uint8_t *)&v13, 0xCu);
  }
  std::mutex::unlock(v6);
}

void sub_1C221B198(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void snlp::ssu::matcher::SSUMatcher::deregisterApp(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  NSObject *v7;
  char *v8;
  NSObject *v9;
  char *v10;
  NSObject *v11;
  int v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  v7 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    if (a2[23] >= 0)
      v8 = a2;
    else
      v8 = *(char **)a2;
    v12 = 136315138;
    v13 = v8;
    _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_DEBUG, "Handling app deregistration for app with bundle ID %s", (uint8_t *)&v12, 0xCu);
  }
  snlp::ssu::matcher::SSUPersister::removeCacheFilesForApp(a1 + 64, a2, a3);
  if (!*(_BYTE *)(a3 + 56))
  {
    v9 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if (a2[23] >= 0)
        v10 = a2;
      else
        v10 = *(char **)a2;
      v12 = 136315138;
      v13 = v10;
      _os_log_impl(&dword_1C2196000, v9, OS_LOG_TYPE_ERROR, "Hit error when removing cache files for app %s. Returning false to signal that there was an error during de-registration.", (uint8_t *)&v12, 0xCu);
    }
  }
  v11 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v12) = 0;
    _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEBUG, "Completed app deregistration", (uint8_t *)&v12, 2u);
  }
  std::mutex::unlock(v6);
}

void sub_1C221B338(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void snlp::ssu::matcher::SSUMatcher::handleUserShortcutsDatabaseChanged(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  NSObject *v7;
  __n128 v8;
  unint64_t v9;
  int v10;
  NSObject *v11;
  const char *v12;
  int v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v6 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  v7 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4);
    v13 = 134217984;
    v14 = v9;
    _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_DEBUG, "Handling user shortcuts database change with %lu total configured shortcuts.", (uint8_t *)&v13, 0xCu);
  }
  snlp::ssu::matcher::SSUPersister::updateCacheForUserShortcutsIfRequired(a1 + 64, a2, a3, v8);
  v10 = *(unsigned __int8 *)(a3 + 56);
  v11 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    v12 = "TRUE";
    if (!v10)
      v12 = "FALSE";
    v13 = 136315138;
    v14 = (unint64_t)v12;
    _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEBUG, "Completed user shortcuts database change handling with isSuccess=%s", (uint8_t *)&v13, 0xCu);
  }
  std::mutex::unlock(v6);
}

void sub_1C221B4A4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

double snlp::ssu::matcher::SSUMatcher::handleUserRequest@<D0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  double result;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  sirinluinternalssu::SSUResponse *v10;
  uint64_t v11[3];
  uint64_t v12;
  uint64_t v13;
  char v14;
  _BYTE buf[12];
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  *a2 = 0;
  v12 = v5;
  snlp::ssu::proto::SSUValidatedRequest::validateRequest(a1, &v12, &v13);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (v14)
  {
    snlp::ssu::matcher::SSUMatcher::getTriggeredAppCategories((snlp::ssu::matcher::SSUMatcher *)a1, (const snlp::ssu::proto::SSUValidatedRequest *)&v13, v11);
    if (v11[0] == v11[1] && (_os_feature_enabled_impl() & 1) == 0)
    {
      v9 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "SSU";
        v16 = 2080;
        v17 = "[insights-snlp-ssu]: ";
        _os_log_impl(&dword_1C2196000, v9, OS_LOG_TYPE_DEBUG, "[%s] %sOutputting no SSU parses since there are no triggered (app, category) tuples", buf, 0x16u);
      }
      v10 = (sirinluinternalssu::SSUResponse *)operator new();
      *a3 = sirinluinternalssu::SSUResponse::SSUResponse(v10);
      a3[1] = 0;
      a3[2] = 0;
      a3[3] = 0;
    }
    else
    {
      snlp::ssu::matcher::SSURequestHandler::buildResponseForApps((uint64_t)(a1 + 168), v11, (snlp::ssu::proto::SSUValidatedRequest *)&v13, a3);
    }
    *(_QWORD *)buf = v11;
    std::vector<snlp::ssu::app::SSUAppCategory>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (v14)
    {
      v7 = v13;
      v13 = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  else
  {
    v8 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v11[0]) = 0;
      _os_log_impl(&dword_1C2196000, v8, OS_LOG_TYPE_ERROR, "Request failed validation. Aborting handling.", (uint8_t *)v11, 2u);
    }
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
  return result;
}

void sub_1C221B694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15)
{
  if (a14)
  {
    if (a13)
      (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

void snlp::ssu::matcher::SSUMatcher::getTriggeredAppCategories(snlp::ssu::matcher::SSUMatcher *this@<X0>, const snlp::ssu::proto::SSUValidatedRequest *a2@<X1>, uint64_t *a3@<X8>)
{
  std::string::size_type i;
  std::string::size_type size;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  NSObject *v25;
  snlp::ssu::matcher::SSUMatcher *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  _QWORD *v30;
  unint64_t v31;
  const char *v32;
  NSObject *v33;
  int v35;
  char v36;
  std::string __p;
  char v38;
  uint64_t v39;
  std::string v40;
  _BYTE buf[24];
  uint64_t v42;
  _QWORD v43[4];

  v43[3] = *MEMORY[0x1E0C80C00];
  snlp::ssu::cache::SSUCacheDirectory::lookupCacheFilesForLocale(*((_QWORD *)this + 41), (char *)this, &v40);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  size = v40.__r_.__value_.__l.__size_;
  for (i = v40.__r_.__value_.__r.__words[0]; i != size; i += 104)
  {
    v7 = *(_BYTE *)i;
    if (*(_BYTE *)i)
    {
      v8 = 0;
    }
    else
    {
      v8 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((_QWORD *)this + 3, (unsigned __int8 *)(i + 8)) != 0;
      v7 = *(_BYTE *)i;
    }
    snlp::ssu::trigger::buildTrigger(v8, v7, i + 8, &v39);
    v9 = v39;
    v10 = (*(uint64_t (**)(uint64_t, const snlp::ssu::proto::SSUValidatedRequest *))(*(_QWORD *)v39 + 16))(v39, a2);
    if ((v10 & 0xFF00000000) != 0)
    {
      v35 = v10;
      v36 = v8;
      if (*(char *)(i + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(i + 8), *(_QWORD *)(i + 16));
      }
      else
      {
        v11 = *(_OWORD *)(i + 8);
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 24);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      }
      v38 = *(_BYTE *)i;
      v12 = a3[1];
      v13 = a3[2];
      if (v12 >= v13)
      {
        v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - *a3) >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0x666666666666666)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - *a3) >> 3);
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x333333333333333)
          v18 = 0x666666666666666;
        else
          v18 = v16;
        v43[0] = a3 + 2;
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::app::SSUAppCategory>>(v18);
        v20 = &v19[40 * v15];
        *(_QWORD *)buf = v19;
        *(_QWORD *)&buf[8] = v20;
        v42 = (uint64_t)&v19[40 * v21];
        v20[4] = v36;
        *(_DWORD *)v20 = v35;
        v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *((_QWORD *)v20 + 3) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)(v20 + 8) = v22;
        memset(&__p, 0, sizeof(__p));
        v20[32] = v38;
        *(_QWORD *)&buf[16] = v20 + 40;
        std::vector<snlp::ssu::app::SSUAppCategory>::__swap_out_circular_buffer(a3, buf);
        v23 = a3[1];
        std::__split_buffer<snlp::ssu::app::SSUAppCategory>::~__split_buffer((uint64_t)buf);
        v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        a3[1] = v23;
        if (v24 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        *(_BYTE *)(v12 + 4) = v8;
        *(_DWORD *)v12 = v35;
        v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v12 + 24) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)(v12 + 8) = v14;
        memset(&__p, 0, sizeof(__p));
        *(_BYTE *)(v12 + 32) = v38;
        a3[1] = v12 + 40;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v25 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    v26 = this;
    if (*((char *)this + 23) < 0)
      v26 = *(snlp::ssu::matcher::SSUMatcher **)this;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "SSU";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "[insights-snlp-ssu]: ";
    *(_WORD *)&buf[22] = 2048;
    v42 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v40.__r_.__value_.__l.__size_ - v40.__r_.__value_.__r.__words[0]) >> 3);
    LOWORD(v43[0]) = 2080;
    *(_QWORD *)((char *)v43 + 2) = v26;
    _os_log_impl(&dword_1C2196000, v25, OS_LOG_TYPE_DEBUG, "[%s] %sFound %lu cache files in total for locale %s. Each of these were tested for triggering against the input request.", buf, 0x2Au);
  }
  v27 = *a3;
  v28 = a3[1];
  if (*a3 == v28)
  {
    v33 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "SSU";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "[insights-snlp-ssu]: ";
      _os_log_impl(&dword_1C2196000, v33, OS_LOG_TYPE_DEBUG, "[%s] %sNo app experiences were triggered", buf, 0x16u);
    }
  }
  else
  {
    do
    {
      v29 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        v30 = (_QWORD *)(v27 + 8);
        if (*(char *)(v27 + 31) < 0)
          v30 = (_QWORD *)*v30;
        v31 = *(unsigned __int8 *)(v27 + 32);
        v32 = "";
        if (v31 <= 3)
          v32 = EnumNamesSSUCategoryType(void)::names[v31];
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "SSU";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "[insights-snlp-ssu]: ";
        *(_WORD *)&buf[22] = 2080;
        v42 = (uint64_t)v30;
        LOWORD(v43[0]) = 2080;
        *(_QWORD *)((char *)v43 + 2) = v32;
        _os_log_impl(&dword_1C2196000, v29, OS_LOG_TYPE_DEBUG, "[%s] %sApp '%s' with category '%s' was triggered", buf, 0x2Au);
      }
      v27 += 40;
    }
    while (v27 != v28);
  }
  *(_QWORD *)buf = &v40;
  std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1C221BB5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  _Unwind_Resume(exception_object);
}

void std::vector<snlp::ssu::app::SSUAppCategory>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 5;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::allocator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::app::SSUAppCategory>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a1);
}

uint64_t *std::vector<snlp::ssu::app::SSUAppCategory>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_DWORD *)(v2 - 40);
    v2 -= 40;
    v6 = *(_BYTE *)(v2 + 4);
    *(_DWORD *)(v4 - 40) = v5;
    v4 -= 40;
    *(_BYTE *)(v4 + 4) = v6;
    v7 = *(_OWORD *)(v2 + 8);
    *(_QWORD *)(v4 + 24) = *(_QWORD *)(v2 + 24);
    *(_OWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_BYTE *)(v4 + 32) = *(_BYTE *)(v2 + 32);
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<snlp::ssu::app::SSUAppCategory>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 40;
      *(_QWORD *)(a1 + 16) = v2 - 40;
      if (*(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::~EspressoTransformerModel(void **this)
{
  nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::~EspressoTransformerModel(this);
  JUMPOUT(0x1C3BB9B44);
}

{
  void *v2;
  void *v3;

  *this = &off_1E7BE99F8;
  if (*((char *)this + 255) < 0)
    operator delete(this[29]);
  if (*((char *)this + 231) < 0)
    operator delete(this[26]);
  if (*((char *)this + 207) < 0)
    operator delete(this[23]);
  if (*((char *)this + 183) < 0)
    operator delete(this[20]);
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  v2 = this[2];
  this[2] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  v3 = this[1];
  this[1] = 0;
  if (v3)
    (*(void (**)(void *))(*(_QWORD *)v3 + 8))(v3);
}

void nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::forward(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  NSObject *v6;
  os_signpost_id_t v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  unint64_t v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  os_signpost_id_t v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  _QWORD *v20;
  unsigned int NetworkConfig;
  float *v22;
  _QWORD *v23;
  NSObject *v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  _QWORD *v31;
  _DWORD *v32;
  nlv4_inference_orchestrator::inference_engine::Trail *v33;
  nlv4_inference_orchestrator::inference_engine::Trail *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  nlv4_inference_orchestrator::inference_engine::Trail *v40;
  nlv4_inference_orchestrator::inference_engine::Trail *v41;
  nlv4_inference_orchestrator::inference_engine::Trail *v42;
  nlv4_inference_orchestrator::inference_engine::Trail *v43;
  nlv4_inference_orchestrator::inference_engine::Trail *v44;
  nlv4_inference_orchestrator::inference_engine::Trail *v45;
  unint64_t v46;
  float *v47;
  float *v48;
  unint64_t v49;
  float v50;
  nlv4_inference_orchestrator::inference_engine::Trail *v52;
  nlv4_inference_orchestrator::inference_engine::Trail *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  nlv4_inference_orchestrator::inference_engine::Trail *v68;
  nlv4_inference_orchestrator::inference_engine::Trail *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  nlv4_inference_orchestrator::inference_engine::Trail *v78;
  unint64_t v79;
  unint64_t v80;
  nlv4_inference_orchestrator::inference_engine::Trail *v81;
  nlv4_inference_orchestrator::inference_engine::Trail *v82;
  nlv4_inference_orchestrator::inference_engine::Trail *v83;
  nlv4_inference_orchestrator::inference_engine::Trail *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  nlv4_inference_orchestrator::inference_engine::Trail *i;
  NSObject *v90;
  NSObject *v91;
  NSObject *v92;
  nlv4_inference_orchestrator::inference_engine::Trail *v93;
  nlv4_inference_orchestrator::inference_engine::Trail *v94;
  unint64_t *v95;
  int v96;
  void *v97;
  nlv4_inference_orchestrator::inference_engine::Trail *v98;
  nlv4_inference_orchestrator::inference_engine::Trail *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  os_signpost_id_t spid;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  _DWORD *v115;
  _QWORD *v116;
  nlv4_inference_orchestrator::inference_engine::Trail *v117;
  _QWORD *v118;
  uint64_t *v119;
  uint64_t v120;
  int v121;
  void *v122[3];
  void *__p;
  void *v124;
  void *v125;
  char *v126;
  char *v127;
  void *v128;
  void *v129;
  void *v130;
  nlv4_inference_orchestrator::inference_engine::Trail *v131;
  nlv4_inference_orchestrator::inference_engine::Trail *v132;
  void *v133;
  _QWORD *v134;
  char v135;
  void *v136;
  void *v137;
  uint64_t v138;
  void *v139;
  nlv4_inference_orchestrator::inference_engine::Trail *v140;
  nlv4_inference_orchestrator::inference_engine::Trail *v141;
  unint64_t v142;
  unint64_t *v143;
  float v144;
  void *v145;
  float *v146;
  void *v147[3];
  _BYTE v148[24];
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  nlv4_inference_orchestrator::inference_engine::Trail *v153;
  nlv4_inference_orchestrator::inference_engine::Trail *v154;
  _QWORD v155[2];
  void *v156;
  _QWORD *v157;
  void *v158[3];
  unint64_t v159[2];
  void *v160[3];
  _BYTE v161[24];
  _QWORD v162[3];
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint8_t buf[8];
  uint64_t v167;
  uint64_t v168;
  _QWORD v169[3];
  _QWORD v170[3];
  _QWORD v171[3];
  _QWORD v172[3];
  _QWORD v173[3];
  _QWORD v174[3];
  _QWORD v175[3];
  _QWORD v176[3];
  _QWORD v177[3];
  _QWORD v178[3];
  nlv4_inference_orchestrator::inference_engine::Trail *v179[4];
  nlv4_inference_orchestrator::inference_engine::Trail *v180;
  nlv4_inference_orchestrator::inference_engine::Trail *v181;
  unint64_t v182;
  void *v183;
  _BYTE *v184;
  uint64_t v185;
  void *v186;
  _BYTE *v187;
  uint64_t v188;
  void *v189;
  _BYTE *v190;
  _QWORD *v191;
  void *v192;
  _BYTE *v193;
  void *v194;
  _BYTE *v195;
  void *v196;
  _BYTE *v197;
  void *v198;
  _BYTE *v199;
  void *v200;
  _BYTE *v201;
  _QWORD v202[3];
  _QWORD v203[3];
  _QWORD v204[3];
  _QWORD v205[3];
  _QWORD v206[3];
  _QWORD v207[3];
  _QWORD v208[3];
  _QWORD v209[3];
  _QWORD v210[3];
  void *v211[3];
  void *v212;
  _BYTE *v213;
  void *v214;
  _BYTE *v215;
  void *v216;
  _BYTE *v217;
  void *v218;
  _BYTE *v219;
  void *v220;
  _BYTE *v221;
  void *v222;
  _BYTE *v223;
  void *v224;
  _BYTE *v225;
  void *v226;
  _BYTE *v227;
  void *v228;
  _BYTE *v229;
  void *v230;
  _BYTE *v231;
  __int128 v232;
  char *v233;
  char *v234;
  unint64_t *v235;
  uint64_t v236[6];
  uint64_t v237[6];
  _QWORD v238[3];
  _QWORD v239[3];
  uint64_t v240[6];
  _QWORD v241[3];
  _QWORD v242[5];

  v242[3] = *MEMORY[0x1E0C80C00];
  v6 = SNLPOSLoggerForCategory(7);
  v7 = os_signpost_id_generate(v6);
  v8 = SNLPOSLoggerForCategory(7);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v9 = v8;
    if (os_signpost_enabled(v8))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "Encoder Inference", "", buf, 2u);
    }
  }
  v10 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_DEFAULT, "BEGIN \"Encoder Inference\"", buf, 2u);
  }
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::buildPlan(*(snlp::common::espresso_inference::pre_e5ml::EspressoModule **)(a1 + 8));
  nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::getPaddedEmbeddingsTensor(a1, (uint64_t)a2, &v228);
  nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::getPaddedSpansTensor(a1, (uint64_t)a2, (uint64_t)&v224);
  nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::getPaddedContextTensor(a1, (uint64_t)a2, &v220);
  nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::getPaddingMask(a1, a2, &v216);
  nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::getPositionIds((nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel *)a1, &v212);
  memset(v202, 0, sizeof(v202));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v202, v228, (uint64_t)v229, (v229 - (_BYTE *)v228) >> 3);
  memset(v203, 0, sizeof(v203));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v203, v230, (uint64_t)v231, (v231 - (_BYTE *)v230) >> 2);
  memset(v204, 0, sizeof(v204));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v204, v224, (uint64_t)v225, (v225 - (_BYTE *)v224) >> 3);
  v118 = a2;
  memset(v205, 0, sizeof(v205));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v205, v226, (uint64_t)v227, (v227 - (_BYTE *)v226) >> 2);
  memset(v206, 0, sizeof(v206));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v206, v220, (uint64_t)v221, (v221 - (_BYTE *)v220) >> 3);
  memset(v207, 0, sizeof(v207));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v207, v222, (uint64_t)v223, (v223 - (_BYTE *)v222) >> 2);
  memset(v208, 0, sizeof(v208));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v208, v216, (uint64_t)v217, (v217 - (_BYTE *)v216) >> 3);
  memset(v209, 0, sizeof(v209));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v209, v218, (uint64_t)v219, (v219 - (_BYTE *)v218) >> 2);
  memset(v210, 0, sizeof(v210));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v210, v212, (uint64_t)v213, (v213 - (_BYTE *)v212) >> 3);
  memset(v211, 0, sizeof(v211));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v211, v214, (uint64_t)v215, (v215 - (_BYTE *)v214) >> 2);
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::forward(*(nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule **)(a1 + 8), (const nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType *)v202, (uint64_t)&v194);
  v11 = *((_QWORD *)v198 + 1);
  v12 = SNLPOSLoggerForCategory(7);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v13 = v12;
    if (os_signpost_enabled(v12))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v13, OS_SIGNPOST_INTERVAL_END, v7, "Encoder Inference", "", buf, 2u);
    }
  }
  v14 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C2196000, v14, OS_LOG_TYPE_DEFAULT, "END \"Encoder Inference\"", buf, 2u);
  }
  v15 = SNLPOSLoggerForCategory(7);
  v16 = os_signpost_id_generate(v15);
  v17 = SNLPOSLoggerForCategory(7);
  v113 = v16 - 1;
  if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v18 = v17;
    if (os_signpost_enabled(v17))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v18, OS_SIGNPOST_INTERVAL_BEGIN, v16, "Decoder Inference", "", buf, 2u);
    }
  }
  v19 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C2196000, v19, OS_LOG_TYPE_DEFAULT, "BEGIN \"Decoder Inference\"", buf, 2u);
  }
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::buildPlan(*(snlp::common::espresso_inference::pre_e5ml::EspressoModule **)(a1 + 16));
  spid = v16;
  v20 = operator new(8uLL);
  *v20 = 1;
  NetworkConfig = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(_QWORD *)(a1 + 16), (unsigned __int8 *)(a1 + 208));
  v22 = (float *)operator new(4uLL);
  *v22 = (float)NetworkConfig;
  v116 = operator new(8uLL);
  *v116 = 1;
  v115 = operator new(4uLL);
  *v115 = 0;
  v23 = operator new(0x10uLL);
  v191 = v23 + 2;
  *v23 = 1;
  v23[1] = v11;
  v189 = v23;
  v190 = v23 + 2;
  *(_DWORD *)buf = 0;
  std::vector<float>::vector(&v192, v11, buf);
  v184 = 0;
  v183 = 0;
  v185 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v183, (const void *)v118[18], v118[19], (uint64_t)(v118[19] - v118[18]) >> 3);
  v187 = 0;
  v186 = 0;
  v188 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v186, (const void *)v118[21], v118[22], (uint64_t)(v118[22] - v118[21]) >> 2);
  v121 = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(_QWORD *)(a1 + 16), (unsigned __int8 *)(a1 + 232));
  v181 = 0;
  v180 = 0;
  v182 = 0;
  v167 = 0;
  *(_QWORD *)buf = 0;
  v168 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(buf, v20, (uint64_t)(v20 + 1), 1uLL);
  memset(v169, 0, sizeof(v169));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v169, v22, (uint64_t)(v22 + 1), 1uLL);
  memset(v170, 0, sizeof(v170));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v170, v198, (uint64_t)v199, (v199 - (_BYTE *)v198) >> 3);
  memset(v171, 0, sizeof(v171));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v171, v200, (uint64_t)v201, (v201 - (_BYTE *)v200) >> 2);
  memset(v172, 0, sizeof(v172));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v172, v189, (uint64_t)v190, (v190 - (_BYTE *)v189) >> 3);
  memset(v173, 0, sizeof(v173));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v173, v192, (uint64_t)v193, (v193 - (_BYTE *)v192) >> 2);
  memset(v174, 0, sizeof(v174));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v174, v194, (uint64_t)v195, (v195 - (_BYTE *)v194) >> 3);
  v120 = a1;
  memset(v175, 0, sizeof(v175));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v175, v196, (uint64_t)v197, (v197 - (_BYTE *)v196) >> 2);
  memset(v176, 0, sizeof(v176));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v176, v116, (uint64_t)(v116 + 1), 1uLL);
  memset(v177, 0, sizeof(v177));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v177, v115, (uint64_t)(v115 + 1), 1uLL);
  memset(v178, 0, sizeof(v178));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v178, v183, (uint64_t)v184, (v184 - (_BYTE *)v183) >> 3);
  memset(v179, 0, 24);
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v179, v186, (uint64_t)v187, (v187 - (_BYTE *)v186) >> 2);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::forward(*(nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule **)(a1 + 16), (const nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *)buf, (uint64_t)v161);
  v24 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    v25 = v118[24];
    LODWORD(v232) = 134217984;
    *(_QWORD *)((char *)&v232 + 4) = v25;
    _os_log_impl(&dword_1C2196000, v24, OS_LOG_TYPE_DEBUG, "Running beam search with beamWidth=%lu", (uint8_t *)&v232, 0xCu);
  }
  v26 = v118[24];
  v159[0] = (uint64_t)(v162[1] - v162[0]) >> 2;
  v159[1] = v26;
  LODWORD(v232) = 0;
  std::vector<float>::vector(v160, v159[0], &v232);
  v119 = a3;
  nlv4_inference_orchestrator::inference_engine::BeamSearch::applyLogSoftmax((uint64_t)v159, (uint64_t)v162, v158);
  v114 = v20;
  nlv4_inference_orchestrator::inference_engine::BeamSearch::getTopKTokenIndicesAndScores((uint64_t)v159, (uint64_t)v158, &v156);
  v27 = v156;
  v28 = v157;
  if (v156 != v157)
  {
    do
    {
      v29 = *v27;
      v30 = *v27 == v121 || *(_QWORD *)(v120 + 48) == 1;
      v148[0] = v30;
      v31 = operator new(8uLL);
      *v31 = v29;
      v140 = (nlv4_inference_orchestrator::inference_engine::Trail *)(v31 + 1);
      v141 = (nlv4_inference_orchestrator::inference_engine::Trail *)(v31 + 1);
      v139 = v31;
      v32 = v27 + 1;
      nlv4_inference_orchestrator::inference_engine::Trail::Trail((uint64_t)&v232, (uint64_t)&v139, v32, v148, (uint64_t)&v163, (uint64_t)&v164, (uint64_t)&v165);
      operator delete(v31);
      v33 = v181;
      if ((unint64_t)v181 >= v182)
      {
        v35 = 0x34F72C234F72C235 * ((v181 - v180) >> 3);
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) > 0x11A7B9611A7B961)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        if (0x69EE58469EE5846ALL * ((uint64_t)(v182 - (_QWORD)v180) >> 3) > v36)
          v36 = 0x69EE58469EE5846ALL * ((uint64_t)(v182 - (_QWORD)v180) >> 3);
        if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(v182 - (_QWORD)v180) >> 3)) >= 0x8D3DCB08D3DCB0)
          v37 = 0x11A7B9611A7B961;
        else
          v37 = v36;
        v143 = &v182;
        if (v37)
          v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::inference_engine::Trail>>(v37);
        else
          v38 = 0;
        v139 = (void *)v37;
        v140 = (nlv4_inference_orchestrator::inference_engine::Trail *)(v37 + 232 * v35);
        v141 = v140;
        v142 = v37 + 232 * v38;
        nlv4_inference_orchestrator::inference_engine::Trail::Trail(v140, (const nlv4_inference_orchestrator::inference_engine::Trail *)&v232);
        v141 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v141 + 232);
        std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__swap_out_circular_buffer((uint64_t *)&v180, &v139);
        v34 = v181;
        std::__split_buffer<nlv4_inference_orchestrator::inference_engine::Trail>::~__split_buffer((uint64_t)&v139);
      }
      else
      {
        nlv4_inference_orchestrator::inference_engine::Trail::Trail(v181, (const nlv4_inference_orchestrator::inference_engine::Trail *)&v232);
        v34 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v33 + 232);
      }
      v181 = v34;
      nlv4_inference_orchestrator::inference_engine::Trail::~Trail((nlv4_inference_orchestrator::inference_engine::Trail *)&v232);
      v27 = v32 + 2;
    }
    while (v27 != v28);
  }
  if (*(_QWORD *)(v120 + 48) >= 2uLL)
  {
    v39 = 1;
    while (2)
    {
      v112 = v39;
      v154 = 0;
      v153 = 0;
      v155[0] = 0;
      v40 = v180;
      v41 = v181;
      v117 = v181;
      if (v180 != v181)
      {
        do
        {
          if (*((_BYTE *)v40 + 224))
          {
            v42 = v154;
            if ((unint64_t)v154 >= v155[0])
            {
              v74 = 0x34F72C234F72C235 * ((v154 - v153) >> 3);
              v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) > 0x11A7B9611A7B961)
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              if (0x69EE58469EE5846ALL * ((uint64_t)(v155[0] - (_QWORD)v153) >> 3) > v75)
                v75 = 0x69EE58469EE5846ALL * ((uint64_t)(v155[0] - (_QWORD)v153) >> 3);
              if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(v155[0] - (_QWORD)v153) >> 3)) >= 0x8D3DCB08D3DCB0)
                v76 = 0x11A7B9611A7B961;
              else
                v76 = v75;
              v235 = v155;
              if (v76)
                v76 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::inference_engine::Trail>>(v76);
              else
                v77 = 0;
              *(_QWORD *)&v232 = v76;
              *((_QWORD *)&v232 + 1) = v76 + 232 * v74;
              v233 = (char *)*((_QWORD *)&v232 + 1);
              v234 = (char *)(v76 + 232 * v77);
              nlv4_inference_orchestrator::inference_engine::Trail::Trail(*((nlv4_inference_orchestrator::inference_engine::Trail **)&v232 + 1), v40);
              v233 += 232;
              std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__swap_out_circular_buffer((uint64_t *)&v153, &v232);
              v43 = v154;
              std::__split_buffer<nlv4_inference_orchestrator::inference_engine::Trail>::~__split_buffer((uint64_t)&v232);
            }
            else
            {
              nlv4_inference_orchestrator::inference_engine::Trail::Trail(v154, v40);
              v43 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v42 + 232);
            }
            v154 = v43;
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<nlv4_inference_orchestrator::inference_engine::Trail> &,std::__wrap_iter<nlv4_inference_orchestrator::inference_engine::Trail*>>((uint64_t)v153, (uint64_t)v43, 0x34F72C234F72C235 * ((v43 - v153) >> 3));
          }
          else
          {
            nlv4_inference_orchestrator::inference_engine::Trail::getLastPrediction(v40, &v232);
            nlv4_inference_orchestrator::inference_engine::Trail::getHidden(v40, v236);
            nlv4_inference_orchestrator::inference_engine::Trail::getMemory(v40, v237);
            memset(v238, 0, sizeof(v238));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v238, v194, (uint64_t)v195, (v195 - (_BYTE *)v194) >> 3);
            memset(v239, 0, sizeof(v239));
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v239, v196, (uint64_t)v197, (v197 - (_BYTE *)v196) >> 2);
            nlv4_inference_orchestrator::inference_engine::Trail::getAttentionIndex(v40, v240);
            memset(v241, 0, sizeof(v241));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v241, v183, (uint64_t)v184, (v184 - (_BYTE *)v183) >> 3);
            memset(v242, 0, 24);
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v242, v186, (uint64_t)v187, (v187 - (_BYTE *)v186) >> 2);
            nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::forward(*(nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule **)(v120 + 16), (const nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *)&v232, (uint64_t)v148);
            nlv4_inference_orchestrator::inference_engine::BeamSearch::applyLogSoftmax((uint64_t)v159, (uint64_t)&v149, v147);
            nlv4_inference_orchestrator::inference_engine::BeamSearch::getTopKTokenIndicesAndScores((uint64_t)v159, (uint64_t)v147, &v145);
            v139 = 0;
            v140 = 0;
            v141 = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v139, *((const void **)v40 + 25), *((_QWORD *)v40 + 26), (uint64_t)(*((_QWORD *)v40 + 26) - *((_QWORD *)v40 + 25)) >> 3);
            v44 = (nlv4_inference_orchestrator::inference_engine::Trail *)v139;
            v45 = v140;
            v46 = *(_QWORD *)(v120 + 48);
            if (v139)
            {
              v140 = (nlv4_inference_orchestrator::inference_engine::Trail *)v139;
              operator delete(v139);
            }
            v47 = (float *)v145;
            v48 = v146;
            if (v145 != v146)
            {
              v49 = (v45 - v44) >> 3;
              v50 = *(float *)v40;
              do
              {
                if (*(_QWORD *)v47 == v121 || v49 >= v46)
                {
                  v144 = v50 + v47[2];
                  v136 = 0;
                  v137 = 0;
                  v138 = 0;
                  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v136, *((const void **)v40 + 25), *((_QWORD *)v40 + 26), (uint64_t)(*((_QWORD *)v40 + 26) - *((_QWORD *)v40 + 25)) >> 3);
                  v135 = 1;
                  nlv4_inference_orchestrator::inference_engine::Trail::getHidden(v40, &v130);
                  nlv4_inference_orchestrator::inference_engine::Trail::getMemory(v40, &v125);
                  nlv4_inference_orchestrator::inference_engine::Trail::getAttentionIndex(v40, v122);
                  nlv4_inference_orchestrator::inference_engine::Trail::Trail((uint64_t)&v139, (uint64_t)&v136, &v144, &v135, (uint64_t)&v130, (uint64_t)&v125, (uint64_t)v122);
                  if (__p)
                  {
                    v124 = __p;
                    operator delete(__p);
                  }
                  if (v122[0])
                  {
                    v122[1] = v122[0];
                    operator delete(v122[0]);
                  }
                  if (v128)
                  {
                    v129 = v128;
                    operator delete(v128);
                  }
                  if (v125)
                  {
                    v126 = (char *)v125;
                    operator delete(v125);
                  }
                  if (v133)
                  {
                    v134 = v133;
                    operator delete(v133);
                  }
                  if (v130)
                  {
                    v131 = (nlv4_inference_orchestrator::inference_engine::Trail *)v130;
                    operator delete(v130);
                  }
                  if (v136)
                  {
                    v137 = v136;
                    operator delete(v136);
                  }
                  v52 = v154;
                  if ((unint64_t)v154 >= v155[0])
                  {
                    v62 = 0x34F72C234F72C235 * ((v154 - v153) >> 3);
                    v63 = v62 + 1;
                    if ((unint64_t)(v62 + 1) > 0x11A7B9611A7B961)
                      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
                    if (0x69EE58469EE5846ALL * ((uint64_t)(v155[0] - (_QWORD)v153) >> 3) > v63)
                      v63 = 0x69EE58469EE5846ALL * ((uint64_t)(v155[0] - (_QWORD)v153) >> 3);
                    if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(v155[0] - (_QWORD)v153) >> 3)) >= 0x8D3DCB08D3DCB0)
                      v64 = 0x11A7B9611A7B961;
                    else
                      v64 = v63;
                    v134 = v155;
                    if (v64)
                      v64 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::inference_engine::Trail>>(v64);
                    else
                      v65 = 0;
                    v130 = (void *)v64;
                    v131 = (nlv4_inference_orchestrator::inference_engine::Trail *)(v64 + 232 * v62);
                    v132 = v131;
                    v133 = (void *)(v64 + 232 * v65);
                    nlv4_inference_orchestrator::inference_engine::Trail::Trail(v131, (const nlv4_inference_orchestrator::inference_engine::Trail *)&v139);
                    v132 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v132 + 232);
                    std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__swap_out_circular_buffer((uint64_t *)&v153, &v130);
                    v53 = v154;
                    std::__split_buffer<nlv4_inference_orchestrator::inference_engine::Trail>::~__split_buffer((uint64_t)&v130);
                  }
                  else
                  {
                    nlv4_inference_orchestrator::inference_engine::Trail::Trail(v154, (const nlv4_inference_orchestrator::inference_engine::Trail *)&v139);
                    v53 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v52 + 232);
                  }
                  v154 = v53;
                  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<nlv4_inference_orchestrator::inference_engine::Trail> &,std::__wrap_iter<nlv4_inference_orchestrator::inference_engine::Trail*>>((uint64_t)v153, (uint64_t)v53, 0x34F72C234F72C235 * ((v53 - v153) >> 3));
                  nlv4_inference_orchestrator::inference_engine::Trail::~Trail((nlv4_inference_orchestrator::inference_engine::Trail *)&v139);
                }
                else
                {
                  *(float *)v122 = v50 + v47[2];
                  v125 = 0;
                  v126 = 0;
                  v127 = 0;
                  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v125, *((const void **)v40 + 25), *((_QWORD *)v40 + 26), (uint64_t)(*((_QWORD *)v40 + 26) - *((_QWORD *)v40 + 25)) >> 3);
                  v54 = v126;
                  if (v126 >= v127)
                  {
                    v56 = (char *)v125;
                    v57 = (v126 - (_BYTE *)v125) >> 3;
                    v58 = v57 + 1;
                    if ((unint64_t)(v57 + 1) >> 61)
                      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
                    v59 = v127 - (_BYTE *)v125;
                    if ((v127 - (_BYTE *)v125) >> 2 > v58)
                      v58 = v59 >> 2;
                    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
                      v60 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v60 = v58;
                    if (v60)
                    {
                      v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v127, v60);
                      v56 = (char *)v125;
                      v54 = v126;
                    }
                    else
                    {
                      v61 = 0;
                    }
                    v66 = &v61[8 * v57];
                    *(_QWORD *)v66 = *(_QWORD *)v47;
                    v55 = v66 + 8;
                    while (v54 != v56)
                    {
                      v67 = *((_QWORD *)v54 - 1);
                      v54 -= 8;
                      *((_QWORD *)v66 - 1) = v67;
                      v66 -= 8;
                    }
                    v125 = v66;
                    v126 = v55;
                    v127 = &v61[8 * v60];
                    if (v56)
                      operator delete(v56);
                  }
                  else
                  {
                    *(_QWORD *)v126 = *(_QWORD *)v47;
                    v55 = v54 + 8;
                  }
                  v126 = v55;
                  LOBYTE(v130) = 0;
                  nlv4_inference_orchestrator::inference_engine::Trail::Trail((uint64_t)&v139, (uint64_t)&v125, v122, &v130, (uint64_t)&v150, (uint64_t)&v151, (uint64_t)&v152);
                  v68 = v154;
                  if ((unint64_t)v154 >= v155[0])
                  {
                    v70 = 0x34F72C234F72C235 * ((v154 - v153) >> 3);
                    v71 = v70 + 1;
                    if ((unint64_t)(v70 + 1) > 0x11A7B9611A7B961)
                      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
                    if (0x69EE58469EE5846ALL * ((uint64_t)(v155[0] - (_QWORD)v153) >> 3) > v71)
                      v71 = 0x69EE58469EE5846ALL * ((uint64_t)(v155[0] - (_QWORD)v153) >> 3);
                    if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(v155[0] - (_QWORD)v153) >> 3)) >= 0x8D3DCB08D3DCB0)
                      v72 = 0x11A7B9611A7B961;
                    else
                      v72 = v71;
                    v134 = v155;
                    if (v72)
                      v72 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::inference_engine::Trail>>(v72);
                    else
                      v73 = 0;
                    v130 = (void *)v72;
                    v131 = (nlv4_inference_orchestrator::inference_engine::Trail *)(v72 + 232 * v70);
                    v132 = v131;
                    v133 = (void *)(v72 + 232 * v73);
                    nlv4_inference_orchestrator::inference_engine::Trail::Trail(v131, (const nlv4_inference_orchestrator::inference_engine::Trail *)&v139);
                    v132 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v132 + 232);
                    std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__swap_out_circular_buffer((uint64_t *)&v153, &v130);
                    v69 = v154;
                    std::__split_buffer<nlv4_inference_orchestrator::inference_engine::Trail>::~__split_buffer((uint64_t)&v130);
                  }
                  else
                  {
                    nlv4_inference_orchestrator::inference_engine::Trail::Trail(v154, (const nlv4_inference_orchestrator::inference_engine::Trail *)&v139);
                    v69 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v68 + 232);
                  }
                  v154 = v69;
                  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<nlv4_inference_orchestrator::inference_engine::Trail> &,std::__wrap_iter<nlv4_inference_orchestrator::inference_engine::Trail*>>((uint64_t)v153, (uint64_t)v69, 0x34F72C234F72C235 * ((v69 - v153) >> 3));
                  nlv4_inference_orchestrator::inference_engine::Trail::~Trail((nlv4_inference_orchestrator::inference_engine::Trail *)&v139);
                  if (v125)
                  {
                    v126 = (char *)v125;
                    operator delete(v125);
                  }
                }
                v47 += 4;
              }
              while (v47 != v48);
              v47 = (float *)v145;
            }
            a3 = v119;
            v41 = v117;
            if (v47)
              operator delete(v47);
            if (v147[0])
            {
              v147[1] = v147[0];
              operator delete(v147[0]);
            }
            nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *)v148);
            nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType::~TransformerDecoderInputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *)&v232);
          }
          v40 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v40 + 232);
        }
        while (v40 != v41);
        v40 = v181;
        v78 = v180;
        if (v181 != v180)
        {
          do
          {
            v40 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v40 - 232);
            nlv4_inference_orchestrator::inference_engine::Trail::~Trail(v40);
          }
          while (v40 != v78);
          v40 = v78;
        }
      }
      v181 = v40;
      v79 = v118[24];
      if (v79)
      {
        v80 = 0;
        v81 = v154;
        do
        {
          v82 = v153;
          if (v153 != v81)
          {
            v83 = v181;
            if ((unint64_t)v181 >= v182)
            {
              v85 = 0x34F72C234F72C235 * ((v181 - v180) >> 3);
              v86 = v85 + 1;
              if ((unint64_t)(v85 + 1) > 0x11A7B9611A7B961)
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              if (0x69EE58469EE5846ALL * ((uint64_t)(v182 - (_QWORD)v180) >> 3) > v86)
                v86 = 0x69EE58469EE5846ALL * ((uint64_t)(v182 - (_QWORD)v180) >> 3);
              if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(v182 - (_QWORD)v180) >> 3)) >= 0x8D3DCB08D3DCB0)
                v87 = 0x11A7B9611A7B961;
              else
                v87 = v86;
              v235 = &v182;
              if (v87)
                v87 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::inference_engine::Trail>>(v87);
              else
                v88 = 0;
              *(_QWORD *)&v232 = v87;
              *((_QWORD *)&v232 + 1) = v87 + 232 * v85;
              v233 = (char *)*((_QWORD *)&v232 + 1);
              v234 = (char *)(v87 + 232 * v88);
              nlv4_inference_orchestrator::inference_engine::Trail::Trail(*((nlv4_inference_orchestrator::inference_engine::Trail **)&v232 + 1), v82);
              v233 += 232;
              std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__swap_out_circular_buffer((uint64_t *)&v180, &v232);
              v84 = v181;
              std::__split_buffer<nlv4_inference_orchestrator::inference_engine::Trail>::~__split_buffer((uint64_t)&v232);
            }
            else
            {
              nlv4_inference_orchestrator::inference_engine::Trail::Trail(v181, v153);
              v84 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v83 + 232);
            }
            v181 = v84;
            std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::less<nlv4_inference_orchestrator::inference_engine::Trail>,std::__wrap_iter<nlv4_inference_orchestrator::inference_engine::Trail*>>((uint64_t)v153, (uint64_t)v154, 0x34F72C234F72C235 * ((v154 - v153) >> 3));
            nlv4_inference_orchestrator::inference_engine::Trail::~Trail((nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v154 - 232));
            v154 = v81;
            v79 = v118[24];
          }
          ++v80;
        }
        while (v80 < v79);
        v40 = v181;
      }
      for (i = v180; ; i = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)i + 232))
      {
        if (i == v40)
        {
          *(_QWORD *)&v232 = &v153;
          std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__destroy_vector::operator()[abi:ne180100]((void ***)&v232);
          goto LABEL_154;
        }
        if (!*((_BYTE *)i + 224))
          break;
      }
      *(_QWORD *)&v232 = &v153;
      std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__destroy_vector::operator()[abi:ne180100]((void ***)&v232);
      v39 = v112 + 1;
      if (*(_QWORD *)(v120 + 48) > (unint64_t)(v112 + 1))
        continue;
      break;
    }
  }
LABEL_154:
  v90 = SNLPOSLoggerForCategory(7);
  if (v113 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v91 = v90;
    if (os_signpost_enabled(v90))
    {
      LOWORD(v232) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v91, OS_SIGNPOST_INTERVAL_END, spid, "Decoder Inference", "", (uint8_t *)&v232, 2u);
    }
  }
  v92 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v232) = 0;
    _os_log_impl(&dword_1C2196000, v92, OS_LOG_TYPE_DEFAULT, "END \"Decoder Inference\"", (uint8_t *)&v232, 2u);
  }
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::cleanPlan(*(snlp::common::espresso_inference::pre_e5ml::EspressoModule **)(v120 + 8));
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::cleanPlan(*(snlp::common::espresso_inference::pre_e5ml::EspressoModule **)(v120 + 16));
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<std::pair<float,std::vector<unsigned long>>>::__assign_with_size[abi:ne180100]<std::pair<float,std::vector<unsigned long>> const*,std::pair<float,std::vector<unsigned long>> const*>(a3);
  v93 = v180;
  v94 = v181;
  if (v180 != v181)
  {
    v95 = (unint64_t *)(a3 + 2);
    do
    {
      v96 = *(_DWORD *)v93;
      v139 = 0;
      v140 = 0;
      v141 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v139, *((const void **)v93 + 25), *((_QWORD *)v93 + 26), (uint64_t)(*((_QWORD *)v93 + 26) - *((_QWORD *)v93 + 25)) >> 3);
      v97 = v139;
      v98 = v140;
      v99 = v141;
      v140 = 0;
      v141 = 0;
      v139 = 0;
      v100 = a3[1];
      v101 = a3[2];
      if (v100 >= v101)
      {
        v103 = *a3;
        v104 = (uint64_t)(v100 - *a3) >> 5;
        v105 = v104 + 1;
        if ((unint64_t)(v104 + 1) >> 59)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v106 = v101 - v103;
        if (v106 >> 4 > v105)
          v105 = v106 >> 4;
        if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFE0)
          v107 = 0x7FFFFFFFFFFFFFFLL;
        else
          v107 = v105;
        v235 = v95;
        v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v107);
        v109 = &v108[32 * v104];
        *(_QWORD *)&v232 = v108;
        *((_QWORD *)&v232 + 1) = v109;
        v234 = &v108[32 * v110];
        *(_DWORD *)v109 = v96;
        *((_QWORD *)v109 + 1) = v97;
        *((_QWORD *)v109 + 2) = 0;
        *((_QWORD *)v109 + 2) = v98;
        *((_QWORD *)v109 + 3) = v99;
        v233 = v109 + 32;
        a3 = v119;
        std::vector<std::pair<float,std::vector<unsigned long>>>::__swap_out_circular_buffer(v119, &v232);
        v102 = v119[1];
        std::__split_buffer<std::pair<float,std::vector<unsigned long>>>::~__split_buffer((uint64_t)&v232);
      }
      else
      {
        *(_DWORD *)v100 = v96;
        *(_QWORD *)(v100 + 8) = v97;
        *(_QWORD *)(v100 + 16) = v98;
        v102 = v100 + 32;
        *(_QWORD *)(v100 + 24) = v99;
      }
      a3[1] = v102;
      if (v139)
      {
        v140 = (nlv4_inference_orchestrator::inference_engine::Trail *)v139;
        operator delete(v139);
      }
      v93 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v93 + 232);
    }
    while (v93 != v94);
  }
  if (v156)
    operator delete(v156);
  if (v158[0])
  {
    v158[1] = v158[0];
    operator delete(v158[0]);
  }
  if (v160[0])
  {
    v160[1] = v160[0];
    operator delete(v160[0]);
  }
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *)v161);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType::~TransformerDecoderInputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *)buf);
  *(_QWORD *)buf = &v180;
  std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v186)
  {
    v187 = v186;
    operator delete(v186);
  }
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  if (v192)
  {
    v193 = v192;
    operator delete(v192);
  }
  if (v189)
  {
    v190 = v189;
    operator delete(v189);
  }
  operator delete(v115);
  operator delete(v116);
  operator delete(v22);
  operator delete(v114);
  if (v200)
  {
    v201 = v200;
    operator delete(v200);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v196)
  {
    v197 = v196;
    operator delete(v196);
  }
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType::~TransformerEncoderModuleInputType((nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType *)v202);
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  if (v226)
  {
    v227 = v226;
    operator delete(v226);
  }
  if (v224)
  {
    v225 = v224;
    operator delete(v224);
  }
  if (v230)
  {
    v231 = v230;
    operator delete(v230);
  }
  if (v228)
  {
    v229 = v228;
    operator delete(v228);
  }
}

void sub_1C221D470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  v16 = (void *)STACK[0x390];
  if (STACK[0x390])
  {
    STACK[0x398] = (unint64_t)v16;
    operator delete(v16);
  }
  v17 = (void *)STACK[0x3B8];
  if (STACK[0x3B8])
  {
    STACK[0x3C0] = (unint64_t)v17;
    operator delete(v17);
  }
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *)&STACK[0x3D0]);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType::~TransformerDecoderInputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *)&STACK[0x490]);
  STACK[0x490] = (unint64_t)&STACK[0x5B8];
  std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x490]);
  v18 = (void *)STACK[0x5E8];
  if (STACK[0x5E8])
  {
    STACK[0x5F0] = (unint64_t)v18;
    operator delete(v18);
  }
  v19 = (void *)STACK[0x5D0];
  if (STACK[0x5D0])
  {
    STACK[0x5D8] = (unint64_t)v19;
    operator delete(v19);
  }
  v20 = (void *)STACK[0x618];
  if (STACK[0x618])
  {
    STACK[0x620] = (unint64_t)v20;
    operator delete(v20);
  }
  v21 = (void *)STACK[0x600];
  if (STACK[0x600])
  {
    STACK[0x608] = (unint64_t)v21;
    operator delete(v21);
  }
  operator delete(a14);
  operator delete(a15);
  operator delete(a13);
  operator delete(a12);
  v22 = (void *)STACK[0x678];
  if (STACK[0x678])
  {
    STACK[0x680] = (unint64_t)v22;
    operator delete(v22);
  }
  v23 = (void *)STACK[0x660];
  if (STACK[0x660])
  {
    STACK[0x668] = (unint64_t)v23;
    operator delete(v23);
  }
  v24 = (void *)STACK[0x648];
  if (STACK[0x648])
  {
    STACK[0x650] = (unint64_t)v24;
    operator delete(v24);
  }
  v25 = (void *)STACK[0x630];
  if (STACK[0x630])
  {
    STACK[0x638] = (unint64_t)v25;
    operator delete(v25);
  }
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType::~TransformerEncoderModuleInputType((nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType *)&STACK[0x690]);
  v26 = (void *)STACK[0x798];
  if (STACK[0x798])
  {
    STACK[0x7A0] = (unint64_t)v26;
    operator delete(v26);
  }
  v27 = (void *)STACK[0x780];
  if (STACK[0x780])
  {
    STACK[0x788] = (unint64_t)v27;
    operator delete(v27);
  }
  v28 = (void *)STACK[0x7C8];
  if (STACK[0x7C8])
  {
    STACK[0x7D0] = (unint64_t)v28;
    operator delete(v28);
  }
  v29 = (void *)STACK[0x7B0];
  if (STACK[0x7B0])
  {
    STACK[0x7B8] = (unint64_t)v29;
    operator delete(v29);
  }
  v30 = (void *)STACK[0x7F8];
  if (STACK[0x7F8])
  {
    STACK[0x800] = (unint64_t)v30;
    operator delete(v30);
  }
  v31 = (void *)STACK[0x7E0];
  if (STACK[0x7E0])
  {
    STACK[0x7E8] = (unint64_t)v31;
    operator delete(v31);
  }
  v32 = (void *)STACK[0x828];
  if (STACK[0x828])
  {
    STACK[0x830] = (unint64_t)v32;
    operator delete(v32);
  }
  v33 = (void *)STACK[0x810];
  if (STACK[0x810])
  {
    STACK[0x818] = (unint64_t)v33;
    operator delete(v33);
  }
  v34 = (void *)STACK[0x858];
  if (STACK[0x858])
  {
    STACK[0x860] = (unint64_t)v34;
    operator delete(v34);
  }
  v35 = (void *)STACK[0x840];
  if (STACK[0x840])
  {
    STACK[0x848] = (unint64_t)v35;
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::getPaddedEmbeddingsTensor(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t NetworkConfig;
  unsigned int v7;
  _QWORD *v8;
  NSObject *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  NetworkConfig = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 64));
  v7 = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 88));
  v8 = (_QWORD *)(a1 + 24);
  nlv4_inference_orchestrator::inference_engine::utils::padEmbeddingTensor(a2, NetworkConfig, v7, (uint64_t *)(a1 + 24), a3, *(float *)(a1 + 56));
  if (*a3 == a3[1])
  {
    v9 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 47) < 0)
        v8 = (_QWORD *)*v8;
      v10 = 136315138;
      v11 = v8;
      _os_log_impl(&dword_1C2196000, v9, OS_LOG_TYPE_ERROR, "[%s] Padding of the embeddings input is required to execute model inference", (uint8_t *)&v10, 0xCu);
    }
  }
}

void nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::getPaddedSpansTensor(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t NetworkConfig;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  NSObject *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  NetworkConfig = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 64));
  v7 = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 112));
  v8 = a2 + 48;
  v9 = (_QWORD *)(a1 + 24);
  nlv4_inference_orchestrator::inference_engine::utils::padSpanTensor(v8, NetworkConfig, v7, (uint64_t *)(a1 + 24), (_OWORD *)a3, *(float *)(a1 + 56));
  if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8))
  {
    v10 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 47) < 0)
        v9 = (_QWORD *)*v9;
      v11 = 136315138;
      v12 = v9;
      _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_ERROR, "[%s] Padding of the span input is required to execute model inference", (uint8_t *)&v11, 0xCu);
    }
  }
}

void nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::getPaddedContextTensor(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t NetworkConfig;
  uint64_t v7;
  _QWORD *v8;
  NSObject *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  NetworkConfig = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 112));
  v7 = a2 + 96;
  v8 = (_QWORD *)(a1 + 24);
  nlv4_inference_orchestrator::inference_engine::utils::padContextTensor(v7, NetworkConfig, (uint64_t *)(a1 + 24), a3, *(float *)(a1 + 56));
  if (*a3 == a3[1])
  {
    v9 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 47) < 0)
        v8 = (_QWORD *)*v8;
      v10 = 136315138;
      v11 = v8;
      _os_log_impl(&dword_1C2196000, v9, OS_LOG_TYPE_ERROR, "[%s] Padding of the context input is required to execute model inference", (uint8_t *)&v10, 0xCu);
    }
  }
}

void nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::getPaddingMask(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t NetworkConfig;
  int v7;
  unsigned int v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD *v13;
  _QWORD *v14;
  float v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  NSObject *v20;
  _QWORD *v21;
  _QWORD *v22;
  float *v23;
  char *v24;
  _QWORD *v25;
  void *__b;
  _BYTE *v27;
  uint8_t buf[4];
  _QWORD *v29;
  __int16 v30;
  unint64_t v31;
  __int16 v32;
  unint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  NetworkConfig = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 64));
  v7 = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 184));
  v8 = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 160));
  v9 = v8;
  v10 = (float *)a2[21];
  if (v10 == (float *)a2[22] || (v11 = a2[12], (unint64_t)(a2[13] - v11) >= 0x11))
  {
    v12 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = (_QWORD *)(a1 + 24);
      if (*(char *)(a1 + 47) < 0)
        v13 = (_QWORD *)*v13;
      *(_DWORD *)buf = 136315138;
      v29 = v13;
      _os_log_impl(&dword_1C2196000, v12, OS_LOG_TYPE_ERROR, "[%s] Invalid featurization input provided to the model.  Expected a non-empty utterance length tensor and a context tensor of at least two dimensions.", buf, 0xCu);
    }
    a3[1] = 0;
    *a3 = 0;
    a3[2] = 0;
    v14 = operator new(0x10uLL);
    *a3 = v14;
    a3[2] = v14 + 2;
    *v14 = 1;
    v14[1] = v9 + NetworkConfig;
    a3[1] = v14 + 2;
    std::vector<float>::vector(a3 + 3, v9 + NetworkConfig, (_DWORD *)(a1 + 56));
  }
  else
  {
    v15 = *v10;
    v16 = *(_QWORD *)(v11 + 8);
    v17 = v8 + NetworkConfig;
    std::vector<float>::vector(&__b, v17, (_DWORD *)(a1 + 56));
    v18 = (unint64_t)v15;
    v19 = (char *)__b;
    if ((uint64_t)(unint64_t)v15 >= 1)
      memset_pattern16(__b, &unk_1C230B580, 4 * (v18 - ((v18 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
    if (NetworkConfig >= v18)
    {
      if (v16)
      {
        v23 = (float *)a2[15];
        v24 = &v19[4 * NetworkConfig];
        do
        {
          if ((unint64_t)*v23 != v7)
            *(_DWORD *)v24 = 1065353216;
          v24 += 4;
          ++v23;
          --v16;
        }
        while (v16);
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v25 = operator new(0x10uLL);
      a3[1] = v25 + 2;
      a3[2] = v25 + 2;
      *v25 = 1;
      v25[1] = v17;
      *a3 = v25;
      a3[4] = 0;
      a3[5] = 0;
      a3[3] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a3 + 3, v19, (uint64_t)v27, (v27 - v19) >> 2);
    }
    else
    {
      v20 = SNLPOSLoggerForCategory(4);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = (_QWORD *)(a1 + 24);
        if (*(char *)(a1 + 47) < 0)
          v21 = (_QWORD *)*v21;
        *(_DWORD *)buf = 136315650;
        v29 = v21;
        v30 = 2048;
        v31 = (unint64_t)v15;
        v32 = 2048;
        v33 = NetworkConfig;
        _os_log_impl(&dword_1C2196000, v20, OS_LOG_TYPE_ERROR, "[%s] The utterance length (%lu) exceeds the maximum utterance length (%lu).", buf, 0x20u);
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v22 = operator new(0x10uLL);
      a3[1] = v22 + 2;
      a3[2] = v22 + 2;
      *v22 = 1;
      v22[1] = v17;
      *a3 = v22;
      std::vector<float>::vector(a3 + 3, v9 + NetworkConfig, (_DWORD *)(a1 + 56));
    }
    if (__b)
    {
      v27 = __b;
      operator delete(__b);
    }
  }
}

void sub_1C221E174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::getPositionIds(nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t NetworkConfig;
  void *v4;
  uint64_t v5;
  float v6;
  float *v7;
  _QWORD *v8;
  void *__p;
  void *v10;

  NetworkConfig = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*((_QWORD *)this + 1), (unsigned __int8 *)this + 64);
  std::vector<float>::vector(&__p, NetworkConfig);
  v4 = __p;
  v5 = (uint64_t)v10;
  if (__p != v10)
  {
    v6 = 0.0;
    v7 = (float *)__p;
    do
    {
      *v7++ = v6;
      v6 = v6 + 1.0;
    }
    while (v7 != (float *)v5);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v8 = operator new(0x10uLL);
  a2[1] = v8 + 2;
  a2[2] = v8 + 2;
  *v8 = 1;
  v8[1] = NetworkConfig;
  *a2 = v8;
  a2[4] = 0;
  a2[5] = 0;
  a2[3] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, v4, v5, (v5 - (uint64_t)v4) >> 2);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_1C221E294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

nlv4_inference_orchestrator::inference_engine::Trail *nlv4_inference_orchestrator::inference_engine::Trail::Trail(nlv4_inference_orchestrator::inference_engine::Trail *this, const nlv4_inference_orchestrator::inference_engine::Trail *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)this + 1, *((const void **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 4, *((const void **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)this + 7, *((const void **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 10, *((const void **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)this + 13, *((const void **)a2 + 13), *((_QWORD *)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 16, *((const void **)a2 + 16), *((_QWORD *)a2 + 17), (uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 2);
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)this + 19, *((const void **)a2 + 19), *((_QWORD *)a2 + 20), (uint64_t)(*((_QWORD *)a2 + 20) - *((_QWORD *)a2 + 19)) >> 3);
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 22, *((const void **)a2 + 22), *((_QWORD *)a2 + 23), (uint64_t)(*((_QWORD *)a2 + 23) - *((_QWORD *)a2 + 22)) >> 2);
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)this + 25, *((const void **)a2 + 25), *((_QWORD *)a2 + 26), (uint64_t)(*((_QWORD *)a2 + 26) - *((_QWORD *)a2 + 25)) >> 3);
  *((_BYTE *)this + 224) = *((_BYTE *)a2 + 224);
  return this;
}

void sub_1C221E41C(_Unwind_Exception *a1)
{
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *v1;
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *v2;
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *v3;
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *v4;

  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v4);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v3);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v2);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v1);
  _Unwind_Resume(a1);
}

void sub_1C221E488()
{
  uint64_t v0;
  void **v1;
  void *v2;

  v2 = *v1;
  if (*v1)
  {
    *(_QWORD *)(v0 + 64) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C221E478);
}

void sub_1C221E4A0()
{
  JUMPOUT(0x1C221E478);
}

void sub_1C221E4A8()
{
  void **v0;
  uint64_t v1;
  void *v2;

  v2 = *v0;
  if (*v0)
  {
    *(_QWORD *)(v1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C221E480);
}

void nlv4_inference_orchestrator::inference_engine::Trail::~Trail(nlv4_inference_orchestrator::inference_engine::Trail *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
  {
    *((_QWORD *)this + 26) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 19);
  if (v4)
  {
    *((_QWORD *)this + 20) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 16);
  if (v5)
  {
    *((_QWORD *)this + 17) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 13);
  if (v6)
  {
    *((_QWORD *)this + 14) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 10);
  if (v7)
  {
    *((_QWORD *)this + 11) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 7);
  if (v8)
  {
    *((_QWORD *)this + 8) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 5) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 1);
  if (v10)
  {
    *((_QWORD *)this + 2) = v10;
    operator delete(v10);
  }
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<nlv4_inference_orchestrator::inference_engine::Trail> &,std::__wrap_iter<nlv4_inference_orchestrator::inference_engine::Trail*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  float v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;

  v5 = a3 - 2;
  if (a3 >= 2)
  {
    v50 = v3;
    v51 = v4;
    v6 = v5 >> 1;
    v7 = (float *)(a1 + 232 * (v5 >> 1));
    v8 = (float *)(a2 - 232);
    if (*v7 < *(float *)(a2 - 232))
    {
      v30 = *(float *)(a2 - 232);
      v31 = *(_OWORD *)(a2 - 224);
      v32 = *(_QWORD *)(a2 - 208);
      *(_QWORD *)(a2 - 224) = 0;
      *(_QWORD *)(a2 - 216) = 0;
      *(_QWORD *)(a2 - 208) = 0;
      v33 = *(_OWORD *)(a2 - 200);
      v34 = *(_QWORD *)(a2 - 184);
      *(_QWORD *)(a2 - 200) = 0;
      *(_QWORD *)(a2 - 192) = 0;
      *(_QWORD *)(a2 - 184) = 0;
      v35 = *(_OWORD *)(a2 - 176);
      v36 = *(_QWORD *)(a2 - 160);
      *(_QWORD *)(a2 - 176) = 0;
      *(_QWORD *)(a2 - 168) = 0;
      *(_QWORD *)(a2 - 160) = 0;
      v37 = *(_OWORD *)(a2 - 152);
      v38 = *(_QWORD *)(a2 - 136);
      *(_QWORD *)(a2 - 152) = 0;
      *(_QWORD *)(a2 - 144) = 0;
      *(_QWORD *)(a2 - 136) = 0;
      v39 = *(_OWORD *)(a2 - 128);
      v40 = *(_QWORD *)(a2 - 112);
      *(_QWORD *)(a2 - 128) = 0;
      *(_QWORD *)(a2 - 120) = 0;
      *(_QWORD *)(a2 - 112) = 0;
      v41 = *(_OWORD *)(a2 - 104);
      v42 = *(_QWORD *)(a2 - 88);
      *(_QWORD *)(a2 - 104) = 0;
      *(_QWORD *)(a2 - 96) = 0;
      *(_QWORD *)(a2 - 88) = 0;
      v43 = *(_OWORD *)(a2 - 80);
      v44 = *(_QWORD *)(a2 - 64);
      *(_QWORD *)(a2 - 80) = 0;
      *(_QWORD *)(a2 - 72) = 0;
      *(_QWORD *)(a2 - 64) = 0;
      v45 = *(_OWORD *)(a2 - 56);
      v46 = *(_QWORD *)(a2 - 40);
      *(_QWORD *)(a2 - 56) = 0;
      *(_QWORD *)(a2 - 48) = 0;
      *(_QWORD *)(a2 - 40) = 0;
      v47 = *(_OWORD *)(a2 - 32);
      v48 = *(_QWORD *)(a2 - 16);
      *(_QWORD *)(a2 - 32) = 0;
      *(_QWORD *)(a2 - 24) = 0;
      *(_QWORD *)(a2 - 16) = 0;
      v49 = *(_BYTE *)(a2 - 8);
      v9 = *v7;
      do
      {
        v10 = v7;
        *v8 = v9;
        v11 = (void *)*((_QWORD *)v8 + 1);
        if (v11)
        {
          *((_QWORD *)v8 + 2) = v11;
          operator delete(v11);
          *((_QWORD *)v8 + 1) = 0;
          *((_QWORD *)v8 + 2) = 0;
          *((_QWORD *)v8 + 3) = 0;
        }
        *(_OWORD *)(v8 + 2) = *(_OWORD *)(v10 + 2);
        *((_QWORD *)v8 + 3) = *((_QWORD *)v10 + 3);
        *((_QWORD *)v10 + 1) = 0;
        *((_QWORD *)v10 + 2) = 0;
        *((_QWORD *)v10 + 3) = 0;
        v12 = (void *)*((_QWORD *)v8 + 4);
        if (v12)
        {
          *((_QWORD *)v8 + 5) = v12;
          operator delete(v12);
          *((_QWORD *)v8 + 4) = 0;
          *((_QWORD *)v8 + 5) = 0;
          *((_QWORD *)v8 + 6) = 0;
        }
        *((_OWORD *)v8 + 2) = *((_OWORD *)v10 + 2);
        *((_QWORD *)v8 + 6) = *((_QWORD *)v10 + 6);
        *((_QWORD *)v10 + 4) = 0;
        *((_QWORD *)v10 + 5) = 0;
        *((_QWORD *)v10 + 6) = 0;
        v13 = (void *)*((_QWORD *)v8 + 7);
        if (v13)
        {
          *((_QWORD *)v8 + 8) = v13;
          operator delete(v13);
          *((_QWORD *)v8 + 7) = 0;
          *((_QWORD *)v8 + 8) = 0;
          *((_QWORD *)v8 + 9) = 0;
        }
        *(_OWORD *)(v8 + 14) = *(_OWORD *)(v10 + 14);
        *((_QWORD *)v8 + 9) = *((_QWORD *)v10 + 9);
        *((_QWORD *)v10 + 7) = 0;
        *((_QWORD *)v10 + 8) = 0;
        *((_QWORD *)v10 + 9) = 0;
        v14 = (void *)*((_QWORD *)v8 + 10);
        if (v14)
        {
          *((_QWORD *)v8 + 11) = v14;
          operator delete(v14);
          *((_QWORD *)v8 + 10) = 0;
          *((_QWORD *)v8 + 11) = 0;
          *((_QWORD *)v8 + 12) = 0;
        }
        *((_OWORD *)v8 + 5) = *((_OWORD *)v10 + 5);
        *((_QWORD *)v8 + 12) = *((_QWORD *)v10 + 12);
        *((_QWORD *)v10 + 10) = 0;
        *((_QWORD *)v10 + 11) = 0;
        *((_QWORD *)v10 + 12) = 0;
        v15 = (void *)*((_QWORD *)v8 + 13);
        if (v15)
        {
          *((_QWORD *)v8 + 14) = v15;
          operator delete(v15);
          *((_QWORD *)v8 + 13) = 0;
          *((_QWORD *)v8 + 14) = 0;
          *((_QWORD *)v8 + 15) = 0;
        }
        *(_OWORD *)(v8 + 26) = *(_OWORD *)(v10 + 26);
        *((_QWORD *)v8 + 15) = *((_QWORD *)v10 + 15);
        *((_QWORD *)v10 + 13) = 0;
        *((_QWORD *)v10 + 14) = 0;
        *((_QWORD *)v10 + 15) = 0;
        v16 = (void *)*((_QWORD *)v8 + 16);
        if (v16)
        {
          *((_QWORD *)v8 + 17) = v16;
          operator delete(v16);
          *((_QWORD *)v8 + 16) = 0;
          *((_QWORD *)v8 + 17) = 0;
          *((_QWORD *)v8 + 18) = 0;
        }
        *((_OWORD *)v8 + 8) = *((_OWORD *)v10 + 8);
        *((_QWORD *)v8 + 18) = *((_QWORD *)v10 + 18);
        *((_QWORD *)v10 + 16) = 0;
        *((_QWORD *)v10 + 17) = 0;
        *((_QWORD *)v10 + 18) = 0;
        v17 = (void *)*((_QWORD *)v8 + 19);
        if (v17)
        {
          *((_QWORD *)v8 + 20) = v17;
          operator delete(v17);
          *((_QWORD *)v8 + 19) = 0;
          *((_QWORD *)v8 + 20) = 0;
          *((_QWORD *)v8 + 21) = 0;
        }
        *(_OWORD *)(v8 + 38) = *(_OWORD *)(v10 + 38);
        *((_QWORD *)v8 + 21) = *((_QWORD *)v10 + 21);
        *((_QWORD *)v10 + 19) = 0;
        *((_QWORD *)v10 + 20) = 0;
        *((_QWORD *)v10 + 21) = 0;
        v18 = (void *)*((_QWORD *)v8 + 22);
        if (v18)
        {
          *((_QWORD *)v8 + 23) = v18;
          operator delete(v18);
          *((_QWORD *)v8 + 22) = 0;
          *((_QWORD *)v8 + 23) = 0;
          *((_QWORD *)v8 + 24) = 0;
        }
        *((_OWORD *)v8 + 11) = *((_OWORD *)v10 + 11);
        *((_QWORD *)v8 + 24) = *((_QWORD *)v10 + 24);
        *((_QWORD *)v10 + 22) = 0;
        *((_QWORD *)v10 + 23) = 0;
        *((_QWORD *)v10 + 24) = 0;
        v19 = (void *)*((_QWORD *)v8 + 25);
        if (v19)
        {
          *((_QWORD *)v8 + 26) = v19;
          operator delete(v19);
          *((_QWORD *)v8 + 25) = 0;
          *((_QWORD *)v8 + 26) = 0;
          *((_QWORD *)v8 + 27) = 0;
        }
        *(_OWORD *)(v8 + 50) = *(_OWORD *)(v10 + 50);
        *((_QWORD *)v8 + 27) = *((_QWORD *)v10 + 27);
        *((_QWORD *)v10 + 25) = 0;
        *((_QWORD *)v10 + 26) = 0;
        *((_QWORD *)v10 + 27) = 0;
        *((_BYTE *)v8 + 224) = *((_BYTE *)v10 + 224);
        if (!v6)
          break;
        v6 = (v6 - 1) >> 1;
        v7 = (float *)(a1 + 232 * v6);
        v9 = *v7;
        v8 = v10;
      }
      while (*v7 < v30);
      *v10 = v30;
      v20 = (void *)*((_QWORD *)v10 + 1);
      if (v20)
      {
        *((_QWORD *)v10 + 2) = v20;
        operator delete(v20);
        *((_QWORD *)v10 + 1) = 0;
        *((_QWORD *)v10 + 2) = 0;
        *((_QWORD *)v10 + 3) = 0;
      }
      *(_OWORD *)(v10 + 2) = v31;
      *((_QWORD *)v10 + 3) = v32;
      v31 = 0uLL;
      v32 = 0;
      v21 = (void *)*((_QWORD *)v10 + 4);
      if (v21)
      {
        *((_QWORD *)v10 + 5) = v21;
        operator delete(v21);
        *((_QWORD *)v10 + 4) = 0;
        *((_QWORD *)v10 + 5) = 0;
        *((_QWORD *)v10 + 6) = 0;
      }
      *((_OWORD *)v10 + 2) = v33;
      *((_QWORD *)v10 + 6) = v34;
      v33 = 0uLL;
      v34 = 0;
      v22 = (void *)*((_QWORD *)v10 + 7);
      if (v22)
      {
        *((_QWORD *)v10 + 8) = v22;
        operator delete(v22);
        *((_QWORD *)v10 + 7) = 0;
        *((_QWORD *)v10 + 8) = 0;
        *((_QWORD *)v10 + 9) = 0;
      }
      *(_OWORD *)(v10 + 14) = v35;
      *((_QWORD *)v10 + 9) = v36;
      v35 = 0uLL;
      v36 = 0;
      v23 = (void *)*((_QWORD *)v10 + 10);
      if (v23)
      {
        *((_QWORD *)v10 + 11) = v23;
        operator delete(v23);
        *((_QWORD *)v10 + 10) = 0;
        *((_QWORD *)v10 + 11) = 0;
        *((_QWORD *)v10 + 12) = 0;
      }
      *((_OWORD *)v10 + 5) = v37;
      *((_QWORD *)v10 + 12) = v38;
      v37 = 0uLL;
      v38 = 0;
      v24 = (void *)*((_QWORD *)v10 + 13);
      if (v24)
      {
        *((_QWORD *)v10 + 14) = v24;
        operator delete(v24);
        *((_QWORD *)v10 + 13) = 0;
        *((_QWORD *)v10 + 14) = 0;
        *((_QWORD *)v10 + 15) = 0;
      }
      *(_OWORD *)(v10 + 26) = v39;
      *((_QWORD *)v10 + 15) = v40;
      v39 = 0uLL;
      v40 = 0;
      v25 = (void *)*((_QWORD *)v10 + 16);
      if (v25)
      {
        *((_QWORD *)v10 + 17) = v25;
        operator delete(v25);
        *((_QWORD *)v10 + 16) = 0;
        *((_QWORD *)v10 + 17) = 0;
        *((_QWORD *)v10 + 18) = 0;
      }
      *((_OWORD *)v10 + 8) = v41;
      *((_QWORD *)v10 + 18) = v42;
      v41 = 0uLL;
      v42 = 0;
      v26 = (void *)*((_QWORD *)v10 + 19);
      if (v26)
      {
        *((_QWORD *)v10 + 20) = v26;
        operator delete(v26);
        *((_QWORD *)v10 + 19) = 0;
        *((_QWORD *)v10 + 20) = 0;
        *((_QWORD *)v10 + 21) = 0;
      }
      *(_OWORD *)(v10 + 38) = v43;
      *((_QWORD *)v10 + 21) = v44;
      v43 = 0uLL;
      v44 = 0;
      v27 = (void *)*((_QWORD *)v10 + 22);
      if (v27)
      {
        *((_QWORD *)v10 + 23) = v27;
        operator delete(v27);
        *((_QWORD *)v10 + 22) = 0;
        *((_QWORD *)v10 + 23) = 0;
        *((_QWORD *)v10 + 24) = 0;
      }
      *((_OWORD *)v10 + 11) = v45;
      *((_QWORD *)v10 + 24) = v46;
      v45 = 0uLL;
      v46 = 0;
      v28 = (void *)*((_QWORD *)v10 + 25);
      if (v28)
      {
        *((_QWORD *)v10 + 26) = v28;
        operator delete(v28);
        *((_QWORD *)v10 + 25) = 0;
        *((_QWORD *)v10 + 26) = 0;
        *((_QWORD *)v10 + 27) = 0;
      }
      *(_OWORD *)(v10 + 50) = v47;
      *((_QWORD *)v10 + 27) = v48;
      v47 = 0uLL;
      v48 = 0;
      *((_BYTE *)v10 + 224) = v49;
      nlv4_inference_orchestrator::inference_engine::Trail::~Trail((nlv4_inference_orchestrator::inference_engine::Trail *)&v30);
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::less<nlv4_inference_orchestrator::inference_engine::Trail>,std::__wrap_iter<nlv4_inference_orchestrator::inference_engine::Trail*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  void *v33;
  _QWORD *v34;
  void *v35;
  _QWORD *v36;
  void *v37;
  _QWORD *v38;
  void *v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  _QWORD *v62;
  _QWORD *v63;
  int64_t v64;
  int v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  char v85;

  if (a3 >= 2)
  {
    v3 = 0;
    v4 = *(_DWORD *)a1;
    v68 = 0;
    v67 = 0uLL;
    v67 = *(_OWORD *)(a1 + 8);
    v68 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v70 = 0;
    v69 = 0uLL;
    v69 = *(_OWORD *)(a1 + 32);
    v70 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    v71 = 0uLL;
    v72 = 0;
    v71 = *(_OWORD *)(a1 + 56);
    v72 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    v73 = 0uLL;
    v74 = 0;
    v73 = *(_OWORD *)(a1 + 80);
    v74 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    v75 = 0uLL;
    v76 = 0;
    v75 = *(_OWORD *)(a1 + 104);
    v76 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    v77 = 0uLL;
    v78 = 0;
    v77 = *(_OWORD *)(a1 + 128);
    v78 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v79 = 0uLL;
    v80 = 0;
    v79 = *(_OWORD *)(a1 + 152);
    v80 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    v81 = 0uLL;
    v82 = 0;
    v81 = *(_OWORD *)(a1 + 176);
    v82 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    v83 = 0uLL;
    v84 = 0;
    v83 = *(_OWORD *)(a1 + 200);
    v84 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 200) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    v85 = *(_BYTE *)(a1 + 224);
    v64 = (unint64_t)(a3 - 2) >> 1;
    v5 = a1;
    v66 = v4;
    do
    {
      v6 = v5 + 232 * v3 + 232;
      v7 = 2 * v3;
      v3 = (2 * v3) | 1;
      v8 = v7 + 2;
      if (v8 < a3 && *(float *)v6 < *(float *)(v6 + 232))
      {
        v6 += 232;
        v3 = v8;
      }
      v9 = (_QWORD *)(v6 + 8);
      *(_DWORD *)v5 = *(_DWORD *)v6;
      v10 = *(void **)(v5 + 8);
      if (v10)
      {
        *(_QWORD *)(v5 + 16) = v10;
        operator delete(v10);
        *(_QWORD *)(v5 + 8) = 0;
        *(_QWORD *)(v5 + 16) = 0;
        *(_QWORD *)(v5 + 24) = 0;
      }
      *(_OWORD *)(v5 + 8) = *(_OWORD *)(v6 + 8);
      *(_QWORD *)(v5 + 24) = *(_QWORD *)(v6 + 24);
      *v9 = 0;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)(v6 + 24) = 0;
      v11 = *(void **)(v5 + 32);
      if (v11)
      {
        *(_QWORD *)(v5 + 40) = v11;
        operator delete(v11);
        *(_QWORD *)(v5 + 32) = 0;
        *(_QWORD *)(v5 + 40) = 0;
        *(_QWORD *)(v5 + 48) = 0;
      }
      v12 = (_QWORD *)(v6 + 32);
      *(_OWORD *)(v5 + 32) = *(_OWORD *)(v6 + 32);
      *(_QWORD *)(v5 + 48) = *(_QWORD *)(v6 + 48);
      *(_QWORD *)(v6 + 32) = 0;
      *(_QWORD *)(v6 + 40) = 0;
      *(_QWORD *)(v6 + 48) = 0;
      v13 = *(void **)(v5 + 56);
      if (v13)
      {
        *(_QWORD *)(v5 + 64) = v13;
        operator delete(v13);
        *(_QWORD *)(v5 + 56) = 0;
        *(_QWORD *)(v5 + 64) = 0;
        *(_QWORD *)(v5 + 72) = 0;
      }
      v14 = (_QWORD *)(v6 + 56);
      *(_OWORD *)(v5 + 56) = *(_OWORD *)(v6 + 56);
      *(_QWORD *)(v5 + 72) = *(_QWORD *)(v6 + 72);
      *(_QWORD *)(v6 + 56) = 0;
      *(_QWORD *)(v6 + 64) = 0;
      *(_QWORD *)(v6 + 72) = 0;
      v15 = *(void **)(v5 + 80);
      if (v15)
      {
        *(_QWORD *)(v5 + 88) = v15;
        operator delete(v15);
        *(_QWORD *)(v5 + 80) = 0;
        *(_QWORD *)(v5 + 88) = 0;
        *(_QWORD *)(v5 + 96) = 0;
      }
      v16 = (_QWORD *)(v6 + 80);
      *(_OWORD *)(v5 + 80) = *(_OWORD *)(v6 + 80);
      *(_QWORD *)(v5 + 96) = *(_QWORD *)(v6 + 96);
      *(_QWORD *)(v6 + 80) = 0;
      *(_QWORD *)(v6 + 88) = 0;
      *(_QWORD *)(v6 + 96) = 0;
      v17 = *(void **)(v5 + 104);
      if (v17)
      {
        *(_QWORD *)(v5 + 112) = v17;
        operator delete(v17);
        *(_QWORD *)(v5 + 104) = 0;
        *(_QWORD *)(v5 + 112) = 0;
        *(_QWORD *)(v5 + 120) = 0;
      }
      v18 = (_QWORD *)(v6 + 104);
      *(_OWORD *)(v5 + 104) = *(_OWORD *)(v6 + 104);
      *(_QWORD *)(v5 + 120) = *(_QWORD *)(v6 + 120);
      *(_QWORD *)(v6 + 104) = 0;
      *(_QWORD *)(v6 + 112) = 0;
      *(_QWORD *)(v6 + 120) = 0;
      v19 = *(void **)(v5 + 128);
      if (v19)
      {
        *(_QWORD *)(v5 + 136) = v19;
        operator delete(v19);
        *(_QWORD *)(v5 + 128) = 0;
        *(_QWORD *)(v5 + 136) = 0;
        *(_QWORD *)(v5 + 144) = 0;
      }
      v20 = (_QWORD *)(v6 + 128);
      *(_OWORD *)(v5 + 128) = *(_OWORD *)(v6 + 128);
      *(_QWORD *)(v5 + 144) = *(_QWORD *)(v6 + 144);
      *(_QWORD *)(v6 + 128) = 0;
      *(_QWORD *)(v6 + 136) = 0;
      *(_QWORD *)(v6 + 144) = 0;
      v21 = *(void **)(v5 + 152);
      if (v21)
      {
        *(_QWORD *)(v5 + 160) = v21;
        operator delete(v21);
        *(_QWORD *)(v5 + 152) = 0;
        *(_QWORD *)(v5 + 160) = 0;
        *(_QWORD *)(v5 + 168) = 0;
      }
      *(_OWORD *)(v5 + 152) = *(_OWORD *)(v6 + 152);
      *(_QWORD *)(v5 + 168) = *(_QWORD *)(v6 + 168);
      *(_QWORD *)(v6 + 152) = 0;
      *(_QWORD *)(v6 + 160) = 0;
      v62 = (_QWORD *)(v6 + 152);
      *(_QWORD *)(v6 + 168) = 0;
      v22 = *(void **)(v5 + 176);
      if (v22)
      {
        *(_QWORD *)(v5 + 184) = v22;
        operator delete(v22);
        *(_QWORD *)(v5 + 176) = 0;
        *(_QWORD *)(v5 + 184) = 0;
        *(_QWORD *)(v5 + 192) = 0;
      }
      *(_OWORD *)(v5 + 176) = *(_OWORD *)(v6 + 176);
      *(_QWORD *)(v5 + 192) = *(_QWORD *)(v6 + 192);
      *(_QWORD *)(v6 + 176) = 0;
      *(_QWORD *)(v6 + 184) = 0;
      v63 = (_QWORD *)(v6 + 176);
      *(_QWORD *)(v6 + 192) = 0;
      v23 = *(void **)(v5 + 200);
      if (v23)
      {
        *(_QWORD *)(v5 + 208) = v23;
        operator delete(v23);
        *(_QWORD *)(v5 + 200) = 0;
        *(_QWORD *)(v5 + 208) = 0;
        *(_QWORD *)(v5 + 216) = 0;
      }
      v24 = (_QWORD *)(v6 + 200);
      *(_OWORD *)(v5 + 200) = *(_OWORD *)(v6 + 200);
      *(_QWORD *)(v5 + 216) = *(_QWORD *)(v6 + 216);
      *(_QWORD *)(v6 + 200) = 0;
      *(_QWORD *)(v6 + 208) = 0;
      *(_QWORD *)(v6 + 216) = 0;
      *(_BYTE *)(v5 + 224) = *(_BYTE *)(v6 + 224);
      v5 = v6;
    }
    while (v3 <= v64);
    if (a2 - 232 == v6)
    {
      *(_DWORD *)v6 = v66;
      v51 = *(void **)(v6 + 8);
      if (v51)
      {
        *(_QWORD *)(v6 + 16) = v51;
        operator delete(v51);
        *v9 = 0;
        *(_QWORD *)(v6 + 16) = 0;
        *(_QWORD *)(v6 + 24) = 0;
      }
      *(_OWORD *)(v6 + 8) = v67;
      *(_QWORD *)(v6 + 24) = v68;
      v67 = 0uLL;
      v68 = 0;
      v52 = *(void **)(v6 + 32);
      if (v52)
      {
        *(_QWORD *)(v6 + 40) = v52;
        operator delete(v52);
        *v12 = 0;
        *(_QWORD *)(v6 + 40) = 0;
        *(_QWORD *)(v6 + 48) = 0;
      }
      *(_OWORD *)(v6 + 32) = v69;
      *(_QWORD *)(v6 + 48) = v70;
      v69 = 0uLL;
      v70 = 0;
      v53 = *(void **)(v6 + 56);
      if (v53)
      {
        *(_QWORD *)(v6 + 64) = v53;
        operator delete(v53);
        *v14 = 0;
        *(_QWORD *)(v6 + 64) = 0;
        *(_QWORD *)(v6 + 72) = 0;
      }
      *(_OWORD *)(v6 + 56) = v71;
      *(_QWORD *)(v6 + 72) = v72;
      v71 = 0uLL;
      v72 = 0;
      v54 = *(void **)(v6 + 80);
      if (v54)
      {
        *(_QWORD *)(v6 + 88) = v54;
        operator delete(v54);
        *v16 = 0;
        *(_QWORD *)(v6 + 88) = 0;
        *(_QWORD *)(v6 + 96) = 0;
      }
      *(_OWORD *)(v6 + 80) = v73;
      *(_QWORD *)(v6 + 96) = v74;
      v73 = 0uLL;
      v74 = 0;
      v55 = *(void **)(v6 + 104);
      if (v55)
      {
        *(_QWORD *)(v6 + 112) = v55;
        operator delete(v55);
        *v18 = 0;
        *(_QWORD *)(v6 + 112) = 0;
        *(_QWORD *)(v6 + 120) = 0;
      }
      *(_OWORD *)(v6 + 104) = v75;
      *(_QWORD *)(v6 + 120) = v76;
      v75 = 0uLL;
      v76 = 0;
      v56 = *(void **)(v6 + 128);
      if (v56)
      {
        *(_QWORD *)(v6 + 136) = v56;
        operator delete(v56);
        *v20 = 0;
        *(_QWORD *)(v6 + 136) = 0;
        *(_QWORD *)(v6 + 144) = 0;
      }
      *(_OWORD *)(v6 + 128) = v77;
      *(_QWORD *)(v6 + 144) = v78;
      v77 = 0uLL;
      v78 = 0;
      v57 = *(void **)(v6 + 152);
      if (v57)
      {
        *(_QWORD *)(v6 + 160) = v57;
        operator delete(v57);
        *v62 = 0;
        *(_QWORD *)(v6 + 160) = 0;
        *(_QWORD *)(v6 + 168) = 0;
      }
      *(_OWORD *)(v6 + 152) = v79;
      *(_QWORD *)(v6 + 168) = v80;
      v79 = 0uLL;
      v80 = 0;
      v58 = *(void **)(v6 + 176);
      if (v58)
      {
        *(_QWORD *)(v6 + 184) = v58;
        operator delete(v58);
        *v63 = 0;
        *(_QWORD *)(v6 + 184) = 0;
        *(_QWORD *)(v6 + 192) = 0;
      }
      *(_OWORD *)(v6 + 176) = v81;
      *(_QWORD *)(v6 + 192) = v82;
      v81 = 0uLL;
      v82 = 0;
      v59 = *(void **)(v6 + 200);
      if (v59)
      {
        *(_QWORD *)(v6 + 208) = v59;
        operator delete(v59);
        *v24 = 0;
        *(_QWORD *)(v6 + 208) = 0;
        *(_QWORD *)(v6 + 216) = 0;
      }
      *(_OWORD *)(v6 + 200) = v83;
      *(_QWORD *)(v6 + 216) = v84;
      v83 = 0uLL;
      v84 = 0;
      *(_BYTE *)(v6 + 224) = v85;
    }
    else
    {
      *(_DWORD *)v6 = *(_DWORD *)(a2 - 232);
      v25 = *(void **)(v6 + 8);
      if (v25)
      {
        *(_QWORD *)(v6 + 16) = v25;
        operator delete(v25);
        *v9 = 0;
        *(_QWORD *)(v6 + 16) = 0;
        *(_QWORD *)(v6 + 24) = 0;
      }
      *(_OWORD *)(v6 + 8) = *(_OWORD *)(a2 - 224);
      *(_QWORD *)(v6 + 24) = *(_QWORD *)(a2 - 208);
      *(_QWORD *)(a2 - 224) = 0;
      *(_QWORD *)(a2 - 216) = 0;
      *(_QWORD *)(a2 - 208) = 0;
      v26 = (_QWORD *)(a2 - 200);
      v27 = *(void **)(v6 + 32);
      if (v27)
      {
        *(_QWORD *)(v6 + 40) = v27;
        operator delete(v27);
        *v12 = 0;
        *(_QWORD *)(v6 + 40) = 0;
        *(_QWORD *)(v6 + 48) = 0;
      }
      *(_OWORD *)(v6 + 32) = *(_OWORD *)(a2 - 200);
      *(_QWORD *)(v6 + 48) = *(_QWORD *)(a2 - 184);
      *v26 = 0;
      *(_QWORD *)(a2 - 192) = 0;
      *(_QWORD *)(a2 - 184) = 0;
      v28 = (_QWORD *)(a2 - 176);
      v29 = *(void **)(v6 + 56);
      if (v29)
      {
        *(_QWORD *)(v6 + 64) = v29;
        operator delete(v29);
        *v14 = 0;
        *(_QWORD *)(v6 + 64) = 0;
        *(_QWORD *)(v6 + 72) = 0;
      }
      *(_OWORD *)(v6 + 56) = *(_OWORD *)(a2 - 176);
      *(_QWORD *)(v6 + 72) = *(_QWORD *)(a2 - 160);
      *v28 = 0;
      *(_QWORD *)(a2 - 168) = 0;
      *(_QWORD *)(a2 - 160) = 0;
      v30 = (_QWORD *)(a2 - 152);
      v31 = *(void **)(v6 + 80);
      if (v31)
      {
        *(_QWORD *)(v6 + 88) = v31;
        operator delete(v31);
        *v16 = 0;
        *(_QWORD *)(v6 + 88) = 0;
        *(_QWORD *)(v6 + 96) = 0;
      }
      *(_OWORD *)(v6 + 80) = *(_OWORD *)(a2 - 152);
      *(_QWORD *)(v6 + 96) = *(_QWORD *)(a2 - 136);
      *v30 = 0;
      *(_QWORD *)(a2 - 144) = 0;
      *(_QWORD *)(a2 - 136) = 0;
      v32 = (_QWORD *)(a2 - 128);
      v33 = *(void **)(v6 + 104);
      if (v33)
      {
        *(_QWORD *)(v6 + 112) = v33;
        operator delete(v33);
        *v18 = 0;
        *(_QWORD *)(v6 + 112) = 0;
        *(_QWORD *)(v6 + 120) = 0;
      }
      *(_OWORD *)(v6 + 104) = *(_OWORD *)(a2 - 128);
      *(_QWORD *)(v6 + 120) = *(_QWORD *)(a2 - 112);
      *v32 = 0;
      *(_QWORD *)(a2 - 120) = 0;
      *(_QWORD *)(a2 - 112) = 0;
      v34 = (_QWORD *)(a2 - 104);
      v35 = *(void **)(v6 + 128);
      if (v35)
      {
        *(_QWORD *)(v6 + 136) = v35;
        operator delete(v35);
        *v20 = 0;
        *(_QWORD *)(v6 + 136) = 0;
        *(_QWORD *)(v6 + 144) = 0;
      }
      *(_OWORD *)(v6 + 128) = *(_OWORD *)(a2 - 104);
      *(_QWORD *)(v6 + 144) = *(_QWORD *)(a2 - 88);
      *v34 = 0;
      *(_QWORD *)(a2 - 96) = 0;
      *(_QWORD *)(a2 - 88) = 0;
      v36 = (_QWORD *)(a2 - 80);
      v37 = *(void **)(v6 + 152);
      if (v37)
      {
        *(_QWORD *)(v6 + 160) = v37;
        operator delete(v37);
        *v62 = 0;
        *(_QWORD *)(v6 + 160) = 0;
        *(_QWORD *)(v6 + 168) = 0;
      }
      *(_OWORD *)(v6 + 152) = *(_OWORD *)(a2 - 80);
      *(_QWORD *)(v6 + 168) = *(_QWORD *)(a2 - 64);
      *v36 = 0;
      *(_QWORD *)(a2 - 72) = 0;
      *(_QWORD *)(a2 - 64) = 0;
      v38 = (_QWORD *)(a2 - 56);
      v39 = *(void **)(v6 + 176);
      if (v39)
      {
        *(_QWORD *)(v6 + 184) = v39;
        operator delete(v39);
        *v63 = 0;
        *(_QWORD *)(v6 + 184) = 0;
        *(_QWORD *)(v6 + 192) = 0;
      }
      *(_OWORD *)(v6 + 176) = *(_OWORD *)(a2 - 56);
      *(_QWORD *)(v6 + 192) = *(_QWORD *)(a2 - 40);
      *v38 = 0;
      *(_QWORD *)(a2 - 48) = 0;
      *(_QWORD *)(a2 - 40) = 0;
      v40 = (_QWORD *)(a2 - 32);
      v41 = *(void **)(v6 + 200);
      if (v41)
      {
        *(_QWORD *)(v6 + 208) = v41;
        operator delete(v41);
        *v24 = 0;
        *(_QWORD *)(v6 + 208) = 0;
        *(_QWORD *)(v6 + 216) = 0;
      }
      *(_OWORD *)(v6 + 200) = *(_OWORD *)(a2 - 32);
      *(_QWORD *)(v6 + 216) = *(_QWORD *)(a2 - 16);
      *v40 = 0;
      *(_QWORD *)(a2 - 24) = 0;
      *(_QWORD *)(a2 - 16) = 0;
      *(_BYTE *)(v6 + 224) = *(_BYTE *)(a2 - 8);
      *(_DWORD *)(a2 - 232) = v66;
      v42 = *(void **)(a2 - 224);
      if (v42)
      {
        *(_QWORD *)(a2 - 216) = v42;
        operator delete(v42);
        *(_QWORD *)(a2 - 224) = 0;
        *(_QWORD *)(a2 - 216) = 0;
        *(_QWORD *)(a2 - 208) = 0;
      }
      *(_OWORD *)(a2 - 224) = v67;
      *(_QWORD *)(a2 - 208) = v68;
      v67 = 0uLL;
      v68 = 0;
      v43 = *(void **)(a2 - 200);
      if (v43)
      {
        *(_QWORD *)(a2 - 192) = v43;
        operator delete(v43);
        *v26 = 0;
        *(_QWORD *)(a2 - 192) = 0;
        *(_QWORD *)(a2 - 184) = 0;
      }
      *(_OWORD *)(a2 - 200) = v69;
      *(_QWORD *)(a2 - 184) = v70;
      v69 = 0uLL;
      v70 = 0;
      v44 = *(void **)(a2 - 176);
      if (v44)
      {
        *(_QWORD *)(a2 - 168) = v44;
        operator delete(v44);
        *v28 = 0;
        *(_QWORD *)(a2 - 168) = 0;
        *(_QWORD *)(a2 - 160) = 0;
      }
      *(_OWORD *)(a2 - 176) = v71;
      *(_QWORD *)(a2 - 160) = v72;
      v71 = 0uLL;
      v72 = 0;
      v45 = *(void **)(a2 - 152);
      if (v45)
      {
        *(_QWORD *)(a2 - 144) = v45;
        operator delete(v45);
        *v30 = 0;
        *(_QWORD *)(a2 - 144) = 0;
        *(_QWORD *)(a2 - 136) = 0;
      }
      *(_OWORD *)(a2 - 152) = v73;
      *(_QWORD *)(a2 - 136) = v74;
      v73 = 0uLL;
      v74 = 0;
      v46 = *(void **)(a2 - 128);
      if (v46)
      {
        *(_QWORD *)(a2 - 120) = v46;
        operator delete(v46);
        *v32 = 0;
        *(_QWORD *)(a2 - 120) = 0;
        *(_QWORD *)(a2 - 112) = 0;
      }
      *(_OWORD *)(a2 - 128) = v75;
      *(_QWORD *)(a2 - 112) = v76;
      v75 = 0uLL;
      v76 = 0;
      v47 = *(void **)(a2 - 104);
      if (v47)
      {
        *(_QWORD *)(a2 - 96) = v47;
        operator delete(v47);
        *v34 = 0;
        *(_QWORD *)(a2 - 96) = 0;
        *(_QWORD *)(a2 - 88) = 0;
      }
      *(_OWORD *)(a2 - 104) = v77;
      *(_QWORD *)(a2 - 88) = v78;
      v77 = 0uLL;
      v78 = 0;
      v48 = *(void **)(a2 - 80);
      if (v48)
      {
        *(_QWORD *)(a2 - 72) = v48;
        operator delete(v48);
        *v36 = 0;
        *(_QWORD *)(a2 - 72) = 0;
        *(_QWORD *)(a2 - 64) = 0;
      }
      *(_OWORD *)(a2 - 80) = v79;
      *(_QWORD *)(a2 - 64) = v80;
      v79 = 0uLL;
      v80 = 0;
      v49 = *(void **)(a2 - 56);
      if (v49)
      {
        *(_QWORD *)(a2 - 48) = v49;
        operator delete(v49);
        *v38 = 0;
        *(_QWORD *)(a2 - 48) = 0;
        *(_QWORD *)(a2 - 40) = 0;
      }
      *(_OWORD *)(a2 - 56) = v81;
      *(_QWORD *)(a2 - 40) = v82;
      v81 = 0uLL;
      v82 = 0;
      v50 = *(void **)(a2 - 32);
      if (v50)
      {
        *(_QWORD *)(a2 - 24) = v50;
        operator delete(v50);
        *v40 = 0;
        *(_QWORD *)(a2 - 24) = 0;
        *(_QWORD *)(a2 - 16) = 0;
      }
      *(_OWORD *)(a2 - 32) = v83;
      *(_QWORD *)(a2 - 16) = v84;
      v83 = 0uLL;
      v84 = 0;
      *(_BYTE *)(a2 - 8) = v85;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<nlv4_inference_orchestrator::inference_engine::Trail> &,std::__wrap_iter<nlv4_inference_orchestrator::inference_engine::Trail*>>(a1, v6 + 232, 0x34F72C234F72C235 * ((v6 + 232 - a1) >> 3));
    }
    nlv4_inference_orchestrator::inference_engine::Trail::~Trail((nlv4_inference_orchestrator::inference_engine::Trail *)&v66);
  }
}

void std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        nlv4_inference_orchestrator::inference_engine::Trail::~Trail((nlv4_inference_orchestrator::inference_engine::Trail *)(v4 - 232));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::pair<float,std::vector<unsigned long>>>::__assign_with_size[abi:ne180100]<std::pair<float,std::vector<unsigned long>> const*,std::pair<float,std::vector<unsigned long>> const*>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType::~TransformerEncoderModuleInputType(nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = (void *)*((_QWORD *)this + 27);
  if (v2)
  {
    *((_QWORD *)this + 28) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 24);
  if (v3)
  {
    *((_QWORD *)this + 25) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 21);
  if (v4)
  {
    *((_QWORD *)this + 22) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 18);
  if (v5)
  {
    *((_QWORD *)this + 19) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 15);
  if (v6)
  {
    *((_QWORD *)this + 16) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 12);
  if (v7)
  {
    *((_QWORD *)this + 13) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 9);
  if (v8)
  {
    *((_QWORD *)this + 10) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 6);
  if (v9)
  {
    *((_QWORD *)this + 7) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 3);
  if (v10)
  {
    *((_QWORD *)this + 4) = v10;
    operator delete(v10);
  }
  v11 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v11;
    operator delete(v11);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(unint64_t a1)
{
  if (a1 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a1);
}

uint64_t *std::vector<std::pair<float,std::vector<unsigned long>>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_DWORD *)(v6 - 32) = *(_DWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 16) = 0;
      *(_QWORD *)(v6 - 8) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<float,std::vector<unsigned long>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 32;
    v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::pair<float,std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<float,std::vector<unsigned long>>>::__assign_with_size[abi:ne180100]<std::pair<float,std::vector<unsigned long>> const*,std::pair<float,std::vector<unsigned long>> const*>((uint64_t *)v2);
    operator delete(**a1);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<float,std::vector<unsigned long>>>,std::pair<float,std::vector<unsigned long>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(_QWORD *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 32;
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::inference_engine::Trail>>(unint64_t a1)
{
  if (a1 >= 0x11A7B9611A7B962)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(232 * a1);
}

uint64_t *std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      v8 = *(_DWORD *)(v2 + v5 - 232);
      *(_QWORD *)(v6 - 216) = 0;
      *(_QWORD *)(v6 - 208) = 0;
      *(_QWORD *)(v6 - 224) = 0;
      *(_OWORD *)(v6 - 224) = *(_OWORD *)(v2 + v5 - 224);
      *(_DWORD *)(v6 - 232) = v8;
      *(_QWORD *)(v6 - 208) = *(_QWORD *)(v2 + v5 - 208);
      *(_QWORD *)(v7 - 224) = 0;
      *(_QWORD *)(v7 - 216) = 0;
      *(_QWORD *)(v7 - 208) = 0;
      *(_QWORD *)(v6 - 200) = 0;
      *(_QWORD *)(v6 - 192) = 0;
      *(_QWORD *)(v6 - 184) = 0;
      *(_OWORD *)(v6 - 200) = *(_OWORD *)(v2 + v5 - 200);
      *(_QWORD *)(v6 - 184) = *(_QWORD *)(v2 + v5 - 184);
      *(_QWORD *)(v7 - 200) = 0;
      *(_QWORD *)(v7 - 192) = 0;
      *(_QWORD *)(v7 - 184) = 0;
      *(_QWORD *)(v6 - 176) = 0;
      *(_QWORD *)(v6 - 168) = 0;
      *(_QWORD *)(v6 - 160) = 0;
      *(_OWORD *)(v6 - 176) = *(_OWORD *)(v2 + v5 - 176);
      *(_QWORD *)(v6 - 160) = *(_QWORD *)(v2 + v5 - 160);
      *(_QWORD *)(v7 - 176) = 0;
      *(_QWORD *)(v7 - 168) = 0;
      *(_QWORD *)(v7 - 160) = 0;
      *(_QWORD *)(v6 - 152) = 0;
      *(_QWORD *)(v6 - 144) = 0;
      *(_QWORD *)(v6 - 136) = 0;
      *(_OWORD *)(v6 - 152) = *(_OWORD *)(v2 + v5 - 152);
      *(_QWORD *)(v6 - 136) = *(_QWORD *)(v2 + v5 - 136);
      *(_QWORD *)(v7 - 152) = 0;
      *(_QWORD *)(v7 - 144) = 0;
      *(_QWORD *)(v7 - 136) = 0;
      *(_QWORD *)(v6 - 128) = 0;
      *(_QWORD *)(v6 - 120) = 0;
      *(_QWORD *)(v6 - 112) = 0;
      *(_OWORD *)(v6 - 128) = *(_OWORD *)(v2 + v5 - 128);
      *(_QWORD *)(v6 - 112) = *(_QWORD *)(v2 + v5 - 112);
      *(_QWORD *)(v7 - 128) = 0;
      *(_QWORD *)(v7 - 120) = 0;
      *(_QWORD *)(v7 - 112) = 0;
      *(_QWORD *)(v6 - 104) = 0;
      *(_QWORD *)(v6 - 96) = 0;
      *(_QWORD *)(v6 - 88) = 0;
      *(_OWORD *)(v6 - 104) = *(_OWORD *)(v2 + v5 - 104);
      *(_QWORD *)(v6 - 88) = *(_QWORD *)(v2 + v5 - 88);
      *(_QWORD *)(v7 - 104) = 0;
      *(_QWORD *)(v7 - 96) = 0;
      *(_QWORD *)(v7 - 88) = 0;
      *(_QWORD *)(v6 - 80) = 0;
      *(_QWORD *)(v6 - 72) = 0;
      *(_QWORD *)(v6 - 64) = 0;
      *(_OWORD *)(v6 - 80) = *(_OWORD *)(v2 + v5 - 80);
      *(_QWORD *)(v6 - 64) = *(_QWORD *)(v2 + v5 - 64);
      *(_QWORD *)(v7 - 80) = 0;
      *(_QWORD *)(v7 - 72) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_QWORD *)(v6 - 56) = 0;
      *(_QWORD *)(v6 - 48) = 0;
      *(_QWORD *)(v6 - 40) = 0;
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(v2 + v5 - 56);
      *(_QWORD *)(v6 - 40) = *(_QWORD *)(v2 + v5 - 40);
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v6 - 32) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_QWORD *)(v6 - 16) = 0;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 16) = *(_QWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_BYTE *)(v6 - 8) = *(_BYTE *)(v2 + v5 - 8);
      v5 -= 232;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v9 = *result;
  *result = v4;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<nlv4_inference_orchestrator::inference_engine::Trail>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 232;
    nlv4_inference_orchestrator::inference_engine::Trail::~Trail((nlv4_inference_orchestrator::inference_engine::Trail *)(i - 232));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void snlp::ssu::encoder::SSUEncoderFactoryLazy::~SSUEncoderFactoryLazy(snlp::ssu::encoder::SSUEncoderFactoryLazy *this)
{
  *(_QWORD *)this = off_1E7BE9B38;
  std::mutex::~mutex((std::mutex *)((char *)this + 48));
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  *(_QWORD *)this = off_1E7BE9B38;
  std::mutex::~mutex((std::mutex *)((char *)this + 48));
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1C3BB9B44);
}

void snlp::ssu::encoder::SSUEncoderFactoryLazy::getEncoder(snlp::ssu::encoder::SSUEncoderFactoryLazy *this@<X0>, _QWORD *a2@<X8>)
{
  std::mutex *v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD *v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = (std::mutex *)((char *)this + 48);
  std::mutex::lock((std::mutex *)((char *)this + 48));
  v5 = *((_QWORD *)this + 4);
  if (!v5)
  {
    v6 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v7 = (_QWORD *)((char *)this + 8);
      if (*((char *)this + 31) < 0)
        v7 = (_QWORD *)*v7;
      LODWORD(v18) = 136315138;
      *(_QWORD *)((char *)&v18 + 4) = v7;
      _os_log_impl(&dword_1C2196000, v6, OS_LOG_TYPE_DEBUG, "[SSUEncoderFactoryLazy] Loading model from: %s", (uint8_t *)&v18, 0xCu);
    }
    snlp::ssu::encoder::buildEncoder((snlp::ssu::encoder::SSUEncoderFactoryLazy *)((char *)this + 8), &v18);
    v8 = v18;
    v18 = 0uLL;
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    *((_OWORD *)this + 2) = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
    if (*((_QWORD *)&v18 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v5 = *((_QWORD *)this + 4);
  }
  v15 = *((_QWORD *)this + 5);
  *a2 = v5;
  a2[1] = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  std::mutex::unlock(v4);
}

void sub_1C221FE30(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *snlp::ssu::encoder::buildEncoder@<X0>(snlp::ssu::encoder *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  snlp::ssu::encoder::SSUEncoder::buildFromAssetsDirectory((char *)this, 0, 0, &v6);
  v4 = v6;
  *a2 = v6;
  if (v4)
  {
    result = (_QWORD *)operator new();
    *result = &off_1E7BECD08;
    result[1] = 0;
    result[2] = 0;
    result[3] = v4;
  }
  else
  {
    result = 0;
  }
  a2[1] = result;
  return result;
}

void sub_1C221FEB8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::default_delete<snlp::ssu::encoder::SSUEncoder>::operator()[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::default_delete<snlp::ssu::encoder::SSUEncoder>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = result[1];
    v1[1] = 0;
    if (v2)
      std::default_delete<snlp::ssu::espresso::SSUNessieModel const>::operator()[abi:ne180100](v2);
    std::unique_ptr<snlp::ssu::encoder::SSUPreprocessor const>::reset[abi:ne180100](v1);
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

void std::default_delete<snlp::ssu::espresso::SSUNessieModel const>::operator()[abi:ne180100](uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 528));
  std::mutex::~mutex((std::mutex *)(a1 + 464));
  if (*(char *)(a1 + 455) < 0)
    operator delete(*(void **)(a1 + 432));
  if (*(char *)(a1 + 431) < 0)
    operator delete(*(void **)(a1 + 408));
  if (*(char *)(a1 + 407) < 0)
    operator delete(*(void **)(a1 + 384));
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::~EspressoE5MLModule((snlp::common::espresso_inference::e5ml::EspressoE5MLModule *)(a1 + 32));
  JUMPOUT(0x1C3BB9B44);
}

uint64_t *std::unique_ptr<snlp::ssu::encoder::SSUPreprocessor const>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    std::unique_ptr<nl_sentencepiece::SentencepieceModel const>::reset[abi:ne180100]((_QWORD **)(v1 + 8));
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

_QWORD **std::unique_ptr<nl_sentencepiece::SentencepieceModel const>::reset[abi:ne180100](_QWORD **result)
{
  _QWORD *v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    if (*v1)
      (*(void (**)(_QWORD))(*(_QWORD *)*v1 + 8))(*v1);
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

void std::__shared_ptr_pointer<snlp::ssu::encoder::SSUEncoder  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t *std::__shared_ptr_pointer<snlp::ssu::encoder::SSUEncoder  *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<snlp::ssu::encoder::SSUEncoder>::operator()[abi:ne180100](*(uint64_t **)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<snlp::ssu::encoder::SSUEncoder  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void snlp::ssu::encoder::SSUEncoderFactoryPreemptive::~SSUEncoderFactoryPreemptive(snlp::ssu::encoder::SSUEncoderFactoryPreemptive *this)
{
  *(_QWORD *)this = &off_1E7BE9B60;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E7BE9B60;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t snlp::ssu::encoder::SSUEncoderFactoryPreemptive::getEncoder@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 16);
  *a2 = *(_QWORD *)(this + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

snlp::ssu::encoder::SSUEncoderFactoryLazy *snlp::ssu::encoder::SSUEncoderFactoryLazy::SSUEncoderFactoryLazy(snlp::ssu::encoder::SSUEncoderFactoryLazy *this, const std::__fs::filesystem::path *a2)
{
  std::string *v3;
  __int128 v4;

  *(_QWORD *)this = off_1E7BE9B38;
  v3 = (std::string *)((char *)this + 8);
  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v3, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    v4 = *(_OWORD *)&a2->__pn_.__r_.__value_.__l.__data_;
    v3->__r_.__value_.__r.__words[2] = a2->__pn_.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 850045863;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 13) = 0;
  return this;
}

snlp::ssu::encoder::SSUEncoderFactoryPreemptive *snlp::ssu::encoder::SSUEncoderFactoryPreemptive::SSUEncoderFactoryPreemptive(snlp::ssu::encoder::SSUEncoderFactoryPreemptive *this, std::__fs::filesystem::path *a2)
{
  *(_QWORD *)this = &off_1E7BE9B60;
  snlp::ssu::encoder::buildEncoder((snlp::ssu::encoder *)a2, (_QWORD *)this + 1);
  return this;
}

{
  *(_QWORD *)this = &off_1E7BE9B60;
  snlp::ssu::encoder::buildEncoder((snlp::ssu::encoder *)a2, (_QWORD *)this + 1);
  return this;
}

void nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::internal::runGenericSystemPromptedContentHack(_QWORD **a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v10;
  __int128 v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  void *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  int64x2_t v43;
  void *v44;
  uint64_t v45[2];
  void **v46;
  void **v47;
  void *v48[2];
  char v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  std::string *v57;
  std::string *v58;
  std::string *v59;
  __int128 v60;
  __int128 v61;
  void *v62[2];
  uint64_t v63;
  std::string v64;
  void *v65;
  char v66;
  __int128 v67;
  _BYTE v68[32];
  unint64_t v69;
  uint64_t v70;
  uint64_t UnicodeScalarAndUtf8Offsets;
  std::string v72;
  void *v73;
  _QWORD *v74;
  char v75;
  void *v76;
  char v77;
  uint64_t v78;
  std::string v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  std::string *v87;
  std::string *v88;
  std::string *v89;
  __int128 v90;
  __int128 v91;
  std::string v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  void *__p;
  char v97;
  uint64_t v98;
  uint64_t v99;
  std::string *v100;
  std::string *v101;
  std::string *v102;
  __int128 v103;
  __int128 v104;
  std::string v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  std::string *v113;
  std::string *v114;
  std::string *v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)**a1;
  if (v4
    && (v5 = v4[3]) != 0
    && (v6 = *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 24) != v6)
    && (v7 = (__int128 *)v4[2]) != 0
    && v4[1])
  {
    v10 = *(int *)(*(_QWORD *)(v6 - 8) + 76);
    v62[1] = 0;
    v63 = 0;
    v62[0] = 0;
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v11 = *v7;
      v64.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v11;
    }
    std::string::basic_string[abi:ne180100]<0>(&v65, *a2);
    memset(v68, 0, sizeof(v68));
    v67 = 0u;
    v69 = v10;
    v70 = 0;
    UnicodeScalarAndUtf8Offsets = snlp::common::utilities::getUnicodeScalarAndUtf8Offsets(*(uint64_t **)(**a1 + 16), v10);
    std::string::basic_string[abi:ne180100]<0>(v48, a2[1]);
    v50 = 0;
    v51 = 0;
    v52 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v53, "target");
    v55 = 0;
    v56 = 0;
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v105, (const nlv4_inference_orchestrator::trees::TreeNode *)v62);
    v57 = 0;
    v58 = 0;
    v59 = 0;
    v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
    v92.__r_.__value_.__s.__data_[8] = 0;
    v57 = (std::string *)operator new(0x90uLL);
    v58 = v57;
    v59 = v57 + 6;
    v58 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>((uint64_t)&v59, (nlv4_inference_orchestrator::trees::TreeNode *)&v105, (nlv4_inference_orchestrator::trees::TreeNode *)&v118, v57);
    v60 = 0u;
    v61 = 0u;
    v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
    if (v110 < 0)
      operator delete(v109);
    if (SHIBYTE(v108) < 0)
      operator delete(v106);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v105, a2[2]);
    v106 = 0;
    v107 = 0;
    v108 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v109, "task");
    v111 = 0;
    v112 = 0;
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v92, (const nlv4_inference_orchestrator::trees::TreeNode *)v48);
    v113 = 0;
    v114 = 0;
    v115 = 0;
    v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
    v79.__r_.__value_.__s.__data_[8] = 0;
    v113 = (std::string *)operator new(0x90uLL);
    v114 = v113;
    v115 = v113 + 6;
    v114 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>((uint64_t)&v115, (nlv4_inference_orchestrator::trees::TreeNode *)&v92, (nlv4_inference_orchestrator::trees::TreeNode *)&v105, v113);
    v116 = 0u;
    v117 = 0u;
    v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v100;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
    if (v97 < 0)
      operator delete(__p);
    if (SHIBYTE(v95) < 0)
      operator delete(v93);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v92, "UserStatedTask");
    v94 = 0;
    v93 = 0;
    v95 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "ROOT");
    v99 = 0;
    v98 = 0;
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v79, (const nlv4_inference_orchestrator::trees::TreeNode *)&v105);
    v101 = 0;
    v100 = 0;
    v102 = 0;
    v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v100;
    v72.__r_.__value_.__s.__data_[8] = 0;
    v100 = (std::string *)operator new(0x90uLL);
    v101 = v100;
    v102 = v100 + 6;
    v101 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>((uint64_t)&v102, (nlv4_inference_orchestrator::trees::TreeNode *)&v79, (nlv4_inference_orchestrator::trees::TreeNode *)&v92, v100);
    v103 = 0u;
    v104 = 0u;
    v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
    if (v84 < 0)
      operator delete(v83);
    if (SHIBYTE(v82) < 0)
      operator delete(v80);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v79, "ROOT");
    v81 = 0;
    v80 = 0;
    v82 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v83, "");
    v86 = 0;
    v85 = 0;
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v72, (const nlv4_inference_orchestrator::trees::TreeNode *)&v92);
    v88 = 0;
    v87 = 0;
    v89 = 0;
    LOBYTE(v47) = 0;
    v87 = (std::string *)operator new(0x90uLL);
    v88 = v87;
    v89 = v87 + 6;
    v88 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>((uint64_t)&v89, (nlv4_inference_orchestrator::trees::TreeNode *)&v72, (nlv4_inference_orchestrator::trees::TreeNode *)&v79, v87);
    v90 = 0u;
    v91 = 0u;
    v46 = (void **)&v78;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v46);
    if (v77 < 0)
      operator delete(v76);
    if (v75 < 0)
      operator delete(v73);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v72.__r_.__value_.__l.__data_);
    v12 = a1[2];
    v13 = (std::__shared_weak_count *)v12[1];
    v45[0] = *v12;
    v45[1] = (uint64_t)v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    nlv4_inference_orchestrator::trees::buildUserDialogActs((sirinluexternal::UserAccepted ****)&v46, (unsigned __int8 *)&v79, v45, a1[1]);
    if (v13)
    {
      v16 = (unint64_t *)&v13->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v18 = (_QWORD *)operator new();
    sirinluinternalnlv4_parser::NLv4ParserResponse::NLv4ParserResponse((sirinluinternalnlv4_parser::NLv4ParserResponse *)v18);
    if (v46 != v47 && *v46)
    {
      v19 = operator new();
      v20 = sirinluexternal::UserParse::UserParse((sirinluexternal::UserParse *)v19);
      PB::PtrVector<sirinluexternal::UserDialogAct>::emplace_back<sirinluexternal::UserDialogAct const&>((uint64_t **)(v20 + 64), (uint64_t)*v46);
      v21 = operator new();
      sirinluexternal::UUID::UUID((sirinluexternal::UUID *)v21);
      LODWORD(v72.__r_.__value_.__l.__data_) = 0;
      boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v72);
      v22 = boost::uuids::random_generator_pure::operator()((int *)&v72);
      v24 = v23;
      boost::uuids::detail::random_provider_base::destroy(LODWORD(v72.__r_.__value_.__l.__data_));
      *(_BYTE *)(v21 + 28) |= 3u;
      *(_QWORD *)(v21 + 8) = v24;
      *(_QWORD *)(v21 + 16) = v22;
      v25 = *(_QWORD *)(v19 + 24);
      *(_QWORD *)(v19 + 24) = v21;
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      *(_BYTE *)(v19 + 88) |= 2u;
      *(_QWORD *)(v19 + 48) = 0x3FF0000000000000;
      sirinluexternal::UserParse::makeParser((sirinluexternal::UserParse *)v19);
      v26 = *(_QWORD *)(v19 + 32);
      *(_BYTE *)(v26 + 16) |= 2u;
      *(_DWORD *)(v26 + 12) = 3;
      v27 = *(_QWORD *)(v19 + 32);
      *(_BYTE *)(v27 + 16) |= 1u;
      *(_DWORD *)(v27 + 8) = 1;
      v28 = operator new();
      MEMORY[0x1C3BB8458](v28, v19);
      v29 = v18[3];
      v30 = (uint64_t *)v18[2];
      if ((unint64_t)v30 >= v29)
      {
        v32 = v18[1];
        v33 = ((uint64_t)v30 - v32) >> 3;
        if ((unint64_t)(v33 + 1) >> 61)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v34 = v29 - v32;
        v35 = v34 >> 2;
        if (v34 >> 2 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v74 = v18 + 3;
        if (v36)
          v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v36);
        else
          v37 = 0;
        v38 = (uint64_t *)(v36 + 8 * v33);
        v39 = (void *)(v36 + 8 * v37);
        v73 = v39;
        *v38 = v28;
        v31 = v38 + 1;
        v72.__r_.__value_.__r.__words[2] = (std::string::size_type)(v38 + 1);
        v41 = (_QWORD *)v18[1];
        v40 = (_QWORD *)v18[2];
        if (v40 == v41)
        {
          v43 = vdupq_n_s64((unint64_t)v40);
        }
        else
        {
          do
          {
            v42 = *--v40;
            *v40 = 0;
            *--v38 = v42;
          }
          while (v40 != v41);
          v43 = *(int64x2_t *)(v18 + 1);
          v31 = (_QWORD *)v72.__r_.__value_.__r.__words[2];
          v39 = v73;
        }
        v18[1] = v38;
        v18[2] = v31;
        *(int64x2_t *)&v72.__r_.__value_.__r.__words[1] = v43;
        v44 = (void *)v18[3];
        v18[3] = v39;
        v73 = v44;
        v72.__r_.__value_.__r.__words[0] = v43.i64[0];
        std::__split_buffer<std::unique_ptr<sirinluexternal::UserParse>>::~__split_buffer((uint64_t)&v72);
      }
      else
      {
        *v30 = v28;
        v31 = v30 + 1;
      }
      v18[2] = v31;
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    }
    *(_QWORD *)a3 = v18;
    *(_BYTE *)(a3 + 8) = 1;
    v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
    std::vector<std::unique_ptr<sirinluexternal::UserDialogAct const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
    v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
    if (v84 < 0)
      operator delete(v83);
    if (SHIBYTE(v82) < 0)
      operator delete(v80);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v100;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
    if (v97 < 0)
      operator delete(__p);
    if (SHIBYTE(v95) < 0)
      operator delete(v93);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
    v92.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
    if (v110 < 0)
      operator delete(v109);
    if (SHIBYTE(v108) < 0)
      operator delete(v106);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
    if (v54 < 0)
      operator delete(v53);
    if (SHIBYTE(v52) < 0)
      operator delete(v50);
    if (v49 < 0)
      operator delete(v48[0]);
    v48[0] = v68;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)v48);
    if (v66 < 0)
      operator delete(v65);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    if (SHIBYTE(v63) < 0)
      operator delete(v62[0]);
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 0;
  }
}

void sub_1C2220AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,boost::uuids::detail::random_provider_base *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a71;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  a52 = (uint64_t)&a13;
  std::vector<std::unique_ptr<sirinluexternal::UserDialogAct const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a52);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a71);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode((void **)&STACK[0x280]);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode((void **)(v74 - 240));
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a16);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&__p);
  _Unwind_Resume(a1);
}

std::string *nlv4_inference_orchestrator::trees::TreeNode::TreeNode(std::string *this, const nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  v7 = *(_OWORD *)((char *)a2 + 72);
  this[3].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[4].__r_.__value_.__l.__size_ = 0;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*>((std::string *)((char *)this + 88), *((__int128 **)a2 + 11), *((__int128 **)a2 + 12), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 4));
  v8 = *((_OWORD *)a2 + 8);
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = *((_OWORD *)a2 + 7);
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = v8;
  return this;
}

void sub_1C2220E4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>(uint64_t a1, nlv4_inference_orchestrator::trees::TreeNode *a2, nlv4_inference_orchestrator::trees::TreeNode *a3, std::string *this)
{
  std::string *v4;
  const nlv4_inference_orchestrator::trees::TreeNode *v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(v4, v6);
      v6 = (const nlv4_inference_orchestrator::trees::TreeNode *)((char *)v6 + 144);
      v4 = v11 + 6;
      v11 += 6;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1C2220F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(void **this)
{
  void **v2;

  v2 = this + 11;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void nlv4_inference_orchestrator::trees::buildUserDialogActs(sirinluexternal::UserAccepted ****a1, unsigned __int8 *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unsigned __int8 v11;
  void **v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  void **v26;
  uint64_t v27;
  NSObject *v28;
  sirinluexternal::UserAccepted **v29;
  unint64_t v30;
  sirinluexternal::UserAccepted ***v31;
  sirinluexternal::UserAccepted ***v32;
  sirinluexternal::UserAccepted ***v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  const nlv4_inference_orchestrator::trees::TreeNode *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  std::string::size_type v51;
  sirinluexternal::UserAccepted ***v54;
  sirinluexternal::UserAccepted **v55;
  int64x2_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  sirinluexternal::UserAccepted *v71;
  sirinluexternal::UserAccepted *v74;
  uint64_t v78;
  uint64_t v79;
  int v80;
  void **v83;
  sirinluexternal::UserAccepted **v84;
  sirinluexternal::UserAccepted *v85;
  void **v86;
  uint64_t v87;
  NSObject *v88;
  std::string::size_type v89;
  void **v90;
  void **v91;
  uint64_t v92;
  uint64_t v93;
  sirinluexternal::UserAccepted *v94;
  void **v95;
  uint64_t v96;
  std::runtime_error *exception;
  uint64_t *v98;
  std::__shared_weak_count *v99;
  void *__p[2];
  unsigned __int8 v101;
  uint64_t v102[2];
  uint8_t buf[296];
  uint64_t v104;
  uint64_t v105;
  int v106;
  void *v107[2];
  unsigned __int8 v108;
  void **v109;
  std::string v110;
  void *v111;
  char v112;
  void *v113;
  char v114;
  _QWORD v115[9];

  v115[7] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "ROOT");
  v8 = a2[23];
  if ((v8 & 0x80u) == 0)
    v9 = (void *)a2[23];
  else
    v9 = (void *)*((_QWORD *)a2 + 1);
  v10 = v101;
  v11 = v101;
  if ((v101 & 0x80u) != 0)
    v10 = (unint64_t)__p[1];
  if (v9 != (void *)v10)
    goto LABEL_23;
  if ((v101 & 0x80u) == 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if ((v8 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v12, *((_QWORD *)a2 + 1)))
      goto LABEL_23;
  }
  else if (a2[23])
  {
    v13 = a2;
    while (*v13 == *(unsigned __int8 *)v12)
    {
      ++v13;
      v12 = (void **)((char *)v12 + 1);
      if (!--v8)
        goto LABEL_17;
    }
LABEL_23:
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    goto LABEL_24;
  }
LABEL_17:
  v14 = a2[71];
  if ((v14 & 0x80u) != 0)
    v14 = *((_QWORD *)a2 + 7);
  if (v14)
    goto LABEL_23;
  v15 = a2[47];
  if ((v15 & 0x80u) != 0)
    v15 = *((_QWORD *)a2 + 4);
  if (v15)
    goto LABEL_23;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v16 = *((_QWORD *)a2 + 11);
  v17 = *((_QWORD *)a2 + 12);
  if (v16 == v17)
    goto LABEL_24;
  v98 = a4;
  v18 = "ROOT";
  do
  {
    v19 = *a3;
    v20 = (std::__shared_weak_count *)a3[1];
    v99 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v107, v18);
    v23 = *(unsigned __int8 *)(v16 + 71);
    if ((v23 & 0x80u) == 0)
      v24 = (void *)*(unsigned __int8 *)(v16 + 71);
    else
      v24 = *(void **)(v16 + 56);
    v25 = v108;
    if ((v108 & 0x80u) != 0)
      v25 = (unint64_t)v107[1];
    if (v24 != (void *)v25)
      goto LABEL_48;
    if ((v108 & 0x80u) == 0)
      v26 = v107;
    else
      v26 = (void **)v107[0];
    if ((v23 & 0x80) != 0)
    {
      if (memcmp(*(const void **)(v16 + 48), v26, *(_QWORD *)(v16 + 56)))
        goto LABEL_48;
LABEL_64:
      if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v16 + 96) - *(_QWORD *)(v16 + 88)) >> 4) >= 2)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "User dialog act node has multiple children.");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v105 = 1;
      v106 = 0;
      v41 = operator new();
      MEMORY[0x1C3BB9154](v41, &v105);
      v104 = v41;
      nlv4_inference_orchestrator::trees::UsoGraphBuilder::UsoGraphBuilder((nlv4_inference_orchestrator::trees::UsoGraphBuilder *)buf);
      v42 = *(const nlv4_inference_orchestrator::trees::TreeNode **)(v16 + 88);
      if (*(_QWORD *)(v16 + 96) - (_QWORD)v42 == 144)
      {
        nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v110, v42);
        v102[0] = v19;
        v102[1] = (uint64_t)v20;
        if (v20)
        {
          v43 = (unint64_t *)&v20->__shared_owners_;
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
        }
        nlv4_inference_orchestrator::trees::UsoGraphBuilder::buildUsoGraphFromTreeNode((uint64_t)buf, (const nlv4_inference_orchestrator::trees::TreeNode *)&v110, v102, v98, (uint64_t *)&v109);
        v45 = v109;
        v109 = 0;
        v46 = v104;
        v104 = (uint64_t)v45;
        if (v46)
        {
          v47 = MEMORY[0x1C3BB916C]();
          MEMORY[0x1C3BB9B44](v47, 0x10A0C403D23BABBLL);
          v109 = 0;
        }
        if (v20)
        {
          v48 = (unint64_t *)&v20->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v109 = (void **)v115;
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v109);
        if (v114 < 0)
          operator delete(v113);
        if (v112 < 0)
          operator delete(v111);
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v110.__r_.__value_.__l.__data_);
      }
      siri::ontology::UsoGraphProtoWriter::toProtobuf();
      if (!v109)
      {
        v29 = 0;
        goto LABEL_216;
      }
      v29 = (sirinluexternal::UserAccepted **)operator new();
      sirinluexternal::UserDialogAct::UserDialogAct((sirinluexternal::UserDialogAct *)v29);
      v50 = *(unsigned __int8 *)(v16 + 23);
      if ((*(char *)(v16 + 23) & 0x80000000) == 0)
      {
        v51 = v16;
        switch(*(_BYTE *)(v16 + 23))
        {
          case 0xC:
            if (*(_QWORD *)v16 != 0x6563634172657355 || *(_DWORD *)(v16 + 8) != 1684370544)
              goto LABEL_89;
            goto LABEL_170;
          case 0xD:
            if (*(_QWORD *)v16 != 0x636E614372657355 || *(_QWORD *)(v16 + 5) != 0x64656C6C65636E61)
              goto LABEL_196;
            goto LABEL_158;
          case 0xE:
            goto LABEL_138;
          case 0x10:
            if (*(_QWORD *)v16 != 0x6E6B634172657355 || *(_QWORD *)(v16 + 8) != 0x64656764656C776FLL)
              goto LABEL_196;
            goto LABEL_219;
          case 0x11:
            goto LABEL_189;
          case 0x16:
            if (*(_QWORD *)v16 != 0x65746167656C6544
              || *(_QWORD *)(v16 + 8) != 0x6169447265735564
              || *(_QWORD *)(v16 + 14) != 0x746341676F6C6169)
            {
              goto LABEL_196;
            }
            goto LABEL_152;
          default:
            goto LABEL_196;
        }
      }
      v63 = *(_QWORD *)(v16 + 8);
      if (v63 > 15)
      {
        if (v63 == 16)
        {
          if (**(_QWORD **)v16 == 0x6E6B634172657355 && *(_QWORD *)(*(_QWORD *)v16 + 8) == 0x64656764656C776FLL)
          {
LABEL_219:
            sirinluexternal::UserDialogAct::makeAcknowledged((sirinluexternal::UserDialogAct *)v29);
            sirinluexternal::UserAcknowledged::makeReference(v29[2]);
            v94 = v29[2];
            v95 = v109;
            v109 = 0;
            v96 = *((_QWORD *)v94 + 1);
            *((_QWORD *)v94 + 1) = v95;
            if (v96)
              (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
            sirinluexternal::UserAcknowledged::makeSystemDialogActId(v29[2]);
            goto LABEL_213;
          }
        }
        else if (v63 == 22)
        {
          if (**(_QWORD **)v16 == 0x65746167656C6544
            && *(_QWORD *)(*(_QWORD *)v16 + 8) == 0x6169447265735564
            && *(_QWORD *)(*(_QWORD *)v16 + 14) == 0x746341676F6C6169)
          {
LABEL_152:
            sirinluexternal::UserDialogAct::makeDelegated((sirinluexternal::UserDialogAct *)v29);
            goto LABEL_213;
          }
          if ((v50 & 0x80) == 0)
          {
            if (v50 != 12)
            {
              if (v50 != 14)
              {
                v51 = v16;
                if (v50 == 17)
                {
LABEL_189:
                  v78 = *(_QWORD *)v51;
                  v79 = *(_QWORD *)(v51 + 8);
                  v80 = *(unsigned __int8 *)(v51 + 16);
                  if (v78 != 0x746E615772657355 || v79 != 0x737561506F546465 || v80 != 101)
                    goto LABEL_196;
                  sirinluexternal::UserDialogAct::makeWantedToPause((sirinluexternal::UserDialogAct *)v29);
                  sirinluexternal::UserWantedToPause::makeReference(v29[8]);
                  v71 = v29[8];
LABEL_198:
                  v83 = v109;
                  v109 = 0;
                  v84 = (sirinluexternal::UserAccepted **)*((_QWORD *)v71 + 1);
                  *((_QWORD *)v71 + 1) = v83;
                  if (!v84)
                    goto LABEL_215;
LABEL_212:
                  (*((void (**)(sirinluexternal::UserAccepted **))*v84 + 1))(v84);
LABEL_213:
                  v91 = v109;
                  v109 = 0;
                  if (v91)
                    (*((void (**)(void **))*v91 + 1))(v91);
                  goto LABEL_216;
                }
LABEL_196:
                if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("UserWantedToProceed", (_QWORD *)v16))
                {
                  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("UserWantedToRepeat", (_QWORD *)v16))
                  {
                    sirinluexternal::UserDialogAct::makeWantedToRepeat((sirinluexternal::UserDialogAct *)v29);
                    sirinluexternal::UserWantedToRepeat::makeReference(v29[10]);
                    v85 = v29[10];
                    v86 = v109;
                    v109 = 0;
                    v87 = *((_QWORD *)v85 + 1);
                    *((_QWORD *)v85 + 1) = v86;
                    if (v87)
                      (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
                    sirinluexternal::UserWantedToRepeat::makeSystemDialogActId(v29[10]);
                    goto LABEL_213;
                  }
                  v88 = SNLPOSLoggerForCategory(1);
                  if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
                  {
                    if (*(char *)(v16 + 23) >= 0)
                      v89 = v16;
                    else
                      v89 = *(_QWORD *)v16;
                    LODWORD(v110.__r_.__value_.__l.__data_) = 136315138;
                    *(std::string::size_type *)((char *)v110.__r_.__value_.__r.__words + 4) = v89;
                    _os_log_impl(&dword_1C2196000, v88, OS_LOG_TYPE_DEBUG, "Invalid user dialog act: %s", (uint8_t *)&v110, 0xCu);
                  }
                  v84 = v29;
                  v29 = 0;
                  goto LABEL_212;
                }
                sirinluexternal::UserDialogAct::makeWantedToProceed((sirinluexternal::UserDialogAct *)v29);
                sirinluexternal::UserWantedToProceed::makeReference(v29[9]);
                v71 = v29[9];
                goto LABEL_198;
              }
LABEL_138:
              if (*(_QWORD *)v16 != 0x7461745372657355 || *(_QWORD *)(v16 + 6) != 0x6B73615464657461)
                goto LABEL_196;
              goto LABEL_218;
            }
LABEL_89:
            if (*(_QWORD *)v16 != 0x656A655272657355 || *(_DWORD *)(v16 + 8) != 1684370531)
              goto LABEL_196;
LABEL_210:
            sirinluexternal::UserDialogAct::makeRejected((sirinluexternal::UserDialogAct *)v29);
            sirinluexternal::UserRejected::makeReference(v29[6]);
            v74 = v29[6];
LABEL_211:
            v90 = v109;
            v109 = 0;
            v84 = (sirinluexternal::UserAccepted **)*((_QWORD *)v74 + 2);
            *((_QWORD *)v74 + 2) = v90;
            if (!v84)
            {
LABEL_215:
              v109 = 0;
LABEL_216:
              nlv4_inference_orchestrator::trees::UsoGraphBuilder::~UsoGraphBuilder((void **)buf);
              v92 = v104;
              v104 = 0;
              if (v92)
              {
                v93 = MEMORY[0x1C3BB916C]();
                MEMORY[0x1C3BB9B44](v93, 0x10A0C403D23BABBLL);
              }
              goto LABEL_51;
            }
            goto LABEL_212;
          }
        }
      }
      else if (v63 == 12)
      {
        if (**(_QWORD **)v16 == 0x6563634172657355 && *(_DWORD *)(*(_QWORD *)v16 + 8) == 1684370544)
        {
LABEL_170:
          sirinluexternal::UserDialogAct::makeAccepted((sirinluexternal::UserDialogAct *)v29);
          sirinluexternal::UserAccepted::makeReference(v29[1]);
          v74 = v29[1];
          goto LABEL_211;
        }
      }
      else if (v63 == 13
             && **(_QWORD **)v16 == 0x636E614372657355
             && *(_QWORD *)(*(_QWORD *)v16 + 5) == 0x64656C6C65636E61)
      {
LABEL_158:
        sirinluexternal::UserDialogAct::makeCancelled((sirinluexternal::UserDialogAct *)v29);
        sirinluexternal::UserCancelled::makeReference(v29[4]);
        v71 = v29[4];
        goto LABEL_198;
      }
      if (*(_QWORD *)(v16 + 8) != 12)
      {
LABEL_181:
        if (*(_QWORD *)(v16 + 8) != 14)
        {
LABEL_187:
          if (*(_QWORD *)(v16 + 8) == 17)
          {
            v51 = *(_QWORD *)v16;
            goto LABEL_189;
          }
          goto LABEL_196;
        }
        if (**(_QWORD **)v16 != 0x7461745372657355 || *(_QWORD *)(*(_QWORD *)v16 + 6) != 0x6B73615464657461)
        {
          if ((v50 & 0x80) == 0)
            goto LABEL_196;
          goto LABEL_187;
        }
LABEL_218:
        sirinluexternal::UserDialogAct::makeUserStatedTask((sirinluexternal::UserDialogAct *)v29);
        sirinluexternal::UserStatedTask::makeTask(v29[7]);
        v71 = v29[7];
        goto LABEL_198;
      }
      if (**(_QWORD **)v16 != 0x656A655272657355 || *(_DWORD *)(*(_QWORD *)v16 + 8) != 1684370531)
      {
        if ((v50 & 0x80) == 0)
          goto LABEL_196;
        goto LABEL_181;
      }
      goto LABEL_210;
    }
    if (!*(_BYTE *)(v16 + 71))
      goto LABEL_64;
    v27 = 0;
    while (*(unsigned __int8 *)(v16 + v27 + 48) == *((unsigned __int8 *)v26 + v27))
    {
      if (v23 == ++v27)
        goto LABEL_64;
    }
LABEL_48:
    v28 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C2196000, v28, OS_LOG_TYPE_DEBUG, "Invalid model tree, removing parse from output.", buf, 2u);
    }
    v29 = 0;
LABEL_51:
    if ((char)v108 < 0)
      operator delete(v107[0]);
    v31 = a1[1];
    v30 = (unint64_t)a1[2];
    if ((unint64_t)v31 >= v30)
    {
      v33 = *a1;
      v34 = v31 - *a1;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 61)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v36 = v17;
      v37 = v18;
      v38 = v30 - (_QWORD)v33;
      if (v38 >> 2 > v35)
        v35 = v38 >> 2;
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
        v39 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v39 = v35;
      if (v39)
      {
        if (v39 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v40 = (char *)operator new(8 * v39);
      }
      else
      {
        v40 = 0;
      }
      v54 = (sirinluexternal::UserAccepted ***)&v40[8 * v34];
      *v54 = v29;
      v32 = v54 + 1;
      if (v31 == v33)
      {
        v56 = vdupq_n_s64((unint64_t)v31);
      }
      else
      {
        do
        {
          v55 = *--v31;
          *v31 = 0;
          *--v54 = v55;
        }
        while (v31 != v33);
        v56 = *(int64x2_t *)a1;
      }
      *a1 = v54;
      a1[1] = v32;
      a1[2] = (sirinluexternal::UserAccepted ***)&v40[8 * v39];
      v57 = (_QWORD *)v56.i64[1];
      v58 = (_QWORD *)v56.i64[0];
      while (v57 != v58)
      {
        v60 = *--v57;
        v59 = v60;
        *v57 = 0;
        if (v60)
          (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
      }
      if (v58)
        operator delete(v58);
      v18 = v37;
      v17 = v36;
    }
    else
    {
      *v31 = v29;
      v32 = v31 + 1;
    }
    a1[1] = v32;
    if (v99)
    {
      v61 = (unint64_t *)&v99->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    v16 += 144;
  }
  while (v16 != v17);
  v11 = v101;
LABEL_24:
  if ((v11 & 0x80) != 0)
    operator delete(__p[0]);
}

void sub_1C2221AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a69;

  if (a69 < 0)
    operator delete(__p);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::vector<std::unique_ptr<sirinluexternal::UserDialogAct const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t PB::PtrVector<sirinluexternal::UserDialogAct>::emplace_back<sirinluexternal::UserDialogAct const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t *v20;
  uint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  _QWORD *v24;

  v4 = operator new();
  result = MEMORY[0x1C3BB82E4](v4, a2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v12);
    else
      v13 = 0;
    v14 = (uint64_t *)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (uint64_t *)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (uint64_t *)v15;
    v23 = (unint64_t)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<sirinluexternal::UserParse>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_1C2221D48(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<sirinluexternal::UserDialogAct const>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<sirinluexternal::UserParse>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

boost::uuids::detail::random_provider_base *boost::uuids::detail::random_provider_base::random_provider_base(boost::uuids::detail::random_provider_base *this)
{
  int v2;
  uint64_t v4;
  std::runtime_error *v5;
  int8x16_t v6;
  uint64_t v7;
  std::string v8;
  std::runtime_error v9;
  uint64_t v10;

  *(_DWORD *)this = -1;
  v2 = open("/dev/urandom", 0x1000000);
  *(_DWORD *)this = v2;
  if (v2 == -1)
  {
    v4 = *__error();
    std::string::basic_string[abi:ne180100]<0>(&v8, "open /dev/urandom");
    v5 = std::runtime_error::runtime_error(&v9, &v8);
    v9.__vftable = (std::runtime_error_vtbl *)&off_1E7BEBE30;
    v10 = v4;
    v6.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/C"
                         "ontents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/loca"
                         "l/include/boost/uuid/detail/random_provider_posix.ipp";
    v6.i64[1] = (uint64_t)"boost::uuids::detail::random_provider_base::random_provider_base()";
    v7 = 60;
    boost::throw_exception<boost::uuids::entropy_error>(v5, &v6);
  }
  return this;
}

void sub_1C2221EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  std::runtime_error::~runtime_error((std::runtime_error *)(v18 - 40));
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t boost::uuids::random_generator_pure::operator()(int *a1)
{
  unint64_t v2;
  ssize_t v3;
  uint64_t v4;
  int8x16_t v6;
  uint64_t v7;
  std::string v8;
  std::runtime_error v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = 0;
  v13 = *MEMORY[0x1E0C80C00];
  do
  {
    v3 = read(*a1, (char *)&v11 + v2, 16 - v2);
    if (v3 < 0)
    {
      v4 = *__error();
      if ((_DWORD)v4 != 4)
      {
        std::string::basic_string[abi:ne180100]<0>(&v8, "read");
        std::runtime_error::runtime_error(&v9, &v8);
        v9.__vftable = (std::runtime_error_vtbl *)&off_1E7BEBE30;
        v10 = v4;
        v6.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.a"
                             "pp/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/"
                             "usr/local/include/boost/uuid/detail/random_provider_posix.ipp";
        v6.i64[1] = (uint64_t)"void boost::uuids::detail::random_provider_base::get_random_bytes(void *, std::size_t)";
        v7 = 98;
        boost::throw_exception<boost::uuids::entropy_error>(&v9, &v6);
      }
    }
    else
    {
      v2 += v3;
    }
  }
  while (v2 < 0x10);
  LOBYTE(v12) = v12 & 0x3F | 0x80;
  BYTE6(v11) = BYTE6(v11) & 0xF | 0x40;
  return v11;
}

void sub_1C2222038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t boost::uuids::detail::random_provider_base::destroy(uint64_t this)
{
  if ((this & 0x80000000) == 0)
    return close(this);
  return this;
}

void boost::throw_exception<boost::uuids::entropy_error>(const std::runtime_error *a1, int8x16_t *a2)
{
  char *exception;
  std::runtime_error_vtbl *v5;

  exception = (char *)__cxa_allocate_exception(0x48uLL);
  *(_QWORD *)exception = &unk_1E7BEBCB8;
  std::runtime_error::runtime_error((std::runtime_error *)(exception + 8), a1);
  *(_QWORD *)exception = &off_1E7BEA298;
  *((_QWORD *)exception + 1) = &unk_1E7BEA2C8;
  v5 = a1[1].__vftable;
  *((_QWORD *)exception + 6) = 0;
  *((_QWORD *)exception + 7) = 0;
  *((_QWORD *)exception + 3) = v5;
  *((_QWORD *)exception + 4) = &unk_1E7BEA2F8;
  *((_QWORD *)exception + 5) = 0;
  *((_DWORD *)exception + 16) = a2[1].i32[0];
  *((int8x16_t *)exception + 3) = vextq_s8(*a2, *a2, 8uLL);
}

uint64_t boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_1E7BEC4D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<boost::uuids::entropy_error>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E7BEBCB8;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = &off_1E7BEBE30;
  *(_QWORD *)(v2 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v2 + 32) = &unk_1E7BEC4D8;
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 40) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_DWORD *)(v2 + 64) = *(_DWORD *)(a1 + 64);
  *(_QWORD *)v2 = &off_1E7BEA298;
  *(_QWORD *)(v2 + 8) = &unk_1E7BEA2C8;
  *(_QWORD *)(v2 + 32) = &unk_1E7BEA2F8;
  boost::exception_detail::copy_boost_exception(v2 + 32, a1 + 32);
  return v2;
}

void sub_1C222221C(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  MEMORY[0x1C3BB9B44](v1, 0x10F1C40261F87E4);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::uuids::entropy_error>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::uuids::entropy_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1C222229C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_1E7BEC4D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x1C3BB9B44);
}

void `non-virtual thunk to'boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E7BEC4D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  *(_QWORD *)(a1 + 24) = &unk_1E7BEC4D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::uuids::entropy_error::errcode(boost::uuids::entropy_error *this)
{
  return *((_QWORD *)this + 2);
}

void `non-virtual thunk to'boost::wrapexcept<boost::uuids::entropy_error>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_1E7BEC4D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 3));
}

{
  *a1 = &unk_1E7BEC4D8;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 3));
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::wrapexcept<boost::uuids::entropy_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E7BEBCB8;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &off_1E7BEBE30;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = &unk_1E7BEC4D8;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)a1 = &off_1E7BEA298;
  *(_QWORD *)(a1 + 8) = &unk_1E7BEA2C8;
  *(_QWORD *)(a1 + 32) = &unk_1E7BEA2F8;
  return a1;
}

void sub_1C22224B0(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::uuids::entropy_error::~entropy_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1C3BB9B44);
}

nlv4_inference_orchestrator::trees::UsoGraphBuilder *nlv4_inference_orchestrator::trees::UsoGraphBuilder::UsoGraphBuilder(nlv4_inference_orchestrator::trees::UsoGraphBuilder *this)
{
  _QWORD *v2;
  uint64_t i;
  uint64_t j;
  void *__p[2];
  char v7;
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  v2 = std::string::basic_string[abi:ne180100]<0>(this, "time");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "date");
  std::string::basic_string[abi:ne180100]<0>(__p, "common_Time");
  std::string::basic_string[abi:ne180100]<0>(v8, "common_Time12HourClock");
  std::string::basic_string[abi:ne180100]<0>(v9, "common_Time24HourClock");
  std::unordered_set<std::string>::unordered_set((uint64_t)this + 48, (unsigned __int8 *)__p, 3);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v9[i + 2]) < 0)
      operator delete((void *)v9[i]);
  }
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 11, "ROOT");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 14, ".");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 17, "task");
  std::string::basic_string[abi:ne180100]<0>(__p, "common_Integer");
  std::unordered_set<std::string>::unordered_set((uint64_t)this + 160, (unsigned __int8 *)__p, 1);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "integerValue");
  std::string::basic_string[abi:ne180100]<0>(v8, "denominatorValue");
  std::string::basic_string[abi:ne180100]<0>(v9, "numeratorValue");
  std::string::basic_string[abi:ne180100]<0>(v10, "wholeValue");
  std::unordered_set<std::string>::unordered_set((uint64_t)this + 200, (unsigned __int8 *)__p, 4);
  for (j = 0; j != -12; j -= 3)
  {
    if (SHIBYTE(v10[j + 2]) < 0)
      operator delete((void *)v10[j]);
  }
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 30, "common_Integer");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 33, "integerValue");
  return this;
}

void sub_1C2222720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;
  uint64_t v17;
  void **v18;
  void **v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;

  if (*(char *)(v15 + 263) < 0)
    operator delete(*v23);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v22);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v21);
  if (*(char *)(v15 + 159) < 0)
    operator delete(*v20);
  if (*(char *)(v15 + 135) < 0)
    operator delete(*v19);
  if (*(char *)(v15 + 111) < 0)
    operator delete(*v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v17);
  if (*(char *)(v15 + 47) < 0)
    operator delete(*v16);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const char *a1, _QWORD *a2)
{
  size_t v4;

  v4 = strlen(a1);
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)a2 + 23))
      return 0;
    return memcmp(a2, a1, v4) == 0;
  }
  if (v4 == a2[1])
  {
    if (v4 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    a2 = (_QWORD *)*a2;
    return memcmp(a2, a1, v4) == 0;
  }
  return 0;
}

void nlv4_inference_orchestrator::trees::UsoGraphBuilder::~UsoGraphBuilder(void **this)
{
  if (*((char *)this + 287) < 0)
    operator delete(this[33]);
  if (*((char *)this + 263) < 0)
    operator delete(this[30]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 25));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 20));
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    MEMORY[0x1C3BB916C]();
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 24 * a3;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, a2, (uint64_t)a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_1C2222A6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(void ****)(a1 + 16);
    v3 = **(void ****)(a1 + 8);
    if (v2 != v3)
    {
      v4 = v2 - 7;
      do
      {
        v7 = v4;
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v7);
        if (*((char *)v4 - 17) < 0)
          operator delete(*(v4 - 5));
        if (*((char *)v4 - 41) < 0)
          operator delete(*(v4 - 8));
        if (*((char *)v4 - 65) < 0)
          operator delete(*(v4 - 11));
        v5 = v4 - 11;
        v4 -= 18;
      }
      while (v5 != v3);
    }
  }
  return a1;
}

std::string *std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;
  uint64_t v7;

  if (a4)
  {
    v6 = result;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_, v7);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1C2222B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1C71C71C71C71C8)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[144 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this, uint64_t a5)
{
  std::string *v5;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v14[3];
  char v15;
  std::string *v16;
  std::string *v17;

  v5 = this;
  v16 = this;
  v17 = this;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a2 != a3)
  {
    v7 = a2;
    do
    {
      if (*((char *)v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
      }
      else
      {
        v8 = *v7;
        v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
        *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
      }
      if (*((char *)v7 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v5 + 1, *((const std::string::value_type **)v7 + 3), *((_QWORD *)v7 + 4));
      }
      else
      {
        v9 = *(__int128 *)((char *)v7 + 24);
        v5[1].__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 5);
        *(_OWORD *)&v5[1].__r_.__value_.__l.__data_ = v9;
      }
      if (*((char *)v7 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(v5 + 2, *((const std::string::value_type **)v7 + 6), *((_QWORD *)v7 + 7));
      }
      else
      {
        v10 = v7[3];
        v5[2].__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 8);
        *(_OWORD *)&v5[2].__r_.__value_.__l.__data_ = v10;
      }
      v11 = *(__int128 *)((char *)v7 + 72);
      v5[3].__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&v5[3].__r_.__value_.__l.__data_ = v11;
      v5[4].__r_.__value_.__r.__words[0] = 0;
      v5[4].__r_.__value_.__l.__size_ = 0;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*>(&v5[3].__r_.__value_.__r.__words[2], *((_QWORD *)v7 + 11), *((_QWORD *)v7 + 12), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)v7 + 12) - *((_QWORD *)v7 + 11)) >> 4), a5);
      v12 = v7[8];
      *(_OWORD *)&v5[4].__r_.__value_.__r.__words[2] = v7[7];
      *(_OWORD *)&v5[5].__r_.__value_.__r.__words[1] = v12;
      v7 += 9;
      v5 = v17 + 6;
      v17 += 6;
    }
    while (v7 != a3);
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v5;
}

void sub_1C2222D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;

  if (*(char *)(v9 + 47) < 0)
    operator delete(*v10);
  if (*(char *)(v9 + 23) < 0)
    operator delete(*(void **)v9);
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(unint64_t a1)
{
  if (a1 >= 0x1C71C71C71C71C8)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(144 * a1);
}

void nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::runSystemPromptedMessageContentHack(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 2);
  nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::internal::runGenericSystemPromptedContentHack((_QWORD **)&v2, off_1E7BED110, a2);
}

void nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::runSystemPromptedAnnouncementContentHack(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 2);
  nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::internal::runGenericSystemPromptedContentHack((_QWORD **)&v2, off_1E7BED128, a2);
}

void nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::runSystemPromptedNoteContentHack(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 2);
  nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::internal::runGenericSystemPromptedContentHack((_QWORD **)&v2, off_1E7BED140, a2);
}

void sub_1C2223238(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C22232F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C222335C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)UPDataDetectorSpan;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::trigger::buildTrigger@<X0>(char a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t result;
  _QWORD *v14;
  _QWORD *v15;
  _OWORD *v16;
  char v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t i;
  __int128 v25;
  _OWORD *v26;
  __int128 v27;
  _OWORD *v28;
  void **v29;
  std::string v30;
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_QWORD *)v8 = &off_1E7BE9B88;
  v9 = operator new();
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v30 = *(std::string *)a3;
  *(_QWORD *)v9 = off_1E7BE9BB0;
  *(std::string *)(v9 + 8) = v30;
  v10 = operator new();
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v30 = *(std::string *)a3;
  *(_QWORD *)v10 = off_1E7BE9BD8;
  *(std::string *)(v10 + 8) = v30;
  if (a2)
  {
    if (a2 != 1)
    {
      if (a2 == 2)
      {
        *a4 = v10;
        goto LABEL_17;
      }
      v12 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v30.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(v30.__r_.__value_.__r.__words[0]) = a2;
        _os_log_impl(&dword_1C2196000, v12, OS_LOG_TYPE_ERROR, "Could not build trigger for unhandled category: %d", (uint8_t *)&v30, 8u);
      }
      v11 = 0;
LABEL_16:
      *a4 = v11;
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
LABEL_17:
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      if (!v8)
        return result;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
LABEL_12:
    v11 = v8;
    v8 = 0;
    goto LABEL_16;
  }
  if ((a1 & 1) != 0)
    goto LABEL_12;
  v30.__r_.__value_.__r.__words[0] = v9;
  v14 = (_QWORD *)operator new();
  *v14 = &off_1E7BECD40;
  v14[1] = 0;
  v14[2] = 0;
  v14[3] = v9;
  v30.__r_.__value_.__l.__size_ = (std::string::size_type)v14;
  v30.__r_.__value_.__r.__words[2] = v10;
  v15 = (_QWORD *)operator new();
  *v15 = &off_1E7BECD40;
  v15[1] = 0;
  v15[2] = 0;
  v15[3] = v10;
  v31 = v15;
  v26 = 0;
  v25 = 0uLL;
  *(_QWORD *)&v27 = &v25;
  BYTE8(v27) = 0;
  v16 = operator new(0x20uLL);
  v17 = 0;
  v18 = 0;
  *(_QWORD *)&v25 = v16;
  *((_QWORD *)&v25 + 1) = v16;
  v26 = v16 + 2;
  do
  {
    v19 = v17;
    v20 = *((_OWORD *)&v30.__r_.__value_.__l.__data_ + v18);
    *v16 = v20;
    if (*((_QWORD *)&v20 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    ++v16;
    v17 = 1;
    v18 = 1;
  }
  while ((v19 & 1) == 0);
  *((_QWORD *)&v25 + 1) = v16;
  v23 = (_QWORD *)operator new();
  v27 = v25;
  v28 = v26;
  v26 = 0;
  v25 = 0uLL;
  snlp::ssu::trigger::SSUTriggerDisjunction::SSUTriggerDisjunction(v23, (uint64_t)&v27);
  v29 = (void **)&v27;
  std::vector<std::shared_ptr<snlp::ssu::trigger::SSUTrigger>>::__destroy_vector::operator()[abi:ne180100](&v29);
  *a4 = (uint64_t)v23;
  *(_QWORD *)&v27 = &v25;
  std::vector<std::shared_ptr<snlp::ssu::trigger::SSUTrigger>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&v30 + i);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_1C2223724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, char a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t i;

  std::vector<std::shared_ptr<snlp::ssu::trigger::SSUTrigger>>::__destroy_vector::operator()[abi:ne180100](&a16);
  MEMORY[0x1C3BB9B44](v18, 0xA1C4030951706);
  a16 = (void **)&a9;
  std::vector<std::shared_ptr<snlp::ssu::trigger::SSUTrigger>>::__destroy_vector::operator()[abi:ne180100](&a16);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)(&a17 + i));
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<snlp::ssu::trigger::SSUTrigger>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_pointer<snlp::ssu::trigger::SSUTrigger  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t std::__shared_ptr_pointer<snlp::ssu::trigger::SSUTrigger  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<snlp::ssu::trigger::SSUTrigger  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t snlp::common::text_uso_graph::isMessageContentPrompt(uint64_t a1)
{
  uint64_t v1;
  siri::ontology *v2;
  uint64_t *SharedUsoVocabManager;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  UsoGraphNode *v11;
  _BYTE *v12;
  siri::ontology::UsoGraph **v13;
  _BOOL4 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26;
  int data;
  int v28;
  _BOOL4 v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  std::string v35;
  void *__s[2];
  char v37;
  void *v38;
  _BYTE *v39;
  std::string v40;
  void *v41[2];
  char v42;
  void *__p;
  _BYTE *v44;
  int v45;
  char v46;
  _BYTE *v47;
  _BYTE *v48;
  _BYTE v49[88];
  UsoGraphNode *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  _BYTE v53[136];

  v1 = *(_QWORD *)(a1 + 40);
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return 0;
  v2 = (siri::ontology *)MEMORY[0x1C3BB83C8](v53);
  SharedUsoVocabManager = (uint64_t *)siri::ontology::getSharedUsoVocabManager(v2);
  v4 = *SharedUsoVocabManager;
  v5 = (std::__shared_weak_count *)SharedUsoVocabManager[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v51 = v4;
    v52 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v51 = *SharedUsoVocabManager;
    v52 = 0;
  }
  v47 = 0;
  LODWORD(v48) = 0;
  MEMORY[0x1C3BB9154](v49, &v47);
  siri::ontology::UsoGraphProtoReader::fromProtobuf((siri::ontology::UsoGraphProtoReader *)&v51, (const sirinluexternal::UsoGraph *)v53, (UsoGraph *)v49);
  v11 = v50;
  siri::ontology::UsoGraph::getSuccessors((siri::ontology::UsoGraph *)v50->var1, v50);
  v12 = v47;
  if (v48 - v47 != 8)
  {
    v10 = 0;
    if (!v47)
      goto LABEL_28;
    goto LABEL_27;
  }
  siri::ontology::UsoGraph::getSuccessors((siri::ontology::UsoGraph *)v11->var1, v11);
  v13 = *(siri::ontology::UsoGraph ***)__p;
  v44 = __p;
  operator delete(__p);
  if ((*((unsigned int (**)(siri::ontology::UsoGraph **))*v13 + 2))(v13) != 1)
    goto LABEL_35;
  (*((void (**)(void **__return_ptr, siri::ontology::UsoGraph **))*v13 + 6))(&__p, v13);
  if ((v46 & 0x80000000) == 0)
  {
    if (v46 == 20)
    {
      v16 = __p == (void *)0x6F633A3A646E6573 && v44 == (_BYTE *)0x73654D5F6E6F6D6DLL && v45 == 1701273971;
      goto LABEL_48;
    }
LABEL_35:
    v16 = 0;
    goto LABEL_48;
  }
  v16 = v44 == (_BYTE *)20
     && *(_QWORD *)__p == 0x6F633A3A646E6573
     && *((_QWORD *)__p + 1) == 0x73654D5F6E6F6D6DLL
     && *((_DWORD *)__p + 4) == 1701273971;
  operator delete(__p);
LABEL_48:
  siri::ontology::UsoGraph::getSuccessorsWithEdges(v13[1], (const UsoGraphNode *)v13);
  v23 = __p;
  if (!v16)
  {
    v10 = 0;
    goto LABEL_92;
  }
  if (v44 - (_BYTE *)__p != 16)
  {
    v10 = 1;
    goto LABEL_92;
  }
  (*(void (**)(void **__return_ptr))(**(_QWORD **)__p + 48))(v41);
  v24 = *((_QWORD *)__p + 1);
  if (*(char *)(v24 + 55) < 0)
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)(v24 + 32), *(_QWORD *)(v24 + 40));
  else
    v40 = *(std::string *)(v24 + 32);
  siri::ontology::UsoGraph::getSuccessors(v13[1], (const UsoGraphNode *)v13);
  v25 = *(_QWORD *)v38;
  v39 = v38;
  operator delete(v38);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)__p + 16))(*(_QWORD *)__p) != 2)
    goto LABEL_65;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v40.__r_.__value_.__l.__size_ != 6)
      goto LABEL_65;
    v26 = (std::string *)v40.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) != 6)
      goto LABEL_65;
    v26 = &v40;
  }
  data = (int)v26->__r_.__value_.__l.__data_;
  v28 = WORD2(v26->__r_.__value_.__r.__words[0]);
  if (data == 1735549300 && v28 == 29797)
  {
    v30 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v41, "common_Message");
    goto LABEL_66;
  }
LABEL_65:
  v30 = 0;
LABEL_66:
  siri::ontology::UsoGraph::getSuccessorsWithEdges(*(siri::ontology::UsoGraph **)(v25 + 8), (const UsoGraphNode *)v25);
  v31 = v38;
  if (v30)
  {
    if (v39 - (_BYTE *)v38 == 16)
    {
      (*(void (**)(void **__return_ptr))(**(_QWORD **)v38 + 48))(__s);
      v32 = *((_QWORD *)v38 + 1);
      if (*(char *)(v32 + 55) < 0)
        std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)(v32 + 32), *(_QWORD *)(v32 + 40));
      else
        v35 = *(std::string *)(v32 + 32);
      siri::ontology::UsoGraph::getSuccessors(*(siri::ontology::UsoGraph **)(v25 + 8), (const UsoGraphNode *)v25);
      v33 = *v34;
      operator delete(v34);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33) == 3
        && std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("stringContent", &v35)
        && std::string::find[abi:ne180100](__s) != -1)
      {
        siri::ontology::UsoGraph::getSuccessors(*(siri::ontology::UsoGraph **)(v33 + 8), (const UsoGraphNode *)v33);
        v10 = 1;
        if (v34)
          operator delete(v34);
      }
      else
      {
        v10 = 0;
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      if (v37 < 0)
        operator delete(__s[0]);
      v31 = v38;
    }
    else
    {
      v10 = 1;
    }
  }
  else
  {
    v10 = 0;
  }
  if (v31)
  {
    v39 = v31;
    operator delete(v31);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (v42 < 0)
    operator delete(v41[0]);
  v23 = __p;
LABEL_92:
  if (v23)
  {
    v44 = v23;
    operator delete(v23);
  }
  v12 = v47;
  if (!v47)
    goto LABEL_28;
LABEL_27:
  v48 = v12;
  operator delete(v12);
LABEL_28:
  MEMORY[0x1C3BB916C](v49);
  v17 = v52;
  if (v52)
  {
    v18 = (unint64_t *)&v52->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  MEMORY[0x1C3BB83E0](v53);
  return v10;
}

void sub_1C22245E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,char a48)
{
  uint64_t v48;

  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a26)
    operator delete(a26);
  if (a34 < 0)
    operator delete(a29);
  if (a41 < 0)
    operator delete(a36);
  if (a42)
    operator delete(a42);
  if (a45)
    operator delete(a45);
  MEMORY[0x1C3BB916C](&a48);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v48 - 184);
  MEMORY[0x1C3BB83E0](v48 - 168);
  _Unwind_Resume(a1);
}

void sub_1C22246D4()
{
  JUMPOUT(0x1C22246BCLL);
}

void sub_1C22246DC()
{
  JUMPOUT(0x1C22246C4);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)a1 + 23))
      return 0;
    return memcmp(a1, __s, v4) == 0;
  }
  if (v4 == a1[1])
  {
    if (v4 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    a1 = (_QWORD *)*a1;
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

uint64_t std::string::find[abi:ne180100](_QWORD *__s)
{
  _QWORD *v1;
  uint64_t v2;
  char *v3;
  char *v4;
  void *v6;

  v1 = __s;
  if (*((char *)__s + 23) < 0)
  {
    v1 = (_QWORD *)*__s;
    v2 = __s[1];
  }
  else
  {
    v2 = *((unsigned __int8 *)__s + 23);
  }
  v3 = (char *)v1 + v2;
  if (v2 >= 16)
  {
    v6 = v1;
    do
    {
      if (v2 == 15)
        break;
      v4 = (char *)memchr(v6, 112, v2 - 15);
      if (!v4)
        break;
      if (*(_QWORD *)v4 == 0x766974696D697270 && *((_QWORD *)v4 + 1) == 0x676E697274535F65)
        goto LABEL_6;
      v6 = v4 + 1;
      v2 = v3 - (_BYTE *)v6;
    }
    while (v3 - (_BYTE *)v6 > 15);
  }
  v4 = v3;
LABEL_6:
  if (v4 == v3)
    return -1;
  else
    return v4 - (char *)v1;
}

uint64_t snlp::common::text_uso_graph::isIntercomPayloadPrompt(uint64_t a1)
{
  uint64_t v1;
  siri::ontology *v2;
  uint64_t *SharedUsoVocabManager;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  UsoGraphNode *v11;
  _BYTE *v12;
  siri::ontology::UsoGraph **v13;
  _BOOL4 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  int data;
  int v30;
  _BOOL4 v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  std::string v37;
  void *__s[2];
  char v39;
  void *v40;
  _BYTE *v41;
  std::string v42;
  void *v43[2];
  char v44;
  void *__p;
  _BYTE *v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE v50[88];
  UsoGraphNode *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  _BYTE v54[136];

  v1 = *(_QWORD *)(a1 + 40);
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return 0;
  v2 = (siri::ontology *)MEMORY[0x1C3BB83C8](v54);
  SharedUsoVocabManager = (uint64_t *)siri::ontology::getSharedUsoVocabManager(v2);
  v4 = *SharedUsoVocabManager;
  v5 = (std::__shared_weak_count *)SharedUsoVocabManager[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v52 = v4;
    v53 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v52 = *SharedUsoVocabManager;
    v53 = 0;
  }
  v48 = 0;
  LODWORD(v49) = 0;
  MEMORY[0x1C3BB9154](v50, &v48);
  siri::ontology::UsoGraphProtoReader::fromProtobuf((siri::ontology::UsoGraphProtoReader *)&v52, (const sirinluexternal::UsoGraph *)v54, (UsoGraph *)v50);
  v11 = v51;
  siri::ontology::UsoGraph::getSuccessors((siri::ontology::UsoGraph *)v51->var1, v51);
  v12 = v48;
  if (v49 - v48 != 8)
  {
    v10 = 0;
    if (!v48)
      goto LABEL_31;
    goto LABEL_30;
  }
  siri::ontology::UsoGraph::getSuccessors((siri::ontology::UsoGraph *)v11->var1, v11);
  v13 = *(siri::ontology::UsoGraph ***)__p;
  v46 = __p;
  operator delete(__p);
  if ((*((unsigned int (**)(siri::ontology::UsoGraph **))*v13 + 2))(v13) != 1)
    goto LABEL_38;
  (*((void (**)(void **__return_ptr, siri::ontology::UsoGraph **))*v13 + 6))(&__p, v13);
  if ((SHIBYTE(v47) & 0x80000000) == 0)
  {
    if (SHIBYTE(v47) == 25)
    {
      v17 = __p == (void *)0x6F633A3A646E6573
         && v46 == (_BYTE *)0x6E6E415F6E6F6D6DLL
         && v47 == 0x6E656D65636E756FLL
         && v48 == 116;
      goto LABEL_54;
    }
LABEL_38:
    v17 = 0;
    goto LABEL_54;
  }
  v17 = v46 == (_BYTE *)25
     && *(_QWORD *)__p == 0x6F633A3A646E6573
     && *((_QWORD *)__p + 1) == 0x6E6E415F6E6F6D6DLL
     && *((_QWORD *)__p + 2) == 0x6E656D65636E756FLL
     && *((_BYTE *)__p + 24) == 116;
  operator delete(__p);
LABEL_54:
  siri::ontology::UsoGraph::getSuccessorsWithEdges(v13[1], (const UsoGraphNode *)v13);
  v25 = __p;
  if (!v17)
  {
    v10 = 0;
    goto LABEL_98;
  }
  if (v46 - (_BYTE *)__p != 16)
  {
    v10 = 1;
    goto LABEL_98;
  }
  (*(void (**)(void **__return_ptr))(**(_QWORD **)__p + 48))(v43);
  v26 = *((_QWORD *)__p + 1);
  if (*(char *)(v26 + 55) < 0)
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)(v26 + 32), *(_QWORD *)(v26 + 40));
  else
    v42 = *(std::string *)(v26 + 32);
  siri::ontology::UsoGraph::getSuccessors(v13[1], (const UsoGraphNode *)v13);
  v27 = *(_QWORD *)v40;
  v41 = v40;
  operator delete(v40);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)__p + 16))(*(_QWORD *)__p) != 2)
    goto LABEL_71;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v42.__r_.__value_.__l.__size_ != 6)
      goto LABEL_71;
    v28 = (std::string *)v42.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) != 6)
      goto LABEL_71;
    v28 = &v42;
  }
  data = (int)v28->__r_.__value_.__l.__data_;
  v30 = WORD2(v28->__r_.__value_.__r.__words[0]);
  if (data == 1735549300 && v30 == 29797)
  {
    v32 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v43, "common_Announcement");
    goto LABEL_72;
  }
LABEL_71:
  v32 = 0;
LABEL_72:
  siri::ontology::UsoGraph::getSuccessorsWithEdges(*(siri::ontology::UsoGraph **)(v27 + 8), (const UsoGraphNode *)v27);
  v33 = v40;
  if (v32)
  {
    if (v41 - (_BYTE *)v40 == 16)
    {
      (*(void (**)(void **__return_ptr))(**(_QWORD **)v40 + 48))(__s);
      v34 = *((_QWORD *)v40 + 1);
      if (*(char *)(v34 + 55) < 0)
        std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)(v34 + 32), *(_QWORD *)(v34 + 40));
      else
        v37 = *(std::string *)(v34 + 32);
      siri::ontology::UsoGraph::getSuccessors(*(siri::ontology::UsoGraph **)(v27 + 8), (const UsoGraphNode *)v27);
      v35 = *v36;
      operator delete(v36);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35) == 3
        && std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("content", &v37)
        && std::string::find[abi:ne180100](__s) != -1)
      {
        siri::ontology::UsoGraph::getSuccessors(*(siri::ontology::UsoGraph **)(v35 + 8), (const UsoGraphNode *)v35);
        v10 = 1;
        if (v36)
          operator delete(v36);
      }
      else
      {
        v10 = 0;
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      if (v39 < 0)
        operator delete(__s[0]);
      v33 = v40;
    }
    else
    {
      v10 = 1;
    }
  }
  else
  {
    v10 = 0;
  }
  if (v33)
  {
    v41 = v33;
    operator delete(v33);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (v44 < 0)
    operator delete(v43[0]);
  v25 = __p;
LABEL_98:
  if (v25)
  {
    v46 = v25;
    operator delete(v25);
  }
  v12 = v48;
  if (!v48)
    goto LABEL_31;
LABEL_30:
  v49 = v12;
  operator delete(v12);
LABEL_31:
  MEMORY[0x1C3BB916C](v50);
  v18 = v53;
  if (v53)
  {
    v19 = (unint64_t *)&v53->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  MEMORY[0x1C3BB83E0](v54);
  return v10;
}

void sub_1C2224D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,char a48)
{
  uint64_t v48;

  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a26)
    operator delete(a26);
  if (a34 < 0)
    operator delete(a29);
  if (a41 < 0)
    operator delete(a36);
  if (a42)
    operator delete(a42);
  if (a45)
    operator delete(a45);
  MEMORY[0x1C3BB916C](&a48);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v48 - 184);
  MEMORY[0x1C3BB83E0](v48 - 168);
  _Unwind_Resume(a1);
}

void sub_1C2224E10()
{
  JUMPOUT(0x1C2224DF8);
}

void sub_1C2224E18()
{
  JUMPOUT(0x1C2224E00);
}

void itfm_inference_orchestrator::context::Embedder::embed(_QWORD **a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t TokenId;
  float v9;
  char v10;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  float *v14;
  float *v15;
  float *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  NSObject *v22;
  _BOOL4 v23;
  uint64_t v24;
  float *v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  float *__p;
  float *v30;
  float *v31;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  __p = 0;
  v30 = 0;
  v31 = 0;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
  {
    v27 = 0;
  }
  else
  {
    do
    {
      v7 = itfm_inference_orchestrator::vocabulary::Vocabulary::numericalizeToken(*a1, v4);
      TokenId = itfm_inference_orchestrator::vocabulary::Vocabulary::getTokenId((uint64_t)*a1, *a1);
      v9 = (float)(unint64_t)v7;
      if (v10 && v9 == (float)(unint64_t)TokenId)
      {
        v11 = SNLPOSLoggerForCategory(2);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          v12 = *((int *)a1 + 4);
          if (v12 >= 8)
          {
            v22 = SNLPOSLoggerForCategory(4);
            v23 = os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
            v13 = "<UNDEFINED_COMPONENT>";
            if (v23)
            {
              *(_DWORD *)buf = 136315394;
              v33 = "<UNDEFINED_COMPONENT>";
              v34 = 2048;
              v35 = v12;
              _os_log_impl(&dword_1C2196000, v22, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
              v13 = "<UNDEFINED_COMPONENT>";
            }
          }
          else
          {
            v13 = off_1E7BED840[v12];
          }
          v24 = v4;
          if (*(char *)(v4 + 23) < 0)
            v24 = *(_QWORD *)v4;
          *(_DWORD *)buf = 136315394;
          v33 = v13;
          v34 = 2080;
          v35 = v24;
          _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEBUG, "[%s] Warning: cannot embed OOV token '%s'.\n", buf, 0x16u);
        }
      }
      else
      {
        v14 = v30;
        if (v30 >= v31)
        {
          v16 = __p;
          v17 = v30 - __p;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v19 = (char *)v31 - (char *)__p;
          if (((char *)v31 - (char *)__p) >> 1 > v18)
            v18 = v19 >> 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v31, v20);
            v16 = __p;
            v14 = v30;
          }
          else
          {
            v21 = 0;
          }
          v25 = (float *)&v21[4 * v17];
          *v25 = v9;
          v15 = v25 + 1;
          while (v14 != v16)
          {
            v26 = *((_DWORD *)v14-- - 1);
            *((_DWORD *)v25-- - 1) = v26;
          }
          __p = v25;
          v31 = (float *)&v21[4 * v20];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *v30 = v9;
          v15 = v30 + 1;
        }
        v30 = v15;
      }
      v4 += 24;
    }
    while (v4 != v5);
    v27 = v30 - __p;
  }
  v28 = operator new(0x10uLL);
  *v28 = 1;
  v28[1] = v27;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a3, v28, (uint64_t)(v28 + 2), 2uLL);
  a3[3] = 0;
  a3[4] = 0;
  a3[5] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a3 + 3, __p, (uint64_t)v30, v30 - __p);
  operator delete(v28);
  if (__p)
    operator delete(__p);
}

void sub_1C2225114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  void *v14;
  void *v16;

  v16 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v16;
    operator delete(v16);
  }
  operator delete(v14);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::matcher::SSUPersister::SSUPersister(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6)
{
  __int128 v7;
  std::string *v8;
  __int128 v9;

  *(_QWORD *)a1 = 5;
  v7 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v7;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v8 = (std::string *)(a1 + 80);
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v9 = *a6;
    v8->__r_.__value_.__r.__words[2] = *((_QWORD *)a6 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return a1;
}

void sub_1C2225210(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v5);
  _Unwind_Resume(a1);
}

void snlp::ssu::matcher::SSUPersister::removeCacheFilesForApp(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v6;
  char v7;
  __int128 v8;
  uint64_t v9;

  v5 = snlp::ssu::cache::SSUCacheDirectory::removeCacheFilesForApp(*(_QWORD *)(a1 + 32), a2);
  if ((v5 & 0xFF00000000) != 0)
  {
    v6 = v5;
    snlp::ssu::selflogging::buildAppBundleIdSaltedHash(a2, &v8);
    *(_OWORD *)a3 = v8;
    *(_QWORD *)(a3 + 16) = v9;
    *(_DWORD *)(a3 + 24) = v6;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    v7 = 1;
  }
  else
  {
    v7 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 56) = v7;
}

BOOL snlp::ssu::matcher::SSUPersister::clearCacheFilesOutsideLocale(snlp::ssu::matcher::SSUPersister *this)
{
  return snlp::ssu::cache::SSUCacheDirectory::clearCacheFilesOutsideLocale(*((snlp::ssu::cache::SSUCacheDirectory **)this + 4), (unsigned __int8 *)this + 8);
}

void snlp::ssu::matcher::SSUPersister::updateCacheForAppIfRequired(snlp::ssu::matcher::SSUPersister *this@<X0>, const snlp::ssu::matcher::SSUAppInfo *a2@<X1>, uint64_t a3@<X8>)
{
  const snlp::ssu::matcher::SSUAppInfo *v3;
  uint64_t v6;
  int v7;
  snlp::ssu::cache::SSUCacheDirectory *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  int v14;
  std::string::size_type v15;
  char *v16;
  int v17;
  _DWORD *v18;
  NSObject *v19;
  _BYTE *v20;
  _BYTE *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  unint64_t v31;
  char *v32;
  int v33;
  char *v34;
  char *v35;
  const snlp::ssu::matcher::SSUAppInfo *v36;
  std::string *v37;
  NSObject *v38;
  std::string::size_type v39;
  const char *v40;
  NSObject *v41;
  std::string::size_type v42;
  char *v43;
  const char *v44;
  NSObject *v45;
  uint32_t v46;
  const char *v47;
  __int128 v48;
  char v49;
  void *__p;
  _BYTE *v51;
  snlp::ssu::cache::SSUCacheDirectory *v52[2];
  std::string v53;
  const char *v54;
  _BYTE v55[24];
  std::string *v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  std::string buf;
  int v61;
  _BYTE v62[120];
  uint64_t v63;

  v3 = a2;
  v63 = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned __int8 *)a2 + 23);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a2 + 1);
  if (v6 != 53)
    goto LABEL_7;
  if (v7 < 0)
    a2 = *(const snlp::ssu::matcher::SSUAppInfo **)a2;
  if (!memcmp("com.apple.SiriNaturalLanguageParsing.SSUUserShortcuts", a2, 0x35uLL))
  {
    v19 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"com.apple.SiriNaturalLanguageParsing.SSUUserShortcuts";
      _os_log_impl(&dword_1C2196000, v19, OS_LOG_TYPE_ERROR, "Received an app bundle ID that clashes with the special user shortcuts one: %s. Call updateCacheForUserShortcutsIfRequired instead.", (uint8_t *)&buf, 0xCu);
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 56) = 0;
  }
  else
  {
LABEL_7:
    if ((snlp::ssu::matcher::SSUPersister::appRequiresUpdate(this, v3) & 1) != 0)
    {
      v8 = (snlp::ssu::cache::SSUCacheDirectory *)*((_QWORD *)this + 5);
      v52[0] = *((snlp::ssu::cache::SSUCacheDirectory **)this + 4);
      v52[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)((char *)v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      snlp::ssu::app::SSUAppAssets::loadAssetsFromDirectory((uint64_t)v3, (const void **)this + 1, v52, (uint64_t)&buf);
      if (v8)
      {
        v11 = (unint64_t *)((char *)v8 + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          (*(void (**)(snlp::ssu::cache::SSUCacheDirectory *))(*(_QWORD *)v8 + 16))(v8);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
        }
      }
      if ((_BYTE)v61)
      {
        v13 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          if (!(_BYTE)v61)
            std::__throw_bad_optional_access[abi:ne180100]();
          v14 = *((char *)v3 + 23);
          v15 = *(_QWORD *)v3;
          v16 = (char *)*((_QWORD *)v3 + 3);
          v17 = *((char *)v3 + 47);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v53, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
          else
            v53 = buf;
          if (v17 >= 0)
            v35 = (char *)v3 + 24;
          else
            v35 = v16;
          if (v14 >= 0)
            v36 = v3;
          else
            v36 = (const snlp::ssu::matcher::SSUAppInfo *)v15;
          v37 = &v53;
          *(_DWORD *)v55 = 136315650;
          if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v37 = (std::string *)v53.__r_.__value_.__r.__words[0];
          *(_QWORD *)&v55[4] = v36;
          *(_WORD *)&v55[12] = 2080;
          *(_QWORD *)&v55[14] = v35;
          *(_WORD *)&v55[22] = 2080;
          v56 = v37;
          _os_log_impl(&dword_1C2196000, v13, OS_LOG_TYPE_DEBUG, "Could not read app assets for %s (path %s): %s", v55, 0x20u);
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v53.__r_.__value_.__l.__data_);
        }
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 56) = 0;
      }
      else
      {
        if (!v62[112])
          std::__throw_bad_optional_access[abi:ne180100]();
        snlp::ssu::app::SSUAppAssets::allSupportedCategories((snlp::ssu::app::SSUAppAssets *)v62, (unsigned __int8 **)&__p);
        v20 = __p;
        v21 = v51;
        if (__p == v51)
        {
          v22 = 0;
          v23 = 0;
LABEL_52:
          if (v20)
            operator delete(v20);
          if (v22 == v23)
          {
            v33 = 0;
          }
          else
          {
            v33 = 0;
            v34 = v22;
            do
            {
              if (*((_DWORD *)v34 + 3) == 3)
                ++v33;
              v34 += 16;
            }
            while (v34 != v23);
          }
          snlp::ssu::selflogging::buildAppBundleIdSaltedHash((char *)v3, v55);
          LODWORD(v56) = v33;
          v57 = 0uLL;
          v58 = 0;
          std::vector<snlp::ssu::selflogging::SSUBackgroundUpdateAppCategoryInfo>::__init_with_size[abi:ne180100]<snlp::ssu::selflogging::SSUBackgroundUpdateAppCategoryInfo*,snlp::ssu::selflogging::SSUBackgroundUpdateAppCategoryInfo*>(&v57, v22, (uint64_t)v23, (v23 - v22) >> 4);
          *(_OWORD *)a3 = *(_OWORD *)v55;
          *(_QWORD *)(a3 + 16) = *(_QWORD *)&v55[16];
          *(_DWORD *)(a3 + 24) = (_DWORD)v56;
          *(_OWORD *)(a3 + 32) = v57;
          *(_QWORD *)(a3 + 48) = v58;
          *(_BYTE *)(a3 + 56) = 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v25 = *v20;
            snlp::ssu::matcher::SSUPersister::loadAppAssets((uint64_t)v3, (uint64_t)v62, *v20, (uint64_t)v55);
            if (!v59)
            {
              v38 = SNLPOSLoggerForCategory(8);
              if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
                goto LABEL_94;
              if (*((char *)v3 + 23) >= 0)
                v39 = (std::string::size_type)v3;
              else
                v39 = *(_QWORD *)v3;
              if (v25 <= 3u)
                v40 = EnumNamesSSUCategoryType(void)::names[v25];
              else
                v40 = "";
              LODWORD(v53.__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)v53.__r_.__value_.__r.__words + 4) = v39;
              WORD2(v53.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&v53.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v40;
              v44 = "Failed to load app assets for app %s and category %s";
              v45 = v38;
              v46 = 22;
              goto LABEL_93;
            }
            snlp::ssu::matcher::SSUPersister::updateCacheForAppCategory((snlp::ssu::app::SSULoadedAppAssets *)v55, (uint64_t)this, (char *)v3, (char)v25, (uint64_t)&v48);
            if (!v49)
              break;
            if ((unint64_t)v23 >= v24)
            {
              v26 = (v23 - v22) >> 4;
              v27 = v26 + 1;
              if ((unint64_t)(v26 + 1) >> 60)
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(v24 - (_QWORD)v22) >> 3 > v27)
                v27 = (uint64_t)(v24 - (_QWORD)v22) >> 3;
              if (v24 - (unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
                v28 = 0xFFFFFFFFFFFFFFFLL;
              else
                v28 = v27;
              if (v28)
                v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v28);
              else
                v29 = 0;
              v30 = (_OWORD *)(v28 + 16 * v26);
              *v30 = v48;
              if (v23 == v22)
              {
                v32 = (char *)(v28 + 16 * v26);
              }
              else
              {
                v31 = v28 + 16 * v26;
                do
                {
                  v32 = (char *)(v31 - 16);
                  *(_OWORD *)(v31 - 16) = *((_OWORD *)v23 - 1);
                  v23 -= 16;
                  v31 -= 16;
                }
                while (v23 != v22);
              }
              v24 = v28 + 16 * v29;
              v23 = (char *)(v30 + 1);
              if (v22)
                operator delete(v22);
              v22 = v32;
            }
            else
            {
              *(_OWORD *)v23 = v48;
              v23 += 16;
            }
            std::__optional_destruct_base<snlp::ssu::app::SSULoadedAppAssets,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v55);
            if (++v20 == v21)
            {
              v20 = __p;
              goto LABEL_52;
            }
          }
          v41 = SNLPOSLoggerForCategory(8);
          if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
            goto LABEL_94;
          if (*((char *)v3 + 23) >= 0)
            v42 = (std::string::size_type)v3;
          else
            v42 = *(_QWORD *)v3;
          if (*((char *)this + 31) < 0)
            v43 = (char *)*((_QWORD *)this + 1);
          else
            v43 = (char *)this + 8;
          if (v25 <= 3u)
            v47 = EnumNamesSSUCategoryType(void)::names[v25];
          else
            v47 = "";
          LODWORD(v53.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)v53.__r_.__value_.__r.__words + 4) = v42;
          WORD2(v53.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v53.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v43;
          HIWORD(v53.__r_.__value_.__r.__words[2]) = 2080;
          v54 = v47;
          v44 = "Error updating cache for app %s, locale %s, category %s. Aborting further processing for app.";
          v45 = v41;
          v46 = 32;
LABEL_93:
          _os_log_impl(&dword_1C2196000, v45, OS_LOG_TYPE_ERROR, v44, (uint8_t *)&v53, v46);
LABEL_94:
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 56) = 0;
          std::__optional_destruct_base<snlp::ssu::app::SSULoadedAppAssets,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v55);
          if (__p)
            operator delete(__p);
        }
        if (v22)
          operator delete(v22);
      }
      std::__optional_destruct_base<snlp::ssu::app::SSUAppAssets,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v62);
      if ((_BYTE)v61)
      {
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      snlp::ssu::selflogging::buildAppBundleIdSaltedHash((char *)v3, &buf);
      v61 = 0;
      memset(v62, 0, 24);
      v18 = operator new(0x10uLL);
      *(_WORD *)v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
      v18[3] = 1;
      *(std::string *)a3 = buf;
      *(_DWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = v18;
      *(_QWORD *)(a3 + 40) = v18 + 4;
      *(_QWORD *)(a3 + 48) = v18 + 4;
      *(_BYTE *)(a3 + 56) = 1;
    }
  }
}

void sub_1C222593C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a28 < 0)
    operator delete(__p);
  if (v47)
    operator delete(v47);
  snlp::ssu::utilities::SSUResultOpt<snlp::ssu::app::SSUAppAssets>::~SSUResultOpt((uint64_t)&a42);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::matcher::SSUPersister::appRequiresUpdate(snlp::ssu::matcher::SSUPersister *this, const snlp::ssu::matcher::SSUAppInfo *a2)
{
  const snlp::ssu::matcher::SSUAppInfo *v2;
  unsigned __int8 **v4;
  std::string::size_type size;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  std::string *p_s1;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  char v16;
  NSObject *v17;
  NSObject *v18;
  std::string *p_p;
  uint64_t v20;
  std::string *p_buf;
  std::string __s1;
  const void *v24;
  char v25;
  std::string __p;
  std::string buf;
  std::string *v28;
  uint64_t v29;

  v2 = a2;
  v29 = *MEMORY[0x1E0C80C00];
  snlp::ssu::matcher::SSUPersister::lookupExistingCacheVersion((uint64_t)this, (char *)a2, &__s1);
  if (!v25)
  {
LABEL_35:
    v20 = 1;
    goto LABEL_36;
  }
  v4 = (unsigned __int8 **)((char *)this + 80);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    size = __s1.__r_.__value_.__l.__size_;
  v6 = *((unsigned __int8 *)this + 103);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)this + 11);
  if (size == v6)
  {
    if (v7 >= 0)
      v8 = (unsigned __int8 *)this + 80;
    else
      v8 = *v4;
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v14 = memcmp(__s1.__r_.__value_.__l.__data_, v8, __s1.__r_.__value_.__l.__size_) != 0;
    }
    else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    {
      v9 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
      p_s1 = &__s1;
      do
      {
        v12 = p_s1->__r_.__value_.__s.__data_[0];
        p_s1 = (std::string *)((char *)p_s1 + 1);
        v11 = v12;
        v13 = *v8++;
        v14 = v11 != v13;
      }
      while (v11 == v13 && v9-- != 0);
    }
    else
    {
      v14 = 0;
    }
  }
  else
  {
    v14 = 1;
  }
  v16 = v14 | !snlp::ssu::app::SSUAppAssets::directoryHasAssetVersion((uint64_t)v2 + 24, (const void **)this + 1, &v24);
  v17 = SNLPOSLoggerForCategory(8);
  v18 = v17;
  if ((v16 & 1) != 0)
  {
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)v2 + 23) < 0)
        v2 = *(const snlp::ssu::matcher::SSUAppInfo **)v2;
      if (*((char *)this + 103) < 0)
        v4 = (unsigned __int8 **)*v4;
      if (!v25)
        std::__throw_bad_optional_access[abi:ne180100]();
      snlp::ssu::cache::SSUCacheFileVersion::toString(&__p, (uint64_t)&__s1);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v2;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v4;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      v28 = p_p;
      _os_log_impl(&dword_1C2196000, v18, OS_LOG_TYPE_DEBUG, "App assets for %s have an out-of-date cache file (current encoder version=%s, cache version is %s)", (uint8_t *)&buf, 0x20u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_35;
  }
  v20 = 0;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)v2 + 23) < 0)
      v2 = *(const snlp::ssu::matcher::SSUAppInfo **)v2;
    if (!v25)
      std::__throw_bad_optional_access[abi:ne180100]();
    snlp::ssu::cache::SSUCacheFileVersion::toString(&buf, (uint64_t)&__s1);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v2;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_buf;
    _os_log_impl(&dword_1C2196000, v18, OS_LOG_TYPE_DEFAULT, "App assets for %s already have an up-to-date cache file with version %s", (uint8_t *)&__p, 0x16u);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    v20 = 0;
  }
LABEL_36:
  std::__optional_destruct_base<snlp::ssu::cache::SSUCacheFileVersion,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__s1);
  return v20;
}

void sub_1C2225C78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__optional_destruct_base<snlp::ssu::cache::SSUCacheFileVersion,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void snlp::ssu::matcher::SSUPersister::loadAppAssets(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned __int8 a3@<W3>, uint64_t a4@<X8>)
{
  __int128 *v8;
  __int128 *v9;
  unint64_t v10;
  std::string v11;
  unsigned __int8 v12;
  std::string __p;
  __int128 *v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  std::string v18;
  __int128 **v19;

  if (*(char *)(a2 + 95) < 0)
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  else
    v18 = *(std::string *)(a2 + 72);
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v11 = *(std::string *)a1;
  v12 = a3;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  else
    __p = v18;
  snlp::ssu::app::SSUAppAssets::loadNegativeExamples(a2, a3, (uint64_t)&v14);
  snlp::ssu::app::SSUAppAssets::loadPositiveExamples(a2, a3, &v16);
  *(_DWORD *)a4 = 0;
  *(_BYTE *)(a4 + 4) = 0;
  *(std::string *)(a4 + 8) = v11;
  memset(&v11, 0, sizeof(v11));
  *(_BYTE *)(a4 + 32) = v12;
  *(std::string *)(a4 + 40) = __p;
  memset(&__p, 0, sizeof(__p));
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 72) = 0;
  v8 = v14;
  v9 = v15;
  v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v14) >> 3);
  *(_QWORD *)(a4 + 80) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a4 + 64), v8, v9, v10);
  *(_QWORD *)(a4 + 88) = 0;
  *(_QWORD *)(a4 + 96) = 0;
  *(_QWORD *)(a4 + 104) = 0;
  std::vector<snlp::ssu::app::SSUAppIntent>::__init_with_size[abi:ne180100]<snlp::ssu::app::SSUAppIntent*,snlp::ssu::app::SSUAppIntent*>((_QWORD *)(a4 + 88), v16, v17, 0x8E38E38E38E38E39 * ((v17 - v16) >> 3));
  *(_BYTE *)(a4 + 112) = 1;
  v19 = (__int128 **)&v16;
  std::vector<snlp::ssu::app::SSUAppIntent>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  v19 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
}

void sub_1C2225E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v22 - 73) < 0)
    operator delete(*(void **)(v22 - 96));
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<snlp::ssu::app::SSULoadedAppAssets,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 112))
  {
    v3 = (void **)(a1 + 88);
    std::vector<snlp::ssu::app::SSUAppIntent>::__destroy_vector::operator()[abi:ne180100](&v3);
    v3 = (void **)(a1 + 64);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    if (*(char *)(a1 + 63) < 0)
      operator delete(*(void **)(a1 + 40));
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void snlp::ssu::matcher::SSUPersister::updateCacheForAppCategory(snlp::ssu::app::SSULoadedAppAssets *a1@<X2>, uint64_t a2@<X0>, char *a3@<X1>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  int v10;
  _QWORD *v11;
  unsigned __int16 inserted;
  NSObject *v13;
  const std::__fs::filesystem::path *v14;
  char *v15;
  char *v16;
  std::string *v17;
  char v18;
  int v19;
  std::string v20;
  std::string __p;
  std::string v22;
  std::string v23;
  uint64_t v24;
  char v25;
  uint8_t buf[4];
  char *v27;
  __int16 v28;
  _QWORD *v29;
  __int16 v30;
  char *v31;
  __int16 v32;
  std::string *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  snlp::ssu::matcher::SSUPersister::writeTemporaryCacheFile((snlp::ssu::matcher::SSUPersister *)a2, a1, &v23);
  if (!v25)
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 16) = 0;
    return;
  }
  v10 = SHIBYTE(v23.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v22, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
  else
    v22 = v23;
  if (*(char *)(a2 + 103) < 0)
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(a2 + 80), *(_QWORD *)(a2 + 88));
  else
    v20 = *(std::string *)(a2 + 80);
  if (*((char *)a1 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a1 + 5), *((_QWORD *)a1 + 6));
  else
    __p = *(std::string *)((char *)a1 + 40);
  v11 = (_QWORD *)(a2 + 8);
  inserted = snlp::ssu::cache::SSUCacheDirectory::insertCacheFile(*(_QWORD *)(a2 + 32), (char *)(a2 + 8), a3, (uint64_t)&v20, a4, (uint64_t)&v22);
  if (inserted > 0xFFu)
  {
    if ((_BYTE)inserted)
      v19 = 3;
    else
      v19 = 2;
    *(_BYTE *)a5 = *((_BYTE *)a1 + 32);
    v18 = 1;
    *(_BYTE *)(a5 + 1) = 1;
    *(_QWORD *)(a5 + 4) = v24;
    *(_DWORD *)(a5 + 12) = v19;
  }
  else
  {
    v13 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      if (a3[23] >= 0)
        v15 = a3;
      else
        v15 = *(char **)a3;
      if (*(char *)(a2 + 31) < 0)
        v11 = (_QWORD *)*v11;
      if (*((char *)a1 + 63) >= 0)
        v16 = (char *)a1 + 40;
      else
        v16 = (char *)*((_QWORD *)a1 + 5);
      v17 = &v22;
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v17 = (std::string *)v22.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      v27 = v15;
      v28 = 2080;
      v29 = v11;
      v30 = 2080;
      v31 = v16;
      v32 = 2080;
      v33 = v17;
      _os_log_impl(&dword_1C2196000, v13, OS_LOG_TYPE_ERROR, "Error inserting cache file for app %s, locale %s, version %s (temporary path %s)", buf, 0x2Au);
    }
    snlp::ssu::matcher::SSUPersister::cleanUpTemporaryCacheFile((const std::__fs::filesystem::path *)&v22, v14);
    v18 = 0;
    *(_BYTE *)a5 = 0;
  }
  *(_BYTE *)(a5 + 16) = v18;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v10 & 0x80000000) == 0)
      return;
LABEL_38:
    operator delete(v23.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  if (v10 < 0)
    goto LABEL_38;
}

void sub_1C222623C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24)
{
  int v24;

  if (a14 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (v24 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t snlp::ssu::utilities::SSUResultOpt<snlp::ssu::app::SSUAppAssets>::~SSUResultOpt(uint64_t a1)
{
  std::__optional_destruct_base<snlp::ssu::app::SSUAppAssets,false>::~__optional_destruct_base[abi:ne180100](a1 + 32);
  if (*(_BYTE *)(a1 + 24) && *(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void snlp::ssu::matcher::SSUPersister::writeTemporaryCacheFile(snlp::ssu::matcher::SSUPersister *this@<X0>, const snlp::ssu::app::SSULoadedAppAssets *a2@<X1>, std::string *a3@<X8>)
{
  unint64_t v6;
  char v7;
  const std::__fs::filesystem::path *v8;
  std::string v9;
  __int128 v10;
  uint64_t v11;
  std::string __p;
  __int128 v13;
  uint64_t v14;

  snlp::ssu::matcher::SSUPersister::buildIntentList((uint64_t)a2, (uint64_t *)&v13);
  snlp::ssu::cache::SSUCacheDirectory::buildTemporaryCacheFilePath(*((snlp::ssu::cache::SSUCacheDirectory **)this + 4), (const void **)this + 1, (uint64_t)a2 + 40, &__p);
  v10 = v13;
  v11 = v14;
  v14 = 0;
  v13 = 0uLL;
  v6 = snlp::ssu::matcher::SSUPersister::writeTemporaryCacheFileInner((std::vector<std::string>::size_type *)this, &v10, a2, (__int128 *)&__p);
  LOBYTE(this) = v7;
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  if ((_BYTE)this)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v9 = __p;
    *a3 = v9;
    a3[1].__r_.__value_.__r.__words[0] = v6;
    a3[1].__r_.__value_.__s.__data_[8] = 1;
  }
  else
  {
    snlp::ssu::matcher::SSUPersister::cleanUpTemporaryCacheFile((const std::__fs::filesystem::path *)&__p, v8);
    a3->__r_.__value_.__s.__data_[0] = 0;
    a3[1].__r_.__value_.__s.__data_[8] = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
}

void sub_1C22263F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  a9 = v21 - 64;
  std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

std::__fs::filesystem::file_status snlp::ssu::matcher::SSUPersister::cleanUpTemporaryCacheFile(const std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2)
{
  NSObject *v3;
  std::__fs::filesystem::file_status result;
  unsigned __int8 v5;
  uint8_t buf[24];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C2196000, v3, OS_LOG_TYPE_DEBUG, "Cleaning up by removing temporary file", buf, 2u);
  }
  result = std::__fs::filesystem::__status(this, 0);
  if (v5)
  {
    if (v5 != 255)
      return (std::__fs::filesystem::file_status)std::__fs::filesystem::__remove(this, 0);
  }
  return result;
}

void snlp::ssu::matcher::SSUPersister::buildIntentList(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  __int128 v10;
  std::string::size_type v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  __int128 v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t *v31;
  __int128 *v32;
  std::string v33;
  std::string __p;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  std::string *p_p;
  std::string *v39;
  std::string *v40;
  unint64_t v41;
  unint64_t *v42;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::reserve(a2, 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 3));
  v4 = *(__int128 **)(a1 + 88);
  v32 = *(__int128 **)(a1 + 96);
  if (v4 != v32)
  {
    v30 = (unint64_t *)(a2 + 2);
    v31 = a2;
    do
    {
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v5 = (__int128 *)*((_QWORD *)v4 + 3);
      v6 = (__int128 *)*((_QWORD *)v4 + 4);
      while (v5 != v6)
      {
        if (*((char *)v5 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
        }
        else
        {
          v7 = *v5;
          v33.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
          *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v7;
        }
        if (*((char *)v5 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v5 + 3), *((_QWORD *)v5 + 4));
        }
        else
        {
          v8 = *(__int128 *)((char *)v5 + 24);
          __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 5);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        v9 = v36;
        if (v36 >= v37)
        {
          v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - v35) >> 4);
          v13 = v12 + 1;
          if (v12 + 1 > 0x555555555555555)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v37 - v35) >> 4) > v13)
            v13 = 0x5555555555555556 * ((uint64_t)(v37 - v35) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - v35) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v14 = 0x555555555555555;
          else
            v14 = v13;
          v42 = &v37;
          if (v14)
            v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(v14);
          else
            v15 = 0;
          v16 = v14 + 48 * v12;
          p_p = (std::string *)v14;
          v39 = (std::string *)v16;
          v41 = v14 + 48 * v15;
          v17 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
          *(_QWORD *)(v16 + 16) = *((_QWORD *)&v33.__r_.__value_.__l + 2);
          *(_OWORD *)v16 = v17;
          memset(&v33, 0, sizeof(v33));
          v18 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v16 + 40) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)(v16 + 24) = v18;
          memset(&__p, 0, sizeof(__p));
          v40 = (std::string *)(v16 + 48);
          std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::__swap_out_circular_buffer(&v35, &p_p);
          v19 = v36;
          std::__split_buffer<snlp::ssu::cache::SSUCacheObjectParameter>::~__split_buffer((uint64_t)&p_p);
          v36 = v19;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else
        {
          v10 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
          *(_QWORD *)(v36 + 16) = *((_QWORD *)&v33.__r_.__value_.__l + 2);
          *(_OWORD *)v9 = v10;
          memset(&v33, 0, sizeof(v33));
          v11 = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)(v9 + 24) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v9 + 40) = v11;
          memset(&__p, 0, sizeof(__p));
          v36 = v9 + 48;
        }
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v33.__r_.__value_.__l.__data_);
        v5 += 3;
      }
      if (*((char *)v4 + 23) < 0)
      {
        v21 = v31;
        std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
      }
      else
      {
        v20 = *v4;
        v33.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v20;
        v21 = v31;
      }
      memset(&__p, 0, sizeof(__p));
      std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::__init_with_size[abi:ne180100]<snlp::ssu::cache::SSUCacheObjectParameter*,snlp::ssu::cache::SSUCacheObjectParameter*>(&__p, v35, v36, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - v35) >> 4));
      v23 = v21[1];
      v22 = v21[2];
      if (v23 >= v22)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *v21) >> 4);
        v26 = v25 + 1;
        if (v25 + 1 > 0x555555555555555)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v21) >> 4);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x2AAAAAAAAAAAAAALL)
          v28 = 0x555555555555555;
        else
          v28 = v26;
        v42 = v30;
        if (v28)
          v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(v28);
        else
          v29 = 0;
        p_p = (std::string *)v28;
        v39 = (std::string *)(v28 + 48 * v25);
        v40 = v39;
        v41 = v28 + 48 * v29;
        std::allocator<snlp::ssu::cache::SSUCacheObjectIntent>::construct[abi:ne180100]<snlp::ssu::cache::SSUCacheObjectIntent,snlp::ssu::cache::SSUCacheObjectIntent&>(v39, (__int128 *)&v33);
        v40 += 2;
        std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__swap_out_circular_buffer(v21, &p_p);
        v24 = v21[1];
        std::__split_buffer<snlp::ssu::cache::SSUCacheObjectIntent>::~__split_buffer((uint64_t)&p_p);
      }
      else
      {
        std::allocator<snlp::ssu::cache::SSUCacheObjectIntent>::construct[abi:ne180100]<snlp::ssu::cache::SSUCacheObjectIntent,snlp::ssu::cache::SSUCacheObjectIntent&>((std::string *)v21[1], (__int128 *)&v33);
        v24 = v23 + 48;
        v21[1] = v23 + 48;
      }
      v21[1] = v24;
      p_p = &__p;
      std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
      std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
      v4 = (__int128 *)((char *)v4 + 72);
    }
    while (v4 != v32);
  }
}

void sub_1C222693C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

unint64_t snlp::ssu::matcher::SSUPersister::writeTemporaryCacheFileInner(std::vector<std::string>::size_type *a1, __int128 *a2, const snlp::ssu::app::SSULoadedAppAssets *a3, __int128 *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::vector<std::string>::size_type v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;

  v8 = *((_QWORD *)a3 + 11);
  v9 = *((_QWORD *)a3 + 12);
  if (v8 == v9)
  {
    v10 = 0;
  }
  else
  {
    LODWORD(v10) = 0;
    do
    {
      v10 = v10 - 1431655765 * ((*(_QWORD *)(v8 + 56) - *(_QWORD *)(v8 + 48)) >> 3);
      v8 += 72;
    }
    while (v8 != v9);
  }
  v11 = *a1;
  v13 = *((_QWORD *)a3 + 8);
  v12 = *((_QWORD *)a3 + 9);
  v14 = (std::string *)operator new();
  snlp::ssu::cache::SSUCacheFileWriteStream::SSUCacheFileWriteStream(v14, a4, a2, (v11 - 1 - 0x5555555555555555 * ((v12 - v13) >> 3)) / v11, (v11 - 1 + v10) / v11, 0);
  v15 = snlp::ssu::matcher::SSUPersister::writeNegativeExamplesLoop(a1, (snlp::ssu::cache::SSUCacheFileWriteStream *)v14, a3);
  if (HIDWORD(v15)
    && (v16 = snlp::ssu::matcher::SSUPersister::writePositiveExamplesLoop(a1, v14, a3), v17 = v16, HIDWORD(v16))
    && snlp::ssu::matcher::SSUPersister::writeDebugInformation(a1, (uint64_t)v14, (uint64_t)a3))
  {
    v18 = v17 & 0xFFFFFF00 | (v15 << 32);
    v19 = v17;
  }
  else
  {
    v19 = 0;
    v18 = 0;
  }
  std::default_delete<snlp::ssu::cache::SSUCacheFileWriteStream>::operator()[abi:ne180100]((uint64_t)v14);
  return v18 | v19;
}

void sub_1C2226B64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::default_delete<snlp::ssu::cache::SSUCacheFileWriteStream>::operator()[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C2226B80(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, int a10, __int16 a11, __int16 a12, uint64_t *a13, __int128 a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;

  MEMORY[0x1C3BB9B44](v17, 0x10F2C408EB745A8);
  if (a2 == 1)
  {
    v20 = __cxa_begin_catch(a1);
    v21 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v24 = *(_QWORD *)(v14 + 8);
      v23 = v14 + 8;
      v22 = v24;
      if (*(char *)(v23 + 23) >= 0)
        v25 = v23;
      else
        v25 = v22;
      v26 = (_QWORD *)(v15 + 8);
      if (*(char *)(v15 + 31) < 0)
        v26 = (_QWORD *)*v26;
      if (*((char *)v16 + 23) >= 0)
        v27 = v16;
      else
        v27 = (uint64_t *)*v16;
      v28 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 16))(v20);
      LODWORD(a9) = 136315906;
      *(_QWORD *)((char *)&a9 + 4) = v25;
      WORD6(a9) = 2080;
      *(_QWORD *)((char *)&a9 + 14) = v26;
      a12 = 2080;
      a13 = v27;
      LOWORD(a14) = 2080;
      *(_QWORD *)((char *)&a14 + 2) = v28;
      _os_log_impl(&dword_1C2196000, v21, OS_LOG_TYPE_ERROR, "Error opening cache file write stream for app %s, locale %s (temporary path %s): %s", (uint8_t *)&a9, 0x2Au);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C2226B20);
  }
  JUMPOUT(0x1C2226B78);
}

void sub_1C2226C7C()
{
  JUMPOUT(0x1C2226B78);
}

void std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<snlp::ssu::cache::SSUCacheObjectIntent>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<snlp::ssu::cache::SSUCacheObjectIntent>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::default_delete<snlp::ssu::cache::SSUCacheFileWriteStream>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<boost::archive::binary_oarchive,boost::archive::text_oarchive>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)(a1 + 592));
  v2 = MEMORY[0x1E0DE4F48];
  v3 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)(a1 + 24) = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)(a1 + 24 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1C3BB970C](a1 + 32);
  std::ostream::~ostream();
  MEMORY[0x1C3BB9A90](a1 + 440);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t snlp::ssu::matcher::SSUPersister::writeNegativeExamplesLoop(std::vector<std::string>::size_type *this, snlp::ssu::cache::SSUCacheFileWriteStream *a2, const snlp::ssu::app::SSULoadedAppAssets *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  std::vector<std::string>::pointer end;
  __int128 v10;
  std::string *v11;
  std::vector<std::string>::pointer v12;
  std::vector<std::string>::pointer begin;
  int64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  std::vector<std::string> v19;
  std::vector<std::string> *v20;

  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::reserve(&v19, *this);
  v6 = *((_QWORD *)a3 + 8);
  v7 = *((_QWORD *)a3 + 9);
  if (v6 == v7)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      end = v19.__end_;
      if (v19.__end_ >= v19.__end_cap_.__value_)
      {
        v11 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v19, (__int128 *)v6);
      }
      else
      {
        if (*(char *)(v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v19.__end_, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
        }
        else
        {
          v10 = *(_OWORD *)v6;
          v19.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
        }
        v11 = end + 1;
      }
      v19.__end_ = v11;
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (char *)v19.__begin_) >> 3) == *this)
      {
        if ((snlp::ssu::matcher::SSUPersister::writeSingleBatchNegative((uint64_t)this, (uint64_t)a2, (uint64_t *)&v19) & 1) == 0)
          goto LABEL_19;
        begin = v19.__begin_;
        v12 = v19.__end_;
        std::vector<std::string>::resize(&v19, 0);
        v8 -= 1431655765 * ((unint64_t)((char *)v12 - (char *)begin) >> 3);
      }
      v6 += 24;
    }
    while (v6 != v7);
  }
  v14 = (char *)v19.__end_ - (char *)v19.__begin_;
  if (v19.__end_ != v19.__begin_)
  {
    if ((snlp::ssu::matcher::SSUPersister::writeSingleBatchNegative((uint64_t)this, (uint64_t)a2, (uint64_t *)&v19) & 1) == 0)
    {
LABEL_19:
      v16 = 0;
      v17 = 0;
      v15 = 0;
      goto LABEL_20;
    }
    v8 -= 1431655765 * (v14 >> 3);
  }
  v15 = v8 & 0xFFFFFF00;
  v16 = v8;
  v17 = 0x100000000;
LABEL_20:
  v20 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  return v17 | v15 | v16;
}

void sub_1C2226F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::matcher::SSUPersister::writePositiveExamplesLoop(std::vector<std::string>::size_type *this, std::string *a2, const snlp::ssu::app::SSULoadedAppAssets *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  _OWORD *v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::string *v13;
  std::__split_buffer<std::string>::pointer end;
  __int128 v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  _BYTE v33[25];
  _BYTE v34[32];
  __int128 v35;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  std::__split_buffer<std::string> __v;

  v5 = *((_QWORD *)a3 + 11);
  v6 = *((_QWORD *)a3 + 12);
  v36[0] = v5;
  v36[1] = v6;
  v36[2] = v5;
  if (v5 == v6)
  {
    LOBYTE(v37) = 0;
    LOBYTE(v38) = 0;
  }
  else
  {
    v37 = *(_QWORD *)(v5 + 48);
    v38 = 1;
  }
  v35 = 0u;
  memset(v34, 0, sizeof(v34));
  std::vector<std::string>::reserve((std::vector<std::string> *)v34, *this);
  std::vector<unsigned long>::reserve((void **)&v34[24], *this);
  snlp::ssu::app::SSUAppExamplesPositiveIterable::getNext((uint64_t)v36, (uint64_t)v33);
  if (v33[24])
  {
    v7 = 0;
    do
    {
      v8 = *(_OWORD **)&v34[8];
      if (*(_QWORD *)&v34[8] >= *(_QWORD *)&v34[16])
      {
        v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v34[8] - *(_QWORD *)v34) >> 3);
        v11 = v10 + 1;
        if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v34[16] - *(_QWORD *)v34) >> 3) > v11)
          v11 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v34[16] - *(_QWORD *)v34) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v34[16] - *(_QWORD *)v34) >> 3) >= 0x555555555555555)
          v12 = 0xAAAAAAAAAAAAAAALL;
        else
          v12 = v11;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v34[16];
        if (v12)
          v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)&v34[16], v12);
        else
          v13 = 0;
        end = v13 + v10;
        __v.__first_ = v13;
        __v.__begin_ = end;
        __v.__end_ = end;
        __v.__end_cap_.__value_ = &v13[v12];
        if (*(char *)(*(_QWORD *)&v33[16] + 23) < 0)
        {
          std::string::__init_copy_ctor_external(end, **(const std::string::value_type ***)&v33[16], *(_QWORD *)(*(_QWORD *)&v33[16] + 8));
          end = __v.__end_;
        }
        else
        {
          v15 = **(_OWORD **)&v33[16];
          end->__r_.__value_.__r.__words[2] = *(_QWORD *)(*(_QWORD *)&v33[16] + 16);
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v15;
        }
        __v.__end_ = end + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v34, &__v);
        v16 = *(_QWORD *)&v34[8];
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        *(_QWORD *)&v34[8] = v16;
        if (!v33[24])
          std::__throw_bad_optional_access[abi:ne180100]();
      }
      else
      {
        if (*(char *)(*(_QWORD *)&v33[16] + 23) < 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)&v34[8], **(const std::string::value_type ***)&v33[16], *(_QWORD *)(*(_QWORD *)&v33[16] + 8));
        }
        else
        {
          v9 = **(_OWORD **)&v33[16];
          *(_QWORD *)(*(_QWORD *)&v34[8] + 16) = *(_QWORD *)(*(_QWORD *)&v33[16] + 16);
          *v8 = v9;
        }
        *(_QWORD *)&v34[8] = (char *)v8 + 24;
      }
      v17 = (char *)v35;
      if ((unint64_t)v35 >= *((_QWORD *)&v35 + 1))
      {
        v19 = *(char **)&v34[24];
        v20 = (uint64_t)(v35 - *(_QWORD *)&v34[24]) >> 3;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v22 = *((_QWORD *)&v35 + 1) - *(_QWORD *)&v34[24];
        if ((uint64_t)(*((_QWORD *)&v35 + 1) - *(_QWORD *)&v34[24]) >> 2 > v21)
          v21 = v22 >> 2;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v35 + 8, v23);
          v19 = *(char **)&v34[24];
          v17 = (char *)v35;
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[8 * v20];
        *(_QWORD *)v25 = *(_QWORD *)v33;
        v18 = v25 + 8;
        while (v17 != v19)
        {
          v26 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *((_QWORD *)v25 - 1) = v26;
          v25 -= 8;
        }
        *(_QWORD *)&v34[24] = v25;
        *(_QWORD *)&v35 = v18;
        *((_QWORD *)&v35 + 1) = &v24[8 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_QWORD *)v35 = *(_QWORD *)v33;
        v18 = v17 + 8;
      }
      *(_QWORD *)&v35 = v18;
      v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v34[8] - *(_QWORD *)v34) >> 3);
      if (v27 == *this)
      {
        if ((snlp::ssu::matcher::SSUPersister::writeSingleBatchPositive((snlp::ssu::matcher::SSUPersister *)this, a2, (const snlp::ssu::matcher::BatchData *)v34) & 1) == 0)goto LABEL_50;
        std::vector<std::string>::resize((std::vector<std::string> *)v34, 0);
        std::vector<unsigned long>::resize((uint64_t)&v34[24], 0);
        v7 += v27;
      }
      snlp::ssu::app::SSUAppExamplesPositiveIterable::getNext((uint64_t)v36, (uint64_t)&__v);
      *(_OWORD *)&v33[9] = *(_OWORD *)((char *)&__v.__begin_ + 1);
      *(_OWORD *)v33 = *(_OWORD *)&__v.__first_;
    }
    while (LOBYTE(__v.__end_cap_.__value_));
  }
  else
  {
    v7 = 0;
  }
  v28 = *(_QWORD *)&v34[8] - *(_QWORD *)v34;
  if (*(_QWORD *)&v34[8] == *(_QWORD *)v34)
    goto LABEL_49;
  if ((snlp::ssu::matcher::SSUPersister::writeSingleBatchPositive((snlp::ssu::matcher::SSUPersister *)this, a2, (const snlp::ssu::matcher::BatchData *)v34) & 1) != 0)
  {
    v7 -= 1431655765 * (v28 >> 3);
LABEL_49:
    v29 = v7 & 0xFFFFFF00;
    v30 = v7;
    v31 = 0x100000000;
    goto LABEL_51;
  }
LABEL_50:
  v30 = 0;
  v29 = 0;
  v31 = 0;
LABEL_51:
  if (*(_QWORD *)&v34[24])
  {
    *(_QWORD *)&v35 = *(_QWORD *)&v34[24];
    operator delete(*(void **)&v34[24]);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  return v31 | v29 | v30;
}

void sub_1C2227338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__split_buffer<std::string> *a17)
{
  snlp::ssu::matcher::BatchData::~BatchData((snlp::ssu::matcher::BatchData *)&a13);
  _Unwind_Resume(a1);
}

BOOL snlp::ssu::matcher::SSUPersister::writeDebugInformation(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  __int128 v31;
  unint64_t v32;
  _BOOL8 v33;
  _BYTE v35[40];
  unint64_t v36;
  _BYTE v37[25];
  _QWORD v38[3];
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  unint64_t v42;
  __int128 v43;
  unint64_t v44;

  v43 = 0uLL;
  v44 = 0;
  v41 = 0uLL;
  v42 = 0;
  v5 = *(_QWORD *)(a3 + 88);
  v6 = *(_QWORD *)(a3 + 96);
  v38[0] = v5;
  v38[1] = v6;
  v38[2] = v5;
  if (v5 == v6)
  {
    LOBYTE(v39) = 0;
    LOBYTE(v40) = 0;
  }
  else
  {
    v39 = *(_QWORD *)(v5 + 48);
    v40 = 1;
  }
  snlp::ssu::app::SSUAppExamplesPositiveIterable::getNext((uint64_t)v38, (uint64_t)v37);
  if (v37[24])
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *((_QWORD *)&v43 + 1);
      if (!(v7 % *a1))
      {
        if (*((_QWORD *)&v43 + 1) >= v44)
        {
          v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v43 + 1) - v43) >> 3);
          v11 = v10 + 1;
          if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v44 - v43) >> 3) > v11)
            v11 = 0x5555555555555556 * ((uint64_t)(v44 - v43) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - v43) >> 3) >= 0x555555555555555)
            v12 = 0xAAAAAAAAAAAAAAALL;
          else
            v12 = v11;
          *(_QWORD *)&v35[32] = &v44;
          if (v12)
            v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v12);
          else
            v13 = 0;
          v14 = (_QWORD *)(v12 + 24 * v10);
          *(_QWORD *)v35 = v12;
          *(_QWORD *)&v35[8] = v14;
          *(_QWORD *)&v35[24] = v12 + 24 * v13;
          *v14 = 0;
          v14[1] = 0;
          v14[2] = 0;
          *(_QWORD *)&v35[16] = v14 + 3;
          std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(&v43, v35);
          v9 = *((_QWORD *)&v43 + 1);
          std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v35);
        }
        else
        {
          **((_QWORD **)&v43 + 1) = 0;
          *(_QWORD *)(v9 + 8) = 0;
          *(_QWORD *)(v9 + 16) = 0;
          v9 += 24;
        }
        v7 = 0;
        *((_QWORD *)&v43 + 1) = v9;
      }
      v15 = *(_QWORD *)(v9 - 8);
      v16 = *(char **)(v9 - 16);
      if ((unint64_t)v16 >= v15)
      {
        v18 = *(char **)(v9 - 24);
        v19 = (v16 - v18) >> 3;
        if ((unint64_t)(v19 + 1) >> 61)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v20 = v15 - (_QWORD)v18;
        v21 = (uint64_t)(v15 - (_QWORD)v18) >> 2;
        if (v21 <= v19 + 1)
          v21 = v19 + 1;
        if (v20 >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
        {
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v9 - 8, v22);
          v18 = *(char **)(v9 - 24);
          v16 = *(char **)(v9 - 16);
        }
        else
        {
          v23 = 0;
        }
        v24 = &v23[8 * v19];
        *(_QWORD *)v24 = v8;
        v17 = v24 + 8;
        while (v16 != v18)
        {
          v25 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *((_QWORD *)v24 - 1) = v25;
          v24 -= 8;
        }
        *(_QWORD *)(v9 - 24) = v24;
        *(_QWORD *)(v9 - 16) = v17;
        *(_QWORD *)(v9 - 8) = &v23[8 * v22];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *(_QWORD *)v16 = v8;
        v17 = v16 + 8;
      }
      *(_QWORD *)(v9 - 16) = v17;
      if (!v37[24])
        std::__throw_bad_optional_access[abi:ne180100]();
      v26 = (_OWORD *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1) >= v42)
      {
        v28 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v41, *(__int128 **)&v37[16]);
      }
      else
      {
        if (*(char *)(*(_QWORD *)&v37[16] + 23) < 0)
        {
          std::string::__init_copy_ctor_external(*((std::string **)&v41 + 1), **(const std::string::value_type ***)&v37[16], *(_QWORD *)(*(_QWORD *)&v37[16] + 8));
        }
        else
        {
          v27 = **(_OWORD **)&v37[16];
          *(_QWORD *)(*((_QWORD *)&v41 + 1) + 16) = *(_QWORD *)(*(_QWORD *)&v37[16] + 16);
          *v26 = v27;
        }
        v28 = (uint64_t)v26 + 24;
      }
      *((_QWORD *)&v41 + 1) = v28;
      snlp::ssu::app::SSUAppExamplesPositiveIterable::getNext((uint64_t)v38, (uint64_t)v35);
      ++v8;
      ++v7;
      *(_OWORD *)&v37[9] = *(_OWORD *)&v35[9];
      *(_OWORD *)v37 = *(_OWORD *)v35;
    }
    while (v35[24]);
    v29 = v43;
    v30 = v44;
    v31 = v41;
    v32 = v42;
  }
  else
  {
    v32 = 0;
    v30 = 0;
    v31 = 0uLL;
    v29 = 0uLL;
  }
  *(_OWORD *)v35 = v29;
  *(_QWORD *)&v35[16] = v30;
  v44 = 0;
  v43 = 0uLL;
  *(_OWORD *)&v35[24] = v31;
  v36 = v32;
  v42 = 0;
  v41 = 0uLL;
  v33 = snlp::ssu::cache::SSUCacheFileWriteStream::writeDebugInformation(a2, (uint64_t)v35);
  *(_QWORD *)v37 = &v35[24];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  *(_QWORD *)v37 = v35;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  *(_QWORD *)v35 = &v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v35);
  *(_QWORD *)v35 = &v43;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v35);
  return v33;
}

void sub_1C22276F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  snlp::ssu::cache::SSUCacheObjectDebugInformation::~SSUCacheObjectDebugInformation(&a11);
  a22 = (void **)&a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a22);
  a22 = (void **)(v27 - 112);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    *(_QWORD *)(v4 - 24) = 0;
    *(_QWORD *)(v4 - 16) = 0;
    v4 -= 24;
    *(_QWORD *)(v4 + 16) = 0;
    v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v4 + 16) = v2[2];
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::vector<unsigned long>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void snlp::ssu::cache::SSUCacheObjectDebugInformation::~SSUCacheObjectDebugInformation(void **this)
{
  void **v2;

  v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t snlp::ssu::matcher::SSUPersister::writeSingleBatchPositive(snlp::ssu::matcher::SSUPersister *this, std::string *a2, const snlp::ssu::matcher::BatchData *a3)
{
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  std::string *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v15[2];
  uint64_t v16;
  void *v17[2];
  uint64_t v18;
  void *__p;
  void *v20;
  uint64_t v21;
  void *v22[2];
  uint64_t v23;
  void *v24[2];
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint8_t buf[4];
  std::string *v29;
  std::string v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 8) + 16))(&v26);
  snlp::ssu::encoder::SSUEncoder::computeEncodings(v26, (uint64_t *)a3, (uint64_t)v22);
  *(_OWORD *)v15 = *(_OWORD *)v22;
  v16 = v23;
  v22[0] = 0;
  v22[1] = 0;
  *(_OWORD *)v17 = *(_OWORD *)v24;
  v5 = v25;
  v23 = 0;
  v24[0] = 0;
  v24[1] = 0;
  v25 = 0;
  v18 = v5;
  __p = 0;
  v6 = (const void *)*((_QWORD *)a3 + 3);
  v7 = *((_QWORD *)a3 + 4);
  v20 = 0;
  v21 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v6, v7, (v7 - (uint64_t)v6) >> 3);
  if (snlp::ssu::cache::SSUCacheFileWriteStream::writeBatchPositive((uint64_t)a2, (uint64_t)v15))
  {
    v8 = 1;
  }
  else
  {
    v9 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v30, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
      else
        v30 = *a2;
      v10 = &v30;
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v10 = (std::string *)v30.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v29 = v10;
      _os_log_impl(&dword_1C2196000, v9, OS_LOG_TYPE_ERROR, "Error writing positive batch for cache file %s", buf, 0xCu);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }
    v8 = 0;
  }
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
  if (v15[0])
  {
    v15[1] = v15[0];
    operator delete(v15[0]);
  }
  if (v24[0])
    operator delete(v24[0]);
  if (v22[0])
    operator delete(v22[0]);
  v11 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v8;
}

void sub_1C2227ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive::~SSUCacheObjectEncodingsBatchPositive((snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive *)&a9);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a19);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::resize(std::vector<std::string> *this, std::vector<std::string>::size_type __sz)
{
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  unint64_t v5;
  unint64_t v6;
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *value;
  unint64_t v9;
  std::vector<std::string>::size_type v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  size_t v15;
  std::string *v16;
  size_t v17;
  std::__split_buffer<std::string> __v;

  begin = this->__begin_;
  end = this->__end_;
  v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  v6 = __sz - v5;
  if (__sz <= v5)
  {
    if (__sz < v5)
    {
      v16 = &begin[__sz];
      while (end != v16)
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(end[-1].__r_.__value_.__l.__data_);
        --end;
      }
      this->__end_ = v16;
    }
  }
  else
  {
    p_end_cap = &this->__end_cap_;
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v6)
    {
      v17 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(end, v17);
      this->__end_ = (std::vector<std::string>::pointer)((char *)end + v17);
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&this->__end_cap_;
      v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      v10 = 2 * v9;
      if (2 * v9 <= __sz)
        v10 = __sz;
      if (v9 >= 0x555555555555555)
        v11 = 0xAAAAAAAAAAAAAAALL;
      else
        v11 = v10;
      v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)p_end_cap, v11);
      v13 = v12 + v5;
      __v.__first_ = v12;
      __v.__begin_ = v13;
      __v.__end_cap_.__value_ = &v12[v14];
      v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v13, v15);
      __v.__end_ = (std::string *)((char *)v13 + v15);
      std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
  }
}

void sub_1C2227DB4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void snlp::ssu::matcher::BatchData::~BatchData(snlp::ssu::matcher::BatchData *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = (void **)this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive::~SSUCacheObjectEncodingsBatchPositive(snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
  v4 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v4;
    operator delete(v4);
  }
}

uint64_t snlp::ssu::matcher::SSUPersister::writeSingleBatchNegative(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  NSObject *v6;
  std::string *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v12[2];
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  void *v18[2];
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint8_t buf[4];
  std::string *v23;
  std::string v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 64) + 16))(&v20);
  snlp::ssu::encoder::SSUEncoder::computeEncodings(v20, a3, (uint64_t)v16);
  *(_OWORD *)v12 = *(_OWORD *)v16;
  v13 = v17;
  v16[0] = 0;
  v16[1] = 0;
  *(_OWORD *)__p = *(_OWORD *)v18;
  v15 = v19;
  v17 = 0;
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  if (snlp::ssu::cache::SSUCacheFileWriteStream::writeBatchNegative(a2, (uint64_t)v12))
  {
    v5 = 1;
  }
  else
  {
    v6 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v24 = *(std::string *)a2;
      v7 = &v24;
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v7 = (std::string *)v24.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v23 = v7;
      _os_log_impl(&dword_1C2196000, v6, OS_LOG_TYPE_ERROR, "Error writing negative batch for cache file %s)", buf, 0xCu);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
    }
    v5 = 0;
  }
  if (__p[0])
    operator delete(__p[0]);
  if (v12[0])
    operator delete(v12[0]);
  if (v18[0])
    operator delete(v18[0]);
  if (v16[0])
    operator delete(v16[0]);
  v8 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v5;
}

void sub_1C2228034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, std::string *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a9);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a15);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

unsigned int *std::__variant_detail::__dtor<std::__variant_detail::__traits<boost::archive::binary_oarchive,boost::archive::text_oarchive>,(std::__variant_detail::_Trait)1>::~__dtor(unsigned int *a1)
{
  uint64_t v2;
  char v4;

  v2 = a1[32];
  if ((_DWORD)v2 != -1)
    (*(&off_1E7BED160 + v2))((int)&v4, (boost::archive::detail::basic_oarchive *)a1);
  a1[32] = -1;
  return a1;
}

std::locale *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN5boost7archive15binary_oarchiveENS9_13text_oarchiveEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(int a1, boost::archive::detail::basic_oarchive *this)
{
  std::locale *v2;

  boost::archive::detail::basic_oarchive::~basic_oarchive(this);
  return boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::~basic_binary_oprimitive(v2 + 5);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN5boost7archive15binary_oarchiveENS9_13text_oarchiveEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(int a1, boost::archive::detail::basic_oarchive *this)
{
  uint64_t v2;

  boost::archive::detail::basic_oarchive::~basic_oarchive(this);
  return boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive(v2 + 48);
}

uint64_t *std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::reserve(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0xAAAAAAAAAAAAAAABLL * ((result[2] - *result) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 48 * v4;
    std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<snlp::ssu::cache::SSUCacheObjectIntent>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void std::allocator<snlp::ssu::cache::SSUCacheObjectIntent>::construct[abi:ne180100]<snlp::ssu::cache::SSUCacheObjectIntent,snlp::ssu::cache::SSUCacheObjectIntent&>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::__init_with_size[abi:ne180100]<snlp::ssu::cache::SSUCacheObjectParameter*,snlp::ssu::cache::SSUCacheObjectParameter*>(this[1].__r_.__value_.__r.__words, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 4));
}

void sub_1C2228318(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void snlp::ssu::cache::SSUCacheObjectIntent::~SSUCacheObjectIntent(void **this)
{
  void **v2;

  v2 = this + 3;
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t *std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 48;
      v6 = *(_OWORD *)(v3 - 48);
      *(_QWORD *)(v4 - 32) = *(_QWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 48) = v6;
      *(_QWORD *)(v3 - 40) = 0;
      *(_QWORD *)(v3 - 32) = 0;
      *(_QWORD *)(v3 - 48) = 0;
      *(_QWORD *)(v4 - 24) = 0;
      *(_QWORD *)(v4 - 16) = 0;
      *(_QWORD *)(v4 - 8) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v4 -= 48;
      v3 -= 48;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v7 = *result;
  *result = v5;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<snlp::ssu::cache::SSUCacheObjectIntent>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    std::allocator<snlp::ssu::cache::SSUCacheObjectIntent>::destroy[abi:ne180100](i - 48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 48;
      v6 = *(_OWORD *)(v3 - 48);
      *(_QWORD *)(v4 - 32) = *(_QWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 48) = v6;
      *(_QWORD *)(v3 - 40) = 0;
      *(_QWORD *)(v3 - 32) = 0;
      *(_QWORD *)(v3 - 48) = 0;
      v7 = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v7;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      *(_QWORD *)(v3 - 24) = 0;
      v4 -= 48;
      v3 -= 48;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v8 = *result;
  *result = v5;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<snlp::ssu::cache::SSUCacheObjectParameter>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    std::allocator<snlp::ssu::app::SSUAppParameter>::destroy[abi:ne180100](i - 48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void snlp::ssu::app::SSULoadedAppAssets::~SSULoadedAppAssets(void **this)
{
  void **v2;

  v2 = this + 11;
  std::vector<snlp::ssu::app::SSUAppIntent>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

_QWORD *std::vector<snlp::ssu::app::SSUAppIntent>::__init_with_size[abi:ne180100]<snlp::ssu::app::SSUAppIntent*,snlp::ssu::app::SSUAppIntent*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  __int128 *v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  std::string *v15;

  if (a4)
  {
    if (a4 >= 0x38E38E38E38E38FLL)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v6 = result;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::app::SSUAppIntent>>(a4);
    v7 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[9 * v8];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = &v7[v9 / 8];
        v11 = (__int128 *)(a2 + v9);
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v7[v9 / 8], *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
        }
        else
        {
          v12 = *v11;
          v10[2] = *((_QWORD *)v11 + 2);
          *(_OWORD *)v10 = v12;
        }
        v13 = &v7[v9 / 8];
        v14 = &v7[v9 / 8];
        v14[3] = 0;
        v14[4] = 0;
        v7[v9 / 8 + 5] = 0;
        std::vector<snlp::ssu::app::SSUAppParameter>::__init_with_size[abi:ne180100]<snlp::ssu::app::SSUAppParameter*,snlp::ssu::app::SSUAppParameter*>(&v7[v9 / 8 + 3], *(_QWORD *)(a2 + v9 + 24), *(_QWORD *)(a2 + v9 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + v9 + 32) - *(_QWORD *)(a2 + v9 + 24)) >> 4));
        v13[6] = 0;
        v13[7] = 0;
        v15 = (std::string *)&v7[v9 / 8 + 6];
        v15->__r_.__value_.__r.__words[2] = 0;
        result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v15, *(__int128 **)(a2 + v9 + 48), *(__int128 **)(a2 + v9 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + v9 + 56) - *(_QWORD *)(a2 + v9 + 48)) >> 3));
        v9 += 72;
      }
      while (a2 + v9 != a3);
      v7 = (_QWORD *)((char *)v7 + v9);
    }
    v6[1] = v7;
  }
  return result;
}

void sub_1C22286F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<snlp::ssu::app::SSUAppIntent>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<snlp::ssu::app::SSUAppParameter>::__init_with_size[abi:ne180100]<snlp::ssu::app::SSUAppParameter*,snlp::ssu::app::SSUAppParameter*>(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 *v11;
  __int128 v12;
  std::string *v13;
  const std::string::value_type **v14;
  __int128 v15;

  if (a4)
  {
    if (a4 >= 0x555555555555556)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(a4);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[48 * v8];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = &v7[v9];
        v11 = (__int128 *)(a2 + v9);
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v7[v9], *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
        }
        else
        {
          v12 = *v11;
          *((_QWORD *)v10 + 2) = *((_QWORD *)v11 + 2);
          *(_OWORD *)v10 = v12;
        }
        v13 = (std::string *)&v7[v9 + 24];
        v14 = (const std::string::value_type **)(a2 + v9 + 24);
        if (*(char *)(a2 + v9 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(v13, *v14, *(_QWORD *)(a2 + v9 + 32));
        }
        else
        {
          v15 = *(_OWORD *)v14;
          *(_QWORD *)&v7[v9 + 40] = *(_QWORD *)(a2 + v9 + 40);
          *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v15;
        }
        v9 += 48;
      }
      while (a2 + v9 != a3);
      v7 += v9;
    }
    a1[1] = v7;
  }
}

void sub_1C2228868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::app::SSUAppIntent>>(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(72 * a1);
}

void snlp::ssu::matcher::SSUPersister::lookupExistingCacheVersion(uint64_t a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4;
  __int128 v5;
  char v6;
  std::string *v7;
  __int128 v8;
  _QWORD v9[3];
  void **v10;

  snlp::ssu::cache::SSUCacheDirectory::lookupCacheFilesForApp(*(_QWORD *)(a1 + 32), (char *)(a1 + 8), a2, v9);
  v4 = v9[0];
  if (v9[0] == v9[1])
  {
    v6 = 0;
    a3->__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (*(char *)(v9[0] + 55) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v9[0] + 32), *(_QWORD *)(v9[0] + 40));
    }
    else
    {
      v5 = *(_OWORD *)(v9[0] + 32);
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v9[0] + 48);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v5;
    }
    v7 = a3 + 1;
    if (*(char *)(v4 + 79) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(v4 + 56), *(_QWORD *)(v4 + 64));
    }
    else
    {
      v8 = *(_OWORD *)(v4 + 56);
      a3[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 72);
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    v6 = 1;
  }
  a3[2].__r_.__value_.__s.__data_[0] = v6;
  v10 = (void **)v9;
  std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100](&v10);
}

void sub_1C22289C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;

  if (*(char *)(v12 + 23) < 0)
    operator delete(*(void **)v12);
  a12 = (void **)&a9;
  std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void snlp::ssu::cache::SSUCacheFileVersion::toString(std::string *this, uint64_t a2)
{
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  const std::string::value_type *v11;
  uint64_t v12;
  const std::string::value_type *v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;

  std::string::basic_string[abi:ne180100]<0>(&v20, "SSUCacheFileVersion{encoderVersion=");
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (const std::string::value_type *)a2;
  else
    v5 = *(const std::string::value_type **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = std::string::append(&v20, v5, v6);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = std::string::append(&v21, ", datasetVersion=");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v13 = *(const std::string::value_type **)(a2 + 24);
  v12 = a2 + 24;
  v11 = v13;
  v14 = *(char *)(v12 + 23);
  if (v14 >= 0)
    v15 = (const std::string::value_type *)v12;
  else
    v15 = v11;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(v12 + 23);
  else
    v16 = *(_QWORD *)(v12 + 8);
  v17 = std::string::append(&v22, v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v23, "}");
  *this = *v19;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
}

void sub_1C2228B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 25) < 0)
    operator delete(*(void **)(v28 - 48));
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<snlp::ssu::cache::SSUCacheFileVersion,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

void snlp::ssu::matcher::SSUPersister::updateCacheForUserShortcutsIfRequired(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  char *v7;
  _DWORD *v8;
  void *v9;
  int v10;
  void *v11;
  _OWORD *v12;
  char v13;
  NSObject *v14;
  _QWORD *v15;
  _OWORD v16[3];
  __int128 v17;
  char v18;
  int v19;
  char v20;
  void *v21;
  __int128 v22;
  char v23;
  std::string __p;
  _QWORD v25[3];
  _QWORD v26[3];
  std::string v27;
  _BYTE buf[24];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  snlp::ssu::usershortcut::computeHash(a2, a4);
  if ((snlp::ssu::matcher::SSUPersister::userShortcutsRequireUpdate(a1, (std::string::size_type)&v27) & 1) != 0)
  {
    v19 = 0;
    v20 = 0;
    v21 = operator new(0x38uLL);
    v22 = xmmword_1C230B530;
    strcpy((char *)v21, "com.apple.SiriNaturalLanguageParsing.SSUUserShortcuts");
    qmemcpy(v16, "sing.SSUUserShorturalLanguageParcom.apple.SiriNa", sizeof(v16));
    v23 = 1;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    else
      __p = v27;
    memset(v25, 0, sizeof(v25));
    snlp::ssu::usershortcut::buildPositiveExamples((__int128 **)a2, v26);
    v9 = operator new(0x38uLL);
    *(_QWORD *)buf = v9;
    *(_OWORD *)&buf[8] = xmmword_1C230B530;
    *(_OWORD *)v9 = v16[2];
    *((_OWORD *)v9 + 1) = v16[1];
    *((_OWORD *)v9 + 2) = v16[0];
    strcpy((char *)v9 + 45, "hortcuts");
    snlp::ssu::matcher::SSUPersister::updateCacheForAppCategory((snlp::ssu::app::SSULoadedAppAssets *)&v19, a1, buf, 1u, (uint64_t)&v17);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (v18)
    {
      v10 = HIDWORD(v17);
      v11 = operator new(0x38uLL);
      *(_OWORD *)v11 = v16[2];
      *((_OWORD *)v11 + 1) = v16[1];
      *((_OWORD *)v11 + 2) = v16[0];
      strcpy((char *)v11 + 45, "hortcuts");
      v12 = operator new(0x10uLL);
      *v12 = v17;
      *(_QWORD *)a3 = v11;
      *(_OWORD *)(a3 + 8) = xmmword_1C230B530;
      *(_DWORD *)(a3 + 24) = v10 == 3;
      *(_QWORD *)(a3 + 32) = v12;
      *(_QWORD *)(a3 + 40) = v12 + 1;
      *(_QWORD *)(a3 + 48) = v12 + 1;
      v13 = 1;
    }
    else
    {
      v14 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v15 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v15 = (_QWORD *)*v15;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v15;
        _os_log_impl(&dword_1C2196000, v14, OS_LOG_TYPE_ERROR, "Error updating cache for user shortcuts with locale %s.", buf, 0xCu);
      }
      v13 = 0;
      *(_BYTE *)a3 = 0;
    }
    *(_BYTE *)(a3 + 56) = v13;
    *(_QWORD *)buf = v26;
    std::vector<snlp::ssu::app::SSUAppIntent>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = v25;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v22) < 0)
      operator delete(v21);
  }
  else
  {
    v7 = (char *)operator new(0x38uLL);
    strcpy(v7, "com.apple.SiriNaturalLanguageParsing.SSUUserShortcuts");
    v8 = operator new(0x10uLL);
    *(_WORD *)v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = 1;
    *(_QWORD *)a3 = v7;
    *(_OWORD *)(a3 + 8) = xmmword_1C230B530;
    *(_DWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = v8;
    *(_QWORD *)(a3 + 40) = v8 + 4;
    *(_QWORD *)(a3 + 48) = v8 + 4;
    *(_BYTE *)(a3 + 56) = 1;
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

void sub_1C2228EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void **v33;
  uint64_t v34;

  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(v34 - 97) < 0)
    operator delete(*v33);
  _Unwind_Resume(exception_object);
}

uint64_t snlp::ssu::matcher::SSUPersister::userShortcutsRequireUpdate(uint64_t a1, std::string::size_type a2)
{
  unsigned __int8 **v4;
  std::string::size_type size;
  uint64_t v6;
  int v7;
  unsigned __int8 **v8;
  uint64_t v9;
  std::string *p_s1;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  _BOOL4 v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  void **v23;
  NSObject *v24;
  uint64_t v25;
  std::string *v26;
  NSObject *v27;
  std::string *p_buf;
  std::string __s1;
  void *v31;
  size_t v32;
  unsigned __int8 v33;
  char v34;
  std::string buf;
  std::string v36;
  std::string *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  *(_OWORD *)&v36.__r_.__value_.__r.__words[1] = xmmword_1C230B530;
  strcpy(v36.__r_.__value_.__l.__data_, "com.apple.SiriNaturalLanguageParsing.SSUUserShortcuts");
  snlp::ssu::matcher::SSUPersister::lookupExistingCacheVersion(a1, (char *)&v36, &__s1);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (!v34)
    goto LABEL_62;
  v4 = (unsigned __int8 **)(a1 + 80);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    size = __s1.__r_.__value_.__l.__size_;
  v6 = *(unsigned __int8 *)(a1 + 103);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 88);
  if (size == v6)
  {
    if (v7 >= 0)
      v8 = (unsigned __int8 **)(a1 + 80);
    else
      v8 = (unsigned __int8 **)*v4;
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v17 = memcmp(__s1.__r_.__value_.__l.__data_, v8, __s1.__r_.__value_.__l.__size_) == 0;
    }
    else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    {
      v9 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
      p_s1 = &__s1;
      do
      {
        v12 = p_s1->__r_.__value_.__s.__data_[0];
        p_s1 = (std::string *)((char *)p_s1 + 1);
        v11 = v12;
        v14 = *(unsigned __int8 *)v8;
        v8 = (unsigned __int8 **)((char *)v8 + 1);
        v13 = v14;
        v16 = v9-- != 0;
        v17 = v11 == v13;
      }
      while (v11 == v13 && v16);
    }
    else
    {
      v17 = 1;
    }
  }
  else
  {
    v17 = 0;
  }
  v18 = v33;
  if ((v33 & 0x80u) == 0)
    v19 = v33;
  else
    v19 = v32;
  v20 = *(unsigned __int8 *)(a2 + 23);
  v21 = (char)v20;
  if ((v20 & 0x80u) != 0)
    v20 = *(_QWORD *)(a2 + 8);
  if (v19 != v20)
    goto LABEL_51;
  v22 = v21 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
  if ((v33 & 0x80) != 0)
  {
    LOBYTE(v18) = memcmp(v31, v22, v32) != 0;
  }
  else if (v33)
  {
    v23 = &v31;
    while (*(unsigned __int8 *)v23 == *v22)
    {
      v23 = (void **)((char *)v23 + 1);
      ++v22;
      if (!--v18)
        goto LABEL_41;
    }
    goto LABEL_51;
  }
LABEL_41:
  if (!v17 || (v18 & 1) != 0)
  {
LABEL_51:
    v27 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a1 + 103) < 0)
        v4 = (unsigned __int8 **)*v4;
      if (*(char *)(a2 + 23) < 0)
        a2 = *(_QWORD *)a2;
      if (!v34)
        std::__throw_bad_optional_access[abi:ne180100]();
      snlp::ssu::cache::SSUCacheFileVersion::toString(&buf, (uint64_t)&__s1);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = &buf;
      else
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      LODWORD(v36.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v36.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
      WORD2(v36.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v36.__r_.__value_.__r.__words[1] + 6) = a2;
      HIWORD(v36.__r_.__value_.__r.__words[2]) = 2080;
      v37 = p_buf;
      _os_log_impl(&dword_1C2196000, v27, OS_LOG_TYPE_DEBUG, "User shortcuts have an out-of-date cache file (current encoder version=%s, current dataset version=%s, cache version=%s,)", (uint8_t *)&v36, 0x20u);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }
LABEL_62:
    v25 = 1;
    goto LABEL_63;
  }
  v24 = SNLPOSLoggerForCategory(8);
  v25 = 0;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    if (!v34)
      std::__throw_bad_optional_access[abi:ne180100]();
    snlp::ssu::cache::SSUCacheFileVersion::toString(&v36, (uint64_t)&__s1);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v36;
    else
      v26 = (std::string *)v36.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
    _os_log_impl(&dword_1C2196000, v24, OS_LOG_TYPE_DEFAULT, "User shortcuts already have an up-to-date cache file with version %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    v25 = 0;
  }
LABEL_63:
  std::__optional_destruct_base<snlp::ssu::cache::SSUCacheFileVersion,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__s1);
  return v25;
}

void sub_1C22292E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__optional_destruct_base<snlp::ssu::cache::SSUCacheFileVersion,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::matcher::SSUPersister::computeTotalNumExamples(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 0;
  LODWORD(result) = 0;
  do
  {
    result = result - 1431655765 * ((*(_QWORD *)(v1 + 56) - *(_QWORD *)(v1 + 48)) >> 3);
    v1 += 72;
  }
  while (v1 != v2);
  return result;
}

uint64_t nlv4_inference_orchestrator::vocabulary::Vocabulary::insertToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  _QWORD *v17;
  std::string *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t result;
  uint64_t v31;

  v7 = (uint64_t *)(a1 + 144);
  v8 = (_QWORD *)(a1 + 168);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 168, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 152);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*v7 + 8 * v3);
    if (v14)
    {
      v31 = a3;
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 176, i + 16, (unsigned __int8 *)a2) & 1) != 0)
            goto LABEL_44;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3)
            break;
        }
      }
      a3 = v31;
    }
  }
  v17 = operator new(0x30uLL);
  *v17 = 0;
  v17[1] = v10;
  v18 = (std::string *)(v17 + 2);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v17[4] = *(_QWORD *)(a2 + 16);
  }
  v17[5] = a3;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 168) + 1);
  v20 = *(float *)(a1 + 176);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>((uint64_t)v7, v24);
    v11 = *(_QWORD *)(a1 + 152);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v25 = *v7;
  v26 = *(_QWORD **)(*v7 + 8 * v3);
  if (v26)
  {
    *v17 = *v26;
LABEL_42:
    *v26 = v17;
    goto LABEL_43;
  }
  *v17 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v17;
  *(_QWORD *)(v25 + 8 * v3) = a1 + 160;
  if (*v17)
  {
    v27 = *(_QWORD *)(*v17 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11)
        v27 %= v11;
    }
    else
    {
      v27 &= v11 - 1;
    }
    v26 = (_QWORD *)(*v7 + 8 * v27);
    goto LABEL_42;
  }
LABEL_43:
  ++*v8;
LABEL_44:
  v28 = (uint64_t *)(a1 + 184);
  v29 = *(_QWORD *)(a1 + 192);
  if (v29 >= *(_QWORD *)(a1 + 200))
  {
    result = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v28, (__int128 *)a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v28, (__int128 *)a2);
    result = v29 + 24;
  }
  *(_QWORD *)(a1 + 192) = result;
  return result;
}

void sub_1C22295DC(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::vocabulary::Vocabulary::getPadToken(nlv4_inference_orchestrator::vocabulary::Vocabulary *this@<X0>, std::string *a2@<X8>)
{
  char v3;

  v3 = *((_BYTE *)this + 120);
  if (v3)
  {
    if (*((char *)this + 47) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
    }
    v3 = 1;
  }
  else
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
  }
  a2[1].__r_.__value_.__s.__data_[0] = v3;
}

uint64_t nlv4_inference_orchestrator::vocabulary::Vocabulary::getPadTokenId(nlv4_inference_orchestrator::vocabulary::Vocabulary *this)
{
  return *((_QWORD *)this + 14);
}

uint64_t nlv4_inference_orchestrator::vocabulary::Vocabulary::getUnknownTokenId(nlv4_inference_orchestrator::vocabulary::Vocabulary *this)
{
  return *((_QWORD *)this + 12);
}

unsigned __int8 *nlv4_inference_orchestrator::vocabulary::Vocabulary::getTokenId(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *result;

  result = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((_QWORD *)(a1 + 144), a2);
  if (result)
    return (unsigned __int8 *)*((_QWORD *)result + 5);
  return result;
}

void nlv4_inference_orchestrator::vocabulary::Vocabulary::initializeFromStream(uint64_t a1, _QWORD *a2)
{
  const std::locale::facet *v4;
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  std::locale::id *v9;
  const std::locale::facet *v10;
  unsigned __int8 v11;
  _QWORD *v12;
  uint64_t v13;
  void *__p;
  uint64_t v15;
  uint64_t v16;
  std::locale v17;

  __p = 0;
  v15 = 0;
  v16 = 0;
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v4 = std::locale::use_facet(&v17, MEMORY[0x1E0DE4A90]);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v17);
  v6 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&__p, v5);
  if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
    goto LABEL_2;
  v8 = HIBYTE(v16);
  if (v16 < 0)
    v8 = v15;
  if (!v8)
  {
LABEL_2:
    v7 = 0;
  }
  else
  {
    std::vector<std::string>::reserve((std::vector<std::string> *)(a1 + 184), *(_QWORD *)(a1 + 136));
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1 + 144, vcvtps_u32_f32((float)*(unint64_t *)(a1 + 136) / *(float *)(a1 + 176)));
    nlv4_inference_orchestrator::vocabulary::Vocabulary::insertToken(a1, (uint64_t)&__p, 0);
    v7 = 1;
  }
  v9 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
    v10 = std::locale::use_facet(&v17, v9);
    v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v17);
    v12 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&__p, v11);
    v13 = HIBYTE(v16);
    if ((*((_BYTE *)v12 + *(_QWORD *)(*v12 - 24) + 32) & 5) != 0)
      break;
    if (v16 < 0)
      v13 = v15;
    if (v13)
      nlv4_inference_orchestrator::vocabulary::Vocabulary::insertToken(a1, (uint64_t)&__p, v7++);
  }
  if (v16 < 0)
    operator delete(__p);
}

void sub_1C2229854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::vocabulary::Vocabulary::Vocabulary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  char v9;
  unsigned __int8 *v10;
  uint64_t v11;
  char v12;
  std::runtime_error *exception;
  std::string v15;
  _QWORD v16[2];
  _QWORD v17[51];
  _QWORD v18[21];

  v18[19] = *MEMORY[0x1E0C80C00];
  v5 = (unsigned __int8 *)(std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, "[UNK]") + 3);
  std::string::basic_string[abi:ne180100]<0>(v5, "[PAD]");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 48), "[CLS]");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 72), "[SEP]");
  *(_OWORD *)(a1 + 144) = 0u;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0x10000;
  *(_QWORD *)(a1 + 136) = a3;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  v6 = std::ifstream::basic_ifstream(v16);
  MEMORY[0x1E0C80A78](v6);
  (*(void (**)(_QWORD *))(v17[0] + 24))(v17);
  if ((*((_BYTE *)&v17[2] + *(_QWORD *)(v16[0] - 24)) & 5) != 0)
  {
    std::ifstream::close(v16);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v15);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  nlv4_inference_orchestrator::vocabulary::Vocabulary::initializeFromStream(a1, v16);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v16 + *(_QWORD *)(v16[0] - 24)), *(_DWORD *)((char *)&v17[2] + *(_QWORD *)(v16[0] - 24)) | 4);
  v7 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((_QWORD *)(a1 + 144), v5);
  if (v7)
  {
    v8 = *((_QWORD *)v7 + 5);
    v9 = 1;
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  *(_QWORD *)(a1 + 112) = v8;
  *(_BYTE *)(a1 + 120) = v9;
  v10 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((_QWORD *)(a1 + 144), (unsigned __int8 *)a1);
  if (v10)
  {
    v11 = *((_QWORD *)v10 + 5);
    v12 = 1;
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  *(_QWORD *)(a1 + 96) = v11;
  *(_BYTE *)(a1 + 104) = v12;
  v16[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1C3BB970C](v17);
  std::istream::~istream();
  MEMORY[0x1C3BB9A90](v18);
  return a1;
}

void sub_1C2229B28(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t v8;
  int v9;

  if (*(char *)(v1 + 31) < 0)
  {
    operator delete(*(void **)(v1 + 8));
    if ((v9 & 1) == 0)
    {
LABEL_6:
      std::ifstream::~ifstream((_QWORD *)(v1 + 32));
      *(_QWORD *)(v1 + 32) = v8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 + 32));
      std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table(v5);
      if (*(char *)(v2 + 95) < 0)
        operator delete(*v6);
      if (*(char *)(v2 + 71) < 0)
        operator delete(*v4);
      if (*(char *)(v2 + 47) < 0)
        operator delete(*v3);
      if (*(char *)(v2 + 23) < 0)
        operator delete(*(void **)v2);
      _Unwind_Resume(a1);
    }
  }
  else if (!v9)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v7);
  goto LABEL_6;
}

void std::ifstream::close(_QWORD *a1)
{
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
}

uint64_t nlv4_inference_orchestrator::vocabulary::Vocabulary::numericalizeToken(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  std::logic_error *exception;

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "tokenText argument is empty");
    goto LABEL_11;
  }
  v4 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((_QWORD *)(a1 + 144), (unsigned __int8 *)a2);
  if (!v4)
  {
    if (*(_BYTE *)(a1 + 104))
    {
      v5 = (unsigned __int8 *)(a1 + 96);
      return *(_QWORD *)v5;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Encountered unknown token text and the vocabulary hasno special unknown token");
LABEL_11:
    __cxa_throw(exception, (struct type_info *)off_1E7BE5148, MEMORY[0x1E0DE4360]);
  }
  v5 = v4 + 40;
  return *(_QWORD *)v5;
}

void sub_1C2229CD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
  return result;
}

void nlv4_inference_orchestrator::vocabulary::Vocabulary::denumericalizeToken(nlv4_inference_orchestrator::vocabulary::Vocabulary *this@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v3;
  __int128 *v4;
  __int128 v5;
  std::runtime_error *exception;

  v3 = *((_QWORD *)this + 23);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 24) - v3) >> 3) <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "Encountered unknown token ID");
    __cxa_throw(exception, (struct type_info *)off_1E7BE5128, MEMORY[0x1E0DE42B0]);
  }
  v4 = (__int128 *)(v3 + 24 * a2);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1C2229DAC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
  return result;
}

void itfm_inference_orchestrator::context::ContextFeaturizer::extractContextLabelsFromLegacyNlContext(const void **this@<X0>, const sirinluexternal::LegacyNLContext *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char v7;
  char *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  const char *v17;
  NSObject *v18;
  uint64_t v19;
  const char *v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  _BYTE __p[12];
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  _BYTE *v30;
  _BYTE buf[12];
  __int16 v32;
  _BYTE v33[10];
  uint64_t v34;
  void *v35;
  char v36;
  uint64_t v37;
  _BYTE v38[12];
  __int16 v39;
  uint64_t v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v5 = *((_QWORD *)a2 + 1);
  if (!v5)
  {
LABEL_35:
    v15 = SNLPOSLoggerForCategory(2);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      v16 = *((int *)this + 14);
      if (v16 >= 8)
      {
        v21 = SNLPOSLoggerForCategory(4);
        v17 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
          v32 = 2048;
          *(_QWORD *)v33 = v16;
          _os_log_impl(&dword_1C2196000, v21, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
        }
      }
      else
      {
        v17 = off_1E7BED840[v16];
      }
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v17;
      _os_log_impl(&dword_1C2196000, v15, OS_LOG_TYPE_DEBUG, "[%s] Failed to featurize any labels from legacyNlContext", buf, 0xCu);
    }
    return;
  }
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_35;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_35;
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)buf, this + 82, (const void **)v5);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, buf, (uint64_t)buf);
  v7 = *((_BYTE *)a2 + 72);
  if ((v7 & 2) != 0)
  {
    if (*((_BYTE *)a2 + 68))
      v8 = "TRUE";
    else
      v8 = "FALSE";
    std::string::basic_string[abi:ne180100]<0>(__p, v8);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)v38, this + 76, (const void **)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, v38, (uint64_t)v38);
    if (v41 < 0)
      operator delete(*(void **)v38);
    if (SHIBYTE(v29) < 0)
      operator delete(*(void **)__p);
    v7 = *((_BYTE *)a2 + 72);
  }
  if ((v7 & 8) != 0)
  {
    if (*((_BYTE *)a2 + 70))
      v9 = "TRUE";
    else
      v9 = "FALSE";
    std::string::basic_string[abi:ne180100]<0>(__p, v9);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)v38, this + 79, (const void **)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, v38, (uint64_t)v38);
    if (v41 < 0)
      operator delete(*(void **)v38);
    if (SHIBYTE(v29) < 0)
      operator delete(*(void **)__p);
  }
  if ((v33[9] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (!*(_QWORD *)(a3 + 24))
    goto LABEL_35;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
  v10 = a3 + 16;
  while (1)
  {
    v10 = *(_QWORD *)v10;
    if (!v10)
      break;
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33[2], (uint64_t)", ", 2);
    v12 = *(char *)(v10 + 39);
    if (v12 >= 0)
      v13 = v10 + 16;
    else
      v13 = *(_QWORD *)(v10 + 16);
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(v10 + 39);
    else
      v14 = *(_QWORD *)(v10 + 24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
  }
  v18 = SNLPOSLoggerForCategory(2);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    v19 = *((int *)this + 14);
    if (v19 >= 8)
    {
      v22 = SNLPOSLoggerForCategory(4);
      v20 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v38 = 136315394;
        *(_QWORD *)&v38[4] = "<UNDEFINED_COMPONENT>";
        v39 = 2048;
        v40 = v19;
        _os_log_impl(&dword_1C2196000, v22, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", v38, 0x16u);
      }
    }
    else
    {
      v20 = off_1E7BED840[v19];
    }
    v23 = *(_QWORD *)(a3 + 24);
    std::stringbuf::str();
    if (v41 >= 0)
      v24 = v38;
    else
      v24 = *(_BYTE **)v38;
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v20;
    v27 = 2048;
    v28 = v23;
    v29 = 2080;
    v30 = v24;
    _os_log_impl(&dword_1C2196000, v18, OS_LOG_TYPE_DEBUG, "[%s] Featurized the following %lu LegacyNLContext features in ITFMParserRequest: %s", __p, 0x20u);
    if (v41 < 0)
      operator delete(*(void **)v38);
  }
  *(_QWORD *)buf = *MEMORY[0x1E0DE4F50];
  v25 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v33[2] = v25;
  v34 = MEMORY[0x1E0DE4FB8] + 16;
  if (v36 < 0)
    operator delete(v35);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3BB9A90](&v37);
}

void sub_1C222A238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v21);
  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t a1, const void **a2, const void **a3)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a2 + 23) >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (*((char *)a3 + 23) >= 0)
    v6 = *((unsigned __int8 *)a3 + 23);
  else
    v6 = (size_t)a3[1];
  result = std::string::basic_string[abi:ne180100](a1, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0)
      v11 = a3;
    else
      v11 = *a3;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void itfm_inference_orchestrator::context::ContextFeaturizer::extractContextLabelsFromNLContext(itfm_inference_orchestrator::context::ContextFeaturizer *this@<X0>, const sirinluexternal::NLContext *a2@<X1>, uint64_t a3@<X8>)
{
  const void **v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;

  v5 = (const void **)((char *)this + 64);
  nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabels((itfm_inference_orchestrator::context::ContextFeaturizer *)((char *)this + 64), a2, a3);
  if (_os_feature_enabled_impl())
  {
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractSalientEntityContextLabels(v5, a2, (uint64_t)&__p);
    v6 = v10;
    if (v10)
    {
      do
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, (unsigned __int8 *)v6 + 16, (uint64_t)(v6 + 2));
        v6 = (void **)*v6;
      }
      while (v6);
      v7 = v10;
    }
    else
    {
      v7 = 0;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v7);
    v8 = __p;
    __p = 0;
    if (v8)
      operator delete(v8);
  }
}

void sub_1C222A424(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void itfm_inference_orchestrator::context::ContextFeaturizer::extractContextLabels(itfm_inference_orchestrator::context::ContextFeaturizer *this@<X0>, sirinluexternal::LegacyNLContext *a2@<X2>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  int v8;
  BOOL v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  int v14;
  void *v15;
  uint64_t v16;
  char v17;
  BOOL v18;
  BOOL v19;
  NSObject *v20;
  _BOOL4 v21;
  uint64_t v22;
  const char *v23;
  NSObject *v24;
  uint64_t v25;
  const char *v26;
  NSObject *v27;
  void *v28;
  NSObject *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  NSObject *v34;
  NSObject *v35;
  unsigned __int8 *v36;
  NSObject *v37;
  _QWORD *i;
  _QWORD *v39;
  uint64_t v40;
  uint64_t TokenId;
  char v42;
  NSObject *v44;
  uint64_t v45;
  const char *v46;
  NSObject *v47;
  _BOOL4 v48;
  void *v49;
  _BYTE __p[12];
  __int16 v51;
  _BYTE v52[10];
  uint8_t buf[32];
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v8 = *((unsigned __int8 *)a2 + 80);
  if (*((_BYTE *)a2 + 80))
    v9 = *(_DWORD *)this > 1u;
  else
    v9 = 1;
  if (!v9)
  {
    v10 = SNLPOSLoggerForCategory(2);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v11 = *((int *)this + 14);
      if (v11 >= 8)
      {
        v13 = SNLPOSLoggerForCategory(4);
        v12 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v11;
          _os_log_impl(&dword_1C2196000, v13, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
        }
      }
      else
      {
        v12 = off_1E7BED840[v11];
      }
      v14 = *(_DWORD *)this;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v12;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v14;
      _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_DEBUG, "[%s] Warning: Legacy NL context features were supplied, but the asset directory major version (%u) does not support these. These will not be featurized.", buf, 0x12u);
    }
    v8 = *((unsigned __int8 *)a2 + 80);
  }
  memset(buf, 0, sizeof(buf));
  v54 = 1065353216;
  if (v8)
  {
    itfm_inference_orchestrator::context::ContextFeaturizer::extractContextLabelsFromLegacyNlContext((const void **)this, a2, (uint64_t)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)buf, (uint64_t *)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)&v52[2]);
    v15 = *(void **)__p;
    *(_QWORD *)__p = 0;
    if (v15)
      operator delete(v15);
    if (!*((_BYTE *)a2 + 80))
      std::__throw_bad_optional_access[abi:ne180100]();
    v8 = *((_DWORD *)a2 + 16);
    v16 = *(_QWORD *)&buf[24];
  }
  else
  {
    v16 = 0;
  }
  v17 = *(_BYTE *)(a3 + 112);
  if (v17)
  {
    v18 = *(_QWORD *)(a3 + 8) != *(_QWORD *)(a3 + 16);
    v17 = *(_QWORD *)(a3 + 32) != *(_QWORD *)(a3 + 40);
    if (*(_QWORD *)(a3 + 88) != *(_QWORD *)(a3 + 96))
    {
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_DWORD *)(a4 + 32) = 1065353216;
LABEL_31:
      v24 = SNLPOSLoggerForCategory(2);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        v25 = *((int *)this + 14);
        if (v25 >= 8)
        {
          v27 = SNLPOSLoggerForCategory(4);
          v26 = "<UNDEFINED_COMPONENT>";
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__p = 136315394;
            *(_QWORD *)&__p[4] = "<UNDEFINED_COMPONENT>";
            v51 = 2048;
            *(_QWORD *)v52 = v25;
            _os_log_impl(&dword_1C2196000, v27, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", __p, 0x16u);
          }
        }
        else
        {
          v26 = off_1E7BED840[v25];
        }
        *(_DWORD *)__p = 136315138;
        *(_QWORD *)&__p[4] = v26;
        _os_log_impl(&dword_1C2196000, v24, OS_LOG_TYPE_DEBUG, "[%s] Using context featurization labels extracted from the NL Context", __p, 0xCu);
      }
      if (!*(_BYTE *)(a3 + 112))
        std::__throw_bad_optional_access[abi:ne180100]();
      itfm_inference_orchestrator::context::ContextFeaturizer::extractContextLabelsFromNLContext(this, (const sirinluexternal::NLContext *)a3, (uint64_t)__p);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(a4, (uint64_t *)__p);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)&v52[2]);
      v28 = *(void **)__p;
      *(_QWORD *)__p = 0;
      if (v28)
        operator delete(v28);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, (unsigned __int8 *)this + 584, (uint64_t)this + 584);
      if (*((_BYTE *)a2 + 80))
      {
        v29 = SNLPOSLoggerForCategory(2);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        {
          v30 = *((int *)this + 14);
          if (v30 >= 8)
          {
            v34 = SNLPOSLoggerForCategory(4);
            v31 = "<UNDEFINED_COMPONENT>";
            if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__p = 136315394;
              *(_QWORD *)&__p[4] = "<UNDEFINED_COMPONENT>";
              v51 = 2048;
              *(_QWORD *)v52 = v30;
              _os_log_impl(&dword_1C2196000, v34, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", __p, 0x16u);
            }
          }
          else
          {
            v31 = off_1E7BED840[v30];
          }
          *(_DWORD *)__p = 136315138;
          *(_QWORD *)&__p[4] = v31;
          _os_log_impl(&dword_1C2196000, v29, OS_LOG_TYPE_DEBUG, "[%s] Warning: The request's nlContext contains a SDA. Skipping featurization for the legacy context.", __p, 0xCu);
        }
      }
      goto LABEL_60;
    }
  }
  else
  {
    v18 = 0;
  }
  v19 = v8 != 2 && v18;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  if ((v17 & 1) != 0 || v19)
    goto LABEL_31;
  v20 = SNLPOSLoggerForCategory(2);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG);
  if (v16)
  {
    if (v21)
    {
      v22 = *((int *)this + 14);
      if (v22 >= 8)
      {
        v35 = SNLPOSLoggerForCategory(4);
        v23 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = "<UNDEFINED_COMPONENT>";
          v51 = 2048;
          *(_QWORD *)v52 = v22;
          _os_log_impl(&dword_1C2196000, v35, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", __p, 0x16u);
        }
      }
      else
      {
        v23 = off_1E7BED840[v22];
      }
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v23;
      _os_log_impl(&dword_1C2196000, v20, OS_LOG_TYPE_DEBUG, "[%s] SDA not featurized; using featurized labels from Legacy NL Context instead",
        __p,
        0xCu);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, (unsigned __int8 *)this + 560, (uint64_t)this + 560);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, (unsigned __int8 *)this + 536, (uint64_t)this + 536);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, (unsigned __int8 *)this + 512, (uint64_t)this + 512);
    v36 = *(unsigned __int8 **)&buf[16];
    if (*(_QWORD *)&buf[16])
    {
      do
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, v36 + 16, (uint64_t)(v36 + 16));
        v36 = *(unsigned __int8 **)v36;
      }
      while (v36);
    }
  }
  else
  {
    if (v21)
    {
      v32 = *((int *)this + 14);
      if (v32 >= 8)
      {
        v37 = SNLPOSLoggerForCategory(4);
        v33 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = "<UNDEFINED_COMPONENT>";
          v51 = 2048;
          *(_QWORD *)v52 = v32;
          _os_log_impl(&dword_1C2196000, v37, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", __p, 0x16u);
        }
      }
      else
      {
        v33 = off_1E7BED840[v32];
      }
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v33;
      _os_log_impl(&dword_1C2196000, v20, OS_LOG_TYPE_DEBUG, "[%s] Failed to extract any labels from NL Context or Legacy NL Context", __p, 0xCu);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, (unsigned __int8 *)this + 560, (uint64_t)this + 560);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, (unsigned __int8 *)this + 584, (uint64_t)this + 584);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, (unsigned __int8 *)this + 536, (uint64_t)this + 536);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, (unsigned __int8 *)this + 512, (uint64_t)this + 512);
  }
LABEL_60:
  for (i = *(_QWORD **)(a4 + 16);
        i;
        i = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::erase((_QWORD *)a4, (void **)i))
  {
    while (1)
    {
      v39 = i + 2;
      v40 = itfm_inference_orchestrator::vocabulary::Vocabulary::numericalizeToken(*((_QWORD **)this + 2), (uint64_t)(i + 2));
      TokenId = itfm_inference_orchestrator::vocabulary::Vocabulary::getTokenId(*((_QWORD *)this + 2), *((_QWORD **)this + 2));
      if (v42 && v40 == TokenId)
        break;
      i = (_QWORD *)*i;
      if (!i)
        goto LABEL_76;
    }
    v44 = SNLPOSLoggerForCategory(2);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
    {
      v45 = *((int *)this + 14);
      if (v45 >= 8)
      {
        v47 = SNLPOSLoggerForCategory(4);
        v48 = os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
        v46 = "<UNDEFINED_COMPONENT>";
        if (v48)
        {
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = "<UNDEFINED_COMPONENT>";
          v51 = 2048;
          *(_QWORD *)v52 = v45;
          _os_log_impl(&dword_1C2196000, v47, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", __p, 0x16u);
          v46 = "<UNDEFINED_COMPONENT>";
        }
      }
      else
      {
        v46 = off_1E7BED840[v45];
      }
      if (*((char *)i + 39) < 0)
        v39 = (_QWORD *)*v39;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = v46;
      v51 = 2080;
      *(_QWORD *)v52 = v39;
      _os_log_impl(&dword_1C2196000, v44, OS_LOG_TYPE_DEBUG, "[%s] Label '%s' not present in vocabulary. Skipping. (Is this label supported by the provided assets?)", __p, 0x16u);
    }
  }
LABEL_76:
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)&buf[16]);
  v49 = *(void **)buf;
  *(_QWORD *)buf = 0;
  if (v49)
    operator delete(v49);
}

void sub_1C222ABE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v6 = *a2;
  *a2 = 0;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = v6;
  if (v7)
    operator delete(v7);
  v10 = a2[2];
  v9 = a2 + 2;
  v8 = v10;
  v11 = *(v9 - 1);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 8) = v11;
  *(v9 - 1) = 0;
  v12 = v9[1];
  *(_QWORD *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    v13 = *(_QWORD *)(v8 + 8);
    v14 = *(_QWORD *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v13 %= v14;
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = a1 + 16;
    *v9 = 0;
    v9[1] = 0;
  }
}

_QWORD *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::erase(_QWORD *a1, void **a2)
{
  int8x8_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint8x8_t v5;
  void **v6;
  void **v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;

  v2 = (int8x8_t)a1[1];
  v4 = *a2;
  v3 = (unint64_t)a2[1];
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v3 >= *(_QWORD *)&v2)
      v3 %= *(_QWORD *)&v2;
  }
  else
  {
    v3 &= *(_QWORD *)&v2 - 1;
  }
  v6 = *(void ***)(*a1 + 8 * v3);
  do
  {
    v7 = v6;
    v6 = (void **)*v6;
  }
  while (v6 != a2);
  if (v7 != a1 + 2)
  {
    v8 = (unint64_t)v7[1];
    if (v5.u32[0] > 1uLL)
    {
      if (v8 >= *(_QWORD *)&v2)
        v8 %= *(_QWORD *)&v2;
    }
    else
    {
      v8 &= *(_QWORD *)&v2 - 1;
    }
    v9 = *a2;
    if (v8 == v3)
    {
LABEL_20:
      if (!v9)
        goto LABEL_27;
      goto LABEL_21;
    }
  }
  if (!v4)
    goto LABEL_19;
  v10 = v4[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v10 >= *(_QWORD *)&v2)
      v10 %= *(_QWORD *)&v2;
  }
  else
  {
    v10 &= *(_QWORD *)&v2 - 1;
  }
  v9 = *a2;
  if (v10 != v3)
  {
LABEL_19:
    *(_QWORD *)(*a1 + 8 * v3) = 0;
    v9 = *a2;
    goto LABEL_20;
  }
LABEL_21:
  v11 = v9[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v11 >= *(_QWORD *)&v2)
      v11 %= *(_QWORD *)&v2;
  }
  else
  {
    v11 &= *(_QWORD *)&v2 - 1;
  }
  if (v11 != v3)
  {
    *(_QWORD *)(*a1 + 8 * v11) = v7;
    v9 = *a2;
  }
LABEL_27:
  *v7 = v9;
  *a2 = 0;
  --a1[3];
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](1, a2);
  return v4;
}

void itfm_inference_orchestrator::context::ContextFeaturizer::featurize(uint64_t a1, _QWORD *a2, uint64_t a3, sirinluexternal::LegacyNLContext *a4, uint64_t a5)
{
  __int128 *v8;
  __n128 *begin;
  __n128 *end;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  unint64_t v14;
  __int128 *v15;
  NSObject *v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  uint64_t v20;
  std::string *p_p;
  uint64_t v22;
  int *v23;
  int v24;
  NSObject *v25;
  int v26;
  const char *v27;
  const char *v28;
  const char *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  NSObject *v36;
  NSObject *v37;
  void **v38;
  char *v39;
  void *v40;
  _QWORD *v41;
  NSObject *v42;
  uint64_t v43;
  const char *v44;
  NSObject *v45;
  NSObject *v46;
  uint64_t v47;
  const char *v48;
  NSObject *v49;
  char *i;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  const char *v58;
  uint64_t j;
  void **v60;
  std::string::size_type v61;
  std::string *v62;
  __int128 v63;
  void **v64;
  void *v65;
  NSObject *log;
  void *v67[2];
  int64_t v68;
  void *v69[2];
  char v70;
  std::vector<std::string> v71;
  void *v72;
  void *v73;
  void *v74[2];
  unsigned __int8 v75;
  std::string v76;
  std::string __p;
  std::string v78;
  uint8_t v79[4];
  const char *v80;
  __int16 v81;
  void **v82;
  uint8_t buf[88];
  void *v84;
  char v85;
  _QWORD v86[22];

  v86[19] = *MEMORY[0x1E0C80C00];
  itfm_inference_orchestrator::context::ContextFeaturizer::extractContextLabels((itfm_inference_orchestrator::context::ContextFeaturizer *)a1, a4, a3, (uint64_t)&v72);
  memset(&v71, 0, sizeof(v71));
  v8 = (__int128 *)v73;
  *(_QWORD *)buf = &v71;
  if (v73)
  {
    do
    {
      std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((uint64_t **)buf, v8 + 1);
      v8 = *(__int128 **)v8;
    }
    while (v8);
    begin = (__n128 *)v71.__begin_;
    end = (__n128 *)v71.__end_;
  }
  else
  {
    end = 0;
    begin = 0;
  }
  v11 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  if (end == begin)
    v12 = 0;
  else
    v12 = v11;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(begin, end, v12, 1);
  v13 = (__int128 *)v71.__end_;
  v14 = *(_QWORD *)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v71.__end_ - (char *)v71.__begin_) >> 3) > v14)
  {
    v15 = (__int128 *)&v71.__begin_[v14];
    memset(&v78, 0, sizeof(v78));
    *(_QWORD *)buf = &v78;
    buf[8] = 0;
    if ((__int128 *)v71.__end_ != v15)
    {
      std::vector<std::pair<std::string_view,int>>::__vallocate[abi:ne180100](&v78, 0xAAAAAAAAAAAAAAABLL * (((char *)v71.__end_ - (char *)v15) >> 3));
      v78.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v78.__r_.__value_.__r.__words[2], v15, v13, (std::string *)v78.__r_.__value_.__l.__size_);
    }
    itfm_inference_orchestrator::inference_engine::vectorToString<std::string>((uint64_t)&__p, (uint64_t *)&v71);
    v16 = SNLPOSLoggerForCategory(2);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *(int *)(a1 + 56);
      if (v17 >= 8)
      {
        v19 = SNLPOSLoggerForCategory(4);
        v18 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v17;
          _os_log_impl(&dword_1C2196000, v19, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
        }
      }
      else
      {
        v18 = off_1E7BED840[v17];
      }
      v20 = *(_QWORD *)(a1 + 8);
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = v18;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = 0xAAAAAAAAAAAAAAABLL * (((char *)v71.__end_ - (char *)v71.__begin_) >> 3);
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v20;
      *(_WORD *)&buf[32] = 2080;
      *(_QWORD *)&buf[34] = p_p;
      _os_log_impl(&dword_1C2196000, v16, OS_LOG_TYPE_DEFAULT, "[%s] Number of context features (%lu) exceeds maximum limit (%lu): truncating by removing features %s", buf, 0x2Au);
    }
    std::vector<std::string>::resize(&v71, *(_QWORD *)(a1 + 8));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    *(_QWORD *)buf = &v78;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  itfm_inference_orchestrator::inference_engine::vectorToString<std::string>((uint64_t)v69, (uint64_t *)&v71);
  v23 = (int *)(a1 + 56);
  v22 = *(unsigned int *)(a1 + 56);
  if (v22 > 6)
    v24 = 4;
  else
    v24 = dword_1C2313414[v22];
  v25 = SNLPOSLoggerForCategory(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    v26 = *v23;
    v27 = "UNKNOWN";
    v28 = "SSU";
    v29 = "LVC";
    v30 = "PSC";
    v31 = "OWL";
    v32 = "UaaP";
    v33 = "SNLC";
    v34 = "[insights-snlp-nlv4]: ";
    v35 = "NLv4";
    switch(*v23)
    {
      case 0:
        break;
      case 1:
LABEL_27:
        v34 = "[insights-snlp-snlc]: ";
        v35 = v33;
        break;
      case 2:
LABEL_31:
        v34 = "[insights-snlp-owl]: ";
        v35 = v31;
        break;
      case 3:
LABEL_32:
        v34 = "[insights-snlp-uaap]: ";
        v35 = v32;
        break;
      case 4:
LABEL_33:
        v34 = "[insights-snlp-psc]: ";
        v35 = v30;
        break;
      case 5:
LABEL_34:
        v34 = "[insights-snlp-lvc]: ";
        v35 = v29;
        break;
      case 6:
LABEL_35:
        v34 = "[insights-snlp-ssu]: ";
        v35 = v28;
        break;
      case 7:
LABEL_37:
        v37 = SNLPOSLoggerForCategory(4);
        v34 = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v26;
          _os_log_impl(&dword_1C2196000, v37, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
        }
        v35 = v27;
        break;
      default:
        v36 = SNLPOSLoggerForCategory(4);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v26;
          _os_log_impl(&dword_1C2196000, v36, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
        }
        v26 = *v23;
        v33 = "<UNDEFINED_COMPONENT>";
        v34 = "[insights-snlp-nlv4]: ";
        v32 = "<UNDEFINED_COMPONENT>";
        v31 = "<UNDEFINED_COMPONENT>";
        v30 = "<UNDEFINED_COMPONENT>";
        v29 = "<UNDEFINED_COMPONENT>";
        v28 = "<UNDEFINED_COMPONENT>";
        v35 = "<UNDEFINED_COMPONENT>";
        switch(*v23)
        {
          case 0:
            goto LABEL_40;
          case 1:
            goto LABEL_27;
          case 2:
            goto LABEL_31;
          case 3:
            goto LABEL_32;
          case 4:
            goto LABEL_33;
          case 5:
            goto LABEL_34;
          case 6:
            goto LABEL_35;
          default:
            v27 = "<UNDEFINED_COMPONENT>";
            goto LABEL_37;
        }
    }
LABEL_40:
    v38 = v69;
    if (v70 < 0)
      v38 = (void **)v69[0];
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v35;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v34;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = v38;
    _os_log_impl(&dword_1C2196000, v25, OS_LOG_TYPE_DEBUG, "[%s] %sITFM context: %s", buf, 0x20u);
  }
  itfm_inference_orchestrator::context::Embedder::embed((_QWORD **)(a1 + 32), (uint64_t *)&v71, buf);
  v39 = (char *)*a2;
  if (*a2)
  {
    a2[1] = v39;
    operator delete(v39);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  *(_OWORD *)a2 = *(_OWORD *)buf;
  a2[2] = *(_QWORD *)&buf[16];
  memset(buf, 0, 24);
  v41 = a2 + 3;
  v40 = (void *)a2[3];
  if (v40)
  {
    a2[4] = v40;
    operator delete(v40);
    *v41 = 0;
    a2[4] = 0;
    a2[5] = 0;
    v40 = *(void **)buf;
  }
  *(_OWORD *)(a2 + 3) = *(_OWORD *)&buf[24];
  a2[5] = *(_QWORD *)&buf[40];
  memset(&buf[24], 0, 24);
  if (v40)
  {
    *(_QWORD *)&buf[8] = v40;
    operator delete(v40);
  }
  if (*(_BYTE *)(a5 + 24))
  {
    itfm_inference_orchestrator::context::ContextFeaturizer::insertToFeatureStore(a1, (uint64_t)a2, (__int128 **)&v71, (int *)(a1 + 56), (uint64_t *)a5);
  }
  else
  {
    v42 = SNLPOSLoggerForCategory(2);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      v43 = *v23;
      if (v43 >= 8)
      {
        v45 = SNLPOSLoggerForCategory(4);
        v44 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v43;
          _os_log_impl(&dword_1C2196000, v45, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
        }
      }
      else
      {
        v44 = off_1E7BED840[v43];
      }
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v44;
      _os_log_impl(&dword_1C2196000, v42, OS_LOG_TYPE_DEBUG, "[%s] nlu_request_id not found so skipping insertion of context featurized response into FeatureStore", buf, 0xCu);
    }
  }
  v46 = SNLPOSLoggerForCategory(2);
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
  {
    v47 = *v23;
    if (v47 >= 8)
    {
      v49 = SNLPOSLoggerForCategory(4);
      v48 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v47;
        _os_log_impl(&dword_1C2196000, v49, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
      }
    }
    else
    {
      v48 = off_1E7BED840[v47];
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)"[", 1);
    for (i = (char *)*a2; i != (char *)a2[1]; i += 8)
    {
      if (i != (char *)*a2)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)" ", 1);
      std::ostream::operator<<();
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)"]", 1);
    std::stringbuf::str();
    v51 = *MEMORY[0x1E0DE4F50];
    *(_QWORD *)buf = v51;
    v53 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v52 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)&buf[*(_QWORD *)(v51 - 24)] = v53;
    *(_QWORD *)&buf[16] = v52;
    *(_QWORD *)&buf[24] = MEMORY[0x1E0DE4FB8] + 16;
    if (v85 < 0)
      operator delete(v84);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1C3BB9A90](v86);
    v54 = std::string::insert(&v76, 0, "shape = ");
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    v56 = std::string::append(&__p, " data = ");
    log = v46;
    v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
    v58 = v48;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)"[", 1);
    for (j = a2[3]; j != a2[4]; j += 4)
    {
      if (j != *v41)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)" ", 1);
      std::ostream::operator<<();
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)"]", 1);
    std::stringbuf::str();
    *(_QWORD *)buf = v51;
    *(_QWORD *)&buf[*(_QWORD *)(v51 - 24)] = v53;
    *(_QWORD *)&buf[16] = v52;
    *(_QWORD *)&buf[24] = MEMORY[0x1E0DE4FB8] + 16;
    if (v85 < 0)
      operator delete(v84);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1C3BB9A90](v86);
    if ((v75 & 0x80u) == 0)
      v60 = v74;
    else
      v60 = (void **)v74[0];
    if ((v75 & 0x80u) == 0)
      v61 = v75;
    else
      v61 = (std::string::size_type)v74[1];
    v62 = std::string::append(&v78, (const std::string::value_type *)v60, v61);
    v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v68 = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)v67 = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    if ((char)v75 < 0)
      operator delete(v74[0]);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    v64 = v67;
    if (v68 < 0)
      v64 = (void **)v67[0];
    *(_DWORD *)v79 = 136315394;
    v80 = v58;
    v81 = 2080;
    v82 = v64;
    _os_log_impl(&dword_1C2196000, log, OS_LOG_TYPE_DEBUG, "[%s] ITFM non-padded context input tensor: %s", v79, 0x16u);
    if (SHIBYTE(v68) < 0)
      operator delete(v67[0]);
  }
  if (v70 < 0)
    operator delete(v69[0]);
  *(_QWORD *)buf = &v71;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v73);
  v65 = v72;
  v72 = 0;
  if (v65)
    operator delete(v65);
}

void sub_1C222B8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a58);
  __p = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](uint64_t **a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = *a1;
  v5 = (*a1)[1];
  v4 = (*a1)[2];
  v6 = *a1;
  if (v5 >= v4)
  {
    v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v6, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v6, a2);
    v7 = v5 + 24;
  }
  v3[1] = v7;
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  unint64_t *v9;
  __n128 *v10;
  uint64_t v11;
  unint64_t v12;
  __n128 *v13;
  uint64_t v14;
  _QWORD *v15;
  __n128 v16;
  unint64_t v17;
  __n128 v18;
  __n128 v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  __n128 *v23;
  __n128 v24;
  unint64_t v25;
  unint64_t v26;
  __int8 *v27;
  __n128 v28;
  __n128 v29;
  BOOL v30;
  __n128 v31;
  __n128 *v32;
  _BOOL4 v33;
  __n128 *v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __int8 *v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 *v44;
  BOOL v46;
  uint64_t v47;
  __n128 *v48;
  __n128 *v49;
  __n128 v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  __n128 v54;
  int64_t v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t *v60;
  __n128 v61;
  unint64_t *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  int64_t v67;
  __n128 *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  __n128 v77;
  unint64_t v78;
  uint64_t v79;
  int64_t v80;
  unint64_t v81;
  char *v82;
  __n128 v83;
  uint64_t v84;
  __int128 v85;
  __n128 v86;
  uint64_t v87;
  BOOL v88;
  __n128 *v89;
  __n128 v90;
  __n128 *v91;
  __n128 *v92;
  BOOL v93;
  __n128 v94;
  unint64_t v95;
  __n128 *v96;
  unsigned __int8 v97;
  __n128 *v98;
  __n128 v99;
  unint64_t v100;
  __n128 v101;
  unint64_t v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v8 = &a2[-2].n128_u64[1];
  v96 = a2 - 3;
  v98 = a2;
  v9 = &a2[-5].n128_u64[1];
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v8, a1))
        {
          v41 = *a1;
          v100 = a1[1].n128_u64[0];
          v99 = v41;
          v42 = *(__n128 *)v8;
          a1[1].n128_u64[0] = v8[2];
          *a1 = v42;
          v43 = v99;
          v8[2] = v100;
          *(__n128 *)v8 = v43;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], v8);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, v8);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1], v8);
        return;
      default:
        if (v11 <= 575)
        {
          v44 = (__n128 *)((char *)a1 + 24);
          v46 = a1 == a2 || v44 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v46)
            {
              v47 = 0;
              v48 = a1;
              do
              {
                v49 = v48;
                v48 = v44;
                if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v44, v49))
                {
                  v50 = *v48;
                  v100 = v48[1].n128_u64[0];
                  v99 = v50;
                  v48->n128_u64[1] = 0;
                  v48[1].n128_u64[0] = 0;
                  v48->n128_u64[0] = 0;
                  v51 = v47;
                  while (1)
                  {
                    v52 = (char *)a1 + v51;
                    *(__n128 *)(v52 + 24) = *(__n128 *)((char *)a1 + v51);
                    *((_QWORD *)v52 + 5) = *(unint64_t *)((char *)a1[1].n128_u64 + v51);
                    v52[23] = 0;
                    *v52 = 0;
                    if (!v51)
                      break;
                    v51 -= 24;
                    if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&v99, (unint64_t *)((char *)a1->n128_u64 + v51)))
                    {
                      v53 = (uint64_t)&a1[1].n128_i64[1] + v51;
                      goto LABEL_80;
                    }
                  }
                  v53 = (uint64_t)a1;
LABEL_80:
                  v54 = v99;
                  *(_QWORD *)(v53 + 16) = v100;
                  *(__n128 *)v53 = v54;
                }
                v44 = (__n128 *)((char *)v48 + 24);
                v47 += 24;
              }
              while (&v48[1].n128_i8[8] != (__int8 *)a2);
            }
          }
          else if (!v46)
          {
            do
            {
              v89 = a1;
              a1 = v44;
              if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v44, v89))
              {
                v90 = *a1;
                v100 = a1[1].n128_u64[0];
                v99 = v90;
                a1->n128_u64[1] = 0;
                a1[1].n128_u64[0] = 0;
                a1->n128_u64[0] = 0;
                v91 = a1;
                do
                {
                  v92 = (__n128 *)((char *)v91 - 24);
                  *v91 = *(__n128 *)((char *)v91 - 24);
                  v91[1].n128_u64[0] = v91[-1].n128_u64[1];
                  v91[-1].n128_u8[15] = 0;
                  v91[-2].n128_u8[8] = 0;
                  v93 = std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&v99, (__n128 *)v91[-3].n128_u64);
                  v91 = v92;
                }
                while (v93);
                v94 = v99;
                v92[1].n128_u64[0] = v100;
                *v92 = v94;
              }
              v44 = (__n128 *)((char *)a1 + 24);
            }
            while (&a1[1].n128_i8[8] != (__int8 *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            v55 = (v12 - 2) >> 1;
            v56 = v55;
            do
            {
              v57 = v56;
              if (v55 >= v56)
              {
                v58 = (2 * v56) | 1;
                v59 = (char *)a1 + 24 * v58;
                if (2 * v56 + 2 < (uint64_t)v12
                  && std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&a1->n128_u64[3 * v58], (_QWORD *)v59 + 3))
                {
                  v59 += 24;
                  v58 = 2 * v57 + 2;
                }
                v60 = &a1->n128_u64[3 * v57];
                a2 = v98;
                if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v59, v60))
                {
                  v61 = *(__n128 *)v60;
                  v100 = v60[2];
                  v99 = v61;
                  v60[1] = 0;
                  v60[2] = 0;
                  *v60 = 0;
                  do
                  {
                    v62 = (unint64_t *)v59;
                    v63 = *(_OWORD *)v59;
                    v60[2] = *((_QWORD *)v59 + 2);
                    *(_OWORD *)v60 = v63;
                    v59[23] = 0;
                    *v59 = 0;
                    if (v55 < v58)
                      break;
                    v64 = (2 * v58) | 1;
                    v59 = (char *)a1 + 24 * v64;
                    v65 = 2 * v58 + 2;
                    if (v65 < (uint64_t)v12
                      && std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&a1->n128_u64[3 * v64], (_QWORD *)v59 + 3))
                    {
                      v59 += 24;
                      v64 = v65;
                    }
                    v60 = v62;
                    v58 = v64;
                  }
                  while (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v59, &v99));
                  v66 = v99;
                  v62[2] = v100;
                  *(__n128 *)v62 = v66;
                  a2 = v98;
                }
              }
              v56 = v57 - 1;
            }
            while (v57);
            v67 = v11 / 0x18uLL;
            do
            {
              v68 = a2;
              v69 = 0;
              v95 = a1->n128_u64[0];
              v101.n128_u64[0] = a1->n128_u64[1];
              *(unint64_t *)((char *)v101.n128_u64 + 7) = *(unint64_t *)((char *)&a1->n128_u64[1] + 7);
              v97 = a1[1].n128_u8[7];
              a1->n128_u64[1] = 0;
              a1[1].n128_u64[0] = 0;
              a1->n128_u64[0] = 0;
              v70 = v67 - 2;
              if (v67 < 2)
                v70 = v67 - 1;
              v71 = v70 >> 1;
              v72 = (uint64_t)a1;
              do
              {
                v73 = v72 + 24 * v69 + 24;
                v74 = 2 * v69;
                v69 = (2 * v69) | 1;
                v75 = v74 + 2;
                if (v74 + 2 < v67
                  && std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>((_QWORD *)v73, (_QWORD *)(v73 + 24)))
                {
                  v73 += 24;
                  v69 = v75;
                }
                if (*(char *)(v72 + 23) < 0)
                  operator delete(*(void **)v72);
                v76 = *(__n128 *)v73;
                *(_QWORD *)(v72 + 16) = *(_QWORD *)(v73 + 16);
                *(__n128 *)v72 = v76;
                *(_BYTE *)(v73 + 23) = 0;
                *(_BYTE *)v73 = 0;
                v72 = v73;
              }
              while (v69 <= v71);
              a2 = (__n128 *)((char *)v68 - 24);
              if ((__int8 *)v73 == &v68[-2].n128_i8[8])
              {
                *(_QWORD *)v73 = v95;
                v87 = *(uint64_t *)((char *)v101.n128_i64 + 7);
                *(_QWORD *)(v73 + 8) = v101.n128_u64[0];
                *(_QWORD *)(v73 + 15) = v87;
                *(_BYTE *)(v73 + 23) = v97;
                v80 = v67 - 1;
              }
              else
              {
                v77 = *a2;
                *(_QWORD *)(v73 + 16) = v68[-1].n128_u64[1];
                *(__n128 *)v73 = v77;
                v68[-2].n128_u64[1] = v95;
                v78 = v101.n128_u64[0];
                *(unint64_t *)((char *)v68[-1].n128_u64 + 7) = *(unint64_t *)((char *)v101.n128_u64 + 7);
                v68[-1].n128_u64[0] = v78;
                v68[-1].n128_u8[15] = v97;
                v79 = v73 - (_QWORD)a1 + 24;
                v80 = v67 - 1;
                if (v79 >= 25)
                {
                  v81 = (unint64_t)(-2 - 0x5555555555555555 * (v79 >> 3)) >> 1;
                  v82 = (char *)a1 + 24 * v81;
                  if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v82, (_QWORD *)v73))
                  {
                    v83 = *(__n128 *)v73;
                    v100 = *(_QWORD *)(v73 + 16);
                    v99 = v83;
                    *(_QWORD *)(v73 + 8) = 0;
                    *(_QWORD *)(v73 + 16) = 0;
                    *(_QWORD *)v73 = 0;
                    do
                    {
                      v84 = (uint64_t)v82;
                      v85 = *(_OWORD *)v82;
                      *(_QWORD *)(v73 + 16) = *((_QWORD *)v82 + 2);
                      *(_OWORD *)v73 = v85;
                      v82[23] = 0;
                      *v82 = 0;
                      if (!v81)
                        break;
                      v81 = (v81 - 1) >> 1;
                      v82 = (char *)a1 + 24 * v81;
                      v73 = v84;
                    }
                    while (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v82, &v99));
                    v86 = v99;
                    *(_QWORD *)(v84 + 16) = v100;
                    *(__n128 *)v84 = v86;
                  }
                }
              }
              v88 = v67 <= 2;
              v67 = v80;
            }
            while (!v88);
          }
          return;
        }
        v13 = (__n128 *)((char *)a1 + 24 * (v12 >> 1));
        if ((unint64_t)v11 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(&a1->n128_u64[3 * (v12 >> 1)], a1, v8);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1->n128_u64[3 * (v12 >> 1)], v8);
          v14 = 3 * (v12 >> 1);
          v15 = (_QWORD *)&a1[-1] + 3 * (v12 >> 1) - 1;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(&a1[1].n128_u64[1], v15, v96);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__n128 *)a1[3].n128_u64, &a1[1].n128_u64[v14 + 1], v9);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v15, v13, &a1[1].n128_u64[v14 + 1]);
          v16 = *a1;
          v100 = a1[1].n128_u64[0];
          v99 = v16;
          v17 = v13[1].n128_u64[0];
          *a1 = *v13;
          a1[1].n128_u64[0] = v17;
          v18 = v99;
          v13[1].n128_u64[0] = v100;
          *v13 = v18;
        }
        --a3;
        a2 = v98;
        if ((a4 & 1) == 0
          && !std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&a1[-2].n128_u64[1], a1))
        {
          v31 = *a1;
          v102 = a1[1].n128_u64[0];
          v101 = v31;
          a1->n128_u64[1] = 0;
          a1[1].n128_u64[0] = 0;
          a1->n128_u64[0] = 0;
          if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&v101, v8))
          {
            v10 = a1;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&v101, v10));
          }
          else
          {
            v32 = (__n128 *)((char *)a1 + 24);
            do
            {
              v10 = v32;
              if (v32 >= v98)
                break;
              v33 = std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&v101, v32);
              v32 = (__n128 *)((char *)v10 + 24);
            }
            while (!v33);
          }
          v34 = v98;
          if (v10 < v98)
          {
            v34 = v98;
            do
              v34 = (__n128 *)((char *)v34 - 24);
            while (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&v101, v34));
          }
          while (v10 < v34)
          {
            v35 = *v10;
            v100 = v10[1].n128_u64[0];
            v99 = v35;
            v36 = *v34;
            v10[1].n128_u64[0] = v34[1].n128_u64[0];
            *v10 = v36;
            v37 = v99;
            v34[1].n128_u64[0] = v100;
            *v34 = v37;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&v101, v10));
            do
              v34 = (__n128 *)((char *)v34 - 24);
            while (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&v101, v34));
          }
          v38 = &v10[-2].n128_i8[8];
          if (&v10[-2].n128_i8[8] == (__int8 *)a1)
          {
            if (v10[-1].n128_i8[15] < 0)
              operator delete((void *)a1->n128_u64[0]);
          }
          else
          {
            if (a1[1].n128_i8[7] < 0)
              operator delete((void *)a1->n128_u64[0]);
            v39 = *(__n128 *)v38;
            a1[1].n128_u64[0] = v10[-1].n128_u64[1];
            *a1 = v39;
            v10[-1].n128_u8[15] = 0;
            v10[-2].n128_u8[8] = 0;
          }
          a4 = 0;
          v40 = v101;
          v10[-1].n128_u64[1] = v102;
          *(__n128 *)v38 = v40;
          continue;
        }
        v19 = *a1;
        v102 = a1[1].n128_u64[0];
        v101 = v19;
        a1->n128_u64[1] = 0;
        a1[1].n128_u64[0] = 0;
        a1->n128_u64[0] = 0;
        v20 = a1;
        do
        {
          v21 = v20;
          v20 = (__n128 *)((char *)v20 + 24);
        }
        while (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v20, &v101));
        v22 = v98;
        if (v21 == a1)
        {
          v22 = v98;
          do
          {
            if (v20 >= v22)
              break;
            v22 = (__n128 *)((char *)v22 - 24);
          }
          while (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v22, &v101));
        }
        else
        {
          do
            v22 = (__n128 *)((char *)v22 - 24);
          while (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v22, &v101));
        }
        v10 = v20;
        if (v20 < v22)
        {
          v23 = v22;
          do
          {
            v99 = *v10;
            v24 = v99;
            v100 = v10[1].n128_u64[0];
            v25 = v100;
            v26 = v23[1].n128_u64[0];
            *v10 = *v23;
            v10[1].n128_u64[0] = v26;
            v23[1].n128_u64[0] = v25;
            *v23 = v24;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v10, &v101));
            do
              v23 = (__n128 *)((char *)v23 - 24);
            while (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v23, &v101));
          }
          while (v10 < v23);
        }
        v27 = &v10[-2].n128_i8[8];
        if (&v10[-2].n128_i8[8] == (__int8 *)a1)
        {
          if (v10[-1].n128_i8[15] < 0)
            operator delete((void *)a1->n128_u64[0]);
        }
        else
        {
          if (a1[1].n128_i8[7] < 0)
            operator delete((void *)a1->n128_u64[0]);
          v28 = *(__n128 *)v27;
          a1[1].n128_u64[0] = v10[-1].n128_u64[1];
          *a1 = v28;
          v10[-1].n128_u8[15] = 0;
          v10[-2].n128_u8[8] = 0;
        }
        v29 = v101;
        v10[-1].n128_u64[1] = v102;
        *(__n128 *)v27 = v29;
        if (v20 < v22)
        {
LABEL_34:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, &v10[-2].n128_i8[8], a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (__n128 *)((char *)v10 - 24));
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v10, v98))
        {
          if (v30)
            continue;
          goto LABEL_34;
        }
        a2 = (__n128 *)((char *)v10 - 24);
        if (!v30)
          goto LABEL_2;
        return;
    }
  }
}

uint64_t itfm_inference_orchestrator::inference_engine::vectorToString<std::string>(uint64_t a1, uint64_t *a2)
{
  uint64_t i;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"[", 1);
  for (i = *a2; i != a2[1]; i += 24)
  {
    if (i != *a2)
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
    v4 = *(char *)(i + 23);
    if (v4 >= 0)
      v5 = i;
    else
      v5 = *(_QWORD *)i;
    if (v4 >= 0)
      v6 = *(unsigned __int8 *)(i + 23);
    else
      v6 = *(_QWORD *)(i + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v5, v6);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E0DE4F50];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v10[0] = v7;
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3BB9A90](&v12);
}

void sub_1C222C58C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void itfm_inference_orchestrator::context::ContextFeaturizer::insertToFeatureStore(uint64_t a1, uint64_t a2, __int128 **a3, int *a4, uint64_t *a5)
{
  BOOL inserted;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  NSObject *v20;
  const char *v21;
  NSObject *v22;
  int v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (_os_feature_enabled_impl())
  {
    itfm_inference_orchestrator::context::ContextFeaturizer::makeContextResponse(a2, a3, a4, (sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *)&v23);
    inserted = snlp::common::logging::feature_store_utilities::insertITFMContextResponseToFeatureStore((uint64_t)&v23, a5, (uint64_t)a4);
    MEMORY[0x1C3BB877C](&v23);
    if (inserted)
    {
      v11 = SNLPOSLoggerForCategory(2);
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        return;
      v12 = *(int *)(a1 + 56);
      if (v12 >= 8)
      {
        v22 = SNLPOSLoggerForCategory(4);
        v13 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          v23 = 136315394;
          v24 = "<UNDEFINED_COMPONENT>";
          v25 = 2048;
          v26 = v12;
          _os_log_impl(&dword_1C2196000, v22, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v23, 0x16u);
        }
      }
      else
      {
        v13 = off_1E7BED840[v12];
      }
      v23 = 136315138;
      v24 = v13;
      v21 = "[%s] Successfully inserted context featurizer response into FeatureStore";
      goto LABEL_21;
    }
  }
  else
  {
    v14 = SNLPOSLoggerForCategory(2);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      v15 = *(int *)(a1 + 56);
      if (v15 >= 8)
      {
        v17 = SNLPOSLoggerForCategory(4);
        v16 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          v23 = 136315394;
          v24 = "<UNDEFINED_COMPONENT>";
          v25 = 2048;
          v26 = v15;
          _os_log_impl(&dword_1C2196000, v17, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v23, 0x16u);
        }
      }
      else
      {
        v16 = off_1E7BED840[v15];
      }
      v23 = 136315138;
      v24 = v16;
      _os_log_impl(&dword_1C2196000, v14, OS_LOG_TYPE_DEBUG, "[%s] Skipping insertion of ITFM context featurizer response into FeatureStore because SNLPFeatureStoreEnabled feature flag is disabled", (uint8_t *)&v23, 0xCu);
    }
  }
  v11 = SNLPOSLoggerForCategory(2);
  if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    return;
  v18 = *(int *)(a1 + 56);
  if (v18 >= 8)
  {
    v20 = SNLPOSLoggerForCategory(4);
    v19 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v23 = 136315394;
      v24 = "<UNDEFINED_COMPONENT>";
      v25 = 2048;
      v26 = v18;
      _os_log_impl(&dword_1C2196000, v20, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v23, 0x16u);
    }
  }
  else
  {
    v19 = off_1E7BED840[v18];
  }
  v23 = 136315138;
  v24 = v19;
  v21 = "[%s] Unable to insert context featurizer response into FeatureStore";
LABEL_21:
  _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEBUG, v21, (uint8_t *)&v23, 0xCu);
}

void itfm_inference_orchestrator::context::ContextFeaturizer::makeContextResponse(uint64_t a1@<X0>, __int128 **a2@<X1>, int *a3@<X2>, sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *a4@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  float *v21;
  float *v22;
  void **v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  __int128 *v35;
  __int128 *v36;
  unint64_t v37;
  sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *v38;
  sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *v39;
  uint64_t v40;
  sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  NSObject *v48;
  uint64_t v49;
  uint8_t buf[4];
  const char *v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)operator new();
  sirinluinternalsnlp_intermediate::LinearizedTensor::LinearizedTensor((sirinluinternalsnlp_intermediate::LinearizedTensor *)v6);
  v7 = *(_QWORD **)a1;
  v8 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 != v8)
  {
    v9 = (void **)(v6 + 4);
    v10 = v6 + 6;
    v11 = (char *)v6[5];
    do
    {
      if ((unint64_t)v11 >= *v10)
      {
        v13 = (char *)*v9;
        v14 = (v11 - (_BYTE *)*v9) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v16 = *v10 - (_QWORD)v13;
        if (v16 >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v6 + 6), v17);
          v13 = (char *)v6[4];
          v11 = (char *)v6[5];
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[4 * v14];
        *(_DWORD *)v19 = *v7;
        v12 = v19 + 4;
        while (v11 != v13)
        {
          v20 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        v6[4] = v19;
        v6[5] = v12;
        v6[6] = &v18[4 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_DWORD *)v11 = *v7;
        v12 = v11 + 4;
      }
      v6[5] = v12;
      ++v7;
      v11 = v12;
    }
    while (v7 != v8);
  }
  v21 = *(float **)(a1 + 24);
  v22 = *(float **)(a1 + 32);
  if (v21 != v22)
  {
    v23 = (void **)(v6 + 1);
    v24 = v6 + 3;
    v25 = (char *)v6[2];
    do
    {
      if ((unint64_t)v25 >= *v24)
      {
        v27 = (char *)*v23;
        v28 = (v25 - (_BYTE *)*v23) >> 2;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v30 = *v24 - (_QWORD)v27;
        if (v30 >> 1 > v29)
          v29 = v30 >> 1;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
          v31 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v6 + 3), v31);
          v27 = (char *)v6[1];
          v25 = (char *)v6[2];
        }
        else
        {
          v32 = 0;
        }
        v33 = &v32[4 * v28];
        *(_DWORD *)v33 = *v21;
        v26 = v33 + 4;
        while (v25 != v27)
        {
          v34 = *((_DWORD *)v25 - 1);
          v25 -= 4;
          *((_DWORD *)v33 - 1) = v34;
          v33 -= 4;
        }
        v6[1] = v33;
        v6[2] = v26;
        v6[3] = &v32[4 * v31];
        if (v27)
          operator delete(v27);
      }
      else
      {
        *(_DWORD *)v25 = *v21;
        v26 = v25 + 4;
      }
      v6[2] = v26;
      ++v21;
      v25 = v26;
    }
    while (v21 != v22);
  }
  v36 = *a2;
  v35 = a2[1];
  if (*a2 != v35)
  {
    v37 = v6[8];
    do
    {
      if (v37 >= v6[9])
      {
        v37 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v6 + 7, v36);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)(v6 + 7), v36);
        v37 += 24;
      }
      v6[8] = v37;
      v36 = (__int128 *)((char *)v36 + 24);
    }
    while (v36 != v35);
  }
  v38 = (sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *)operator new();
  v39 = (sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *)sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::ContextFeaturizerResponse(v38);
  sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::makeTensor(v39);
  v40 = *((_QWORD *)v38 + 1);
  *((_QWORD *)v38 + 1) = v6;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse *)sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::ITFMContextFeaturizerResponse(a4);
  sirinluinternalsnlp_intermediate::ITFMContextFeaturizerResponse::makeResponse(v41);
  v42 = *((_QWORD *)a4 + 2);
  *((_QWORD *)a4 + 2) = v38;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  if (!*((_QWORD *)a4 + 1))
  {
    v43 = (_QWORD *)operator new();
    *v43 = 0;
    v43[1] = 0;
    v43[2] = 0;
    v44 = *((_QWORD *)a4 + 1);
    *((_QWORD *)a4 + 1) = v43;
    if (v44)
      std::default_delete<std::string>::operator()[abi:ne180100](v44);
  }
  v45 = (_QWORD *)operator new();
  v46 = *a3;
  if (v46 >= 8)
  {
    v48 = SNLPOSLoggerForCategory(4);
    v47 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v53 = "<UNDEFINED_COMPONENT>";
      v54 = 2048;
      v55 = v46;
      _os_log_impl(&dword_1C2196000, v48, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
    }
  }
  else
  {
    v47 = off_1E7BED840[v46];
  }
  std::string::basic_string[abi:ne180100]<0>(v45, v47);
  v49 = *((_QWORD *)a4 + 1);
  *((_QWORD *)a4 + 1) = v45;
  if (v49)
    std::default_delete<std::string>::operator()[abi:ne180100](v49);
}

void sub_1C222CCD0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1C3BB9B44](v2, 0x1012C40EC159624);
  MEMORY[0x1C3BB877C](v1);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1C222CE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  BOOL v6;
  _BOOL8 result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v6 = std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a2, a1);
  result = std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a3, a2);
  if (v6)
  {
    if (result)
    {
      v8 = a1[2];
      v9 = *(_OWORD *)a1;
      v10 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v10;
    }
    else
    {
      v17 = a1[2];
      v18 = *(_OWORD *)a1;
      v19 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v19;
      *(_OWORD *)a2 = v18;
      a2[2] = v17;
      result = std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a3, a2);
      if (!result)
        return result;
      v8 = a2[2];
      v9 = *(_OWORD *)a2;
      v20 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v20;
    }
    *(_OWORD *)a3 = v9;
    a3[2] = v8;
  }
  else if (result)
  {
    v11 = a2[2];
    v12 = *(_OWORD *)a2;
    v13 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v13;
    *(_OWORD *)a3 = v12;
    a3[2] = v11;
    result = std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a2, a1);
    if (result)
    {
      v14 = a1[2];
      v15 = *(_OWORD *)a1;
      v16 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v16;
      *(_OWORD *)a2 = v15;
      a2[2] = v14;
    }
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(__n128 *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  __n128 result;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2, a3);
  if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a4, a3))
  {
    v9 = a3[2];
    v10 = *(_OWORD *)a3;
    v11 = a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v11;
    *(_OWORD *)a4 = v10;
    a4[2] = v9;
    if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a3, a2))
    {
      v12 = a2[2];
      v13 = *(_OWORD *)a2;
      v14 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v14;
      *(_OWORD *)a3 = v13;
      a3[2] = v12;
      if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a2, a1))
      {
        v15 = a1[1].n128_u64[0];
        result = *a1;
        v16 = a2[2];
        *a1 = *(__n128 *)a2;
        a1[1].n128_u64[0] = v16;
        *(__n128 *)a2 = result;
        a2[2] = v15;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(__n128 *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2, a3, a4);
  if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a5, a4))
  {
    v11 = a4[2];
    v12 = *(_OWORD *)a4;
    v13 = a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v13;
    *(_OWORD *)a5 = v12;
    a5[2] = v11;
    if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a4, a3))
    {
      v14 = a3[2];
      v15 = *(_OWORD *)a3;
      v16 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v16;
      *(_OWORD *)a4 = v15;
      a4[2] = v14;
      if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a3, a2))
      {
        v17 = a2[2];
        v18 = *(_OWORD *)a2;
        v19 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v19;
        *(_OWORD *)a3 = v18;
        a3[2] = v17;
        if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a2, a1))
        {
          v20 = a1[1].n128_u64[0];
          result = *a1;
          v21 = a2[2];
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v21;
          *(__n128 *)a2 = result;
          a2[2] = v20;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(__n128 *a1, __n128 *a2)
{
  unint64_t v4;
  _BOOL8 result;
  __n128 *v6;
  unint64_t v7;
  __n128 v8;
  unint64_t v9;
  __n128 *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__n128 *)((char *)a2 - 24);
      if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&a2[-2].n128_u64[1], a1))
      {
        v7 = a1[1].n128_u64[0];
        v8 = *a1;
        v9 = v6[1].n128_u64[0];
        *a1 = *v6;
        a1[1].n128_u64[0] = v9;
        *v6 = v8;
        v6[1].n128_u64[0] = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a2[-2].n128_u64[1]);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    default:
      v10 = a1 + 3;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64);
      v11 = &a1[4].n128_u64[1];
      if (&a1[4].n128_i8[8] == (__int8 *)a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v11, v10))
    {
      v17 = *(_OWORD *)v11;
      v18 = v11[2];
      v11[1] = 0;
      v11[2] = 0;
      *v11 = 0;
      v14 = v12;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 72) = *(__n128 *)((char *)a1 + v14 + 48);
        *((_QWORD *)v15 + 11) = *(unint64_t *)((char *)a1[4].n128_u64 + v14);
        v15[71] = 0;
        v15[48] = 0;
        if (v14 == -48)
          break;
        v14 -= 24;
        if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(&v17, (_QWORD *)v15 + 3))
        {
          v16 = (uint64_t)&a1[4].n128_i64[1] + v14;
          goto LABEL_12;
        }
      }
      v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)v16 = v17;
      *(_QWORD *)(v16 + 16) = v18;
      if (++v13 == 8)
        return v11 + 3 == (unint64_t *)a2;
    }
    v10 = (__n128 *)v11;
    v12 += 24;
    v11 += 3;
    if (v11 == (unint64_t *)a2)
      return 1;
  }
}

void snlp::ssu::parse::SSUGraphBuilderShortcuts::~SSUGraphBuilderShortcuts(snlp::ssu::parse::SSUGraphBuilderShortcuts *this)
{
  JUMPOUT(0x1C3BB9B44);
}

_QWORD *snlp::ssu::parse::SSUGraphBuilderShortcuts::identifierAppBundleId@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Shortcuts");
}

void snlp::ssu::parse::SSUGraphBuilderShortcuts::buildUtteranceIdentifier(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string **a3@<X8>)
{
  std::string *v5;
  void *v6[2];
  uint64_t v7;
  void *__p[2];
  char v9;
  char v10;
  void *v11[2];
  uint64_t v12;
  std::string v13;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(v6);
  v5 = (std::string *)operator new();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v13 = *(std::string *)a2;
  *(_OWORD *)v11 = *(_OWORD *)v6;
  v12 = v7;
  v6[1] = 0;
  v7 = 0;
  v6[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "semantic_value");
  v10 = 1;
  siri::ontology::UsoIdentifier::UsoIdentifier(v5, (uint64_t)&v13, (uint64_t)v11, (__int128 *)__p, 0x100000006uLL);
  *a3 = v5;
  if (v10 && v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7) < 0)
    operator delete(v6[0]);
}

void sub_1C222D424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  MEMORY[0x1C3BB9B44](v28, 0x1012C40071C2685);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

const std::__fs::filesystem::path *snlp::ssu::app::SSUCompressedFileWrapper::SSUCompressedFileWrapper(const std::__fs::filesystem::path *a1, const void **a2, const void **a3, uint64_t a4)
{
  snlp::ssu::app::SSUFileWrapper *v5;

  snlp::ssu::app::SSUCompressedFileWrapper::decompressSSUFileToDisk(a2, a3, a4, (uint64_t)a1);
  v5 = (snlp::ssu::app::SSUFileWrapper *)operator new();
  snlp::ssu::app::SSUFileWrapper::SSUFileWrapper(v5, a1);
  a1[1].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  return a1;
}

void sub_1C222D504(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x1C3BB9B44](v3, 0x20C4093837F09);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void snlp::ssu::app::SSUCompressedFileWrapper::decompressSSUFileToDisk(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::__fs::filesystem::path *v8;
  NSObject *v9;
  std::string *v10;
  std::string v11;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  std::string *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  snlp::ssu::app::SSUCompressedFileWrapper::findCompressedSSUFileForAppLocale((uint64_t)a1, a2, (uint64_t)__p);
  snlp::ssu::app::SSUCompressedFileWrapper::buildDecompressedFilePath(a3, (uint64_t)a2, a1, (std::string *)a4);
  siri_nlu_types::ssu_compression_utilities::decompressFromCompressedSSUFilePath((siri_nlu_types::ssu_compression_utilities *)__p, (const std::__fs::filesystem::path *)a4, v8);
  v9 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a4 + 23) < 0)
      std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    else
      v11 = *(std::string *)a4;
    v10 = &v11;
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = (std::string *)v11.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v15 = v10;
    _os_log_impl(&dword_1C2196000, v9, OS_LOG_TYPE_DEBUG, "Finished writing decompressed SSUFile to %s", buf, 0xCu);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (v13 < 0)
    operator delete(__p[0]);
}

void sub_1C222D678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, std::string *a13, uint64_t a14, std::string *a15, __int128 __p, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__pa,uint64_t __p_8,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (*(char *)(v27 + 23) < 0)
    operator delete(*(void **)v27);
  if (a27 < 0)
    operator delete(__pa);
  _Unwind_Resume(exception_object);
}

void snlp::ssu::app::SSUCompressedFileWrapper::findCompressedSSUFileForAppLocale(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  size_t v6;
  std::string *p_p;
  const void *v8;
  std::runtime_error *exception;
  std::string *v10;
  __int128 v11;
  std::__fs::filesystem::path *v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  const std::string::value_type *v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string __p;
  std::string v27;
  std::__fs::filesystem::path v28;

  v5 = a1 + 24;
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v27, &snlp::ssu::app::file_extensions::kCompressedSSUFile);
  std::__fs::filesystem::operator/[abi:ne180100](&v28.__pn_, v5, (std::__fs::filesystem::path *)&v27);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  std::__fs::filesystem::__status(&v28, 0);
  if (v27.__r_.__value_.__s.__data_[0] == 1)
  {
    if (SHIBYTE(v28.__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external((std::string *)a3, v28.__pn_.__r_.__value_.__l.__data_, v28.__pn_.__r_.__value_.__l.__size_);
    else
      *(std::__fs::filesystem::path *)a3 = v28;
  }
  else
  {
    if (*((char *)a2 + 23) >= 0)
      v6 = *((unsigned __int8 *)a2 + 23);
    else
      v6 = (size_t)a2[1];
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v6 + 10);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v6)
    {
      if (*((char *)a2 + 23) >= 0)
        v8 = a2;
      else
        v8 = *a2;
      memmove(p_p, v8, v6);
    }
    strcpy((char *)p_p + v6, ".nlu.lzfse");
    v27 = __p;
    memset(&__p, 0, sizeof(__p));
    std::__fs::filesystem::operator/[abi:ne180100]((std::string *)a3, v5, (std::__fs::filesystem::path *)&v27);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)a3, 0);
    if (v27.__r_.__value_.__s.__data_[0] != 1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v10 = std::string::append(&v22, " not supported by assets directory since neither generic file (");
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v23.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      if ((v28.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v28;
      else
        v12 = (std::__fs::filesystem::path *)v28.__pn_.__r_.__value_.__r.__words[0];
      v13 = std::string::append(&v23, (const std::string::value_type *)v12);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v24.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      v15 = std::string::append(&v24, " not locale-specific file (");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v25.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a3 + 23) >= 0)
        v17 = (const std::string::value_type *)a3;
      else
        v17 = *(const std::string::value_type **)a3;
      v18 = std::string::append(&v25, v17);
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      v20 = std::string::append(&__p, ") is prsent.");
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v27);
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
    }
  }
  if (SHIBYTE(v28.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__pn_.__r_.__value_.__l.__data_);
}

void sub_1C222DB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  void *v43;
  int v44;
  uint64_t v45;

  if (*(char *)(v45 - 89) < 0)
    operator delete(*(void **)(v45 - 112));
  if (a42 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v44 & 1) == 0)
    {
LABEL_16:
      if (*(char *)(v42 + 23) < 0)
        operator delete(*(void **)v42);
      if (*(char *)(v45 - 65) < 0)
        operator delete(*(void **)(v45 - 88));
      _Unwind_Resume(a1);
    }
  }
  else if (!v44)
  {
    goto LABEL_16;
  }
  __cxa_free_exception(v43);
  goto LABEL_16;
}

void snlp::ssu::app::SSUCompressedFileWrapper::buildDecompressedFilePath(uint64_t a1@<X0>, uint64_t a2@<X1>, const void **a3@<X2>, std::string *a4@<X8>)
{
  int *v8;
  uint64_t v9;
  size_t v10;
  std::string *v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  _OWORD *v20;
  const std::string::value_type *p_p;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  void *__p;
  __int128 v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  __int128 v33;
  std::string::size_type v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  LODWORD(v33) = 0;
  v8 = (int *)boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v33);
  v35[0] = boost::uuids::random_generator_pure::operator()(v8);
  v35[1] = v9;
  boost::uuids::detail::random_provider_base::destroy(v33);
  if (*((char *)a3 + 23) >= 0)
    v10 = *((unsigned __int8 *)a3 + 23);
  else
    v10 = (size_t)a3[1];
  v11 = &v29;
  std::string::basic_string[abi:ne180100]((uint64_t)&v29, v10 + 1);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = (std::string *)v29.__r_.__value_.__r.__words[0];
  if (v10)
  {
    if (*((char *)a3 + 23) >= 0)
      v12 = a3;
    else
      v12 = *a3;
    memmove(v11, v12, v10);
  }
  *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v10) = 95;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a2;
  else
    v14 = *(const std::string::value_type **)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::string::append(&v29, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v30, "_");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = operator new(0x28uLL);
  __p = v20;
  v28 = xmmword_1C230B540;
  *v20 = 0u;
  v20[1] = 0u;
  *(_QWORD *)((char *)v20 + 29) = 0;
  boost::uuids::to_chars<char *>((uint64_t)v35, v20);
  if (v28 >= 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if (v28 >= 0)
    v22 = HIBYTE(v28);
  else
    v22 = v28;
  v23 = std::string::append(&v31, p_p, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v32, ".nlu");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v34 = v25->__r_.__value_.__r.__words[2];
  v33 = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28) < 0)
    operator delete(__p);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v32, (char *)&v33);
  std::__fs::filesystem::operator/[abi:ne180100](a4, a1, (std::__fs::filesystem::path *)&v32);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34) < 0)
    operator delete((void *)v33);
}

void sub_1C222DEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a40 < 0)
    operator delete(__p);
  if (*(char *)(v40 - 89) < 0)
    operator delete(*(void **)(v40 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t boost::uuids::to_chars<char *>(uint64_t result, _BYTE *a2)
{
  unint64_t i;
  char v3;
  unsigned int v4;
  char v5;
  char v6;
  _BYTE *v7;

  for (i = 0; i != 16; ++i)
  {
    if (*(unsigned __int8 *)(result + i) >= 0xA0u)
      v3 = 87;
    else
      v3 = 48;
    *a2 = v3 + (*(_BYTE *)(result + i) >> 4);
    v4 = *(_BYTE *)(result + i) & 0xF;
    if (v4 >= 0xA)
      v5 = 87;
    else
      v5 = 48;
    v6 = v5 + v4;
    v7 = a2 + 2;
    a2[1] = v6;
    if (i <= 9 && ((1 << i) & 0x2A8) != 0)
    {
      v7 = a2 + 3;
      a2[2] = 45;
    }
    a2 = v7;
  }
  return result;
}

void snlp::ssu::app::SSUCompressedFileWrapper::~SSUCompressedFileWrapper(snlp::ssu::app::SSUCompressedFileWrapper *this)
{
  snlp::ssu::app::SSUFileWrapper **v2;
  NSObject *v3;
  std::string *p_p;
  std::string __p;
  uint8_t buf[4];
  std::string *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = (snlp::ssu::app::SSUFileWrapper **)((char *)this + 24);
  std::unique_ptr<snlp::ssu::app::SSUFileWrapper const>::reset[abi:ne180100]((snlp::ssu::app::SSUFileWrapper **)this + 3);
  std::__fs::filesystem::__remove((const std::__fs::filesystem::path *)this, 0);
  v3 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)this + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
    else
      __p = *(std::string *)this;
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v7 = p_p;
    _os_log_impl(&dword_1C2196000, v3, OS_LOG_TYPE_DEBUG, "Temporary decompressed SSUFile removed at location: %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::unique_ptr<snlp::ssu::app::SSUFileWrapper const>::reset[abi:ne180100](v2);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void sub_1C222E15C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

snlp::ssu::app::SSUFileWrapper *std::unique_ptr<snlp::ssu::app::SSUFileWrapper const>::reset[abi:ne180100](snlp::ssu::app::SSUFileWrapper **a1)
{
  snlp::ssu::app::SSUFileWrapper *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    snlp::ssu::app::SSUFileWrapper::~SSUFileWrapper(result);
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

uint64_t snlp::ssu::app::SSUCompressedFileWrapper::fileWrapper(snlp::ssu::app::SSUCompressedFileWrapper *this)
{
  return *((_QWORD *)this + 3);
}

void sub_1C222E2B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C222E464(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C222E5A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C222E9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1C222EC90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C222EF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1C222F218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::trees::SpanUsoInserter::getInsertionPointLabel(nlv4_inference_orchestrator::trees::SpanUsoInserter *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

void nlv4_inference_orchestrator::trees::SpanUsoInserter::findSpanEntity(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t *a5@<X4>, std::string *a6@<X5>, _BYTE *a7@<X8>)
{
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string::size_type size;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38[2];
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  void *__p[2];
  int64_t v44;
  std::string v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  std::to_string(&v40, *(_QWORD *)(a2 + 112));
  v14 = std::string::insert(&v40, 0, "Searching for span with UTF-16 indices (");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v41, ", ");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v39, *(_QWORD *)(a2 + 120));
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v39;
  else
    v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  else
    size = v39.__r_.__value_.__l.__size_;
  v20 = std::string::append(&v42, (const std::string::value_type *)v18, size);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v45, ")");
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v44 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  v24 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    v25 = __p;
    if (v44 < 0)
      v25 = (void **)__p[0];
    LODWORD(v45.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v45.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
    _os_log_impl(&dword_1C2196000, v24, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v45, 0xCu);
  }
  v26 = a1[23];
  if ((v26 & 0x80u) == 0)
    v27 = a1[23];
  else
    v27 = *((_QWORD *)a1 + 1);
  v28 = *(unsigned __int8 *)(a2 + 71);
  v29 = (char)v28;
  if ((v28 & 0x80u) != 0)
    v28 = *(_QWORD *)(a2 + 56);
  if (v27 != v28)
    goto LABEL_37;
  if (v29 >= 0)
    v30 = (unsigned __int8 *)(a2 + 48);
  else
    v30 = *(unsigned __int8 **)(a2 + 48);
  if ((v26 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a1, v30, *((_QWORD *)a1 + 1)))
      goto LABEL_41;
LABEL_37:
    *a7 = 0;
    a7[8] = 0;
    goto LABEL_38;
  }
  if (a1[23])
  {
    v31 = a1;
    while (*v31 == *v30)
    {
      ++v31;
      ++v30;
      if (!--v26)
        goto LABEL_41;
    }
    goto LABEL_37;
  }
LABEL_41:
  v32 = *a5;
  v33 = (std::__shared_weak_count *)a5[1];
  v38[0] = v32;
  v38[1] = (uint64_t)v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(p_shared_owners);
    while (__stxr(v35 + 1, p_shared_owners));
  }
  nlv4_inference_orchestrator::trees::SpanUsoInserter::findClosestSpan((nlv4_inference_orchestrator::trees::SpanUsoInserter *)a1, a3, a2, a4, v38, a6, (uint64_t)a7);
  if (v33)
  {
    v36 = (unint64_t *)&v33->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
LABEL_38:
  if (SHIBYTE(v44) < 0)
    operator delete(__p[0]);
}

void sub_1C222F658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a42 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::trees::SpanUsoInserter::findClosestSpan(nlv4_inference_orchestrator::trees::SpanUsoInserter *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t *a5@<X4>, std::string *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  void **v18;
  int64_t size;
  std::string *v20;
  void **v21;
  int64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  const sirinluexternal::UsoGraph *v36;
  NSObject *v37;
  std::string *v38;
  __int128 v39;
  NSObject *v40;
  std::string *p_p;
  _BOOL8 v42;
  BOOL v43;
  unint64_t UtteranceAlignments;
  char v45;
  unint64_t v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  unint64_t v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  std::string::size_type v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  std::string::size_type v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  __int128 v69;
  unint64_t v70;
  unint64_t v71;
  BOOL v72;
  char v73;
  double v74;
  unint64_t v75;
  BOOL v76;
  unint64_t v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  std::string::size_type v83;
  std::string *v84;
  __int128 v85;
  NSObject *v86;
  std::string *v87;
  siri::ontology::UsoGraph *v88;
  uint64_t v89;
  int v90;
  NSObject *v91;
  NSObject *v92;
  std::string *v93;
  siri::ontology::UsoGraph *v94;
  unsigned __int8 *v95;
  size_t v96;
  std::string::size_type v97;
  int v98;
  std::string *v99;
  std::string *v100;
  uint64_t v101;
  void **v102;
  int v103;
  int v104;
  int v105;
  int v106;
  char v107;
  _BOOL4 v108;
  siri::ontology::UsoGraph *v109;
  uint64_t v110;
  std::string *v111;
  __int128 v112;
  std::string *v113;
  __int128 v114;
  std::string *v115;
  std::string::size_type v116;
  std::string *v117;
  __int128 v118;
  NSObject *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  int v124;
  std::string *v125;
  uint64_t v126;
  char *v127;
  std::string *v128;
  uint64_t v129;
  _BOOL4 v130;
  std::string::size_type v131;
  std::string::size_type v132;
  std::string::size_type v133;
  uint64_t v134;
  std::string v136;
  std::string v137;
  std::string v138;
  std::string v139;
  std::string v140;
  std::string v141;
  std::string v142;
  std::string v143;
  std::string v144;
  std::string __p;
  std::string buf[3];
  void *v147;
  char v148;
  uint64_t v149;
  siri::ontology::UsoGraph *v150;
  uint64_t v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  void *v154[2];
  unsigned __int8 v155;
  void *v156;
  size_t v157;
  unsigned __int8 v158;
  std::string v159;
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v156, "common_Date");
  std::string::basic_string[abi:ne180100]<0>(v154, "common_Timer");
  v13 = v158;
  if ((v158 & 0x80u) == 0)
    v14 = v158;
  else
    v14 = v157;
  v15 = a4[23];
  v16 = (char)v15;
  if ((v15 & 0x80u) != 0)
    v15 = *((_QWORD *)a4 + 1);
  if (v14 == v15)
  {
    if (v16 >= 0)
      v17 = a4;
    else
      v17 = *(unsigned __int8 **)a4;
    if ((v158 & 0x80) == 0)
    {
      if (v158)
      {
        v18 = &v156;
        while (*(unsigned __int8 *)v18 == *v17)
        {
          v18 = (void **)((char *)v18 + 1);
          ++v17;
          if (!--v13)
            goto LABEL_18;
        }
        goto LABEL_17;
      }
LABEL_18:
      size = HIBYTE(a6->__r_.__value_.__r.__words[2]);
      v20 = a6;
      if ((size & 0x80u) != 0)
        a6 = (std::string *)a6->__r_.__value_.__r.__words[0];
      if ((v155 & 0x80u) == 0)
        v21 = v154;
      else
        v21 = (void **)v154[0];
      if ((v155 & 0x80u) == 0)
        v22 = v155;
      else
        v22 = (int64_t)v154[1];
      v128 = v20;
      if (v22)
      {
        v134 = a7;
        if ((size & 0x80u) != 0)
          size = v20->__r_.__value_.__l.__size_;
        v23 = (char *)a6 + size;
        if (size >= v22)
        {
          v124 = *(char *)v21;
          v125 = a6;
          do
          {
            v126 = size - v22;
            if (v126 == -1)
              break;
            v127 = (char *)memchr(v125, v124, v126 + 1);
            if (!v127)
              break;
            v24 = v127;
            if (!memcmp(v127, v21, v22))
              goto LABEL_31;
            v125 = (std::string *)(v24 + 1);
            size = v23 - (v24 + 1);
          }
          while (size >= v22);
        }
        v24 = v23;
LABEL_31:
        v25 = v24 - (char *)a6;
        if (v24 == v23)
          v25 = -1;
        a7 = v134;
      }
      else
      {
        v25 = 0;
      }
      v130 = v25 != -1;
      a6 = v128;
      goto LABEL_36;
    }
    if (!memcmp(v156, v17, v157))
      goto LABEL_18;
  }
LABEL_17:
  v130 = 0;
LABEL_36:
  v26 = *a5;
  v27 = (std::__shared_weak_count *)a5[1];
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
    v152 = v26;
    v153 = v27;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  else
  {
    v152 = v26;
    v153 = 0;
  }
  v32 = operator new();
  buf[0].__r_.__value_.__r.__words[0] = 0;
  LODWORD(buf[0].__r_.__value_.__r.__words[1]) = 0;
  MEMORY[0x1C3BB9154](v32, buf);
  v151 = v32;
  v34 = *a2;
  v33 = a2[1];
  if (v34 == v33)
    goto LABEL_216;
  v133 = *MEMORY[0x1E0DE4F60];
  v132 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v35 = -1.79769313e308;
  v131 = MEMORY[0x1E0DE4FB8] + 16;
  v129 = v32;
  do
  {
    v36 = *(const sirinluexternal::UsoGraph **)(v34 + 64);
    if (!v36 || *((_QWORD *)v36 + 11) - *((_QWORD *)v36 + 10) < 9uLL)
      goto LABEL_182;
    siri::ontology::UsoGraphProtoReader::fromProtobuf((siri::ontology::UsoGraphProtoReader *)&v152, v36);
    v37 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
      siri::ontology::UsoGraph::prettyPrint();
      std::stringbuf::str();
      v38 = std::string::insert(&v159, 0, "Found matching span with graph:\n ");
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v159.__r_.__value_.__l.__data_);
      v40 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        LODWORD(v159.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v159.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
        _os_log_impl(&dword_1C2196000, v40, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v159, 0xCu);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      buf[0].__r_.__value_.__r.__words[0] = v133;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + *(_QWORD *)(v133 - 24)) = v132;
      buf[0].__r_.__value_.__l.__size_ = v131;
      if (v148 < 0)
        operator delete(v147);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C3BB9A90](&v149);
    }
    nlv4_inference_orchestrator::trees::SpanUsoInserter::getDomainFromOriginalParse(a1, a6, buf);
    v42 = nlv4_inference_orchestrator::trees::SpanUsoInserter::checkLabelMatch(a1, (unsigned __int8 *)buf, v150, a4);
    v43 = v42;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      if (!v43)
        goto LABEL_145;
    }
    else if (!v42)
    {
      goto LABEL_145;
    }
    UtteranceAlignments = nlv4_inference_orchestrator::trees::SpanUsoInserter::findUtteranceAlignments((nlv4_inference_orchestrator::trees::SpanUsoInserter *)v42, v150, *(const sirinluexternal::UsoGraph **)(v34 + 64));
    if (!v45)
    {
      v91 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C2196000, v91, OS_LOG_TYPE_DEBUG, "Found no utterance alignments, skipping...", (uint8_t *)buf, 2u);
      }
LABEL_145:
      v90 = 3;
      goto LABEL_178;
    }
    v46 = UtteranceAlignments;
    std::to_string(&v139, UtteranceAlignments);
    v47 = std::string::insert(&v139, 0, "(");
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    v49 = std::string::append(&v140, ", ");
    v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v141.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    v51 = HIDWORD(v46);
    std::to_string(&v138, HIDWORD(v46));
    if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = &v138;
    else
      v52 = (std::string *)v138.__r_.__value_.__r.__words[0];
    if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
    else
      v53 = v138.__r_.__value_.__l.__size_;
    v54 = std::string::append(&v141, (const std::string::value_type *)v52, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v142.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    v56 = std::string::append(&v142, ") vs (");
    v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v143.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v137, *(_QWORD *)(a3 + 112));
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = &v137;
    else
      v58 = (std::string *)v137.__r_.__value_.__r.__words[0];
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v59 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    else
      v59 = v137.__r_.__value_.__l.__size_;
    v60 = std::string::append(&v143, (const std::string::value_type *)v58, v59);
    v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v144.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    v62 = std::string::append(&v144, ", ");
    v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v159.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v159.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v136, *(_QWORD *)(a3 + 120));
    if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = &v136;
    else
      v64 = (std::string *)v136.__r_.__value_.__r.__words[0];
    if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v65 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
    else
      v65 = v136.__r_.__value_.__l.__size_;
    v66 = std::string::append(&v159, (const std::string::value_type *)v64, v65);
    v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    v68 = std::string::append(&__p, ")");
    v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v136.__r_.__value_.__l.__data_);
    if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v159.__r_.__value_.__l.__data_);
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v144.__r_.__value_.__l.__data_);
    if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v137.__r_.__value_.__l.__data_);
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v143.__r_.__value_.__l.__data_);
    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v142.__r_.__value_.__l.__data_);
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v138.__r_.__value_.__l.__data_);
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v141.__r_.__value_.__l.__data_);
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v140.__r_.__value_.__l.__data_);
    if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v139.__r_.__value_.__l.__data_);
    v70 = *(_QWORD *)(a3 + 112);
    v71 = *(_QWORD *)(a3 + 120);
    v72 = v70 == v46 && v71 == v51;
    v73 = v130;
    if (!v72)
      v73 = 1;
    if ((v73 & 1) == 0)
    {
      std::operator+<char>();
      v92 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v92, OS_LOG_TYPE_DEBUG))
      {
        v93 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v93 = (std::string *)__p.__r_.__value_.__r.__words[0];
        LODWORD(v159.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v159.__r_.__value_.__r.__words + 4) = (std::string::size_type)v93;
        _os_log_impl(&dword_1C2196000, v92, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v159, 0xCu);
      }
      v94 = v150;
      v150 = 0;
      *(_QWORD *)a7 = v94;
      *(_BYTE *)(a7 + 8) = 1;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v90 = 1;
      goto LABEL_176;
    }
    v74 = 0.0;
    if (v51 > v46)
    {
      v75 = v71 - v70;
      if (v71 > v70)
      {
        if (v46 > v70)
          v70 = v46;
        if (v71 >= v51)
          v71 = HIDWORD(v46);
        v76 = v71 >= v70;
        v77 = v71 - v70;
        if (v76)
          v74 = (double)v77 / ((double)(v51 - v46) + (double)v75 - (double)v77);
      }
    }
    if (v74 > v35)
    {
      std::to_string(&v143, v74);
      v78 = std::string::insert(&v143, 0, "Found a new max score, ");
      v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      v144.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      v80 = std::string::append(&v144, ", for a non-matching insertable span ");
      v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
      v159.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v159.__r_.__value_.__l.__data_ = v81;
      v80->__r_.__value_.__l.__size_ = 0;
      v80->__r_.__value_.__r.__words[2] = 0;
      v80->__r_.__value_.__r.__words[0] = 0;
      if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v82 = buf;
      else
        v82 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
      if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v83 = HIBYTE(buf[0].__r_.__value_.__r.__words[2]);
      else
        v83 = buf[0].__r_.__value_.__l.__size_;
      v84 = std::string::append(&v159, (const std::string::value_type *)v82, v83);
      v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v85;
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v159.__r_.__value_.__l.__data_);
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v144.__r_.__value_.__l.__data_);
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v143.__r_.__value_.__l.__data_);
      v86 = SNLPOSLoggerForCategory(1);
      if (!os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
        goto LABEL_138;
      v87 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v87 = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_137:
      LODWORD(v159.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v159.__r_.__value_.__r.__words + 4) = (std::string::size_type)v87;
      _os_log_impl(&dword_1C2196000, v86, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v159, 0xCu);
LABEL_138:
      v88 = v150;
      v150 = 0;
      v151 = (uint64_t)v88;
      v129 = (uint64_t)v88;
      if (v32)
      {
        v89 = MEMORY[0x1C3BB916C](v32);
        MEMORY[0x1C3BB9B44](v89, 0x10A0C403D23BABBLL);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v90 = 0;
      v32 = v129;
      v35 = v74;
      goto LABEL_176;
    }
    if (v130)
    {
      v90 = 0;
      if (vabdd_f64(v35, v74) < 2.22044605e-16 && v129)
      {
        nlv4_inference_orchestrator::trees::SpanUsoInserter::getSpanLabelFromGraph((nlv4_inference_orchestrator::trees::SpanUsoInserter *)v68, &__p);
        v95 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((_QWORD *)a1 + 3, (unsigned __int8 *)&__p);
        if (v95)
        {
          nlv4_inference_orchestrator::trees::SpanUsoInserter::getSpanLabelFromGraph((nlv4_inference_orchestrator::trees::SpanUsoInserter *)v95, &v159);
          if ((v158 & 0x80u) == 0)
            v96 = v158;
          else
            v96 = v157;
          v97 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
          v98 = SHIBYTE(v159.__r_.__value_.__r.__words[2]);
          if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v97 = v159.__r_.__value_.__l.__size_;
          if (v96 == v97)
          {
            if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v99 = &v159;
            else
              v99 = (std::string *)v159.__r_.__value_.__r.__words[0];
            v100 = a6;
            if ((v158 & 0x80) != 0)
            {
              v108 = memcmp(v156, v99, v157) == 0;
            }
            else if (v158)
            {
              v101 = v158 - 1;
              v102 = &v156;
              do
              {
                v104 = *(unsigned __int8 *)v102;
                v102 = (void **)((char *)v102 + 1);
                v103 = v104;
                v106 = v99->__r_.__value_.__s.__data_[0];
                v99 = (std::string *)((char *)v99 + 1);
                v105 = v106;
                v76 = v101-- != 0;
                v107 = v76;
                v108 = v103 == v105;
              }
              while (v103 == v105 && (v107 & 1) != 0);
            }
            else
            {
              v108 = 1;
            }
          }
          else
          {
            v100 = a6;
            v108 = 0;
          }
          if (v98 < 0)
            operator delete(v159.__r_.__value_.__l.__data_);
          v129 = v32;
        }
        else
        {
          v100 = a6;
          v108 = 0;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (v108)
          {
LABEL_193:
            std::to_string(&v143, v74);
            v111 = std::string::insert(&v143, 0, "Found a common_Time span with a Jaccard score of ");
            v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
            v144.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v112;
            v111->__r_.__value_.__l.__size_ = 0;
            v111->__r_.__value_.__r.__words[2] = 0;
            v111->__r_.__value_.__r.__words[0] = 0;
            v113 = std::string::append(&v144, ", overwriting the common_Date span with a Jaccard score of ");
            v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
            v159.__r_.__value_.__r.__words[2] = v113->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v159.__r_.__value_.__l.__data_ = v114;
            v113->__r_.__value_.__l.__size_ = 0;
            v113->__r_.__value_.__r.__words[2] = 0;
            v113->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v142, v35);
            a6 = v100;
            if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v115 = &v142;
            else
              v115 = (std::string *)v142.__r_.__value_.__r.__words[0];
            if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v116 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
            else
              v116 = v142.__r_.__value_.__l.__size_;
            v117 = std::string::append(&v159, (const std::string::value_type *)v115, v116);
            v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v118;
            v117->__r_.__value_.__l.__size_ = 0;
            v117->__r_.__value_.__r.__words[2] = 0;
            v117->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v142.__r_.__value_.__l.__data_);
            if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v159.__r_.__value_.__l.__data_);
            if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v144.__r_.__value_.__l.__data_);
            if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v143.__r_.__value_.__l.__data_);
            v86 = SNLPOSLoggerForCategory(1);
            if (!os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
              goto LABEL_138;
            v87 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v87 = (std::string *)__p.__r_.__value_.__r.__words[0];
            goto LABEL_137;
          }
        }
        else if (v108)
        {
          goto LABEL_193;
        }
        v90 = 0;
        a6 = v100;
      }
    }
    else
    {
      v90 = 0;
    }
LABEL_176:
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
LABEL_178:
    v109 = v150;
    v150 = 0;
    if (v109)
    {
      v110 = MEMORY[0x1C3BB916C]();
      MEMORY[0x1C3BB9B44](v110, 0x10A0C403D23BABBLL);
    }
    if (v90 != 3 && v90)
      goto LABEL_219;
LABEL_182:
    v34 += 88;
  }
  while (v34 != v33);
  if (v35 > 2.22044605e-16 && v32)
  {
    *(_QWORD *)a7 = v32;
    *(_BYTE *)(a7 + 8) = 1;
    goto LABEL_221;
  }
LABEL_216:
  v119 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C2196000, v119, OS_LOG_TYPE_DEBUG, "Found no matching insertable span.", (uint8_t *)buf, 2u);
  }
  *(_BYTE *)a7 = 0;
  *(_BYTE *)(a7 + 8) = 0;
LABEL_219:
  v151 = 0;
  if (v32)
  {
    v120 = MEMORY[0x1C3BB916C](v32);
    MEMORY[0x1C3BB9B44](v120, 0x10A0C403D23BABBLL);
  }
LABEL_221:
  v121 = v153;
  if (v153)
  {
    v122 = (unint64_t *)&v153->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  if ((char)v155 < 0)
    operator delete(v154[0]);
  if ((char)v158 < 0)
    operator delete(v156);
}

void sub_1C2230490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  void *a68;
  char a72;
  uint64_t v72;

  if (a48 < 0)
    operator delete(__p);
  if (*(char *)(v72 - 121) < 0)
    operator delete(*(void **)(v72 - 144));
  if (a62 < 0)
    operator delete(a57);
  if (a55 < 0)
    operator delete(a50);
  if (a72 < 0)
    operator delete(a68);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)(v72 - 224));
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)(v72 - 216));
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v72 - 208);
  if (*(char *)(v72 - 169) < 0)
    operator delete(*(void **)(v72 - 192));
  if (*(char *)(v72 - 145) < 0)
    operator delete(*(void **)(v72 - 168));
  _Unwind_Resume(a1);
}

void sub_1C22306F0()
{
  JUMPOUT(0x1C22306B8);
}

std::string *nlv4_inference_orchestrator::trees::SpanUsoInserter::getDomainFromOriginalParse@<X0>(nlv4_inference_orchestrator::trees::SpanUsoInserter *this@<X0>, std::string *__str@<X1>, std::string *a3@<X8>)
{
  int64_t size;
  std::string *v6;
  char *v7;
  char *v8;
  char *v9;
  int v10;
  char *v11;
  int64_t v12;
  char *v13;
  char *v14;
  std::string::size_type v15;
  int v17;
  std::string *v18;
  int64_t v19;
  char *v20;
  char v21;

  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v6 = __str;
  else
    v6 = (std::string *)__str->__r_.__value_.__r.__words[0];
  v9 = (char *)*((_QWORD *)this + 8);
  v7 = (char *)this + 64;
  v8 = v9;
  v10 = v7[23];
  if (v10 >= 0)
    v11 = v7;
  else
    v11 = v8;
  if (v10 >= 0)
    v12 = v7[23];
  else
    v12 = *((_QWORD *)v7 + 1);
  if (v12)
  {
    if ((size & 0x80u) != 0)
      size = __str->__r_.__value_.__l.__size_;
    v13 = (char *)v6 + size;
    if (size >= v12)
    {
      v17 = *v11;
      v18 = v6;
      do
      {
        v19 = size - v12;
        if (v19 == -1)
          break;
        v20 = (char *)memchr(v18, v17, v19 + 1);
        if (!v20)
          break;
        v14 = v20;
        if (!memcmp(v20, v11, v12))
          goto LABEL_15;
        v18 = (std::string *)(v14 + 1);
        size = v13 - (v14 + 1);
      }
      while (size >= v12);
    }
    v14 = v13;
LABEL_15:
    if (v14 == v13)
      v15 = -1;
    else
      v15 = v14 - (char *)v6;
  }
  else
  {
    v15 = 0;
  }
  return std::string::basic_string(a3, __str, 0, v15, (std::allocator<char> *)&v21);
}

BOOL nlv4_inference_orchestrator::trees::SpanUsoInserter::checkLabelMatch(nlv4_inference_orchestrator::trees::SpanUsoInserter *a1, unsigned __int8 *a2, siri::ontology::UsoGraph *a3, unsigned __int8 *a4)
{
  uint64_t v7;
  uint64_t v8;
  std::string::size_type size;
  std::string *p_p;
  unsigned __int8 *v11;
  _BOOL8 v12;
  std::string __p;

  nlv4_inference_orchestrator::trees::SpanUsoInserter::getSpanLabelFromGraph(a1, &__p);
  v7 = a4[23];
  if ((v7 & 0x80u) == 0)
    v8 = a4[23];
  else
    v8 = *((_QWORD *)a4 + 1);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (v8 != size)
    goto LABEL_17;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a4, p_p, *((_QWORD *)a4 + 1)))
      goto LABEL_17;
LABEL_18:
    v12 = 1;
    goto LABEL_20;
  }
  if (!a4[23])
    goto LABEL_18;
  v11 = a4;
  while (*v11 == p_p->__r_.__value_.__s.__data_[0])
  {
    ++v11;
    p_p = (std::string *)((char *)p_p + 1);
    if (!--v7)
      goto LABEL_18;
  }
LABEL_17:
  if ((nlv4_inference_orchestrator::trees::SpanUsoInserter::checkTimeLabelMatch((uint64_t)a1, a4, (unsigned __int8 *)&__p) & 1) != 0)goto LABEL_18;
  v12 = nlv4_inference_orchestrator::trees::SpanUsoInserter::checkTimerDateLabelMatch((uint64_t)a1, a2, a4, (unsigned __int8 *)&__p);
LABEL_20:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v12;
}

void sub_1C2230900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t nlv4_inference_orchestrator::trees::SpanUsoInserter::findUtteranceAlignments(nlv4_inference_orchestrator::trees::SpanUsoInserter *this, const siri::ontology::UsoGraph *a2, const sirinluexternal::UsoGraph *a3)
{
  uint64_t v3;
  snlp::common::utilities *v5;
  unsigned __int8 v6;
  unsigned int v7;
  NSObject *v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 v20;
  BOOL v21;
  unsigned int v22;
  unsigned __int8 v23;
  _DWORD v25[4];
  char v26;
  void *__p;
  _BYTE *v28;

  siri::ontology::oname::graph::ontology_init::Argument_entity(this);
  siri::ontology::UsoGraph::getSuccessors();
  if (v28 - (_BYTE *)__p == 8
  {
    v6 = v25[0];
    v3 = v25[2];
    v7 = v25[0] & 0xFFFFFF00;
  }
  else
  {
    v8 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v25[0]) = 0;
      _os_log_impl(&dword_1C2196000, v8, OS_LOG_TYPE_DEBUG, "No utterance alignments found in the entity node; searching the descendant nodes for utterance alignments instead.",
        (uint8_t *)v25,
        2u);
    }
    v9 = (uint64_t *)*((_QWORD *)a3 + 1);
    v10 = (uint64_t *)*((_QWORD *)a3 + 2);
    if (v9 == v10)
    {
      v6 = 0;
      v7 = 0;
    }
    else
    {
      v11 = 0;
      v12 = -1;
      do
      {
        v13 = *v9;
        if ((*(_BYTE *)(*v9 + 40) & 2) != 0)
        {
          v14 = *(uint64_t **)(v13 + 8);
          if (v14 != *(uint64_t **)(v13 + 16))
          {
            v15 = *v14;
            v16 = *(_DWORD *)(*v14 + 20);
            if (v16 < v12)
              v12 = v16;
            v17 = *(_DWORD *)(v15 + 8);
            if (v11 <= v17)
              v11 = v17;
          }
        }
        ++v9;
      }
      while (v9 != v10);
      v18 = v12 & 0xFFFFFF00;
      if (v12 <= v11)
        v19 = v11;
      else
        v19 = v12;
      if (v12 <= v11)
        v20 = v12;
      else
        v20 = 0;
      if (v12 > v11)
        v18 = 0;
      v21 = v11 == 0;
      if (v11)
        v22 = v19;
      else
        v22 = v12;
      if (v21)
        v23 = 0;
      else
        v23 = v20;
      if (v21)
        v18 = 0;
      if (v12 == -1)
        v3 = 0xFFFFFFFFLL;
      else
        v3 = v22;
      if (v12 == -1)
        v6 = 0;
      else
        v6 = v23;
      if (v12 == -1)
        v7 = 0;
      else
        v7 = v18;
    }
  }
  if (__p)
  {
    v28 = __p;
    operator delete(__p);
  }
  return v7 | v6 | (unint64_t)(v3 << 32);
}

void nlv4_inference_orchestrator::trees::SpanUsoInserter::getSpanLabelFromGraph(nlv4_inference_orchestrator::trees::SpanUsoInserter *this@<X0>, std::string *a2@<X8>)
{
  NSObject *v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  NSObject *v9;
  uint8_t v10[8];
  void *__p;
  _BYTE *v12;

  siri::ontology::oname::graph::ontology_init::Argument_entity(this);
  siri::ontology::UsoGraph::getSuccessors();
  if (__p == v12)
  {
    v4 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v10 = 0;
      v5 = "Found no entities in the uso graph of matching span, skipping...";
      goto LABEL_7;
    }
  }
  else if ((unint64_t)(v12 - (_BYTE *)__p) < 9)
  {
    if (v6)
    {
      v7 = v6[3];
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
      }
      else
      {
        v8 = *(_OWORD *)(v7 + 8);
        a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v8;
      }
      goto LABEL_9;
    }
    v9 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1C2196000, v9, OS_LOG_TYPE_DEBUG, "The first level entity is not of entity node type, skipping...", v10, 2u);
    }
  }
  else
  {
    v4 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v10 = 0;
      v5 = "There is more than one entity in the USO graph of matching span, skipping...";
LABEL_7:
      _os_log_impl(&dword_1C2196000, v4, OS_LOG_TYPE_DEBUG, v5, v10, 2u);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(a2, "");
LABEL_9:
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

unsigned __int8 *nlv4_inference_orchestrator::trees::SpanUsoInserter::checkTimeLabelMatch(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  _QWORD *v4;
  unsigned __int8 *result;

  v4 = (_QWORD *)(a1 + 24);
  result = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((_QWORD *)(a1 + 24), a2);
  if (result)
    return (unsigned __int8 *)(std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v4, a3) != 0);
  return result;
}

BOOL nlv4_inference_orchestrator::trees::SpanUsoInserter::checkTimerDateLabelMatch(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  void **v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  void **v15;
  _BOOL8 v16;
  void *__p[2];
  unsigned __int8 v19;
  void *v20[2];
  unsigned __int8 v21;

  std::string::basic_string[abi:ne180100]<0>(v20, "common_Timer");
  std::string::basic_string[abi:ne180100]<0>(__p, "common_Date");
  v8 = a2[23];
  if ((v8 & 0x80u) == 0)
    v9 = (void *)a2[23];
  else
    v9 = (void *)*((_QWORD *)a2 + 1);
  v10 = v21;
  if ((v21 & 0x80u) != 0)
    v10 = (unint64_t)v20[1];
  if (v9 != (void *)v10)
    goto LABEL_31;
  if ((v21 & 0x80u) == 0)
    v11 = v20;
  else
    v11 = (void **)v20[0];
  if ((v8 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v11, *((_QWORD *)a2 + 1)))
      goto LABEL_31;
  }
  else if (a2[23])
  {
    while (*a2 == *(unsigned __int8 *)v11)
    {
      ++a2;
      v11 = (void **)((char *)v11 + 1);
      if (!--v8)
        goto LABEL_16;
    }
    goto LABEL_31;
  }
LABEL_16:
  v12 = a3[23];
  if ((v12 & 0x80u) == 0)
    v13 = (void *)a3[23];
  else
    v13 = (void *)*((_QWORD *)a3 + 1);
  v14 = v19;
  if ((v19 & 0x80u) != 0)
    v14 = (unint64_t)__p[1];
  if (v13 != (void *)v14)
    goto LABEL_31;
  if ((v19 & 0x80u) == 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if ((v12 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a3, v15, *((_QWORD *)a3 + 1)))
      goto LABEL_37;
LABEL_31:
    v16 = 0;
    goto LABEL_32;
  }
  if (a3[23])
  {
    while (*a3 == *(unsigned __int8 *)v15)
    {
      ++a3;
      v15 = (void **)((char *)v15 + 1);
      if (!--v12)
        goto LABEL_37;
    }
    goto LABEL_31;
  }
LABEL_37:
  v16 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((_QWORD *)(a1 + 24), a4) != 0;
LABEL_32:
  if ((char)v19 < 0)
    operator delete(__p[0]);
  if ((char)v21 < 0)
    operator delete(v20[0]);
  return v16;
}

void sub_1C2230EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1C223131C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C2231408(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C223178C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;

  _Unwind_Resume(a1);
}

void sub_1C2231C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  UPInferenceResult *v28;
  uint64_t v29;

  UPInferenceResult::~UPInferenceResult(v28);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a11);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a17);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a23);
  if (*(char *)(v29 - 113) < 0)
    operator delete(*(void **)(v29 - 136));
  if (*(char *)(v29 - 89) < 0)
    operator delete(*(void **)(v29 - 112));
  if (*(char *)(v29 - 65) < 0)
    operator delete(*(void **)(v29 - 88));
  _Unwind_Resume(a1);
}

void sub_1C2232720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char *a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  void *v41;
  void *v42;
  uint64_t v43;
  void *v45;

  *(_QWORD *)(v43 - 176) = &a27;
  std::vector<nl_featurization::beam_search::BeamSequence>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 176));
  v45 = *(void **)(v43 - 224);
  if (v45)
  {
    *(_QWORD *)(v43 - 216) = v45;
    operator delete(v45);
  }
  a27 = &a30;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a41 < 0)
    operator delete(a36);

  _Unwind_Resume(a1);
}

void sub_1C2232E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, char *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  void *v58;

  a14 = &a27;
  std::vector<nl_featurization::postprocessing::LabelledSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  nl_featurization::postprocessing::PostProcessingOutput::~PostProcessingOutput(&a30);
  nl_featurization::postprocessing::base::BaseModelOutput::~BaseModelOutput((nl_featurization::postprocessing::base::BaseModelOutput *)&a36);
  nl_featurization::postprocessing::base::BaseModelQueryContext::~BaseModelQueryContext(&a43);

  _Unwind_Resume(a1);
}

void sub_1C2233350(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int128 buf)
{
  void *v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  void *v29;
  NSObject *v30;
  uint64_t v31;

  v26 = v25;

  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&__p);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a15);
  if (a2 == 1)
  {
    v29 = __cxa_begin_catch(a1);
    SNLPOSLoggerForCategory(3);
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v31 = (*(uint64_t (**)(void *))(*(_QWORD *)v29 + 16))(v29);
      LODWORD(buf) = 136642819;
      *(_QWORD *)((char *)&buf + 4) = v31;
      _os_log_impl(&dword_1C2196000, v30, OS_LOG_TYPE_ERROR, "Error predicting utterance: %{sensitive}s", (uint8_t *)&buf, 0xCu);
    }

    if (v24)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("com.apple.uaapcustomluframework"), 0, 0);
      *v24 = (id)objc_claimAutoreleasedReturnValue();
    }
    __cxa_end_catch();
    JUMPOUT(0x1C2233260);
  }

  _Unwind_Resume(a1);
}

void UPInferenceResult::~UPInferenceResult(UPInferenceResult *this)
{
  float *begin;
  unint64_t *v3;
  float *v4;
  unint64_t *v5;
  float *v6;
  unint64_t *v7;

  begin = this->var2.data.__begin_;
  if (begin)
  {
    this->var2.data.__end_ = begin;
    operator delete(begin);
  }
  v3 = this->var2.shape.__begin_;
  if (v3)
  {
    this->var2.shape.__end_ = v3;
    operator delete(v3);
  }
  v4 = this->var1.data.__begin_;
  if (v4)
  {
    this->var1.data.__end_ = v4;
    operator delete(v4);
  }
  v5 = this->var1.shape.__begin_;
  if (v5)
  {
    this->var1.shape.__end_ = v5;
    operator delete(v5);
  }
  v6 = this->var0.data.__begin_;
  if (v6)
  {
    this->var0.data.__end_ = v6;
    operator delete(v6);
  }
  v7 = this->var0.shape.__begin_;
  if (this->var0.shape.__begin_)
  {
    this->var0.shape.__end_ = v7;
    operator delete(v7);
  }
}

_QWORD *std::vector<nl_featurization::Token>::__init_with_size[abi:ne180100]<nl_featurization::Token*,nl_featurization::Token*>(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<nl_featurization::Token>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nl_featurization::Token>,nl_featurization::Token*,nl_featurization::Token*,nl_featurization::Token*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C223362C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<nl_featurization::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::optional<unsigned long>>::__init_with_size[abi:ne180100]<std::optional<unsigned long>*,std::optional<unsigned long>*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 7);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C22336A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::basic_string<char16_t>::__init_copy_ctor_external(std::basic_string<char16_t> *this, const std::basic_string<char16_t>::value_type *__s, std::basic_string<char16_t>::size_type __sz)
{
  std::basic_string<char16_t> *v5;
  std::basic_string<char16_t>::size_type v6;
  std::basic_string<char16_t> *v7;
  uint64_t v8;

  v5 = this;
  if (__sz > 0xA)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((__sz | 3) != 0xB)
      v6 = __sz | 3;
    v7 = (std::basic_string<char16_t> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)v7;
    v5 = v7;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, 2 * __sz + 2);
}

__n128 std::allocator<nl_featurization::postprocessing::LabelledSpan>::construct[abi:ne180100]<nl_featurization::postprocessing::LabelledSpan,nl_featurization::postprocessing::LabelledSpan>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __n128 result;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  if (*(char *)(a2 + 55) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)(a1 + 32), *(const std::basic_string<char16_t>::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  std::__optional_copy_base<std::basic_string<char16_t>,false>::__optional_copy_base[abi:ne180100]((std::basic_string<char16_t> *)(a1 + 56), (__int128 *)(a2 + 56));
  result = *(__n128 *)(a2 + 88);
  *(__n128 *)(a1 + 88) = result;
  return result;
}

void sub_1C22337C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void nl_featurization::postprocessing::LabelledSpan::~LabelledSpan(void **this)
{
  if (*((_BYTE *)this + 80) && *((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
}

__n128 std::allocator<nl_featurization::postprocessing::LabelledSpan>::construct[abi:ne180100]<nl_featurization::postprocessing::LabelledSpan,nl_featurization::postprocessing::LabelledSpan const&>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __n128 result;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  if (*(char *)(a2 + 55) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)(a1 + 32), *(const std::basic_string<char16_t>::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  std::__optional_copy_base<std::basic_string<char16_t>,false>::__optional_copy_base[abi:ne180100]((std::basic_string<char16_t> *)(a1 + 56), (__int128 *)(a2 + 56));
  result = *(__n128 *)(a2 + 88);
  *(__n128 *)(a1 + 88) = result;
  return result;
}

void sub_1C2233898(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void std::vector<nl_featurization::postprocessing::LabelledSpan>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::allocator<nl_featurization::postprocessing::LabelledSpan>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<nl_featurization::Token>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<nl_featurization::Token>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void nl_featurization::postprocessing::PostProcessingOutput::~PostProcessingOutput(void **this)
{
  void **v2;

  v2 = this + 3;
  std::vector<nl_featurization::postprocessing::LabelledSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void nl_featurization::postprocessing::base::BaseModelOutput::~BaseModelOutput(nl_featurization::postprocessing::base::BaseModelOutput *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

void nl_featurization::postprocessing::base::BaseModelQueryContext::~BaseModelQueryContext(void **this)
{
  void **v2;

  v2 = this + 6;
  std::vector<nl_featurization::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void std::vector<nl_featurization::Token>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 48)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

void std::allocator<nl_featurization::postprocessing::LabelledSpan>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 80) && *(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<nl_featurization::postprocessing::LabelledSpan>>(unint64_t a1)
{
  if (a1 >= 0x276276276276277)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(104 * a1);
}

void std::vector<nl_featurization::postprocessing::LabelledSpan>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  if (v4 != *a1)
  {
    v7 = 0;
    do
    {
      std::allocator<nl_featurization::postprocessing::LabelledSpan>::construct[abi:ne180100]<nl_featurization::postprocessing::LabelledSpan,nl_featurization::postprocessing::LabelledSpan const&>(v6 + v7 - 104, v4 + v7 - 104);
      v7 -= 104;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v8 = *a1;
  *a1 = v6;
  a2[1] = v8;
  v9 = a1[1];
  a1[1] = a2[2];
  a2[2] = v9;
  v10 = a1[2];
  a1[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<nl_featurization::postprocessing::LabelledSpan>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 104;
    std::allocator<nl_featurization::postprocessing::LabelledSpan>::destroy[abi:ne180100](i - 104);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

std::basic_string<char16_t> *std::__optional_copy_base<std::basic_string<char16_t>,false>::__optional_copy_base[abi:ne180100](std::basic_string<char16_t> *this, __int128 *a2)
{
  __int128 v3;

  LOBYTE(this->__r_.__value_.__l.__data_) = 0;
  LOBYTE(this[1].__r_.__value_.__l.__data_) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::basic_string<char16_t>::__init_copy_ctor_external(this, *(const std::basic_string<char16_t>::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    LOBYTE(this[1].__r_.__value_.__l.__data_) = 1;
  }
  return this;
}

void sub_1C2233CA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<nl_featurization::Token>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nl_featurization::Token>,nl_featurization::Token*,nl_featurization::Token*,nl_featurization::Token*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  std::basic_string<char16_t> *v7;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;
  _QWORD v12[3];
  char v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a4;
  v14 = a4;
  v15 = a4;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a2 != a3)
  {
    v6 = a2 + 1;
    do
    {
      *(_OWORD *)v4 = *(v6 - 1);
      v7 = (std::basic_string<char16_t> *)(v4 + 16);
      if (*((char *)v6 + 23) < 0)
      {
        std::basic_string<char16_t>::__init_copy_ctor_external(v7, *(const std::basic_string<char16_t>::value_type **)v6, *((_QWORD *)v6 + 1));
        v9 = v15;
      }
      else
      {
        v8 = *v6;
        *(_QWORD *)(v4 + 32) = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
        v9 = v4;
      }
      v10 = v6 - 1;
      *(_BYTE *)(v4 + 40) = *((_BYTE *)v6 + 24);
      v4 = v9 + 48;
      v15 = v9 + 48;
      v6 += 3;
    }
    while (v10 + 3 != a3);
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nl_featurization::Token>,nl_featurization::Token*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_1C2233DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nl_featurization::Token>,nl_featurization::Token*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nl_featurization::Token>,nl_featurization::Token*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 9) < 0)
        operator delete(*(void **)(v3 - 32));
      v3 -= 48;
    }
  }
  return a1;
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<nl_featurization::beam_search::BeamSequence>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 128;
        std::allocator<nl_featurization::beam_search::BeamSequence>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<nl_featurization::beam_search::BeamSequence>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(_QWORD *)(a1 + 88) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 56);
  if (v4)
  {
    *(_QWORD *)(a1 + 64) = v4;
    operator delete(v4);
  }
  std::__tree<unsigned long>::destroy(*(_QWORD **)(a1 + 40));
}

void std::__tree<unsigned long>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<unsigned long>::destroy(*a1);
    std::__tree<unsigned long>::destroy(a1[1]);
    operator delete(a1);
  }
}

_QWORD *std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(_QWORD *__dst, char *__src)
{
  unint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_WORD *)__src)
  {
    v4 = 0;
    do
      v5 = &__src[2 * v4++];
    while (*((_WORD *)v5 + 1));
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v4 >= 0xB)
    {
      v7 = (v4 & 0xFFFFFFFFFFFFFFFCLL) + 4;
      if ((v4 | 3) != 0xB)
        v7 = v4 | 3;
      v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v7 + 1);
      __dst[1] = v4;
      __dst[2] = v8 | 0x8000000000000000;
      *__dst = v6;
    }
    else
    {
      *((_BYTE *)__dst + 23) = v4;
      v6 = __dst;
      if (!v4)
        goto LABEL_9;
    }
    memmove(v6, __src, 2 * v4);
    goto LABEL_14;
  }
  v4 = 0;
  *((_BYTE *)__dst + 23) = 0;
LABEL_9:
  v6 = __dst;
LABEL_14:
  *((_WORD *)v6 + v4) = 0;
  return __dst;
}

void sub_1C2234114(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void snlp::ssu::trigger::SSUTriggerDisjunction::~SSUTriggerDisjunction(snlp::ssu::trigger::SSUTriggerDisjunction *this)
{
  void **v1;

  *(_QWORD *)this = &off_1E7BE9C00;
  v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<snlp::ssu::trigger::SSUTrigger>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;

  *(_QWORD *)this = &off_1E7BE9C00;
  v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<snlp::ssu::trigger::SSUTrigger>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x1C3BB9B44);
}

unint64_t snlp::ssu::trigger::SSUTriggerDisjunction::isTriggered(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 16);
  if (v2 == v3)
  {
    v8 = 0;
    v9 = 0;
    v6 = 0;
    v7 = 0;
  }
  else
  {
    while (1)
    {
      v5 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v2 + 16))(*v2, a2);
      v6 = v5 & 0xFF00000000;
      if ((v5 & 0xFF00000000) != 0)
        break;
      v2 += 2;
      if (v2 == v3)
      {
        v6 = 0;
        v7 = 0;
        v8 = v5 & 0xFFFFFF00;
        v9 = v5 & 0xFFFFFF0000000000;
        return v9 | v6 | v8 & 0xFFFFFF00 | v7;
      }
    }
    v8 = v5 & 0xFFFFFF00;
    v9 = v5 & 0xFFFFFF0000000000;
    v7 = v5;
  }
  return v9 | v6 | v8 & 0xFFFFFF00 | v7;
}

_QWORD *snlp::ssu::trigger::SSUTriggerDisjunction::SSUTriggerDisjunction(_QWORD *result, uint64_t a2)
{
  _QWORD *i;
  std::runtime_error *exception;

  *result = &off_1E7BE9C00;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  *(_OWORD *)(result + 1) = *(_OWORD *)a2;
  result[3] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  for (i = (_QWORD *)result[1]; i != (_QWORD *)result[2]; i += 2)
  {
    if (!*i)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Cannot construct SSUTriggerDisjunction with nullptr");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return result;
}

void sub_1C2234304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10)
{
  a10 = a9;
  std::vector<std::shared_ptr<snlp::ssu::trigger::SSUTrigger>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

_QWORD *snlp::ssu::trigger::SSUTriggerDisjunction::subTriggers@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (char *)this[1];
  v3 = (char *)this[2];
  v4 = v3 - v2;
  if (v3 != v2)
  {
    if (v4 < 0)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    this = operator new(v3 - v2);
    *a2 = this;
    a2[1] = this;
    a2[2] = &this[2 * (v4 >> 4)];
    do
    {
      *this = *(_QWORD *)v2;
      v6 = *((_QWORD *)v2 + 1);
      this[1] = v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v2 += 16;
      this += 2;
    }
    while (v2 != v3);
    a2[1] = this;
  }
  return this;
}

void sub_1C22343DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<snlp::ssu::trigger::SSUTrigger>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::inference_engine::Trail::Trail(uint64_t a1, uint64_t a2, _DWORD *a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  float *v16;
  void *v17;
  void *v18;

  *(_DWORD *)a1 = *a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(a1 + 8), *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 32), *(const void **)(a5 + 24), *(_QWORD *)(a5 + 32), (uint64_t)(*(_QWORD *)(a5 + 32) - *(_QWORD *)(a5 + 24)) >> 2);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(a1 + 56), *(const void **)a6, *(_QWORD *)(a6 + 8), (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 3);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 80), *(const void **)(a6 + 24), *(_QWORD *)(a6 + 32), (uint64_t)(*(_QWORD *)(a6 + 32) - *(_QWORD *)(a6 + 24)) >> 2);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(a1 + 104), *(const void **)a7, *(_QWORD *)(a7 + 8), (uint64_t)(*(_QWORD *)(a7 + 8) - *(_QWORD *)a7) >> 3);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 128), *(const void **)(a7 + 24), *(_QWORD *)(a7 + 32), (uint64_t)(*(_QWORD *)(a7 + 32) - *(_QWORD *)(a7 + 24)) >> 2);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(a1 + 200), *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_BYTE *)(a1 + 224) = *a4;
  v13 = operator new(8uLL);
  *v13 = 1;
  v14 = v13 + 1;
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 208) - 8);
  v16 = (float *)operator new(4uLL);
  *v16 = (float)v15;
  v17 = *(void **)(a1 + 152);
  if (v17)
  {
    *(_QWORD *)(a1 + 160) = v17;
    operator delete(v17);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = 0;
  }
  v18 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 152) = v13;
  *(_QWORD *)(a1 + 160) = v14;
  *(_QWORD *)(a1 + 168) = v14;
  if (v18)
  {
    *(_QWORD *)(a1 + 184) = v18;
    operator delete(v18);
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
  }
  *(_QWORD *)(a1 + 176) = v16;
  *(_QWORD *)(a1 + 184) = v16 + 1;
  *(_QWORD *)(a1 + 192) = v16 + 1;
  return a1;
}

void sub_1C22345B4(_Unwind_Exception *a1)
{
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *v1;
  uint64_t v2;
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *v3;
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *v4;
  void *v5;
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *v6;
  void **v7;
  void *v9;

  operator delete(v5);
  v9 = *v7;
  if (*v7)
  {
    *(_QWORD *)(v2 + 208) = v9;
    operator delete(v9);
  }
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v6);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v4);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v3);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v1);
  _Unwind_Resume(a1);
}

void sub_1C2234628()
{
  uint64_t v0;
  void **v1;
  void *v2;

  v2 = *v1;
  if (*v1)
  {
    *(_QWORD *)(v0 + 64) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C2234618);
}

void sub_1C2234640()
{
  JUMPOUT(0x1C2234618);
}

void sub_1C2234648()
{
  void **v0;
  uint64_t v1;
  void *v2;

  v2 = *v0;
  if (*v0)
  {
    *(_QWORD *)(v1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C2234620);
}

uint64_t nlv4_inference_orchestrator::inference_engine::Trail::setFinal(uint64_t this)
{
  *(_BYTE *)(this + 224) = 1;
  return this;
}

float nlv4_inference_orchestrator::inference_engine::Trail::getScore(nlv4_inference_orchestrator::inference_engine::Trail *this)
{
  return *(float *)this;
}

_QWORD *nlv4_inference_orchestrator::inference_engine::Trail::getTokenHistory@<X0>(nlv4_inference_orchestrator::inference_engine::Trail *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, *((const void **)this + 25), *((_QWORD *)this + 26), (uint64_t)(*((_QWORD *)this + 26) - *((_QWORD *)this + 25)) >> 3);
}

_QWORD *nlv4_inference_orchestrator::inference_engine::Trail::getLastPrediction@<X0>(nlv4_inference_orchestrator::inference_engine::Trail *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, *((const void **)this + 19), *((_QWORD *)this + 20), (uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 3);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, *((const void **)this + 22), *((_QWORD *)this + 23), (uint64_t)(*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 2);
}

void sub_1C22346EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *nlv4_inference_orchestrator::inference_engine::Trail::getHidden@<X0>(nlv4_inference_orchestrator::inference_engine::Trail *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, *((const void **)this + 1), *((_QWORD *)this + 2), (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, *((const void **)this + 4), *((_QWORD *)this + 5), (uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 2);
}

void sub_1C2234760(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *nlv4_inference_orchestrator::inference_engine::Trail::getMemory@<X0>(nlv4_inference_orchestrator::inference_engine::Trail *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, *((const void **)this + 7), *((_QWORD *)this + 8), (uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, *((const void **)this + 10), *((_QWORD *)this + 11), (uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 2);
}

void sub_1C22347D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *nlv4_inference_orchestrator::inference_engine::Trail::getAttentionIndex@<X0>(nlv4_inference_orchestrator::inference_engine::Trail *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, *((const void **)this + 13), *((_QWORD *)this + 14), (uint64_t)(*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 3);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, *((const void **)this + 16), *((_QWORD *)this + 17), (uint64_t)(*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 2);
}

void sub_1C2234848(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::inference_engine::Trail::isFinal(nlv4_inference_orchestrator::inference_engine::Trail *this)
{
  return *((unsigned __int8 *)this + 224);
}

uint64_t *uaap::EspressoModule::EspressoModule(uint64_t *a1)
{
  uaap::EspressoModule::deserializeModule(a1);
  return a1;
}

{
  uaap::EspressoModule::deserializeModule(a1);
  return a1;
}

uint64_t uaap::EspressoModule::deserializeModule(uint64_t *a1)
{
  uint64_t context;
  uint64_t plan;
  uint64_t result;
  std::runtime_error *exception;

  context = espresso_create_context();
  *a1 = context;
  if (!context)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso context is nil.");
    goto LABEL_8;
  }
  plan = espresso_create_plan();
  a1[1] = plan;
  if (!plan)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso plan is nil.");
    goto LABEL_8;
  }
  result = espresso_plan_add_network();
  if ((_DWORD)result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not create espresso plan.");
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1C2234960(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void uaap::EspressoModule::~EspressoModule(uaap::EspressoModule *this)
{
  espresso_plan_destroy();
  espresso_context_destroy();
}

uint64_t uaap::EspressoModule::buildPlan(uaap::EspressoModule *this)
{
  uint64_t result;
  std::runtime_error *exception;

  result = espresso_plan_build();
  if ((_DWORD)result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to build espresso plan.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1C2234A2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t uaap::EspressoModule::executePlan(uaap::EspressoModule *this)
{
  uint64_t result;
  std::runtime_error *exception;

  result = espresso_plan_execute_sync();
  if ((_DWORD)result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to execute espresso plan.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1C2234A94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t uaap::EspressoModule::cleanPlan(uaap::EspressoModule *this)
{
  uint64_t result;
  std::runtime_error *exception;

  result = espresso_plan_build_clean();
  if ((_DWORD)result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to clean up espresso plan.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1C2234AFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t uaap::EspressoModule::reshape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  char v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t result;
  std::runtime_error *exception;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD v33[2];
  _DWORD v34[2];
  _DWORD v35[2];
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = SNLPOSLoggerForCategory(3);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C2196000, v5, OS_LOG_TYPE_DEBUG, "Reshaping network to handle current request inputs", buf, 2u);
  }
  v6 = 0;
  v36 = xmmword_1E7BED170;
  v7 = *(_QWORD **)a2;
  v8 = *(_QWORD **)a3;
  v9 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  v35[0] = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v35[1] = v9;
  v10 = 1;
  v34[0] = 1;
  v34[1] = *v8;
  v33[0] = *v7;
  v33[1] = 1;
  v32 = 0x100000001;
  v31 = -1;
  v30 = 0x300000003;
  do
  {
    v11 = v10;
    v12 = SNLPOSLoggerForCategory(3);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v13 = *((_QWORD *)&v36 + v6);
      v14 = v35[v6];
      v15 = v34[v6];
      v16 = v33[v6];
      v17 = v33[v6 - 2];
      *(_DWORD *)buf = 136316162;
      v21 = v13;
      v22 = 1024;
      v23 = v14;
      v24 = 1024;
      v25 = v15;
      v26 = 1024;
      v27 = v16;
      v28 = 1024;
      v29 = v17;
      _os_log_impl(&dword_1C2196000, v12, OS_LOG_TYPE_DEBUG, "Reshaping blob '%s' to w=%d, h=%d, k=%d, n=%d", buf, 0x24u);
    }
    v10 = 0;
    v6 = 1;
  }
  while ((v11 & 1) != 0);
  result = espresso_network_change_input_blob_shapes_seq_rank();
  if ((_DWORD)result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to reshape espresso blob.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1C2234D40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t uaap::EspressoModule::setInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  std::runtime_error *exception;
  std::string v5;
  uint64_t v6;
  int v7;

  v6 = *a3;
  espresso_buffer_pack_tensor_shape();
  v7 = 65568;
  result = espresso_network_bind_buffer();
  if ((_DWORD)result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v5);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1C2234E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void uaap::EspressoModule::getOutput(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::runtime_error *exception;
  void *__p;
  __int128 v11;
  unint64_t v12;
  void *v13;
  int v14;
  std::string v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v14 = 65568;
  v2 = v13;
  if (espresso_network_bind_buffer())
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v15);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v12 = 0;
  espresso_buffer_unpack_tensor_shape();
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v11 = 0uLL;
  __p = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, &v15, (uint64_t)&v15 + 8 * v12, v12);
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  v4 = (uint64_t *)__p;
  *(_QWORD *)a1 = __p;
  v5 = (_QWORD *)v11;
  *(_OWORD *)(a1 + 8) = v11;
  if (v5 == v4)
  {
    v7 = 1;
  }
  else
  {
    v6 = v5 - v4;
    if (v6 <= 1)
      v6 = 1;
    v7 = 1;
    do
    {
      v8 = *v4++;
      v7 *= v8;
      --v6;
    }
    while (v6);
  }
  __p = 0;
  v11 = 0uLL;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v13, (uint64_t)v13 + 4 * v7, v7);
  if ((void **)(a1 + 24) != &__p)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 24), (char *)__p, v11, (uint64_t)(v11 - (_QWORD)__p) >> 2);
  if (__p)
  {
    *(_QWORD *)&v11 = __p;
    operator delete(__p);
  }
  if (v2)
    free(v2);
}

void sub_1C223504C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;
  void *v11;
  int v12;
  uint64_t v13;

  if (*(char *)(v13 - 113) < 0)
  {
    operator delete(*(void **)(v13 - 136));
    if ((v12 & 1) == 0)
    {
LABEL_6:
      if (v10)
        free(v10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v12)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v11);
  goto LABEL_6;
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void uaap::DateDurationHandler::~DateDurationHandler(uaap::DateDurationHandler *this)
{
  JUMPOUT(0x1C3BB9B44);
}

_QWORD *uaap::DateDurationHandler::handle(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  _QWORD *result;

  result = (_QWORD *)DDResultHasType();
  if ((_DWORD)result)
    return uaap::mapDateDurationToItemizedUsos(a3, a4);
  return result;
}

_QWORD *uaap::mapDateDurationToItemizedUsos(uint64_t a1, char **a2)
{
  CFHashCode v4;

  v4 = CFHash(CFSTR("DateDuration"));
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v4);
  uaap::DateSpanHandler::mapDateSpanToItemizedUsos(a1, a2);
  uaap::DateHandler::mapDateToItemizedUsos(a1, a2);
  uaap::mapTimeSpansToItemizedUsos(a1, a2);
  return uaap::mapTimeSpanSpansToItemizedUsos(a1, a2);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = (a2 - 1) & a3;
  }
  v5 = *(_QWORD **)(a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a3)
      {
        if (result[2] == a3)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= a2)
            v7 %= a2;
        }
        else
        {
          v7 &= a2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

float nlv4_inference_orchestrator::inference_engine::BeamSearch::findBorderScore(uint64_t a1, float **a2)
{
  unint64_t v4;
  char *v5;
  float *v6;
  float *v7;
  float *v8;
  char *v9;
  float v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float *v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  float *v25;
  float v26;
  float v28;
  int v30;
  void *__p;
  char *v32;

  v4 = *(_QWORD *)(a1 + 8) + 1;
  v30 = 0;
  std::vector<float>::vector(&__p, v4, &v30);
  v6 = (float *)__p;
  v5 = v32;
  if (__p != v32)
  {
    v8 = *a2;
    v7 = a2[1];
    v9 = (char *)__p;
    if (*a2 == v7)
    {
      v8 = a2[1];
    }
    else
    {
      do
      {
        v10 = *v8++;
        *(float *)v9 = v10;
        v9 += 4;
      }
      while (v8 != v7 && v9 != v5);
    }
    v12 = v9 - (char *)v6;
    if (v9 - (char *)v6 >= 5)
    {
      v13 = (unint64_t)(((v9 - (char *)v6) >> 2) - 2) >> 1;
      v14 = v13 + 1;
      v15 = &v6[v13];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,std::__wrap_iter<float *>>((uint64_t)v6, (v9 - (char *)v6) >> 2, v15--);
        --v14;
      }
      while (v14);
    }
    while (v8 != v7)
    {
      if (*v8 > *v6)
      {
        *v6 = *v8;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,std::__wrap_iter<float *>>((uint64_t)v6, (v9 - (char *)v6) >> 2, v6);
      }
      ++v8;
    }
    if (v12 >= 5)
    {
      v16 = (unint64_t)v12 >> 2;
      do
      {
        v17 = 0;
        v18 = *v6;
        v19 = v6;
        do
        {
          v20 = v19;
          v19 += v17 + 1;
          v21 = 2 * v17;
          v17 = (2 * v17) | 1;
          v22 = v21 + 2;
          if (v22 < v16 && *v19 > v19[1])
          {
            ++v19;
            v17 = v22;
          }
          *v20 = *v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v9 -= 4;
        if (v19 != (float *)v9)
        {
          *v19 = *(float *)v9;
          *(float *)v9 = v18;
          v23 = (char *)v19 - (char *)v6 + 4;
          if (v23 < 5)
            continue;
          v24 = (((unint64_t)v23 >> 2) - 2) >> 1;
          v25 = &v6[v24];
          v26 = *v25;
          v18 = *v19;
          if (*v25 <= *v19)
            continue;
          do
          {
            *v19 = v26;
            v19 = v25;
            if (!v24)
              break;
            v24 = (v24 - 1) >> 1;
            v25 = &v6[v24];
            v26 = *v25;
          }
          while (*v25 > v18);
        }
        *v19 = v18;
      }
      while (v16-- > 2);
    }
  }
  v28 = *((float *)__p + *(_QWORD *)(a1 + 8));
  v32 = (char *)__p;
  operator delete(__p);
  return v28;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,std::__wrap_iter<float *>>(uint64_t result, uint64_t a2, float *a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 >= 2)
  {
    v3 = (uint64_t)a3 - result;
    v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 2)
    {
      v5 = v3 >> 1;
      v6 = (v3 >> 1) | 1;
      v7 = (float *)(result + 4 * v6);
      v8 = v5 + 2;
      if (v8 < a2 && *v7 > v7[1])
      {
        ++v7;
        v6 = v8;
      }
      v9 = *v7;
      v10 = *a3;
      if (*v7 <= *a3)
      {
        do
        {
          *a3 = v9;
          a3 = v7;
          if (v4 < v6)
            break;
          v11 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (float *)(result + 4 * v6);
          v12 = v11 + 2;
          if (v12 < a2 && *v7 > v7[1])
          {
            ++v7;
            v6 = v12;
          }
          v9 = *v7;
        }
        while (*v7 <= v10);
        *a3 = v10;
      }
    }
  }
  return result;
}

double nlv4_inference_orchestrator::inference_engine::BeamSearch::getTopKTokenIndicesAndScores@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  __n128 v6;
  float *v7;
  float v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  float v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  float *v19;
  float *v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6.n128_f32[0] = nlv4_inference_orchestrator::inference_engine::BeamSearch::findBorderScore(a1, (float **)a2);
  v7 = *(float **)a2;
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
  {
    v10 = 0;
    v9 = 0;
  }
  else
  {
    v8 = v6.n128_f32[0];
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = v7[v11];
      if (v12 > v8)
      {
        v13 = (unint64_t)a3[2];
        if (v10 >= v13)
        {
          v14 = (uint64_t)(v10 - (_QWORD)v9) >> 4;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 60)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v16 = v13 - (_QWORD)v9;
          if (v16 >> 3 > v15)
            v15 = v16 >> 3;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
            v17 = 0xFFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            if (v17 >> 60)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v18 = (char *)operator new(16 * v17);
          }
          else
          {
            v18 = 0;
          }
          v19 = (float *)&v18[16 * v14];
          *(_QWORD *)v19 = v11;
          v19[2] = v12;
          v20 = v19;
          if ((void *)v10 != v9)
          {
            do
            {
              v21 = *(_QWORD *)(v10 - 16);
              v10 -= 16;
              v22 = *(_DWORD *)(v10 + 8);
              *((_QWORD *)v20 - 2) = v21;
              v20 -= 4;
              *((_DWORD *)v20 + 2) = v22;
            }
            while ((void *)v10 != v9);
            v9 = *a3;
          }
          v10 = (unint64_t)(v19 + 4);
          *a3 = v20;
          a3[1] = v19 + 4;
          a3[2] = &v18[16 * v17];
          if (v9)
            operator delete(v9);
        }
        else
        {
          *(_QWORD *)v10 = v11;
          *(float *)(v10 + 8) = v12;
          v10 += 16;
        }
        a3[1] = (void *)v10;
        v9 = *a3;
      }
      if (*(_QWORD *)(a1 + 8) == (uint64_t)(v10 - (_QWORD)v9) >> 4)
        break;
      ++v11;
      v7 = *(float **)a2;
    }
    while (v11 < (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  }
  v23 = 126 - 2 * __clz((uint64_t)(v10 - (_QWORD)v9) >> 4);
  if ((void *)v10 == v9)
    v24 = 0;
  else
    v24 = v23;
  return std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *,false>((uint64_t)v9, v10, v24, 1, v6);
}

void sub_1C22357C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 a5)
{
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  float v21;
  unint64_t v22;
  float v23;
  unint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  float v31;
  unint64_t v32;
  float v33;
  unint64_t v34;
  unint64_t v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  BOOL v45;
  uint64_t v46;
  _QWORD *v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  int64_t v54;
  int64_t v55;
  uint64_t v56;
  unint64_t v57;
  float v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  float v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  __n128 v85;
  __int128 v86;
  __int128 v87;
  __n128 v88;
  __int128 v89;

LABEL_1:
  v9 = (uint64_t *)(a2 - 16);
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = a2 - v10;
    v12 = (uint64_t)(a2 - v10) >> 4;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return a5.n128_f64[0];
      case 2uLL:
        a5.n128_u32[0] = *(_DWORD *)(a2 - 8);
        if (a5.n128_f32[0] < *(float *)(v10 + 8))
        {
          a5 = *(__n128 *)v10;
          v88 = *(__n128 *)v10;
          v42 = *v9;
          *(_DWORD *)(v10 + 8) = *(_DWORD *)(a2 - 8);
          *(_QWORD *)v10 = v42;
          *(_DWORD *)(a2 - 8) = v88.n128_u32[2];
          *v9 = v88.n128_u64[0];
        }
        return a5.n128_f64[0];
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>((__int128 *)v10, (float *)(v10 + 16), a2 - 16);
        return a5.n128_f64[0];
      case 4uLL:
        a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>(v10, (float *)(v10 + 16), (__n128 *)(v10 + 32), a2 - 16).n128_u64[0];
        return a5.n128_f64[0];
      case 5uLL:
        a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>((__n128 *)v10, (__int128 *)(v10 + 16), (__n128 *)(v10 + 32), (__n128 *)(v10 + 48), a2 - 16).n128_u64[0];
        return a5.n128_f64[0];
      default:
        if (v11 <= 383)
        {
          v43 = (_QWORD *)(v10 + 16);
          v45 = v10 == a2 || v43 == (_QWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v45)
            {
              v46 = 0;
              v47 = (_QWORD *)v10;
              do
              {
                a5.n128_u32[0] = *((_DWORD *)v47 + 6);
                v48 = *((float *)v47 + 2);
                v47 = v43;
                if (a5.n128_f32[0] < v48)
                {
                  v49 = *v43;
                  v50 = v46;
                  while (1)
                  {
                    v51 = v10 + v50;
                    *(_QWORD *)(v51 + 16) = *(_QWORD *)(v10 + v50);
                    *(_DWORD *)(v51 + 24) = *(_DWORD *)(v10 + v50 + 8);
                    if (!v50)
                      break;
                    v50 -= 16;
                    if (a5.n128_f32[0] >= *(float *)(v51 - 8))
                    {
                      v52 = v10 + v50 + 16;
                      goto LABEL_76;
                    }
                  }
                  v52 = v10;
LABEL_76:
                  *(_QWORD *)v52 = v49;
                  *(_DWORD *)(v52 + 8) = a5.n128_u32[0];
                }
                v43 = v47 + 2;
                v46 += 16;
              }
              while (v47 + 2 != (_QWORD *)a2);
            }
          }
          else if (!v45)
          {
            do
            {
              a5.n128_u32[0] = *(_DWORD *)(a1 + 24);
              v79 = *(float *)(a1 + 8);
              a1 = (uint64_t)v43;
              if (a5.n128_f32[0] < v79)
              {
                v80 = *v43;
                v81 = v43;
                do
                {
                  v82 = v81;
                  v83 = *(v81 - 2);
                  v81 -= 2;
                  *v82 = v83;
                  *((_DWORD *)v82 + 2) = *((_DWORD *)v82 - 2);
                }
                while (a5.n128_f32[0] < *((float *)v82 - 6));
                *v81 = v80;
                *((_DWORD *)v81 + 2) = a5.n128_u32[0];
              }
              v43 = (_QWORD *)(a1 + 16);
            }
            while (a1 + 16 != a2);
          }
          return a5.n128_f64[0];
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            v53 = (v12 - 2) >> 1;
            v54 = v53;
            do
            {
              v55 = v54;
              if (v53 >= v54)
              {
                v56 = (2 * v54) | 1;
                v57 = v10 + 16 * v56;
                if (2 * v55 + 2 < (uint64_t)v12 && *(float *)(v57 + 8) < *(float *)(v57 + 24))
                {
                  v57 += 16;
                  v56 = 2 * v55 + 2;
                }
                v58 = *(float *)(v10 + 16 * v55 + 8);
                if (*(float *)(v57 + 8) >= v58)
                {
                  v59 = v10 + 16 * v55;
                  v60 = *(_QWORD *)v59;
                  do
                  {
                    v61 = v59;
                    v59 = v57;
                    v62 = *(_QWORD *)v57;
                    *(_DWORD *)(v61 + 8) = *(_DWORD *)(v59 + 8);
                    *(_QWORD *)v61 = v62;
                    if (v53 < v56)
                      break;
                    v63 = 2 * v56;
                    v56 = (2 * v56) | 1;
                    v57 = v10 + 16 * v56;
                    v64 = v63 + 2;
                    if (v64 < (uint64_t)v12 && *(float *)(v57 + 8) < *(float *)(v57 + 24))
                    {
                      v57 += 16;
                      v56 = v64;
                    }
                  }
                  while (*(float *)(v57 + 8) >= v58);
                  *(_QWORD *)v59 = v60;
                  *(float *)(v59 + 8) = v58;
                }
              }
              v54 = v55 - 1;
            }
            while (v55);
            v65 = (unint64_t)v11 >> 4;
            do
            {
              v66 = 0;
              a5 = *(__n128 *)v10;
              v89 = *(_OWORD *)v10;
              v67 = v10;
              do
              {
                v68 = v67;
                v67 += 16 * (v66 + 1);
                v69 = 2 * v66;
                v66 = (2 * v66) | 1;
                v70 = v69 + 2;
                if (v70 < v65)
                {
                  a5.n128_u32[0] = *(_DWORD *)(v67 + 8);
                  if (a5.n128_f32[0] < *(float *)(v67 + 24))
                  {
                    v67 += 16;
                    v66 = v70;
                  }
                }
                v71 = *(_QWORD *)v67;
                *(_DWORD *)(v68 + 8) = *(_DWORD *)(v67 + 8);
                *(_QWORD *)v68 = v71;
              }
              while (v66 <= (uint64_t)((unint64_t)(v65 - 2) >> 1));
              a2 -= 16;
              if (v67 == a2)
              {
                *(_DWORD *)(v67 + 8) = DWORD2(v89);
                *(_QWORD *)v67 = v89;
              }
              else
              {
                v72 = *(_QWORD *)a2;
                *(_DWORD *)(v67 + 8) = *(_DWORD *)(a2 + 8);
                *(_QWORD *)v67 = v72;
                *(_DWORD *)(a2 + 8) = DWORD2(v89);
                *(_QWORD *)a2 = v89;
                v73 = v67 - v10 + 16;
                if (v73 >= 17)
                {
                  v74 = (unint64_t)((v73 >> 4) - 2) >> 1;
                  a5.n128_u32[0] = *(_DWORD *)(v67 + 8);
                  if (*(float *)(v10 + 16 * v74 + 8) < a5.n128_f32[0])
                  {
                    v75 = *(_QWORD *)v67;
                    do
                    {
                      v76 = v67;
                      v67 = v10 + 16 * v74;
                      v77 = *(_QWORD *)v67;
                      *(_DWORD *)(v76 + 8) = *(_DWORD *)(v67 + 8);
                      *(_QWORD *)v76 = v77;
                      if (!v74)
                        break;
                      v74 = (v74 - 1) >> 1;
                    }
                    while (*(float *)(v10 + 16 * v74 + 8) < a5.n128_f32[0]);
                    *(_QWORD *)v67 = v75;
                    *(_DWORD *)(v67 + 8) = a5.n128_u32[0];
                  }
                }
              }
            }
            while (v65-- > 2);
          }
          return a5.n128_f64[0];
        }
        v13 = v12 >> 1;
        v14 = v10 + 16 * (v12 >> 1);
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>((__int128 *)(a1 + 16 * (v12 >> 1)), (float *)a1, a2 - 16);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>((__int128 *)a1, (float *)(a1 + 16 * (v12 >> 1)), a2 - 16);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>((__int128 *)(a1 + 16), (float *)(v14 - 16), a2 - 32);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>((__int128 *)(a1 + 32), (float *)(a1 + 16 + 16 * v13), a2 - 48);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>((__int128 *)(v14 - 16), (float *)v14, a1 + 16 + 16 * v13);
          a5 = *(__n128 *)a1;
          v85 = *(__n128 *)a1;
          v15 = *(_QWORD *)v14;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(v14 + 8);
          *(_QWORD *)a1 = v15;
          *(_DWORD *)(v14 + 8) = v85.n128_u32[2];
          *(_QWORD *)v14 = v85.n128_u64[0];
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          a5.n128_u32[0] = *(_DWORD *)(a1 + 8);
          if (*(float *)(a1 - 8) < a5.n128_f32[0])
            goto LABEL_11;
          if (a5.n128_f32[0] >= *(float *)(a2 - 8))
          {
            v32 = a1 + 16;
            do
            {
              v10 = v32;
              if (v32 >= a2)
                break;
              v33 = *(float *)(v32 + 8);
              v32 += 16;
            }
            while (a5.n128_f32[0] >= v33);
          }
          else
          {
            v30 = a1;
            do
            {
              v10 = v30 + 16;
              v31 = *(float *)(v30 + 24);
              v30 += 16;
            }
            while (a5.n128_f32[0] >= v31);
          }
          v34 = a2;
          if (v10 < a2)
          {
            v35 = a2;
            do
            {
              v34 = v35 - 16;
              v36 = *(float *)(v35 - 8);
              v35 -= 16;
            }
            while (a5.n128_f32[0] < v36);
          }
          v37 = *(_QWORD *)a1;
          while (v10 < v34)
          {
            v87 = *(_OWORD *)v10;
            v38 = *(_QWORD *)v34;
            *(_DWORD *)(v10 + 8) = *(_DWORD *)(v34 + 8);
            *(_QWORD *)v10 = v38;
            *(_DWORD *)(v34 + 8) = DWORD2(v87);
            *(_QWORD *)v34 = v87;
            do
            {
              v39 = *(float *)(v10 + 24);
              v10 += 16;
            }
            while (a5.n128_f32[0] >= v39);
            do
            {
              v40 = *(float *)(v34 - 8);
              v34 -= 16;
            }
            while (a5.n128_f32[0] < v40);
          }
          if (v10 - 16 != a1)
          {
            v41 = *(_QWORD *)(v10 - 16);
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(v10 - 8);
            *(_QWORD *)a1 = v41;
          }
          a4 = 0;
          *(_QWORD *)(v10 - 16) = v37;
          *(_DWORD *)(v10 - 8) = a5.n128_u32[0];
          continue;
        }
        a5.n128_u32[0] = *(_DWORD *)(a1 + 8);
LABEL_11:
        v16 = *(_QWORD *)a1;
        v17 = a1;
        do
        {
          v18 = v17;
          v17 += 16;
        }
        while (*(float *)(v18 + 24) < a5.n128_f32[0]);
        v19 = a2;
        if (v18 == a1)
        {
          v22 = a2;
          while (v17 < v22)
          {
            v20 = v22 - 16;
            v23 = *(float *)(v22 - 8);
            v22 -= 16;
            if (v23 < a5.n128_f32[0])
              goto LABEL_21;
          }
          v20 = v22;
        }
        else
        {
          do
          {
            v20 = v19 - 16;
            v21 = *(float *)(v19 - 8);
            v19 -= 16;
          }
          while (v21 >= a5.n128_f32[0]);
        }
LABEL_21:
        v10 = v17;
        if (v17 < v20)
        {
          v24 = v20;
          do
          {
            v86 = *(_OWORD *)v10;
            v25 = *(_QWORD *)v24;
            *(_DWORD *)(v10 + 8) = *(_DWORD *)(v24 + 8);
            *(_QWORD *)v10 = v25;
            *(_DWORD *)(v24 + 8) = DWORD2(v86);
            *(_QWORD *)v24 = v86;
            do
            {
              v26 = *(float *)(v10 + 24);
              v10 += 16;
            }
            while (v26 < a5.n128_f32[0]);
            do
            {
              v27 = *(float *)(v24 - 8);
              v24 -= 16;
            }
            while (v27 >= a5.n128_f32[0]);
          }
          while (v10 < v24);
        }
        if (v10 - 16 != a1)
        {
          v28 = *(_QWORD *)(v10 - 16);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(v10 - 8);
          *(_QWORD *)a1 = v28;
        }
        *(_QWORD *)(v10 - 16) = v16;
        *(_DWORD *)(v10 - 8) = a5.n128_u32[0];
        if (v17 < v20)
        {
LABEL_32:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *,false>(a1, v10 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>(a1, v10 - 16);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>(v10, a2))
        {
          if (v29)
            continue;
          goto LABEL_32;
        }
        a2 = v10 - 16;
        if (!v29)
          goto LABEL_1;
        return a5.n128_f64[0];
    }
  }
}

  v114 = (sirinluinternal::MatchingSpan **)(a2 - 64);
  v117 = a2 - 32;
  v113 = (sirinluinternal::MatchingSpan **)(a2 - 96);
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = a2 - v9;
    v11 = (uint64_t)(a2 - v9) >> 5;
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(a2 - 8), *(const sirinluinternal::MatchingSpan **)(v9 + 24)))
        {
          v138 = *(_QWORD *)(v9 + 16);
          v131 = *(_OWORD *)v9;
          v51 = *(_OWORD *)v117;
          *(_QWORD *)(v9 + 16) = *(_QWORD *)(v117 + 16);
          *(_OWORD *)v9 = v51;
          *(_QWORD *)(v117 + 16) = v138;
          *(_OWORD *)v117 = v131;
          v52 = *(_QWORD *)(v9 + 24);
          *(_QWORD *)(v9 + 24) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v52;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>((const sirinluinternal::MatchingSpan **)v9, (sirinluinternal::MatchingSpan **)(v9 + 32), (sirinluinternal::MatchingSpan **)v117, a3);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>((const sirinluinternal::MatchingSpan **)v9, (sirinluinternal::MatchingSpan **)(v9 + 32), (sirinluinternal::MatchingSpan **)(v9 + 64), (__int128 *)v117, a3);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,0>((const sirinluinternal::MatchingSpan **)v9, (sirinluinternal::MatchingSpan **)(v9 + 32), (sirinluinternal::MatchingSpan **)(v9 + 64), (__int128 *)(v9 + 96), (__int128 *)v117, a3);
        return;
      default:
        if (v10 <= 767)
        {
          v53 = v9 + 32;
          v55 = v9 == a2 || v53 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v55)
            {
              v56 = 0;
              v57 = v9;
              do
              {
                v58 = v53;
                if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(v53 + 24), *(const sirinluinternal::MatchingSpan **)(v57 + 24)))
                {
                  v59 = a2;
                  v123 = *(_QWORD *)v58;
                  *(_QWORD *)v132 = *(_QWORD *)(v58 + 8);
                  *(_QWORD *)&v132[7] = *(_QWORD *)(v58 + 15);
                  v60 = *(_BYTE *)(v58 + 23);
                  *(_QWORD *)(v58 + 8) = 0;
                  *(_QWORD *)(v58 + 16) = 0;
                  *(_QWORD *)v58 = 0;
                  v61 = *(sirinluinternal::MatchingSpan **)(v57 + 56);
                  v62 = v56;
                  while (1)
                  {
                    v63 = a1 + v62;
                    v64 = (void **)(a1 + v62 + 32);
                    if (*(char *)(a1 + v62 + 55) < 0)
                      operator delete(*v64);
                    *(_OWORD *)v64 = *(_OWORD *)v63;
                    v65 = *(_QWORD *)(v63 + 24);
                    *(_QWORD *)(a1 + v62 + 48) = *(_QWORD *)(v63 + 16);
                    *(_BYTE *)(v63 + 23) = 0;
                    *(_BYTE *)v63 = 0;
                    *(_QWORD *)(v63 + 56) = v65;
                    if (!v62)
                      break;
                    v66 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, v61, *(const sirinluinternal::MatchingSpan **)(a1 + v62 - 8));
                    v62 -= 32;
                    if (!v66)
                    {
                      v67 = a1 + v62 + 32;
                      goto LABEL_80;
                    }
                  }
                  v67 = a1;
LABEL_80:
                  if (*(char *)(v67 + 23) < 0)
                    operator delete(*(void **)v67);
                  *(_QWORD *)v67 = v123;
                  *(_QWORD *)(v67 + 8) = *(_QWORD *)v132;
                  *(_QWORD *)(v67 + 15) = *(_QWORD *)&v132[7];
                  *(_BYTE *)(v67 + 23) = v60;
                  *(_QWORD *)(v67 + 24) = v61;
                  a2 = v59;
                }
                v53 = v58 + 32;
                v56 += 32;
                v57 = v58;
              }
              while (v58 + 32 != a2);
            }
          }
          else if (!v55)
          {
            v102 = v9 - 8;
            do
            {
              v103 = v53;
              if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(v53 + 24), *(const sirinluinternal::MatchingSpan **)(a1 + 24)))
              {
                v104 = a2;
                v105 = *(_QWORD *)v103;
                *(_QWORD *)v135 = *(_QWORD *)(v103 + 8);
                *(_QWORD *)&v135[7] = *(_QWORD *)(v103 + 15);
                v106 = *(_BYTE *)(v103 + 23);
                *(_QWORD *)(v103 + 8) = 0;
                *(_QWORD *)(v103 + 16) = 0;
                *(_QWORD *)v103 = 0;
                v107 = *(sirinluinternal::MatchingSpan **)(a1 + 56);
                v108 = v102;
                do
                {
                  v109 = v108;
                  v110 = v108 + 40;
                  if (*(char *)(v108 + 63) < 0)
                    operator delete(*(void **)v110);
                  *(_OWORD *)v110 = *(_OWORD *)(v109 + 8);
                  *(_QWORD *)(v110 + 16) = *(_QWORD *)(v109 + 24);
                  *(_BYTE *)(v109 + 31) = 0;
                  *(_BYTE *)(v109 + 8) = 0;
                  *(_QWORD *)(v109 + 64) = *(_QWORD *)(v109 + 32);
                  v111 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, v107, *(const sirinluinternal::MatchingSpan **)v109);
                  v108 = v109 - 32;
                }
                while (v111);
                v112 = v109 + 8;
                if (*(char *)(v112 + 23) < 0)
                  operator delete(*(void **)v112);
                *(_QWORD *)v112 = v105;
                *(_QWORD *)(v112 + 15) = *(_QWORD *)&v135[7];
                *(_QWORD *)(v112 + 8) = *(_QWORD *)v135;
                *(_BYTE *)(v112 + 23) = v106;
                *(_QWORD *)(v112 + 24) = v107;
                a2 = v104;
              }
              v53 = v103 + 32;
              v102 += 32;
              a1 = v103;
            }
            while (v103 + 32 != a2);
          }
          return;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v115 = (void **)a2;
            v68 = (unint64_t)(v11 - 2) >> 1;
            v124 = v68;
            do
            {
              v69 = v68;
              if (v124 >= v68)
              {
                v70 = (2 * v68) | 1;
                v71 = a1 + 32 * v70;
                v72 = *a3;
                if (2 * v68 + 2 < v11)
                {
                  v73 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(v72, *(sirinluinternal::MatchingSpan **)(v71 + 24), *(const sirinluinternal::MatchingSpan **)(v71 + 56));
                  v71 += 32 * v73;
                  if (v73)
                    v70 = 2 * v69 + 2;
                  v72 = *a3;
                }
                v74 = a1 + 32 * v69;
                if (!nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(v72, *(sirinluinternal::MatchingSpan **)(v71 + 24), *(const sirinluinternal::MatchingSpan **)(v74 + 24)))
                {
                  v118 = *(void **)v74;
                  *(_QWORD *)&v133[7] = *(_QWORD *)(v74 + 15);
                  *(_QWORD *)v133 = *(_QWORD *)(v74 + 8);
                  v120 = *(_BYTE *)(v74 + 23);
                  *(_QWORD *)v74 = 0;
                  *(_QWORD *)(v74 + 8) = 0;
                  *(_QWORD *)(v74 + 16) = 0;
                  v75 = *(const sirinluinternal::MatchingSpan **)(a1 + 32 * v69 + 24);
                  do
                  {
                    v76 = v71;
                    if (*(char *)(v74 + 23) < 0)
                      operator delete(*(void **)v74);
                    v77 = *(_OWORD *)v71;
                    *(_QWORD *)(v74 + 16) = *(_QWORD *)(v71 + 16);
                    *(_OWORD *)v74 = v77;
                    *(_BYTE *)(v71 + 23) = 0;
                    *(_BYTE *)v71 = 0;
                    *(_QWORD *)(v74 + 24) = *(_QWORD *)(v71 + 24);
                    if (v124 < v70)
                      break;
                    v78 = (2 * v70) | 1;
                    v71 = a1 + 32 * v78;
                    v70 = 2 * v70 + 2;
                    if (v70 >= v11)
                    {
                      v70 = v78;
                    }
                    else
                    {
                      v79 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(v71 + 24), *(const sirinluinternal::MatchingSpan **)(v71 + 56));
                      v71 += 32 * v79;
                      if (!v79)
                        v70 = v78;
                    }
                    v74 = v76;
                  }
                  while (!nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(v71 + 24), v75));
                  if (*(char *)(v76 + 23) < 0)
                    operator delete(*(void **)v76);
                  *(_QWORD *)v76 = v118;
                  *(_QWORD *)(v76 + 8) = *(_QWORD *)v133;
                  *(_QWORD *)(v76 + 15) = *(_QWORD *)&v133[7];
                  *(_BYTE *)(v76 + 23) = v120;
                  *(_QWORD *)(v76 + 24) = v75;
                }
              }
              v68 = v69 - 1;
            }
            while (v69);
            v80 = (unint64_t)v10 >> 5;
            v81 = v115;
            do
            {
              v82 = 0;
              v83 = v81;
              v121 = *(void **)a1;
              *(_QWORD *)v128 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)&v128[7] = *(_QWORD *)(a1 + 15);
              v125 = *(_BYTE *)(a1 + 23);
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              v84 = *(void **)(a1 + 24);
              v85 = a1;
              do
              {
                v86 = v85 + 32 * v82 + 32;
                v87 = 2 * v82;
                v82 = (2 * v82) | 1;
                v88 = v87 + 2;
                if (v87 + 2 < v80)
                {
                  v89 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(v86 + 24), *(const sirinluinternal::MatchingSpan **)(v86 + 56));
                  v86 += 32 * v89;
                  if (v89)
                    v82 = v88;
                }
                if (*(char *)(v85 + 23) < 0)
                  operator delete(*(void **)v85);
                v90 = *(_OWORD *)v86;
                *(_QWORD *)(v85 + 16) = *(_QWORD *)(v86 + 16);
                *(_OWORD *)v85 = v90;
                *(_BYTE *)(v86 + 23) = 0;
                *(_BYTE *)v86 = 0;
                *(_QWORD *)(v85 + 24) = *(_QWORD *)(v86 + 24);
                v85 = v86;
              }
              while (v82 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
              v81 = v83 - 4;
              v91 = *(char *)(v86 + 23);
              if ((void **)v86 == v83 - 4)
              {
                if (v91 < 0)
                  operator delete(*(void **)v86);
                *(_QWORD *)v86 = v121;
                *(_QWORD *)(v86 + 8) = *(_QWORD *)v128;
                *(_QWORD *)(v86 + 15) = *(_QWORD *)&v128[7];
                *(_BYTE *)(v86 + 23) = v125;
                *(_QWORD *)(v86 + 24) = v84;
              }
              else
              {
                if (v91 < 0)
                  operator delete(*(void **)v86);
                v92 = *(_OWORD *)v81;
                *(_QWORD *)(v86 + 16) = *(v83 - 2);
                *(_OWORD *)v86 = v92;
                *((_BYTE *)v83 - 9) = 0;
                *((_BYTE *)v83 - 32) = 0;
                *(_QWORD *)(v86 + 24) = *(v83 - 1);
                if (*((char *)v83 - 9) < 0)
                  operator delete(*v81);
                *(v83 - 4) = v121;
                *(void **)((char *)v83 - 17) = *(void **)&v128[7];
                *(v83 - 3) = *(void **)v128;
                *((_BYTE *)v83 - 9) = v125;
                *(v83 - 1) = v84;
                v93 = v86 + 32 - a1;
                if (v93 >= 33)
                {
                  v94 = (((unint64_t)v93 >> 5) - 2) >> 1;
                  v95 = a1 + 32 * v94;
                  if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(v95 + 24), *(const sirinluinternal::MatchingSpan **)(v86 + 24)))
                  {
                    v116 = v83 - 4;
                    v96 = *(void **)v86;
                    *(_QWORD *)v134 = *(_QWORD *)(v86 + 8);
                    *(_QWORD *)&v134[7] = *(_QWORD *)(v86 + 15);
                    v97 = *(_BYTE *)(v86 + 23);
                    *(_QWORD *)(v86 + 8) = 0;
                    *(_QWORD *)(v86 + 16) = 0;
                    *(_QWORD *)v86 = 0;
                    v98 = *(const sirinluinternal::MatchingSpan **)(v86 + 24);
                    do
                    {
                      v99 = v95;
                      if (*(char *)(v86 + 23) < 0)
                        operator delete(*(void **)v86);
                      v100 = *(_OWORD *)v95;
                      *(_QWORD *)(v86 + 16) = *(_QWORD *)(v95 + 16);
                      *(_OWORD *)v86 = v100;
                      *(_BYTE *)(v95 + 23) = 0;
                      *(_BYTE *)v95 = 0;
                      *(_QWORD *)(v86 + 24) = *(_QWORD *)(v95 + 24);
                      if (!v94)
                        break;
                      v94 = (v94 - 1) >> 1;
                      v95 = a1 + 32 * v94;
                      v86 = v99;
                    }
                    while (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(v95 + 24), v98));
                    if (*(char *)(v99 + 23) < 0)
                      operator delete(*(void **)v99);
                    *(_QWORD *)v99 = v96;
                    *(_QWORD *)(v99 + 8) = *(_QWORD *)v134;
                    *(_QWORD *)(v99 + 15) = *(_QWORD *)&v134[7];
                    *(_BYTE *)(v99 + 23) = v97;
                    *(_QWORD *)(v99 + 24) = v98;
                    v81 = v116;
                  }
                }
              }
            }
            while (v80-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = v9 + 32 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 <= 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>((const sirinluinternal::MatchingSpan **)v13, (sirinluinternal::MatchingSpan **)v9, (sirinluinternal::MatchingSpan **)v117, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>((const sirinluinternal::MatchingSpan **)v9, (sirinluinternal::MatchingSpan **)v13, (sirinluinternal::MatchingSpan **)v117, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>((const sirinluinternal::MatchingSpan **)(v9 + 32), (sirinluinternal::MatchingSpan **)(v13 - 32), v114, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>((const sirinluinternal::MatchingSpan **)(v9 + 64), (sirinluinternal::MatchingSpan **)(v9 + 32 + 32 * v12), v113, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>((const sirinluinternal::MatchingSpan **)(v13 - 32), (sirinluinternal::MatchingSpan **)v13, (sirinluinternal::MatchingSpan **)(v9 + 32 + 32 * v12), a3);
          v14 = *(_QWORD *)(v9 + 24);
          v136 = *(_QWORD *)(v9 + 16);
          v129 = *(_OWORD *)v9;
          v15 = *(_QWORD *)(v13 + 16);
          v16 = *(_QWORD *)(v13 + 24);
          *(_OWORD *)v9 = *(_OWORD *)v13;
          *(_QWORD *)(v9 + 16) = v15;
          *(_QWORD *)(v9 + 24) = v16;
          *(_OWORD *)v13 = v129;
          *(_QWORD *)(v13 + 16) = v136;
          *(_QWORD *)(v13 + 24) = v14;
        }
        --a4;
        if ((a5 & 1) == 0
          && !nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(v9 - 8), *(const sirinluinternal::MatchingSpan **)(v9 + 24)))
        {
          v37 = *(const sirinluinternal::MatchingSpan **)v9;
          *(_QWORD *)v127 = *(_QWORD *)(v9 + 8);
          *(_QWORD *)&v127[7] = *(_QWORD *)(v9 + 15);
          v38 = *(_BYTE *)(v9 + 23);
          *(_QWORD *)(v9 + 8) = 0;
          *(_QWORD *)(v9 + 16) = 0;
          *(_QWORD *)v9 = 0;
          v39 = *(sirinluinternal::MatchingSpan **)(v9 + 24);
          if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, v39, *(const sirinluinternal::MatchingSpan **)(a2 - 8)))
          {
            do
            {
              v40 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, v39, *(const sirinluinternal::MatchingSpan **)(v9 + 56));
              v9 += 32;
            }
            while (!v40);
          }
          else
          {
            v41 = v9 + 32;
            do
            {
              v9 = v41;
              if (v41 >= a2)
                break;
              v42 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, v39, *(const sirinluinternal::MatchingSpan **)(v41 + 24));
              v41 = v9 + 32;
            }
            while (!v42);
          }
          v43 = a2;
          if (v9 < a2)
          {
            v43 = a2;
            do
            {
              v44 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, v39, *(const sirinluinternal::MatchingSpan **)(v43 - 8));
              v43 -= 32;
            }
            while (v44);
          }
          while (v9 < v43)
          {
            v137 = *(_QWORD *)(v9 + 16);
            v130 = *(_OWORD *)v9;
            v45 = *(_OWORD *)v43;
            *(_QWORD *)(v9 + 16) = *(_QWORD *)(v43 + 16);
            *(_OWORD *)v9 = v45;
            *(_QWORD *)(v43 + 16) = v137;
            *(_OWORD *)v43 = v130;
            v46 = *(_QWORD *)(v9 + 24);
            *(_QWORD *)(v9 + 24) = *(_QWORD *)(v43 + 24);
            *(_QWORD *)(v43 + 24) = v46;
            do
            {
              v47 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, v39, *(const sirinluinternal::MatchingSpan **)(v9 + 56));
              v9 += 32;
            }
            while (!v47);
            do
            {
              v48 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, v39, *(const sirinluinternal::MatchingSpan **)(v43 - 8));
              v43 -= 32;
            }
            while (v48);
          }
          v49 = (void **)(v9 - 32);
          if (v9 - 32 != a1)
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v50 = *(_OWORD *)v49;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 - 16);
            *(_OWORD *)a1 = v50;
            *(_BYTE *)(v9 - 9) = 0;
            *(_BYTE *)(v9 - 32) = 0;
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(v9 - 8);
          }
          if (*(char *)(v9 - 9) < 0)
            operator delete(*v49);
          a5 = 0;
          *(_QWORD *)(v9 - 32) = v37;
          *(_QWORD *)(v9 - 17) = *(_QWORD *)&v127[7];
          *(_QWORD *)(v9 - 24) = *(_QWORD *)v127;
          *(_BYTE *)(v9 - 9) = v38;
          *(_QWORD *)(v9 - 8) = v39;
          continue;
        }
        v122 = *(const sirinluinternal::MatchingSpan **)v9;
        *(_QWORD *)v126 = *(_QWORD *)(v9 + 8);
        *(_QWORD *)&v126[7] = *(_QWORD *)(v9 + 15);
        v17 = *(_BYTE *)(v9 + 23);
        *(_QWORD *)(v9 + 8) = 0;
        *(_QWORD *)(v9 + 16) = 0;
        *(_QWORD *)v9 = 0;
        v18 = *(const sirinluinternal::MatchingSpan **)(v9 + 24);
        v19 = v9;
        do
        {
          v20 = v19;
          v21 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(v19 + 56), v18);
          v19 += 32;
        }
        while (v21);
        v22 = a4;
        v23 = a2;
        if (v20 == v9)
        {
          do
          {
            if (v19 >= a2)
              break;
            v25 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(a2 - 8), v18);
            a2 -= 32;
          }
          while (!v25);
        }
        else
        {
          do
          {
            v24 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(a2 - 8), v18);
            a2 -= 32;
          }
          while (!v24);
        }
        v9 = v20 + 32;
        if (v19 < a2)
        {
          v26 = a2;
          do
          {
            v27 = *(_OWORD *)v9;
            v28 = *(_QWORD *)(v9 + 16);
            v29 = *(_QWORD *)(v26 + 16);
            *(_OWORD *)v9 = *(_OWORD *)v26;
            *(_QWORD *)(v9 + 16) = v29;
            *(_QWORD *)(v26 + 16) = v28;
            *(_OWORD *)v26 = v27;
            v30 = *(_QWORD *)(v9 + 24);
            *(_QWORD *)(v9 + 24) = *(_QWORD *)(v26 + 24);
            *(_QWORD *)(v26 + 24) = v30;
            do
            {
              v31 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(v9 + 56), v18);
              v9 += 32;
            }
            while (v31);
            do
            {
              v32 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(v26 - 8), v18);
              v26 -= 32;
            }
            while (!v32);
          }
          while (v9 < v26);
        }
        v33 = (void **)(v9 - 32);
        if (v9 - 32 != a1)
        {
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v34 = *(_OWORD *)v33;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 - 16);
          *(_OWORD *)a1 = v34;
          *(_BYTE *)(v9 - 9) = 0;
          *(_BYTE *)(v9 - 32) = 0;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(v9 - 8);
        }
        if (*(char *)(v9 - 9) < 0)
          operator delete(*v33);
        *(_QWORD *)(v9 - 32) = v122;
        *(_QWORD *)(v9 - 17) = *(_QWORD *)&v126[7];
        *(_QWORD *)(v9 - 24) = *(_QWORD *)v126;
        *(_BYTE *)(v9 - 9) = v17;
        *(_QWORD *)(v9 - 8) = v18;
        v35 = v19 >= a2;
        a2 = v23;
        a4 = v22;
        if (!v35)
        {
LABEL_33:
          std::__introsort<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,false>(a1, v9 - 32, a3, v22, a5 & 1);
          a5 = 0;
          continue;
        }
        v36 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>(a1, v9 - 32, a3);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>(v9, a2, a3))
        {
          if (v36)
            continue;
          goto LABEL_33;
        }
        a2 = v9 - 32;
        if (!v36)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a2 - 2;
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = (uint64_t)a2 - v9;
    v11 = (uint64_t)((uint64_t)a2 - v9) >> 5;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v70 = *((_QWORD *)a2 - 4);
        v97 = v70 == *(_QWORD *)v9;
        v71 = v70 < *(_QWORD *)v9;
        if (v97)
          v71 = *((_QWORD *)a2 - 3) > *(_QWORD *)(v9 + 8);
        if (v71)
        {
          v166 = *(_OWORD *)v9;
          v175 = *(_OWORD *)(v9 + 16);
          v72 = *(a2 - 1);
          *(_OWORD *)v9 = *v8;
          *(_OWORD *)(v9 + 16) = v72;
          *v8 = v166;
          *(a2 - 1) = v175;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>((__int128 *)v9, (unint64_t *)(v9 + 32), a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>(v9, (__n128 *)(v9 + 32), v9 + 64, (uint64_t)(a2 - 2));
        return;
      case 5uLL:
        v73 = (__int128 *)(v9 + 32);
        v74 = (__int128 *)(v9 + 64);
        v75 = (__int128 *)(v9 + 96);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>(v9, (__n128 *)(v9 + 32), v9 + 64, v9 + 96);
        v76 = *((_QWORD *)a2 - 4);
        v77 = *(_QWORD *)(v9 + 96);
        v97 = v76 == v77;
        v78 = v76 < v77;
        if (v97)
          v78 = *((_QWORD *)a2 - 3) > *(_QWORD *)(v9 + 104);
        if (v78)
        {
          v79 = *v75;
          v176 = *(_OWORD *)(v9 + 112);
          v80 = *(a2 - 1);
          *v75 = *v8;
          *(_OWORD *)(v9 + 112) = v80;
          *v8 = v79;
          *(a2 - 1) = v176;
          v81 = *(_QWORD *)(v9 + 96);
          v82 = *(_QWORD *)(v9 + 64);
          v97 = v81 == v82;
          v83 = v81 < v82;
          if (v97)
            v83 = *(_QWORD *)(v9 + 104) > *(_QWORD *)(v9 + 72);
          if (v83)
          {
            v85 = *v74;
            v84 = *(_OWORD *)(v9 + 80);
            v86 = *(_OWORD *)(v9 + 112);
            *v74 = *v75;
            *(_OWORD *)(v9 + 80) = v86;
            *v75 = v85;
            *(_OWORD *)(v9 + 112) = v84;
            v87 = *(_QWORD *)(v9 + 64);
            v88 = *(_QWORD *)(v9 + 32);
            v97 = v87 == v88;
            v89 = v87 < v88;
            if (v97)
              v89 = *(_QWORD *)(v9 + 72) > *(_QWORD *)(v9 + 40);
            if (v89)
            {
              v91 = *v73;
              v90 = *(_OWORD *)(v9 + 48);
              v92 = *(_OWORD *)(v9 + 80);
              *v73 = *v74;
              *(_OWORD *)(v9 + 48) = v92;
              *v74 = v91;
              *(_OWORD *)(v9 + 80) = v90;
              v93 = *(_QWORD *)(v9 + 32);
              v97 = v93 == *(_QWORD *)v9;
              v94 = v93 < *(_QWORD *)v9;
              if (v97)
                v94 = *(_QWORD *)(v9 + 40) > *(_QWORD *)(v9 + 8);
              if (v94)
              {
                v167 = *(_OWORD *)v9;
                v177 = *(_OWORD *)(v9 + 16);
                v95 = *(_OWORD *)(v9 + 48);
                *(_OWORD *)v9 = *v73;
                *(_OWORD *)(v9 + 16) = v95;
                *v73 = v167;
                *(_OWORD *)(v9 + 48) = v177;
              }
            }
          }
        }
        return;
      default:
        if (v10 <= 767)
        {
          v96 = (__int128 *)(v9 + 32);
          v97 = (__int128 *)v9 == a2 || v96 == a2;
          v98 = v97;
          if ((a4 & 1) != 0)
          {
            if ((v98 & 1) == 0)
            {
              v99 = 0;
              v100 = v9;
              do
              {
                v101 = v96;
                v102 = *(_QWORD *)(v100 + 32);
                v103 = *(_QWORD *)(v100 + 40);
                v104 = v102 < *(_QWORD *)v100;
                if (v102 == *(_QWORD *)v100)
                  v104 = v103 > *(_QWORD *)(v100 + 8);
                if (v104)
                {
                  v168 = *(_OWORD *)(v100 + 48);
                  v105 = v99;
                  while (1)
                  {
                    v106 = v9 + v105;
                    v107 = *(_OWORD *)(v9 + v105 + 16);
                    *(_OWORD *)(v106 + 32) = *(_OWORD *)(v9 + v105);
                    *(_OWORD *)(v106 + 48) = v107;
                    if (!v105)
                      break;
                    v108 = *(_QWORD *)(v106 - 32);
                    v109 = v103 > *(_QWORD *)(v106 - 24);
                    v97 = v102 == v108;
                    v110 = v102 < v108;
                    if (!v97)
                      v109 = v110;
                    v105 -= 32;
                    if (!v109)
                    {
                      v111 = v9 + v105 + 32;
                      goto LABEL_114;
                    }
                  }
                  v111 = v9;
LABEL_114:
                  *(_QWORD *)v111 = v102;
                  *(_QWORD *)(v111 + 8) = v103;
                  *(_OWORD *)(v111 + 16) = v168;
                }
                v96 = v101 + 2;
                v99 += 32;
                v100 = (unint64_t)v101;
              }
              while (v101 + 2 != a2);
            }
          }
          else if ((v98 & 1) == 0)
          {
            do
            {
              v151 = (uint64_t)v96;
              v152 = *(_QWORD *)(a1 + 32);
              v153 = *(_QWORD *)(a1 + 40);
              v154 = v152 < *(_QWORD *)a1;
              if (v152 == *(_QWORD *)a1)
                v154 = v153 > *(_QWORD *)(a1 + 8);
              if (v154)
              {
                v171 = *(_OWORD *)(a1 + 48);
                v155 = v151;
                do
                {
                  v156 = *(_OWORD *)(v155 - 16);
                  *(_OWORD *)v155 = *(_OWORD *)(v155 - 32);
                  *(_OWORD *)(v155 + 16) = v156;
                  v157 = *(_QWORD *)(v155 - 64);
                  v158 = *(_QWORD *)(v155 - 56);
                  v155 -= 32;
                  v159 = v153 > v158;
                  v97 = v152 == v157;
                  v160 = v152 < v157;
                  if (v97)
                    v160 = v159;
                }
                while (v160);
                *(_QWORD *)v155 = v152;
                *(_QWORD *)(v155 + 8) = v153;
                *(_OWORD *)(v155 + 16) = v171;
              }
              v96 = (__int128 *)(v151 + 32);
              a1 = v151;
            }
            while ((__int128 *)(v151 + 32) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__int128 *)v9 != a2)
          {
            v112 = (v11 - 2) >> 1;
            v113 = v112;
            do
            {
              v114 = v113;
              if (v112 >= v113)
              {
                v115 = (2 * v113) | 1;
                v116 = v9 + 32 * v115;
                if (2 * v114 + 2 >= (uint64_t)v11)
                {
                  v118 = *(_QWORD *)v116;
                }
                else
                {
                  v117 = *(_QWORD *)(v116 + 32);
                  v118 = *(_QWORD *)v116;
                  v119 = *(_QWORD *)(v116 + 8) > *(_QWORD *)(v116 + 40);
                  if (*(_QWORD *)v116 != v117)
                    v119 = *(_QWORD *)v116 < v117;
                  if (v119)
                  {
                    v118 = *(_QWORD *)(v116 + 32);
                    v116 += 32;
                    v115 = 2 * v114 + 2;
                  }
                }
                v120 = v9 + 32 * v114;
                v121 = *(_QWORD *)v120;
                v122 = *(_QWORD *)(v120 + 8);
                v97 = v118 == *(_QWORD *)v120;
                v123 = v118 < *(_QWORD *)v120;
                if (v97)
                  v123 = *(_QWORD *)(v116 + 8) > v122;
                if (!v123)
                {
                  v169 = *(_OWORD *)(v120 + 16);
                  do
                  {
                    v124 = (_OWORD *)v120;
                    v120 = v116;
                    v125 = *(_OWORD *)(v116 + 16);
                    *v124 = *(_OWORD *)v116;
                    v124[1] = v125;
                    if (v112 < v115)
                      break;
                    v126 = (2 * v115) | 1;
                    v116 = v9 + 32 * v126;
                    v115 = 2 * v115 + 2;
                    if (v115 >= (uint64_t)v11)
                    {
                      v127 = *(_QWORD *)v116;
                      v115 = v126;
                    }
                    else
                    {
                      v127 = *(_QWORD *)(v116 + 32);
                      v128 = *(_QWORD *)(v116 + 8) > *(_QWORD *)(v116 + 40);
                      if (*(_QWORD *)v116 != v127)
                        v128 = *(_QWORD *)v116 < v127;
                      if (v128)
                        v116 += 32;
                      else
                        v127 = *(_QWORD *)v116;
                      if (!v128)
                        v115 = v126;
                    }
                    v129 = *(_QWORD *)(v116 + 8) > v122;
                    v97 = v127 == v121;
                    v130 = v127 < v121;
                    if (!v97)
                      v129 = v130;
                  }
                  while (!v129);
                  *(_QWORD *)v120 = v121;
                  *(_QWORD *)(v120 + 8) = v122;
                  *(_OWORD *)(v120 + 16) = v169;
                }
              }
              v113 = v114 - 1;
            }
            while (v114);
            v131 = (unint64_t)v10 >> 5;
            do
            {
              v132 = 0;
              v170 = *(_OWORD *)v9;
              v178 = *(_OWORD *)(v9 + 16);
              v133 = (_OWORD *)v9;
              do
              {
                v134 = &v133[2 * v132 + 2];
                v135 = (2 * v132) | 1;
                v136 = 2 * v132 + 2;
                if (v136 < v131)
                {
                  v137 = *((_QWORD *)v134 + 4);
                  v97 = *(_QWORD *)v134 == v137;
                  v138 = *(_QWORD *)v134 < v137;
                  if (v97)
                    v138 = *((_QWORD *)v134 + 1) > *((_QWORD *)v134 + 5);
                  if (v138)
                  {
                    v134 += 2;
                    v135 = v136;
                  }
                }
                v139 = v134[1];
                *v133 = *v134;
                v133[1] = v139;
                v133 = v134;
                v132 = v135;
              }
              while (v135 <= (uint64_t)((unint64_t)(v131 - 2) >> 1));
              a2 -= 2;
              if (v134 == a2)
              {
                *v134 = v170;
                v134[1] = v178;
              }
              else
              {
                v140 = a2[1];
                *v134 = *a2;
                v134[1] = v140;
                *a2 = v170;
                a2[1] = v178;
                v141 = (uint64_t)v134 - v9 + 32;
                if (v141 >= 33)
                {
                  v142 = (((unint64_t)v141 >> 5) - 2) >> 1;
                  v143 = v9 + 32 * v142;
                  v145 = *(_QWORD *)v134;
                  v144 = *((_QWORD *)v134 + 1);
                  v146 = *(_QWORD *)v143 < *(_QWORD *)v134;
                  if (*(_QWORD *)v143 == *(_QWORD *)v134)
                    v146 = *(_QWORD *)(v143 + 8) > v144;
                  if (v146)
                  {
                    v163 = v134[1];
                    do
                    {
                      v147 = v134;
                      v134 = (__int128 *)v143;
                      v148 = *(_OWORD *)(v143 + 16);
                      *v147 = *(_OWORD *)v143;
                      v147[1] = v148;
                      if (!v142)
                        break;
                      v142 = (v142 - 1) >> 1;
                      v143 = v9 + 32 * v142;
                      v149 = *(_QWORD *)v143 < v145;
                      if (*(_QWORD *)v143 == v145)
                        v149 = *(_QWORD *)(v143 + 8) > v144;
                    }
                    while (v149);
                    *(_QWORD *)v134 = v145;
                    *((_QWORD *)v134 + 1) = v144;
                    v134[1] = v163;
                  }
                }
              }
            }
            while (v131-- > 2);
          }
          return;
        }
        v12 = v11 >> 1;
        v13 = v9 + 32 * (v11 >> 1);
        if ((unint64_t)v10 <= 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>((__int128 *)(a1 + 32 * (v11 >> 1)), (unint64_t *)a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>((__int128 *)a1, (unint64_t *)(a1 + 32 * (v11 >> 1)), a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>((__int128 *)(a1 + 32), (unint64_t *)(v13 - 32), a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>((__int128 *)(a1 + 64), (unint64_t *)(a1 + 32 + 32 * v12), a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>((__int128 *)(v13 - 32), (unint64_t *)v13, (__int128 *)(a1 + 32 + 32 * v12));
          v164 = *(_OWORD *)a1;
          v172 = *(_OWORD *)(a1 + 16);
          v14 = *(_OWORD *)(v13 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_OWORD *)(a1 + 16) = v14;
          *(_OWORD *)v13 = v164;
          *(_OWORD *)(v13 + 16) = v172;
        }
        --a3;
        v15 = *(_QWORD *)a1;
        if ((a4 & 1) == 0)
        {
          v17 = *(_QWORD *)(a1 - 32);
          v16 = *(_QWORD *)(a1 + 8);
          v97 = v17 == v15;
          v18 = v17 < v15;
          if (v97)
            v18 = *(_QWORD *)(a1 - 24) > v16;
          if (v18)
            goto LABEL_13;
          v162 = *(_OWORD *)(a1 + 16);
          v45 = *((_QWORD *)a2 - 4);
          v97 = v15 == v45;
          v46 = v15 < v45;
          if (v97)
            v46 = v16 > *((_QWORD *)a2 - 3);
          if (v46)
          {
            v9 = a1;
            do
            {
              v47 = *(_QWORD *)(v9 + 32);
              v48 = *(_QWORD *)(v9 + 40);
              v9 += 32;
              v49 = v16 > v48;
              v97 = v15 == v47;
              v50 = v15 < v47;
              if (v97)
                v50 = v49;
            }
            while (!v50);
          }
          else
          {
            v51 = (unint64_t *)(a1 + 32);
            do
            {
              v9 = (unint64_t)v51;
              if (v51 >= (unint64_t *)a2)
                break;
              v52 = *v51;
              v53 = v16 > *(_QWORD *)(v9 + 8);
              v97 = v15 == v52;
              v54 = v15 < v52;
              if (!v97)
                v53 = v54;
              v51 = (unint64_t *)(v9 + 32);
            }
            while (!v53);
          }
          v55 = a2;
          if (v9 < (unint64_t)a2)
          {
            v55 = a2;
            do
            {
              v56 = *((_QWORD *)v55 - 4);
              v57 = *((_QWORD *)v55 - 3);
              v55 -= 2;
              v58 = v16 > v57;
              v97 = v15 == v56;
              v59 = v15 < v56;
              if (v97)
                v59 = v58;
            }
            while (v59);
          }
          while (v9 < (unint64_t)v55)
          {
            v165 = *(_OWORD *)v9;
            v174 = *(_OWORD *)(v9 + 16);
            v60 = v55[1];
            *(_OWORD *)v9 = *v55;
            *(_OWORD *)(v9 + 16) = v60;
            *v55 = v165;
            v55[1] = v174;
            do
            {
              v61 = *(_QWORD *)(v9 + 32);
              v62 = *(_QWORD *)(v9 + 40);
              v9 += 32;
              v63 = v16 > v62;
              v97 = v15 == v61;
              v64 = v15 < v61;
              if (v97)
                v64 = v63;
            }
            while (!v64);
            do
            {
              v65 = *((_QWORD *)v55 - 4);
              v66 = *((_QWORD *)v55 - 3);
              v55 -= 2;
              v67 = v16 > v66;
              v97 = v15 == v65;
              v68 = v15 < v65;
              if (v97)
                v68 = v67;
            }
            while (v68);
          }
          if (v9 - 32 != a1)
          {
            v69 = *(_OWORD *)(v9 - 16);
            *(_OWORD *)a1 = *(_OWORD *)(v9 - 32);
            *(_OWORD *)(a1 + 16) = v69;
          }
          a4 = 0;
          *(_QWORD *)(v9 - 32) = v15;
          *(_QWORD *)(v9 - 24) = v16;
          *(_OWORD *)(v9 - 16) = v162;
          continue;
        }
        v16 = *(_QWORD *)(a1 + 8);
LABEL_13:
        v161 = *(_OWORD *)(a1 + 16);
        v19 = a1;
        do
        {
          v20 = v19;
          v21 = *(_QWORD *)(v19 + 32);
          v19 += 32;
          v22 = v21 < v15;
          if (v21 == v15)
            v22 = *(_QWORD *)(v20 + 40) > v16;
        }
        while (v22);
        v23 = a2;
        if (v20 == a1)
        {
          v23 = a2;
          do
          {
            if (v19 >= (unint64_t)v23)
              break;
            v28 = *((_QWORD *)v23 - 4);
            v29 = *((_QWORD *)v23 - 3);
            v23 -= 2;
            v30 = v29 > v16;
            v97 = v28 == v15;
            v31 = v28 < v15;
            if (v97)
              v31 = v30;
          }
          while (!v31);
        }
        else
        {
          do
          {
            v24 = *((_QWORD *)v23 - 4);
            v25 = *((_QWORD *)v23 - 3);
            v23 -= 2;
            v26 = v25 > v16;
            v97 = v24 == v15;
            v27 = v24 < v15;
            if (v97)
              v27 = v26;
          }
          while (!v27);
        }
        v9 = v19;
        if (v19 < (unint64_t)v23)
        {
          v32 = v23;
          do
          {
            v33 = *(_OWORD *)v9;
            v173 = *(_OWORD *)(v9 + 16);
            v34 = v32[1];
            *(_OWORD *)v9 = *v32;
            *(_OWORD *)(v9 + 16) = v34;
            *v32 = v33;
            v32[1] = v173;
            do
            {
              v35 = *(_QWORD *)(v9 + 32);
              v36 = *(_QWORD *)(v9 + 40);
              v9 += 32;
              v37 = v36 > v16;
              v97 = v35 == v15;
              v38 = v35 < v15;
              if (v97)
                v38 = v37;
            }
            while (v38);
            do
            {
              v39 = *((_QWORD *)v32 - 4);
              v40 = *((_QWORD *)v32 - 3);
              v32 -= 2;
              v41 = v40 > v16;
              v97 = v39 == v15;
              v42 = v39 < v15;
              if (v97)
                v42 = v41;
            }
            while (!v42);
          }
          while (v9 < (unint64_t)v32);
        }
        if (v9 - 32 != a1)
        {
          v43 = *(_OWORD *)(v9 - 16);
          *(_OWORD *)a1 = *(_OWORD *)(v9 - 32);
          *(_OWORD *)(a1 + 16) = v43;
        }
        *(_QWORD *)(v9 - 32) = v15;
        *(_QWORD *)(v9 - 24) = v16;
        *(_OWORD *)(v9 - 16) = v161;
        if (v19 < (unint64_t)v23)
        {
LABEL_42:
          std::__introsort<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*,false>(a1, v9 - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v44 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>(a1, v9 - 32);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptionsUsingOnlyLongestTokenChain(std::basic_string<char16_t> const&,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices> const&,std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>> &)::$_0 &,nl_featurization::span_matching::span_processor::SpanProcessor::Indices*>(v9, (uint64_t)a2))
        {
          if (v44)
            continue;
          goto LABEL_42;
        }
        a2 = (__int128 *)(v9 - 32);
        if (!v44)
          goto LABEL_1;
        return;
    }
  }
}

  v221 = a2 - 8;
  v223 = a2;
  v215 = a2 - 24;
  v217 = a2 - 16;
  v6 = (unint64_t)a1;
  while (2)
  {
    v7 = v6;
    v8 = (uint64_t)a2 - v6;
    v9 = (uint64_t)((uint64_t)a2 - v6) >> 7;
    a1 = (__int128 *)v7;
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(double *)v221 > *(double *)v7)
        {
          v68 = (__int128 *)v7;
          v69 = v221;
          goto LABEL_96;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>((__int128 *)v7, (__int128 *)(v7 + 128), v221);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>((__int128 *)v7, (__int128 *)(v7 + 128), (__int128 *)(v7 + 256), v221);
        return;
      case 5:
        v70 = (__int128 *)(v7 + 128);
        v71 = a1 + 16;
        v72 = a1 + 24;
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>(a1, a1 + 8, a1 + 16, a1 + 24);
        if (*(double *)v221 > *((double *)a1 + 48))
        {
          std::swap[abi:ne180100]<nl_featurization::beam_search::BeamSequence>(v72, v221);
          if (*(double *)v72 > *(double *)v71)
          {
            std::swap[abi:ne180100]<nl_featurization::beam_search::BeamSequence>(v71, v72);
            if (*(double *)v71 > *(double *)v70)
            {
              std::swap[abi:ne180100]<nl_featurization::beam_search::BeamSequence>(v70, v71);
              if (*((double *)a1 + 16) > *(double *)a1)
              {
                v68 = a1;
                v69 = v70;
LABEL_96:
                std::swap[abi:ne180100]<nl_featurization::beam_search::BeamSequence>(v68, v69);
              }
            }
          }
        }
        return;
      default:
        if (v8 <= 3071)
        {
          if ((a4 & 1) != 0)
          {
            if ((__int128 *)v7 != a2)
            {
              v73 = (__int128 *)(v7 + 128);
              if ((__int128 *)(v7 + 128) != a2)
              {
                v74 = 0;
                v75 = (__int128 *)v7;
                do
                {
                  v76 = v73;
                  if (*((double *)v75 + 16) > *(double *)v75)
                  {
                    v77 = v73[1];
                    v78 = (_QWORD *)v75 + 21;
                    v79 = (_QWORD *)*((_QWORD *)v75 + 21);
                    v238 = *v76;
                    v239 = v77;
                    v240 = (_QWORD **)*((_QWORD *)v75 + 20);
                    v241 = v79;
                    v242 = *((_QWORD *)v75 + 22);
                    if (v242)
                    {
                      v79[2] = &v241;
                      *((_QWORD *)v75 + 20) = v78;
                      *v78 = 0;
                      *((_QWORD *)v75 + 22) = 0;
                    }
                    else
                    {
                      v240 = &v241;
                    }
                    v80 = (uint64_t)a1;
                    v243 = *(__int128 *)((char *)v75 + 184);
                    v244 = *((_QWORD *)v75 + 25);
                    *((_QWORD *)v75 + 23) = 0;
                    *((_QWORD *)v75 + 24) = 0;
                    v245 = v75[13];
                    v81 = *((_QWORD *)v75 + 28);
                    *((_QWORD *)v75 + 25) = 0;
                    *((_QWORD *)v75 + 26) = 0;
                    *((_QWORD *)v75 + 27) = 0;
                    *((_QWORD *)v75 + 28) = 0;
                    v247 = *(__int128 *)((char *)v75 + 232);
                    v82 = *((_QWORD *)v75 + 31);
                    v246 = v81;
                    v248 = v82;
                    *((_QWORD *)v75 + 30) = 0;
                    *((_QWORD *)v75 + 31) = 0;
                    v83 = v74;
                    *((_QWORD *)v75 + 29) = 0;
                    while (1)
                    {
                      v84 = (char *)a1 + v83;
                      v85 = *(__int128 *)((char *)a1 + v83 + 16);
                      *((_OWORD *)v84 + 8) = *(__int128 *)((char *)a1 + v83);
                      *((_OWORD *)v84 + 9) = v85;
                      std::__tree<unsigned long>::__move_assign((__int128 *)((char *)a1 + v83 + 160), (__int128 *)((char *)a1 + v83 + 32));
                      v86 = *(void **)((char *)a1 + v83 + 184);
                      if (v86)
                      {
                        *((_QWORD *)v84 + 24) = v86;
                        operator delete(v86);
                        *((_QWORD *)v84 + 25) = 0;
                      }
                      *(_OWORD *)(v84 + 184) = *(_OWORD *)(v84 + 56);
                      *((_QWORD *)v84 + 25) = *((_QWORD *)v84 + 9);
                      *((_QWORD *)v84 + 7) = 0;
                      *((_QWORD *)v84 + 8) = 0;
                      *((_QWORD *)v84 + 9) = 0;
                      v87 = (void *)*((_QWORD *)v84 + 26);
                      if (v87)
                      {
                        *(_QWORD *)((char *)a1 + v83 + 216) = v87;
                        operator delete(v87);
                        *(_QWORD *)((char *)a1 + v83 + 224) = 0;
                      }
                      v88 = v84 + 80;
                      *((_OWORD *)v84 + 13) = *((_OWORD *)v84 + 5);
                      v89 = (char *)a1 + v83;
                      *(_QWORD *)((char *)a1 + v83 + 224) = *(_QWORD *)((char *)a1 + v83 + 96);
                      *v88 = 0;
                      v88[1] = 0;
                      v88[2] = 0;
                      v90 = *(void **)((char *)a1 + v83 + 232);
                      if (v90)
                      {
                        *((_QWORD *)v89 + 30) = v90;
                        operator delete(v90);
                        *((_QWORD *)v89 + 31) = 0;
                      }
                      *(_OWORD *)(v89 + 232) = *(_OWORD *)(v89 + 104);
                      *((_QWORD *)v89 + 31) = *((_QWORD *)v89 + 15);
                      *((_QWORD *)v89 + 13) = 0;
                      *((_QWORD *)v89 + 14) = 0;
                      *((_QWORD *)v89 + 15) = 0;
                      if (!v83)
                        break;
                      v91 = (char *)a1 + v83;
                      v92 = *(double *)((char *)a1 + v83 - 128);
                      v83 -= 128;
                      if (*(double *)&v238 <= v92)
                      {
                        v93 = (uint64_t *)(v91 + 32);
                        v94 = v91 + 56;
                        v95 = v91 + 80;
                        v96 = v91 + 104;
                        v80 = (uint64_t)a1 + v83 + 128;
                        goto LABEL_123;
                      }
                    }
                    v93 = (uint64_t *)(a1 + 2);
                    v94 = (char *)a1 + 56;
                    v95 = a1 + 5;
                    v96 = (char *)a1 + 104;
LABEL_123:
                    v97 = v239;
                    *(_OWORD *)v80 = v238;
                    *(_OWORD *)(v80 + 16) = v97;
                    v98 = v80 + 40;
                    std::__tree<unsigned long>::destroy(*(_QWORD **)(v80 + 40));
                    *v93 = (uint64_t)v240;
                    v99 = v241;
                    *(_QWORD *)(v80 + 40) = v241;
                    v100 = v242;
                    *(_QWORD *)(v80 + 48) = v242;
                    if (v100)
                    {
                      v99[2] = v98;
                      v240 = &v241;
                      v241 = 0;
                      v242 = 0;
                    }
                    else
                    {
                      *v93 = v98;
                    }
                    v101 = *(void **)v94;
                    a2 = v223;
                    if (*(_QWORD *)v94)
                    {
                      *(_QWORD *)(v80 + 64) = v101;
                      operator delete(v101);
                      *(_QWORD *)v94 = 0;
                      *((_QWORD *)v94 + 1) = 0;
                      *((_QWORD *)v94 + 2) = 0;
                    }
                    *(_QWORD *)v94 = v243;
                    *(_QWORD *)(v80 + 64) = *((_QWORD *)&v243 + 1);
                    *(_QWORD *)(v80 + 72) = v244;
                    v243 = 0uLL;
                    v244 = 0;
                    v102 = *(void **)v95;
                    if (*(_QWORD *)v95)
                    {
                      *(_QWORD *)(v80 + 88) = v102;
                      operator delete(v102);
                      *(_QWORD *)v95 = 0;
                      *((_QWORD *)v95 + 1) = 0;
                      *((_QWORD *)v95 + 2) = 0;
                    }
                    *(_QWORD *)v95 = v245;
                    *(_QWORD *)(v80 + 88) = *((_QWORD *)&v245 + 1);
                    *(_QWORD *)(v80 + 96) = v246;
                    v245 = 0uLL;
                    v246 = 0;
                    v103 = *(void **)v96;
                    if (*(_QWORD *)v96)
                    {
                      *(_QWORD *)(v80 + 112) = v103;
                      operator delete(v103);
                      *(_QWORD *)v96 = 0;
                      *((_QWORD *)v96 + 1) = 0;
                      *((_QWORD *)v96 + 2) = 0;
                      v103 = (void *)v245;
                    }
                    *(_QWORD *)v96 = v247;
                    *(_QWORD *)(v80 + 112) = *((_QWORD *)&v247 + 1);
                    *(_QWORD *)(v80 + 120) = v248;
                    v247 = 0uLL;
                    v248 = 0;
                    if (v103)
                    {
                      *((_QWORD *)&v245 + 1) = v103;
                      operator delete(v103);
                    }
                    if ((_QWORD)v243)
                    {
                      *((_QWORD *)&v243 + 1) = v243;
                      operator delete((void *)v243);
                    }
                    std::__tree<unsigned long>::destroy(v241);
                  }
                  v73 = v76 + 8;
                  v74 += 128;
                  v75 = v76;
                }
                while (v76 + 8 != a2);
              }
            }
          }
          else if ((__int128 *)v7 != a2)
          {
            v190 = (__int128 *)(v7 + 128);
            if ((__int128 *)(v7 + 128) != a2)
            {
              v191 = v7 + 72;
              do
              {
                v192 = v190;
                if (*((double *)a1 + 16) > *(double *)a1)
                {
                  v193 = v190[1];
                  v194 = (_QWORD *)a1 + 21;
                  v195 = (_QWORD *)*((_QWORD *)a1 + 21);
                  v238 = *v192;
                  v239 = v193;
                  v240 = (_QWORD **)*((_QWORD *)a1 + 20);
                  v241 = v195;
                  v242 = *((_QWORD *)a1 + 22);
                  if (v242)
                  {
                    v195[2] = &v241;
                    *((_QWORD *)a1 + 20) = v194;
                    *v194 = 0;
                    *((_QWORD *)a1 + 22) = 0;
                  }
                  else
                  {
                    v240 = &v241;
                  }
                  v243 = *(__int128 *)((char *)a1 + 184);
                  v244 = *((_QWORD *)a1 + 25);
                  *((_QWORD *)a1 + 23) = 0;
                  *((_QWORD *)a1 + 24) = 0;
                  v245 = a1[13];
                  v196 = *((_QWORD *)a1 + 28);
                  *((_QWORD *)a1 + 25) = 0;
                  *((_QWORD *)a1 + 26) = 0;
                  *((_QWORD *)a1 + 27) = 0;
                  *((_QWORD *)a1 + 28) = 0;
                  v247 = *(__int128 *)((char *)a1 + 232);
                  v197 = *((_QWORD *)a1 + 31);
                  v246 = v196;
                  v248 = v197;
                  *((_QWORD *)a1 + 30) = 0;
                  *((_QWORD *)a1 + 31) = 0;
                  v198 = v191;
                  *((_QWORD *)a1 + 29) = 0;
                  do
                  {
                    *(_OWORD *)(v198 + 56) = *(_OWORD *)(v198 - 72);
                    *(_OWORD *)(v198 + 72) = *(_OWORD *)(v198 - 56);
                    std::__tree<unsigned long>::__move_assign((_QWORD *)(v198 + 88), (_QWORD *)(v198 - 40));
                    v199 = *(void **)(v198 + 112);
                    if (v199)
                    {
                      *(_QWORD *)(v198 + 120) = v199;
                      operator delete(v199);
                      *(_QWORD *)(v198 + 128) = 0;
                    }
                    v200 = (_QWORD *)(v198 - 16);
                    *(_OWORD *)(v198 + 112) = *(_OWORD *)(v198 - 16);
                    *(_QWORD *)(v198 + 128) = *(_QWORD *)v198;
                    v200[1] = 0;
                    *(_QWORD *)v198 = 0;
                    *v200 = 0;
                    v201 = *(void **)(v198 + 136);
                    if (v201)
                    {
                      *(_QWORD *)(v198 + 144) = v201;
                      operator delete(v201);
                      *(_QWORD *)(v198 + 152) = 0;
                    }
                    *(_OWORD *)(v198 + 136) = *(_OWORD *)(v198 + 8);
                    *(_QWORD *)(v198 + 152) = *(_QWORD *)(v198 + 24);
                    *(_QWORD *)(v198 + 16) = 0;
                    *(_QWORD *)(v198 + 24) = 0;
                    *(_QWORD *)(v198 + 8) = 0;
                    v202 = *(void **)(v198 + 160);
                    if (v202)
                    {
                      *(_QWORD *)(v198 + 168) = v202;
                      operator delete(v202);
                      *(_QWORD *)(v198 + 176) = 0;
                    }
                    v203 = v198 + 32;
                    *(_OWORD *)(v198 + 160) = *(_OWORD *)(v198 + 32);
                    *(_QWORD *)(v198 + 176) = *(_QWORD *)(v198 + 48);
                    *(_QWORD *)(v198 + 32) = 0;
                    *(_QWORD *)(v198 + 40) = 0;
                    *(_QWORD *)(v198 + 48) = 0;
                    v204 = *(double *)(v198 - 200);
                    v198 -= 128;
                  }
                  while (*(double *)&v238 > v204);
                  v205 = (__int128 *)(v203 - 104);
                  v206 = v239;
                  *v205 = v238;
                  v205[1] = v206;
                  v207 = v203 - 64;
                  std::__tree<unsigned long>::destroy(*(_QWORD **)(v198 + 96));
                  *(_QWORD *)(v198 + 88) = v240;
                  v208 = v241;
                  *(_QWORD *)(v198 + 96) = v241;
                  v209 = v242;
                  *(_QWORD *)(v198 + 104) = v242;
                  if (v209)
                  {
                    v208[2] = v207;
                    v240 = &v241;
                    v241 = 0;
                    v242 = 0;
                  }
                  else
                  {
                    *(_QWORD *)(v198 + 88) = v207;
                  }
                  v210 = (_QWORD *)(v203 - 48);
                  v211 = *(void **)(v203 - 48);
                  if (v211)
                  {
                    *(_QWORD *)(v203 - 40) = v211;
                    operator delete(v211);
                    *v210 = 0;
                    *(_QWORD *)(v203 - 40) = 0;
                    *(_QWORD *)(v203 - 32) = 0;
                  }
                  v212 = (_QWORD *)(v203 - 24);
                  *(_OWORD *)v210 = v243;
                  *(_QWORD *)(v203 - 32) = v244;
                  v243 = 0uLL;
                  v244 = 0;
                  v213 = *(void **)(v203 - 24);
                  if (v213)
                  {
                    *(_QWORD *)(v203 - 16) = v213;
                    operator delete(v213);
                    *v212 = 0;
                    *(_QWORD *)(v203 - 16) = 0;
                    *(_QWORD *)(v203 - 8) = 0;
                  }
                  *(_OWORD *)v212 = v245;
                  *(_QWORD *)(v203 - 8) = v246;
                  v245 = 0uLL;
                  v246 = 0;
                  v214 = *(void **)v203;
                  if (*(_QWORD *)v203)
                  {
                    *(_QWORD *)(v203 + 8) = v214;
                    operator delete(v214);
                    *(_QWORD *)v203 = 0;
                    *(_QWORD *)(v203 + 8) = 0;
                    *(_QWORD *)(v203 + 16) = 0;
                    v214 = (void *)v245;
                  }
                  *(_OWORD *)v203 = v247;
                  *(_QWORD *)(v203 + 16) = v248;
                  v247 = 0uLL;
                  v248 = 0;
                  if (v214)
                  {
                    *((_QWORD *)&v245 + 1) = v214;
                    operator delete(v214);
                  }
                  a2 = v223;
                  if ((_QWORD)v243)
                  {
                    *((_QWORD *)&v243 + 1) = v243;
                    operator delete((void *)v243);
                  }
                  std::__tree<unsigned long>::destroy(v241);
                }
                v190 = v192 + 8;
                v191 += 128;
                a1 = v192;
              }
              while (v192 + 8 != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if ((__int128 *)v7 != a2)
          {
            v224 = (unint64_t)(v9 - 2) >> 1;
            v104 = v224;
            v105 = (_QWORD *)v7;
            do
            {
              v106 = v104;
              if (v224 >= v104)
              {
                v107 = (2 * v104) | 1;
                v108 = (__int128 *)&v105[16 * v107];
                if (2 * v106 + 2 < v9 && *(double *)v108 > *((double *)v108 + 16))
                {
                  v108 += 8;
                  v107 = 2 * v106 + 2;
                }
                v109 = (__int128 *)&v105[16 * v106];
                if (*(double *)v108 <= *(double *)v109)
                {
                  v110 = v109[1];
                  v238 = *v109;
                  v239 = v110;
                  v111 = &v105[16 * v106];
                  v112 = v111 + 4;
                  v240 = (_QWORD **)v111[4];
                  v115 = (_QWORD *)v111[5];
                  v113 = v111 + 5;
                  v114 = v115;
                  v241 = v115;
                  v242 = v113[1];
                  if (v242)
                  {
                    v114[2] = &v241;
                    *v112 = v113;
                    *v113 = 0;
                    v113[1] = 0;
                  }
                  else
                  {
                    v240 = &v241;
                  }
                  v116 = &v105[16 * v106];
                  v243 = *(_OWORD *)(v116 + 7);
                  v244 = v116[9];
                  v116[7] = 0;
                  v116[8] = 0;
                  v116[9] = 0;
                  v245 = *((_OWORD *)v116 + 5);
                  v246 = v116[12];
                  v116[10] = 0;
                  v116[11] = 0;
                  v116[12] = 0;
                  v247 = *(_OWORD *)(v116 + 13);
                  v248 = v116[15];
                  v116[13] = 0;
                  v116[14] = 0;
                  v116[15] = 0;
                  do
                  {
                    v117 = v108;
                    v118 = v108[1];
                    *v109 = *v108;
                    v109[1] = v118;
                    v119 = v108 + 2;
                    std::__tree<unsigned long>::__move_assign((_QWORD *)v109 + 4, (_QWORD *)v108 + 4);
                    v120 = (void *)*((_QWORD *)v109 + 7);
                    if (v120)
                    {
                      *((_QWORD *)v109 + 8) = v120;
                      operator delete(v120);
                      *((_QWORD *)v109 + 7) = 0;
                      *((_QWORD *)v109 + 8) = 0;
                      *((_QWORD *)v109 + 9) = 0;
                    }
                    v121 = (void **)v117 + 7;
                    *(__int128 *)((char *)v109 + 56) = *(__int128 *)((char *)v117 + 56);
                    *((_QWORD *)v109 + 9) = *((_QWORD *)v117 + 9);
                    *((_QWORD *)v117 + 7) = 0;
                    *((_QWORD *)v117 + 8) = 0;
                    *((_QWORD *)v117 + 9) = 0;
                    v122 = (void *)*((_QWORD *)v109 + 10);
                    if (v122)
                    {
                      *((_QWORD *)v109 + 11) = v122;
                      operator delete(v122);
                      *((_QWORD *)v109 + 10) = 0;
                      *((_QWORD *)v109 + 11) = 0;
                      *((_QWORD *)v109 + 12) = 0;
                    }
                    v109[5] = v117[5];
                    *((_QWORD *)v109 + 12) = *((_QWORD *)v117 + 12);
                    *((_QWORD *)v117 + 10) = 0;
                    *((_QWORD *)v117 + 11) = 0;
                    *((_QWORD *)v117 + 12) = 0;
                    v123 = (void *)*((_QWORD *)v109 + 13);
                    if (v123)
                    {
                      *((_QWORD *)v109 + 14) = v123;
                      operator delete(v123);
                      *((_QWORD *)v109 + 13) = 0;
                      *((_QWORD *)v109 + 14) = 0;
                      *((_QWORD *)v109 + 15) = 0;
                    }
                    *(__int128 *)((char *)v109 + 104) = *(__int128 *)((char *)v117 + 104);
                    *((_QWORD *)v109 + 15) = *((_QWORD *)v117 + 15);
                    *((_QWORD *)v117 + 13) = 0;
                    *((_QWORD *)v117 + 14) = 0;
                    *((_QWORD *)v117 + 15) = 0;
                    if (v224 < v107)
                      break;
                    v124 = 2 * v107;
                    v107 = (2 * v107) | 1;
                    v108 = &a1[8 * v107];
                    v125 = v124 + 2;
                    if (v125 < v9 && *(double *)v108 > *((double *)v108 + 16))
                    {
                      v108 += 8;
                      v107 = v125;
                    }
                    v109 = v117;
                  }
                  while (*(double *)v108 <= *(double *)&v238);
                  v126 = v239;
                  *v117 = v238;
                  v117[1] = v126;
                  v127 = (uint64_t)v117 + 40;
                  std::__tree<unsigned long>::destroy(*((_QWORD **)v117 + 5));
                  *((_QWORD *)v117 + 4) = v240;
                  v128 = v241;
                  *((_QWORD *)v117 + 5) = v241;
                  v129 = v242;
                  *((_QWORD *)v117 + 6) = v242;
                  if (v129)
                  {
                    v128[2] = v127;
                    v240 = &v241;
                    v241 = 0;
                    v242 = 0;
                  }
                  else
                  {
                    *v119 = v127;
                  }
                  v130 = *v121;
                  if (*v121)
                  {
                    *((_QWORD *)v117 + 8) = v130;
                    operator delete(v130);
                    *v121 = 0;
                    *((_QWORD *)v117 + 8) = 0;
                    *((_QWORD *)v117 + 9) = 0;
                  }
                  *(__int128 *)((char *)v117 + 56) = v243;
                  *((_QWORD *)v117 + 9) = v244;
                  v243 = 0uLL;
                  v244 = 0;
                  v131 = (void *)*((_QWORD *)v117 + 10);
                  if (v131)
                  {
                    *((_QWORD *)v117 + 11) = v131;
                    operator delete(v131);
                    *((_QWORD *)v117 + 10) = 0;
                    *((_QWORD *)v117 + 11) = 0;
                    *((_QWORD *)v117 + 12) = 0;
                  }
                  v117[5] = v245;
                  *((_QWORD *)v117 + 12) = v246;
                  v245 = 0uLL;
                  v246 = 0;
                  v132 = (void *)*((_QWORD *)v117 + 13);
                  a2 = v223;
                  if (v132)
                  {
                    *((_QWORD *)v117 + 14) = v132;
                    operator delete(v132);
                    *((_QWORD *)v117 + 13) = 0;
                    *((_QWORD *)v117 + 14) = 0;
                    *((_QWORD *)v117 + 15) = 0;
                    v132 = (void *)v245;
                  }
                  v105 = a1;
                  *(__int128 *)((char *)v117 + 104) = v247;
                  *((_QWORD *)v117 + 15) = v248;
                  v247 = 0uLL;
                  v248 = 0;
                  if (v132)
                  {
                    *((_QWORD *)&v245 + 1) = v132;
                    operator delete(v132);
                  }
                  if ((_QWORD)v243)
                  {
                    *((_QWORD *)&v243 + 1) = v243;
                    operator delete((void *)v243);
                  }
                  std::__tree<unsigned long>::destroy(v241);
                }
              }
              v104 = v106 - 1;
            }
            while (v106);
            v133 = (unint64_t)v8 >> 7;
            v222 = v105 + 7;
            v216 = v105 + 5;
            v218 = v105 + 13;
            v220 = v105 + 10;
            do
            {
              v134 = a2;
              v135 = (uint64_t)a1;
              v227 = *a1;
              v228 = a1[1];
              v136 = (_QWORD *)*((_QWORD *)a1 + 5);
              v229 = (_QWORD **)*((_QWORD *)a1 + 4);
              v230 = v136;
              v231 = *((_QWORD *)a1 + 6);
              if (v231)
              {
                v136[2] = &v230;
                *((_QWORD *)a1 + 4) = v216;
                *v216 = 0;
                v216[1] = 0;
              }
              else
              {
                v229 = &v230;
              }
              v137 = 0;
              *(_OWORD *)v232 = *(__int128 *)((char *)a1 + 56);
              v233 = *((_QWORD *)a1 + 9);
              *v222 = 0;
              v222[1] = 0;
              v222[2] = 0;
              *(_OWORD *)v234 = a1[5];
              v235 = *((_QWORD *)a1 + 12);
              *v220 = 0;
              v220[1] = 0;
              v220[2] = 0;
              *(_OWORD *)__p = *(__int128 *)((char *)a1 + 104);
              v237 = *((_QWORD *)a1 + 15);
              *v218 = 0;
              v218[1] = 0;
              v218[2] = 0;
              do
              {
                v138 = v135 + (v137 << 7) + 128;
                v139 = 2 * v137;
                v137 = (2 * v137) | 1;
                v140 = v139 + 2;
                if (v140 < v133 && *(double *)v138 > *(double *)(v138 + 128))
                {
                  v138 += 128;
                  v137 = v140;
                }
                v141 = *(_OWORD *)(v138 + 16);
                *(_OWORD *)v135 = *(_OWORD *)v138;
                *(_OWORD *)(v135 + 16) = v141;
                v142 = (uint64_t *)(v138 + 32);
                std::__tree<unsigned long>::__move_assign((_QWORD *)(v135 + 32), (_QWORD *)(v138 + 32));
                v143 = *(void **)(v135 + 56);
                if (v143)
                {
                  *(_QWORD *)(v135 + 64) = v143;
                  operator delete(v143);
                  *(_QWORD *)(v135 + 56) = 0;
                  *(_QWORD *)(v135 + 64) = 0;
                  *(_QWORD *)(v135 + 72) = 0;
                }
                v144 = (void **)(v138 + 56);
                *(_OWORD *)(v135 + 56) = *(_OWORD *)(v138 + 56);
                *(_QWORD *)(v135 + 72) = *(_QWORD *)(v138 + 72);
                *(_QWORD *)(v138 + 56) = 0;
                *(_QWORD *)(v138 + 64) = 0;
                *(_QWORD *)(v138 + 72) = 0;
                v145 = *(void **)(v135 + 80);
                if (v145)
                {
                  *(_QWORD *)(v135 + 88) = v145;
                  operator delete(v145);
                  *(_QWORD *)(v135 + 80) = 0;
                  *(_QWORD *)(v135 + 88) = 0;
                  *(_QWORD *)(v135 + 96) = 0;
                }
                v146 = (_QWORD *)(v138 + 80);
                *(_OWORD *)(v135 + 80) = *(_OWORD *)(v138 + 80);
                *(_QWORD *)(v135 + 96) = *(_QWORD *)(v138 + 96);
                *(_QWORD *)(v138 + 80) = 0;
                *(_QWORD *)(v138 + 88) = 0;
                *(_QWORD *)(v138 + 96) = 0;
                v147 = *(void **)(v135 + 104);
                if (v147)
                {
                  *(_QWORD *)(v135 + 112) = v147;
                  operator delete(v147);
                  *(_QWORD *)(v135 + 104) = 0;
                  *(_QWORD *)(v135 + 112) = 0;
                  *(_QWORD *)(v135 + 120) = 0;
                }
                v148 = (_QWORD *)(v138 + 104);
                *(_OWORD *)(v135 + 104) = *(_OWORD *)(v138 + 104);
                *(_QWORD *)(v135 + 120) = *(_QWORD *)(v138 + 120);
                *(_QWORD *)(v138 + 104) = 0;
                *(_QWORD *)(v138 + 112) = 0;
                *(_QWORD *)(v138 + 120) = 0;
                v135 = v138;
              }
              while (v137 <= (uint64_t)((unint64_t)(v133 - 2) >> 1));
              v149 = v134 - 8;
              if ((__int128 *)v138 == v134 - 8)
              {
                *(_OWORD *)v138 = v227;
                *(_OWORD *)(v138 + 16) = v228;
                v160 = v138 + 40;
                std::__tree<unsigned long>::destroy(*(_QWORD **)(v138 + 40));
                *(_QWORD *)(v138 + 32) = v229;
                v161 = v230;
                *(_QWORD *)(v138 + 40) = v230;
                v162 = v231;
                *(_QWORD *)(v138 + 48) = v231;
                if (v162)
                {
                  v161[2] = v160;
                  v230 = 0;
                  v231 = 0;
                }
                else
                {
                  *v142 = v160;
                }
                v172 = *v144;
                if (*v144)
                {
                  *(_QWORD *)(v138 + 64) = v172;
                  operator delete(v172);
                  *v144 = 0;
                  *(_QWORD *)(v138 + 64) = 0;
                  *(_QWORD *)(v138 + 72) = 0;
                }
                *(_OWORD *)(v138 + 56) = *(_OWORD *)v232;
                *(_QWORD *)(v138 + 72) = v233;
                v232[0] = 0;
                v232[1] = 0;
                v233 = 0;
                v173 = *(void **)(v138 + 80);
                if (v173)
                {
                  *(_QWORD *)(v138 + 88) = v173;
                  operator delete(v173);
                  *v146 = 0;
                  *(_QWORD *)(v138 + 88) = 0;
                  *(_QWORD *)(v138 + 96) = 0;
                }
                *(_OWORD *)(v138 + 80) = *(_OWORD *)v234;
                *(_QWORD *)(v138 + 96) = v235;
                v234[0] = 0;
                v234[1] = 0;
                v235 = 0;
                v174 = *(void **)(v138 + 104);
                if (v174)
                {
                  *(_QWORD *)(v138 + 112) = v174;
                  operator delete(v174);
                  *v148 = 0;
                  *(_QWORD *)(v138 + 112) = 0;
                  *(_QWORD *)(v138 + 120) = 0;
                }
                *(_OWORD *)(v138 + 104) = *(_OWORD *)__p;
                *(_QWORD *)(v138 + 120) = v237;
                __p[0] = 0;
                __p[1] = 0;
                v237 = 0;
              }
              else
              {
                v150 = *(v134 - 7);
                v225 = v134 - 8;
                *(_OWORD *)v138 = *v149;
                *(_OWORD *)(v138 + 16) = v150;
                std::__tree<unsigned long>::__move_assign((_QWORD *)(v138 + 32), (_QWORD *)v134 - 12);
                v151 = *(void **)(v138 + 56);
                if (v151)
                {
                  *(_QWORD *)(v138 + 64) = v151;
                  operator delete(v151);
                  *v144 = 0;
                  *(_QWORD *)(v138 + 64) = 0;
                  *(_QWORD *)(v138 + 72) = 0;
                }
                v152 = (void **)v134 - 9;
                *(_OWORD *)(v138 + 56) = *(__int128 *)((char *)v134 - 72);
                *(_QWORD *)(v138 + 72) = *((_QWORD *)v134 - 7);
                *v152 = 0;
                v152[1] = 0;
                v152[2] = 0;
                v153 = *(void **)(v138 + 80);
                if (v153)
                {
                  *(_QWORD *)(v138 + 88) = v153;
                  operator delete(v153);
                  *v146 = 0;
                  *(_QWORD *)(v138 + 88) = 0;
                  *(_QWORD *)(v138 + 96) = 0;
                }
                v154 = v134 - 3;
                *(_OWORD *)(v138 + 80) = *(v134 - 3);
                *(_QWORD *)(v138 + 96) = *((_QWORD *)v134 - 4);
                *(_QWORD *)v154 = 0;
                *((_QWORD *)v154 + 1) = 0;
                *((_QWORD *)v154 + 2) = 0;
                v155 = *(void **)(v138 + 104);
                if (v155)
                {
                  *(_QWORD *)(v138 + 112) = v155;
                  operator delete(v155);
                  *v148 = 0;
                  *(_QWORD *)(v138 + 112) = 0;
                  *(_QWORD *)(v138 + 120) = 0;
                }
                v156 = (_QWORD *)v134 - 3;
                *(_OWORD *)(v138 + 104) = *(__int128 *)((char *)v134 - 24);
                *(_QWORD *)(v138 + 120) = *((_QWORD *)v134 - 1);
                *v156 = 0;
                v156[1] = 0;
                v156[2] = 0;
                *v225 = v227;
                *(v134 - 7) = v228;
                v157 = (uint64_t)v134 - 88;
                std::__tree<unsigned long>::destroy(*((_QWORD **)v134 - 11));
                *((_QWORD *)v134 - 12) = v229;
                v158 = v230;
                *((_QWORD *)v134 - 11) = v230;
                v159 = v231;
                *((_QWORD *)v134 - 10) = v231;
                if (v159)
                {
                  v158[2] = v157;
                  v230 = 0;
                  v231 = 0;
                }
                else
                {
                  *((_QWORD *)v134 - 12) = v157;
                }
                v163 = *v152;
                if (*v152)
                {
                  *((_QWORD *)v134 - 8) = v163;
                  operator delete(v163);
                }
                *(__int128 *)((char *)v134 - 72) = *(_OWORD *)v232;
                *((_QWORD *)v134 - 7) = v233;
                v232[0] = 0;
                v232[1] = 0;
                v233 = 0;
                v164 = (void *)*((_QWORD *)v134 - 6);
                v149 = v134 - 8;
                if (v164)
                {
                  *((_QWORD *)v134 - 5) = v164;
                  operator delete(v164);
                }
                *(v134 - 3) = *(_OWORD *)v234;
                *((_QWORD *)v134 - 4) = v235;
                v234[0] = 0;
                v234[1] = 0;
                v235 = 0;
                v165 = (void *)*((_QWORD *)v134 - 3);
                if (v165)
                {
                  *((_QWORD *)v134 - 2) = v165;
                  operator delete(v165);
                }
                *(__int128 *)((char *)v134 - 24) = *(_OWORD *)__p;
                *((_QWORD *)v134 - 1) = v237;
                __p[0] = 0;
                __p[1] = 0;
                v237 = 0;
                v166 = v138 + 128 - (_QWORD)a1;
                if (v166 >= 129)
                {
                  v167 = (((unint64_t)v166 >> 7) - 2) >> 1;
                  v168 = &a1[8 * v167];
                  if (*(double *)v168 > *(double *)v138)
                  {
                    v169 = *(_OWORD *)(v138 + 16);
                    v238 = *(_OWORD *)v138;
                    v239 = v169;
                    v240 = *(_QWORD ***)(v138 + 32);
                    v170 = (_QWORD *)(v138 + 40);
                    v171 = *(_QWORD **)(v138 + 40);
                    v241 = v171;
                    v242 = *(_QWORD *)(v138 + 48);
                    if (v242)
                    {
                      v171[2] = &v241;
                      *v142 = (uint64_t)v170;
                      *v170 = 0;
                      *(_QWORD *)(v138 + 48) = 0;
                    }
                    else
                    {
                      v240 = &v241;
                    }
                    v243 = *(_OWORD *)(v138 + 56);
                    v244 = *(_QWORD *)(v138 + 72);
                    *v144 = 0;
                    *(_QWORD *)(v138 + 64) = 0;
                    *(_QWORD *)(v138 + 72) = 0;
                    v245 = *(_OWORD *)(v138 + 80);
                    v246 = *(_QWORD *)(v138 + 96);
                    *v146 = 0;
                    *(_QWORD *)(v138 + 88) = 0;
                    *(_QWORD *)(v138 + 96) = 0;
                    v247 = *(_OWORD *)(v138 + 104);
                    v248 = *(_QWORD *)(v138 + 120);
                    *v148 = 0;
                    *(_QWORD *)(v138 + 112) = 0;
                    *(_QWORD *)(v138 + 120) = 0;
                    do
                    {
                      v175 = (uint64_t)v168;
                      v176 = v168[1];
                      *(_OWORD *)v138 = *v168;
                      *(_OWORD *)(v138 + 16) = v176;
                      v177 = (uint64_t *)(v168 + 2);
                      std::__tree<unsigned long>::__move_assign((_QWORD *)(v138 + 32), (_QWORD *)v168 + 4);
                      v178 = *(void **)(v138 + 56);
                      if (v178)
                      {
                        *(_QWORD *)(v138 + 64) = v178;
                        operator delete(v178);
                        *(_QWORD *)(v138 + 56) = 0;
                        *(_QWORD *)(v138 + 64) = 0;
                        *(_QWORD *)(v138 + 72) = 0;
                      }
                      v179 = (void **)(v175 + 56);
                      *(_OWORD *)(v138 + 56) = *(_OWORD *)(v175 + 56);
                      *(_QWORD *)(v138 + 72) = *(_QWORD *)(v175 + 72);
                      *(_QWORD *)(v175 + 56) = 0;
                      *(_QWORD *)(v175 + 64) = 0;
                      *(_QWORD *)(v175 + 72) = 0;
                      v180 = *(void **)(v138 + 80);
                      if (v180)
                      {
                        *(_QWORD *)(v138 + 88) = v180;
                        operator delete(v180);
                        *(_QWORD *)(v138 + 80) = 0;
                        *(_QWORD *)(v138 + 88) = 0;
                        *(_QWORD *)(v138 + 96) = 0;
                      }
                      *(_OWORD *)(v138 + 80) = *(_OWORD *)(v175 + 80);
                      *(_QWORD *)(v138 + 96) = *(_QWORD *)(v175 + 96);
                      *(_QWORD *)(v175 + 80) = 0;
                      *(_QWORD *)(v175 + 88) = 0;
                      *(_QWORD *)(v175 + 96) = 0;
                      v181 = *(void **)(v138 + 104);
                      if (v181)
                      {
                        *(_QWORD *)(v138 + 112) = v181;
                        operator delete(v181);
                        *(_QWORD *)(v138 + 104) = 0;
                        *(_QWORD *)(v138 + 112) = 0;
                        *(_QWORD *)(v138 + 120) = 0;
                      }
                      *(_OWORD *)(v138 + 104) = *(_OWORD *)(v175 + 104);
                      *(_QWORD *)(v138 + 120) = *(_QWORD *)(v175 + 120);
                      *(_QWORD *)(v175 + 104) = 0;
                      *(_QWORD *)(v175 + 112) = 0;
                      *(_QWORD *)(v175 + 120) = 0;
                      if (!v167)
                        break;
                      v167 = (v167 - 1) >> 1;
                      v168 = &a1[8 * v167];
                      v138 = v175;
                    }
                    while (*(double *)v168 > *(double *)&v238);
                    v182 = v239;
                    *(_OWORD *)v175 = v238;
                    *(_OWORD *)(v175 + 16) = v182;
                    v183 = v175 + 40;
                    std::__tree<unsigned long>::destroy(*(_QWORD **)(v175 + 40));
                    *(_QWORD *)(v175 + 32) = v240;
                    v184 = v241;
                    *(_QWORD *)(v175 + 40) = v241;
                    v185 = v242;
                    *(_QWORD *)(v175 + 48) = v242;
                    if (v185)
                    {
                      v184[2] = v183;
                      v240 = &v241;
                      v241 = 0;
                      v242 = 0;
                    }
                    else
                    {
                      *v177 = v183;
                    }
                    v149 = v225;
                    v186 = *v179;
                    if (*v179)
                    {
                      *(_QWORD *)(v175 + 64) = v186;
                      operator delete(v186);
                    }
                    *(_OWORD *)(v175 + 56) = v243;
                    *(_QWORD *)(v175 + 72) = v244;
                    v243 = 0uLL;
                    v244 = 0;
                    v187 = *(void **)(v175 + 80);
                    if (v187)
                    {
                      *(_QWORD *)(v175 + 88) = v187;
                      operator delete(v187);
                    }
                    *(_OWORD *)(v175 + 80) = v245;
                    *(_QWORD *)(v175 + 96) = v246;
                    v245 = 0uLL;
                    v246 = 0;
                    v188 = *(void **)(v175 + 104);
                    if (v188)
                    {
                      *(_QWORD *)(v175 + 112) = v188;
                      operator delete(v188);
                      v188 = (void *)v245;
                    }
                    *(_OWORD *)(v175 + 104) = v247;
                    *(_QWORD *)(v175 + 120) = v248;
                    v247 = 0uLL;
                    v248 = 0;
                    if (v188)
                    {
                      *((_QWORD *)&v245 + 1) = v188;
                      operator delete(v188);
                    }
                    if ((_QWORD)v243)
                    {
                      *((_QWORD *)&v243 + 1) = v243;
                      operator delete((void *)v243);
                    }
                    std::__tree<unsigned long>::destroy(v241);
                    if (__p[0])
                    {
                      __p[1] = __p[0];
                      operator delete(__p[0]);
                    }
                  }
                }
              }
              if (v234[0])
              {
                v234[1] = v234[0];
                operator delete(v234[0]);
              }
              if (v232[0])
              {
                v232[1] = v232[0];
                operator delete(v232[0]);
              }
              std::__tree<unsigned long>::destroy(v230);
              a2 = v149;
            }
            while (v133-- > 2);
          }
          return;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = (__int128 *)(v7 + ((unint64_t)v9 >> 1 << 7));
        if ((unint64_t)v8 <= 0x4000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>(v11, (__int128 *)v7, v221);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>((__int128 *)v7, v11, v221);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>((__int128 *)(v7 + 128), v11 - 8, v217);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>((__int128 *)(v7 + 256), (__int128 *)(v7 + 128 + (v10 << 7)), v215);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>(v11 - 8, v11, (__int128 *)(v7 + 128 + (v10 << 7)));
          std::swap[abi:ne180100]<nl_featurization::beam_search::BeamSequence>((__int128 *)v7, v11);
        }
        --a3;
        if ((a4 & 1) == 0 && *(double *)(v7 - 128) <= *(double *)v7)
        {
          v44 = *(_OWORD *)(v7 + 16);
          v238 = *(_OWORD *)v7;
          v239 = v44;
          v45 = (_QWORD *)(v7 + 40);
          v46 = *(_QWORD **)(v7 + 40);
          v240 = *(_QWORD ***)(v7 + 32);
          v241 = v46;
          v242 = *(_QWORD *)(v7 + 48);
          if (v242)
          {
            v46[2] = &v241;
            *(_QWORD *)(v7 + 32) = v45;
            *v45 = 0;
            *(_QWORD *)(v7 + 48) = 0;
          }
          else
          {
            v240 = &v241;
          }
          v6 = v7;
          v243 = *(_OWORD *)(v7 + 56);
          v244 = *(_QWORD *)(v7 + 72);
          *(_QWORD *)(v7 + 56) = 0;
          *(_QWORD *)(v7 + 64) = 0;
          *(_QWORD *)(v7 + 72) = 0;
          v245 = *(_OWORD *)(v7 + 80);
          v246 = *(_QWORD *)(v7 + 96);
          *(_QWORD *)(v7 + 80) = 0;
          *(_QWORD *)(v7 + 88) = 0;
          *(_QWORD *)(v7 + 96) = 0;
          v247 = *(_OWORD *)(v7 + 104);
          v248 = *(_QWORD *)(v7 + 120);
          *(_QWORD *)(v7 + 104) = 0;
          *(_QWORD *)(v7 + 112) = 0;
          *(_QWORD *)(v7 + 120) = 0;
          if (*(double *)&v238 <= *(double *)v221)
          {
            v48 = v7 + 128;
            do
            {
              v6 = v48;
              if (v48 >= (unint64_t)a2)
                break;
              v48 += 128;
            }
            while (*(double *)&v238 <= *(double *)v6);
          }
          else
          {
            do
            {
              v47 = *(double *)(v6 + 128);
              v6 += 128;
            }
            while (*(double *)&v238 <= v47);
          }
          v49 = a2;
          if (v6 < (unint64_t)a2)
          {
            v49 = a2;
            do
            {
              v50 = *((double *)v49 - 16);
              v49 -= 8;
            }
            while (*(double *)&v238 > v50);
          }
          while (v6 < (unint64_t)v49)
          {
            std::swap[abi:ne180100]<nl_featurization::beam_search::BeamSequence>((__int128 *)v6, v49);
            do
            {
              v51 = *(double *)(v6 + 128);
              v6 += 128;
            }
            while (*(double *)&v238 <= v51);
            do
            {
              v52 = *((double *)v49 - 16);
              v49 -= 8;
            }
            while (*(double *)&v238 > v52);
          }
          v53 = (__int128 *)(v6 - 128);
          if (v6 - 128 != v7)
          {
            v54 = *(_OWORD *)(v6 - 112);
            *(_OWORD *)v7 = *v53;
            *(_OWORD *)(v7 + 16) = v54;
            std::__tree<unsigned long>::__move_assign((_QWORD *)(v7 + 32), (_QWORD *)(v6 - 96));
            v55 = *(void **)(v7 + 56);
            if (v55)
            {
              *(_QWORD *)(v7 + 64) = v55;
              operator delete(v55);
              *(_QWORD *)(v7 + 56) = 0;
              *(_QWORD *)(v7 + 64) = 0;
              *(_QWORD *)(v7 + 72) = 0;
            }
            v56 = (_QWORD *)(v6 - 72);
            *(_OWORD *)(v7 + 56) = *(_OWORD *)(v6 - 72);
            *(_QWORD *)(v7 + 72) = *(_QWORD *)(v6 - 56);
            *v56 = 0;
            v56[1] = 0;
            v56[2] = 0;
            v57 = *(void **)(v7 + 80);
            if (v57)
            {
              *(_QWORD *)(v7 + 88) = v57;
              operator delete(v57);
              *(_QWORD *)(v7 + 80) = 0;
              *(_QWORD *)(v7 + 88) = 0;
              *(_QWORD *)(v7 + 96) = 0;
            }
            v58 = (_QWORD *)(v6 - 48);
            *(_OWORD *)(v7 + 80) = *(_OWORD *)(v6 - 48);
            *(_QWORD *)(v7 + 96) = *(_QWORD *)(v6 - 32);
            *v58 = 0;
            v58[1] = 0;
            v58[2] = 0;
            v59 = *(void **)(v7 + 104);
            if (v59)
            {
              *(_QWORD *)(v7 + 112) = v59;
              operator delete(v59);
              *(_QWORD *)(v7 + 104) = 0;
              *(_QWORD *)(v7 + 112) = 0;
              *(_QWORD *)(v7 + 120) = 0;
            }
            v60 = (_QWORD *)(v6 - 24);
            *(_OWORD *)(v7 + 104) = *(_OWORD *)(v6 - 24);
            *(_QWORD *)(v7 + 120) = *(_QWORD *)(v6 - 8);
            *v60 = 0;
            v60[1] = 0;
            v60[2] = 0;
          }
          v61 = v239;
          *v53 = v238;
          *(_OWORD *)(v6 - 112) = v61;
          v62 = v6 - 88;
          std::__tree<unsigned long>::destroy(*(_QWORD **)(v6 - 88));
          *(_QWORD *)(v6 - 96) = v240;
          v63 = v241;
          *(_QWORD *)(v6 - 88) = v241;
          v64 = v242;
          *(_QWORD *)(v6 - 80) = v242;
          if (v64)
          {
            v63[2] = v62;
            v240 = &v241;
            v241 = 0;
            v242 = 0;
          }
          else
          {
            *(_QWORD *)(v6 - 96) = v62;
          }
          a2 = v223;
          v65 = *(void **)(v6 - 72);
          if (v65)
          {
            *(_QWORD *)(v6 - 64) = v65;
            operator delete(v65);
            *(_QWORD *)(v6 - 72) = 0;
            *(_QWORD *)(v6 - 64) = 0;
            *(_QWORD *)(v6 - 56) = 0;
          }
          *(_OWORD *)(v6 - 72) = v243;
          *(_QWORD *)(v6 - 56) = v244;
          v243 = 0uLL;
          v244 = 0;
          v66 = *(void **)(v6 - 48);
          if (v66)
          {
            *(_QWORD *)(v6 - 40) = v66;
            operator delete(v66);
            *(_QWORD *)(v6 - 48) = 0;
            *(_QWORD *)(v6 - 40) = 0;
            *(_QWORD *)(v6 - 32) = 0;
          }
          *(_OWORD *)(v6 - 48) = v245;
          *(_QWORD *)(v6 - 32) = v246;
          v245 = 0uLL;
          v246 = 0;
          v67 = *(void **)(v6 - 24);
          if (v67)
          {
            *(_QWORD *)(v6 - 16) = v67;
            operator delete(v67);
            *(_QWORD *)(v6 - 24) = 0;
            *(_QWORD *)(v6 - 16) = 0;
            *(_QWORD *)(v6 - 8) = 0;
          }
          *(_OWORD *)(v6 - 24) = v247;
          *(_QWORD *)(v6 - 8) = v248;
          v247 = 0uLL;
          v248 = 0;
          if ((_QWORD)v245)
          {
            *((_QWORD *)&v245 + 1) = v245;
            operator delete((void *)v245);
          }
          if ((_QWORD)v243)
          {
            *((_QWORD *)&v243 + 1) = v243;
            operator delete((void *)v243);
          }
          std::__tree<unsigned long>::destroy(v241);
          a4 = 0;
          continue;
        }
        v12 = a3;
        v13 = *(_OWORD *)(v7 + 16);
        v238 = *(_OWORD *)v7;
        v239 = v13;
        v14 = (_QWORD *)(v7 + 32);
        v15 = (_QWORD *)(v7 + 40);
        v16 = *(_QWORD **)(v7 + 40);
        v240 = *(_QWORD ***)(v7 + 32);
        v241 = v16;
        v242 = *(_QWORD *)(v7 + 48);
        if (v242)
        {
          v16[2] = &v241;
          *v14 = v15;
          *v15 = 0;
          *(_QWORD *)(v7 + 48) = 0;
        }
        else
        {
          v240 = &v241;
        }
        v17 = v7;
        v18 = (_QWORD *)(v7 + 56);
        v243 = *(_OWORD *)(v7 + 56);
        v244 = *(_QWORD *)(v7 + 72);
        *(_QWORD *)(v7 + 56) = 0;
        *(_QWORD *)(v7 + 64) = 0;
        v19 = *(_OWORD *)(v7 + 80);
        *(_QWORD *)(v7 + 72) = 0;
        v245 = v19;
        v246 = *(_QWORD *)(v7 + 96);
        *(_QWORD *)(v7 + 80) = 0;
        *(_QWORD *)(v7 + 88) = 0;
        *(_QWORD *)(v7 + 96) = 0;
        v247 = *(_OWORD *)(v7 + 104);
        v248 = *(_QWORD *)(v7 + 120);
        *(_QWORD *)(v7 + 104) = 0;
        *(_QWORD *)(v7 + 112) = 0;
        *(_QWORD *)(v7 + 120) = 0;
        do
        {
          v20 = (__int128 *)v17;
          v21 = *(double *)(v17 + 128);
          v17 += 128;
        }
        while (v21 > *(double *)&v238);
        v22 = v223;
        if (v20 == a1)
        {
          v22 = v223;
          do
          {
            if (v17 >= (unint64_t)v22)
              break;
            v24 = *((double *)v22 - 16);
            v22 -= 8;
          }
          while (v24 <= *(double *)&v238);
        }
        else
        {
          do
          {
            v23 = *((double *)v22 - 16);
            v22 -= 8;
          }
          while (v23 <= *(double *)&v238);
        }
        v6 = v17;
        if (v17 < (unint64_t)v22)
        {
          v25 = v22;
          do
          {
            std::swap[abi:ne180100]<nl_featurization::beam_search::BeamSequence>((__int128 *)v6, v25);
            do
            {
              v26 = *(double *)(v6 + 128);
              v6 += 128;
            }
            while (v26 > *(double *)&v238);
            do
            {
              v27 = *((double *)v25 - 16);
              v25 -= 8;
            }
            while (v27 <= *(double *)&v238);
          }
          while (v6 < (unint64_t)v25);
        }
        v28 = (__int128 *)(v6 - 128);
        if ((__int128 *)(v6 - 128) != a1)
        {
          v29 = *(_OWORD *)(v6 - 112);
          *a1 = *v28;
          a1[1] = v29;
          std::__tree<unsigned long>::__move_assign(v14, (_QWORD *)(v6 - 96));
          v30 = (void *)*((_QWORD *)a1 + 7);
          if (v30)
          {
            *((_QWORD *)a1 + 8) = v30;
            operator delete(v30);
            *v18 = 0;
            *((_QWORD *)a1 + 8) = 0;
            *((_QWORD *)a1 + 9) = 0;
          }
          v31 = (_QWORD *)(v6 - 72);
          *(__int128 *)((char *)a1 + 56) = *(_OWORD *)(v6 - 72);
          *((_QWORD *)a1 + 9) = *(_QWORD *)(v6 - 56);
          *v31 = 0;
          v31[1] = 0;
          v31[2] = 0;
          v32 = (void *)*((_QWORD *)a1 + 10);
          if (v32)
          {
            *((_QWORD *)a1 + 11) = v32;
            operator delete(v32);
            *((_QWORD *)a1 + 10) = 0;
            *((_QWORD *)a1 + 11) = 0;
            *((_QWORD *)a1 + 12) = 0;
          }
          v33 = (_QWORD *)(v6 - 48);
          a1[5] = *(_OWORD *)(v6 - 48);
          *((_QWORD *)a1 + 12) = *(_QWORD *)(v6 - 32);
          *v33 = 0;
          v33[1] = 0;
          v33[2] = 0;
          v34 = (void *)*((_QWORD *)a1 + 13);
          if (v34)
          {
            *((_QWORD *)a1 + 14) = v34;
            operator delete(v34);
            *((_QWORD *)a1 + 13) = 0;
            *((_QWORD *)a1 + 14) = 0;
            *((_QWORD *)a1 + 15) = 0;
          }
          v35 = (_QWORD *)(v6 - 24);
          *(__int128 *)((char *)a1 + 104) = *(_OWORD *)(v6 - 24);
          *((_QWORD *)a1 + 15) = *(_QWORD *)(v6 - 8);
          *v35 = 0;
          v35[1] = 0;
          v35[2] = 0;
        }
        v36 = v239;
        *v28 = v238;
        *(_OWORD *)(v6 - 112) = v36;
        v37 = v6 - 88;
        std::__tree<unsigned long>::destroy(*(_QWORD **)(v6 - 88));
        *(_QWORD *)(v6 - 96) = v240;
        v38 = v241;
        *(_QWORD *)(v6 - 88) = v241;
        v39 = v242;
        *(_QWORD *)(v6 - 80) = v242;
        if (v39)
        {
          v38[2] = v37;
          v240 = &v241;
          v241 = 0;
          v242 = 0;
        }
        else
        {
          *(_QWORD *)(v6 - 96) = v37;
        }
        a2 = v223;
        a3 = v12;
        v40 = *(void **)(v6 - 72);
        if (v40)
        {
          *(_QWORD *)(v6 - 64) = v40;
          operator delete(v40);
          *(_QWORD *)(v6 - 72) = 0;
          *(_QWORD *)(v6 - 64) = 0;
          *(_QWORD *)(v6 - 56) = 0;
        }
        *(_OWORD *)(v6 - 72) = v243;
        *(_QWORD *)(v6 - 56) = v244;
        v243 = 0uLL;
        v244 = 0;
        v41 = *(void **)(v6 - 48);
        if (v41)
        {
          *(_QWORD *)(v6 - 40) = v41;
          operator delete(v41);
          *(_QWORD *)(v6 - 48) = 0;
          *(_QWORD *)(v6 - 40) = 0;
          *(_QWORD *)(v6 - 32) = 0;
        }
        *(_OWORD *)(v6 - 48) = v245;
        *(_QWORD *)(v6 - 32) = v246;
        v245 = 0uLL;
        v246 = 0;
        v42 = *(void **)(v6 - 24);
        if (v42)
        {
          *(_QWORD *)(v6 - 16) = v42;
          operator delete(v42);
          *(_QWORD *)(v6 - 24) = 0;
          *(_QWORD *)(v6 - 16) = 0;
          *(_QWORD *)(v6 - 8) = 0;
        }
        *(_OWORD *)(v6 - 24) = v247;
        *(_QWORD *)(v6 - 8) = v248;
        v247 = 0uLL;
        v248 = 0;
        if ((_QWORD)v245)
        {
          *((_QWORD *)&v245 + 1) = v245;
          operator delete((void *)v245);
        }
        if ((_QWORD)v243)
        {
          *((_QWORD *)&v243 + 1) = v243;
          operator delete((void *)v243);
        }
        std::__tree<unsigned long>::destroy(v241);
        if (v17 < (unint64_t)v22)
        {
LABEL_51:
          std::__introsort<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *,false>(a1, v6 - 128, v12, a4 & 1);
          a4 = 0;
          continue;
        }
        v43 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>(a1, (__int128 *)(v6 - 128));
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nl_featurization::beam_search::beamSearch(std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::vector<double> const&,std::vector<std::vector<double>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,std::unordered_map<unsigned long,std::set<unsigned long>> const&,unsigned long)::$_1 &,nl_featurization::beam_search::BeamSequence *>((__int128 *)v6, v223))
        {
          if (v43)
            continue;
          goto LABEL_51;
        }
        a2 = (__int128 *)(v6 - 128);
        if (!v43)
          goto LABEL_1;
        return;
    }
  }
}

__int128 *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>(__int128 *result, float *a2, uint64_t a3)
{
  float v3;
  float v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v3 = a2[2];
  v4 = *(float *)(a3 + 8);
  if (v3 >= *((float *)result + 2))
  {
    if (v4 < v3)
    {
      v11 = *(_OWORD *)a2;
      v6 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *((_DWORD *)a2 + 2) = v6;
      *(_QWORD *)a3 = v11;
      *(_DWORD *)(a3 + 8) = DWORD2(v11);
      if (a2[2] < *((float *)result + 2))
      {
        v12 = *result;
        v7 = *((_DWORD *)a2 + 2);
        *(_QWORD *)result = *(_QWORD *)a2;
        *((_DWORD *)result + 2) = v7;
        *(_QWORD *)a2 = v12;
        a2[2] = *((float *)&v12 + 2);
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v13 = *result;
      v8 = *((_DWORD *)a2 + 2);
      *(_QWORD *)result = *(_QWORD *)a2;
      *((_DWORD *)result + 2) = v8;
      *(_QWORD *)a2 = v13;
      a2[2] = *((float *)&v13 + 2);
      if (*(float *)(a3 + 8) >= a2[2])
        return result;
      v10 = *(_OWORD *)a2;
      v9 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *((_DWORD *)a2 + 2) = v9;
    }
    else
    {
      v10 = *result;
      v5 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)result = *(_QWORD *)a3;
      *((_DWORD *)result + 2) = v5;
    }
    *(_QWORD *)a3 = v10;
    *(_DWORD *)(a3 + 8) = DWORD2(v10);
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>(uint64_t a1, float *a2, __n128 *a3, uint64_t a4)
{
  __n128 result;
  unsigned __int32 v9;
  unsigned __int32 v10;
  int v11;
  __n128 v12;
  __n128 v13;
  __int128 v14;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>((__int128 *)a1, a2, (uint64_t)a3);
  result.n128_u32[0] = *(_DWORD *)(a4 + 8);
  if (result.n128_f32[0] < a3->n128_f32[2])
  {
    result = *a3;
    v12 = *a3;
    v9 = *(_DWORD *)(a4 + 8);
    a3->n128_u64[0] = *(_QWORD *)a4;
    a3->n128_u32[2] = v9;
    *(_QWORD *)a4 = v12.n128_u64[0];
    *(_DWORD *)(a4 + 8) = v12.n128_u32[2];
    result.n128_u32[0] = a3->n128_u32[2];
    if (result.n128_f32[0] < a2[2])
    {
      result = *(__n128 *)a2;
      v13 = *(__n128 *)a2;
      v10 = a3->n128_u32[2];
      *(_QWORD *)a2 = a3->n128_u64[0];
      *((_DWORD *)a2 + 2) = v10;
      a3->n128_u64[0] = v13.n128_u64[0];
      a3->n128_u32[2] = v13.n128_u32[2];
      result.n128_f32[0] = a2[2];
      if (result.n128_f32[0] < *(float *)(a1 + 8))
      {
        result = *(__n128 *)a1;
        v14 = *(_OWORD *)a1;
        v11 = *((_DWORD *)a2 + 2);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_DWORD *)(a1 + 8) = v11;
        *(_QWORD *)a2 = v14;
        a2[2] = *((float *)&v14 + 2);
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>(__n128 *a1, __int128 *a2, __n128 *a3, __n128 *a4, uint64_t a5)
{
  __n128 result;
  unsigned __int32 v11;
  unsigned __int32 v12;
  unsigned __int32 v13;
  unsigned __int32 v14;
  __n128 v15;
  __n128 v16;
  __int128 v17;
  __n128 v18;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>((uint64_t)a1, (float *)a2, a3, (uint64_t)a4);
  result.n128_u32[0] = *(_DWORD *)(a5 + 8);
  if (result.n128_f32[0] < a4->n128_f32[2])
  {
    result = *a4;
    v15 = *a4;
    v11 = *(_DWORD *)(a5 + 8);
    a4->n128_u64[0] = *(_QWORD *)a5;
    a4->n128_u32[2] = v11;
    *(_QWORD *)a5 = v15.n128_u64[0];
    *(_DWORD *)(a5 + 8) = v15.n128_u32[2];
    result.n128_u32[0] = a4->n128_u32[2];
    if (result.n128_f32[0] < a3->n128_f32[2])
    {
      result = *a3;
      v16 = *a3;
      v12 = a4->n128_u32[2];
      a3->n128_u64[0] = a4->n128_u64[0];
      a3->n128_u32[2] = v12;
      a4->n128_u64[0] = v16.n128_u64[0];
      a4->n128_u32[2] = v16.n128_u32[2];
      result.n128_u32[0] = a3->n128_u32[2];
      if (result.n128_f32[0] < *((float *)a2 + 2))
      {
        result = (__n128)*a2;
        v17 = *a2;
        v13 = a3->n128_u32[2];
        *(_QWORD *)a2 = a3->n128_u64[0];
        *((_DWORD *)a2 + 2) = v13;
        a3->n128_u64[0] = v17;
        a3->n128_u32[2] = DWORD2(v17);
        result.n128_u32[0] = *((_DWORD *)a2 + 2);
        if (result.n128_f32[0] < a1->n128_f32[2])
        {
          result = *a1;
          v18 = *a1;
          v14 = *((_DWORD *)a2 + 2);
          a1->n128_u64[0] = *(_QWORD *)a2;
          a1->n128_u32[2] = v14;
          *(_QWORD *)a2 = v18.n128_u64[0];
          *((_DWORD *)a2 + 2) = v18.n128_u32[2];
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 8) < *(float *)(a1 + 8))
      {
        v16 = *(_OWORD *)a1;
        v6 = *(_DWORD *)(a2 - 8);
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 16);
        *(_DWORD *)(a1 + 8) = v6;
        *(_QWORD *)(a2 - 16) = v16;
        *(_DWORD *)(a2 - 8) = DWORD2(v16);
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>((__int128 *)a1, (float *)(a1 + 16), a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>(a1, (float *)(a1 + 16), (__n128 *)(a1 + 32), a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>((__n128 *)a1, (__int128 *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a1 + 48), a2 - 16);
      return 1;
    default:
      v7 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,nlv4_inference_orchestrator::inference_engine::TokenIndexAndScore *>((__int128 *)a1, (float *)(a1 + 16), a1 + 32);
      v8 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = *(float *)(v8 + 8);
    if (v11 < *(float *)(v7 + 8))
    {
      v12 = *(_QWORD *)v8;
      v13 = v9;
      while (1)
      {
        v14 = a1 + v13;
        *(_QWORD *)(v14 + 48) = *(_QWORD *)(a1 + v13 + 32);
        *(_DWORD *)(v14 + 56) = *(_DWORD *)(a1 + v13 + 40);
        if (v13 == -32)
          break;
        v13 -= 16;
        if (v11 >= *(float *)(v14 + 24))
        {
          v15 = a1 + v13 + 48;
          goto LABEL_12;
        }
      }
      v15 = a1;
LABEL_12:
      *(_QWORD *)v15 = v12;
      *(float *)(v15 + 8) = v11;
      if (++v10 == 8)
        return v8 + 16 == a2;
    }
    v7 = v8;
    v9 += 16;
    v8 += 16;
    if (v8 == a2)
      return 1;
  }
}

float nlv4_inference_orchestrator::inference_engine::BeamSearch::logsumexp(uint64_t a1, float **a2)
{
  float *v2;
  float *v3;
  uint64_t v4;
  BOOL v5;
  float *v6;
  float v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  v2 = *a2;
  v3 = a2[1];
  v4 = (uint64_t)(*a2 + 1);
  v5 = *a2 == v3 || v4 == (_QWORD)v3;
  v6 = *a2;
  if (!v5)
  {
    v7 = *v2;
    v6 = *a2;
    v8 = *a2 + 1;
    do
    {
      v9 = *v8++;
      v10 = v9;
      if (v7 < v9)
      {
        v7 = v10;
        v6 = (float *)v4;
      }
      v4 = (uint64_t)v8;
    }
    while (v8 != v3);
  }
  v11 = *v6;
  v12 = 0.0;
  while (v2 != v3)
  {
    v13 = *v2++;
    v12 = v12 + expf(v13 - v11);
  }
  return v11 + logf(v12);
}

_QWORD *nlv4_inference_orchestrator::inference_engine::BeamSearch::applyLogSoftmax@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  float v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;

  v6 = nlv4_inference_orchestrator::inference_engine::BeamSearch::logsumexp(a1, (float **)a2);
  v7 = *(float **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = v8 - *(_QWORD *)a2;
  if (v8 == *(_QWORD *)a2)
  {
    v12 = *(float **)(a1 + 16);
  }
  else
  {
    v10 = 0;
    v11 = v9 >> 2;
    v12 = *(float **)(a1 + 16);
    if (v11 <= 1)
      v11 = 1;
    do
    {
      v12[v10] = v7[v10] - v6;
      ++v10;
    }
    while (v11 != v10);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a3, v12, *(_QWORD *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - (_QWORD)v12) >> 2);
}

void nlv4_inference_orchestrator::context::ContextFeaturizer::featurize(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  const std::string *v14;
  void *__p[2];
  __int128 v16;
  int v17;
  void *v18;
  void *v19;
  void *v20;
  _BYTE *v21;

  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v17 = 1065353216;
  nlv4_inference_orchestrator::context::Embedder::embed((nlv4_inference_orchestrator::context::Embedder *)(a1 + 72), (uint64_t)__p, (unint64_t **)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(0);
  v6 = v18;
  v7 = (uint64_t)v19;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)a3, v6, v7, (v7 - (uint64_t)v6) >> 3);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a3 + 24), v20, (uint64_t)v21, (v21 - (_BYTE *)v20) >> 2);
  *(_WORD *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 50) = 0;
  v8 = *(_QWORD *)(a2 + 72);
  if (!v8)
  {
    v10 = 0;
LABEL_8:
    v12 = 0;
    goto LABEL_9;
  }
  v9 = *(_QWORD *)(v8 + 136);
  if (v9)
    v10 = *(_QWORD *)(v9 + 16) != 0;
  else
    v10 = 0;
  v11 = *(_QWORD *)(v8 + 128);
  if (!v11)
    goto LABEL_8;
  v12 = *(_QWORD *)(v11 + 32) != 0;
LABEL_9:
  LOBYTE(__p[0]) = 0;
  BYTE8(v16) = 0;
  v13 = *(_QWORD *)(a2 + 48);
  if (v13)
  {
    v14 = *(const std::string **)(v13 + 16);
    if (v14)
      std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>((std::string *)__p, v14);
  }
  if (v10)
  {
    nlv4_inference_orchestrator::context::ContextFeaturizer::featurize(a1, a3, *(const sirinluexternal::NLContext **)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 136) + 16), (uint64_t)__p);
  }
  else if (v12)
  {
    nlv4_inference_orchestrator::context::ContextFeaturizer::featurize((uint64_t)a1, a3, *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 128) + 32), (uint64_t)__p);
  }
  if (BYTE8(v16) && SBYTE7(v16) < 0)
    operator delete(__p[0]);
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
}

void sub_1C22366A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;
  void *v20;

  v20 = *(void **)v18;
  if (*(_QWORD *)v18)
  {
    *(_QWORD *)(v18 + 8) = v20;
    operator delete(v20);
  }
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a18);
  _Unwind_Resume(a1);
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(std::string *this, const std::string *a2)
{
  __int128 v3;

  if (this[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(this, a2);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void nlv4_inference_orchestrator::context::ContextFeaturizer::featurize(unsigned __int8 *a1, uint64_t a2, const sirinluexternal::NLContext *a3, uint64_t a4)
{
  const void **v8;
  void *v9;
  unsigned __int8 *v10;
  NSObject *v11;
  char *v12;
  NSObject *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20[2];
  void *v21[2];
  int v22;
  void *v23[2];
  void *v24;
  void *__p[3];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v8 = (const void **)(a1 + 304);
  nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabels((nlv4_inference_orchestrator::context::ContextLabelsExtractor *)(a1 + 304), a3, (uint64_t)v23);
  *(_OWORD *)v20 = 0u;
  *(_OWORD *)v21 = 0u;
  v22 = 1065353216;
  if (_os_feature_enabled_impl())
  {
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractSalientEntityContextLabels(v8, a3, (uint64_t)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)v20, (uint64_t *)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)__p[2]);
    v9 = __p[0];
    __p[0] = 0;
    if (v9)
      operator delete(v9);
    v10 = (unsigned __int8 *)v21[0];
    if (v21[0])
    {
      do
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v23, v10 + 16, (uint64_t)(v10 + 16));
        v10 = *(unsigned __int8 **)v10;
      }
      while (v10);
    }
  }
  v11 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p[0]) = 136315394;
    *(void **)((char *)__p + 4) = "NLv4";
    WORD2(__p[1]) = 2080;
    *(void **)((char *)&__p[1] + 6) = "[insights-snlp-nlv4]: ";
    _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEBUG, "[%s] %sFeaturizing the following context labels in NLv4ParserRequest.\n", (uint8_t *)__p, 0x16u);
  }
  v12 = (char *)v24;
  if (v24)
  {
    do
    {
      v13 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        v14 = v12 + 16;
        if (v12[39] < 0)
          v14 = (_QWORD *)*v14;
        LODWORD(__p[0]) = 136315650;
        *(void **)((char *)__p + 4) = "NLv4";
        WORD2(__p[1]) = 2080;
        *(void **)((char *)&__p[1] + 6) = "[insights-snlp-nlv4]: ";
        HIWORD(__p[2]) = 2080;
        *(_QWORD *)&v26 = v14;
        _os_log_impl(&dword_1C2196000, v13, OS_LOG_TYPE_DEBUG, "[%s] %s%s", (uint8_t *)__p, 0x20u);
      }
      v12 = *(char **)v12;
    }
    while (v12);
  }
  *(_BYTE *)(a2 + 48) = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v23, a1) != 0;
  *(_BYTE *)(a2 + 49) = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v23, a1 + 24) != 0;
  *(_BYTE *)(a2 + 50) = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v23, a1 + 48) != 0;
  nlv4_inference_orchestrator::context::Embedder::embed((nlv4_inference_orchestrator::context::Embedder *)(a1 + 72), (uint64_t)v23, (unint64_t **)__p);
  v15 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v15;
    operator delete(v15);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(void **)(a2 + 16) = __p[2];
  memset(__p, 0, sizeof(__p));
  v16 = *(void **)(a2 + 24);
  if (v16)
  {
    *(_QWORD *)(a2 + 32) = v16;
    operator delete(v16);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    v16 = __p[0];
  }
  *(_OWORD *)(a2 + 24) = v26;
  *(_QWORD *)(a2 + 40) = v27;
  v27 = 0;
  v26 = 0uLL;
  if (v16)
  {
    __p[1] = v16;
    operator delete(v16);
  }
  if (*(_BYTE *)(a4 + 24))
  {
    nlv4_inference_orchestrator::context::ContextFeaturizer::insertToFeatureStore((uint64_t)v16, a2, (uint64_t)v23, (uint64_t *)a4);
  }
  else
  {
    v17 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_1C2196000, v17, OS_LOG_TYPE_DEBUG, "nlu_request_id not found so skipping insertion of context featurized response into FeatureStore", (uint8_t *)__p, 2u);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v21[0]);
  v18 = v20[0];
  v20[0] = 0;
  if (v18)
    operator delete(v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v24);
  v19 = v23[0];
  v23[0] = 0;
  if (v19)
    operator delete(v19);
}

void sub_1C2236AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::context::ContextFeaturizer::featurize(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  NSObject *v7;
  char *v8;
  NSObject *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *__p[2];
  void *v16;
  uint8_t buf[24];
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabels((const void **)(a1 + 304), a3, (uint64_t)__p);
  v7 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "NLv4";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "[insights-snlp-nlv4]: ";
    _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_DEBUG, "[%s] %sFeaturizing the following context labels in NLv4ParserRequest.\n", buf, 0x16u);
  }
  v8 = (char *)v16;
  if (v16)
  {
    do
    {
      v9 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        v10 = v8 + 16;
        if (v8[39] < 0)
          v10 = (_QWORD *)*v10;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "NLv4";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "[insights-snlp-nlv4]: ";
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&v18 = v10;
        _os_log_impl(&dword_1C2196000, v9, OS_LOG_TYPE_DEBUG, "[%s] %s%s", buf, 0x20u);
      }
      v8 = *(char **)v8;
    }
    while (v8);
  }
  *(_BYTE *)(a2 + 48) = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(__p, (unsigned __int8 *)a1) != 0;
  nlv4_inference_orchestrator::context::Embedder::embed((nlv4_inference_orchestrator::context::Embedder *)(a1 + 72), (uint64_t)__p, (unint64_t **)buf);
  v11 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v11;
    operator delete(v11);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = *(_OWORD *)buf;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)&buf[16];
  memset(buf, 0, sizeof(buf));
  v12 = *(void **)(a2 + 24);
  if (v12)
  {
    *(_QWORD *)(a2 + 32) = v12;
    operator delete(v12);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    v12 = *(void **)buf;
  }
  *(_OWORD *)(a2 + 24) = v18;
  *(_QWORD *)(a2 + 40) = v19;
  v19 = 0;
  v18 = 0uLL;
  if (v12)
  {
    *(_QWORD *)&buf[8] = v12;
    operator delete(v12);
  }
  if (*(_BYTE *)(a4 + 24))
  {
    nlv4_inference_orchestrator::context::ContextFeaturizer::insertToFeatureStore((uint64_t)v12, a2, (uint64_t)__p, (uint64_t *)a4);
  }
  else
  {
    v13 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C2196000, v13, OS_LOG_TYPE_DEBUG, "nlu_request_id not found so skipping insertion of context featurized response into FeatureStore", buf, 2u);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v16);
  v14 = __p[0];
  __p[0] = 0;
  if (v14)
    operator delete(v14);
}

void sub_1C2236DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::context::ContextFeaturizer::insertToFeatureStore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  BOOL inserted;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  uint8_t v11[16];

  if (_os_feature_enabled_impl())
  {
    nlv4_inference_orchestrator::context::ContextFeaturizer::makeContextResponse(a2, a3, (sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse *)v11);
    inserted = snlp::common::logging::feature_store_utilities::insertNLv4ContextResponseToFeatureStore((uint64_t)v11, a4);
    sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse::~NLv4ContextFeaturizerResponse((sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse *)v11);
    if (inserted)
    {
      v8 = SNLPOSLoggerForCategory(1);
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        return;
      *(_WORD *)v11 = 0;
      v9 = "Successfully inserted context featurizer response into FeatureStore";
      goto LABEL_9;
    }
  }
  else
  {
    v10 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_DEBUG, "Skipping insertion of NLv4 context featurizer response into FeatureStore because SNLPFeatureStoreEnabled feature flag is disabled", v11, 2u);
    }
  }
  v8 = SNLPOSLoggerForCategory(1);
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    return;
  *(_WORD *)v11 = 0;
  v9 = "Unable to insert context featurizer response into FeatureStore";
LABEL_9:
  _os_log_impl(&dword_1C2196000, v8, OS_LOG_TYPE_DEBUG, v9, v11, 2u);
}

void sub_1C2236EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse::~NLv4ContextFeaturizerResponse((sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse *)&a9);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::context::ContextFeaturizer::makeContextResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse *a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void **v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  float *v20;
  float *v21;
  void **v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  int v33;
  _QWORD *v34;
  unint64_t v35;
  __int128 *v36;
  sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *v37;
  sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *v38;
  uint64_t v39;
  sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse *v40;
  uint64_t result;

  v5 = (_QWORD *)operator new();
  sirinluinternalsnlp_intermediate::LinearizedTensor::LinearizedTensor((sirinluinternalsnlp_intermediate::LinearizedTensor *)v5);
  v6 = *(_QWORD **)a1;
  v7 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 != v7)
  {
    v8 = (void **)(v5 + 4);
    v9 = v5 + 6;
    v10 = (char *)v5[5];
    do
    {
      if ((unint64_t)v10 >= *v9)
      {
        v12 = (char *)*v8;
        v13 = (v10 - (_BYTE *)*v8) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v15 = *v9 - (_QWORD)v12;
        if (v15 >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v5 + 6), v16);
          v12 = (char *)v5[4];
          v10 = (char *)v5[5];
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[4 * v13];
        *(_DWORD *)v18 = *v6;
        v11 = v18 + 4;
        while (v10 != v12)
        {
          v19 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        v5[4] = v18;
        v5[5] = v11;
        v5[6] = &v17[4 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *(_DWORD *)v10 = *v6;
        v11 = v10 + 4;
      }
      v5[5] = v11;
      ++v6;
      v10 = v11;
    }
    while (v6 != v7);
  }
  v20 = *(float **)(a1 + 24);
  v21 = *(float **)(a1 + 32);
  if (v20 != v21)
  {
    v22 = (void **)(v5 + 1);
    v23 = v5 + 3;
    v24 = (char *)v5[2];
    do
    {
      if ((unint64_t)v24 >= *v23)
      {
        v26 = (char *)*v22;
        v27 = (v24 - (_BYTE *)*v22) >> 2;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 62)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v29 = *v23 - (_QWORD)v26;
        if (v29 >> 1 > v28)
          v28 = v29 >> 1;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
          v30 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v5 + 3), v30);
          v26 = (char *)v5[1];
          v24 = (char *)v5[2];
        }
        else
        {
          v31 = 0;
        }
        v32 = &v31[4 * v27];
        *(_DWORD *)v32 = *v20;
        v25 = v32 + 4;
        while (v24 != v26)
        {
          v33 = *((_DWORD *)v24 - 1);
          v24 -= 4;
          *((_DWORD *)v32 - 1) = v33;
          v32 -= 4;
        }
        v5[1] = v32;
        v5[2] = v25;
        v5[3] = &v31[4 * v30];
        if (v26)
          operator delete(v26);
      }
      else
      {
        *(_DWORD *)v24 = *v20;
        v25 = v24 + 4;
      }
      v5[2] = v25;
      ++v20;
      v24 = v25;
    }
    while (v20 != v21);
  }
  v34 = *(_QWORD **)(a2 + 16);
  if (v34)
  {
    v35 = v5[8];
    do
    {
      v36 = (__int128 *)(v34 + 2);
      if (v35 >= v5[9])
      {
        v35 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v5 + 7, v36);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)(v5 + 7), v36);
        v35 += 24;
      }
      v5[8] = v35;
      v34 = (_QWORD *)*v34;
    }
    while (v34);
  }
  v37 = (sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *)operator new();
  v38 = (sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *)sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::ContextFeaturizerResponse(v37);
  sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::makeTensor(v38);
  v39 = *((_QWORD *)v37 + 1);
  *((_QWORD *)v37 + 1) = v5;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = (sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse *)sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse::NLv4ContextFeaturizerResponse(a3);
  sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse::makeResponse(v40);
  result = *((_QWORD *)a3 + 1);
  *((_QWORD *)a3 + 1) = v37;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1C22371F8(_Unwind_Exception *a1)
{
  sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse *v1;
  uint64_t v2;

  sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse::~NLv4ContextFeaturizerResponse(v1);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

uint64_t *snlp::ssu::app::SSUFileWrapper::SSUFileWrapper(snlp::ssu::app::SSUFileWrapper *this, const std::__fs::filesystem::path *a2)
{
  NSObject *v4;
  const std::__fs::filesystem::path *v5;
  int v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  const unsigned __int8 *v10;
  const unsigned __int8 *v11;
  unint64_t v12;
  const unsigned __int8 *v13;
  const unsigned __int8 *v14;
  unsigned int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  const unsigned __int8 *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unint64_t v27;
  const unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  const unsigned __int8 *v31;
  const unsigned __int8 *v32;
  uint64_t v33;
  const unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const unsigned __int8 *v39;
  uint64_t v40;
  apple::aiml::flatbuffers2::Table *v41;
  uint64_t v42;
  char *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const unsigned __int8 *v50;
  uint64_t v51;
  apple::aiml::flatbuffers2::Table *v52;
  unsigned __int16 *v53;
  uint64_t v54;
  const unsigned __int8 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  const unsigned __int8 *v61;
  uint64_t v62;
  apple::aiml::flatbuffers2::Table *v63;
  unsigned __int16 *v64;
  uint64_t v65;
  const unsigned __int8 *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  const unsigned __int8 *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const unsigned __int8 *v76;
  uint64_t v77;
  uint64_t v78;
  const unsigned __int8 *v79;
  _DWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  uint8_t *v87;
  std::runtime_error *v89;
  int *v90;
  char *v91;
  std::string *v92;
  __int128 v93;
  NSObject *v94;
  uint8_t *v95;
  std::runtime_error *exception;
  const std::__fs::filesystem::path *v97;
  unsigned int **v98;
  uint64_t *v99;
  const unsigned __int8 *v100;
  uint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  uint64_t v104;
  uint64_t v105;
  _DWORD *v106;
  uint8_t buf[16];
  __int128 v108;
  uint64_t v109;
  char v110;
  std::string v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  v4 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C2196000, v4, OS_LOG_TYPE_DEBUG, "Loading SSUFile...", buf, 2u);
  }
  v6 = snlp::ssu::app::SSUFileWrapper::openFileHandle(&a2->__pn_, v5);
  v8 = v7;
  v9 = operator new();
  *(_QWORD *)v9 = 0;
  v10 = (const unsigned __int8 *)mmap(0, v8, 1, 2, v6, 0);
  v11 = v10;
  v99 = (uint64_t *)this;
  if (v10 == (const unsigned __int8 *)-1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v111, "Failed to mmap file: ");
    v90 = __error();
    v91 = strerror(*v90);
    v92 = std::string::append(&v111, v91);
    v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
    *(_QWORD *)&v108 = *((_QWORD *)&v92->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v93;
    v92->__r_.__value_.__l.__size_ = 0;
    v92->__r_.__value_.__r.__words[2] = 0;
    v92->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v111.__r_.__value_.__l.__data_);
    v94 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
    {
      v95 = buf;
      if (SBYTE7(v108) < 0)
        v95 = *(uint8_t **)buf;
      LODWORD(v111.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v111.__r_.__value_.__r.__words + 4) = (std::string::size_type)v95;
      _os_log_impl(&dword_1C2196000, v94, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v111, 0xCu);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, (const std::string *)buf);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  v97 = a2;
  v98 = (unsigned int **)v9;
  *(_QWORD *)v9 = v10;
  *(_QWORD *)(v9 + 8) = v8;
  *(_DWORD *)(v9 + 16) = v6;
  if (!v8)
    goto LABEL_150;
  if (!v10)
    goto LABEL_150;
  *(_QWORD *)buf = v10;
  *(_QWORD *)&buf[8] = v8;
  v108 = xmmword_1C230B550;
  v109 = 0;
  v110 = 1;
  if (v8 < 5)
    goto LABEL_150;
  v12 = *(unsigned int *)v10;
  if ((int)v12 < 1)
    goto LABEL_150;
  if (v8 - 1 < v12)
    goto LABEL_150;
  v13 = &v10[v12];
  if (!apple::aiml::flatbuffers2::Verifier::VerifyTableStart((apple::aiml::flatbuffers2::Verifier *)buf, &v10[v12]))
    goto LABEL_150;
  v14 = &v13[-*(int *)v13];
  v15 = *(unsigned __int16 *)v14;
  if (v15 >= 5
    && *((_WORD *)v14 + 2)
    && (*(_QWORD *)&buf[8] < 3uLL
     || *(_QWORD *)&buf[8] - 2 < (unint64_t)&v13[*((unsigned __int16 *)v14 + 2) - *(_QWORD *)buf]))
  {
    goto LABEL_150;
  }
  if (!apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)&v11[v12], (const apple::aiml::flatbuffers2::Verifier *)buf, 6u))goto LABEL_150;
  if (v15 >= 7 && *((_WORD *)v14 + 3))
  {
    v16 = (unsigned __int8 *)&v13[*((unsigned __int16 *)v14 + 3) + *(unsigned int *)&v13[*((unsigned __int16 *)v14 + 3)]];
    if (!apple::aiml::flatbuffers2::Verifier::VerifyTableStart((apple::aiml::flatbuffers2::Verifier *)buf, v16)
      || !apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)v16, (const apple::aiml::flatbuffers2::Verifier *)buf, 4u))
    {
      goto LABEL_150;
    }
    v17 = &v16[-*(int *)v16];
    if (*(unsigned __int16 *)v17 >= 5u && (v18 = *((unsigned __int16 *)v17 + 2)) != 0)
      v19 = &v16[v18 + *(unsigned int *)&v16[v18]];
    else
      v19 = 0;
    if (!apple::aiml::flatbuffers2::Verifier::VerifyString((apple::aiml::flatbuffers2::Verifier *)buf, v19))
      goto LABEL_150;
    v20 = *(int *)v16;
    v21 = &v16[-v20];
    v22 = *(unsigned __int16 *)&v16[-v20];
    if (v22 >= 7
      && *((_WORD *)v21 + 3)
      && (*(_QWORD *)&buf[8] < 9uLL
       || *(_QWORD *)&buf[8] - 8 < (unint64_t)&v16[*((unsigned __int16 *)v21 + 3) - *(_QWORD *)buf]))
    {
      goto LABEL_150;
    }
    if (!apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)v16, (const apple::aiml::flatbuffers2::Verifier *)buf, 8u))goto LABEL_150;
    if (v22 < 9)
      goto LABEL_40;
    if (*((_WORD *)v21 + 4))
    {
      if (!apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString((apple::aiml::flatbuffers2::Verifier *)buf, &v16[*((unsigned __int16 *)v21 + 4) + *(unsigned int *)&v16[*((unsigned __int16 *)v21 + 4)]], 4uLL, 0))goto LABEL_150;
      v23 = *(int *)v16;
      if (*(unsigned __int16 *)&v16[-v23] < 9u)
      {
LABEL_40:
        if (!apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)v16, (const apple::aiml::flatbuffers2::Verifier *)buf, 0xAu))goto LABEL_150;
        v29 = &v16[-*(int *)v16];
        if (*(unsigned __int16 *)v29 >= 0xBu && (v30 = *((unsigned __int16 *)v29 + 5)) != 0)
          v31 = &v16[v30 + *(unsigned int *)&v16[v30]];
        else
          v31 = 0;
        if (!apple::aiml::flatbuffers2::Verifier::VerifyString((apple::aiml::flatbuffers2::Verifier *)buf, v31))
          goto LABEL_150;
        LODWORD(v108) = v108 - 1;
        goto LABEL_47;
      }
      v24 = -v23;
    }
    else
    {
      v24 = -v20;
    }
    v25 = *(unsigned __int16 *)&v16[v24 + 8];
    if (v25)
    {
      v26 = &v16[v25 + *(unsigned int *)&v16[v25]];
      if (*(_DWORD *)v26)
      {
        v27 = 0;
        v28 = v26 + 4;
        do
        {
          if (!apple::aiml::flatbuffers2::Verifier::VerifyString((apple::aiml::flatbuffers2::Verifier *)buf, &v28[*(unsigned int *)v28]))goto LABEL_150;
          ++v27;
          v28 += 4;
        }
        while (v27 < *(unsigned int *)v26);
      }
    }
    goto LABEL_40;
  }
LABEL_47:
  if (!apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)&v11[v12], (const apple::aiml::flatbuffers2::Verifier *)buf, 8u))goto LABEL_150;
  v32 = &v13[-*(int *)v13];
  if (*(unsigned __int16 *)v32 >= 9u && (v33 = *((unsigned __int16 *)v32 + 4)) != 0)
    v34 = &v13[v33 + *(unsigned int *)&v13[v33]];
  else
    v34 = 0;
  if (!apple::aiml::flatbuffers2::Verifier::VerifyString((apple::aiml::flatbuffers2::Verifier *)buf, v34)
    || !apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)&v11[v12], (const apple::aiml::flatbuffers2::Verifier *)buf, 0xAu))
  {
    goto LABEL_150;
  }
  v35 = *(int *)v13;
  if (*(unsigned __int16 *)&v13[-v35] >= 0xBu)
  {
    if (!*(_WORD *)&v13[-v35 + 10])
      goto LABEL_161;
    if (!apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString((apple::aiml::flatbuffers2::Verifier *)buf, &v13[*(unsigned __int16 *)&v13[-v35 + 10] + *(unsigned int *)&v13[*(unsigned __int16 *)&v13[-v35 + 10]]], 4uLL, 0))goto LABEL_150;
    v35 = *(int *)v13;
    if (*(unsigned __int16 *)&v13[-v35] >= 0xBu)
    {
LABEL_161:
      v36 = *(unsigned __int16 *)&v13[-v35 + 10];
      if (v36)
      {
        v37 = *(unsigned int *)&v13[v36];
        v100 = &v13[v36 + v37];
        if (*(_DWORD *)v100)
        {
          v38 = 0;
          v102 = (uint64_t)&v11[v12 + 16 + v37 + v36];
          do
          {
            v101 = v38;
            v39 = &v100[4 * v38 + 4];
            v40 = *(unsigned int *)v39;
            v41 = (apple::aiml::flatbuffers2::Table *)&v39[v40];
            if (!apple::aiml::flatbuffers2::Verifier::VerifyTableStart((apple::aiml::flatbuffers2::Verifier *)buf, &v39[v40]))goto LABEL_150;
            v42 = *(int *)v41;
            v43 = (char *)v41 - v42;
            v44 = *(unsigned __int16 *)((char *)v41 - v42);
            if (v44 >= 5
              && *((_WORD *)v43 + 2)
              && (*(_QWORD *)&buf[8] < 2uLL
               || *(_QWORD *)&buf[8] - 1 < (unint64_t)v41 + *((unsigned __int16 *)v43 + 2) - *(_QWORD *)buf))
            {
              goto LABEL_150;
            }
            if (!apple::aiml::flatbuffers2::Table::VerifyOffset(v41, (const apple::aiml::flatbuffers2::Verifier *)buf, 6u))goto LABEL_150;
            if (v44 >= 7)
            {
              if (*((_WORD *)v43 + 3))
              {
                if (!apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString((apple::aiml::flatbuffers2::Verifier *)buf, (const unsigned __int8 *)v41+ *((unsigned __int16 *)v43 + 3)+ *(unsigned int *)((char *)v41 + *((unsigned __int16 *)v43 + 3)), 4uLL, 0))goto LABEL_150;
                v45 = *(int *)v41;
                if (*(unsigned __int16 *)((char *)v41 - v45) < 7u)
                  goto LABEL_140;
                v46 = -v45;
              }
              else
              {
                v46 = -v42;
              }
              v47 = *(unsigned __int16 *)((char *)v41 + v46 + 6);
              if (v47)
              {
                v48 = *(unsigned int *)((char *)v41 + v47);
                v103 = (_DWORD *)((char *)v41 + v47 + v48);
                if (*v103)
                {
                  v49 = 0;
                  v105 = v102 + v40 + v48 + v47;
                  while (1)
                  {
                    v104 = v49;
                    v50 = (const unsigned __int8 *)&v103[v49 + 1];
                    v51 = *(unsigned int *)v50;
                    v52 = (apple::aiml::flatbuffers2::Table *)&v50[v51];
                    if (!apple::aiml::flatbuffers2::Verifier::VerifyTableStart((apple::aiml::flatbuffers2::Verifier *)buf, &v50[v51])|| !apple::aiml::flatbuffers2::Table::VerifyOffset(v52, (const apple::aiml::flatbuffers2::Verifier *)buf, 4u))
                    {
                      goto LABEL_150;
                    }
                    v53 = (unsigned __int16 *)((char *)v52 - *(int *)v52);
                    if (*v53 >= 5u && (v54 = v53[2]) != 0)
                      v55 = (const unsigned __int8 *)v52 + v54 + *(unsigned int *)((char *)v52 + v54);
                    else
                      v55 = 0;
                    if (!apple::aiml::flatbuffers2::Verifier::VerifyString((apple::aiml::flatbuffers2::Verifier *)buf, v55)|| !apple::aiml::flatbuffers2::Table::VerifyOffset(v52, (const apple::aiml::flatbuffers2::Verifier *)buf, 6u))
                    {
                      goto LABEL_150;
                    }
                    v56 = *(int *)v52;
                    if (*(unsigned __int16 *)((char *)v52 - v56) >= 7u)
                    {
                      if (!*(_WORD *)((char *)v52 - v56 + 6))
                        goto LABEL_160;
                      if (!apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString((apple::aiml::flatbuffers2::Verifier *)buf, (const unsigned __int8 *)v52+ *(unsigned __int16 *)((char *)v52 - v56 + 6)+ *(unsigned int *)((char *)v52 + *(unsigned __int16 *)((char *)v52 - v56 + 6)), 4uLL, 0))goto LABEL_150;
                      v56 = *(int *)v52;
                      if (*(unsigned __int16 *)((char *)v52 - v56) >= 7u)
                      {
LABEL_160:
                        v57 = *(unsigned __int16 *)((char *)v52 - v56 + 6);
                        if (v57)
                        {
                          v58 = *(unsigned int *)((char *)v52 + v57);
                          v106 = (_DWORD *)((char *)v52 + v57 + v58);
                          if (*v106)
                            break;
                        }
                      }
                    }
LABEL_130:
                    if (!apple::aiml::flatbuffers2::Table::VerifyOffset(v52, (const apple::aiml::flatbuffers2::Verifier *)buf, 8u))goto LABEL_150;
                    v83 = 0;
                    v84 = *(int *)v52;
                    if (*(unsigned __int16 *)((char *)v52 - v84) >= 9u)
                    {
                      if (!*(_WORD *)((char *)v52 - v84 + 8))
                        goto LABEL_135;
                      if (!apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString((apple::aiml::flatbuffers2::Verifier *)buf, (const unsigned __int8 *)v52+ *(unsigned __int16 *)((char *)v52 - v84 + 8)+ *(unsigned int *)((char *)v52 + *(unsigned __int16 *)((char *)v52 - v84 + 8)), 4uLL, 0))goto LABEL_150;
                      v83 = 0;
                      v84 = *(int *)v52;
                      if (*(unsigned __int16 *)((char *)v52 - v84) >= 9u)
                      {
LABEL_135:
                        v85 = *(unsigned __int16 *)((char *)v52 - v84 + 8);
                        if (v85)
                          v83 = (_DWORD *)((char *)v52 + v85 + *(unsigned int *)((char *)v52 + v85));
                        else
                          v83 = 0;
                      }
                    }
                    if (!apple::aiml::flatbuffers2::Verifier::VerifyVectorOfTables<SSUExample>((apple::aiml::flatbuffers2::Verifier *)buf, v83))goto LABEL_150;
                    LODWORD(v108) = v108 - 1;
                    v49 = v104 + 1;
                    v105 += 4;
                    if (v104 + 1 >= (unint64_t)*v103)
                      goto LABEL_140;
                  }
                  v59 = 0;
                  v60 = v105 + v51 + v58 + v57;
                  while (1)
                  {
                    v61 = (const unsigned __int8 *)&v106[v59 + 1];
                    v62 = *(unsigned int *)v61;
                    v63 = (apple::aiml::flatbuffers2::Table *)&v61[v62];
                    if (!apple::aiml::flatbuffers2::Verifier::VerifyTableStart((apple::aiml::flatbuffers2::Verifier *)buf, &v61[v62])|| !apple::aiml::flatbuffers2::Table::VerifyOffset(v63, (const apple::aiml::flatbuffers2::Verifier *)buf, 4u))
                    {
                      goto LABEL_150;
                    }
                    v64 = (unsigned __int16 *)((char *)v63 - *(int *)v63);
                    if (*v64 >= 5u && (v65 = v64[2]) != 0)
                      v66 = (const unsigned __int8 *)v63 + v65 + *(unsigned int *)((char *)v63 + v65);
                    else
                      v66 = 0;
                    if (!apple::aiml::flatbuffers2::Verifier::VerifyString((apple::aiml::flatbuffers2::Verifier *)buf, v66)|| !apple::aiml::flatbuffers2::Table::VerifyOffset(v63, (const apple::aiml::flatbuffers2::Verifier *)buf, 6u))
                    {
                      goto LABEL_150;
                    }
                    v67 = *(int *)v63;
                    if (*(unsigned __int16 *)((char *)v63 - v67) >= 7u)
                    {
                      if (!*(_WORD *)((char *)v63 - v67 + 6))
                        goto LABEL_162;
                      if (!apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString((apple::aiml::flatbuffers2::Verifier *)buf, (const unsigned __int8 *)v63+ *(unsigned __int16 *)((char *)v63 - v67 + 6)+ *(unsigned int *)((char *)v63 + *(unsigned __int16 *)((char *)v63 - v67 + 6)), 4uLL, 0))goto LABEL_150;
                      v67 = *(int *)v63;
                      if (*(unsigned __int16 *)((char *)v63 - v67) >= 7u)
                      {
LABEL_162:
                        v68 = *(unsigned __int16 *)((char *)v63 - v67 + 6);
                        if (v68)
                        {
                          v69 = (char *)v63 + v68;
                          v70 = *(unsigned int *)((char *)v63 + v68);
                          if (*(_DWORD *)((char *)v63 + v68 + v70))
                            break;
                        }
                      }
                    }
LABEL_120:
                    if (!apple::aiml::flatbuffers2::Table::VerifyOffset(v63, (const apple::aiml::flatbuffers2::Verifier *)buf, 8u))goto LABEL_150;
                    v80 = 0;
                    v81 = *(int *)v63;
                    if (*(unsigned __int16 *)((char *)v63 - v81) >= 9u)
                    {
                      if (!*(_WORD *)((char *)v63 - v81 + 8))
                        goto LABEL_125;
                      if (!apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString((apple::aiml::flatbuffers2::Verifier *)buf, (const unsigned __int8 *)v63+ *(unsigned __int16 *)((char *)v63 - v81 + 8)+ *(unsigned int *)((char *)v63 + *(unsigned __int16 *)((char *)v63 - v81 + 8)), 4uLL, 0))goto LABEL_150;
                      v80 = 0;
                      v81 = *(int *)v63;
                      if (*(unsigned __int16 *)((char *)v63 - v81) >= 9u)
                      {
LABEL_125:
                        v82 = *(unsigned __int16 *)((char *)v63 - v81 + 8);
                        if (v82)
                          v80 = (_DWORD *)((char *)v63 + v82 + *(unsigned int *)((char *)v63 + v82));
                        else
                          v80 = 0;
                      }
                    }
                    if (!apple::aiml::flatbuffers2::Verifier::VerifyVectorOfTables<SSUExample>((apple::aiml::flatbuffers2::Verifier *)buf, v80))goto LABEL_150;
                    LODWORD(v108) = v108 - 1;
                    ++v59;
                    v60 += 4;
                    if (v59 >= *v106)
                      goto LABEL_130;
                  }
                  v71 = 0;
                  v72 = (const unsigned __int8 *)(v60 + v62 + v70 + v68);
                  while (1)
                  {
                    v73 = *(unsigned int *)v72;
                    if (!apple::aiml::flatbuffers2::Verifier::VerifyTableStart((apple::aiml::flatbuffers2::Verifier *)buf, &v72[v73])|| !apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)&v72[v73], (const apple::aiml::flatbuffers2::Verifier *)buf, 4u))
                    {
                      break;
                    }
                    v74 = v73 - *(int *)&v72[v73];
                    if (*(unsigned __int16 *)&v72[v74] >= 5u && (v75 = *(unsigned __int16 *)&v72[v74 + 4]) != 0)
                      v76 = &v72[v73 + v75 + *(unsigned int *)&v72[v73 + v75]];
                    else
                      v76 = 0;
                    if (!apple::aiml::flatbuffers2::Verifier::VerifyString((apple::aiml::flatbuffers2::Verifier *)buf, v76)|| !apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)&v72[v73], (const apple::aiml::flatbuffers2::Verifier *)buf, 6u))
                    {
                      break;
                    }
                    v77 = v73 - *(int *)&v72[v73];
                    if (*(unsigned __int16 *)&v72[v77] >= 7u && (v78 = *(unsigned __int16 *)&v72[v77 + 6]) != 0)
                      v79 = &v72[v73 + v78 + *(unsigned int *)&v72[v73 + v78]];
                    else
                      v79 = 0;
                    if (!apple::aiml::flatbuffers2::Verifier::VerifyString((apple::aiml::flatbuffers2::Verifier *)buf, v79))break;
                    LODWORD(v108) = v108 - 1;
                    ++v71;
                    v72 += 4;
                    if (v71 >= *(unsigned int *)&v69[v70])
                      goto LABEL_120;
                  }
LABEL_150:
                  v89 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::string::basic_string[abi:ne180100]<0>(buf, "Unable to read the SSU file");
                  std::runtime_error::runtime_error(v89, (const std::string *)buf);
                  v89->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
                }
              }
            }
LABEL_140:
            LODWORD(v108) = v108 - 1;
            v38 = v101 + 1;
            v102 += 4;
          }
          while (v101 + 1 < (unint64_t)*(unsigned int *)v100);
        }
      }
    }
  }
  v98[3] = (unsigned int *)((char *)*v98 + **v98);
  std::unique_ptr<snlp::ssu::app::file_wrapper_utils::SSUMappedFileData>::reset[abi:ne180100](v99, (uint64_t)v98);
  v86 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
  {
    if (SHIBYTE(v97->__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)buf, v97->__pn_.__r_.__value_.__l.__data_, v97->__pn_.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)buf = *(_OWORD *)&v97->__pn_.__r_.__value_.__l.__data_;
      *(_QWORD *)&v108 = *((_QWORD *)&v97->__pn_.__r_.__value_.__l + 2);
    }
    v87 = buf;
    if (SBYTE7(v108) < 0)
      v87 = *(uint8_t **)buf;
    LODWORD(v111.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v111.__r_.__value_.__r.__words + 4) = (std::string::size_type)v87;
    _os_log_impl(&dword_1C2196000, v86, OS_LOG_TYPE_DEBUG, "SSUFile successfully loaded from: %s", (uint8_t *)&v111, 0xCu);
    if (SBYTE7(v108) < 0)
      operator delete(*(void **)buf);
  }
  return v99;
}

void sub_1C2237ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  MEMORY[0x1C3BB9B44](v28, 0x1070C400E7C11DFLL);
  std::unique_ptr<snlp::ssu::app::file_wrapper_utils::SSUMappedFileData>::reset[abi:ne180100](a12, 0);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::app::SSUFileWrapper::openFileHandle(std::string *this, const std::__fs::filesystem::path *a2)
{
  const char *p_p;
  unsigned int v4;
  std::runtime_error *exception;
  std::runtime_error *v7;
  std::string *v8;
  __int128 v9;
  stat __p;
  std::string v11;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__p, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&__p.st_dev = *(_OWORD *)&this->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p.st_uid = *((_QWORD *)&this->__r_.__value_.__l + 2);
  }
  if ((__p.st_gid & 0x80000000) == 0)
    p_p = (const char *)&__p;
  else
    p_p = *(const char **)&__p.st_dev;
  v4 = open(p_p, 0, *(_QWORD *)&__p.st_dev, __p.st_ino, *(_QWORD *)&__p.st_uid);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  if (v4 == -1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v11, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
    else
      v11 = *this;
    v8 = std::string::insert(&v11, 0, "Unable to open file: ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p.st_uid = *((_QWORD *)&v8->__r_.__value_.__l + 2);
    *(_OWORD *)&__p.st_dev = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)&__p);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  if (fstat(v4, &__p) < 0)
  {
    v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v11, "Unable to gather stats on file");
    std::runtime_error::runtime_error(v7, &v11);
    v7->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  return v4;
}

void sub_1C223811C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<snlp::ssu::app::file_wrapper_utils::SSUMappedFileData>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if ((unint64_t)(*(_QWORD *)v2 + 1) >= 2 && munmap(*(void **)v2, *(_QWORD *)(v2 + 8)) == -1)
    {
      v3 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v4 = 0;
        _os_log_impl(&dword_1C2196000, v3, OS_LOG_TYPE_ERROR, "Error when unmapping the memory for SSU file", v4, 2u);
      }
    }
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)v2 = 0;
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

uint64_t apple::aiml::flatbuffers2::Verifier::VerifyOffset(apple::aiml::flatbuffers2::Verifier *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;

  if ((a2 & 3) != 0 && *((_BYTE *)this + 40))
    return 0;
  v2 = *((_QWORD *)this + 1);
  if (v2 < 5 || v2 - 4 < a2)
    return 0;
  v4 = *(unsigned int *)(*(_QWORD *)this + a2);
  if ((int)v4 < 1)
    return 0;
  if (v2 - 1 >= v4 + a2)
    return v4;
  return 0;
}

BOOL apple::aiml::flatbuffers2::Verifier::VerifyTableStart(apple::aiml::flatbuffers2::Verifier *this, const unsigned __int8 *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v14;

  v2 = *(_QWORD *)this;
  v3 = (unint64_t)&a2[-*(_QWORD *)this];
  if ((v3 & 3) != 0 && *((_BYTE *)this + 40))
    return 0;
  v4 = *((_QWORD *)this + 1);
  v5 = v4 >= 5 && v4 - 4 >= v3;
  if (!v5)
    return 0;
  v6 = *(int *)a2;
  v7 = *((_DWORD *)this + 5);
  v8 = *((_DWORD *)this + 4) + 1;
  *((_DWORD *)this + 4) = v8;
  v9 = *((_DWORD *)this + 6) + 1;
  *((_DWORD *)this + 6) = v9;
  if (v8 > v7 || v9 > *((_DWORD *)this + 7))
    return 0;
  v10 = v3 - v6;
  if ((v10 & 1) != 0)
  {
    v11 = 0;
    if (*((_BYTE *)this + 40) || v4 - 2 < v10)
      return v11;
  }
  else if (v4 - 2 < v10)
  {
    return 0;
  }
  v12 = *(unsigned __int16 *)(v2 + v10);
  if ((v12 & 1) != 0 && *((_BYTE *)this + 40))
    return 0;
  v5 = v4 >= v12;
  v14 = v4 - v12;
  return v14 != 0 && v5 && v14 >= v10;
}

BOOL apple::aiml::flatbuffers2::Table::VerifyOffset(apple::aiml::flatbuffers2::Table *this, const apple::aiml::flatbuffers2::Verifier *a2, unsigned int a3)
{
  unsigned __int16 *v3;
  uint64_t v4;

  v3 = (unsigned __int16 *)((char *)this - *(int *)this);
  return *v3 <= a3
      || (v4 = *(unsigned __int16 *)((char *)v3 + a3)) == 0
      || apple::aiml::flatbuffers2::Verifier::VerifyOffset(a2, (unint64_t)this + v4 - *(_QWORD *)a2) != 0;
}

BOOL apple::aiml::flatbuffers2::Verifier::VerifyString(apple::aiml::flatbuffers2::Verifier *a1, const unsigned __int8 *a2)
{
  _BOOL8 result;
  unint64_t v4;
  unint64_t v6;

  if (!a2)
    return 1;
  v6 = 0;
  result = apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(a1, a2, 1uLL, &v6);
  if (result)
  {
    v4 = *((_QWORD *)a1 + 1);
    return v4 >= 2 && v4 - 1 >= v6 && *(_BYTE *)(*(_QWORD *)a1 + v6) == 0;
  }
  return result;
}

BOOL apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(apple::aiml::flatbuffers2::Verifier *this, const unsigned __int8 *a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;

  v4 = (unint64_t)&a2[-*(_QWORD *)this];
  if ((v4 & 3) != 0 && *((_BYTE *)this + 40))
    return 0;
  v5 = *((_QWORD *)this + 1);
  if (v5 < 5 || v5 - 4 < v4)
    return 0;
  v7 = *(unsigned int *)a2;
  if (0x7FFFFFFF / a3 <= v7)
    return 0;
  v8 = v7 * a3 + 4;
  if (a4)
  {
    *a4 = v8 + v4;
    v5 = *((_QWORD *)this + 1);
  }
  v9 = v5 > v8;
  v10 = v5 - v8;
  return v9 && v10 >= v4;
}

BOOL apple::aiml::flatbuffers2::Verifier::VerifyVectorOfTables<SSUExample>(apple::aiml::flatbuffers2::Verifier *this, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  const unsigned __int8 *v8;
  apple::aiml::flatbuffers2::Table *v9;
  _BOOL8 result;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v18;
  uint64_t v19;
  const unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;

  if (!a2)
    return 1;
  if (*a2)
  {
    v4 = 0;
    v5 = 0;
    v6 = a2 + 1;
    do
    {
      v7 = a2[v4 + 1];
      v8 = (const unsigned __int8 *)&a2[v4] + v7;
      v9 = (apple::aiml::flatbuffers2::Table *)(v8 + 4);
      result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(this, v8 + 4);
      if (!result)
        return result;
      v11 = v7 - *((int *)v8 + 1);
      v12 = *(unsigned __int16 *)((char *)&a2[v4 + 1] + v11);
      if (v12 >= 5)
      {
        if (*(_WORD *)((char *)&a2[v4 + 2] + v11))
        {
          result = 0;
          v13 = *((_QWORD *)this + 1);
          if (v13 < 2
            || v13 - 1 < (unint64_t)&v6[v4]
                       + v7
                       + *(unsigned __int16 *)((char *)&a2[v4 + 2] + v11)
                       - *(_QWORD *)this)
          {
            return result;
          }
        }
      }
      result = apple::aiml::flatbuffers2::Table::VerifyOffset(v9, this, 6u);
      if (!result)
        return result;
      if (v12 < 7)
      {
        if (v12 < 5)
          goto LABEL_36;
      }
      else if (*(_WORD *)((char *)&a2[v4 + 2] + v11 + 2))
      {
        v14 = v7 + *(unsigned __int16 *)((char *)&a2[v4 + 2] + v11 + 2);
        v15 = (unsigned __int8 *)&a2[v4 + 1] + v14 + *(unsigned int *)((char *)&a2[v4 + 1] + v14);
        goto LABEL_15;
      }
      v15 = 0;
LABEL_15:
      if (*(_WORD *)((char *)&a2[v4 + 2] + v11))
      {
        v16 = *((unsigned __int8 *)&a2[v4 + 1] + v7 + *(unsigned __int16 *)((char *)&a2[v4 + 2] + v11));
        if (v16 != 2)
        {
          if (v16 != 1 || v15 == 0)
            goto LABEL_36;
          result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(this, v15);
          if (!result)
            return result;
          result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)v15, this, 4u);
          if (!result)
            return result;
          v18 = &v15[-*(int *)v15];
          if (*(unsigned __int16 *)v18 >= 5u && (v19 = *((unsigned __int16 *)v18 + 2)) != 0)
            v20 = &v15[v19 + *(unsigned int *)&v15[v19]];
          else
            v20 = 0;
          if (!apple::aiml::flatbuffers2::Verifier::VerifyString(this, v20))
            return 0;
          goto LABEL_35;
        }
        if (v15)
        {
          result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(this, v15);
          if (!result)
            return result;
          result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)v15, this, 4u);
          if (!result)
            return result;
          v21 = &v15[-*(int *)v15];
          if (*(unsigned __int16 *)v21 >= 5u)
          {
            v22 = *((unsigned __int16 *)v21 + 2);
            if (v22)
            {
              if (!apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(this, &v15[v22 + *(unsigned int *)&v15[v22]], 4uLL, 0))return 0;
            }
          }
LABEL_35:
          --*((_DWORD *)this + 4);
        }
      }
LABEL_36:
      --*((_DWORD *)this + 4);
      ++v5;
      ++v4;
    }
    while (v5 < *a2);
  }
  return 1;
}

void snlp::ssu::app::SSUFileWrapper::~SSUFileWrapper(snlp::ssu::app::SSUFileWrapper *this)
{
  NSObject *v2;
  uint8_t v3[16];

  close(*(_DWORD *)(*(_QWORD *)this + 16));
  std::unique_ptr<snlp::ssu::app::file_wrapper_utils::SSUMappedFileData>::reset[abi:ne180100]((uint64_t *)this, 0);
  v2 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1C2196000, v2, OS_LOG_TYPE_DEBUG, "SSUFile relinquished", v3, 2u);
  }
  std::unique_ptr<snlp::ssu::app::file_wrapper_utils::SSUMappedFileData>::reset[abi:ne180100]((uint64_t *)this, 0);
}

uint64_t snlp::ssu::app::SSUFileWrapper::getAssetDirectoryFormatVersion(snlp::ssu::app::SSUFileWrapper *this)
{
  int *v1;
  unsigned __int16 *v2;
  uint64_t v3;

  v1 = *(int **)(*(_QWORD *)this + 24);
  v2 = (unsigned __int16 *)((char *)v1 - *v1);
  if (*v2 >= 5u && (v3 = v2[2]) != 0)
    return *(unsigned __int16 *)((char *)v1 + v3);
  else
    return 0;
}

_QWORD *snlp::ssu::app::SSUFileWrapper::getLocale@<X0>(snlp::ssu::app::SSUFileWrapper *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *v2;

  v2 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)this + 24)
                      + *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)this + 24)
                                            - **(int **)(*(_QWORD *)this + 24)
                                            + 8));
  return std::string::basic_string[abi:ne180100](a2, (char *)v2 + *v2 + 4, *(unsigned int *)((char *)v2 + *v2));
}

_QWORD *snlp::ssu::app::SSUFileWrapper::getDataVersion@<X0>(snlp::ssu::app::SSUFileWrapper *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *v2;
  unsigned int *v3;

  v2 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)this + 24)
                      + *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)this + 24)
                                            - **(int **)(*(_QWORD *)this + 24)
                                            + 6));
  v3 = (unsigned int *)((char *)v2
                      + *v2
                      + *(unsigned __int16 *)((char *)v2 + *v2 - *(unsigned int *)((char *)v2 + *v2) + 4));
  return std::string::basic_string[abi:ne180100](a2, (char *)v3 + *v3 + 4, *(unsigned int *)((char *)v3 + *v3));
}

void snlp::ssu::app::SSUFileWrapper::getAllCategoriesWithGroup(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  const void **v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unsigned int *v12;
  int *v13;
  unsigned __int16 *v14;
  uint64_t v15;
  char v16;
  char *v17;
  char *v18;
  uint64_t v19;
  size_t v20;
  char *v21;
  char *v22;
  char *v23;
  char v24;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)a1 + 24)
                      + *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a1 + 24) - **(int **)(*(_QWORD *)a1 + 24) + 10));
  v5 = *v4;
  v7 = (unsigned int *)((char *)v4 + v5 + 4);
  v6 = *(unsigned int *)((char *)v4 + v5);
  if ((_DWORD)v6)
  {
    v8 = a2;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = &v7[v6];
    do
    {
      v13 = (int *)((char *)v7 + *v7);
      a1 = (uint64_t)snlp::ssu::app::SSUFileWrapper::lookupGroup(a1, v13, v8);
      if (a1)
      {
        v14 = (unsigned __int16 *)((char *)v13 - *v13);
        if (*v14 >= 5u && (v15 = v14[2]) != 0)
          v16 = *((_BYTE *)v13 + v15);
        else
          v16 = 0;
        if (v11 >= v10)
        {
          v18 = &v11[-v9];
          v19 = (uint64_t)&v11[-v9 + 1];
          if (v19 < 0)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          if (2 * (uint64_t)&v10[-v9] > (unint64_t)v19)
            v19 = 2 * (_QWORD)&v10[-v9];
          if ((unint64_t)&v10[-v9] >= 0x3FFFFFFFFFFFFFFFLL)
            v20 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v20 = v19;
          if (v20)
            a1 = (uint64_t)operator new(v20);
          else
            a1 = 0;
          v21 = &v18[a1];
          v22 = &v18[a1];
          *v22 = v16;
          v17 = v22 + 1;
          if (v11 != (char *)v9)
          {
            v23 = &v11[~v9];
            do
            {
              v24 = *--v11;
              (v23--)[a1] = v24;
            }
            while (v11 != (char *)v9);
            v21 = (char *)a1;
          }
          v10 = (char *)(a1 + v20);
          *a3 = v21;
          a3[1] = v17;
          a3[2] = a1 + v20;
          if (v9)
            operator delete((void *)v9);
          v9 = (unint64_t)v21;
          v8 = a2;
        }
        else
        {
          *v11 = v16;
          v17 = v11 + 1;
        }
        a3[1] = v17;
        v11 = v17;
      }
      ++v7;
    }
    while (v7 != v12);
  }
}

void sub_1C22389C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *snlp::ssu::app::SSUFileWrapper::lookupGroup(uint64_t a1, int *a2, const void **a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  size_t v9;
  const void *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;

  v3 = *(unsigned __int16 *)((char *)a2 - *a2 + 6);
  v4 = *(unsigned int *)((char *)a2 + v3);
  v5 = (int *)((char *)a2 + v3 + v4);
  v6 = *v5;
  if (*v5)
  {
    v7 = 0;
    v8 = *((char *)a3 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a3 + 23);
    else
      v9 = (size_t)a3[1];
    if (v8 >= 0)
      v10 = a3;
    else
      v10 = *a3;
    v11 = (char *)a2 + v3 + v4;
    while (1)
    {
      v12 = v5[v7 + 1]
          + (unint64_t)*(unsigned __int16 *)&v11[v7 * 4
                                                      + 8
                                                      + v5[v7 + 1]
                                                      - (uint64_t)*(int *)((char *)&v5[v7 + 1] + v5[v7 + 1])];
      v13 = *(unsigned int *)&v11[v7 * 4 + 4 + v12];
      if (v9 == *(_DWORD *)&v11[v12 + 4 + v7 * 4 + v13] && !memcmp(v10, &v11[v7 * 4 + 8 + v12 + v13], v9))
        break;
      if (v6 == ++v7)
        return 0;
    }
    v14 = &v5[v7 + 1];
  }
  else
  {
    v14 = v5 + 1;
  }
  if (&v5[v6 + 1] == v14)
    return 0;
  else
    return (char *)v14 + *v14;
}

_QWORD *snlp::ssu::app::SSUFileWrapper::getNegativeExampleEncodedVectors@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char *Group;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned int *v10;
  int *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  int *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int *v21;
  char *v22;
  int v23;
  void *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int v32;
  _QWORD *result;
  uint64_t v34;
  void *__p[2];
  char *v36;

  Group = snlp::ssu::app::SSUFileWrapper::getGroup(a1, a2, a3);
  v6 = &Group[-*(int *)Group];
  if (*(unsigned __int16 *)v6 >= 9u && (v7 = *((unsigned __int16 *)v6 + 4)) != 0)
    v8 = &Group[v7 + *(unsigned int *)&Group[v7]];
  else
    v8 = 0;
  v9 = *(unsigned int *)v8;
  if ((_DWORD)v9)
  {
    v10 = (unsigned int *)(v8 + 4);
    v11 = (int *)SSUExample::data_as_encoded_vector((SSUExample *)&v8[*((unsigned int *)v8 + 1) + 4]);
    v12 = (unsigned int *)((char *)v11 + *(unsigned __int16 *)((char *)v11 - *v11 + 4));
    v13 = *(unsigned int *)((char *)v12 + *v12);
    __p[0] = 0;
    __p[1] = 0;
    v36 = 0;
    v34 = v13;
    std::vector<float>::reserve(__p, v13 * (unint64_t)v9);
    v14 = *(unsigned int *)v8;
    if ((_DWORD)v14)
    {
      v15 = &v10[v14];
      do
      {
        v16 = (int *)SSUExample::data_as_encoded_vector((SSUExample *)((char *)v10 + *v10));
        v17 = (unsigned int *)((char *)v16 + *(unsigned __int16 *)((char *)v16 - *v16 + 4));
        v18 = *v17;
        v20 = (int *)((char *)v17 + v18 + 4);
        v19 = *(unsigned int *)((char *)v17 + v18);
        if ((_DWORD)v19)
        {
          v21 = &v20[v19];
          v22 = (char *)__p[1];
          do
          {
            v23 = *v20;
            if (v22 >= v36)
            {
              v25 = (char *)__p[0];
              v26 = (v22 - (char *)__p[0]) >> 2;
              v27 = v26 + 1;
              if ((unint64_t)(v26 + 1) >> 62)
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              v28 = v36 - (char *)__p[0];
              if ((v36 - (char *)__p[0]) >> 1 > v27)
                v27 = v28 >> 1;
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
                v29 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v29 = v27;
              if (v29)
              {
                v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v36, v29);
                v25 = (char *)__p[0];
                v22 = (char *)__p[1];
              }
              else
              {
                v30 = 0;
              }
              v31 = &v30[4 * v26];
              *(_DWORD *)v31 = v23;
              v24 = v31 + 4;
              while (v22 != v25)
              {
                v32 = *((_DWORD *)v22 - 1);
                v22 -= 4;
                *((_DWORD *)v31 - 1) = v32;
                v31 -= 4;
              }
              __p[0] = v31;
              __p[1] = v24;
              v36 = &v30[4 * v29];
              if (v25)
                operator delete(v25);
            }
            else
            {
              *(_DWORD *)v22 = v23;
              v24 = v22 + 4;
            }
            __p[1] = v24;
            ++v20;
            v22 = (char *)v24;
          }
          while (v20 != v21);
        }
        ++v10;
      }
      while (v10 != v15);
    }
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    result = operator new(0x10uLL);
    *(_QWORD *)(a4 + 8) = result + 2;
    *(_QWORD *)(a4 + 16) = result + 2;
    *result = v9;
    result[1] = v34;
    *(_QWORD *)a4 = result;
    *(_OWORD *)(a4 + 24) = *(_OWORD *)__p;
    *(_QWORD *)(a4 + 40) = v36;
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    result = operator new(0x10uLL);
    *result = 0;
    result[1] = 0;
    *(_QWORD *)a4 = result;
    *(_QWORD *)(a4 + 8) = result + 2;
    *(_QWORD *)(a4 + 16) = result + 2;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = 0;
  }
  return result;
}

void sub_1C2238D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *snlp::ssu::app::SSUFileWrapper::getGroup(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  unsigned int v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int v16;
  std::string *v17;
  const std::string::value_type *v18;
  unsigned int *v19;
  char *result;
  std::string *v21;
  __int128 v22;
  NSObject *v23;
  std::string *v24;
  std::runtime_error *exception;
  const std::string::value_type *v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  int v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  NSObject *v36;
  std::string *v37;
  std::runtime_error *v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string buf;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = *(int **)(*(_QWORD *)a1 + 24);
  v6 = *(unsigned __int16 *)((char *)v5 - *v5 + 10);
  v7 = *(unsigned int *)((char *)v5 + v6);
  v8 = (int *)((char *)v5 + v6 + v7);
  v9 = v8 + 1;
  v10 = *v8;
  if (*v8)
  {
    v11 = 0;
    v12 = (char *)v5 + v6 + v7;
    while (1)
    {
      v13 = v8[v11 + 1];
      v14 = &v12[v11 * 4 + v13 - *(int *)((char *)&v8[v11 + 1] + v13)];
      if (*((unsigned __int16 *)v14 + 2) >= 5u && (v15 = *((unsigned __int16 *)v14 + 4)) != 0)
        v16 = v12[v11 * 4 + 4 + v13 + v15];
      else
        v16 = 0;
      if (v16 == a2)
        break;
      if (v10 == ++v11)
        goto LABEL_9;
    }
    v19 = &v8[v11 + 1];
  }
  else
  {
    v19 = v8 + 1;
  }
  if (&v9[v10] == v19)
  {
LABEL_9:
    v17 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&buf, "No such category in the SSU file: ");
    if (v4 <= 3)
      v18 = EnumNamesSSUCategoryType(void)::names[v4];
    else
      v18 = "";
    v21 = std::string::append(v17, v18);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    v23 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v24 = &v41;
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v24 = (std::string *)v41.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
      _os_log_impl(&dword_1C2196000, v23, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, &v41);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  result = snlp::ssu::app::SSUFileWrapper::lookupGroup(a1, (int *)((char *)v19 + *v19), (const void **)a3);
  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "No such group in the SSU file category ");
    if (v4 <= 3)
      v26 = EnumNamesSSUCategoryType(void)::names[v4];
    else
      v26 = "";
    v27 = std::string::append(&v39, v26);
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v29 = std::string::append(&v40, " and group ");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    v31 = *(char *)(a3 + 23);
    if (v31 >= 0)
      v32 = (const std::string::value_type *)a3;
    else
      v32 = *(const std::string::value_type **)a3;
    if (v31 >= 0)
      v33 = *(unsigned __int8 *)(a3 + 23);
    else
      v33 = *(_QWORD *)(a3 + 8);
    v34 = std::string::append(&buf, v32, v33);
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    v36 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      v37 = &v41;
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v37 = (std::string *)v41.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v37;
      _os_log_impl(&dword_1C2196000, v36, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
    }
    v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v38, &v41);
    v38->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  return result;
}

void sub_1C22390F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SSUExample::data_as_encoded_vector(SSUExample *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *((_BYTE *)this + v1[2]) == 2) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

void snlp::ssu::app::SSUFileWrapper::getNegativeExampleUtterances(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char *Group;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  int *v13;
  unsigned int *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  std::string *v22;
  std::string *v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  void *__p[2];
  std::string::size_type v28;
  std::__split_buffer<std::string> __v;

  Group = snlp::ssu::app::SSUFileWrapper::getGroup(a1, a2, a3);
  v6 = &Group[-*(int *)Group];
  if (*(unsigned __int16 *)v6 >= 9u && (v7 = *((unsigned __int16 *)v6 + 4)) != 0)
    v8 = &Group[v7 + *(unsigned int *)&Group[v7]];
  else
    v8 = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  std::vector<std::string>::reserve((std::vector<std::string> *)a4, *(unsigned int *)v8);
  v11 = *(_DWORD *)v8;
  v10 = (unsigned int *)(v8 + 4);
  v9 = v11;
  if (v11)
  {
    v12 = 4 * v9;
    do
    {
      v13 = (int *)SSUExample::data_as_utterance((SSUExample *)((char *)v10 + *v10));
      v14 = (unsigned int *)((char *)v13 + *(unsigned __int16 *)((char *)v13 - *v13 + 4));
      std::string::basic_string[abi:ne180100](__p, (char *)v14 + *v14 + 4, *(unsigned int *)((char *)v14 + *v14));
      v16 = *(_QWORD *)(a4 + 8);
      v15 = *(_QWORD *)(a4 + 16);
      if (v16 >= v15)
      {
        v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(_QWORD *)a4) >> 3);
        v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(_QWORD *)a4) >> 3);
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x555555555555555)
          v21 = 0xAAAAAAAAAAAAAAALL;
        else
          v21 = v19;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
        if (v21)
          v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>(a4 + 16, v21);
        else
          v22 = 0;
        v23 = v22 + v18;
        __v.__first_ = v22;
        __v.__begin_ = v23;
        __v.__end_cap_.__value_ = &v22[v21];
        v24 = *(_OWORD *)__p;
        v23->__r_.__value_.__r.__words[2] = v28;
        *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
        __p[1] = 0;
        v28 = 0;
        __p[0] = 0;
        __v.__end_ = v23 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &__v);
        v25 = *(_QWORD *)(a4 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v26 = SHIBYTE(v28);
        *(_QWORD *)(a4 + 8) = v25;
        if (v26 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v17 = *(_OWORD *)__p;
        *(_QWORD *)(v16 + 16) = v28;
        *(_OWORD *)v16 = v17;
        *(_QWORD *)(a4 + 8) = v16 + 24;
      }
      ++v10;
      v12 -= 4;
    }
    while (v12);
  }
}

void sub_1C22393AC(_Unwind_Exception *__p, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__split_buffer<std::string> *a7, ...)
{
  va_list __pa;

  va_start(__pa, a7);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__pa);
  _Unwind_Resume(__p);
}

uint64_t SSUExample::data_as_utterance(SSUExample *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *((_BYTE *)this + v1[2]) == 1) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

void snlp::ssu::app::SSUFileWrapper::getPositiveExamples(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *Group;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  int *v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  std::__compressed_pair<std::string *> end_cap;
  unint64_t v39;
  unsigned int *v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  int *v46;
  unsigned int *v47;
  std::vector<std::string>::pointer end;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  std::string *v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int *v66;
  std::__split_buffer<std::string> __v;
  uint64_t v68;
  std::string v69;
  std::vector<std::string> v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  void *__p[2];
  std::string *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  __int128 __dst;
  std::string::size_type v80;
  unint64_t v81;
  unint64_t *v82;

  Group = snlp::ssu::app::SSUFileWrapper::getGroup(a1, a2, a3);
  v5 = &Group[-*(int *)Group];
  if (*(unsigned __int16 *)v5 >= 7u && (v6 = *((unsigned __int16 *)v5 + 3)) != 0)
    v7 = &Group[v6 + *(unsigned int *)&Group[v6]];
  else
    v7 = 0;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  std::vector<snlp::ssu::app::SSUAppIntent>::reserve(&v76, *(unsigned int *)v7);
  v9 = (unsigned int *)(v7 + 4);
  v8 = *(unsigned int *)v7;
  if ((_DWORD)v8)
  {
    v64 = &v9[v8];
    do
    {
      v65 = v9;
      v66 = (unsigned int *)v7;
      v10 = *v9;
      v11 = (int *)((char *)v9 + v10);
      v12 = (unsigned int *)((char *)v9 + v10 + *(unsigned __int16 *)((char *)v9 + v10 - *(int *)((char *)v9 + v10) + 4));
      std::string::basic_string[abi:ne180100](__p, (char *)v12 + *v12 + 4, *(unsigned int *)((char *)v12 + *v12));
      v71 = 0;
      v72 = 0;
      v73 = 0;
      v13 = *v11;
      v14 = (unsigned int *)((char *)v11 + *(unsigned __int16 *)((char *)v11 - v13 + 6));
      v15 = *(unsigned int *)((char *)v14 + *v14);
      if ((_DWORD)v15)
      {
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v73;
        __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(v15);
        __v.__begin_ = __v.__first_;
        __v.__end_ = __v.__first_;
        __v.__end_cap_.__value_ = &__v.__first_[2 * v16];
        std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::__swap_out_circular_buffer(&v71, &__v);
        std::__split_buffer<snlp::ssu::cache::SSUCacheObjectParameter>::~__split_buffer((uint64_t)&__v);
        v13 = *v11;
      }
      v17 = *(unsigned __int16 *)((char *)v11 - v13 + 6);
      v18 = *(unsigned int *)((char *)v11 + v17);
      v19 = *(unsigned int *)((char *)v11 + v17 + v18);
      if ((_DWORD)v19)
      {
        v20 = 0;
        v21 = 4 * v19;
        v22 = (char *)v66 + v17 + v10 + v18;
        do
        {
          v23 = *(unsigned int *)&v22[v20 + 8];
          v24 = &v22[v20 + v23];
          v25 = v23 + *(unsigned __int16 *)&v22[v20 + 12 + v23 - *((int *)v24 + 2)];
          v26 = &v22[v20 + v25 + *(unsigned int *)&v22[v20 + 8 + v25]];
          std::string::basic_string[abi:ne180100](&__v, v26 + 12, *((unsigned int *)v26 + 2));
          v27 = v23 + *(unsigned __int16 *)&v22[v20 + 14 + v23 - *((int *)v24 + 2)];
          v28 = &v22[v20 + v27 + *(unsigned int *)&v22[v20 + 8 + v27]];
          std::string::basic_string[abi:ne180100](&__v.__end_cap_.__value_, v28 + 12, *((unsigned int *)v28 + 2));
          v29 = v72;
          if (v72 >= v73)
          {
            v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - v71) >> 4);
            v33 = v32 + 1;
            if (v32 + 1 > 0x555555555555555)
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)(v73 - v71) >> 4) > v33)
              v33 = 0x5555555555555556 * ((uint64_t)(v73 - v71) >> 4);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - v71) >> 4) >= 0x2AAAAAAAAAAAAAALL)
              v34 = 0x555555555555555;
            else
              v34 = v33;
            v82 = &v73;
            if (v34)
              v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(v34);
            else
              v35 = 0;
            v36 = v34 + 48 * v32;
            *(_QWORD *)&__dst = v34;
            *((_QWORD *)&__dst + 1) = v36;
            v81 = v34 + 48 * v35;
            v37 = *(_OWORD *)&__v.__first_;
            *(_QWORD *)(v36 + 16) = __v.__end_;
            *(_OWORD *)v36 = v37;
            memset(&__v, 0, 24);
            end_cap = __v.__end_cap_;
            *(_QWORD *)(v36 + 40) = v68;
            *(std::__compressed_pair<std::string *> *)(v36 + 24) = end_cap;
            __v.__end_cap_.__value_ = 0;
            v68 = 0;
            __v.__end_cap_.__value_ = 0;
            v80 = v36 + 48;
            std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::__swap_out_circular_buffer(&v71, &__dst);
            v39 = v72;
            std::__split_buffer<snlp::ssu::cache::SSUCacheObjectParameter>::~__split_buffer((uint64_t)&__dst);
            v72 = v39;
            if (SHIBYTE(v68) < 0)
              operator delete(__v.__end_cap_.__value_);
          }
          else
          {
            v30 = *(_OWORD *)&__v.__first_;
            *(_QWORD *)(v72 + 16) = __v.__end_;
            *(_OWORD *)v29 = v30;
            memset(&__v, 0, 24);
            v31 = v68;
            *(std::__compressed_pair<std::string *> *)(v29 + 24) = __v.__end_cap_;
            *(_QWORD *)(v29 + 40) = v31;
            __v.__end_cap_.__value_ = 0;
            v68 = 0;
            __v.__end_cap_.__value_ = 0;
            v72 = v29 + 48;
          }
          if (SHIBYTE(__v.__end_) < 0)
            operator delete(__v.__first_);
          v20 += 4;
        }
        while (v21 != v20);
      }
      memset(&v70, 0, sizeof(v70));
      v40 = (unsigned int *)((char *)v11 + *(unsigned __int16 *)((char *)v11 - *v11 + 8));
      std::vector<std::string>::reserve(&v70, *(unsigned int *)((char *)v40 + *v40));
      v41 = (unsigned int *)((char *)v11 + *(unsigned __int16 *)((char *)v11 - *v11 + 8));
      v42 = *v41;
      v44 = (unsigned int *)((char *)v41 + v42 + 4);
      v43 = *(unsigned int *)((char *)v41 + v42);
      if ((_DWORD)v43)
      {
        v45 = 4 * v43;
        do
        {
          v46 = (int *)SSUExample::data_as_utterance((SSUExample *)((char *)v44 + *v44));
          v47 = (unsigned int *)((char *)v46 + *(unsigned __int16 *)((char *)v46 - *v46 + 4));
          std::string::basic_string[abi:ne180100](&__dst, (char *)v47 + *v47 + 4, *(unsigned int *)((char *)v47 + *v47));
          end = v70.__end_;
          if (v70.__end_ >= v70.__end_cap_.__value_)
          {
            v50 = 0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_ - (char *)v70.__begin_) >> 3);
            v51 = v50 + 1;
            if (v50 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3) > v51)
              v51 = 0x5555555555555556 * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3) >= 0x555555555555555)
              v52 = 0xAAAAAAAAAAAAAAALL;
            else
              v52 = v51;
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v70.__end_cap_;
            if (v52)
              v53 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)&v70.__end_cap_, v52);
            else
              v53 = 0;
            v54 = v53 + v50;
            __v.__first_ = v53;
            __v.__begin_ = v54;
            __v.__end_cap_.__value_ = &v53[v52];
            v55 = __dst;
            v54->__r_.__value_.__r.__words[2] = v80;
            *(_OWORD *)&v54->__r_.__value_.__l.__data_ = v55;
            v80 = 0;
            __dst = 0uLL;
            __v.__end_ = v54 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v70, &__v);
            v56 = v70.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&__v);
            v70.__end_ = v56;
            if (SHIBYTE(v80) < 0)
              operator delete((void *)__dst);
          }
          else
          {
            v49 = __dst;
            v70.__end_->__r_.__value_.__r.__words[2] = v80;
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v49;
            v70.__end_ = end + 1;
          }
          ++v44;
          v45 -= 4;
        }
        while (v45);
      }
      if (SHIBYTE(v75) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__v, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&__v.__first_ = *(_OWORD *)__p;
        __v.__end_ = v75;
      }
      __v.__end_cap_.__value_ = 0;
      __v.__end_cap_.__value_ = 0;
      v68 = 0;
      std::vector<snlp::ssu::app::SSUAppParameter>::__init_with_size[abi:ne180100]<snlp::ssu::app::SSUAppParameter*,snlp::ssu::app::SSUAppParameter*>(&__v.__end_cap_.__value_, v71, v72, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - v71) >> 4));
      memset(&v69, 0, sizeof(v69));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v69, (__int128 *)v70.__begin_, (__int128 *)v70.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_ - (char *)v70.__begin_) >> 3));
      v57 = v77;
      if (v77 >= v78)
      {
        v59 = 0x8E38E38E38E38E39 * ((uint64_t)(v77 - v76) >> 3);
        v60 = v59 + 1;
        if (v59 + 1 > 0x38E38E38E38E38ELL)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        if (0x1C71C71C71C71C72 * ((uint64_t)(v78 - v76) >> 3) > v60)
          v60 = 0x1C71C71C71C71C72 * ((uint64_t)(v78 - v76) >> 3);
        if (0x8E38E38E38E38E39 * ((uint64_t)(v78 - v76) >> 3) >= 0x1C71C71C71C71C7)
          v61 = 0x38E38E38E38E38ELL;
        else
          v61 = v60;
        v82 = &v78;
        if (v61)
          v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::app::SSUAppIntent>>(v61);
        else
          v62 = 0;
        *(_QWORD *)&__dst = v61;
        *((_QWORD *)&__dst + 1) = v61 + 72 * v59;
        v80 = *((_QWORD *)&__dst + 1);
        v81 = v61 + 72 * v62;
        std::allocator<snlp::ssu::app::SSUAppIntent>::construct[abi:ne180100]<snlp::ssu::app::SSUAppIntent,snlp::ssu::app::SSUAppIntent>(*((uint64_t *)&__dst + 1), (__int128 *)&__v);
        v80 += 72;
        std::vector<snlp::ssu::app::SSUAppIntent>::__swap_out_circular_buffer(&v76, &__dst);
        v58 = v77;
        std::__split_buffer<snlp::ssu::app::SSUAppIntent>::~__split_buffer((uint64_t)&__dst);
      }
      else
      {
        std::allocator<snlp::ssu::app::SSUAppIntent>::construct[abi:ne180100]<snlp::ssu::app::SSUAppIntent,snlp::ssu::app::SSUAppIntent>(v77, (__int128 *)&__v);
        v58 = v57 + 72;
      }
      v77 = v58;
      *(_QWORD *)&__dst = &v69;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
      *(_QWORD *)&__dst = &__v.__end_cap_;
      std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
      if (SHIBYTE(__v.__end_) < 0)
        operator delete(__v.__first_);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v70;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v71;
      std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      if (SHIBYTE(v75) < 0)
        operator delete(__p[0]);
      v9 = v65 + 1;
      v7 = (char *)(v66 + 1);
    }
    while (v65 + 1 != v64);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  std::vector<snlp::ssu::app::SSUAppIntent>::__init_with_size[abi:ne180100]<snlp::ssu::app::SSUAppIntent*,snlp::ssu::app::SSUAppIntent*>(a4, v76, v77, 0x8E38E38E38E38E39 * ((uint64_t)(v77 - v76) >> 3));
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v76;
  std::vector<snlp::ssu::app::SSUAppIntent>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1C2239B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__split_buffer<std::string> *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33)
{
  uint64_t v33;

  a33 = (void **)(v33 - 168);
  std::vector<snlp::ssu::app::SSUAppIntent>::__destroy_vector::operator()[abi:ne180100](&a33);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<snlp::ssu::app::SSUAppIntent>::reserve(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0x8E38E38E38E38E39 * ((uint64_t)(result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::app::SSUAppIntent>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 72 * v4;
    std::vector<snlp::ssu::app::SSUAppIntent>::__swap_out_circular_buffer(v2, v5);
    return (_QWORD *)std::__split_buffer<snlp::ssu::app::SSUAppIntent>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void sub_1C2239D14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<snlp::ssu::app::SSUAppIntent>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *std::allocator<snlp::ssu::app::SSUAppIntent>::construct[abi:ne180100]<snlp::ssu::app::SSUAppIntent,snlp::ssu::app::SSUAppIntent>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  std::string *v3;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v3 = (std::string *)(a1 + 48);
  v3->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v3, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
}

void sub_1C2239DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;

  v12 = v11;
  a10 = v12;
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(a1);
}

void snlp::ssu::app::SSUAppIntent::~SSUAppIntent(void **this)
{
  void **v2;

  v2 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 3;
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

_QWORD *std::vector<snlp::ssu::app::SSUAppIntent>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const std::string::value_type **v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v14 = result;
    v15 = a2;
    v5 = 0;
    do
    {
      v6 = (const std::string::value_type **)(v2 + v5 - 72);
      if (*(char *)(v2 + v5 - 49) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v4 + v5 - 72), *v6, *(_QWORD *)(v2 + v5 - 64));
      }
      else
      {
        v7 = *(_OWORD *)v6;
        *(_QWORD *)(v4 + v5 - 56) = *(_QWORD *)(v2 + v5 - 56);
        *(_OWORD *)(v4 + v5 - 72) = v7;
      }
      v8 = v4 + v5;
      v9 = v4 + v5;
      *(_QWORD *)(v9 - 48) = 0;
      *(_QWORD *)(v9 - 40) = 0;
      *(_QWORD *)(v4 + v5 - 32) = 0;
      std::vector<snlp::ssu::app::SSUAppParameter>::__init_with_size[abi:ne180100]<snlp::ssu::app::SSUAppParameter*,snlp::ssu::app::SSUAppParameter*>((_QWORD *)(v4 + v5 - 48), *(_QWORD *)(v2 + v5 - 48), *(_QWORD *)(v2 + v5 - 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v2 + v5 - 40) - *(_QWORD *)(v2 + v5 - 48)) >> 4));
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      v10 = (std::string *)(v4 + v5 - 24);
      v10->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v10, *(__int128 **)(v2 + v5 - 24), *(__int128 **)(v2 + v5 - 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v2 + v5 - 16) - *(_QWORD *)(v2 + v5 - 24)) >> 3));
      v5 -= 72;
    }
    while (v2 + v5 != v3);
    v4 += v5;
    result = v14;
    a2 = v15;
  }
  a2[1] = v4;
  v11 = *result;
  *result = v4;
  a2[1] = v11;
  v12 = result[1];
  result[1] = a2[2];
  a2[2] = v12;
  v13 = result[2];
  result[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void sub_1C2239F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  while (v12 != v13)
  {
    std::allocator<snlp::ssu::app::SSUAppIntent>::destroy[abi:ne180100](v12);
    v12 += 72;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<snlp::ssu::app::SSUAppIntent>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    std::allocator<snlp::ssu::app::SSUAppIntent>::destroy[abi:ne180100](i - 72);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::GroupNameTransform(_QWORD *a1, _OWORD **a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = std::string::basic_string[abi:ne180100]<0>(a1, "TreeManipulation_GroupNameTransform");
  v6[3] = "group_name_transform";
  std::string::basic_string[abi:ne180100]<0>(v6 + 4, "smsGroupName");
  std::string::basic_string[abi:ne180100]<0>(a1 + 7, "personFullName");
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::IndexedToken*,nlv4_inference_orchestrator::orchestration::IndexedToken*>(a1 + 10, *a2, a2[1], 0x8E38E38E38E38E39 * (a2[1] - *a2));
  nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::getSmsGroupNameSpans((uint64_t)a1, a3, a1 + 13);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::getPersonFullNameSpans((uint64_t)a1, a3, a1 + 16);
  return a1;
}

void sub_1C223A0E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void **v4;
  va_list va;

  va_start(va, a2);
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 79) < 0)
    operator delete(*v4);
  if (*(char *)(v2 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::IndexedToken*,nlv4_inference_orchestrator::orchestration::IndexedToken*>(_QWORD *result, _OWORD *a2, _OWORD *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;

  if (a4)
  {
    if (a4 >= 0x1C71C71C71C71C8)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v6 = result;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(a4);
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[18 * v7];
    while (a2 != a3)
    {
      v8 = (_OWORD *)MEMORY[0x1C3BB8524](result, a2);
      v9 = a2[6];
      v10 = a2[8];
      v8[7] = a2[7];
      v8[8] = v10;
      v8[6] = v9;
      a2 += 9;
      result = v8 + 9;
    }
    v6[1] = result;
  }
  return result;
}

void sub_1C223A1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::getSmsGroupNameSpans(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *(_QWORD **)a2;
  v6 = *(_QWORD **)(a2 + 8);
  while (v5 != v6)
  {
    if (nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::isUVSmsGroupNameSpan(a1, v5))
    {
      std::vector<sirinluinternal::MatchingSpan>::push_back[abi:ne180100](a3, (uint64_t)v5);
    }
    v5 += 11;
  }
  v7 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(_QWORD *)(a1 + 24);
    v9 = 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3);
    v10 = 136315394;
    v11 = v8;
    v12 = 2048;
    v13 = v9;
    _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_DEBUG, "[%s] Found %lu smsGroupName matching spans", (uint8_t *)&v10, 0x16u);
  }
}

void sub_1C223A320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::getPersonFullNameSpans(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *(_QWORD **)a2;
  v6 = *(_QWORD **)(a2 + 8);
  while (v5 != v6)
  {
    if (nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::isUVPersonFullNameSpan(a1, v5))
    {
      std::vector<sirinluinternal::MatchingSpan>::push_back[abi:ne180100](a3, (uint64_t)v5);
    }
    v5 += 11;
  }
  v7 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(_QWORD *)(a1 + 24);
    v9 = 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3);
    v10 = 136315394;
    v11 = v8;
    v12 = 2048;
    v13 = v9;
    _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_DEBUG, "[%s] Found %lu personFullName matching spans", (uint8_t *)&v10, 0x16u);
  }
}

void sub_1C223A448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 88;
      v7 = v4 - 88;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 88;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = MEMORY[0x1C3BB8530](v4 - 144);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::isUVPersonFullNameSpan(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  _DWORD *v13;
  _DWORD *v14;

  v2 = (unsigned __int8 *)a2[6];
  if (!v2)
    return 0;
  v3 = v2[23];
  if ((v3 & 0x80u) == 0)
    v4 = v2[23];
  else
    v4 = *((_QWORD *)v2 + 1);
  v5 = *(unsigned __int8 *)(a1 + 79);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 64);
  if (v4 != v5)
    return 0;
  v10 = *(unsigned __int8 **)(a1 + 56);
  v8 = (unsigned __int8 *)(a1 + 56);
  v9 = v10;
  if (v6 >= 0)
    v11 = v8;
  else
    v11 = v9;
  if ((v3 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v2, v11, *((_QWORD *)v2 + 1)))
      goto LABEL_18;
    return 0;
  }
  if (v2[23])
  {
    while (*v2 == *v11)
    {
      ++v2;
      ++v11;
      if (!--v3)
        goto LABEL_18;
    }
    return 0;
  }
LABEL_18:
  v13 = (_DWORD *)a2[1];
  v14 = (_DWORD *)a2[2];
  if (v13 != v14)
  {
    while (*v13 != 2)
    {
      if (++v13 == v14)
      {
        v13 = (_DWORD *)a2[2];
        return v13 != v14;
      }
    }
  }
  return v13 != v14;
}

uint64_t std::vector<sirinluinternal::MatchingSpan>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;

  v4 = a1 + 2;
  v5 = a1[2];
  v6 = a1[1];
  if (v6 >= v5)
  {
    v9 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v6 - *a1) >> 3);
    if ((unint64_t)(v9 + 1) > 0x2E8BA2E8BA2E8BALL)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v10 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - *a1) >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x1745D1745D1745DLL)
      v12 = 0x2E8BA2E8BA2E8BALL;
    else
      v12 = v11;
    v18 = v4;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<sirinluinternal::MatchingSpan>>(v12);
    else
      v13 = 0;
    v14 = v12;
    v15 = v12 + 88 * v9;
    v17 = v12 + 88 * v13;
    MEMORY[0x1C3BB847C](v15, a2);
    v16 = v15 + 88;
    std::vector<sirinluinternal::MatchingSpan>::__swap_out_circular_buffer(a1, &v14);
    v8 = a1[1];
    result = std::__split_buffer<sirinluinternal::MatchingSpan>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    result = MEMORY[0x1C3BB847C]();
    v8 = result + 88;
  }
  a1[1] = v8;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<sirinluinternal::MatchingSpan>>(unint64_t a1)
{
  if (a1 >= 0x2E8BA2E8BA2E8BBLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(88 * a1);
}

uint64_t std::vector<sirinluinternal::MatchingSpan>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  result = a2[1];
  while (v4 != v5)
  {
    v4 -= 88;
    result = MEMORY[0x1C3BB8470](result - 88, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<sirinluinternal::MatchingSpan>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 88);
    *(_QWORD *)(a1 + 16) = i - 88;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::isUVSmsGroupNameSpan(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  _DWORD *v13;
  _DWORD *v14;

  v2 = (unsigned __int8 *)a2[6];
  if (!v2)
    return 0;
  v3 = v2[23];
  if ((v3 & 0x80u) == 0)
    v4 = v2[23];
  else
    v4 = *((_QWORD *)v2 + 1);
  v5 = *(unsigned __int8 *)(a1 + 55);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 40);
  if (v4 != v5)
    return 0;
  v10 = *(unsigned __int8 **)(a1 + 32);
  v8 = (unsigned __int8 *)(a1 + 32);
  v9 = v10;
  if (v6 >= 0)
    v11 = v8;
  else
    v11 = v9;
  if ((v3 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v2, v11, *((_QWORD *)v2 + 1)))
      goto LABEL_18;
    return 0;
  }
  if (v2[23])
  {
    while (*v2 == *v11)
    {
      ++v2;
      ++v11;
      if (!--v3)
        goto LABEL_18;
    }
    return 0;
  }
LABEL_18:
  v13 = (_DWORD *)a2[1];
  v14 = (_DWORD *)a2[2];
  if (v13 != v14)
  {
    while (*v13 != 2)
    {
      if (++v13 == v14)
      {
        v13 = (_DWORD *)a2[2];
        return v13 != v14;
      }
    }
  }
  return v13 != v14;
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::getDescription(nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::transform(nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  std::string *v6;
  std::string::pointer data;
  nlv4_inference_orchestrator::trees::TreeNode *v8;
  BOOL v10;
  nlv4_inference_orchestrator::trees::TreeNode *v11;
  _OWORD v12[2];
  __int128 v13;

  if (*((_QWORD *)this + 13) == *((_QWORD *)this + 14))
    return 0;
  v13 = 0u;
  memset(v12, 0, sizeof(v12));
  v11 = a2;
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(v12, &v11);
  v3 = *((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    LOBYTE(v4) = 0;
    do
    {
      v5 = v3 - 1;
      v6 = *(std::string **)(*(_QWORD *)(*((_QWORD *)&v12[0] + 1)
                                       + (((unint64_t)(v13 + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * ((v13 + v5) & 0x1FF));
      *((_QWORD *)&v13 + 1) = v5;
      std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::__maybe_remove_back_spare[abi:ne180100](v12);
      v10 = 0;
      nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::transformTreeNode(this, v6, &v10);
      v4 |= v10;
      v8 = (nlv4_inference_orchestrator::trees::TreeNode *)v6[3].__r_.__value_.__r.__words[2];
      data = v6[4].__r_.__value_.__l.__data_;
      while (v8 != (nlv4_inference_orchestrator::trees::TreeNode *)data)
      {
        v11 = v8;
        std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(v12, &v11);
        v8 = (nlv4_inference_orchestrator::trees::TreeNode *)((char *)v8 + 144);
      }
      v3 = *((_QWORD *)&v13 + 1);
    }
    while (*((_QWORD *)&v13 + 1));
  }
  else
  {
    v4 = 0;
  }
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_1C223AA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t i;
  _QWORD *v78;
  char *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = ((v4 - v5) << 6) - 1;
  v8 = a1[4];
  v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x200)
    {
      a1[4] = v8 - 512;
      v12 = *(_QWORD *)v5;
      v10 = v5 + 8;
      v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v4[-*a1] >> 2;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v4 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v14 = v13 >> 3;
          v15 = v13 >> 3 < -1;
          v16 = (v13 >> 3) + 2;
          if (v15)
            v17 = v16;
          else
            v17 = v14 + 1;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v10[-8 * v19];
          v21 = v4 - v10;
          if (v4 == v10)
          {
            v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            v22 = (char *)a1[1];
          }
          v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(_QWORD *)v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    v23 = v6 >> 3;
    v24 = (char *)a1[3];
    v25 = (char *)*a1;
    v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      v27 = operator new(0x1000uLL);
      v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5)
            v51 = 1;
          else
            v51 = v26 >> 2;
          v52 = 2 * v51;
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v51);
          v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v5;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = v5;
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v28;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v96 = 1;
            else
              v96 = (uint64_t)&v63[-*a1] >> 2;
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            v63 = v99;
            v101 = a1[2] - (_QWORD)v100;
            if (v101)
            {
              v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                v104 = *v100++;
                *(_QWORD *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v15 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v15)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25)
      v29 = 1;
    else
      v29 = v26 >> 2;
    v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v29);
    v32 = v31;
    v33 = &v30[8 * v23];
    *(_QWORD *)&v34 = v30;
    *((_QWORD *)&v34 + 1) = v33;
    v109 = v34;
    v35 = operator new(0x1000uLL);
    *(_QWORD *)&v36 = v33;
    *((_QWORD *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      v37 = 8 * v23;
      *(_QWORD *)&v38 = v109;
      if (v6 >= 1)
      {
        v39 = v37 >> 3;
        if (v39 >= -1)
          v40 = v39 + 1;
        else
          v40 = v39 + 2;
        v33 -= 8 * (v40 >> 1);
        *(_QWORD *)&v36 = v33;
        *((_QWORD *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      v73 = v37 >> 2;
      if (v4 == v5)
        v74 = 1;
      else
        v74 = v73;
      v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v74);
      v33 = &v75[8 * (v74 >> 2)];
      *(_QWORD *)&v38 = v75;
      *((_QWORD *)&v38 + 1) = v33;
      *(_QWORD *)&v36 = v33;
      *((_QWORD *)&v36 + 1) = &v75[8 * v76];
      if (!v30)
        goto LABEL_56;
      v106 = v36;
      v109 = v38;
      operator delete(v30);
      v36 = v106;
    }
    v38 = v109;
LABEL_56:
    *(_QWORD *)v33 = v35;
    *(_QWORD *)&v36 = v36 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v78 = (_QWORD *)*((_QWORD *)&v38 + 1);
      if (*((_QWORD *)&v38 + 1) == (_QWORD)v38)
      {
        v80 = (_BYTE *)v36;
        if ((unint64_t)v36 >= *((_QWORD *)&v36 + 1))
        {
          if (*((_QWORD *)&v36 + 1) == *((_QWORD *)&v38 + 1))
            v85 = 1;
          else
            v85 = (uint64_t)(*((_QWORD *)&v36 + 1) - *((_QWORD *)&v38 + 1)) >> 2;
          v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v85);
          v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          v88 = v79;
          v89 = v80 - (_BYTE *)v78;
          if (v80 != (_BYTE *)v78)
          {
            v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            v90 = 8 * (v89 >> 3);
            v91 = v79;
            v92 = v78;
            do
            {
              v93 = *v92++;
              *(_QWORD *)v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(_QWORD *)&v38 = v86;
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = v88;
          *((_QWORD *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            v107 = v36;
            v111 = v38;
            operator delete(v78);
            v36 = v107;
            v38 = v111;
          }
        }
        else
        {
          v81 = (uint64_t)(*((_QWORD *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1)
            v82 = v81 + 1;
          else
            v82 = v81 + 2;
          v83 = v82 >> 1;
          v84 = v36 + 8 * (v82 >> 1);
          v79 = (char *)(v84 - (v36 - *((_QWORD *)&v38 + 1)));
          if ((_QWORD)v36 == *((_QWORD *)&v38 + 1))
          {
            v80 = (_BYTE *)*((_QWORD *)&v38 + 1);
          }
          else
          {
            v108 = *((_QWORD *)&v36 + 1);
            v110 = v38;
            memmove((void *)(v84 - (v36 - *((_QWORD *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((_QWORD *)&v38 + 1));
            *((_QWORD *)&v36 + 1) = v108;
            *(_QWORD *)&v38 = v110;
          }
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = &v80[8 * v83];
        }
      }
      else
      {
        v79 = (char *)*((_QWORD *)&v38 + 1);
      }
      v94 = *(_QWORD *)(i - 8);
      *((_QWORD *)v79 - 1) = v94;
      *((_QWORD *)&v38 + 1) -= 8;
    }
    v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95)
      operator delete(v95);
    goto LABEL_83;
  }
LABEL_84:
  *(_QWORD *)(*(_QWORD *)&v5[(v9 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v9 & 0x1FF)) = *a2;
  ++a1[5];
}

void sub_1C223AFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

void std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v1 = a1[2];
  if (v1 == v2)
    v3 = 0;
  else
    v3 = ((v1 - v2) << 6) - 1;
  if ((unint64_t)(v3 - (a1[5] + a1[4])) >= 0x400)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::transformTreeNode(nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform *this, std::string *a2, BOOL *a3)
{
  const nlv4_inference_orchestrator::trees::TreeNode *v6;
  const nlv4_inference_orchestrator::trees::TreeNode *i;
  const sirinluinternal::MatchingSpan *v8;
  const sirinluinternal::MatchingSpan *v9;
  NSObject *v10;
  _BOOL8 doesCharacterRangeMatch;
  uint64_t v12;
  const sirinluinternal::MatchingSpan *v13;
  const sirinluinternal::MatchingSpan *v14;
  uint64_t v15;
  const std::string *v16;
  NSObject *v17;
  std::string *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  std::string *v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  if (nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::isCommonPersonOrAgentNode((nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform *)a2, (const nlv4_inference_orchestrator::trees::TreeNode *)a2))
  {
    v6 = (const nlv4_inference_orchestrator::trees::TreeNode *)a2[3].__r_.__value_.__r.__words[2];
    for (i = (const nlv4_inference_orchestrator::trees::TreeNode *)a2[4].__r_.__value_.__l.__data_;
          v6 != i;
          v6 = (const nlv4_inference_orchestrator::trees::TreeNode *)((char *)v6 + 144))
    {
      v9 = (const sirinluinternal::MatchingSpan *)*((_QWORD *)this + 13);
      v8 = (const sirinluinternal::MatchingSpan *)*((_QWORD *)this + 14);
      while (v9 != v8)
      {
        if (nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::doesCharacterRangeMatch(this, v9, v6))
        {
          v10 = SNLPOSLoggerForCategory(1);
          doesCharacterRangeMatch = os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG);
          if (doesCharacterRangeMatch)
          {
            v12 = *((_QWORD *)this + 3);
            *(_DWORD *)buf = 136315138;
            v24 = v12;
            _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_DEBUG, "[%s] Found an smsGroupName span that matches a common_Person or common_Agent node", buf, 0xCu);
          }
          v14 = (const sirinluinternal::MatchingSpan *)*((_QWORD *)this + 16);
          v13 = (const sirinluinternal::MatchingSpan *)*((_QWORD *)this + 17);
          while (v14 != v13)
          {
            doesCharacterRangeMatch = nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::doesCharacterRangeMatch(this, v14, v6);
            if (doesCharacterRangeMatch)
            {
              v21 = SNLPOSLoggerForCategory(1);
              if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
              {
                v22 = *((_QWORD *)this + 3);
                *(_DWORD *)buf = 136315138;
                v24 = v22;
                _os_log_impl(&dword_1C2196000, v21, OS_LOG_TYPE_DEBUG, "[%s] Found a personFullName span that matches a common_Person or common_Agent node, so skipping group_name_transform", buf, 0xCu);
              }
              goto LABEL_21;
            }
            v14 = (const sirinluinternal::MatchingSpan *)((char *)v14 + 88);
          }
          v15 = siri::ontology::oname::graph::ontology_init::common_Group((siri::ontology::oname::graph::ontology_init *)doesCharacterRangeMatch);
          v16 = (const std::string *)(v15 + 8);
          v17 = SNLPOSLoggerForCategory(1);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
          {
            if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v18 = a2;
            else
              v18 = (std::string *)a2->__r_.__value_.__r.__words[0];
            v19 = v15 + 8;
            if (*(char *)(v15 + 31) < 0)
              v19 = v16->__r_.__value_.__r.__words[0];
            v20 = *((_QWORD *)this + 3);
            *(_DWORD *)buf = 136315650;
            v24 = v20;
            v25 = 2080;
            v26 = v18;
            v27 = 2080;
            v28 = v19;
            _os_log_impl(&dword_1C2196000, v17, OS_LOG_TYPE_DEBUG, "[%s] Replacing the node label \"%s\" with \"%s\"", buf, 0x20u);
          }
          std::string::operator=(a2, v16);
          *a3 = 1;
          break;
        }
        v9 = (const sirinluinternal::MatchingSpan *)((char *)v9 + 88);
      }
LABEL_21:
      ;
    }
  }
}

uint64_t std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::isCommonPersonOrAgentNode(nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform *this, const nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  char v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  char v34;
  BOOL v35;
  _BOOL4 v36;

  v2 = this;
  v3 = siri::ontology::oname::graph::ontology_init::common_Person(this);
  v4 = *((unsigned __int8 *)v2 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = *((unsigned __int8 *)v2 + 23);
  else
    v5 = *((_QWORD *)v2 + 1);
  v6 = *(unsigned __int8 *)(v3 + 31);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(v3 + 16);
  if (v5 == v6)
  {
    v9 = *(unsigned __int8 **)(v3 + 8);
    v3 += 8;
    v8 = v9;
    if (v7 >= 0)
      v10 = (unsigned __int8 *)v3;
    else
      v10 = v8;
    if ((v4 & 0x80) != 0)
    {
      v3 = memcmp(*(const void **)v2, v10, *((_QWORD *)v2 + 1));
      v19 = v3 == 0;
    }
    else if (*((_BYTE *)v2 + 23))
    {
      v11 = v4 - 1;
      v12 = v2;
      do
      {
        v14 = *(unsigned __int8 *)v12;
        v12 = (nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform *)((char *)v12 + 1);
        v13 = v14;
        v16 = *v10++;
        v15 = v16;
        v17 = v11-- != 0;
        v18 = v17;
        v19 = v13 == v15;
      }
      while (v13 == v15 && (v18 & 1) != 0);
    }
    else
    {
      v19 = 1;
    }
  }
  else
  {
    v19 = 0;
  }
  v20 = siri::ontology::oname::graph::ontology_init::common_Agent((siri::ontology::oname::graph::ontology_init *)v3);
  v21 = *((unsigned __int8 *)v2 + 23);
  if ((v21 & 0x80u) == 0)
    v22 = *((unsigned __int8 *)v2 + 23);
  else
    v22 = *((_QWORD *)v2 + 1);
  v23 = *(unsigned __int8 *)(v20 + 31);
  v24 = (char)v23;
  if ((v23 & 0x80u) != 0)
    v23 = *(_QWORD *)(v20 + 16);
  if (v22 == v23)
  {
    v27 = *(unsigned __int8 **)(v20 + 8);
    v25 = (unsigned __int8 *)(v20 + 8);
    v26 = v27;
    if (v24 >= 0)
      v28 = v25;
    else
      v28 = v26;
    if ((v21 & 0x80) != 0)
    {
      v36 = memcmp(*(const void **)v2, v28, *((_QWORD *)v2 + 1)) == 0;
    }
    else if (*((_BYTE *)v2 + 23))
    {
      v29 = v21 - 1;
      do
      {
        v31 = *(unsigned __int8 *)v2;
        v2 = (nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform *)((char *)v2 + 1);
        v30 = v31;
        v33 = *v28++;
        v32 = v33;
        v17 = v29-- != 0;
        v34 = v17;
        v35 = v30 == v32;
        v36 = v30 == v32;
      }
      while (v35 && (v34 & 1) != 0);
    }
    else
    {
      v36 = 1;
    }
  }
  else
  {
    v36 = 0;
  }
  return v19 | v36;
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::doesCharacterRangeMatch(nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform *this, const sirinluinternal::MatchingSpan *a2, const nlv4_inference_orchestrator::trees::TreeNode *a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *((unsigned int *)a2 + 19);
  v4 = *((_QWORD *)this + 10);
  v5 = 0x8E38E38E38E38E39 * ((*((_QWORD *)this + 11) - v4) >> 4);
  if (v5 <= v3 || (v6 = (*((_DWORD *)a2 + 18) - 1), v5 <= v6))
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
  return *((_QWORD *)a3 + 9) == *(_QWORD *)(v4 + 144 * v3 + 112)
      && *((_QWORD *)a3 + 10) == *(_QWORD *)(v4 + 144 * v6 + 120);
}

uint64_t snlp::common::text_uso_graph::UsoGraphWithAliases::constUsoGraph@<X0>(snlp::common::text_uso_graph::UsoGraphWithAliases *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;

  v4 = operator new();
  v7 = 0;
  v8 = 0;
  MEMORY[0x1C3BB9154](v4, &v7);
  *a2 = v4;
  v5 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  return std::unique_ptr<siri::ontology::UsoGraph const>::reset[abi:ne180100](a2, v5);
}

void sub_1C223B5A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10A0C403D23BABBLL);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<siri::ontology::UsoGraph const>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x1C3BB916C]();
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

uint64_t snlp::common::text_uso_graph::UsoGraphWithAliases::protobufGraph(siri::ontology::UsoGraphProtoWriter **this, const UsoGraph *a2)
{
  return siri::ontology::UsoGraphProtoWriter::toProtobuf(*this, a2);
}

void snlp::common::text_uso_graph::readUsoGraphFromText(_QWORD *a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  float *v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  unsigned __int8 **v20;
  unsigned __int8 *i;
  unint64_t v22;
  _QWORD *v23;
  std::string *v24;
  __int128 v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::runtime_error *exception;
  _QWORD *v41;
  uint64_t *v43;
  std::string v44;
  _OWORD v45[30];
  _QWORD v46[2];
  _QWORD v47[2];
  std::__shared_weak_count *v48;
  uint64_t v49;
  void *v50;
  char v51;
  char v52;
  void *v53;
  void *v54;
  _QWORD v55[2];
  unsigned __int8 *v56;
  int v57;

  v5 = (std::__shared_weak_count *)a1[1];
  v46[0] = *a1;
  v46[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  snlp::common::text_uso_graph::UsoGraphTextTreeParser::UsoGraphTextTreeParser((uint64_t)v47, v46, 1, 0);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  memset(v45, 0, sizeof(v45));
  snlp::common::text_uso_graph::SpacedTextTreeLexer::SpacedTextTreeLexer((snlp::common::text_uso_graph::SpacedTextTreeLexer *)v45);
  if (!snlp::common::text_uso_graph::SpacedTextTreeLexer::lex((uint64_t)v45, a2, (uint64_t)v47))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v44);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9D88;
  }
  v10 = v49;
  v11 = v55[1];
  v49 = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_QWORD *)a3 = v10;
  *(_DWORD *)(a3 + 40) = v57;
  v12 = (float *)(a3 + 40);
  *(_OWORD *)(a3 + 24) = 0u;
  v43 = (uint64_t *)(a3 + 8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a3 + 8, v11);
  v13 = v56;
  if (v56)
  {
    v14 = (_QWORD *)(a3 + 32);
    v41 = (_QWORD *)(a3 + 24);
    do
    {
      v15 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v14, (uint64_t)(v13 + 16));
      v16 = v15;
      v17 = *(_QWORD *)(a3 + 16);
      if (v17)
      {
        v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
        v18.i16[0] = vaddlv_u8(v18);
        v19 = v18.u32[0];
        if (v18.u32[0] > 1uLL)
        {
          v3 = v15;
          if (v15 >= v17)
            v3 = v15 % v17;
        }
        else
        {
          v3 = (v17 - 1) & v15;
        }
        v20 = *(unsigned __int8 ***)(*v43 + 8 * v3);
        if (v20)
        {
          for (i = *v20; i; i = *(unsigned __int8 **)i)
          {
            v22 = *((_QWORD *)i + 1);
            if (v22 == v16)
            {
              if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v12, i + 16, v13 + 16) & 1) != 0)
                goto LABEL_53;
            }
            else
            {
              if (v19 > 1)
              {
                if (v22 >= v17)
                  v22 %= v17;
              }
              else
              {
                v22 &= v17 - 1;
              }
              if (v22 != v3)
                break;
            }
          }
        }
      }
      v23 = operator new(0x30uLL);
      *v23 = 0;
      v23[1] = v16;
      v24 = (std::string *)(v23 + 2);
      if ((char)v13[39] < 0)
      {
        std::string::__init_copy_ctor_external(v24, *((const std::string::value_type **)v13 + 2), *((_QWORD *)v13 + 3));
      }
      else
      {
        v25 = *((_OWORD *)v13 + 1);
        v23[4] = *((_QWORD *)v13 + 4);
        *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
      }
      v23[5] = *((_QWORD *)v13 + 5);
      v26 = (float)(unint64_t)(*v14 + 1);
      v27 = *v12;
      if (!v17 || (float)(v27 * (float)v17) < v26)
      {
        v28 = (v17 & (v17 - 1)) != 0;
        if (v17 < 3)
          v28 = 1;
        v29 = v28 | (2 * v17);
        v30 = vcvtps_u32_f32(v26 / v27);
        if (v29 <= v30)
          v31 = v30;
        else
          v31 = v29;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>((uint64_t)v43, v31);
        v17 = *(_QWORD *)(a3 + 16);
        if ((v17 & (v17 - 1)) != 0)
        {
          if (v16 >= v17)
            v3 = v16 % v17;
          else
            v3 = v16;
        }
        else
        {
          v3 = (v17 - 1) & v16;
        }
      }
      v32 = *v43;
      v33 = *(_QWORD **)(*v43 + 8 * v3);
      if (v33)
      {
        *v23 = *v33;
      }
      else
      {
        *v23 = *v41;
        *v41 = v23;
        *(_QWORD *)(v32 + 8 * v3) = v41;
        if (!*v23)
          goto LABEL_52;
        v34 = *(_QWORD *)(*v23 + 8);
        if ((v17 & (v17 - 1)) != 0)
        {
          if (v34 >= v17)
            v34 %= v17;
        }
        else
        {
          v34 &= v17 - 1;
        }
        v33 = (_QWORD *)(*v43 + 8 * v34);
      }
      *v33 = v23;
LABEL_52:
      ++*v14;
LABEL_53:
      v13 = *(unsigned __int8 **)v13;
    }
    while (v13);
  }
  snlp::common::text_uso_graph::SpacedTextTreeLexer::~SpacedTextTreeLexer((std::locale *)v45);
  v47[0] = &off_1E7BE9D38;
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)v55);
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
  if (v52 && v51 < 0)
    operator delete(v50);
  v35 = v49;
  v49 = 0;
  if (v35)
  {
    v36 = MEMORY[0x1C3BB916C]();
    MEMORY[0x1C3BB9B44](v36, 0x10A0C403D23BABBLL);
  }
  v37 = v48;
  if (v48)
  {
    v38 = (unint64_t *)&v48->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_1C223BA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *__p, uint64_t a6, int a7, __int16 a8, char a9, char a10, ...)
{
  void *v10;
  int v11;
  uint64_t v12;
  va_list va;

  va_start(va, a10);
  if (a10 < 0)
  {
    operator delete(__p);
    if ((v11 & 1) == 0)
    {
LABEL_6:
      snlp::common::text_uso_graph::SpacedTextTreeLexer::~SpacedTextTreeLexer((std::locale *)va);
      snlp::common::text_uso_graph::UsoGraphTextTreeParser::~UsoGraphTextTreeParser((snlp::common::text_uso_graph::UsoGraphTextTreeParser *)(v12 - 248));
      _Unwind_Resume(a1);
    }
  }
  else if (!v11)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v10);
  goto LABEL_6;
}

snlp::common::text_uso_graph::SpacedTextTreeLexer *snlp::common::text_uso_graph::SpacedTextTreeLexer::SpacedTextTreeLexer(snlp::common::text_uso_graph::SpacedTextTreeLexer *this)
{
  *(_QWORD *)this = &off_1E7BE9CC8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 32), "^ *\"(.*)\"");
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)this + 4, "^ *(\\d+)");
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 160), "^ *([a-zA-Z0-9:_]+)");
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 224), "^ *:([a-zA-Z0-9:_]+)");
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)this + 12, "^ *\\n( *)");
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 352), "^ */ *([a-zA-Z0-9:_]+)");
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)((char *)this + 416), "^ *\\[(\\d+):(\\d+)\\]");
  return this;
}

void sub_1C223BC10(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::locale *v2;
  std::locale *v3;
  std::locale *v4;
  std::locale *v5;
  std::locale *v6;
  std::locale *v7;
  void **v8;

  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v1 + 392);
  std::locale::~locale(v7);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v1 + 328);
  std::locale::~locale(v6);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v1 + 264);
  std::locale::~locale(v5);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v1 + 200);
  std::locale::~locale(v4);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v1 + 136);
  std::locale::~locale(v3);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v1 + 72);
  std::locale::~locale(v2);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v8);
  _Unwind_Resume(a1);
}

void sub_1C223BCAC()
{
  JUMPOUT(0x1C223BC84);
}

void sub_1C223BCB4()
{
  JUMPOUT(0x1C223BC94);
}

void snlp::common::text_uso_graph::SpacedTextTreeLexer::~SpacedTextTreeLexer(std::locale *this)
{
  std::locale *v2;

  this->__locale_ = (std::locale::__imp *)&off_1E7BE9CC8;
  v2 = this + 52;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&this[57]);
  std::locale::~locale(v2);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&this[49]);
  std::locale::~locale(this + 44);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&this[41]);
  std::locale::~locale(this + 36);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&this[33]);
  std::locale::~locale(this + 28);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&this[25]);
  std::locale::~locale(this + 20);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&this[17]);
  std::locale::~locale(this + 12);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&this[9]);
  std::locale::~locale(this + 4);
  if (SHIBYTE(this[3].__locale_) < 0)
    operator delete(this[1].__locale_);
}

void snlp::common::text_uso_graph::UsoGraphTextTreeParser::~UsoGraphTextTreeParser(snlp::common::text_uso_graph::UsoGraphTextTreeParser *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E7BE9D38;
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 112);
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  if (*((_BYTE *)this + 72) && *((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)this + 5);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

void snlp::common::text_uso_graph::UsoGraphTextTreeParseError::~UsoGraphTextTreeParseError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t snlp::common::text_uso_graph::readUserDialogActFromText@<X0>(_QWORD *a1@<X0>, const std::string *a2@<X1>, uint64_t *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::runtime_error *exception;
  std::string v19;
  _OWORD v20[30];
  _QWORD v21[2];
  uint64_t (**v22)();
  void *v23[9];
  char v24;
  char v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::locale v28;
  std::__shared_weak_count *v29;

  v5 = (std::__shared_weak_count *)a1[1];
  v21[0] = *a1;
  v21[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  snlp::common::text_uso_graph::UDATextTreeParser::UDATextTreeParser((uint64_t)&v22, v21);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  memset(v20, 0, sizeof(v20));
  snlp::common::text_uso_graph::SpacedTextTreeLexer::SpacedTextTreeLexer((snlp::common::text_uso_graph::SpacedTextTreeLexer *)v20);
  if (!snlp::common::text_uso_graph::SpacedTextTreeLexer::lex((uint64_t)v20, a2, (uint64_t)&v22))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v19);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9D10;
  }
  snlp::common::text_uso_graph::UDATextTreeParser::releaseUserDialogAct((snlp::common::text_uso_graph::UDATextTreeParser *)&v22, a3);
  snlp::common::text_uso_graph::SpacedTextTreeLexer::~SpacedTextTreeLexer((std::locale *)v20);
  v22 = off_1E7BE9C78;
  v10 = v29;
  if (v29)
  {
    v11 = (unint64_t *)&v29->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::locale::~locale(&v28);
  v13 = v27;
  if (v27)
  {
    v14 = (unint64_t *)&v27->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v26;
  v26 = 0;
  if (v16)
    std::default_delete<snlp::common::text_uso_graph::UsoGraphTextTreeParser>::operator()[abi:ne180100](v16);
  if (v25 && v24 < 0)
    operator delete(v23[7]);
  return std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)v23);
}

void sub_1C223C044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16)
{
  void *v16;
  int v17;
  uint64_t v18;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      snlp::common::text_uso_graph::SpacedTextTreeLexer::~SpacedTextTreeLexer(&a16);
      snlp::common::text_uso_graph::UDATextTreeParser::~UDATextTreeParser((snlp::common::text_uso_graph::UDATextTreeParser *)(v18 - 232));
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void std::default_delete<snlp::common::text_uso_graph::UsoGraphTextTreeParser>::operator()[abi:ne180100](uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E7BE9D38;
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table(a1 + 112);
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  if (*(_BYTE *)(a1 + 72) && *(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)(a1 + 40));
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](a1 + 8);
  JUMPOUT(0x1C3BB9B44);
}

void snlp::common::text_uso_graph::UDATextTreeParser::~UDATextTreeParser(snlp::common::text_uso_graph::UDATextTreeParser *this)
{
  std::locale *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E7BE9C78;
  v2 = (std::locale *)((char *)this + 120);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 160);
  std::locale::~locale(v2);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    std::default_delete<snlp::common::text_uso_graph::UsoGraphTextTreeParser>::operator()[abi:ne180100](v3);
  if (*((_BYTE *)this + 88) && *((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 8);
}

void snlp::common::text_uso_graph::UDATextTreeParseError::~UDATextTreeParseError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1C3BB9B44);
}

void uaap::TimeHandler::~TimeHandler(uaap::TimeHandler *this)
{
  JUMPOUT(0x1C3BB9B44);
}

_QWORD *uaap::TimeHandler::handle(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  _QWORD *result;

  result = (_QWORD *)DDResultHasType();
  if ((_DWORD)result)
  {
    uaap::mapTimeSpansToItemizedUsos(a3, a4);
    return uaap::mapTimeSpanSpansToItemizedUsos(a3, a4);
  }
  return result;
}

_QWORD *uaap::mapTimeSpansToItemizedUsos(uint64_t a1, char **a2)
{
  CFHashCode v4;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  siri::ontology::UsoEntityNode *v10;
  uaap::UPDDDateTimeBaseSpan *v11;
  siri::ontology::oname::graph::ontology_init *v12;
  uint64_t v13;
  uint64_t v14;
  uaap::UPDDDateTimeBaseSpan *v15;
  siri::ontology::oname::graph::ontology_init *v16;
  uint64_t v17;
  uint64_t v18;
  uaap::UPDDTimeSpan *v19;
  siri::ontology::oname::graph::ontology_init *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uaap::UPDDTimeSpan *v26;
  uaap::UPDDDateTimeBaseSpan *v27;
  uaap::UPDDDateTimeBaseSpan *v28;
  uint64_t v29;
  int v30;

  v4 = CFHash(CFSTR("Time"));
  result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v4);
  if (result)
  {
    v6 = result;
    v8 = result[3];
    v7 = result[4];
    if (v7 != v8)
    {
      v9 = 0;
      do
      {
        result = *(_QWORD **)(v8 + 8 * v9);
        if (result)
        {
          if (result)
          {
            v10 = (siri::ontology::UsoEntityNode *)result;
            v11 = (uaap::UPDDDateTimeBaseSpan *)operator new();
            v29 = 0;
            v30 = 0;
            v12 = (siri::ontology::oname::graph::ontology_init *)MEMORY[0x1C3BB9154](v11, &v29);
            v28 = v11;
            v13 = *((_QWORD *)v11 + 11);
            v14 = siri::ontology::oname::graph::ontology_init::Argument_entity(v12);
            uaap::TimeHandler::resolveRecurringTime((uint64_t)v10, v11, v13, v14);
            uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v28, a2);
            v15 = (uaap::UPDDDateTimeBaseSpan *)operator new();
            v29 = 0;
            v30 = 0;
            v16 = (siri::ontology::oname::graph::ontology_init *)MEMORY[0x1C3BB9154](v15, &v29);
            v27 = v15;
            v17 = *((_QWORD *)v15 + 11);
            v18 = siri::ontology::oname::graph::ontology_init::Argument_entity(v16);
            uaap::TimeHandler::resolveTimeWithDateTimeRange(v10, v15, v17, v18);
            uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v27, a2);
            v19 = (uaap::UPDDTimeSpan *)operator new();
            v29 = 0;
            v30 = 0;
            v20 = (siri::ontology::oname::graph::ontology_init *)MEMORY[0x1C3BB9154](v19, &v29);
            v26 = v19;
            v21 = *((_QWORD *)v19 + 11);
            v22 = siri::ontology::oname::graph::ontology_init::Argument_entity(v20);
            uaap::TimeHandler::resolveTime(v10, v19, v21, v22);
            uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v26, a2);
            uaap::mapNowAndTimeOffsetToItemizedUsos((uint64_t)v10, a2);
            uaap::mapMinutesBeforeToItemizedUsos((uint64_t)v10, a2);
            if (v26)
            {
              v23 = MEMORY[0x1C3BB916C]();
              MEMORY[0x1C3BB9B44](v23, 0x10A0C403D23BABBLL);
            }
            if (v27)
            {
              v24 = MEMORY[0x1C3BB916C]();
              MEMORY[0x1C3BB9B44](v24, 0x10A0C403D23BABBLL);
            }
            result = v28;
            if (v28)
            {
              v25 = MEMORY[0x1C3BB916C]();
              result = (_QWORD *)MEMORY[0x1C3BB9B44](v25, 0x10A0C403D23BABBLL);
            }
            v8 = v6[3];
            v7 = v6[4];
          }
        }
        ++v9;
      }
      while (v9 < (v7 - v8) >> 3);
    }
  }
  return result;
}

void sub_1C223C464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  MEMORY[0x1C3BB9B44](v3, 0x10A0C403D23BABBLL);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)va);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

_QWORD *uaap::mapTimeSpanSpansToItemizedUsos(uint64_t a1, char **a2)
{
  CFHashCode v4;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  siri::ontology::oname::graph::ontology_init *v10;
  uaap::UPDDTimeSpan *v11;
  siri::ontology::oname::graph::ontology_init *v12;
  uint64_t v13;
  uint64_t v14;
  uaap::UPDDTimeSpan *v15;
  siri::ontology::UsoGraph *v16;
  siri::ontology::UsoGraph **v17;
  siri::ontology::UsoEntityNode *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  siri::ontology::UsoGraph **v22;
  uaap::UPDDTimeSpan *v23;
  uaap::UPDDTimeSpan *v24;
  uint64_t v25;
  int v26;

  v4 = CFHash(CFSTR("TimeSpan"));
  result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v4);
  if (result)
  {
    v6 = result;
    v8 = result[3];
    v7 = result[4];
    if (v7 != v8)
    {
      v9 = 0;
      do
      {
        result = *(_QWORD **)(v8 + 8 * v9);
        if (result)
        {
          if (result)
          {
            v10 = (siri::ontology::oname::graph::ontology_init *)result;
            v11 = (uaap::UPDDTimeSpan *)operator new();
            v25 = 0;
            v26 = 0;
            v12 = (siri::ontology::oname::graph::ontology_init *)MEMORY[0x1C3BB9154](v11, &v25);
            v24 = v11;
            v13 = *((_QWORD *)v11 + 11);
            v14 = siri::ontology::oname::graph::ontology_init::Argument_entity(v12);
            uaap::TimeSpanHandler::resolveTimeSpan(v10, v11, v13, v14);
            uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v24, a2);
            v15 = (uaap::UPDDTimeSpan *)operator new();
            v25 = 0;
            v26 = 0;
            MEMORY[0x1C3BB9154](v15, &v25);
            v23 = v15;
            uaap::TimeSpanHandler::resolveDateTimeRangeSpanGraph(v10, v15, v16);
            uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v23, a2);
            v17 = (siri::ontology::UsoGraph **)operator new();
            v25 = 0;
            v26 = 0;
            MEMORY[0x1C3BB9154](v17, &v25);
            v22 = v17;
            uaap::TimeHandler::resolveDateTimeQualifierListValue(v10, (uaap::UPDDDateTimeBaseSpan *)v17, v17[11], v18);
            uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v22, a2);
            if (v22)
            {
              v19 = MEMORY[0x1C3BB916C]();
              MEMORY[0x1C3BB9B44](v19, 0x10A0C403D23BABBLL);
            }
            if (v23)
            {
              v20 = MEMORY[0x1C3BB916C]();
              MEMORY[0x1C3BB9B44](v20, 0x10A0C403D23BABBLL);
            }
            result = v24;
            if (v24)
            {
              v21 = MEMORY[0x1C3BB916C]();
              result = (_QWORD *)MEMORY[0x1C3BB9B44](v21, 0x10A0C403D23BABBLL);
            }
            v8 = v6[3];
            v7 = v6[4];
          }
        }
        ++v9;
      }
      while (v9 < (v7 - v8) >> 3);
    }
  }
  return result;
}

void sub_1C223C700(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10A0C403D23BABBLL);
  _Unwind_Resume(a1);
}

void *uaap::TimeHandler::resolveDateTimeQualifierListValue(uaap::TimeHandler *this, uaap::UPDDDateTimeBaseSpan *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  void *v4;
  uint64_t v6;
  siri::ontology::oname::graph::ontology_init *v7;
  siri::ontology::oname::graph::ontology_init *v8;
  siri::ontology::oname::graph::ontology_init *v9;
  siri::ontology::oname::graph::ontology_init *v10;
  siri::ontology::oname::graph::ontology_init *v11;
  siri::ontology::oname::graph::ontology_init *v12;
  siri::ontology::oname::graph::ontology_init *v13;
  siri::ontology::oname::graph::ontology_init *v14;
  siri::ontology::oname::graph::ontology_init *v15;
  siri::ontology::oname::graph::ontology_init *v16;
  siri::ontology::oname::graph::ontology_init *EntityNode;
  siri::ontology::oname::graph::ontology_init *v18;
  uaap::UPDDSpan *v19;
  siri::ontology::oname::graph::ontology_init *v20;
  uaap::UPDDSpan *v21;

  v4 = 0;
  if (!this || !a2 || !a3)
    return v4;
  v6 = *((_QWORD *)this + 6);
  if (!v6)
    return 0;
  v4 = *(void **)(v6 + 24);
  if (!v4)
    return v4;
  siri::ontology::oname::graph::ontology_init::common_DateTime(this);
  v7 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
  if ((_DWORD)v7)
  {
    siri::ontology::oname::graph::ontology_init::common_DateTimeRange(v7);
    v8 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
    if ((_DWORD)v8)
    {
      siri::ontology::oname::graph::ontology_init::common_Date(v8);
      v9 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
      if ((_DWORD)v9)
      {
        siri::ontology::oname::graph::ontology_init::common_Time(v9);
        v10 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
        if ((_DWORD)v10)
        {
          siri::ontology::oname::graph::ontology_init::common_Integer(v10);
          v11 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
          if ((_DWORD)v11)
          {
            siri::ontology::oname::graph::ontology_init::common_DayOfWeek(v11);
            v12 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
            if ((_DWORD)v12)
            {
              siri::ontology::oname::graph::ontology_init::common_MonthOfYear(v12);
              v13 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
              if ((_DWORD)v13)
              {
                siri::ontology::oname::graph::ontology_init::Root(v13);
                if ((siri::ontology::operator!=() & 1) != 0)
                  return 0;
              }
            }
          }
        }
      }
    }
  }
  v14 = (siri::ontology::oname::graph::ontology_init *)CFEqual(v4, CFSTR("this"));
  if (!(_DWORD)v14)
  {
    v15 = (siri::ontology::oname::graph::ontology_init *)CFEqual(v4, CFSTR("last"));
    if ((_DWORD)v15)
    {
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Previous(v15);
      goto LABEL_20;
    }
    v16 = (siri::ontology::oname::graph::ontology_init *)CFEqual(v4, CFSTR("next"));
    if ((_DWORD)v16)
    {
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Next(v16);
      goto LABEL_20;
    }
    return 0;
  }
  siri::ontology::oname::graph::ontology_init::common_ListPosition_Current(v14);
LABEL_20:
  EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::common_ListPosition(EntityNode);
  v4 = (void *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::Root((siri::ontology::oname::graph::ontology_init *)v4);
  v18 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator==();
  if ((_DWORD)v18)
  {
    siri::ontology::oname::graph::ontology_init::Argument_entity(v18);
    siri::ontology::UsoGraphNode::setSuccessor();
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity((uaap::AbstractDateTimeHandler *)v4, *((siri::ontology::UsoEntityNode **)this + 6), v19);
  }
  else
  {
    siri::ontology::oname::graph::ontology_init::Argument_usoListPosition(v18);
    v20 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
  }
  siri::ontology::oname::graph::ontology_init::Argument_definedValue(v20);
  siri::ontology::UsoGraphNode::setSuccessor();
  uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, *((siri::ontology::UsoEntityNode **)this + 6), v21);
  return v4;
}

void uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(uaap::AbstractDateTimeHandler *this, siri::ontology::UsoEntityNode *a2, uaap::UPDDSpan *a3)
{
  char *v5;
  char *v6[3];

  v5 = (char *)operator new(8uLL);
  *(_QWORD *)v5 = a2;
  v6[1] = v5 + 8;
  v6[2] = v5 + 8;
  v6[0] = v5;
  uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(this, v6);
  operator delete(v5);
}

void sub_1C223CA08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

siri::ontology::oname::graph::ontology_init *uaap::TimeHandler::resolveRecurringTime(uint64_t a1, uaap::UPDDDateTimeBaseSpan *a2, uint64_t a3, uint64_t a4)
{
  siri::ontology::oname::graph::ontology_init *EntityNode;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  siri::ontology::oname::graph::ontology_init *v10;
  uint64_t v11;
  uaap::AbstractDateTimeHandler *v12;
  siri::ontology::UsoEntityNode *v13;
  uaap::UPDDSpan *v14;
  siri::ontology::oname::graph::ontology_init *v15;
  siri::ontology::oname::graph::ontology_init *v16;
  siri::ontology::UsoEntityNode *v17;
  uint64_t v18;
  uint64_t v19;
  uaap::UPDDSpan *v20;

  EntityNode = 0;
  if (a1 && a2 && a3 && a4)
  {
    v7 = *(_QWORD *)(a1 + 120);
    if (v7
      && (v8 = *(_QWORD *)(v7 + 48)) != 0
      && (v9 = *(const void **)(v8 + 24)) != 0
      && (v10 = (siri::ontology::oname::graph::ontology_init *)CFEqual(CFSTR("every"), v9), (_DWORD)v10)
      && (siri::ontology::oname::graph::ontology_init::Root(v10), v11 = siri::ontology::operator!=(), (v11 & 1) == 0)
      && (siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v11),
          v12 = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode(),
          uaap::TimeHandler::resolveDateTimeRangeValue(*(uaap::TimeHandler **)(a1 + 120), a2, v12, v13)))
    {
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v12, (siri::ontology::UsoEntityNode *)a1, v14);
      siri::ontology::oname::graph::ontology_init::common_RecurringDateTime(v15);
      EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::Argument_recurrenceDateTimes(EntityNode);
      v16 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
      v18 = *(_QWORD *)(a1 + 48);
      if (v18 && *(_QWORD *)(v18 + 24))
        v16 = (siri::ontology::oname::graph::ontology_init *)uaap::TimeHandler::resolveDateTimeQualifierListValue((uaap::TimeHandler *)a1, a2, v12, v17);
      v19 = siri::ontology::oname::graph::ontology_init::Argument_time(v16);
      uaap::TimeHandler::resolveTime((siri::ontology::UsoEntityNode *)a1, a2, (uint64_t)v12, v19);
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, (siri::ontology::UsoEntityNode *)a1, v20);
      siri::ontology::UsoGraphNode::setSuccessor();
    }
    else
    {
      return 0;
    }
  }
  return EntityNode;
}

uaap::AbstractDateTimeHandler *uaap::TimeHandler::resolveTimeWithDateTimeRange(siri::ontology::UsoEntityNode *a1, uaap::UPDDDateTimeBaseSpan *a2, uint64_t a3, uint64_t a4)
{
  uaap::AbstractDateTimeHandler *EntityNode;
  uint64_t v7;
  uint64_t v8;
  uaap::TimeHandler *v9;
  siri::ontology::UsoEntityNode *v10;
  siri::ontology::oname::graph::ontology_init *v11;
  uaap::UPDDSpan *v12;
  siri::ontology::UsoGraph *v13;
  siri::ontology::oname::graph::ontology_init *v14;
  siri::ontology::UsoEntityNode *v15;
  uint64_t v16;
  uint64_t v17;

  EntityNode = 0;
  if (a1 && a2 && a3 && a4)
  {
    v7 = *((_QWORD *)a1 + 15);
    if (v7
      && *(_QWORD *)(v7 + 96)
      && (siri::ontology::oname::graph::ontology_init::Root(a1), v8 = siri::ontology::operator!=(), (v8 & 1) == 0)
      && (v9 = (uaap::TimeHandler *)*((_QWORD *)a1 + 15),
          siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v8),
          EntityNode = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode(),
          (v11 = uaap::TimeHandler::resolveDateTimeRangeValue(v9, a2, EntityNode, v10)) != 0))
    {
      v13 = v11;
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, a1, v12);
      v16 = *((_QWORD *)v9 + 6);
      if (v16 && *(_QWORD *)(v16 + 24))
        v14 = (siri::ontology::oname::graph::ontology_init *)uaap::TimeHandler::resolveDateTimeQualifierListValue(v9, a2, v13, v15);
      v17 = siri::ontology::oname::graph::ontology_init::Argument_time(v14);
      uaap::TimeHandler::resolveTime(a1, a2, (uint64_t)EntityNode, v17);
      siri::ontology::UsoGraphNode::setSuccessor();
    }
    else
    {
      return 0;
    }
  }
  return EntityNode;
}

siri::ontology::UsoGraph *uaap::TimeHandler::resolveTime(siri::ontology::UsoEntityNode *a1, uaap::UPDDTimeSpan *a2, uint64_t a3, uint64_t a4)
{
  siri::ontology::UsoGraph *EntityNode;
  uaap::TimeHandler *v6;
  uaap::UPDDSpan *v7;
  siri::ontology::UsoEntityNode *v8;
  siri::ontology::UsoEntityNode *v9;
  uint64_t v10;

  EntityNode = 0;
  if (!a1 || !a2 || !a3 || !a4)
    return EntityNode;
  v6 = a1;
  if (!*((_QWORD *)a1 + 7) && !*((_QWORD *)a1 + 8) && !*((_QWORD *)a1 + 10))
  {
    if (!*((_QWORD *)a1 + 12))
      return 0;
LABEL_10:
    siri::ontology::oname::graph::ontology_init::common_Time(a1);
    EntityNode = (siri::ontology::UsoGraph *)siri::ontology::UsoGraph::createEntityNode();
    siri::ontology::UsoGraphNode::setSuccessor();
    uaap::TimeHandler::resolveDateTimeRangeValue(v6, a2, EntityNode, v9);
    goto LABEL_11;
  }
  a1 = uaap::TimeHandler::resolveTimeAndMeridian((siri::ontology::UsoEntityNode **)a1, (uint64_t)a2, a3, a4);
  EntityNode = a1;
  if (!*((_QWORD *)v6 + 12))
  {
    if (!a1)
      return EntityNode;
    goto LABEL_13;
  }
  if (!a1)
    goto LABEL_10;
LABEL_11:
  uaap::TimeHandler::resolveSpecialTimePeriod(v6, a2, EntityNode, v8);
LABEL_13:
  if (*((_QWORD *)EntityNode + 7) == *((_QWORD *)EntityNode + 8))
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, v6, v7);
  v10 = *((_QWORD *)v6 + 6);
  if (v10 && *(_QWORD *)(v10 + 24))
    uaap::TimeHandler::resolveDateTimeQualifierListValue(v6, a2, EntityNode, v8);
  return EntityNode;
}

uint64_t uaap::mapNowAndTimeOffsetToItemizedUsos(uint64_t result, char **a2)
{
  siri::ontology::oname::graph::ontology_init *v3;
  siri::ontology::UsoGraph **v4;
  siri::ontology::UsoEntityNode *v5;
  CFTypeRef *v6;
  uint64_t v7;
  siri::ontology::oname::graph::ontology_init *v8;
  uaap::UPDDSpan *v9;
  siri::ontology::oname::graph::ontology_init *v10;
  uint64_t v11;
  uint64_t v12;
  uaap::UPDDTimeSpan *v13;
  siri::ontology::oname::graph::ontology_init *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uaap::UPDDTimeSpan *v19;
  siri::ontology::UsoGraph **v20;
  uint64_t v21;
  int v22;

  v3 = (siri::ontology::oname::graph::ontology_init *)result;
  if (*(_QWORD *)(result + 112))
  {
    v4 = (siri::ontology::UsoGraph **)operator new();
    v21 = 0;
    v22 = 0;
    MEMORY[0x1C3BB9154](v4, &v21);
    v20 = v4;
    v6 = (CFTypeRef *)*((_QWORD *)v3 + 14);
    if (v6)
      uaap::TimeHandler::resolveNow(v6, (uaap::UPDDSpan *)v4, v4[11], v5);
    uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v20, a2);
    result = (uint64_t)v20;
    if (v20)
    {
      v7 = MEMORY[0x1C3BB916C]();
      result = MEMORY[0x1C3BB9B44](v7, 0x10A0C403D23BABBLL);
    }
  }
  v8 = (siri::ontology::oname::graph::ontology_init *)*((_QWORD *)v3 + 13);
  if (v8)
  {
    v9 = (uaap::UPDDSpan *)operator new();
    v21 = 0;
    v22 = 0;
    v10 = (siri::ontology::oname::graph::ontology_init *)MEMORY[0x1C3BB9154](v9, &v21);
    v20 = (siri::ontology::UsoGraph **)v9;
    v11 = *((_QWORD *)v9 + 11);
    v12 = siri::ontology::oname::graph::ontology_init::Argument_entity(v10);
    uaap::TimeHandler::resolveTimeWithOffsetValueAndDirection(v3, v9, v11, v12);
    uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v20, a2);
    v13 = (uaap::UPDDTimeSpan *)operator new();
    v21 = 0;
    v22 = 0;
    v14 = (siri::ontology::oname::graph::ontology_init *)MEMORY[0x1C3BB9154](v13, &v21);
    v19 = v13;
    v15 = *((_QWORD *)v13 + 11);
    v16 = siri::ontology::oname::graph::ontology_init::Argument_entity(v14);
    uaap::TimeSpanHandler::resolveTimeSpan(v8, v13, v15, v16);
    uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v19, a2);
    if (v19)
    {
      v17 = MEMORY[0x1C3BB916C]();
      MEMORY[0x1C3BB9B44](v17, 0x10A0C403D23BABBLL);
    }
    result = (uint64_t)v20;
    if (v20)
    {
      v18 = MEMORY[0x1C3BB916C]();
      return MEMORY[0x1C3BB9B44](v18, 0x10A0C403D23BABBLL);
    }
  }
  return result;
}

void sub_1C223CF48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1C3BB9B44](v2, 0x10A0C403D23BABBLL);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t uaap::mapMinutesBeforeToItemizedUsos(uint64_t result, char **a2)
{
  siri::ontology::oname::graph::ontology_init *v3;
  uaap::UPDDSpan *v4;
  siri::ontology::oname::graph::ontology_init *v5;
  uint64_t v6;
  uint64_t v7;
  uaap::UPDDTimeSpan *v8;
  siri::ontology::UsoGraph *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uaap::UPDDTimeSpan *v13;
  uint64_t v14;
  int v15;

  if (*(_QWORD *)(result + 72))
  {
    v3 = (siri::ontology::oname::graph::ontology_init *)result;
    v4 = (uaap::UPDDSpan *)operator new();
    v14 = 0;
    v15 = 0;
    v5 = (siri::ontology::oname::graph::ontology_init *)MEMORY[0x1C3BB9154](v4, &v14);
    v13 = v4;
    v6 = *((_QWORD *)v4 + 11);
    v7 = siri::ontology::oname::graph::ontology_init::Argument_entity(v5);
    uaap::TimeHandler::resolveTimeWithOffsetValueAndDirection(v3, v4, v6, v7);
    uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v13, a2);
    v8 = (uaap::UPDDTimeSpan *)operator new();
    v14 = 0;
    v15 = 0;
    MEMORY[0x1C3BB9154](v8, &v14);
    v10 = (uint64_t)v13;
    v13 = v8;
    if (v10)
    {
      v11 = MEMORY[0x1C3BB916C]();
      MEMORY[0x1C3BB9B44](v11, 0x10A0C403D23BABBLL);
    }
    uaap::TimeHandler::resolveOffsetDurationValueGraph(v3, v8, v9);
    uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v13, a2);
    result = (uint64_t)v13;
    if (v13)
    {
      v12 = MEMORY[0x1C3BB916C]();
      return MEMORY[0x1C3BB9B44](v12, 0x10A0C403D23BABBLL);
    }
  }
  return result;
}

void sub_1C223D0D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1C3BB9B44](v2, 0x10A0C403D23BABBLL);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

siri::ontology::oname::graph::ontology_init *uaap::TimeHandler::resolveTimeOffsetGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDTimeSpan *a2, siri::ontology::UsoGraph *a3)
{
  siri::ontology::oname::graph::ontology_init *v4;
  uint64_t v5;
  uint64_t v6;

  if (this)
  {
    v4 = this;
    v5 = *((_QWORD *)a2 + 11);
    v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::TimeHandler::resolveTimeWithOffsetValueAndDirection(v4, a2, v5, v6);
  }
  return this;
}

siri::ontology::UsoGraph *uaap::TimeHandler::resolveOffsetDurationValueGraph(siri::ontology::UsoGraph *this, uaap::UPDDTimeSpan *a2, siri::ontology::UsoGraph *a3)
{
  uint64_t v4;
  CFTypeRef *v5;
  uint64_t v6;

  if (this)
  {
    v4 = *((_QWORD *)a2 + 11);
    v5 = (CFTypeRef *)*((_QWORD *)this + 9);
    if (!v5)
    {
      if (!*((_QWORD *)this + 14))
        return this;
      v5 = (CFTypeRef *)*((_QWORD *)this + 13);
    }
    v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::TimeHandler::resolveOffsetDurationValue(v5, a2, v4, v6);
  }
  return this;
}

siri::ontology::UsoGraph *uaap::TimeHandler::resolveOffsetDurationValue(CFTypeRef *a1, uaap::UPDDSpan *a2, uint64_t a3, uint64_t a4)
{
  siri::ontology::UsoGraph *EntityNode;
  siri::ontology::oname::graph::ontology_init *v7;
  uint64_t v8;
  siri::ontology::UsoEntityNode *v9;
  uaap::UPDDSpan *v10;
  uaap::TimeSpanHandler *v11;
  siri::ontology::UsoEntityNode *v12;

  EntityNode = 0;
  if (a1 && a2 && a3 && a4)
  {
    v7 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a1[1], CFSTR("MinutesBefore"));
    if ((_DWORD)v7
      || (v7 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a1[1], CFSTR("TimeOffset")), (_DWORD)v7)
      || (v7 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a1[1], CFSTR("TimeSpan")), (_DWORD)v7))
    {
      siri::ontology::oname::graph::ontology_init::Root(v7);
      v8 = siri::ontology::operator!=();
      if (!(_DWORD)v8
        || (siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v8),
            v8 = siri::ontology::operator!=(),
            (v8 & 1) == 0))
      {
        siri::ontology::oname::graph::ontology_init::common_Duration((siri::ontology::oname::graph::ontology_init *)v8);
        EntityNode = (siri::ontology::UsoGraph *)siri::ontology::UsoGraph::createEntityNode();
        if (CFEqual(a1[1], CFSTR("MinutesBefore")))
        {
          uaap::TimeSpanHandler::resolveMinutesBeforeTimeSpanWithUnit(a1, a2, EntityNode, v9);
LABEL_16:
          uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, (siri::ontology::UsoEntityNode *)a1, v10);
          siri::ontology::UsoGraphNode::setSuccessor();
          return EntityNode;
        }
        if (CFEqual(a1[1], CFSTR("TimeOffset")) || CFEqual(a1[1], CFSTR("TimeSpan")))
        {
          if (v11)
          {
            uaap::TimeSpanHandler::resolveTimeSpanWithUnit(v11, a2, EntityNode, v12);
            goto LABEL_16;
          }
        }
      }
    }
    return 0;
  }
  return EntityNode;
}

siri::ontology::UsoGraph *uaap::TimeHandler::resolveTimeWithOffsetValueAndDirection(siri::ontology::oname::graph::ontology_init *a1, uaap::UPDDSpan *a2, uint64_t a3, uint64_t a4)
{
  siri::ontology::UsoGraph *v4;
  uint64_t v7;
  uint64_t EntityNode;
  siri::ontology::UsoEntityNode *v9;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  CFTypeRef *v13;
  uint64_t v14;
  uint64_t v15;
  uaap::UPDDSpan *v16;
  int v17;
  siri::ontology::oname::graph::ontology_init *v18;
  siri::ontology::oname::graph::ontology_init *v19;
  siri::ontology::oname::graph::ontology_init *v20;
  uaap::UPDDSpan *v21;
  siri::ontology::UsoEntityNode *v22;
  siri::ontology::UsoEntityNode *v23;
  uint64_t v25;

  v4 = 0;
  if (a1 && a2 && a3 && a4)
  {
    if (!*((_QWORD *)a1 + 9) && !*((_QWORD *)a1 + 14) && !*((_QWORD *)a1 + 13))
      return 0;
    siri::ontology::oname::graph::ontology_init::Root(a1);
    v7 = siri::ontology::operator!=();
    if ((v7 & 1) != 0)
      return 0;
    siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v7);
    EntityNode = siri::ontology::UsoGraph::createEntityNode();
    v4 = (siri::ontology::UsoGraph *)EntityNode;
    v10 = (_QWORD *)*((_QWORD *)a1 + 13);
    if (v10
      && (v11 = siri::ontology::oname::graph::ontology_init::Argument_offsetValue((siri::ontology::oname::graph::ontology_init *)EntityNode),
          (EntityNode = (uint64_t)uaap::TimeHandler::resolveOffsetDurationValue((CFTypeRef *)v10, a2, (uint64_t)v4, v11)) != 0))
    {
      v12 = 0;
      LODWORD(v13) = 1;
    }
    else
    {
      v13 = (CFTypeRef *)*((_QWORD *)a1 + 9);
      if (v13)
      {
        v14 = siri::ontology::oname::graph::ontology_init::Argument_offsetValue((siri::ontology::oname::graph::ontology_init *)EntityNode);
        EntityNode = (uint64_t)uaap::TimeHandler::resolveOffsetDurationValue(v13, a2, (uint64_t)v4, v14);
        LODWORD(v13) = EntityNode != 0;
      }
      v12 = 1;
      if (!v10)
      {
LABEL_19:
        if (*((_QWORD *)a1 + 9))
        {
LABEL_20:
          siri::ontology::oname::graph::ontology_init::common_OffsetDirection_Before((siri::ontology::oname::graph::ontology_init *)EntityNode);
          goto LABEL_31;
        }
        if (v10)
        {
          EntityNode = CFEqual(v10, CFSTR("after"));
          if ((_DWORD)EntityNode)
          {
LABEL_30:
            siri::ontology::oname::graph::ontology_init::common_OffsetDirection_After((siri::ontology::oname::graph::ontology_init *)EntityNode);
LABEL_31:
            v18 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
            siri::ontology::oname::graph::ontology_init::common_OffsetDirection(v18);
            v19 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
            siri::ontology::oname::graph::ontology_init::Argument_direction(v19);
            v20 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
            siri::ontology::oname::graph::ontology_init::Argument_definedValue(v20);
            siri::ontology::UsoGraphNode::setSuccessor();
            v23 = (siri::ontology::UsoEntityNode *)*((_QWORD *)a1 + 9);
            if (v23
              || (v25 = *((_QWORD *)a1 + 13)) != 0 && (v23 = *(siri::ontology::UsoEntityNode **)(v25 + 48)) != 0)
            {
              uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v18, v23, v21);
            }
            uaap::TimeHandler::resolveOffsetReference((CFTypeRef **)a1, a2, v4, v22);
            goto LABEL_34;
          }
          EntityNode = CFEqual(v10, CFSTR("before"));
          if ((_DWORD)EntityNode)
            goto LABEL_20;
        }
        if ((v12 & 1) != 0)
        {
          if (uaap::TimeHandler::resolveOffsetReference((CFTypeRef **)a1, a2, v4, v9))
            v17 = 1;
          else
            v17 = (int)v13;
          if (v17 != 1)
            return 0;
LABEL_34:
          uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v4, a1, v16);
          siri::ontology::UsoGraphNode::setSuccessor();
          return v4;
        }
        goto LABEL_30;
      }
    }
    v15 = v10[6];
    if (v15)
      v10 = *(_QWORD **)(v15 + 24);
    else
      v10 = 0;
    goto LABEL_19;
  }
  return v4;
}

siri::ontology::UsoGraph *uaap::TimeHandler::resolveOffsetReference(CFTypeRef **this, uaap::UPDDTimeSpan *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  siri::ontology::UsoGraph *EntityNode;
  uint64_t v7;
  siri::ontology::UsoEntityNode *v8;
  CFTypeRef *v9;
  _BOOL4 v10;
  uint64_t v11;
  siri::ontology::UsoEntityNode *v12;

  EntityNode = 0;
  if (this && a2 && a3)
  {
    siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)this);
    v7 = siri::ontology::operator!=();
    if ((v7 & 1) == 0
      && ((siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v7),
           EntityNode = (siri::ontology::UsoGraph *)siri::ontology::UsoGraph::createEntityNode(),
           (v9 = this[14]) == 0)
        ? (v10 = 0)
        : (v9 = (CFTypeRef *)uaap::TimeHandler::resolveNow(v9, a2, EntityNode, v8), v10 = v9 != 0),
          (v11 = siri::ontology::oname::graph::ontology_init::Argument_time((siri::ontology::oname::graph::ontology_init *)v9),
           (v12 = uaap::TimeHandler::resolveTimeAndMeridian((siri::ontology::UsoEntityNode **)this, (uint64_t)a2, (uint64_t)EntityNode, v11)) != 0)|| v10))
    {
      siri::ontology::oname::graph::ontology_init::Argument_offsetReference(v12);
      siri::ontology::UsoGraphNode::setSuccessor();
    }
    else
    {
      return 0;
    }
  }
  return EntityNode;
}

uaap::AbstractDateTimeHandler *uaap::TimeHandler::resolveNow(CFTypeRef *this, uaap::UPDDSpan *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  uaap::AbstractDateTimeHandler *v4;
  siri::ontology::oname::graph::ontology_init *v6;
  uint64_t v7;
  siri::ontology::oname::graph::ontology_init *v8;
  uaap::AbstractDateTimeHandler *EntityNode;
  uaap::UPDDSpan *v10;
  siri::ontology::oname::graph::ontology_init *v11;
  uaap::UPDDSpan *v12;
  siri::ontology::oname::graph::ontology_init *v13;

  v4 = 0;
  if (this && a2 && a3)
  {
    v6 = (siri::ontology::oname::graph::ontology_init *)CFEqual(this[1], CFSTR("Now"));
    if (!(_DWORD)v6)
      return 0;
    siri::ontology::oname::graph::ontology_init::Root(v6);
    v7 = siri::ontology::operator!=();
    if ((_DWORD)v7
      && (siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v7),
          v7 = siri::ontology::operator!=(),
          (v7 & 1) != 0))
    {
      return 0;
    }
    else
    {
      siri::ontology::oname::graph::ontology_init::Root((siri::ontology::oname::graph::ontology_init *)v7);
      v8 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator==();
      if ((_DWORD)v8)
      {
        siri::ontology::oname::graph::ontology_init::common_DateTime(v8);
        EntityNode = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode();
        uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, (siri::ontology::UsoEntityNode *)this, v10);
        siri::ontology::oname::graph::ontology_init::Argument_entity(v11);
        v8 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
      }
      siri::ontology::oname::graph::ontology_init::common_DateTime_Now(v8);
      v4 = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode();
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v4, (siri::ontology::UsoEntityNode *)this, v12);
      siri::ontology::oname::graph::ontology_init::Argument_definedValue(v13);
      siri::ontology::UsoGraphNode::setSuccessor();
    }
  }
  return v4;
}

siri::ontology::UsoEntityNode *uaap::TimeHandler::resolveTimeAndMeridian(siri::ontology::UsoEntityNode **Length, uint64_t a2, uint64_t a3, uint64_t a4)
{
  siri::ontology::UsoEntityNode *EntityNode;
  siri::ontology::UsoEntityNode **v6;
  siri::ontology::UsoEntityNode *v7;
  siri::ontology::UsoEntityNode *v8;
  const __CFString *v9;
  uint64_t v10;
  siri::ontology::UsoEntityNode *v11;
  char *v12;
  char *v13;
  siri::ontology::oname::graph::ontology_init *v14;
  const __CFString *v15;
  siri::ontology::oname::graph::ontology_init *v16;
  siri::ontology::oname::graph::ontology_init *v17;
  siri::ontology::oname::graph::ontology_init *v18;
  siri::ontology::oname::graph::ontology_init *v19;
  uaap::UPDDSpan *v20;
  siri::ontology::UsoEntityNode *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  siri::ontology::UsoEntityNode *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  siri::ontology::UsoEntityNode **v30;
  siri::ontology::UsoEntityNode *v31;
  void *v32;
  uint64_t v33;
  siri::ontology::UsoEntityNode *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  siri::ontology::oname::graph::ontology_init *IntValueFromCFStringRef;
  uint64_t v42;
  siri::ontology::UsoEntityNode *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  siri::ontology::UsoEntityNode **v50;
  siri::ontology::UsoEntityNode *v51;
  siri::ontology::oname::graph::ontology_init *v52;
  uint64_t v53;
  void *__p;
  char *v56;
  char *v57;

  EntityNode = 0;
  if (!Length || !a2 || !a3 || !a4)
    return EntityNode;
  v6 = Length;
  v7 = Length[7];
  if ((!v7 || (Length = (siri::ontology::UsoEntityNode **)CFStringGetLength(*((CFStringRef *)v7 + 3))) == 0)
    && !v6[8]
    && !v6[10])
  {
    return 0;
  }
  v8 = v6[7];
  if (v8 && (Length = (siri::ontology::UsoEntityNode **)CFStringGetLength(*((CFStringRef *)v8 + 3))) != 0)
  {
    Length = (siri::ontology::UsoEntityNode **)uaap::UPDDSpan::extractIntValueFromCFStringRef(*((const __CFString **)v6[7] + 3), v9);
    v10 = (uint64_t)Length;
  }
  else
  {
    v10 = 0x7FFFFFFFLL;
  }
  __p = 0;
  v56 = 0;
  v57 = 0;
  v11 = v6[11];
  if (!v11)
  {
    if ((_DWORD)v10 && (v10 - 13) > 0xB)
    {
      siri::ontology::oname::graph::ontology_init::common_Time((siri::ontology::oname::graph::ontology_init *)Length);
      EntityNode = (siri::ontology::UsoEntityNode *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::UsoGraphNode::setSuccessor();
    }
    else
    {
      siri::ontology::oname::graph::ontology_init::common_Time24HourClock((siri::ontology::oname::graph::ontology_init *)Length);
      EntityNode = (siri::ontology::UsoEntityNode *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::UsoGraphNode::setSuccessor();
    }
    v12 = 0;
    v13 = 0;
    goto LABEL_24;
  }
  v12 = (char *)operator new(8uLL);
  *(_QWORD *)v12 = v11;
  v13 = v12 + 8;
  v56 = v12 + 8;
  v57 = v12 + 8;
  __p = v12;
  siri::ontology::oname::graph::ontology_init::common_Time12HourClock((siri::ontology::oname::graph::ontology_init *)v12);
  EntityNode = (siri::ontology::UsoEntityNode *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::UsoGraphNode::setSuccessor();
  v14 = (siri::ontology::oname::graph::ontology_init *)CFEqual(*((CFTypeRef *)v6[11] + 3), CFSTR("am"));
  if ((_DWORD)v14)
  {
    siri::ontology::oname::graph::ontology_init::common_Meridiem_AM(v14);
  }
  else
  {
    v16 = (siri::ontology::oname::graph::ontology_init *)CFEqual(*((CFTypeRef *)v6[11] + 3), CFSTR("pm"));
    if (!(_DWORD)v16)
      goto LABEL_24;
    siri::ontology::oname::graph::ontology_init::common_Meridiem_PM(v16);
  }
  v17 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::common_Meridiem(v17);
  v18 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::Argument_meridiem(v18);
  v19 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
  siri::ontology::oname::graph::ontology_init::Argument_definedValue(v19);
  siri::ontology::UsoGraphNode::setSuccessor();
  uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v17, v6[11], v20);
LABEL_24:
  v21 = v6[7];
  if (v21 && CFStringGetLength(*((CFStringRef *)v21 + 3)))
  {
    v22 = v13 - v12;
    v23 = (v13 - v12) >> 3;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v25 = v6[7];
    if (v22 >> 2 > v24)
      v24 = v22 >> 2;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v26 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    if (v26)
      v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v26);
    else
      v27 = 0;
    v30 = (siri::ontology::UsoEntityNode **)(v26 + 8 * v23);
    v28 = v26 + 8 * v27;
    *v30 = v25;
    v29 = (char *)(v30 + 1);
    if (v13 == v12)
    {
      v32 = v12;
    }
    else
    {
      do
      {
        v31 = (siri::ontology::UsoEntityNode *)*((_QWORD *)v13 - 1);
        v13 -= 8;
        *--v30 = v31;
      }
      while (v13 != v12);
      v32 = __p;
    }
    v12 = (char *)v30;
    __p = v30;
    v57 = (char *)v28;
    if (v32)
      operator delete(v32);
    v56 = v29;
    v33 = siri::ontology::oname::graph::ontology_init::Argument_hour((siri::ontology::oname::graph::ontology_init *)v32);
    uaap::TimeHandler::_buildTimeWithUnit((siri::ontology::oname::graph::ontology_init *)v10, v33, a2, (uint64_t)EntityNode, v6[7]);
  }
  else
  {
    v28 = (unint64_t)v13;
    v29 = v13;
  }
  v34 = v6[8];
  if (v34)
  {
    if ((unint64_t)v29 >= v28)
    {
      v36 = (v29 - v12) >> 3;
      v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 61)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      if ((uint64_t)(v28 - (_QWORD)v12) >> 2 > v37)
        v37 = (uint64_t)(v28 - (_QWORD)v12) >> 2;
      if (v28 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v38 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v38 = v37;
      if (v38)
        v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v38);
      else
        v15 = 0;
      v39 = (char *)(v38 + 8 * v36);
      *(_QWORD *)v39 = v34;
      v35 = v39 + 8;
      if (v29 != v12)
      {
        do
        {
          v40 = *((_QWORD *)v29 - 1);
          v29 -= 8;
          *((_QWORD *)v39 - 1) = v40;
          v39 -= 8;
        }
        while (v29 != v12);
        v12 = (char *)__p;
      }
      __p = v39;
      v57 = (char *)(v38 + 8 * (_QWORD)v15);
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_QWORD *)v29 = v34;
      v35 = v29 + 8;
    }
    v56 = v35;
    IntValueFromCFStringRef = (siri::ontology::oname::graph::ontology_init *)uaap::UPDDSpan::extractIntValueFromCFStringRef(*((const __CFString **)v6[8] + 3), v15);
    v42 = siri::ontology::oname::graph::ontology_init::Argument_minute(IntValueFromCFStringRef);
    uaap::TimeHandler::_buildTimeWithUnit(IntValueFromCFStringRef, v42, a2, (uint64_t)EntityNode, v6[8]);
  }
  else
  {
    v35 = v29;
  }
  v43 = v6[10];
  if (v43)
  {
    if (v35 >= v57)
    {
      v45 = (char *)__p;
      v46 = (v35 - (_BYTE *)__p) >> 3;
      v47 = v46 + 1;
      if ((unint64_t)(v46 + 1) >> 61)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v48 = v57 - (_BYTE *)__p;
      if ((v57 - (_BYTE *)__p) >> 2 > v47)
        v47 = v48 >> 2;
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
        v49 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v49 = v47;
      if (v49)
        v49 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v49);
      else
        v15 = 0;
      v50 = (siri::ontology::UsoEntityNode **)(v49 + 8 * v46);
      *v50 = v43;
      v44 = (char *)(v50 + 1);
      if (v35 != v45)
      {
        do
        {
          v51 = (siri::ontology::UsoEntityNode *)*((_QWORD *)v35 - 1);
          v35 -= 8;
          *--v50 = v51;
        }
        while (v35 != v45);
        v35 = (char *)__p;
      }
      __p = v50;
      v57 = (char *)(v49 + 8 * (_QWORD)v15);
      if (v35)
        operator delete(v35);
    }
    else
    {
      *(_QWORD *)v35 = v43;
      v44 = v35 + 8;
    }
    v56 = v44;
    v52 = (siri::ontology::oname::graph::ontology_init *)uaap::UPDDSpan::extractIntValueFromCFStringRef(*((const __CFString **)v6[10] + 3), v15);
    v53 = siri::ontology::oname::graph::ontology_init::Argument_second(v52);
    uaap::TimeHandler::_buildTimeWithUnit(v52, v53, a2, (uint64_t)EntityNode, v6[10]);
  }
  uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, (char **)&__p);
  if (__p)
    operator delete(__p);
  return EntityNode;
}

void sub_1C223DC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (v10)
    operator delete(v10);
  _Unwind_Resume(exception_object);
}

uint64_t uaap::TimeHandler::_buildTimeWithUnit(siri::ontology::oname::graph::ontology_init *a1, uint64_t a2, uint64_t a3, uint64_t a4, siri::ontology::UsoEntityNode *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t EntityNode;
  siri::ontology::oname::graph::ontology_init *IntNode;
  uaap::UPDDSpan *v10;

  siri::ontology::oname::graph::ontology_init::common_Time24HourClock(a1);
  v6 = siri::ontology::operator!=();
  if ((_DWORD)v6)
  {
    siri::ontology::oname::graph::ontology_init::common_Time12HourClock((siri::ontology::oname::graph::ontology_init *)v6);
    v6 = siri::ontology::operator!=();
    if ((_DWORD)v6)
    {
      siri::ontology::oname::graph::ontology_init::common_Time((siri::ontology::oname::graph::ontology_init *)v6);
      v6 = siri::ontology::operator!=();
      if ((v6 & 1) != 0)
        return 0;
    }
  }
  siri::ontology::oname::graph::ontology_init::Argument_hour((siri::ontology::oname::graph::ontology_init *)v6);
  v7 = siri::ontology::operator!=();
  if ((_DWORD)v7)
  {
    siri::ontology::oname::graph::ontology_init::Argument_minute((siri::ontology::oname::graph::ontology_init *)v7);
    v7 = siri::ontology::operator!=();
    if ((_DWORD)v7)
    {
      siri::ontology::oname::graph::ontology_init::Argument_second((siri::ontology::oname::graph::ontology_init *)v7);
      v7 = siri::ontology::operator!=();
      if ((v7 & 1) != 0)
        return 0;
    }
  }
  siri::ontology::oname::graph::ontology_init::common_Integer((siri::ontology::oname::graph::ontology_init *)v7);
  EntityNode = siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::UsoGraphNode::setSuccessor();
  IntNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createIntNode();
  siri::ontology::oname::graph::ontology_init::Argument_integerValue(IntNode);
  siri::ontology::UsoGraphNode::setSuccessor();
  uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(IntNode, a5, v10);
  return EntityNode;
}

siri::ontology::oname::graph::ontology_init *uaap::TimeHandler::resolveDateTimeRangeValue(uaap::TimeHandler *this, uaap::UPDDTimeSpan *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  siri::ontology::oname::graph::ontology_init *v4;
  siri::ontology::oname::graph::ontology_init *v6;
  uaap::UPDDTimeSpan *v7;
  siri::ontology::oname::graph::ontology_init *EntityNode;
  siri::ontology::oname::graph::ontology_init *v9;
  uaap::UPDDSpan *v10;

  v4 = 0;
  if (this && a2 && a3)
  {
    if (!*((_QWORD *)this + 12))
      return 0;
    siri::ontology::oname::graph::ontology_init::common_Time(this);
    v6 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
    if ((_DWORD)v6)
    {
      siri::ontology::oname::graph::ontology_init::common_DateTime(v6);
      if ((siri::ontology::operator!=() & 1) != 0)
        return 0;
    }
    if (!uaap::TimeHandler::getSpecialTimeDefinedValue(this, v7))
    {
      return 0;
    }
    else
    {
      EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::common_DateTimeRange(EntityNode);
      v4 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::Argument_occurringIn(v4);
      v9 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
      siri::ontology::oname::graph::ontology_init::Argument_definedValue(v9);
      siri::ontology::UsoGraphNode::setSuccessor();
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, *((siri::ontology::UsoEntityNode **)this + 12), v10);
    }
  }
  return v4;
}

siri::ontology::oname::graph::ontology_init *uaap::TimeHandler::resolveSpecialTimePeriod(uaap::TimeHandler *this, uaap::UPDDTimeSpan *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  siri::ontology::oname::graph::ontology_init *EntityNode;
  siri::ontology::oname::graph::ontology_init *v6;
  siri::ontology::oname::graph::ontology_init *v7;
  uaap::UPDDSpan *v8;

  EntityNode = 0;
  if (this && a2 && a3)
  {
    if (!*((_QWORD *)this + 12))
      return 0;
    siri::ontology::oname::graph::ontology_init::common_Time(this);
    if ((siri::ontology::operator!=() & 1) != 0)
      return 0;
    v6 = (siri::ontology::oname::graph::ontology_init *)CFEqual(*(CFTypeRef *)(*((_QWORD *)this + 12) + 24), CFSTR("midnight"));
    if ((_DWORD)v6)
    {
      siri::ontology::oname::graph::ontology_init::common_Time_Midnight(v6);
    }
    else
    {
      v7 = (siri::ontology::oname::graph::ontology_init *)CFEqual(*(CFTypeRef *)(*((_QWORD *)this + 12) + 24), CFSTR("noon"));
      if (!(_DWORD)v7)
        return 0;
      siri::ontology::oname::graph::ontology_init::common_Time_Noon(v7);
    }
    EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
    siri::ontology::oname::graph::ontology_init::Argument_definedValue(EntityNode);
    siri::ontology::UsoGraphNode::setSuccessor();
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, *((siri::ontology::UsoEntityNode **)this + 12), v8);
  }
  return EntityNode;
}

uint64_t uaap::TimeHandler::getSpecialTimeDefinedValue(uaap::TimeHandler *this, uaap::UPDDTimeSpan *a2)
{
  uint64_t v2;
  const void *v3;
  siri::ontology::oname::graph::ontology_init *v4;
  siri::ontology::oname::graph::ontology_init *v6;
  siri::ontology::oname::graph::ontology_init *v7;
  siri::ontology::oname::graph::ontology_init *v8;
  siri::ontology::oname::graph::ontology_init *v9;
  siri::ontology::oname::graph::ontology_init *v10;
  siri::ontology::oname::graph::ontology_init *v11;
  siri::ontology::oname::graph::ontology_init *v12;

  if (!this)
    return 0;
  v2 = *((_QWORD *)this + 12);
  if (!v2)
    return 0;
  v3 = *(const void **)(v2 + 24);
  if (!v3)
    return 0;
  v4 = (siri::ontology::oname::graph::ontology_init *)CFEqual(*(CFTypeRef *)(v2 + 24), CFSTR("afternoon"));
  if ((_DWORD)v4)
    return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Afternoon(v4);
  v6 = (siri::ontology::oname::graph::ontology_init *)CFEqual(v3, CFSTR("breakfast"));
  if ((_DWORD)v6)
    return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_BreakfastTime(v6);
  v7 = (siri::ontology::oname::graph::ontology_init *)CFEqual(v3, CFSTR("brunch"));
  if ((_DWORD)v7)
    return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_BrunchTime(v7);
  v8 = (siri::ontology::oname::graph::ontology_init *)CFEqual(v3, CFSTR("dinner"));
  if ((_DWORD)v8)
    return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_DinnerTime(v8);
  v9 = (siri::ontology::oname::graph::ontology_init *)CFEqual(v3, CFSTR("evening"));
  if ((_DWORD)v9)
    return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Evening(v9);
  v10 = (siri::ontology::oname::graph::ontology_init *)CFEqual(v3, CFSTR("lunch"));
  if ((_DWORD)v10)
    return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_LunchTime(v10);
  v11 = (siri::ontology::oname::graph::ontology_init *)CFEqual(v3, CFSTR("morning"));
  if ((_DWORD)v11)
    return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Morning(v11);
  v12 = (siri::ontology::oname::graph::ontology_init *)CFEqual(v3, CFSTR("night"));
  if ((_DWORD)v12)
    return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Night(v12);
  else
    return 0;
}

uint64_t uaap::TimeHandler::resolveDateTimeRangeQualifierValue(CFTypeRef *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  siri::ontology::oname::graph::ontology_init *v6;
  siri::ontology::oname::graph::ontology_init *EntityNode;
  siri::ontology::oname::graph::ontology_init *v8;
  uaap::UPDDSpan *v9;
  siri::ontology::oname::graph::ontology_init *v11;
  siri::ontology::oname::graph::ontology_init *v12;
  siri::ontology::oname::graph::ontology_init *v13;

  v4 = 0;
  if (a1 && a2 && a3 && a4)
  {
    siri::ontology::oname::graph::ontology_init::common_DateTimeRange((siri::ontology::oname::graph::ontology_init *)a1);
    if ((siri::ontology::operator!=() & 1) != 0)
      return 0;
    v6 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a1[3], CFSTR("restof"));
    if ((_DWORD)v6 || (v6 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a1[3], CFSTR("late")), (_DWORD)v6))
    {
      siri::ontology::oname::graph::ontology_init::common_DateTimeRangeQualifier_RestOf(v6);
    }
    else
    {
      v11 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a1[3], CFSTR("early"));
      if ((_DWORD)v11)
      {
        siri::ontology::oname::graph::ontology_init::common_DateTimeRangeQualifier_EarlierPartOf(v11);
      }
      else
      {
        v12 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a1[3], CFSTR("middle"));
        if ((_DWORD)v12)
        {
          siri::ontology::oname::graph::ontology_init::common_DateTimeRangeQualifier_MiddleOf(v12);
        }
        else
        {
          v13 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a1[3], CFSTR("beginning"));
          if (!(_DWORD)v13)
            return 0;
          siri::ontology::oname::graph::ontology_init::common_DateTimeRangeQualifier_StartOf(v13);
        }
      }
    }
    EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
    siri::ontology::oname::graph::ontology_init::common_DateTimeRangeQualifier(EntityNode);
    v4 = siri::ontology::UsoGraph::createEntityNode();
    v8 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
    siri::ontology::oname::graph::ontology_init::Argument_definedValue(v8);
    siri::ontology::UsoGraphNode::setSuccessor();
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, (siri::ontology::UsoEntityNode *)a1, v9);
  }
  return v4;
}

siri::ontology::oname::graph::ontology_init *uaap::TimeHandler::resolveTimeWithDateTimeRangeAndQualifier(siri::ontology::oname::graph::ontology_init *a1, uaap::UPDDTimeSpan *a2, uint64_t a3, uint64_t a4)
{
  siri::ontology::oname::graph::ontology_init *EntityNode;
  uint64_t v7;
  uint64_t v8;
  siri::ontology::UsoGraph *v9;
  siri::ontology::UsoEntityNode *v10;
  siri::ontology::oname::graph::ontology_init *v11;
  siri::ontology::UsoEntityNode *v12;
  void *v13;

  EntityNode = 0;
  if (a1 && a2 && a3 && a4)
  {
    siri::ontology::oname::graph::ontology_init::common_DateTimeRange(a1);
    v7 = siri::ontology::operator!=();
    if ((_DWORD)v7)
    {
      siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v7);
      v7 = siri::ontology::operator!=();
      if ((v7 & 1) != 0)
        return 0;
    }
    siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v7);
    EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
    v8 = siri::ontology::oname::graph::ontology_init::Argument_time(EntityNode);
    v9 = uaap::TimeHandler::resolveTime(a1, a2, (uint64_t)EntityNode, v8);
    v11 = uaap::TimeHandler::resolveDateTimeRangeValue(a1, a2, EntityNode, v10);
    v13 = uaap::TimeHandler::resolveDateTimeQualifierListValue(a1, a2, EntityNode, v12);
    if (v9 || v11 || v13)
      siri::ontology::UsoGraphNode::setSuccessor();
    else
      return 0;
  }
  return EntityNode;
}

uaap::AbstractDateTimeHandler *uaap::TimeHandler::resolveNowGraph(uaap::AbstractDateTimeHandler *this, siri::ontology::UsoGraph **a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  if (this)
  {
    this = (uaap::AbstractDateTimeHandler *)*((_QWORD *)this + 14);
    if (this)
      return uaap::TimeHandler::resolveNow((CFTypeRef *)this, (uaap::UPDDSpan *)a2, a2[11], a4);
  }
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::TimeHandler::resolveTimeGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDTimeSpan *a2, siri::ontology::UsoGraph *a3)
{
  siri::ontology::UsoEntityNode *v4;
  uint64_t v5;
  uint64_t v6;

  if (this)
  {
    v4 = this;
    v5 = *((_QWORD *)a2 + 11);
    v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::TimeHandler::resolveTime(v4, a2, v5, v6);
  }
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::TimeHandler::resolveRecurringTimeGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDTimeSpan *a2, siri::ontology::UsoGraph *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (this)
  {
    v4 = (uint64_t)this;
    v5 = *((_QWORD *)a2 + 11);
    v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::TimeHandler::resolveRecurringTime(v4, a2, v5, v6);
  }
  return this;
}

uaap::TimeHandler *uaap::TimeHandler::resolveDateTimeQualifierListValueGraph(uaap::TimeHandler *this, siri::ontology::UsoGraph **a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  if (this)
    return (uaap::TimeHandler *)uaap::TimeHandler::resolveDateTimeQualifierListValue(this, (uaap::UPDDDateTimeBaseSpan *)a2, a2[11], a4);
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::resolveTimeGraphWithDateTimeRange(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDTimeSpan *a2, siri::ontology::UsoGraph *a3)
{
  siri::ontology::UsoEntityNode *v4;
  uint64_t v5;
  uint64_t v6;

  if (this)
  {
    v4 = this;
    v5 = *((_QWORD *)a2 + 11);
    v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::TimeHandler::resolveTimeWithDateTimeRange(v4, a2, v5, v6);
  }
  return this;
}

_QWORD *uaap::TimeHandler::mapTimeToItemizedUsos(uint64_t a1, char **a2)
{
  uaap::mapTimeSpansToItemizedUsos(a1, a2);
  return uaap::mapTimeSpanSpansToItemizedUsos(a1, a2);
}

void sub_1C223E588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 16))(a14);

  _Unwind_Resume(a1);
}

void sub_1C223F15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t **a11, void *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,unsigned __int8 a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (*(char *)(v54 - 233) < 0)
    operator delete(*(void **)(v54 - 256));
  if (a42 < 0)
    operator delete(__p);
  if (a48 < 0)
    operator delete(a43);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)&a13);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a11, a29);
  if (a36 < 0)
    operator delete(a31);
  std::ifstream::~ifstream(&a49);

  if (a24 < 0)
    operator delete(a19);
  MEMORY[0x1C3BB8674](&a25);
  _Unwind_Resume(a1);
}

void sub_1C223F7B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t std::default_delete<snlp::common::asset_logger::SNLPAssetLogger>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    std::__tree<std::__value_type<std::__fs::filesystem::path,std::string>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::string>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::string>>>::destroy(*(_QWORD **)(result + 80));
    if (*(_BYTE *)(v1 + 64) && *(char *)(v1 + 63) < 0)
      operator delete(*(void **)(v1 + 40));
    MEMORY[0x1C3BB8674](v1 + 8);
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

uint64_t std::optional<sirinluinternalitfm::ITFMParserResponse>::operator=[abi:ne180100]<sirinluinternalitfm::ITFMParserResponse,void>(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
  {
    sirinluinternalitfm::ITFMParserResponse::operator=();
  }
  else
  {
    MEMORY[0x1C3BB859C](a1);
    *(_BYTE *)(a1 + 56) = 1;
  }
  return a1;
}

_BYTE *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(_BYTE *result, int *a2)
{
  unsigned __int8 *v2;
  int v3;
  nlohmann::detail::exception *exception;
  unint64_t v5;
  char *v6;
  std::string *v7;
  __int128 v8;
  std::string v9;
  __int128 v10;
  std::string::size_type v11;

  v2 = result;
  switch(*result)
  {
    case 4:
      v3 = result[8];
      break;
    case 5:
    case 6:
      v3 = *((_DWORD *)result + 2);
      break;
    case 7:
      v3 = (int)*((double *)result + 1);
      break;
    default:
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      v5 = *v2;
      if (v5 > 9)
        v6 = "number";
      else
        v6 = off_1E7BED038[v5];
      std::string::basic_string[abi:ne180100]<0>(&v9, v6);
      v7 = std::string::insert(&v9, 0, "type must be number, but is ");
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v11 = v7->__r_.__value_.__r.__words[2];
      v10 = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      nlohmann::detail::type_error::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 302, (uint64_t)&v10);
  }
  *a2 = v3;
  return result;
}

void sub_1C223FBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>::~pair(uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

std::string *std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>::pair[abi:ne180100]<std::string&,std::string const&,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = 4;
  return this;
}

void sub_1C223FCF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJijfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJijfbSD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJijfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJijfbSD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJijfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJijfbSD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  float result;

  result = *a3;
  *a2 = *(_DWORD *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJijfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJijfbSD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJijfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJijfbSD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

void sub_1C223FE20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C223FED8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C223FFB4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);

  _Unwind_Resume(a1);
}

void sub_1C22400B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  std::unique_ptr<PB::Writer>::reset[abi:ne180100]((PB::Writer **)va);
  _Unwind_Resume(a1);
}

PB::Writer *std::unique_ptr<PB::Writer>::reset[abi:ne180100](PB::Writer **a1)
{
  PB::Writer *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    PB::Writer::~Writer(result);
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

void sub_1C2240650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _Unwind_Exception *exception_object, _QWORD *a15, uint64_t a16, void *a17, uint64_t *a18, void *a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60)
{
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  void *v79;

  MEMORY[0x1C3BB9B44](v68, 0x10F3C406283AB8ALL);
  if (a41 < 0)
    operator delete(__p);

  if (a47 < 0)
    operator delete(a42);

  if (a53 < 0)
    operator delete(a48);

  if (a59 < 0)
    operator delete(a54);

  MEMORY[0x1C3BB8674](&a60);
  if (a2 == 1)
  {
    v70 = __cxa_begin_catch(a1);
    v71 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(a19, "loggingComponentString");
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a19, "loggingComponentString");
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(void *))(*(_QWORD *)v70 + 16))(v70);
    objc_msgSend(v71, "stringWithFormat:", CFSTR("%@ Asset Error when creating the %@ (ITFM) inference orchestrator: %s"));
    v73 = (void *)objc_claimAutoreleasedReturnValue();

    if (a15)
    {
      v74 = (void *)MEMORY[0x1E0CB35C8];
      objc_msgSend(a19, "errorDomain");
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      v76 = *MEMORY[0x1E0CB2D68];
      *(_QWORD *)(v69 - 240) = *MEMORY[0x1E0CB2D50];
      *(_QWORD *)(v69 - 232) = v76;
      *(_QWORD *)(v69 - 224) = v73;
      *(_QWORD *)(v69 - 216) = v73;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v69 - 224, v69 - 240, 2);
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v74, "errorWithDomain:code:userInfo:", v75, 1, v77);
      *a15 = (id)objc_claimAutoreleasedReturnValue();

    }
    __cxa_end_catch();
    JUMPOUT(0x1C2240608);
  }
  v78 = *a18;
  *a18 = 0;
  if (v78)
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 16))(v78);

  _Unwind_Resume(a1);
}

void itfm_inference_orchestrator::inference_engine::ITFMModule::forward(snlp::common::espresso_inference::pre_e5ml::EspressoModule *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *__p;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;

  v30 = 0;
  v31 = 0;
  v32 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v30, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v33, *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2);
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput((uint64_t)a1, (uint64_t)a1 + 80, (uint64_t)&v30);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v24, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3);
  v27 = 0;
  v28 = 0;
  v29 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v27, *(const void **)(a2 + 72), *(_QWORD *)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 2);
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput((uint64_t)a1, (uint64_t)a1 + 104, (uint64_t)&v24);
  v18 = 0;
  v19 = 0;
  v20 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v18, *(const void **)(a2 + 96), *(_QWORD *)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v21, *(const void **)(a2 + 120), *(_QWORD *)(a2 + 128), (uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 2);
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput((uint64_t)a1, (uint64_t)a1 + 128, (uint64_t)&v18);
  v12 = 0;
  v13 = 0;
  v14 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v12, *(const void **)(a2 + 144), *(_QWORD *)(a2 + 152), (uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3);
  __p = 0;
  v16 = 0;
  v17 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)(a2 + 168), *(_QWORD *)(a2 + 176), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 2);
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput((uint64_t)a1, (uint64_t)a1 + 152, (uint64_t)&v12);
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::executePlan(a1);
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  itfm_inference_orchestrator::inference_engine::ITFMModule::getITFMOutput(&v8);
  v6 = v9;
  *(_OWORD *)a3 = v8;
  *(_QWORD *)(a3 + 16) = v6;
  v7 = v11;
  *(_OWORD *)(a3 + 24) = v10;
  *(_QWORD *)(a3 + 40) = v7;
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
}

void sub_1C2240CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *v28;
  uint64_t v29;

  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v28);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&__p);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a21);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a27);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)(v29 - 96));
  _Unwind_Resume(a1);
}

void itfm_inference_orchestrator::inference_engine::ITFMModule::getITFMOutput(_QWORD *a1@<X8>)
{
  void *v3;
  _BYTE *v4;
  void *__p;
  _BYTE *v6;

  snlp::common::espresso_inference::pre_e5ml::EspressoModule::getOutput((uint64_t)&v3);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1, v3, (uint64_t)v4, (v4 - (_BYTE *)v3) >> 3);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a1 + 3, __p, (uint64_t)v6, (v6 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  if (v3)
  {
    v4 = v3;
    operator delete(v3);
  }
}

void sub_1C2240DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a9);
  _Unwind_Resume(a1);
}

uint64_t itfm_inference_orchestrator::inference_engine::ITFMModule::setEmbeddingInput(uint64_t a1, uint64_t a2)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1, a1 + 80, a2);
}

uint64_t itfm_inference_orchestrator::inference_engine::ITFMModule::setSpansFeaturesInput(uint64_t a1, uint64_t a2)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1, a1 + 104, a2);
}

uint64_t itfm_inference_orchestrator::inference_engine::ITFMModule::setContextFeaturesInput(uint64_t a1, uint64_t a2)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1, a1 + 128, a2);
}

uint64_t itfm_inference_orchestrator::inference_engine::ITFMModule::setMaskInput(uint64_t a1, uint64_t a2)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1, a1 + 152, a2);
}

void uaap::DateSpanHandler::~DateSpanHandler(uaap::DateSpanHandler *this)
{
  JUMPOUT(0x1C3BB9B44);
}

_QWORD *uaap::DateSpanHandler::handle(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  _QWORD *result;

  result = (_QWORD *)DDResultHasType();
  if ((_DWORD)result)
    return uaap::DateSpanHandler::mapDateSpanToItemizedUsos(a3, a4);
  return result;
}

_QWORD *uaap::DateSpanHandler::mapDateSpanToItemizedUsos(uint64_t a1, char **a2)
{
  CFHashCode v4;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  siri::ontology::oname::graph::ontology_init *v10;
  uaap *v11;
  siri::ontology::oname::graph::ontology_init *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uaap *v17;
  siri::ontology::oname::graph::ontology_init *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __CFString *v22;
  siri::ontology::oname::graph::ontology_init *v23;
  uint64_t length;
  uint64_t v25;
  uint64_t v26;
  uaap::UPDDDateSpan *v27;
  siri::ontology::UsoGraph *v28;
  const __CFString *v29;
  siri::ontology::oname::graph::ontology_init *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  siri::ontology::oname::graph::ontology_init *v34;
  uaap::AbstractDateTimeHandler *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const __CFString *v41;
  _QWORD *p_isa;
  uint64_t v43;
  int v44;

  v4 = CFHash(CFSTR("DateSpan"));
  result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v4);
  if (result)
  {
    v6 = result;
    v8 = result[3];
    v7 = result[4];
    if (v7 != v8)
    {
      v9 = 0;
      do
      {
        result = *(_QWORD **)(v8 + 8 * v9);
        if (result)
        {
          if (result)
          {
            v10 = (siri::ontology::oname::graph::ontology_init *)result;
            if (uaap::DateSpanHandler::isRecurringDate((uint64_t)result))
            {
              v11 = (uaap *)operator new();
              v43 = 0;
              v44 = 0;
              v12 = (siri::ontology::oname::graph::ontology_init *)MEMORY[0x1C3BB9154](v11, &v43);
              p_isa = v11;
              v13 = *((_QWORD *)v11 + 11);
              v14 = siri::ontology::oname::graph::ontology_init::Argument_entity(v12);
              uaap::DateSpanHandler::resolveRecurringDateSpan(v10, v11, v13, v14);
              uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&p_isa, a2);
              if (p_isa)
              {
                v15 = MEMORY[0x1C3BB916C]();
                MEMORY[0x1C3BB9B44](v15, 0x10A0C403D23BABBLL);
              }
            }
            v16 = *((_QWORD *)v10 + 16);
            if (v16)
            {
              if (*(_QWORD *)(v16 + 48))
              {
                v17 = (uaap *)operator new();
                v43 = 0;
                v44 = 0;
                v18 = (siri::ontology::oname::graph::ontology_init *)MEMORY[0x1C3BB9154](v17, &v43);
                p_isa = v17;
                v19 = *((_QWORD *)v17 + 11);
                v20 = siri::ontology::oname::graph::ontology_init::Argument_entity(v18);
                uaap::DateHandler::resolveDurationValueAndUnit(v10, v17, v19, v20);
                uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&p_isa, a2);
                if (p_isa)
                {
                  v21 = MEMORY[0x1C3BB916C]();
                  MEMORY[0x1C3BB9B44](v21, 0x10A0C403D23BABBLL);
                }
              }
            }
            if (!*((_QWORD *)v10 + 10) || !*((_QWORD *)v10 + 16))
            {
              v22 = (__CFString *)operator new();
              v43 = 0;
              v44 = 0;
              v23 = (siri::ontology::oname::graph::ontology_init *)MEMORY[0x1C3BB9154](v22, &v43);
              p_isa = &v22->isa;
              length = v22[2].length;
              v25 = siri::ontology::oname::graph::ontology_init::Argument_entity(v23);
              uaap::DateSpanHandler::resolveDateSpan(v10, v22, length, v25);
              uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&p_isa, a2);
              if (p_isa)
              {
                v26 = MEMORY[0x1C3BB916C]();
                MEMORY[0x1C3BB9B44](v26, 0x10A0C403D23BABBLL);
              }
            }
            v27 = (uaap::UPDDDateSpan *)operator new();
            v43 = 0;
            v44 = 0;
            MEMORY[0x1C3BB9154](v27, &v43);
            p_isa = v27;
            uaap::DateSpanHandler::resolveDateTimeRangeSpanGraph(v10, v27, v28);
            uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&p_isa, a2);
            v29 = (const __CFString *)operator new();
            v43 = 0;
            v44 = 0;
            v30 = (siri::ontology::oname::graph::ontology_init *)MEMORY[0x1C3BB9154](v29, &v43);
            v41 = v29;
            v31 = v29[2].length;
            v32 = siri::ontology::oname::graph::ontology_init::Argument_entity(v30);
            uaap::DateHandler::resolveDateTimeRangeWithQualifier(v10, v29, v31, v32);
            uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v41, a2);
            v33 = operator new();
            v43 = 0;
            v44 = 0;
            v34 = (siri::ontology::oname::graph::ontology_init *)MEMORY[0x1C3BB9154](v33, &v43);
            v40 = v33;
            v35 = *(uaap::AbstractDateTimeHandler **)(v33 + 88);
            v36 = siri::ontology::oname::graph::ontology_init::Argument_entity(v34);
            uaap::DateHandler::resolveAbsoluteDateWithSpecialPeriod(v10, v33, v35, v36);
            uaap::AbstractDateTimeHandler::addIfPopulated(&v40, a2);
            if (v40)
            {
              v37 = MEMORY[0x1C3BB916C]();
              MEMORY[0x1C3BB9B44](v37, 0x10A0C403D23BABBLL);
            }
            if (v41)
            {
              v38 = MEMORY[0x1C3BB916C]();
              MEMORY[0x1C3BB9B44](v38, 0x10A0C403D23BABBLL);
            }
            result = p_isa;
            if (p_isa)
            {
              v39 = MEMORY[0x1C3BB916C]();
              result = (_QWORD *)MEMORY[0x1C3BB9B44](v39, 0x10A0C403D23BABBLL);
            }
            v8 = v6[3];
            v7 = v6[4];
          }
        }
        ++v9;
      }
      while (v9 < (v7 - v8) >> 3);
    }
  }
  return result;
}

void sub_1C224124C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10A0C403D23BABBLL);
  _Unwind_Resume(a1);
}

uint64_t uaap::DateSpanHandler::isRecurringDate(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  const void *v5;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 48);
    if (v2)
    {
      v3 = *(const void **)(v2 + 24);
      if (v3)
      {
        if (CFEqual(CFSTR("every"), v3))
          return 1;
      }
    }
    v4 = *(_QWORD *)(v1 + 128);
    if (v4 && (v5 = *(const void **)(v4 + 96)) != 0)
    {
      if (CFEqual(CFSTR("every"), v5))
        return 1;
      return CFEqual(CFSTR("potentialEvery"), *(CFTypeRef *)(*(_QWORD *)(v1 + 128) + 96)) != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

siri::ontology::oname::graph::ontology_init *uaap::DateSpanHandler::resolveRecurringDateSpan(siri::ontology::oname::graph::ontology_init *a1, uaap *a2, uint64_t a3, uint64_t a4)
{
  siri::ontology::oname::graph::ontology_init *EntityNode;
  uint64_t v7;
  uint64_t v8;
  siri::ontology::oname::graph::ontology_init *v9;
  siri::ontology::UsoGraph *v10;
  siri::ontology::UsoEntityNode *v11;
  siri::ontology::oname::graph::ontology_init *v12;
  uaap::UPDDSpan *v13;
  siri::ontology::UsoEntityNode *v14;
  uint64_t v15;

  EntityNode = 0;
  if (a2 && a1 && a3 && a4)
  {
    siri::ontology::oname::graph::ontology_init::Root(a1);
    v7 = siri::ontology::operator!=();
    if ((v7 & 1) != 0)
      return 0;
    siri::ontology::oname::graph::ontology_init::common_RecurringDateTime((siri::ontology::oname::graph::ontology_init *)v7);
    EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
    v8 = siri::ontology::oname::graph::ontology_init::Argument_recurrencePeriod(EntityNode);
    v9 = (siri::ontology::oname::graph::ontology_init *)uaap::DateHandler::resolveDurationValueAndUnit(a1, a2, (uint64_t)EntityNode, v8);
    siri::ontology::oname::graph::ontology_init::common_DateTime(v9);
    v10 = (siri::ontology::UsoGraph *)siri::ontology::UsoGraph::createEntityNode();
    v12 = uaap::DateHandler::resolveDateTimeRangeValue(a1, a2, v10, v11);
    if (v12)
    {
      siri::ontology::oname::graph::ontology_init::Argument_recurrenceDateTimes(v12);
      siri::ontology::UsoGraphNode::setSuccessor();
      v15 = *((_QWORD *)a1 + 6);
      if (v15 && *(_QWORD *)(v15 + 24))
        uaap::TimeHandler::resolveDateTimeQualifierListValue(a1, a2, v10, v14);
    }
    else if (!v9)
    {
      return 0;
    }
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, a1, v13);
    siri::ontology::UsoGraphNode::setSuccessor();
  }
  return EntityNode;
}

uaap::AbstractDateTimeHandler *uaap::DateSpanHandler::resolveDateSpan(siri::ontology::oname::graph::ontology_init *a1, __CFString *a2, uint64_t a3, uint64_t a4)
{
  siri::ontology::UsoGraph *EntityNode;
  siri::ontology::UsoEntityNode *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  _BOOL4 v13;
  siri::ontology::oname::graph::ontology_init *v14;
  uaap::UPDDSpan *v15;
  siri::ontology::UsoEntityNode *v16;
  siri::ontology::oname::graph::ontology_init *v17;
  _BOOL4 v18;
  uint64_t v19;
  char v20;
  char v21;
  _BOOL4 v23;

  EntityNode = 0;
  if (!a1 || !a2 || !a3 || !a4)
    return EntityNode;
  siri::ontology::oname::graph::ontology_init::common_Date(a1);
  EntityNode = (siri::ontology::UsoGraph *)siri::ontology::UsoGraph::createEntityNode();
  v10 = *((_QWORD *)a1 + 16);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 48);
    v12 = *(_QWORD *)(v10 + 88) != 0;
    if (v11)
    {
      v13 = CFEqual(*(CFTypeRef *)(v11 + 24), CFSTR("week")) != 0;
      v23 = CFEqual(*(CFTypeRef *)(*(_QWORD *)(*((_QWORD *)a1 + 16) + 48) + 24), CFSTR("year")) != 0;
      goto LABEL_11;
    }
    v13 = 0;
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  v23 = 0;
LABEL_11:
  v14 = uaap::DateSpanHandler::resolveDateSpanMonthOfYear((__CFString *)a1, a2, EntityNode, v9);
  v17 = v14;
  v18 = v14 != 0;
  v19 = *((_QWORD *)a1 + 6);
  if (!v19)
  {
    if (!v12)
      goto LABEL_27;
LABEL_18:
    if (v13)
    {
      siri::ontology::oname::graph::ontology_init::common_Integer(v14);
      v17 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::Argument_weekOfYear(v17);
      v14 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
      v18 = 1;
    }
    if (v23)
    {
      siri::ontology::oname::graph::ontology_init::common_Integer(v14);
      v17 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::Argument_year(v17);
      siri::ontology::UsoGraphNode::setSuccessor();
      v18 = 1;
    }
    else if (!v17)
    {
LABEL_24:
      if (!uaap::TimeHandler::resolveDateTimeQualifierListValue(a1, (uaap::UPDDDateTimeBaseSpan *)a2, EntityNode, v16)
        && !uaap::DateSpanHandler::resolveDateSpanWithOrdinalCount(a1, a2, v17, v16))
      {
        goto LABEL_27;
      }
LABEL_26:
      v18 = 1;
      goto LABEL_27;
    }
    if (uaap::TimeHandler::resolveDateTimeQualifierListValue(a1, (uaap::UPDDDateTimeBaseSpan *)a2, v17, v16))
      goto LABEL_26;
    goto LABEL_24;
  }
  if (*(_QWORD *)(v19 + 24))
    v20 = 1;
  else
    v20 = v12;
  if ((v20 & 1) != 0)
    goto LABEL_18;
LABEL_27:
  if (v10)
  {
    if (uaap::DateHandler::resolveDateTimeRangeValue(a1, (uaap::UPDDDateSpan *)a2, EntityNode, v16))
      v21 = 1;
    else
      v21 = v18;
    if ((v21 & 1) != 0)
      goto LABEL_32;
  }
  else if (v18)
  {
LABEL_32:
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, a1, v15);
    siri::ontology::UsoGraphNode::setSuccessor();
    return EntityNode;
  }
  return uaap::resolveDateSpanRelativeDay((uint64_t)a1, (uint64_t)a2, a3, a4);
}

uaap::DateHandler *uaap::DateSpanHandler::resolveDateTimeRangeSpanGraph(uaap::DateHandler *this, uaap::UPDDDateSpan *a2, siri::ontology::UsoGraph *a3)
{
  uaap::DateHandler *v3;
  uint64_t v4;
  uint64_t v5;
  siri::ontology::UsoGraph *EntityNode;
  siri::ontology::UsoEntityNode *v8;
  uaap::UPDDSpan *v9;
  siri::ontology::oname::graph::ontology_init *v10;
  siri::ontology::UsoEntityNode *v11;
  uint64_t v12;

  if (this)
  {
    v3 = this;
    v4 = *((_QWORD *)this + 16);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 48);
      if (v5)
      {
        if (*(_QWORD *)(v5 + 24))
        {
          siri::ontology::oname::graph::ontology_init::common_DateTime(this);
          EntityNode = (siri::ontology::UsoGraph *)siri::ontology::UsoGraph::createEntityNode();
          this = uaap::DateHandler::resolveDateTimeRangeValue(v3, a2, EntityNode, v8);
          if (this)
          {
            uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, v3, v9);
            siri::ontology::oname::graph::ontology_init::Argument_entity(v10);
            this = (uaap::DateHandler *)siri::ontology::UsoGraphNode::setSuccessor();
            v12 = *((_QWORD *)v3 + 6);
            if (v12)
            {
              if (*(_QWORD *)(v12 + 24))
                return (uaap::DateHandler *)uaap::TimeHandler::resolveDateTimeQualifierListValue(v3, a2, EntityNode, v11);
            }
          }
        }
      }
    }
  }
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::DateSpanHandler::resolveDateSpanMonthOfYear(__CFString *this, const __CFString *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  siri::ontology::oname::graph::ontology_init *EntityNode;
  __CFString *v5;
  void *isa;
  uint64_t v7;
  _BOOL4 v8;
  const __CFString *v9;
  siri::ontology::oname::graph::ontology_init *v10;
  uaap::UPDDSpan *v11;

  EntityNode = 0;
  if (this && a2 && a3)
  {
    v5 = this;
    isa = this[4].isa;
    if (isa)
    {
      v7 = *((_QWORD *)isa + 7);
      if (v7 && (this = *(__CFString **)(v7 + 24)) != 0)
      {
        this = (__CFString *)uaap::DateSpanHandler::getMonthOfYearDefinedValue(this, a2);
        v8 = this != 0;
        isa = v5[4].isa;
      }
      else
      {
        v8 = 0;
      }
      isa = (void *)*((_QWORD *)isa + 6);
      if (isa)
      {
        this = (__CFString *)CFEqual(*((CFTypeRef *)isa + 3), CFSTR("month"));
        LODWORD(isa) = (_DWORD)this != 0;
      }
    }
    else
    {
      v8 = 0;
    }
    if (v8 || (_DWORD)isa)
    {
      siri::ontology::oname::graph::ontology_init::common_MonthOfYear((siri::ontology::oname::graph::ontology_init *)this);
      EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::Argument_monthOfYear(EntityNode);
      siri::ontology::UsoGraphNode::setSuccessor();
      if (v8)
      {
        uaap::DateSpanHandler::getMonthOfYearDefinedValue(*(const __CFString **)(*((_QWORD *)v5[4].isa + 7) + 24), v9);
        v10 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
        siri::ontology::oname::graph::ontology_init::Argument_definedValue(v10);
        siri::ontology::UsoGraphNode::setSuccessor();
        uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v10, *((siri::ontology::UsoEntityNode **)v5[4].isa + 7), v11);
      }
    }
    else
    {
      return 0;
    }
  }
  return EntityNode;
}

siri::ontology::oname::graph::ontology_init *uaap::DateSpanHandler::resolveDateSpanWithOrdinalCount(uaap::DateSpanHandler *this, const __CFString *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  siri::ontology::oname::graph::ontology_init *EntityNode;
  uint64_t v7;
  siri::ontology::oname::graph::ontology_init *v8;
  siri::ontology::UsoGraph *v9;
  siri::ontology::oname::graph::ontology_init *v10;
  siri::ontology::oname::graph::ontology_init *v11;
  siri::ontology::oname::graph::ontology_init *v12;
  siri::ontology::oname::graph::ontology_init *v13;
  siri::ontology::oname::graph::ontology_init *v14;
  siri::ontology::oname::graph::ontology_init *v15;
  siri::ontology::oname::graph::ontology_init *OrdinalCountAsListPositionVal;
  uaap::AbstractDateTimeHandler *v17;
  siri::ontology::oname::graph::ontology_init *v18;
  uaap::UPDDSpan *v19;
  siri::ontology::oname::graph::ontology_init *v20;
  uaap::UPDDSpan *v21;

  EntityNode = 0;
  if (this && a2 && a3)
  {
    v7 = *((_QWORD *)this + 16);
    if (!v7)
      return 0;
    if (!*(_QWORD *)(v7 + 88))
      return 0;
    siri::ontology::oname::graph::ontology_init::common_DateTime(this);
    v8 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
    if ((_DWORD)v8)
    {
      siri::ontology::oname::graph::ontology_init::common_DateTimeRange(v8);
      v10 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
      if ((_DWORD)v10)
      {
        siri::ontology::oname::graph::ontology_init::common_Date(v10);
        v11 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
        if ((_DWORD)v11)
        {
          siri::ontology::oname::graph::ontology_init::common_Time(v11);
          v12 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
          if ((_DWORD)v12)
          {
            siri::ontology::oname::graph::ontology_init::common_Integer(v12);
            v13 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
            if ((_DWORD)v13)
            {
              siri::ontology::oname::graph::ontology_init::common_DayOfWeek(v13);
              v14 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
              if ((_DWORD)v14)
              {
                siri::ontology::oname::graph::ontology_init::common_MonthOfYear(v14);
                v15 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
                if ((_DWORD)v15)
                {
                  siri::ontology::oname::graph::ontology_init::Root(v15);
                  if ((siri::ontology::operator!=() & 1) != 0)
                    return 0;
                }
              }
            }
          }
        }
      }
    }
    OrdinalCountAsListPositionVal = (siri::ontology::oname::graph::ontology_init *)uaap::getOrdinalCountAsListPositionVal(this, a2, v9);
    if (!OrdinalCountAsListPositionVal)
    {
      return 0;
    }
    else
    {
      v17 = OrdinalCountAsListPositionVal;
      siri::ontology::oname::graph::ontology_init::common_ListPosition(OrdinalCountAsListPositionVal);
      EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::Root(EntityNode);
      v18 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator==();
      if ((_DWORD)v18)
      {
        siri::ontology::oname::graph::ontology_init::Argument_entity(v18);
        siri::ontology::UsoGraphNode::setSuccessor();
        uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, *(siri::ontology::UsoEntityNode **)(*((_QWORD *)this + 16) + 88), v19);
      }
      else
      {
        siri::ontology::oname::graph::ontology_init::Argument_usoListPosition(v18);
        v20 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
      }
      siri::ontology::oname::graph::ontology_init::Argument_definedValue(v20);
      siri::ontology::UsoGraphNode::setSuccessor();
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v17, this, v21);
    }
  }
  return EntityNode;
}

uaap::AbstractDateTimeHandler *uaap::resolveDateSpanRelativeDay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uaap::AbstractDateTimeHandler *result;
  uint64_t v6;

  result = 0;
  if (a1 && a2 && a3 && a4)
  {
    v6 = *(_QWORD *)(a1 + 104);
    if (v6)
    {
      return uaap::DateHandler::resolveRelativeDayOfWeek(v6, a2, a3, a4);
    }
    else
    {
      result = *(uaap::AbstractDateTimeHandler **)(a1 + 96);
      if (result)
        return uaap::DateHandler::resolveRelativeDay((uint64_t)result, a2, a3, a4);
    }
  }
  return result;
}

uint64_t uaap::getOrdinalCountAsListPositionVal(uaap *this, const __CFString *a2, siri::ontology::UsoGraph *a3)
{
  uint64_t v3;
  uint64_t v4;
  siri::ontology::oname::graph::ontology_init *IntValueFromCFStringRef;

  if (!this)
    return 0;
  if (!a2)
    return 0;
  v3 = *((_QWORD *)this + 16);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 88);
  if (!v4)
    return 0;
  IntValueFromCFStringRef = (siri::ontology::oname::graph::ontology_init *)uaap::UPDDSpan::extractIntValueFromCFStringRef(*(const __CFString **)(v4 + 24), a2);
  switch((int)IntValueFromCFStringRef)
  {
    case -1:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Last(IntValueFromCFStringRef);
      break;
    case 0:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Current(IntValueFromCFStringRef);
      break;
    case 1:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_First(IntValueFromCFStringRef);
      break;
    case 2:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Second(IntValueFromCFStringRef);
      break;
    case 3:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Third(IntValueFromCFStringRef);
      break;
    case 4:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Fourth(IntValueFromCFStringRef);
      break;
    case 5:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Fifth(IntValueFromCFStringRef);
      break;
    case 6:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Sixth(IntValueFromCFStringRef);
      break;
    case 7:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Seventh(IntValueFromCFStringRef);
      break;
    case 8:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Eighth(IntValueFromCFStringRef);
      break;
    case 9:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Ninth(IntValueFromCFStringRef);
      break;
    case 10:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Tenth(IntValueFromCFStringRef);
      break;
    case 11:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Eleventh(IntValueFromCFStringRef);
      break;
    case 12:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Twelfth(IntValueFromCFStringRef);
      break;
    case 13:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Thirteenth(IntValueFromCFStringRef);
      break;
    case 14:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Fourteenth(IntValueFromCFStringRef);
      break;
    case 15:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Fifteenth(IntValueFromCFStringRef);
      break;
    case 16:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Sixteenth(IntValueFromCFStringRef);
      break;
    case 17:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Seventeenth(IntValueFromCFStringRef);
      break;
    case 18:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Eighteenth(IntValueFromCFStringRef);
      break;
    case 19:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Nineteenth(IntValueFromCFStringRef);
      break;
    case 20:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_Twentieth(IntValueFromCFStringRef);
      break;
    case 21:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_TwentyFirst(IntValueFromCFStringRef);
      break;
    case 22:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_TwentySecond(IntValueFromCFStringRef);
      break;
    case 23:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_TwentyThird(IntValueFromCFStringRef);
      break;
    case 24:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_TwentyFourth(IntValueFromCFStringRef);
      break;
    case 25:
      siri::ontology::oname::graph::ontology_init::common_ListPosition_TwentyFifth(IntValueFromCFStringRef);
      break;
    default:
      return 0;
  }
  return siri::ontology::UsoGraph::createEntityNode();
}

uint64_t uaap::DateSpanHandler::getMonthOfYearDefinedValue(const __CFString *this, const __CFString *a2)
{
  siri::ontology::oname::graph::ontology_init *IntValueFromCFStringRef;
  int v4;
  NSObject *v5;
  void **v6;
  uint64_t result;
  NSObject *v8;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  void **v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  IntValueFromCFStringRef = (siri::ontology::oname::graph::ontology_init *)uaap::UPDDSpan::extractIntValueFromCFStringRef(this, a2);
  v4 = (int)IntValueFromCFStringRef;
  switch((int)IntValueFromCFStringRef)
  {
    case 0:
      v5 = SNLPOSLoggerForCategory(3);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, this);
        if (v10 >= 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v12 = v6;
        _os_log_impl(&dword_1C2196000, v5, OS_LOG_TYPE_DEFAULT, "Warning: failed to parse month number string as an integer: '%s'. Returning nullptr.", buf, 0xCu);
        if (v10 < 0)
          operator delete(__p[0]);
      }
      goto LABEL_17;
    case 1:
      result = siri::ontology::oname::graph::ontology_init::common_MonthOfYear_January(IntValueFromCFStringRef);
      break;
    case 2:
      result = siri::ontology::oname::graph::ontology_init::common_MonthOfYear_February(IntValueFromCFStringRef);
      break;
    case 3:
      result = siri::ontology::oname::graph::ontology_init::common_MonthOfYear_March(IntValueFromCFStringRef);
      break;
    case 4:
      result = siri::ontology::oname::graph::ontology_init::common_MonthOfYear_April(IntValueFromCFStringRef);
      break;
    case 5:
      result = siri::ontology::oname::graph::ontology_init::common_MonthOfYear_May(IntValueFromCFStringRef);
      break;
    case 6:
      result = siri::ontology::oname::graph::ontology_init::common_MonthOfYear_June(IntValueFromCFStringRef);
      break;
    case 7:
      result = siri::ontology::oname::graph::ontology_init::common_MonthOfYear_July(IntValueFromCFStringRef);
      break;
    case 8:
      result = siri::ontology::oname::graph::ontology_init::common_MonthOfYear_August(IntValueFromCFStringRef);
      break;
    case 9:
      result = siri::ontology::oname::graph::ontology_init::common_MonthOfYear_September(IntValueFromCFStringRef);
      break;
    case 10:
      result = siri::ontology::oname::graph::ontology_init::common_MonthOfYear_October(IntValueFromCFStringRef);
      break;
    case 11:
      result = siri::ontology::oname::graph::ontology_init::common_MonthOfYear_November(IntValueFromCFStringRef);
      break;
    case 12:
      result = siri::ontology::oname::graph::ontology_init::common_MonthOfYear_December(IntValueFromCFStringRef);
      break;
    default:
      v8 = SNLPOSLoggerForCategory(3);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = v4;
        _os_log_impl(&dword_1C2196000, v8, OS_LOG_TYPE_DEFAULT, "Warning: parsed month number not in [1, 12]: %u. Returning nullptr.", (uint8_t *)__p, 8u);
      }
LABEL_17:
      result = 0;
      break;
  }
  return result;
}

_QWORD *applesauce::CF::convert_to<std::string,0>(uint64_t a1, const __CFString *a2)
{
  CFTypeID TypeID;
  char *CStringPtr;
  CFIndex Length;
  UInt8 *v8;
  std::runtime_error *exception;
  CFIndex maxBufLen;
  CFRange v11;
  CFRange v12;

  if (!a2 || (TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(a2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CStringPtr = (char *)CFStringGetCStringPtr(a2, 0x8000100u);
  if (CStringPtr)
    return std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, CStringPtr);
  Length = CFStringGetLength(a2);
  maxBufLen = 0;
  v11.location = 0;
  v11.length = Length;
  CFStringGetBytes(a2, v11, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  std::string::basic_string[abi:ne180100]((_QWORD *)a1, maxBufLen, 0);
  if (*(char *)(a1 + 23) >= 0)
    v8 = (UInt8 *)a1;
  else
    v8 = *(UInt8 **)a1;
  v12.location = 0;
  v12.length = Length;
  return (_QWORD *)CFStringGetBytes(a2, v12, 0x8000100u, 0, 0, v8, maxBufLen, &maxBufLen);
}

void sub_1C22420DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::runtime_error *applesauce::CF::convert_error(std::runtime_error *this)
{
  return std::runtime_error::runtime_error(this, "Could not convert");
}

BOOL uaap::DateSpanHandler::isDateSpanWithUnit(_BOOL8 result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *(_QWORD *)(result + 128);
    return v1 && *(_QWORD *)(v1 + 48);
  }
  return result;
}

siri::ontology::UsoGraph *uaap::DateSpanHandler::resolveDateWithMonthOfYear(siri::ontology::oname::graph::ontology_init *a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  siri::ontology::UsoGraph *EntityNode;
  siri::ontology::UsoEntityNode *v7;

  EntityNode = 0;
  if (a1 && a2 && a3 && a4)
  {
    siri::ontology::oname::graph::ontology_init::common_Date(a1);
    EntityNode = (siri::ontology::UsoGraph *)siri::ontology::UsoGraph::createEntityNode();
    if (uaap::DateSpanHandler::resolveDateSpanMonthOfYear((__CFString *)a1, a2, EntityNode, v7))
      siri::ontology::UsoGraphNode::setSuccessor();
    else
      return 0;
  }
  return EntityNode;
}

siri::ontology::oname::graph::ontology_init *uaap::DateSpanHandler::resolveDateSpanGraph(siri::ontology::oname::graph::ontology_init *this, __CFString *a2, siri::ontology::UsoGraph *a3)
{
  siri::ontology::oname::graph::ontology_init *v4;
  uint64_t length;
  uint64_t v6;

  if (this)
  {
    v4 = this;
    length = a2[2].length;
    v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::DateSpanHandler::resolveDateSpan(v4, a2, length, v6);
  }
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::DateSpanHandler::resolveRecurringDateSpanGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDDateSpan *a2, siri::ontology::UsoGraph *a3)
{
  siri::ontology::oname::graph::ontology_init *v4;
  uint64_t v5;
  uint64_t v6;

  if (this)
  {
    v4 = this;
    v5 = *((_QWORD *)a2 + 11);
    v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::DateSpanHandler::resolveRecurringDateSpan(v4, a2, v5, v6);
  }
  return this;
}

_QWORD *snlp::ssu::parse::SSUParseBuilder::SSUParseBuilder(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

void snlp::ssu::parse::SSUParseBuilder::buildParse(siri::ontology **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  uint64_t v9;
  sirinluexternal::UserStatedTask **v10;
  sirinluexternal::UserDialogAct *v11;
  sirinluexternal::UserStatedTask *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  int64x2_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t buf[8];
  int64x2_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  snlp::ssu::parse::SSUGraphBuilder::buildGraph(*a1, a2, a3, a4, a5, &v42);
  if (v42)
  {
    siri::ontology::UsoGraphProtoWriter::toProtobuf();
    v9 = *(_QWORD *)buf;
    if (*(_QWORD *)buf)
    {
      v10 = (sirinluexternal::UserStatedTask **)operator new();
      v11 = (sirinluexternal::UserDialogAct *)sirinluexternal::UserDialogAct::UserDialogAct((sirinluexternal::UserDialogAct *)v10);
      sirinluexternal::UserDialogAct::makeUserStatedTask(v11);
      sirinluexternal::UserStatedTask::makeTask(v10[7]);
      v12 = v10[7];
      v13 = *((_QWORD *)v12 + 1);
      *((_QWORD *)v12 + 1) = v9;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v14 = operator new();
      *a6 = sirinluexternal::UserParse::UserParse((sirinluexternal::UserParse *)v14);
      v15 = operator new();
      MEMORY[0x1C3BB82E4](v15, v10);
      v16 = *(_QWORD *)(v14 + 80);
      v17 = *(uint64_t **)(v14 + 72);
      if ((unint64_t)v17 >= v16)
      {
        v19 = *(_QWORD *)(v14 + 64);
        v20 = ((uint64_t)v17 - v19) >> 3;
        if ((unint64_t)(v20 + 1) >> 61)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v21 = v16 - v19;
        v22 = v21 >> 2;
        if (v21 >> 2 <= (unint64_t)(v20 + 1))
          v22 = v20 + 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        v46 = v14 + 80;
        if (v23)
          v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v23);
        else
          v24 = 0;
        v25 = (uint64_t *)(v23 + 8 * v20);
        v26 = v23 + 8 * v24;
        v45 = v26;
        *v25 = v15;
        v18 = v25 + 1;
        v44.i64[1] = (uint64_t)(v25 + 1);
        v28 = *(_QWORD **)(v14 + 64);
        v27 = *(_QWORD **)(v14 + 72);
        if (v27 == v28)
        {
          v30 = vdupq_n_s64((unint64_t)v27);
        }
        else
        {
          do
          {
            v29 = *--v27;
            *v27 = 0;
            *--v25 = v29;
          }
          while (v27 != v28);
          v30 = *(int64x2_t *)(v14 + 64);
          v18 = (_QWORD *)v44.i64[1];
          v26 = v45;
        }
        *(_QWORD *)(v14 + 64) = v25;
        *(_QWORD *)(v14 + 72) = v18;
        v44 = v30;
        v31 = *(_QWORD *)(v14 + 80);
        *(_QWORD *)(v14 + 80) = v26;
        v45 = v31;
        *(_QWORD *)buf = v30.i64[0];
        std::__split_buffer<std::unique_ptr<sirinluexternal::UserParse>>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        *v17 = v15;
        v18 = v17 + 1;
      }
      *(_QWORD *)(v14 + 72) = v18;
      sirinluexternal::UserParse::makeIdA((sirinluexternal::UserParse *)v14);
      v32 = operator new();
      sirinluexternal::UUID::UUID((sirinluexternal::UUID *)v32);
      *(_DWORD *)buf = 0;
      boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)buf);
      v33 = boost::uuids::random_generator_pure::operator()((int *)buf);
      v35 = v34;
      boost::uuids::detail::random_provider_base::destroy(*(unsigned int *)buf);
      *(_BYTE *)(v32 + 28) |= 3u;
      *(_QWORD *)(v32 + 8) = v35;
      *(_QWORD *)(v32 + 16) = v33;
      v36 = *(_QWORD *)(v14 + 24);
      *(_QWORD *)(v14 + 24) = v32;
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      v37 = *(_BYTE *)(v14 + 88);
      *(_QWORD *)(v14 + 8) = 0x3FF0000000000000;
      *(_BYTE *)(v14 + 88) = v37 | 3;
      *(double *)(v14 + 48) = a7;
      sirinluexternal::UserParse::makeParser((sirinluexternal::UserParse *)v14);
      v38 = *(_QWORD *)(v14 + 32);
      *(_BYTE *)(v38 + 16) |= 2u;
      *(_DWORD *)(v38 + 12) = 9;
      v39 = *(_QWORD *)(v14 + 32);
      *(_BYTE *)(v39 + 16) |= 1u;
      *(_DWORD *)(v39 + 8) = 2;
      (*((void (**)(sirinluexternal::UserStatedTask **))*v10 + 1))(v10);
    }
    else
    {
      *a6 = 0;
    }
    v40 = v42;
    v42 = 0;
    if (v40)
    {
      v41 = MEMORY[0x1C3BB916C]();
      MEMORY[0x1C3BB9B44](v41, 0x10A0C403D23BABBLL);
    }
  }
  else
  {
    *a6 = 0;
  }
}

void sub_1C22426B4()
{
  JUMPOUT(0x1C2242710);
}

void sub_1C22426C0()
{
  JUMPOUT(0x1C2242718);
}

uint64_t snlp::ssu::app::SSUAppExamplesPositiveIterable::SSUAppExamplesPositiveIterable(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)result = *a2;
  v2 = a2[1];
  *(_QWORD *)(result + 8) = v2;
  v3 = *a2;
  *(_QWORD *)(result + 16) = *a2;
  if (v3 == v2)
  {
    *(_BYTE *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
  }
  else
  {
    *(_QWORD *)(result + 24) = *(_QWORD *)(v3 + 48);
    *(_QWORD *)(result + 32) = 1;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)result = *a2;
  v2 = a2[1];
  *(_QWORD *)(result + 8) = v2;
  v3 = *a2;
  *(_QWORD *)(result + 16) = *a2;
  if (v3 == v2)
  {
    *(_BYTE *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
  }
  else
  {
    *(_QWORD *)(result + 24) = *(_QWORD *)(v3 + 48);
    *(_QWORD *)(result + 32) = 1;
  }
  return result;
}

uint64_t snlp::ssu::app::SSUAppExamplesPositiveIterable::getNext@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v10;
  char v11;

  v2 = *(_QWORD *)(this + 8);
  v3 = *(_QWORD *)(this + 16);
  v4 = *(unsigned __int8 *)(this + 32);
  while (1)
  {
    v5 = v3 == v2;
    if (v4)
      break;
    if (v3 == v2)
    {
      v4 = 0;
      v3 = v2;
      v5 = 1;
      goto LABEL_18;
    }
    *(_QWORD *)(this + 16) = v3 + 72;
    if (v3 + 72 == v2)
      goto LABEL_19;
    v10 = *(_QWORD *)(v3 + 120);
    v4 = 1;
    *(_BYTE *)(this + 32) = 1;
    v3 += 72;
    v8 = 1;
LABEL_15:
    v5 = 0;
    *(_QWORD *)(this + 24) = v10;
    if (v8)
    {
LABEL_18:
      if (v5)
      {
LABEL_19:
        v11 = 0;
        *(_BYTE *)a2 = 0;
        goto LABEL_20;
      }
    }
  }
  v6 = *(_QWORD *)(v3 + 56);
  v7 = *(_QWORD *)(this + 24);
  v8 = v7 == v6;
  if (v7 == v6 && v3 != v2)
  {
    *(_QWORD *)(this + 16) = v3 + 72;
    if (v3 + 72 == v2)
      goto LABEL_19;
    v10 = *(_QWORD *)(v3 + 120);
    v3 += 72;
    goto LABEL_15;
  }
  if (v7 == v6)
    goto LABEL_18;
  *(_QWORD *)(this + 24) = v7 + 24;
  *(_QWORD *)a2 = 0x8E38E38E38E38E39 * ((v3 - *(_QWORD *)this) >> 3);
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v7;
  v11 = 1;
LABEL_20:
  *(_BYTE *)(a2 + 24) = v11;
  return this;
}

id snlp::common::espresso_inference::e5ml::selflogging::objcSISUUIDFromCppUUID(uint64_t *a1)
{
  uint64_t *v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
    {
LABEL_7:
      v4 = 0;
      return v4;
    }
    v1 = (uint64_t *)*a1;
  }
  else if (!*((_BYTE *)a1 + 23))
  {
    goto LABEL_7;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v2);
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D9A500]), "initWithNSUUID:", v3);

  return v4;
}

void sub_1C2242928(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void snlp::common::espresso_inference::e5ml::selflogging::cppUUIDFromObjCSISUUID(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;

  v3 = a1;
  v7 = v3;
  if (v3)
  {
    objc_msgSend(v3, "toSafeNSUUID");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "UUIDString");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = objc_retainAutorelease(v5);
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)objc_msgSend(v6, "UTF8String"));

  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }

}

void sub_1C22429D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t snlp::common::espresso_inference::e5ml::selflogging::convertAssetAcquisitionType(_DWORD *a1)
{
  if (*a1 == 1)
    return 1;
  else
    return 2 * (*a1 == 2);
}

uint64_t snlp::common::espresso_inference::e5ml::selflogging::convertErrorCode(unsigned int *a1)
{
  if (*a1 - 1 >= 7)
    return 0;
  else
    return *a1;
}

void snlp::common::espresso_inference::e5ml::selflogging::convertMetadata(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  int v8;
  std::string *v9;
  int v10;
  void *__p;
  char v12;
  void *v13[2];
  uint64_t v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  v3 = a1;
  objc_msgSend(v3, "trpId");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  snlp::common::espresso_inference::e5ml::selflogging::cppUUIDFromObjCSISUUID(v4, &v17);

  objc_msgSend(v3, "nlId");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  snlp::common::espresso_inference::e5ml::selflogging::cppUUIDFromObjCSISUUID(v5, v15);

  std::string::basic_string[abi:ne180100]<0>(v13, "");
  objc_msgSend(v3, "resultCandidateId");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v3, "resultCandidateId");
    v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(v7, "UTF8String"));
    if (v12 < 0)
      operator delete(__p);

  }
  v8 = objc_msgSend(v3, "componentInvocationSource");
  if (SHIBYTE(v18) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, (const std::string::value_type *)v17, *((std::string::size_type *)&v17 + 1));
  }
  else
  {
    *(_OWORD *)a2 = v17;
    *(_QWORD *)(a2 + 16) = v18;
  }
  if (SHIBYTE(v16) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a2 + 24), (const std::string::value_type *)v15[0], (std::string::size_type)v15[1]);
  }
  else
  {
    *(_OWORD *)(a2 + 24) = *(_OWORD *)v15;
    *(_QWORD *)(a2 + 40) = v16;
  }
  v9 = (std::string *)(a2 + 48);
  if (SHIBYTE(v14) < 0)
  {
    std::string::__init_copy_ctor_external(v9, (const std::string::value_type *)v13[0], (std::string::size_type)v13[1]);
    v10 = SHIBYTE(v14);
    *(_DWORD *)(a2 + 72) = v8;
    if (v10 < 0)
      operator delete(v13[0]);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)v13;
    *(_QWORD *)(a2 + 64) = v14;
    *(_DWORD *)(a2 + 72) = v8;
  }
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v18) < 0)
    operator delete((void *)v17);

}

void sub_1C2242BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;

  if (*(char *)(v24 + 47) < 0)
    operator delete(*v25);
  if (*(char *)(v24 + 23) < 0)
    operator delete(*(void **)v24);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v26 - 33) < 0)
    operator delete(*(void **)(v26 - 56));

  _Unwind_Resume(a1);
}

id snlp::common::espresso_inference::e5ml::selflogging::convertMetadata(snlp::common::espresso_inference::e5ml::selflogging *this, const snlp::common::selflogging::NLXSchemaNLXClientEventMetadata *a2)
{
  void *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  snlp::common::espresso_inference::e5ml::selflogging::objcSISUUIDFromCppUUID((uint64_t *)this);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  snlp::common::espresso_inference::e5ml::selflogging::objcSISUUIDFromCppUUID((uint64_t *)this + 3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((char *)this + 71) >= 0)
    v5 = (char *)this + 48;
  else
    v5 = (char *)*((_QWORD *)this + 6);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  v8 = *((unsigned __int8 *)this + 71);
  if ((v8 & 0x80u) != 0)
    v8 = *((_QWORD *)this + 7);
  if (!v8)
  {

    v7 = 0;
  }
  v9 = *((unsigned int *)this + 18);
  v10 = objc_alloc_init(MEMORY[0x1E0D99E30]);
  objc_msgSend(v10, "setNlId:", v4);
  objc_msgSend(v10, "setTrpId:", v3);
  objc_msgSend(v10, "setResultCandidateId:", v7);
  objc_msgSend(v10, "setComponentInvocationSource:", v9);

  return v10;
}

void sub_1C2242D44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C2242E20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C2243198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](&a27);
  if (a39 < 0)
    operator delete(__p);
  if (a45 < 0)
    operator delete(a40);

  _Unwind_Resume(a1);
}

void sub_1C22436FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  uint64_t v25;

  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v25 - 112);

  _Unwind_Resume(a1);
}

void sub_1C22438B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1C2243CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{

  _Unwind_Resume(a1);
}

void sub_1C2244044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100](&a10);
  std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100](&a27);

  _Unwind_Resume(a1);
}

uint64_t siri::ontology::UsoUtteranceAlignment::UsoUtteranceAlignment(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v10 = (uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v11 = operator new();
  v12 = v11;
  *(_DWORD *)v11 = a2;
  *(_DWORD *)(v11 + 4) = a3;
  *(_DWORD *)(v11 + 8) = a4;
  *(_DWORD *)(v11 + 12) = a5;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  v14 = *(uint64_t **)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v14 >= v13)
  {
    v17 = *v10;
    v18 = v14 - *v10;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v20 = v13 - (_QWORD)v17;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v22 = (char *)operator new(8 * v21);
    }
    else
    {
      v22 = 0;
    }
    v23 = (uint64_t *)&v22[8 * v18];
    v24 = &v22[8 * v21];
    *v23 = v12;
    v16 = v23 + 1;
    if (v14 == v17)
    {
      *(_QWORD *)(a1 + 8) = v23;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = v24;
    }
    else
    {
      do
      {
        v25 = *--v14;
        *v14 = 0;
        *--v23 = v25;
      }
      while (v14 != v17);
      v14 = *(uint64_t **)(a1 + 8);
      v26 = *(uint64_t **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v23;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = v24;
      while (v26 != v14)
      {
        v28 = *--v26;
        v27 = v28;
        *v26 = 0;
        if (v28)
          MEMORY[0x1C3BB9B44](v27, 0x1000C405AAC83ABLL);
      }
    }
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v14 = v11;
    v15 = v14 + 1;
    *(_QWORD *)(a1 + 16) = v15;
    v16 = v15;
  }
  *(_QWORD *)(a1 + 16) = v16;
  return a1;
}

void sub_1C2244788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::unique_ptr<siri::ontology::UsoUtteranceSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  void **v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = (void **)(v1 + 8);
    std::vector<std::unique_ptr<siri::ontology::UsoUtteranceSpan>>::__destroy_vector::operator()[abi:ne180100](&v2);
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

void std::vector<std::unique_ptr<siri::ontology::UsoUtteranceSpan>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          MEMORY[0x1C3BB9B44](v6, 0x1000C405AAC83ABLL);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C224495C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C2244B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1C2244D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1C2244F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1C224507C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18)
{
  void *v18;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void uaap::DateHandler::~DateHandler(uaap::DateHandler *this)
{
  JUMPOUT(0x1C3BB9B44);
}

_QWORD *uaap::DateHandler::handle(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  _QWORD *result;

  result = (_QWORD *)DDResultHasType();
  if ((_DWORD)result)
    return uaap::DateHandler::mapDateToItemizedUsos(a3, a4);
  return result;
}

_QWORD *uaap::DateHandler::mapDateToItemizedUsos(uint64_t a1, char **a2)
{
  CFHashCode v4;
  _QWORD *result;
  _QWORD *v6;
  CFHashCode v7;
  uint64_t v8;
  const void *v9;
  unint64_t v10;
  uint64_t v11;
  uaap::UPDDDateOffsetSpan *v12;
  siri::ontology::oname::graph::ontology_init *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uaap::UPDDDateOffsetSpan *v17;
  siri::ontology::oname::graph::ontology_init *v18;
  siri::ontology::UsoGraph *v19;
  uint64_t v20;
  uaap::UPDDDateSpan *v21;
  siri::ontology::UsoGraph *v22;
  uint64_t v23;
  uint64_t v24;
  uaap::UPDDDateSpan *v25;
  siri::ontology::UsoGraph *v26;
  uint64_t v27;
  uaap::UPDDSpan *v28;
  siri::ontology::UsoGraph *v29;
  uint64_t v30;
  uaap::UPDDAbsoluteDateSpan *v31;
  siri::ontology::UsoGraph *v32;
  uint64_t v33;
  const __CFString *v34;
  siri::ontology::oname::graph::ontology_init *v35;
  uint64_t length;
  uint64_t v37;
  uint64_t v38;
  uaap::UPDDDateSpan *v39;
  uaap::UPDDDateOffsetSpan *v40;
  uint64_t v41;
  int v42;

  v4 = CFHash(CFSTR("Date"));
  result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v4);
  if (result)
  {
    v6 = result;
    v7 = CFHash(CFSTR("DateTime"));
    result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v7);
    v8 = v6[3];
    if (v6[4] != v8)
    {
      v9 = result;
      v10 = 0;
      do
      {
        result = *(_QWORD **)(v8 + 8 * v10);
        if (result)
        {
          if (result)
          {
            v11 = (uint64_t)result;
            if (!v9)
            {
              result = (_QWORD *)uaap::DateSpanHandler::isRecurringDate((uint64_t)result);
              if ((_DWORD)result)
              {
                v12 = (uaap::UPDDDateOffsetSpan *)operator new();
                v41 = 0;
                v42 = 0;
                v13 = (siri::ontology::oname::graph::ontology_init *)MEMORY[0x1C3BB9154](v12, &v41);
                v40 = v12;
                v14 = *((_QWORD *)v12 + 11);
                v15 = siri::ontology::oname::graph::ontology_init::Argument_entity(v13);
                uaap::DateHandler::resolveRecurringDateSpan((siri::ontology::oname::graph::ontology_init *)v11, v12, v14, v15);
                uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v40, a2);
                result = v40;
                if (v40)
                {
                  v16 = MEMORY[0x1C3BB916C]();
                  result = (_QWORD *)MEMORY[0x1C3BB9B44](v16, 0x10A0C403D23BABBLL);
                }
              }
            }
            if (*(_QWORD *)(v11 + 120))
            {
              v17 = (uaap::UPDDDateOffsetSpan *)operator new();
              v41 = 0;
              v42 = 0;
              v18 = (siri::ontology::oname::graph::ontology_init *)MEMORY[0x1C3BB9154](v17, &v41);
              v40 = v17;
              v19 = (siri::ontology::UsoGraph *)*((_QWORD *)v17 + 11);
              v20 = siri::ontology::oname::graph::ontology_init::Argument_entity(v18);
              uaap::DateHandler::resolveDateOffset(v11, v17, v19, v20);
              uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v40, a2);
              v21 = (uaap::UPDDDateSpan *)operator new();
              v41 = 0;
              v42 = 0;
              MEMORY[0x1C3BB9154](v21, &v41);
              v39 = v21;
              uaap::DateHandler::resolveDateDurationGraphFromDateOffset((uaap::AbstractDateTimeHandler *)v11, v21, v22);
              uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v39, a2);
              if (v39)
              {
                v23 = MEMORY[0x1C3BB916C]();
                MEMORY[0x1C3BB9B44](v23, 0x10A0C403D23BABBLL);
              }
              result = v40;
              if (v40)
              {
                v24 = MEMORY[0x1C3BB916C]();
                result = (_QWORD *)MEMORY[0x1C3BB9B44](v24, 0x10A0C403D23BABBLL);
              }
            }
            if (*(_QWORD *)(v11 + 104))
            {
              v25 = (uaap::UPDDDateSpan *)operator new();
              v41 = 0;
              v42 = 0;
              MEMORY[0x1C3BB9154](v25, &v41);
              v40 = v25;
              uaap::DateHandler::resolveRelativeDayOfWeekGraph((uaap::DateHandler *)v11, v25, v26);
              uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v40, a2);
              result = v40;
              if (v40)
              {
                v27 = MEMORY[0x1C3BB916C]();
                result = (_QWORD *)MEMORY[0x1C3BB9B44](v27, 0x10A0C403D23BABBLL);
              }
            }
            if (*(_QWORD *)(v11 + 96))
            {
              v28 = (uaap::UPDDSpan *)operator new();
              v41 = 0;
              v42 = 0;
              MEMORY[0x1C3BB9154](v28, &v41);
              v40 = v28;
              uaap::DateHandler::resolveRelativeDayGraph(*(siri::ontology::oname::graph::ontology_init **)(v11 + 96), v28, v29);
              uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v40, a2);
              result = v40;
              if (v40)
              {
                v30 = MEMORY[0x1C3BB916C]();
                result = (_QWORD *)MEMORY[0x1C3BB9B44](v30, 0x10A0C403D23BABBLL);
              }
            }
            if (*(_QWORD *)(v11 + 112))
            {
              v31 = (uaap::UPDDAbsoluteDateSpan *)operator new();
              v41 = 0;
              v42 = 0;
              MEMORY[0x1C3BB9154](v31, &v41);
              v40 = v31;
              uaap::DateHandler::resolveAbsoluteDateGraph(*(siri::ontology::oname::graph::ontology_init **)(v11 + 112), v31, v32);
              uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v40, a2);
              result = v40;
              if (v40)
              {
                v33 = MEMORY[0x1C3BB916C]();
                result = (_QWORD *)MEMORY[0x1C3BB9B44](v33, 0x10A0C403D23BABBLL);
              }
            }
            if (*(_QWORD *)(v11 + 48))
            {
              v34 = (const __CFString *)operator new();
              v41 = 0;
              v42 = 0;
              v35 = (siri::ontology::oname::graph::ontology_init *)MEMORY[0x1C3BB9154](v34, &v41);
              v40 = (uaap::UPDDDateOffsetSpan *)v34;
              length = v34[2].length;
              v37 = siri::ontology::oname::graph::ontology_init::Argument_entity(v35);
              uaap::DateHandler::resolveDateTimeRangeWithQualifier((siri::ontology::oname::graph::ontology_init *)v11, v34, length, v37);
              uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v40, a2);
              result = v40;
              if (v40)
              {
                v38 = MEMORY[0x1C3BB916C]();
                result = (_QWORD *)MEMORY[0x1C3BB9B44](v38, 0x10A0C403D23BABBLL);
              }
            }
          }
        }
        ++v10;
        v8 = v6[3];
      }
      while (v10 < (v6[4] - v8) >> 3);
    }
  }
  return result;
}

void sub_1C224554C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10A0C403D23BABBLL);
  _Unwind_Resume(a1);
}

siri::ontology::oname::graph::ontology_init *uaap::DateHandler::resolveRecurringDateSpan(siri::ontology::oname::graph::ontology_init *a1, uaap::UPDDDateOffsetSpan *a2, uint64_t a3, uint64_t a4)
{
  siri::ontology::oname::graph::ontology_init *EntityNode;
  uint64_t v7;
  siri::ontology::oname::graph::ontology_init *v8;
  uint64_t v9;
  siri::ontology::UsoEntityNode *v10;
  uaap::UPDDSpan *v11;
  siri::ontology::oname::graph::ontology_init *v12;

  EntityNode = 0;
  if (a1 && a2 && a3 && a4)
  {
    siri::ontology::oname::graph::ontology_init::Root(a1);
    v7 = siri::ontology::operator!=();
    if ((v7 & 1) != 0)
      return 0;
    siri::ontology::oname::graph::ontology_init::common_RecurringDateTime((siri::ontology::oname::graph::ontology_init *)v7);
    EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
    siri::ontology::oname::graph::ontology_init::common_DateTime(EntityNode);
    v8 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
    v9 = siri::ontology::oname::graph::ontology_init::Argument_date(v8);
    if (!uaap::DateHandler::resolveDate(a1, a2, v8, v9, v10))
    {
      return 0;
    }
    else
    {
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, a1, v11);
      siri::ontology::oname::graph::ontology_init::Argument_recurrenceDateTimes(v12);
      siri::ontology::UsoGraphNode::setSuccessor();
      siri::ontology::UsoGraphNode::setSuccessor();
    }
  }
  return EntityNode;
}

siri::ontology::UsoGraph *uaap::DateHandler::resolveDateOffset(uint64_t a1, uaap::UPDDDateOffsetSpan *a2, siri::ontology::UsoGraph *a3, uint64_t a4)
{
  siri::ontology::UsoGraph *result;
  siri::ontology::UsoGraph *v7;
  siri::ontology::oname::graph::ontology_init *v8;
  uint64_t v9;
  siri::ontology::UsoEntityNode *v10;
  uint64_t v11;
  siri::ontology::UsoEntityNode *v12;
  uaap::AbstractDateTimeHandler *EntityNode;
  uaap::UPDDSpan *v14;
  siri::ontology::oname::graph::ontology_init *v15;
  uint64_t v16;
  siri::ontology::UsoEntityNode *v17;

  result = 0;
  if (a1)
  {
    if (a2)
    {
      v7 = a3;
      if (a3)
      {
        if (a4)
        {
          v8 = (siri::ontology::oname::graph::ontology_init *)CFEqual(*(CFTypeRef *)(a1 + 8), CFSTR("Date"));
          if ((_DWORD)v8
            && *(_QWORD *)(a1 + 120)
            && ((siri::ontology::oname::graph::ontology_init::Root(v8), v9 = siri::ontology::operator!=(), !(_DWORD)v9)
             || (siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v9),
                 v9 = siri::ontology::operator!=(),
                 (v9 & 1) == 0)))
          {
            v10 = *(siri::ontology::UsoEntityNode **)(a1 + 120);
            siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v9);
            v11 = siri::ontology::operator==();
            if ((v11 & 1) == 0)
            {
              siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v11);
              EntityNode = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode();
              uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, v10, v14);
              siri::ontology::UsoGraphNode::setSuccessor();
              v7 = EntityNode;
            }
            uaap::DateHandler::resolveOffsetDirection((siri::ontology::UsoEntityNode **)v10, a2, v7, v12);
            v16 = siri::ontology::oname::graph::ontology_init::Argument_offsetValue(v15);
            uaap::DateHandler::resolveOffsetDurationValueAndUnit((uint64_t)v10, a2, (uint64_t)v7, v16);
            uaap::resolveOffsetReference(a1, a2, v7, v17);
            return v7;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uaap::AbstractDateTimeHandler *uaap::DateHandler::resolveDateDurationGraphFromDateOffset(uaap::AbstractDateTimeHandler *this, uaap::UPDDDateSpan *a2, siri::ontology::UsoGraph *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *((_QWORD *)this + 15);
  if (v3)
  {
    v5 = *((_QWORD *)a2 + 11);
    v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::DateHandler::resolveOffsetDurationValueAndUnit(v3, a2, v5, v6);
  }
  return this;
}

void uaap::DateHandler::resolveRelativeDayOfWeekGraph(uaap::DateHandler *this, uaap::UPDDDateSpan *a2, siri::ontology::UsoGraph *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  siri::ontology::UsoGraph *v8;
  siri::ontology::UsoEntityNode *v9;
  siri::ontology::UsoEntityNode *v10;

  if (this)
  {
    v5 = *((_QWORD *)a2 + 11);
    v6 = *((_QWORD *)this + 13);
    v7 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    v8 = uaap::DateHandler::resolveRelativeDayOfWeek(v6, (uint64_t)a2, v5, v7);
    uaap::DateHandler::updateDayOfWeekWithListValIfExists(this, a2, v8, v9, v10);
  }
}

siri::ontology::oname::graph::ontology_init *uaap::DateHandler::resolveRelativeDayGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDSpan *a2, siri::ontology::UsoGraph *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (this)
  {
    v4 = (uint64_t)this;
    v5 = *((_QWORD *)a2 + 11);
    v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::DateHandler::resolveRelativeDay(v4, (uint64_t)a2, v5, v6);
  }
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::DateHandler::resolveAbsoluteDateGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDAbsoluteDateSpan *a2, siri::ontology::UsoGraph *a3)
{
  uint64_t v4;
  uaap::AbstractDateTimeHandler *v5;
  uint64_t v6;

  if (this)
  {
    v4 = (uint64_t)this;
    v5 = (uaap::AbstractDateTimeHandler *)*((_QWORD *)a2 + 11);
    v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::DateHandler::resolveAbsoluteDate(v4, (uint64_t)a2, v5, v6);
  }
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::DateHandler::resolveDateTimeRangeWithQualifier(siri::ontology::oname::graph::ontology_init *a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  siri::ontology::oname::graph::ontology_init *EntityNode;
  uint64_t v7;
  CFTypeRef *v8;
  uint64_t v9;
  siri::ontology::oname::graph::ontology_init *v10;
  siri::ontology::oname::graph::ontology_init *v11;
  uaap::AbstractDateTimeHandler *v12;
  siri::ontology::oname::graph::ontology_init *v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uaap::UPDDSpan *v24;

  EntityNode = 0;
  if (a1 && a2 && a3 && a4)
  {
    if (*((_QWORD *)a1 + 6)
      && (*((_QWORD *)a1 + 16) || *((_QWORD *)a1 + 12) || *((_QWORD *)a1 + 13) || *((_QWORD *)a1 + 14)))
    {
      siri::ontology::oname::graph::ontology_init::Root(a1);
      v7 = siri::ontology::operator!=();
      if ((v7 & 1) == 0)
      {
        siri::ontology::oname::graph::ontology_init::common_DateTimeRange((siri::ontology::oname::graph::ontology_init *)v7);
        EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
        v8 = (CFTypeRef *)*((_QWORD *)a1 + 6);
        v9 = siri::ontology::oname::graph::ontology_init::Argument_qualifier(EntityNode);
        v10 = (siri::ontology::oname::graph::ontology_init *)uaap::TimeHandler::resolveDateTimeRangeQualifierValue(v8, (uint64_t)a2, (uint64_t)EntityNode, v9);
        if (v10)
        {
          siri::ontology::oname::graph::ontology_init::common_DateTime(v10);
          v11 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
          v12 = v11;
          v13 = (siri::ontology::oname::graph::ontology_init *)*((_QWORD *)a1 + 16);
          if (v13)
          {
            v14 = siri::ontology::oname::graph::ontology_init::Argument_date(v11);
            v11 = uaap::DateHandler::resolveSpecialDatePeriodUnit(v13, (uint64_t)a2, (uint64_t)v12, v14);
            if (v11)
            {
              v15 = 1;
            }
            else
            {
              v16 = siri::ontology::oname::graph::ontology_init::Argument_date(0);
              v11 = uaap::DateSpanHandler::resolveDateWithMonthOfYear(a1, a2, (uint64_t)v12, v16);
              v15 = v11 != 0;
            }
          }
          else
          {
            v15 = 0;
          }
          v17 = *((_QWORD *)a1 + 12);
          if (v17)
          {
            v18 = siri::ontology::oname::graph::ontology_init::Argument_date(v11);
            v11 = uaap::DateHandler::resolveRelativeDay(v17, (uint64_t)a2, (uint64_t)v12, v18);
            if (v11)
              v15 = 1;
          }
          v19 = *((_QWORD *)a1 + 13);
          if (v19)
          {
            v20 = siri::ontology::oname::graph::ontology_init::Argument_date(v11);
            v11 = uaap::DateHandler::resolveRelativeDayOfWeek(v19, (uint64_t)a2, (uint64_t)v12, v20);
            if (v11)
              v15 = 1;
          }
          v21 = *((_QWORD *)a1 + 14);
          if (v21)
          {
            v22 = siri::ontology::oname::graph::ontology_init::Argument_date(v11);
            v11 = uaap::DateHandler::resolveAbsoluteDate(v21, (uint64_t)a2, v12, v22);
            if (v11)
              v23 = 1;
            else
              v23 = v15;
            if ((v23 & 1) != 0)
              goto LABEL_28;
          }
          else if (v15)
          {
LABEL_28:
            siri::ontology::oname::graph::ontology_init::Argument_at(v11);
            siri::ontology::UsoGraphNode::setSuccessor();
            siri::ontology::UsoGraphNode::setSuccessor();
            uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, a1, v24);
            return EntityNode;
          }
        }
      }
    }
    return 0;
  }
  return EntityNode;
}

siri::ontology::oname::graph::ontology_init *uaap::DateHandler::resolveSpecialDatePeriodUnit(siri::ontology::oname::graph::ontology_init *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  siri::ontology::oname::graph::ontology_init *EntityNode;
  siri::ontology::oname::graph::ontology_init *v6;
  siri::ontology::oname::graph::ontology_init *v7;
  siri::ontology::oname::graph::ontology_init *v8;
  siri::ontology::oname::graph::ontology_init *v9;
  siri::ontology::oname::graph::ontology_init *v10;
  uaap::UPDDSpan *v11;

  EntityNode = 0;
  if (a1 && a2 && a3 && a4)
  {
    if (!*((_QWORD *)a1 + 6))
      return 0;
    siri::ontology::oname::graph::ontology_init::common_DateTime(a1);
    if ((siri::ontology::operator!=() & 1) != 0)
      return 0;
    v6 = (siri::ontology::oname::graph::ontology_init *)CFEqual(*(CFTypeRef *)(*((_QWORD *)a1 + 6) + 24), CFSTR("day"));
    if ((_DWORD)v6)
    {
      siri::ontology::oname::graph::ontology_init::common_Date(v6);
      EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::common_Integer(EntityNode);
      v7 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::Argument_dayOfMonth(v7);
    }
    else
    {
      v8 = (siri::ontology::oname::graph::ontology_init *)CFEqual(*(CFTypeRef *)(*((_QWORD *)a1 + 6) + 24), CFSTR("week"));
      if ((_DWORD)v8)
      {
        siri::ontology::oname::graph::ontology_init::common_Date(v8);
        EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
        siri::ontology::oname::graph::ontology_init::common_Integer(EntityNode);
        v7 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
        siri::ontology::oname::graph::ontology_init::Argument_weekOfYear(v7);
      }
      else
      {
        v9 = (siri::ontology::oname::graph::ontology_init *)CFEqual(*(CFTypeRef *)(*((_QWORD *)a1 + 6) + 24), CFSTR("month"));
        if ((_DWORD)v9)
        {
          siri::ontology::oname::graph::ontology_init::common_Date(v9);
          EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
          siri::ontology::oname::graph::ontology_init::common_MonthOfYear(EntityNode);
          v7 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
          siri::ontology::oname::graph::ontology_init::Argument_monthOfYear(v7);
        }
        else
        {
          v10 = (siri::ontology::oname::graph::ontology_init *)CFEqual(*(CFTypeRef *)(*((_QWORD *)a1 + 6) + 24), CFSTR("year"));
          if (!(_DWORD)v10)
            return 0;
          siri::ontology::oname::graph::ontology_init::common_Date(v10);
          EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
          siri::ontology::oname::graph::ontology_init::common_Integer(EntityNode);
          v7 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
          siri::ontology::oname::graph::ontology_init::Argument_year(v7);
        }
      }
    }
    siri::ontology::UsoGraphNode::setSuccessor();
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v7, a1, v11);
    siri::ontology::UsoGraphNode::setSuccessor();
  }
  return EntityNode;
}

uaap::AbstractDateTimeHandler *uaap::DateHandler::resolveRelativeDay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uaap::AbstractDateTimeHandler *EntityNode;
  const __CFString *v6;
  siri::ontology::oname::graph::ontology_init *RelativeDayDefinedValue;
  uaap::UPDDSpan *v8;
  siri::ontology::oname::graph::ontology_init *v9;
  uaap::UPDDSpan *v10;

  EntityNode = 0;
  if (a1 && a2 && a3 && a4)
  {
    if (CFEqual(*(CFTypeRef *)(a1 + 8), CFSTR("RelativeDay"))
      && (RelativeDayDefinedValue = (siri::ontology::oname::graph::ontology_init *)uaap::getRelativeDayDefinedValue(*(const __CFString **)(a1 + 24), v6)) != 0)
    {
      siri::ontology::oname::graph::ontology_init::common_Date(RelativeDayDefinedValue);
      EntityNode = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode();
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, (siri::ontology::UsoEntityNode *)a1, v8);
      siri::ontology::UsoGraphNode::setSuccessor();
      v9 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::Argument_definedValue(v9);
      siri::ontology::UsoGraphNode::setSuccessor();
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v9, (siri::ontology::UsoEntityNode *)a1, v10);
    }
    else
    {
      return 0;
    }
  }
  return EntityNode;
}

uaap::AbstractDateTimeHandler *uaap::DateHandler::resolveRelativeDayOfWeek(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uaap::AbstractDateTimeHandler *EntityNode;
  const __CFString *v6;
  siri::ontology::oname::graph::ontology_init *DayOfWeekDefinedValue;
  uaap::UPDDSpan *v8;
  siri::ontology::oname::graph::ontology_init *v9;
  siri::ontology::oname::graph::ontology_init *v10;
  uaap::AbstractDateTimeHandler *v11;
  uaap::UPDDSpan *v12;
  siri::ontology::oname::graph::ontology_init *v13;

  if (!a1 || !a2 || !a3)
    return 0;
  EntityNode = 0;
  if (a4)
  {
    if ((CFEqual(*(CFTypeRef *)(a1 + 8), CFSTR("DayOfWeek"))
       || CFEqual(*(CFTypeRef *)(a1 + 8), CFSTR("DayOfNextWeek"))
       || CFEqual(*(CFTypeRef *)(a1 + 8), CFSTR("DayOfThisWeek")))
      && (DayOfWeekDefinedValue = (siri::ontology::oname::graph::ontology_init *)uaap::getDayOfWeekDefinedValue(*(const __CFString **)(a1 + 24), v6)) != 0)
    {
      siri::ontology::oname::graph::ontology_init::common_Date(DayOfWeekDefinedValue);
      EntityNode = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode();
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, (siri::ontology::UsoEntityNode *)a1, v8);
      v9 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
      siri::ontology::oname::graph::ontology_init::common_DayOfWeek(v9);
      v10 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::Argument_dayOfWeek(v10);
      siri::ontology::UsoGraphNode::setSuccessor();
      v11 = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode();
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v11, (siri::ontology::UsoEntityNode *)a1, v12);
      siri::ontology::oname::graph::ontology_init::Argument_definedValue(v13);
      siri::ontology::UsoGraphNode::setSuccessor();
    }
    else
    {
      return 0;
    }
  }
  return EntityNode;
}

uaap::AbstractDateTimeHandler *uaap::DateHandler::resolveAbsoluteDate(uint64_t a1, uint64_t a2, uaap::AbstractDateTimeHandler *a3, uint64_t a4)
{
  uaap::AbstractDateTimeHandler *EntityNode;
  uint64_t v7;
  siri::ontology::oname::graph::ontology_init *MonthOfYearDefinedValue;
  const __CFString *v9;
  uaap::UPDDSpan *v10;
  uint64_t v11;
  uint64_t v12;
  siri::ontology::oname::graph::ontology_init *v13;
  const __CFString *v14;
  siri::ontology::oname::graph::ontology_init *IntNode;
  uaap::UPDDSpan *v16;
  uint64_t v17;
  siri::ontology::oname::graph::ontology_init *v18;
  const __CFString *v19;
  siri::ontology::oname::graph::ontology_init *v20;
  uaap::UPDDSpan *v21;
  uint64_t v22;
  siri::ontology::oname::graph::ontology_init *v23;
  const __CFString *v24;
  siri::ontology::oname::graph::ontology_init *v25;
  uaap::UPDDSpan *v26;
  uint64_t v27;
  const __CFString *v28;
  siri::ontology::oname::graph::ontology_init *DayOfWeekDefinedValue;
  siri::ontology::oname::graph::ontology_init *v30;
  siri::ontology::oname::graph::ontology_init *v31;
  uaap::UPDDSpan *v32;
  void *v34[2];

  EntityNode = 0;
  if (a1 && a2 && a3 && a4)
  {
    if (*(_QWORD *)(a1 + 24)
      && (*(_QWORD *)(a1 + 56) || *(_QWORD *)(a1 + 64) || *(_QWORD *)(a1 + 72) || *(_QWORD *)(a1 + 80))
      && ((siri::ontology::oname::graph::ontology_init::Root((siri::ontology::oname::graph::ontology_init *)a1),
           v7 = siri::ontology::operator!=(),
           !(_DWORD)v7)
       || (siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v7),
           v7 = siri::ontology::operator!=(),
           !(_DWORD)v7)
       || (siri::ontology::oname::graph::ontology_init::common_Date((siri::ontology::oname::graph::ontology_init *)v7),
           v7 = siri::ontology::operator!=(),
           (v7 & 1) == 0)))
    {
      siri::ontology::oname::graph::ontology_init::common_Date((siri::ontology::oname::graph::ontology_init *)v7);
      MonthOfYearDefinedValue = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
      if ((_DWORD)MonthOfYearDefinedValue)
      {
        siri::ontology::oname::graph::ontology_init::common_Date(MonthOfYearDefinedValue);
        EntityNode = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode();
        MonthOfYearDefinedValue = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
      }
      else
      {
        EntityNode = a3;
      }
      v11 = *(_QWORD *)(a1 + 56);
      if (v11 && *(_QWORD *)(v11 + 24))
        uaap::toUTF8String(*(const __CFString **)(a1 + 24), v34);
      v12 = *(_QWORD *)(a1 + 64);
      if (v12 && *(_QWORD *)(v12 + 24))
      {
        siri::ontology::oname::graph::ontology_init::common_Integer(MonthOfYearDefinedValue);
        v13 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
        siri::ontology::oname::graph::ontology_init::Argument_dayOfMonth(v13);
        siri::ontology::UsoGraphNode::setSuccessor();
        uaap::UPDDSpan::extractIntValueFromCFStringRef(*(const __CFString **)(*(_QWORD *)(a1 + 64) + 24), v14);
        IntNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createIntNode();
        siri::ontology::oname::graph::ontology_init::Argument_integerValue(IntNode);
        siri::ontology::UsoGraphNode::setSuccessor();
        uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(IntNode, *(siri::ontology::UsoEntityNode **)(a1 + 64), v16);
      }
      v17 = *(_QWORD *)(a1 + 72);
      if (v17)
      {
        MonthOfYearDefinedValue = *(siri::ontology::oname::graph::ontology_init **)(v17 + 24);
        if (MonthOfYearDefinedValue)
        {
          MonthOfYearDefinedValue = (siri::ontology::oname::graph::ontology_init *)uaap::DateSpanHandler::getMonthOfYearDefinedValue((const __CFString *)MonthOfYearDefinedValue, v9);
          if (MonthOfYearDefinedValue)
          {
            siri::ontology::oname::graph::ontology_init::common_MonthOfYear(MonthOfYearDefinedValue);
            v18 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
            siri::ontology::oname::graph::ontology_init::Argument_monthOfYear(v18);
            siri::ontology::UsoGraphNode::setSuccessor();
            uaap::DateSpanHandler::getMonthOfYearDefinedValue(*(const __CFString **)(*(_QWORD *)(a1 + 72) + 24), v19);
            v20 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
            siri::ontology::oname::graph::ontology_init::Argument_definedValue(v20);
            siri::ontology::UsoGraphNode::setSuccessor();
            uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v20, *(siri::ontology::UsoEntityNode **)(a1 + 72), v21);
          }
        }
      }
      v22 = *(_QWORD *)(a1 + 80);
      if (v22 && *(_QWORD *)(v22 + 24))
      {
        siri::ontology::oname::graph::ontology_init::common_Integer(MonthOfYearDefinedValue);
        v23 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
        siri::ontology::oname::graph::ontology_init::Argument_year(v23);
        siri::ontology::UsoGraphNode::setSuccessor();
        uaap::UPDDSpan::extractIntValueFromCFStringRef(*(const __CFString **)(*(_QWORD *)(a1 + 80) + 24), v24);
        v25 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createIntNode();
        siri::ontology::oname::graph::ontology_init::Argument_integerValue(v25);
        siri::ontology::UsoGraphNode::setSuccessor();
        uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v25, *(siri::ontology::UsoEntityNode **)(a1 + 80), v26);
      }
      v27 = *(_QWORD *)(a1 + 88);
      if (v27)
      {
        v28 = *(const __CFString **)(v27 + 24);
        if (v28)
        {
          DayOfWeekDefinedValue = (siri::ontology::oname::graph::ontology_init *)uaap::getDayOfWeekDefinedValue(v28, v9);
          if (DayOfWeekDefinedValue)
          {
            siri::ontology::oname::graph::ontology_init::common_DayOfWeek(DayOfWeekDefinedValue);
            v30 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
            siri::ontology::oname::graph::ontology_init::Argument_dayOfWeek(v30);
            siri::ontology::UsoGraphNode::setSuccessor();
            v31 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
            siri::ontology::oname::graph::ontology_init::Argument_definedValue(v31);
            siri::ontology::UsoGraphNode::setSuccessor();
            uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v30, *(siri::ontology::UsoEntityNode **)(a1 + 88), v32);
          }
        }
      }
      if (*((_QWORD *)EntityNode + 7) == *((_QWORD *)EntityNode + 8))
        uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, (siri::ontology::UsoEntityNode *)a1, v10);
    }
    else
    {
      return 0;
    }
  }
  return EntityNode;
}

void sub_1C2246368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a31 && a30 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t uaap::getDayOfWeekDefinedValue(const __CFString *this, const __CFString *a2)
{
  siri::ontology::oname::graph::ontology_init *IntValue;
  uint64_t result;

  if (!this)
    return 0;
  IntValue = (siri::ontology::oname::graph::ontology_init *)CFStringGetIntValue(this);
  switch((int)IntValue)
  {
    case 0:
      result = siri::ontology::oname::graph::ontology_init::common_DayOfWeek_Sunday(IntValue);
      break;
    case 1:
      result = siri::ontology::oname::graph::ontology_init::common_DayOfWeek_Monday(IntValue);
      break;
    case 2:
      result = siri::ontology::oname::graph::ontology_init::common_DayOfWeek_Tuesday(IntValue);
      break;
    case 3:
      result = siri::ontology::oname::graph::ontology_init::common_DayOfWeek_Wednesday(IntValue);
      break;
    case 4:
      result = siri::ontology::oname::graph::ontology_init::common_DayOfWeek_Thursday(IntValue);
      break;
    case 5:
      result = siri::ontology::oname::graph::ontology_init::common_DayOfWeek_Friday(IntValue);
      break;
    case 6:
      result = siri::ontology::oname::graph::ontology_init::common_DayOfWeek_Saturday(IntValue);
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t uaap::getRelativeDayDefinedValue(const __CFString *this, const __CFString *a2)
{
  siri::ontology::oname::graph::ontology_init *IntValue;
  uint64_t result;

  if (!this)
    return 0;
  IntValue = (siri::ontology::oname::graph::ontology_init *)CFStringGetIntValue(this);
  switch((int)IntValue)
  {
    case -2:
      result = siri::ontology::oname::graph::ontology_init::common_Date_DayBeforeYesterday(IntValue);
      break;
    case -1:
      result = siri::ontology::oname::graph::ontology_init::common_Date_Yesterday(IntValue);
      break;
    case 0:
      result = siri::ontology::oname::graph::ontology_init::common_Date_Today(IntValue);
      break;
    case 1:
      result = siri::ontology::oname::graph::ontology_init::common_Date_Tomorrow(IntValue);
      break;
    case 2:
      result = siri::ontology::oname::graph::ontology_init::common_Date_DayAfterTomorrow(IntValue);
      break;
    default:
      return 0;
  }
  return result;
}

void uaap::DateHandler::updateDayOfWeekWithListValIfExists(uaap::DateHandler *this, uaap::UPDDDateSpan *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4, siri::ontology::UsoEntityNode *a5)
{
  void *v7;
  uint64_t *i;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13[3];

  v7 = uaap::TimeHandler::resolveDateTimeQualifierListValue(this, a2, a4, a4);
  if (a3 && v7)
  {
    v9 = (uint64_t *)*((_QWORD *)a3 + 7);
    for (i = (uint64_t *)*((_QWORD *)a3 + 8);
          i != v9;
          std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100](i))
    {
      --i;
    }
    *((_QWORD *)a3 + 8) = v9;
    v10 = *((_QWORD *)this + 6);
    v11 = *((_QWORD *)this + 13);
    v12 = (char *)operator new(0x10uLL);
    v13[1] = v12 + 16;
    v13[2] = v12 + 16;
    *(_QWORD *)v12 = v10;
    *((_QWORD *)v12 + 1) = v11;
    v13[0] = v12;
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(a3, v13);
    operator delete(v12);
  }
}

void sub_1C2246518(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uaap::AbstractDateTimeHandler *uaap::DateHandler::resolveOffsetDurationValueAndUnit(uint64_t a1, uaap *a2, uint64_t a3, uint64_t a4)
{
  uaap::AbstractDateTimeHandler *EntityNode;
  uint64_t v7;
  const uaap::UPDDSpan *v8;
  uaap::UPDDSpan *v9;
  CFTypeRef *v10;
  uaap::UPDDSpan *v11;
  uint64_t v12;
  siri::ontology::UsoGraph *v13;
  uint64_t v14;
  uaap::UPDDSpan *v15;
  uaap::UPDDSpan *v16;

  EntityNode = 0;
  if (a1 && a2 && a3 && a4)
  {
    siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)a1);
    v7 = siri::ontology::operator!=();
    if ((_DWORD)v7)
    {
      siri::ontology::oname::graph::ontology_init::common_OffsetDateTime((siri::ontology::oname::graph::ontology_init *)v7);
      v7 = siri::ontology::operator!=();
      if ((_DWORD)v7)
      {
        siri::ontology::oname::graph::ontology_init::Root((siri::ontology::oname::graph::ontology_init *)v7);
        v7 = siri::ontology::operator!=();
        if ((v7 & 1) != 0)
          return 0;
      }
    }
    v10 = *(CFTypeRef **)(a1 + 80);
    if (v10)
    {
      v7 = uaap::addSpecialDateUnit(a2, v10, v8);
      v12 = v7;
      if (v7)
        uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity((uaap::AbstractDateTimeHandler *)v7, (siri::ontology::UsoEntityNode *)a1, v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = *(siri::ontology::UsoGraph **)(a1 + 56);
    if (v13 && *((_QWORD *)v13 + 3))
    {
      v7 = (uint64_t)uaap::addOccurrenceCount(a2, v13, *(uaap::UPDDSpan **)(a1 + 72), *(uaap::UPDDSpan **)(a1 + 64), v9);
      v14 = v7;
    }
    else
    {
      v14 = 0;
    }
    if (!(v12 | v14))
    {
      return 0;
    }
    else
    {
      siri::ontology::oname::graph::ontology_init::common_Duration((siri::ontology::oname::graph::ontology_init *)v7);
      EntityNode = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode();
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, (siri::ontology::UsoEntityNode *)a1, v15);
      siri::ontology::UsoGraphNode::setSuccessor();
      uaap::DateHandler::addUnitAndOccurance(EntityNode, (siri::ontology::UsoEntityNode *)v14, a2, (siri::ontology::UsoGraph *)v12, (siri::ontology::UsoEntityNode *)a1, v16);
    }
  }
  return EntityNode;
}

uint64_t uaap::addSpecialDateUnit(uaap *this, CFTypeRef *a2, const uaap::UPDDSpan *a3)
{
  siri::ontology::oname::graph::ontology_init *v4;
  siri::ontology::oname::graph::ontology_init *v5;
  siri::ontology::oname::graph::ontology_init *v6;
  siri::ontology::oname::graph::ontology_init *v7;
  siri::ontology::oname::graph::ontology_init *v8;
  siri::ontology::oname::graph::ontology_init *v9;

  v4 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a2[3], CFSTR("day"));
  if ((_DWORD)v4)
  {
    siri::ontology::oname::graph::ontology_init::common_TimeUnit_Day(v4);
    return siri::ontology::UsoGraph::createEntityNode();
  }
  v5 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a2[3], CFSTR("week"));
  if ((_DWORD)v5)
  {
    siri::ontology::oname::graph::ontology_init::common_TimeUnit_Week(v5);
    return siri::ontology::UsoGraph::createEntityNode();
  }
  v6 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a2[3], CFSTR("month"));
  if ((_DWORD)v6)
  {
    siri::ontology::oname::graph::ontology_init::common_TimeUnit_Month(v6);
    return siri::ontology::UsoGraph::createEntityNode();
  }
  v7 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a2[3], CFSTR("year"));
  if ((_DWORD)v7)
  {
    siri::ontology::oname::graph::ontology_init::common_TimeUnit_Year(v7);
    return siri::ontology::UsoGraph::createEntityNode();
  }
  v8 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a2[3], CFSTR("season"));
  if ((_DWORD)v8)
  {
    siri::ontology::oname::graph::ontology_init::common_TimeUnit_SeasonOfYear(v8);
    return siri::ontology::UsoGraph::createEntityNode();
  }
  v9 = (siri::ontology::oname::graph::ontology_init *)CFEqual(a2[3], CFSTR("quarter"));
  if ((_DWORD)v9)
  {
    siri::ontology::oname::graph::ontology_init::common_TimeUnit_QuarterOfYear(v9);
    return siri::ontology::UsoGraph::createEntityNode();
  }
  return 0;
}

siri::ontology::oname::graph::ontology_init *uaap::addOccurrenceCount(uaap *this, siri::ontology::UsoGraph *a2, uaap::UPDDSpan *a3, uaap::UPDDSpan *a4, uaap::UPDDSpan *a5)
{
  const __CFString *v6;
  const __CFString *v9;
  siri::ontology::oname::graph::ontology_init *v10;
  siri::ontology::oname::graph::ontology_init *EntityNode;
  uaap::UPDDSpan *v12;
  uaap::AbstractDateTimeHandler *v13;
  const __CFString *v14;
  uint64_t IntValueFromCFStringRef;
  const __CFString *v16;
  unint64_t v17;
  NSObject *v18;
  double DoubleValue;
  const char *v20;
  siri::ontology::oname::graph::ontology_init *v22;
  siri::ontology::oname::graph::ontology_init *IntNode;
  uaap::UPDDSpan *v24;
  siri::ontology::oname::graph::ontology_init *v25;
  CFStringRef str;
  _BYTE buf[24];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v6 = (const __CFString *)*((_QWORD *)a2 + 3);
  if (!v6)
    return 0;
  if (!uaap::UPDDSpan::extractIntValueFromCFStringRef(*((const __CFString **)a2 + 3), (const __CFString *)a2)&& !CFEqual(CFSTR("0"), v6))
  {
    if (a3)
    {
      v14 = (const __CFString *)*((_QWORD *)a3 + 3);
      if (v14)
      {
        IntValueFromCFStringRef = uaap::UPDDSpan::extractIntValueFromCFStringRef(v14, v9);
        if (!(_DWORD)IntValueFromCFStringRef)
        {
          IntValueFromCFStringRef = CFEqual(CFSTR("0"), v14);
          if (!(_DWORD)IntValueFromCFStringRef)
          {
            v18 = SNLPOSLoggerForCategory(6);
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
              return 0;
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)&buf[4] = CFStringGetDoubleValue(v14);
            v20 = "Unsupported denominator in occurrence count with value: %.4f";
            goto LABEL_18;
          }
        }
        if (a4 && *((_QWORD *)a4 + 3))
        {
          str = (CFStringRef)*((_QWORD *)a4 + 3);
          *(_QWORD *)buf = &str;
          v17 = uaap::addOccurrenceCount(siri::ontology::UsoGraph *,uaap::UPDDSpan *,uaap::UPDDSpan *,uaap::UPDDSpan *)::$_2::operator()((const __CFString ***)buf, v16);
          if (!HIDWORD(v17))
          {
            v18 = SNLPOSLoggerForCategory(6);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              DoubleValue = CFStringGetDoubleValue(str);
              *(_DWORD *)buf = 134217984;
              *(double *)&buf[4] = DoubleValue;
              v20 = "Unsupported numerator in occurrence count with value: %.4f";
LABEL_18:
              _os_log_impl(&dword_1C2196000, v18, OS_LOG_TYPE_DEFAULT, v20, buf, 0xCu);
              return 0;
            }
            return 0;
          }
          siri::ontology::oname::graph::ontology_init::common_MixedFraction((siri::ontology::oname::graph::ontology_init *)v17);
          EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
          IntNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createIntNode();
          siri::ontology::oname::graph::ontology_init::Argument_numeratorValue(IntNode);
          siri::ontology::UsoGraphNode::setSuccessor();
          uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(IntNode, a2, v24);
        }
        else
        {
          siri::ontology::oname::graph::ontology_init::common_MixedFraction((siri::ontology::oname::graph::ontology_init *)IntValueFromCFStringRef);
          EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
          v22 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createIntNode();
          siri::ontology::oname::graph::ontology_init::Argument_numeratorValue(v22);
          siri::ontology::UsoGraphNode::setSuccessor();
        }
        v25 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createIntNode();
        siri::ontology::oname::graph::ontology_init::Argument_denominatorValue(v25);
        siri::ontology::UsoGraphNode::setSuccessor();
        v13 = v25;
        goto LABEL_6;
      }
    }
    v18 = SNLPOSLoggerForCategory(6);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = CFStringGetDoubleValue(v6);
      v20 = "Unsupported occurrence count with value: %.4f";
      goto LABEL_18;
    }
    return 0;
  }
  v10 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createIntNode();
  siri::ontology::oname::graph::ontology_init::common_Integer(v10);
  EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::Argument_integerValue(EntityNode);
  siri::ontology::UsoGraphNode::setSuccessor();
  v13 = v10;
LABEL_6:
  uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v13, a2, v12);
  return EntityNode;
}

void uaap::DateHandler::addUnitAndOccurance(uaap::DateHandler *this, siri::ontology::UsoEntityNode *a2, siri::ontology::UsoEntityNode *a3, siri::ontology::UsoGraph *a4, siri::ontology::UsoEntityNode *a5, uaap::UPDDSpan *a6)
{
  siri::ontology::oname::graph::ontology_init *EntityNode;
  siri::ontology::oname::graph::ontology_init *v10;
  siri::ontology::oname::graph::ontology_init *v11;
  siri::ontology::oname::graph::ontology_init *v12;
  uaap::UPDDSpan *v13;

  siri::ontology::oname::graph::ontology_init::common_DurationComponent(this);
  EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::Argument_components(EntityNode);
  v10 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
  if (a4)
  {
    siri::ontology::oname::graph::ontology_init::common_TimeUnit(v10);
    v11 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
    siri::ontology::oname::graph::ontology_init::Argument_unit(v11);
    v12 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
    siri::ontology::oname::graph::ontology_init::Argument_definedValue(v12);
    siri::ontology::UsoGraphNode::setSuccessor();
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(a4, a5, v13);
  }
  if (a2)
  {
    siri::ontology::oname::graph::ontology_init::Argument_value(v10);
    siri::ontology::UsoGraphNode::setSuccessor();
  }
}

uint64_t uaap::addOccurrenceCount(siri::ontology::UsoGraph *,uaap::UPDDSpan *,uaap::UPDDSpan *,uaap::UPDDSpan *)::$_2::operator()(const __CFString ***a1, const __CFString *a2)
{
  int IntValueFromCFStringRef;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  IntValueFromCFStringRef = uaap::UPDDSpan::extractIntValueFromCFStringRef(**a1, a2);
  if (IntValueFromCFStringRef || CFEqual(CFSTR("0"), **a1))
  {
    v4 = IntValueFromCFStringRef & 0xFFFFFF00;
    v5 = IntValueFromCFStringRef;
    v6 = 0x100000000;
  }
  else
  {
    v4 = 0;
    v6 = 0;
    v5 = 0;
  }
  return v6 | v4 | v5;
}

void uaap::DateHandler::resolveOffsetDirection(siri::ontology::UsoEntityNode **this, uaap::UPDDDateOffsetSpan *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  siri::ontology::oname::graph::ontology_init *v5;
  siri::ontology::UsoEntityNode *v6;
  const void *v7;
  siri::ontology::oname::graph::ontology_init *v8;
  siri::ontology::oname::graph::ontology_init *v9;
  siri::ontology::oname::graph::ontology_init *EntityNode;
  siri::ontology::oname::graph::ontology_init *v11;
  siri::ontology::oname::graph::ontology_init *v12;
  uaap::UPDDSpan *v13;

  if (this)
  {
    if (a2)
    {
      if (a3)
      {
        siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)this);
        v5 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
        if (!(_DWORD)v5
          || (siri::ontology::oname::graph::ontology_init::common_OffsetDateTime(v5),
              (siri::ontology::operator!=() & 1) == 0))
        {
          v6 = this[6];
          if (v6)
          {
            v7 = (const void *)*((_QWORD *)v6 + 3);
            if (v7)
            {
              v8 = (siri::ontology::oname::graph::ontology_init *)CFEqual(*((CFTypeRef *)v6 + 3), CFSTR("before"));
              if ((_DWORD)v8)
              {
                siri::ontology::oname::graph::ontology_init::common_OffsetDirection_Before(v8);
              }
              else
              {
                v9 = (siri::ontology::oname::graph::ontology_init *)CFEqual(v7, CFSTR("after"));
                if (!(_DWORD)v9)
                  return;
                siri::ontology::oname::graph::ontology_init::common_OffsetDirection_After(v9);
              }
              EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
              siri::ontology::oname::graph::ontology_init::common_OffsetDirection(EntityNode);
              v11 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
              siri::ontology::oname::graph::ontology_init::Argument_direction(v11);
              v12 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
              siri::ontology::oname::graph::ontology_init::Argument_definedValue(v12);
              siri::ontology::UsoGraphNode::setSuccessor();
              uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, this[6], v13);
            }
          }
        }
      }
    }
  }
}

uint64_t uaap::resolveOffsetReference(uint64_t this, uaap::UPDDDateSpan *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  uint64_t v5;
  uint64_t v6;
  siri::ontology::oname::graph::ontology_init *EntityNode;
  siri::ontology::oname::graph::ontology_init *v8;
  uint64_t v9;
  uint64_t v10;

  if (this)
  {
    if (a2)
    {
      if (a3)
      {
        v5 = this;
        siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)this);
        this = siri::ontology::operator!=();
        if (!(_DWORD)this
          || (siri::ontology::oname::graph::ontology_init::common_OffsetDateTime((siri::ontology::oname::graph::ontology_init *)this),
              this = siri::ontology::operator!=(),
              (this & 1) == 0))
        {
          v6 = *(_QWORD *)(v5 + 112);
          if (v6)
          {
            if (*(_QWORD *)(v6 + 24))
            {
              siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)this);
              EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
              siri::ontology::oname::graph::ontology_init::Argument_offsetReference(EntityNode);
              v8 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
              v9 = *(_QWORD *)(v5 + 112);
              v10 = siri::ontology::oname::graph::ontology_init::Argument_date(v8);
              return (uint64_t)uaap::DateHandler::resolveAbsoluteDate(v9, (uint64_t)a2, EntityNode, v10);
            }
          }
        }
      }
    }
  }
  return this;
}

siri::ontology::UsoGraph *uaap::DateHandler::resolveDate(uaap::DateHandler *a1, uaap::UPDDDateOffsetSpan *a2, siri::ontology::UsoGraph *a3, uint64_t a4, siri::ontology::UsoEntityNode *a5)
{
  siri::ontology::UsoGraph *v5;
  uint64_t v10;
  uint64_t v11;
  siri::ontology::UsoEntityNode *v12;
  siri::ontology::UsoEntityNode *v13;
  uint64_t v14;

  v5 = 0;
  if (a1 && a2 && a3 && a4)
  {
    v10 = *((_QWORD *)a1 + 12);
    if (v10)
      v5 = uaap::DateHandler::resolveRelativeDay(v10, (uint64_t)a2, (uint64_t)a3, a4);
    else
      v5 = 0;
    if (*((_QWORD *)a1 + 15))
      v5 = uaap::DateHandler::resolveDateOffset((uint64_t)a1, a2, a3, a4);
    v11 = *((_QWORD *)a1 + 13);
    if (v11)
    {
      v5 = uaap::DateHandler::resolveRelativeDayOfWeek(v11, (uint64_t)a2, (uint64_t)a3, a4);
      v13 = v12;
    }
    else
    {
      v13 = 0;
    }
    v14 = *((_QWORD *)a1 + 14);
    if (v14)
      v5 = uaap::DateHandler::resolveAbsoluteDate(v14, (uint64_t)a2, a3, a4);
    uaap::DateHandler::updateDayOfWeekWithListValIfExists(a1, a2, v5, v13, a5);
  }
  return v5;
}

uint64_t uaap::DateHandler::getSpecialDateUnitDefinedValue(uaap::DateHandler *this, uaap::UPDDDateSpan *a2)
{
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  siri::ontology::oname::graph::ontology_init *v6;
  siri::ontology::oname::graph::ontology_init *v8;
  siri::ontology::oname::graph::ontology_init *v9;
  siri::ontology::oname::graph::ontology_init *v10;
  siri::ontology::oname::graph::ontology_init *v11;
  siri::ontology::oname::graph::ontology_init *v12;
  siri::ontology::oname::graph::ontology_init *v13;

  if (!this)
    return 0;
  v3 = *((_QWORD *)this + 16);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 48);
  if (!v4)
    return 0;
  v5 = *(const void **)(v4 + 24);
  if (!v5)
    return 0;
  v6 = (siri::ontology::oname::graph::ontology_init *)CFEqual(*(CFTypeRef *)(v4 + 24), CFSTR("weekend"));
  if ((_DWORD)v6)
    return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Weekend(v6);
  v8 = (siri::ontology::oname::graph::ontology_init *)CFEqual(v5, CFSTR("weekday"));
  if ((_DWORD)v8)
    return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Workweek(v8);
  v9 = (siri::ontology::oname::graph::ontology_init *)CFEqual(v5, CFSTR("spring"));
  if ((_DWORD)v9)
    return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Spring(v9);
  v10 = (siri::ontology::oname::graph::ontology_init *)CFEqual(v5, CFSTR("summer"));
  if ((_DWORD)v10)
    return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Summer(v10);
  v11 = (siri::ontology::oname::graph::ontology_init *)CFEqual(v5, CFSTR("autumn"));
  if ((_DWORD)v11)
    return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Autumn(v11);
  v12 = (siri::ontology::oname::graph::ontology_init *)CFEqual(v5, CFSTR("winter"));
  if ((_DWORD)v12)
    return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Winter(v12);
  if ((uaap::DateSpanHandler::isRecurringDate((uint64_t)this) & 1) == 0
    && (v13 = (siri::ontology::oname::graph::ontology_init *)CFEqual(v5, CFSTR("day")), (_DWORD)v13))
  {
    return siri::ontology::oname::graph::ontology_init::common_DateTimeRange_Daytime(v13);
  }
  else
  {
    return 0;
  }
}

siri::ontology::oname::graph::ontology_init *uaap::DateHandler::resolveDateTimeRangeValue(uaap::DateHandler *this, uaap::UPDDDateSpan *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  siri::ontology::oname::graph::ontology_init *v4;
  uint64_t v6;
  uint64_t v7;
  siri::ontology::oname::graph::ontology_init *v8;
  uaap::UPDDDateSpan *v9;
  siri::ontology::oname::graph::ontology_init *EntityNode;
  siri::ontology::oname::graph::ontology_init *v11;
  uaap::UPDDSpan *v12;

  v4 = 0;
  if (a2 && this && a3)
  {
    v6 = *((_QWORD *)this + 16);
    if (v6
      && (v7 = *(_QWORD *)(v6 + 48)) != 0
      && *(_QWORD *)(v7 + 24)
      && ((siri::ontology::oname::graph::ontology_init::common_Date(this),
           v8 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=(),
           !(_DWORD)v8)
       || (siri::ontology::oname::graph::ontology_init::common_DateTime(v8), (siri::ontology::operator!=() & 1) == 0))
      && uaap::DateHandler::getSpecialDateUnitDefinedValue(this, v9))
    {
      EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::common_DateTimeRange(EntityNode);
      v4 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::Argument_occurringIn(v4);
      v11 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
      siri::ontology::oname::graph::ontology_init::Argument_definedValue(v11);
      siri::ontology::UsoGraphNode::setSuccessor();
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, *((siri::ontology::UsoEntityNode **)this + 16), v12);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

siri::ontology::oname::graph::ontology_init *uaap::DateHandler::resolveDurationValueAndUnitGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDDateSpan *a2, siri::ontology::UsoGraph *a3)
{
  siri::ontology::oname::graph::ontology_init *v4;
  uint64_t v5;
  uint64_t v6;

  if (this)
  {
    v4 = this;
    v5 = *((_QWORD *)a2 + 11);
    v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return (siri::ontology::oname::graph::ontology_init *)uaap::DateHandler::resolveDurationValueAndUnit(v4, a2, v5, v6);
  }
  return this;
}

uint64_t uaap::DateHandler::resolveDurationValueAndUnit(siri::ontology::oname::graph::ontology_init *a1, uaap *a2, uint64_t a3, uint64_t a4)
{
  uint64_t EntityNode;
  uint64_t v7;
  const uaap::UPDDSpan *v8;
  uaap::UPDDSpan *v9;
  CFTypeRef *v10;
  uint64_t v11;
  siri::ontology::UsoGraph *v12;
  uint64_t v13;
  uaap::UPDDSpan *v14;
  uaap::UPDDSpan *v15;

  EntityNode = 0;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a4)
        {
          EntityNode = *((_QWORD *)a1 + 16);
          if (EntityNode)
          {
            siri::ontology::oname::graph::ontology_init::common_RecurringDateTime(a1);
            v7 = siri::ontology::operator!=();
            if ((_DWORD)v7)
            {
              siri::ontology::oname::graph::ontology_init::Root((siri::ontology::oname::graph::ontology_init *)v7);
              v7 = siri::ontology::operator!=();
              if ((v7 & 1) != 0)
                return 0;
            }
            v10 = *(CFTypeRef **)(EntityNode + 48);
            if (v10)
            {
              v7 = uaap::addSpecialDateUnit(a2, v10, v8);
              v11 = v7;
            }
            else
            {
              v11 = 0;
            }
            v12 = *(siri::ontology::UsoGraph **)(EntityNode + 64);
            if (v12 && *((_QWORD *)v12 + 3))
            {
              v7 = (uint64_t)uaap::addOccurrenceCount(a2, v12, *(uaap::UPDDSpan **)(EntityNode + 80), *(uaap::UPDDSpan **)(EntityNode + 72), v9);
              v13 = v7;
            }
            else
            {
              v13 = 0;
            }
            if (!(v11 | v13))
            {
              return 0;
            }
            else
            {
              siri::ontology::oname::graph::ontology_init::common_Duration((siri::ontology::oname::graph::ontology_init *)v7);
              EntityNode = siri::ontology::UsoGraph::createEntityNode();
              uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity((uaap::AbstractDateTimeHandler *)EntityNode, a1, v14);
              siri::ontology::UsoGraphNode::setSuccessor();
              uaap::DateHandler::addUnitAndOccurance((uaap::DateHandler *)EntityNode, (siri::ontology::UsoEntityNode *)v13, a2, (siri::ontology::UsoGraph *)v11, a1, v15);
            }
          }
        }
      }
    }
  }
  return EntityNode;
}

siri::ontology::oname::graph::ontology_init *uaap::DateHandler::resolveAbsoluteDateWithSpecialPeriod(siri::ontology::oname::graph::ontology_init *a1, uint64_t a2, uaap::AbstractDateTimeHandler *a3, uint64_t a4)
{
  siri::ontology::oname::graph::ontology_init *v4;
  siri::ontology::oname::graph::ontology_init *v9;
  uint64_t v10;
  uint64_t v11;
  const __CFString *v12;
  siri::ontology::oname::graph::ontology_init *MonthOfYearDefinedValue;
  siri::ontology::oname::graph::ontology_init *EntityNode;
  siri::ontology::oname::graph::ontology_init *v15;
  uaap::UPDDSpan *v16;
  void *v18;
  void *v19;

  v4 = 0;
  if (a1 && a2 && a3 && a4)
  {
    if ((*((_QWORD *)a1 + 7)
       || *((_QWORD *)a1 + 8)
       || *((_QWORD *)a1 + 9)
       || *((_QWORD *)a1 + 10)
       || *((_QWORD *)a1 + 16))
      && (siri::ontology::oname::graph::ontology_init::Root(a1), (siri::ontology::operator!=() & 1) == 0))
    {
      v9 = uaap::DateHandler::resolveAbsoluteDate((uint64_t)a1, a2, a3, a4);
      v4 = v9;
      if (v9)
      {
        v10 = *((_QWORD *)a1 + 16);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 56);
          if (v11)
          {
            if (*(_QWORD *)(v11 + 24))
            {
              siri::ontology::oname::graph::ontology_init::Argument_monthOfYear(v9);
              siri::ontology::UsoGraph::getSuccessors();
              if (v18)
                operator delete(v18);
              MonthOfYearDefinedValue = (siri::ontology::oname::graph::ontology_init *)uaap::DateSpanHandler::getMonthOfYearDefinedValue(*(const __CFString **)(*(_QWORD *)(*((_QWORD *)a1 + 16) + 56) + 24), v12);
              if (v19 == v18 && MonthOfYearDefinedValue)
              {
                siri::ontology::oname::graph::ontology_init::common_MonthOfYear(MonthOfYearDefinedValue);
                EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
                siri::ontology::oname::graph::ontology_init::Argument_monthOfYear(EntityNode);
                siri::ontology::UsoGraphNode::setSuccessor();
                v15 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
                siri::ontology::oname::graph::ontology_init::Argument_definedValue(v15);
                siri::ontology::UsoGraphNode::setSuccessor();
                uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v15, *(siri::ontology::UsoEntityNode **)(*((_QWORD *)a1 + 16) + 56), v16);
              }
            }
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

siri::ontology::oname::graph::ontology_init *uaap::DateHandler::resolveDateOffsetGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDDateSpan *a2, siri::ontology::UsoGraph *a3)
{
  uint64_t v4;
  siri::ontology::UsoGraph *v5;
  uint64_t v6;

  if (this)
  {
    v4 = (uint64_t)this;
    v5 = (siri::ontology::UsoGraph *)*((_QWORD *)a2 + 11);
    v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::DateHandler::resolveDateOffset(v4, a2, v5, v6);
  }
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::DateHandler::resolveAbsoluteDateWithSpecialDatePeriodGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDDateSpan *a2, siri::ontology::UsoGraph *a3)
{
  siri::ontology::oname::graph::ontology_init *v4;
  uaap::AbstractDateTimeHandler *v5;
  uint64_t v6;

  if (this)
  {
    v4 = this;
    v5 = (uaap::AbstractDateTimeHandler *)*((_QWORD *)a2 + 11);
    v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::DateHandler::resolveAbsoluteDateWithSpecialPeriod(v4, (uint64_t)a2, v5, v6);
  }
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::DateHandler::resolveRecurringDateSpanGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDDateSpan *a2, siri::ontology::UsoGraph *a3)
{
  siri::ontology::oname::graph::ontology_init *v4;
  uint64_t v5;
  uint64_t v6;

  if (this)
  {
    v4 = this;
    v5 = *((_QWORD *)a2 + 11);
    v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::DateHandler::resolveRecurringDateSpan(v4, a2, v5, v6);
  }
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::DateHandler::resolveDateTimeRangeWithQualifierGraph(siri::ontology::oname::graph::ontology_init *this, const __CFString *a2, siri::ontology::UsoGraph *a3)
{
  siri::ontology::oname::graph::ontology_init *v4;
  uint64_t length;
  uint64_t v6;

  if (this)
  {
    v4 = this;
    length = a2[2].length;
    v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::DateHandler::resolveDateTimeRangeWithQualifier(v4, a2, length, v6);
  }
  return this;
}

void itfm_inference_orchestrator::orchestration::ITFMOrchestrator::handle(itfm_inference_orchestrator::orchestration::ITFMOrchestrator *a1@<X0>, const sirinluinternalitfm::ITFMParserRequest **a2@<X1>, uint64_t a3@<X8>)
{
  const sirinluinternalitfm::ITFMParserRequest *v5;
  const sirinluinternalitfm::ITFMParserRequest *v7;
  uint64_t v8;
  const std::string *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t UnicodeScalarAndUtf8Offsets;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  NSObject *v28;
  uint64_t *v29;
  NSObject *v30;
  os_signpost_id_t v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  const sirinluinternal::MatchingSpan *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  NSObject *v42;
  std::string::size_type v43;
  const char *v44;
  NSObject *v45;
  NSObject *v46;
  NSObject *v47;
  NSObject *v48;
  NSObject *v49;
  os_signpost_id_t v50;
  NSObject *v51;
  NSObject *v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  NSObject *v59;
  NSObject *v60;
  unsigned int v61;
  char *v62;
  _BYTE *v63;
  _QWORD *v64;
  unint64_t v65;
  const sirinluinternalitfm::ITFMParserRequest *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  NSObject *v72;
  os_signpost_id_t v73;
  NSObject *v74;
  NSObject *v75;
  NSObject *v76;
  float *v77;
  NSObject *v78;
  NSObject *v79;
  NSObject *v80;
  _QWORD *v81;
  unint64_t v82;
  int v83;
  float *v84;
  int v85;
  float v86;
  float *v87;
  float *v88;
  float v89;
  float v90;
  char v91;
  std::runtime_error *exception;
  std::runtime_error *v93;
  _QWORD *v94;
  uint64_t v95;
  const sirinluinternalitfm::ITFMParserRequest **v96;
  uint64_t v97;
  uint64_t v98;
  float *v99;
  void *v100;
  uint8_t v101[16];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  void *v107;
  _BYTE *v108;
  _QWORD *v109;
  void *__p;
  _BYTE *v111;
  uint64_t v112;
  void *v113;
  _BYTE *v114;
  _BYTE v115[80];
  char v116;
  void *v117[2];
  void *v118[2];
  __int128 v119;
  const sirinluinternal::MatchingSpan *v120;
  const sirinluinternal::MatchingSpan *v121;
  char *v122;
  void *v123[2];
  void *v124[2];
  __int128 v125;
  _BYTE *v126;
  char *v127;
  unint64_t v128;
  std::string v129;
  char v130;
  std::string v131;
  char v132;
  std::string v133;
  _QWORD v134[3];
  _QWORD v135[3];
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  _QWORD v142[3];
  _QWORD v143[3];
  uint8_t buf[4];
  uint64_t *v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;

  v149 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v133, "Received null input parser request");
    std::runtime_error::runtime_error(exception, &v133);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::validateRequest(a1, v5, (uint64_t)&v131);
  if (v132)
  {
    v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v94 = &v93->__vftable;
    if (!v132)
      std::__throw_bad_optional_access[abi:ne180100]();
    std::runtime_error::runtime_error(v93, &v131);
    *v94 = &off_1E7BE9DD0;
  }
  v129.__r_.__value_.__s.__data_[0] = 0;
  v130 = 0;
  v7 = *a2;
  v8 = *((_QWORD *)*a2 + 5);
  if (v8)
  {
    v9 = *(const std::string **)(v8 + 16);
    if (v9)
    {
      std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(&v129, v9);
      v7 = *a2;
    }
  }
  v96 = a2;
  v97 = (uint64_t)a1;
  v95 = a3;
  v10 = *((_QWORD *)v7 + 8);
  v127 = 0;
  v128 = 0;
  v126 = 0;
  v98 = v10;
  v11 = *(_QWORD *)(v10 + 24);
  if (v11)
  {
    v12 = *(uint64_t **)(v11 + 24);
    v13 = *(uint64_t **)(v11 + 32);
    if (v12 != v13)
    {
      while (1)
      {
        v14 = *v12;
        if ((~*(unsigned __int8 *)(*v12 + 92) & 3) != 0)
          break;
        v15 = *(unsigned int *)(v14 + 72);
        v16 = *(unsigned int *)(v14 + 76);
        if ((int)v15 > (int)v16 || ((v16 | v15) & 0x80000000) != 0)
          break;
        v17 = *(uint64_t **)(v98 + 16);
        UnicodeScalarAndUtf8Offsets = snlp::common::utilities::getUnicodeScalarAndUtf8Offsets(v17, *(unsigned int *)(v14 + 72));
        v20 = v19;
        v21 = snlp::common::utilities::getUnicodeScalarAndUtf8Offsets(v17, v16);
        v23 = v22;
        MEMORY[0x1C3BB8524](buf, v14);
        *(_QWORD *)&v146 = v20;
        *((_QWORD *)&v146 + 1) = v23;
        *(_QWORD *)&v147 = v15;
        *((_QWORD *)&v147 + 1) = v16;
        *(_QWORD *)&v148 = UnicodeScalarAndUtf8Offsets;
        *((_QWORD *)&v148 + 1) = v21;
        MEMORY[0x1C3BB8524](&v133, buf);
        v139 = v146;
        v140 = v147;
        v141 = v148;
        LOBYTE(v142[0]) = 1;
        MEMORY[0x1C3BB8530](buf);
        if (!LOBYTE(v142[0]))
          goto LABEL_15;
        if ((unint64_t)v127 >= v128)
        {
          v27 = (char *)std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__emplace_back_slow_path<nlv4_inference_orchestrator::orchestration::IndexedToken const&>((void **)&v126, &v133);
        }
        else
        {
          v24 = (_OWORD *)MEMORY[0x1C3BB8524](v127, &v133);
          v25 = v139;
          v26 = v141;
          v24[7] = v140;
          v24[8] = v26;
          v24[6] = v25;
          v27 = (char *)(v24 + 9);
        }
        v127 = v27;
LABEL_21:
        if (LOBYTE(v142[0]))
          MEMORY[0x1C3BB8530](&v133);
        if (++v12 == v13)
          goto LABEL_24;
      }
      v133.__r_.__value_.__s.__data_[0] = 0;
      LOBYTE(v142[0]) = 0;
LABEL_15:
      v28 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        v29 = *(uint64_t **)(v14 + 64);
        if (*((char *)v29 + 23) < 0)
          v29 = (uint64_t *)*v29;
        *(_DWORD *)buf = 136642819;
        v145 = v29;
        _os_log_impl(&dword_1C2196000, v28, OS_LOG_TYPE_ERROR, "A token could not be reindexed; %{sensitive}s",
          buf,
          0xCu);
      }
      goto LABEL_21;
    }
  }
LABEL_24:
  *(_OWORD *)v124 = 0u;
  v125 = 0u;
  *(_OWORD *)v123 = 0u;
  v30 = SNLPOSLoggerForCategory(7);
  v31 = os_signpost_id_generate(v30);
  v32 = SNLPOSLoggerForCategory(7);
  if (v31 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v33 = v32;
    if (os_signpost_enabled(v32))
    {
      LOWORD(v133.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v33, OS_SIGNPOST_INTERVAL_BEGIN, v31, "ITFM Span Featurization", "", (uint8_t *)&v133, 2u);
    }
  }
  v34 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v133.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C2196000, v34, OS_LOG_TYPE_DEFAULT, "BEGIN \"ITFM Span Featurization\"", (uint8_t *)&v133, 2u);
  }
  v35 = (char *)*((_QWORD *)*v96 + 2);
  v36 = (char *)*((_QWORD *)*v96 + 3);
  v120 = 0;
  v121 = 0;
  v122 = 0;
  v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v120;
  v133.__r_.__value_.__s.__data_[8] = 0;
  v37 = v36 - v35;
  if (v36 != v35)
  {
    if ((unint64_t)v37 >= 0x1745D1745D1745D1)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v38 = (const sirinluinternal::MatchingSpan *)std::__allocate_at_least[abi:ne180100]<std::allocator<sirinluinternal::MatchingSpan>>(v37 >> 3);
    v120 = v38;
    v121 = v38;
    v122 = (char *)v38 + 88 * v39;
    do
    {
      v40 = *(_QWORD *)v35;
      v35 += 8;
      v38 = (const sirinluinternal::MatchingSpan *)(MEMORY[0x1C3BB847C](v38, v40) + 88);
    }
    while (v35 != v36);
    v121 = v38;
  }
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::assertAssetVersionValid((itfm_inference_orchestrator::orchestration::ITFMOrchestrator *)v97);
  v41 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v97 + 912) + 48))(*(_QWORD *)(v97 + 912));
  nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::featurize((int *)(v97 + 184), (char *)v123, &v120, (uint64_t *)&v126, (uint64_t)&v129, v41);
  if (v130)
  {
    if (_os_feature_enabled_impl())
    {
      if (!v130)
        std::__throw_bad_optional_access[abi:ne180100]();
      snlp::common::logging::feature_store_utilities::insertITFMAssetVersionToFeatureStore(v97 + 64, (uint64_t *)&v129, v97 + 48);
    }
  }
  else
  {
    v42 = SNLPOSLoggerForCategory(2);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      v43 = *(int *)(v97 + 48);
      if (v43 >= 8)
      {
        v45 = SNLPOSLoggerForCategory(4);
        v44 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v133.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v133.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
          WORD2(v133.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&v133.__r_.__value_.__r.__words[1] + 6) = v43;
          _os_log_impl(&dword_1C2196000, v45, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v133, 0x16u);
        }
      }
      else
      {
        v44 = off_1E7BED840[v43];
      }
      LODWORD(v133.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v133.__r_.__value_.__r.__words + 4) = (std::string::size_type)v44;
      _os_log_impl(&dword_1C2196000, v42, OS_LOG_TYPE_DEBUG, "[%s] nlu_request_id not found so skipping insertion of asset version into FeatureStore", (uint8_t *)&v133, 0xCu);
    }
  }
  v46 = SNLPOSLoggerForCategory(7);
  if (v31 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v47 = v46;
    if (os_signpost_enabled(v46))
    {
      LOWORD(v133.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v47, OS_SIGNPOST_INTERVAL_END, v31, "ITFM Span Featurization", "", (uint8_t *)&v133, 2u);
    }
  }
  v48 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v133.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C2196000, v48, OS_LOG_TYPE_DEFAULT, "END \"ITFM Span Featurization\"", (uint8_t *)&v133, 2u);
  }
  v49 = SNLPOSLoggerForCategory(7);
  v50 = os_signpost_id_generate(v49);
  v51 = SNLPOSLoggerForCategory(7);
  if (v50 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v52 = v51;
    if (os_signpost_enabled(v51))
    {
      LOWORD(v133.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v52, OS_SIGNPOST_INTERVAL_BEGIN, v50, "ITFM Context Featurization", "", (uint8_t *)&v133, 2u);
    }
  }
  v53 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v133.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C2196000, v53, OS_LOG_TYPE_DEFAULT, "BEGIN \"ITFM Context Featurization\"", (uint8_t *)&v133, 2u);
  }
  *(_OWORD *)v118 = 0u;
  v119 = 0u;
  *(_OWORD *)v117 = 0u;
  v115[0] = 0;
  v116 = 0;
  v54 = *((_QWORD *)*v96 + 9);
  if (!v54)
    goto LABEL_64;
  v55 = *(_QWORD *)(v54 + 136);
  if (!v55)
    goto LABEL_64;
  if (!*(_QWORD *)(v55 + 8))
    goto LABEL_61;
  MEMORY[0x1C3BB8314](&v133);
  LOBYTE(v137) = 1;
  MEMORY[0x1C3BB8308](v115, &v133);
  v116 = 1;
  if ((_BYTE)v137)
    MEMORY[0x1C3BB8320](&v133);
  v56 = *((_QWORD *)*v96 + 9);
  if (v56 && (v55 = *(_QWORD *)(v56 + 136)) != 0)
  {
LABEL_61:
    v57 = *(_QWORD *)(v55 + 16);
    buf[0] = 0;
    LOBYTE(v147) = 0;
    if (v57)
    {
      MEMORY[0x1C3BB83F8](&v133);
      LOBYTE(v140) = 1;
      if ((_BYTE)v147)
      {
        sirinluexternal::NLContext::operator=();
      }
      else
      {
        MEMORY[0x1C3BB83EC](buf, &v133);
        LOBYTE(v147) = 1;
      }
      if ((_BYTE)v140)
        MEMORY[0x1C3BB8404](&v133);
    }
  }
  else
  {
LABEL_64:
    buf[0] = 0;
    LOBYTE(v147) = 0;
  }
  itfm_inference_orchestrator::context::ContextFeaturizer::featurize(v97 + 920, v117, (uint64_t)buf, (sirinluexternal::LegacyNLContext *)v115, (uint64_t)&v129);
  v58 = SNLPOSLoggerForCategory(7);
  if (v50 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v59 = v58;
    if (os_signpost_enabled(v58))
    {
      LOWORD(v133.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v59, OS_SIGNPOST_INTERVAL_END, v50, "ITFM Context Featurization", "", (uint8_t *)&v133, 2u);
    }
  }
  v60 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v133.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C2196000, v60, OS_LOG_TYPE_DEFAULT, "END \"ITFM Context Featurization\"", (uint8_t *)&v133, 2u);
  }
  v61 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v97 + 912) + 24))(*(_QWORD *)(v97 + 912));
  v63 = v126;
  v62 = v127;
  v64 = operator new(0x10uLL);
  v65 = 0x8E38E38E38E38E39 * ((v62 - v63) >> 4);
  *v64 = v61;
  v64[1] = v65;
  LODWORD(v133.__r_.__value_.__l.__data_) = 1065353216;
  std::vector<float>::vector(&v113, v65, &v133);
  v66 = *v96;
  v67 = *((_QWORD *)*v96 + 1);
  v68 = *(_QWORD *)(v67 + 56);
  v69 = *(_QWORD *)(v67 + 40);
  v70 = operator new(0x18uLL);
  v108 = v70 + 3;
  v109 = v70 + 3;
  *v70 = 1;
  v70[1] = v68;
  v70[2] = v69;
  v107 = v70;
  v71 = *((_QWORD *)v66 + 1);
  v111 = 0;
  v112 = 0;
  __p = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)(v71 + 8), *(_QWORD *)(v71 + 16), (uint64_t)(*(_QWORD *)(v71 + 16) - *(_QWORD *)(v71 + 8)) >> 2);
  memset(&v133, 0, sizeof(v133));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v133, v107, (uint64_t)v108, (v108 - (_BYTE *)v107) >> 3);
  memset(v134, 0, sizeof(v134));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v134, __p, (uint64_t)v111, (v111 - (_BYTE *)__p) >> 2);
  memset(v135, 0, sizeof(v135));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v135, v123[0], (uint64_t)v123[1], ((char *)v123[1] - (char *)v123[0]) >> 3);
  v137 = 0;
  v136 = 0;
  v138 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v136, v124[1], v125, (uint64_t)(v125 - (unint64_t)v124[1]) >> 2);
  v139 = 0uLL;
  *(_QWORD *)&v140 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v139, v117[0], (uint64_t)v117[1], ((char *)v117[1] - (char *)v117[0]) >> 3);
  v141 = 0uLL;
  *((_QWORD *)&v140 + 1) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)&v140 + 1, v118[1], v119, (uint64_t)(v119 - (unint64_t)v118[1]) >> 2);
  memset(v142, 0, sizeof(v142));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v142, v64, (uint64_t)(v64 + 2), 2uLL);
  memset(v143, 0, sizeof(v143));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v143, v113, (uint64_t)v114, (v114 - (_BYTE *)v113) >> 2);
  v105 = 0u;
  v106 = 0u;
  v104 = 0u;
  std::mutex::lock((std::mutex *)(v97 + 1600));
  v72 = SNLPOSLoggerForCategory(7);
  v73 = os_signpost_id_generate(v72);
  v74 = SNLPOSLoggerForCategory(7);
  if (v73 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v75 = v74;
    if (os_signpost_enabled(v74))
    {
      *(_WORD *)v101 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v75, OS_SIGNPOST_INTERVAL_BEGIN, v73, "ITFM Inference", "", v101, 2u);
    }
  }
  v76 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v101 = 0;
    _os_log_impl(&dword_1C2196000, v76, OS_LOG_TYPE_DEFAULT, "BEGIN \"ITFM Inference\"", v101, 2u);
  }
  (*(void (**)(uint8_t *__return_ptr, _QWORD, std::string *))(**(_QWORD **)(v97 + 912) + 16))(v101, *(_QWORD *)(v97 + 912), &v133);
  v100 = *(void **)v101;
  v104 = *(_OWORD *)v101;
  v77 = (float *)*((_QWORD *)&v102 + 1);
  v105 = v102;
  v99 = (float *)v103;
  v106 = v103;
  v78 = SNLPOSLoggerForCategory(7);
  if (v73 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v79 = v78;
    if (os_signpost_enabled(v78))
    {
      *(_WORD *)v101 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v79, OS_SIGNPOST_INTERVAL_END, v73, "ITFM Inference", "", v101, 2u);
    }
  }
  v80 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v101 = 0;
    _os_log_impl(&dword_1C2196000, v80, OS_LOG_TYPE_DEFAULT, "END \"ITFM Inference\"", v101, 2u);
  }
  std::mutex::unlock((std::mutex *)(v97 + 1600));
  sirinluinternalitfm::ITFMParserResponse::ITFMParserResponse((sirinluinternalitfm::ITFMParserResponse *)v95);
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::addHypothesesToResponse(v97, (_QWORD *)v95, &v104);
  v81 = *(_QWORD **)(v95 + 8);
  v82 = *(_QWORD *)(v95 + 16) - (_QWORD)v81;
  if (!v82)
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
  if (v82 <= 8)
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
  v83 = *(_DWORD *)(*v81 + 20);
  if (v77 == v99 || (v84 = v77 + 1, v77 + 1 == v99))
  {
    v91 = *(_BYTE *)(v95 + 48);
    *(_BYTE *)(v95 + 48) = v91 | 2;
    *(_BYTE *)(v95 + 44) = 0;
LABEL_91:
    v85 = v83;
    goto LABEL_92;
  }
  v85 = *(_DWORD *)(v81[1] + 20);
  v86 = *v77;
  v87 = v77;
  v88 = v77 + 1;
  do
  {
    v89 = *v88++;
    v90 = v89;
    if (v86 < v89)
    {
      v86 = v90;
      v87 = v84;
    }
    v84 = v88;
  }
  while (v88 != v99);
  v91 = *(_BYTE *)(v95 + 48);
  *(_BYTE *)(v95 + 48) = v91 | 2;
  *(_BYTE *)(v95 + 44) = v87 != v77;
  if (v87 == v77)
    goto LABEL_91;
LABEL_92:
  *(_BYTE *)(v95 + 48) = v91 | 3;
  *(_DWORD *)(v95 + 40) = v85;
  if (v77)
    operator delete(v77);
  if (v100)
    operator delete(v100);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *)&v133);
  if (__p)
  {
    v111 = __p;
    operator delete(__p);
  }
  if (v107)
  {
    v108 = v107;
    operator delete(v107);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  operator delete(v64);
  if ((_BYTE)v147)
    MEMORY[0x1C3BB8404](buf);
  if (v116)
    MEMORY[0x1C3BB8320](v115);
  if (v118[1])
    operator delete(v118[1]);
  if (v117[0])
    operator delete(v117[0]);
  v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v120;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
  if (v124[1])
  {
    *(void **)&v125 = v124[1];
    operator delete(v124[1]);
  }
  if (v123[0])
  {
    v123[1] = v123[0];
    operator delete(v123[0]);
  }
  v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
  if (v130 && SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v129.__r_.__value_.__l.__data_);
  if (v132)
  {
    if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v131.__r_.__value_.__l.__data_);
  }
}

void sub_1C2248304(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1C224836C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,int a51,__int16 a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  char a69;
  void *v69;
  uint64_t v70;

  MEMORY[0x1C3BB85C0](a11);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a25);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *)&STACK[0x230]);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a31);
  if (__p)
  {
    a38 = (uint64_t)__p;
    operator delete(__p);
  }
  operator delete(v69);
  if (*(_BYTE *)(v70 - 144))
    MEMORY[0x1C3BB8404](v70 - 256);
  if (a50)
    MEMORY[0x1C3BB8320](&a40);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a52);
  STACK[0x230] = (unint64_t)&a59;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x230]);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a62);
  STACK[0x230] = (unint64_t)&a69;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x230]);
  JUMPOUT(0x1C2248490);
}

void sub_1C22484C8()
{
  void *v0;

  v0 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x1C2248420);
}

void sub_1C22484E0()
{
  JUMPOUT(0x1C2248420);
}

void sub_1C22484E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x1C2248428);
}

void sub_1C2248500()
{
  JUMPOUT(0x1C2248428);
}

void sub_1C2248508()
{
  JUMPOUT(0x1C2248438);
}

void sub_1C2248510()
{
  JUMPOUT(0x1C2248440);
}

void sub_1C2248520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C2248528()
{
  JUMPOUT(0x1C2248470);
}

void sub_1C2248530()
{
  JUMPOUT(0x1C2248468);
}

void itfm_inference_orchestrator::orchestration::ITFMOrchestrator::~ITFMOrchestrator(itfm_inference_orchestrator::orchestration::ITFMOrchestrator *this)
{
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::~ITFMOrchestrator(this);
  JUMPOUT(0x1C3BB9B44);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7BE94F0;
  std::mutex::~mutex((std::mutex *)this + 25);
  itfm_inference_orchestrator::context::ContextFeaturizer::~ContextFeaturizer((void **)this + 115);
  v2 = *((_QWORD *)this + 114);
  *((_QWORD *)this + 114) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 911) < 0)
    operator delete(*((void **)this + 111));
  if (*((char *)this + 887) < 0)
    operator delete(*((void **)this + 108));
  if (*((char *)this + 863) < 0)
    operator delete(*((void **)this + 105));
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)this + 792);
  if (*((char *)this + 791) < 0)
    operator delete(*((void **)this + 96));
  nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::~MatchedSpansFeaturizer((void **)this + 23);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 168);
  MEMORY[0x1C3BB8620]((char *)this + 64);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

void itfm_inference_orchestrator::context::ContextFeaturizer::~ContextFeaturizer(void **this)
{
  if (*((char *)this + 679) < 0)
    operator delete(this[82]);
  if (*((char *)this + 655) < 0)
    operator delete(this[79]);
  if (*((char *)this + 631) < 0)
    operator delete(this[76]);
  if (*((char *)this + 607) < 0)
    operator delete(this[73]);
  if (*((char *)this + 583) < 0)
    operator delete(this[70]);
  if (*((char *)this + 559) < 0)
    operator delete(this[67]);
  if (*((char *)this + 535) < 0)
    operator delete(this[64]);
  nlv4_inference_orchestrator::context::ContextLabelsExtractor::~ContextLabelsExtractor(this + 8);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)(this + 2));
}

void nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::~MatchedSpansFeaturizer(void **this)
{
  void **v2;

  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)(this + 71));
  std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table((uint64_t)(this + 66));
  MEMORY[0x1C3BB8494](this + 55);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 49));
  MEMORY[0x1C3BB8494](this + 38);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)(this + 35));
  if (*((char *)this + 279) < 0)
    operator delete(this[32]);
  v2 = this + 29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)(this + 24));
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)(this + 1));
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::allocator<snlp::ssu::app::SSUAppParameter>::destroy[abi:ne180100]((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void nlv4_inference_orchestrator::context::ContextLabelsExtractor::~ContextLabelsExtractor(void **this)
{
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)(this + 53));
  if (*((char *)this + 423) < 0)
    operator delete(this[50]);
  if (*((char *)this + 399) < 0)
    operator delete(this[47]);
  if (*((char *)this + 375) < 0)
    operator delete(this[44]);
  if (*((char *)this + 351) < 0)
    operator delete(this[41]);
  if (*((char *)this + 327) < 0)
    operator delete(this[38]);
  if (*((char *)this + 303) < 0)
    operator delete(this[35]);
  if (*((char *)this + 279) < 0)
    operator delete(this[32]);
  if (*((char *)this + 255) < 0)
    operator delete(this[29]);
  if (*((char *)this + 231) < 0)
    operator delete(this[26]);
  if (*((char *)this + 207) < 0)
    operator delete(this[23]);
  if (*((char *)this + 183) < 0)
    operator delete(this[20]);
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this);
}

void itfm_inference_orchestrator::orchestration::ITFMOrchestrator::validateRequest(itfm_inference_orchestrator::orchestration::ITFMOrchestrator *this@<X0>, const sirinluinternalitfm::ITFMParserRequest *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *p_p;
  std::string::size_type size;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  unsigned int v20;
  unint64_t v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  std::string __p;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;

  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 24) = 0;
  if ((itfm_inference_orchestrator::orchestration::ITFMOrchestrator::isAssetVersionValid(this) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3, "ITFM Orchestrator failed with incompatible major version");
LABEL_48:
    *(_BYTE *)(a3 + 24) = 1;
    return;
  }
  v6 = *((_QWORD *)a2 + 8);
  if (!v6)
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3, "Request does not contain a tokenised utterance");
    goto LABEL_48;
  }
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3, "Request does not contain a token chain");
    goto LABEL_48;
  }
  v8 = *((_QWORD *)a2 + 1);
  if (!v8)
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3, "Request does not contain embeddings");
    goto LABEL_48;
  }
  v9 = *(_QWORD *)(v8 + 56);
  v10 = *(_QWORD *)(v7 + 32) - *(_QWORD *)(v7 + 24);
  if (v9 == v10 >> 3)
    goto LABEL_25;
  std::to_string(&v32, v9);
  v11 = std::string::insert(&v32, 0, "Request embeddings num tokens (");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v33, ") does not match actual num tokens (");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, v10 >> 3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v17 = std::string::append(&v34, (const std::string::value_type *)p_p, size);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v35, ")");
  v36 = *v19;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(a3, (__int128 *)&v36);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(a3 + 24))
  {
LABEL_25:
    v20 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 114) + 32))(*((_QWORD *)this + 114));
    v21 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 56);
    if (v21 > v20)
    {
      std::to_string(&v32, v21);
      v22 = std::string::insert(&v32, 0, "Request embeddings (");
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      v24 = std::string::append(&v33, ") exceeds maximum (");
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&__p, v20);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &__p;
      else
        v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v27 = __p.__r_.__value_.__l.__size_;
      v28 = std::string::append(&v34, (const std::string::value_type *)v26, v27);
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      v30 = std::string::append(&v35, ")");
      v36 = *v30;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(a3, (__int128 *)&v36);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C2248CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  if (*(char *)(v34 - 73) < 0)
    operator delete(*(void **)(v34 - 96));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (*(_BYTE *)(v33 + 24))
  {
    if (*(char *)(v33 + 23) < 0)
      operator delete(*(void **)v33);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__emplace_back_slow_path<nlv4_inference_orchestrator::orchestration::IndexedToken const&>(void **a1, _OWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  char *v14;
  char *v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  char *v19;

  v2 = 0x8E38E38E38E38E39 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x1C71C71C71C71C7)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  if (0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v3)
    v3 = 0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0x8E38E38E38E38E39 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0xE38E38E38E38E3)
    v6 = 0x1C71C71C71C71C7;
  else
    v6 = v3;
  if (v6)
  {
    v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v6);
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v9 = &v8[144 * v7];
  v10 = (_OWORD *)MEMORY[0x1C3BB8524](&v8[144 * v2], a2);
  v11 = a2[6];
  v12 = a2[8];
  v10[7] = a2[7];
  v10[8] = v12;
  v10[6] = v11;
  v13 = v10 + 9;
  v15 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v16 = v10;
      v10 = (_OWORD *)MEMORY[0x1C3BB8524](v10 - 9, v14 - 144);
      v17 = *((_OWORD *)v14 - 3);
      v18 = *((_OWORD *)v14 - 1);
      *(v16 - 2) = *((_OWORD *)v14 - 2);
      *(v16 - 1) = v18;
      *(v16 - 3) = v17;
      v14 -= 144;
    }
    while (v14 != v15);
    v14 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v9;
    while (v19 != v14)
    {
      v19 -= 144;
      MEMORY[0x1C3BB8530](v19);
    }
  }
  if (v14)
    operator delete(v14);
  return v13;
}

void itfm_inference_orchestrator::orchestration::ITFMOrchestrator::assertAssetVersionValid(itfm_inference_orchestrator::orchestration::ITFMOrchestrator *this)
{
  void *__p[2];
  char v3;

  std::string::basic_string[abi:ne180100]<0>(__p, "ITFM");
  SNLPAssetVersionChecks::assertAssetVersionValid((uint64_t)__p, (uint64_t)this + 52, *((_QWORD *)this + 10), (uint64_t)this + 88, (uint64_t)this + 128);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1C2248F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t itfm_inference_orchestrator::orchestration::ITFMOrchestrator::addHypothesesToResponse(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator *v5;
  unint64_t v6;
  _QWORD *v7;
  char v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int64x2_t v25;
  unint64_t v26;
  std::string __str;
  char v28;
  char v29[8];
  std::string *v30;
  int v31;
  int v32;
  char v33;
  uint64_t v34;
  int64x2_t v35;
  unint64_t v36;
  _QWORD *v37;

  if (*(_QWORD *)(*a3 + 8))
  {
    v5 = (itfm_inference_orchestrator::orchestration::ITFMOrchestrator *)result;
    v6 = 0;
    v7 = a2 + 3;
    do
    {
      sirinluinternalitfm::ITFMHypothesis::ITFMHypothesis((sirinluinternalitfm::ITFMHypothesis *)v29);
      v8 = v33;
      v33 |= 1u;
      v31 = v6;
      v9 = *(_DWORD *)(a3[3] + 4 * v6);
      v33 = v8 | 3;
      v32 = v9;
      itfm_inference_orchestrator::orchestration::ITFMOrchestrator::getLabelStringFromTargetVocabulary(v5, (itfm_inference_orchestrator::orchestration::itfm_response_types *)v6, &__str);
      if (v28)
      {
        sirinluinternalitfm::ITFMHypothesis::makeStringLabel((sirinluinternalitfm::ITFMHypothesis *)v29);
        std::string::operator=(v30, &__str);
      }
      v10 = operator new();
      MEMORY[0x1C3BB8560](v10, v29);
      v12 = (uint64_t *)a2[2];
      v11 = a2[3];
      if ((unint64_t)v12 >= v11)
      {
        v14 = a2[1];
        v15 = ((uint64_t)v12 - v14) >> 3;
        if ((unint64_t)(v15 + 1) >> 61)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v16 = v11 - v14;
        v17 = v16 >> 2;
        if (v16 >> 2 <= (unint64_t)(v15 + 1))
          v17 = v15 + 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        v37 = v7;
        if (v18)
          v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v18);
        else
          v19 = 0;
        v20 = (uint64_t *)(v18 + 8 * v15);
        v21 = v18 + 8 * v19;
        v36 = v21;
        *v20 = v10;
        v13 = v20 + 1;
        v35.i64[1] = (uint64_t)(v20 + 1);
        v23 = (_QWORD *)a2[1];
        v22 = (_QWORD *)a2[2];
        if (v22 == v23)
        {
          v25 = vdupq_n_s64((unint64_t)v22);
        }
        else
        {
          do
          {
            v24 = *--v22;
            *v22 = 0;
            *--v20 = v24;
          }
          while (v22 != v23);
          v25 = *(int64x2_t *)(a2 + 1);
          v13 = (_QWORD *)v35.i64[1];
          v21 = v36;
        }
        a2[1] = v20;
        a2[2] = v13;
        v35 = v25;
        v26 = a2[3];
        a2[3] = v21;
        v36 = v26;
        v34 = v25.i64[0];
        std::__split_buffer<std::unique_ptr<sirinluexternal::UserParse>>::~__split_buffer((uint64_t)&v34);
      }
      else
      {
        *v12 = v10;
        v13 = v12 + 1;
      }
      a2[2] = v13;
      if (v28)
      {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      result = MEMORY[0x1C3BB8584](v29);
      ++v6;
    }
    while (v6 < *(_QWORD *)(*a3 + 8));
  }
  return result;
}

void sub_1C2249134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (a16)
  {
    if (a15 < 0)
      operator delete(__p);
  }
  MEMORY[0x1C3BB8584](&a18);
  _Unwind_Resume(a1);
}

void itfm_inference_orchestrator::orchestration::ITFMOrchestrator::getLabelStringFromTargetVocabulary(itfm_inference_orchestrator::orchestration::ITFMOrchestrator *this@<X0>, itfm_inference_orchestrator::orchestration::itfm_response_types *a2@<X1>, _BYTE *a3@<X8>)
{
  itfm_inference_orchestrator::vocabulary::Vocabulary *v5;
  int v6;
  NSObject *v7;
  int v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  NSObject *v18;
  int v19;
  NSObject *v20;
  _BOOL4 v21;
  std::string __p;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  a3[24] = 0;
  v5 = (itfm_inference_orchestrator::vocabulary::Vocabulary *)*((_QWORD *)this + 1);
  if (v5)
  {
    itfm_inference_orchestrator::vocabulary::Vocabulary::denumericalizeToken(v5, (unint64_t)a2, &__p);
    std::optional<std::string>::operator=[abi:ne180100]<std::string,void>((uint64_t)a3, (__int128 *)&__p);
LABEL_8:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  v6 = *((_DWORD *)this + 12);
  if (v6 == 4)
  {
    itfm_inference_orchestrator::orchestration::itfm_response_types::convertPSCLabelToStringLabel(a2, &__p);
LABEL_7:
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)a3, (__n128 *)&__p);
    if (!v23)
      return;
    goto LABEL_8;
  }
  if (v6 == 1)
  {
    itfm_inference_orchestrator::orchestration::itfm_response_types::convertSNLCLabelToStringLabel(a2, &__p);
    goto LABEL_7;
  }
  v7 = SNLPOSLoggerForCategory(2);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    v8 = *((_DWORD *)this + 12);
    v9 = "UNKNOWN";
    v10 = "SSU";
    v11 = "LVC";
    v12 = "PSC";
    v13 = "OWL";
    v14 = "UaaP";
    v15 = "NLv4";
    v16 = "NLv4";
    v17 = "SNLC";
    switch(v8)
    {
      case 0:
        break;
      case 1:
LABEL_13:
        v16 = "SNLC";
        v15 = v17;
        break;
      case 2:
LABEL_17:
        v16 = "OWL";
        v15 = v13;
        break;
      case 3:
LABEL_18:
        v16 = "UaaP";
        v15 = v14;
        break;
      case 4:
LABEL_19:
        v16 = "PSC";
        v15 = v12;
        break;
      case 5:
LABEL_20:
        v16 = "LVC";
        v15 = v11;
        break;
      case 6:
LABEL_21:
        v16 = "SSU";
        v15 = v10;
        break;
      case 7:
LABEL_22:
        v16 = "UNKNOWN";
        v15 = v9;
        break;
      default:
        v18 = SNLPOSLoggerForCategory(4);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
          WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v8;
          _os_log_impl(&dword_1C2196000, v18, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&__p, 0x16u);
        }
        v19 = *((_DWORD *)this + 12);
        v17 = "<UNDEFINED_COMPONENT>";
        v14 = "<UNDEFINED_COMPONENT>";
        v13 = "<UNDEFINED_COMPONENT>";
        v12 = "<UNDEFINED_COMPONENT>";
        v11 = "<UNDEFINED_COMPONENT>";
        v10 = "<UNDEFINED_COMPONENT>";
        v9 = "<UNDEFINED_COMPONENT>";
        v15 = "<UNDEFINED_COMPONENT>";
        v16 = "NLv4";
        switch(v19)
        {
          case 0:
            goto LABEL_23;
          case 1:
            goto LABEL_13;
          case 2:
            goto LABEL_17;
          case 3:
            goto LABEL_18;
          case 4:
            goto LABEL_19;
          case 5:
            goto LABEL_20;
          case 6:
            goto LABEL_21;
          case 7:
            goto LABEL_22;
          default:
            v20 = SNLPOSLoggerForCategory(4);
            v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
            v15 = "<UNDEFINED_COMPONENT>";
            v16 = "<UNDEFINED_COMPONENT>";
            if (v21)
            {
              LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
              WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
              *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v19;
              _os_log_impl(&dword_1C2196000, v20, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&__p, 0x16u);
              v16 = "<UNDEFINED_COMPONENT>";
            }
            break;
        }
        break;
    }
LABEL_23:
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v16;
    _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_ERROR, "[%s] Could not find output label mapping for component %s", (uint8_t *)&__p, 0x16u);
  }
}

void sirinluinternalitfm::ITFMHypothesis::makeStringLabel(sirinluinternalitfm::ITFMHypothesis *this)
{
  _QWORD *v2;
  uint64_t v3;

  if (!*((_QWORD *)this + 1))
  {
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    v3 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v2;
    if (v3)
      std::default_delete<std::string>::operator()[abi:ne180100](v3);
  }
}

__n128 std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(uint64_t a1, __n128 *a2)
{
  __n128 result;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      result = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    result = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

char *std::vector<sirinluinternal::MatchingSpan>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<sirinluinternal::MatchingSpan>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

uint64_t itfm_inference_orchestrator::orchestration::ITFMOrchestrator::isAssetVersionValid(itfm_inference_orchestrator::orchestration::ITFMOrchestrator *this)
{
  uint64_t isAssetVersionValid;
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "ITFM");
  isAssetVersionValid = SNLPAssetVersionChecks::isAssetVersionValid((uint64_t *)__p, (uint64_t)this + 52, *((_QWORD *)this + 10), (uint64_t)this + 88, (uint64_t)this + 128);
  if (v5 < 0)
    operator delete(__p[0]);
  return isAssetVersionValid;
}

void sub_1C22496DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t itfm_inference_orchestrator::orchestration::ITFMOrchestrator::ITFMOrchestrator(uint64_t a1, char *a2, char *a3, uint64_t a4, uint64_t a5, const sirinluinternalsnlp_intermediate::SNLPAssetVersion *a6, uint64_t a7, uint64_t a8, int *a9)
{
  siri::ontology *v16;
  uint64_t *SharedUsoVocabManager;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *size;
  unint64_t *v36;
  unint64_t v37;
  NSObject *v38;
  std::string::size_type v39;
  const char *v40;
  NSObject *v41;
  uint64_t v43[2];
  std::string v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  std::string __p;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E7BE94F0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>((std::string *)(a1 + 24), "config.json");
  *(_DWORD *)(a1 + 48) = *a9;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a3);
  *(_QWORD *)(a1 + 52) = getAssetDirectoryGenerationNumber((const std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::getITFMAssetVersion((itfm_inference_orchestrator::orchestration::ITFMOrchestrator *)a1, a6, (sirinluinternalsnlp_intermediate::ITFMAssetVersion *)(a1 + 64));
  std::unordered_set<unsigned int>::unordered_set(a1 + 88, a7);
  v16 = (siri::ontology *)std::unordered_set<unsigned int>::unordered_set(a1 + 128, a8);
  SharedUsoVocabManager = (uint64_t *)siri::ontology::getSharedUsoVocabManager(v16);
  v18 = *SharedUsoVocabManager;
  *(_QWORD *)(a1 + 168) = *SharedUsoVocabManager;
  v19 = SharedUsoVocabManager[1];
  *(_QWORD *)(a1 + 176) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    v22 = *(std::__shared_weak_count **)(a1 + 176);
    v45 = *(_QWORD *)(a1 + 168);
    v46 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
    }
  }
  else
  {
    v45 = v18;
    v46 = 0;
  }
  nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::MatchedSpansFeaturizer(a1 + 184, a4, &v45, a9);
  v25 = v46;
  if (v46)
  {
    v26 = (unint64_t *)&v46->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v44, a2);
  snlp::common::config::loadConfig((uint64_t)&__p, (uint64_t)a3, a9);
  itfm_inference_orchestrator::inference_engine::ITFMModelBuilder::ITFMModelBuilder((std::string *)(a1 + 768), (__int128 *)&v44, (uint64_t)&__p, a9);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)&__p);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  itfm_inference_orchestrator::inference_engine::ITFMModelBuilder::buildModel((std::__fs::filesystem::path *)(a1 + 768), (uint64_t *)&__p);
  *(_QWORD *)(a1 + 912) = __p.__r_.__value_.__r.__words[0];
  v28 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 16);
  std::allocate_shared[abi:ne180100]<itfm_inference_orchestrator::vocabulary::Vocabulary,std::allocator<itfm_inference_orchestrator::vocabulary::Vocabulary>,std::string const&,void>(&__p);
  v29 = *(std::__shared_weak_count **)(a1 + 176);
  v43[0] = *(_QWORD *)(a1 + 168);
  v43[1] = (uint64_t)v29;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 912) + 40))(*(_QWORD *)(a1 + 912));
  itfm_inference_orchestrator::context::ContextFeaturizer::ContextFeaturizer(a1 + 920, v28, &__p, v43, v32, a9);
  if (v29)
  {
    v33 = (unint64_t *)&v29->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v36 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  *(_QWORD *)(a1 + 1600) = 850045863;
  *(_QWORD *)(a1 + 1656) = 0;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::assertAssetVersionValid((itfm_inference_orchestrator::orchestration::ITFMOrchestrator *)a1);
  if (*(_DWORD *)(a1 + 48) == 5)
  {
    v38 = SNLPOSLoggerForCategory(2);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
    {
      v39 = *(int *)(a1 + 48);
      if (v39 >= 8)
      {
        v41 = SNLPOSLoggerForCategory(4);
        v40 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
          WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v39;
          _os_log_impl(&dword_1C2196000, v41, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&__p, 0x16u);
        }
      }
      else
      {
        v40 = off_1E7BED840[v39];
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v40;
      _os_log_impl(&dword_1C2196000, v38, OS_LOG_TYPE_DEBUG, "[%s] Warning: Creating an LVC (ITFM) Orchestrator without a target vocabulary. This means that string labels in the response will not be populated.", (uint8_t *)&__p, 0xCu);
    }
  }
  return a1;
}

{
  return itfm_inference_orchestrator::orchestration::ITFMOrchestrator::ITFMOrchestrator(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1C2249AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  void **v29;
  std::mutex *v30;
  uint64_t v31;
  void **v32;
  void **v33;
  uint64_t v35;

  std::mutex::~mutex(v30);
  itfm_inference_orchestrator::context::ContextFeaturizer::~ContextFeaturizer(v29);
  v35 = *(_QWORD *)(v27 + 912);
  *(_QWORD *)(v27 + 912) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  itfm_inference_orchestrator::inference_engine::ITFMModelBuilder::~ITFMModelBuilder(v33);
  nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::~MatchedSpansFeaturizer(v32);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v27 + 168);
  MEMORY[0x1C3BB8620](a11);
  if (*(char *)(v27 + 47) < 0)
    operator delete(*a10);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v28);
  _Unwind_Resume(a1);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C2249C5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void itfm_inference_orchestrator::orchestration::ITFMOrchestrator::getITFMAssetVersion(itfm_inference_orchestrator::orchestration::ITFMOrchestrator *this@<X0>, const sirinluinternalsnlp_intermediate::SNLPAssetVersion *a2@<X1>, sirinluinternalsnlp_intermediate::ITFMAssetVersion *a3@<X8>)
{
  sirinluinternalsnlp_intermediate::ITFMAssetVersion *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = (sirinluinternalsnlp_intermediate::ITFMAssetVersion *)sirinluinternalsnlp_intermediate::ITFMAssetVersion::ITFMAssetVersion(a3);
  sirinluinternalsnlp_intermediate::ITFMAssetVersion::makeVersion(v6);
  v7 = operator new();
  v8 = MEMORY[0x1C3BB865C](v7, a2);
  v9 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 2) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (!*((_QWORD *)a3 + 1))
  {
    v10 = (_QWORD *)operator new();
    *v10 = 0;
    v10[1] = 0;
    v10[2] = 0;
    v11 = *((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = v10;
    if (v11)
      std::default_delete<std::string>::operator()[abi:ne180100](v11);
  }
  v12 = (_QWORD *)operator new();
  v13 = *((int *)this + 12);
  if (v13 >= 8)
  {
    v15 = SNLPOSLoggerForCategory(4);
    v14 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v17 = 136315394;
      v18 = "<UNDEFINED_COMPONENT>";
      v19 = 2048;
      v20 = v13;
      _os_log_impl(&dword_1C2196000, v15, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v17, 0x16u);
    }
  }
  else
  {
    v14 = off_1E7BED840[v13];
  }
  std::string::basic_string[abi:ne180100]<0>(v12, v14);
  v16 = *((_QWORD *)a3 + 1);
  *((_QWORD *)a3 + 1) = v12;
  if (v16)
    std::default_delete<std::string>::operator()[abi:ne180100](v16);
}

void sub_1C2249E18(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1C3BB9B44](v2, 0x1012C40EC159624);
  MEMORY[0x1C3BB8620](v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<unsigned int>::unordered_set(uint64_t a1, uint64_t a2)
{
  uint64_t *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a1, *((_DWORD *)i + 4), *((_DWORD *)i + 4));
  return a1;
}

void sub_1C2249EA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

uint64_t snlp::common::config::loadConfig(uint64_t a1, uint64_t a2, int *a3)
{
  std::string::size_type v5;
  char *v6;
  NSObject *v7;
  std::string *v8;
  __int128 v9;
  NSObject *v10;
  void **v11;
  std::string *p_buf;
  std::string::size_type v13;
  char *v14;
  NSObject *v15;
  unsigned __int8 v16;
  uint64_t v17;
  __int128 v18;
  _BYTE *v19;
  int data;
  _BYTE *v21;
  int v22;
  uint64_t *v23;
  int v24;
  unsigned __int8 *v25;
  std::string::value_type v26;
  const std::string **v27;
  void *v28;
  std::string *v29;
  __int128 v30;
  NSObject *v31;
  void **v32;
  std::string *v33;
  std::string *v34;
  __int128 v35;
  unsigned __int8 v37[8];
  std::string::size_type *v38;
  void *v39[2];
  char v40;
  std::string v41;
  void *__p[2];
  char v43;
  _QWORD v44[2];
  _BYTE v45[408];
  uint64_t v46;
  std::string v47;
  std::string buf;
  _QWORD v49[3];
  int v50;
  std::string v51;
  unint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v44);
  v5 = *a3;
  if (v5 >= 8)
  {
    v7 = SNLPOSLoggerForCategory(4);
    v6 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v5;
      _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&buf, 0x16u);
    }
  }
  else
  {
    v6 = off_1E7BED840[v5];
  }
  std::string::basic_string[abi:ne180100]<0>(v39, v6);
  if ((v45[*(_QWORD *)(v44[0] - 24) + 16] & 5) != 0)
  {
    std::operator+<char>();
    v8 = std::string::append(&v51, ".");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    v10 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = v39;
      if (v40 < 0)
        v11 = (void **)v39[0];
      p_buf = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      LODWORD(v51.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      WORD2(v51.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v51.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_buf;
      _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_ERROR, "[%s] %s", (uint8_t *)&v51, 0x16u);
    }
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)(a1 + 32) = 1065353216;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    goto LABEL_91;
  }
  v37[0] = 0;
  v38 = 0;
  nlohmann::operator>>(v44, v37);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v13 = *a3;
  if (v13 >= 8)
  {
    v15 = SNLPOSLoggerForCategory(4);
    v14 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v13;
      _os_log_impl(&dword_1C2196000, v15, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&buf, 0x16u);
    }
  }
  else
  {
    v14 = off_1E7BED840[v13];
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v14);
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
  *(_OWORD *)&v51.__r_.__value_.__r.__words[1] = 0uLL;
  v52 = 0x8000000000000000;
  v16 = v37[0];
  if (v37[0])
  {
    if (v37[0] == 2)
    {
      v51.__r_.__value_.__r.__words[2] = *v38;
    }
    else if (v37[0] == 1)
    {
      v51.__r_.__value_.__l.__size_ = *v38;
    }
    else
    {
      v52 = 0;
    }
  }
  else
  {
    v52 = 1;
  }
  while (1)
  {
    *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
    v49[0] = 0x8000000000000000;
    if (v16 == 2)
    {
      buf.__r_.__value_.__r.__words[2] = v38[1];
    }
    else if (v16 == 1)
    {
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v38 + 1);
    }
    else
    {
      v49[0] = 1;
    }
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>,(decltype(nullptr))0>((unsigned __int8 **)&v51, (unsigned __int8 **)&buf))
    {
      break;
    }
    v17 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::key(*v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
    if (*(char *)(v17 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)v17, *(_QWORD *)(v17 + 8));
    }
    else
    {
      v18 = *(_OWORD *)v17;
      v41.__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 16);
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v18;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51) == 5)
    {
      v19 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51);
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v19, (int *)&buf);
      data = (int)buf.__r_.__value_.__l.__data_;
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&buf, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
      else
        buf = v41;
      LODWORD(v49[0]) = data;
      v50 = 0;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(a1, (unsigned __int8 *)&buf, (uint64_t)&buf);
      goto LABEL_70;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51) == 6)
    {
      v21 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51);
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v21, (unsigned int *)&buf);
      v22 = (int)buf.__r_.__value_.__l.__data_;
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&buf, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
      else
        buf = v41;
      LODWORD(v49[0]) = v22;
      v50 = 1;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(a1, (unsigned __int8 *)&buf, (uint64_t)&buf);
      goto LABEL_70;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51) == 7)
    {
      v23 = (uint64_t *)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51);
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v23, (float *)&buf);
      v24 = (int)buf.__r_.__value_.__l.__data_;
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&buf, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
      else
        buf = v41;
      LODWORD(v49[0]) = v24;
      v50 = 2;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(a1, (unsigned __int8 *)&buf, (uint64_t)&buf);
      goto LABEL_70;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51) == 4)
    {
      v25 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51);
      buf.__r_.__value_.__s.__data_[0] = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v25, &buf);
      v26 = buf.__r_.__value_.__s.__data_[0];
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&buf, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
      else
        buf = v41;
      LOBYTE(v49[0]) = v26;
      v50 = 3;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(a1, (unsigned __int8 *)&buf, (uint64_t)&buf);
LABEL_70:
      std::__variant_detail::__dtor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v49);
      goto LABEL_71;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51) != 3)
    {
      if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51))
      {
        std::operator+<char>();
        v29 = std::string::append(&v47, ".");
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        buf.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v47.__r_.__value_.__l.__data_);
        v31 = SNLPOSLoggerForCategory(4);
        if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
          goto LABEL_71;
        v32 = __p;
        if (v43 < 0)
          v32 = (void **)__p[0];
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = &buf;
        else
          v33 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      else
      {
        std::operator+<char>();
        v34 = std::string::append(&v47, " is null.  This is currently expected behaviour.");
        v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        buf.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v47.__r_.__value_.__l.__data_);
        v31 = SNLPOSLoggerForCategory(4);
        if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
          goto LABEL_71;
        v32 = __p;
        if (v43 < 0)
          v32 = (void **)__p[0];
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = &buf;
        else
          v33 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      LODWORD(v47.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
      WORD2(v47.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v47.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v33;
      _os_log_impl(&dword_1C2196000, v31, OS_LOG_TYPE_DEBUG, "[%s] %s", (uint8_t *)&v47, 0x16u);
LABEL_71:
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_74;
      v28 = (void *)buf.__r_.__value_.__r.__words[0];
      goto LABEL_73;
    }
    v27 = (const std::string **)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get_impl<std::string,0>(&v47, v27);
    std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>::pair[abi:ne180100]<std::string&,std::string const&,0>(&buf, (__int128 *)&v41, (__int128 *)&v47);
    std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(a1, (unsigned __int8 *)&buf, (uint64_t)&buf);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v49);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    {
      v28 = (void *)v47.__r_.__value_.__r.__words[0];
LABEL_73:
      operator delete(v28);
    }
LABEL_74:
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++((unsigned __int8 **)&v51);
    v16 = v37[0];
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "component_name");
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::string const&>>(a1, (unsigned __int8 *)&buf, (__int128 **)&v51, &v41);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (v43 < 0)
    operator delete(__p[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v38, v37[0]);
LABEL_91:
  if (v40 < 0)
    operator delete(v39[0]);
  v44[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v44 + *(_QWORD *)(v44[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1C3BB970C](v45);
  std::istream::~istream();
  return MEMORY[0x1C3BB9A90](&v46);
}

{
  std::string::size_type v5;
  char *v6;
  NSObject *v7;
  std::string *v8;
  __int128 v9;
  NSObject *v10;
  void **v11;
  std::string *p_buf;
  std::string::size_type v13;
  char *v14;
  NSObject *v15;
  unsigned __int8 v16;
  uint64_t v17;
  __int128 v18;
  _BYTE *v19;
  int data;
  _BYTE *v21;
  int v22;
  uint64_t *v23;
  int v24;
  unsigned __int8 *v25;
  std::string::value_type v26;
  const std::string **v27;
  void *v28;
  std::string *v29;
  __int128 v30;
  NSObject *v31;
  void **v32;
  std::string *v33;
  std::string *v34;
  __int128 v35;
  unsigned __int8 v37[8];
  std::string::size_type *v38;
  void *v39[2];
  char v40;
  std::string v41;
  void *__p[2];
  char v43;
  _QWORD v44[2];
  _BYTE v45[408];
  uint64_t v46;
  std::string v47;
  std::string buf;
  _QWORD v49[3];
  int v50;
  std::string v51;
  unint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v44);
  v5 = *a3;
  if (v5 >= 8)
  {
    v7 = SNLPOSLoggerForCategory(4);
    v6 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v5;
      _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&buf, 0x16u);
    }
  }
  else
  {
    v6 = off_1E7BED840[v5];
  }
  std::string::basic_string[abi:ne180100]<0>(v39, v6);
  if ((v45[*(_QWORD *)(v44[0] - 24) + 16] & 5) != 0)
  {
    std::operator+<char>();
    v8 = std::string::append(&v51, ".");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    v10 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = v39;
      if (v40 < 0)
        v11 = (void **)v39[0];
      p_buf = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      LODWORD(v51.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      WORD2(v51.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v51.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_buf;
      _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_ERROR, "[%s] %s", (uint8_t *)&v51, 0x16u);
    }
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)(a1 + 32) = 1065353216;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    goto LABEL_91;
  }
  v37[0] = 0;
  v38 = 0;
  nlohmann::operator>>(v44, v37);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v13 = *a3;
  if (v13 >= 8)
  {
    v15 = SNLPOSLoggerForCategory(4);
    v14 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v13;
      _os_log_impl(&dword_1C2196000, v15, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&buf, 0x16u);
    }
  }
  else
  {
    v14 = off_1E7BED840[v13];
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v14);
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
  *(_OWORD *)&v51.__r_.__value_.__r.__words[1] = 0uLL;
  v52 = 0x8000000000000000;
  v16 = v37[0];
  if (v37[0])
  {
    if (v37[0] == 2)
    {
      v51.__r_.__value_.__r.__words[2] = *v38;
    }
    else if (v37[0] == 1)
    {
      v51.__r_.__value_.__l.__size_ = *v38;
    }
    else
    {
      v52 = 0;
    }
  }
  else
  {
    v52 = 1;
  }
  while (1)
  {
    *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
    v49[0] = 0x8000000000000000;
    if (v16 == 2)
    {
      buf.__r_.__value_.__r.__words[2] = v38[1];
    }
    else if (v16 == 1)
    {
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v38 + 1);
    }
    else
    {
      v49[0] = 1;
    }
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>,(decltype(nullptr))0>((unsigned __int8 **)&v51, (unsigned __int8 **)&buf))
    {
      break;
    }
    v17 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::key(*v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
    if (*(char *)(v17 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)v17, *(_QWORD *)(v17 + 8));
    }
    else
    {
      v18 = *(_OWORD *)v17;
      v41.__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 16);
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v18;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51) == 5)
    {
      v19 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51);
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v19, (int *)&buf);
      data = (int)buf.__r_.__value_.__l.__data_;
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&buf, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
      else
        buf = v41;
      LODWORD(v49[0]) = data;
      v50 = 0;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(a1, (unsigned __int8 *)&buf, (uint64_t)&buf);
      goto LABEL_70;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51) == 6)
    {
      v21 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51);
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v21, (unsigned int *)&buf);
      v22 = (int)buf.__r_.__value_.__l.__data_;
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&buf, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
      else
        buf = v41;
      LODWORD(v49[0]) = v22;
      v50 = 1;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(a1, (unsigned __int8 *)&buf, (uint64_t)&buf);
      goto LABEL_70;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51) == 7)
    {
      v23 = (uint64_t *)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51);
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v23, (float *)&buf);
      v24 = (int)buf.__r_.__value_.__l.__data_;
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&buf, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
      else
        buf = v41;
      LODWORD(v49[0]) = v24;
      v50 = 2;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(a1, (unsigned __int8 *)&buf, (uint64_t)&buf);
      goto LABEL_70;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51) == 4)
    {
      v25 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51);
      buf.__r_.__value_.__s.__data_[0] = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v25, &buf);
      v26 = buf.__r_.__value_.__s.__data_[0];
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&buf, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
      else
        buf = v41;
      LOBYTE(v49[0]) = v26;
      v50 = 3;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(a1, (unsigned __int8 *)&buf, (uint64_t)&buf);
LABEL_70:
      std::__variant_detail::__dtor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v49);
      goto LABEL_71;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51) != 3)
    {
      if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51))
      {
        std::operator+<char>();
        v29 = std::string::append(&v47, ".");
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        buf.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v47.__r_.__value_.__l.__data_);
        v31 = SNLPOSLoggerForCategory(4);
        if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
          goto LABEL_71;
        v32 = __p;
        if (v43 < 0)
          v32 = (void **)__p[0];
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = &buf;
        else
          v33 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      else
      {
        std::operator+<char>();
        v34 = std::string::append(&v47, " is null.  This is currently expected behaviour.");
        v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        buf.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v47.__r_.__value_.__l.__data_);
        v31 = SNLPOSLoggerForCategory(4);
        if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
          goto LABEL_71;
        v32 = __p;
        if (v43 < 0)
          v32 = (void **)__p[0];
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = &buf;
        else
          v33 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      LODWORD(v47.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
      WORD2(v47.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v47.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v33;
      _os_log_impl(&dword_1C2196000, v31, OS_LOG_TYPE_DEBUG, "[%s] %s", (uint8_t *)&v47, 0x16u);
LABEL_71:
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_74;
      v28 = (void *)buf.__r_.__value_.__r.__words[0];
      goto LABEL_73;
    }
    v27 = (const std::string **)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v51);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get_impl<std::string,0>(&v47, v27);
    std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>::pair[abi:ne180100]<std::string&,std::string const&,0>(&buf, (__int128 *)&v41, (__int128 *)&v47);
    std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(a1, (unsigned __int8 *)&buf, (uint64_t)&buf);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v49);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    {
      v28 = (void *)v47.__r_.__value_.__r.__words[0];
LABEL_73:
      operator delete(v28);
    }
LABEL_74:
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++((unsigned __int8 **)&v51);
    v16 = v37[0];
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "component_name");
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::string const&>>(a1, (unsigned __int8 *)&buf, (__int128 **)&v51, &v41);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (v43 < 0)
    operator delete(__p[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v38, v37[0]);
LABEL_91:
  if (v40 < 0)
    operator delete(v39[0]);
  v44[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v44 + *(_QWORD *)(v44[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1C3BB970C](v45);
  std::istream::~istream();
  return MEMORY[0x1C3BB9A90](&v46);
}

void sub_1C224A750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t **a11, unsigned __int8 a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;

  if (*(char *)(v33 - 233) < 0)
    operator delete(*(void **)(v33 - 256));
  if (a25 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table(v32);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a11, a12);
  if (a19 < 0)
    operator delete(a14);
  std::ifstream::~ifstream(&a32);
  _Unwind_Resume(a1);
}

std::string *itfm_inference_orchestrator::inference_engine::ITFMModelBuilder::ITFMModelBuilder(std::string *this, __int128 *a2, uint64_t a3, _DWORD *a4)
{
  __int128 v7;
  std::string __p;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  std::unordered_map<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>::unordered_map((uint64_t)&this[1], a3);
  LODWORD(this[2].__r_.__value_.__r.__words[2]) = *a4;
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>(this + 3, "model.espresso.net");
  std::__fs::filesystem::path::path[abi:ne180100]<char [43],void>(this + 4, "model.bundle/universal.bundle/universal.e5");
  memset(&__p, 0, sizeof(__p));
  std::string::append[abi:ne180100]<char const*,0>(&__p, "model.bundle/universal.bundle/main/segment_0__cpu", "");
  std::__fs::filesystem::operator/[abi:ne180100](this + 5, (uint64_t)&__p, (std::__fs::filesystem::path *)&this[3]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return this;
}

void sub_1C224A96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void **v18;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 119) < 0)
    operator delete(*v18);
  if (*(char *)(v15 + 95) < 0)
    operator delete(*v17);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table(v16);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<itfm_inference_orchestrator::vocabulary::Vocabulary,std::allocator<itfm_inference_orchestrator::vocabulary::Vocabulary>,std::string const&,void>(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xA8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E7BECB10;
  result = itfm_inference_orchestrator::vocabulary::Vocabulary::Vocabulary(v2 + 3);
  *a1 = result;
  a1[1] = v2;
  return result;
}

void sub_1C224AA2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t itfm_inference_orchestrator::context::ContextFeaturizer::ContextFeaturizer(uint64_t a1, int a2, _QWORD *a3, uint64_t *a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  int v21;
  _QWORD v22[2];

  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = *a3;
  v7 = a3[1];
  *(_QWORD *)(a1 + 24) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = *a3;
  v10 = a3[1];
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = v10;
  *(_DWORD *)(a1 + 48) = *a6;
  v14 = *a4;
  v15 = (std::__shared_weak_count *)a4[1];
  *(_DWORD *)(a1 + 56) = *a6;
  v22[0] = v14;
  v22[1] = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v21 = 1;
  nlv4_inference_orchestrator::context::ContextLabelsExtractor::ContextLabelsExtractor(a1 + 64, v22, &v21);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 512), "executed_tasks_are_absent");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 536), "executed_tasks_are_absent");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 560), "[NO_SDAS]");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 584), "[NO_LEGACY_NL_CONTEXT_LABEL]");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 608), "DICTATION_PROMPT=");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 632), "STRICT_PROMPT=");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 656), "PREVIOUS_NLV3_DOMAIN=");
  return a1;
}

void sub_1C224ABE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  char *v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;

  if (v2[655] < 0)
    operator delete(*v9);
  if (v2[631] < 0)
    operator delete(*v8);
  if (v2[607] < 0)
    operator delete(*v7);
  if (v2[583] < 0)
    operator delete(*v6);
  if (v2[559] < 0)
    operator delete(*v5);
  if (v2[535] < 0)
    operator delete(*v4);
  nlv4_inference_orchestrator::context::ContextLabelsExtractor::~ContextLabelsExtractor(v3);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 32));
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1C224AC9C(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1C224AC84);
}

void itfm_inference_orchestrator::inference_engine::ITFMModelBuilder::~ITFMModelBuilder(void **this)
{
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)(this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t nlv4_inference_orchestrator::context::ContextLabelsExtractor::ContextLabelsExtractor(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t i;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 v11[24];
  _QWORD v12[4];

  v12[3] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v11, "SystemGaveOptions");
  std::string::basic_string[abi:ne180100]<0>(v12, "SystemOffered");
  std::unordered_set<std::string>::unordered_set(a1, v11, 2);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v12[i + 2]) < 0)
      operator delete(*(void **)&v11[i * 8 + 24]);
  }
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 40), "sda");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 64), "executed_task");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 88), "salient_entity");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 112), "active_task");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 136), "sdas");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 160), "executed_tasks");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 184), "salient_entities");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 208), "active_tasks");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 232), "_type=");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 256), "_full_path=");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 280), "_verb_entity=");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 304), "_verb=");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 328), "_below_verb=");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 352), "_are_present");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 376), "_are_absent");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 400), "[NO_SDAS]");
  *(_QWORD *)(a1 + 424) = *a2;
  v7 = a2[1];
  *(_QWORD *)(a1 + 432) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_DWORD *)(a1 + 440) = *a3;
  return a1;
}

void sub_1C224AF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17)
{
  char *v17;
  void **v18;
  void **v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  void **v24;

  if (v17[399] < 0)
    operator delete(*v22);
  if (v17[375] < 0)
    operator delete(*v24);
  if (v17[351] < 0)
    operator delete(*v23);
  if (v17[327] < 0)
    operator delete(*v21);
  if (v17[303] < 0)
    operator delete(*v20);
  if (v17[279] < 0)
    operator delete(*v19);
  if (v17[255] < 0)
    operator delete(*v18);
  if (v17[231] < 0)
    operator delete(*a10);
  if (v17[207] < 0)
    operator delete(*a11);
  if (v17[183] < 0)
    operator delete(*a12);
  if (v17[159] < 0)
    operator delete(*a13);
  if (v17[135] < 0)
    operator delete(*a14);
  if (v17[111] < 0)
    operator delete(*a15);
  if (v17[87] < 0)
    operator delete(*a16);
  if (v17[63] < 0)
    operator delete(*a17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v17);
  _Unwind_Resume(a1);
}

void sub_1C224B0D4()
{
  JUMPOUT(0x1C224B04CLL);
}

void sub_1C224B0DC()
{
  JUMPOUT(0x1C224B060);
}

void sub_1C224B0E4()
{
  JUMPOUT(0x1C224B074);
}

void sub_1C224B0EC()
{
  JUMPOUT(0x1C224B088);
}

void sub_1C224B0F4()
{
  JUMPOUT(0x1C224B09CLL);
}

void sub_1C224B0FC()
{
  JUMPOUT(0x1C224B0B0);
}

void sub_1C224B104()
{
  JUMPOUT(0x1C224B0C4);
}

void sub_1C224B10C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = 0;
  while (1)
  {
    if (*(char *)(v0 + v1 + 47) < 0)
      operator delete(*(void **)(v0 + v1 + 24));
    v1 -= 24;
    if (v1 == -48)
      JUMPOUT(0x1C224B0CCLL);
  }
}

void sub_1C224B138(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  JUMPOUT(0x1C224B0CCLL);
}

void sub_1C224B150()
{
  JUMPOUT(0x1C224B0CCLL);
}

void std::__shared_ptr_emplace<itfm_inference_orchestrator::vocabulary::Vocabulary>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7BECB10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<itfm_inference_orchestrator::vocabulary::Vocabulary>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7BECB10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3BB9B44);
}

void std::__shared_ptr_emplace<itfm_inference_orchestrator::vocabulary::Vocabulary>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy(*(char **)(a1 + 152));
  std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(*(char **)(a1 + 128));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[63] < 0)
      operator delete(*((void **)a1 + 5));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C224B2DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [43],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C224B334(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJijfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJijfbSD_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJijfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJijfbSD_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJijfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJijfbSD_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  float result;

  result = *a3;
  *a2 = *(_DWORD *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJijfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJijfbSD_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJijfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJijfbSD_EEERKSV_EEEDcSN_DpT0_(int a1, std::string *this, __int128 *a3)
{
  __int128 v3;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v21 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1C224B5A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t itfm_inference_orchestrator::orchestration::ITFMOrchestrator::ITFMOrchestrator(uint64_t a1, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, const sirinluinternalsnlp_intermediate::SNLPAssetVersion *a7, uint64_t a8, uint64_t a9, int *a10)
{
  siri::ontology *v16;
  uint64_t *SharedUsoVocabManager;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *size;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v39[2];
  std::string __p;
  std::string v41;
  uint64_t v42;
  std::__shared_weak_count *v43;

  *(_QWORD *)a1 = &off_1E7BE94F0;
  std::allocate_shared[abi:ne180100]<itfm_inference_orchestrator::vocabulary::Vocabulary,std::allocator<itfm_inference_orchestrator::vocabulary::Vocabulary>,std::string const&,void>(&__p);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>((std::string *)(a1 + 24), "config.json");
  *(_DWORD *)(a1 + 48) = *a10;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a3);
  *(_QWORD *)(a1 + 52) = getAssetDirectoryGenerationNumber((const std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::getITFMAssetVersion((itfm_inference_orchestrator::orchestration::ITFMOrchestrator *)a1, a7, (sirinluinternalsnlp_intermediate::ITFMAssetVersion *)(a1 + 64));
  std::unordered_set<unsigned int>::unordered_set(a1 + 88, a8);
  v16 = (siri::ontology *)std::unordered_set<unsigned int>::unordered_set(a1 + 128, a9);
  SharedUsoVocabManager = (uint64_t *)siri::ontology::getSharedUsoVocabManager(v16);
  v18 = *SharedUsoVocabManager;
  *(_QWORD *)(a1 + 168) = *SharedUsoVocabManager;
  v19 = SharedUsoVocabManager[1];
  *(_QWORD *)(a1 + 176) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    v22 = *(std::__shared_weak_count **)(a1 + 176);
    v42 = *(_QWORD *)(a1 + 168);
    v43 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
    }
  }
  else
  {
    v42 = v18;
    v43 = 0;
  }
  nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::MatchedSpansFeaturizer(a1 + 184, a4, &v42, a10);
  v25 = v43;
  if (v43)
  {
    v26 = (unint64_t *)&v43->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v41, a2);
  snlp::common::config::loadConfig((uint64_t)&__p, (uint64_t)a3, a10);
  itfm_inference_orchestrator::inference_engine::ITFMModelBuilder::ITFMModelBuilder((std::string *)(a1 + 768), (__int128 *)&v41, (uint64_t)&__p, a10);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)&__p);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  itfm_inference_orchestrator::inference_engine::ITFMModelBuilder::buildModel((std::__fs::filesystem::path *)(a1 + 768), (uint64_t *)&__p);
  *(_QWORD *)(a1 + 912) = __p.__r_.__value_.__r.__words[0];
  v28 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 16);
  std::allocate_shared[abi:ne180100]<itfm_inference_orchestrator::vocabulary::Vocabulary,std::allocator<itfm_inference_orchestrator::vocabulary::Vocabulary>,std::string const&,void>(&__p);
  v29 = *(std::__shared_weak_count **)(a1 + 176);
  v39[0] = *(_QWORD *)(a1 + 168);
  v39[1] = (uint64_t)v29;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 912) + 40))(*(_QWORD *)(a1 + 912));
  itfm_inference_orchestrator::context::ContextFeaturizer::ContextFeaturizer(a1 + 920, v28, &__p, v39, v32, a10);
  if (v29)
  {
    v33 = (unint64_t *)&v29->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v36 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  *(_QWORD *)(a1 + 1600) = 850045863;
  *(_QWORD *)(a1 + 1656) = 0;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::assertAssetVersionValid((itfm_inference_orchestrator::orchestration::ITFMOrchestrator *)a1);
  return a1;
}

{
  return itfm_inference_orchestrator::orchestration::ITFMOrchestrator::ITFMOrchestrator(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_1C224B8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  uint64_t v29;
  void **v30;
  std::mutex *v31;
  uint64_t v32;
  void **v33;
  void **v34;
  uint64_t v36;

  std::mutex::~mutex(v31);
  itfm_inference_orchestrator::context::ContextFeaturizer::~ContextFeaturizer(v30);
  v36 = *(_QWORD *)(v29 + 912);
  *(_QWORD *)(v29 + 912) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  itfm_inference_orchestrator::inference_engine::ITFMModelBuilder::~ITFMModelBuilder(v34);
  nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::~MatchedSpansFeaturizer(v33);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v29 + 168);
  MEMORY[0x1C3BB8620](a12);
  if (*(char *)(v29 + 47) < 0)
    operator delete(*a11);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v28);
  _Unwind_Resume(a1);
}

nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit *nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::ContactTypeSplit(nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit *a1, _OWORD **a2, unsigned int **a3)
{
  _QWORD *v6;

  v6 = std::string::basic_string[abi:ne180100]<0>(a1, "TreeManipulation_ContactTypeSplit");
  v6[3] = "contact_type_split";
  std::string::basic_string[abi:ne180100]<0>(v6 + 4, "contactType");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1 + 7, "emailType");
  *((_QWORD *)a1 + 10) = 0;
  *((_QWORD *)a1 + 11) = 0;
  *((_QWORD *)a1 + 12) = 0;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::IndexedToken*,nlv4_inference_orchestrator::orchestration::IndexedToken*>((_QWORD *)a1 + 10, *a2, a2[1], 0x8E38E38E38E38E39 * (a2[1] - *a2));
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getContactTypeMatchingSpans(a1, a3, (uint64_t)a1 + 104);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans((uint64_t)a1, a3, (uint64_t)a1 + 144);
  return a1;
}

void sub_1C224BAD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void **v4;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::~__hash_table(v5);
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 79) < 0)
    operator delete(*v4);
  if (*(char *)(v2 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getContactTypeMatchingSpans(nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit *this@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v11;
  _BYTE v12[12];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      if (nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::isContactTypeMatchingSpan(this, (const sirinluinternal::MatchingSpan *)v5))
      {
        v8 = v5[19];
        *(_QWORD *)v12 = v8;
        v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t *)a3, v8, v12);
        std::vector<sirinluinternal::MatchingSpan>::push_back[abi:ne180100](v9 + 3, (uint64_t)v5);
        ++v7;
      }
      v5 += 22;
    }
    while (v5 != v6);
  }
  v10 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    v11 = *((_QWORD *)this + 3);
    *(_DWORD *)v12 = 136315394;
    *(_QWORD *)&v12[4] = v11;
    v13 = 2048;
    v14 = v7;
    _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_DEBUG, "[%s] After filtering, we have %lu contact type matching spans", v12, 0x16u);
  }
}

void sub_1C224BC70(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  uint64_t v11;
  sirinluinternal *v12;
  unint64_t v13;
  sirinluinternal::MatchingSpan *v14;
  NSObject *v15;
  uint64_t v16;
  _BYTE v17[12];
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      if (nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::isPersonMatchingSpan((nlv4_inference_orchestrator::post_processing::tree_manipulations::utils *)v5, (const sirinluinternal::MatchingSpan *)a2))
      {
        v8 = v5[19];
        *(_QWORD *)v17 = v8;
        v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t *)a3, v8, v17);
        std::vector<sirinluinternal::MatchingSpan>::push_back[abi:ne180100](v9 + 3, (uint64_t)v5);
        ++v7;
      }
      v5 += 22;
    }
    while (v5 != v6);
    for (i = *(_QWORD **)(a3 + 16); i; i = (_QWORD *)*i)
    {
      v11 = i[3];
      v12 = (sirinluinternal *)i[4];
      v13 = 126 - 2 * __clz(0x2E8BA2E8BA2E8BA3 * (((uint64_t)v12 - v11) >> 3));
      if (v12 == (sirinluinternal *)v11)
        v14 = 0;
      else
        v14 = (sirinluinternal::MatchingSpan *)v13;
      std::__introsort<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*,false>(v11, v12, v14, 1);
    }
  }
  v15 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    v16 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)v17 = 136315394;
    *(_QWORD *)&v17[4] = v16;
    v18 = 2048;
    v19 = v7;
    _os_log_impl(&dword_1C2196000, v15, OS_LOG_TYPE_DEBUG, "[%s] After filtering, we have %lu person matching spans", v17, 0x16u);
  }
}

void sub_1C224BDF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::~__hash_table(uint64_t a1)
{
  char *v2;
  char *v3;
  void *v4;
  void **v6;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *(char **)v2;
      v6 = (void **)(v2 + 24);
      std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v6);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = a1 + 2;
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  v13 = (float)(unint64_t)(a1[3] + 1);
  v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = (int8x8_t)v17;
  else
    prime = (int8x8_t)v16;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = a1[1];
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (*(_QWORD *)&prime <= v25)
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = (void *)*a1;
      *a1 = 0;
      if (v34)
        operator delete(v34);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v19 = operator new(8 * *(_QWORD *)&prime);
  v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20)
    operator delete(v20);
  v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(_QWORD *)(*a1 + 8 * v21++) = 0;
  while (*(_QWORD *)&prime != v21);
  v22 = (_QWORD *)*v12;
  if (*v12)
  {
    v23 = v22[1];
    v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(_QWORD *)&prime)
        v23 %= *(_QWORD *)&prime;
    }
    else
    {
      v23 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*a1 + 8 * v23) = v12;
    v28 = (_QWORD *)*v22;
    if (*v22)
    {
      do
      {
        v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(_QWORD *)&prime)
            v29 %= *(_QWORD *)&prime;
        }
        else
        {
          v29 &= *(_QWORD *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(_QWORD *)(*a1 + 8 * v29))
          {
            *(_QWORD *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *v22 = *v28;
          *v28 = **(_QWORD **)(*a1 + 8 * v29);
          **(_QWORD **)(*a1 + 8 * v29) = v28;
          v28 = v22;
        }
        v29 = v23;
LABEL_56:
        v22 = v28;
        v28 = (_QWORD *)*v28;
        v23 = v29;
      }
      while (v28);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v30 = *a1;
  v31 = *(_QWORD **)(*a1 + 8 * v5);
  if (v31)
  {
    *i = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *i = *v12;
  *v12 = i;
  *(_QWORD *)(v30 + 8 * v5) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_1C224C254(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*,false>(uint64_t result, sirinluinternal *a2, sirinluinternal::MatchingSpan *a3, char a4)
{
  sirinluinternal::MatchingSpan *v5;
  sirinluinternal *v6;
  sirinluinternal *v7;
  sirinluinternal::MatchingSpan *v8;
  sirinluinternal::MatchingSpan *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  sirinluinternal *v13;
  uint64_t v14;
  sirinluinternal::MatchingSpan *v15;
  sirinluinternal::MatchingSpan *v16;
  unsigned int v17;
  sirinluinternal *v18;
  sirinluinternal *v19;
  sirinluinternal *v20;
  sirinluinternal::MatchingSpan *v21;
  unsigned int v22;
  sirinluinternal *v23;
  unsigned int v24;
  sirinluinternal *v25;
  sirinluinternal::MatchingSpan *v26;
  unsigned int v27;
  int v28;
  int v29;
  sirinluinternal::MatchingSpan *v30;
  BOOL v31;
  BOOL v32;
  sirinluinternal::MatchingSpan *v33;
  sirinluinternal::MatchingSpan *v34;
  unsigned int v35;
  sirinluinternal *v36;
  unsigned int v37;
  sirinluinternal::MatchingSpan *v38;
  unsigned int v39;
  sirinluinternal::MatchingSpan *v40;
  sirinluinternal *v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  sirinluinternal *v48;
  sirinluinternal::MatchingSpan *v49;
  sirinluinternal::MatchingSpan *v50;
  sirinluinternal::MatchingSpan *v51;
  sirinluinternal::MatchingSpan *v52;
  sirinluinternal *v53;
  uint64_t v54;
  sirinluinternal *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  uint64_t v65;
  _DWORD *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  _DWORD *v70;
  unsigned int v71;
  unsigned int v72;
  int64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  BOOL v82;
  uint64_t v83;
  unint64_t v84;
  _DWORD *v86;
  _DWORD *v87;
  sirinluinternal *v88;
  _BYTE v90[88];
  _BYTE v91[72];
  int v92;
  int v93;

  v5 = a3;
  v6 = (sirinluinternal *)result;
LABEL_2:
  v7 = a2;
  v8 = (sirinluinternal *)((char *)a2 - 88);
  v9 = v6;
  while (2)
  {
    v6 = v9;
    v10 = v7 - v9;
    v11 = 0x2E8BA2E8BA2E8BA3 * ((v7 - v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*((_DWORD *)a2 - 4) - *((_DWORD *)a2 - 3) > (*((_DWORD *)v6 + 18) - *((_DWORD *)v6 + 19)))
        {
          v48 = v6;
          v49 = (sirinluinternal *)((char *)a2 - 88);
          return sirinluinternal::swap(v48, v49, a3);
        }
        return result;
      case 3:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(v6, (sirinluinternal *)((char *)v6 + 88), v8);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(v6, (sirinluinternal *)((char *)v6 + 88), (sirinluinternal *)((char *)v6 + 176), v8);
      case 5:
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(v6, (sirinluinternal *)((char *)v6 + 88), (sirinluinternal *)((char *)v6 + 176), (sirinluinternal *)((char *)v6 + 264));
        if (*((_DWORD *)a2 - 4) - *((_DWORD *)a2 - 3) > (*((_DWORD *)v6 + 84) - *((_DWORD *)v6 + 85)))
        {
          result = sirinluinternal::swap((sirinluinternal *)((char *)v6 + 264), v8, v50);
          if (*((_DWORD *)v6 + 84) - *((_DWORD *)v6 + 85) > (*((_DWORD *)v6 + 62) - *((_DWORD *)v6 + 63)))
          {
            result = sirinluinternal::swap((sirinluinternal *)((char *)v6 + 176), (sirinluinternal *)((char *)v6 + 264), v51);
            if (*((_DWORD *)v6 + 62) - *((_DWORD *)v6 + 63) > (*((_DWORD *)v6 + 40) - *((_DWORD *)v6 + 41)))
            {
              result = sirinluinternal::swap((sirinluinternal *)((char *)v6 + 88), (sirinluinternal *)((char *)v6 + 176), v52);
              if (*((_DWORD *)v6 + 40) - *((_DWORD *)v6 + 41) > (*((_DWORD *)v6 + 18)
                                                                              - *((_DWORD *)v6 + 19)))
              {
                v48 = v6;
                v49 = (sirinluinternal *)((char *)v6 + 88);
                return sirinluinternal::swap(v48, v49, a3);
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 2111)
        {
          if ((a4 & 1) != 0)
          {
            if (v6 != v7)
            {
              v53 = (sirinluinternal *)((char *)v6 + 88);
              if ((sirinluinternal *)((char *)v6 + 88) != a2)
              {
                v54 = 0;
                v55 = v6;
                do
                {
                  v56 = *((_DWORD *)v55 + 40);
                  v57 = *((_DWORD *)v55 + 41);
                  v58 = *((_DWORD *)v55 + 18);
                  v59 = *((_DWORD *)v55 + 19);
                  v55 = v53;
                  if (v56 - v57 > (v58 - v59))
                  {
                    MEMORY[0x1C3BB8470](v91, v53);
                    v60 = v54;
                    do
                    {
                      sirinluinternal::MatchingSpan::operator=();
                      if (!v60)
                        break;
                      v61 = *(_DWORD *)((char *)v6 + v60 - 16) - *(_DWORD *)((char *)v6 + v60 - 12);
                      v60 -= 88;
                    }
                    while (v92 - v93 > v61);
                    sirinluinternal::MatchingSpan::operator=();
                    result = MEMORY[0x1C3BB8494](v91);
                  }
                  v53 = (sirinluinternal *)((char *)v55 + 88);
                  v54 += 88;
                }
                while ((sirinluinternal *)((char *)v55 + 88) != a2);
              }
            }
          }
          else if (v6 != v7)
          {
            v86 = (_DWORD *)((char *)v6 + 88);
            if ((sirinluinternal *)((char *)v6 + 88) != a2)
            {
              do
              {
                v87 = v86;
                if (*((_DWORD *)v6 + 40) - *((_DWORD *)v6 + 41) > (*((_DWORD *)v6 + 18)
                                                                                - *((_DWORD *)v6 + 19)))
                {
                  MEMORY[0x1C3BB8470](v91, v86);
                  do
                  {
                    v88 = v6;
                    sirinluinternal::MatchingSpan::operator=();
                    v6 = (sirinluinternal *)((char *)v6 - 88);
                  }
                  while (v92 - v93 > (*((_DWORD *)v88 - 4) - *((_DWORD *)v88 - 3)));
                  sirinluinternal::MatchingSpan::operator=();
                  result = MEMORY[0x1C3BB8494](v91);
                }
                v86 = v87 + 22;
                v6 = (sirinluinternal *)v87;
              }
              while (v87 + 22 != (_DWORD *)a2);
            }
          }
          return result;
        }
        if (!v5)
        {
          if (v6 != v7)
          {
            v62 = (unint64_t)(v11 - 2) >> 1;
            v63 = v62;
            do
            {
              v64 = v63;
              if (v62 >= v63)
              {
                v65 = (2 * v63) | 1;
                v66 = (_DWORD *)((char *)v6 + 88 * v65);
                if (2 * v63 + 2 < v11)
                {
                  v67 = *((_DWORD *)v6 + 22 * v65 + 18) - *((_DWORD *)v6 + 22 * v65 + 19);
                  v68 = v66[40] - v66[41];
                  v66 += 22 * (v67 > v68);
                  if (v67 > v68)
                    v65 = 2 * v63 + 2;
                }
                if (v66[18] - v66[19] <= (*((_DWORD *)v6 + 22 * v63 + 18)
                                                       - *((_DWORD *)v6 + 22 * v63 + 19)))
                {
                  MEMORY[0x1C3BB8470](v91, (char *)v6 + 88 * v63);
                  do
                  {
                    sirinluinternal::MatchingSpan::operator=();
                    if (v62 < v65)
                      break;
                    v69 = (2 * v65) | 1;
                    v70 = (_DWORD *)((char *)v6 + 88 * v69);
                    if (2 * v65 + 2 < v11)
                    {
                      v71 = *((_DWORD *)v6 + 22 * v69 + 18) - *((_DWORD *)v6 + 22 * v69 + 19);
                      v72 = v70[40] - v70[41];
                      v70 += 22 * (v71 > v72);
                      if (v71 > v72)
                        v69 = 2 * v65 + 2;
                    }
                    v65 = v69;
                  }
                  while (v70[18] - v70[19] <= (v92 - v93));
                  sirinluinternal::MatchingSpan::operator=();
                  MEMORY[0x1C3BB8494](v91);
                }
              }
              v63 = v64 - 1;
            }
            while (v64);
            v73 = v10 / 0x58uLL;
            do
            {
              MEMORY[0x1C3BB8470](v90, v6);
              v74 = 0;
              v75 = (char *)v6;
              do
              {
                v76 = v74 + 1;
                v77 = &v75[88 * v74 + 88];
                v78 = (2 * v74) | 1;
                v79 = 2 * v74 + 2;
                if (v79 < v73)
                {
                  v80 = *(_DWORD *)&v75[88 * v76 + 72] - *(_DWORD *)&v75[88 * v76 + 76];
                  v81 = *((_DWORD *)v77 + 40) - *((_DWORD *)v77 + 41);
                  v77 += 88 * (v80 > v81);
                  if (v80 > v81)
                    v78 = v79;
                }
                sirinluinternal::MatchingSpan::operator=();
                v75 = v77;
                v74 = v78;
              }
              while (v78 <= (uint64_t)((unint64_t)(v73 - 2) >> 1));
              v82 = v77 == (char *)a2 - 88;
              a2 = (sirinluinternal *)((char *)a2 - 88);
              if (v82)
              {
                sirinluinternal::MatchingSpan::operator=();
              }
              else
              {
                sirinluinternal::MatchingSpan::operator=();
                sirinluinternal::MatchingSpan::operator=();
                v83 = v77 - (char *)v6 + 88;
                if (v83 >= 89)
                {
                  v84 = (v83 / 0x58uLL - 2) >> 1;
                  if (*((_DWORD *)v6 + 22 * v84 + 18) - *((_DWORD *)v6 + 22 * v84 + 19) > (*((_DWORD *)v77 + 18) - *((_DWORD *)v77 + 19)))
                  {
                    MEMORY[0x1C3BB8470](v91, v77);
                    do
                    {
                      sirinluinternal::MatchingSpan::operator=();
                      if (!v84)
                        break;
                      v84 = (v84 - 1) >> 1;
                    }
                    while (*((_DWORD *)v6 + 22 * v84 + 18) - *((_DWORD *)v6 + 22 * v84 + 19) > (v92 - v93));
                    sirinluinternal::MatchingSpan::operator=();
                    MEMORY[0x1C3BB8494](v91);
                  }
                }
              }
              result = MEMORY[0x1C3BB8494](v90);
            }
            while (v73-- > 2);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (sirinluinternal *)((char *)v6 + 88 * ((unint64_t)v11 >> 1));
        if ((unint64_t)v10 < 0x2C01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(v13, v6, v8);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(v6, v13, v8);
          v14 = 88 * v12;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>((sirinluinternal *)((char *)v6 + 88), (sirinluinternal *)((char *)v6 + v14 - 88), (sirinluinternal *)((char *)a2 - 176));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>((sirinluinternal *)((char *)v6 + 176), (sirinluinternal *)((char *)v6 + v14 + 88), (sirinluinternal *)((char *)a2 - 264));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>((sirinluinternal *)((char *)v6 + v14 - 88), v13, (sirinluinternal *)((char *)v6 + v14 + 88));
          sirinluinternal::swap(v6, v13, v15);
        }
        v5 = (sirinluinternal::MatchingSpan *)((char *)v5 - 1);
        if ((a4 & 1) == 0
          && *((_DWORD *)v6 - 4) - *((_DWORD *)v6 - 3) <= (*((_DWORD *)v6 + 18) - *((_DWORD *)v6 + 19)))
        {
          MEMORY[0x1C3BB8470](v91, v6);
          v35 = v92 - v93;
          if (v92 - v93 <= (*((_DWORD *)v7 - 4) - *((_DWORD *)v7 - 3)))
          {
            v38 = (sirinluinternal *)((char *)v6 + 88);
            do
            {
              v9 = v38;
              if (v38 >= v7)
                break;
              v39 = *((_DWORD *)v38 + 18) - *((_DWORD *)v38 + 19);
              v38 = (sirinluinternal::MatchingSpan *)((char *)v38 + 88);
            }
            while (v35 <= v39);
          }
          else
          {
            v36 = v6;
            do
            {
              v9 = (sirinluinternal *)((char *)v36 + 88);
              v37 = *((_DWORD *)v36 + 40) - *((_DWORD *)v36 + 41);
              v36 = (sirinluinternal *)((char *)v36 + 88);
            }
            while (v35 <= v37);
          }
          v40 = v7;
          if (v9 < v7)
          {
            v41 = v7;
            do
            {
              v40 = (sirinluinternal *)((char *)v41 - 88);
              v42 = *((_DWORD *)v41 - 4) - *((_DWORD *)v41 - 3);
              v41 = (sirinluinternal *)((char *)v41 - 88);
            }
            while (v35 > v42);
          }
          while (v9 < v40)
          {
            sirinluinternal::swap(v9, v40, v34);
            v43 = v92 - v93;
            do
            {
              v44 = *((_DWORD *)v9 + 40);
              v45 = *((_DWORD *)v9 + 41);
              v9 = (sirinluinternal::MatchingSpan *)((char *)v9 + 88);
            }
            while (v43 <= v44 - v45);
            do
            {
              v46 = *((_DWORD *)v40 - 4);
              v47 = *((_DWORD *)v40 - 3);
              v40 = (sirinluinternal::MatchingSpan *)((char *)v40 - 88);
            }
            while (v43 > v46 - v47);
          }
          if ((sirinluinternal::MatchingSpan *)((char *)v9 - 88) != v6)
            sirinluinternal::MatchingSpan::operator=();
          sirinluinternal::MatchingSpan::operator=();
          result = MEMORY[0x1C3BB8494](v91);
          a4 = 0;
          continue;
        }
        MEMORY[0x1C3BB8470](v91, v6);
        v17 = v92 - v93;
        v18 = v6;
        do
        {
          v19 = v18;
          v18 = (sirinluinternal *)((char *)v18 + 88);
        }
        while (*((_DWORD *)v19 + 40) - *((_DWORD *)v19 + 41) > v17);
        v20 = v7;
        if (v19 == v6)
        {
          v23 = a2;
          while (v18 < v23)
          {
            v21 = (sirinluinternal *)((char *)v23 - 88);
            v24 = *((_DWORD *)v23 - 4) - *((_DWORD *)v23 - 3);
            v23 = (sirinluinternal *)((char *)v23 - 88);
            if (v24 > v17)
              goto LABEL_21;
          }
          v21 = v23;
        }
        else
        {
          do
          {
            v21 = (sirinluinternal *)((char *)v20 - 88);
            v22 = *((_DWORD *)v20 - 4) - *((_DWORD *)v20 - 3);
            v20 = (sirinluinternal *)((char *)v20 - 88);
          }
          while (v22 <= v17);
        }
LABEL_21:
        if (v18 < v21)
        {
          v25 = v18;
          v26 = v21;
          do
          {
            sirinluinternal::swap(v25, v26, v16);
            v27 = v92 - v93;
            do
            {
              v19 = v25;
              v25 = (sirinluinternal *)((char *)v25 + 88);
            }
            while (*((_DWORD *)v19 + 40) - *((_DWORD *)v19 + 41) > v27);
            do
            {
              v28 = *((_DWORD *)v26 - 4);
              v29 = *((_DWORD *)v26 - 3);
              v26 = (sirinluinternal::MatchingSpan *)((char *)v26 - 88);
            }
            while (v28 - v29 <= v27);
          }
          while (v25 < v26);
        }
        if (v19 != v6)
          sirinluinternal::MatchingSpan::operator=();
        sirinluinternal::MatchingSpan::operator=();
        MEMORY[0x1C3BB8494](v91);
        v31 = v18 >= v21;
        v7 = a2;
        if (!v31)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*,false>(v6, v19, v5, a4 & 1);
          a4 = 0;
          v9 = (sirinluinternal *)((char *)v19 + 88);
          continue;
        }
        v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(v6, v19, v30);
        v9 = (sirinluinternal *)((char *)v19 + 88);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>((sirinluinternal *)((char *)v19 + 88), a2, v33);
        if (!(_DWORD)result)
        {
          if (v32)
            continue;
          goto LABEL_33;
        }
        a2 = v19;
        if (!v32)
          goto LABEL_2;
        return result;
    }
  }
}

sirinluinternal *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(sirinluinternal *this, sirinluinternal *a2, sirinluinternal::MatchingSpan *a3)
{
  sirinluinternal *v5;
  unsigned int v6;
  unsigned int v7;
  sirinluinternal::MatchingSpan *v8;

  v5 = this;
  v6 = *((_DWORD *)a2 + 18) - *((_DWORD *)a2 + 19);
  v7 = *((_DWORD *)a3 + 18) - *((_DWORD *)a3 + 19);
  if (v6 > *((_DWORD *)this + 18) - *((_DWORD *)this + 19))
  {
    if (v7 <= v6)
    {
      this = (sirinluinternal *)sirinluinternal::swap(this, a2, a3);
      if (*((_DWORD *)a3 + 18) - *((_DWORD *)a3 + 19) <= (*((_DWORD *)a2 + 18) - *((_DWORD *)a2 + 19)))
        return this;
      this = a2;
    }
    v8 = a3;
    return (sirinluinternal *)sirinluinternal::swap(this, v8, a3);
  }
  if (v7 > v6)
  {
    this = (sirinluinternal *)sirinluinternal::swap(a2, a3, a3);
    if (*((_DWORD *)a2 + 18) - *((_DWORD *)a2 + 19) > (*((_DWORD *)v5 + 18) - *((_DWORD *)v5 + 19)))
    {
      this = v5;
      v8 = a2;
      return (sirinluinternal *)sirinluinternal::swap(this, v8, a3);
    }
  }
  return this;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(sirinluinternal *a1, sirinluinternal *a2, sirinluinternal::MatchingSpan *a3, sirinluinternal::MatchingSpan *a4)
{
  uint64_t result;
  sirinluinternal::MatchingSpan *v9;
  sirinluinternal::MatchingSpan *v10;
  sirinluinternal::MatchingSpan *v11;

  result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(a1, a2, a3);
  if (*((_DWORD *)a4 + 18) - *((_DWORD *)a4 + 19) > (*((_DWORD *)a3 + 18) - *((_DWORD *)a3 + 19)))
  {
    result = sirinluinternal::swap(a3, a4, v9);
    if (*((_DWORD *)a3 + 18) - *((_DWORD *)a3 + 19) > (*((_DWORD *)a2 + 18) - *((_DWORD *)a2 + 19)))
    {
      result = sirinluinternal::swap(a2, a3, v10);
      if (*((_DWORD *)a2 + 18) - *((_DWORD *)a2 + 19) > (*((_DWORD *)a1 + 18) - *((_DWORD *)a1 + 19)))
        return sirinluinternal::swap(a1, a2, v11);
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(sirinluinternal *this, sirinluinternal *a2, sirinluinternal::MatchingSpan *a3)
{
  _BOOL8 v5;
  sirinluinternal *v6;
  sirinluinternal *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  sirinluinternal::MatchingSpan *v12;
  sirinluinternal::MatchingSpan *v13;
  sirinluinternal::MatchingSpan *v14;
  sirinluinternal::MatchingSpan *v15;
  _BYTE v17[72];
  int v18;
  int v19;

  v5 = 1;
  switch(0x2E8BA2E8BA2E8BA3 * ((a2 - this) >> 3))
  {
    case 0:
    case 1:
      return v5;
    case 2:
      if (*((_DWORD *)a2 - 4) - *((_DWORD *)a2 - 3) > (*((_DWORD *)this + 18) - *((_DWORD *)this + 19)))
        sirinluinternal::swap(this, (sirinluinternal *)((char *)a2 - 88), a3);
      return v5;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(this, (sirinluinternal *)((char *)this + 88), (sirinluinternal *)((char *)a2 - 88));
      return v5;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(this, (sirinluinternal *)((char *)this + 88), (sirinluinternal *)((char *)this + 176), (sirinluinternal *)((char *)a2 - 88));
      return v5;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(this, (sirinluinternal *)((char *)this + 88), (sirinluinternal *)((char *)this + 176), (sirinluinternal *)((char *)this + 264));
      if (*((_DWORD *)a2 - 4) - *((_DWORD *)a2 - 3) > (*((_DWORD *)this + 84) - *((_DWORD *)this + 85)))
      {
        sirinluinternal::swap((sirinluinternal *)((char *)this + 264), (sirinluinternal *)((char *)a2 - 88), v12);
        if (*((_DWORD *)this + 84) - *((_DWORD *)this + 85) > (*((_DWORD *)this + 62)
                                                                            - *((_DWORD *)this + 63)))
        {
          sirinluinternal::swap((sirinluinternal *)((char *)this + 176), (sirinluinternal *)((char *)this + 264), v13);
          if (*((_DWORD *)this + 62) - *((_DWORD *)this + 63) > (*((_DWORD *)this + 40)
                                                                              - *((_DWORD *)this + 41)))
          {
            sirinluinternal::swap((sirinluinternal *)((char *)this + 88), (sirinluinternal *)((char *)this + 176), v14);
            if (*((_DWORD *)this + 40) - *((_DWORD *)this + 41) > (*((_DWORD *)this + 18)
                                                                                - *((_DWORD *)this + 19)))
              sirinluinternal::swap(this, (sirinluinternal *)((char *)this + 88), v15);
          }
        }
      }
      return 1;
    default:
      v6 = (sirinluinternal *)((char *)this + 176);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getPersonMatchingSpans(std::vector<sirinluinternal::MatchingSpan> const&)::$_0 &,sirinluinternal::MatchingSpan*>(this, (sirinluinternal *)((char *)this + 88), (sirinluinternal *)((char *)this + 176));
      v7 = (sirinluinternal *)((char *)this + 264);
      if ((sirinluinternal *)((char *)this + 264) == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (*((_DWORD *)v7 + 18) - *((_DWORD *)v7 + 19) <= (*((_DWORD *)v6 + 18) - *((_DWORD *)v6 + 19)))
  {
LABEL_13:
    v6 = v7;
    v8 += 88;
    v7 = (sirinluinternal *)((char *)v7 + 88);
    if (v7 == a2)
      return 1;
  }
  MEMORY[0x1C3BB8470](v17, v7);
  v10 = v8;
  do
  {
    sirinluinternal::MatchingSpan::operator=();
    if (v10 == -176)
      break;
    v11 = *(_DWORD *)((char *)this + v10 + 160) - *(_DWORD *)((char *)this + v10 + 164);
    v10 -= 88;
  }
  while (v18 - v19 > v11);
  sirinluinternal::MatchingSpan::operator=();
  if (++v9 != 8)
  {
    MEMORY[0x1C3BB8494](v17);
    goto LABEL_13;
  }
  v5 = (sirinluinternal *)((char *)v7 + 88) == a2;
  MEMORY[0x1C3BB8494](v17);
  return v5;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  void **v3;

  if (a1)
  {
    v3 = __p + 3;
    std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::isContactTypeMatchingSpan(nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit *this, const sirinluinternal::MatchingSpan *a2)
{
  const void **v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  BOOL v15;
  _DWORD *v16;
  _DWORD *v17;
  const void **v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  int v27;
  _BOOL4 v28;
  _DWORD *v29;
  _DWORD *v30;
  unsigned int v32;

  v4 = (const void **)((char *)this + 32);
  v5 = *((unsigned __int8 *)this + 55);
  if (*((char *)this + 55) < 0)
  {
    v6 = (char *)*((_QWORD *)this + 4);
    v7 = *((_QWORD *)this + 5);
  }
  else
  {
    v6 = (char *)this + 32;
    v7 = v5;
  }
  v8 = nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::doesMatchingSpanHaveLabelAndMatcher(v6, v7, 2, a2);
  v9 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
  if ((v5 & 0x80u) == 0)
    v10 = v5;
  else
    v10 = *((_QWORD *)this + 5);
  v11 = (char)v9[23];
  if (v11 >= 0)
    v12 = v9[23];
  else
    v12 = *((_QWORD *)v9 + 1);
  if (v10 != v12)
    goto LABEL_20;
  if (v11 >= 0)
    v13 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
  else
    v13 = *(unsigned __int8 **)v9;
  if ((v5 & 0x80) != 0)
  {
    if (!memcmp(*v4, v13, *((_QWORD *)this + 5)))
      goto LABEL_21;
LABEL_20:
    v14 = v8;
    v15 = 0;
    goto LABEL_30;
  }
  if ((_DWORD)v5)
  {
    while (*(unsigned __int8 *)v4 == *v13)
    {
      v4 = (const void **)((char *)v4 + 1);
      ++v13;
      if (!--v5)
        goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_21:
  v16 = (_DWORD *)*((_QWORD *)a2 + 1);
  v17 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v16 != v17)
  {
    while (*v16 != 3 && *v16 != 8)
    {
      if (++v16 == v17)
      {
        v14 = v8;
        v16 = (_DWORD *)*((_QWORD *)a2 + 2);
        goto LABEL_29;
      }
    }
  }
  v14 = v8;
LABEL_29:
  v15 = v17 != v16;
LABEL_30:
  v19 = (const void **)((char *)this + 56);
  v20 = *((unsigned __int8 *)this + 79);
  if (*((char *)this + 79) < 0)
  {
    v21 = (char *)*((_QWORD *)this + 7);
    v22 = *((_QWORD *)this + 8);
  }
  else
  {
    v21 = (char *)this + 56;
    v22 = *((unsigned __int8 *)this + 79);
  }
  v23 = nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::doesMatchingSpanHaveLabelAndMatcher(v21, v22, 2, a2);
  if ((v20 & 0x80u) == 0)
    v24 = v20;
  else
    v24 = *((_QWORD *)this + 8);
  if (v24 != v12)
    goto LABEL_46;
  if (v11 >= 0)
    v25 = v9;
  else
    v25 = *(unsigned __int8 **)v9;
  if ((v20 & 0x80) != 0)
  {
    v26 = v23;
    v27 = memcmp(*v19, v25, *((_QWORD *)this + 8));
    v23 = v26;
    if (!v27)
      goto LABEL_47;
LABEL_46:
    v28 = 0;
    goto LABEL_55;
  }
  if ((_DWORD)v20)
  {
    while (*(unsigned __int8 *)v19 == *v25)
    {
      v19 = (const void **)((char *)v19 + 1);
      ++v25;
      if (!--v20)
        goto LABEL_47;
    }
    goto LABEL_46;
  }
LABEL_47:
  v29 = (_DWORD *)*((_QWORD *)a2 + 1);
  v30 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v29 != v30)
  {
    while (*v29 != 3 && *v29 != 8)
    {
      if (++v29 == v30)
      {
        v29 = (_DWORD *)*((_QWORD *)a2 + 2);
        break;
      }
    }
  }
  v28 = v30 != v29;
LABEL_55:
  v32 = v23 | v28;
  if (((v14 | v15) & 1) != 0)
    return 1;
  else
    return v32;
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::getDescription(nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::splitContactTypes(nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  nlv4_inference_orchestrator::post_processing::tree_manipulations::utils *v12;
  unint64_t v13;
  nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **v21;
  unint64_t v22;
  NSObject *v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  void **v30;
  NSObject *v31;
  const nlv4_inference_orchestrator::trees::TreeNode *v32;
  const nlv4_inference_orchestrator::trees::TreeNode *v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v37;
  char v38;
  const nlv4_inference_orchestrator::trees::TreeNode *v39;
  const nlv4_inference_orchestrator::trees::TreeNode *v40;
  uint64_t v41;
  uint8_t buf[16];
  __int128 v43;
  __int128 v44;
  _BYTE v45[12];
  __int16 v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = *((_QWORD *)this + 3);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl(&dword_1C2196000, v4, OS_LOG_TYPE_DEBUG, "[%s] Splitting common_Person nodes in-place", buf, 0xCu);
  }
  v6 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v7 = *((_QWORD *)this + 3);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v7;
    _os_log_impl(&dword_1C2196000, v6, OS_LOG_TYPE_DEBUG, "[%s] Iterating through all tree nodes", buf, 0xCu);
  }
  v43 = 0u;
  v44 = 0u;
  *(_OWORD *)buf = 0u;
  v39 = a2;
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(buf, &v39);
  v8 = *((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    LOBYTE(v9) = 0;
    while (1)
    {
      v38 = v9;
      v10 = v8 - 1;
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&buf[8] + (((unint64_t)(v44 + v10) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v44 + v10) & 0x1FF));
      *((_QWORD *)&v44 + 1) = v10;
      std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::__maybe_remove_back_spare[abi:ne180100](buf);
      v37 = *((_QWORD *)this + 3);
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v12 = *(nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **)(v11 + 88);
      if (v12 == *(nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **)(v11 + 96))
      {
        v14 = 0;
      }
      else
      {
        v13 = 0;
        v14 = 0;
        v15 = 0;
        do
        {
          if (nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::splitCommonPersonNodes(this, (unint64_t *)&v39, v12))
          {
            if ((unint64_t)v14 >= v13)
            {
              v16 = ((char *)v14 - (char *)v15) >> 3;
              v17 = v16 + 1;
              if ((unint64_t)(v16 + 1) >> 61)
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(v13 - (_QWORD)v15) >> 2 > v17)
                v17 = (uint64_t)(v13 - (_QWORD)v15) >> 2;
              if (v13 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
                v18 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v18 = v17;
              if (v18)
                v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v18);
              else
                v19 = 0;
              v20 = (unint64_t *)(v18 + 8 * v16);
              *v20 = (unint64_t)v12;
              v21 = (nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **)(v20 + 1);
              if (v14 != (nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **)v15)
              {
                do
                {
                  v22 = (unint64_t)*--v14;
                  *--v20 = v22;
                }
                while (v14 != (nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **)v15);
                v14 = (nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **)v15;
              }
              v15 = v20;
              v13 = v18 + 8 * v19;
              if (v14)
                operator delete(v14);
              v14 = v21;
            }
            else
            {
              *v14++ = v12;
            }
          }
          v12 = (nlv4_inference_orchestrator::post_processing::tree_manipulations::utils *)((char *)v12 + 144);
        }
        while (v12 != *(nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **)(v11 + 96));
        if (v15 != (unint64_t *)v14)
        {
          v23 = SNLPOSLoggerForCategory(1);
          v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG);
          v25 = (char *)v14 - (char *)v15;
          if (v24)
          {
            *(_DWORD *)v45 = 136315394;
            v26 = v25 >> 3;
            *(_QWORD *)&v45[4] = v37;
            v46 = 2048;
            v47 = v25 >> 3;
            _os_log_impl(&dword_1C2196000, v23, OS_LOG_TYPE_DEBUG, "[%s] Deleting %lu nodes", v45, 0x16u);
          }
          else
          {
            v26 = v25 >> 3;
          }
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>,false>(v14, (unint64_t *)v14, (uint64_t)v15, v15, 126 - 2 * __clz(v26), 1);
          v28 = (uint64_t *)v15;
          do
          {
            v29 = *v28++;
            v30 = (void **)std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *>((__int128 *)(v29 + 144), *(__int128 **)(v11 + 96), v29);
            std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__base_destruct_at_end[abi:ne180100](v11 + 88, v30);
          }
          while (v28 != (uint64_t *)v14);
          v27 = 1;
          v14 = (nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **)v15;
          goto LABEL_37;
        }
      }
      v27 = 0;
LABEL_37:
      if (v39 != v40)
      {
        v31 = SNLPOSLoggerForCategory(1);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v45 = 136315394;
          *(_QWORD *)&v45[4] = v37;
          v46 = 2048;
          v47 = 0x8E38E38E38E38E39 * ((v40 - v39) >> 4);
          _os_log_impl(&dword_1C2196000, v31, OS_LOG_TYPE_DEBUG, "[%s] Inserting %lu spawned nodes", v45, 0x16u);
        }
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::reserve((uint64_t *)(v11 + 88), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v11 + 96) - *(_QWORD *)(v11 + 88)) >> 4)- 0x71C71C71C71C71C7 * ((v40 - v39) >> 4));
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*>,std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*>,std::back_insert_iterator<std::vector<nlv4_inference_orchestrator::trees::TreeNode>>,0>(v39, v40, (uint64_t *)(v11 + 88));
        v27 = 1;
      }
      *(_QWORD *)v45 = &v39;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)v45);
      if (v14)
        operator delete(v14);
      if (v38)
        v9 = 1;
      else
        v9 = v27;
      v32 = *(const nlv4_inference_orchestrator::trees::TreeNode **)(v11 + 88);
      v33 = *(const nlv4_inference_orchestrator::trees::TreeNode **)(v11 + 96);
      while (v32 != v33)
      {
        v39 = v32;
        std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(buf, &v39);
        v32 = (const nlv4_inference_orchestrator::trees::TreeNode *)((char *)v32 + 144);
      }
      v8 = *((_QWORD *)&v44 + 1);
      if (!*((_QWORD *)&v44 + 1))
        goto LABEL_52;
    }
  }
  v9 = 0;
LABEL_52:
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)buf);
  v34 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
  {
    v35 = *((_QWORD *)this + 3);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v35;
    _os_log_impl(&dword_1C2196000, v34, OS_LOG_TYPE_DEBUG, "[%s] Finished iterating through all tree nodes", buf, 0xCu);
  }
  return v9;
}

void sub_1C224D67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::splitCommonPersonNodes(nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit *a1, unint64_t *a2, nlv4_inference_orchestrator::post_processing::tree_manipulations::utils *this)
{
  int v6;
  _BOOL8 v7;
  NSObject *v8;
  _BOOL4 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::string v21[6];
  unsigned __int8 v22;
  __int128 buf;
  uint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::isCommonPersonNode(this, (const nlv4_inference_orchestrator::trees::TreeNode *)a2))return 0;
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::handleCommonPersonSubtree(a1, this, v21);
  v6 = v22;
  v7 = v22 != 0;
  v8 = SNLPOSLoggerForCategory(1);
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    if (v9)
    {
      v10 = *((_QWORD *)a1 + 3);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v10;
      _os_log_impl(&dword_1C2196000, v8, OS_LOG_TYPE_DEBUG, "[%s] Successfully split the common_Person node into name/contact type", (uint8_t *)&buf, 0xCu);
    }
    if (!v22)
      std::__throw_bad_optional_access[abi:ne180100]();
    v11 = a2[2];
    v12 = a2[1];
    if (v12 >= v11)
    {
      v15 = 0x8E38E38E38E38E39 * ((uint64_t)(v12 - *a2) >> 4);
      if (v15 + 1 > 0x1C71C71C71C71C7)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v16 = 0x8E38E38E38E38E39 * ((uint64_t)(v11 - *a2) >> 4);
      v17 = 2 * v16;
      if (2 * v16 <= v15 + 1)
        v17 = v15 + 1;
      if (v16 >= 0xE38E38E38E38E3)
        v18 = 0x1C71C71C71C71C7;
      else
        v18 = v17;
      v26 = a2 + 2;
      if (v18)
        v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v18);
      else
        v19 = 0;
      *(_QWORD *)&buf = v18;
      *((_QWORD *)&buf + 1) = v18 + 144 * v15;
      v24 = *((_QWORD *)&buf + 1);
      v25 = v18 + 144 * v19;
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(*((std::string **)&buf + 1), (const nlv4_inference_orchestrator::trees::TreeNode *)v21);
      v24 += 144;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer((uint64_t *)a2, &buf);
      v13 = a2[1];
      std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&buf);
    }
    else
    {
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode((std::string *)a2[1], (const nlv4_inference_orchestrator::trees::TreeNode *)v21);
      v13 = v12 + 144;
      a2[1] = v13;
    }
    a2[1] = v13;
  }
  else if (v9)
  {
    v14 = *((_QWORD *)a1 + 3);
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v14;
    _os_log_impl(&dword_1C2196000, v8, OS_LOG_TYPE_DEBUG, "[%s] Could not split this common_Person node", (uint8_t *)&buf, 0xCu);
  }
  std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v21);
  return v7;
}

void sub_1C224D918(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer(v2 - 112);
  std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>,false>(_QWORD *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, uint64_t a5, char a6)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  char *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t *v44;
  BOOL v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  unint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  char *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;

  while (2)
  {
    v87 = a1;
    v10 = (uint64_t)a1;
    v11 = (char *)a2;
LABEL_2:
    v12 = v11 - (char *)a4;
    v13 = (v11 - (char *)a4) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v43 = *((_QWORD *)v11 - 1);
        if (*a4 < v43)
        {
          *((_QWORD *)v11 - 1) = *a4;
          *a4 = v43;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(v10, (uint64_t)v11, (uint64_t)(v11 - 8), (uint64_t)(v11 - 8), a3, (uint64_t)(a4 + 1));
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(v10, (uint64_t)v11, (uint64_t)(v11 - 8), (uint64_t)(v11 - 8), (uint64_t)(v11 - 16), (uint64_t)(v11 - 16), a3, (uint64_t)(a4 + 1));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(v10, (uint64_t)v11, (uint64_t)(v11 - 8), (uint64_t)(v11 - 8), (uint64_t)(v11 - 16), (uint64_t)(v11 - 16), (uint64_t)(v11 - 24), (uint64_t)(v11 - 24), a3, (uint64_t)(a4 + 1));
        return;
      default:
        if (v12 > 191)
        {
          if (!a5)
          {
            if (v11 != (char *)a4)
            {
              v56 = (v13 - 2) >> 1;
              v57 = v56;
              do
              {
                v58 = v57;
                if (v56 >= (8 * v57) >> 3)
                {
                  v59 = (8 * v57) >> 2;
                  v60 = v59 | 1;
                  v61 = &v11[-8 * (v59 | 1)];
                  v62 = v59 + 2;
                  if (v62 < (uint64_t)v13 && *((_QWORD *)v61 - 1) < *((_QWORD *)v61 - 2))
                  {
                    v61 -= 8;
                    v60 = v62;
                  }
                  v63 = &v11[-8 * v58];
                  v64 = *((_QWORD *)v61 - 1);
                  v65 = *((_QWORD *)v63 - 1);
                  if (v64 >= v65)
                  {
                    do
                    {
                      *((_QWORD *)v63 - 1) = v64;
                      v63 = v61;
                      if (v56 < v60)
                        break;
                      v66 = (2 * v60) | 1;
                      v61 = &v11[-8 * v66];
                      v67 = 2 * v60 + 2;
                      if (v67 < (uint64_t)v13 && *((_QWORD *)v61 - 1) < *((_QWORD *)v61 - 2))
                      {
                        v61 -= 8;
                        v66 = v67;
                      }
                      v64 = *((_QWORD *)v61 - 1);
                      v60 = v66;
                    }
                    while (v64 >= v65);
                    *((_QWORD *)v63 - 1) = v65;
                  }
                }
                v57 = v58 - 1;
              }
              while (v58);
              v68 = (unint64_t)v12 >> 3;
              do
              {
                v69 = 0;
                v70 = *((_QWORD *)v11 - 1);
                v71 = v11;
                do
                {
                  v72 = (unint64_t *)&v71[8 * ~v69];
                  v73 = (2 * v69) | 1;
                  v74 = 2 * v69 + 2;
                  if (v74 < v68 && *(v72 - 1) < *(v72 - 2))
                  {
                    --v72;
                    v73 = v74;
                  }
                  *((_QWORD *)v71 - 1) = *(v72 - 1);
                  v71 = (char *)v72;
                  v69 = v73;
                }
                while (v73 <= (uint64_t)((unint64_t)(v68 - 2) >> 1));
                v75 = v72 - 1;
                if (v72 == a4 + 1)
                {
                  *v75 = v70;
                }
                else
                {
                  *v75 = *a4;
                  *a4 = v70;
                  if (v11 - (char *)v75 >= 9)
                  {
                    v76 = (((unint64_t)(v11 - (char *)v75) >> 3) - 2) >> 1;
                    v77 = (unint64_t *)&v11[-8 * v76];
                    v78 = *(v77 - 1);
                    v79 = *v75;
                    if (v78 < v79)
                    {
                      do
                      {
                        *(v72 - 1) = v78;
                        v72 = v77;
                        if (!v76)
                          break;
                        v76 = (v76 - 1) >> 1;
                        v77 = (unint64_t *)&v11[-8 * v76];
                        v78 = *(v77 - 1);
                      }
                      while (v78 < v79);
                      *(v72 - 1) = v79;
                    }
                  }
                }
                ++a4;
              }
              while (v68-- > 2);
            }
            return;
          }
          v14 = v13 >> 1;
          v15 = (uint64_t)&v11[-8 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>((uint64_t)&v11[-8 * (v13 >> 1)], (uint64_t)&v11[-8 * (v13 >> 1)], v10, (uint64_t)v11, (uint64_t)(a4 + 1), (uint64_t)(a4 + 1));
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(v10, (uint64_t)v11, (uint64_t)&v11[-8 * (v13 >> 1)], (uint64_t)&v11[-8 * (v13 >> 1)], (uint64_t)(a4 + 1), (uint64_t)(a4 + 1));
            v16 = v10;
            v17 = (uint64_t)&v11[8 * (1 - v14)];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>((uint64_t)(v11 - 8), (uint64_t)(v11 - 8), v17, v17, (uint64_t)(a4 + 2), (uint64_t)(a4 + 2));
            v18 = (uint64_t)&v11[8 * ~v14];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>((uint64_t)(v11 - 16), (uint64_t)(v11 - 16), v18, v18, (uint64_t)(a4 + 3), (uint64_t)(a4 + 3));
            v19 = v17;
            v20 = v17;
            v10 = v16;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(v19, v20, v15, v15, v18, v18);
            v21 = *((_QWORD *)v11 - 1);
            *((_QWORD *)v11 - 1) = *(_QWORD *)(v15 - 8);
            *(_QWORD *)(v15 - 8) = v21;
          }
          --a5;
          v22 = (unint64_t *)(v11 - 8);
          if ((a6 & 1) != 0)
          {
            v23 = *v22;
LABEL_28:
            v33 = v11;
            do
            {
              v34 = v33;
              v33 -= 8;
            }
            while (*((_QWORD *)v34 - 2) < v23);
            v35 = a4;
            if (v34 == v11)
            {
              v35 = a4;
              do
              {
                if (v35 >= (unint64_t *)v33)
                  break;
                v37 = *v35++;
              }
              while (v37 >= v23);
            }
            else
            {
              do
                v36 = *v35++;
              while (v36 >= v23);
            }
            a2 = (unint64_t *)v33;
            if (v35 < (unint64_t *)v33)
            {
              v38 = v35;
              do
              {
                v39 = *(a2 - 1);
                *(a2 - 1) = *(v38 - 1);
                *(v38 - 1) = v39;
                do
                {
                  v40 = *(a2 - 2);
                  --a2;
                }
                while (v40 < v23);
                do
                  v41 = *v38++;
                while (v41 >= v23);
              }
              while (v38 < a2);
            }
            if (a2 + 1 != (unint64_t *)v11)
              *v22 = *a2;
            *a2 = v23;
            if (v35 >= (unint64_t *)v33)
            {
              v42 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(v10, (uint64_t)v11, (uint64_t)(a2 + 1), a2 + 1);
              if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>((uint64_t)a2, (uint64_t)a2, a3, a4))
              {
                a3 = (uint64_t)(a2 + 1);
                a4 = a2 + 1;
                a2 = (unint64_t *)v11;
                a1 = v87;
                if ((v42 & 1) == 0)
                  continue;
                return;
              }
              a1 = a2 + 1;
              if ((v42 & 1) != 0)
                continue;
            }
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>,false>(v10, v11, a2 + 1, a2 + 1, a5, a6 & 1);
            a6 = 0;
            a1 = a2 + 1;
            continue;
          }
          v23 = *((_QWORD *)v11 - 1);
          if (*(_QWORD *)v11 < v23)
            goto LABEL_28;
          v24 = (unint64_t *)(v11 - 8);
          if (*a4 <= v23)
          {
            do
            {
              v26 = v24;
              if (v24 <= a4)
                break;
              --v24;
            }
            while (*(v26 - 1) <= v23);
          }
          else
          {
            v25 = v11;
            do
            {
              v26 = (unint64_t *)(v25 - 8);
              v27 = *((_QWORD *)v25 - 2);
              v25 -= 8;
            }
            while (v27 <= v23);
          }
          v28 = a4;
          if (v26 > a4)
          {
            v28 = a4;
            do
              v29 = *v28++;
            while (v29 > v23);
          }
          while (v28 < v26)
          {
            v30 = *(v26 - 1);
            *(v26 - 1) = *(v28 - 1);
            *(v28 - 1) = v30;
            do
            {
              v31 = *(v26 - 2);
              --v26;
            }
            while (v31 <= v23);
            do
              v32 = *v28++;
            while (v32 > v23);
          }
          if (v26 + 1 != (unint64_t *)v11)
            *v22 = *v26;
          a6 = 0;
          *v26 = v23;
          v11 = (char *)v26;
          goto LABEL_2;
        }
        v44 = (unint64_t *)(v11 - 8);
        v46 = v11 == (char *)a4 || v44 == a4;
        if ((a6 & 1) != 0)
        {
          if (!v46)
          {
            v47 = 0;
            v48 = (unint64_t *)(v11 - 8);
            do
            {
              v50 = *--v48;
              v49 = v50;
              v51 = *v44;
              if (v50 < v51)
              {
                v52 = v47;
                while (1)
                {
                  v53 = v52;
                  v54 = &v11[v52];
                  *((_QWORD *)v54 - 2) = v51;
                  if (!v53)
                    break;
                  v51 = *(_QWORD *)&v11[v53];
                  v52 = v53 + 8;
                  if (v51 <= v49)
                  {
                    v55 = &v11[v53 - 8];
                    goto LABEL_71;
                  }
                }
                v55 = v54 - 8;
LABEL_71:
                *(_QWORD *)v55 = v49;
              }
              v47 -= 8;
              v44 = v48;
            }
            while (v48 != a4);
          }
        }
        else if (!v46)
        {
          v81 = v11 - 16;
          v82 = (unint64_t *)(v11 - 8);
          do
          {
            v84 = *--v82;
            v83 = v84;
            v85 = *v44;
            if (v84 < v85)
            {
              v86 = v81;
              do
              {
                *v86 = v85;
                v85 = v86[2];
                ++v86;
              }
              while (v85 > v83);
              *v86 = v83;
            }
            v81 -= 8;
            v44 = v82;
          }
          while (v82 != a4);
        }
        return;
    }
  }
}

uint64_t *std::vector<nlv4_inference_orchestrator::trees::TreeNode>::reserve(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0x8E38E38E38E38E39 * ((result[2] - *result) >> 4) < a2)
  {
    if (a2 >= 0x1C71C71C71C71C8)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 144 * v4;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

const nlv4_inference_orchestrator::trees::TreeNode *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*>,std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*>,std::back_insert_iterator<std::vector<nlv4_inference_orchestrator::trees::TreeNode>>,0>(const nlv4_inference_orchestrator::trees::TreeNode *result, const nlv4_inference_orchestrator::trees::TreeNode *a2, uint64_t *a3)
{
  const nlv4_inference_orchestrator::trees::TreeNode *v5;
  _QWORD *v6;
  std::string *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::string *v13;
  std::string *v14;
  unint64_t v15;
  _QWORD *v16;

  if (result != a2)
  {
    v5 = result;
    v6 = a3 + 2;
    v7 = (std::string *)a3[1];
    do
    {
      if ((unint64_t)v7 >= *v6)
      {
        v8 = 0x8E38E38E38E38E39 * (((uint64_t)v7 - *a3) >> 4);
        v9 = v8 + 1;
        if (v8 + 1 > 0x1C71C71C71C71C7)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        if (0x1C71C71C71C71C72 * ((*v6 - *a3) >> 4) > v9)
          v9 = 0x1C71C71C71C71C72 * ((*v6 - *a3) >> 4);
        if (0x8E38E38E38E38E39 * ((*v6 - *a3) >> 4) >= 0xE38E38E38E38E3)
          v10 = 0x1C71C71C71C71C7;
        else
          v10 = v9;
        v16 = v6;
        if (v10)
          v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v10);
        else
          v11 = 0;
        v12 = v10;
        v13 = (std::string *)(v10 + 144 * v8);
        v14 = v13;
        v15 = v10 + 144 * v11;
        nlv4_inference_orchestrator::trees::TreeNode::TreeNode(v13, v5);
        v14 += 6;
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer(a3, &v12);
        v7 = (std::string *)a3[1];
        result = (const nlv4_inference_orchestrator::trees::TreeNode *)std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&v12);
      }
      else
      {
        result = (const nlv4_inference_orchestrator::trees::TreeNode *)nlv4_inference_orchestrator::trees::TreeNode::TreeNode(v7, v5);
        v7 += 6;
        a3[1] = (uint64_t)v7;
      }
      a3[1] = (uint64_t)v7;
      v5 = (const nlv4_inference_orchestrator::trees::TreeNode *)((char *)v5 + 144);
    }
    while (v5 != a2);
  }
  return result;
}

void sub_1C224E224(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 144;
      v6 = *(_OWORD *)(v3 - 144);
      *(_QWORD *)(v4 - 128) = *(_QWORD *)(v3 - 128);
      *(_OWORD *)(v4 - 144) = v6;
      *(_QWORD *)(v3 - 136) = 0;
      *(_QWORD *)(v3 - 128) = 0;
      *(_QWORD *)(v3 - 144) = 0;
      v7 = *(_OWORD *)(v3 - 120);
      *(_QWORD *)(v4 - 104) = *(_QWORD *)(v3 - 104);
      *(_OWORD *)(v4 - 120) = v7;
      *(_QWORD *)(v3 - 112) = 0;
      *(_QWORD *)(v3 - 104) = 0;
      *(_QWORD *)(v3 - 120) = 0;
      v8 = *(_OWORD *)(v3 - 96);
      *(_QWORD *)(v4 - 80) = *(_QWORD *)(v3 - 80);
      *(_OWORD *)(v4 - 96) = v8;
      *(_QWORD *)(v3 - 88) = 0;
      *(_QWORD *)(v3 - 80) = 0;
      *(_QWORD *)(v3 - 96) = 0;
      *(_OWORD *)(v4 - 72) = *(_OWORD *)(v3 - 72);
      *(_QWORD *)(v4 - 48) = 0;
      *(_QWORD *)(v4 - 40) = 0;
      *(_QWORD *)(v4 - 56) = 0;
      *(_OWORD *)(v4 - 56) = *(_OWORD *)(v3 - 56);
      *(_QWORD *)(v4 - 40) = *(_QWORD *)(v3 - 40);
      *(_QWORD *)(v3 - 56) = 0;
      *(_QWORD *)(v3 - 48) = 0;
      *(_QWORD *)(v3 - 40) = 0;
      v9 = *(_OWORD *)(v3 - 16);
      *(_OWORD *)(v4 - 32) = *(_OWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 16) = v9;
      v4 -= 144;
      v3 -= 144;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v10 = *result;
  *result = v5;
  a2[1] = v10;
  v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 144;
    std::allocator<nlv4_inference_orchestrator::trees::TreeNode>::destroy[abi:ne180100](i - 144);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::allocator<nlv4_inference_orchestrator::trees::TreeNode>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 88);
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v6 = *(_QWORD *)(a4 - 8);
  v7 = *(_QWORD *)(a2 - 8);
  v8 = *(_QWORD *)(a6 - 8);
  if (v6 >= v7)
  {
    if (v8 < v6)
    {
      *(_QWORD *)(a4 - 8) = v8;
      *(_QWORD *)(a6 - 8) = v6;
      v9 = *(_QWORD *)(a4 - 8);
      v10 = *(_QWORD *)(a2 - 8);
      if (v9 < v10)
      {
        *(_QWORD *)(a2 - 8) = v9;
        *(_QWORD *)(a4 - 8) = v10;
      }
    }
  }
  else
  {
    if (v8 >= v6)
    {
      *(_QWORD *)(a2 - 8) = v6;
      *(_QWORD *)(a4 - 8) = v7;
      v11 = *(_QWORD *)(a6 - 8);
      if (v11 >= v7)
        return;
      *(_QWORD *)(a4 - 8) = v11;
    }
    else
    {
      *(_QWORD *)(a2 - 8) = v8;
    }
    *(_QWORD *)(a6 - 8) = v7;
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(a1, a2, a3, a4, a5, a6);
  v12 = *(_QWORD *)(a8 - 8);
  v13 = *(_QWORD *)(a6 - 8);
  if (v12 < v13)
  {
    *(_QWORD *)(a6 - 8) = v12;
    *(_QWORD *)(a8 - 8) = v13;
    v14 = *(_QWORD *)(a6 - 8);
    v15 = *(_QWORD *)(a4 - 8);
    if (v14 < v15)
    {
      *(_QWORD *)(a4 - 8) = v14;
      *(_QWORD *)(a6 - 8) = v15;
      v16 = *(_QWORD *)(a4 - 8);
      v17 = *(_QWORD *)(a2 - 8);
      if (v16 < v17)
      {
        *(_QWORD *)(a2 - 8) = v16;
        *(_QWORD *)(a4 - 8) = v17;
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(a1, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a10 - 8);
  v15 = *(_QWORD *)(a8 - 8);
  if (v14 < v15)
  {
    *(_QWORD *)(a8 - 8) = v14;
    *(_QWORD *)(a10 - 8) = v15;
    v16 = *(_QWORD *)(a8 - 8);
    v17 = *(_QWORD *)(a6 - 8);
    if (v16 < v17)
    {
      *(_QWORD *)(a6 - 8) = v16;
      *(_QWORD *)(a8 - 8) = v17;
      v18 = *(_QWORD *)(a6 - 8);
      v19 = *(_QWORD *)(a4 - 8);
      if (v18 < v19)
      {
        *(_QWORD *)(a4 - 8) = v18;
        *(_QWORD *)(a6 - 8) = v19;
        v20 = *(_QWORD *)(a4 - 8);
        v21 = *(_QWORD *)(a2 - 8);
        if (v20 < v21)
        {
          *(_QWORD *)(a2 - 8) = v20;
          *(_QWORD *)(a4 - 8) = v21;
        }
      }
    }
  }
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  char v17;

  v6 = 1;
  switch((a2 - (uint64_t)a4) >> 3)
  {
    case 0:
    case 1:
      return v6 & 1;
    case 2:
      v7 = *(_QWORD *)(a2 - 8);
      if (*a4 < v7)
      {
        *(_QWORD *)(a2 - 8) = *a4;
        *a4 = v7;
      }
      goto LABEL_18;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(a1, a2, a2 - 8, a2 - 8, a3, (uint64_t)(a4 + 1));
      goto LABEL_18;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(a1, a2, a2 - 8, a2 - 8, a2 - 16, a2 - 16, a3, (uint64_t)(a4 + 1));
      goto LABEL_18;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(a1, a2, a2 - 8, a2 - 8, a2 - 16, a2 - 16, a2 - 24, a2 - 24, a3, (uint64_t)(a4 + 1));
LABEL_18:
      v6 = 1;
      return v6 & 1;
    default:
      v8 = a2 - 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>>(a1, a2, a2 - 8, a2 - 8, a2 - 16, a2 - 16);
      v10 = (_QWORD *)(a2 - 24);
      if ((unint64_t *)(a2 - 24) == a4)
        goto LABEL_14;
      v11 = 0;
      v9 = a2 - 24;
      break;
  }
  while (1)
  {
    v13 = *(_QWORD *)(v9 - 8);
    v9 -= 8;
    v12 = v13;
    if (v13 < *(_QWORD *)(v8 - 8))
    {
      v14 = v10;
      while (1)
      {
        *(v14 - 1) = *v14;
        if (v14 + 1 == (_QWORD *)a2)
          break;
        v15 = v14 + 1;
        v16 = v14[1];
        ++v14;
        if (v16 <= v12)
          goto LABEL_12;
      }
      v15 = (_QWORD *)a2;
LABEL_12:
      *(v15 - 1) = v12;
      if (++v11 == 8)
        break;
    }
    v8 = (uint64_t)v10;
    v10 = (_QWORD *)v9;
    if ((unint64_t *)v9 == a4)
    {
LABEL_14:
      v17 = 1;
      goto LABEL_20;
    }
  }
  v17 = 0;
  LOBYTE(v9) = v9 == (_QWORD)a4;
LABEL_20:
  v6 = v17 | v9;
  return v6 & 1;
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::handleCommonPersonSubtree(nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit *this@<X0>, const nlv4_inference_orchestrator::trees::TreeNode *a2@<X1>, std::string *a3@<X8>)
{
  unint64_t v3;
  NSObject *v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const void **v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  NSObject *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  NSObject *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  NSObject *v36;
  _BYTE *v37;
  uint64_t v38;
  const char *v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::string::size_type v53;
  NSObject *v54;
  _BYTE *v55;
  const char *v56;
  const char *v57;
  NSObject *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  __int16 v62;
  const char *v63;
  __int16 v64;
  const char *v65;
  uint8_t v66[4];
  _BYTE *v67;
  __int16 v68;
  uint64_t v69;
  char v70;
  _BYTE buf[12];
  __int16 v72;
  _QWORD *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v7 = SNLPOSLoggerForCategory(1);
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
  if (v8)
  {
    v9 = *((_QWORD *)this + 3);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v9;
    _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_DEBUG, "[%s] Handling common_Person subtree", buf, 0xCu);
  }
  v10 = *((_QWORD *)a2 + 11);
  if (*((_QWORD *)a2 + 12) - v10 != 144)
  {
    v21 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = *((_QWORD *)this + 3);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v22;
LABEL_23:
      v25 = v21;
      v26 = OS_LOG_TYPE_DEFAULT;
LABEL_24:
      _os_log_impl(&dword_1C2196000, v25, v26, v23, buf, 0xCu);
    }
LABEL_25:
    a3->__r_.__value_.__s.__data_[0] = 0;
    a3[6].__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  v11 = siri::ontology::oname::graph::ontology_init::Argument_name((siri::ontology::oname::graph::ontology_init *)v8);
  v12 = *(unsigned __int8 *)(v10 + 71);
  if ((v12 & 0x80u) == 0)
    v13 = *(unsigned __int8 *)(v10 + 71);
  else
    v13 = *(_QWORD *)(v10 + 56);
  v14 = *(unsigned __int8 *)(v11 + 31);
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(v11 + 16);
  if (v13 != v14)
  {
LABEL_21:
    v21 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v24 = *((_QWORD *)this + 3);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v24;
      goto LABEL_23;
    }
    goto LABEL_25;
  }
  v16 = (const void **)(v10 + 48);
  v19 = *(unsigned __int8 **)(v11 + 8);
  v17 = (unsigned __int8 *)(v11 + 8);
  v18 = v19;
  if (v15 >= 0)
    v20 = v17;
  else
    v20 = v18;
  if ((v12 & 0x80) != 0)
  {
    if (memcmp(*v16, v20, *(_QWORD *)(v10 + 56)))
      goto LABEL_21;
  }
  else if (*(_BYTE *)(v10 + 71))
  {
    while (*(unsigned __int8 *)v16 == *v20)
    {
      v16 = (const void **)((char *)v16 + 1);
      ++v20;
      if (!--v12)
        goto LABEL_26;
    }
    goto LABEL_21;
  }
LABEL_26:
  v27 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
  {
    v28 = *((_QWORD *)this + 3);
    v29 = (_QWORD *)(v10 + 24);
    if (*(char *)(v10 + 47) < 0)
      v29 = (_QWORD *)*v29;
    *(_DWORD *)buf = 136315395;
    *(_QWORD *)&buf[4] = v28;
    v72 = 2085;
    v73 = v29;
    _os_log_impl(&dword_1C2196000, v27, OS_LOG_TYPE_DEBUG, "[%s] common_Person.name value: %{sensitive}s", buf, 0x16u);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, *((char **)this + 3));
  v30 = *((_QWORD *)this + 10);
  v31 = *((_QWORD *)this + 11) - v30;
  if (!v31)
  {
LABEL_34:
    v35 = 1;
    v36 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      v37 = buf;
      if (v74 < 0)
        v37 = *(_BYTE **)buf;
      v38 = *(_QWORD *)(v10 + 72);
      *(_DWORD *)v66 = 136315394;
      v67 = v37;
      v68 = 2048;
      v69 = v38;
      v39 = "[%s] Warning: could not find start token index corresponding to node.startCharIndex=%lu";
LABEL_46:
      _os_log_impl(&dword_1C2196000, v36, OS_LOG_TYPE_DEFAULT, v39, v66, 0x16u);
    }
LABEL_47:
    v32 = 0;
    goto LABEL_48;
  }
  v32 = 0;
  v33 = v31 >> 4;
  v34 = (uint64_t *)(v30 + 104);
  while (*(v34 - 1) != *(_QWORD *)(v10 + 72))
  {
    ++v32;
    v34 += 18;
    if (v32 >= 0x8E38E38E38E38E39 * v33)
      goto LABEL_34;
  }
  v40 = 0x8E38E38E38E38E39 * v33;
  if (v32 >= v40)
  {
LABEL_42:
    v35 = 1;
    v36 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      v42 = buf;
      if (v74 < 0)
        v42 = *(_BYTE **)buf;
      v43 = *(_QWORD *)(v10 + 80);
      *(_DWORD *)v66 = 136315394;
      v67 = v42;
      v68 = 2048;
      v69 = v43;
      v39 = "[%s] Warning: could not find end token index corresponding to node.endCharIndex=%lu";
      goto LABEL_46;
    }
    goto LABEL_47;
  }
  v3 = v32;
  while (1)
  {
    v41 = *v34;
    v34 += 18;
    ++v3;
    if (v41 == *(_QWORD *)(v10 + 80))
      break;
    if (v40 == v3)
      goto LABEL_42;
  }
  v35 = 0;
LABEL_48:
  if (v74 < 0)
    operator delete(*(void **)buf);
  if (v35)
    goto LABEL_25;
  if (nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::hasMatchingSpanPerson(this, v32, v3))
  {
    v44 = SNLPOSLoggerForCategory(1);
    if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
      goto LABEL_25;
    v45 = *((_QWORD *)this + 3);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v45;
    v23 = "[%s] There exists a person matching span covering this entire common_Person.name node. Skipping.";
    v25 = v44;
    v26 = OS_LOG_TYPE_DEBUG;
    goto LABEL_24;
  }
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::findMatchingSpansSplit(this, v32, v3, buf);
  if (v78)
  {
    v48 = *((_QWORD *)a2 + 6);
    v47 = (char *)a2 + 48;
    v46 = v48;
    v49 = v47[23];
    if (v49 >= 0)
      v50 = (uint64_t)v47;
    else
      v50 = v46;
    if (v49 >= 0)
      v51 = v47[23];
    else
      v51 = *((_QWORD *)v47 + 1);
    if (*(char *)(v10 + 47) < 0)
    {
      v52 = *(_QWORD *)(v10 + 24);
      v53 = *(_QWORD *)(v10 + 32);
    }
    else
    {
      v52 = v10 + 24;
      v53 = *(unsigned __int8 *)(v10 + 47);
    }
    nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::generateCommonPersonNode(this, (uint64_t)buf, (uint64_t)&v76, v50, v51, v52, v53, *(void **)(v10 + 72), (uint64_t)v66);
    if (v70)
    {
      std::__optional_copy_base<nlv4_inference_orchestrator::trees::TreeNode,false>::__optional_copy_base[abi:ne180100](a3, (const nlv4_inference_orchestrator::trees::TreeNode *)v66);
    }
    else
    {
      v56 = (const char *)v75;
      if (v75)
      {
        if (*(char *)(v75 + 23) < 0)
          v56 = *(const char **)v75;
      }
      else
      {
        v56 = "nullptr";
      }
      v57 = (const char *)v77;
      if (v77)
      {
        if (*(char *)(v77 + 23) < 0)
          v57 = *(const char **)v77;
      }
      else
      {
        v57 = "nullptr";
      }
      v58 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        v59 = *((_QWORD *)this + 3);
        v60 = 136315651;
        v61 = v59;
        v62 = 2085;
        v63 = v56;
        v64 = 2085;
        v65 = v57;
        _os_log_impl(&dword_1C2196000, v58, OS_LOG_TYPE_DEFAULT, "[%s] Warning: Failed to generate a node for matching span (personInput=%{sensitive}s, contactTypeInput=%{sensitive}s)", (uint8_t *)&v60, 0x20u);
      }
      a3->__r_.__value_.__s.__data_[0] = 0;
      a3[6].__r_.__value_.__s.__data_[0] = 0;
    }
    std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v66);
  }
  else
  {
    v54 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
    {
      v55 = (_BYTE *)*((_QWORD *)this + 3);
      *(_DWORD *)v66 = 136315138;
      v67 = v55;
      _os_log_impl(&dword_1C2196000, v54, OS_LOG_TYPE_DEBUG, "[%s] Could not find a split for this common_Person. Skipping.", v66, 0xCu);
    }
    a3->__r_.__value_.__s.__data_[0] = 0;
    a3[6].__r_.__value_.__s.__data_[0] = 0;
  }
  std::__optional_destruct_base<std::pair<sirinluinternal::MatchingSpan,sirinluinternal::MatchingSpan>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
}

void sub_1C224ECF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a13);
  std::__optional_destruct_base<std::pair<sirinluinternal::MatchingSpan,sirinluinternal::MatchingSpan>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 144))
  {
    v3 = (void **)(a1 + 88);
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v3);
    if (*(char *)(a1 + 71) < 0)
      operator delete(*(void **)(a1 + 48));
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::hasMatchingSpanPerson(nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit *this, unint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::find<unsigned long>((_QWORD *)this + 18, a2);
  if (result)
  {
    v6 = *(_QWORD *)(result + 24);
    v5 = *(_QWORD *)(result + 32);
    if (v6 == v5)
    {
      return 0;
    }
    else
    {
      v7 = v6 + 88;
      do
      {
        v8 = *(unsigned int *)(v7 - 16);
        result = v8 == a3;
        v9 = v8 == a3 || v7 == v5;
        v7 += 88;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::findMatchingSpansSplit@<X0>(nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t result;
  _BYTE v10[88];
  _BYTE v11[88];
  _BYTE v12[88];
  _BYTE v13[96];

  v7 = (_QWORD *)((char *)this + 144);
  v8 = (_QWORD *)((char *)this + 104);
  result = (uint64_t)nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::findMatchingSpansSplitWithOrder(a2, a3, (_QWORD *)this + 18, (_QWORD *)this + 13, a4);
  if (!a4[176])
  {
    std::__optional_destruct_base<std::pair<sirinluinternal::MatchingSpan,sirinluinternal::MatchingSpan>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)a4);
    nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::findMatchingSpansSplitWithOrder(a2, a3, v8, v7, v12);
    if (v13[88])
    {
      MEMORY[0x1C3BB847C](v10, v13);
      MEMORY[0x1C3BB847C](v11, v12);
      MEMORY[0x1C3BB8470](a4, v10);
      MEMORY[0x1C3BB8470](a4 + 88, v11);
      a4[176] = 1;
      MEMORY[0x1C3BB8494](v11);
      MEMORY[0x1C3BB8494](v10);
      return std::__optional_destruct_base<std::pair<sirinluinternal::MatchingSpan,sirinluinternal::MatchingSpan>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v12);
    }
    else
    {
      result = std::__optional_destruct_base<std::pair<sirinluinternal::MatchingSpan,sirinluinternal::MatchingSpan>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v12);
      *a4 = 0;
      a4[176] = 0;
    }
  }
  return result;
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::generateCommonPersonNode(siri::ontology::oname::graph::ontology_init *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, std::string::size_type a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v18;
  siri::ontology::oname::graph::ontology_init *v19;
  _QWORD *v20;
  std::string::size_type v21;
  _QWORD *v22;
  void *v23;
  std::string::size_type v24;
  NSObject *v25;
  std::string::size_type v26;
  const char *v27;
  BOOL v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string *p_buf;
  std::string::size_type v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  siri::ontology::oname::graph::ontology_init *v37;
  uint64_t v38;
  std::string::size_type v39;
  uint64_t v40;
  void *v41;
  std::string::size_type v42;
  NSObject *v43;
  std::string::size_type v44;
  const char *v45;
  std::string::size_type v46;
  std::string::size_type v47;
  std::string *v48;
  std::string::size_type v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::string *v54;
  uint64_t v55;
  siri::ontology::oname::graph::ontology_init *v56;
  uint64_t v57;
  uint64_t v58;
  void **v59;
  NSObject *v60;
  std::string::size_type v61;
  void **v62;
  __int128 v63;
  std::string v68[2];
  void *v69[2];
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[32];
  __int128 v77;
  std::string v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[3];
  __int128 v82;
  __int128 v83;
  void *v84[2];
  void *v85[4];
  std::string v86;
  std::string::size_type v87;
  void *v88;
  void *v89[7];
  void *v90[2];
  void *v91[4];
  std::string __p;
  std::string::size_type v93;
  void *v94;
  _QWORD v95[2];
  _QWORD v96[6];
  void **v97;
  std::string buf;
  void *v99;
  __int16 v100;
  void **v101;
  char v102;
  void *v103;
  char v104;
  uint64_t v105;
  std::string v106[6];
  _QWORD v107[4];

  v107[1] = *MEMORY[0x1E0C80C00];
  v10 = *(unsigned int *)(a2 + 76);
  v11 = *((_QWORD *)a1 + 10);
  v12 = 0x8E38E38E38E38E39 * ((*((_QWORD *)a1 + 11) - v11) >> 4);
  if (v12 <= v10
    || (v13 = (*(_DWORD *)(a2 + 72) - 1), v12 <= v13)
    || (v14 = *(unsigned int *)(a3 + 76), v12 <= v14)
    || (v15 = (*(_DWORD *)(a3 + 72) - 1), v12 <= v15))
  {
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
  }
  v95[1] = 0;
  v96[0] = 0;
  *(_OWORD *)v90 = 0u;
  memset(v91, 0, sizeof(v91));
  memset(&__p, 0, sizeof(__p));
  v95[0] = 0;
  v18 = siri::ontology::oname::graph::ontology_init::Argument_name(a1);
  v19 = (siri::ontology::oname::graph::ontology_init *)std::string::operator=(&__p, (const std::string *)(v18 + 8));
  v20 = (_QWORD *)(v11 + 144 * v10);
  v21 = v20[12];
  v93 = v21;
  v96[1] = v20[14];
  v96[3] = v20[16];
  v22 = (_QWORD *)(v11 + 144 * v13);
  v23 = (void *)v22[13];
  v94 = v23;
  v96[2] = v22[15];
  v96[4] = v22[17];
  v24 = v21 - (_QWORD)a8;
  if (v21 < (unint64_t)a8)
  {
    v25 = SNLPOSLoggerForCategory(1);
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
LABEL_21:
      *(_BYTE *)a9 = 0;
      *(_BYTE *)(a9 + 144) = 0;
      goto LABEL_22;
    }
    v26 = *((_QWORD *)a1 + 3);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v26;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v93;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
    v99 = a8;
    v27 = "[%s] newNameNode.startCharIndex (%lu) is less than originalNameStartCharIndex (%lu)";
LABEL_20:
    _os_log_impl(&dword_1C2196000, v25, OS_LOG_TYPE_ERROR, v27, (uint8_t *)&buf, 0x20u);
    goto LABEL_21;
  }
  v28 = (unint64_t)v23 >= v21;
  v29 = (std::string::size_type)v23 - v21;
  if (v29 == 0 || !v28)
  {
    v25 = SNLPOSLoggerForCategory(1);
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
    v33 = *((_QWORD *)a1 + 3);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v33;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v93;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
    v99 = v94;
    v27 = "[%s] newNameNode character indices imply an empty or impossible substring (%lu -> %lu)";
    goto LABEL_20;
  }
  if (a7 < v24)
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  if (a7 - v24 >= v29)
    v30 = v29;
  else
    v30 = a7 - v24;
  if (v30 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v30 >= 0x17)
  {
    v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v34 = v30 | 7;
    v35 = v34 + 1;
    p_buf = (std::string *)operator new(v34 + 1);
    buf.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
    buf.__r_.__value_.__l.__size_ = v30;
    goto LABEL_32;
  }
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = v30;
  p_buf = &buf;
  if (v30)
LABEL_32:
    v19 = (siri::ontology::oname::graph::ontology_init *)memmove(p_buf, (const void *)(a6 + v24), v30);
  p_buf->__r_.__value_.__s.__data_[v30] = 0;
  if (SHIBYTE(v91[3]) < 0)
    operator delete(v91[1]);
  *(std::string *)&v91[1] = buf;
  *(_OWORD *)v84 = 0u;
  memset(v85, 0, sizeof(v85));
  memset(&v86, 0, sizeof(v86));
  memset(v89, 0, 24);
  v36 = siri::ontology::oname::graph::ontology_init::Argument_label(v19);
  v37 = (siri::ontology::oname::graph::ontology_init *)std::string::operator=(&v86, (const std::string *)(v36 + 8));
  v38 = v11 + 144 * v14;
  v39 = *(_QWORD *)(v38 + 96);
  v87 = v39;
  v89[3] = *(void **)(v38 + 112);
  v89[5] = *(void **)(v38 + 128);
  v40 = v11 + 144 * v15;
  v41 = *(void **)(v40 + 104);
  v88 = v41;
  v89[4] = *(void **)(v40 + 120);
  v89[6] = *(void **)(v40 + 136);
  v42 = v39 - (_QWORD)a8;
  if (v39 >= (unint64_t)a8)
  {
    v28 = (unint64_t)v41 >= v39;
    v46 = (std::string::size_type)v41 - v39;
    if (v46 == 0 || !v28)
    {
      v43 = SNLPOSLoggerForCategory(1);
      if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        goto LABEL_51;
      v50 = *((_QWORD *)a1 + 3);
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v50;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v87;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
      v99 = v88;
      v45 = "[%s] contactAddressLabelNode character indices imply an empty or impossible substring (%lu -> %lu)";
      goto LABEL_50;
    }
    if (a7 < v42)
      std::__throw_out_of_range[abi:ne180100]("string_view::substr");
    if (a7 - v42 >= v46)
      v47 = v46;
    else
      v47 = a7 - v42;
    if (v47 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v47 >= 0x17)
    {
      v51 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v47 | 7) != 0x17)
        v51 = v47 | 7;
      v52 = v51 + 1;
      v48 = (std::string *)operator new(v51 + 1);
      buf.__r_.__value_.__r.__words[2] = v52 | 0x8000000000000000;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
      buf.__r_.__value_.__l.__size_ = v47;
    }
    else
    {
      *((_BYTE *)&buf.__r_.__value_.__s + 23) = v47;
      v48 = &buf;
      if (!v47)
        goto LABEL_62;
    }
    v37 = (siri::ontology::oname::graph::ontology_init *)memmove(v48, (const void *)(a6 + v42), v47);
LABEL_62:
    v48->__r_.__value_.__s.__data_[v47] = 0;
    if (SHIBYTE(v85[3]) < 0)
      operator delete(v85[1]);
    *(std::string *)&v85[1] = buf;
    memset(v76, 0, sizeof(v76));
    v77 = 0u;
    memset(&v78, 0, sizeof(v78));
    memset(v81, 0, sizeof(v81));
    v53 = siri::ontology::oname::graph::ontology_init::common_ContactAddress(v37);
    v54 = std::string::operator=((std::string *)v76, (const std::string *)(v53 + 8));
    v55 = siri::ontology::oname::graph::ontology_init::Argument_specifyingContactAddress((siri::ontology::oname::graph::ontology_init *)v54);
    std::string::operator=(&v78, (const std::string *)(v55 + 8));
    v79 = 0;
    v80 = 0;
    v82 = 0u;
    v83 = 0u;
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&buf, (const nlv4_inference_orchestrator::trees::TreeNode *)v84);
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*>((uint64_t)v81, (nlv4_inference_orchestrator::trees::TreeNode *)&buf, (nlv4_inference_orchestrator::trees::TreeNode *)v106, 1uLL);
    v68[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
    if (v104 < 0)
      operator delete(v103);
    if (v102 < 0)
      operator delete(v99);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    v73 = 0;
    memset(v68, 0, sizeof(v68));
    *(_OWORD *)v69 = 0u;
    v72 = 0uLL;
    v70 = 0;
    v57 = siri::ontology::oname::graph::ontology_init::common_Person(v56);
    std::string::operator=(v68, (const std::string *)(v57 + 8));
    MEMORY[0x1C3BB9640](v69, a4, a5);
    v71 = 0uLL;
    v74 = 0u;
    v75 = 0u;
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&buf, (const nlv4_inference_orchestrator::trees::TreeNode *)v90);
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(v106, (const nlv4_inference_orchestrator::trees::TreeNode *)v76);
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*>((uint64_t)&v72, (nlv4_inference_orchestrator::trees::TreeNode *)&buf, (nlv4_inference_orchestrator::trees::TreeNode *)v107, 2uLL);
    v58 = 36;
    do
    {
      v59 = (void **)((char *)&buf.__r_.__value_.__l.__data_ + v58 * 8);
      v97 = (void **)&v96[v58];
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v97);
      if (*((char *)&v94 + v58 * 8 + 7) < 0)
        operator delete(*(v59 - 12));
      if (*((char *)v59 - 97) < 0)
        operator delete(v91[v58 + 3]);
      if (SHIBYTE(v91[v58 + 2]) < 0)
        operator delete(*(v59 - 18));
      v58 -= 18;
    }
    while (v58 * 8);
    v60 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
    {
      v61 = *((_QWORD *)a1 + 3);
      if (SHIBYTE(v91[3]) >= 0)
        v62 = &v91[1];
      else
        v62 = (void **)v91[1];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315907;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v61;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v93;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
      v99 = v94;
      v100 = 2085;
      v101 = v62;
      _os_log_impl(&dword_1C2196000, v60, OS_LOG_TYPE_DEBUG, "[%s] Generated new common_Person.name node with newNameNode.startCharIndex=%lu, newNameNode.endCharIndex=%lu, newNameNode.value=%{sensitive}s", (uint8_t *)&buf, 0x2Au);
    }
    *(std::string *)a9 = v68[0];
    memset(v68, 0, 32);
    *(std::string *)(a9 + 24) = v68[1];
    *(_OWORD *)&v68[1].__r_.__value_.__r.__words[1] = 0uLL;
    *(_QWORD *)(a9 + 64) = v70;
    *(_OWORD *)(a9 + 48) = *(_OWORD *)v69;
    v69[1] = 0;
    v70 = 0;
    v69[0] = 0;
    *(_OWORD *)(a9 + 72) = v71;
    *(_OWORD *)(a9 + 88) = v72;
    *(_QWORD *)(a9 + 104) = v73;
    v72 = 0uLL;
    v73 = 0;
    v63 = v75;
    *(_OWORD *)(a9 + 112) = v74;
    *(_OWORD *)(a9 + 128) = v63;
    *(_BYTE *)(a9 + 144) = 1;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    if (SHIBYTE(v70) < 0)
      operator delete(v69[0]);
    if (SHIBYTE(v68[1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68[1].__r_.__value_.__l.__data_);
    if (SHIBYTE(v68[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68[0].__r_.__value_.__l.__data_);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v81;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if (SHIBYTE(v77) < 0)
      operator delete(*(void **)&v76[24]);
    if ((v76[23] & 0x80000000) != 0)
      operator delete(*(void **)v76);
    goto LABEL_52;
  }
  v43 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
  {
    v44 = *((_QWORD *)a1 + 3);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v44;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v93;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
    v99 = a8;
    v45 = "[%s] contactAddressLabelNode.startCharIndex (%lu) is less than originalNameStartCharIndex (%lu)";
LABEL_50:
    _os_log_impl(&dword_1C2196000, v43, OS_LOG_TYPE_ERROR, v45, (uint8_t *)&buf, 0x20u);
  }
LABEL_51:
  *(_BYTE *)a9 = 0;
  *(_BYTE *)(a9 + 144) = 0;
LABEL_52:
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  if (SHIBYTE(v85[3]) < 0)
    operator delete(v85[1]);
  if (SHIBYTE(v85[0]) < 0)
    operator delete(v84[0]);
LABEL_22:
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v95;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v91[3]) < 0)
    operator delete(v91[1]);
  if (SHIBYTE(v91[0]) < 0)
    operator delete(v90[0]);
}

void sub_1C224F7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  uint64_t v67;
  uint64_t i;

  for (i = 144; i != -144; i -= 144)
    nlv4_inference_orchestrator::trees::TreeNode::~TreeNode((void **)(v67 + i));
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a13);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a31);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a49);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a67);
  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<nlv4_inference_orchestrator::trees::TreeNode,false>::__optional_copy_base[abi:ne180100](std::string *this, const nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[6].__r_.__value_.__s.__data_[0] = 0;
  if (*((_BYTE *)a2 + 144))
  {
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(this, a2);
    this[6].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_1C224F8FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<std::pair<sirinluinternal::MatchingSpan,sirinluinternal::MatchingSpan>,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 176))
  {
    MEMORY[0x1C3BB8494](a1 + 88);
    MEMORY[0x1C3BB8494](a1);
  }
  return a1;
}

void std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*>(uint64_t a1, nlv4_inference_orchestrator::trees::TreeNode *a2, nlv4_inference_orchestrator::trees::TreeNode *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vdeallocate(a1);
    v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0xE38E38E38E38E3)
      v11 = 0x1C71C71C71C71C7;
    else
      v11 = v10;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>(v8, a2, a3, *(std::string **)(a1 + 8));
    goto LABEL_10;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4) < a4)
  {
    v13 = (std::string *)((char *)a2 + 16 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>((std::string *)a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>(v8, (nlv4_inference_orchestrator::trees::TreeNode *)v13, a3, *(std::string **)(a1 + 8));
LABEL_10:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>((std::string *)a2, (std::string *)a3, v9);
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__base_destruct_at_end[abi:ne180100](a1, (void **)&v14->__r_.__value_.__l.__data_);
}

void sub_1C224FA94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C224FA9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v5;
  __int128 v6;

  if (__str != a2)
  {
    v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      std::string::operator=(this + 1, v5 + 1);
      std::string::operator=(this + 2, v5 + 2);
      *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = *(_OWORD *)&v5[3].__r_.__value_.__l.__data_;
      if (this != v5)
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*>((uint64_t)&this[3].__r_.__value_.__r.__words[2], (std::string *)v5[3].__r_.__value_.__r.__words[2], (__int128 *)v5[4].__r_.__value_.__l.__data_, 0x8E38E38E38E38E39* ((uint64_t)(v5[4].__r_.__value_.__r.__words[0] - v5[3].__r_.__value_.__r.__words[2]) >> 4));
      v6 = *(_OWORD *)&v5[5].__r_.__value_.__r.__words[1];
      *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = *(_OWORD *)&v5[4].__r_.__value_.__r.__words[2];
      *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = v6;
      this += 6;
      v5 += 6;
    }
    while (v5 != a2);
  }
  return this;
}

void std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*>(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::string *v13;
  __int128 *v14;
  uint64_t v15;
  void **v16;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vdeallocate(a1);
    if (a4 > 0x1C71C71C71C71C7)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0xE38E38E38E38E3)
      v11 = 0x1C71C71C71C71C7;
    else
      v11 = v10;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*>(v8, (__int128 *)__str, a3, *(std::string **)(a1 + 8), v12);
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4) < a4)
  {
    v14 = (__int128 *)((char *)__str + 16 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>(__str, (_DWORD)__str + 16 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4), v9);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*>(v8, v14, a3, *(std::string **)(a1 + 8), v15);
LABEL_11:
    *(_QWORD *)(a1 + 8) = v13;
    return;
  }
  v16 = (void **)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>(__str, (int)a3, v9);
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__base_destruct_at_end[abi:ne180100](a1, v16);
}

void sub_1C224FCB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C224FCC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::findMatchingSpansSplitWithOrder@<X0>(unint64_t a1@<X1>, unint64_t a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, _BYTE *a5@<X8>)
{
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t i;
  _BYTE v13[88];
  _BYTE v14[88];

  result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::find<unsigned long>(a3, a1);
  if (result)
  {
    v9 = result[3];
    v10 = result[4];
    while (v9 != v10)
    {
      v11 = *(unsigned int *)(v9 + 72);
      if (v11 < a2)
      {
        result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::find<unsigned long>(a4, v11);
        if (result)
        {
          for (i = result[3]; i != result[4]; i += 88)
          {
            if (*(_DWORD *)(i + 72) == a2)
            {
              MEMORY[0x1C3BB847C](v13, v9);
              MEMORY[0x1C3BB847C](v14, i);
              MEMORY[0x1C3BB8470](a5, v13);
              MEMORY[0x1C3BB8470](a5 + 88, v14);
              a5[176] = 1;
              MEMORY[0x1C3BB8494](v14);
              return (_QWORD *)MEMORY[0x1C3BB8494](v13);
            }
          }
        }
      }
      v9 += 88;
    }
  }
  *a5 = 0;
  a5[176] = 0;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::find<unsigned long>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(_QWORD *)&v2)
            v7 %= *(_QWORD *)&v2;
        }
        else
        {
          v7 &= *(_QWORD *)&v2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void snlp::ssu::selflogging::logUserRequestStarted(snlp::ssu::selflogging *this, const sirinluexternal::RequestID *a2)
{
  id v2;

  snlp::ssu::selflogging::convertRequestId(this, a2);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  +[SNLPSSUSELFLoggingUtils logUserRequestStarted:](SNLPSSUSELFLoggingUtils, "logUserRequestStarted:");

}

void sub_1C224FEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void snlp::ssu::selflogging::logUserRequestEnded(snlp::ssu::selflogging *a1, unsigned int **a2)
{
  const sirinluexternal::RequestID *v4;
  unsigned int *v5;
  unsigned int *v6;
  void *v7;
  void *v8;
  id v9;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  v5 = *a2;
  v6 = a2[1];
  while (v5 != v6)
  {
    snlp::ssu::selflogging::convertUserRequestCacheEntryInfo(v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "addObject:", v7);

    v5 += 16;
  }
  snlp::ssu::selflogging::convertRequestId(a1, v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[SNLPSSUSELFLoggingUtils logUserRequestEnded:triggeredCacheEntryInfos:](SNLPSSUSELFLoggingUtils, "logUserRequestEnded:triggeredCacheEntryInfos:", v8, v9);

}

void sub_1C224FF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void snlp::ssu::selflogging::logUserRequestFailed(snlp::ssu::selflogging *this, const sirinluexternal::RequestID *a2)
{
  id v2;

  snlp::ssu::selflogging::convertRequestId(this, a2);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  +[SNLPSSUSELFLoggingUtils logUserRequestFailed:](SNLPSSUSELFLoggingUtils, "logUserRequestFailed:");

}

void sub_1C224FFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::selflogging::logBackgroundUpdateStarted(uint64_t a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  +[SNLPSSUSELFLoggingUtils logBackgroundUpdateStarted:](SNLPSSUSELFLoggingUtils, "logBackgroundUpdateStarted:", snlp::ssu::selflogging::convertBackgroundUpdateType(a1));
  v2 = (id)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2 && objc_msgSend(v2, "hasLowInt") && (objc_msgSend(v3, "hasHighInt") & 1) != 0)
  {
    v1 = objc_msgSend(v3, "lowInt");
    objc_msgSend(v3, "highInt");
  }

  return v1;
}

void sub_1C225007C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void snlp::ssu::selflogging::logBackgroundUpdateEnded(uint64_t *a1, uint64_t *a2, char ***a3)
{
  uint64_t *v5;
  const snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo *v6;
  void *v7;
  char **v8;
  char **v9;
  void *v10;
  void *v11;
  id v12;

  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v12 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *a3;
  v9 = a3[1];
  while (v8 != v9)
  {
    snlp::ssu::selflogging::convertBackgroundUpdateAppInfo(v8, v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "addObject:", v10);

    v8 += 7;
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  +[SNLPSSUSELFLoggingUtils logBackgroundUpdateEnded:locale:appInfos:](SNLPSSUSELFLoggingUtils, "logBackgroundUpdateEnded:locale:appInfos:", v11, v12, v7);

}

void sub_1C225016C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id `anonymous namespace'::objcUUIDFromCpp(uint64_t a1, uint64_t a2)
{
  id v4;

  v4 = objc_alloc_init(MEMORY[0x1E0D9F9A0]);
  objc_msgSend(v4, "setNamespaceA:", 0);
  objc_msgSend(v4, "setLowInt:", a1);
  objc_msgSend(v4, "setHighInt:", a2);
  return v4;
}

void sub_1C2250204(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void snlp::ssu::selflogging::logBackgroundUpdateFailed(uint64_t *a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue();
  +[SNLPSSUSELFLoggingUtils logBackgroundUpdateFailed:](SNLPSSUSELFLoggingUtils, "logBackgroundUpdateFailed:");

}

void sub_1C225025C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void snlp::ssu::selflogging::buildAppBundleIdSaltedHash(char *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  uint8_t v9[16];
  _QWORD v10[11];
  char v11;
  uint64_t v12;
  void *v13[2];
  char v14;

  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "UUIDString");
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(v13, (char *)objc_msgSend(v6, "UTF8String"));

    boost::hash<std::string>::operator()((char *)v13);
    boost::hash<std::string>::operator()(a1);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
    *(_DWORD *)((char *)&v10[1] + *(_QWORD *)(v10[0] - 24)) = *(_DWORD *)((_BYTE *)&v10[1] + *(_QWORD *)(v10[0] - 24)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    std::stringbuf::str();
    *(_QWORD *)v9 = *MEMORY[0x1E0DE4F50];
    v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)&v9[*(_QWORD *)(*(_QWORD *)v9 - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v10[0] = v7;
    v10[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v11 < 0)
      operator delete((void *)v10[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1C3BB9A90](&v12);
    if (v14 < 0)
      operator delete(v13[0]);
  }
  else
  {
    SNLPOSLoggerForCategory(8);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1C2196000, v8, OS_LOG_TYPE_ERROR, "Failed to get salt. Returning constant string to preserve privacy.", v9, 2u);
    }

    std::string::basic_string[abi:ne180100]<0>(a2, "salt_error");
  }

}

void sub_1C2250480(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unint64_t boost::hash<std::string>::operator()(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t result;
  uint64_t v5;

  v1 = a1[23];
  v2 = *((_QWORD *)a1 + 1);
  if ((v1 & 0x80u) == 0)
    v3 = a1;
  else
    v3 = *(char **)a1;
  result = 0;
  if ((v1 & 0x80u) != 0)
    v1 = v2;
  for (; v1; --v1)
  {
    v5 = *v3++;
    result = 3864292196u
           - 0x395B586CA42E166BLL
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))) ^ result);
  }
  return result;
}

void ___ZN12_GLOBAL__N_121getDeviceBootUniqueIdEv_block_invoke()
{
  int v0;
  NSObject *v1;
  char *v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  size_t v7;
  uint8_t buf[4];
  char *v9;
  _BYTE v10[37];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  memset(v10, 0, sizeof(v10));
  v7 = 37;
  v0 = sysctlbyname("kern.bootsessionuuid", v10, &v7, 0, 0);
  if (v0)
  {
    SNLPOSLoggerForCategory(8);
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      v2 = strerror(v0);
      *(_DWORD *)buf = 136315138;
      v9 = v2;
      _os_log_impl(&dword_1C2196000, v1, OS_LOG_TYPE_ERROR, "Failed getting kern.bootsessionuuid with sysctlbyname() %s", buf, 0xCu);
    }

  }
  else
  {
    v4 = objc_alloc(MEMORY[0x1E0CB3A28]);
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", v10);
    v5 = objc_msgSend(v4, "initWithUUIDString:", v3);

  }
}

void sub_1C225065C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void snlc_inference_orchestrator::orchestration::SNLCOrchestrator::handle(itfm_inference_orchestrator::orchestration::ITFMOrchestrator *a1@<X0>, const sirinluinternalitfm::ITFMParserRequest **a2@<X1>, uint64_t a3@<X8>)
{
  const sirinluinternalitfm::ITFMParserRequest *v6;
  const sirinluinternalitfm::ITFMParserRequest *v7;
  _BYTE v8[56];
  char v9;

  snlc_inference_orchestrator::orchestration::SNLCOverrideGenerator::generateOverrideResponse(*a2, v8);
  if (v9)
  {
    MEMORY[0x1C3BB85A8](a3, v8);
  }
  else
  {
    v6 = *a2;
    *a2 = 0;
    v7 = v6;
    itfm_inference_orchestrator::orchestration::ITFMOrchestrator::handle(a1, &v7, a3);
    if (v6)
      (*(void (**)(const sirinluinternalitfm::ITFMParserRequest *))(*(_QWORD *)v6 + 8))(v6);
  }
  if (v9)
    MEMORY[0x1C3BB85C0](v8);
}

void sub_1C2250710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;

  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (a18)
    MEMORY[0x1C3BB85C0](&a11);
  _Unwind_Resume(exception_object);
}

void snlc_inference_orchestrator::orchestration::SNLCOrchestrator::~SNLCOrchestrator(snlc_inference_orchestrator::orchestration::SNLCOrchestrator *this)
{
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::~ITFMOrchestrator(this);
  JUMPOUT(0x1C3BB9B44);
}

void nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabels(nlv4_inference_orchestrator::context::ContextLabelsExtractor *this@<X0>, const sirinluexternal::NLContext *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  const void **v8;
  char *v9;
  char *v10;
  uint64_t *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const sirinluexternal::UsoGraph *v15;
  UsoGraph *ContextLabelsFromGraph;
  void **j;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  const sirinluexternal::UsoGraph *v21;
  UsoGraph *v22;
  void **k;
  void *v24;
  uint64_t *m;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  _QWORD **v31;
  _QWORD **v32;
  uint64_t v33;
  uint64_t v34;
  void **n;
  void *v36;
  uint64_t ii;
  _QWORD *v38;
  uint64_t v39;
  void *__p[2];
  void **v41;
  std::string v42;
  std::string v43;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v6 = *((_QWORD *)a2 + 11);
  v7 = *((_QWORD *)a2 + 12);
  v8 = (const void **)((char *)this + 64);
  v9 = (char *)this + 112;
  if (v6 == v7)
    v9 = (char *)this + 64;
  if (v9[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    v6 = *((_QWORD *)a2 + 11);
    v7 = *((_QWORD *)a2 + 12);
  }
  else
  {
    v43 = *(std::string *)v9;
  }
  if (v6 == v7)
    v10 = (char *)this + 160;
  else
    v10 = (char *)this + 208;
  if (v10[23] < 0)
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  else
    v42 = *(std::string *)v10;
  for (i = (uint64_t *)*((_QWORD *)a2 + 1); ; ++i)
  {
    if (i == *((uint64_t **)a2 + 2))
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, (const void **)&v42.__r_.__value_.__l.__data_, (const void **)this + 47);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(a3, (unsigned __int8 *)__p, (uint64_t)__p);
      goto LABEL_20;
    }
    v12 = *i;
    if (*(_QWORD *)(*i + 24) || *(_QWORD *)(v12 + 16) || *(_QWORD *)(v12 + 8))
      break;
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, (const void **)&v42.__r_.__value_.__l.__data_, (const void **)this + 44);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(a3, (unsigned __int8 *)__p, (uint64_t)__p);
LABEL_20:
  if (SHIBYTE(v41) < 0)
    operator delete(__p[0]);
  v13 = *((_QWORD *)a2 + 1);
  v14 = *((_QWORD *)a2 + 2);
  while (v13 != v14)
  {
    v15 = *(const sirinluexternal::UsoGraph **)(*(_QWORD *)v13 + 16);
    if (v15)
    {
      ContextLabelsFromGraph = nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromGraph((uint64_t)this, (const void **)&v43.__r_.__value_.__l.__data_, (uint64_t)&v43, v15, (uint64_t)__p);
      for (j = v41; j; j = (void **)*j)
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, (unsigned __int8 *)j + 16, (uint64_t)(j + 2));
      nlv4_inference_orchestrator::context::ContextLabelsExtractor::handleBelowVerbPaths((uint64_t)ContextLabelsFromGraph, a3, (const void **)&v43.__r_.__value_.__l.__data_, (uint64_t)__p);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v41);
      v18 = __p[0];
      __p[0] = 0;
      if (v18)
        operator delete(v18);
    }
    v13 += 8;
  }
  v19 = *((_QWORD *)a2 + 4);
  v20 = *((_QWORD *)a2 + 5);
  if (v19 != v20)
  {
    do
    {
      v21 = *(const sirinluexternal::UsoGraph **)(*(_QWORD *)v19 + 16);
      if (v21)
      {
        v22 = nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromGraph((uint64_t)this, v8, (uint64_t)v8, v21, (uint64_t)__p);
        for (k = v41; k; k = (void **)*k)
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, (unsigned __int8 *)k + 16, (uint64_t)(k + 2));
        nlv4_inference_orchestrator::context::ContextLabelsExtractor::handleBelowVerbPaths((uint64_t)v22, a3, v8, (uint64_t)__p);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v41);
        v24 = __p[0];
        __p[0] = 0;
        if (v24)
          operator delete(v24);
      }
      v19 += 8;
    }
    while (v19 != v20);
    for (m = (uint64_t *)*((_QWORD *)a2 + 4); m != *((uint64_t **)a2 + 5); ++m)
    {
      v26 = *m;
      if (*(_QWORD *)(*m + 24) || *(_QWORD *)(v26 + 16) || *(_QWORD *)(v26 + 8))
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, (const void **)this + 20, (const void **)this + 44);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(a3, (unsigned __int8 *)__p, (uint64_t)__p);
        if (SHIBYTE(v41) < 0)
          operator delete(__p[0]);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, (const void **)this + 20, (const void **)this + 47);
        v29 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)a3, (unsigned __int8 *)__p);
        v30 = v29;
        if ((SHIBYTE(v41) & 0x80000000) == 0)
        {
          if (v29)
            goto LABEL_56;
          goto LABEL_58;
        }
        operator delete(__p[0]);
        if (!v30)
          goto LABEL_58;
        goto LABEL_56;
      }
    }
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, (const void **)this + 20, (const void **)this + 47);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(a3, (unsigned __int8 *)__p, (uint64_t)__p);
  if (SHIBYTE(v41) < 0)
    operator delete(__p[0]);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, (const void **)this + 20, (const void **)this + 44);
  v27 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)a3, (unsigned __int8 *)__p);
  v28 = v27;
  if (SHIBYTE(v41) < 0)
  {
    operator delete(__p[0]);
    if (!v28)
      goto LABEL_58;
  }
  else if (!v27)
  {
    goto LABEL_58;
  }
LABEL_56:
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, (const void **)this + 20, (const void **)this + 47);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)a3, (unsigned __int8 *)__p);
  if (SHIBYTE(v41) < 0)
    operator delete(__p[0]);
LABEL_58:
  v31 = (_QWORD **)*((_QWORD *)a2 + 11);
  v32 = (_QWORD **)*((_QWORD *)a2 + 12);
  if (v31 != v32)
  {
    do
    {
      v33 = (uint64_t)*v31;
      nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromSystemDialogAct((const void **)this, *v31, (uint64_t)__p);
      for (n = v41; n; n = (void **)*n)
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, (unsigned __int8 *)n + 16, (uint64_t)(n + 2));
      if (!*(_QWORD *)(v33 + 32))
        nlv4_inference_orchestrator::context::ContextLabelsExtractor::handleBelowVerbPaths(v34, a3, (const void **)this + 5, (uint64_t)__p);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v41);
      v36 = __p[0];
      __p[0] = 0;
      if (v36)
        operator delete(v36);
      ++v31;
    }
    while (v31 != v32);
    for (ii = *((_QWORD *)a2 + 11); ii != *((_QWORD *)a2 + 12); ii += 8)
    {
      v38 = *(_QWORD **)ii;
      if (*(_QWORD *)(*(_QWORD *)ii + 64) || v38[7] || v38[5] || v38[4] || v38[3] || v38[1])
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, (const void **)this + 17, (const void **)this + 44);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(a3, (unsigned __int8 *)__p, (uint64_t)__p);
        if (SHIBYTE(v41) < 0)
          operator delete(__p[0]);
        goto LABEL_80;
      }
    }
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, (const void **)this + 17, (const void **)this + 47);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(a3, (unsigned __int8 *)__p, (uint64_t)__p);
  if (SHIBYTE(v41) < 0)
    operator delete(__p[0]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, (unsigned __int8 *)this + 400, (uint64_t)this + 400);
LABEL_80:
  nlv4_inference_orchestrator::context::ContextLabelsExtractor::postProcessContextLabels(v39, a3);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
}

void sub_1C2250C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a23 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v30);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = operator new(0x28uLL);
  *v16 = 0;
  v16[1] = v9;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  v16[4] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v16 = *v24;
LABEL_38:
    *v24 = v16;
    goto LABEL_39;
  }
  *v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v16)
  {
    v25 = *(_QWORD *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
}

void sub_1C2250F70(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

UsoGraph *nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromGraph@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, const sirinluexternal::UsoGraph *a4@<X3>, uint64_t a5@<X8>)
{
  UsoGraph *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  UsoGraph *v17;
  const void **v18;
  const void **v19;
  const struct __class_type_info *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  const std::string::value_type *v25;
  const std::string::value_type *v26;
  int v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  void **v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  UsoGraph *v36;
  UsoGraphNode *v37;
  uint64_t i;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  std::string *v55;
  std::string::size_type size;
  std::string *v57;
  __int128 v58;
  const std::string::value_type *v59;
  std::string::size_type v60;
  std::string *v61;
  __int128 v62;
  void **v63;
  std::string::size_type v64;
  std::string *v65;
  std::string::value_type *v66;
  std::string::size_type v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  void **v72;
  void *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  UsoGraph *result;
  uint64_t v78;
  uint64_t v79;
  void *__p[2];
  __int128 v81;
  int v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  UsoGraph *v85;
  uint64_t v86;
  int v87;
  __int128 v88;
  std::string v89;
  std::string v90;
  _DWORD v91[2];
  std::string v92;
  void *v93[2];
  unsigned __int8 v94;
  _QWORD *v95;
  _QWORD *v96;
  UsoGraphNode *v97[2];
  std::string v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  const void *v102[2];
  unsigned __int8 v103;
  __int128 v104;
  std::string v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v86 = 1;
  v87 = 0;
  v10 = (UsoGraph *)operator new();
  MEMORY[0x1C3BB9154](v10, &v86);
  v85 = v10;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_DWORD *)(a5 + 32) = 1065353216;
  v11 = *(_QWORD *)(a1 + 424);
  v12 = *(std::__shared_weak_count **)(a1 + 432);
  v79 = a5;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v83 = v11;
    v84 = v12;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    v83 = *(_QWORD *)(a1 + 424);
    v84 = 0;
  }
  v17 = v85;
  siri::ontology::UsoGraphProtoReader::fromProtobuf((siri::ontology::UsoGraphProtoReader *)&v83, a4, v85);
  siri::ontology::UsoGraph::getNodes((siri::ontology::UsoGraph *)v17);
  v18 = (const void **)*((_QWORD *)&v99 + 1);
  v19 = (const void **)v99;
  if ((_QWORD)v99 != *((_QWORD *)&v99 + 1))
  {
    v20 = (const struct __class_type_info *)MEMORY[0x1E0DA35A8];
    do
    {
      if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v19 + 16))(*v19) == 1)
      {
        if (!v21)
          __cxa_bad_cast();
        v22 = v21;
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v104, a2, (const void **)(a1 + 280));
        v23 = v22[3];
        v26 = *(const std::string::value_type **)(v23 + 8);
        v24 = v23 + 8;
        v25 = v26;
        v27 = *(char *)(v24 + 23);
        if (v27 >= 0)
          v28 = (const std::string::value_type *)v24;
        else
          v28 = v25;
        if (v27 >= 0)
          v29 = *(unsigned __int8 *)(v24 + 23);
        else
          v29 = *(_QWORD *)(v24 + 8);
        v30 = std::string::append((std::string *)&v104, v28, v29);
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v98.__r_.__value_.__r.__words[0] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)v97 = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        if (v105.__r_.__value_.__s.__data_[7] < 0)
          operator delete((void *)v104);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v88, a2, (const void **)(a1 + 304));
        (*(void (**)(void **__return_ptr, _QWORD *))(*v22 + 48))(__p, v22);
        if ((SBYTE7(v81) & 0x80u) == 0)
          v32 = __p;
        else
          v32 = (void **)__p[0];
        if ((SBYTE7(v81) & 0x80u) == 0)
          v33 = BYTE7(v81);
        else
          v33 = (std::string::size_type)__p[1];
        v34 = std::string::append((std::string *)&v88, (const std::string::value_type *)v32, v33);
        v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v105.__r_.__value_.__r.__words[0] = v34->__r_.__value_.__r.__words[2];
        v104 = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        if (SBYTE7(v81) < 0)
          operator delete(__p[0]);
        if (v89.__r_.__value_.__s.__data_[7] < 0)
          operator delete((void *)v88);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v79, (unsigned __int8 *)v97, (uint64_t)v97);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v79, (unsigned __int8 *)&v104, (uint64_t)&v104);
        if (v105.__r_.__value_.__s.__data_[7] < 0)
          operator delete((void *)v104);
        if (v98.__r_.__value_.__s.__data_[7] < 0)
          operator delete(v97[0]);
      }
      ++v19;
    }
    while (v19 != v18);
    v19 = (const void **)v99;
  }
  if (v19)
  {
    *((_QWORD *)&v99 + 1) = v19;
    operator delete(v19);
  }
  v36 = v85;
  std::string::basic_string[abi:ne180100]<0>(v102, ".");
  *(_OWORD *)__p = 0u;
  v81 = 0u;
  v82 = 1065353216;
  v37 = (UsoGraphNode *)*((_QWORD *)v36 + 11);
  v100 = 0u;
  v101 = 0u;
  v99 = 0u;
  v104 = (unint64_t)v37;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v105, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    v37 = (UsoGraphNode *)v104;
  }
  else
  {
    v105 = *(std::string *)a3;
  }
  v97[0] = v37;
  v97[1] = 0;
  v98 = v105;
  memset(&v105, 0, sizeof(v105));
  std::deque<std::tuple<siri::ontology::UsoGraphNode const*,siri::ontology::UsoGraphEdge const*,std::string const>>::push_back(&v99, (uint64_t)v97);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  for (i = *((_QWORD *)&v101 + 1); *((_QWORD *)&v101 + 1); i = *((_QWORD *)&v101 + 1))
  {
    v39 = i - 1;
    v40 = *((_QWORD *)&v99 + 1);
    v41 = v39 + v101;
    v42 = (v39 + (uint64_t)v101) / 0x66uLL;
    v43 = (v39 + (uint64_t)v101) % 0x66uLL;
    v44 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * (v41 / 0x66)) + 40 * (v41 % 0x66);
    v97[0] = *(UsoGraphNode **)v44;
    v97[1] = *(UsoGraphNode **)(v44 + 8);
    if (*(char *)(v44 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)(v44 + 16), *(_QWORD *)(v44 + 24));
      v40 = *((_QWORD *)&v99 + 1);
      v39 = *((_QWORD *)&v101 + 1) - 1;
      v41 = *((_QWORD *)&v101 + 1) - 1 + v101;
      v42 = v41 / 0x66;
      v43 = v41 % 0x66;
    }
    else
    {
      v45 = *(_OWORD *)(v44 + 16);
      v98.__r_.__value_.__r.__words[2] = *(_QWORD *)(v44 + 32);
      *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v45;
    }
    v46 = *(_QWORD *)(v40 + 8 * v42) + 40 * v43;
    if (*(char *)(v46 + 39) < 0)
    {
      operator delete(*(void **)(v46 + 16));
      v39 = *((_QWORD *)&v101 + 1) - 1;
      v40 = *((_QWORD *)&v99 + 1);
      v41 = *((_QWORD *)&v101 + 1) - 1 + v101;
    }
    v48 = v100 - v40;
    v47 = v48 == 0;
    v49 = 102 * (v48 >> 3) - 1;
    *((_QWORD *)&v101 + 1) = v39;
    if (v47)
      v50 = 0;
    else
      v50 = v49;
    if (v50 - v41 >= 0xCC)
    {
      operator delete(*(void **)(v100 - 8));
      *(_QWORD *)&v100 = v100 - 8;
    }
    siri::ontology::UsoGraph::getSuccessorsWithEdges((siri::ontology::UsoGraph *)v97[0]->var1, v97[0]);
    v51 = v104;
    if ((_QWORD)v104)
    {
      *((_QWORD *)&v104 + 1) = v104;
      operator delete((void *)v51);
    }
    if ((_QWORD)v51 == *((_QWORD *)&v51 + 1))
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (unsigned __int8 *)&v98, (uint64_t)&v98);
    }
    else
    {
      siri::ontology::UsoGraph::getSuccessorsWithEdges((siri::ontology::UsoGraph *)v97[0]->var1, v97[0]);
      v53 = v95;
      v52 = v96;
      if (v95 != v96)
      {
        while (1)
        {
          (*(void (**)(void **__return_ptr))(*(_QWORD *)*v53 + 48))(v93);
          v54 = v53[1];
          if (*(char *)(v54 + 55) < 0)
            std::string::__init_copy_ctor_external(&v92, *(const std::string::value_type **)(v54 + 32), *(_QWORD *)(v54 + 40));
          else
            v92 = *(std::string *)(v54 + 32);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v90, (const void **)&v98.__r_.__value_.__l.__data_, v102);
          if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v55 = &v92;
          else
            v55 = (std::string *)v92.__r_.__value_.__r.__words[0];
          if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v92.__r_.__value_.__r.__words[2]);
          else
            size = v92.__r_.__value_.__l.__size_;
          v57 = std::string::append(&v90, (const std::string::value_type *)v55, size);
          v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
          v89.__r_.__value_.__r.__words[0] = v57->__r_.__value_.__r.__words[2];
          v88 = v58;
          v57->__r_.__value_.__l.__size_ = 0;
          v57->__r_.__value_.__r.__words[2] = 0;
          v57->__r_.__value_.__r.__words[0] = 0;
          if ((v103 & 0x80u) == 0)
            v59 = (const std::string::value_type *)v102;
          else
            v59 = (const std::string::value_type *)v102[0];
          if ((v103 & 0x80u) == 0)
            v60 = v103;
          else
            v60 = (std::string::size_type)v102[1];
          v61 = std::string::append((std::string *)&v88, v59, v60);
          v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
          v105.__r_.__value_.__r.__words[0] = v61->__r_.__value_.__r.__words[2];
          v104 = v62;
          v61->__r_.__value_.__l.__size_ = 0;
          v61->__r_.__value_.__r.__words[2] = 0;
          v61->__r_.__value_.__r.__words[0] = 0;
          if ((v94 & 0x80u) == 0)
            v63 = v93;
          else
            v63 = (void **)v93[0];
          if ((v94 & 0x80u) == 0)
            v64 = v94;
          else
            v64 = (std::string::size_type)v93[1];
          v65 = std::string::append((std::string *)&v104, (const std::string::value_type *)v63, v64);
          v66 = (std::string::value_type *)v65->__r_.__value_.__r.__words[0];
          v67 = v65->__r_.__value_.__l.__size_;
          v91[0] = v65->__r_.__value_.__r.__words[2];
          *(_DWORD *)((char *)v91 + 3) = *(_DWORD *)((char *)&v65->__r_.__value_.__r.__words[2] + 3);
          v68 = SHIBYTE(v65->__r_.__value_.__r.__words[2]);
          v65->__r_.__value_.__l.__size_ = 0;
          v65->__r_.__value_.__r.__words[2] = 0;
          v65->__r_.__value_.__r.__words[0] = 0;
          if (v105.__r_.__value_.__s.__data_[7] < 0)
            operator delete((void *)v104);
          if (v89.__r_.__value_.__s.__data_[7] < 0)
            operator delete((void *)v88);
          if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v90.__r_.__value_.__l.__data_);
          v69 = *v53;
          v70 = v53[1];
          *(_QWORD *)&v88 = *v53;
          *((_QWORD *)&v88 + 1) = v70;
          if (v68 < 0)
          {
            std::string::__init_copy_ctor_external(&v89, v66, v67);
            v70 = *((_QWORD *)&v88 + 1);
            v69 = v88;
          }
          else
          {
            v89.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
            v89.__r_.__value_.__l.__size_ = v67;
            LODWORD(v89.__r_.__value_.__r.__words[2]) = v91[0];
            *(_DWORD *)((char *)&v89.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v91 + 3);
            *((_BYTE *)&v89.__r_.__value_.__s + 23) = v68;
          }
          *(_QWORD *)&v104 = v69;
          *((_QWORD *)&v104 + 1) = v70;
          v105 = v89;
          memset(&v89, 0, sizeof(v89));
          std::deque<std::tuple<siri::ontology::UsoGraphNode const*,siri::ontology::UsoGraphEdge const*,std::string const>>::push_back(&v99, (uint64_t)&v104);
          if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v105.__r_.__value_.__l.__data_);
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v89.__r_.__value_.__l.__data_);
            if (v68 < 0)
LABEL_104:
              operator delete(v66);
          }
          else if (v68 < 0)
          {
            goto LABEL_104;
          }
          if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v92.__r_.__value_.__l.__data_);
          if ((char)v94 < 0)
            operator delete(v93[0]);
          v53 += 2;
          if (v53 == v52)
          {
            v53 = v95;
            break;
          }
        }
      }
      if (v53)
      {
        v96 = v53;
        operator delete(v53);
      }
    }
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
  }
  std::deque<std::tuple<siri::ontology::UsoGraphNode const*,siri::ontology::UsoGraphEdge const*,std::string const>>::~deque[abi:ne180100]((uint64_t)&v99);
  if ((char)v103 < 0)
    operator delete((void *)v102[0]);
  v71 = (unsigned __int8 *)v81;
  if ((_QWORD)v81)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v79, v71 + 16, (uint64_t)(v71 + 16));
      v71 = *(unsigned __int8 **)v71;
    }
    while (v71);
    v72 = (void **)v81;
  }
  else
  {
    v72 = 0;
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v72);
  v73 = __p[0];
  __p[0] = 0;
  if (v73)
    operator delete(v73);
  v74 = v84;
  if (v84)
  {
    v75 = (unint64_t *)&v84->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  result = v85;
  if (v85)
  {
    v78 = MEMORY[0x1C3BB916C]();
    return (UsoGraph *)MEMORY[0x1C3BB9B44](v78, 0x10A0C403D23BABBLL);
  }
  return result;
}

void sub_1C2251914(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;
  void *v55;
  _Unwind_Exception *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v55 = *(void **)(v54 - 224);
  if (v55)
  {
    *(_QWORD *)(v54 - 216) = v55;
    operator delete(v55);
  }
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&v58);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v57);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](&v59);
  _Unwind_Resume(v56);
}

void sub_1C22519D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *v66;
  uint64_t v67;

  operator delete(v66);
  if (a48 < 0)
    operator delete(__p);
  if (a55 < 0)
    operator delete(a50);
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }
  if (a66 < 0)
    operator delete(a61);
  std::deque<std::tuple<siri::ontology::UsoGraphNode const*,siri::ontology::UsoGraphEdge const*,std::string const>>::~deque[abi:ne180100](v67 - 224);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a17);
  if (*(char *)(v67 - 145) < 0)
    operator delete(*(void **)(v67 - 168));
  JUMPOUT(0x1C2251AC4);
}

void nlv4_inference_orchestrator::context::ContextLabelsExtractor::handleBelowVerbPaths(uint64_t a1, uint64_t a2, const void **a3, uint64_t a4)
{
  size_t v6;
  void **v7;
  const void *v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void **v13;
  int64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int v18;
  void *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void **v23;
  int64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  int v28;
  void *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void **v33;
  int64_t v34;
  char *v35;
  int v36;
  void *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  std::sub_match<const char *> *v41;
  int v42;
  void **v43;
  int64_t size;
  std::string::size_type v45;
  std::string *v46;
  void **v47;
  int64_t v48;
  char *v49;
  char *v50;
  std::string::size_type v51;
  uint64_t v52;
  char *v53;
  std::string *v54;
  int64_t v55;
  char *v56;
  char *v57;
  std::string::size_type v58;
  std::string::size_type v59;
  int64_t v60;
  std::string::size_type v61;
  char *v62;
  int64_t v63;
  std::string *v64;
  int64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  int64_t v70;
  std::string *v71;
  int64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  int64_t v76;
  char v77;
  std::string *v78;
  char *v79;
  int64_t v80;
  char *v81;
  int v82;
  std::string *v83;
  int64_t v84;
  char *v85;
  char *v86;
  int v87;
  std::string *v88;
  int64_t v89;
  char *v90;
  int v91;
  void *v92;
  uint64_t v93;
  char *v94;
  int v95;
  int64_t v96;
  std::string *v97;
  int64_t v98;
  char *v99;
  int v100;
  int64_t v101;
  std::string *v102;
  int64_t v103;
  char *v104;
  char v105;
  std::__shared_weak_count *v106;
  unint64_t *p_shared_owners;
  unint64_t v108;
  unsigned __int8 *v109;
  void **v110;
  void *v111;
  uint64_t v112;
  char v113;
  void *__p[2];
  char v116;
  void *v117[2];
  char v118;
  std::string v119;
  std::string v120;
  std::string v121;
  std::string v122;
  std::string v123;
  void *v124[8];
  char v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  char v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  int v133;
  std::regex_traits<char> v134[2];
  std::__shared_weak_count *v135;
  void *v136[2];
  unsigned __int8 v137;
  void *v138[2];
  char v139;
  void *v140;
  int64_t v141;
  unsigned __int8 v142;
  void *v143[2];
  unsigned __int8 v144;
  void *v145[2];
  unsigned __int8 v146;
  void **v147;
  int64_t v148;
  unsigned __int8 v149;
  std::string __str[2];
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  char v157;
  uint64_t v158;

  std::string::basic_string[abi:ne180100]<0>(&v147, "::");
  std::string::basic_string[abi:ne180100]<0>(v145, "::common");
  std::string::basic_string[abi:ne180100]<0>(v143, "_verb=");
  std::string::basic_string[abi:ne180100]<0>(&v140, ".");
  if (*((char *)a3 + 23) >= 0)
    v6 = *((unsigned __int8 *)a3 + 23);
  else
    v6 = (size_t)a3[1];
  std::string::basic_string[abi:ne180100]((uint64_t)v138, v6 + 12);
  if (v139 >= 0)
    v7 = v138;
  else
    v7 = (void **)v138[0];
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0)
      v8 = a3;
    else
      v8 = *a3;
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, "_below_verb=");
  std::string::basic_string[abi:ne180100]<0>(v136, "_verb_entity");
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v134, "((\\w+)::common_(\\w+)(\\.)?(\\w+))");
  v131 = 0u;
  v132 = 0u;
  v133 = 1065353216;
  v124[6] = 0;
  v124[7] = 0;
  v125 = 0;
  v126 = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  v130 = 0;
  memset(v124, 0, 41);
  v9 = *(uint64_t **)(a4 + 16);
  if (v9)
  {
    v112 = a4;
    v113 = 0;
    do
    {
      v10 = *((unsigned __int8 *)v9 + 39);
      if (*((char *)v9 + 39) < 0)
      {
        v11 = (char *)v9[2];
        v12 = v9[3];
      }
      else
      {
        v11 = (char *)(v9 + 2);
        v12 = *((unsigned __int8 *)v9 + 39);
      }
      if ((v137 & 0x80u) == 0)
        v13 = v136;
      else
        v13 = (void **)v136[0];
      if ((v137 & 0x80u) == 0)
        v14 = v137;
      else
        v14 = (int64_t)v136[1];
      if (v14)
      {
        if (v12 >= v14)
        {
          v17 = &v11[v12];
          v18 = *(char *)v13;
          v19 = v11;
          do
          {
            v20 = v12 - v14;
            if (v20 == -1)
              break;
            v21 = (char *)memchr(v19, v18, v20 + 1);
            if (!v21)
              break;
            v22 = v21;
            if (!memcmp(v21, v13, v14))
            {
              if (v22 != v17 && v22 - v11 != -1)
                goto LABEL_225;
              break;
            }
            v19 = v22 + 1;
            v12 = v17 - (v22 + 1);
          }
          while (v12 >= v14);
        }
        if ((v10 & 0x80) != 0)
        {
          v15 = (char *)v9[2];
          v16 = v9[3];
        }
        else
        {
          v15 = (char *)(v9 + 2);
          v16 = v10;
        }
        if ((v144 & 0x80u) == 0)
          v23 = v143;
        else
          v23 = (void **)v143[0];
        if ((v144 & 0x80u) == 0)
          v24 = v144;
        else
          v24 = (int64_t)v143[1];
        if (v24)
        {
          if (v16 >= v24)
          {
            v27 = &v15[v16];
            v28 = *(char *)v23;
            v29 = v15;
            do
            {
              v30 = v16 - v24;
              if (v30 == -1)
                break;
              v31 = (char *)memchr(v29, v28, v30 + 1);
              if (!v31)
                break;
              v32 = v31;
              if (!memcmp(v31, v23, v24))
              {
                if (v32 != v27 && v32 - v15 != -1)
                  goto LABEL_225;
                break;
              }
              v29 = v32 + 1;
              v16 = v27 - (v32 + 1);
            }
            while (v16 >= v24);
          }
          if ((v10 & 0x80) != 0)
          {
            v25 = (char *)v9[2];
            v26 = v9[3];
          }
          else
          {
            v25 = (char *)(v9 + 2);
            v26 = v10;
          }
          if ((v146 & 0x80u) == 0)
            v33 = v145;
          else
            v33 = (void **)v145[0];
          if ((v146 & 0x80u) == 0)
            v34 = v146;
          else
            v34 = (int64_t)v145[1];
          if (v34)
          {
            if (v26 >= v34)
            {
              v35 = &v25[v26];
              v36 = *(char *)v33;
              v37 = v25;
              do
              {
                v38 = v26 - v34;
                if (v38 == -1)
                  break;
                v39 = (char *)memchr(v37, v36, v38 + 1);
                if (!v39)
                  break;
                v40 = v39;
                if (!memcmp(v39, v33, v34))
                {
                  if (v40 == v35 || v40 - v25 == -1)
                    break;
                  goto LABEL_73;
                }
                v37 = v40 + 1;
                v26 = v35 - (v40 + 1);
              }
              while (v26 >= v34);
            }
          }
          else
          {
LABEL_73:
            if ((v10 & 0x80) != 0)
            {
              v41 = (std::sub_match<const char *> *)v9[2];
              v10 = v9[3];
            }
            else
            {
              v41 = (std::sub_match<const char *> *)(v9 + 2);
            }
            v151 = 0;
            v152 = 0;
            v153 = 0;
            v154 = 0;
            v155 = 0;
            v156 = 0;
            v157 = 0;
            v158 = 0;
            memset(__str, 0, 41);
            v42 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v134, v41, (std::sub_match<const char *> *)((char *)v41 + v10), (std::vector<std::csub_match> *)__str, 0);
            std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)v124, (uint64_t)v41, (uint64_t)v41 + v10, (uint64_t *)__str, 0);
            if (__str[0].__r_.__value_.__r.__words[0])
              operator delete(__str[0].__r_.__value_.__l.__data_);
            if (v42)
            {
              v43 = v124;
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v124[1] - (char *)v124[0]) >> 3) > 1)
                v43 = (void **)v124[0];
              if (*((_BYTE *)v43 + 40))
              {
                std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, (char *)v43[3], (char *)v43[4], (_BYTE *)v43[4] - (_BYTE *)v43[3]);
                size = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
                v45 = __str[0].__r_.__value_.__r.__words[0];
              }
              else
              {
                v45 = 0;
                size = 0;
                memset(__str, 0, 24);
              }
              if ((size & 0x80u) == 0)
                v46 = __str;
              else
                v46 = (std::string *)v45;
              if ((v149 & 0x80u) == 0)
                v47 = (void **)&v147;
              else
                v47 = v147;
              if ((v149 & 0x80u) == 0)
                v48 = v149;
              else
                v48 = v148;
              if (v48)
              {
                if ((size & 0x80u) != 0)
                  size = __str[0].__r_.__value_.__l.__size_;
                v49 = (char *)v46 + size;
                if (size >= v48)
                {
                  v87 = *(char *)v47;
                  v88 = v46;
                  do
                  {
                    v89 = size - v48;
                    if (v89 == -1)
                      break;
                    v90 = (char *)memchr(v88, v87, v89 + 1);
                    if (!v90)
                      break;
                    v50 = v90;
                    if (!memcmp(v90, v47, v48))
                      goto LABEL_98;
                    v88 = (std::string *)(v50 + 1);
                    size = v49 - (v50 + 1);
                  }
                  while (size >= v48);
                }
                v50 = v49;
LABEL_98:
                if (v50 == v49)
                  v51 = -1;
                else
                  v51 = v50 - (char *)v46;
              }
              else
              {
                v51 = 0;
              }
              std::string::basic_string(&v123, __str, 0, v51, (std::allocator<char> *)&v122);
              if (*((char *)v9 + 39) < 0)
              {
                v53 = (char *)v9[2];
                v52 = v9[3];
              }
              else
              {
                v52 = *((unsigned __int8 *)v9 + 39);
                v53 = (char *)(v9 + 2);
              }
              if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v54 = &v123;
              else
                v54 = (std::string *)v123.__r_.__value_.__r.__words[0];
              if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v55 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
              else
                v55 = v123.__r_.__value_.__l.__size_;
              if (v55)
              {
                v56 = &v53[v52];
                if (v52 >= v55)
                {
                  v91 = v54->__r_.__value_.__s.__data_[0];
                  v92 = v53;
                  do
                  {
                    v93 = v52 - v55;
                    if (v93 == -1)
                      break;
                    v94 = (char *)memchr(v92, v91, v93 + 1);
                    if (!v94)
                      break;
                    v57 = v94;
                    if (!memcmp(v94, v54, v55))
                      goto LABEL_114;
                    v92 = v57 + 1;
                    v52 = v56 - (v57 + 1);
                  }
                  while (v52 >= v55);
                }
                v57 = v56;
LABEL_114:
                if (v57 == v56)
                  v58 = -1;
                else
                  v58 = v57 - v53;
              }
              else
              {
                v58 = 0;
              }
              std::string::basic_string(&v122, (const std::string *)(v9 + 2), 0, v58, (std::allocator<char> *)&v121);
              v59 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
              if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v59 = v123.__r_.__value_.__l.__size_;
              v60 = v149;
              if ((v149 & 0x80u) != 0)
                v60 = v148;
              if (*((char *)v9 + 39) < 0)
                v61 = v9[3];
              else
                v61 = *((unsigned __int8 *)v9 + 39);
              std::string::basic_string(&v121, (const std::string *)(v9 + 2), v59 + v58 + v60, v61, (std::allocator<char> *)&v120);
              if ((v142 & 0x80u) == 0)
                v62 = (char *)&v140;
              else
                v62 = (char *)v140;
              if ((v142 & 0x80u) == 0)
                v63 = v142;
              else
                v63 = v141;
              if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v64 = &v121;
              else
                v64 = (std::string *)v121.__r_.__value_.__r.__words[0];
              if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v65 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
              else
                v65 = v121.__r_.__value_.__l.__size_;
              if (v63)
              {
                v66 = (char *)v64 + v65;
                if (v65 >= v63)
                {
                  v95 = *v62;
                  v96 = v65;
                  v97 = v64;
                  do
                  {
                    v98 = v96 - v63;
                    if (v98 == -1)
                      break;
                    v99 = (char *)memchr(v97, v95, v98 + 1);
                    if (!v99)
                      break;
                    v67 = v99;
                    if (!memcmp(v99, v62, v63))
                      goto LABEL_140;
                    v97 = (std::string *)(v67 + 1);
                    v96 = v66 - (v67 + 1);
                  }
                  while (v96 >= v63);
                }
                v67 = (char *)v64 + v65;
LABEL_140:
                v68 = v67 - (char *)v64;
                if (v67 == v66)
                  v68 = -1;
              }
              else
              {
                v68 = 0;
              }
              std::string::basic_string(&v120, &v121, v68 + v63, v65, (std::allocator<char> *)&v119);
              if ((v142 & 0x80u) == 0)
                v69 = (char *)&v140;
              else
                v69 = (char *)v140;
              if ((v142 & 0x80u) == 0)
                v70 = v142;
              else
                v70 = v141;
              if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v71 = &v120;
              else
                v71 = (std::string *)v120.__r_.__value_.__r.__words[0];
              if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v72 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
              else
                v72 = v120.__r_.__value_.__l.__size_;
              if (v70)
              {
                v73 = (char *)v71 + v72;
                if (v72 >= v70)
                {
                  v100 = *v69;
                  v101 = v72;
                  v102 = v71;
                  do
                  {
                    v103 = v101 - v70;
                    if (v103 == -1)
                      break;
                    v104 = (char *)memchr(v102, v100, v103 + 1);
                    if (!v104)
                      break;
                    v74 = v104;
                    if (!memcmp(v104, v69, v70))
                      goto LABEL_159;
                    v102 = (std::string *)(v74 + 1);
                    v101 = v73 - (v74 + 1);
                  }
                  while (v101 >= v70);
                }
                v74 = (char *)v71 + v72;
LABEL_159:
                v75 = v74 - (char *)v71;
                if (v74 == v73)
                  v75 = -1;
              }
              else
              {
                v75 = 0;
              }
              std::string::basic_string(&v119, &v120, v75 + v70, v72, (std::allocator<char> *)v117);
              v76 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
              v77 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
              if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v78 = &v119;
              else
                v78 = (std::string *)v119.__r_.__value_.__r.__words[0];
              if ((v142 & 0x80u) == 0)
                v79 = (char *)&v140;
              else
                v79 = (char *)v140;
              if ((v142 & 0x80u) == 0)
                v80 = v142;
              else
                v80 = v141;
              if (v80)
              {
                if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v76 = v119.__r_.__value_.__l.__size_;
                if (v76 >= v80)
                {
                  v81 = (char *)v78 + v76;
                  v82 = *v79;
                  v83 = v78;
                  do
                  {
                    v84 = v76 - v80;
                    if (v84 == -1)
                      break;
                    v85 = (char *)memchr(v83, v82, v84 + 1);
                    if (!v85)
                      break;
                    v86 = v85;
                    if (!memcmp(v85, v79, v80))
                    {
                      if (v86 == v81 || v86 - (char *)v78 == -1)
                        break;
                      goto LABEL_208;
                    }
                    v83 = (std::string *)(v86 + 1);
                    v76 = v81 - (v86 + 1);
                  }
                  while (v76 >= v80);
                }
              }
              else
              {
LABEL_208:
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)v117, (const void **)v138, (const void **)&v119.__r_.__value_.__l.__data_);
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, (const void **)v138, (const void **)&v120.__r_.__value_.__l.__data_);
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2, (unsigned __int8 *)v117, (uint64_t)v117);
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2, (unsigned __int8 *)__p, (uint64_t)__p);
                if (v116 < 0)
                  operator delete(__p[0]);
                if (v118 < 0)
                  operator delete(v117[0]);
                v113 = 1;
                v77 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
              }
              if (v77 < 0)
                operator delete(v119.__r_.__value_.__l.__data_);
              if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v120.__r_.__value_.__l.__data_);
              if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v121.__r_.__value_.__l.__data_);
              if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v122.__r_.__value_.__l.__data_);
              if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v123.__r_.__value_.__l.__data_);
              if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str[0].__r_.__value_.__l.__data_);
            }
          }
        }
      }
LABEL_225:
      v9 = (uint64_t *)*v9;
    }
    while (v9);
    if (v124[0])
      operator delete(v124[0]);
    a4 = v112;
    v105 = v113;
  }
  else
  {
    v105 = 0;
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v132);
  if ((_QWORD)v131)
    operator delete((void *)v131);
  v106 = v135;
  if (v135)
  {
    p_shared_owners = (unint64_t *)&v135->__shared_owners_;
    do
      v108 = __ldaxr(p_shared_owners);
    while (__stlxr(v108 - 1, p_shared_owners));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  std::locale::~locale(&v134[0].__loc_);
  if ((char)v137 < 0)
    operator delete(v136[0]);
  if (v139 < 0)
    operator delete(v138[0]);
  if ((char)v142 < 0)
    operator delete(v140);
  if ((char)v144 < 0)
    operator delete(v143[0]);
  if ((char)v146 < 0)
    operator delete(v145[0]);
  if ((char)v149 < 0)
  {
    operator delete(v147);
    if ((v105 & 1) == 0)
      return;
  }
  else if ((v105 & 1) == 0)
  {
    return;
  }
  nlv4_inference_orchestrator::context::generatePlaceholderVerbPaths((uint64_t)__str, a4);
  v109 = (unsigned __int8 *)__str[0].__r_.__value_.__r.__words[2];
  if (__str[0].__r_.__value_.__r.__words[2])
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2, v109 + 16, (uint64_t)(v109 + 16));
      v109 = *(unsigned __int8 **)v109;
    }
    while (v109);
    v110 = (void **)__str[0].__r_.__value_.__r.__words[2];
  }
  else
  {
    v110 = 0;
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v110);
  v111 = (void *)__str[0].__r_.__value_.__r.__words[0];
  __str[0].__r_.__value_.__r.__words[0] = 0;
  if (v111)
    operator delete(v111);
}

void sub_1C2252528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  std::locale a72;
  uint64_t a73;
  void *a74;
  char a75;
  void *a76;
  char a77;
  void *a78;
  char a79;
  void *a80;
  uint64_t v80;

  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  if (a40 < 0)
    operator delete(a35);
  if (a46 < 0)
    operator delete(a41);
  if (a52 < 0)
    operator delete(a47);
  if (*(char *)(v80 - 185) < 0)
    operator delete(*(void **)(v80 - 208));
  if (a53)
    operator delete(a53);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a67);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a73);
  std::locale::~locale(&a72);
  if (a75 < 0)
    operator delete(a74);
  if (a77 < 0)
    operator delete(a76);
  if (a79 < 0)
    operator delete(a78);
  if (SLOBYTE(STACK[0x20F]) < 0)
    operator delete(a80);
  if (*(char *)(v80 - 233) < 0)
    operator delete(*(void **)(v80 - 256));
  if (*(char *)(v80 - 209) < 0)
    operator delete(*(void **)(v80 - 232));
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *result;

  result = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a2);
  if (result)
    return (unsigned __int8 *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::erase(a1, (void **)result);
  return result;
}

void nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromSystemDialogAct(const void **a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unsigned __int8 *v16;
  void **v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[5];
  _BYTE v22[32];
  int v23;
  __int128 v24;
  std::string::size_type v25;
  void *v26[2];
  unsigned __int8 v27;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  if (a2[5])
  {
    v6 = "SystemPrompted";
  }
  else if (a2[4])
  {
    v6 = "SystemOffered";
  }
  else if (a2[1])
  {
    v6 = "SystemGaveOptions";
  }
  else if (a2[3])
  {
    v6 = "SystemInformed";
  }
  else if (a2[8])
  {
    v6 = "SystemReportedSuccess";
  }
  else if (a2[7])
  {
    v6 = "SystemReportedFailure";
  }
  else
  {
    v6 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(v26, v6);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)v22, a1 + 5, a1 + 29);
  if ((v27 & 0x80u) == 0)
    v7 = (const std::string::value_type *)v26;
  else
    v7 = (const std::string::value_type *)v26[0];
  if ((v27 & 0x80u) == 0)
    v8 = v27;
  else
    v8 = (std::string::size_type)v26[1];
  v9 = std::string::append((std::string *)v22, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v25 = v9->__r_.__value_.__r.__words[2];
  v24 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if ((v22[23] & 0x80000000) != 0)
    operator delete(*(void **)v22);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, (unsigned __int8 *)&v24, (uint64_t)&v24);
  memset(v22, 0, sizeof(v22));
  v23 = 1065353216;
  v11 = a2[5];
  if (v11)
  {
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromSpecificSystemDialogAct((uint64_t)a1, v11, (uint64_t)__p);
    goto LABEL_30;
  }
  v12 = a2[4];
  if (v12)
  {
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromSpecificSystemDialogAct((uint64_t)a1, v12, (uint64_t)__p);
    goto LABEL_30;
  }
  v13 = a2[1];
  if (v13)
  {
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromSpecificSystemDialogAct((nlv4_inference_orchestrator::context::ContextLabelsExtractor *)a1, v13, (uint64_t)__p);
    goto LABEL_30;
  }
  v14 = a2[3];
  if (v14)
  {
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromSpecificSystemDialogAct((uint64_t)a1, v14, (uint64_t)__p);
LABEL_30:
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)v22, (uint64_t *)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)__p[2]);
    v15 = __p[0];
    __p[0] = 0;
    if (v15)
      operator delete(v15);
    goto LABEL_32;
  }
  v19 = a2[8];
  if (v19)
  {
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromSpecificSystemDialogAct((uint64_t)a1, v19, (uint64_t)__p);
  }
  else
  {
    v20 = a2[7];
    if (!v20)
      goto LABEL_32;
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromSpecificSystemDialogAct((uint64_t)a1, v20, (uint64_t)__p);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)v22, (uint64_t *)__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
LABEL_32:
  v16 = *(unsigned __int8 **)&v22[16];
  if (*(_QWORD *)&v22[16])
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, v16 + 16, (uint64_t)(v16 + 16));
      v16 = *(unsigned __int8 **)v16;
    }
    while (v16);
    v17 = *(void ***)&v22[16];
  }
  else
  {
    v17 = 0;
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v17);
  v18 = *(void **)v22;
  *(_QWORD *)v22 = 0;
  if (v18)
    operator delete(v18);
  if (SHIBYTE(v25) < 0)
    operator delete((void *)v24);
  if ((char)v27 < 0)
    operator delete(v26[0]);
}

void sub_1C2252970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  if (*(char *)(v8 - 57) < 0)
    operator delete(*(void **)(v8 - 80));
  if (*(char *)(v8 - 33) < 0)
    operator delete(*(void **)(v8 - 56));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v7);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::context::ContextLabelsExtractor::postProcessContextLabels(uint64_t a1, uint64_t a2)
{
  uint64_t *i;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void **v7;
  int64_t v8;
  char *v9;
  int v10;
  void *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  std::string::size_type v18;
  int v19;
  void *v20;
  char *v21;
  void *v22;
  unsigned __int8 *v23;
  void **v24;
  void *v25;
  void *v26[2];
  void *v27[2];
  int v28;
  std::string v29;
  void *__p[2];
  unsigned __int8 v31;
  char v32;

  *(_OWORD *)v26 = 0u;
  *(_OWORD *)v27 = 0u;
  v28 = 1065353216;
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, ".primitive_String");
    v4 = *((unsigned __int8 *)i + 39);
    if (*((char *)i + 39) < 0)
    {
      v5 = (char *)i[2];
      v6 = i[3];
    }
    else
    {
      v5 = (char *)(i + 2);
      v6 = *((unsigned __int8 *)i + 39);
    }
    if ((v31 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v31 & 0x80u) == 0)
      v8 = v31;
    else
      v8 = (int64_t)__p[1];
    if (v8)
    {
      if (v6 >= v8)
      {
        v9 = &v5[v6];
        v10 = *(char *)v7;
        v11 = v5;
        do
        {
          v12 = v6 - v8;
          if (v12 == -1)
            break;
          v13 = (char *)memchr(v11, v10, v12 + 1);
          if (!v13)
            break;
          v14 = v13;
          if (!memcmp(v13, v7, v8))
          {
            if (v14 == v9 || v14 - v5 == -1)
              break;
            goto LABEL_22;
          }
          v11 = v14 + 1;
          v6 = v9 - (v14 + 1);
        }
        while (v6 >= v8);
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v26, (unsigned __int8 *)i + 16, (uint64_t)(i + 2));
      goto LABEL_33;
    }
LABEL_22:
    if ((v4 & 0x80) != 0)
    {
      v15 = (char *)i[2];
      v4 = i[3];
      if (v8)
      {
LABEL_24:
        v16 = &v15[v4];
        if (v4 >= v8)
        {
          v19 = *(char *)v7;
          v20 = v15;
          do
          {
            if (v4 - v8 == -1)
              break;
            v21 = (char *)memchr(v20, v19, v4 - v8 + 1);
            if (!v21)
              break;
            v17 = v21;
            if (!memcmp(v21, v7, v8))
              goto LABEL_26;
            v20 = v17 + 1;
            v4 = v16 - (v17 + 1);
          }
          while (v4 >= v8);
        }
        v17 = v16;
LABEL_26:
        if (v17 == v16)
          v18 = -1;
        else
          v18 = v17 - v15;
        goto LABEL_31;
      }
    }
    else
    {
      v15 = (char *)(i + 2);
      if (v8)
        goto LABEL_24;
    }
    v18 = 0;
LABEL_31:
    std::string::basic_string(&v29, (const std::string *)(i + 2), 0, v18, (std::allocator<char> *)&v32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v26, (unsigned __int8 *)&v29, (uint64_t)&v29);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
LABEL_33:
    if ((char)v31 < 0)
      operator delete(__p[0]);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(a2, (uint64_t *)v26);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v27[0]);
  v22 = v26[0];
  v26[0] = 0;
  if (v22)
    operator delete(v22);
  nlv4_inference_orchestrator::context::generateUserStatedTaskPaths((uint64_t)v26, *(uint64_t **)(a2 + 16));
  v23 = (unsigned __int8 *)v27[0];
  if (v27[0])
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2, v23 + 16, (uint64_t)(v23 + 16));
      v23 = *(unsigned __int8 **)v23;
    }
    while (v23);
    v24 = (void **)v27[0];
  }
  else
  {
    v24 = 0;
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v24);
  v25 = v26[0];
  v26[0] = 0;
  if (v25)
    operator delete(v25);
}

void sub_1C2252C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::context::generateUserStatedTaskPaths(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void **v6;
  int64_t v7;
  char *v8;
  int v9;
  void *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  std::string::size_type v17;
  void **v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  int64_t v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  int v28;
  void *v29;
  char *v30;
  std::string v32;
  std::string v33;
  std::string v34;
  void *__p[2];
  std::string::size_type v36;
  void *v37[2];
  unsigned __int8 v38;
  void **v39;
  int64_t v40;
  unsigned __int8 v41;
  char v42[9];

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    v2 = a2;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v39, "SystemOffered.offered_act.UserStatedTask");
      std::string::basic_string[abi:ne180100]<0>(v37, "SystemOffered.offered_act.UserWantedToProceed");
      v3 = *((unsigned __int8 *)v2 + 39);
      if (*((char *)v2 + 39) < 0)
      {
        v4 = (char *)v2[2];
        v5 = v2[3];
      }
      else
      {
        v4 = (char *)(v2 + 2);
        v5 = *((unsigned __int8 *)v2 + 39);
      }
      if ((v41 & 0x80u) == 0)
        v6 = (void **)&v39;
      else
        v6 = v39;
      if ((v41 & 0x80u) == 0)
        v7 = v41;
      else
        v7 = v40;
      if (v7)
      {
        if (v5 >= v7)
        {
          v8 = &v4[v5];
          v9 = *(char *)v6;
          v10 = v4;
          while (1)
          {
            v11 = v5 - v7;
            if (v11 == -1)
              break;
            v12 = (char *)memchr(v10, v9, v11 + 1);
            if (!v12)
              break;
            v13 = v12;
            if (!memcmp(v12, v6, v7))
            {
              if (v13 == v8 || v13 - v4 == -1)
                goto LABEL_56;
              goto LABEL_22;
            }
            v10 = v13 + 1;
            v5 = v8 - (v13 + 1);
            if (v5 < v7)
              goto LABEL_56;
          }
        }
        goto LABEL_56;
      }
LABEL_22:
      if ((v3 & 0x80) != 0)
      {
        v14 = (char *)v2[2];
        v3 = v2[3];
        if (v7)
        {
LABEL_24:
          v15 = &v14[v3];
          if (v3 >= v7)
          {
            v28 = *(char *)v6;
            v29 = v14;
            do
            {
              if (v3 - v7 == -1)
                break;
              v30 = (char *)memchr(v29, v28, v3 - v7 + 1);
              if (!v30)
                break;
              v16 = v30;
              if (!memcmp(v30, v6, v7))
                goto LABEL_26;
              v29 = v16 + 1;
              v3 = v15 - (v16 + 1);
            }
            while (v3 >= v7);
          }
          v16 = v15;
LABEL_26:
          if (v16 == v15)
            v17 = -1;
          else
            v17 = v16 - v14;
          goto LABEL_31;
        }
      }
      else
      {
        v14 = (char *)(v2 + 2);
        if (v7)
          goto LABEL_24;
      }
      v17 = 0;
LABEL_31:
      std::string::basic_string(&v33, (const std::string *)(v2 + 2), 0, v17, (std::allocator<char> *)&v32);
      if ((v38 & 0x80u) == 0)
        v18 = v37;
      else
        v18 = (void **)v37[0];
      if ((v38 & 0x80u) == 0)
        v19 = v38;
      else
        v19 = (std::string::size_type)v37[1];
      v20 = std::string::append(&v33, (const std::string::value_type *)v18, v19);
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      v22 = v41;
      if ((v41 & 0x80u) != 0)
        v22 = v40;
      if (*((char *)v2 + 39) < 0)
        v23 = v2[3];
      else
        v23 = *((unsigned __int8 *)v2 + 39);
      std::string::basic_string(&v32, (const std::string *)(v2 + 2), v22 + v17, v23, (std::allocator<char> *)v42);
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v32;
      else
        v24 = (std::string *)v32.__r_.__value_.__r.__words[0];
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
      else
        size = v32.__r_.__value_.__l.__size_;
      v26 = std::string::append(&v34, (const std::string::value_type *)v24, size);
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v36 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)__p, (uint64_t)__p);
      if (SHIBYTE(v36) < 0)
        operator delete(__p[0]);
LABEL_56:
      if ((char)v38 < 0)
        operator delete(v37[0]);
      if ((char)v41 < 0)
        operator delete(v39);
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
}

void sub_1C2252F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (a16 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  if (a42 < 0)
    operator delete(a37);
  if (*(char *)(v42 - 97) < 0)
    operator delete(*(void **)(v42 - 120));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a10);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromSpecificSystemDialogAct(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  void *v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  NSObject *v11;
  void **v12;
  void *__p[2];
  void *v14;
  _BYTE buf[12];
  __int16 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  if (*(_QWORD *)(a2 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "SystemPrompted");
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromGraph(a1, (const void **)(a1 + 40), (uint64_t)buf, *(const sirinluexternal::UsoGraph **)(a2 + 8), (uint64_t)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(a3, (uint64_t *)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v14);
    v6 = __p[0];
    __p[0] = 0;
    if (v6)
      operator delete(v6);
    if (v18 < 0)
    {
      v7 = *(void **)buf;
LABEL_16:
      operator delete(v7);
    }
  }
  else
  {
    v8 = *(int *)(a1 + 440);
    if (v8 >= 8)
    {
      v10 = SNLPOSLoggerForCategory(4);
      v9 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
        v16 = 2048;
        v17 = v8;
        _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
      }
    }
    else
    {
      v9 = off_1E7BED840[v8];
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v9);
    v11 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v12 = __p;
      if (SHIBYTE(v14) < 0)
        v12 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEBUG, "[%s] Badly formed SystemPrompted dialog act; needs to contain the target UsoGraph.",
        buf,
        0xCu);
    }
    if (SHIBYTE(v14) < 0)
    {
      v7 = __p[0];
      goto LABEL_16;
    }
  }
}

{
  _QWORD *v5;
  char *v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  NSObject *v11;
  std::string *v12;
  void *v13;
  std::string *v14;
  __int128 v15;
  void *v16;
  std::string v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v5 = *(_QWORD **)(a2 + 8);
  if (v5)
  {
    if (v5[1])
    {
      v7 = "UserAccepted";
    }
    else if (v5[2])
    {
      v7 = "UserAcknowledged";
    }
    else if (v5[4])
    {
      v7 = "UserCancelled";
    }
    else if (v5[6])
    {
      v7 = "UserRejected";
    }
    else if (v5[7])
    {
      v7 = "UserStatedTask";
    }
    else if (v5[8])
    {
      v7 = "UserWantedToPause";
    }
    else if (v5[9])
    {
      v7 = "UserWantedToProceed";
    }
    else if (v5[10])
    {
      v7 = "UserWantedToRepeat";
    }
    else
    {
      v7 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&v17, v7);
    v14 = std::string::insert(&v17, 0, "SystemOffered.offered_act.");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    *(_QWORD *)&buf[16] = *((_QWORD *)&v14->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractLimitedContextLabelsFromUserDialogAct(*(sirinluexternal::UserDialogAct **)(a2 + 8), (nlv4_inference_orchestrator::context::ContextLabelsExtractor *)a1, (const void **)(a1 + 40), (uint64_t)&v17);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(a3, (uint64_t *)&v17);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v17.__r_.__value_.__r.__words[2]);
    v16 = (void *)v17.__r_.__value_.__r.__words[0];
    v17.__r_.__value_.__r.__words[0] = 0;
    if (v16)
      operator delete(v16);
    if (!*(_QWORD *)(a3 + 24))
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, buf, (uint64_t)buf);
    if ((buf[23] & 0x80000000) != 0)
    {
      v13 = *(void **)buf;
      goto LABEL_37;
    }
  }
  else
  {
    v8 = *(int *)(a1 + 440);
    if (v8 >= 8)
    {
      v10 = SNLPOSLoggerForCategory(4);
      v9 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v8;
        _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
      }
    }
    else
    {
      v9 = off_1E7BED840[v8];
    }
    std::string::basic_string[abi:ne180100]<0>(&v17, v9);
    v11 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v12 = &v17;
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v12 = (std::string *)v17.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEBUG, "[%s] Badly formed SystemOffered dialog act; needs to contain a user dialog act.",
        buf,
        0xCu);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    {
      v13 = (void *)v17.__r_.__value_.__r.__words[0];
LABEL_37:
      operator delete(v13);
    }
  }
}

{
  const sirinluexternal::UsoGraph **v4;
  const sirinluexternal::UsoGraph **v5;
  const void **v7;
  const sirinluexternal::UsoGraph *v8;
  void **v9;
  void **v10;
  void *v11;
  void *__p;
  void **v13;
  void *v14[2];
  char v15;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v4 = *(const sirinluexternal::UsoGraph ***)(a2 + 8);
  v5 = *(const sirinluexternal::UsoGraph ***)(a2 + 16);
  if (v4 != v5)
  {
    v7 = (const void **)(a1 + 40);
    do
    {
      v8 = *v4;
      std::string::basic_string[abi:ne180100]<0>(v14, "SystemInformed.entity");
      nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromGraph(a1, v7, (uint64_t)v14, v8, (uint64_t)&__p);
      v9 = v13;
      if (v13)
      {
        do
        {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, (unsigned __int8 *)v9 + 16, (uint64_t)(v9 + 2));
          v9 = (void **)*v9;
        }
        while (v9);
        v10 = v13;
      }
      else
      {
        v10 = 0;
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v10);
      v11 = __p;
      __p = 0;
      if (v11)
        operator delete(v11);
      if (v15 < 0)
        operator delete(v14[0]);
      ++v4;
    }
    while (v4 != v5);
  }
}

{
  void *v6;
  void *v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  NSObject *v11;
  void **v12;
  void *__p[2];
  void *v14;
  _BYTE buf[12];
  __int16 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  if (*(_QWORD *)(a2 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "SystemReportedSuccess");
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromGraph(a1, (const void **)(a1 + 40), (uint64_t)buf, *(const sirinluexternal::UsoGraph **)(a2 + 8), (uint64_t)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(a3, (uint64_t *)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v14);
    v6 = __p[0];
    __p[0] = 0;
    if (v6)
      operator delete(v6);
    if (v18 < 0)
    {
      v7 = *(void **)buf;
LABEL_16:
      operator delete(v7);
    }
  }
  else
  {
    v8 = *(int *)(a1 + 440);
    if (v8 >= 8)
    {
      v10 = SNLPOSLoggerForCategory(4);
      v9 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
        v16 = 2048;
        v17 = v8;
        _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
      }
    }
    else
    {
      v9 = off_1E7BED840[v8];
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v9);
    v11 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v12 = __p;
      if (SHIBYTE(v14) < 0)
        v12 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEBUG, "[%s] Badly formed SystemReportedSuccess dialog act; needs to supply the task UsoGraph.",
        buf,
        0xCu);
    }
    if (SHIBYTE(v14) < 0)
    {
      v7 = __p[0];
      goto LABEL_16;
    }
  }
}

{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  void **v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  NSObject *v12;
  void **v13;
  void *v14;
  void *v15;
  void *v16;
  void *__p[2];
  void *v18;
  void *v19[2];
  char v20;
  _BYTE buf[12];
  __int16 v22;
  _BYTE v23[10];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  if (*(_QWORD *)(a2 + 8) && *(_QWORD *)(a2 + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "SystemReportedFailure");
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromGraph(a1, (const void **)(a1 + 40), (uint64_t)v19, *(const sirinluexternal::UsoGraph **)(a2 + 16), (uint64_t)__p);
    v6 = (unsigned __int8 *)v18;
    if (v18)
    {
      do
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, v6 + 16, (uint64_t)(v6 + 16));
        v6 = *(unsigned __int8 **)v6;
      }
      while (v6);
    }
    nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromGraph(a1, (const void **)(a1 + 40), (uint64_t)v19, *(const sirinluexternal::UsoGraph **)(a2 + 8), (uint64_t)buf);
    v7 = *(unsigned __int8 **)&v23[2];
    if (*(_QWORD *)&v23[2])
    {
      do
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, v7 + 16, (uint64_t)(v7 + 16));
        v7 = *(unsigned __int8 **)v7;
      }
      while (v7);
      v8 = *(void ***)&v23[2];
    }
    else
    {
      v8 = 0;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v8);
    v15 = *(void **)buf;
    *(_QWORD *)buf = 0;
    if (v15)
      operator delete(v15);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v18);
    v16 = __p[0];
    __p[0] = 0;
    if (v16)
      operator delete(v16);
    if (v20 < 0)
    {
      v14 = v19[0];
      goto LABEL_25;
    }
  }
  else
  {
    v9 = *(int *)(a1 + 440);
    if (v9 >= 8)
    {
      v11 = SNLPOSLoggerForCategory(4);
      v10 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
        v22 = 2048;
        *(_QWORD *)v23 = v9;
        _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
      }
    }
    else
    {
      v10 = off_1E7BED840[v9];
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v10);
    v12 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v13 = __p;
      if (SHIBYTE(v18) < 0)
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v13;
      _os_log_impl(&dword_1C2196000, v12, OS_LOG_TYPE_DEBUG, "[%s] Badly formed SystemReportedFailure dialog act; needs to supply the UsoGraphs for the failed task and for th"
        "e failure reason.",
        buf,
        0xCu);
    }
    if (SHIBYTE(v18) < 0)
    {
      v14 = __p[0];
LABEL_25:
      operator delete(v14);
    }
  }
}

void sub_1C2253200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v20);
  _Unwind_Resume(a1);
}

void sub_1C22534EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a23 < 0)
    operator delete(__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v23);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromSpecificSystemDialogAct(nlv4_inference_orchestrator::context::ContextLabelsExtractor *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sirinluexternal::UserDialogAct **v4;
  sirinluexternal::UserDialogAct **v5;
  const void **v7;
  sirinluexternal::UserDialogAct *v8;
  char *v9;
  std::string *v10;
  __int128 v11;
  unsigned __int8 *v12;
  void *v13;
  std::string v14;
  uint64_t v15;
  void *__p[2];
  std::string::size_type v17;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v4 = *(sirinluexternal::UserDialogAct ***)(a2 + 8);
  v5 = *(sirinluexternal::UserDialogAct ***)(a2 + 16);
  if (v4 != v5)
  {
    v7 = (const void **)((char *)a1 + 40);
    do
    {
      v8 = *v4;
      v9 = "UserAccepted";
      if (!*((_QWORD *)*v4 + 1))
      {
        v9 = "UserAcknowledged";
        if (!*((_QWORD *)v8 + 2))
        {
          v9 = "UserCancelled";
          if (!*((_QWORD *)v8 + 4))
          {
            v9 = "UserRejected";
            if (!*((_QWORD *)v8 + 6))
            {
              v9 = "UserStatedTask";
              if (!*((_QWORD *)v8 + 7))
              {
                v9 = "UserWantedToPause";
                if (!*((_QWORD *)v8 + 8))
                {
                  v9 = "UserWantedToProceed";
                  if (!*((_QWORD *)v8 + 9))
                  {
                    if (*((_QWORD *)v8 + 10))
                      v9 = "UserWantedToRepeat";
                    else
                      v9 = "";
                  }
                }
              }
            }
          }
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v14, v9);
      v10 = std::string::insert(&v14, 0, "SystemGaveOptions.option.");
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v17 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
      nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromUserDialogAct(v8, a1, v7, (uint64_t)__p, (uint64_t)&v14);
      v12 = (unsigned __int8 *)v14.__r_.__value_.__r.__words[2];
      if (v14.__r_.__value_.__r.__words[2])
      {
        do
        {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, v12 + 16, (uint64_t)(v12 + 16));
          v12 = *(unsigned __int8 **)v12;
        }
        while (v12);
      }
      if (!v15)
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, (unsigned __int8 *)__p, (uint64_t)__p);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v14.__r_.__value_.__r.__words[2]);
      v13 = (void *)v14.__r_.__value_.__r.__words[0];
      v14.__r_.__value_.__r.__words[0] = 0;
      if (v13)
        operator delete(v13);
      if (SHIBYTE(v17) < 0)
        operator delete(__p[0]);
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_1C2253704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a10);
  if (a23 < 0)
    operator delete(__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v23);
  _Unwind_Resume(a1);
}

void sub_1C2253844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 < 0)
    operator delete(__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v19);
  _Unwind_Resume(a1);
}

void sub_1C2253A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v20);
  _Unwind_Resume(a1);
}

void sub_1C2253CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a9);
  if (a19 < 0)
    operator delete(__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v20);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromUserDialogAct@<X0>(sirinluexternal::UserDialogAct *a1@<X3>, nlv4_inference_orchestrator::context::ContextLabelsExtractor *a2@<X0>, const void **a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X8>)
{
  _BYTE v10[136];

  nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractGraphFromUserDialogAct(a2, a1, (sirinluexternal::UsoGraph *)v10);
  nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromGraph((uint64_t)a2, a3, a4, (const sirinluexternal::UsoGraph *)v10, a5);
  return MEMORY[0x1C3BB83E0](v10);
}

void nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractGraphFromUserDialogAct(nlv4_inference_orchestrator::context::ContextLabelsExtractor *this@<X0>, const sirinluexternal::UserDialogAct *a2@<X1>, sirinluexternal::UsoGraph *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  sirinluexternal::UsoGraph *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  NSObject *v17;
  NSObject *v18;
  void **v19;
  void *__p[2];
  char v21;
  __int128 v22;
  __int128 v23;
  int v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v22 = 0u;
  v23 = 0u;
  v24 = 1065353216;
  v4 = *((_QWORD *)a2 + 1);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
      goto LABEL_15;
  }
  v6 = *((_QWORD *)a2 + 2);
  if (v6)
  {
    v5 = *(_QWORD *)(v6 + 8);
    if (v5)
      goto LABEL_15;
  }
  v7 = *((_QWORD *)a2 + 4);
  if (v7)
  {
    v5 = *(_QWORD *)(v7 + 8);
    if (v5)
      goto LABEL_15;
  }
  v8 = *((_QWORD *)a2 + 6);
  if (v8)
  {
    v5 = *(_QWORD *)(v8 + 16);
    if (v5)
      goto LABEL_15;
  }
  if ((v9 = *((_QWORD *)a2 + 7)) != 0 && (v5 = *(_QWORD *)(v9 + 8)) != 0
    || (v10 = *((_QWORD *)a2 + 8)) != 0 && (v5 = *(_QWORD *)(v10 + 8)) != 0
    || (v11 = *((_QWORD *)a2 + 9)) != 0 && (v5 = *(_QWORD *)(v11 + 8)) != 0)
  {
LABEL_15:
    v12 = a3;
    v13 = v5;
LABEL_16:
    MEMORY[0x1C3BB83C8](v12, v13);
    goto LABEL_17;
  }
  v14 = *((_QWORD *)a2 + 10);
  if (v14)
  {
    v13 = *(_QWORD *)(v14 + 8);
    if (v13)
    {
      v12 = a3;
      goto LABEL_16;
    }
  }
  v15 = *((int *)this + 110);
  if (v15 >= 8)
  {
    v17 = SNLPOSLoggerForCategory(4);
    v16 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v26 = "<UNDEFINED_COMPONENT>";
      v27 = 2048;
      v28 = v15;
      _os_log_impl(&dword_1C2196000, v17, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
    }
  }
  else
  {
    v16 = off_1E7BED840[v15];
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v16);
  v18 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    v19 = __p;
    if (v21 < 0)
      v19 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v26 = (const char *)v19;
    _os_log_impl(&dword_1C2196000, v18, OS_LOG_TYPE_DEBUG, "[%s] Warning: Badly formed user dialog act.", buf, 0xCu);
  }
  sirinluexternal::UsoGraph::UsoGraph(a3);
  if (v21 < 0)
    operator delete(__p[0]);
LABEL_17:
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(0);
}

void sub_1C2253F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractLimitedContextLabelsFromUserDialogAct@<X0>(sirinluexternal::UserDialogAct *a1@<X2>, nlv4_inference_orchestrator::context::ContextLabelsExtractor *a2@<X0>, const void **a3@<X1>, uint64_t a4@<X8>)
{
  _BYTE v8[136];

  nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractGraphFromUserDialogAct(a2, a1, (sirinluexternal::UsoGraph *)v8);
  nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractLimitedContextLabelsFromGraph((uint64_t)a2, a3, (const sirinluexternal::UsoGraph *)v8, a4);
  return MEMORY[0x1C3BB83E0](v8);
}

UsoGraph *nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractLimitedContextLabelsFromGraph@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, const sirinluexternal::UsoGraph *a3@<X2>, uint64_t a4@<X8>)
{
  UsoGraph *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  siri::ontology::UsoGraph *v15;
  const void **v16;
  const void **v17;
  const struct __class_type_info *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  const std::string::value_type *v23;
  const std::string::value_type *v24;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  void **v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  UsoGraph *result;
  uint64_t v38;
  void *__p[2];
  unsigned __int8 v40;
  std::string v41;
  void *v42[2];
  std::string::size_type v43;
  void *v44;
  const void **v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  UsoGraph *v48;
  uint64_t v49;
  int v50;
  std::string v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v49 = 1;
  v50 = 0;
  v8 = (UsoGraph *)operator new();
  MEMORY[0x1C3BB9154](v8, &v49);
  v48 = v8;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  v9 = *(_QWORD *)(a1 + 424);
  v10 = *(std::__shared_weak_count **)(a1 + 432);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v46 = v9;
    v47 = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    v46 = *(_QWORD *)(a1 + 424);
    v47 = 0;
  }
  v15 = (siri::ontology::UsoGraph *)v48;
  siri::ontology::UsoGraphProtoReader::fromProtobuf((siri::ontology::UsoGraphProtoReader *)&v46, a3, v48);
  siri::ontology::UsoGraph::getNodes(v15);
  v16 = (const void **)v44;
  v17 = v45;
  if (v44 != v45)
  {
    v18 = (const struct __class_type_info *)MEMORY[0x1E0DA35A8];
    do
    {
      if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v16 + 16))(*v16) == 1)
      {
        if (!v19)
          __cxa_bad_cast();
        v20 = v19;
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v51, a2, (const void **)(a1 + 280));
        v21 = v20[3];
        v24 = *(const std::string::value_type **)(v21 + 8);
        v22 = v21 + 8;
        v23 = v24;
        v25 = *(char *)(v22 + 23);
        if (v25 >= 0)
          v26 = (const std::string::value_type *)v22;
        else
          v26 = v23;
        if (v25 >= 0)
          v27 = *(unsigned __int8 *)(v22 + 23);
        else
          v27 = *(_QWORD *)(v22 + 8);
        v28 = std::string::append(&v51, v26, v27);
        v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v43 = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)v42 = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v41, a2, (const void **)(a1 + 304));
        (*(void (**)(void **__return_ptr, _QWORD *))(*v20 + 48))(__p, v20);
        if ((v40 & 0x80u) == 0)
          v30 = __p;
        else
          v30 = (void **)__p[0];
        if ((v40 & 0x80u) == 0)
          v31 = v40;
        else
          v31 = (std::string::size_type)__p[1];
        v32 = std::string::append(&v41, (const std::string::value_type *)v30, v31);
        v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v51.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if ((char)v40 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v41.__r_.__value_.__l.__data_);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, (unsigned __int8 *)v42, (uint64_t)v42);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, (unsigned __int8 *)&v51, (uint64_t)&v51);
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
        if (SHIBYTE(v43) < 0)
          operator delete(v42[0]);
      }
      ++v16;
    }
    while (v16 != v17);
    v16 = (const void **)v44;
  }
  if (v16)
  {
    v45 = v16;
    operator delete(v16);
  }
  v34 = v47;
  if (v47)
  {
    v35 = (unint64_t *)&v47->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  result = v48;
  if (v48)
  {
    v38 = MEMORY[0x1C3BB916C]();
    return (UsoGraph *)MEMORY[0x1C3BB9B44](v38, 0x10A0C403D23BABBLL);
  }
  return result;
}

void sub_1C22544D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;

  if (v4)
    operator delete(v4);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&v5);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)(v2 - 152));
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::context::generatePlaceholderVerbPaths(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void **v7;
  int64_t v8;
  char *v9;
  int v10;
  void *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  std::sub_match<const char *> *v15;
  int v16;
  void **v17;
  int64_t size;
  std::string::size_type v19;
  std::string *v20;
  void **v21;
  int64_t v22;
  char *v23;
  char *v24;
  std::string::size_type v25;
  uint64_t v26;
  char *v27;
  std::string *v28;
  int64_t v29;
  char *v30;
  char *v31;
  std::string::size_type v32;
  std::string::size_type v33;
  std::string::size_type v34;
  std::string::size_type v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  int v44;
  std::string *v45;
  int64_t v46;
  char *v47;
  int v48;
  void *v49;
  uint64_t v50;
  char *v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  std::string v56;
  std::string v57;
  void *__p[2];
  std::string::size_type v59;
  std::string v60;
  std::string v61;
  std::string v62;
  void *v63[8];
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  void *v70[2];
  unsigned __int8 v71;
  void *v72[2];
  char v73;
  std::regex_traits<char> v74[2];
  std::__shared_weak_count *v75;
  void **v76;
  std::string::size_type v77;
  unsigned __int8 v78;
  std::string __str[2];
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  uint64_t v87;

  std::string::basic_string[abi:ne180100]<0>(&v76, "::");
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v74, "((\\w+)::common_(\\w+)(\\.)?(\\w+))");
  std::string::basic_string[abi:ne180100]<0>(v72, "placeholderVerb");
  std::string::basic_string[abi:ne180100]<0>(v70, "::common");
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v63[6] = 0;
  v63[7] = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  memset(v63, 0, 41);
  v3 = *(uint64_t **)(a2 + 16);
  if (v3)
  {
    do
    {
      v4 = *((unsigned __int8 *)v3 + 39);
      if (*((char *)v3 + 39) < 0)
      {
        v5 = (char *)v3[2];
        v6 = v3[3];
      }
      else
      {
        v5 = (char *)(v3 + 2);
        v6 = *((unsigned __int8 *)v3 + 39);
      }
      if ((v71 & 0x80u) == 0)
        v7 = v70;
      else
        v7 = (void **)v70[0];
      if ((v71 & 0x80u) == 0)
        v8 = v71;
      else
        v8 = (int64_t)v70[1];
      if (v8)
      {
        if (v6 >= v8)
        {
          v9 = &v5[v6];
          v10 = *(char *)v7;
          v11 = v5;
          do
          {
            v12 = v6 - v8;
            if (v12 == -1)
              break;
            v13 = (char *)memchr(v11, v10, v12 + 1);
            if (!v13)
              break;
            v14 = v13;
            if (!memcmp(v13, v7, v8))
            {
              if (v14 == v9 || v14 - v5 == -1)
                break;
              goto LABEL_21;
            }
            v11 = v14 + 1;
            v6 = v9 - (v14 + 1);
          }
          while (v6 >= v8);
        }
      }
      else
      {
LABEL_21:
        if ((v4 & 0x80) != 0)
        {
          v15 = (std::sub_match<const char *> *)v3[2];
          v4 = v3[3];
        }
        else
        {
          v15 = (std::sub_match<const char *> *)(v3 + 2);
        }
        v80 = 0;
        v81 = 0;
        v82 = 0;
        v83 = 0;
        v84 = 0;
        v85 = 0;
        v86 = 0;
        v87 = 0;
        memset(__str, 0, 41);
        v16 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v74, v15, (std::sub_match<const char *> *)((char *)v15 + v4), (std::vector<std::csub_match> *)__str, 0);
        std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)v63, (uint64_t)v15, (uint64_t)v15 + v4, (uint64_t *)__str, 0);
        if (__str[0].__r_.__value_.__r.__words[0])
          operator delete(__str[0].__r_.__value_.__l.__data_);
        if (v16)
        {
          v17 = v63;
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v63[1] - (char *)v63[0]) >> 3) > 1)
            v17 = (void **)v63[0];
          if (*((_BYTE *)v17 + 40))
          {
            std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, (char *)v17[3], (char *)v17[4], (_BYTE *)v17[4] - (_BYTE *)v17[3]);
            size = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
            v19 = __str[0].__r_.__value_.__r.__words[0];
          }
          else
          {
            v19 = 0;
            size = 0;
            memset(__str, 0, 24);
          }
          if ((size & 0x80u) == 0)
            v20 = __str;
          else
            v20 = (std::string *)v19;
          if ((v78 & 0x80u) == 0)
            v21 = (void **)&v76;
          else
            v21 = v76;
          if ((v78 & 0x80u) == 0)
            v22 = v78;
          else
            v22 = v77;
          if (v22)
          {
            if ((size & 0x80u) != 0)
              size = __str[0].__r_.__value_.__l.__size_;
            v23 = (char *)v20 + size;
            if (size >= v22)
            {
              v44 = *(char *)v21;
              v45 = v20;
              do
              {
                v46 = size - v22;
                if (v46 == -1)
                  break;
                v47 = (char *)memchr(v45, v44, v46 + 1);
                if (!v47)
                  break;
                v24 = v47;
                if (!memcmp(v47, v21, v22))
                  goto LABEL_46;
                v45 = (std::string *)(v24 + 1);
                size = v23 - (v24 + 1);
              }
              while (size >= v22);
            }
            v24 = v23;
LABEL_46:
            if (v24 == v23)
              v25 = -1;
            else
              v25 = v24 - (char *)v20;
          }
          else
          {
            v25 = 0;
          }
          std::string::basic_string(&v62, __str, 0, v25, (std::allocator<char> *)&v61);
          if (*((char *)v3 + 39) < 0)
          {
            v27 = (char *)v3[2];
            v26 = v3[3];
          }
          else
          {
            v26 = *((unsigned __int8 *)v3 + 39);
            v27 = (char *)(v3 + 2);
          }
          if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v28 = &v62;
          else
            v28 = (std::string *)v62.__r_.__value_.__r.__words[0];
          if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v29 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
          else
            v29 = v62.__r_.__value_.__l.__size_;
          if (v29)
          {
            v30 = &v27[v26];
            if (v26 >= v29)
            {
              v48 = v28->__r_.__value_.__s.__data_[0];
              v49 = v27;
              do
              {
                v50 = v26 - v29;
                if (v50 == -1)
                  break;
                v51 = (char *)memchr(v49, v48, v50 + 1);
                if (!v51)
                  break;
                v31 = v51;
                if (!memcmp(v51, v28, v29))
                  goto LABEL_62;
                v49 = v31 + 1;
                v26 = v30 - (v31 + 1);
              }
              while (v26 >= v29);
            }
            v31 = v30;
LABEL_62:
            if (v31 == v30)
              v32 = -1;
            else
              v32 = v31 - v27;
          }
          else
          {
            v32 = 0;
          }
          std::string::basic_string(&v61, (const std::string *)(v3 + 2), 0, v32, (std::allocator<char> *)&v60);
          v33 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
          if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v33 = v62.__r_.__value_.__l.__size_;
          v34 = v78;
          if ((v78 & 0x80u) != 0)
            v34 = v77;
          if (*((char *)v3 + 39) < 0)
            v35 = v3[3];
          else
            v35 = *((unsigned __int8 *)v3 + 39);
          std::string::basic_string(&v60, (const std::string *)(v3 + 2), v33 + v32 + v34, v35, (std::allocator<char> *)__p);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v56, (const void **)&v61.__r_.__value_.__l.__data_, (const void **)v72);
          if ((v78 & 0x80u) == 0)
            v36 = (const std::string::value_type *)&v76;
          else
            v36 = (const std::string::value_type *)v76;
          if ((v78 & 0x80u) == 0)
            v37 = v78;
          else
            v37 = v77;
          v38 = std::string::append(&v56, v36, v37);
          v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
          v57.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v39;
          v38->__r_.__value_.__l.__size_ = 0;
          v38->__r_.__value_.__r.__words[2] = 0;
          v38->__r_.__value_.__r.__words[0] = 0;
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v40 = &v60;
          else
            v40 = (std::string *)v60.__r_.__value_.__r.__words[0];
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v41 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          else
            v41 = v60.__r_.__value_.__l.__size_;
          v42 = std::string::append(&v57, (const std::string::value_type *)v40, v41);
          v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
          v59 = v42->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v43;
          v42->__r_.__value_.__l.__size_ = 0;
          v42->__r_.__value_.__r.__words[2] = 0;
          v42->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v57.__r_.__value_.__l.__data_);
          if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v56.__r_.__value_.__l.__data_);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)__p, (uint64_t)__p);
          if (SHIBYTE(v59) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v60.__r_.__value_.__l.__data_);
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v61.__r_.__value_.__l.__data_);
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v62.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str[0].__r_.__value_.__l.__data_);
        }
      }
      v3 = (uint64_t *)*v3;
    }
    while (v3);
    if (v63[0])
      operator delete(v63[0]);
  }
  if ((char)v71 < 0)
    operator delete(v70[0]);
  if (v73 < 0)
    operator delete(v72[0]);
  v52 = v75;
  if (v75)
  {
    p_shared_owners = (unint64_t *)&v75->__shared_owners_;
    do
      v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  std::locale::~locale(&v74[0].__loc_);
  if ((char)v78 < 0)
    operator delete(v76);
}

void sub_1C2254B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,std::locale a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v60;

  if (a54 < 0)
    operator delete(__p);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a60);
  std::locale::~locale(&a55);
  if (*(char *)(v60 - 209) < 0)
    operator delete(*(void **)(v60 - 232));
  _Unwind_Resume(a1);
}

void std::deque<std::tuple<siri::ontology::UsoGraphNode const*,siri::ontology::UsoGraphEdge const*,std::string const>>::push_back(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  _QWORD *v53;
  std::string *v54;
  __int128 v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t i;
  _QWORD *v83;
  char *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = (v5 - v4) >> 3;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = 102 * v6 - 1;
  v8 = a1[4];
  if (v7 != a1[5] + v8)
    goto LABEL_38;
  v9 = v8 >= 0x66;
  v10 = v8 - 102;
  if (v9)
  {
    a1[4] = v10;
    v13 = *(_QWORD *)v4;
    v11 = v4 + 8;
    v12 = v13;
    a1[1] = v11;
    if (v5 == (char *)a1[3])
    {
      v14 = (uint64_t)&v11[-*a1];
      if ((unint64_t)v11 <= *a1)
      {
        if (v5 == (char *)*a1)
          v42 = 1;
        else
          v42 = (uint64_t)&v5[-*a1] >> 2;
        v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v42);
        v45 = &v43[8 * (v42 >> 2)];
        v46 = (uint64_t *)a1[1];
        v5 = v45;
        v47 = a1[2] - (_QWORD)v46;
        if (v47)
        {
          v5 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
          v48 = 8 * (v47 >> 3);
          v49 = &v43[8 * (v42 >> 2)];
          do
          {
            v50 = *v46++;
            *(_QWORD *)v49 = v50;
            v49 += 8;
            v48 -= 8;
          }
          while (v48);
        }
        v51 = (char *)*a1;
        *a1 = v43;
        a1[1] = v45;
        a1[2] = v5;
        a1[3] = &v43[8 * v44];
        if (v51)
        {
          operator delete(v51);
          v5 = (char *)a1[2];
        }
      }
      else
      {
        v15 = v14 >> 3;
        v16 = v14 >> 3 < -1;
        v17 = (v14 >> 3) + 2;
        if (v16)
          v18 = v17;
        else
          v18 = v15 + 1;
        v19 = -(v18 >> 1);
        v20 = v18 >> 1;
        v21 = &v11[-8 * v20];
        v22 = v5 - v11;
        if (v5 != v11)
        {
          memmove(&v11[-8 * v20], v11, v5 - v11);
          v5 = (char *)a1[1];
        }
        v23 = &v5[8 * v19];
        v5 = &v21[v22];
        a1[1] = v23;
        a1[2] = &v21[v22];
      }
    }
    *(_QWORD *)v5 = v12;
    goto LABEL_36;
  }
  v24 = (char *)a1[3];
  v25 = (char *)*a1;
  v26 = (uint64_t)&v24[-*a1];
  if (v6 >= v26 >> 3)
  {
    v29 = v26 >> 2;
    if (v24 == v25)
      v30 = 1;
    else
      v30 = v29;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v30);
    v33 = v32;
    v34 = &v31[8 * v6];
    *(_QWORD *)&v35 = v31;
    *((_QWORD *)&v35 + 1) = v34;
    v114 = v35;
    v36 = operator new(0xFF0uLL);
    *(_QWORD *)&v37 = v34;
    *((_QWORD *)&v37 + 1) = &v31[8 * v33];
    if (v6 == v33)
    {
      v38 = 8 * v6;
      *(_QWORD *)&v39 = v114;
      if (v5 - v4 >= 1)
      {
        v40 = v38 >> 3;
        if (v40 >= -1)
          v41 = v40 + 1;
        else
          v41 = v40 + 2;
        v34 -= 8 * (v41 >> 1);
        *(_QWORD *)&v37 = v34;
        *((_QWORD *)&v39 + 1) = v34;
        goto LABEL_68;
      }
      v78 = v38 >> 2;
      if (v5 == v4)
        v79 = 1;
      else
        v79 = v78;
      v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v79);
      v34 = &v80[8 * (v79 >> 2)];
      *(_QWORD *)&v39 = v80;
      *((_QWORD *)&v39 + 1) = v34;
      *(_QWORD *)&v37 = v34;
      *((_QWORD *)&v37 + 1) = &v80[8 * v81];
      if (!v31)
      {
LABEL_68:
        *(_QWORD *)v34 = v36;
        *(_QWORD *)&v37 = v37 + 8;
        for (i = a1[2]; i != a1[1]; i -= 8)
        {
          v83 = (_QWORD *)*((_QWORD *)&v39 + 1);
          if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
          {
            v85 = (_BYTE *)v37;
            if ((unint64_t)v37 >= *((_QWORD *)&v37 + 1))
            {
              if (*((_QWORD *)&v37 + 1) == *((_QWORD *)&v39 + 1))
                v90 = 1;
              else
                v90 = (uint64_t)(*((_QWORD *)&v37 + 1) - *((_QWORD *)&v39 + 1)) >> 2;
              v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v90);
              v84 = &v91[(2 * v90 + 6) & 0xFFFFFFFFFFFFFFF8];
              v93 = v84;
              v94 = v85 - (_BYTE *)v83;
              if (v85 != (_BYTE *)v83)
              {
                v93 = &v84[v94 & 0xFFFFFFFFFFFFFFF8];
                v95 = 8 * (v94 >> 3);
                v96 = v84;
                v97 = v83;
                do
                {
                  v98 = *v97++;
                  *(_QWORD *)v96 = v98;
                  v96 += 8;
                  v95 -= 8;
                }
                while (v95);
              }
              *(_QWORD *)&v39 = v91;
              *((_QWORD *)&v39 + 1) = v84;
              *(_QWORD *)&v37 = v93;
              *((_QWORD *)&v37 + 1) = &v91[8 * v92];
              if (v83)
              {
                v112 = v37;
                v116 = v39;
                operator delete(v83);
                v37 = v112;
                v39 = v116;
              }
            }
            else
            {
              v86 = (uint64_t)(*((_QWORD *)&v37 + 1) - v37) >> 3;
              if (v86 >= -1)
                v87 = v86 + 1;
              else
                v87 = v86 + 2;
              v88 = v87 >> 1;
              v89 = v37 + 8 * (v87 >> 1);
              v84 = (char *)(v89 - (v37 - *((_QWORD *)&v39 + 1)));
              if ((_QWORD)v37 == *((_QWORD *)&v39 + 1))
              {
                v85 = (_BYTE *)*((_QWORD *)&v39 + 1);
              }
              else
              {
                v113 = *((_QWORD *)&v37 + 1);
                v115 = v39;
                memmove((void *)(v89 - (v37 - *((_QWORD *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((_QWORD *)&v39 + 1));
                *((_QWORD *)&v37 + 1) = v113;
                *(_QWORD *)&v39 = v115;
              }
              *((_QWORD *)&v39 + 1) = v84;
              *(_QWORD *)&v37 = &v85[8 * v88];
            }
          }
          else
          {
            v84 = (char *)*((_QWORD *)&v39 + 1);
          }
          v99 = *(_QWORD *)(i - 8);
          *((_QWORD *)v84 - 1) = v99;
          *((_QWORD *)&v39 + 1) -= 8;
        }
        v100 = (char *)*a1;
        *(_OWORD *)a1 = v39;
        *((_OWORD *)a1 + 1) = v37;
        if (v100)
        {
          operator delete(v100);
          v5 = (char *)a1[2];
        }
        else
        {
          v5 = (char *)v37;
        }
        goto LABEL_37;
      }
      v111 = v37;
      v114 = v39;
      operator delete(v31);
      v37 = v111;
    }
    v39 = v114;
    goto LABEL_68;
  }
  v27 = operator new(0xFF0uLL);
  v28 = v27;
  if (v24 == v5)
  {
    if (v4 == v25)
    {
      if (v5 == v4)
        v56 = 1;
      else
        v56 = (v24 - v4) >> 2;
      v57 = 2 * v56;
      v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v56);
      v4 = &v58[(v57 + 6) & 0xFFFFFFFFFFFFFFF8];
      v60 = (uint64_t *)a1[1];
      v61 = v4;
      v62 = a1[2] - (_QWORD)v60;
      if (v62)
      {
        v61 = &v4[v62 & 0xFFFFFFFFFFFFFFF8];
        v63 = 8 * (v62 >> 3);
        v64 = v4;
        do
        {
          v65 = *v60++;
          *(_QWORD *)v64 = v65;
          v64 += 8;
          v63 -= 8;
        }
        while (v63);
      }
      v66 = (char *)*a1;
      *a1 = v58;
      a1[1] = v4;
      a1[2] = v61;
      a1[3] = &v58[8 * v59];
      if (v66)
      {
        operator delete(v66);
        v4 = (char *)a1[1];
      }
    }
    *((_QWORD *)v4 - 1) = v28;
    v67 = (char *)a1[1];
    v68 = (char *)a1[2];
    a1[1] = v67 - 8;
    v69 = *((_QWORD *)v67 - 1);
    a1[1] = v67;
    if (v68 == (char *)a1[3])
    {
      v70 = (uint64_t)&v67[-*a1];
      if ((unint64_t)v67 <= *a1)
      {
        if (v68 == (char *)*a1)
          v101 = 1;
        else
          v101 = (uint64_t)&v68[-*a1] >> 2;
        v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v101);
        v104 = &v102[8 * (v101 >> 2)];
        v105 = (uint64_t *)a1[1];
        v68 = v104;
        v106 = a1[2] - (_QWORD)v105;
        if (v106)
        {
          v68 = &v104[v106 & 0xFFFFFFFFFFFFFFF8];
          v107 = 8 * (v106 >> 3);
          v108 = &v102[8 * (v101 >> 2)];
          do
          {
            v109 = *v105++;
            *(_QWORD *)v108 = v109;
            v108 += 8;
            v107 -= 8;
          }
          while (v107);
        }
        v110 = (char *)*a1;
        *a1 = v102;
        a1[1] = v104;
        a1[2] = v68;
        a1[3] = &v102[8 * v103];
        if (v110)
        {
          operator delete(v110);
          v68 = (char *)a1[2];
        }
      }
      else
      {
        v71 = v70 >> 3;
        v16 = v70 >> 3 < -1;
        v72 = (v70 >> 3) + 2;
        if (v16)
          v73 = v72;
        else
          v73 = v71 + 1;
        v74 = -(v73 >> 1);
        v75 = v73 >> 1;
        v76 = &v67[-8 * v75];
        v77 = v68 - v67;
        if (v68 != v67)
        {
          memmove(&v67[-8 * v75], v67, v68 - v67);
          v67 = (char *)a1[1];
        }
        v68 = &v76[v77];
        a1[1] = &v67[8 * v74];
        a1[2] = &v76[v77];
      }
    }
    *(_QWORD *)v68 = v69;
  }
  else
  {
    *(_QWORD *)v5 = v27;
  }
LABEL_36:
  v5 = (char *)(a1[2] + 8);
  a1[2] = v5;
LABEL_37:
  v4 = (char *)a1[1];
LABEL_38:
  if (v5 == v4)
  {
    v53 = 0;
  }
  else
  {
    v52 = a1[5] + a1[4];
    v53 = (_QWORD *)(*(_QWORD *)&v4[8 * (v52 / 0x66)] + 40 * (v52 % 0x66));
  }
  *v53 = *(_QWORD *)a2;
  v53[1] = *(_QWORD *)(a2 + 8);
  v54 = (std::string *)(v53 + 2);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v54, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v55 = *(_OWORD *)(a2 + 16);
    v53[4] = *(_QWORD *)(a2 + 32);
    *(_OWORD *)&v54->__r_.__value_.__l.__data_ = v55;
  }
  ++a1[5];
}

void sub_1C22551F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::tuple<siri::ontology::UsoGraphNode const*,siri::ontology::UsoGraphEdge const*,std::string const>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0x66];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 40 * (v5 % 0x66);
    v9 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0x66] + 40 * ((*(_QWORD *)(a1 + 40) + v5) % 0x66);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 39) < 0)
        {
          operator delete(*(void **)(v8 + 16));
          v7 = (unint64_t)*v6;
        }
        v8 += 40;
        if (v8 - v7 == 4080)
        {
          v10 = (unint64_t)v6[1];
          ++v6;
          v7 = v10;
          v8 = v10;
        }
      }
      while (v8 != v9);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 51;
    goto LABEL_16;
  }
  if (v12 == 2)
  {
    v13 = 102;
LABEL_16:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractSalientEntityContextLabels(const void **this@<X0>, const sirinluexternal::NLContext *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  const sirinluexternal::UsoGraph *v8;
  UsoGraph *ContextLabelsFromGraph;
  unsigned __int8 *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t i;
  uint64_t v15;
  void *__p[2];
  void *v17;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v5 = *((_QWORD *)a2 + 7);
  v6 = *((_QWORD *)a2 + 8);
  if (v5 == v6)
    goto LABEL_22;
  do
  {
    v8 = *(const sirinluexternal::UsoGraph **)(*(_QWORD *)v5 + 40);
    if (v8)
    {
      ContextLabelsFromGraph = nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromGraph((uint64_t)this, this + 11, (uint64_t)(this + 11), v8, (uint64_t)__p);
      v10 = (unsigned __int8 *)v17;
      if (v17)
      {
        do
        {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, v10 + 16, (uint64_t)(v10 + 16));
          v10 = *(unsigned __int8 **)v10;
        }
        while (v10);
      }
      nlv4_inference_orchestrator::context::ContextLabelsExtractor::handleBelowVerbPaths((uint64_t)ContextLabelsFromGraph, a3, this + 11, (uint64_t)__p);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v17);
      v11 = __p[0];
      __p[0] = 0;
      if (v11)
        operator delete(v11);
    }
    v5 += 8;
  }
  while (v5 != v6);
  v12 = *((_QWORD *)a2 + 7);
  while (2)
  {
    if (v12 == *((_QWORD *)a2 + 8))
    {
LABEL_22:
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, this + 23, this + 47);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(a3, (unsigned __int8 *)__p, (uint64_t)__p);
    }
    else
    {
      v13 = *(_QWORD **)v12;
      for (i = *(_QWORD *)(*(_QWORD *)v12 + 8); i != *(_QWORD *)(*(_QWORD *)v12 + 16); i += 8)
      {
        if (*(_QWORD *)(*(_QWORD *)i + 8) || *(_QWORD *)(*(_QWORD *)i + 16))
          goto LABEL_23;
      }
      if (!v13[4] && !v13[5] && !v13[6] && !v13[7] && !v13[8] && !v13[9])
      {
        v12 += 8;
        continue;
      }
LABEL_23:
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, this + 23, this + 44);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(a3, (unsigned __int8 *)__p, (uint64_t)__p);
    }
    break;
  }
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  nlv4_inference_orchestrator::context::ContextLabelsExtractor::postProcessContextLabels(v15, a3);
}

void sub_1C2255540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v15);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabels(const void **a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  void **i;
  unsigned __int8 *v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p;
  void **v12;
  void *v13;
  void *v14;
  void *v15;
  void **v16;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  nlv4_inference_orchestrator::context::ContextLabelsExtractor::extractContextLabelsFromSystemDialogAct(a1, a2, (uint64_t)&v15);
  for (i = v16; i; i = (void **)*i)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, (unsigned __int8 *)i + 16, (uint64_t)(i + 2));
  nlv4_inference_orchestrator::context::generatePlaceholderVerbPaths((uint64_t)&v13, a3);
  v5 = (unsigned __int8 *)v14;
  if (v14)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, v5 + 16, (uint64_t)(v5 + 16));
      v5 = *(unsigned __int8 **)v5;
    }
    while (v5);
  }
  nlv4_inference_orchestrator::context::generateUserStatedTaskPaths((uint64_t)&__p, *(uint64_t **)(a3 + 16));
  v6 = v12;
  if (v12)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, (unsigned __int8 *)v6 + 16, (uint64_t)(v6 + 2));
      v6 = (void **)*v6;
    }
    while (v6);
    v7 = v12;
  }
  else
  {
    v7 = 0;
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v7);
  v8 = __p;
  __p = 0;
  if (v8)
    operator delete(v8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v14);
  v9 = v13;
  v13 = 0;
  if (v9)
    operator delete(v9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v16);
  v10 = v15;
  v15 = 0;
  if (v10)
    operator delete(v10);
}

void sub_1C2255694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v8 - 56);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v7);
  _Unwind_Resume(a1);
}

void uaap_orchestration::resolution::InverseResolutionTable::lookupSemanticValue(_QWORD *a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int16 *v4;
  char v5;

  v4 = std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::find<std::basic_string<char16_t>>(a1, a2);
  if (v4)
  {
    if (*((char *)v4 + 63) < 0)
    {
      std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)a3, *((const std::basic_string<char16_t>::value_type **)v4 + 5), *((_QWORD *)v4 + 6));
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)(v4 + 20);
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v4 + 7);
    }
    v5 = 1;
  }
  else
  {
    v5 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 24) = v5;
}

unsigned __int16 *std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::find<std::basic_string<char16_t>>(_QWORD *a1, unsigned __int16 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int16 **v10;
  unsigned __int16 *i;
  unint64_t v12;

  v4 = std::__string_hash<char16_t>::operator()[abi:ne180100]((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int16 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int16 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v6 == v12)
    {
      if (std::equal_to<std::basic_string<char16_t>>::operator()[abi:ne180100](i + 8, a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

unint64_t std::__string_hash<char16_t>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  char v4;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) == 0)
    v2 = (uint64_t *)a1;
  else
    v2 = *(uint64_t **)a1;
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v4, v2, 2 * v1);
}

BOOL std::equal_to<std::basic_string<char16_t>>::operator()[abi:ne180100](unsigned __int16 *a1, unsigned __int16 *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  _BOOL8 result;

  v2 = *((char *)a1 + 23);
  v3 = *((_QWORD *)a1 + 1);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a1 + 23);
  v4 = *((unsigned __int8 *)a2 + 23);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (!v3)
    return 1;
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *(unsigned __int16 **)a2;
  if (v2 >= 0)
    v7 = a1;
  else
    v7 = *(unsigned __int16 **)a1;
  v8 = v3 - 1;
  do
  {
    v10 = *v7++;
    v9 = v10;
    v12 = *v6++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v11 == v9;
  }
  while (v11 == v9 && v14);
  return result;
}

uint64_t uaap_orchestration::resolution::InverseResolutionTable::buildMapFromResolutionTable@<X0>(const uaap_orchestration::grammar::ResolutionTable *a1@<X1>, uint64_t a2@<X8>)
{
  unsigned __int16 *i;
  __int128 *v6;
  __int128 *v7;
  std::basic_string<char16_t> v9;
  void *__p;
  char v11;
  _QWORD v12[3];
  _BYTE v13[16];
  unsigned __int16 *v14;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uaap_orchestration::grammar::ResolutionTable::getSemanticValues(a1, (uint64_t)v13);
  for (i = v14; i; i = *(unsigned __int16 **)i)
  {
    uaap_orchestration::grammar::ResolutionTable::getSynonyms(a1, i + 8, v12);
    v6 = (__int128 *)v12[0];
    v7 = (__int128 *)v12[1];
    while (v6 != v7)
    {
      std::pair<std::basic_string<char16_t> const,std::basic_string<char16_t>>::pair[abi:ne180100]<true,0>(&v9, v6, (__int128 *)i + 1);
      std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::pair<std::basic_string<char16_t> const,std::basic_string<char16_t>>>(a2, (unsigned __int16 *)&v9, (uint64_t)&v9);
      if (v11 < 0)
        operator delete(__p);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v9.__r_.__value_.__l.__data_);
      v6 = (__int128 *)((char *)v6 + 24);
    }
    v9.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  }
  return std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)v13);
}

void sub_1C22559EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

std::basic_string<char16_t> *std::pair<std::basic_string<char16_t> const,std::basic_string<char16_t>>::pair[abi:ne180100]<true,0>(std::basic_string<char16_t> *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::basic_string<char16_t> *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(this, *(const std::basic_string<char16_t>::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(v6, *(const std::basic_string<char16_t>::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1C2255AB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::pair<std::basic_string<char16_t> const,std::basic_string<char16_t>>>(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int16 **v12;
  unsigned __int16 *i;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  std::basic_string<char16_t> *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v27[2];
  char v28;

  v7 = std::__string_hash<char16_t>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int16 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int16 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::basic_string<char16_t>>::operator()[abi:ne180100](i + 8, a2))
            return;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = (char *)operator new(0x40uLL);
  v27[0] = v16;
  v27[1] = a1 + 16;
  v28 = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v8;
  v17 = (std::basic_string<char16_t> *)(v16 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(v17, *(const std::basic_string<char16_t>::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v16 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *((_QWORD *)v16 + 7) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v28 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v23);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)v16 = *v25;
LABEL_41:
    *v25 = v16;
    goto LABEL_42;
  }
  *(_QWORD *)v16 = *v15;
  *v15 = v16;
  *(_QWORD *)(v24 + 8 * v3) = v15;
  if (*(_QWORD *)v16)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v16 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9)
        v26 %= v9;
    }
    else
    {
      v26 &= v9 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_41;
  }
LABEL_42:
  v27[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27);
}

void sub_1C2255D38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::allocator<snlp::ssu::app::SSUAppParameter>::destroy[abi:ne180100]((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::allocator<snlp::ssu::app::SSUAppParameter>::destroy[abi:ne180100]((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

unint64_t uaap_orchestration::resolution::Resolver::getInverseResolutionTableForLabel@<X0>(_QWORD *a1@<X0>, unsigned __int16 *a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t result;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int16 **v12;
  unsigned __int16 *v13;
  unint64_t v14;
  char v15;

  result = std::__string_hash<char16_t>::operator()[abi:ne180100]((uint64_t)a2);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    goto LABEL_17;
  v8 = result;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = result;
    if (result >= *(_QWORD *)&v7)
      v11 = result % *(_QWORD *)&v7;
  }
  else
  {
    v11 = (*(_QWORD *)&v7 - 1) & result;
  }
  v12 = *(unsigned __int16 ***)(*a1 + 8 * v11);
  if (!v12 || (v13 = *v12) == 0)
  {
LABEL_17:
    v15 = 0;
    *a3 = 0;
    goto LABEL_18;
  }
  while (1)
  {
    v14 = *((_QWORD *)v13 + 1);
    if (v8 == v14)
      break;
    if (v10 > 1)
    {
      if (v14 >= *(_QWORD *)&v7)
        v14 %= *(_QWORD *)&v7;
    }
    else
    {
      v14 &= *(_QWORD *)&v7 - 1;
    }
    if (v14 != v11)
      goto LABEL_17;
LABEL_16:
    v13 = *(unsigned __int16 **)v13;
    if (!v13)
      goto LABEL_17;
  }
  result = std::equal_to<std::basic_string<char16_t>>::operator()[abi:ne180100](v13 + 8, a2);
  if ((result & 1) == 0)
    goto LABEL_16;
  result = std::unordered_map<std::basic_string<char16_t>,std::basic_string<char16_t>>::unordered_map((uint64_t)a3, (uint64_t)(v13 + 20));
  v15 = 1;
LABEL_18:
  a3[40] = v15;
  return result;
}

uint64_t std::unordered_map<std::basic_string<char16_t>,std::basic_string<char16_t>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int16 **)(a2 + 16); i; i = *(unsigned __int16 **)i)
    std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::pair<std::basic_string<char16_t> const,std::basic_string<char16_t>> const&>(a1, i + 8, (uint64_t)(i + 8));
  return a1;
}

void sub_1C2255F5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::pair<std::basic_string<char16_t> const,std::basic_string<char16_t>> const&>(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int16 **v12;
  unsigned __int16 *i;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  std::basic_string<char16_t> *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v28[2];
  char v29;

  v7 = std::__string_hash<char16_t>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int16 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int16 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::basic_string<char16_t>>::operator()[abi:ne180100](i + 8, a2))
            return;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = (char *)operator new(0x40uLL);
  v17 = v16;
  v28[0] = v16;
  v28[1] = a1 + 16;
  v29 = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v8;
  if (*(char *)(a3 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)(v16 + 16), *(const std::basic_string<char16_t>::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
    *((_QWORD *)v16 + 4) = *(_QWORD *)(a3 + 16);
  }
  v18 = (std::basic_string<char16_t> *)(v17 + 5);
  if (*(char *)(a3 + 47) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(v18, *(const std::basic_string<char16_t>::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
  }
  else
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 24);
    v17[7] = *(_QWORD *)(a3 + 40);
  }
  v29 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v24);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
  {
    *v17 = *v26;
LABEL_44:
    *v26 = v17;
    goto LABEL_45;
  }
  *v17 = *v15;
  *v15 = v17;
  *(_QWORD *)(v25 + 8 * v3) = v15;
  if (*v17)
  {
    v27 = *(_QWORD *)(*v17 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_44;
  }
LABEL_45:
  v28[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
}

void sub_1C22561FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 39) < 0)
    operator delete(*v3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void uaap_orchestration::resolution::Resolver::lookupSemanticValueForLabel(_QWORD *a1@<X0>, unsigned __int16 *a2@<X1>, unsigned __int16 *a3@<X2>, _BYTE *a4@<X8>)
{
  _QWORD v6[5];
  char v7;

  uaap_orchestration::resolution::Resolver::getInverseResolutionTableForLabel(a1, a2, v6);
  if (v7)
  {
    uaap_orchestration::resolution::InverseResolutionTable::lookupSemanticValue(v6, a3, (uint64_t)a4);
    if (v7)
      std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::~__hash_table((uint64_t)v6);
  }
  else
  {
    *a4 = 0;
    a4[24] = 0;
  }
}

void sub_1C2256290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14)
    std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(exception_object);
}

void uaap_orchestration::resolution::Resolver::buildResolutionTablesFromGrammar(const uaap_orchestration::grammar::UaapGrammar *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int16 **v12;
  unsigned __int16 *i;
  unint64_t v14;
  _QWORD *v15;
  std::basic_string<char16_t> *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  int8x8_t prime;
  void *v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  _QWORD *v44;
  std::basic_string<char16_t> v45;
  std::basic_string<char16_t> __p;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  _BYTE v52[40];
  _BYTE v53[40];
  char v54;
  std::basic_string<char16_t> v55;
  _BYTE v56[56];
  _QWORD v57[2];
  char v58;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v5 = *(_QWORD *)a1;
  v6 = *((_QWORD *)a1 + 1);
  if (*(_QWORD *)a1 != v6)
  {
    v44 = (_QWORD *)(a2 + 16);
    while (1)
    {
      std::__optional_copy_base<uaap_orchestration::grammar::ValueConstraints,false>::__optional_copy_base[abi:ne180100](&v55, v5 + 48);
      if (v56[48])
      {
        std::__optional_copy_base<uaap_orchestration::grammar::ResolutionTable,false>::__optional_copy_base[abi:ne180100](v53, (uint64_t)v56);
        if (v54)
          break;
      }
LABEL_96:
      std::__optional_destruct_base<uaap_orchestration::grammar::ValueConstraints,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v55);
      v5 += 184;
      if (v5 == v6)
        return;
    }
    uaap_orchestration::resolution::InverseResolutionTable::buildMapFromResolutionTable((const uaap_orchestration::grammar::ResolutionTable *)v53, (uint64_t)v52);
    if (*(char *)(v5 + 23) < 0)
      std::basic_string<char16_t>::__init_copy_ctor_external(&v45, *(const std::basic_string<char16_t>::value_type **)v5, *(_QWORD *)(v5 + 8));
    else
      v45 = *(std::basic_string<char16_t> *)v5;
    __p = v45;
    memset(&v45, 0, sizeof(v45));
    std::unordered_map<std::basic_string<char16_t>,std::basic_string<char16_t>>::unordered_map((uint64_t)&v47, (uint64_t)v52);
    v7 = std::__string_hash<char16_t>::operator()[abi:ne180100]((uint64_t)&__p);
    v8 = v7;
    v9 = *(_QWORD *)(a2 + 8);
    if (v9)
    {
      v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
      v10.i16[0] = vaddlv_u8(v10);
      v11 = v10.u32[0];
      if (v10.u32[0] > 1uLL)
      {
        v3 = v7;
        if (v7 >= v9)
          v3 = v7 % v9;
      }
      else
      {
        v3 = (v9 - 1) & v7;
      }
      v12 = *(unsigned __int16 ***)(*(_QWORD *)a2 + 8 * v3);
      if (v12)
      {
        for (i = *v12; i; i = *(unsigned __int16 **)i)
        {
          v14 = *((_QWORD *)i + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::basic_string<char16_t>>::operator()[abi:ne180100](i + 8, (unsigned __int16 *)&__p))
              goto LABEL_90;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
        }
      }
    }
    v15 = operator new(0x50uLL);
    v57[0] = v15;
    v57[1] = v44;
    v58 = 0;
    *v15 = 0;
    v15[1] = v8;
    v16 = (std::basic_string<char16_t> *)(v15 + 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::basic_string<char16_t>::__init_copy_ctor_external(v16, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v15[4] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    }
    v17 = v47;
    v18 = v48;
    v19 = v49;
    v20 = v50;
    v15[7] = v49;
    v21 = v15 + 7;
    v47 = 0;
    v48 = 0;
    *(v21 - 2) = v17;
    *(v21 - 1) = v18;
    v21[1] = v20;
    *((_DWORD *)v21 + 4) = v51;
    if (v20)
    {
      v22 = *(_QWORD *)(v19 + 8);
      if ((v18 & (v18 - 1)) != 0)
      {
        if (v22 >= v18)
          v22 %= v18;
      }
      else
      {
        v22 &= v18 - 1;
      }
      *(_QWORD *)(v17 + 8 * v22) = v21;
      v49 = 0;
      v50 = 0;
    }
    v58 = 1;
    v23 = (float)(unint64_t)(*(_QWORD *)(a2 + 24) + 1);
    v24 = *(float *)(a2 + 32);
    if (v9 && (float)(v24 * (float)v9) >= v23)
    {
LABEL_80:
      v40 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v3);
      v41 = v57[0];
      if (v40)
      {
        *(_QWORD *)v57[0] = *v40;
      }
      else
      {
        *(_QWORD *)v57[0] = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v41;
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v3) = v44;
        if (!*(_QWORD *)v41)
          goto LABEL_89;
        v42 = *(_QWORD *)(*(_QWORD *)v41 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v42 >= v9)
            v42 %= v9;
        }
        else
        {
          v42 &= v9 - 1;
        }
        v40 = (_QWORD *)(*(_QWORD *)a2 + 8 * v42);
      }
      *v40 = v41;
LABEL_89:
      v57[0] = 0;
      ++*(_QWORD *)(a2 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>,void *>>>>::reset[abi:ne180100]((uint64_t)v57);
LABEL_90:
      std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::~__hash_table((uint64_t)&v47);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
      std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::~__hash_table((uint64_t)v52);
      if (v54)
        std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table((uint64_t)v53);
      goto LABEL_96;
    }
    v25 = v9 < 3 || (v9 & (v9 - 1)) != 0;
    v26 = v25 | (2 * v9);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      prime = (int8x8_t)v27;
    else
      prime = (int8x8_t)v26;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_46;
    if (*(_QWORD *)&prime < v9)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 24) / *(float *)(a2 + 32));
      if (v9 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (*(_QWORD *)&prime <= v35)
        prime = (int8x8_t)v35;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a2 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_46:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v29 = operator new(8 * *(_QWORD *)&prime);
          v30 = *(void **)a2;
          *(_QWORD *)a2 = v29;
          if (v30)
            operator delete(v30);
          v31 = 0;
          *(int8x8_t *)(a2 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a2 + 8 * v31++) = 0;
          while (*(_QWORD *)&prime != v31);
          v32 = (_QWORD *)*v44;
          if (*v44)
          {
            v33 = v32[1];
            v34 = (uint8x8_t)vcnt_s8(prime);
            v34.i16[0] = vaddlv_u8(v34);
            if (v34.u32[0] > 1uLL)
            {
              if (v33 >= *(_QWORD *)&prime)
                v33 %= *(_QWORD *)&prime;
            }
            else
            {
              v33 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a2 + 8 * v33) = v44;
            v38 = (_QWORD *)*v32;
            if (*v32)
            {
              do
              {
                v39 = v38[1];
                if (v34.u32[0] > 1uLL)
                {
                  if (v39 >= *(_QWORD *)&prime)
                    v39 %= *(_QWORD *)&prime;
                }
                else
                {
                  v39 &= *(_QWORD *)&prime - 1;
                }
                if (v39 != v33)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a2 + 8 * v39))
                  {
                    *(_QWORD *)(*(_QWORD *)a2 + 8 * v39) = v32;
                    goto LABEL_71;
                  }
                  *v32 = *v38;
                  *v38 = **(_QWORD **)(*(_QWORD *)a2 + 8 * v39);
                  **(_QWORD **)(*(_QWORD *)a2 + 8 * v39) = v38;
                  v38 = v32;
                }
                v39 = v33;
LABEL_71:
                v32 = v38;
                v38 = (_QWORD *)*v38;
                v33 = v39;
              }
              while (v38);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_75;
        }
        v43 = *(void **)a2;
        *(_QWORD *)a2 = 0;
        if (v43)
          operator delete(v43);
        v9 = 0;
        *(_QWORD *)(a2 + 8) = 0;
      }
    }
LABEL_75:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
    goto LABEL_80;
  }
}

void sub_1C2256850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  uint64_t v43;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>,void *>>>>::reset[abi:ne180100](v43 - 112);
  std::pair<std::basic_string<char16_t> const,uaap_orchestration::resolution::InverseResolutionTable>::~pair((uint64_t)&__p);
  std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::~__hash_table((uint64_t)&a28);
  if (a38)
    std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table((uint64_t)&a33);
  std::__optional_destruct_base<uaap_orchestration::grammar::ValueConstraints,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a40);
  std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>>>::~__hash_table(v42);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::basic_string<char16_t> const,std::vector<std::basic_string<char16_t>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__optional_destruct_base<uaap_orchestration::grammar::ValueConstraints,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 128))
  {
    if (*(_BYTE *)(a1 + 120))
      std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table(a1 + 80);
    v3 = (void **)(a1 + 56);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    v3 = (void **)(a1 + 32);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    if (*(_BYTE *)(a1 + 24) && *(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::pair<std::basic_string<char16_t> const,uaap_orchestration::resolution::InverseResolutionTable>::~pair(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::basic_string<char16_t> const,uaap_orchestration::resolution::InverseResolutionTable>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::basic_string<char16_t> const,uaap_orchestration::resolution::InverseResolutionTable>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::basic_string<char16_t> const,std::vector<std::basic_string<char16_t>>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,uaap_orchestration::resolution::InverseResolutionTable>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::basic_string<char16_t> const,uaap_orchestration::resolution::InverseResolutionTable>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::ContactAddressDowncaster(uint64_t a1, _OWORD **a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  const void *v11;

  v6 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, "TreeManipulation_ContactAddressDowncaster");
  v6[3] = "contact_address_downcast";
  v7 = v6 + 4;
  std::string::basic_string[abi:ne180100]<0>(v6 + 4, "emailAddress");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 56), "phoneNumber");
  if (*(char *)(a1 + 55) < 0)
  {
    v9 = *(const void **)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v8 = *(unsigned __int8 *)(a1 + 55);
    v9 = v7;
  }
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::getMatchingSpans(a1, a3, v9, v8, (uint64_t *)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
  {
    v11 = *(const void **)(a1 + 56);
    v10 = *(_QWORD *)(a1 + 64);
  }
  else
  {
    v10 = *(unsigned __int8 *)(a1 + 79);
    v11 = (const void *)(a1 + 56);
  }
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::getMatchingSpans(a1, a3, v11, v10, (uint64_t *)(a1 + 104));
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::IndexedToken*,nlv4_inference_orchestrator::orchestration::IndexedToken*>((_QWORD *)(a1 + 128), *a2, a2[1], 0x8E38E38E38E38E39 * (a2[1] - *a2));
  return a1;
}

void sub_1C2256C24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void **v4;
  va_list va;

  va_start(va, a2);
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 79) < 0)
    operator delete(*v4);
  if (*(char *)(v2 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::getMatchingSpans(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  const void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v8 = *(_QWORD **)a2;
  v9 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 != v9)
  {
    do
    {
      if (nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::isRelevantMatchingSpan(v8, a3, a4))std::vector<sirinluinternal::MatchingSpan>::push_back[abi:ne180100](a5, (uint64_t)v8);
      v8 += 11;
    }
    while (v8 != v9);
  }
  v11 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    v12 = *(_QWORD *)(a1 + 24);
    v13 = 0x2E8BA2E8BA2E8BA3 * ((a5[1] - *a5) >> 3);
    v14 = 136315650;
    v15 = v12;
    v16 = 2048;
    v17 = v13;
    v18 = 2080;
    v19 = a3;
    _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEBUG, "[%s] After filtering, we have %lu %s matching spans", (uint8_t *)&v14, 0x20u);
  }
}

void sub_1C2256DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

const void **nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::isRelevantMatchingSpan(_QWORD *a1, const void *a2, uint64_t a3)
{
  const void **result;
  size_t v5;
  const void **v6;
  _DWORD *v7;
  _DWORD *v8;

  result = (const void **)a1[6];
  if (result)
  {
    if (*((char *)result + 23) < 0)
    {
      v6 = result;
      result = (const void **)*result;
      v5 = (size_t)v6[1];
    }
    else
    {
      v5 = *((unsigned __int8 *)result + 23);
    }
    if (v5 == a3 && !memcmp(result, a2, v5))
    {
      v7 = (_DWORD *)a1[1];
      v8 = (_DWORD *)a1[2];
      if (v7 != v8)
      {
        while (*v7 != 8)
        {
          if (++v7 == v8)
          {
            v7 = (_DWORD *)a1[2];
            return (const void **)(v7 != v8);
          }
        }
      }
      return (const void **)(v7 != v8);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::getDescription(nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::findTokenIndicesOfUngroundedNode(char **this@<X0>, nlv4_inference_orchestrator::trees::TreeNode *a2@<X1>, unint64_t *a3@<X8>)
{
  nlv4_inference_orchestrator::trees::TreeNode *v3;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  NSObject *v21;
  void **v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  BOOL v49;
  char v51;
  NSObject *v52;
  char *v53;
  nlv4_inference_orchestrator::trees::TreeNode *v54;
  nlv4_inference_orchestrator::trees::TreeNode *v55;
  unint64_t *v56;
  void *__p[2];
  char v58;
  uint8_t v59[32];
  __int128 v60;
  uint8_t buf[4];
  void **v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;

  v3 = a2;
  v65 = *MEMORY[0x1E0C80C00];
  v60 = 0u;
  memset(v59, 0, sizeof(v59));
  __p[0] = a2;
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(v59, __p);
  v6 = *((_QWORD *)&v60 + 1);
  if (!*((_QWORD *)&v60 + 1))
  {
    std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)v59);
    v7 = 0;
    goto LABEL_74;
  }
  v55 = v3;
  v56 = a3;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = v6 - 1;
    v11 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)&v59[8] + (((unint64_t)(v60 + v10) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * ((v60 + v10) & 0x1FF));
    *((_QWORD *)&v60 + 1) = v10;
    std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::__maybe_remove_back_spare[abi:ne180100](v59);
    if (v11[11] != v11[12])
      goto LABEL_46;
    std::string::basic_string[abi:ne180100]<0>(__p, this[3]);
    v13 = this[16];
    v12 = this[17];
    v14 = v12 - v13;
    if (v12 == v13)
    {
LABEL_8:
      v20 = 1;
      v21 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        v22 = __p;
        if (v58 < 0)
          v22 = (void **)__p[0];
        v23 = v11[9];
        *(_DWORD *)buf = 136315394;
        v62 = v22;
        v63 = 2048;
        v64 = v23;
        v24 = v21;
        v25 = "[%s] Warning: could not find start token index corresponding to node.startCharIndex=%lu";
LABEL_20:
        _os_log_impl(&dword_1C2196000, v24, OS_LOG_TYPE_DEFAULT, v25, buf, 0x16u);
      }
    }
    else
    {
      v15 = 0;
      v16 = 0x8E38E38E38E38E39 * (v14 >> 4);
      v17 = (uint64_t *)(v13 + 96);
      v18 = (uint64_t *)(v13 + 104);
      while (1)
      {
        v19 = *v17;
        v17 += 18;
        if (v19 == v11[9])
          break;
        ++v15;
        v18 += 18;
        if (v15 >= v16)
          goto LABEL_8;
      }
      if (v15 < v16)
      {
        v21 = v15;
        while (1)
        {
          v26 = *v18;
          v18 += 18;
          v21 = ((char *)v21 + 1);
          if (v26 == v11[10])
            break;
          if (v16 == v21)
            goto LABEL_16;
        }
        v20 = 0;
        v30 = v15 & 0xFFFFFFFFFFFFFF00;
        v29 = v15;
        goto LABEL_22;
      }
LABEL_16:
      v20 = 1;
      v21 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        v27 = __p;
        if (v58 < 0)
          v27 = (void **)__p[0];
        v28 = v11[10];
        *(_DWORD *)buf = 136315394;
        v62 = v27;
        v63 = 2048;
        v64 = v28;
        v24 = v21;
        v25 = "[%s] Warning: could not find end token index corresponding to node.endCharIndex=%lu";
        goto LABEL_20;
      }
    }
    v29 = 0;
    v30 = 0;
LABEL_22:
    if (v58 < 0)
    {
      operator delete(__p[0]);
      if ((v20 & 1) != 0)
        goto LABEL_46;
    }
    else if ((v20 & 1) != 0)
    {
      goto LABEL_46;
    }
    if (v8 >= v9)
    {
      v31 = ((char *)v8 - (char *)v7) >> 4;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 60)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      if (v9 - v7 > v32)
        v32 = v9 - v7;
      if ((unint64_t)((char *)v9 - (char *)v7) >= 0x7FFFFFFFFFFFFFF0)
        v33 = 0xFFFFFFFFFFFFFFFLL;
      else
        v33 = v32;
      if (v33)
      {
        if (v33 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v34 = (char *)operator new(16 * v33);
      }
      else
      {
        v34 = 0;
      }
      v35 = (unint64_t *)&v34[16 * v31];
      *v35 = v30 | v29;
      v35[1] = (unint64_t)v21;
      if (v8 == v7)
      {
        v37 = &v34[16 * v31];
      }
      else
      {
        v36 = &v34[16 * v31];
        do
        {
          v37 = v36 - 16;
          *((_OWORD *)v36 - 1) = *((_OWORD *)v8 - 1);
          v8 -= 2;
          v36 -= 16;
        }
        while (v8 != v7);
      }
      v9 = (unint64_t *)&v34[16 * v33];
      v8 = v35 + 2;
      if (v7)
        operator delete(v7);
      v7 = (unint64_t *)v37;
    }
    else
    {
      *v8 = v30 | v29;
      v8[1] = (unint64_t)v21;
      v8 += 2;
    }
LABEL_46:
    v38 = (char *)v11[11];
    v39 = (char *)v11[12];
    while (v38 != v39)
    {
      __p[0] = v38;
      std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(v59, __p);
      v38 += 144;
    }
    v6 = *((_QWORD *)&v60 + 1);
  }
  while (*((_QWORD *)&v60 + 1));
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)v59);
  if (v7 != v8)
  {
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = v7;
    a3 = v56;
    do
    {
      v45 = *v44;
      v46 = v44[1];
      v44 += 2;
      if (v40)
        v47 = v45 >= v41;
      else
        v47 = 0;
      if (!v47)
      {
        v41 = v45;
        v40 = 1;
      }
      if (v42)
        v49 = v43 >= v46;
      else
        v49 = 0;
      if (!v49)
      {
        v43 = v46;
        v42 = 1;
      }
    }
    while (v44 != v8);
    *v56 = v41;
    v56[1] = v43;
    v51 = 1;
    goto LABEL_80;
  }
  v3 = v55;
  a3 = v56;
LABEL_74:
  v52 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
  {
    v53 = this[3];
    if (*((char *)v3 + 23) >= 0)
      v54 = v3;
    else
      v54 = *(nlv4_inference_orchestrator::trees::TreeNode **)v3;
    *(_DWORD *)v59 = 136315394;
    *(_QWORD *)&v59[4] = v53;
    *(_WORD *)&v59[12] = 2080;
    *(_QWORD *)&v59[14] = v54;
    _os_log_impl(&dword_1C2196000, v52, OS_LOG_TYPE_DEBUG, "[%s] No grounded tokens found under node: %s", v59, 0x16u);
  }
  v51 = 0;
  *(_BYTE *)a3 = 0;
LABEL_80:
  *((_BYTE *)a3 + 16) = v51;
  if (v7)
    operator delete(v7);
}

void sub_1C2257320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::handleTreeNode(char **this, nlv4_inference_orchestrator::trees::TreeNode *a2, BOOL *a3)
{
  std::string *v6;
  unint64_t v7;
  uint64_t v8;
  char *i;
  uint64_t v10;
  char *j;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;

  *a3 = 0;
  if (nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::isCommonContactAddressNode(a2, a2))
  {
    nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::findTokenIndicesOfUngroundedNode(this, a2, &v13);
    if (v15)
    {
      v7 = v13;
      v8 = v14;
      for (i = this[10]; i != this[11]; i += 88)
      {
        if ((i[80] & 2) != 0 && (i[80] & 1) != 0 && v13 == *((_DWORD *)i + 19) && v14 == *((_DWORD *)i + 18))
        {
          v10 = siri::ontology::oname::graph::ontology_init::common_EmailAddress((siri::ontology::oname::graph::ontology_init *)v6);
          v6 = std::string::operator=((std::string *)a2, (const std::string *)(v10 + 8));
          *a3 = 1;
          break;
        }
      }
      for (j = this[13]; j != this[14]; j += 88)
      {
        if ((j[80] & 2) != 0 && (j[80] & 1) != 0 && v7 == *((_DWORD *)j + 19) && v8 == *((_DWORD *)j + 18))
        {
          v12 = siri::ontology::oname::graph::ontology_init::common_PhoneNumber((siri::ontology::oname::graph::ontology_init *)v6);
          std::string::operator=((std::string *)a2, (const std::string *)(v12 + 8));
          *a3 = 1;
          return;
        }
      }
    }
  }
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::isCommonContactAddressNode(nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster *this, const nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v18;
  _BOOL8 result;

  v2 = this;
  v3 = siri::ontology::oname::graph::ontology_init::common_ContactAddress(this);
  v4 = *((unsigned __int8 *)v2 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = *((unsigned __int8 *)v2 + 23);
  else
    v5 = *((_QWORD *)v2 + 1);
  v6 = *(unsigned __int8 *)(v3 + 31);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(v3 + 16);
  if (v5 != v6)
    return 0;
  v10 = *(unsigned __int8 **)(v3 + 8);
  v8 = (unsigned __int8 *)(v3 + 8);
  v9 = v10;
  if (v7 >= 0)
    v11 = v8;
  else
    v11 = v9;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)v2, v11, *((_QWORD *)v2 + 1)) == 0;
  if (!*((_BYTE *)v2 + 23))
    return 1;
  v12 = v4 - 1;
  do
  {
    v14 = *(unsigned __int8 *)v2;
    v2 = (nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster *)((char *)v2 + 1);
    v13 = v14;
    v16 = *v11++;
    v15 = v16;
    v18 = v12-- != 0;
    result = v13 == v15;
  }
  while (v13 == v15 && v18);
  return result;
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::hasMatchingSpanWithIndices(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;

  for (i = *a2; ; i += 88)
  {
    if (i == a2[1])
      return 0;
    if ((*(_BYTE *)(i + 80) & 2) != 0
      && (*(_BYTE *)(i + 80) & 1) != 0
      && *(_DWORD *)(i + 76) == a3
      && *(_DWORD *)(i + 72) == a4)
    {
      break;
    }
  }
  return 1;
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::downcast(char **this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  nlv4_inference_orchestrator::trees::TreeNode *v6;
  nlv4_inference_orchestrator::trees::TreeNode *v7;
  nlv4_inference_orchestrator::trees::TreeNode *v8;
  BOOL v10;
  nlv4_inference_orchestrator::trees::TreeNode *v11;
  _OWORD v12[2];
  __int128 v13;

  v13 = 0u;
  memset(v12, 0, sizeof(v12));
  v11 = a2;
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(v12, &v11);
  v3 = *((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    LOBYTE(v4) = 0;
    do
    {
      v5 = v3 - 1;
      v6 = *(nlv4_inference_orchestrator::trees::TreeNode **)(*(_QWORD *)(*((_QWORD *)&v12[0] + 1)
                                                                        + (((unint64_t)(v13 + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
                                                            + 8 * ((v13 + v5) & 0x1FF));
      *((_QWORD *)&v13 + 1) = v5;
      std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::__maybe_remove_back_spare[abi:ne180100](v12);
      v10 = 0;
      nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::handleTreeNode(this, v6, &v10);
      v4 |= v10;
      v8 = (nlv4_inference_orchestrator::trees::TreeNode *)*((_QWORD *)v6 + 11);
      v7 = (nlv4_inference_orchestrator::trees::TreeNode *)*((_QWORD *)v6 + 12);
      while (v8 != v7)
      {
        v11 = v8;
        std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(v12, &v11);
        v8 = (nlv4_inference_orchestrator::trees::TreeNode *)((char *)v8 + 144);
      }
      v3 = *((_QWORD *)&v13 + 1);
    }
    while (*((_QWORD *)&v13 + 1));
  }
  else
  {
    v4 = 0;
  }
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_1C2257644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *snlp::ssu::cache::SSUCacheFileReadStreamManager::SSUCacheFileReadStreamManager(std::string *this, __int128 *a2, std::string::size_type *a3, __int128 *a4)
{
  __int128 v7;
  std::string::size_type v8;
  unint64_t *v9;
  unint64_t v10;
  std::string *v11;
  __int128 v12;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  v8 = a3[1];
  this[1].__r_.__value_.__r.__words[0] = *a3;
  this[1].__r_.__value_.__l.__size_ = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (std::string *)((char *)this + 40);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v12 = *a4;
    this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = 0u;
  LODWORD(this[4].__r_.__value_.__l.__data_) = 1065353216;
  return this;
}

void sub_1C2257B34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::cache::SSUCacheFileReadStreamManager::openReadStream(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  void **v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  snlp::ssu::cache::SSUCacheFileReadStream *v12;
  snlp::ssu::cache::SSUCacheFileReadStream *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  unint64_t v22;
  const char *v23;
  _QWORD **v24;
  _QWORD *i;
  unint64_t v26;
  std::string *v27;
  _QWORD *v28;
  std::string *v29;
  float v30;
  float v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  int8x8_t prime;
  void *v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint8x8_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  void *v51;
  _BYTE v52[22];
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  const char *v56;
  uint8_t buf[4];
  uint64_t v58;
  __int16 v59;
  const char *v60;
  std::__fs::filesystem::path v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v5 = (void **)(a1 + 64);
  if (!std::__hash_table<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::__unordered_map_hasher<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,snlp::ssu::app::SSUAppCategoryHash,std::equal_to<snlp::ssu::app::SSUAppCategory>,true>,std::__unordered_map_equal<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::equal_to<snlp::ssu::app::SSUAppCategory>,snlp::ssu::app::SSUAppCategoryHash,true>,std::allocator<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>>>::find<snlp::ssu::app::SSUAppCategory>((_QWORD *)(a1 + 64), (char *)a2))
  {
    snlp::ssu::cache::SSUCacheDirectory::lookupCacheFileForCategory(*(_QWORD *)(a1 + 24), (char *)a1, (char *)(a2 + 8), *(_BYTE *)(a2 + 32), (size_t *)(a1 + 40), buf);
    if (!v62)
    {
      v20 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        if (*(char *)(a2 + 31) >= 0)
          v21 = a2 + 8;
        else
          v21 = *(_QWORD *)(a2 + 8);
        v22 = *(unsigned __int8 *)(a2 + 32);
        if (v22 <= 3)
          v23 = EnumNamesSSUCategoryType(void)::names[v22];
        else
          v23 = "";
        *(_DWORD *)v52 = 136315906;
        *(_QWORD *)&v52[4] = "SSU";
        *(_WORD *)&v52[12] = 2080;
        *(_QWORD *)&v52[14] = "[insights-snlp-ssu]: ";
        v53 = 2080;
        v54 = v21;
        v55 = 2080;
        v56 = v23;
        _os_log_impl(&dword_1C2196000, v20, OS_LOG_TYPE_DEBUG, "[%s] %sCache file is missing for app %s and category %s. This means that it has not yet been registered outside the request handling path. Skipping.", v52, 0x2Au);
      }
      v19 = 0;
LABEL_99:
      std::__optional_destruct_base<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
      return v19;
    }
    v12 = (snlp::ssu::cache::SSUCacheFileReadStream *)operator new();
    v13 = snlp::ssu::cache::SSUCacheFileReadStream::SSUCacheFileReadStream(v12, &v61, 0);
    v14 = *(_QWORD *)(a1 + 72);
    v15 = snlp::ssu::app::SSUAppCategoryHash::operator()((uint64_t)v13, (char *)a2);
    v16 = v15;
    if (v14)
    {
      v17 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
      v17.i16[0] = vaddlv_u8(v17);
      v18 = v17.u32[0];
      if (v17.u32[0] > 1uLL)
      {
        v2 = v15;
        if (v15 >= v14)
          v2 = v15 % v14;
      }
      else
      {
        v2 = (v14 - 1) & v15;
      }
      v24 = (_QWORD **)*((_QWORD *)*v5 + v2);
      if (v24)
      {
        for (i = *v24; i; i = (_QWORD *)*i)
        {
          v26 = i[1];
          if (v26 == v16)
          {
            if (snlp::ssu::app::SSUAppCategory::operator==((uint64_t)(i + 2), a2))
              goto LABEL_96;
          }
          else
          {
            if (v18 > 1)
            {
              if (v26 >= v14)
                v26 %= v14;
            }
            else
            {
              v26 &= v14 - 1;
            }
            if (v26 != v2)
              break;
          }
        }
      }
    }
    v27 = (std::string *)operator new(0x40uLL);
    v28 = (_QWORD *)(a1 + 80);
    *(_QWORD *)v52 = v27;
    *(_QWORD *)&v52[8] = a1 + 80;
    v52[16] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v27->__r_.__value_.__l.__size_ = v16;
    LODWORD(v27->__r_.__value_.__r.__words[2]) = *(_DWORD *)a2;
    v27->__r_.__value_.__s.__data_[20] = *(_BYTE *)(a2 + 4);
    v29 = v27 + 1;
    if (*(char *)(a2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
    }
    else
    {
      *(_OWORD *)&v29->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 8);
      v27[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    }
    v27[2].__r_.__value_.__s.__data_[0] = *(_BYTE *)(a2 + 32);
    v27[2].__r_.__value_.__l.__size_ = 0;
    v52[16] = 1;
    v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 88) + 1);
    v31 = *(float *)(a1 + 96);
    if (v14 && (float)(v31 * (float)v14) >= v30)
    {
LABEL_86:
      v47 = (_QWORD *)*((_QWORD *)*v5 + v2);
      i = *(_QWORD **)v52;
      if (v47)
      {
        **(_QWORD **)v52 = *v47;
      }
      else
      {
        **(_QWORD **)v52 = *v28;
        *v28 = i;
        *((_QWORD *)*v5 + v2) = v28;
        if (!*i)
          goto LABEL_95;
        v48 = *(_QWORD *)(*i + 8);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v48 >= v14)
            v48 %= v14;
        }
        else
        {
          v48 &= v14 - 1;
        }
        v47 = (char *)*v5 + 8 * v48;
      }
      *v47 = i;
LABEL_95:
      *(_QWORD *)v52 = 0;
      ++*(_QWORD *)(a1 + 88);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,void *>>>>::reset[abi:ne180100]((uint64_t)v52);
LABEL_96:
      v49 = i[7];
      i[7] = v12;
      if (v49)
        std::default_delete<snlp::ssu::cache::SSUCacheFileReadStream>::operator()[abi:ne180100](v49);
      v19 = 1;
      goto LABEL_99;
    }
    v32 = 1;
    if (v14 >= 3)
      v32 = (v14 & (v14 - 1)) != 0;
    v33 = v32 | (2 * v14);
    v34 = vcvtps_u32_f32(v30 / v31);
    if (v33 <= v34)
      prime = (int8x8_t)v34;
    else
      prime = (int8x8_t)v33;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v14 = *(_QWORD *)(a1 + 72);
    if (*(_QWORD *)&prime > v14)
      goto LABEL_49;
    if (*(_QWORD *)&prime < v14)
    {
      v42 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 88) / *(float *)(a1 + 96));
      if (v14 < 3 || (v43 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        v42 = std::__next_prime(v42);
      }
      else
      {
        v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2)
          v42 = v44;
      }
      if (*(_QWORD *)&prime <= v42)
        prime = (int8x8_t)v42;
      if (*(_QWORD *)&prime >= v14)
      {
        v14 = *(_QWORD *)(a1 + 72);
      }
      else
      {
        if (prime)
        {
LABEL_49:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v36 = operator new(8 * *(_QWORD *)&prime);
          v37 = *v5;
          *v5 = v36;
          if (v37)
            operator delete(v37);
          v38 = 0;
          *(int8x8_t *)(a1 + 72) = prime;
          do
            *((_QWORD *)*v5 + v38++) = 0;
          while (*(_QWORD *)&prime != v38);
          v39 = (_QWORD *)*v28;
          if (*v28)
          {
            v40 = v39[1];
            v41 = (uint8x8_t)vcnt_s8(prime);
            v41.i16[0] = vaddlv_u8(v41);
            if (v41.u32[0] > 1uLL)
            {
              if (v40 >= *(_QWORD *)&prime)
                v40 %= *(_QWORD *)&prime;
            }
            else
            {
              v40 &= *(_QWORD *)&prime - 1;
            }
            *((_QWORD *)*v5 + v40) = v28;
            v45 = (_QWORD *)*v39;
            if (*v39)
            {
              do
              {
                v46 = v45[1];
                if (v41.u32[0] > 1uLL)
                {
                  if (v46 >= *(_QWORD *)&prime)
                    v46 %= *(_QWORD *)&prime;
                }
                else
                {
                  v46 &= *(_QWORD *)&prime - 1;
                }
                if (v46 != v40)
                {
                  if (!*((_QWORD *)*v5 + v46))
                  {
                    *((_QWORD *)*v5 + v46) = v39;
                    goto LABEL_77;
                  }
                  *v39 = *v45;
                  *v45 = **((_QWORD **)*v5 + v46);
                  **((_QWORD **)*v5 + v46) = v45;
                  v45 = v39;
                }
                v46 = v40;
LABEL_77:
                v39 = v45;
                v45 = (_QWORD *)*v45;
                v40 = v46;
              }
              while (v45);
            }
          }
          v14 = (unint64_t)prime;
          goto LABEL_81;
        }
        v51 = *v5;
        *v5 = 0;
        if (v51)
          operator delete(v51);
        v14 = 0;
        *(_QWORD *)(a1 + 72) = 0;
      }
    }
LABEL_81:
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v16 >= v14)
        v2 = v16 % v14;
      else
        v2 = v16;
    }
    else
    {
      v2 = (v14 - 1) & v16;
    }
    goto LABEL_86;
  }
  v6 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v9 = *(_QWORD *)(a2 + 8);
    v8 = a2 + 8;
    v7 = v9;
    if (*(char *)(v8 + 23) >= 0)
      v7 = v8;
    v10 = *(unsigned __int8 *)(v8 + 24);
    if (v10 <= 3)
      v11 = EnumNamesSSUCategoryType(void)::names[v10];
    else
      v11 = "";
    *(_DWORD *)buf = 136315394;
    v58 = v7;
    v59 = 2080;
    v60 = v11;
    _os_log_impl(&dword_1C2196000, v6, OS_LOG_TYPE_ERROR, "Cache file read stream already open for app=%s, category=%s.", buf, 0x16u);
  }
  return 0;
}

void sub_1C22581B8(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  std::default_delete<snlp::ssu::cache::SSUCacheFileReadStream>::operator()[abi:ne180100](v2);
}

void sub_1C22581D8(uint64_t a1, uint64_t a2, uint64_t buf, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _Unwind_Exception *v8;
  va_list va;

  va_start(va, a8);
  std::__optional_destruct_base<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(v8);
}

_QWORD *std::__hash_table<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::__unordered_map_hasher<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,snlp::ssu::app::SSUAppCategoryHash,std::equal_to<snlp::ssu::app::SSUAppCategory>,true>,std::__unordered_map_equal<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::equal_to<snlp::ssu::app::SSUAppCategory>,snlp::ssu::app::SSUAppCategoryHash,true>,std::allocator<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>>>::find<snlp::ssu::app::SSUAppCategory>(_QWORD *a1, char *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;

  v4 = snlp::ssu::app::SSUAppCategoryHash::operator()((uint64_t)a1, a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    do
    {
      v12 = v11[1];
      if (v12 == v6)
      {
        if (snlp::ssu::app::SSUAppCategory::operator==((uint64_t)(v11 + 2), (uint64_t)a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(_QWORD *)&v5)
            v12 %= *(_QWORD *)&v5;
        }
        else
        {
          v12 &= *(_QWORD *)&v5 - 1;
        }
        if (v12 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

void std::default_delete<snlp::ssu::cache::SSUCacheFileReadStream>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  v4 = (void **)(a1 + 704);
  std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<boost::archive::binary_iarchive,boost::archive::text_iarchive>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)(a1 + 576));
  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1C3BB970C](a1 + 16);
  std::istream::~istream();
  MEMORY[0x1C3BB9A90](a1 + 424);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t std::__optional_destruct_base<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 104))
  {
    if (*(char *)(a1 + 103) < 0)
      operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 79) < 0)
      operator delete(*(void **)(a1 + 56));
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<snlp::ssu::app::SSUAppCategory const,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<snlp::ssu::app::SSUAppCategory const,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    std::default_delete<snlp::ssu::cache::SSUCacheFileReadStream>::operator()[abi:ne180100](v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

unsigned int *std::__variant_detail::__dtor<std::__variant_detail::__traits<boost::archive::binary_iarchive,boost::archive::text_iarchive>,(std::__variant_detail::_Trait)1>::~__dtor(unsigned int *a1)
{
  uint64_t v2;
  char v4;

  v2 = a1[30];
  if ((_DWORD)v2 != -1)
    off_1E7BED228[v2]((int)&v4, (boost::archive::detail::basic_iarchive *)a1);
  a1[30] = -1;
  return a1;
}

std::locale *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN5boost7archive15binary_iarchiveENS9_13text_iarchiveEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(int a1, boost::archive::detail::basic_iarchive *this)
{
  std::locale *v2;

  boost::archive::detail::basic_iarchive::~basic_iarchive(this);
  return boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::~basic_binary_iprimitive(v2 + 5);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN5boost7archive15binary_iarchiveENS9_13text_iarchiveEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(int a1, boost::archive::detail::basic_iarchive *this)
{
  uint64_t v2;

  boost::archive::detail::basic_iarchive::~basic_iarchive(this);
  return boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive(v2 + 40);
}

uint64_t snlp::ssu::cache::SSUCacheFileReadStreamManager::numReadStreams(snlp::ssu::cache::SSUCacheFileReadStreamManager *this)
{
  return *((_QWORD *)this + 11);
}

uint64_t snlp::ssu::cache::SSUCacheFileReadStreamManager::getReadStream(uint64_t a1, char *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;

  v4 = snlp::ssu::app::SSUAppCategoryHash::operator()(a1, a2);
  v5 = *(int8x8_t *)(a1 + 72);
  if (v5)
  {
    v6 = v4;
    v7 = (uint8x8_t)vcnt_s8(v5);
    v7.i16[0] = vaddlv_u8(v7);
    v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL)
    {
      v9 = v4;
      if (v4 >= *(_QWORD *)&v5)
        v9 = v4 % *(_QWORD *)&v5;
    }
    else
    {
      v9 = (*(_QWORD *)&v5 - 1) & v4;
    }
    v10 = *(_QWORD **)(*(_QWORD *)(a1 + 64) + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v6 == v12)
          {
            if (snlp::ssu::app::SSUAppCategory::operator==((uint64_t)(v11 + 2), (uint64_t)a2))
              return v11[7];
          }
          else
          {
            if (v8 > 1)
            {
              if (v12 >= *(_QWORD *)&v5)
                v12 %= *(_QWORD *)&v5;
            }
            else
            {
              v12 &= *(_QWORD *)&v5 - 1;
            }
            if (v12 != v9)
              return 0;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  return 0;
}

void snlp::ssu::cache::SSUCacheFileReadStreamManager::releaseReadStream(_QWORD *a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  char v20;

  v6 = a1 + 8;
  v7 = std::__hash_table<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::__unordered_map_hasher<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,snlp::ssu::app::SSUAppCategoryHash,std::equal_to<snlp::ssu::app::SSUAppCategory>,true>,std::__unordered_map_equal<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::equal_to<snlp::ssu::app::SSUAppCategory>,snlp::ssu::app::SSUAppCategoryHash,true>,std::allocator<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>>>::find<snlp::ssu::app::SSUAppCategory>(a1 + 8, a2);
  if (v7)
  {
    v8 = v7[7];
    v7[7] = 0;
    *a3 = v8;
    v9 = std::__hash_table<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::__unordered_map_hasher<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,snlp::ssu::app::SSUAppCategoryHash,std::equal_to<snlp::ssu::app::SSUAppCategory>,true>,std::__unordered_map_equal<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::equal_to<snlp::ssu::app::SSUAppCategory>,snlp::ssu::app::SSUAppCategoryHash,true>,std::allocator<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>>>::find<snlp::ssu::app::SSUAppCategory>(v6, a2);
    if (v9)
    {
      v10 = (int8x8_t)a1[9];
      v11 = v9[1];
      v12 = (uint8x8_t)vcnt_s8(v10);
      v12.i16[0] = vaddlv_u8(v12);
      if (v12.u32[0] > 1uLL)
      {
        if (v11 >= *(_QWORD *)&v10)
          v11 %= *(_QWORD *)&v10;
      }
      else
      {
        v11 &= *(_QWORD *)&v10 - 1;
      }
      v13 = *(_QWORD **)(*v6 + 8 * v11);
      do
      {
        v14 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13 != v9);
      if (v14 == a1 + 10)
        goto LABEL_21;
      v15 = v14[1];
      if (v12.u32[0] > 1uLL)
      {
        if (v15 >= *(_QWORD *)&v10)
          v15 %= *(_QWORD *)&v10;
      }
      else
      {
        v15 &= *(_QWORD *)&v10 - 1;
      }
      if (v15 != v11)
      {
LABEL_21:
        if (!*v9)
          goto LABEL_22;
        v16 = *(_QWORD *)(*v9 + 8);
        if (v12.u32[0] > 1uLL)
        {
          if (v16 >= *(_QWORD *)&v10)
            v16 %= *(_QWORD *)&v10;
        }
        else
        {
          v16 &= *(_QWORD *)&v10 - 1;
        }
        if (v16 != v11)
LABEL_22:
          *(_QWORD *)(*v6 + 8 * v11) = 0;
      }
      v17 = *v9;
      if (*v9)
      {
        v18 = *(_QWORD *)(v17 + 8);
        if (v12.u32[0] > 1uLL)
        {
          if (v18 >= *(_QWORD *)&v10)
            v18 %= *(_QWORD *)&v10;
        }
        else
        {
          v18 &= *(_QWORD *)&v10 - 1;
        }
        if (v18 != v11)
        {
          *(_QWORD *)(*v6 + 8 * v18) = v14;
          v17 = *v9;
        }
      }
      *v14 = v17;
      *v9 = 0;
      --a1[11];
      v19[0] = v9;
      v19[1] = a1 + 10;
      v20 = 1;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,void *>>>>::reset[abi:ne180100]((uint64_t)v19);
    }
  }
  else
  {
    *a3 = 0;
  }
}

uint64_t **itfm_inference_orchestrator::vocabulary::Vocabulary::insertToken(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD **v6;
  uint64_t **result;
  uint64_t **v8;
  uint64_t *v9;
  std::string *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  unint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = (_QWORD **)(a1 + 96);
  result = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(a1 + 96, &v20, (_QWORD *)a2);
  if (!*result)
  {
    v8 = result;
    v9 = (uint64_t *)operator new(0x40uLL);
    v10 = (std::string *)(v9 + 4);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v9[6] = *(_QWORD *)(a2 + 16);
    }
    v9[7] = a3;
    v11 = v20;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v11;
    *v8 = v9;
    v12 = (_QWORD *)**v6;
    if (v12)
    {
      *v6 = v12;
      v9 = *v8;
    }
    result = (uint64_t **)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 104), v9);
    ++*(_QWORD *)(a1 + 112);
  }
  v14 = (uint64_t **)(a1 + 128);
  v13 = *(uint64_t **)(a1 + 128);
  if (v13)
  {
    while (1)
    {
      while (1)
      {
        v15 = (uint64_t **)v13;
        v16 = v13[4];
        if (v16 <= a3)
          break;
        v13 = *v15;
        v14 = v15;
        if (!*v15)
          goto LABEL_16;
      }
      if (v16 >= a3)
        break;
      v13 = v15[1];
      if (!v13)
      {
        v14 = v15 + 1;
        goto LABEL_16;
      }
    }
  }
  else
  {
    v15 = (uint64_t **)(a1 + 128);
LABEL_16:
    v17 = (uint64_t *)operator new(0x40uLL);
    v17[4] = a3;
    v18 = (std::string *)(v17 + 5);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v17[7] = *(_QWORD *)(a2 + 16);
    }
    *v17 = 0;
    v17[1] = 0;
    v17[2] = (uint64_t)v15;
    *v14 = v17;
    v19 = **(_QWORD **)(a1 + 120);
    if (v19)
    {
      *(_QWORD *)(a1 + 120) = v19;
      v17 = *v14;
    }
    result = (uint64_t **)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 128), v17);
    ++*(_QWORD *)(a1 + 136);
  }
  return result;
}

void sub_1C22589EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t itfm_inference_orchestrator::vocabulary::Vocabulary::getPadTokenId(itfm_inference_orchestrator::vocabulary::Vocabulary *this)
{
  return itfm_inference_orchestrator::vocabulary::Vocabulary::getTokenId((uint64_t)this, (_QWORD *)this + 3);
}

uint64_t itfm_inference_orchestrator::vocabulary::Vocabulary::getTokenId(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = a1 + 96;
  if ((_QWORD *)(a1 + 104) == std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>(a1 + 96, a2))return 0;
  v4 = *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(v3, &v6, a2);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return *(_QWORD *)(v4 + 56);
}

uint64_t itfm_inference_orchestrator::vocabulary::Vocabulary::getUnknownTokenId(itfm_inference_orchestrator::vocabulary::Vocabulary *this)
{
  return itfm_inference_orchestrator::vocabulary::Vocabulary::getTokenId((uint64_t)this, this);
}

void itfm_inference_orchestrator::vocabulary::Vocabulary::initializeFromStream(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  std::locale::id *v5;
  const std::locale::facet *v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  void *__p;
  uint64_t v11;
  uint64_t v12;
  std::locale v13;

  v4 = 0;
  __p = 0;
  v11 = 0;
  v12 = 0;
  v5 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
    v6 = std::locale::use_facet(&v13, v5);
    v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(&v13);
    v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&__p, v7);
    v9 = HIBYTE(v12);
    if ((*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) != 0)
      break;
    if (v12 < 0)
      v9 = v11;
    if (v9)
      itfm_inference_orchestrator::vocabulary::Vocabulary::insertToken(a1, (uint64_t)&__p, v4++);
  }
  if (v12 < 0)
    operator delete(__p);
}

void sub_1C2258B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *itfm_inference_orchestrator::vocabulary::Vocabulary::Vocabulary(_QWORD *a1)
{
  _QWORD *v2;
  std::__fs::filesystem::filesystem_error *exception;
  std::string v5;
  _QWORD v6[2];
  _BYTE v7[408];
  _QWORD v8[20];
  std::error_code v9;

  v8[19] = *MEMORY[0x1E0C80C00];
  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "[UNK]");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "[PAD]");
  std::string::basic_string[abi:ne180100]<0>(a1 + 6, "[CLS]");
  std::string::basic_string[abi:ne180100]<0>(a1 + 9, "[SEP]");
  a1[16] = 0;
  a1[13] = 0;
  a1[12] = a1 + 13;
  a1[17] = 0;
  a1[14] = 0;
  a1[15] = a1 + 16;
  std::ifstream::basic_ifstream(v6);
  if ((v7[*(_QWORD *)(v6[0] - 24) + 16] & 5) != 0)
  {
    std::ifstream::close(v6);
    exception = (std::__fs::filesystem::filesystem_error *)__cxa_allocate_exception(0x30uLL);
    std::operator+<char>();
    v9.__cat_ = std::system_category();
    *(_QWORD *)&v9.__val_ = 0;
    std::__fs::filesystem::filesystem_error::filesystem_error[abi:ne180100](exception, &v5, v9);
    __cxa_throw(exception, MEMORY[0x1E0DE4E40], MEMORY[0x1E0DE49B8]);
  }
  itfm_inference_orchestrator::vocabulary::Vocabulary::initializeFromStream((uint64_t)a1, v6);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v6 + *(_QWORD *)(v6[0] - 24)), *(_DWORD *)&v7[*(_QWORD *)(v6[0] - 24) + 16] | 4);
  v6[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1C3BB970C](v7);
  std::istream::~istream();
  MEMORY[0x1C3BB9A90](v8);
  return a1;
}

void sub_1C2258D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  uint64_t v15;
  void **v16;
  void **v17;
  void **v18;
  void *v19;
  int v20;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
    {
LABEL_6:
      std::ifstream::~ifstream(&a15);
      std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy(*(char **)(v15 + 128));
      std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(*(char **)(v15 + 104));
      if (*(char *)(v15 + 95) < 0)
        operator delete(*v18);
      if (*(char *)(v15 + 71) < 0)
        operator delete(*v17);
      if (*(char *)(v15 + 47) < 0)
        operator delete(*v16);
      if (*(char *)(v15 + 23) < 0)
        operator delete(*(void **)v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

std::__fs::filesystem::filesystem_error *std::__fs::filesystem::filesystem_error::filesystem_error[abi:ne180100](std::__fs::filesystem::filesystem_error *a1, std::string *__what_arg, std::error_code __ec)
{
  char *v4;

  std::system_error::system_error(a1, __ec, __what_arg)->__vftable = (std::system_error_vtbl *)(MEMORY[0x1E0DE4FE8]
                                                                                              + 16);
  v4 = (char *)operator new(0x60uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_1E7BECC28;
  *((_QWORD *)v4 + 3) = 0;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  a1->__storage_.__ptr_ = (std::shared_ptr<std::__fs::filesystem::filesystem_error::_Storage>::element_type *)(v4 + 24);
  a1->__storage_.__cntrl_ = (std::__shared_weak_count *)v4;
  std::__fs::filesystem::filesystem_error::__create_what(a1, 0);
  return a1;
}

void sub_1C2258ED4(_Unwind_Exception *a1)
{
  std::runtime_error *v1;
  uint64_t v2;

  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::__fs::filesystem::filesystem_error::_Storage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7BECC28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::__fs::filesystem::filesystem_error::_Storage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7BECC28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3BB9B44);
}

void std::__shared_ptr_emplace<std::__fs::filesystem::filesystem_error::_Storage>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

uint64_t itfm_inference_orchestrator::vocabulary::Vocabulary::numericalizeToken(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  std::logic_error *exception;

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "tokenText argument is empty");
    goto LABEL_9;
  }
  v4 = (uint64_t)(a1 + 12);
  v5 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>((uint64_t)(a1 + 12), (_QWORD *)a2);
  if (a1 + 13 == v5)
  {
    v6 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>(v4, a1);
    v7 = v5 == v6;
    v5 = v6;
    if (v7)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Encountered unknown token text and the vocabulary hasno special unknown token");
LABEL_9:
      __cxa_throw(exception, (struct type_info *)off_1E7BE5148, MEMORY[0x1E0DE4360]);
    }
  }
  return v5[7];
}

void sub_1C2259054(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void itfm_inference_orchestrator::vocabulary::Vocabulary::denumericalizeToken(itfm_inference_orchestrator::vocabulary::Vocabulary *this@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  __int128 v10;
  std::runtime_error *exception;

  v5 = (_QWORD *)*((_QWORD *)this + 16);
  v3 = (char *)this + 128;
  v4 = v5;
  if (!v5)
    goto LABEL_15;
  v6 = v3;
  do
  {
    v7 = v4[4];
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (v8)
      v6 = (char *)v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v3 || *((_QWORD *)v6 + 4) > a2)
  {
LABEL_15:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "Encountered unknown token ID");
    __cxa_throw(exception, (struct type_info *)off_1E7BE5128, MEMORY[0x1E0DE42B0]);
  }
  if (v6[63] < 0)
  {
    std::string::__init_copy_ctor_external(a3, *((const std::string::value_type **)v6 + 5), *((_QWORD *)v6 + 6));
  }
  else
  {
    v10 = *(_OWORD *)(v6 + 40);
    a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 7);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_1C225911C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::usershortcut::operator<(const void **a1, unsigned __int8 *a2)
{
  const void **v3;
  int v4;
  uint64_t v5;
  size_t v6;
  const void **v7;
  size_t v8;
  size_t v9;
  unsigned __int8 *v10;
  size_t v11;
  int v12;
  BOOL v13;
  const void **v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  int v23;
  size_t v24;
  unsigned __int8 *v25;
  size_t v26;
  unsigned __int8 *v27;
  size_t v28;
  int v29;
  BOOL v30;

  v3 = a1;
  v4 = (char)a2[23];
  v5 = *((unsigned __int8 *)a1 + 23);
  v7 = (const void **)*a1;
  v6 = (size_t)a1[1];
  if ((v5 & 0x80u) == 0)
    v8 = *((unsigned __int8 *)a1 + 23);
  else
    v8 = (size_t)a1[1];
  if ((v5 & 0x80u) != 0)
    a1 = (const void **)*a1;
  if (v4 >= 0)
    v9 = a2[23];
  else
    v9 = *((_QWORD *)a2 + 1);
  if (v4 >= 0)
    v10 = a2;
  else
    v10 = *(unsigned __int8 **)a2;
  if (v9 >= v8)
    v11 = v8;
  else
    v11 = v9;
  v12 = memcmp(a1, v10, v11);
  v13 = v8 < v9;
  if (v12)
    v13 = v12 < 0;
  if (v13)
    return 1;
  if (v8 == v9)
  {
    if ((v5 & 0x80) != 0)
    {
      if (memcmp(v7, v10, v6))
        return 0;
    }
    else if ((_DWORD)v5)
    {
      v15 = v3;
      while (*(unsigned __int8 *)v15 == *v10)
      {
        v15 = (const void **)((char *)v15 + 1);
        ++v10;
        if (!--v5)
          goto LABEL_27;
      }
      return 0;
    }
LABEL_27:
    v18 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
    v17 = a2 + 24;
    v16 = v18;
    v19 = (char)v17[23];
    v22 = (unsigned __int8 *)v3[3];
    v21 = (unsigned __int8 *)(v3 + 3);
    v20 = v22;
    v23 = (char)v21[23];
    if (v23 >= 0)
      v24 = v21[23];
    else
      v24 = *((_QWORD *)v21 + 1);
    if (v23 >= 0)
      v25 = v21;
    else
      v25 = v20;
    if (v19 >= 0)
      v26 = v17[23];
    else
      v26 = *((_QWORD *)v17 + 1);
    if (v19 >= 0)
      v27 = v17;
    else
      v27 = v16;
    if (v26 >= v24)
      v28 = v24;
    else
      v28 = v26;
    v29 = memcmp(v25, v27, v28);
    v30 = v24 < v26;
    if (v29)
      v30 = v29 < 0;
    if (v30)
      return 1;
  }
  return 0;
}

void snlp::ssu::usershortcut::computeHash(uint64_t *a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 *v9;
  __int128 v10;
  std::string *v11;
  const std::string::value_type **v12;
  const void **v13;
  uint64_t *v14;
  const std::nothrow_t *v15;
  unint64_t v16;
  void *v17;
  BOOL v18;
  void *v19;
  uint64_t v20;
  const void **v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  char v40;
  _QWORD v41[11];
  char v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t *v46;
  uint64_t *v47;
  const void **v48;
  char *v49;

  v47 = 0;
  v48 = 0;
  v49 = 0;
  v2 = *a1;
  v3 = a1[1];
  v39 = (void **)&v47;
  v40 = 0;
  if (v3 == v2)
  {
    v13 = 0;
    v14 = 0;
  }
  else
  {
    v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 4);
    if (v4 >= 0x555555555555556)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v5 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(v4);
    v6 = 0;
    v47 = v5;
    v48 = (const void **)v5;
    v49 = (char *)&v5[6 * v7];
    do
    {
      v8 = (char *)&v5[v6 / 8];
      v9 = (__int128 *)(v2 + v6);
      if (*(char *)(v2 + v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v5[v6 / 8], *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v10 = *v9;
        *((_QWORD *)v8 + 2) = *((_QWORD *)v9 + 2);
        *(_OWORD *)v8 = v10;
      }
      v11 = (std::string *)&v5[v6 / 8 + 3];
      v12 = (const std::string::value_type **)(v2 + v6 + 24);
      if (*(char *)(v2 + v6 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *v12, *(_QWORD *)(v2 + v6 + 32));
      }
      else
      {
        a2 = *(__n128 *)v12;
        v5[v6 / 8 + 5] = *(_QWORD *)(v2 + v6 + 40);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = a2;
      }
      v6 += 48;
    }
    while (v2 + v6 != v3);
    v13 = (const void **)&v5[v6 / 8];
    v14 = v47;
    v48 = v13;
  }
  if ((char *)v13 - (char *)v14 < 1)
  {
LABEL_17:
    v19 = 0;
    v16 = 0;
  }
  else
  {
    v15 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v14) >> 4);
    while (1)
    {
      v17 = operator new(48 * v16, v15);
      if (v17)
        break;
      v18 = v16 > 1;
      v16 >>= 1;
      if (!v18)
        goto LABEL_17;
    }
    v19 = v17;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>(v14, v13, (uint64_t)&v44, 0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v14) >> 4), (uint64_t)v19, v16, a2);
  if (v19)
    operator delete(v19);
  v44 = 0;
  v45 = 0;
  v46 = 0;
  std::vector<unsigned long>::reserve((void **)&v44, 0xAAAAAAAAAAAAAAABLL * (((char *)v48 - (char *)v47) >> 4));
  v20 = (uint64_t)v47;
  v21 = v48;
  if (v47 == (uint64_t *)v48)
  {
    v26 = v45;
  }
  else
  {
    do
    {
      v22 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v39, v20);
      v23 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v39, v20 + 24);
      v24 = 3864292196u
          - 0x395B586CA42E166BLL
          * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v23) ^ ((0xC6A4A7935BD1E995 * v23) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v22) ^ ((0xC6A4A7935BD1E995 * v22) >> 47)) + 3864292196u));
      v25 = v45;
      if (v45 >= v46)
      {
        v27 = v44;
        v28 = v45 - v44;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 61)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v30 = (char *)v46 - (char *)v44;
        if (((char *)v46 - (char *)v44) >> 2 > v29)
          v29 = v30 >> 2;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v46, v31);
          v27 = v44;
          v25 = v45;
        }
        else
        {
          v32 = 0;
        }
        v33 = (unint64_t *)&v32[8 * v28];
        *v33 = v24;
        v26 = v33 + 1;
        while (v25 != v27)
        {
          v34 = *--v25;
          *--v33 = v34;
        }
        v44 = v33;
        v45 = v26;
        v46 = (unint64_t *)&v32[8 * v31];
        if (v27)
          operator delete(v27);
      }
      else
      {
        *v45 = v24;
        v26 = v25 + 1;
      }
      v45 = v26;
      v20 += 48;
    }
    while ((const void **)v20 != v21);
  }
  v35 = v44;
  if (v44 != v26)
  {
    v36 = 0;
    do
    {
      v37 = *v35++;
      v36 = 3864292196u
          - 0x395B586CA42E166BLL
          * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v37) ^ ((0xC6A4A7935BD1E995 * v37) >> 47))) ^ v36);
    }
    while (v35 != v26);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v39);
  *(_DWORD *)((char *)&v41[1] + *(_QWORD *)(v41[0] - 24)) = *(_DWORD *)((_BYTE *)&v41[1] + *(_QWORD *)(v41[0] - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  v39 = (void **)*MEMORY[0x1E0DE4F50];
  v38 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(void ***)((char *)&v39 + (_QWORD)*(v39 - 3)) = *(void ***)(MEMORY[0x1E0DE4F50] + 64);
  v41[0] = v38;
  v41[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v42 < 0)
    operator delete((void *)v41[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3BB9A90](&v43);
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  v39 = (void **)&v47;
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&v39);
}

void sub_1C225969C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)(v11 - 136);
  if (v13)
  {
    *(_QWORD *)(v11 - 128) = v13;
    operator delete(v13);
  }
  a11 = (void **)(v11 - 112);
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>(uint64_t *a1, const void **a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, __n128 a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void **v16;
  uint64_t v17;
  uint64_t *v18;
  const void **v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void **v23;
  void **v24;
  char *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  int v36;
  int v37;
  __int128 v38;
  void **v39;
  __int128 v40;
  __int128 v41;
  void **v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  void **v46;
  uint64_t v47;
  __int128 v48;
  char *v49;
  int v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  void **v54;
  uint64_t v55;
  __int128 v56;
  char *v57;
  int v58;
  __int128 v59;
  __int128 v60;
  const void *v61;
  __int128 v62;
  uint64_t v63;

  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      if (snlp::ssu::usershortcut::operator<(a2 - 6, (unsigned __int8 *)a1))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *> &>(a1, (uint64_t)(a2 - 6));
    }
    else if ((uint64_t)a4 <= 0)
    {
      if (a1 != (uint64_t *)a2)
      {
        v16 = (const void **)(a1 + 6);
        if (a1 + 6 != (uint64_t *)a2)
        {
          v17 = 0;
          v18 = a1;
          do
          {
            v19 = v16;
            if (snlp::ssu::usershortcut::operator<(v16, (unsigned __int8 *)v18))
            {
              v60 = *(_OWORD *)v19;
              v61 = v19[2];
              v19[1] = 0;
              v19[2] = 0;
              *v19 = 0;
              v62 = *(_OWORD *)(v18 + 9);
              v63 = v18[11];
              v18[9] = 0;
              v18[10] = 0;
              v20 = v17;
              v18[11] = 0;
              while (1)
              {
                v21 = v20;
                v22 = (char *)a1 + v20;
                v23 = (void **)(v22 + 48);
                if (v22[71] < 0)
                  operator delete(*v23);
                *(_OWORD *)v23 = *(_OWORD *)v22;
                *((_QWORD *)v22 + 8) = *((_QWORD *)v22 + 2);
                v22[23] = 0;
                *v22 = 0;
                v24 = (void **)(v22 + 72);
                if (v22[95] < 0)
                  operator delete(*v24);
                v25 = (char *)a1 + v21;
                v26 = *(_OWORD *)((char *)a1 + v21 + 24);
                *((_QWORD *)v22 + 11) = *(uint64_t *)((char *)a1 + v21 + 40);
                *(_OWORD *)v24 = v26;
                v25[47] = 0;
                v25[24] = 0;
                if (!v21)
                  break;
                v20 = v21 - 48;
                if ((snlp::ssu::usershortcut::operator<((const void **)&v60, (unsigned __int8 *)a1 + v21 - 48) & 1) == 0)
                {
                  v27 = (uint64_t *)((char *)a1 + v21);
                  v28 = (uint64_t)a1 + v21 + 24;
                  goto LABEL_21;
                }
              }
              v28 = (uint64_t)(v25 + 24);
              v27 = a1;
LABEL_21:
              if (*((char *)v27 + 23) < 0)
                operator delete((void *)*v27);
              *(_OWORD *)v27 = v60;
              v27[2] = (uint64_t)v61;
              if (*((char *)v27 + 47) < 0)
                operator delete(*(void **)v28);
              *(_OWORD *)v28 = v62;
              *(_QWORD *)(v28 + 16) = v63;
            }
            v16 = v19 + 6;
            v17 += 48;
            v18 = (uint64_t *)v19;
          }
          while (v19 + 6 != a2);
        }
      }
    }
    else
    {
      v13 = a4 >> 1;
      v14 = (uint64_t)&a1[6 * (a4 >> 1)];
      if ((uint64_t)a4 <= a6)
      {
        v29 = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>((const void **)a1, (const void **)&a1[6 * (a4 >> 1)], a3, a4 >> 1, a5, a7);
        v30 = a5 + 48 * v13;
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>((const void **)&a1[6 * (a4 >> 1)], a2, a3, a4 - v13, v30, v29);
        *(_QWORD *)&v60 = a4;
        v31 = a5 + 48 * a4;
        v32 = (char *)a1 + 47;
        v33 = v30;
        v34 = a5;
        while (v33 != v31)
        {
          v35 = (void **)(v32 - 47);
          v36 = snlp::ssu::usershortcut::operator<((const void **)v33, (unsigned __int8 *)v34);
          v37 = *(v32 - 24);
          if (v36)
          {
            if (v37 < 0)
              operator delete(*v35);
            v38 = *(_OWORD *)v33;
            *(_QWORD *)(v32 - 31) = *(_QWORD *)(v33 + 16);
            *(_OWORD *)v35 = v38;
            *(_BYTE *)(v33 + 23) = 0;
            *(_BYTE *)v33 = 0;
            v39 = (void **)(v32 - 23);
            if (*v32 < 0)
              operator delete(*v39);
            v40 = *(_OWORD *)(v33 + 24);
            *(_QWORD *)(v32 - 7) = *(_QWORD *)(v33 + 40);
            *(_OWORD *)v39 = v40;
            *(_BYTE *)(v33 + 47) = 0;
            *(_BYTE *)(v33 + 24) = 0;
            v33 += 48;
          }
          else
          {
            if (v37 < 0)
              operator delete(*v35);
            v41 = *(_OWORD *)v34;
            *(_QWORD *)(v32 - 31) = *(_QWORD *)(v34 + 16);
            *(_OWORD *)v35 = v41;
            *(_BYTE *)(v34 + 23) = 0;
            *(_BYTE *)v34 = 0;
            v42 = (void **)(v32 - 23);
            if (*v32 < 0)
              operator delete(*v42);
            v43 = *(_OWORD *)(v34 + 24);
            *(_QWORD *)(v32 - 7) = *(_QWORD *)(v34 + 40);
            *(_OWORD *)v42 = v43;
            *(_BYTE *)(v34 + 47) = 0;
            *(_BYTE *)(v34 + 24) = 0;
            v34 += 48;
          }
          v32 += 48;
          if (v34 == v30)
          {
            if (v33 != v31)
            {
              v44 = 0;
              do
              {
                v45 = &v32[v44];
                v46 = (void **)&v32[v44 - 47];
                if (v32[v44 - 24] < 0)
                  operator delete(*v46);
                v47 = v33 + v44;
                v48 = *(_OWORD *)(v33 + v44);
                *(_QWORD *)&v32[v44 - 31] = *(_QWORD *)(v33 + v44 + 16);
                *(_OWORD *)v46 = v48;
                *(_BYTE *)(v47 + 23) = 0;
                *(_BYTE *)v47 = 0;
                v50 = *v45;
                v49 = v45 - 23;
                if (v50 < 0)
                  operator delete(*(void **)v49);
                v51 = *(_OWORD *)(v47 + 24);
                *((_QWORD *)v49 + 2) = *(_QWORD *)(v47 + 40);
                *(_OWORD *)v49 = v51;
                *(_BYTE *)(v47 + 47) = 0;
                *(_BYTE *)(v47 + 24) = 0;
                v44 += 48;
              }
              while (v47 + 48 != v31);
            }
            goto LABEL_57;
          }
        }
        if (v34 != v30)
        {
          v52 = 0;
          do
          {
            v53 = &v32[v52];
            v54 = (void **)&v32[v52 - 47];
            if (v32[v52 - 24] < 0)
              operator delete(*v54);
            v55 = v34 + v52;
            v56 = *(_OWORD *)(v34 + v52);
            *(_QWORD *)&v32[v52 - 31] = *(_QWORD *)(v34 + v52 + 16);
            *(_OWORD *)v54 = v56;
            *(_BYTE *)(v55 + 23) = 0;
            *(_BYTE *)v55 = 0;
            v58 = *v53;
            v57 = v53 - 23;
            if (v58 < 0)
              operator delete(*(void **)v57);
            v59 = *(_OWORD *)(v55 + 24);
            *((_QWORD *)v57 + 2) = *(_QWORD *)(v55 + 40);
            *(_OWORD *)v57 = v59;
            *(_BYTE *)(v55 + 47) = 0;
            *(_BYTE *)(v55 + 24) = 0;
            v52 += 48;
          }
          while (v55 + 48 != v30);
        }
LABEL_57:
        if (a5)
          std::__destruct_n::__process[abi:ne180100]<snlp::ssu::usershortcut::SSUUserShortcut>((unint64_t *)&v60, a5);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>(a1, &a1[6 * (a4 >> 1)], a3, a4 >> 1, a5, a6);
        v15 = a4 - v13;
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>(v14, a2, a3, v15, a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>((const void **)a1, v14, a2, a3, v13, v15, a5, a6);
      }
    }
  }
}

void sub_1C2259BF0(_Unwind_Exception *exception_object, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, exception_object);
  if (v1)
    std::__destruct_n::__process[abi:ne180100]<snlp::ssu::usershortcut::SSUUserShortcut>((unint64_t *)va, v1);
  _Unwind_Resume(exception_object);
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t *v6;
  char v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  _BYTE v11[15];
  _BYTE v12[15];

  v3 = *a1;
  *(_QWORD *)v12 = a1[1];
  *(_QWORD *)&v12[7] = *(uint64_t *)((char *)a1 + 15);
  v4 = *((_BYTE *)a1 + 23);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v6 = a1 + 3;
  v5 = a1[3];
  *(_QWORD *)v11 = a1[4];
  *(_QWORD *)&v11[7] = *(uint64_t *)((char *)a1 + 39);
  v7 = *((_BYTE *)a1 + 47);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v8;
  *(_BYTE *)(a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  if (*((char *)a1 + 47) < 0)
    operator delete((void *)*v6);
  v9 = *(_OWORD *)(a2 + 24);
  v6[2] = *(_QWORD *)(a2 + 40);
  *(_OWORD *)v6 = v9;
  *(_BYTE *)(a2 + 47) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    operator delete(*(void **)a2);
    v10 = *(char *)(a2 + 47);
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)v12;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)&v12[7];
    *(_BYTE *)(a2 + 23) = v4;
    if (v10 < 0)
      operator delete(*(void **)(a2 + 24));
  }
  else
  {
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)v12;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)&v12[7];
    *(_BYTE *)(a2 + 23) = v4;
  }
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)v11;
  *(_QWORD *)(a2 + 39) = *(_QWORD *)&v11[7];
  *(_BYTE *)(a2 + 47) = v7;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>(const void **a1, const void **a2, uint64_t a3, unint64_t a4, uint64_t a5, __n128 result)
{
  uint64_t v6;
  const void **v9;
  __int128 v10;
  const void **v11;
  const void **v12;
  int v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  const void *v19;
  __int128 v20;
  const void **v21;
  uint64_t v22;
  _OWORD *v23;
  const void **v24;
  _OWORD *v25;
  int v26;
  _OWORD *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  __int128 v33;
  void **v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  const void **v40;
  const void **v41;
  int v42;
  __n128 *v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  const void **v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  const void **v52;
  __int128 v53;

  if (a4)
  {
    v6 = a5;
    v9 = a1;
    if (a4 == 2)
    {
      v12 = a2 - 6;
      v13 = snlp::ssu::usershortcut::operator<(a2 - 6, (unsigned __int8 *)a1);
      v14 = (_OWORD *)(v6 + 24);
      v15 = (_OWORD *)(v6 + 48);
      if (v13)
      {
        v16 = *(_OWORD *)v12;
        *(_QWORD *)(v6 + 16) = *(a2 - 4);
        *(_OWORD *)v6 = v16;
        *(a2 - 5) = 0;
        *(a2 - 4) = 0;
        *v12 = 0;
        v17 = *(_OWORD *)(a2 - 3);
        *(_QWORD *)(v6 + 40) = *(a2 - 1);
        *v14 = v17;
        *(a2 - 2) = 0;
        *(a2 - 1) = 0;
        *(a2 - 3) = 0;
        v18 = *(_OWORD *)v9;
        *(_QWORD *)(v6 + 64) = v9[2];
        *v15 = v18;
        v9[1] = 0;
        v9[2] = 0;
        *v9 = 0;
        v11 = v9 + 3;
        result = *(__n128 *)(v9 + 3);
        v19 = v9[5];
      }
      else
      {
        v36 = *(_OWORD *)v9;
        *(_QWORD *)(v6 + 16) = v9[2];
        *(_OWORD *)v6 = v36;
        v9[1] = 0;
        v9[2] = 0;
        *v9 = 0;
        v37 = *(_OWORD *)(v9 + 3);
        *(_QWORD *)(v6 + 40) = v9[5];
        *v14 = v37;
        v9[4] = 0;
        v9[5] = 0;
        v9[3] = 0;
        v38 = *(_OWORD *)v12;
        *(_QWORD *)(v6 + 64) = *(a2 - 4);
        *v15 = v38;
        *(a2 - 5) = 0;
        *(a2 - 4) = 0;
        *v12 = 0;
        v11 = a2 - 3;
        result = *(__n128 *)(a2 - 3);
        v19 = *(a2 - 1);
      }
      *(_QWORD *)(v6 + 88) = v19;
      *(__n128 *)(v6 + 72) = result;
      goto LABEL_31;
    }
    if (a4 == 1)
    {
      v10 = *(_OWORD *)a1;
      *(_QWORD *)(a5 + 16) = a1[2];
      *(_OWORD *)a5 = v10;
      a1[1] = 0;
      a1[2] = 0;
      *a1 = 0;
      v11 = a1 + 3;
      result = *(__n128 *)(a1 + 3);
      *(_QWORD *)(a5 + 40) = a1[5];
      *(__n128 *)(a5 + 24) = result;
LABEL_31:
      *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      return result;
    }
    if ((uint64_t)a4 > 8)
    {
      v40 = &a1[6 * (a4 >> 1)];
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>(a1, v40, a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>(&v9[6 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v6 + 48 * (a4 >> 1), a4 - (a4 >> 1));
      v41 = &v9[6 * (a4 >> 1)];
      while (v41 != a2)
      {
        v42 = snlp::ssu::usershortcut::operator<(v41, (unsigned __int8 *)v9);
        v43 = (__n128 *)(v6 + 24);
        if (v42)
        {
          v44 = *(_OWORD *)v41;
          *(_QWORD *)(v6 + 16) = v41[2];
          *(_OWORD *)v6 = v44;
          v41[1] = 0;
          v41[2] = 0;
          *v41 = 0;
          result = *(__n128 *)(v41 + 3);
          *(_QWORD *)(v6 + 40) = v41[5];
          *v43 = result;
          v41[4] = 0;
          v41[5] = 0;
          v41[3] = 0;
          v41 += 6;
        }
        else
        {
          v45 = *(_OWORD *)v9;
          *(_QWORD *)(v6 + 16) = v9[2];
          *(_OWORD *)v6 = v45;
          v9[1] = 0;
          v9[2] = 0;
          *v9 = 0;
          result = *(__n128 *)(v9 + 3);
          *(_QWORD *)(v6 + 40) = v9[5];
          *v43 = result;
          v9[4] = 0;
          v9[5] = 0;
          v9[3] = 0;
          v9 += 6;
        }
        v6 += 48;
        if (v9 == v40)
        {
          if (v41 != a2)
          {
            v46 = 0;
            do
            {
              v47 = &v41[v46];
              v48 = v6 + v46 * 8;
              v49 = *(_OWORD *)&v41[v46];
              *(_QWORD *)(v48 + 16) = v41[v46 + 2];
              *(_OWORD *)v48 = v49;
              v47[1] = 0;
              v47[2] = 0;
              *v47 = 0;
              result = *(__n128 *)&v41[v46 + 3];
              *(_QWORD *)(v48 + 40) = v41[v46 + 5];
              *(__n128 *)(v48 + 24) = result;
              v47[4] = 0;
              v47[5] = 0;
              v47[3] = 0;
              v46 += 6;
            }
            while (v47 + 6 != a2);
          }
          return result;
        }
      }
      if (v9 != v40)
      {
        v50 = 0;
        do
        {
          v51 = v6 + v50 * 8;
          v52 = &v9[v50];
          v53 = *(_OWORD *)&v9[v50];
          *(_QWORD *)(v51 + 16) = v9[v50 + 2];
          *(_OWORD *)v51 = v53;
          v52[1] = 0;
          v52[2] = 0;
          *v52 = 0;
          result = *(__n128 *)&v9[v50 + 3];
          *(_QWORD *)(v51 + 40) = v9[v50 + 5];
          *(__n128 *)(v51 + 24) = result;
          v52[4] = 0;
          v52[5] = 0;
          v52[3] = 0;
          v50 += 6;
        }
        while (v52 + 6 != v40);
      }
    }
    else if (a1 != a2)
    {
      v20 = *(_OWORD *)a1;
      *(_QWORD *)(a5 + 16) = a1[2];
      *(_OWORD *)a5 = v20;
      a1[1] = 0;
      a1[2] = 0;
      *a1 = 0;
      result = *(__n128 *)(a1 + 3);
      *(_QWORD *)(a5 + 40) = a1[5];
      *(__n128 *)(a5 + 24) = result;
      a1[4] = 0;
      a1[5] = 0;
      a1[3] = 0;
      v21 = a1 + 6;
      if (a1 + 6 != a2)
      {
        v22 = 0;
        v23 = (_OWORD *)a5;
        do
        {
          v24 = v21;
          v25 = v23 + 3;
          v26 = snlp::ssu::usershortcut::operator<(v21, (unsigned __int8 *)v23);
          v27 = (_OWORD *)((char *)v23 + 72);
          if (v26)
          {
            *v25 = *v23;
            *((_QWORD *)v23 + 8) = *((_QWORD *)v23 + 2);
            *(_QWORD *)v23 = 0;
            *((_QWORD *)v23 + 1) = 0;
            v28 = *(_OWORD *)((char *)v23 + 24);
            *((_QWORD *)v23 + 2) = 0;
            *((_QWORD *)v23 + 3) = 0;
            *v27 = v28;
            *((_QWORD *)v23 + 11) = *((_QWORD *)v23 + 5);
            v29 = v6;
            *((_QWORD *)v23 + 4) = 0;
            *((_QWORD *)v23 + 5) = 0;
            if (v23 != (_OWORD *)v6)
            {
              v30 = v22;
              while (1)
              {
                v29 = v6 + v30;
                if (!snlp::ssu::usershortcut::operator<(v24, (unsigned __int8 *)(v6 + v30 - 48)))
                  break;
                if (*(char *)(v29 + 23) < 0)
                  operator delete(*(void **)v29);
                v31 = v6 + v30;
                *(_OWORD *)v29 = *(_OWORD *)(v6 + v30 - 48);
                *(_QWORD *)(v29 + 16) = *(_QWORD *)(v6 + v30 - 32);
                *(_BYTE *)(v6 + v30 - 25) = 0;
                *(_BYTE *)(v29 - 48) = 0;
                v32 = (void **)(v6 + v30 + 24);
                if (*(char *)(v6 + v30 + 47) < 0)
                  operator delete(*v32);
                *(_OWORD *)v32 = *(_OWORD *)(v31 - 24);
                *(_QWORD *)(v6 + v30 + 40) = *(_QWORD *)(v31 - 8);
                *(_BYTE *)(v31 - 1) = 0;
                *(_BYTE *)(v31 - 24) = 0;
                v30 -= 48;
                if (!v30)
                {
                  v29 = v6;
                  break;
                }
              }
            }
            if (*(char *)(v29 + 23) < 0)
              operator delete(*(void **)v29);
            v33 = *(_OWORD *)v24;
            *(_QWORD *)(v29 + 16) = v24[2];
            *(_OWORD *)v29 = v33;
            *((_BYTE *)v9 + 71) = 0;
            *(_BYTE *)v24 = 0;
            v34 = (void **)(v29 + 24);
            if (*(char *)(v29 + 47) < 0)
              operator delete(*v34);
            result = *(__n128 *)(v9 + 9);
            *(_QWORD *)(v29 + 40) = v9[11];
            *(__n128 *)v34 = result;
            *((_BYTE *)v9 + 95) = 0;
            *((_BYTE *)v9 + 72) = 0;
          }
          else
          {
            v35 = *(_OWORD *)v24;
            *((_QWORD *)v23 + 8) = v24[2];
            *v25 = v35;
            v24[1] = 0;
            v24[2] = 0;
            *v24 = 0;
            result = *(__n128 *)(v9 + 9);
            *((_QWORD *)v23 + 11) = v9[11];
            *v27 = result;
            v9[10] = 0;
            v9[11] = 0;
            v9[9] = 0;
          }
          v21 = v24 + 6;
          v22 += 48;
          v23 = v25;
          v9 = v24;
        }
        while (v24 + 6 != a2);
      }
    }
  }
  return result;
}

void std::__destruct_n::__process[abi:ne180100]<snlp::ssu::usershortcut::SSUUserShortcut>(unint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  char *v4;

  if (*a1)
  {
    v3 = 0;
    v4 = (char *)(a2 + 23);
    do
    {
      if (v4[24] < 0)
        operator delete(*(void **)(v4 + 1));
      if (*v4 < 0)
        operator delete(*(void **)(v4 - 23));
      ++v3;
      v4 += 48;
    }
    while (v3 < *a1);
  }
}

void std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>(const void **a1, uint64_t a2, const void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  const void **v22;
  int v23;
  const void **v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  const void **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  void **v40;
  int v41;
  __int128 v42;
  void **v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  void **v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  const void **v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  __int128 v60;
  void **v61;
  __int128 v62;
  __int128 v63;
  void **v64;
  __int128 v65;
  unint64_t v66;
  const void **v67;
  void **v68;
  __int128 *v69;
  __int128 v70;
  void **v71;
  unint64_t v72;
  __int128 v73;
  uint64_t v74;
  const void **v75;
  uint64_t v76;
  __int128 v77;
  void **v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const void **v86;
  unint64_t v88;

  if (!a6)
    return;
  v10 = a6;
  while (v10 > a8 && a5 > a8)
  {
    if (!a5)
      return;
    while ((snlp::ssu::usershortcut::operator<((const void **)a2, (unsigned __int8 *)a1) & 1) == 0)
    {
      a1 += 6;
      if (!--a5)
        return;
    }
    v85 = a7;
    v86 = a3;
    v84 = a8;
    if (a5 >= v10)
    {
      if (a5 == 1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *> &>((uint64_t *)a1, a2);
        return;
      }
      if (a5 >= 0)
        v20 = a5;
      else
        v20 = a5 + 1;
      v19 = v20 >> 1;
      v17 = (unsigned __int8 *)&a1[6 * (v20 >> 1)];
      if (a3 != (const void **)a2)
      {
        v82 = v20 >> 1;
        v21 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a3 - a2) >> 4);
        a3 = (const void **)a2;
        do
        {
          v22 = &a3[6 * (v21 >> 1)];
          v23 = snlp::ssu::usershortcut::operator<(v22, v17);
          if (v23)
            v21 += ~(v21 >> 1);
          else
            v21 >>= 1;
          if (v23)
            a3 = v22 + 6;
        }
        while (v21);
        a8 = v84;
        v19 = v82;
      }
      v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a3 - a2) >> 4);
    }
    else
    {
      if (v10 >= 0)
        v15 = v10;
      else
        v15 = v10 + 1;
      v16 = v15 >> 1;
      a3 = (const void **)(a2 + 48 * (v15 >> 1));
      v17 = (unsigned __int8 *)a2;
      if ((const void **)a2 != a1)
      {
        v80 = v15 >> 1;
        v18 = 0xAAAAAAAAAAAAAAABLL * ((a2 - (uint64_t)a1) >> 4);
        v17 = (unsigned __int8 *)a1;
        do
        {
          if (snlp::ssu::usershortcut::operator<(a3, &v17[48 * (v18 >> 1)]))
          {
            v18 >>= 1;
          }
          else
          {
            v17 += 48 * (v18 >> 1) + 48;
            v18 += ~(v18 >> 1);
          }
        }
        while (v18);
        a8 = v84;
        v16 = v80;
      }
      v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - (unsigned __int8 *)a1) >> 4);
    }
    if (v17 == (unsigned __int8 *)a2)
    {
      v24 = a3;
    }
    else if (a3 == (const void **)a2)
    {
      v24 = (const void **)v17;
    }
    else
    {
      v81 = v16;
      v83 = v19;
      v24 = (const void **)(v17 + 48);
      v25 = (uint64_t *)v17;
      v26 = a2;
      while (1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *> &>(v25, a2);
        v25 += 6;
        a2 += 48;
        if ((const void **)a2 == a3)
          break;
        if (v25 == (uint64_t *)v26)
          v26 = a2;
        v24 += 6;
      }
      if (v25 != (uint64_t *)v26)
      {
        v27 = (uint64_t *)v26;
        do
        {
          while (1)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *> &>(v25, v26);
            v25 += 6;
            v26 += 48;
            if ((const void **)v26 == a3)
              break;
            if (v25 == v27)
              v27 = (uint64_t *)v26;
          }
          v26 = (uint64_t)v27;
        }
        while (v25 != v27);
      }
      a8 = v84;
      a7 = v85;
      v16 = v81;
      v19 = v83;
    }
    a5 -= v19;
    v10 -= v16;
    if (v19 + v16 >= a5 + v10)
    {
      v28 = a3;
      v29 = v19;
      v30 = a5;
      v31 = v16;
      std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>(v24, v28, v86, a4, v30, v10, a7, a8);
      a2 = (uint64_t)v17;
      v10 = v31;
      a5 = v29;
      a3 = v24;
      if (!v10)
        return;
    }
    else
    {
      std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<snlp::ssu::usershortcut::SSUUserShortcut *>>(a1, v17, v24, a4, v19, v16, a7, a8);
      a1 = v24;
      a2 = (uint64_t)a3;
      a3 = v86;
      if (!v10)
        return;
    }
  }
  if (a5 <= v10)
  {
    if (a1 != (const void **)a2)
    {
      v49 = 0;
      v50 = 0;
      do
      {
        v51 = a7 + v49 * 8;
        v52 = &a1[v49];
        v53 = *(_OWORD *)&a1[v49];
        *(_QWORD *)(v51 + 16) = a1[v49 + 2];
        *(_OWORD *)v51 = v53;
        v52[1] = 0;
        v52[2] = 0;
        *v52 = 0;
        v54 = *(_OWORD *)&a1[v49 + 3];
        *(_QWORD *)(v51 + 40) = a1[v49 + 5];
        *(_OWORD *)(v51 + 24) = v54;
        v52[4] = 0;
        v52[5] = 0;
        v52[3] = 0;
        ++v50;
        v49 += 6;
      }
      while (v52 + 6 != (const void **)a2);
      v55 = a7 + v49 * 8;
      v88 = v50;
      if (a7 + v49 * 8 != a7)
      {
        v56 = v55 - 48;
        v57 = a7;
        while ((const void **)a2 != a3)
        {
          v58 = snlp::ssu::usershortcut::operator<((const void **)a2, (unsigned __int8 *)v57);
          v59 = *((char *)a1 + 23);
          if (v58)
          {
            if (v59 < 0)
              operator delete((void *)*a1);
            v60 = *(_OWORD *)a2;
            a1[2] = *(const void **)(a2 + 16);
            *(_OWORD *)a1 = v60;
            *(_BYTE *)(a2 + 23) = 0;
            *(_BYTE *)a2 = 0;
            v61 = (void **)(a1 + 3);
            if (*((char *)a1 + 47) < 0)
              operator delete(*v61);
            v62 = *(_OWORD *)(a2 + 24);
            a1[5] = *(const void **)(a2 + 40);
            *(_OWORD *)v61 = v62;
            *(_BYTE *)(a2 + 47) = 0;
            *(_BYTE *)(a2 + 24) = 0;
            a2 += 48;
          }
          else
          {
            if (v59 < 0)
              operator delete((void *)*a1);
            v63 = *(_OWORD *)v57;
            a1[2] = *(const void **)(v57 + 16);
            *(_OWORD *)a1 = v63;
            *(_BYTE *)(v57 + 23) = 0;
            *(_BYTE *)v57 = 0;
            v64 = (void **)(a1 + 3);
            if (*((char *)a1 + 47) < 0)
              operator delete(*v64);
            v65 = *(_OWORD *)(v57 + 24);
            a1[5] = *(const void **)(v57 + 40);
            *(_OWORD *)v64 = v65;
            *(_BYTE *)(v57 + 47) = 0;
            *(_BYTE *)(v57 + 24) = 0;
            v57 += 48;
          }
          a1 += 6;
          if (v57 == v55)
            goto LABEL_97;
        }
        if (v57 != v55)
        {
          v74 = 0;
          do
          {
            v75 = &a1[v74];
            if (SHIBYTE(a1[v74 + 2]) < 0)
              operator delete((void *)*v75);
            v76 = v57 + v74 * 8;
            v77 = *(_OWORD *)(v57 + v74 * 8);
            v75[2] = *(const void **)(v57 + v74 * 8 + 16);
            *(_OWORD *)v75 = v77;
            *(_BYTE *)(v76 + 23) = 0;
            *(_BYTE *)v76 = 0;
            v78 = (void **)(v75 + 3);
            if (*((char *)v75 + 47) < 0)
              operator delete(*v78);
            v79 = *(_OWORD *)(v76 + 24);
            v75[5] = *(const void **)(v76 + 40);
            *(_OWORD *)v78 = v79;
            *(_BYTE *)(v76 + 47) = 0;
            *(_BYTE *)(v76 + 24) = 0;
            v74 += 6;
          }
          while (v76 != v56);
        }
      }
      goto LABEL_97;
    }
  }
  else if (a3 != (const void **)a2)
  {
    v32 = 0;
    v33 = 0;
    do
    {
      v34 = a7 + v32;
      v35 = (_QWORD *)(a2 + v32);
      v36 = *(_OWORD *)(a2 + v32);
      *(_QWORD *)(v34 + 16) = *(_QWORD *)(a2 + v32 + 16);
      *(_OWORD *)v34 = v36;
      v35[1] = 0;
      v35[2] = 0;
      *v35 = 0;
      v37 = *(_OWORD *)(a2 + v32 + 24);
      *(_QWORD *)(v34 + 40) = *(_QWORD *)(a2 + v32 + 40);
      *(_OWORD *)(v34 + 24) = v37;
      v35[4] = 0;
      v35[5] = 0;
      v35[3] = 0;
      ++v33;
      v32 += 48;
    }
    while (v35 + 6 != a3);
    v38 = a7 + v32;
    v88 = v33;
    while (v38 != a7)
    {
      if ((const void **)a2 == a1)
      {
        if (v38 != a7)
        {
          v66 = 0;
          do
          {
            v67 = &a3[v66 / 8];
            v68 = (void **)&a3[v66 / 8 - 6];
            if (*((char *)&a3[v66 / 8 - 3] - 1) < 0)
              operator delete(*v68);
            v69 = (__int128 *)(v38 + v66 - 48);
            v70 = *v69;
            a3[v66 / 8 - 4] = *(const void **)(v38 + v66 - 32);
            *(_OWORD *)v68 = v70;
            *(_BYTE *)(v38 + v66 - 25) = 0;
            *(_BYTE *)v69 = 0;
            v71 = (void **)(v67 - 3);
            if (*((char *)v67 - 1) < 0)
              operator delete(*v71);
            v72 = v38 + v66;
            v73 = *(_OWORD *)(v38 + v66 - 24);
            *(v67 - 1) = *(const void **)(v38 + v66 - 8);
            *(_OWORD *)v71 = v73;
            *(_BYTE *)(v72 - 1) = 0;
            *(_BYTE *)(v72 - 24) = 0;
            v66 -= 48;
          }
          while (v38 + v66 != a7);
        }
        goto LABEL_97;
      }
      v39 = snlp::ssu::usershortcut::operator<((const void **)(v38 - 48), (unsigned __int8 *)(a2 - 48));
      v40 = (void **)(a3 - 6);
      v41 = *((char *)a3 - 25);
      if (v39)
      {
        if (v41 < 0)
          operator delete(*v40);
        v42 = *(_OWORD *)(a2 - 48);
        *(a3 - 4) = *(const void **)(a2 - 32);
        *(_OWORD *)v40 = v42;
        *(_BYTE *)(a2 - 25) = 0;
        *(_BYTE *)(a2 - 48) = 0;
        v43 = (void **)(a3 - 3);
        if (*((char *)a3 - 1) < 0)
          operator delete(*v43);
        v44 = *(_OWORD *)(a2 - 24);
        *(a3 - 1) = *(const void **)(a2 - 8);
        *(_OWORD *)v43 = v44;
        v45 = a2;
        a2 -= 48;
      }
      else
      {
        if (v41 < 0)
          operator delete(*v40);
        v46 = *(_OWORD *)(v38 - 48);
        *(a3 - 4) = *(const void **)(v38 - 32);
        *(_OWORD *)v40 = v46;
        *(_BYTE *)(v38 - 25) = 0;
        *(_BYTE *)(v38 - 48) = 0;
        v47 = (void **)(a3 - 3);
        if (*((char *)a3 - 1) < 0)
          operator delete(*v47);
        v48 = *(_OWORD *)(v38 - 24);
        *(a3 - 1) = *(const void **)(v38 - 8);
        *(_OWORD *)v47 = v48;
        v45 = v38;
        v38 -= 48;
      }
      *(_BYTE *)(v45 - 1) = 0;
      *(_BYTE *)(v45 - 24) = 0;
      a3 -= 6;
    }
    goto LABEL_97;
  }
  v88 = 0;
LABEL_97:
  if (a7)
    std::__destruct_n::__process[abi:ne180100]<snlp::ssu::usershortcut::SSUUserShortcut>(&v88, a7);
}

void snlp::ssu::usershortcut::buildPositiveExamples(__int128 **a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v14;
  __int128 *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::string *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  std::string v25;
  std::string v26[2];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  v18 = 0;
  v19 = 0;
  std::vector<snlp::ssu::app::SSUAppIntent>::reserve(&v17, 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1));
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      if (*((char *)v3 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v25, *((const std::string::value_type **)v3 + 3), *((_QWORD *)v3 + 4));
      }
      else
      {
        v5 = *(__int128 *)((char *)v3 + 24);
        v25.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 5);
        *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v5;
      }
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v20 = (std::string *)&v14;
      LOBYTE(v21) = 0;
      v14 = (__int128 *)operator new(0x18uLL);
      v15 = v14;
      v16 = (char *)v14 + 24;
      v15 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v16, (__int128 *)&v25, (__int128 *)v26, (std::string *)v14);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
      }
      else
      {
        v6 = *v3;
        v25.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
        *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v6;
      }
      memset(v26, 0, sizeof(v26));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v26[1], v14, v15, 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v14) >> 3));
      v7 = v18;
      if (v18 >= v19)
      {
        v9 = 0x8E38E38E38E38E39 * ((uint64_t)(v18 - v17) >> 3);
        v10 = v9 + 1;
        if (v9 + 1 > 0x38E38E38E38E38ELL)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        if (0x1C71C71C71C71C72 * ((uint64_t)(v19 - v17) >> 3) > v10)
          v10 = 0x1C71C71C71C71C72 * ((uint64_t)(v19 - v17) >> 3);
        if (0x8E38E38E38E38E39 * ((uint64_t)(v19 - v17) >> 3) >= 0x1C71C71C71C71C7)
          v11 = 0x38E38E38E38E38ELL;
        else
          v11 = v10;
        v24 = &v19;
        if (v11)
          v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::app::SSUAppIntent>>(v11);
        else
          v12 = 0;
        v20 = (std::string *)v11;
        v21 = v11 + 72 * v9;
        v22 = v21;
        v23 = v11 + 72 * v12;
        std::allocator<snlp::ssu::app::SSUAppIntent>::construct[abi:ne180100]<snlp::ssu::app::SSUAppIntent,snlp::ssu::app::SSUAppIntent>(v21, (__int128 *)&v25);
        v22 += 72;
        std::vector<snlp::ssu::app::SSUAppIntent>::__swap_out_circular_buffer(&v17, &v20);
        v8 = v18;
        std::__split_buffer<snlp::ssu::app::SSUAppIntent>::~__split_buffer((uint64_t)&v20);
      }
      else
      {
        std::allocator<snlp::ssu::app::SSUAppIntent>::construct[abi:ne180100]<snlp::ssu::app::SSUAppIntent,snlp::ssu::app::SSUAppIntent>(v18, (__int128 *)&v25);
        v8 = v7 + 72;
      }
      v18 = v8;
      v20 = &v26[1];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
      v20 = v26;
      std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
      v3 += 3;
    }
    while (v3 != v4);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<snlp::ssu::app::SSUAppIntent>::__init_with_size[abi:ne180100]<snlp::ssu::app::SSUAppIntent*,snlp::ssu::app::SSUAppIntent*>(a2, v17, v18, 0x8E38E38E38E38E39 * ((uint64_t)(v18 - v17) >> 3));
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<snlp::ssu::app::SSUAppIntent>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
}

void sub_1C225AC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  __p = &a13;
  std::vector<snlp::ssu::app::SSUAppIntent>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1C225ACD4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (a26 < 0)
    operator delete(__p);
  JUMPOUT(0x1C225AC80);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::getDescription(nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::requiredForLocale(unsigned __int8 **a1)
{
  uint64_t v2;
  std::string *v3;
  _BOOL8 v4;
  std::string *v6;
  std::string *v7;
  _QWORD v8[2];
  char v9;
  __int128 v10;
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[3];
  _QWORD v14[3];
  _QWORD v15[3];
  _QWORD v16[3];
  __int128 v17;

  *(_QWORD *)&v17 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v10, "de_DE");
  std::string::basic_string[abi:ne180100]<0>(v11, "en_AU");
  std::string::basic_string[abi:ne180100]<0>(v12, "en_CA");
  std::string::basic_string[abi:ne180100]<0>(v13, "en_GB");
  std::string::basic_string[abi:ne180100]<0>(v14, "en_IN");
  std::string::basic_string[abi:ne180100]<0>(v15, "en_US");
  std::string::basic_string[abi:ne180100]<0>(v16, "fr_FR");
  v6 = 0;
  v7 = 0;
  v8[0] = 0;
  v8[1] = &v6;
  v9 = 0;
  v6 = (std::string *)operator new(0xA8uLL);
  v7 = v6;
  v8[0] = v6 + 7;
  v2 = 0;
  v7 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v8, &v10, &v17, v6);
  do
  {
    if (SHIBYTE(v16[v2 + 2]) < 0)
      operator delete((void *)v16[v2]);
    v2 -= 3;
  }
  while (v2 != -21);
  v3 = v7;
  v4 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>((uint64_t)v6, (uint64_t)v7, a1) != (_QWORD)v3;
  *(_QWORD *)&v10 = &v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  return v4;
}

void sub_1C225AEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, char a15)
{
  uint64_t v16;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  v16 = 0;
  while (1)
  {
    if (*(&a15 + v16 + 167) < 0)
      operator delete(*(void **)(&a15 + v16 + 144));
    v16 -= 24;
    if (v16 == -168)
      _Unwind_Resume(a1);
  }
}

uint64_t std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      else
        v9 = *(unsigned __int8 **)(v3 + 8);
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(_QWORD *)(v3 + 8)))
            return v3;
        }
        else
        {
          if (!*(_BYTE *)(v3 + 23))
            return v3;
          v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::MinimumMaximumLabeller(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, "TreeManipulation_MinimumMaximumLabeller");
  v4[3] = "min_max_labeller";
  std::string::basic_string[abi:ne180100]<0>(v4 + 4, "minimumMaximum");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 56), "floatSettingState");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 80), "minimum");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 104), "maximum");
  nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::correctLabelGivenSpans(a1, a2, (std::string *)(a1 + 128));
  return a1;
}

void sub_1C225B07C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  if (*(char *)(v1 + 127) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 103) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 79) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::correctLabelGivenSpans(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  const void *v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;

  v6 = (const void *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
  {
    v8 = *(const void **)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v7 = *(unsigned __int8 *)(a1 + 55);
    v8 = (const void *)(a1 + 32);
  }
  if (*(char *)(a1 + 103) < 0)
  {
    v9 = *(const void **)(a1 + 80);
    v10 = *(_QWORD *)(a1 + 88);
  }
  else
  {
    v9 = (const void *)(a1 + 80);
    v10 = *(unsigned __int8 *)(a1 + 103);
  }
  v11 = nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::hasMatchingSpans(a1, a2, v8, v7, v9, v10);
  if (*(char *)(a1 + 55) < 0)
  {
    v13 = *(const void **)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v12 = *(unsigned __int8 *)(a1 + 55);
    v13 = v6;
  }
  if (*(char *)(a1 + 127) < 0)
  {
    v14 = *(const void **)(a1 + 104);
    v15 = *(_QWORD *)(a1 + 112);
  }
  else
  {
    v14 = (const void *)(a1 + 104);
    v15 = *(unsigned __int8 *)(a1 + 127);
  }
  if (v11 | nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::hasMatchingSpans(a1, a2, v13, v12, v14, v15))v16 = (uint64_t)v6;
  else
    v16 = a1 + 56;
  if (*(char *)(v16 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v16, *(_QWORD *)(v16 + 8));
  else
    __p = *(std::string *)v16;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::correctLabelGivenSpecificSpans(a1, a2, p_p, size, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1C225B228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::hasMatchingSpans(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, const void *a5, uint64_t a6)
{
  _QWORD *v9;
  _QWORD *v10;
  unsigned __int8 *v13;
  NSObject *v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  __int16 v19;
  const void *v20;
  __int16 v21;
  const void *v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD **)a2;
  v10 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 == v10)
  {
    v13 = 0;
  }
  else
  {
    do
    {
      v13 = nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::doesMatchingSpanHaveLabelAndSemanticValue(v9, a3, a4, a5, a6);
      if ((v13 & 1) != 0)
        break;
      v9 += 11;
    }
    while (v9 != v10);
  }
  v14 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    v15 = *(_QWORD *)(a1 + 24);
    v17 = 136315906;
    v18 = v15;
    v19 = 2080;
    v20 = a3;
    v21 = 2080;
    v22 = a5;
    v23 = 1024;
    v24 = (int)v13;
    _os_log_impl(&dword_1C2196000, v14, OS_LOG_TYPE_DEBUG, "[%s] MatchingSpan with label %s, semantic value %s found?: %{BOOL}d", (uint8_t *)&v17, 0x26u);
  }
  return v13;
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::correctLabelGivenSpecificSpans(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  _QWORD *v10;
  uint64_t v11;
  const void *v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  const void *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  _QWORD *v24;
  __int16 v25;
  _QWORD *v26;
  __int16 v27;
  const void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  a5->__r_.__value_.__s.__data_[0] = 0;
  a5[1].__r_.__value_.__s.__data_[0] = 0;
  v10 = (_QWORD *)(a1 + 80);
  if (*(char *)(a1 + 103) < 0)
  {
    v12 = *(const void **)(a1 + 80);
    v11 = *(_QWORD *)(a1 + 88);
  }
  else
  {
    v11 = *(unsigned __int8 *)(a1 + 103);
    v12 = (const void *)(a1 + 80);
  }
  v13 = nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::hasMatchingSpans(a1, a2, a3, a4, v12, v11);
  v14 = (_QWORD *)(a1 + 104);
  if (*(char *)(a1 + 127) < 0)
  {
    v16 = *(const void **)(a1 + 104);
    v15 = *(_QWORD *)(a1 + 112);
  }
  else
  {
    v15 = *(unsigned __int8 *)(a1 + 127);
    v16 = (const void *)(a1 + 104);
  }
  v17 = nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::hasMatchingSpans(a1, a2, a3, a4, v16, v15);
  if (((v13 ^ 1) & 1) == 0 && (v17 & 1) == 0)
  {
    v18 = siri::ontology::oname::graph::ontology_init::common_Number_MinimumValue((siri::ontology::oname::graph::ontology_init *)v17);
LABEL_19:
    std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(a5, (const std::string *)(v18 + 8));
    return;
  }
  if (((v13 | v17 ^ 1) & 1) == 0)
  {
    v18 = siri::ontology::oname::graph::ontology_init::common_Number_MaximumValue((siri::ontology::oname::graph::ontology_init *)v17);
    goto LABEL_19;
  }
  if (((v13 ^ 1 | v17 ^ 1) & 1) == 0)
  {
    v19 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a1 + 103) < 0)
        v10 = (_QWORD *)*v10;
      v20 = *(_QWORD *)(a1 + 24);
      if (*(char *)(a1 + 127) < 0)
        v14 = (_QWORD *)*v14;
      v21 = 136315906;
      v22 = v20;
      v23 = 2080;
      v24 = v10;
      v25 = 2080;
      v26 = v14;
      v27 = 2080;
      v28 = a3;
      _os_log_impl(&dword_1C2196000, v19, OS_LOG_TYPE_DEBUG, "[%s] Both %s and %s semantic values found when using %s spans", (uint8_t *)&v21, 0x2Au);
    }
  }
}

void sub_1C225B514(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::doesMatchingSpanHaveLabelAndSemanticValue(_QWORD *a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5)
{
  unsigned __int8 *result;
  size_t v9;
  unsigned __int8 *v10;
  size_t v11;
  _DWORD *v12;
  _DWORD *v13;

  result = (unsigned __int8 *)a1[6];
  if (result)
  {
    if ((char)result[23] < 0)
    {
      v10 = result;
      result = *(unsigned __int8 **)result;
      v9 = *((_QWORD *)v10 + 1);
    }
    else
    {
      v9 = result[23];
    }
    if (v9 != a3 || memcmp(result, a2, v9))
      return 0;
    result = (unsigned __int8 *)a1[7];
    if (result)
    {
      if ((char)result[23] < 0)
      {
        result = *(unsigned __int8 **)result;
        v11 = *(_QWORD *)(a1[7] + 8);
      }
      else
      {
        v11 = result[23];
      }
      if (v11 != a5 || memcmp(result, a4, v11))
        return 0;
      v12 = (_DWORD *)a1[1];
      v13 = (_DWORD *)a1[2];
      if (v12 != v13)
      {
        while (*v12 != 3 && *v12 != 8)
        {
          if (++v12 == v13)
          {
            v12 = (_DWORD *)a1[2];
            return (unsigned __int8 *)(v13 != v12);
          }
        }
      }
      return (unsigned __int8 *)(v13 != v12);
    }
  }
  return result;
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::isDefinedValue(size_t *this, const nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  int v7;
  const void **v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v19;
  _BOOL8 result;

  v3 = siri::ontology::oname::graph::ontology_init::Argument_definedValue((siri::ontology::oname::graph::ontology_init *)this);
  v4 = *((unsigned __int8 *)this + 71);
  if ((v4 & 0x80u) == 0)
    v5 = *((unsigned __int8 *)this + 71);
  else
    v5 = this[7];
  v6 = *(unsigned __int8 *)(v3 + 31);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(v3 + 16);
  if (v5 != v6)
    return 0;
  v8 = (const void **)(this + 6);
  v11 = *(unsigned __int8 **)(v3 + 8);
  v9 = (unsigned __int8 *)(v3 + 8);
  v10 = v11;
  if (v7 >= 0)
    v12 = v9;
  else
    v12 = v10;
  if ((v4 & 0x80) != 0)
    return memcmp(*v8, v12, this[7]) == 0;
  if (!*((_BYTE *)this + 71))
    return 1;
  v13 = v4 - 1;
  do
  {
    v15 = *(unsigned __int8 *)v8;
    v8 = (const void **)((char *)v8 + 1);
    v14 = v15;
    v17 = *v12++;
    v16 = v17;
    v19 = v13-- != 0;
    result = v14 == v16;
  }
  while (v14 == v16 && v19);
  return result;
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::handleTreeNode(nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller *this, nlv4_inference_orchestrator::trees::TreeNode *a2, BOOL *a3)
{
  const nlv4_inference_orchestrator::trees::TreeNode *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  void **v11;
  __int128 v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  __int128 *v17;
  void **v18;

  *a3 = 0;
  if (nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::hasMinOrMaxDefinedValue((size_t *)a2, a2))
  {
    v7 = *((_QWORD *)a2 + 11);
    v8 = *((_QWORD *)a2 + 12);
    if (*((_BYTE *)this + 152))
    {
      for (; v7 != v8; v7 += 144)
      {
        if (nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::isDefinedValue((size_t *)v7, v6))
        {
          if (!*((_BYTE *)this + 152))
            std::__throw_bad_optional_access[abi:ne180100]();
          std::string::operator=((std::string *)v7, (const std::string *)((char *)this + 128));
        }
      }
    }
    else
    {
      if (v7 != v8)
      {
        while (!nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::isDefinedValue((size_t *)v7, v6))
        {
          v7 += 144;
          if (v7 == v8)
          {
            v7 = v8;
            goto LABEL_25;
          }
        }
        if (v7 != v8 && v7 + 144 != v8)
        {
          v9 = (_OWORD *)(v7 + 256);
          do
          {
            if (!nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::isDefinedValue((size_t *)v9 - 14, v6))
            {
              if (*(char *)(v7 + 23) < 0)
                operator delete(*(void **)v7);
              v10 = *(v9 - 7);
              *(_QWORD *)(v7 + 16) = *((_QWORD *)v9 - 12);
              *(_OWORD *)v7 = v10;
              *((_BYTE *)v9 - 89) = 0;
              *((_BYTE *)v9 - 112) = 0;
              v11 = (void **)(v7 + 24);
              if (*(char *)(v7 + 47) < 0)
                operator delete(*v11);
              v12 = *(_OWORD *)((char *)v9 - 88);
              *(_QWORD *)(v7 + 40) = *((_QWORD *)v9 - 9);
              *(_OWORD *)v11 = v12;
              *((_BYTE *)v9 - 65) = 0;
              *((_BYTE *)v9 - 88) = 0;
              v13 = (void **)(v7 + 48);
              if (*(char *)(v7 + 71) < 0)
                operator delete(*v13);
              v14 = *(v9 - 4);
              *(_QWORD *)(v7 + 64) = *((_QWORD *)v9 - 6);
              *(_OWORD *)v13 = v14;
              *((_BYTE *)v9 - 41) = 0;
              *((_BYTE *)v9 - 64) = 0;
              *(_OWORD *)(v7 + 72) = *(_OWORD *)((char *)v9 - 40);
              std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vdeallocate(v7 + 88);
              *(_OWORD *)(v7 + 88) = *(_OWORD *)((char *)v9 - 24);
              *(_QWORD *)(v7 + 104) = *((_QWORD *)v9 - 1);
              *((_QWORD *)v9 - 3) = 0;
              *((_QWORD *)v9 - 2) = 0;
              *((_QWORD *)v9 - 1) = 0;
              v15 = v9[1];
              *(_OWORD *)(v7 + 112) = *v9;
              *(_OWORD *)(v7 + 128) = v15;
              v7 += 144;
            }
            v16 = v9 + 2;
            v9 += 9;
          }
          while (v16 != (_OWORD *)v8);
        }
      }
LABEL_25:
      v17 = (__int128 *)*((_QWORD *)a2 + 12);
      if ((__int128 *)v7 != v17)
      {
        v18 = (void **)std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *>(v17, *((__int128 **)a2 + 12), v7);
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__base_destruct_at_end[abi:ne180100]((uint64_t)a2 + 88, v18);
      }
    }
    *a3 = 1;
  }
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::hasMinOrMaxDefinedValue(size_t *this, const nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  size_t *v12;
  size_t v14;
  size_t v15;
  _BOOL8 isDefinedValue;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;

  v3 = siri::ontology::oname::graph::ontology_init::common_Number((siri::ontology::oname::graph::ontology_init *)this);
  v4 = *((unsigned __int8 *)this + 23);
  if ((v4 & 0x80u) == 0)
    v5 = *((unsigned __int8 *)this + 23);
  else
    v5 = this[1];
  v6 = *(unsigned __int8 *)(v3 + 31);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(v3 + 16);
  if (v5 != v6)
    return 0;
  v10 = *(unsigned __int8 **)(v3 + 8);
  v8 = (unsigned __int8 *)(v3 + 8);
  v9 = v10;
  if (v7 >= 0)
    v11 = v8;
  else
    v11 = v9;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp((const void *)*this, v11, this[1]))
      return 0;
    goto LABEL_18;
  }
  if (!*((_BYTE *)this + 23))
  {
LABEL_18:
    v14 = this[11];
    v15 = this[12];
    while (v14 != v15)
    {
      isDefinedValue = nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::isDefinedValue((size_t *)v14, (const nlv4_inference_orchestrator::trees::TreeNode *)v11);
      if (isDefinedValue)
      {
        v17 = siri::ontology::oname::graph::ontology_init::common_Number_MinimumValue((siri::ontology::oname::graph::ontology_init *)isDefinedValue);
        v18 = *(unsigned __int8 *)(v14 + 23);
        if ((v18 & 0x80u) == 0)
          v19 = *(unsigned __int8 *)(v14 + 23);
        else
          v19 = *(_QWORD *)(v14 + 8);
        v20 = *(unsigned __int8 *)(v17 + 31);
        v21 = (char)v20;
        if ((v20 & 0x80u) != 0)
          v20 = *(_QWORD *)(v17 + 16);
        if (v19 == v20)
        {
          v23 = *(unsigned __int8 **)(v17 + 8);
          v17 += 8;
          v22 = v23;
          if (v21 >= 0)
            v24 = (unsigned __int8 *)v17;
          else
            v24 = v22;
          if ((v18 & 0x80) != 0)
          {
            v17 = memcmp(*(const void **)v14, v24, *(_QWORD *)(v14 + 8));
            if (!(_DWORD)v17)
              return 1;
          }
          else
          {
            if (!*(_BYTE *)(v14 + 23))
              return 1;
            v25 = 0;
            while (*(unsigned __int8 *)(v14 + v25) == v24[v25])
            {
              if (v18 == ++v25)
                return 1;
            }
          }
        }
        v26 = siri::ontology::oname::graph::ontology_init::common_Number_MaximumValue((siri::ontology::oname::graph::ontology_init *)v17);
        v27 = *(unsigned __int8 *)(v14 + 23);
        if ((v27 & 0x80u) == 0)
          v28 = *(unsigned __int8 *)(v14 + 23);
        else
          v28 = *(_QWORD *)(v14 + 8);
        v29 = *(unsigned __int8 *)(v26 + 31);
        v30 = (char)v29;
        if ((v29 & 0x80u) != 0)
          v29 = *(_QWORD *)(v26 + 16);
        if (v28 == v29)
        {
          v33 = *(unsigned __int8 **)(v26 + 8);
          v31 = (unsigned __int8 *)(v26 + 8);
          v32 = v33;
          if (v30 >= 0)
            v11 = v31;
          else
            v11 = v32;
          if ((v27 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v14, v11, *(_QWORD *)(v14 + 8)))
              return 1;
          }
          else
          {
            if (!*(_BYTE *)(v14 + 23))
              return 1;
            v34 = 0;
            while (*(unsigned __int8 *)(v14 + v34) == v11[v34])
            {
              if (v27 == ++v34)
                return 1;
            }
          }
        }
      }
      v14 += 144;
    }
    return 0;
  }
  v12 = this;
  while (*(unsigned __int8 *)v12 == *v11)
  {
    v12 = (size_t *)((char *)v12 + 1);
    ++v11;
    if (!--v4)
      goto LABEL_18;
  }
  return 0;
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::label(nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  nlv4_inference_orchestrator::trees::TreeNode *v6;
  nlv4_inference_orchestrator::trees::TreeNode *v7;
  nlv4_inference_orchestrator::trees::TreeNode *v8;
  BOOL v10;
  nlv4_inference_orchestrator::trees::TreeNode *v11;
  _OWORD v12[2];
  __int128 v13;

  v13 = 0u;
  memset(v12, 0, sizeof(v12));
  v11 = a2;
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(v12, &v11);
  v3 = *((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    LOBYTE(v4) = 0;
    do
    {
      v5 = v3 - 1;
      v6 = *(nlv4_inference_orchestrator::trees::TreeNode **)(*(_QWORD *)(*((_QWORD *)&v12[0] + 1)
                                                                        + (((unint64_t)(v13 + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
                                                            + 8 * ((v13 + v5) & 0x1FF));
      *((_QWORD *)&v13 + 1) = v5;
      std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::__maybe_remove_back_spare[abi:ne180100](v12);
      v10 = 0;
      nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::handleTreeNode(this, v6, &v10);
      v4 |= v10;
      v8 = (nlv4_inference_orchestrator::trees::TreeNode *)*((_QWORD *)v6 + 11);
      v7 = (nlv4_inference_orchestrator::trees::TreeNode *)*((_QWORD *)v6 + 12);
      while (v8 != v7)
      {
        v11 = v8;
        std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(v12, &v11);
        v8 = (nlv4_inference_orchestrator::trees::TreeNode *)((char *)v8 + 144);
      }
      v3 = *((_QWORD *)&v13 + 1);
    }
    while (*((_QWORD *)&v13 + 1));
  }
  else
  {
    v4 = 0;
  }
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_1C225BB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL snlp::ssu::app::SSUAppCategory::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const void **v8;
  unsigned __int8 *v9;

  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  v4 = *(unsigned __int8 *)(a1 + 31);
  if ((v4 & 0x80u) == 0)
    v5 = *(unsigned __int8 *)(a1 + 31);
  else
    v5 = *(_QWORD *)(a1 + 16);
  v6 = *(unsigned __int8 *)(a2 + 31);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 16);
  if (v5 != v6)
    return 0;
  v8 = (const void **)(a1 + 8);
  if (v7 >= 0)
    v9 = (unsigned __int8 *)(a2 + 8);
  else
    v9 = *(unsigned __int8 **)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*v8, v9, *(_QWORD *)(a1 + 16)))
      return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
    return 0;
  }
  if (*(_BYTE *)(a1 + 31))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v4)
        return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
    }
    return 0;
  }
  return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
}

unint64_t snlp::ssu::app::SSUAppCategoryHash::operator()(uint64_t a1, char *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = 0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * *(int *)a2) ^ ((0xC6A4A7935BD1E995 * *(int *)a2) >> 47))
     + 3864292196u;
  v4 = boost::hash<std::string>::operator()(a2 + 8);
  return 3864292196u
       - 0x395B586CA42E166BLL
       * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[32]) ^ ((0xC6A4A7935BD1E995 * a2[32]) >> 47))) ^ (3864292196u - 0x395B586CA42E166BLL * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v4) ^ ((0xC6A4A7935BD1E995 * v4) >> 47))) ^ v3)));
}

void uaap_orchestration::grammar::parseValueToString(unsigned int *a1@<X0>, std::basic_string<char16_t> *a2@<X8>)
{
  unsigned int v2;
  std::basic_string<char16_t>::size_type v3;

  v2 = *a1;
  if ((*((_WORD *)a1 + 11) & 0x1000) != 0)
  {
    v3 = (21 - *((char *)a1 + 21));
  }
  else
  {
    a1 = (unsigned int *)*((_QWORD *)a1 + 1);
    v3 = v2;
  }
  toU16String((const char *)a1, v3, a2);
}

unint64_t uaap_orchestration::grammar::Path::size(uaap_orchestration::grammar::Path *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
}

void uaap_orchestration::grammar::Path::getFirstComponent(uaap_orchestration::grammar::Path *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this == *((_QWORD *)this + 1))
  {
    v4 = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    if (*(char *)(v3 + 23) < 0)
    {
      std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)a2, *(const std::basic_string<char16_t>::value_type **)v3, *(_QWORD *)(v3 + 8));
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)v3;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(v3 + 16);
    }
    v4 = 1;
  }
  *(_BYTE *)(a2 + 24) = v4;
}

void uaap_orchestration::grammar::Path::getLastComponent(uaap_orchestration::grammar::Path *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;

  v3 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this == v3)
  {
    v4 = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    if (*(char *)(v3 - 1) < 0)
    {
      std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)a2, *(const std::basic_string<char16_t>::value_type **)(v3 - 24), *(_QWORD *)(v3 - 16));
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(v3 - 8);
    }
    v4 = 1;
  }
  *(_BYTE *)(a2 + 24) = v4;
}

std::basic_string<char16_t> *uaap_orchestration::grammar::Path::toString@<X0>(std::basic_string<char16_t> *this@<X0>, std::basic_string<char16_t> *a2@<X8>)
{
  std::basic_string<char16_t>::__raw *v2;
  std::basic_string<char16_t>::size_type v4;
  int v5;
  const std::basic_string<char16_t>::value_type *v6;
  std::basic_string<char16_t>::size_type v7;
  std::basic_string<char16_t>::size_type i;
  int v9;
  const std::basic_string<char16_t>::value_type *v10;
  std::basic_string<char16_t>::size_type v11;

  v2 = (std::basic_string<char16_t>::__raw *)this;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v4 = this->__r_.__value_.__r.__words[0];
  if (this->__r_.__value_.__r.__words[0] != this->__r_.__value_.__l.__size_)
  {
    v5 = *(char *)(v4 + 23);
    if (v5 >= 0)
      v6 = (const std::basic_string<char16_t>::value_type *)this->__r_.__value_.__r.__words[0];
    else
      v6 = *(const std::basic_string<char16_t>::value_type **)v4;
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(v4 + 23);
    else
      v7 = *(_QWORD *)(v4 + 8);
    this = std::basic_string<char16_t>::append(a2, v6, v7);
    v4 = v2->__words[0];
  }
  for (i = v4 + 24; i != v2->__words[1]; i += 24)
  {
    std::basic_string<char16_t>::append(a2, L".", 1uLL);
    v9 = *(char *)(i + 23);
    if (v9 >= 0)
      v10 = (const std::basic_string<char16_t>::value_type *)i;
    else
      v10 = *(const std::basic_string<char16_t>::value_type **)i;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(i + 23);
    else
      v11 = *(_QWORD *)(i + 8);
    this = std::basic_string<char16_t>::append(a2, v10, v11);
  }
  return this;
}

void sub_1C225BE5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::basic_string<char16_t> *__cdecl std::basic_string<char16_t>::append(std::basic_string<char16_t> *this, const std::basic_string<char16_t>::value_type *__s, std::basic_string<char16_t>::size_type __n)
{
  std::basic_string<char16_t>::size_type v6;
  std::basic_string<char16_t>::size_type size;
  std::basic_string<char16_t> *v8;
  std::basic_string<char16_t>::size_type v9;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v6 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else
  {
    v6 = 10;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (v6 - size >= __n)
  {
    if (__n)
    {
      v8 = this;
      if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
        v8 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
      memmove((char *)v8 + 2 * size, __s, 2 * __n);
      v9 = size + __n;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        this->__r_.__value_.__l.__size_ = v9;
      else
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
      v8->__r_.__value_.__s.__data_[v9] = 0;
    }
  }
  else
  {
    std::basic_string<char16_t>::__grow_by_and_replace(this, v6, __n - v6 + size, size, size, 0, __n, __s);
  }
  return this;
}

void std::basic_string<char16_t>::__grow_by_and_replace(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __old_cap, std::basic_string<char16_t>::size_type __delta_cap, std::basic_string<char16_t>::size_type __old_sz, std::basic_string<char16_t>::size_type __n_copy, std::basic_string<char16_t>::size_type __n_del, std::basic_string<char16_t>::size_type __n_add, const std::basic_string<char16_t>::value_type *__p_new_stuff)
{
  std::basic_string<char16_t> *v15;
  std::basic_string<char16_t>::size_type v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  std::basic_string<char16_t>::size_type v21;
  uint64_t v22;
  uint64_t v23;
  std::basic_string<char16_t>::size_type v24;
  std::basic_string<char16_t>::size_type v25;

  if (0x7FFFFFFFFFFFFFF6 - __old_cap < __delta_cap)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v15 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
  v16 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap)
    v16 = 2 * __old_cap;
  v17 = (v16 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if ((v16 | 3) != 0xB)
    v17 = v16 | 3;
  if (v16 >= 0xB)
    v18 = v17 + 1;
  else
    v18 = 11;
  if (__old_cap > 0x3FFFFFFFFFFFFFF2)
    v19 = 0x7FFFFFFFFFFFFFF7;
  else
    v19 = v18;
  v20 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v19);
  v21 = (std::basic_string<char16_t>::size_type)v20;
  v23 = v22;
  if (__n_copy)
    memmove(v20, v15, 2 * __n_copy);
  if (__n_add)
    memmove((void *)(v21 + 2 * __n_copy), __p_new_stuff, 2 * __n_add);
  v24 = __old_sz - (__n_del + __n_copy);
  if (v24)
    memmove((void *)(v21 + 2 * __n_copy + 2 * __n_add), (char *)v15 + 2 * __n_copy + 2 * __n_del, 2 * v24);
  if (__old_cap != 10)
    operator delete(v15);
  v25 = __n_add + __n_copy + v24;
  this->__r_.__value_.__r.__words[0] = v21;
  this->__r_.__value_.__l.__size_ = v25;
  this->__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
  *(_WORD *)(v21 + 2 * v25) = 0;
}

uint64_t uaap_orchestration::grammar::Path::extendWithComponent@<X0>(__int128 **a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  uint64_t result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<std::basic_string<char16_t>>::reserve(a3, 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3) + 1);
  std::vector<std::basic_string<char16_t>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::basic_string<char16_t> const*>,std::__wrap_iter<std::basic_string<char16_t> const*>>(a3, (std::basic_string<char16_t> *)*a3, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3));
  v6 = a3[1];
  if (v6 >= a3[2])
  {
    result = std::vector<std::basic_string<char16_t>>::__push_back_slow_path<std::basic_string<char16_t> const&>(a3, a2);
  }
  else
  {
    std::vector<std::basic_string<char16_t>>::__construct_one_at_end[abi:ne180100]<std::basic_string<char16_t> const&>((uint64_t)a3, a2);
    result = v6 + 24;
  }
  a3[1] = result;
  return result;
}

void sub_1C225C128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::basic_string<char16_t>>::reserve(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0xAAAAAAAAAAAAAAABLL * ((result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 24 * v4;
    std::vector<std::basic_string<char16_t>>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<std::basic_string<char16_t>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void std::vector<std::basic_string<char16_t>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::basic_string<char16_t> const*>,std::__wrap_iter<std::basic_string<char16_t> const*>>(uint64_t *a1, std::basic_string<char16_t> *a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  __int128 *v6;
  std::basic_string<char16_t> *v7;
  uint64_t v9;
  uint64_t v10;
  std::basic_string<char16_t> *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v21;
  std::basic_string<char16_t> *v22;
  __int128 *v23;
  __int128 v24;
  std::basic_string<char16_t> *v25;
  std::basic_string<char16_t> *v26;
  std::basic_string<char16_t> *v27;
  __int128 v28;
  std::basic_string<char16_t> *v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;
  std::basic_string<char16_t> *v33;
  uint64_t v34;
  std::basic_string<char16_t> *v35;
  uint64_t v36;
  __int128 v37;
  std::basic_string<char16_t> *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  __int128 v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD v47[3];
  char v48;
  std::basic_string<char16_t> *v49;
  std::basic_string<char16_t> *v50;

  if (a5 < 1)
    return;
  v6 = a3;
  v7 = a2;
  v10 = (uint64_t)(a1 + 2);
  v9 = a1[2];
  v11 = (std::basic_string<char16_t> *)a1[1];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v11) >> 3)) < a5)
  {
    v12 = *a1;
    v13 = a5 - 0x5555555555555555 * (((uint64_t)v11 - *a1) >> 3);
    if (v13 > 0xAAAAAAAAAAAAAAALL)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v12) >> 3);
    v15 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v12) >> 3);
    v16 = 2 * v15;
    if (2 * v15 <= v13)
      v16 = a5 - 0x5555555555555555 * (((uint64_t)v11 - *a1) >> 3);
    if (v15 >= 0x555555555555555)
      v17 = 0xAAAAAAAAAAAAAAALL;
    else
      v17 = v16;
    v46 = v10;
    if (v17)
      v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v17);
    else
      v18 = 0;
    v33 = (std::basic_string<char16_t> *)(v17 + 24 * v14);
    v43 = (uint64_t *)v17;
    *(_QWORD *)&v44 = v33;
    *((_QWORD *)&v44 + 1) = v33;
    v45 = v17 + 24 * v18;
    v34 = 3 * a5;
    v35 = &v33[a5];
    v36 = 8 * v34;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::basic_string<char16_t>::__init_copy_ctor_external(v33, *(const std::basic_string<char16_t>::value_type **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v37 = *v6;
        v33->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v37;
      }
      ++v33;
      v6 = (__int128 *)((char *)v6 + 24);
      v36 -= 24;
    }
    while (v36);
    *((_QWORD *)&v44 + 1) = v35;
    *(_QWORD *)&v44 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::basic_string<char16_t>>,std::reverse_iterator<std::basic_string<char16_t>*>,std::reverse_iterator<std::basic_string<char16_t>*>,std::reverse_iterator<std::basic_string<char16_t>*>>(v10, (uint64_t)v7, (uint64_t)v7, *a1, *a1, v44, v44);
    v38 = (std::basic_string<char16_t> *)a1[1];
    v49 = v35;
    v50 = v35;
    v47[0] = v10;
    v47[1] = &v49;
    v47[2] = &v50;
    if (v7 != v38)
    {
      do
      {
        v39 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
        v35->__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v39;
        ++v35;
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        ++v7;
      }
      while (v7 != v38);
      v50 = v35;
    }
    v48 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::basic_string<char16_t>>,std::basic_string<char16_t>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v47);
    v40 = *(_OWORD *)a1;
    v41 = v45;
    *a1 = v44;
    a1[1] = (uint64_t)v35;
    v44 = v40;
    v42 = a1[2];
    a1[2] = v41;
    v45 = v42;
    v43 = (uint64_t *)v40;
    std::__split_buffer<std::basic_string<char16_t>>::~__split_buffer((uint64_t)&v43);
    return;
  }
  v19 = (char *)v11 - (char *)a2;
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (char *)a2) >> 3)) >= a5)
  {
    v21 = (__int128 *)((char *)a3 + 24 * a5);
    v22 = (std::basic_string<char16_t> *)a1[1];
LABEL_21:
    v25 = &v7[a5];
    v26 = &v22[-a5];
    v27 = v22;
    if (v26 < v11)
    {
      v27 = v22;
      do
      {
        v28 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v27->__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
        ++v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        ++v26;
      }
      while (v26 < v11);
    }
    a1[1] = (uint64_t)v27;
    if (v22 != v25)
    {
      v29 = v22 - 1;
      v30 = 8 * (((char *)v22 - (char *)v25) >> 3);
      do
      {
        if (SHIBYTE(v29->__r_.__value_.__r.__words[2]) < 0)
          operator delete(v29->__r_.__value_.__l.__data_);
        v31 = (__int128 *)((char *)&v7[-1] + v30);
        v32 = *v31;
        v29->__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[(unint64_t)v30 / 8 - 1];
        *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v32;
        --v29;
        *((_BYTE *)&v7->__r_.__value_.__l + v30 - 1) = 0;
        *(_WORD *)v31 = 0;
        v30 -= 24;
      }
      while (v30);
    }
    for (; v6 != v21; ++v7)
    {
      std::basic_string<char16_t>::operator=(v7, (const std::basic_string<char16_t> *)v6);
      v6 = (__int128 *)((char *)v6 + 24);
    }
    return;
  }
  v47[0] = a1[1];
  v50 = v11;
  v21 = (__int128 *)((char *)a3 + 8 * (((char *)v11 - (char *)a2) >> 3));
  v43 = a1 + 2;
  *(_QWORD *)&v44 = &v50;
  *((_QWORD *)&v44 + 1) = v47;
  LOBYTE(v45) = 0;
  v22 = v11;
  if (v21 != a4)
  {
    v23 = (__int128 *)((char *)a3 + 8 * (((char *)v11 - (char *)a2) >> 3));
    do
    {
      if (*((char *)v23 + 23) < 0)
      {
        std::basic_string<char16_t>::__init_copy_ctor_external(v22, *(const std::basic_string<char16_t>::value_type **)v23, *((_QWORD *)v23 + 1));
        v22 = (std::basic_string<char16_t> *)v47[0];
      }
      else
      {
        v24 = *v23;
        v22->__r_.__value_.__r.__words[2] = *((_QWORD *)v23 + 2);
        *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v24;
      }
      v23 = (__int128 *)((char *)v23 + 24);
      v47[0] = ++v22;
    }
    while (v23 != a4);
  }
  LOBYTE(v45) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::basic_string<char16_t>>,std::basic_string<char16_t>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v43);
  a1[1] = (uint64_t)v22;
  if (v19 >= 1)
    goto LABEL_21;
}

void sub_1C225C560(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::basic_string<char16_t>>,std::basic_string<char16_t>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)va);
  *(_QWORD *)(v2 + 8) = v3;
  _Unwind_Resume(a1);
}

void std::vector<std::basic_string<char16_t>>::__construct_one_at_end[abi:ne180100]<std::basic_string<char16_t> const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(*(std::basic_string<char16_t> **)(a1 + 8), *(const std::basic_string<char16_t>::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_1C225C5E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::basic_string<char16_t>>::__push_back_slow_path<std::basic_string<char16_t> const&>(uint64_t *a1, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  std::basic_string<char16_t> *v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v14[2];
  std::basic_string<char16_t> *v15;
  char *v16;
  uint64_t *v17;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 2;
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  else
    v7 = v3;
  v17 = v6;
  if (v7)
  {
    v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v7);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v10 = (std::basic_string<char16_t> *)&v9[24 * v2];
  v14[0] = v9;
  v14[1] = v10;
  v15 = v10;
  v16 = &v9[24 * v8];
  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(v10, *(const std::basic_string<char16_t>::value_type **)a2, *((_QWORD *)a2 + 1));
    v10 = v15;
  }
  else
  {
    v11 = *a2;
    v10->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  v15 = v10 + 1;
  std::vector<std::basic_string<char16_t>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::basic_string<char16_t>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1C225C6F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::basic_string<char16_t>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::basic_string<char16_t>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::basic_string<char16_t>>,std::reverse_iterator<std::basic_string<char16_t>*>,std::reverse_iterator<std::basic_string<char16_t>*>,std::reverse_iterator<std::basic_string<char16_t>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::basic_string<char16_t>>::~__split_buffer(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::basic_string<char16_t>>,std::reverse_iterator<std::basic_string<char16_t>*>,std::reverse_iterator<std::basic_string<char16_t>*>,std::reverse_iterator<std::basic_string<char16_t>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  __int128 v8;

  for (result = a7; a3 != a5; a3 -= 24)
  {
    v8 = *(_OWORD *)(a3 - 24);
    *(_QWORD *)(result - 8) = *(_QWORD *)(a3 - 8);
    *(_OWORD *)(result - 24) = v8;
    result -= 24;
    *(_QWORD *)(a3 - 16) = 0;
    *(_QWORD *)(a3 - 8) = 0;
    *(_QWORD *)(a3 - 24) = 0;
  }
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::basic_string<char16_t>>,std::basic_string<char16_t>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
  }
  return a1;
}

std::basic_string<char16_t> *__cdecl std::basic_string<char16_t>::operator=(std::basic_string<char16_t> *this, const std::basic_string<char16_t> *__str)
{
  __int128 v2;
  std::basic_string<char16_t>::size_type size;
  std::basic_string<char16_t>::size_type v4;

  if (this != __str)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      size = __str->__r_.__value_.__l.__size_;
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      }
      else
      {
        __str = (const std::basic_string<char16_t> *)__str->__r_.__value_.__r.__words[0];
        v4 = size;
      }
      return std::basic_string<char16_t>::__assign_no_alias<false>(this, (const std::basic_string<char16_t>::value_type *)__str, v4);
    }
    else if ((*((_BYTE *)&__str->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      return std::basic_string<char16_t>::__assign_no_alias<true>(this, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    }
    else
    {
      v2 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v2;
    }
  }
  return this;
}

std::basic_string<char16_t> *std::basic_string<char16_t>::__assign_no_alias<true>(std::basic_string<char16_t> *__dst, const std::basic_string<char16_t>::value_type *__src, std::basic_string<char16_t>::size_type __n_add)
{
  BOOL v5;
  std::basic_string<char16_t>::size_type v6;

  v5 = __n_add > 0xA;
  v6 = __n_add - 10;
  if (v5)
  {
    std::basic_string<char16_t>::__grow_by_and_replace(__dst, 0xAuLL, v6, *((_BYTE *)&__dst->__r_.__value_.__s + 23) & 0x7F, 0, *((_BYTE *)&__dst->__r_.__value_.__s + 23) & 0x7F, __n_add, __src);
  }
  else
  {
    *((_BYTE *)&__dst->__r_.__value_.__s + 23) = __n_add;
    if (__n_add)
      memmove(__dst, __src, 2 * __n_add);
    __dst->__r_.__value_.__s.__data_[__n_add] = 0;
  }
  return __dst;
}

std::basic_string<char16_t> *std::basic_string<char16_t>::__assign_no_alias<false>(std::basic_string<char16_t> *this, const std::basic_string<char16_t>::value_type *__src, std::basic_string<char16_t>::size_type __n_add)
{
  std::basic_string<char16_t>::size_type v5;
  void *v6;

  v5 = this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL;
  if (v5 <= __n_add)
  {
    std::basic_string<char16_t>::__grow_by_and_replace(this, v5 - 1, __n_add - v5 + 1, this->__r_.__value_.__l.__size_, 0, this->__r_.__value_.__l.__size_, __n_add, __src);
  }
  else
  {
    v6 = (void *)this->__r_.__value_.__r.__words[0];
    this->__r_.__value_.__l.__size_ = __n_add;
    if (__n_add)
      memmove(v6, __src, 2 * __n_add);
    *((_WORD *)v6 + __n_add) = 0;
  }
  return this;
}

uint64_t uaap_orchestration::grammar::Path::singletonPath@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = std::vector<std::basic_string<char16_t>>::__push_back_slow_path<std::basic_string<char16_t> const&>(a2, a1);
  a2[1] = result;
  return result;
}

void sub_1C225C9F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void uaap_orchestration::grammar::ResolutionTable::getSemanticValues(uaap_orchestration::grammar::ResolutionTable *this@<X0>, uint64_t a2@<X8>)
{
  __int128 *i;
  std::basic_string<char16_t> __p;
  uint64_t v6;
  std::basic_string<char16_t> v7;
  void **v8;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a2, (unint64_t)(float)*((unint64_t *)this + 3));
  for (i = (__int128 *)*((_QWORD *)this + 2); i; i = *(__int128 **)i)
  {
    std::pair<std::basic_string<char16_t> const,std::vector<std::basic_string<char16_t>>>::pair[abi:ne180100](&__p, i + 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::basic_string<char16_t>::__init_copy_ctor_external(&v7, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v7 = __p;
    std::__hash_table<std::basic_string<char16_t>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::allocator<std::basic_string<char16_t>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::basic_string<char16_t>>(a2, (unsigned __int16 *)&v7, (uint64_t)&v7);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
    v8 = (void **)&v6;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C225CAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table(v20);
  _Unwind_Resume(a1);
}

std::basic_string<char16_t> *std::pair<std::basic_string<char16_t> const,std::vector<std::basic_string<char16_t>>>::pair[abi:ne180100](std::basic_string<char16_t> *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(this, *(const std::basic_string<char16_t>::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)&this[1], *((__int128 **)a2 + 3), *((__int128 **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  return this;
}

void sub_1C225CBA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::basic_string<char16_t>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::allocator<std::basic_string<char16_t>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::basic_string<char16_t>>(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int16 **v12;
  unsigned __int16 *i;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = std::__string_hash<char16_t>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int16 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int16 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::basic_string<char16_t>>::operator()[abi:ne180100](i + 8, a2))
            return;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = operator new(0x28uLL);
  *v15 = 0;
  v15[1] = v8;
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  v15[4] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *v15 = *v23;
LABEL_38:
    *v23 = v15;
    goto LABEL_39;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    v24 = *(_QWORD *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1C225CDE0(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::basic_string<char16_t> const,std::vector<std::basic_string<char16_t>>>::~pair(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>(uint64_t result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;
  std::basic_string<char16_t> *v7;
  std::basic_string<char16_t> *v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[3];
  char v12;
  std::basic_string<char16_t> *v13;
  std::basic_string<char16_t> *v14;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v6 = (_QWORD *)result;
    v7 = (std::basic_string<char16_t> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(a4);
    v8 = v7;
    *v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[v9];
    v14 = v7;
    v13 = v7;
    v11[0] = v6 + 2;
    v11[1] = &v13;
    v11[2] = &v14;
    v12 = 0;
    if (a2 != a3)
    {
      do
      {
        if (*((char *)a2 + 23) < 0)
        {
          std::basic_string<char16_t>::__init_copy_ctor_external(v7, *(const std::basic_string<char16_t>::value_type **)a2, *((_QWORD *)a2 + 1));
          v7 = v14;
        }
        else
        {
          v10 = *a2;
          v7->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
          *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v10;
        }
        a2 = (__int128 *)((char *)a2 + 24);
        v14 = ++v7;
      }
      while (a2 != a3);
      v8 = v7;
    }
    v12 = 1;
    result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::basic_string<char16_t>>,std::basic_string<char16_t>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
    v6[1] = v8;
  }
  return result;
}

void sub_1C225CF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t uaap_orchestration::grammar::ResolutionTable::getSynonyms@<X0>(_QWORD *a1@<X0>, unsigned __int16 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int16 *v4;

  v4 = std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::find<std::basic_string<char16_t>>(a1, a2);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)a3, *((__int128 **)v4 + 5), *((__int128 **)v4 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v4 + 6) - *((_QWORD *)v4 + 5)) >> 3));
}

void uaap_orchestration::grammar::ResolutionTable::loadSemanticValueToSynonyms(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int *v5;
  int *Member;
  __int16 v7;
  int *v8;
  unsigned int v9;
  int v10;
  std::basic_string<char16_t>::size_type v11;
  unsigned int v12;
  int *v13;
  int *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t *v18;
  const char *v19;
  std::basic_string<char16_t>::size_type v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  std::string::size_type v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  std::runtime_error *v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::runtime_error *v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  std::runtime_error *v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  std::runtime_error *exception;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  uint64_t v58;
  std::string v60;
  std::string v61;
  std::string __p;
  std::string v63;
  std::string v64;
  unint64_t v65;
  uint64_t *v66;

  v2 = a2;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  if (*a1)
  {
    v3 = *((_QWORD *)a1 + 1);
    v58 = v3 + 24 * *a1;
    do
    {
      if (*(_WORD *)(v3 + 22) != 3)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&v61, "Error parsing JSON grammar: row.IsObject() == false [for key: ");
        v52 = std::string::append(&v61, "resolution-table");
        v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        v54 = std::string::append(&__p, " entry");
        v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        v56 = std::string::append(&v63, "]");
        v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v57;
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v64);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v4 = *(_DWORD *)v3;
      v5 = *(int **)(v3 + 8);
      Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)v3, v5, "semantic-value");
      if (&v5[12 * v4] == Member || (v7 = *((_WORD *)Member + 23), (v7 & 0x400) == 0))
      {
        v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "Error parsing JSON grammar: parsedSemanticValue != row.MemberEnd() && parsedSemanticValue->value.IsString() == false [for key: ");
        v42 = std::string::append(&__p, "semantic-value");
        v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        v44 = std::string::append(&v63, "]");
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v41, &v64);
        __cxa_throw(v41, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v10 = Member[6];
      v8 = Member + 6;
      v9 = v10;
      if ((v7 & 0x1000) != 0)
      {
        v11 = (21 - *((char *)v8 + 21));
      }
      else
      {
        v8 = (int *)*((_QWORD *)v8 + 1);
        v11 = v9;
      }
      toU16String((const char *)v8, v11, (std::basic_string<char16_t> *)&v63);
      v12 = *(_DWORD *)v3;
      v13 = *(int **)(v3 + 8);
      v14 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)v3, v13, "synonyms");
      if (&v13[12 * v12] == v14 || *((_WORD *)v14 + 23) != 4)
      {
        v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&v61, "Error parsing JSON grammar: parsedSynonyms != row.MemberEnd() && parsedSynonyms->value.IsArray() == false [for key: ");
        v47 = std::string::append(&v61, "synonyms");
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        v49 = std::string::append(&__p, "]");
        v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v46, &v64);
        __cxa_throw(v46, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v15 = v14[6];
      if ((_DWORD)v15)
      {
        v16 = (unsigned int *)*((_QWORD *)v14 + 4);
        v17 = 24 * v15;
        do
        {
          if ((*((_WORD *)v16 + 11) & 0x400) == 0)
          {
            v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::string::basic_string[abi:ne180100]<0>(&v60, "Error parsing JSON grammar: parsedSynonym.IsString() == false [for key: ");
            v35 = std::string::append(&v60, "synonyms");
            v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
            v61.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v36;
            v35->__r_.__value_.__l.__size_ = 0;
            v35->__r_.__value_.__r.__words[2] = 0;
            v35->__r_.__value_.__r.__words[0] = 0;
            v37 = std::string::append(&v61, " entry");
            v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v38;
            v37->__r_.__value_.__l.__size_ = 0;
            v37->__r_.__value_.__r.__words[2] = 0;
            v37->__r_.__value_.__r.__words[0] = 0;
            v39 = std::string::append(&__p, "]");
            v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
            v64.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v40;
            v39->__r_.__value_.__l.__size_ = 0;
            v39->__r_.__value_.__r.__words[2] = 0;
            v39->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v34, &v64);
            __cxa_throw(v34, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
          v18 = (uint64_t *)std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::piecewise_construct_t const&,std::tuple<std::basic_string<char16_t> const&>,std::tuple<>>(v2, (unsigned __int16 *)&v63, (__int128 **)&v64);
          if ((*((_WORD *)v16 + 11) & 0x1000) != 0)
            v19 = (const char *)v16;
          else
            v19 = (const char *)*((_QWORD *)v16 + 1);
          if ((*((_WORD *)v16 + 11) & 0x1000) != 0)
            v20 = (21 - *((char *)v16 + 21));
          else
            v20 = *v16;
          toU16String(v19, v20, (std::basic_string<char16_t> *)&__p);
          v21 = v18[7];
          v22 = v18[6];
          if (v22 >= v21)
          {
            v24 = v18[5];
            v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - v24) >> 3);
            v26 = v25 + 1;
            if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - v24) >> 3);
            if (2 * v27 > v26)
              v26 = 2 * v27;
            if (v27 >= 0x555555555555555)
              v28 = 0xAAAAAAAAAAAAAAALL;
            else
              v28 = v26;
            v66 = v18 + 7;
            if (v28)
              v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v28);
            else
              v29 = 0;
            v30 = v28 + 24 * v25;
            v64.__r_.__value_.__r.__words[0] = v28;
            v64.__r_.__value_.__l.__size_ = v30;
            v65 = v28 + 24 * v29;
            v31 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(_QWORD *)(v30 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)v30 = v31;
            memset(&__p, 0, sizeof(__p));
            v64.__r_.__value_.__r.__words[2] = v30 + 24;
            std::vector<std::basic_string<char16_t>>::__swap_out_circular_buffer(v18 + 5, &v64);
            v32 = v18[6];
            std::__split_buffer<std::basic_string<char16_t>>::~__split_buffer((uint64_t)&v64);
            v33 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            v18[6] = v32;
            v2 = a2;
            if (v33 < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
            v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(_QWORD *)(v22 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)v22 = v23;
            v18[6] = v22 + 24;
          }
          v16 += 6;
          v17 -= 24;
        }
        while (v17);
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      v3 += 24;
    }
    while (v3 != v58);
  }
}

void sub_1C225D518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  int v37;
  void *v38;
  uint64_t v39;
  uint64_t v41;

  if (*(char *)(v39 - 105) < 0)
    operator delete(*(void **)(v39 - 128));
  if (a37 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a23 < 0)
  {
    operator delete(a18);
    v41 = a11;
    if ((v37 & 1) == 0)
    {
LABEL_12:
      std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table(v41);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v41 = a11;
    if (!v37)
      goto LABEL_12;
  }
  __cxa_free_exception(v38);
  goto LABEL_12;
}

int *rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(unsigned int a1, int *a2, char *__s)
{
  int *v5;
  uint64_t v6;
  _QWORD v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  v8[1] = __s;
  v8[2] = 0x405000000000000;
  v8[0] = strlen(__s);
  if (a1)
  {
    v5 = &a2[12 * a1];
    v6 = 48 * a1;
    while (!rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::StringEqual<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>((unsigned int *)v8, a2))
    {
      a2 += 12;
      v6 -= 48;
      if (!v6)
        return v5;
    }
  }
  return a2;
}

char *std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::piecewise_construct_t const&,std::tuple<std::basic_string<char16_t> const&>,std::tuple<>>(uint64_t a1, unsigned __int16 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  std::basic_string<char16_t> *v16;
  __int128 *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v7 = std::__string_hash<char16_t>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::basic_string<char16_t>>::operator()[abi:ne180100]((unsigned __int16 *)v13 + 8, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x40uLL);
  v29[0] = v13;
  v29[1] = a1 + 16;
  v30 = 0;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v16 = (std::basic_string<char16_t> *)(v13 + 16);
  v17 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(v16, *(const std::basic_string<char16_t>::value_type **)v17, *((_QWORD *)v17 + 1));
  }
  else
  {
    v18 = *v17;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v17 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  *((_QWORD *)v13 + 5) = 0;
  *((_QWORD *)v13 + 6) = 0;
  *((_QWORD *)v13 + 7) = 0;
  v30 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v24);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
  {
    *(_QWORD *)v13 = *v26;
LABEL_41:
    *v26 = v13;
    goto LABEL_42;
  }
  *(_QWORD *)v13 = *v15;
  *v15 = v13;
  *(_QWORD *)(v25 + 8 * v3) = v15;
  if (*(_QWORD *)v13)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  v29[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
  return v13;
}

void sub_1C225DA74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::basic_string<char16_t> const,std::vector<std::basic_string<char16_t>>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

BOOL rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::StringEqual<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(unsigned int *a1, int *a2)
{
  unsigned int v2;
  int v3;

  if ((*((_WORD *)a1 + 11) & 0x1000) != 0)
    v2 = 21 - *((char *)a1 + 21);
  else
    v2 = *a1;
  v3 = 21 - *((char *)a2 + 21);
  if ((*((_WORD *)a2 + 11) & 0x1000) == 0)
    v3 = *a2;
  if (v2 != v3)
    return 0;
  if ((*((_WORD *)a1 + 11) & 0x1000) == 0)
    a1 = (unsigned int *)*((_QWORD *)a1 + 1);
  if ((*((_WORD *)a2 + 11) & 0x1000) == 0)
    a2 = (int *)*((_QWORD *)a2 + 1);
  return a1 == (unsigned int *)a2 || memcmp(a1, a2, v2) == 0;
}

std::basic_string<char16_t> *uaap_orchestration::grammar::ValueConstraints::getValueType@<X0>(uaap_orchestration::grammar::ValueConstraints *this@<X0>, std::basic_string<char16_t> *a2@<X8>)
{
  return std::__optional_copy_base<std::basic_string<char16_t>,false>::__optional_copy_base[abi:ne180100](a2, (__int128 *)this);
}

uint64_t uaap_orchestration::grammar::ValueConstraints::getEnumChoices@<X0>(__int128 **this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)a2, this[4], this[5], 0xAAAAAAAAAAAAAAABLL * (((char *)this[5] - (char *)this[4]) >> 3));
}

uint64_t uaap_orchestration::grammar::ValueConstraints::getOpenListChoices@<X0>(__int128 **this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)a2, this[7], this[8], 0xAAAAAAAAAAAAAAABLL * (((char *)this[8] - (char *)this[7]) >> 3));
}

_BYTE *uaap_orchestration::grammar::ValueConstraints::getResolutionTable@<X0>(uaap_orchestration::grammar::ValueConstraints *this@<X0>, _BYTE *a2@<X8>)
{
  return std::__optional_copy_base<uaap_orchestration::grammar::ResolutionTable,false>::__optional_copy_base[abi:ne180100](a2, (uint64_t)this + 80);
}

_BYTE *std::__optional_copy_base<uaap_orchestration::grammar::ResolutionTable,false>::__optional_copy_base[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    std::unordered_map<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>::unordered_map((uint64_t)a1, a2);
    a1[40] = 1;
  }
  return a1;
}

void sub_1C225DC04(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 40))
    std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int16 *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int16 **v12;
  unsigned __int16 *i;
  unint64_t v14;
  char *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(unsigned __int16 **)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 16);
    do
    {
      v7 = std::__string_hash<char16_t>::operator()[abi:ne180100]((uint64_t)(v5 + 8));
      v8 = v7;
      v9 = *(_QWORD *)(a1 + 8);
      if (v9)
      {
        v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          v2 = v7;
          if (v7 >= v9)
            v2 = v7 % v9;
        }
        else
        {
          v2 = (v9 - 1) & v7;
        }
        v12 = *(unsigned __int16 ***)(*(_QWORD *)a1 + 8 * v2);
        if (v12)
        {
          for (i = *v12; i; i = *(unsigned __int16 **)i)
          {
            v14 = *((_QWORD *)i + 1);
            if (v14 == v8)
            {
              if (std::equal_to<std::basic_string<char16_t>>::operator()[abi:ne180100](i + 8, v5 + 8))
                goto LABEL_41;
            }
            else
            {
              if (v11 > 1)
              {
                if (v14 >= v9)
                  v14 %= v9;
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v2)
                break;
            }
          }
        }
      }
      v15 = (char *)operator new(0x40uLL);
      v26[0] = v15;
      v26[1] = a1 + 16;
      v27 = 0;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = v8;
      std::pair<std::basic_string<char16_t> const,std::vector<std::basic_string<char16_t>>>::pair[abi:ne180100]((std::basic_string<char16_t> *)(v15 + 16), (__int128 *)v5 + 1);
      v27 = 1;
      v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v17 = *(float *)(a1 + 32);
      if (!v9 || (float)(v17 * (float)v9) < v16)
      {
        v18 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3)
          v18 = 1;
        v19 = v18 | (2 * v9);
        v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20)
          v21 = v20;
        else
          v21 = v19;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v21);
        v9 = *(_QWORD *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v2 = v8 % v9;
          else
            v2 = v8;
        }
        else
        {
          v2 = (v9 - 1) & v8;
        }
      }
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v23)
      {
        *(_QWORD *)v15 = *v23;
      }
      else
      {
        *(_QWORD *)v15 = *v6;
        *v6 = v15;
        *(_QWORD *)(v22 + 8 * v2) = v6;
        if (!*(_QWORD *)v15)
          goto LABEL_40;
        v24 = *(_QWORD *)(*(_QWORD *)v15 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v24 >= v9)
            v24 %= v9;
        }
        else
        {
          v24 &= v9 - 1;
        }
        v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
      }
      *v23 = v15;
LABEL_40:
      v26[0] = 0;
      ++*(_QWORD *)(a1 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26);
LABEL_41:
      v5 = *(unsigned __int16 **)v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1C225DE84(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void uaap_orchestration::grammar::ValueConstraints::loadValueType(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  unsigned int v3;
  int *v4;
  int *Member;
  __int16 v6;
  int *v7;
  unsigned int v8;
  int v9;
  std::basic_string<char16_t>::size_type v10;
  std::runtime_error *exception;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string v16;
  std::string v17;
  std::string v18;

  v3 = *(_DWORD *)a1;
  v4 = *(int **)(a1 + 8);
  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)a1, v4, "type");
  if (&v4[12 * v3] == Member)
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    v6 = *((_WORD *)Member + 23);
    if ((v6 & 0x400) == 0)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v16, "Error parsing JSON grammar: parsedValueType->value.IsString() == false [for key: ");
      v12 = std::string::append(&v16, "type");
      v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      v14 = std::string::append(&v17, "]");
      v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v18.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v18);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v9 = Member[6];
    v7 = Member + 6;
    v8 = v9;
    if ((v6 & 0x1000) != 0)
    {
      v10 = (21 - *((char *)v7 + 21));
    }
    else
    {
      v7 = (int *)*((_QWORD *)v7 + 1);
      v10 = v8;
    }
    toU16String((const char *)v7, v10, (std::basic_string<char16_t> *)&v18);
    *a2 = v18;
    a2[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

void sub_1C225DFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

void uaap_orchestration::grammar::ValueConstraints::loadEnumChoices(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  unsigned int v3;
  int *v4;
  int *Member;
  int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  std::basic_string<char16_t>::size_type v11;
  std::runtime_error *v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::runtime_error *exception;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::basic_string<char16_t> __p;
  uint64_t *v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;

  v3 = *(_DWORD *)a1;
  v4 = *(int **)(a1 + 8);
  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)a1, v4, "enum-choices");
  if (&v4[12 * v3] == Member)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    v6 = Member;
    if (*((_WORD *)Member + 23) != 4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v27, "Error parsing JSON grammar: parsedEnumChoices->value.IsArray() == false [for key: ");
      v20 = std::string::append(&v27, "enum-choices");
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      v22 = std::string::append(&v28, "]");
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v29);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    std::vector<std::basic_string<char16_t>>::reserve(a2, Member[6]);
    v7 = (unsigned int *)*((_QWORD *)v6 + 4);
    v8 = v6[6];
    v25 = a2;
    if ((_DWORD)v8)
    {
      v9 = 24 * v8;
      do
      {
        if ((*((_WORD *)v7 + 11) & 0x400) == 0)
        {
          v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(&v26, "Error parsing JSON grammar: enumChoice.IsString() == false [for key: ");
          v13 = std::string::append(&v26, "enum-choices");
          v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
          v27.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v14;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          v15 = std::string::append(&v27, " entry");
          v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
          v28.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v16;
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          v17 = std::string::append(&v28, "]");
          v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
          v29.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v18;
          v17->__r_.__value_.__l.__size_ = 0;
          v17->__r_.__value_.__r.__words[2] = 0;
          v17->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v12, &v29);
          __cxa_throw(v12, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        if ((*((_WORD *)v7 + 11) & 0x1000) != 0)
          v10 = (const char *)v7;
        else
          v10 = (const char *)*((_QWORD *)v7 + 1);
        if ((*((_WORD *)v7 + 11) & 0x1000) != 0)
          v11 = (21 - *((char *)v7 + 21));
        else
          v11 = *v7;
        toU16String(v10, v11, &__p);
        std::back_insert_iterator<std::vector<std::basic_string<char16_t>>>::operator=[abi:ne180100](&v25, (__int128 *)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v7 += 6;
        v9 -= 24;
      }
      while (v9);
    }
  }
}

void sub_1C225E2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  int v36;
  uint64_t v37;

  if (*(char *)(v37 - 41) < 0)
    operator delete(*(void **)(v37 - 64));
  if (a35 < 0)
    operator delete(__p);
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v36 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v36)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v35);
  goto LABEL_10;
}

uint64_t **std::back_insert_iterator<std::vector<std::basic_string<char16_t>>>::operator=[abi:ne180100](uint64_t **a1, __int128 *a2)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  _QWORD v16[5];

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = (unint64_t *)(*a1 + 2);
  if (v5 >= *v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *v4) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * ((uint64_t)(*v6 - *v4) >> 3) > v10)
      v10 = 0x5555555555555556 * ((uint64_t)(*v6 - *v4) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v6 - *v4) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    v16[4] = v6;
    if (v11)
      v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v11);
    else
      v12 = 0;
    v13 = v11 + 24 * v9;
    v16[0] = v11;
    v16[1] = v13;
    v16[3] = v11 + 24 * v12;
    v14 = *a2;
    *(_QWORD *)(v13 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v13 = v14;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v16[2] = v13 + 24;
    std::vector<std::basic_string<char16_t>>::__swap_out_circular_buffer(v4, v16);
    v8 = v4[1];
    std::__split_buffer<std::basic_string<char16_t>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    v7 = *a2;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v7;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v8 = v5 + 24;
  }
  v4[1] = v8;
  return a1;
}

void uaap_orchestration::grammar::ValueConstraints::loadOpenListChoices(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  unsigned int v3;
  int *v4;
  int *Member;
  int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  std::basic_string<char16_t>::size_type v11;
  std::runtime_error *v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::runtime_error *exception;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::basic_string<char16_t> __p;
  uint64_t *v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;

  v3 = *(_DWORD *)a1;
  v4 = *(int **)(a1 + 8);
  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)a1, v4, "open-list-choices");
  if (&v4[12 * v3] == Member)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    v6 = Member;
    if (*((_WORD *)Member + 23) != 4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v27, "Error parsing JSON grammar: parsedOpenListChoices->value.IsArray() == false [for key: ");
      v20 = std::string::append(&v27, "open-list-choices");
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      v22 = std::string::append(&v28, "]");
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v29);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    std::vector<std::basic_string<char16_t>>::reserve(a2, Member[6]);
    v7 = (unsigned int *)*((_QWORD *)v6 + 4);
    v8 = v6[6];
    v25 = a2;
    if ((_DWORD)v8)
    {
      v9 = 24 * v8;
      do
      {
        if ((*((_WORD *)v7 + 11) & 0x400) == 0)
        {
          v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(&v26, "Error parsing JSON grammar: openListChoice.IsString() == false [for key: ");
          v13 = std::string::append(&v26, "open-list-choices");
          v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
          v27.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v14;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          v15 = std::string::append(&v27, " entry");
          v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
          v28.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v16;
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          v17 = std::string::append(&v28, "]");
          v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
          v29.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v18;
          v17->__r_.__value_.__l.__size_ = 0;
          v17->__r_.__value_.__r.__words[2] = 0;
          v17->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v12, &v29);
          __cxa_throw(v12, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        if ((*((_WORD *)v7 + 11) & 0x1000) != 0)
          v10 = (const char *)v7;
        else
          v10 = (const char *)*((_QWORD *)v7 + 1);
        if ((*((_WORD *)v7 + 11) & 0x1000) != 0)
          v11 = (21 - *((char *)v7 + 21));
        else
          v11 = *v7;
        toU16String(v10, v11, &__p);
        std::back_insert_iterator<std::vector<std::basic_string<char16_t>>>::operator=[abi:ne180100](&v25, (__int128 *)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v7 += 6;
        v9 -= 24;
      }
      while (v9);
    }
  }
}

void sub_1C225E78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  int v36;
  uint64_t v37;

  if (*(char *)(v37 - 41) < 0)
    operator delete(*(void **)(v37 - 64));
  if (a35 < 0)
    operator delete(__p);
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v36 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v36)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v35);
  goto LABEL_10;
}

int *uaap_orchestration::grammar::ValueConstraints::loadResolutionTable@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  unsigned int v3;
  int *v4;
  int *result;
  std::runtime_error *exception;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string v11;
  std::string v12;
  std::string v13;

  v3 = *(_DWORD *)a1;
  v4 = *(int **)(a1 + 8);
  result = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)a1, v4, "resolution-table");
  if (&v4[12 * v3] == result)
  {
    *a2 = 0;
    a2[40] = 0;
  }
  else
  {
    if (*((_WORD *)result + 23) != 4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v12, "Error parsing JSON grammar: parsedResolutionTable->value.IsArray() == false [for key: ");
      v7 = std::string::append(&v12, "resolution-table");
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      v9 = std::string::append(&v13, "]");
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v11.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v11);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    uaap_orchestration::grammar::ResolutionTable::loadSemanticValueToSynonyms((unsigned int *)result + 6, (uint64_t)&v11);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table((uint64_t)a2, (uint64_t *)&v11);
    a2[40] = 1;
    return (int *)std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table((uint64_t)&v11);
  }
  return result;
}

void sub_1C225EA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a14 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

void uaap_orchestration::grammar::Rule::getLeftLabel(uaap_orchestration::grammar::Rule *this@<X0>, std::basic_string<char16_t> *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(a2, *(const std::basic_string<char16_t>::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

uint64_t uaap_orchestration::grammar::Rule::getRightLabels@<X0>(__int128 **this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<uaap_orchestration::grammar::RightLabel>::__init_with_size[abi:ne180100]<uaap_orchestration::grammar::RightLabel*,uaap_orchestration::grammar::RightLabel*>((uint64_t)a2, this[3], this[4], ((char *)this[4] - (char *)this[3]) >> 5);
}

uint64_t std::vector<uaap_orchestration::grammar::RightLabel>::__init_with_size[abi:ne180100]<uaap_orchestration::grammar::RightLabel*,uaap_orchestration::grammar::RightLabel*>(uint64_t result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;
  std::basic_string<char16_t> *v7;
  std::basic_string<char16_t>::size_type *p_size;
  uint64_t v9;
  std::basic_string<char16_t> *v10;
  __int128 v11;
  std::basic_string<char16_t> *v12;
  _QWORD v13[3];
  char v14;
  std::basic_string<char16_t> *v15;
  std::basic_string<char16_t> *v16;

  if (a4)
  {
    if (a4 >> 59)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v6 = (_QWORD *)result;
    v7 = (std::basic_string<char16_t> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(a4);
    p_size = (std::basic_string<char16_t>::size_type *)v7;
    *v6 = v7;
    v6[1] = v7;
    v6[2] = (char *)v7 + 32 * v9;
    v15 = v7;
    v16 = v7;
    v13[0] = v6 + 2;
    v13[1] = &v15;
    v13[2] = &v16;
    v14 = 0;
    if (a2 != a3)
    {
      v10 = v7;
      do
      {
        if (*((char *)a2 + 23) < 0)
        {
          std::basic_string<char16_t>::__init_copy_ctor_external(v10, *(const std::basic_string<char16_t>::value_type **)a2, *((_QWORD *)a2 + 1));
          v12 = v16;
        }
        else
        {
          v11 = *a2;
          v10->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
          v12 = v10;
        }
        LOBYTE(v10[1].__r_.__value_.__l.__data_) = *((_BYTE *)a2 + 24);
        a2 += 2;
        v10 = (std::basic_string<char16_t> *)((char *)v12 + 32);
        v16 = (std::basic_string<char16_t> *)((char *)v12 + 32);
      }
      while (a2 != a3);
      p_size = &v12[1].__r_.__value_.__l.__size_;
    }
    v14 = 1;
    result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<uaap_orchestration::grammar::RightLabel>,uaap_orchestration::grammar::RightLabel*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
    v6[1] = p_size;
  }
  return result;
}

void sub_1C225EBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 4;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<uaap_orchestration::grammar::RightLabel>,uaap_orchestration::grammar::RightLabel*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 9) < 0)
        operator delete(*(void **)(v3 - 32));
      v3 -= 32;
    }
  }
  return a1;
}

void uaap_orchestration::grammar::Rule::getRightLabelNames(uaap_orchestration::grammar::Rule *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  std::basic_string<char16_t> __p;
  uint64_t *i;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *((_QWORD *)this + 3);
  v3 = *((_QWORD *)this + 4);
  for (i = a2; v2 != v3; v2 += 32)
  {
    if (*(char *)(v2 + 23) < 0)
      std::basic_string<char16_t>::__init_copy_ctor_external(&__p, *(const std::basic_string<char16_t>::value_type **)v2, *(_QWORD *)(v2 + 8));
    else
      __p = *(std::basic_string<char16_t> *)v2;
    std::back_insert_iterator<std::vector<std::basic_string<char16_t>>>::operator=[abi:ne180100](&i, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C225ED4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

std::basic_string<char16_t> *uaap_orchestration::grammar::Rule::getValueConstraints@<X0>(uaap_orchestration::grammar::Rule *this@<X0>, std::basic_string<char16_t> *a2@<X8>)
{
  return std::__optional_copy_base<uaap_orchestration::grammar::ValueConstraints,false>::__optional_copy_base[abi:ne180100](a2, (uint64_t)this + 48);
}

std::basic_string<char16_t> *std::__optional_copy_base<uaap_orchestration::grammar::ValueConstraints,false>::__optional_copy_base[abi:ne180100](std::basic_string<char16_t> *this, uint64_t a2)
{
  LOBYTE(this->__r_.__value_.__l.__data_) = 0;
  LOBYTE(this[5].__r_.__value_.__r.__words[1]) = 0;
  if (*(_BYTE *)(a2 + 128))
  {
    std::__optional_copy_base<std::basic_string<char16_t>,false>::__optional_copy_base[abi:ne180100](this, (__int128 *)a2);
    this[1].__r_.__value_.__l.__size_ = 0;
    this[1].__r_.__value_.__r.__words[2] = 0;
    this[2].__r_.__value_.__r.__words[0] = 0;
    std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)&this[1].__r_.__value_.__l.__size_, *(__int128 **)(a2 + 32), *(__int128 **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
    this[2].__r_.__value_.__l.__size_ = 0;
    this[2].__r_.__value_.__r.__words[2] = 0;
    this[3].__r_.__value_.__r.__words[0] = 0;
    std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)&this[2].__r_.__value_.__l.__size_, *(__int128 **)(a2 + 56), *(__int128 **)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3));
    std::__optional_copy_base<uaap_orchestration::grammar::ResolutionTable,false>::__optional_copy_base[abi:ne180100](&this[3].__r_.__value_.__r.__words[1], a2 + 80);
    LOBYTE(this[5].__r_.__value_.__r.__words[1]) = 1;
  }
  return this;
}

void sub_1C225EE40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(_BYTE *)(v2 + 24))
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
  }
  std::__optional_destruct_base<uaap_orchestration::grammar::ValueConstraints,false>::~__optional_destruct_base[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void uaap_orchestration::grammar::Rule::loadLeftLabelFromJson(uint64_t a1@<X0>, std::basic_string<char16_t> *a2@<X8>)
{
  unsigned int v3;
  int *v4;
  int *Member;
  __int16 v6;
  int *v7;
  unsigned int v8;
  int v9;
  std::basic_string<char16_t>::size_type v10;
  std::runtime_error *exception;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string v16;
  std::string v17;
  std::string v18;

  v3 = *(_DWORD *)a1;
  v4 = *(int **)(a1 + 8);
  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)a1, v4, "left-label");
  if (&v4[12 * v3] == Member || (v6 = *((_WORD *)Member + 23), (v6 & 0x400) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v16, "Error parsing JSON grammar: leftLabel != jsonRule.MemberEnd() && leftLabel->value.IsString() == false [for key: ");
    v12 = std::string::append(&v16, "left-label");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v17, "]");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v18);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = Member[6];
  v7 = Member + 6;
  v8 = v9;
  if ((v6 & 0x1000) != 0)
  {
    v10 = (21 - *((char *)v7 + 21));
  }
  else
  {
    v7 = (int *)*((_QWORD *)v7 + 1);
    v10 = v8;
  }
  toU16String((const char *)v7, v10, a2);
}

void sub_1C225EFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

void uaap_orchestration::grammar::Rule::loadValueConstraintsFromJson(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3;
  int *v4;
  int *Member;
  uint64_t v6;
  __int128 v7;
  int v8;
  std::runtime_error *exception;
  std::string *v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string __p;
  char v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21[5];
  unsigned __int8 v22;
  _QWORD v23[3];
  std::string v24;

  v3 = *(_DWORD *)a1;
  v4 = *(int **)(a1 + 8);
  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)a1, v4, "value-constraints");
  if (&v4[12 * v3] == Member)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 128) = 0;
  }
  else
  {
    if (*((_WORD *)Member + 23) != 3)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v10 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v23, "Error parsing JSON grammar: parsedValueConstraints->value.IsObject() == false [for key: ");
      v11 = std::string::append(v10, "value-constraints");
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v24.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      v13 = std::string::append(&v24, "]");
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &__p);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v6 = (uint64_t)(Member + 6);
    uaap_orchestration::grammar::ValueConstraints::loadValueType((uint64_t)(Member + 6), &__p);
    uaap_orchestration::grammar::ValueConstraints::loadEnumChoices(v6, (uint64_t *)&v17);
    uaap_orchestration::grammar::ValueConstraints::loadOpenListChoices(v6, (uint64_t *)&v19);
    uaap_orchestration::grammar::ValueConstraints::loadResolutionTable(v6, v21);
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    if (v16)
    {
      *(std::string *)a2 = __p;
      memset(&__p, 0, sizeof(__p));
      *(_BYTE *)(a2 + 24) = 1;
    }
    v7 = v17;
    *(_BYTE *)(a2 + 80) = 0;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v18;
    v18 = 0;
    v17 = 0uLL;
    *(_OWORD *)(a2 + 56) = v19;
    *(_QWORD *)(a2 + 72) = v20;
    v20 = 0;
    v19 = 0uLL;
    *(_BYTE *)(a2 + 120) = 0;
    if (v22)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a2 + 80, v21);
      *(_BYTE *)(a2 + 120) = 1;
      v8 = v22;
      *(_BYTE *)(a2 + 128) = 1;
      if (v8)
        std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table((uint64_t)v21);
    }
    else
    {
      *(_BYTE *)(a2 + 128) = 1;
    }
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
    if (v16)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C225F264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;
  uint64_t v17;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v17 - 57) < 0)
    operator delete(*(void **)(v17 - 80));
  if (*(char *)(v17 - 81) < 0)
  {
    operator delete(*(void **)(v17 - 104));
    if ((v16 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v15);
  goto LABEL_10;
}

void uaap_orchestration::grammar::Rule::loadRightLabelsFromJson(uint64_t a1@<X0>, std::string **a2@<X8>)
{
  unsigned int v3;
  int *v4;
  int *Member;
  unsigned int v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  __int16 v15;
  int *v16;
  int *v17;
  const char *v18;
  std::basic_string<char16_t>::size_type v19;
  int v20;
  BOOL v21;
  unint64_t v22;
  __int128 v23;
  void **v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  std::string *v30;
  uint64_t v31;
  char *v32;
  std::string::size_type *p_size;
  __int128 v34;
  void **v35;
  int v36;
  std::runtime_error *v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  std::runtime_error *v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  std::runtime_error *v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  std::runtime_error *exception;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  std::string __p;
  BOOL v60;
  std::string v61;
  std::string v62;
  std::string v63;

  v3 = *(_DWORD *)a1;
  v4 = *(int **)(a1 + 8);
  Member = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)a1, v4, "right-labels");
  if (&v4[12 * v3] == Member || *((_WORD *)Member + 23) != 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v62, "Error parsing JSON grammar: parsedRightLabels != jsonRule.MemberEnd() && parsedRightLabels->value.IsArray() == false [for key: ");
    v55 = std::string::append(&v62, "right-labels");
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    v57 = std::string::append(&v63, "]");
    v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = Member[6];
  if (v6)
  {
    v7 = 0;
    v8 = *((_QWORD *)Member + 4);
    v9 = v8 + 24 * v6;
    do
    {
      if (*(_WORD *)(v8 + 22) != 3)
      {
        v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&v61, "Error parsing JSON grammar: rightLabelObject.IsObject() == false [for key: ");
        v48 = std::string::append(&v61, "right-labels");
        v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v62.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        v50 = std::string::append(&v62, " entry");
        v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        v52 = std::string::append(&v63, "]");
        v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v47, &__p);
        __cxa_throw(v47, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v10 = *(_DWORD *)v8;
      v11 = *(int **)(v8 + 8);
      v12 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(*(_DWORD *)v8, v11, "name");
      v13 = &v11[12 * v10];
      if (v13 == v12 || (v14 = v12, v15 = *((_WORD *)v12 + 23), (v15 & 0x400) == 0))
      {
        v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&v62, "Error parsing JSON grammar: parsedName != rightLabelObject.MemberEnd() && parsedName->value.IsString() == false [for key: ");
        v38 = std::string::append(&v62, "name");
        v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        v40 = std::string::append(&v63, "]");
        v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v37, &__p);
        __cxa_throw(v37, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v16 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember(v10, v11, "repeated");
      if (v13 == v16 || (v17 = v16, (*((_WORD *)v16 + 23) & 8) == 0))
      {
        v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&v62, "Error parsing JSON grammar: parsedRepeatedFlag != rightLabelObject.MemberEnd() && parsedRepeatedFlag->value.IsBool() == false [for key: ");
        v43 = std::string::append(&v62, "repeated");
        v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        v45 = std::string::append(&v63, "]");
        v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v42, &__p);
        __cxa_throw(v42, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if ((v15 & 0x1000) != 0)
        v18 = (const char *)(v14 + 6);
      else
        v18 = (const char *)*((_QWORD *)v14 + 4);
      if ((v15 & 0x1000) != 0)
        v19 = (21 - *((char *)v14 + 45));
      else
        v19 = v14[6];
      toU16String(v18, v19, (std::basic_string<char16_t> *)&v63);
      v20 = *((unsigned __int16 *)v17 + 23);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)&__p, (const std::basic_string<char16_t>::value_type *)v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
      else
        __p = v63;
      v21 = v20 == 10;
      v60 = v20 == 10;
      v22 = (unint64_t)a2[2];
      if ((unint64_t)v7 >= v22)
      {
        v24 = (void **)*a2;
        v25 = ((char *)v7 - (char *)*a2) >> 5;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 59)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v27 = v22 - (_QWORD)v24;
        if (v27 >> 4 > v26)
          v26 = v27 >> 4;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0)
          v28 = 0x7FFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v28);
        v30 = (std::string *)&v29[32 * v25];
        *v30 = __p;
        v32 = &v29[32 * v31];
        memset(&__p, 0, sizeof(__p));
        v30[1].__r_.__value_.__s.__data_[0] = v21;
        p_size = &v30[1].__r_.__value_.__l.__size_;
        if (v7 == v24)
        {
          *a2 = v30;
          a2[1] = (std::string *)p_size;
          a2[2] = (std::string *)v32;
        }
        else
        {
          do
          {
            v34 = *((_OWORD *)v7 - 2);
            v30[-1].__r_.__value_.__l.__size_ = (std::string::size_type)*(v7 - 2);
            *(_OWORD *)&v30[-2].__r_.__value_.__r.__words[2] = v34;
            *(v7 - 3) = 0;
            *(v7 - 2) = 0;
            *(v7 - 4) = 0;
            v30[-1].__r_.__value_.__s.__data_[16] = *((_BYTE *)v7 - 8);
            v30 = (std::string *)((char *)v30 - 32);
            v7 -= 4;
          }
          while (v7 != v24);
          v7 = (void **)*a2;
          v35 = (void **)a2[1];
          *a2 = v30;
          a2[1] = (std::string *)p_size;
          a2[2] = (std::string *)v32;
          while (v35 != v7)
          {
            if (*((char *)v35 - 9) < 0)
              operator delete(*(v35 - 4));
            v35 -= 4;
          }
        }
        if (v7)
          operator delete(v7);
        v36 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        a2[1] = (std::string *)p_size;
        if (v36 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v7 = (void **)p_size;
      }
      else
      {
        v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v7[2] = (void *)__p.__r_.__value_.__r.__words[2];
        *(_OWORD *)v7 = v23;
        *((_BYTE *)v7 + 24) = v60;
        v7 += 4;
        a2[1] = (std::string *)v7;
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      v8 += 24;
    }
    while (v8 != v9);
  }
}

void sub_1C225F880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  int v36;

  if (a14 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v36 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v36)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v35);
  goto LABEL_10;
}

void sub_1C225FA38()
{
  JUMPOUT(0x1C225FA24);
}

void **uaap_orchestration::grammar::UaapGrammar::UaapGrammar(void **a1, uint64_t a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *i;
  unsigned int v5;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  BOOL (*v11)(rapidjson::ParseResult *);
  __int128 *v12;
  __int128 *v13;
  __int128 v14;
  void *v15;
  uint64_t v16;
  void *v17;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  void **v22;
  _BYTE v23[24];
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (*(char *)(a2 + 23) >= 0)
    v3 = (unsigned __int8 *)a2;
  else
    v3 = *(unsigned __int8 **)a2;
  v21 = v3;
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument((uint64_t)&v28);
  v22 = (void **)&v28;
  *(_QWORD *)v23 = v30;
  *(_OWORD *)&v23[8] = 0u;
  v24 = 0u;
  v25 = 256;
  v27 = 2;
  LODWORD(v26) = 0;
  *((_QWORD *)&v26 + 1) = 0;
  for (i = v3; ; ++i)
  {
    v5 = *i;
    if (v5 > 0x20 || ((1 << v5) & 0x100002600) == 0)
      break;
  }
  v20 = i;
  if (!v5)
  {
    v19 = 1;
LABEL_33:
    LODWORD(v26) = v19;
    *((_QWORD *)&v26 + 1) = i - v3;
    goto LABEL_19;
  }
  rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>((uint64_t)v23, &v20, (uint64_t *)&v28, (__n128)0);
  if (!(_DWORD)v26)
  {
    for (i = v20; ; ++i)
    {
      v7 = *i;
      v8 = v7 > 0x20;
      v9 = (1 << v7) & 0x100002600;
      if (v8 || v9 == 0)
        break;
    }
    v20 = i;
    if (*i)
    {
      v19 = 2;
      v3 = v21;
      goto LABEL_33;
    }
  }
LABEL_19:
  *(_QWORD *)&v24 = *(_QWORD *)&v23[16];
  v32 = v26;
  if ((_DWORD)v26)
    v11 = 0;
  else
    v11 = rapidjson::ParseResult::IsError;
  if (v11)
  {
    v12 = v31;
    v13 = (__int128 *)((char *)v31 - 24);
    v31 = v13;
    if (v13 != &v28)
    {
      v14 = *v13;
      v29 = *((_QWORD *)v13 + 2);
      v28 = v14;
      *((_WORD *)v12 - 1) = 0;
    }
  }
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ClearStackOnExit::~ClearStackOnExit((uint64_t)&v22);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)v23);
  uaap_orchestration::grammar::UaapGrammar::loadRulesFromJson((unsigned int *)&v28, (uint64_t)v23);
  v15 = *a1;
  if (*a1)
  {
    v16 = (uint64_t)a1[1];
    v17 = *a1;
    if ((void *)v16 != v15)
    {
      do
      {
        v16 -= 184;
        std::allocator<uaap_orchestration::grammar::Rule const>::destroy[abi:ne180100](v16);
      }
      while ((void *)v16 != v15);
      v17 = *a1;
    }
    a1[1] = v15;
    operator delete(v17);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)v23;
  a1[2] = *(void **)&v23[16];
  v22 = (void **)v23;
  memset(v23, 0, sizeof(v23));
  std::vector<uaap_orchestration::grammar::Rule const>::__destroy_vector::operator()[abi:ne180100](&v22);
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)&v28);
  return a1;
}

void sub_1C225FC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)va);
  std::vector<uaap_orchestration::grammar::Rule const>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument(uint64_t a1)
{
  _QWORD *v2;

  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 80) = 1024;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v2 = (_QWORD *)operator new();
  *v2 = 0;
  v2[1] = 0x10000;
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = 0;
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = v2;
  return a1;
}

void sub_1C225FD2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy(v1 + 40);
  _Unwind_Resume(a1);
}

void uaap_orchestration::grammar::UaapGrammar::loadRulesFromJson(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::runtime_error *v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::runtime_error *v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::runtime_error *exception;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  unint64_t v41;
  uint64_t v42;
  std::basic_string<char16_t> __p;
  std::string *v44[3];
  _QWORD v45[20];

  v45[17] = *MEMORY[0x1E0C80C00];
  if (*((_WORD *)a1 + 11) != 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v39, "Error parsing JSON grammar: jsonGrammar.IsObject() == false [for key: ");
    v33 = std::string::append(&v39, "(root)");
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    v35 = std::string::append(&v40, "]");
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)&__p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  __p.__r_.__value_.__r.__words[2] = 0x405000000000000;
  __p.__r_.__value_.__l.__size_ = (std::basic_string<char16_t>::size_type)"rules";
  __p.__r_.__value_.__r.__words[0] = 5;
  v3 = *((_QWORD *)a1 + 1);
  v4 = *a1;
  if ((_DWORD)v4)
  {
    v5 = 48 * v4;
    v6 = *((_QWORD *)a1 + 1);
    while (!rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::StringEqual<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>((unsigned int *)&__p, (int *)v6))
    {
      v6 += 48;
      v5 -= 48;
      if (!v5)
      {
        v6 = v3 + 48 * v4;
        break;
      }
    }
  }
  else
  {
    v6 = *((_QWORD *)a1 + 1);
  }
  if (v6 == v3 + 48 * v4 || *(_WORD *)(v6 + 46) != 4)
  {
    v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v39, "Error parsing JSON grammar: parsedRules != jsonGrammar.MemberEnd() && parsedRules->value.IsArray() == false [for key: ");
    v28 = std::string::append(&v39, "rules");
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v40, "]");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v27, (const std::string *)&__p);
    __cxa_throw(v27, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v7 = *(unsigned int *)(v6 + 24);
  if ((_DWORD)v7)
  {
    v44[1] = (std::string *)(a2 + 16);
    __p.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)std::__allocate_at_least[abi:ne180100]<std::allocator<uaap_orchestration::grammar::Rule const>>(v7);
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0];
    v44[0] = (std::string *)(__p.__r_.__value_.__r.__words[0] + 184 * v8);
    std::vector<uaap_orchestration::grammar::Rule const>::__swap_out_circular_buffer((_QWORD *)a2, &__p);
    std::__split_buffer<uaap_orchestration::grammar::Rule const>::~__split_buffer((uint64_t)&__p);
    v9 = *(unsigned int *)(v6 + 24);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)(v6 + 32);
      v11 = 24 * v9;
      do
      {
        if (*(_WORD *)(v10 + 22) != 3)
        {
          v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(&v37, "Error parsing JSON grammar: parsedRule.IsObject() == false [for key: ");
          v21 = std::string::append(&v37, "rules");
          v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
          v38.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v22;
          v21->__r_.__value_.__l.__size_ = 0;
          v21->__r_.__value_.__r.__words[2] = 0;
          v21->__r_.__value_.__r.__words[0] = 0;
          v23 = std::string::append(&v38, " entry");
          v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
          v39.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v24;
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          v25 = std::string::append(&v39, "]");
          v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
          v40.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v26;
          v25->__r_.__value_.__l.__size_ = 0;
          v25->__r_.__value_.__r.__words[2] = 0;
          v25->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v20, &v40);
          __cxa_throw(v20, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        uaap_orchestration::grammar::Rule::loadLeftLabelFromJson(v10, &__p);
        uaap_orchestration::grammar::Rule::loadRightLabelsFromJson(v10, v44);
        uaap_orchestration::grammar::Rule::loadValueConstraintsFromJson(v10, (uint64_t)v45);
        v13 = *(_QWORD *)(a2 + 8);
        v12 = *(_QWORD *)(a2 + 16);
        if (v13 >= v12)
        {
          v15 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v13 - *(_QWORD *)a2) >> 3);
          v16 = v15 + 1;
          if (v15 + 1 > 0x1642C8590B21642)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v17 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v12 - *(_QWORD *)a2) >> 3);
          if (2 * v17 > v16)
            v16 = 2 * v17;
          if (v17 >= 0xB21642C8590B21)
            v18 = 0x1642C8590B21642;
          else
            v18 = v16;
          v42 = a2 + 16;
          if (v18)
            v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<uaap_orchestration::grammar::Rule const>>(v18);
          else
            v19 = 0;
          v40.__r_.__value_.__r.__words[0] = v18;
          v40.__r_.__value_.__l.__size_ = v18 + 184 * v15;
          v40.__r_.__value_.__r.__words[2] = v40.__r_.__value_.__l.__size_;
          v41 = v18 + 184 * v19;
          std::allocator<uaap_orchestration::grammar::Rule const>::construct[abi:ne180100]<uaap_orchestration::grammar::Rule const,uaap_orchestration::grammar::Rule const>((std::basic_string<char16_t> *)v40.__r_.__value_.__l.__size_, (__int128 *)&__p);
          v40.__r_.__value_.__r.__words[2] += 184;
          std::vector<uaap_orchestration::grammar::Rule const>::__swap_out_circular_buffer((_QWORD *)a2, &v40);
          v14 = *(_QWORD *)(a2 + 8);
          std::__split_buffer<uaap_orchestration::grammar::Rule const>::~__split_buffer((uint64_t)&v40);
        }
        else
        {
          std::allocator<uaap_orchestration::grammar::Rule const>::construct[abi:ne180100]<uaap_orchestration::grammar::Rule const,uaap_orchestration::grammar::Rule const>(*(std::basic_string<char16_t> **)(a2 + 8), (__int128 *)&__p);
          v14 = v13 + 184;
          *(_QWORD *)(a2 + 8) = v14;
        }
        *(_QWORD *)(a2 + 8) = v14;
        std::__optional_destruct_base<uaap_orchestration::grammar::ValueConstraints,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v45);
        v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
        std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 += 24;
        v11 -= 24;
      }
      while (v11);
    }
  }
}

void sub_1C22601F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;
  int v45;

  if (a44 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v45 & 1) == 0)
LABEL_10:
      _Unwind_Resume(a1);
  }
  else if (!v45)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v44);
  goto LABEL_10;
}

void std::vector<uaap_orchestration::grammar::Rule const>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 184;
        std::allocator<uaap_orchestration::grammar::Rule const>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(_QWORD **)v2;
    if (*(_QWORD *)v2)
    {
      while (v3 != *(_QWORD **)(v2 + 16))
      {
        v4 = (_QWORD *)v3[2];
        free(v3);
        *(_QWORD *)v2 = v4;
        v3 = v4;
        if (!v4)
          goto LABEL_7;
      }
      v3[1] = 0;
    }
LABEL_7:
    v5 = *(_QWORD *)(v2 + 32);
    if (v5)
      MEMORY[0x1C3BB9B44](v5, 0xC400A2AC0F1);
    MEMORY[0x1C3BB9B44](v2, 0x10A0C40AAA3F4FELL);
  }
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy(a1 + 40);
  return a1;
}

uint64_t rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy(uint64_t a1)
{
  uint64_t result;

  free(*(void **)(a1 + 16));
  result = *(_QWORD *)(a1 + 8);
  if (result)
    JUMPOUT(0x1C3BB9B44);
  return result;
}

void std::allocator<uaap_orchestration::grammar::Rule const>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  std::__optional_destruct_base<uaap_orchestration::grammar::ValueConstraints,false>::~__optional_destruct_base[abi:ne180100](a1 + 48);
  v2 = (void **)(a1 + 24);
  std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void uaap_orchestration::grammar::Rule::~Rule(void **this)
{
  void **v2;

  std::__optional_destruct_base<uaap_orchestration::grammar::ValueConstraints,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 6));
  v2 = this + 3;
  std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

std::basic_string<char16_t> *std::allocator<uaap_orchestration::grammar::Rule const>::construct[abi:ne180100]<uaap_orchestration::grammar::Rule const,uaap_orchestration::grammar::Rule const>(std::basic_string<char16_t> *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(this, *(const std::basic_string<char16_t>::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<uaap_orchestration::grammar::RightLabel>::__init_with_size[abi:ne180100]<uaap_orchestration::grammar::RightLabel*,uaap_orchestration::grammar::RightLabel*>((uint64_t)&this[1], *((__int128 **)a2 + 3), *((__int128 **)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 5);
  return std::__optional_copy_base<uaap_orchestration::grammar::ValueConstraints,false>::__optional_copy_base[abi:ne180100](this + 2, (uint64_t)(a2 + 3));
}

void sub_1C226060C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<uaap_orchestration::grammar::Rule const>>(unint64_t a1)
{
  if (a1 >= 0x1642C8590B21643)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(184 * a1);
}

_QWORD *std::vector<uaap_orchestration::grammar::Rule const>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const std::basic_string<char16_t>::value_type **v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *result;
  v3 = result[1];
  v5 = a2[1];
  if (v3 != *result)
  {
    v13 = result;
    v6 = 0;
    do
    {
      v7 = (const std::basic_string<char16_t>::value_type **)(v3 + v6 - 184);
      if (*(char *)(v3 + v6 - 161) < 0)
      {
        std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)(v5 + v6 - 184), *v7, *(_QWORD *)(v3 + v6 - 176));
      }
      else
      {
        v8 = *(_OWORD *)v7;
        *(_QWORD *)(v5 + v6 - 168) = *(_QWORD *)(v3 + v6 - 168);
        *(_OWORD *)(v5 + v6 - 184) = v8;
      }
      v9 = v5 + v6;
      *(_QWORD *)(v9 - 160) = 0;
      *(_QWORD *)(v9 - 152) = 0;
      *(_QWORD *)(v5 + v6 - 144) = 0;
      std::vector<uaap_orchestration::grammar::RightLabel>::__init_with_size[abi:ne180100]<uaap_orchestration::grammar::RightLabel*,uaap_orchestration::grammar::RightLabel*>(v5 + v6 - 160, *(__int128 **)(v3 + v6 - 160), *(__int128 **)(v3 + v6 - 152), (uint64_t)(*(_QWORD *)(v3 + v6 - 152) - *(_QWORD *)(v3 + v6 - 160)) >> 5);
      std::__optional_copy_base<uaap_orchestration::grammar::ValueConstraints,false>::__optional_copy_base[abi:ne180100]((std::basic_string<char16_t> *)(v5 + v6 - 136), v3 + v6 - 136);
      v6 -= 184;
    }
    while (v3 + v6 != v4);
    v5 += v6;
    result = v13;
  }
  a2[1] = v5;
  v10 = *result;
  *result = v5;
  a2[1] = v10;
  v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void sub_1C22607A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  while (v10 != v11)
  {
    std::allocator<uaap_orchestration::grammar::Rule const>::destroy[abi:ne180100](v10);
    v10 += 184;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<uaap_orchestration::grammar::Rule const>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 184;
    std::allocator<uaap_orchestration::grammar::Rule const>::destroy[abi:ne180100](i - 184);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL rapidjson::ParseResult::IsError(rapidjson::ParseResult *this)
{
  return *(_DWORD *)this != 0;
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ClearStackOnExit::~ClearStackOnExit(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 56);
  v2[8] = v3;
  free(v3);
  v2[7] = 0;
  v2[8] = 0;
  v2[9] = 0;
  return a1;
}

char *rapidjson::internal::Stack<rapidjson::CrtAllocator>::Resize(_QWORD *a1, size_t size)
{
  void *v4;
  uint64_t v5;
  char *result;

  v4 = (void *)a1[2];
  v5 = a1[3];
  if (size)
  {
    result = (char *)malloc_type_realloc(v4, size, 0x2B9619CuLL);
  }
  else
  {
    free(v4);
    result = 0;
  }
  a1[2] = result;
  a1[3] = &result[v5 - (_QWORD)v4];
  a1[4] = &result[size];
  return result;
}

void rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(uint64_t a1, unsigned __int8 **a2, uint64_t *a3, __n128 a4)
{
  char *v7;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  __int16 v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned __int8 *i;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  char *v23;
  int v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned __int8 *v28;
  unsigned int v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *m;
  unsigned int v34;
  uint64_t v35;
  unsigned int v37;
  int v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  double v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  double v55;
  uint64_t v56;
  int64_t v57;
  int v58;
  unsigned int v59;
  __n128 v60;
  unsigned __int8 *j;
  unsigned int v62;
  uint64_t v63;
  unsigned __int8 *v65;
  unsigned int v66;
  uint64_t v67;
  char *k;
  unsigned int v70;
  uint64_t v71;
  int v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v77;
  unsigned __int8 *n;
  unsigned int v79;
  uint64_t v80;
  int v82;
  unsigned __int8 *v83;
  unsigned int v84;
  uint64_t v85;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  double v92;

  v7 = (char *)*a2;
  v8 = (char)**a2;
  if (v8 > 109)
  {
    switch(v8)
    {
      case '{':
        *a2 = (unsigned __int8 *)(v7 + 1);
        v13 = a3[8];
        if (a3[9] - v13 <= 23)
        {
          rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
          v13 = a3[8];
        }
        a3[8] = v13 + 24;
        *(_QWORD *)(v13 + 8) = 0;
        *(_QWORD *)(v13 + 16) = 0;
        *(_QWORD *)v13 = 0;
        *(_WORD *)(v13 + 22) = 3;
        for (i = *a2; ; ++i)
        {
          v15 = *i;
          v16 = v15 > 0x20;
          v17 = (1 << v15) & 0x100002600;
          if (v16 || v17 == 0)
            break;
        }
        *a2 = i;
        if (!*(_DWORD *)(a1 + 48))
        {
          v19 = *i;
          if (v19 == 125)
          {
            *a2 = i + 1;
            v20 = a3[8];
            v21 = 3;
LABEL_65:
            *(_WORD *)(v20 - 2) = v21;
            *(_QWORD *)(v20 - 24) = 0;
            *(_QWORD *)(v20 - 16) = 0;
            return;
          }
          if (v19 != 34)
          {
LABEL_179:
            v57 = i - a2[1];
            v58 = 4;
            goto LABEL_142;
          }
          v59 = 0;
          while (1)
          {
            v60.n128_f64[0] = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(a1, a2, a3);
            if (*(_DWORD *)(a1 + 48))
              break;
            for (j = *a2; ; ++j)
            {
              v62 = *j;
              v16 = v62 > 0x20;
              v63 = (1 << v62) & 0x100002600;
              if (v16 || v63 == 0)
                break;
            }
            *a2 = j;
            if (*j != 58)
            {
              v57 = j - a2[1];
              v58 = 5;
              goto LABEL_142;
            }
            v65 = j + 1;
            *a2 = v65;
            while (1)
            {
              v66 = *v65;
              v16 = v66 > 0x20;
              v67 = (1 << v66) & 0x100002600;
              if (v16 || v67 == 0)
                break;
              ++v65;
            }
            *a2 = v65;
            rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(a1, a2, a3, v60);
            if (*(_DWORD *)(a1 + 48))
              return;
            for (k = (char *)*a2; ; ++k)
            {
              v70 = *k;
              v16 = v70 > 0x20;
              v71 = (1 << v70) & 0x100002600;
              if (v16 || v71 == 0)
                break;
            }
            *a2 = (unsigned __int8 *)k;
            ++v59;
            v73 = *k;
            if (v73 != 44)
            {
              if (v73 == 125)
              {
                *a2 = (unsigned __int8 *)(k + 1);
                rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndObject((uint64_t)a3, v59);
                return;
              }
              v57 = k - (char *)a2[1];
              v58 = 6;
              goto LABEL_142;
            }
            i = (unsigned __int8 *)(k + 1);
            *a2 = i;
            while (1)
            {
              v74 = *i;
              v16 = v74 > 0x20;
              v75 = (1 << v74) & 0x100002600;
              if (v16 || v75 == 0)
                break;
              ++i;
            }
            *a2 = i;
            if (*i != 34)
              goto LABEL_179;
          }
        }
        break;
      case 't':
        v9 = v7 + 1;
        *a2 = (unsigned __int8 *)(v7 + 1);
        if (v7[1] == 114)
        {
          v9 = v7 + 2;
          *a2 = (unsigned __int8 *)(v7 + 2);
          if (v7[2] == 117)
          {
            v9 = v7 + 3;
            *a2 = (unsigned __int8 *)(v7 + 3);
            if (v7[3] == 101)
            {
              *a2 = (unsigned __int8 *)(v7 + 4);
              v10 = a3[8];
              if (a3[9] - v10 <= 23)
              {
                rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
                v10 = a3[8];
              }
              a3[8] = v10 + 24;
              *(_QWORD *)(v10 + 8) = 0;
              *(_QWORD *)(v10 + 16) = 0;
              *(_QWORD *)v10 = 0;
              v11 = 10;
              goto LABEL_61;
            }
          }
        }
        goto LABEL_141;
      case 'n':
        v9 = v7 + 1;
        *a2 = (unsigned __int8 *)(v7 + 1);
        if (v7[1] != 117
          || (v9 = v7 + 2, *a2 = (unsigned __int8 *)(v7 + 2), v7[2] != 108)
          || (v9 = v7 + 3, *a2 = (unsigned __int8 *)(v7 + 3), v7[3] != 108))
        {
LABEL_141:
          v57 = v9 - a2[1];
          v58 = 3;
LABEL_142:
          *(_DWORD *)(a1 + 48) = v58;
          *(_QWORD *)(a1 + 56) = v57;
          return;
        }
        *a2 = (unsigned __int8 *)(v7 + 4);
        v12 = (_QWORD *)a3[8];
        if (a3[9] - (uint64_t)v12 <= 23)
        {
          rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
          v12 = (_QWORD *)a3[8];
        }
        a3[8] = (uint64_t)(v12 + 3);
        *v12 = 0;
        v12[1] = 0;
        v12[2] = 0;
        break;
      default:
        goto LABEL_33;
    }
  }
  else
  {
    if (v8 == 34)
    {
      rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(a1, a2, a3);
      return;
    }
    if (v8 != 91)
    {
      if (v8 == 102)
      {
        v9 = v7 + 1;
        *a2 = (unsigned __int8 *)(v7 + 1);
        if (v7[1] == 97)
        {
          v9 = v7 + 2;
          *a2 = (unsigned __int8 *)(v7 + 2);
          if (v7[2] == 108)
          {
            v9 = v7 + 3;
            *a2 = (unsigned __int8 *)(v7 + 3);
            if (v7[3] == 115)
            {
              v9 = v7 + 4;
              *a2 = (unsigned __int8 *)(v7 + 4);
              if (v7[4] == 101)
              {
                *a2 = (unsigned __int8 *)(v7 + 5);
                v10 = a3[8];
                if (a3[9] - v10 <= 23)
                {
                  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
                  v10 = a3[8];
                }
                a3[8] = v10 + 24;
                *(_QWORD *)(v10 + 8) = 0;
                *(_QWORD *)(v10 + 16) = 0;
                *(_QWORD *)v10 = 0;
                v11 = 9;
LABEL_61:
                *(_WORD *)(v10 + 22) = v11;
                return;
              }
            }
          }
        }
        goto LABEL_141;
      }
LABEL_33:
      v22 = **a2;
      v23 = (char *)a2[1];
      if (v22 == 45)
      {
        v25 = (unsigned __int8 *)(v7 + 1);
        v24 = v7[1];
      }
      else
      {
        v24 = **a2;
        v25 = *a2;
      }
      v26 = v24 - 48;
      if (v24 == 48)
      {
        v38 = 0;
        LODWORD(v31) = 0;
        v39 = 0;
        v40 = 0;
        v30 = 0.0;
        v27 = v25[1];
        v28 = v25 + 1;
      }
      else
      {
        if ((v24 - 49) > 8)
        {
          v54 = 3;
          goto LABEL_215;
        }
        v28 = v25 + 1;
        v27 = v25[1];
        v29 = v27 - 48;
        v30 = 0.0;
        if (v22 == 45)
        {
          if (v29 <= 9)
          {
            v31 = 0;
            while (1)
            {
              if (v26 > 0xCCCCCCB)
              {
                if (v26 != 214748364)
                  goto LABEL_46;
                if (v27 > 0x38)
                  break;
              }
              v26 = v27 + 10 * v26 - 48;
              v27 = v25[v31++ + 2];
              if (v27 - 48 >= 0xA)
              {
                v38 = 0;
                v39 = 0;
                v40 = 0;
                v28 = &v25[v31 + 1];
                goto LABEL_92;
              }
            }
            v27 = 57;
            v26 = 214748364;
LABEL_46:
            v28 = &v25[v31 + 1];
LABEL_75:
            v39 = v26;
            if (v22 == 45)
            {
              while (v39 <= 0xCCCCCCCCCCCCCCBLL || v39 == 0xCCCCCCCCCCCCCCCLL && v27 <= 0x38)
              {
                v37 = *++v28;
                v39 = v27 - 48 + 10 * v39;
                LODWORD(v31) = v31 + 1;
                v27 = v37;
                if (v37 - 48 >= 0xA)
                  goto LABEL_90;
              }
            }
            else
            {
              while (v39 <= 0x1999999999999998 || v39 == 0x1999999999999999 && v27 <= 0x35)
              {
                v41 = *++v28;
                v39 = v27 - 48 + 10 * v39;
                LODWORD(v31) = v31 + 1;
                v27 = v41;
                if (v41 - 48 >= 0xA)
                {
LABEL_90:
                  v38 = 0;
                  v30 = 0.0;
                  goto LABEL_91;
                }
              }
            }
            v30 = (double)v39;
            do
            {
              v42 = *++v28;
              v30 = (double)(int)(v27 - 48) + v30 * 10.0;
              v27 = v42;
            }
            while (v42 - 48 < 0xA);
            v38 = 1;
LABEL_91:
            v40 = 1;
            goto LABEL_92;
          }
        }
        else if (v29 <= 9)
        {
          v31 = 0;
          while (1)
          {
            if (v26 > 0x19999998)
            {
              if (v26 != 429496729)
                goto LABEL_74;
              if (v27 > 0x35)
                break;
            }
            v26 = v27 + 10 * v26 - 48;
            v27 = v25[v31++ + 2];
            if (v27 - 48 >= 0xA)
            {
              v38 = 0;
              v39 = 0;
              v40 = 0;
              v28 = &v25[v31 + 1];
              goto LABEL_92;
            }
          }
          v26 = 429496729;
LABEL_74:
          v28 = &v25[v31 + 1];
          goto LABEL_75;
        }
        v38 = 0;
        LODWORD(v31) = 0;
        v39 = 0;
        v40 = 0;
      }
LABEL_92:
      if (v27 == 46)
      {
        v27 = v28[1];
        v25 = v28 + 1;
        if (v27 - 48 > 9)
        {
          v54 = 14;
          goto LABEL_215;
        }
        v43 = 0;
        if ((v38 & 1) == 0)
        {
          if (!v40)
            v39 = v26;
          while (v27 <= 0x39 && !(v39 >> 53))
          {
            v45 = (char)*++v25;
            v44 = v45;
            v39 = v27 - 48 + 10 * v39;
            --v43;
            if (v39)
              LODWORD(v31) = v31 + 1;
            v27 = v44;
            if (v44 <= 47)
            {
              v46 = 0;
              v30 = (double)v39;
              v28 = v25;
              goto LABEL_111;
            }
          }
          v30 = (double)v39;
        }
        v28 = v25;
        while (v27 <= 0x39)
        {
          if ((int)v31 <= 16)
          {
            v30 = (double)(int)(v27 - 48) + v30 * 10.0;
            --v43;
            if (v30 > 0.0)
              LODWORD(v31) = v31 + 1;
          }
          v47 = (char)*++v28;
          v27 = v47;
          if (v47 <= 47)
            goto LABEL_110;
        }
        v38 = 1;
      }
      else
      {
        v43 = 0;
      }
      if (v27 != 101 && v27 != 69)
      {
        if ((v38 & 1) == 0)
        {
          if (v40)
          {
            if (v22 == 45)
              rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int64(a3, -(uint64_t)v39);
            else
              rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint64(a3, v39);
          }
          else if (v22 == 45)
          {
            rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int(a3, -v26);
          }
          else
          {
            rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint(a3, v26);
          }
          goto LABEL_139;
        }
LABEL_110:
        v46 = 0;
LABEL_111:
        v48 = v43 + v46;
        if (v43 + v46 > -309)
        {
          if ((v48 & 0x80000000) == 0)
          {
            v49 = v30 * rapidjson::internal::Pow10(int)::e[v48];
            goto LABEL_131;
          }
          v50 = -v48;
        }
        else
        {
          v49 = 0.0;
          if (v48 < 0xFFFFFD98)
            goto LABEL_134;
          v30 = v30 / 1.0e308;
          v50 = -308 - v48;
        }
        v49 = v30 / rapidjson::internal::Pow10(int)::e[v50];
LABEL_131:
        if (v49 > 1.79769313e308)
        {
LABEL_132:
          v54 = 13;
          v25 = (unsigned __int8 *)v7;
LABEL_133:
          *(_DWORD *)(a1 + 48) = v54;
          *(_QWORD *)(a1 + 56) = v25 - (unsigned __int8 *)v23;
LABEL_139:
          *a2 = v28;
          a2[1] = (unsigned __int8 *)v23;
          return;
        }
LABEL_134:
        v55 = -v49;
        if (v22 != 45)
          v55 = v49;
        v56 = a3[8];
        if (a3[9] - v56 <= 23)
        {
          v92 = v55;
          rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
          v56 = a3[8];
          v55 = v92;
        }
        a3[8] = v56 + 24;
        *(_QWORD *)(v56 + 8) = 0;
        *(_QWORD *)(v56 + 16) = 0;
        *(double *)v56 = v55;
        *(_WORD *)(v56 + 22) = 534;
        goto LABEL_139;
      }
      v25 = v28 + 1;
      v51 = v28[1];
      if (!v40)
        v39 = v26;
      if (!v38)
        v30 = (double)v39;
      if (v51 == 43)
      {
        v25 = v28 + 2;
        v51 = v28[2];
        if ((v51 - 48) < 0xA)
        {
          v52 = 3;
          goto LABEL_123;
        }
      }
      else if (v51 == 45)
      {
        v25 = v28 + 2;
        v87 = v28[2] - 48;
        if (v87 < 0xA)
        {
          v89 = v28[3];
          v28 += 3;
          v88 = v89;
          if ((v89 - 48) <= 9)
          {
            while (1)
            {
              v87 = v88 + 10 * v87 - 48;
              if (v87 > (v43 + 2147483639) / 10)
                break;
              v90 = *++v28;
              v88 = v90;
              if ((v90 - 48) >= 0xA)
                goto LABEL_209;
            }
            do
              v91 = *++v28;
            while ((v91 - 48) < 0xA);
          }
LABEL_209:
          v46 = -v87;
          goto LABEL_111;
        }
      }
      else if ((v51 - 48) < 0xA)
      {
        v52 = 2;
LABEL_123:
        v28 += v52;
        v46 = v51 - 48;
        while (1)
        {
          v53 = *v28;
          if ((v53 - 48) > 9)
            goto LABEL_111;
          ++v28;
          v46 = v53 + 10 * v46 - 48;
          if (v46 > 308 - v43)
            goto LABEL_132;
        }
      }
      v54 = 15;
LABEL_215:
      v28 = v25;
      goto LABEL_133;
    }
    *a2 = (unsigned __int8 *)(v7 + 1);
    v32 = a3[8];
    if (a3[9] - v32 <= 23)
    {
      rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
      v32 = a3[8];
    }
    a3[8] = v32 + 24;
    *(_QWORD *)(v32 + 8) = 0;
    *(_QWORD *)(v32 + 16) = 0;
    *(_QWORD *)v32 = 0;
    *(_WORD *)(v32 + 22) = 4;
    for (m = *a2; ; ++m)
    {
      v34 = *m;
      v16 = v34 > 0x20;
      v35 = (1 << v34) & 0x100002600;
      if (v16 || v35 == 0)
        break;
    }
    *a2 = m;
    if (!*(_DWORD *)(a1 + 48))
    {
      if (*m == 93)
      {
        *a2 = m + 1;
        v20 = a3[8];
        v21 = 4;
        goto LABEL_65;
      }
      v77 = 0;
      while (1)
      {
        rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(a1, a2, a3, a4);
        if (*(_DWORD *)(a1 + 48))
          break;
        for (n = *a2; ; ++n)
        {
          v79 = *n;
          v16 = v79 > 0x20;
          v80 = (1 << v79) & 0x100002600;
          if (v16 || v80 == 0)
            break;
        }
        ++v77;
        *a2 = n;
        v82 = *n;
        if (v82 != 44)
        {
          if (v82 == 93)
          {
            *a2 = n + 1;
            rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndArray((uint64_t)a3, v77);
            return;
          }
          v57 = n - a2[1];
          v58 = 7;
          goto LABEL_142;
        }
        v83 = n + 1;
        *a2 = v83;
        while (1)
        {
          v84 = *v83;
          v16 = v84 > 0x20;
          v85 = (1 << v84) & 0x100002600;
          if (v16 || v85 == 0)
            break;
          ++v83;
        }
        *a2 = v83;
      }
    }
  }
}

void sub_1C226146C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  v1[1] = v2;
  _Unwind_Resume(a1);
}

double rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<0u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(uint64_t a1, _OWORD *a2, _QWORD *a3)
{
  unsigned __int8 *v5;
  unsigned int v6;
  uint64_t *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t *v17;
  _BYTE *v18;
  size_t v19;
  const void *v20;
  unsigned __int8 *v21;
  int v22;
  double result;
  uint64_t v24;
  int v25[2];
  size_t __n;
  __int128 v27;
  _OWORD *v28;

  v27 = *a2;
  v5 = (unsigned __int8 *)(v27 + 1);
  v28 = a2;
  *(_QWORD *)&v27 = v27 + 1;
  *(_QWORD *)v25 = a1;
  for (LODWORD(__n) = 0; ; LODWORD(__n) = __n + 1)
  {
    while (1)
    {
      v6 = *v5;
      if (v6 != 92)
        break;
      *(_QWORD *)&v27 = v5 + 1;
      v9 = v5[1];
      LOBYTE(v6) = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseStringToStream<0u,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::FileReadStream,rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>(rapidjson::FileReadStream &,rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char> &)::escape[v9];
      if ((_BYTE)v6)
      {
        v5 += 2;
        *(_QWORD *)&v27 = v5;
        v7 = *(uint64_t **)v25;
        v8 = *(_BYTE **)(*(_QWORD *)v25 + 24);
        if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v25 + 32) - (_QWORD)v8) > 0)
          goto LABEL_6;
LABEL_9:
        rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(uint64_t **)v25);
        v8 = (_BYTE *)v7[3];
        goto LABEL_6;
      }
      v10 = (uint64_t)&v5[-*((_QWORD *)&v27 + 1)];
      if ((_DWORD)v9 != 117)
      {
        *(_DWORD *)(a1 + 48) = 10;
        *(_QWORD *)(a1 + 56) = v10;
        goto LABEL_29;
      }
      *(_QWORD *)&v27 = v5 + 2;
      v24 = (uint64_t)&v5[-*((_QWORD *)&v27 + 1)];
      v11 = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::GenericStringStream<rapidjson::UTF8<char>>>(a1, (uint64_t *)&v27, v10);
      if (*(_DWORD *)(a1 + 48))
        goto LABEL_29;
      v12 = v11;
      if (v11 >> 11 == 27)
      {
        if (v11 >> 10 > 0x36)
          goto LABEL_31;
        v13 = v27;
        if (*(_BYTE *)v27 != 92)
          goto LABEL_31;
        v14 = *(unsigned __int8 *)(v27 + 1);
        *(_QWORD *)&v27 = v27 + 1;
        if (v14 != 117)
          goto LABEL_31;
        v15 = v11;
        *(_QWORD *)&v27 = v13 + 2;
        v16 = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::GenericStringStream<rapidjson::UTF8<char>>>(a1, (uint64_t *)&v27, v24);
        if (*(_DWORD *)(a1 + 48))
          goto LABEL_29;
        if ((v16 - 57344) <= 0xFFFFFBFF)
        {
LABEL_31:
          *(_DWORD *)(a1 + 48) = 9;
          v21 = (unsigned __int8 *)v24;
LABEL_28:
          *(_QWORD *)(a1 + 56) = v21;
          goto LABEL_29;
        }
        v12 = ((v16 - 56320) | ((v15 << 10) - 56623104)) + 0x10000;
      }
      rapidjson::UTF8<char>::Encode<rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>((char *)v25, v12);
      v5 = (unsigned __int8 *)v27;
    }
    if (v6 == 34)
      break;
    if (v6 <= 0x1F)
    {
      v21 = &v5[-*((_QWORD *)&v27 + 1)];
      if (*v5)
        v22 = 12;
      else
        v22 = 11;
      *(_DWORD *)(a1 + 48) = v22;
      goto LABEL_28;
    }
    *(_QWORD *)&v27 = ++v5;
    v7 = *(uint64_t **)v25;
    v8 = *(_BYTE **)(*(_QWORD *)v25 + 24);
    if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v25 + 32) - (_QWORD)v8) <= 0)
      goto LABEL_9;
LABEL_6:
    v7[3] = (uint64_t)(v8 + 1);
    *v8 = v6;
  }
  *(_QWORD *)&v27 = v5 + 1;
  v17 = *(uint64_t **)v25;
  v18 = *(_BYTE **)(*(_QWORD *)v25 + 24);
  if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v25 + 32) - (_QWORD)v18) <= 0)
  {
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(uint64_t **)v25);
    v18 = (_BYTE *)v17[3];
  }
  v17[3] = (uint64_t)(v18 + 1);
  *v18 = 0;
  if (!*(_DWORD *)(a1 + 48))
  {
    v19 = __n;
    v20 = (const void *)(v17[3] - (__n + 1));
    v17[3] = (uint64_t)v20;
    rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::String(a3, v20, v19);
  }
LABEL_29:
  result = *(double *)&v27;
  *v28 = v27;
  return result;
}

void sub_1C22616F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, _OWORD *a14)
{
  *a14 = a13;
  _Unwind_Resume(a1);
}

uint64_t *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int64(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  __int16 v5;
  __int16 v6;

  v3 = result;
  v4 = result[8];
  if (result[9] - v4 <= 23)
  {
    result = (uint64_t *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(result + 5);
    v4 = v3[8];
  }
  v3[8] = v4 + 24;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = a2;
  *(_WORD *)(v4 + 22) = 150;
  if ((a2 & 0x8000000000000000) != 0)
  {
    if (a2 < 0xFFFFFFFF80000000)
      return result;
    v6 = 182;
    goto LABEL_11;
  }
  if (HIDWORD(a2))
    v5 = 406;
  else
    v5 = 470;
  *(_WORD *)(v4 + 22) = v5;
  if (!(a2 >> 31))
  {
    v6 = v5 | 0x20;
LABEL_11:
    *(_WORD *)(v4 + 22) = v6;
  }
  return result;
}

uint64_t *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint64(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  __int16 v5;

  v3 = result;
  v4 = result[8];
  if (result[9] - v4 <= 23)
  {
    result = (uint64_t *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(result + 5);
    v4 = v3[8];
  }
  v3[8] = v4 + 24;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = a2;
  if (a2 < 0)
    v5 = 278;
  else
    v5 = 406;
  *(_WORD *)(v4 + 22) = v5;
  if (!HIDWORD(a2))
  {
    *(_WORD *)(v4 + 22) = v5 | 0x40;
    if (!((unint64_t)a2 >> 31))
      *(_WORD *)(v4 + 22) = v5 | 0x60;
  }
  return result;
}

uint64_t *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int(uint64_t *result, int a2)
{
  uint64_t *v3;
  uint64_t v4;
  __int16 v5;

  v3 = result;
  v4 = result[8];
  if (result[9] - v4 <= 23)
  {
    result = (uint64_t *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(result + 5);
    v4 = v3[8];
  }
  v3[8] = v4 + 24;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = a2;
  if (a2 < 0)
    v5 = 182;
  else
    v5 = 502;
  *(_WORD *)(v4 + 22) = v5;
  return result;
}

uint64_t *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint(uint64_t *result, int a2)
{
  uint64_t *v3;
  uint64_t v4;
  __int16 v5;

  v3 = result;
  v4 = result[8];
  if (result[9] - v4 <= 23)
  {
    result = (uint64_t *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(result + 5);
    v4 = v3[8];
  }
  v3[8] = v4 + 24;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = a2;
  if (a2 < 0)
    v5 = 470;
  else
    v5 = 502;
  *(_WORD *)(v4 + 22) = v5;
  return result;
}

char *rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  size_t v6;

  v2 = a1[2];
  if (v2)
  {
    v3 = a1[4] - v2 + ((unint64_t)(a1[4] - v2 + 1) >> 1);
  }
  else
  {
    if (*a1)
    {
      v2 = 0;
    }
    else
    {
      v4 = operator new();
      *a1 = v4;
      a1[1] = v4;
      v2 = a1[2];
    }
    v3 = a1[5];
  }
  v5 = a1[3] - v2 + 24;
  if (v3 <= v5)
    v6 = v5;
  else
    v6 = v3;
  return rapidjson::internal::Stack<rapidjson::CrtAllocator>::Resize(a1, v6);
}

void *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndArray(uint64_t a1, unsigned int a2)
{
  _WORD *v3;
  void *result;
  uint64_t v5;
  void *v6;

  v3 = (_WORD *)(*(_QWORD *)(a1 + 64) - 24 * a2);
  *(_QWORD *)(a1 + 64) = v3;
  result = *(void **)(a1 + 24);
  *(v3 - 1) = 4;
  if (a2)
  {
    v5 = 24 * a2;
    v6 = (void *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc((uint64_t)result, v5);
    *((_QWORD *)v3 - 2) = v6;
    result = memcpy(v6, v3, v5);
  }
  else
  {
    *((_QWORD *)v3 - 2) = 0;
  }
  *((_DWORD *)v3 - 6) = a2;
  *((_DWORD *)v3 - 5) = a2;
  return result;
}

uint64_t rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    return 0;
  v3 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD **)a1;
  if (!v4 || (v5 = v4[1], v6 = v5 + v3, v5 + v3 > *v4))
  {
    if (*(_QWORD *)(a1 + 8) <= v3)
      v7 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    else
      v7 = *(_QWORD *)(a1 + 8);
    if (!*(_QWORD *)(a1 + 24))
    {
      v8 = operator new();
      *(_QWORD *)(a1 + 24) = v8;
      *(_QWORD *)(a1 + 32) = v8;
    }
    if (v7 == -24)
      return 0;
    v4 = malloc_type_malloc(v7 + 24, 0xD84A1C40uLL);
    if (!v4)
      return 0;
    v5 = 0;
    *v4 = v7;
    v4[1] = 0;
    v4[2] = *(_QWORD *)a1;
    *(_QWORD *)a1 = v4;
    v6 = v3;
  }
  v9 = (uint64_t)v4 + v5 + 24;
  v4[1] = v6;
  return v9;
}

void *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndObject(uint64_t a1, unsigned int a2)
{
  _WORD *v3;
  void *result;
  uint64_t v5;
  void *v6;

  v3 = (_WORD *)(*(_QWORD *)(a1 + 64) - 48 * a2);
  *(_QWORD *)(a1 + 64) = v3;
  result = *(void **)(a1 + 24);
  *(v3 - 1) = 3;
  if (a2)
  {
    v5 = 48 * a2;
    v6 = (void *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc((uint64_t)result, v5);
    *((_QWORD *)v3 - 2) = v6;
    result = memcpy(v6, v3, v5);
  }
  else
  {
    *((_QWORD *)v3 - 2) = 0;
  }
  *((_DWORD *)v3 - 6) = a2;
  *((_DWORD *)v3 - 5) = a2;
  return result;
}

char *rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v2 = a1[2];
  if (v2)
  {
    v3 = a1[4] - v2 + ((unint64_t)(a1[4] - v2 + 1) >> 1);
  }
  else
  {
    if (*a1)
    {
      v2 = 0;
    }
    else
    {
      v4 = operator new();
      *a1 = v4;
      a1[1] = v4;
      v2 = a1[2];
    }
    v3 = a1[5];
  }
  v5 = a1[3] - v2;
  if (v3 <= v5 + 1)
    v6 = v5 + 1;
  else
    v6 = v3;
  return rapidjson::internal::Stack<rapidjson::CrtAllocator>::Resize(a1, v6);
}

uint64_t rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::GenericStringStream<rapidjson::UTF8<char>>>(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v3 = result;
  v4 = 0;
  LODWORD(result) = 0;
  v5 = *a2;
  while (1)
  {
    v6 = *(char *)(v5 + v4);
    if ((v6 - 48) >= 0xA)
      break;
    v7 = -48;
LABEL_8:
    result = (v6 + 16 * result + v7);
    *a2 = v5 + v4++ + 1;
    if ((_DWORD)v4 == 4)
      return result;
  }
  if (*(unsigned __int8 *)(v5 + v4) - 65 < 6)
  {
    v7 = -55;
    goto LABEL_8;
  }
  if (*(unsigned __int8 *)(v5 + v4) - 97 < 6)
  {
    v7 = -87;
    goto LABEL_8;
  }
  result = 0;
  *(_DWORD *)(v3 + 48) = 8;
  *(_QWORD *)(v3 + 56) = a3;
  return result;
}

char *rapidjson::UTF8<char>::Encode<rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>(char *result, unsigned int a2)
{
  char *v3;
  uint64_t v4;
  _BYTE *v5;
  _DWORD *v6;
  unsigned int v7;
  uint64_t *v8;
  _BYTE *v9;
  uint64_t *v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  _BYTE *v16;
  char v17;
  uint64_t *v18;
  _BYTE *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  _BYTE *v23;
  unsigned int v24;
  uint64_t *v25;
  _BYTE *v26;
  uint64_t *v27;
  _BYTE *v28;

  v3 = result;
  if (a2 <= 0x7F)
  {
    v4 = *(_QWORD *)result;
    v5 = *(_BYTE **)(*(_QWORD *)result + 24);
    if ((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 32) - (_QWORD)v5) <= 0)
    {
      result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(uint64_t **)result);
      v5 = *(_BYTE **)(v4 + 24);
    }
    *(_QWORD *)(v4 + 24) = v5 + 1;
    *v5 = a2;
    v6 = v3 + 8;
    goto LABEL_27;
  }
  if (a2 <= 0x7FF)
  {
    v7 = (a2 >> 6) | 0xFFFFFFC0;
    v8 = *(uint64_t **)result;
    v9 = *(_BYTE **)(*(_QWORD *)result + 24);
    if ((uint64_t)(*(_QWORD *)(*(_QWORD *)result + 32) - (_QWORD)v9) <= 0)
    {
      result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(uint64_t **)result);
      v9 = (_BYTE *)v8[3];
    }
    v8[3] = (uint64_t)(v9 + 1);
    *v9 = v7;
    v6 = v3 + 8;
    ++*((_DWORD *)v3 + 2);
LABEL_24:
    v27 = *(uint64_t **)v3;
    v28 = (_BYTE *)v27[3];
    if (v27[4] - (uint64_t)v28 <= 0)
    {
      result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v27);
      v28 = (_BYTE *)v27[3];
    }
    v27[3] = (uint64_t)(v28 + 1);
    *v28 = a2 & 0x3F | 0x80;
    goto LABEL_27;
  }
  v10 = *(uint64_t **)result;
  v11 = *(_BYTE **)(*(_QWORD *)result + 24);
  v12 = *(_QWORD *)(*(_QWORD *)result + 32) - (_QWORD)v11;
  if (HIWORD(a2))
  {
    v20 = (a2 >> 18) | 0xFFFFFFF0;
    if (v12 <= 0)
    {
      result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(uint64_t **)result);
      v11 = (_BYTE *)v10[3];
    }
    v10[3] = (uint64_t)(v11 + 1);
    *v11 = v20;
    v6 = v3 + 8;
    ++*((_DWORD *)v3 + 2);
    v21 = (a2 >> 12) & 0x3F | 0xFFFFFF80;
    v22 = *(uint64_t **)v3;
    v23 = *(_BYTE **)(*(_QWORD *)v3 + 24);
    if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 32) - (_QWORD)v23) <= 0)
    {
      result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(uint64_t **)v3);
      v21 = (a2 >> 12) & 0x3F | 0xFFFFFF80;
      v23 = (_BYTE *)v22[3];
    }
    v22[3] = (uint64_t)(v23 + 1);
    *v23 = v21;
    ++*((_DWORD *)v3 + 2);
    v24 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
    v25 = *(uint64_t **)v3;
    v26 = *(_BYTE **)(*(_QWORD *)v3 + 24);
    if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 32) - (_QWORD)v26) <= 0)
    {
      result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(uint64_t **)v3);
      v24 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
      v26 = (_BYTE *)v25[3];
    }
    v25[3] = (uint64_t)(v26 + 1);
    *v26 = v24;
    ++*((_DWORD *)v3 + 2);
    goto LABEL_24;
  }
  v13 = (a2 >> 12) | 0xFFFFFFE0;
  if (v12 <= 0)
  {
    result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(uint64_t **)result);
    v11 = (_BYTE *)v10[3];
  }
  v10[3] = (uint64_t)(v11 + 1);
  *v11 = v13;
  v6 = v3 + 8;
  ++*((_DWORD *)v3 + 2);
  v14 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
  v15 = *(uint64_t **)v3;
  v16 = *(_BYTE **)(*(_QWORD *)v3 + 24);
  if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v3 + 32) - (_QWORD)v16) <= 0)
  {
    result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(uint64_t **)v3);
    v14 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
    v16 = (_BYTE *)v15[3];
  }
  v15[3] = (uint64_t)(v16 + 1);
  *v16 = v14;
  ++*((_DWORD *)v3 + 2);
  v17 = a2 & 0x3F | 0x80;
  v18 = *(uint64_t **)v3;
  v19 = (_BYTE *)v18[3];
  if (v18[4] - (uint64_t)v19 <= 0)
  {
    result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v18);
    v17 = a2 & 0x3F | 0x80;
    v19 = (_BYTE *)v18[3];
  }
  v18[3] = (uint64_t)(v19 + 1);
  *v19 = v17;
LABEL_27:
  ++*v6;
  return result;
}

void *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::String(_QWORD *a1, const void *a2, size_t __n)
{
  unsigned int v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  void *result;

  v3 = __n;
  v6 = (_QWORD *)a1[8];
  if ((uint64_t)(a1[9] - (_QWORD)v6) <= 23)
  {
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a1 + 5);
    v6 = (_QWORD *)a1[8];
  }
  a1[8] = v6 + 3;
  v7 = a1[3];
  *v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  if (v3 > 0x15)
  {
    *((_WORD *)v6 + 11) = 3077;
    *(_DWORD *)v6 = v3;
    v8 = rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(v7, v3 + 1);
    v6[1] = v8;
    v6 = (_QWORD *)v8;
  }
  else
  {
    *((_WORD *)v6 + 11) = 7173;
    *((_BYTE *)v6 + 21) = 21 - v3;
  }
  if (a2)
    v9 = a2;
  else
    v9 = &rapidjson::GenericStringRef<char>::emptyString;
  result = memcpy(v6, v9, v3);
  *((_BYTE *)v6 + v3) = 0;
  return result;
}

uint64_t uaap_orchestration::grammar::UaapGrammar::fromFile(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  FILE *v5;
  FILE *v6;
  std::string *v7;
  unsigned int v8;
  unsigned int v10;
  BOOL (*v13)(rapidjson::ParseResult *);
  std::string *v14;
  std::string *v15;
  __int128 v16;
  int v17;
  int v19;
  std::runtime_error *exception;
  int v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::runtime_error *v26;
  int v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  std::string v34;
  FILE *v35;
  std::string *v36;
  uint64_t v37;
  uint64_t v38;
  std::string *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  std::string v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  std::string v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  std::string v52;
  uint64_t v53;

  v1 = MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  v4 = v3;
  v53 = *MEMORY[0x1E0C80C00];
  if (*(char *)(v1 + 23) < 0)
    v1 = *(_QWORD *)v1;
  v5 = fopen((const char *)v1, "r");
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v48, "Could not open grammar file for reading: ");
    v21 = *(char *)(v2 + 23);
    if (v21 >= 0)
      v22 = (const std::string::value_type *)v2;
    else
      v22 = *(const std::string::value_type **)v2;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(v2 + 23);
    else
      v23 = *(_QWORD *)(v2 + 8);
    v24 = std::string::append(&v48, v22, v23);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v52);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = v5;
  v35 = v5;
  v36 = &v52;
  v37 = 0x10000;
  v38 = 0;
  v40 = 0;
  v41 = 0;
  v39 = &v52;
  v42 = 0;
  rapidjson::FileReadStream::Read((size_t)&v35);
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument((uint64_t)&v48);
  v43.__r_.__value_.__r.__words[0] = v49;
  *(_OWORD *)&v43.__r_.__value_.__r.__words[1] = 0u;
  v44 = 0u;
  v45 = 256;
  v47 = 2;
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  LODWORD(v46) = 0;
  *((_QWORD *)&v46 + 1) = 0;
  while (1)
  {
    v7 = v39;
    v8 = v39->__r_.__value_.__s.__data_[0];
    if (v8 > 0x20 || ((1 << v8) & 0x100002600) == 0)
      break;
    rapidjson::FileReadStream::Read((size_t)&v35);
  }
  if (!(_DWORD)v46)
  {
    if (v39->__r_.__value_.__s.__data_[0])
    {
      rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::FileReadStream,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>((uint64_t *)&v43, (rapidjson::FileReadStream *)&v35, (uint64_t *)&v48);
      if ((_DWORD)v46)
        goto LABEL_22;
      while (1)
      {
        v7 = v39;
        v10 = v39->__r_.__value_.__s.__data_[0];
        if (v10 > 0x20 || ((1 << v10) & 0x100002600) == 0)
          break;
        rapidjson::FileReadStream::Read((size_t)&v35);
      }
      if (!v39->__r_.__value_.__s.__data_[0] || (_DWORD)v46 != 0)
        goto LABEL_22;
      v19 = 2;
    }
    else
    {
      v19 = 1;
    }
    LODWORD(v46) = v19;
    *((_QWORD *)&v46 + 1) = (char *)v7 + v41 - (char *)v36;
  }
LABEL_22:
  *(_QWORD *)&v44 = *((_QWORD *)&v43.__r_.__value_.__l + 2);
  v51 = v46;
  if ((_DWORD)v46)
    v13 = 0;
  else
    v13 = rapidjson::ParseResult::IsError;
  if (v13)
  {
    v14 = v50;
    v15 = v50 - 1;
    v50 = v15;
    if (v15 != &v48)
    {
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v16;
      HIWORD(v14[-1].__r_.__value_.__r.__words[2]) = 0;
    }
  }
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ClearStackOnExit::~ClearStackOnExit((uint64_t)&v34);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)&v43);
  v17 = ferror(v6);
  fclose(v6);
  if (v17)
  {
    v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v34, "Grammar file is in error state after reading: ");
    v27 = *(char *)(v2 + 23);
    if (v27 >= 0)
      v28 = (const std::string::value_type *)v2;
    else
      v28 = *(const std::string::value_type **)v2;
    if (v27 >= 0)
      v29 = *(unsigned __int8 *)(v2 + 23);
    else
      v29 = *(_QWORD *)(v2 + 8);
    v30 = std::string::append(&v34, v28, v29);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v26, &v43);
    __cxa_throw(v26, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  uaap_orchestration::grammar::UaapGrammar::loadRulesFromJson((unsigned int *)&v48, (uint64_t)&v32);
  *(_OWORD *)v4 = v32;
  *(_QWORD *)(v4 + 16) = v33;
  v33 = 0;
  v32 = 0uLL;
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
  std::vector<uaap_orchestration::grammar::Rule const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)&v48);
}

void sub_1C2262348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  void *v61;
  int v62;

  if (a31 < 0)
    operator delete(__p);
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v62 & 1) == 0)
    {
LABEL_8:
      rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)&a39);
      _Unwind_Resume(a1);
    }
  }
  else if (!v62)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v61);
  goto LABEL_8;
}

size_t rapidjson::FileReadStream::Read(size_t this)
{
  size_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = this;
  v2 = *(_QWORD *)(this + 32);
  if (v2 >= *(_QWORD *)(this + 24))
  {
    if (!*(_BYTE *)(this + 56))
    {
      *(_QWORD *)(this + 48) += *(_QWORD *)(this + 40);
      this = fread(*(void **)(this + 8), 1uLL, *(_QWORD *)(this + 16), *(FILE **)this);
      v3 = *(_QWORD *)(v1 + 8);
      v4 = *(_QWORD *)(v1 + 16);
      *(_QWORD *)(v1 + 24) = v3 + this - 1;
      *(_QWORD *)(v1 + 32) = v3;
      *(_QWORD *)(v1 + 40) = this;
      if (this < v4)
      {
        *(_BYTE *)(v3 + this) = 0;
        ++*(_QWORD *)(v1 + 24);
        *(_BYTE *)(v1 + 56) = 1;
      }
    }
  }
  else
  {
    *(_QWORD *)(this + 32) = v2 + 1;
  }
  return this;
}

uint64_t *rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::FileReadStream,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(uint64_t *result, rapidjson::FileReadStream *a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  __int16 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  double v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  __int16 v31;
  unint64_t v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  unsigned __int8 *v36;
  int v37;
  unint64_t v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  double v48;
  double v49;
  unsigned __int8 *v50;
  int v51;
  unsigned int v52;
  unsigned __int8 *v53;
  unsigned int v54;
  unsigned int v56;
  BOOL v57;
  uint64_t v58;
  unsigned int v60;
  unsigned __int8 *v61;
  unsigned int v62;
  unsigned int v64;
  uint64_t v65;
  unsigned __int8 *v67;
  unsigned int v68;
  unsigned int v70;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;

  v5 = (uint64_t)result;
  v6 = (unsigned __int8 *)*((_QWORD *)a2 + 4);
  v7 = (char)*v6;
  if (v7 > 109)
  {
    if (v7 != 123)
    {
      if (v7 == 116)
      {
        result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
        v8 = (_BYTE *)*((_QWORD *)a2 + 4);
        if (*v8 == 114)
        {
          result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
          v8 = (_BYTE *)*((_QWORD *)a2 + 4);
          if (*v8 == 117)
          {
            result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
            v8 = (_BYTE *)*((_QWORD *)a2 + 4);
            if (*v8 == 101)
            {
              result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
              v9 = a3[8];
              if (a3[9] - v9 <= 23)
              {
                result = (uint64_t *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
                v9 = a3[8];
              }
              a3[8] = v9 + 24;
              *(_QWORD *)(v9 + 8) = 0;
              *(_QWORD *)(v9 + 16) = 0;
              *(_QWORD *)v9 = 0;
              v10 = 10;
              goto LABEL_140;
            }
          }
        }
      }
      else
      {
        if (v7 != 110)
          goto LABEL_44;
        result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
        v8 = (_BYTE *)*((_QWORD *)a2 + 4);
        if (*v8 == 117)
        {
          result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
          v8 = (_BYTE *)*((_QWORD *)a2 + 4);
          if (*v8 == 108)
          {
            result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
            v8 = (_BYTE *)*((_QWORD *)a2 + 4);
            if (*v8 == 108)
            {
              result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
              v11 = (_QWORD *)a3[8];
              if (a3[9] - (uint64_t)v11 <= 23)
              {
                result = (uint64_t *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
                v11 = (_QWORD *)a3[8];
              }
              a3[8] = (uint64_t)(v11 + 3);
              *v11 = 0;
              v11[1] = 0;
              v11[2] = 0;
              return result;
            }
          }
        }
      }
LABEL_143:
      v50 = &v8[*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 1)];
      v51 = 3;
LABEL_144:
      *(_DWORD *)(v5 + 48) = v51;
      *(_QWORD *)(v5 + 56) = v50;
      return result;
    }
    result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
    v15 = a3[8];
    if (a3[9] - v15 <= 23)
    {
      result = (uint64_t *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
      v15 = a3[8];
    }
    a3[8] = v15 + 24;
    *(_QWORD *)(v15 + 8) = 0;
    *(_QWORD *)(v15 + 16) = 0;
    *(_QWORD *)v15 = 0;
    *(_WORD *)(v15 + 22) = 3;
    while (1)
    {
      v16 = (unsigned __int8 *)*((_QWORD *)a2 + 4);
      v17 = *v16;
      if (v17 > 0x20 || ((1 << v17) & 0x100002600) == 0)
        break;
      result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
    }
    if (*(_DWORD *)(v5 + 48))
      return result;
    if (v17 != 125)
    {
      if (v17 != 34)
      {
LABEL_198:
        v50 = &v16[*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 1)];
        v51 = 4;
        goto LABEL_144;
      }
      v60 = 0;
      while (1)
      {
        result = (uint64_t *)rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<0u,rapidjson::FileReadStream,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(v5, a2, a3);
        if (*(_DWORD *)(v5 + 48))
          return result;
        while (1)
        {
          v61 = (unsigned __int8 *)*((_QWORD *)a2 + 4);
          v62 = *v61;
          if (v62 > 0x20 || ((1 << v62) & 0x100002600) == 0)
            break;
          result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
        }
        if (*(_DWORD *)(v5 + 48))
          return result;
        if (v62 != 58)
        {
          v50 = &v61[*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 1)];
          v51 = 5;
          goto LABEL_144;
        }
        do
        {
          result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
          v64 = **((unsigned __int8 **)a2 + 4);
          v57 = v64 > 0x20;
          v65 = (1 << v64) & 0x100002600;
        }
        while (!v57 && v65 != 0);
        if (*(_DWORD *)(v5 + 48))
          return result;
        result = (uint64_t *)rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::FileReadStream,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(v5, a2, a3);
        if (*(_DWORD *)(v5 + 48))
          return result;
        while (1)
        {
          v67 = (unsigned __int8 *)*((_QWORD *)a2 + 4);
          v68 = *v67;
          if (v68 > 0x20 || ((1 << v68) & 0x100002600) == 0)
            break;
          result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
        }
        if (*(_DWORD *)(v5 + 48))
          return result;
        v68 = (char)v68;
        ++v60;
        if ((char)v68 != 44)
        {
          if (v68 == 125)
          {
            rapidjson::FileReadStream::Read((size_t)a2);
            return (uint64_t *)rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndObject((uint64_t)a3, v60);
          }
          v50 = &v67[*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 1)];
          v51 = 6;
          goto LABEL_144;
        }
        do
        {
          result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
          v16 = (unsigned __int8 *)*((_QWORD *)a2 + 4);
          v70 = *v16;
        }
        while (v70 <= 0x20 && ((1 << v70) & 0x100002600) != 0);
        if (*(_DWORD *)(v5 + 48))
          return result;
        if (v70 != 34)
          goto LABEL_198;
      }
    }
    result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
    v30 = a3[8];
    v31 = 3;
LABEL_63:
    *(_WORD *)(v30 - 2) = v31;
    *(_QWORD *)(v30 - 24) = 0;
    *(_QWORD *)(v30 - 16) = 0;
    return result;
  }
  switch(v7)
  {
    case '"':
      return (uint64_t *)rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<0u,rapidjson::FileReadStream,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>((uint64_t)result, a2, a3);
    case '[':
      result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
      v12 = a3[8];
      if (a3[9] - v12 <= 23)
      {
        result = (uint64_t *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
        v12 = a3[8];
      }
      a3[8] = v12 + 24;
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)v12 = 0;
      *(_WORD *)(v12 + 22) = 4;
      while (1)
      {
        v13 = **((unsigned __int8 **)a2 + 4);
        if (v13 > 0x20 || ((1 << v13) & 0x100002600) == 0)
          break;
        result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
      }
      if (*(_DWORD *)(v5 + 48))
        return result;
      if (v13 != 93)
      {
        v52 = 0;
        while (1)
        {
          result = (uint64_t *)rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<0u,rapidjson::FileReadStream,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(v5, a2, a3);
          if (*(_DWORD *)(v5 + 48))
            return result;
          while (1)
          {
            v53 = (unsigned __int8 *)*((_QWORD *)a2 + 4);
            v54 = *v53;
            if (v54 > 0x20 || ((1 << v54) & 0x100002600) == 0)
              break;
            result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
          }
          if (*(_DWORD *)(v5 + 48))
            return result;
          ++v52;
          if (v54 != 44)
          {
            if (v54 == 93)
            {
              rapidjson::FileReadStream::Read((size_t)a2);
              return (uint64_t *)rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndArray((uint64_t)a3, v52);
            }
            v50 = &v53[*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 1)];
            v51 = 7;
            goto LABEL_144;
          }
          do
          {
            result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
            v56 = **((unsigned __int8 **)a2 + 4);
            v57 = v56 > 0x20;
            v58 = (1 << v56) & 0x100002600;
          }
          while (!v57 && v58 != 0);
          if (*(_DWORD *)(v5 + 48))
            return result;
        }
      }
      result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
      v30 = a3[8];
      v31 = 4;
      goto LABEL_63;
    case 'f':
      result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
      v8 = (_BYTE *)*((_QWORD *)a2 + 4);
      if (*v8 == 97)
      {
        result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
        v8 = (_BYTE *)*((_QWORD *)a2 + 4);
        if (*v8 == 108)
        {
          result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
          v8 = (_BYTE *)*((_QWORD *)a2 + 4);
          if (*v8 == 115)
          {
            result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
            v8 = (_BYTE *)*((_QWORD *)a2 + 4);
            if (*v8 == 101)
            {
              result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
              v9 = a3[8];
              if (a3[9] - v9 <= 23)
              {
                result = (uint64_t *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
                v9 = a3[8];
              }
              a3[8] = v9 + 24;
              *(_QWORD *)(v9 + 8) = 0;
              *(_QWORD *)(v9 + 16) = 0;
              *(_QWORD *)v9 = 0;
              v10 = 9;
LABEL_140:
              *(_WORD *)(v9 + 22) = v10;
              return result;
            }
          }
        }
      }
      goto LABEL_143;
  }
LABEL_44:
  v19 = *v6;
  v20 = *((_QWORD *)a2 + 6);
  v21 = *((_QWORD *)a2 + 1);
  if (v19 == 45)
  {
    result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
    v22 = (unsigned __int8 *)*((_QWORD *)a2 + 4);
    v23 = *v22;
  }
  else
  {
    v23 = *v6;
    v22 = (unsigned __int8 *)*((_QWORD *)a2 + 4);
  }
  v24 = v23 - 48;
  v73 = v21;
  v74 = v5;
  v72 = v19;
  if (v23 == 48)
  {
    result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
    v33 = 0;
    v28 = 0;
    v32 = 0;
    v75 = 0;
    v25 = **((unsigned __int8 **)a2 + 4);
    v27 = 0.0;
    goto LABEL_88;
  }
  if ((v23 - 49) > 8)
  {
    v36 = &v22[*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 1)];
    v45 = 3;
    goto LABEL_133;
  }
  result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
  v25 = **((unsigned __int8 **)a2 + 4);
  v26 = v25 - 48;
  v27 = 0.0;
  if (v19 != 45)
  {
    if (v26 <= 9)
    {
      v28 = 0;
      v29 = 429496729;
      while (1)
      {
        if (v24 > 0x19999998)
        {
          if (v24 != 429496729)
          {
LABEL_142:
            v29 = v24;
            goto LABEL_71;
          }
          if (v25 > 0x35)
            goto LABEL_71;
        }
        result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
        v24 = v25 + 10 * v24 - 48;
        ++v28;
        v25 = **((unsigned __int8 **)a2 + 4);
        if (v25 - 48 >= 0xA)
        {
LABEL_78:
          v33 = 0;
          v32 = 0;
          v75 = 0;
          goto LABEL_88;
        }
      }
    }
    goto LABEL_146;
  }
  if (v26 > 9)
  {
LABEL_146:
    v33 = 0;
    v28 = 0;
    v32 = 0;
    v75 = 0;
    goto LABEL_88;
  }
  v28 = 0;
  v29 = 214748364;
  while (1)
  {
    if (v24 > 0xCCCCCCB)
    {
      if (v24 != 214748364)
        goto LABEL_142;
      if (v25 > 0x38)
        break;
    }
    result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
    v24 = v25 + 10 * v24 - 48;
    ++v28;
    v25 = **((unsigned __int8 **)a2 + 4);
    if (v25 - 48 >= 0xA)
      goto LABEL_78;
  }
  v25 = 57;
LABEL_71:
  v32 = v29;
  if (v19 == 45)
  {
    while (v32 <= 0xCCCCCCCCCCCCCCBLL || v32 == 0xCCCCCCCCCCCCCCCLL && v25 <= 0x38)
    {
      result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
      v32 = v25 - 48 + 10 * v32;
      ++v28;
      v25 = **((unsigned __int8 **)a2 + 4);
      if (v25 - 48 >= 0xA)
        goto LABEL_87;
    }
  }
  else
  {
    while (v32 <= 0x1999999999999998 || v32 == 0x1999999999999999 && v25 <= 0x35)
    {
      result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
      v32 = v25 - 48 + 10 * v32;
      ++v28;
      v25 = **((unsigned __int8 **)a2 + 4);
      if (v25 - 48 >= 0xA)
      {
LABEL_87:
        v33 = 0;
        v27 = 0.0;
        v75 = 1;
        v24 = v29;
        goto LABEL_88;
      }
    }
  }
  v27 = (double)v32;
  do
  {
    result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
    v27 = (double)(int)(v25 - 48) + v27 * 10.0;
    v25 = **((unsigned __int8 **)a2 + 4);
  }
  while (v25 - 48 < 0xA);
  v33 = 1;
  v24 = v29;
  v75 = 1;
LABEL_88:
  if (v25 == 46)
  {
    result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
    v34 = (unsigned __int8 *)*((_QWORD *)a2 + 4);
    v25 = *v34;
    if (v25 - 48 >= 0xA)
    {
      v36 = &v34[*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 1)];
      v45 = 14;
      goto LABEL_120;
    }
    v35 = 0;
    if ((v33 & 1) != 0)
      goto LABEL_223;
    if (!v75)
      v32 = v24;
    do
    {
      if (v25 > 0x39 || v32 >> 53)
        break;
      result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
      v32 = v25 - 48 + 10 * v32;
      --v35;
      if (v32)
        ++v28;
      v25 = **((unsigned __int8 **)a2 + 4);
    }
    while (**((char **)a2 + 4) > 47);
    v27 = (double)v32;
    if (v25 - 48 <= 9)
    {
LABEL_223:
      do
      {
        result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
        if (v28 <= 16)
        {
          v27 = (double)(int)(v25 - 48) + v27 * 10.0;
          --v35;
          if (v27 > 0.0)
            ++v28;
        }
        v25 = **((unsigned __int8 **)a2 + 4);
      }
      while (v25 - 48 < 0xA);
    }
    v33 = 1;
  }
  else
  {
    v35 = 0;
  }
  v36 = &v6[v20 - v73];
  if (v25 == 101 || v25 == 69)
  {
    result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
    v37 = 0;
    v38 = v24;
    if (v75)
      v38 = v32;
    if (!v33)
      v27 = (double)v38;
    v39 = (unsigned __int8 *)*((_QWORD *)a2 + 4);
    v40 = *v39;
    if (v40 != 43)
    {
      if (v40 != 45)
        goto LABEL_111;
      v37 = 1;
    }
    result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
    v39 = (unsigned __int8 *)*((_QWORD *)a2 + 4);
    v40 = *v39;
LABEL_111:
    v41 = v40 - 48;
    if ((v40 - 48) <= 9)
    {
      result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
      if (v37)
      {
        v42 = **((unsigned __int8 **)a2 + 4);
        if ((v42 - 48) <= 9)
        {
          while (1)
          {
            result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
            v41 = v42 + 10 * v41 - 48;
            v42 = **((unsigned __int8 **)a2 + 4);
            v43 = v42 - 48;
            if (v41 > (v35 + 2147483639) / 10)
              break;
            if (v43 >= 0xA)
              goto LABEL_122;
          }
          if (v43 <= 9)
          {
            do
              result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
            while (**((unsigned __int8 **)a2 + 4) - 48 < 0xA);
          }
        }
      }
      else
      {
        while (1)
        {
          v44 = **((unsigned __int8 **)a2 + 4);
          if ((v44 - 48) > 9)
            break;
          result = (uint64_t *)rapidjson::FileReadStream::Read((size_t)a2);
          v41 = v44 + 10 * v41 - 48;
          if (v41 > 308 - v35)
          {
            v45 = 13;
            goto LABEL_120;
          }
        }
      }
LABEL_122:
      if (v37)
        v46 = -v41;
      else
        v46 = v41;
LABEL_125:
      v47 = v46 + v35;
      v5 = v74;
      if (v47 > -309)
      {
        if (v47 < 0)
          v48 = v27 / rapidjson::internal::Pow10(int)::e[-v47];
        else
          v48 = v27 * rapidjson::internal::Pow10(int)::e[v47];
      }
      else
      {
        v48 = 0.0;
        if (v47 < 0xFFFFFD98)
          goto LABEL_134;
        v48 = v27 / 1.0e308 / rapidjson::internal::Pow10(int)::e[-308 - v47];
      }
      if (v48 > 1.79769313e308)
      {
        v45 = 13;
        goto LABEL_133;
      }
LABEL_134:
      if (v72 == 45)
        v49 = -v48;
      else
        v49 = v48;
      v9 = a3[8];
      if (a3[9] - v9 <= 23)
      {
        result = (uint64_t *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
        v9 = a3[8];
      }
      a3[8] = v9 + 24;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(double *)v9 = v49;
      v10 = 534;
      goto LABEL_140;
    }
    v36 = &v39[*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 1)];
    v45 = 15;
LABEL_120:
    v5 = v74;
LABEL_133:
    *(_DWORD *)(v5 + 48) = v45;
    *(_QWORD *)(v5 + 56) = v36;
    return result;
  }
  if (v33)
  {
    v46 = 0;
    goto LABEL_125;
  }
  if (v75)
  {
    if (v72 == 45)
      return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int64(a3, -(uint64_t)v32);
    else
      return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint64(a3, v32);
  }
  else if (v72 == 45)
  {
    return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int(a3, -v24);
  }
  else
  {
    return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint(a3, v24);
  }
}

void *rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<0u,rapidjson::FileReadStream,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(uint64_t a1, rapidjson::FileReadStream *this, _QWORD *a3)
{
  void *result;
  _BYTE *v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t *v17;
  _BYTE *v18;
  size_t v19;
  const void *v20;
  _BYTE *v21;
  int v22;
  int v23;
  int v24[2];
  size_t __n;

  result = (void *)rapidjson::FileReadStream::Read((size_t)this);
  *(_QWORD *)v24 = a1;
  for (LODWORD(__n) = 0; ; LODWORD(__n) = __n + 1)
  {
    while (1)
    {
      v7 = (_BYTE *)*((_QWORD *)this + 4);
      v8 = *v7;
      if (v8 != 92)
        break;
      v11 = *((_QWORD *)this + 6);
      v12 = *((_QWORD *)this + 1);
      result = (void *)rapidjson::FileReadStream::Read((size_t)this);
      v13 = **((unsigned __int8 **)this + 4);
      LOBYTE(v8) = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseStringToStream<0u,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::FileReadStream,rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>(rapidjson::FileReadStream &,rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char> &)::escape[v13];
      if ((_BYTE)v8)
        goto LABEL_5;
      v14 = (uint64_t)&v7[v11 - v12];
      if ((_DWORD)v13 != 117)
      {
        v23 = 10;
LABEL_29:
        *(_DWORD *)(a1 + 48) = v23;
        *(_QWORD *)(a1 + 56) = v14;
        return result;
      }
      rapidjson::FileReadStream::Read((size_t)this);
      result = (void *)rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::FileReadStream>(a1, this, v14);
      if (*(_DWORD *)(a1 + 48))
        return result;
      v15 = result;
      if (result >> 11 == 27)
      {
        if (result >> 10 > 0x36)
          goto LABEL_30;
        if (**((_BYTE **)this + 4) != 92)
          goto LABEL_30;
        v16 = (int)result;
        result = (void *)rapidjson::FileReadStream::Read((size_t)this);
        if (**((_BYTE **)this + 4) != 117)
          goto LABEL_30;
        rapidjson::FileReadStream::Read((size_t)this);
        result = (void *)rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::FileReadStream>(a1, this, v14);
        if (*(_DWORD *)(a1 + 48))
          return result;
        if (((_DWORD)result - 57344) <= 0xFFFFFBFF)
        {
LABEL_30:
          v23 = 9;
          goto LABEL_29;
        }
        v15 = (((_DWORD)result - 56320) | ((v16 << 10) - 56623104)) + 0x10000;
      }
      result = rapidjson::UTF8<char>::Encode<rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>((char *)v24, v15);
    }
    if (v8 == 34)
      break;
    if (v8 <= 0x1F)
    {
      v21 = &v7[*((_QWORD *)this + 6) - *((_QWORD *)this + 1)];
      if (*v7)
        v22 = 12;
      else
        v22 = 11;
      *(_DWORD *)(a1 + 48) = v22;
      *(_QWORD *)(a1 + 56) = v21;
      return result;
    }
LABEL_5:
    result = (void *)rapidjson::FileReadStream::Read((size_t)this);
    v9 = *(_QWORD *)v24;
    v10 = *(_BYTE **)(*(_QWORD *)v24 + 24);
    if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v24 + 32) - (_QWORD)v10) <= 0)
    {
      result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(uint64_t **)v24);
      v10 = *(_BYTE **)(v9 + 24);
    }
    *(_QWORD *)(v9 + 24) = v10 + 1;
    *v10 = v8;
  }
  result = (void *)rapidjson::FileReadStream::Read((size_t)this);
  v17 = *(uint64_t **)v24;
  v18 = *(_BYTE **)(*(_QWORD *)v24 + 24);
  if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v24 + 32) - (_QWORD)v18) <= 0)
  {
    result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(*(uint64_t **)v24);
    v18 = (_BYTE *)v17[3];
  }
  v17[3] = (uint64_t)(v18 + 1);
  *v18 = 0;
  if (!*(_DWORD *)(a1 + 48))
  {
    v19 = __n;
    v20 = (const void *)(v17[3] - (__n + 1));
    v17[3] = (uint64_t)v20;
    return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::String(a3, v20, v19);
  }
  return result;
}

uint64_t rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::FileReadStream>(uint64_t a1, rapidjson::FileReadStream *this, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;

  LODWORD(v6) = 0;
  v7 = 4;
  while (1)
  {
    v8 = **((char **)this + 4);
    if ((v8 - 48) >= 0xA)
      break;
    v9 = -48;
LABEL_8:
    v6 = (v8 + 16 * v6 + v9);
    rapidjson::FileReadStream::Read((size_t)this);
    if (!--v7)
      return v6;
  }
  if (**((unsigned __int8 **)this + 4) - 65 < 6)
  {
    v9 = -55;
    goto LABEL_8;
  }
  if (**((unsigned __int8 **)this + 4) - 97 < 6)
  {
    v9 = -87;
    goto LABEL_8;
  }
  v6 = 0;
  *(_DWORD *)(a1 + 48) = 8;
  *(_QWORD *)(a1 + 56) = a3;
  return v6;
}

void uaap_orchestration::grammar::UaapGrammar::getRuleForLabel(__int128 **a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v4;
  __int128 *v5;
  std::basic_string<char16_t>::size_type size;
  uint64_t v9;
  int v10;
  unsigned __int16 *v11;
  std::basic_string<char16_t> *p_p;
  std::basic_string<char16_t>::size_type v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v19;
  BOOL v20;
  __int128 v21;
  char v22;
  std::basic_string<char16_t> __p;

  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
  {
LABEL_35:
    v22 = 0;
    *(_BYTE *)a3 = 0;
    goto LABEL_38;
  }
  do
  {
    if (*((char *)v4 + 23) < 0)
      std::basic_string<char16_t>::__init_copy_ctor_external(&__p, *(const std::basic_string<char16_t>::value_type **)v4, *((_QWORD *)v4 + 1));
    else
      __p = *(std::basic_string<char16_t> *)v4;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v9 = *((unsigned __int8 *)a2 + 23);
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = *((_QWORD *)a2 + 1);
    if (size != v9)
    {
      v20 = 0;
      goto LABEL_25;
    }
    if (size)
    {
      if (v10 >= 0)
        v11 = a2;
      else
        v11 = *(unsigned __int16 **)a2;
      p_p = (std::basic_string<char16_t> *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      v13 = size - 1;
      do
      {
        v15 = (unsigned __int16)p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::basic_string<char16_t> *)((char *)p_p + 2);
        v14 = v15;
        v17 = *v11++;
        v16 = v17;
        v19 = v13-- != 0;
        v20 = v16 == v14;
      }
      while (v16 == v14 && v19);
LABEL_25:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_27;
LABEL_26:
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_27;
    }
    v20 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_26;
LABEL_27:
    if (v20)
      goto LABEL_32;
    v4 = (__int128 *)((char *)v4 + 184);
  }
  while (v4 != v5);
  v4 = v5;
LABEL_32:
  if (v4 == a1[1])
    goto LABEL_35;
  if (*((char *)v4 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)a3, *(const std::basic_string<char16_t>::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v21 = *v4;
    *(_QWORD *)(a3 + 16) = *((_QWORD *)v4 + 2);
    *(_OWORD *)a3 = v21;
  }
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  std::vector<uaap_orchestration::grammar::RightLabel>::__init_with_size[abi:ne180100]<uaap_orchestration::grammar::RightLabel*,uaap_orchestration::grammar::RightLabel*>(a3 + 24, *((__int128 **)v4 + 3), *((__int128 **)v4 + 4), (uint64_t)(*((_QWORD *)v4 + 4) - *((_QWORD *)v4 + 3)) >> 5);
  std::__optional_copy_base<uaap_orchestration::grammar::ValueConstraints,false>::__optional_copy_base[abi:ne180100]((std::basic_string<char16_t> *)(a3 + 48), (uint64_t)(v4 + 3));
  v22 = 1;
LABEL_38:
  *(_BYTE *)(a3 + 184) = v22;
}

void sub_1C22636B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (*(char *)(v9 + 23) < 0)
    operator delete(*(void **)v9);
  _Unwind_Resume(a1);
}

void uaap_orchestration::grammar::UaapGrammar::getAllLeftLabels(__int128 **this@<X0>, uint64_t a2@<X8>)
{
  __int128 *v3;
  __int128 *v4;
  __int128 v5;
  std::basic_string<char16_t> __p;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v3 = *this;
  v4 = this[1];
  while (v3 != v4)
  {
    if (*((char *)v3 + 23) < 0)
    {
      std::basic_string<char16_t>::__init_copy_ctor_external(&__p, *(const std::basic_string<char16_t>::value_type **)v3, *((_QWORD *)v3 + 1));
    }
    else
    {
      v5 = *v3;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
    }
    std::__hash_table<std::basic_string<char16_t>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::allocator<std::basic_string<char16_t>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::basic_string<char16_t>>(a2, (unsigned __int16 *)&__p, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v3 = (__int128 *)((char *)v3 + 184);
  }
}

void sub_1C2263780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table(v14);
  _Unwind_Resume(a1);
}

uint64_t uaap_orchestration::grammar::UaapGrammar::getRightLabelsForLabel@<X0>(__int128 **a1@<X0>, unsigned __int16 *a2@<X1>, _QWORD *a3@<X8>)
{
  std::runtime_error *exception;
  _BYTE v6[24];
  __int128 *v7;
  __int128 *v8;
  char v9;

  uaap_orchestration::grammar::UaapGrammar::getRuleForLabel(a1, a2, (uint64_t)v6);
  if (!v9)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Label does not exist");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<uaap_orchestration::grammar::RightLabel>::__init_with_size[abi:ne180100]<uaap_orchestration::grammar::RightLabel*,uaap_orchestration::grammar::RightLabel*>((uint64_t)a3, v7, v8, ((char *)v8 - (char *)v7) >> 5);
  return std::__optional_destruct_base<uaap_orchestration::grammar::Rule,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v6);
}

void sub_1C2263838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  std::__optional_destruct_base<uaap_orchestration::grammar::Rule,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<uaap_orchestration::grammar::Rule,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 184))
  {
    std::__optional_destruct_base<uaap_orchestration::grammar::ValueConstraints,false>::~__optional_destruct_base[abi:ne180100](a1 + 48);
    v3 = (void **)(a1 + 24);
    std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100](&v3);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t uaap_orchestration::grammar::UaapGrammar::getChildrenPathsInner(__int128 **a1, __int128 **a2, uint64_t *a3)
{
  __int128 *v6;
  __int128 *v7;
  _QWORD *v8;
  uint64_t v9;
  std::runtime_error *exception;
  void **v12[3];
  __int128 *v13;
  __int128 *v14;
  _BYTE v15[192];
  void ***v16;

  uaap_orchestration::grammar::UaapGrammar::getRuleForLabel(a1, (unsigned __int16 *)a2[1] - 12, (uint64_t)v15);
  if (!v15[184])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Label does not exist");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  uaap_orchestration::grammar::Rule::getRightLabelNames((uaap_orchestration::grammar::Rule *)v15, (uint64_t *)&v13);
  v6 = v13;
  v7 = v14;
  if (v13 == v14)
  {
    v8 = (_QWORD *)a3[1];
    if ((unint64_t)v8 >= a3[2])
    {
      v9 = std::vector<uaap_orchestration::grammar::Path>::__push_back_slow_path<uaap_orchestration::grammar::Path const&>(a3, a2);
    }
    else
    {
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)v8, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
      v9 = (uint64_t)(v8 + 3);
      a3[1] = (uint64_t)(v8 + 3);
    }
    a3[1] = v9;
  }
  else
  {
    do
    {
      uaap_orchestration::grammar::Path::extendWithComponent(a2, v6, (uint64_t *)v12);
      uaap_orchestration::grammar::UaapGrammar::getChildrenPathsInner(a1, v12, a3);
      v16 = v12;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
      v6 = (__int128 *)((char *)v6 + 24);
    }
    while (v6 != v7);
  }
  v12[0] = (void **)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v12);
  return std::__optional_destruct_base<uaap_orchestration::grammar::Rule,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v15);
}

void sub_1C2263A04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  va_copy((va_list)v3, va1);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__optional_destruct_base<uaap_orchestration::grammar::Rule,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t std::vector<uaap_orchestration::grammar::Path>::__push_back_slow_path<uaap_orchestration::grammar::Path const&>(uint64_t *a1, __int128 **a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  __int128 v14;
  int64x2_t v15;
  unint64_t v16;
  unint64_t v18;
  int64x2_t v19;
  unint64_t v20;
  _QWORD *v21;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 2;
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  else
    v7 = v3;
  v21 = v6;
  if (v7)
    v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v7);
  else
    v8 = 0;
  v9 = (_QWORD *)(v7 + 24 * v2);
  v18 = v7;
  v19.i64[0] = (uint64_t)v9;
  v19.i64[1] = (uint64_t)v9;
  v20 = v7 + 24 * v8;
  *v9 = 0;
  v9[1] = 0;
  v9[2] = 0;
  std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)v9, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v10 = v19.i64[0];
  v11 = v19.i64[1] + 24;
  v19.i64[1] += 24;
  v13 = (_QWORD *)*a1;
  v12 = (_QWORD *)a1[1];
  if (v12 == (_QWORD *)*a1)
  {
    v15 = vdupq_n_s64((unint64_t)v12);
  }
  else
  {
    do
    {
      *(_QWORD *)(v10 - 24) = 0;
      *(_QWORD *)(v10 - 16) = 0;
      v10 -= 24;
      *(_QWORD *)(v10 + 16) = 0;
      v14 = *(_OWORD *)(v12 - 3);
      v12 -= 3;
      *(_OWORD *)v10 = v14;
      *(_QWORD *)(v10 + 16) = v12[2];
      *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
    }
    while (v12 != v13);
    v15 = *(int64x2_t *)a1;
    v11 = v19.i64[1];
  }
  *a1 = v10;
  a1[1] = v11;
  v19 = v15;
  v16 = a1[2];
  a1[2] = v20;
  v20 = v16;
  v18 = v15.i64[0];
  std::__split_buffer<uaap_orchestration::grammar::Path>::~__split_buffer((uint64_t)&v18);
  return v11;
}

void sub_1C2263BC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<uaap_orchestration::grammar::Path>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<uaap_orchestration::grammar::Path>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t uaap_orchestration::grammar::UaapGrammar::getChildrenPathsForLabel@<X0>(__int128 **a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 *v5;
  __int128 *i;
  std::runtime_error *exception;
  __int128 *v9[3];
  __int128 *v10;
  __int128 *v11;
  _BYTE v12[192];
  __int128 **v13;

  uaap_orchestration::grammar::UaapGrammar::getRuleForLabel(a1, a2, (uint64_t)v12);
  if (!v12[184])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Label does not exist");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  uaap_orchestration::grammar::Rule::getRightLabelNames((uaap_orchestration::grammar::Rule *)v12, (uint64_t *)&v10);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = v10;
  for (i = v11; v5 != i; v5 = (__int128 *)((char *)v5 + 24))
  {
    uaap_orchestration::grammar::Path::singletonPath(v5, (uint64_t *)v9);
    uaap_orchestration::grammar::UaapGrammar::getChildrenPathsInner(a1, v9, a3);
    v13 = v9;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  }
  v9[0] = (__int128 *)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v9);
  return std::__optional_destruct_base<uaap_orchestration::grammar::Rule,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v12);
}

void sub_1C2263D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::__optional_destruct_base<uaap_orchestration::grammar::Rule,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t uaap_orchestration::grammar::UaapGrammar::getAllSpanValuesForLabel@<X0>(__int128 **a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  unsigned __int16 *i;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  _QWORD v10[3];
  _BYTE v11[16];
  unsigned __int16 *v12;
  void **v13[5];
  char v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  std::basic_string<char16_t> v18;
  __int128 *v19;
  __int128 *v20;
  _BYTE v21[56];
  _OWORD v22[2];
  int v23;
  _BYTE v24[48];
  _BYTE v25[144];
  void **v26;

  uaap_orchestration::grammar::UaapGrammar::getRuleForLabel(a1, a2, (uint64_t)v24);
  if (v25[136])
  {
    memset(v22, 0, sizeof(v22));
    v23 = 1065353216;
    std::__optional_copy_base<uaap_orchestration::grammar::ValueConstraints,false>::__optional_copy_base[abi:ne180100](&v18, (uint64_t)v25);
    if (v21[48])
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)&v15, v19, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v19) >> 3));
      v4 = v15;
      v5 = v16;
      while (v4 != v5)
      {
        std::__hash_table<std::basic_string<char16_t>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::allocator<std::basic_string<char16_t>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::basic_string<char16_t> const&>((uint64_t)v22, v4, (uint64_t)v4);
        v4 += 12;
      }
      std::__optional_copy_base<uaap_orchestration::grammar::ResolutionTable,false>::__optional_copy_base[abi:ne180100](v13, (uint64_t)v21);
      if (v14)
      {
        uaap_orchestration::grammar::ResolutionTable::getSemanticValues((uaap_orchestration::grammar::ResolutionTable *)v13, (uint64_t)v11);
        for (i = v12; i; i = *(unsigned __int16 **)i)
        {
          uaap_orchestration::grammar::ResolutionTable::getSynonyms(v13, i + 8, v10);
          v7 = (unsigned __int16 *)v10[0];
          v8 = (unsigned __int16 *)v10[1];
          while (v7 != v8)
          {
            std::__hash_table<std::basic_string<char16_t>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::allocator<std::basic_string<char16_t>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::basic_string<char16_t> const&>((uint64_t)v22, v7, (uint64_t)v7);
            v7 += 12;
          }
          v26 = (void **)v10;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v26);
        }
        std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)v11);
        if (v14)
          std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table((uint64_t)v13);
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a3, (uint64_t *)v22);
      v13[0] = (void **)&v15;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v13);
    }
    else
    {
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)(a3 + 32) = 1065353216;
    }
    std::__optional_destruct_base<uaap_orchestration::grammar::ValueConstraints,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v18);
    std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)v22);
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = 1065353216;
  }
  return std::__optional_destruct_base<uaap_orchestration::grammar::Rule,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v24);
}

void sub_1C2263FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,int a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  uint64_t v44;

  if (a22)
    std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table((uint64_t)&a17);
  a17 = (void **)&a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a17);
  std::__optional_destruct_base<uaap_orchestration::grammar::ValueConstraints,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a27);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)&a44);
  std::__optional_destruct_base<uaap_orchestration::grammar::Rule,false>::~__optional_destruct_base[abi:ne180100](v44 - 248);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::basic_string<char16_t>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::allocator<std::basic_string<char16_t>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::basic_string<char16_t> const&>(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int16 **v12;
  unsigned __int16 *i;
  unint64_t v14;
  _QWORD *v15;
  std::basic_string<char16_t> *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = std::__string_hash<char16_t>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int16 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int16 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::basic_string<char16_t>>::operator()[abi:ne180100](i + 8, a2))
            return;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = operator new(0x28uLL);
  *v15 = 0;
  v15[1] = v8;
  v16 = (std::basic_string<char16_t> *)(v15 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(v16, *(const std::basic_string<char16_t>::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v15[4] = *(_QWORD *)(a3 + 16);
  }
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v15 = *v24;
LABEL_41:
    *v24 = v15;
    goto LABEL_42;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    v25 = *(_QWORD *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1C2264260(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t uaap_orchestration::grammar::UaapGrammar::getEnumChoicesForLabel@<X0>(__int128 **a1@<X0>, unsigned __int16 *a2@<X1>, _QWORD *a3@<X8>)
{
  std::basic_string<char16_t> v5;
  __int128 *v6;
  __int128 *v7;
  char v8;
  _BYTE v9[48];
  _BYTE v10[144];

  uaap_orchestration::grammar::UaapGrammar::getRuleForLabel(a1, a2, (uint64_t)v9);
  if (v10[136])
  {
    std::__optional_copy_base<uaap_orchestration::grammar::ValueConstraints,false>::__optional_copy_base[abi:ne180100](&v5, (uint64_t)v10);
    if (v8)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)a3, v6, v7, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 3));
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    std::__optional_destruct_base<uaap_orchestration::grammar::ValueConstraints,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v5);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return std::__optional_destruct_base<uaap_orchestration::grammar::Rule,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v9);
}

void sub_1C2264328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__optional_destruct_base<uaap_orchestration::grammar::ValueConstraints,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a10);
  std::__optional_destruct_base<uaap_orchestration::grammar::Rule,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

BOOL snlp::common::text_uso_graph::ExactMatchComparator::isMatch(snlp::common::text_uso_graph::ExactMatchComparator *this, siri::ontology::UsoGraph ***a2, siri::ontology::UsoGraph ***a3)
{
  unint64_t v4;
  const UsoGraphNode *v5;

  v4 = snlp::common::text_uso_graph::bottomUpTreeHash(a2[11], (const UsoGraphNode *)a2);
  return v4 == snlp::common::text_uso_graph::bottomUpTreeHash(a3[11], v5);
}

uint64_t snlp::common::text_uso_graph::ExactMatchComparator::showDifference(snlp::common::text_uso_graph::ExactMatchComparator *this, const siri::ontology::UsoGraph *a2, const siri::ontology::UsoGraph *a3)
{
  _QWORD *v5;
  void *p_p;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *__p;
  uint64_t v16;
  unsigned __int8 v17;
  _QWORD v18[2];
  _QWORD v19[11];
  char v20;
  uint64_t v21;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v18);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Expected:", 9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n", 1);
  siri::ontology::UsoGraph::prettyPrint(a2);
  if ((v17 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v17 & 0x80u) == 0)
    v7 = v17;
  else
    v7 = v16;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)p_p, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n\n", 2);
  if ((char)v17 < 0)
    operator delete(__p);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Actual:", 7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
  siri::ontology::UsoGraph::prettyPrint(a3);
  if ((v17 & 0x80u) == 0)
    v10 = &__p;
  else
    v10 = __p;
  if ((v17 & 0x80u) == 0)
    v11 = v17;
  else
    v11 = v16;
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v10, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\n", 1);
  if ((char)v17 < 0)
    operator delete(__p);
  std::stringbuf::str();
  v18[0] = *MEMORY[0x1E0DE4F50];
  v13 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v19[0] = v13;
  v19[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v20 < 0)
    operator delete((void *)v19[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3BB9A90](&v21);
}

void sub_1C2264528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t snlp::common::text_uso_graph::ExactMatchComparator::isMatch(uint64_t (***a1)(_QWORD, void *, UsoGraph *), _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  char *v8;
  char *v9;
  int v10;
  size_t v11;
  unint64_t v12;
  int v13;
  void **v14;
  uint64_t v15;
  void **p_s1;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  UsoGraph *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v47[2];
  UsoGraph *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  void *__p[2];
  unsigned __int8 v52;
  void *__s1;
  size_t __n;
  unsigned __int8 v55;

  if (a2[1])
  {
    v8 = "UserAccepted";
  }
  else if (a2[2])
  {
    v8 = "UserAcknowledged";
  }
  else if (a2[4])
  {
    v8 = "UserCancelled";
  }
  else if (a2[6])
  {
    v8 = "UserRejected";
  }
  else if (a2[7])
  {
    v8 = "UserStatedTask";
  }
  else if (a2[8])
  {
    v8 = "UserWantedToPause";
  }
  else if (a2[9])
  {
    v8 = "UserWantedToProceed";
  }
  else if (a2[10])
  {
    v8 = "UserWantedToRepeat";
  }
  else
  {
    v8 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&__s1, v8);
  if (a3[1])
  {
    v9 = "UserAccepted";
  }
  else if (a3[2])
  {
    v9 = "UserAcknowledged";
  }
  else if (a3[4])
  {
    v9 = "UserCancelled";
  }
  else if (a3[6])
  {
    v9 = "UserRejected";
  }
  else if (a3[7])
  {
    v9 = "UserStatedTask";
  }
  else if (a3[8])
  {
    v9 = "UserWantedToPause";
  }
  else if (a3[9])
  {
    v9 = "UserWantedToProceed";
  }
  else if (a3[10])
  {
    v9 = "UserWantedToRepeat";
  }
  else
  {
    v9 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v9);
  v10 = v55;
  if ((v55 & 0x80u) == 0)
    v11 = v55;
  else
    v11 = __n;
  v12 = v52;
  v13 = (char)v52;
  if ((v52 & 0x80u) != 0)
    v12 = (unint64_t)__p[1];
  if (v11 != v12)
  {
    v20 = 1;
    if (((char)v52 & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_61;
  }
  if ((v52 & 0x80u) == 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if ((v55 & 0x80) != 0)
  {
    v20 = memcmp(__s1, v14, __n) != 0;
    goto LABEL_56;
  }
  if (v55)
  {
    v15 = v55 - 1;
    p_s1 = &__s1;
    do
    {
      v18 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      v17 = v18;
      v19 = *(unsigned __int8 *)v14;
      v14 = (void **)((char *)v14 + 1);
      v20 = v17 != v19;
    }
    while (v17 == v19 && v15-- != 0);
LABEL_56:
    if ((v13 & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_61;
  }
  v20 = 0;
  if (((char)v52 & 0x80000000) == 0)
  {
LABEL_57:
    if (v20)
      goto LABEL_58;
LABEL_62:
    if ((v10 & 0x80) != 0)
    {
      if (__n != 22)
        goto LABEL_74;
      v23 = (uint64_t *)__s1;
    }
    else
    {
      if (v10 != 22)
        goto LABEL_74;
      v23 = (uint64_t *)&__s1;
    }
    v24 = *v23;
    v25 = v23[1];
    v26 = *(uint64_t *)((char *)v23 + 14);
    if (v24 == 0x65746167656C6544 && v25 == 0x6169447265735564 && v26 == 0x746341676F6C6169)
    {
      v22 = 1;
      if ((v10 & 0x80) == 0)
        return v22;
      goto LABEL_95;
    }
LABEL_74:
    v29 = a4[1];
    v49 = *a4;
    v50 = (std::__shared_weak_count *)v29;
    if (v29)
    {
      v30 = (unint64_t *)(v29 + 8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    snlp::common::text_uso_graph::extractGraph(a2, &v49, (UsoGraph **)__p);
    v32 = __p[0];
    v33 = *a4;
    v34 = (std::__shared_weak_count *)a4[1];
    v47[0] = v33;
    v47[1] = (uint64_t)v34;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(p_shared_owners);
      while (__stxr(v36 + 1, p_shared_owners));
    }
    snlp::common::text_uso_graph::extractGraph(a3, v47, &v48);
    v37 = v48;
    v22 = (**a1)(a1, v32, v48);
    v48 = 0;
    if (v37)
    {
      v38 = MEMORY[0x1C3BB916C](v37);
      MEMORY[0x1C3BB9B44](v38, 0x10A0C403D23BABBLL);
    }
    if (v34)
    {
      v39 = (unint64_t *)&v34->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v41 = __p[0];
    __p[0] = 0;
    if (v41)
    {
      v42 = MEMORY[0x1C3BB916C]();
      MEMORY[0x1C3BB9B44](v42, 0x10A0C403D23BABBLL);
    }
    v43 = v50;
    if (v50)
    {
      v44 = (unint64_t *)&v50->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    if ((v55 & 0x80) != 0)
      goto LABEL_95;
    return v22;
  }
LABEL_61:
  operator delete(__p[0]);
  v10 = v55;
  if (!v20)
    goto LABEL_62;
LABEL_58:
  v22 = 0;
  if ((v10 & 0x80) != 0)
LABEL_95:
    operator delete(__s1);
  return v22;
}

void sub_1C2264984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](&a12);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](&a17);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void snlp::common::text_uso_graph::ExactMatchComparator::showDifference(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  char *v10;
  char *v11;
  uint64_t v12;
  size_t v13;
  std::string::size_type v14;
  unsigned __int8 *p_p;
  void **v16;
  std::string *v17;
  __int128 v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::string::size_type v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::string::size_type v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::string::size_type v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40[2];
  uint64_t v41;
  std::__shared_weak_count *v42;
  std::string v43;
  std::string v44;
  void *__p;
  std::string::size_type v46;
  unsigned __int8 v47;
  void *v48;
  size_t v49;
  unsigned __int8 v50;

  if (a2[1])
  {
    v10 = "UserAccepted";
  }
  else if (a2[2])
  {
    v10 = "UserAcknowledged";
  }
  else if (a2[4])
  {
    v10 = "UserCancelled";
  }
  else if (a2[6])
  {
    v10 = "UserRejected";
  }
  else if (a2[7])
  {
    v10 = "UserStatedTask";
  }
  else if (a2[8])
  {
    v10 = "UserWantedToPause";
  }
  else if (a2[9])
  {
    v10 = "UserWantedToProceed";
  }
  else if (a2[10])
  {
    v10 = "UserWantedToRepeat";
  }
  else
  {
    v10 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&v48, v10);
  if (a3[1])
  {
    v11 = "UserAccepted";
  }
  else if (a3[2])
  {
    v11 = "UserAcknowledged";
  }
  else if (a3[4])
  {
    v11 = "UserCancelled";
  }
  else if (a3[6])
  {
    v11 = "UserRejected";
  }
  else if (a3[7])
  {
    v11 = "UserStatedTask";
  }
  else if (a3[8])
  {
    v11 = "UserWantedToPause";
  }
  else if (a3[9])
  {
    v11 = "UserWantedToProceed";
  }
  else if (a3[10])
  {
    v11 = "UserWantedToRepeat";
  }
  else
  {
    v11 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v11);
  v12 = v50;
  if ((v50 & 0x80u) == 0)
    v13 = v50;
  else
    v13 = v49;
  v14 = v47;
  if ((v47 & 0x80u) != 0)
    v14 = v46;
  if (v13 == v14)
  {
    if ((v47 & 0x80u) == 0)
      p_p = (unsigned __int8 *)&__p;
    else
      p_p = (unsigned __int8 *)__p;
    if ((v50 & 0x80) == 0)
    {
      if (v50)
      {
        v16 = &v48;
        while (*(unsigned __int8 *)v16 == *p_p)
        {
          v16 = (void **)((char *)v16 + 1);
          ++p_p;
          if (!--v12)
            goto LABEL_61;
        }
        goto LABEL_51;
      }
LABEL_61:
      v23 = a4[1];
      v41 = *a4;
      v42 = (std::__shared_weak_count *)v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      snlp::common::text_uso_graph::extractGraph(a2, &v41, (UsoGraph **)&v44);
      v26 = v44.__r_.__value_.__r.__words[0];
      v27 = *a4;
      v28 = (std::__shared_weak_count *)a4[1];
      v40[0] = v27;
      v40[1] = (uint64_t)v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(p_shared_owners);
        while (__stxr(v30 + 1, p_shared_owners));
      }
      snlp::common::text_uso_graph::extractGraph(a3, v40, (UsoGraph **)&v43);
      v31 = v43.__r_.__value_.__r.__words[0];
      (*(void (**)(uint64_t, std::string::size_type, std::string::size_type))(*(_QWORD *)a1 + 8))(a1, v26, v43.__r_.__value_.__r.__words[0]);
      v43.__r_.__value_.__r.__words[0] = 0;
      if (v31)
      {
        v32 = MEMORY[0x1C3BB916C](v31);
        MEMORY[0x1C3BB9B44](v32, 0x10A0C403D23BABBLL);
      }
      if (v28)
      {
        v33 = (unint64_t *)&v28->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v35 = v44.__r_.__value_.__r.__words[0];
      v44.__r_.__value_.__r.__words[0] = 0;
      if (v35)
      {
        v36 = MEMORY[0x1C3BB916C]();
        MEMORY[0x1C3BB9B44](v36, 0x10A0C403D23BABBLL);
      }
      v37 = v42;
      if (v42)
      {
        v38 = (unint64_t *)&v42->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      goto LABEL_81;
    }
    if (!memcmp(v48, p_p, v49))
      goto LABEL_61;
  }
LABEL_51:
  std::operator+<char>();
  v17 = std::string::append(&v43, " but got a ");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if ((v47 & 0x80u) == 0)
    v19 = (const std::string::value_type *)&__p;
  else
    v19 = (const std::string::value_type *)__p;
  if ((v47 & 0x80u) == 0)
    v20 = v47;
  else
    v20 = v46;
  v21 = std::string::append(&v44, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  *(_QWORD *)(a5 + 16) = *((_QWORD *)&v21->__r_.__value_.__l + 2);
  *(_OWORD *)a5 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
LABEL_81:
  if ((char)v47 < 0)
    operator delete(__p);
  if ((char)v50 < 0)
    operator delete(v48);
}

void sub_1C2264DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)&a14);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)&a20);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (a32 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 49) < 0)
    operator delete(*(void **)(v32 - 72));
  _Unwind_Resume(a1);
}

void snlp::common::text_uso_graph::extractGraph(_QWORD *a1@<X0>, uint64_t *a2@<X1>, UsoGraph **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const sirinluexternal::UsoGraph *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::runtime_error *exception;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  int v29;

  v28 = 1;
  v29 = 0;
  v6 = operator new();
  MEMORY[0x1C3BB9154](v6, &v28);
  *a3 = (UsoGraph *)v6;
  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v26 = v7;
    v27 = v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    v26 = v7;
    v27 = 0;
  }
  v13 = a1[1];
  if (!v13 || (v14 = *(const sirinluexternal::UsoGraph **)(v13 + 16)) == 0)
  {
    v15 = a1[2];
    if (!v15 || (v14 = *(const sirinluexternal::UsoGraph **)(v15 + 8)) == 0)
    {
      v16 = a1[4];
      if (!v16 || (v14 = *(const sirinluexternal::UsoGraph **)(v16 + 8)) == 0)
      {
        v17 = a1[6];
        if (!v17 || (v14 = *(const sirinluexternal::UsoGraph **)(v17 + 16)) == 0)
        {
          v18 = a1[7];
          if (!v18 || (v14 = *(const sirinluexternal::UsoGraph **)(v18 + 8)) == 0)
          {
            v19 = a1[8];
            if (!v19 || (v14 = *(const sirinluexternal::UsoGraph **)(v19 + 8)) == 0)
            {
              v20 = a1[9];
              if (!v20 || (v14 = *(const sirinluexternal::UsoGraph **)(v20 + 8)) == 0)
              {
                v21 = a1[10];
                if (!v21 || (v14 = *(const sirinluexternal::UsoGraph **)(v21 + 8)) == 0)
                {
                  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(exception, "Badly-formed UDA");
                  exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9D10;
                }
              }
            }
          }
        }
      }
    }
  }
  siri::ontology::UsoGraphProtoReader::fromProtobuf((siri::ontology::UsoGraphProtoReader *)&v26, v14, *a3);
  v22 = v27;
  if (v27)
  {
    v23 = (unint64_t *)&v27->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1C226505C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  void *v10;

  __cxa_free_exception(v10);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel::~EspressoITFME5MLModel(void **this)
{
  itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel::~EspressoITFME5MLModel(this);
  JUMPOUT(0x1C3BB9B44);
}

{
  void **v2;

  *this = &off_1E7BE9588;
  if (*((char *)this + 183) < 0)
    operator delete(this[20]);
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  v2 = (void **)this[1];
  this[1] = 0;
  if (v2)
    std::default_delete<itfm_inference_orchestrator::inference_engine::ITFME5MLModule>::operator()[abi:ne180100](v2);
}

void itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel::forward(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  _BYTE *v7;
  void *__p;
  _BYTE *v9;
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[3];
  _QWORD v14[3];
  _QWORD v15[3];
  _QWORD v16[3];
  _QWORD v17[3];

  memset(v10, 0, sizeof(v10));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v10, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  memset(v11, 0, sizeof(v11));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v11, *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2);
  memset(v12, 0, sizeof(v12));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v12, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3);
  memset(v13, 0, sizeof(v13));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v13, *(const void **)(a2 + 72), *(_QWORD *)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 2);
  memset(v14, 0, sizeof(v14));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v14, *(const void **)(a2 + 96), *(_QWORD *)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3);
  memset(v15, 0, sizeof(v15));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v15, *(const void **)(a2 + 120), *(_QWORD *)(a2 + 128), (uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 2);
  memset(v16, 0, sizeof(v16));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v16, *(const void **)(a2 + 144), *(_QWORD *)(a2 + 152), (uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3);
  memset(v17, 0, sizeof(v17));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v17, *(const void **)(a2 + 168), *(_QWORD *)(a2 + 176), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 2);
  itfm_inference_orchestrator::inference_engine::ITFME5MLModule::forward(*(_QWORD *)(a1 + 8), v10, &v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a3, v6, (uint64_t)v7, (v7 - (_BYTE *)v6) >> 3);
  a3[3] = 0;
  a3[4] = 0;
  a3[5] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a3 + 3, __p, (uint64_t)v9, (v9 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *)v10);
}

void sub_1C2265280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  uint64_t v34;
  void *v36;

  v36 = *(void **)v34;
  if (*(_QWORD *)v34)
  {
    *(_QWORD *)(v34 + 8) = v36;
    operator delete(v36);
  }
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a9);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *)&a15);
  _Unwind_Resume(a1);
}

void sub_1C2265334(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x1C226532CLL);
}

uint64_t itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel::getBatchSize(itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel *this)
{
  return snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getNetworkConfig(*((_QWORD *)this + 1), (unsigned __int8 *)this + 160);
}

uint64_t itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel::getMaxNumUtteranceEmbeddings(itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel *this)
{
  return snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getNetworkConfig(*((_QWORD *)this + 1), (unsigned __int8 *)this + 40);
}

uint64_t itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel::getMaxNumContextTokens(itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel *this)
{
  return snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getNetworkConfig(*((_QWORD *)this + 1), (unsigned __int8 *)this + 136);
}

uint64_t itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel::getMaxNumSpansTokens(itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel *this)
{
  return snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getNetworkConfig(*((_QWORD *)this + 1), (unsigned __int8 *)this + 88);
}

uint64_t itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel::getUtteranceEmbeddingsSize(itfm_inference_orchestrator::inference_engine::EspressoITFME5MLModel *this)
{
  return snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getNetworkConfig(*((_QWORD *)this + 1), (unsigned __int8 *)this + 64);
}

void std::default_delete<itfm_inference_orchestrator::inference_engine::ITFME5MLModule>::operator()[abi:ne180100](void **this)
{
  if (*((char *)this + 479) < 0)
    operator delete(this[57]);
  if (*((char *)this + 455) < 0)
    operator delete(this[54]);
  if (*((char *)this + 431) < 0)
    operator delete(this[51]);
  if (*((char *)this + 407) < 0)
    operator delete(this[48]);
  if (*((char *)this + 383) < 0)
    operator delete(this[45]);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::~EspressoE5MLModule((snlp::common::espresso_inference::e5ml::EspressoE5MLModule *)this);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  const void **v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t result;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 0;
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  if (*((_QWORD *)a1 + 3) != *((_QWORD *)v6 + 3))
    return 0;
  if (*((_QWORD *)a1 + 4) != *((_QWORD *)v6 + 4))
    return 0;
  v10 = *((_QWORD *)a1 + 5);
  v9 = *((_QWORD *)a1 + 6);
  v11 = (unsigned __int8 *)*((_QWORD *)v6 + 5);
  if (v9 - v10 != *((_QWORD *)v6 + 6) - (_QWORD)v11)
    return 0;
  while (v10 != v9)
  {
    v12 = *(unsigned __int8 *)(v10 + 23);
    if ((v12 & 0x80u) == 0)
      v13 = *(unsigned __int8 *)(v10 + 23);
    else
      v13 = *(_QWORD *)(v10 + 8);
    v14 = v11[23];
    v15 = (char)v14;
    if ((v14 & 0x80u) != 0)
      v14 = *((_QWORD *)v11 + 1);
    if (v13 != v14)
      return 0;
    if (v15 >= 0)
      v16 = v11;
    else
      v16 = *(unsigned __int8 **)v11;
    if ((v12 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v10, v16, *(_QWORD *)(v10 + 8)))
        return 0;
    }
    else if (*(_BYTE *)(v10 + 23))
    {
      v17 = 0;
      while (*(unsigned __int8 *)(v10 + v17) == v16[v17])
      {
        if (v12 == ++v17)
          goto LABEL_36;
      }
      return 0;
    }
LABEL_36:
    v18 = *(unsigned __int8 *)(v10 + 47);
    if ((v18 & 0x80u) == 0)
      v19 = *(unsigned __int8 *)(v10 + 47);
    else
      v19 = *(_QWORD *)(v10 + 32);
    v20 = v11[47];
    v21 = (char)v20;
    if ((v20 & 0x80u) != 0)
      v20 = *((_QWORD *)v11 + 4);
    if (v19 != v20)
      return 0;
    if (v21 >= 0)
      v22 = v11 + 24;
    else
      v22 = (unsigned __int8 *)*((_QWORD *)v11 + 3);
    if ((v18 & 0x80) != 0)
    {
      if (memcmp(*(const void **)(v10 + 24), v22, *(_QWORD *)(v10 + 32)))
        return 0;
    }
    else if (*(_BYTE *)(v10 + 47))
    {
      v23 = 0;
      while (*(unsigned __int8 *)(v10 + v23 + 24) == v22[v23])
      {
        if (v18 == ++v23)
          goto LABEL_52;
      }
      return 0;
    }
LABEL_52:
    v24 = (*(_BYTE *)(v10 + 72) != 0) == (v11[72] != 0);
    if (!*(_BYTE *)(v10 + 72) || !v11[72])
      goto LABEL_71;
    v25 = *(unsigned __int8 *)(v10 + 71);
    if ((v25 & 0x80u) == 0)
      v26 = *(unsigned __int8 *)(v10 + 71);
    else
      v26 = *(_QWORD *)(v10 + 56);
    v27 = v11[71];
    v28 = (char)v27;
    if ((v27 & 0x80u) != 0)
      v27 = *((_QWORD *)v11 + 7);
    if (v26 != v27)
      return 0;
    if (v28 >= 0)
      v29 = v11 + 48;
    else
      v29 = (unsigned __int8 *)*((_QWORD *)v11 + 6);
    if ((v25 & 0x80) == 0)
    {
      if (!*(_BYTE *)(v10 + 71))
        goto LABEL_72;
      v30 = 0;
      v31 = v25 - 1;
      do
      {
        v24 = *(unsigned __int8 *)(v10 + v30 + 48) == v29[v30];
        v32 = *(unsigned __int8 *)(v10 + v30 + 48) != v29[v30] || v31 == v30;
        ++v30;
      }
      while (!v32);
LABEL_71:
      if (!v24)
        return 0;
      goto LABEL_72;
    }
    if (memcmp(*(const void **)(v10 + 48), v29, *(_QWORD *)(v10 + 56)))
      return 0;
LABEL_72:
    v33 = v11[88];
    if (*(_BYTE *)(v10 + 88))
      v34 = v33 == 0;
    else
      v34 = 1;
    if (v34)
    {
      if ((*(_BYTE *)(v10 + 88) != 0) != (v33 != 0))
        return 0;
    }
    else if (*(double *)(v10 + 80) != *((double *)v11 + 10))
    {
      return 0;
    }
    if (*(_BYTE *)(v10 + 100) && v11[100])
    {
      if (*(_DWORD *)(v10 + 96) != *((_DWORD *)v11 + 24))
        return 0;
    }
    else if ((*(_BYTE *)(v10 + 100) != 0) != (v11[100] != 0))
    {
      return 0;
    }
    if (*(_BYTE *)(v10 + 108) && v11[108])
    {
      if (*(_DWORD *)(v10 + 104) != *((_DWORD *)v11 + 26))
        return 0;
    }
    else if ((*(_BYTE *)(v10 + 108) != 0) != (v11[108] != 0))
    {
      return 0;
    }
    if (*(_BYTE *)(v10 + 116) && v11[116])
    {
      if (*(_DWORD *)(v10 + 112) != *((_DWORD *)v11 + 28))
        return 0;
    }
    else if ((*(_BYTE *)(v10 + 116) != 0) != (v11[116] != 0))
    {
      return 0;
    }
    v10 += 120;
    v11 += 120;
  }
  v35 = a1[87];
  if ((v35 & 0x80u) == 0)
    v36 = a1[87];
  else
    v36 = *((_QWORD *)a1 + 9);
  v37 = v6[87];
  v38 = (char)v37;
  if ((v37 & 0x80u) != 0)
    v37 = *((_QWORD *)v6 + 9);
  if (v36 != v37)
    return 1;
  v39 = (const void **)(a1 + 64);
  v42 = (unsigned __int8 *)*((_QWORD *)v6 + 8);
  v41 = v6 + 64;
  v40 = v42;
  if (v38 >= 0)
    v43 = v41;
  else
    v43 = v40;
  if ((v35 & 0x80) != 0)
    return memcmp(*v39, v43, *((_QWORD *)a1 + 9)) != 0;
  if (!a1[87])
    return 0;
  v44 = v35 - 1;
  do
  {
    v46 = *(unsigned __int8 *)v39;
    v39 = (const void **)((char *)v39 + 1);
    v45 = v46;
    v47 = *v43++;
    result = v45 != v47;
  }
  while (v45 == v47 && v44-- != 0);
  return result;
}

uint64_t snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo::operator!=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo::operator==(a1, a2) ^ 1;
}

void snlp::ssu::proto::SSUValidatedRequest::validateRequest(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint32_t v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t *v22;
  unsigned __int8 *v23;
  char v24;
  uint64_t v25;
  NSObject *v26;
  NSObject *v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  __int16 v31;
  unsigned __int8 *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*a2)
  {
    v15 = SNLPOSLoggerForCategory(8);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_40;
    LOWORD(v29) = 0;
    v16 = "Request validation failed: received nullptr request";
    goto LABEL_26;
  }
  if (!*(_QWORD *)(*a2 + 48))
  {
    v6 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v29) = 0;
      _os_log_impl(&dword_1C2196000, v6, OS_LOG_TYPE_DEBUG, "Request validation: missing nluRequestId field. This is non-fatal.", (uint8_t *)&v29, 2u);
    }
  }
  v7 = *a2;
  v8 = *(_QWORD *)(*a2 + 48);
  if (v8 && !*(_QWORD *)(v8 + 16))
  {
    v20 = SNLPOSLoggerForCategory(8);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      goto LABEL_40;
    LOWORD(v29) = 0;
    v16 = "Request validation failed: missing nluRequestId.id field";
    v17 = v20;
    v18 = OS_LOG_TYPE_DEBUG;
LABEL_28:
    v19 = 2;
LABEL_39:
    _os_log_impl(&dword_1C2196000, v17, v18, v16, (uint8_t *)&v29, v19);
    goto LABEL_40;
  }
  v9 = *(unsigned __int8 **)(v7 + 16);
  if (!v9)
  {
    v15 = SNLPOSLoggerForCategory(8);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_40;
    LOWORD(v29) = 0;
    v16 = "Request validation failed: received request with no locale";
LABEL_26:
    v17 = v15;
LABEL_27:
    v18 = OS_LOG_TYPE_ERROR;
    goto LABEL_28;
  }
  v10 = v9[23];
  if ((v10 & 0x80u) == 0)
    v11 = v9[23];
  else
    v11 = *((_QWORD *)v9 + 1);
  v12 = a1[23];
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *((_QWORD *)a1 + 1);
  if (v11 != v12)
    goto LABEL_32;
  if (v13 >= 0)
    v14 = a1;
  else
    v14 = *(unsigned __int8 **)a1;
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v9, v14, *((_QWORD *)v9 + 1)))
      goto LABEL_32;
  }
  else if (v9[23])
  {
    while (*v9 == *v14)
    {
      ++v9;
      ++v14;
      if (!--v10)
        goto LABEL_42;
    }
LABEL_32:
    v21 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v22 = *(uint64_t **)(*a2 + 16);
      if (*((char *)v22 + 23) < 0)
        v22 = (uint64_t *)*v22;
      if ((a1[23] & 0x80u) == 0)
        v23 = a1;
      else
        v23 = *(unsigned __int8 **)a1;
      v29 = 136315394;
      v30 = v22;
      v31 = 2080;
      v32 = v23;
      v16 = "Request validation failed: received request with a locale (%s) not matching the expected locale (%s)";
      v17 = v21;
      v18 = OS_LOG_TYPE_ERROR;
      v19 = 22;
      goto LABEL_39;
    }
LABEL_40:
    v24 = 0;
    *a3 = 0;
    goto LABEL_41;
  }
LABEL_42:
  v25 = *(_QWORD *)(v7 + 80);
  v26 = SNLPOSLoggerForCategory(8);
  v27 = v26;
  if (!v25)
  {
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      goto LABEL_40;
    LOWORD(v29) = 0;
    v16 = "Request validation failed: received request with no utterance";
    v17 = v27;
    goto LABEL_27;
  }
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v29) = 0;
    _os_log_impl(&dword_1C2196000, v27, OS_LOG_TYPE_DEBUG, "Successfully validated SSU request", (uint8_t *)&v29, 2u);
  }
  v28 = *a2;
  *a2 = 0;
  *(_QWORD *)a3 = v28;
  v24 = 1;
LABEL_41:
  a3[8] = v24;
}

_QWORD *snlp::ssu::proto::SSUValidatedRequest::SSUValidatedRequest(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

void snlp::ssu::proto::SSUValidatedRequest::getRequestId(snlp::ssu::proto::SSUValidatedRequest *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 *v3;
  __int128 v4;

  v2 = *(_QWORD *)(*(_QWORD *)this + 48);
  if (v2)
  {
    v3 = *(__int128 **)(v2 + 16);
    if (*((char *)v3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
    }
    else
    {
      v4 = *v3;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "not provided");
  }
}

uint64_t snlp::ssu::proto::SSUValidatedRequest::getUtterance(snlp::ssu::proto::SSUValidatedRequest *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 80);
}

void snlp::ssu::proto::SSUValidatedRequest::getAppNameMatchingSpanBundleIds(snlp::ssu::proto::SSUValidatedRequest *this@<X0>, const sirinluinternal::MatchingSpan *a2@<X1>, uint64_t *a3@<X8>)
{
  snlp::ssu::proto::SSUValidatedRequest **v4;
  snlp::ssu::proto::SSUValidatedRequest **i;
  snlp::ssu::proto::SSUValidatedRequest *v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  std::string __p;
  char v17;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *(snlp::ssu::proto::SSUValidatedRequest ***)(*(_QWORD *)this + 24);
  for (i = *(snlp::ssu::proto::SSUValidatedRequest ***)(*(_QWORD *)this + 32); v4 != i; ++v4)
  {
    v7 = *v4;
    v8 = (_DWORD *)*((_QWORD *)*v4 + 1);
    v9 = (_DWORD *)*((_QWORD *)*v4 + 2);
    if (v8 != v9)
    {
      while (*v8 != 2)
      {
        if (++v8 == v9)
        {
          v8 = (_DWORD *)*((_QWORD *)*v4 + 2);
          break;
        }
      }
    }
    if (v9 != v8 && snlp::ssu::proto::SSUValidatedRequest::hasLabelAppName(*v4, a2))
    {
      v10 = *((_QWORD *)v7 + 8);
      if (!v10
        || (v11 = *(_QWORD *)(v10 + 104), v11 == *(_QWORD *)(v10 + 112))
        || (v12 = *(_QWORD *)(*(_QWORD *)v11 + 48)) == 0
        || (*(_BYTE *)(v12 + 96) & 1) != 0)
      {
        snlp::ssu::proto::SSUValidatedRequest::extractAppBundleIdFromUsoGraph(this, (const sirinluexternal::UsoGraph **)v7, &__p);
        if (v17)
        {
          v13 = a3[1];
          if (v13 >= a3[2])
          {
            v15 = std::vector<std::string>::__emplace_back_slow_path<std::string&>(a3, (__int128 *)&__p);
          }
          else
          {
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            }
            else
            {
              v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(_QWORD *)(v13 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
              *(_OWORD *)v13 = v14;
            }
            v15 = v13 + 24;
            a3[1] = v13 + 24;
          }
          a3[1] = v15;
          if (v17)
          {
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
    }
  }
}

void sub_1C2265D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  _QWORD *v15;
  uint64_t v16;

  v15[1] = v16;
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  __p = v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL snlp::ssu::proto::SSUValidatedRequest::hasLabelAppName(snlp::ssu::proto::SSUValidatedRequest *this, const sirinluinternal::MatchingSpan *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  int v6;
  void **v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  _BOOL8 v15;
  NSObject *v16;
  void *__p[2];
  unsigned __int8 v19;

  v2 = (unsigned __int8 *)*((_QWORD *)this + 6);
  if (v2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "appName");
    v3 = v2[23];
    if ((v3 & 0x80u) == 0)
      v4 = (void *)v2[23];
    else
      v4 = (void *)*((_QWORD *)v2 + 1);
    v5 = v19;
    v6 = (char)v19;
    if ((v19 & 0x80u) != 0)
      v5 = (unint64_t)__p[1];
    if (v4 == (void *)v5)
    {
      if ((v19 & 0x80u) == 0)
        v7 = __p;
      else
        v7 = (void **)__p[0];
      if ((v3 & 0x80) != 0)
      {
        v15 = memcmp(*(const void **)v2, v7, *((_QWORD *)v2 + 1)) == 0;
      }
      else
      {
        if (!v2[23])
        {
          v15 = 1;
          if (((char)v19 & 0x80000000) == 0)
            return v15;
          goto LABEL_27;
        }
        v8 = v3 - 1;
        do
        {
          v10 = *v2++;
          v9 = v10;
          v12 = *(unsigned __int8 *)v7;
          v7 = (void **)((char *)v7 + 1);
          v11 = v12;
          v14 = v8-- != 0;
          v15 = v9 == v11;
        }
        while (v9 == v11 && v14);
      }
      if (v6 < 0)
LABEL_27:
        operator delete(__p[0]);
    }
    else
    {
      v15 = 0;
      if ((char)v19 < 0)
        goto LABEL_27;
    }
  }
  else
  {
    v16 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_1C2196000, v16, OS_LOG_TYPE_ERROR, "Matching span has no label. Skipping.", (uint8_t *)__p, 2u);
    }
    return 0;
  }
  return v15;
}

uint64_t snlp::ssu::proto::SSUValidatedRequest::extractAppBundleIdFromUsoGraph@<X0>(snlp::ssu::proto::SSUValidatedRequest *this@<X0>, const sirinluexternal::UsoGraph **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t v9[16];
  _BYTE v10[24];
  uint64_t v11;
  uint64_t v12;
  char v13;

  snlp::ssu::proto::SSUValidatedRequest::extractStringNodeDataFromUsoGraph(this, a2, (uint64_t)v10);
  if (v13)
  {
    v4 = v11;
    v5 = v12;
    while (v4 != v5)
    {
      snlp::ssu::proto::SSUValidatedRequest::extractAppBundleIdFromAppNameIdentifier(v4, a3);
      if (a3[1].__r_.__value_.__s.__data_[0])
        return std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::StringNodeData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v10);
      v4 += 120;
    }
    v6 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
      v7 = "Unexpected USO graph: app entity node does not contain a valid app bundle ID in its identifiers. Skipping.";
LABEL_10:
      _os_log_impl(&dword_1C2196000, v6, OS_LOG_TYPE_ERROR, v7, v9, 2u);
    }
  }
  else
  {
    v6 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
      v7 = "Failed to lookup string node data from matching span USO graph";
      goto LABEL_10;
    }
  }
  a3->__r_.__value_.__s.__data_[0] = 0;
  a3[1].__r_.__value_.__s.__data_[0] = 0;
  return std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::StringNodeData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v10);
}

void sub_1C2265FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::StringNodeData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1C2266114(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void snlp::ssu::proto::SSUValidatedRequest::extractStringNodeDataFromUsoGraph(snlp::ssu::proto::SSUValidatedRequest *this@<X0>, const sirinluexternal::UsoGraph **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *SharedUsoVocabManager;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  siri::ontology::oname::graph::ontology_init *v14;
  siri::ontology::oname::graph::ontology_init *Successors;
  const void *v16;
  char *v17;
  siri::ontology::UsoEntityNode *v18;
  __int128 *v19;
  __int128 **v20;
  __int128 **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  std::string __p;
  char v36;
  std::string buf;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 **v44;
  __int128 **v45;
  char *v46;
  char *v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  void **v53;

  if (a2[8])
  {
    SharedUsoVocabManager = (uint64_t *)siri::ontology::getSharedUsoVocabManager(this);
    v7 = *SharedUsoVocabManager;
    v8 = (std::__shared_weak_count *)SharedUsoVocabManager[1];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v51 = v7;
      v52 = v8;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      v51 = *SharedUsoVocabManager;
      v52 = 0;
    }
    v14 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphProtoReader::fromProtobuf((siri::ontology::UsoGraphProtoReader *)&v51, a2[8]);
    if (!v50)
    {
      v25 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C2196000, v25, OS_LOG_TYPE_ERROR, "Failed to convert proto USO graph to SiriOntology format. Skipping.", (uint8_t *)&buf, 2u);
      }
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 72) = 0;
      goto LABEL_52;
    }
    siri::ontology::oname::graph::ontology_init::Argument_entity(v14);
    Successors = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::getSuccessors();
    if (v49 - v48 != 8)
    {
      v26 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C2196000, v26, OS_LOG_TYPE_ERROR, "Failed to lookup node Root->entity. Skipping.", (uint8_t *)&buf, 2u);
      }
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 72) = 0;
      goto LABEL_50;
    }
    siri::ontology::oname::graph::ontology_init::Argument_name(Successors);
    siri::ontology::UsoGraph::getSuccessors();
    if (v47 - v46 == 8)
    {
      v16 = *(const void **)v46;
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v46 + 16))(*(_QWORD *)v46) == 3)
      {
        if (!v17)
          __cxa_bad_cast();
        v18 = (siri::ontology::UsoEntityNode *)v17;
        v19 = (__int128 *)(v17 + 104);
        std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&buf, (__int128 *)(v17 + 104));
        if ((_BYTE)v38)
        {
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          siri::ontology::UsoEntityNode::getIdentifiers(v18);
          v20 = v44;
          v21 = v45;
          v43 = 0;
          v42 = 0uLL;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v42;
          buf.__r_.__value_.__s.__data_[8] = 0;
          if (v45 != v44)
          {
            std::vector<siri::ontology::UsoIdentifier>::__vallocate[abi:ne180100](&v42, v45 - v44);
            v22 = 0;
            v23 = *((_QWORD *)&v42 + 1);
            do
            {
              siri::ontology::UsoIdentifier::UsoIdentifier((std::string *)(v23 + v22), *v20++);
              v22 += 120;
            }
            while (v20 != v21);
            *((_QWORD *)&v42 + 1) = v23 + v22;
          }
          std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, v19);
          if (!v36)
            std::__throw_bad_optional_access[abi:ne180100]();
          buf = __p;
          memset(&__p, 0, sizeof(__p));
          v38 = v42;
          v39 = v43;
          v42 = 0uLL;
          v43 = 0;
          v24 = *(uint64_t **)(*(_QWORD *)this + 80);
          v34 = 6;
          snlp::common::utilities::getAlignmentUtf8StartEndIndexes(v18, v24, &v34, (uint64_t)&v40);
          *(std::string *)a3 = buf;
          memset(&buf, 0, sizeof(buf));
          *(_OWORD *)(a3 + 24) = v38;
          *(_QWORD *)(a3 + 40) = v39;
          v39 = 0;
          v38 = 0uLL;
          *(_QWORD *)(a3 + 64) = v41;
          *(_OWORD *)(a3 + 48) = v40;
          *(_BYTE *)(a3 + 72) = 1;
          v53 = (void **)&v38;
          std::vector<siri::ontology::UsoIdentifier>::__destroy_vector::operator()[abi:ne180100](&v53);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          if (v36 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v42;
          std::vector<siri::ontology::UsoIdentifier>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
          if (v44)
          {
            v45 = v44;
            operator delete(v44);
          }
          goto LABEL_48;
        }
        v27 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          v28 = "Unexpected USO graph: node Entity->name has no string value. Skipping.";
          goto LABEL_46;
        }
LABEL_47:
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 72) = 0;
LABEL_48:
        if (v46)
        {
          v47 = v46;
          operator delete(v46);
        }
LABEL_50:
        if (v48)
        {
          v49 = v48;
          operator delete(v48);
        }
LABEL_52:
        v29 = v50;
        v50 = 0;
        if (v29)
        {
          v30 = MEMORY[0x1C3BB916C]();
          MEMORY[0x1C3BB9B44](v30, 0x10A0C403D23BABBLL);
        }
        v31 = v52;
        if (v52)
        {
          v32 = (unint64_t *)&v52->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        return;
      }
      v27 = SNLPOSLoggerForCategory(8);
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        goto LABEL_47;
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      v28 = "Unexpected USO graph: node Entity->name is not of type StringNode. Skipping.";
    }
    else
    {
      v27 = SNLPOSLoggerForCategory(8);
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        goto LABEL_47;
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      v28 = "Unexpected USO graph: failed to lookup node Entity->name. Skipping.";
    }
LABEL_46:
    _os_log_impl(&dword_1C2196000, v27, OS_LOG_TYPE_ERROR, v28, (uint8_t *)&buf, 2u);
    goto LABEL_47;
  }
  v13 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C2196000, v13, OS_LOG_TYPE_ERROR, "Matching span has no USO graph. Skipping.", (uint8_t *)&buf, 2u);
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 72) = 0;
}

void sub_1C2266650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32)
{
  _QWORD *v32;
  uint64_t v33;
  void *v35;
  void *v36;
  void *v37;

  std::vector<siri::ontology::UsoIdentifier>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v35 = (void *)v32[3];
  if (v35)
  {
    v32[4] = v35;
    operator delete(v35);
  }
  v36 = (void *)v32[6];
  if (v36)
  {
    v32[7] = v36;
    operator delete(v36);
  }
  v37 = (void *)v32[9];
  if (v37)
  {
    v32[10] = v37;
    operator delete(v37);
  }
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)(v33 - 128));
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v33 - 120);
  _Unwind_Resume(a1);
}

void snlp::ssu::proto::SSUValidatedRequest::extractAppBundleIdFromAppNameIdentifier(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  BOOL v3;
  __int128 *v5;
  std::string::size_type size;
  unint64_t v7;
  void **v8;
  uint64_t v9;
  int v10;
  int v11;
  void *v13;
  int v14;
  std::string::size_type v15;
  std::string::size_type v16;
  std::string *p_p;
  uint64_t v18;
  int v19;
  int v20;
  void *v22;
  int v23;
  char v24;
  NSObject *v25;
  uint8_t v26[16];
  std::string v27;
  void *v28[2];
  unsigned __int8 v29;
  std::string __p;
  char v31;

  v3 = (*(_QWORD *)(a1 + 96) & 0xFF00000000) != 0 && *(_QWORD *)(a1 + 96) == 1;
  if (!v3
    || (v5 = (__int128 *)(a1 + 48),
        std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, (__int128 *)(a1 + 48)),
        !v31))
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v28, "item_id");
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, v5);
  if (!v31)
    std::__throw_bad_optional_access[abi:ne180100]();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v7 = v29;
  if ((v29 & 0x80u) != 0)
    v7 = (unint64_t)v28[1];
  if (size == v7)
  {
    if ((v29 & 0x80u) == 0)
      v8 = v28;
    else
      v8 = (void **)v28[0];
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v13 = (void *)__p.__r_.__value_.__r.__words[0];
      v14 = memcmp(__p.__r_.__value_.__l.__data_, v8, __p.__r_.__value_.__l.__size_);
      operator delete(v13);
      if (!v14)
        goto LABEL_37;
    }
    else
    {
      if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
        goto LABEL_37;
      v9 = 0;
      do
      {
        v10 = __p.__r_.__value_.__s.__data_[v9];
        v11 = *((unsigned __int8 *)v8 + v9);
      }
      while (v10 == v11 && HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 != v9++);
      if (v10 == v11)
      {
LABEL_37:
        std::string::basic_string[abi:ne180100]<0>(&__p, "Applications");
        if (*(char *)(a1 + 47) < 0)
          std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
        else
          v27 = *(std::string *)(a1 + 24);
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
        else
          v15 = v27.__r_.__value_.__l.__size_;
        v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v16 = __p.__r_.__value_.__l.__size_;
        if (v15 == v16)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((*((_BYTE *)&v27.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            v22 = (void *)v27.__r_.__value_.__r.__words[0];
            v23 = memcmp(v27.__r_.__value_.__l.__data_, p_p, v27.__r_.__value_.__l.__size_);
            operator delete(v22);
            if (!v23)
              goto LABEL_65;
          }
          else
          {
            if (!*((_BYTE *)&v27.__r_.__value_.__s + 23))
              goto LABEL_65;
            v18 = 0;
            do
            {
              v19 = v27.__r_.__value_.__s.__data_[v18];
              v20 = p_p->__r_.__value_.__s.__data_[v18];
            }
            while (v19 == v20 && HIBYTE(v27.__r_.__value_.__r.__words[2]) - 1 != v18++);
            if (v19 == v20)
            {
LABEL_65:
              if (*(char *)(a1 + 23) < 0)
                std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
              else
                v27 = *(std::string *)a1;
              if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
              {
                if (v27.__r_.__value_.__l.__size_)
                {
                  std::string::__init_copy_ctor_external(a2, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
                  goto LABEL_73;
                }
              }
              else if (*((_BYTE *)&v27.__r_.__value_.__s + 23))
              {
                *a2 = v27;
LABEL_73:
                v24 = 1;
LABEL_77:
                a2[1].__r_.__value_.__s.__data_[0] = v24;
                if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v27.__r_.__value_.__l.__data_);
                goto LABEL_63;
              }
              v25 = SNLPOSLoggerForCategory(8);
              if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)v26 = 0;
                _os_log_impl(&dword_1C2196000, v25, OS_LOG_TYPE_ERROR, "Unexpected USO graph: identifier value is empty. Skipping.", v26, 2u);
              }
              v24 = 0;
              a2->__r_.__value_.__s.__data_[0] = 0;
              goto LABEL_77;
            }
          }
        }
        else if ((*((_BYTE *)&v27.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          operator delete(v27.__r_.__value_.__l.__data_);
        }
        a2->__r_.__value_.__s.__data_[0] = 0;
        a2[1].__r_.__value_.__s.__data_[0] = 0;
LABEL_63:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_34;
      }
    }
  }
  else if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  a2->__r_.__value_.__s.__data_[0] = 0;
  a2[1].__r_.__value_.__s.__data_[0] = 0;
LABEL_34:
  if ((char)v29 < 0)
    operator delete(v28[0]);
}

void sub_1C2266A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a16 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::StringNodeData,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 72))
  {
    v3 = (void **)(a1 + 24);
    std::vector<siri::ontology::UsoIdentifier>::__destroy_vector::operator()[abi:ne180100](&v3);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

BOOL snlp::ssu::proto::SSUValidatedRequest::isFromSiriVocabulary(uint64_t a1)
{
  _DWORD *v1;
  _DWORD *v2;

  v1 = *(_DWORD **)(a1 + 8);
  v2 = *(_DWORD **)(a1 + 16);
  if (v1 != v2)
  {
    while (*v1 != 2)
    {
      if (++v1 == v2)
      {
        v1 = *(_DWORD **)(a1 + 16);
        return v2 != v1;
      }
    }
  }
  return v2 != v1;
}

uint64_t snlp::ssu::proto::SSUValidatedRequest::isExactMatch(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1 && (v2 = *(_QWORD *)(v1 + 104), v2 != *(_QWORD *)(v1 + 112)) && (v3 = *(_QWORD *)(*(_QWORD *)v2 + 48)) != 0)
    return *(_BYTE *)(v3 + 96) & 1;
  else
    return 1;
}

uint64_t snlp::ssu::proto::SSUValidatedRequest::getAppEntityMatchingSpanInfos@<X0>(uint64_t result@<X0>, const sirinluinternal::MatchingSpan *a2@<X1>, uint64_t a3@<X8>)
{
  snlp::ssu::proto::SSUValidatedRequest **v4;
  snlp::ssu::proto::SSUValidatedRequest **v5;
  snlp::ssu::proto::SSUValidatedRequest *v7;
  const sirinluexternal::UsoGraph **v8;
  _DWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  NSObject *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20[5];
  char v21;
  uint8_t buf[8];
  std::string *v23;
  std::string *v24;
  unint64_t v25;
  uint64_t v26;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = *(snlp::ssu::proto::SSUValidatedRequest ***)(*(_QWORD *)result + 24);
  v5 = *(snlp::ssu::proto::SSUValidatedRequest ***)(*(_QWORD *)result + 32);
  if (v4 != v5)
  {
    v7 = (snlp::ssu::proto::SSUValidatedRequest *)result;
    do
    {
      v8 = (const sirinluexternal::UsoGraph **)*v4;
      v9 = (_DWORD *)*((_QWORD *)*v4 + 1);
      v10 = (_DWORD *)*((_QWORD *)*v4 + 2);
      if (v9 != v10)
      {
        while (*v9 != 2)
        {
          if (++v9 == v10)
          {
            v9 = (_DWORD *)*((_QWORD *)*v4 + 2);
            break;
          }
        }
      }
      if (v10 != v9)
      {
        result = snlp::ssu::proto::SSUValidatedRequest::hasLabelAppEntity(*v4, a2);
        if ((_DWORD)result)
        {
          snlp::ssu::proto::SSUValidatedRequest::buildAppEntitySpanInfoFromUsoGraph(v7, v8, (unsigned __int8 *)a2, (uint64_t)v20);
          if (v21)
          {
            v12 = *(_QWORD *)(a3 + 8);
            v11 = *(_QWORD *)(a3 + 16);
            if (v12 >= v11)
            {
              v15 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - *(_QWORD *)a3) >> 3);
              v16 = v15 + 1;
              if ((unint64_t)(v15 + 1) > 0x2E8BA2E8BA2E8BALL)
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              v17 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - *(_QWORD *)a3) >> 3);
              if (2 * v17 > v16)
                v16 = 2 * v17;
              if (v17 >= 0x1745D1745D1745DLL)
                v18 = 0x2E8BA2E8BA2E8BALL;
              else
                v18 = v16;
              v26 = a3 + 16;
              if (v18)
                v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<sirinluinternal::MatchingSpan>>(v18);
              else
                v19 = 0;
              *(_QWORD *)buf = v18;
              v23 = (std::string *)(v18 + 88 * v15);
              v24 = v23;
              v25 = v18 + 88 * v19;
              std::allocator<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::construct[abi:ne180100]<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo&>(v23, v20);
              v24 = (std::string *)((char *)v24 + 88);
              std::vector<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::__swap_out_circular_buffer((uint64_t *)a3, buf);
              v13 = *(_QWORD *)(a3 + 8);
              std::__split_buffer<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              std::allocator<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::construct[abi:ne180100]<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo&>(*(std::string **)(a3 + 8), v20);
              v13 = v12 + 88;
              *(_QWORD *)(a3 + 8) = v13;
            }
            *(_QWORD *)(a3 + 8) = v13;
          }
          else
          {
            v14 = SNLPOSLoggerForCategory(8);
            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1C2196000, v14, OS_LOG_TYPE_ERROR, "Failed to build app entity from matching span. Skipping.", buf, 2u);
            }
          }
          result = std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v20);
        }
      }
      ++v4;
    }
    while (v4 != v5);
  }
  return result;
}

void sub_1C2266D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a9);
  std::vector<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

BOOL snlp::ssu::proto::SSUValidatedRequest::hasLabelAppEntity(snlp::ssu::proto::SSUValidatedRequest *this, const sirinluinternal::MatchingSpan *a2)
{
  unsigned __int8 **v3;
  size_t v4;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  void **p_s1;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v15;
  _BOOL8 v16;
  NSObject *v17;
  void *v18;
  void *__s1;
  size_t __n;
  unsigned __int8 v22;

  if (*((_QWORD *)this + 6))
  {
    std::string::basic_string[abi:ne180100]<0>(&__s1, "appEntity");
    v3 = (unsigned __int8 **)*((_QWORD *)this + 6);
    if ((v22 & 0x80u) == 0)
      v4 = v22;
    else
      v4 = __n;
    v5 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
    v6 = (char)v5;
    if ((char)v5 < 0)
      v5 = v3[1];
    if ((unsigned __int8 *)v4 == v5)
    {
      if (v6 >= 0)
        v7 = (unsigned __int8 *)*((_QWORD *)this + 6);
      else
        v7 = *v3;
      if ((v22 & 0x80) != 0)
      {
        v18 = __s1;
        v16 = memcmp(__s1, v7, __n) == 0;
        goto LABEL_27;
      }
      if (!v22)
        return 1;
      v8 = v22 - 1;
      p_s1 = &__s1;
      do
      {
        v11 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        v10 = v11;
        v13 = *v7++;
        v12 = v13;
        v15 = v8-- != 0;
        v16 = v10 == v12;
      }
      while (v10 == v12 && v15);
    }
    else
    {
      v16 = 0;
    }
    if ((v22 & 0x80) != 0)
    {
      v18 = __s1;
LABEL_27:
      operator delete(v18);
    }
  }
  else
  {
    v17 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__s1) = 0;
      _os_log_impl(&dword_1C2196000, v17, OS_LOG_TYPE_ERROR, "Matching span has no label. Skipping.", (uint8_t *)&__s1, 2u);
    }
    return 0;
  }
  return v16;
}

uint64_t snlp::ssu::proto::SSUValidatedRequest::buildAppEntitySpanInfoFromUsoGraph@<X0>(snlp::ssu::proto::SSUValidatedRequest *a1@<X0>, const sirinluexternal::UsoGraph **a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  size_t v10;
  std::string::size_type size;
  std::string *p_p;
  uint64_t v13;
  void **p_s1;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v20;
  BOOL v21;
  NSObject *v22;
  const char *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  std::string::size_type v27;
  int v28;
  std::string *v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  _BOOL4 v34;
  __int128 v37;
  __int128 v38;
  std::string __p;
  __int128 v40;
  std::string v41;
  std::string v42;
  std::string v43;
  void *__s1;
  size_t __n;
  unsigned __int8 v46;
  std::string v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  char v51;
  char v52;
  std::string *v53;

  snlp::ssu::proto::SSUValidatedRequest::extractStringNodeDataFromUsoGraph(a1, a2, (uint64_t)&v47);
  if (!v52)
  {
    v22 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      v23 = "Failed to lookup string node data from matching span USO graph";
LABEL_37:
      _os_log_impl(&dword_1C2196000, v22, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&__p, 2u);
    }
LABEL_38:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 88) = 0;
    return std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::StringNodeData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v47);
  }
  if (!v51)
  {
    v22 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      v23 = "Failed to extract UTF-8 indexes from the app entity span graph string node alignment";
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  std::string::basic_string[abi:ne180100]<0>(&__s1, "app_entity_type");
  v6 = v48;
  v7 = v49;
  if (v48 == v49)
  {
LABEL_42:
    v24 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C2196000, v24, OS_LOG_TYPE_ERROR, "Failed to extract app_entity_type identifier from the app entity span graph", (uint8_t *)&__p, 2u);
    }
LABEL_68:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 88) = 0;
    goto LABEL_69;
  }
  do
  {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, (__int128 *)(v6 + 48));
    v8 = v40;
    if (!(_BYTE)v40)
      goto LABEL_30;
    v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((v46 & 0x80u) == 0)
      v10 = v46;
    else
      v10 = __n;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if (v10 == size)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((v46 & 0x80) != 0)
      {
        v21 = memcmp(__s1, p_p, __n) == 0;
        goto LABEL_26;
      }
      if (v46)
      {
        v13 = v46 - 1;
        p_s1 = &__s1;
        do
        {
          v16 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          v15 = v16;
          v18 = p_p->__r_.__value_.__s.__data_[0];
          p_p = (std::string *)((char *)p_p + 1);
          v17 = v18;
          v20 = v13-- != 0;
          v21 = v15 == v17;
        }
        while (v15 == v17 && v20);
LABEL_26:
        if (!v8)
          goto LABEL_29;
        goto LABEL_27;
      }
      v21 = 1;
    }
    else
    {
      v21 = 0;
    }
LABEL_27:
    if (v9 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_29:
    if (v21)
      goto LABEL_39;
LABEL_30:
    v6 += 120;
  }
  while (v6 != v7);
  v6 = v7;
LABEL_39:
  if (v6 == v49)
    goto LABEL_42;
  if (*(char *)(v6 + 47) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v6 + 24), *(_QWORD *)(v6 + 32));
  else
    __p = *(std::string *)(v6 + 24);
  v25 = a3[23];
  if ((v25 & 0x80u) == 0)
    v26 = a3[23];
  else
    v26 = *((_QWORD *)a3 + 1);
  v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v28 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v27 = __p.__r_.__value_.__l.__size_;
  if (v26 != v27)
  {
    v34 = 1;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_67;
    goto LABEL_73;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &__p;
  else
    v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((v25 & 0x80) != 0)
  {
    v34 = memcmp(*(const void **)a3, v29, *((_QWORD *)a3 + 1)) != 0;
    goto LABEL_66;
  }
  if (!a3[23])
  {
    v34 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_67;
LABEL_73:
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v34)
      goto LABEL_74;
    goto LABEL_68;
  }
  v30 = v25 - 1;
  do
  {
    v32 = *a3++;
    v31 = v32;
    v33 = v29->__r_.__value_.__s.__data_[0];
    v29 = (std::string *)((char *)v29 + 1);
    v34 = v31 != v33;
  }
  while (v31 == v33 && v30-- != 0);
LABEL_66:
  if (v28 < 0)
    goto LABEL_73;
LABEL_67:
  if (v34)
    goto LABEL_68;
LABEL_74:
  if (*(char *)(v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
  }
  else
  {
    v37 = *(_OWORD *)v6;
    v43.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v37;
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
  else
    __p = v47;
  v40 = v50;
  memset(&v41, 0, sizeof(v41));
  std::vector<siri::ontology::UsoIdentifier>::__init_with_size[abi:ne180100]<siri::ontology::UsoIdentifier*,siri::ontology::UsoIdentifier*>(&v41, v48, v49, 0xEEEEEEEEEEEEEEEFLL * ((v49 - v48) >> 3));
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v42, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  else
    v42 = v43;
  *(std::string *)a4 = __p;
  memset(&__p, 0, sizeof(__p));
  *(_OWORD *)(a4 + 24) = v40;
  *(std::string *)(a4 + 40) = v41;
  memset(&v41, 0, sizeof(v41));
  v38 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
  *(_QWORD *)(a4 + 80) = *((_QWORD *)&v42.__r_.__value_.__l + 2);
  *(_OWORD *)(a4 + 64) = v38;
  memset(&v42, 0, sizeof(v42));
  *(_BYTE *)(a4 + 88) = 1;
  v53 = &v41;
  std::vector<siri::ontology::UsoIdentifier>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
LABEL_69:
  if ((char)v46 < 0)
    operator delete(__s1);
  return std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::StringNodeData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v47);
}

void sub_1C2267374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  *(_QWORD *)(v38 - 88) = v37;
  std::vector<siri::ontology::UsoIdentifier>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 88));
  if (a14 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (a36 < 0)
    operator delete(a31);
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::StringNodeData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void std::allocator<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::construct[abi:ne180100]<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo&>(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *(__int128 *)((char *)a2 + 24);
  this[1].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  std::vector<siri::ontology::UsoIdentifier>::__init_with_size[abi:ne180100]<siri::ontology::UsoIdentifier*,siri::ontology::UsoIdentifier*>((std::string *)((char *)this + 40), *((_QWORD *)a2 + 5), *((_QWORD *)a2 + 6), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  v6 = (std::string *)((char *)this + 64);
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v7 = a2[4];
    this[3].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 10);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1C22674A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<siri::ontology::UsoIdentifier>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

void std::vector<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::allocator<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = (void **)(a1 + 40);
  std::vector<siri::ontology::UsoIdentifier>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::vector<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 88;
      v6 = *(_OWORD *)(v3 - 88);
      *(_QWORD *)(v4 - 72) = *(_QWORD *)(v3 - 72);
      *(_OWORD *)(v4 - 88) = v6;
      *(_QWORD *)(v3 - 80) = 0;
      *(_QWORD *)(v3 - 72) = 0;
      *(_QWORD *)(v3 - 88) = 0;
      *(_OWORD *)(v4 - 64) = *(_OWORD *)(v3 - 64);
      *(_QWORD *)(v4 - 40) = 0;
      *(_QWORD *)(v4 - 32) = 0;
      *(_QWORD *)(v4 - 48) = 0;
      *(_OWORD *)(v4 - 48) = *(_OWORD *)(v3 - 48);
      *(_QWORD *)(v4 - 32) = *(_QWORD *)(v3 - 32);
      *(_QWORD *)(v3 - 48) = 0;
      *(_QWORD *)(v3 - 40) = 0;
      *(_QWORD *)(v3 - 32) = 0;
      v7 = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v7;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      *(_QWORD *)(v3 - 24) = 0;
      v4 -= 88;
      v3 -= 88;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v8 = *result;
  *result = v5;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 88;
    std::allocator<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::destroy[abi:ne180100](i - 88);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void snlp::ssu::proto::SSUValidatedRequest::getOnScreenSalientEntityAppBundleIds(snlp::ssu::proto::SSUValidatedRequest *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  std::string __p;
  char v9;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(uint64_t **)(*(_QWORD *)this + 56);
  v4 = *(uint64_t **)(*(_QWORD *)this + 64);
  while (v3 != v4)
  {
    snlp::ssu::proto::SSUValidatedRequest::getOnScreenAppBundleId(*v3, &__p);
    if (v9)
    {
      v5 = a2[1];
      if (v5 >= a2[2])
      {
        v7 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a2, (__int128 *)&__p);
      }
      else
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)a2[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v5 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)v5 = v6;
        }
        v7 = v5 + 24;
        a2[1] = v5 + 24;
      }
      a2[1] = v7;
      if (v9)
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    ++v3;
  }
}

void sub_1C226777C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v17 = v16;
  v15[1] = v17;
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  __p = v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void snlp::ssu::proto::SSUValidatedRequest::getOnScreenAppBundleId(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  __int16 v10;
  __int16 v11;

  v3 = *(_QWORD *)(a1 + 64);
  if (!v3)
    goto LABEL_14;
  if ((*(_BYTE *)(v3 + 44) & 1) == 0 || *(_DWORD *)(v3 + 40) != 2)
    goto LABEL_13;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    v7 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 0;
      v8 = "Warning: ON_SCREEN salient entity is missing appBundleId field. Skipping.";
      v9 = (uint8_t *)&v11;
LABEL_12:
      _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_DEFAULT, v8, v9, 2u);
    }
LABEL_13:
    LOBYTE(v3) = 0;
LABEL_14:
    a2->__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_15;
  }
  v5 = *(__int128 **)(v4 + 8);
  if (!v5)
  {
    v7 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 0;
      v8 = "Warning: ON_SCREEN salient entity appBundleId field is missing string value. Skipping.";
      v9 = (uint8_t *)&v10;
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  if (*((char *)v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *v5;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
  }
  LOBYTE(v3) = 1;
LABEL_15:
  a2[1].__r_.__value_.__s.__data_[0] = v3;
}

_QWORD *snlp::ssu::proto::operator<<(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"SSUValidatedRequest::AppEntitySpanInfo[\n", 40);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"    utteranceFragment='", 23);
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"',\n", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"    startIndexUtf8=", 19);
  v9 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)",\n", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"    endIndexUtf8=", 17);
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)",\n", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"    parameterId='", 17);
  v14 = *(_QWORD *)(a2 + 64);
  v13 = a2 + 64;
  v12 = v14;
  v15 = *(char *)(v13 + 23);
  if (v15 >= 0)
    v16 = v13;
  else
    v16 = v12;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(v13 + 23);
  else
    v17 = *(_QWORD *)(v13 + 8);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v16, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"'\n", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"  ]", 3);
  return a1;
}

_QWORD *snlp::ssu::encoder::SSUEncoder::SSUEncoder(_QWORD *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *result = v3;
  v4 = *a2;
  *a2 = 0;
  result[1] = v4;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *result = v3;
  v4 = *a2;
  *a2 = 0;
  result[1] = v4;
  return result;
}

uint64_t *snlp::ssu::encoder::SSUEncoder::buildFromAssetsDirectory@<X0>(char *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  NSObject *v8;
  os_signpost_id_t v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  _BYTE buf[24];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v8 = SNLPOSLoggerForCategory(7);
  v9 = os_signpost_id_generate(v8);
  v10 = SNLPOSLoggerForCategory(7);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v11 = v10;
    if (os_signpost_enabled(v10))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v11, OS_SIGNPOST_INTERVAL_BEGIN, v9, "SSUEncoder Build from assets directory", "", buf, 2u);
    }
  }
  v12 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C2196000, v12, OS_LOG_TYPE_DEFAULT, "BEGIN \"SSUEncoder Build from assets directory\"", buf, 2u);
  }
  v13 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (a1[23] >= 0)
      v14 = a1;
    else
      v14 = *(char **)a1;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v14;
    _os_log_impl(&dword_1C2196000, v13, OS_LOG_TYPE_DEBUG, "Building SSUEncoder from assets directory: %s", buf, 0xCu);
  }
  snlp::ssu::espresso::SSUNessieModel::buildFromAssetsDirectory((snlp::ssu::espresso::SSUNessieModel *)a1, a2, a3, &v23);
  v15 = v23;
  snlp::ssu::encoder::SSUPreprocessor::buildFromAssetsDirectory((snlp::ssu::encoder::SSUPreprocessor *)a1, *(const std::__fs::filesystem::path **)(v23 + 8), buf);
  v16 = *(_QWORD *)buf;
  v22 = *(_QWORD *)buf;
  v17 = SNLPOSLoggerForCategory(7);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v18 = v17;
    if (os_signpost_enabled(v17))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v18, OS_SIGNPOST_INTERVAL_END, v9, "SSUEncoder Build from assets directory", "", buf, 2u);
    }
  }
  v19 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C2196000, v19, OS_LOG_TYPE_DEFAULT, "END \"SSUEncoder Build from assets directory\"", buf, 2u);
  }
  v20 = (_QWORD *)operator new();
  v22 = 0;
  *(_QWORD *)buf = 0;
  *v20 = v16;
  v20[1] = v15;
  *a4 = v20;
  std::unique_ptr<snlp::ssu::encoder::SSUPreprocessor const>::reset[abi:ne180100]((uint64_t *)buf);
  return std::unique_ptr<snlp::ssu::encoder::SSUPreprocessor const>::reset[abi:ne180100](&v22);
}

void sub_1C2267CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::unique_ptr<snlp::ssu::encoder::SSUPreprocessor const>::reset[abi:ne180100](&a9);
  std::default_delete<snlp::ssu::espresso::SSUNessieModel const>::operator()[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::encoder::SSUEncoder::getMaxBatchSize(snlp::ssu::encoder::SSUEncoder *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24);
}

void snlp::ssu::encoder::SSUEncoder::computeEncoding(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v5;
  std::string *v6;
  _QWORD v7[2];
  char v8;
  std::string v9;
  __int128 v10;

  *(_QWORD *)&v10 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v9 = *(std::string *)a2;
  v5 = 0;
  v6 = 0;
  v7[0] = 0;
  v7[1] = &v5;
  v8 = 0;
  v5 = (std::string *)operator new(0x18uLL);
  v6 = v5;
  v7[0] = v5 + 1;
  v6 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v7, (__int128 *)&v9, &v10, v5);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  snlp::ssu::encoder::SSUEncoder::computeEncodings(a1, (uint64_t *)&v5, a3);
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
}

void sub_1C2267DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(exception_object);
}

void snlp::ssu::encoder::SSUEncoder::computeEncodings(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  os_signpost_id_t v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  _BOOL8 v15;
  NSObject *v16;
  std::string::size_type v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  std::runtime_error *exception;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  std::string::size_type size;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::runtime_error *v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  void *v51[2];
  uint64_t v52;
  void *v53[2];
  uint64_t v54;
  void *__p[2];
  std::string::size_type v56;
  std::string v57[2];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string buf;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v6 = SNLPOSLoggerForCategory(7);
  v7 = os_signpost_id_generate(v6);
  v8 = SNLPOSLoggerForCategory(7);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v9 = v8;
    if (os_signpost_enabled(v8))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "SSUEncoder Encoding computation", "", (uint8_t *)&buf, 2u);
    }
  }
  v10 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_DEFAULT, "BEGIN \"SSUEncoder Encoding computation\"", (uint8_t *)&buf, 2u);
  }
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  v12 = *(_QWORD *)(a1 + 8);
  if (v11 < *(_QWORD *)(v12 + 16))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v62, v11);
    v26 = std::string::insert(&v62, 0, "Batch size implied by utterancesBatch (");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    v28 = std::string::append(&v63, ") is lower than the minimum allowed by the model (");
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v61, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16));
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v61;
    else
      v30 = (std::string *)v61.__r_.__value_.__r.__words[0];
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    else
      size = v61.__r_.__value_.__l.__size_;
    v32 = std::string::append(&v64, (const std::string::value_type *)v30, size);
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v57[0].__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57[0].__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    v34 = std::string::append(v57, ")");
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &buf);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  if (v11 > *(_QWORD *)(v12 + 24))
  {
    v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v62, v11);
    v37 = std::string::insert(&v62, 0, "Batch size implied by utterancesBatch (");
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    v39 = std::string::append(&v63, ") is higher than the maximum allowed by this model instance (");
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v61, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24));
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = &v61;
    else
      v41 = (std::string *)v61.__r_.__value_.__r.__words[0];
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    else
      v42 = v61.__r_.__value_.__l.__size_;
    v43 = std::string::append(&v64, (const std::string::value_type *)v41, v42);
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v57[0].__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57[0].__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    v45 = std::string::append(v57, ")");
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v36, &buf);
    v36->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  v13 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v11;
    _os_log_impl(&dword_1C2196000, v13, OS_LOG_TYPE_DEBUG, "Computing encodings for batch of size %lu", (uint8_t *)&buf, 0xCu);
  }
  v14 = SNLPOSLoggerForCategory(8);
  v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
  if (v15)
    snlp::ssu::encoder::SSUEncoder::logUtterancesBatch(v15, a2);
  v16 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C2196000, v16, OS_LOG_TYPE_DEBUG, "Step 1: Preprocessing utterances (using Sentencepiece model)", (uint8_t *)&buf, 2u);
  }
  snlp::ssu::encoder::SSUPreprocessor::tokenizeSentencePieces(*(uint64_t **)a1, a2, (uint64_t)&buf);
  v48 = v67;
  v49 = v66;
  *(_OWORD *)&v57[0].__r_.__value_.__l.__data_ = v66;
  *(_OWORD *)&v57[0].__r_.__value_.__r.__words[2] = v67;
  v47 = *((_QWORD *)&v68 + 1);
  *(_OWORD *)&v57[1].__r_.__value_.__r.__words[1] = v68;
  v50 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  v17 = buf.__r_.__value_.__r.__words[2];
  v18 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C2196000, v18, OS_LOG_TYPE_DEBUG, "Step 2: Running Nessie model inference on sentence pieces", (uint8_t *)&buf, 2u);
  }
  v19 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)v51 = v49;
  v52 = v48;
  memset(v57, 0, sizeof(v57));
  *(_OWORD *)v53 = *(_OWORD *)&v57[1].__r_.__value_.__l.__data_;
  v54 = v47;
  *(_OWORD *)__p = v50;
  v56 = v17;
  v59 = 0;
  v60 = 0;
  v58 = 0;
  snlp::ssu::espresso::SSUNessieModel::forward(v19, (__int128 *)v51, &buf);
  if (__p[0])
    operator delete(__p[0]);
  if (v53[0])
    operator delete(v53[0]);
  if (v51[0])
    operator delete(v51[0]);
  v20 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v64.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C2196000, v20, OS_LOG_TYPE_DEBUG, "Finished computing Nessie encodings", (uint8_t *)&v64, 2u);
  }
  *(_OWORD *)a3 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  v21 = v67;
  *(_QWORD *)(a3 + 16) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
  *(_OWORD *)(a3 + 24) = v66;
  *(_QWORD *)(a3 + 40) = v21;
  v22 = SNLPOSLoggerForCategory(7);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v23 = v22;
    if (os_signpost_enabled(v22))
    {
      LOWORD(v64.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v23, OS_SIGNPOST_INTERVAL_END, v7, "SSUEncoder Encoding computation", "", (uint8_t *)&v64, 2u);
    }
  }
  v24 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v64.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C2196000, v24, OS_LOG_TYPE_DEFAULT, "END \"SSUEncoder Encoding computation\"", (uint8_t *)&v64, 2u);
  }
}

void sub_1C2268444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  void *v51;
  int v52;
  uint64_t v53;

  if (*(char *)(v53 - 153) < 0)
    operator delete(*(void **)(v53 - 176));
  if (a32 < 0)
    operator delete(__p);
  if (a45 < 0)
    operator delete(a40);
  if (*(char *)(v53 - 185) < 0)
    operator delete(*(void **)(v53 - 208));
  if (*(char *)(v53 - 217) < 0)
    operator delete(*(void **)(v53 - 240));
  if (a51 < 0)
  {
    operator delete(a46);
    if ((v52 & 1) == 0)
LABEL_16:
      _Unwind_Resume(a1);
  }
  else if (!v52)
  {
    goto LABEL_16;
  }
  __cxa_free_exception(v51);
  goto LABEL_16;
}

uint64_t snlp::ssu::encoder::SSUEncoder::logUtterancesBatch(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  _QWORD *v7;
  const char *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  NSObject *v12;
  void **v13;
  uint64_t v14;
  uint64_t v16;
  void *__p;
  char v18;
  _QWORD v19[2];
  _QWORD v20[11];
  char v21;
  uint64_t v22;
  uint8_t buf[4];
  unint64_t v24;
  __int16 v25;
  void **v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a2 + 1;
  v16 = a2[1];
  v4 = *a2;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v19);
  v5 = *a2;
  for (i = *v3; v5 != i; v5 += 24)
  {
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" - '", 4);
    v8 = (const char *)v5;
    if (*(char *)(v5 + 23) < 0)
      v8 = *(const char **)v5;
    v9 = strlen(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"'", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" (UTF-8 code units: ", 20);
    snlp::ssu::encoder::SSUEncoder::stringHexRepresentation(v19, (uint64_t *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)")\n", 2);
  }
  v12 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::str();
    v13 = v18 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 134218243;
    v24 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v4) >> 3);
    v25 = 2085;
    v26 = v13;
    _os_log_impl(&dword_1C2196000, v12, OS_LOG_TYPE_DEBUG, "Computing Nessie encodings for %lu utterances:\n%{sensitive}s", buf, 0x16u);
    if (v18 < 0)
      operator delete(__p);
  }
  v19[0] = *MEMORY[0x1E0DE4F50];
  v14 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v20[0] = v14;
  v20[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v21 < 0)
    operator delete((void *)v20[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3BB9A90](&v22);
}

void sub_1C2268794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *snlp::ssu::encoder::SSUEncoder::stringHexRepresentation(_QWORD *result, uint64_t *a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  char v10;
  char v11;

  v2 = *((char *)a2 + 23);
  if (v2 >= 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  if (v2 >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = a2[1];
  if (v4)
  {
    v5 = result + 2;
    do
    {
      v10 = 91;
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v10, 1);
      v7 = *v6;
      *(_DWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 8) = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 8) & 0xFFFFFFB5 | 8;
      *(_DWORD *)((char *)v6 + *(_QWORD *)(v7 - 24) + 8) |= 0x200u;
      *(uint64_t *)((char *)v6 + *(_QWORD *)(v7 - 24) + 24) = 2;
      v9 = 48;
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, &v9);
      v3 = (uint64_t *)((char *)v3 + 1);
      v8 = (_QWORD *)std::ostream::operator<<();
      v11 = 93;
      result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v11, 1);
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_1C2268C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1C2268F1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C2269054(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C22690F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C22693E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, _QWORD *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  void *v48;
  void *v49;
  uint64_t *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  void *v68;

  MEMORY[0x1C3BB9B44](v51, 0x10F3C4094FE2C12);
  if (a20 < 0)
    operator delete(__p);

  if (a26 < 0)
    operator delete(a21);

  if (a32 < 0)
    operator delete(a27);

  MEMORY[0x1C3BB8674](&a33);
  if (a2 == 1)
  {
    v59 = __cxa_begin_catch(a1);
    v60 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v49, "loggingComponentString");
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v49, "loggingComponentString");
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(void *))(*(_QWORD *)v59 + 16))(v59);
    objc_msgSend(v60, "stringWithFormat:", CFSTR("%@ Asset Error when creating the %@ (ITFM) inference orchestrator: %s"));
    v62 = (void *)objc_claimAutoreleasedReturnValue();

    if (a14)
    {
      v63 = (void *)MEMORY[0x1E0CB35C8];
      objc_msgSend(v49, "errorDomain");
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      v65 = *MEMORY[0x1E0CB2D68];
      *(_QWORD *)(v58 - 224) = *MEMORY[0x1E0CB2D50];
      *(_QWORD *)(v58 - 216) = v65;
      *(_QWORD *)(v58 - 208) = v62;
      *(_QWORD *)(v58 - 200) = v62;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v58 - 208, v58 - 224, 2);
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v63, "errorWithDomain:code:userInfo:", v64, 1, v66);
      *a14 = (id)objc_claimAutoreleasedReturnValue();

    }
    __cxa_end_catch();
    JUMPOUT(0x1C2269390);
  }
  if (a42 < 0)
    operator delete(a37);
  v67 = *v50;
  *v50 = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67);

  _Unwind_Resume(a1);
}

void sub_1C2269790(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C22698E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void snlp::common::text_uso_graph::ActionListParser::node(uint64_t a1)
{
  unint64_t v2;
  __int128 v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;

  std::operator+<char>();
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= *(_QWORD *)(a1 + 24))
  {
    v4 = std::vector<std::string const>::__push_back_slow_path<std::string const>((std::string **)(a1 + 8), (__int128 *)__p);
  }
  else
  {
    if (SHIBYTE(v6) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 16), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      v3 = *(_OWORD *)__p;
      *(_QWORD *)(v2 + 16) = v6;
      *(_OWORD *)v2 = v3;
    }
    v4 = v2 + 24;
    *(_QWORD *)(a1 + 16) = v2 + 24;
  }
  *(_QWORD *)(a1 + 16) = v4;
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1C22699A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 16) = v16;
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void snlp::common::text_uso_graph::ActionListParser::edge(uint64_t a1)
{
  unint64_t v2;
  __int128 v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;

  std::operator+<char>();
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= *(_QWORD *)(a1 + 24))
  {
    v4 = std::vector<std::string const>::__push_back_slow_path<std::string const>((std::string **)(a1 + 8), (__int128 *)__p);
  }
  else
  {
    if (SHIBYTE(v6) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 16), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      v3 = *(_OWORD *)__p;
      *(_QWORD *)(v2 + 16) = v6;
      *(_OWORD *)v2 = v3;
    }
    v4 = v2 + 24;
    *(_QWORD *)(a1 + 16) = v2 + 24;
  }
  *(_QWORD *)(a1 + 16) = v4;
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1C2269A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 16) = v16;
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void snlp::common::text_uso_graph::ActionListParser::stringValue(uint64_t a1)
{
  unint64_t v2;
  __int128 v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;

  std::operator+<char>();
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= *(_QWORD *)(a1 + 24))
  {
    v4 = std::vector<std::string const>::__push_back_slow_path<std::string const>((std::string **)(a1 + 8), (__int128 *)__p);
  }
  else
  {
    if (SHIBYTE(v6) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 16), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      v3 = *(_OWORD *)__p;
      *(_QWORD *)(v2 + 16) = v6;
      *(_OWORD *)v2 = v3;
    }
    v4 = v2 + 24;
    *(_QWORD *)(a1 + 16) = v2 + 24;
  }
  *(_QWORD *)(a1 + 16) = v4;
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1C2269B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 16) = v16;
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void snlp::common::text_uso_graph::ActionListParser::integerValue(snlp::common::text_uso_graph::ActionListParser *this, int __val)
{
  std::string *v3;
  std::string *v4;
  char v5;
  uint64_t v6;
  std::string v7;
  std::string __p;

  std::to_string(&v7, __val);
  v3 = std::string::insert(&v7, 0, "integerValue=");
  __p = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  v4 = (std::string *)*((_QWORD *)this + 2);
  if ((unint64_t)v4 >= *((_QWORD *)this + 3))
  {
    v6 = std::vector<std::string const>::__push_back_slow_path<std::string const>((std::string **)this + 1, (__int128 *)&__p);
    v5 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else
  {
    v5 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(*((std::string **)this + 2), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      *v4 = __p;
    v6 = (uint64_t)&v4[1];
    *((_QWORD *)this + 2) = v4 + 1;
  }
  *((_QWORD *)this + 2) = v6;
  if (v5 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_1C2269C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  v24 = v22;
  *(_QWORD *)(v21 + 16) = v24;
  operator delete(v23);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void snlp::common::text_uso_graph::ActionListParser::indentation(snlp::common::text_uso_graph::ActionListParser *this, unsigned int __val)
{
  std::string *v3;
  std::string *v4;
  char v5;
  uint64_t v6;
  std::string v7;
  std::string __p;

  std::to_string(&v7, __val);
  v3 = std::string::insert(&v7, 0, "indentation=");
  __p = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  v4 = (std::string *)*((_QWORD *)this + 2);
  if ((unint64_t)v4 >= *((_QWORD *)this + 3))
  {
    v6 = std::vector<std::string const>::__push_back_slow_path<std::string const>((std::string **)this + 1, (__int128 *)&__p);
    v5 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else
  {
    v5 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(*((std::string **)this + 2), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      *v4 = __p;
    v6 = (uint64_t)&v4[1];
    *((_QWORD *)this + 2) = v4 + 1;
  }
  *((_QWORD *)this + 2) = v6;
  if (v5 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_1C2269D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  v24 = v22;
  *(_QWORD *)(v21 + 16) = v24;
  operator delete(v23);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void snlp::common::text_uso_graph::ActionListParser::alias(uint64_t a1)
{
  unint64_t v2;
  __int128 v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;

  std::operator+<char>();
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= *(_QWORD *)(a1 + 24))
  {
    v4 = std::vector<std::string const>::__push_back_slow_path<std::string const>((std::string **)(a1 + 8), (__int128 *)__p);
  }
  else
  {
    if (SHIBYTE(v6) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 16), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      v3 = *(_OWORD *)__p;
      *(_QWORD *)(v2 + 16) = v6;
      *(_OWORD *)v2 = v3;
    }
    v4 = v2 + 24;
    *(_QWORD *)(a1 + 16) = v2 + 24;
  }
  *(_QWORD *)(a1 + 16) = v4;
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1C2269E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 16) = v16;
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void snlp::common::text_uso_graph::ActionListParser::textAlignment(snlp::common::text_uso_graph::ActionListParser *this, int __val, int a3)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  std::string *v12;
  char v13;
  uint64_t v14;
  std::string __p;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;

  std::to_string(&v16, __val);
  v5 = std::string::insert(&v16, 0, "textAlignment=");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v17, ":");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v11 = std::string::append(&v18, (const std::string::value_type *)p_p, size);
  v19 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v12 = (std::string *)*((_QWORD *)this + 2);
  if ((unint64_t)v12 >= *((_QWORD *)this + 3))
  {
    v14 = std::vector<std::string const>::__push_back_slow_path<std::string const>((std::string **)this + 1, (__int128 *)&v19);
    v13 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  }
  else
  {
    v13 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(*((std::string **)this + 2), v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    else
      *v12 = v19;
    v14 = (uint64_t)&v12[1];
    *((_QWORD *)this + 2) = v12 + 1;
  }
  *((_QWORD *)this + 2) = v14;
  if (v13 < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_1C2269FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;

  v36 = v34;
  *(_QWORD *)(v33 + 16) = v36;
  operator delete(v35);
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void snlp::common::text_uso_graph::ActionListParser::toTreeDebug(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t std::vector<std::string const>::__push_back_slow_path<std::string const>(std::string **a1, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v21;
  unint64_t v22;
  _BYTE v23[24];
  _QWORD *v24;
  _QWORD v25[3];
  char v26;
  __int128 v27;
  __int128 v28;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 2;
  if (0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 3) > v3)
    v3 = 0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  else
    v7 = v3;
  v24 = v6;
  if (v7)
    v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v7);
  else
    v8 = 0;
  v9 = (std::string *)(v7 + 24 * v2);
  v22 = v7;
  *(_QWORD *)v23 = v9;
  *(_QWORD *)&v23[8] = v9;
  *(_QWORD *)&v23[16] = v7 + 24 * v8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v11 = *(std::string **)&v23[8];
    v9 = *(std::string **)v23;
  }
  else
  {
    v10 = *a2;
    v9->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
    v11 = v9;
  }
  *(_QWORD *)&v23[8] = v11 + 1;
  v13 = *a1;
  v12 = a1[1];
  *(_QWORD *)&v28 = v9;
  *((_QWORD *)&v28 + 1) = v9;
  v27 = v28;
  v25[0] = v6;
  v25[1] = &v27;
  v25[2] = &v28;
  v26 = 0;
  if (v12 != v13)
  {
    do
    {
      v14 = v9 - 1;
      v15 = v12 - 1;
      if (SHIBYTE(v12[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v14, v12[-1].__r_.__value_.__l.__data_, v12[-1].__r_.__value_.__l.__size_);
        v9 = (std::string *)*((_QWORD *)&v28 + 1);
      }
      else
      {
        v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v9[-1].__r_.__value_.__r.__words[2] = v12[-1].__r_.__value_.__r.__words[2];
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v16;
      }
      *((_QWORD *)&v28 + 1) = --v9;
      v12 = v15;
    }
    while (v15 != v13);
  }
  v26 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string const>,std::reverse_iterator<std::string const*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v25);
  v17 = a1[2];
  v18 = *(_OWORD *)&v23[8];
  v21 = *(_QWORD *)&v23[8];
  v19 = *(_OWORD *)a1;
  *a1 = v9;
  *(_OWORD *)v23 = v19;
  *(_OWORD *)(a1 + 1) = v18;
  *(_QWORD *)&v23[16] = v17;
  v22 = v19;
  std::__split_buffer<std::basic_string<char16_t>>::~__split_buffer((uint64_t)&v22);
  return v21;
}

void sub_1C226A210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<std::basic_string<char16_t>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string const>,std::reverse_iterator<std::string const*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      v3 += 24;
    }
  }
  return a1;
}

uint64_t snlp::common::text_uso_graph::ActionListParser::getActions@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4;
  std::string *v5;
  __int128 v6;
  _QWORD v7[3];
  char v8;
  std::string *v9;
  std::string *v10;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(__int128 **)(this + 8);
  v4 = *(__int128 **)(this + 16);
  if (v4 != v3)
  {
    std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](a2, 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (char *)v3) >> 3));
    v9 = (std::string *)a2[1];
    v10 = v9;
    v7[0] = a2 + 2;
    v7[1] = &v9;
    v7[2] = &v10;
    v8 = 0;
    v5 = v9;
    do
    {
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
        v5 = v10;
      }
      else
      {
        v6 = *v3;
        v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
        *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      }
      v3 = (__int128 *)((char *)v3 + 24);
      v10 = ++v5;
    }
    while (v3 != v4);
    v8 = 1;
    this = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::basic_string<char16_t>>,std::basic_string<char16_t>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
    a2[1] = v5;
  }
  return this;
}

void sub_1C226A370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string const>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::string const>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C226B14C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C226B1D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C226B47C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C226BB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1C226C320(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _Unwind_Exception *exception_objecta, _QWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  void *v83;

  MEMORY[0x1C3BB9B44](v72, 0x10F3C40344F1FFELL);
  if (a29 < 0)
    operator delete(__p);

  if (a35 < 0)
    operator delete(a30);

  if (a41 < 0)
    operator delete(a36);

  if (a47 < 0)
    operator delete(a42);

  MEMORY[0x1C3BB8674](&a48);
  if (a2 == 1)
  {
    v74 = __cxa_begin_catch(a1);
    v75 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(a20, "loggingComponentString");
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a20, "loggingComponentString");
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(void *))(*(_QWORD *)v74 + 16))(v74);
    objc_msgSend(v75, "stringWithFormat:", CFSTR("%@ Asset Error when creating the %@ (ITFM) inference orchestrator: %s"));
    v77 = (void *)objc_claimAutoreleasedReturnValue();

    if (a15)
    {
      v78 = (void *)MEMORY[0x1E0CB35C8];
      objc_msgSend(a20, "errorDomain");
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      v80 = *MEMORY[0x1E0CB2D68];
      *(_QWORD *)(v73 - 240) = *MEMORY[0x1E0CB2D50];
      *(_QWORD *)(v73 - 232) = v80;
      *(_QWORD *)(v73 - 224) = v77;
      *(_QWORD *)(v73 - 216) = v77;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v73 - 224, v73 - 240, 2);
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v78, "errorWithDomain:code:userInfo:", v79, 1, v81);
      *a15 = (id)objc_claimAutoreleasedReturnValue();

    }
    __cxa_end_catch();
    JUMPOUT(0x1C226C2C8);
  }
  if (a57 < 0)
    operator delete(a52);
  v82 = *a19;
  *a19 = 0;
  if (v82)
    (*(void (**)(uint64_t))(*(_QWORD *)v82 + 16))(v82);

  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::trees::PlyTreeCreator::constructTree(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5)
{
  void **v9;
  void **v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string v18;
  void *v19[2];
  void *__p[4];
  __int128 v21;
  _BYTE v22[56];
  _QWORD v23[3];
  _QWORD v24[3];
  _QWORD v25[3];
  std::string v26;
  _QWORD v27[3];
  std::string *v28;
  std::string *v29;
  std::string *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  char v38;
  __int16 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[8];
  std::string **v44;
  char v45;
  __int128 v46;
  _QWORD v47[3];
  _QWORD v48[3];
  _QWORD v49[3];
  _QWORD v50[3];
  _QWORD v51[3];
  _QWORD v52[3];
  _QWORD v53[3];
  _QWORD v54[3];
  _QWORD v55[3];
  _QWORD v56[3];
  std::string v57;
  __int128 v58;

  *(_QWORD *)&v58 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v18 = *(std::string *)a1;
  memset(v22, 0, sizeof(v22));
  v21 = 0u;
  memset(__p, 0, sizeof(__p));
  *(_OWORD *)v19 = 0u;
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(std::string *)a2 = v18;
  *((_BYTE *)&v18.__r_.__value_.__s + 23) = 0;
  v18.__r_.__value_.__s.__data_[0] = 0;
  v9 = (void **)(a2 + 24);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*v9);
  *(_OWORD *)v9 = *(_OWORD *)v19;
  *(void **)(a2 + 40) = __p[0];
  HIBYTE(__p[0]) = 0;
  LOBYTE(v19[0]) = 0;
  v10 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = *(_OWORD *)&__p[1];
  *(void **)(a2 + 64) = __p[3];
  HIBYTE(__p[3]) = 0;
  LOBYTE(__p[1]) = 0;
  *(_OWORD *)(a2 + 72) = v21;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vdeallocate(a2 + 88);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)v22;
  *(_QWORD *)(a2 + 104) = *(_QWORD *)&v22[16];
  memset(v22, 0, 24);
  v11 = *(_OWORD *)&v22[40];
  *(_OWORD *)(a2 + 112) = *(_OWORD *)&v22[24];
  *(_OWORD *)(a2 + 128) = v11;
  *(_QWORD *)&v46 = v22;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  if (SHIBYTE(__p[3]) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v19[0]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v18, "ROOT");
  std::string::basic_string[abi:ne180100]<0>(v19, ".");
  std::string::basic_string[abi:ne180100]<0>(&__p[1], "value=");
  std::string::basic_string[abi:ne180100]<0>(&v21, "intent=");
  std::string::basic_string[abi:ne180100]<0>(&v22[8], "[next]");
  std::string::basic_string[abi:ne180100]<0>(&v22[32], "[startPayload]");
  std::string::basic_string[abi:ne180100]<0>(v23, "[leaf]");
  std::string::basic_string[abi:ne180100]<0>(v24, "[endPayload]");
  std::string::basic_string[abi:ne180100]<0>(v25, "[newGroup]");
  std::string::basic_string[abi:ne180100]<0>(&v26, "UserStatedTask");
  std::string::basic_string[abi:ne180100]<0>(v27, "task");
  std::string::basic_string[abi:ne180100]<0>(&v46, "UserStarted");
  std::string::basic_string[abi:ne180100]<0>(v47, "UserContinued");
  std::string::basic_string[abi:ne180100]<0>(v48, "UserAccepted");
  std::string::basic_string[abi:ne180100]<0>(v49, "UserRejected");
  std::string::basic_string[abi:ne180100]<0>(v50, "UserDisambiguated");
  std::string::basic_string[abi:ne180100]<0>(v51, "UserCancelled");
  std::string::basic_string[abi:ne180100]<0>(v52, "UserWantedToRepeat");
  std::string::basic_string[abi:ne180100]<0>(v53, "UserAcknowledged");
  std::string::basic_string[abi:ne180100]<0>(v54, "UserWantedToProceed");
  std::string::basic_string[abi:ne180100]<0>(v55, "UserWantedToPause");
  std::string::basic_string[abi:ne180100]<0>(v56, "UserResponded");
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v57, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  else
    v57 = v26;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v44 = &v28;
  v45 = 0;
  v28 = (std::string *)operator new(0x120uLL);
  v29 = v28;
  v30 = v28 + 12;
  v12 = a1 + 24;
  v29 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v30, &v46, &v58, v28);
  v13 = 36;
  do
  {
    if (*((char *)&v47[v13 - 1] - 1) < 0)
      operator delete(*(void **)&v43[v13 * 8]);
    v13 -= 3;
  }
  while (v13 * 8);
  std::string::basic_string[abi:ne180100]<0>(v31, "edge=");
  v32 = a4;
  v33 = a5;
  v34 = a2;
  v35 = v12;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v15 = *a3;
  v14 = a3[1];
  if (v15 != v14)
  {
    do
    {
      nlv4_inference_orchestrator::trees::PlyStateHandler::readTag((nlv4_inference_orchestrator::trees::PlyStateHandler *)&v18, v15);
      v15 += 24;
    }
    while (0x8E38E38E38E38E39 * ((uint64_t)(v32[1] - *v32) >> 4) > v36 && v15 != v14);
  }
  nlv4_inference_orchestrator::trees::PlyStateHandler::flushPathFragmentsOnStackToTree((nlv4_inference_orchestrator::trees::PlyStateHandler *)&v18);
  nlv4_inference_orchestrator::trees::PlyStateHandler::~PlyStateHandler((nlv4_inference_orchestrator::trees::PlyStateHandler *)&v18);
}

void sub_1C226CC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  nlv4_inference_orchestrator::trees::PlyStateHandler::~PlyStateHandler((nlv4_inference_orchestrator::trees::PlyStateHandler *)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::trees::PlyStateHandler::~PlyStateHandler(nlv4_inference_orchestrator::trees::PlyStateHandler *this)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void **v18;

  v2 = (void **)*((_QWORD *)this + 46);
  v3 = (void **)*((_QWORD *)this + 47);
  if (v3 == v2)
  {
    v8 = (_QWORD *)((char *)this + 400);
    v3 = (void **)*((_QWORD *)this + 46);
  }
  else
  {
    v4 = *((_QWORD *)this + 49);
    v5 = &v2[v4 / 0xAA];
    v6 = (unint64_t)*v5;
    v7 = (unint64_t)*v5 + 24 * (v4 % 0xAA);
    v8 = (_QWORD *)((char *)this + 400);
    v9 = (unint64_t)v2[(*((_QWORD *)this + 50) + v4) / 0xAA] + 24 * ((*((_QWORD *)this + 50) + v4) % 0xAA);
    if (v7 != v9)
    {
      do
      {
        if (*(char *)(v7 + 23) < 0)
        {
          operator delete(*(void **)v7);
          v6 = (unint64_t)*v5;
        }
        v7 += 24;
        if (v7 - v6 == 4080)
        {
          v10 = (unint64_t)v5[1];
          ++v5;
          v6 = v10;
          v7 = v10;
        }
      }
      while (v7 != v9);
      v2 = (void **)*((_QWORD *)this + 46);
      v3 = (void **)*((_QWORD *)this + 47);
    }
  }
  *v8 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)*((_QWORD *)this + 47);
      v2 = (void **)(*((_QWORD *)this + 46) + 8);
      *((_QWORD *)this + 46) = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 85;
    goto LABEL_16;
  }
  if (v12 == 2)
  {
    v13 = 170;
LABEL_16:
    *((_QWORD *)this + 49) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *((_QWORD *)this + 46);
    v15 = *((_QWORD *)this + 47);
    if (v15 != v16)
      *((_QWORD *)this + 47) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v17 = (void *)*((_QWORD *)this + 45);
  if (v17)
    operator delete(v17);
  if (*((char *)this + 311) < 0)
    operator delete(*((void **)this + 36));
  v18 = (void **)((char *)this + 264);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v18);
  if (*((char *)this + 263) < 0)
    operator delete(*((void **)this + 30));
  if (*((char *)this + 239) < 0)
    operator delete(*((void **)this + 27));
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t snlp::ssu::utilities::SSUErrorStatus::isError(snlp::ssu::utilities::SSUErrorStatus *this)
{
  return *((unsigned __int8 *)this + 24);
}

void snlp::ssu::utilities::SSUErrorStatus::noError(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

__n128 snlp::ssu::utilities::SSUErrorStatus::withError@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  a2[1].n128_u8[8] = 1;
  return result;
}

BOOL snlp::ssu::utilities::validateLocaleMatch(char *cStr, const char *a2)
{
  const char *v2;
  char *v3;
  int v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char *v9;
  uint64_t v10;
  const __CFAllocator *v12;
  CFStringRef v13;
  const char *v14;
  const __CFArray *v15;
  const __CFArray *v16;
  const __CFArray *v17;
  const __CFString *ValueAtIndex;
  _BOOL8 v19;
  NSObject *v21;
  CFTypeRef cf;
  void *values[4];

  v2 = a2;
  v3 = cStr;
  values[3] = *(void **)MEMORY[0x1E0C80C00];
  v4 = cStr[23];
  v5 = *((_QWORD *)cStr + 1);
  if ((v4 & 0x80u) == 0)
    v6 = cStr[23];
  else
    v6 = *((_QWORD *)cStr + 1);
  v7 = *((unsigned __int8 *)a2 + 23);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a2 + 1);
  if (v6 == v7)
  {
    if (v8 < 0)
      a2 = *(const char **)a2;
    if ((v4 & 0x80) != 0)
    {
      v3 = *(char **)cStr;
      if (memcmp(*(const void **)cStr, a2, v5))
        goto LABEL_20;
    }
    else if (cStr[23])
    {
      v9 = cStr;
      v10 = cStr[23];
      while (*v9 == *a2)
      {
        ++v9;
        ++a2;
        if (!--v10)
          return 1;
      }
      goto LABEL_15;
    }
    return 1;
  }
LABEL_15:
  if ((v4 & 0x80) == 0)
  {
    if (v4 != 3)
      goto LABEL_25;
    goto LABEL_21;
  }
  v3 = *(char **)cStr;
LABEL_20:
  if (v5 != 3)
  {
LABEL_25:
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v13 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3, 0x8000100u);
    if (v2[23] >= 0)
      v14 = v2;
    else
      v14 = *(const char **)v2;
    cf = CFStringCreateWithCString(v12, v14, 0x8000100u);
    values[0] = CFSTR("zxx");
    values[1] = (void *)v13;
    v15 = CFArrayCreate(v12, (const void **)values, 2, MEMORY[0x1E0C9B378]);
    v16 = CFArrayCreate(v12, &cf, 1, MEMORY[0x1E0C9B378]);
    v17 = CFBundleCopyLocalizationsForPreferences(v15, v16);
    if (CFArrayGetCount(v17) < 1)
    {
      v19 = 0;
    }
    else
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v17, 0);
      v19 = CFStringCompare(ValueAtIndex, v13, 0) == kCFCompareEqualTo;
    }
    CFRelease(v17);
    CFRelease(v16);
    CFRelease(v15);
    CFRelease(cf);
    CFRelease(v13);
    return v19;
  }
LABEL_21:
  if (*(_WORD *)v3 != 30842 || v3[2] != 120)
    goto LABEL_25;
  v21 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    LOWORD(values[0]) = 0;
    _os_log_impl(&dword_1C2196000, v21, OS_LOG_TYPE_ERROR, "The lproj locale indicates no linguistic content (zxx); forcing no match.",
      (uint8_t *)values,
      2u);
  }
  return 0;
}

void snlp::ssu::utilities::validateTensorRank(unint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  std::string::size_type size;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string::size_type v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;

  v4 = (uint64_t)(a2[1] - *a2) >> 3;
  if (v4 == a1)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
  }
  else
  {
    std::operator+<char>();
    v6 = std::string::append(&v22, " because: actualRank (");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v21, v4);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v21;
    else
      v8 = (std::string *)v21.__r_.__value_.__r.__words[0];
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    else
      size = v21.__r_.__value_.__l.__size_;
    v10 = std::string::append(&v23, (const std::string::value_type *)v8, size);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v24, ") != expectedRank (");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v20, a1);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v20;
    else
      v14 = (std::string *)v20.__r_.__value_.__r.__words[0];
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
    else
      v15 = v20.__r_.__value_.__l.__size_;
    v16 = std::string::append(&v25, (const std::string::value_type *)v14, v15);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append(&v26, ")");
    v19 = v18->__r_.__value_.__l.__size_;
    *(_QWORD *)a3 = v18->__r_.__value_.__r.__words[0];
    *(_QWORD *)(a3 + 8) = v19;
    *(_QWORD *)(a3 + 15) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    LOBYTE(v19) = *((_BYTE *)&v18->__r_.__value_.__s + 23);
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    *(_BYTE *)(a3 + 23) = v19;
    *(_BYTE *)(a3 + 24) = 1;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_1C226D790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (*(char *)(v40 - 57) < 0)
    operator delete(*(void **)(v40 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v40 - 89) < 0)
    operator delete(*(void **)(v40 - 112));
  if (a40 < 0)
    operator delete(a35);
  if (a21 < 0)
    operator delete(a16);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void snlp::ssu::utilities::validateTensor(char **a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string::size_type size;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  std::string::size_type v39;
  void *v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  std::string::size_type v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  __int128 v54;
  std::string *p_p;
  std::string::size_type v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  std::string::size_type v60;
  std::string __p;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;

  v7 = *a1;
  v6 = a1[1];
  v8 = (v6 - *a1) >> 3;
  snlp::ssu::utilities::validateTensorRank(v8, a2, a3);
  if (!*(_BYTE *)(a3 + 24))
  {
    v9 = *a1;
    v10 = a1[1];
    if (v6 == v7)
    {
LABEL_12:
      v15 = 1;
      while (v9 != v10)
      {
        v16 = *(_DWORD *)v9;
        v9 += 8;
        v15 *= v16;
      }
      v17 = (uint64_t)(a2[4] - a2[3]) >> 2;
      if (v17 == v15)
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 24) = 0;
      }
      else
      {
        std::operator+<char>();
        v18 = std::string::append(&v66, " because: actualDataSize (");
        v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v67.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v65, v17);
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v20 = &v65;
        else
          v20 = (std::string *)v65.__r_.__value_.__r.__words[0];
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v65.__r_.__value_.__r.__words[2]);
        else
          size = v65.__r_.__value_.__l.__size_;
        v22 = std::string::append(&v67, (const std::string::value_type *)v20, size);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v68.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        v24 = std::string::append(&v68, ") != expectedDataSize (");
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v69.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v64, v15);
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26 = &v64;
        else
          v26 = (std::string *)v64.__r_.__value_.__r.__words[0];
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
        else
          v27 = v64.__r_.__value_.__l.__size_;
LABEL_41:
        v36 = std::string::append(&v69, (const std::string::value_type *)v26, v27);
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v70.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        v38 = std::string::append(&v70, ")");
        v39 = v38->__r_.__value_.__l.__size_;
        *(_QWORD *)a3 = v38->__r_.__value_.__r.__words[0];
        *(_QWORD *)(a3 + 8) = v39;
        *(_QWORD *)(a3 + 15) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
        LOBYTE(v39) = *((_BYTE *)&v38->__r_.__value_.__s + 23);
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        *(_BYTE *)(a3 + 23) = v39;
        *(_BYTE *)(a3 + 24) = 1;
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v70.__r_.__value_.__l.__data_);
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v64.__r_.__value_.__l.__data_);
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v69.__r_.__value_.__l.__data_);
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v68.__r_.__value_.__l.__data_);
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v65.__r_.__value_.__l.__data_);
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v67.__r_.__value_.__l.__data_);
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        {
          v40 = (void *)v66.__r_.__value_.__r.__words[0];
LABEL_93:
          operator delete(v40);
        }
      }
    }
    else
    {
      v11 = 0;
      if (v8 <= 1)
        v12 = 1;
      else
        v12 = v8;
      while (1)
      {
        if ((uint64_t)(a2[1] - *a2) >> 3 == v11 || (v10 - v9) >> 3 == v11)
          std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
        v13 = *(_QWORD *)(*a2 + 8 * v11);
        v14 = *(_QWORD *)&v9[8 * v11];
        if (!v13)
        {
          std::operator+<char>();
          v28 = std::string::append(&v66, " because: dimension at index ");
          v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v67.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v65, v11);
          if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v30 = &v65;
          else
            v30 = (std::string *)v65.__r_.__value_.__r.__words[0];
          if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v31 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
          else
            v31 = v65.__r_.__value_.__l.__size_;
          v32 = std::string::append(&v67, (const std::string::value_type *)v30, v31);
          v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
          v68.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v33;
          v32->__r_.__value_.__l.__size_ = 0;
          v32->__r_.__value_.__r.__words[2] = 0;
          v32->__r_.__value_.__r.__words[0] = 0;
          v34 = std::string::append(&v68, " is zero (expected=");
          v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          v69.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v64, v14);
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v26 = &v64;
          else
            v26 = (std::string *)v64.__r_.__value_.__r.__words[0];
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
          else
            v27 = v64.__r_.__value_.__l.__size_;
          goto LABEL_41;
        }
        if (v13 != v14)
          break;
        if (v12 == ++v11)
          goto LABEL_12;
      }
      std::operator+<char>();
      v41 = std::string::append(&v64, " because: dimension at index ");
      v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v63, v11);
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = &v63;
      else
        v43 = (std::string *)v63.__r_.__value_.__r.__words[0];
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
      else
        v44 = v63.__r_.__value_.__l.__size_;
      v45 = std::string::append(&v65, (const std::string::value_type *)v43, v44);
      v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      v47 = std::string::append(&v66, " (");
      v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v62, v13);
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = &v62;
      else
        v49 = (std::string *)v62.__r_.__value_.__r.__words[0];
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      else
        v50 = v62.__r_.__value_.__l.__size_;
      v51 = std::string::append(&v67, (const std::string::value_type *)v49, v50);
      v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      v53 = std::string::append(&v68, ") != expectedDimension (");
      v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&__p, v14);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v56 = __p.__r_.__value_.__l.__size_;
      v57 = std::string::append(&v69, (const std::string::value_type *)p_p, v56);
      v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v58;
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      v59 = std::string::append(&v70, ")");
      v60 = v59->__r_.__value_.__l.__size_;
      *(_QWORD *)a3 = v59->__r_.__value_.__r.__words[0];
      *(_QWORD *)(a3 + 8) = v60;
      *(_QWORD *)(a3 + 15) = *(std::string::size_type *)((char *)&v59->__r_.__value_.__r.__words[1] + 7);
      LOBYTE(v60) = *((_BYTE *)&v59->__r_.__value_.__s + 23);
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      *(_BYTE *)(a3 + 23) = v60;
      *(_BYTE *)(a3 + 24) = 1;
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      {
        v40 = (void *)v64.__r_.__value_.__r.__words[0];
        goto LABEL_93;
      }
    }
  }
}

void sub_1C226DE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (*(char *)(v52 - 73) < 0)
    operator delete(*(void **)(v52 - 96));
  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v52 - 105) < 0)
    operator delete(*(void **)(v52 - 128));
  if (*(char *)(v52 - 137) < 0)
    operator delete(*(void **)(v52 - 160));
  if (a20 < 0)
    operator delete(a15);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a26 < 0)
    operator delete(a21);
  if (a38 < 0)
    operator delete(a33);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::ReplaceFromPersonRecipientHack(uint64_t a1, _OWORD **a2, const sirinluinternal::MatchingSpan **a3, __int128 *a4)
{
  _QWORD *v8;
  __int128 v9;

  v8 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, "TreeManipulation_ReplaceFromPersonRecipient");
  v8[3] = 0;
  v8[4] = 0;
  v8[5] = 0;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::IndexedToken*,nlv4_inference_orchestrator::orchestration::IndexedToken*>(v8 + 3, *a2, a2[1], 0x8E38E38E38E38E39 * (a2[1] - *a2));
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v9 = *a4;
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 88) = v9;
  }
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 112), "common_Message");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 136), "common_Person");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 160), "common_PersonRelationship");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 184), "fromPerson");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 208), "identifyingRelationship");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 232), "name");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 256), "personFullName");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 280), "recipients");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 304), "relationshipType");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 328), "ROOT");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 352), "target");
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::mapPersonFullNameMatchingSpans(a1, a3);
  return a1;
}

void sub_1C226E8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>>>::~__hash_table(v9);
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v8 + 23) < 0)
    operator delete(*(void **)v8);
  _Unwind_Resume(a1);
}

void sub_1C226EA38()
{
  JUMPOUT(0x1C226E9BCLL);
}

void sub_1C226EA40()
{
  JUMPOUT(0x1C226E9D0);
}

void sub_1C226EA48()
{
  JUMPOUT(0x1C226E9E4);
}

void sub_1C226EA50()
{
  JUMPOUT(0x1C226E9F8);
}

void sub_1C226EA58()
{
  JUMPOUT(0x1C226EA20);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::mapPersonFullNameMatchingSpans(uint64_t a1, const sirinluinternal::MatchingSpan **a2)
{
  const sirinluinternal::MatchingSpan *v2;
  const sirinluinternal::MatchingSpan *v3;
  const void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  const void **v12;
  unint64_t Utf16IndicesFromMatchingSpan;
  void *__p[2];
  char v15;
  _QWORD v16[3];

  memset(v16, 0, sizeof(v16));
  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v5 = (const void **)(a1 + 256);
    while (1)
    {
      v6 = *((_QWORD *)v2 + 6);
      if (!v6)
        goto LABEL_22;
      v7 = *(unsigned __int8 *)(a1 + 279);
      if ((v7 & 0x80u) == 0)
        v8 = *(unsigned __int8 *)(a1 + 279);
      else
        v8 = *(_QWORD *)(a1 + 264);
      v9 = *(unsigned __int8 *)(v6 + 23);
      v10 = (char)v9;
      if ((v9 & 0x80u) != 0)
        v9 = *(_QWORD *)(v6 + 8);
      if (v8 != v9)
        goto LABEL_22;
      v11 = v10 >= 0 ? (unsigned __int8 *)*((_QWORD *)v2 + 6) : *(unsigned __int8 **)v6;
      if ((v7 & 0x80) == 0)
        break;
      if (!memcmp(*v5, v11, *(_QWORD *)(a1 + 264)))
        goto LABEL_20;
LABEL_22:
      v2 = (const sirinluinternal::MatchingSpan *)((char *)v2 + 88);
      if (v2 == v3)
        goto LABEL_23;
    }
    if (*(_BYTE *)(a1 + 279))
    {
      v12 = v5;
      while (*(unsigned __int8 *)v12 == *v11)
      {
        v12 = (const void **)((char *)v12 + 1);
        ++v11;
        if (!--v7)
          goto LABEL_20;
      }
      goto LABEL_22;
    }
LABEL_20:
    Utf16IndicesFromMatchingSpan = nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::getUtf16IndicesFromMatchingSpan(a1, (uint64_t)v2);
    nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::getFullNameFromMatchingSpan((uint64_t *)__p, (nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack *)a1, v2);
    nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::addPersonFullNameSpanToMap(a1, (uint64_t)__p, Utf16IndicesFromMatchingSpan);
    if (v15 < 0)
      operator delete(__p[0]);
    goto LABEL_22;
  }
LABEL_23:
  __p[0] = v16;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1C226EB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  __p = &a15;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::getUtf16IndicesFromMatchingSpan(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((~*(unsigned __int8 *)(a2 + 80) & 3) != 0
    || (v3 = *(unsigned int *)(a2 + 72), v2 = *(_DWORD *)(a2 + 76), v2 > v3)
    || (v4 = *(_QWORD *)(a1 + 24), 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 32) - v4) >> 4) < v3))
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v5 = *(unsigned int *)(v4 + 144 * v2 + 112);
    v6 = *(_QWORD *)(v4 + 144 * (v3 - 1) + 120) << 32;
  }
  return v6 | v5;
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::getFullNameFromMatchingSpan(nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack *this, const sirinluinternal::MatchingSpan *a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  _QWORD v15[11];
  char v16;
  uint64_t v17;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  v4 = *((_DWORD *)a2 + 18);
  v5 = *((unsigned int *)a2 + 19);
  if (v5 < v4)
  {
    v6 = 144 * v5 + 64;
    do
    {
      v7 = *((_QWORD *)this + 3);
      if (0x8E38E38E38E38E39 * ((*((_QWORD *)this + 4) - v7) >> 4) <= v5)
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
      v8 = *(_QWORD *)(v7 + v6);
      if (v8)
      {
        v9 = *(char *)(v8 + 23);
        v10 = v9 >= 0 ? v8 : *(_QWORD *)v8;
        v11 = v9 >= 0 ? *(unsigned __int8 *)(v8 + 23) : *(_QWORD *)(v8 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v10, v11);
        v4 = *((_DWORD *)a2 + 18);
        if (v5 < v4 - 1)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1);
          v4 = *((_DWORD *)a2 + 18);
        }
      }
      ++v5;
      v6 += 144;
    }
    while (v5 < v4);
  }
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E0DE4F50];
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v15[0] = v12;
  v15[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3BB9A90](&v17);
}

void sub_1C226EE00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::addPersonFullNameSpanToMap(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  _OWORD v37[2];
  int v38;
  int v39;
  std::string v40;
  _QWORD v41[2];
  char v42;
  unsigned int v43;
  std::string __p;
  uint64_t v45;

  v3 = a3;
  v45 = *MEMORY[0x1E0C80C00];
  v5 = HIDWORD(a3);
  v39 = HIDWORD(a3);
  v6 = (unint64_t)&v40;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    LODWORD(v5) = v39;
  }
  else
  {
    v40 = *(std::string *)a2;
  }
  v43 = v5;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  else
    __p = v40;
  memset(v37, 0, sizeof(v37));
  v38 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::string> const&>((uint64_t)v37, v43, (uint64_t)&v43);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v43 = v3;
  std::unordered_map<unsigned int,std::string>::unordered_map((uint64_t)&__p, (uint64_t)v37);
  v7 = v43;
  v8 = *(_QWORD *)(a1 + 56);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v6 = v43;
      if (v8 <= v43)
        v6 = v43 % v8;
    }
    else
    {
      v6 = ((_DWORD)v8 - 1) & v43;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)(a1 + 48) + 8 * v6);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v43)
        {
          if (*((_DWORD *)i + 4) == v43)
            goto LABEL_82;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v6)
            break;
        }
      }
    }
  }
  v13 = operator new(0x40uLL);
  v14 = (_QWORD *)(a1 + 64);
  v41[0] = v13;
  v41[1] = a1 + 64;
  v42 = 0;
  *v13 = 0;
  v13[1] = v7;
  *((_DWORD *)v13 + 4) = v7;
  std::unordered_map<unsigned int,std::string>::unordered_map((uint64_t)(v13 + 3), (uint64_t)&__p);
  v42 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 72) + 1);
  v16 = *(float *)(a1 + 80);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v8 = *(_QWORD *)(a1 + 56);
    if (*(_QWORD *)&prime > v8)
      goto LABEL_38;
    if (*(_QWORD *)&prime < v8)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 72) / *(float *)(a1 + 80));
      if (v8 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *(_QWORD *)(a1 + 56);
      }
      else
      {
        if (prime)
        {
LABEL_38:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = *(void **)(a1 + 48);
          *(_QWORD *)(a1 + 48) = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *(int8x8_t *)(a1 + 56) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD *)*v14;
          if (*v14)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v25) = v14;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  v32 = *(_QWORD *)(a1 + 48);
                  if (!*(_QWORD *)(v32 + 8 * v31))
                  {
                    *(_QWORD *)(v32 + 8 * v31) = v24;
                    goto LABEL_63;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*(_QWORD *)(a1 + 48) + 8 * v31);
                  **(_QWORD **)(*(_QWORD *)(a1 + 48) + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_63:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_67;
        }
        v36 = *(void **)(a1 + 48);
        *(_QWORD *)(a1 + 48) = 0;
        if (v36)
          operator delete(v36);
        v8 = 0;
        *(_QWORD *)(a1 + 56) = 0;
      }
    }
LABEL_67:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v6 = v7 % v8;
      else
        v6 = v7;
    }
    else
    {
      v6 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v33 = *(_QWORD **)(*(_QWORD *)(a1 + 48) + 8 * v6);
  v34 = v41[0];
  if (v33)
  {
    *(_QWORD *)v41[0] = *v33;
LABEL_80:
    *v33 = v34;
    goto LABEL_81;
  }
  *(_QWORD *)v41[0] = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v34;
  *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v6) = v14;
  if (*(_QWORD *)v34)
  {
    v35 = *(_QWORD *)(*(_QWORD *)v34 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v35 >= v8)
        v35 %= v8;
    }
    else
    {
      v35 &= v8 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v35);
    goto LABEL_80;
  }
LABEL_81:
  v41[0] = 0;
  ++*(_QWORD *)(a1 + 72);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v41);
LABEL_82:
  std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table((uint64_t)&__p);
  std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table((uint64_t)v37);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
}

void sub_1C226F324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1C226F37C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table((uint64_t)&a9);
  if (a28 < 0)
    operator delete(__p);
  JUMPOUT(0x1C226F364);
}

uint64_t std::unordered_map<unsigned int,std::string>::unordered_map(uint64_t a1, uint64_t a2)
{
  uint64_t *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
    std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::string> const&>(a1, *((_DWORD *)i + 4), (uint64_t)(i + 2));
  return a1;
}

void sub_1C226F3F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::string> const&>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  std::string **v21;
  unint64_t v22;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (std::string *)operator new(0x30uLL);
  v12->__r_.__value_.__r.__words[0] = 0;
  v12->__r_.__value_.__l.__size_ = v6;
  LODWORD(v12->__r_.__value_.__r.__words[2]) = *(_DWORD *)a3;
  v13 = v12 + 1;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 8);
    v12[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 24);
  }
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v19);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(std::string ***)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    v12->__r_.__value_.__r.__words[0] = (std::string::size_type)*v21;
LABEL_41:
    *v21 = v12;
    goto LABEL_42;
  }
  v12->__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (v12->__r_.__value_.__r.__words[0])
  {
    v22 = *(_QWORD *)(v12->__r_.__value_.__r.__words[0] + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v22 >= v7)
        v22 %= v7;
    }
    else
    {
      v22 &= v7 - 1;
    }
    v21 = (std::string **)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1C226F678(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 47) < 0)
      operator delete(__p[3]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::getDescription(nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientInTree(nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  nlv4_inference_orchestrator::trees::TreeNode *v6;
  const void **v8;
  uint64_t v9;
  uint64_t v10;
  nlv4_inference_orchestrator::trees::TreeNode *v11;
  nlv4_inference_orchestrator::trees::TreeNode *v12;
  uint64_t result;

  v2 = *((unsigned __int8 *)this + 351);
  if ((v2 & 0x80u) == 0)
    v3 = *((unsigned __int8 *)this + 351);
  else
    v3 = *((_QWORD *)this + 42);
  v4 = *((unsigned __int8 *)a2 + 23);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  v8 = (const void **)((char *)this + 328);
  if (v5 < 0)
    a2 = *(nlv4_inference_orchestrator::trees::TreeNode **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, a2, *((_QWORD *)this + 42)))
      return 0;
  }
  else if (*((_BYTE *)this + 351))
  {
    while (*(unsigned __int8 *)v8 == *(unsigned __int8 *)a2)
    {
      v8 = (const void **)((char *)v8 + 1);
      a2 = (nlv4_inference_orchestrator::trees::TreeNode *)((char *)a2 + 1);
      if (!--v2)
        goto LABEL_15;
    }
    return 0;
  }
LABEL_15:
  v9 = *((_QWORD *)v6 + 11);
  v10 = *((_QWORD *)v6 + 12);
  if (v9 == v10)
    return 0;
  while (2)
  {
    v11 = *(nlv4_inference_orchestrator::trees::TreeNode **)(v9 + 88);
    v12 = *(nlv4_inference_orchestrator::trees::TreeNode **)(v9 + 96);
    while (v11 != v12)
    {
      if ((nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientInVerbSubtree(this, v11) & 1) != 0)return 1;
      v11 = (nlv4_inference_orchestrator::trees::TreeNode *)((char *)v11 + 144);
    }
    result = 0;
    v9 += 144;
    if (v9 != v10)
      continue;
    break;
  }
  return result;
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientInVerbSubtree(nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  const void **v5;
  const void **v6;
  const void **v7;
  const void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  const void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  const void **v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  const void **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  const void **v34;

  v2 = (unsigned __int8 *)*((_QWORD *)a2 + 11);
  v3 = (unsigned __int8 *)*((_QWORD *)a2 + 12);
  if (v2 != v3)
  {
    v5 = (const void **)((char *)this + 352);
    v6 = (const void **)((char *)this + 112);
    v7 = (const void **)((char *)this + 280);
    v8 = (const void **)((char *)this + 136);
    while (1)
    {
      v9 = *((unsigned __int8 *)this + 375);
      if ((v9 & 0x80u) == 0)
        v10 = *((unsigned __int8 *)this + 375);
      else
        v10 = *((_QWORD *)this + 45);
      v11 = v2[71];
      v12 = (char)v11;
      if ((v11 & 0x80u) != 0)
        v11 = *((_QWORD *)v2 + 7);
      if (v10 != v11)
        goto LABEL_35;
      v13 = v12 >= 0 ? v2 + 48 : (unsigned __int8 *)*((_QWORD *)v2 + 6);
      if ((v9 & 0x80) != 0)
      {
        if (memcmp(*v5, v13, *((_QWORD *)this + 45)))
          goto LABEL_35;
      }
      else if (*((_BYTE *)this + 375))
      {
        v14 = v5;
        while (*(unsigned __int8 *)v14 == *v13)
        {
          v14 = (const void **)((char *)v14 + 1);
          ++v13;
          if (!--v9)
            goto LABEL_19;
        }
        goto LABEL_35;
      }
LABEL_19:
      v15 = *((unsigned __int8 *)this + 135);
      if ((v15 & 0x80u) == 0)
        v16 = *((unsigned __int8 *)this + 135);
      else
        v16 = *((_QWORD *)this + 15);
      v17 = v2[23];
      v18 = (char)v17;
      if ((v17 & 0x80u) != 0)
        v17 = *((_QWORD *)v2 + 1);
      if (v16 == v17)
      {
        if (v18 >= 0)
          v19 = v2;
        else
          v19 = *(unsigned __int8 **)v2;
        if ((v15 & 0x80) == 0)
        {
          if (!*((_BYTE *)this + 135))
            break;
          v20 = v6;
          while (*(unsigned __int8 *)v20 == *v19)
          {
            v20 = (const void **)((char *)v20 + 1);
            ++v19;
            if (!--v15)
              goto LABEL_37;
          }
          goto LABEL_35;
        }
        if (!memcmp(*v6, v19, *((_QWORD *)this + 15)))
          break;
      }
LABEL_35:
      v2 += 144;
      if (v2 == v3)
        return 0;
    }
LABEL_37:
    v21 = (unsigned __int8 *)*((_QWORD *)v2 + 11);
    v22 = (unsigned __int8 *)*((_QWORD *)v2 + 12);
    while (1)
    {
      if (v21 == v22)
        goto LABEL_35;
      v23 = *((unsigned __int8 *)this + 303);
      if ((v23 & 0x80u) == 0)
        v24 = *((unsigned __int8 *)this + 303);
      else
        v24 = *((_QWORD *)this + 36);
      v25 = v21[71];
      v26 = (char)v25;
      if ((v25 & 0x80u) != 0)
        v25 = *((_QWORD *)v21 + 7);
      if (v24 == v25)
      {
        if (v26 >= 0)
          v27 = v21 + 48;
        else
          v27 = (unsigned __int8 *)*((_QWORD *)v21 + 6);
        if ((v23 & 0x80) != 0)
        {
          if (memcmp(*v7, v27, *((_QWORD *)this + 36)))
            goto LABEL_72;
        }
        else if (*((_BYTE *)this + 303))
        {
          v28 = v7;
          while (*(unsigned __int8 *)v28 == *v27)
          {
            v28 = (const void **)((char *)v28 + 1);
            ++v27;
            if (!--v23)
              goto LABEL_55;
          }
          goto LABEL_72;
        }
LABEL_55:
        v29 = *((unsigned __int8 *)this + 159);
        if ((v29 & 0x80u) == 0)
          v30 = *((unsigned __int8 *)this + 159);
        else
          v30 = *((_QWORD *)this + 18);
        v31 = v21[23];
        v32 = (char)v31;
        if ((v31 & 0x80u) != 0)
          v31 = *((_QWORD *)v21 + 1);
        if (v30 != v31)
          goto LABEL_72;
        if (v32 >= 0)
          v33 = v21;
        else
          v33 = *(unsigned __int8 **)v21;
        if ((v29 & 0x80) != 0)
        {
          if (memcmp(*v8, v33, *((_QWORD *)this + 18)))
            goto LABEL_72;
        }
        else if (*((_BYTE *)this + 159))
        {
          v34 = v8;
          while (*(unsigned __int8 *)v34 == *v33)
          {
            v34 = (const void **)((char *)v34 + 1);
            ++v33;
            if (!--v29)
              goto LABEL_71;
          }
          goto LABEL_72;
        }
LABEL_71:
        if ((nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientInRecipientSubtree(this, (nlv4_inference_orchestrator::trees::TreeNode *)v21) & 1) != 0)return 1;
      }
LABEL_72:
      v21 += 144;
    }
  }
  return 0;
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientInRecipientSubtree(nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  const nlv4_inference_orchestrator::trees::TreeNode *v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  void **v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  std::string::size_type size;
  std::string *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  int64x2_t *v36;
  int64x2_t *v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int64x2_t *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  size_t v46;
  int v47;
  int v48;
  int64x2_t *v50;
  std::string v51;
  char v52;
  uint64_t v53;
  std::string v54;
  void *v55;
  char v56;
  void *__p[2];
  unsigned __int8 v58;
  uint64_t v59;

  v2 = *((unsigned __int8 *)this + 303);
  if ((v2 & 0x80u) == 0)
    v3 = *((unsigned __int8 *)this + 303);
  else
    v3 = *((_QWORD *)this + 36);
  v4 = *((unsigned __int8 *)a2 + 71);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 7);
  if (v3 != v4)
    return 0;
  v8 = (const void **)((char *)this + 280);
  if (v5 >= 0)
    v9 = (unsigned __int8 *)a2 + 48;
  else
    v9 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *((_QWORD *)this + 36)))
      return 0;
  }
  else if (*((_BYTE *)this + 303))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  v10 = *((_QWORD *)a2 + 11);
  v11 = *((_QWORD *)a2 + 12);
  if (v10 == v11)
    return 0;
  while (1)
  {
    v12 = *((unsigned __int8 *)this + 231);
    if ((v12 & 0x80u) == 0)
      v13 = *((unsigned __int8 *)this + 231);
    else
      v13 = *((_QWORD *)this + 27);
    v14 = *(unsigned __int8 *)(v10 + 71);
    v15 = (char)v14;
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(v10 + 56);
    if (v13 == v14)
    {
      v16 = v15 >= 0 ? (unsigned __int8 *)(v10 + 48) : *(unsigned __int8 **)(v10 + 48);
      if ((v12 & 0x80) != 0)
      {
        if (memcmp(*((const void **)this + 26), v16, *((_QWORD *)this + 27)))
          goto LABEL_109;
      }
      else if (*((_BYTE *)this + 231))
      {
        v17 = (unsigned __int8 *)this + 208;
        do
        {
          if (*v17 != *v16)
            goto LABEL_109;
          ++v17;
          ++v16;
          --v12;
        }
        while (v12);
      }
      v18 = *((unsigned __int8 *)this + 183);
      if ((v18 & 0x80u) == 0)
        v19 = *((unsigned __int8 *)this + 183);
      else
        v19 = *((_QWORD *)this + 21);
      v20 = *(unsigned __int8 *)(v10 + 23);
      v21 = (char)v20;
      if ((v20 & 0x80u) != 0)
        v20 = *(_QWORD *)(v10 + 8);
      if (v19 == v20)
      {
        v22 = v21 >= 0 ? (unsigned __int8 *)v10 : *(unsigned __int8 **)v10;
        if ((v18 & 0x80) != 0)
        {
          if (memcmp(*((const void **)this + 20), v22, *((_QWORD *)this + 21)))
            goto LABEL_109;
        }
        else if (*((_BYTE *)this + 183))
        {
          v23 = (unsigned __int8 *)this + 160;
          do
          {
            if (*v23 != *v22)
              goto LABEL_109;
            ++v23;
            ++v22;
            --v18;
          }
          while (v18);
        }
        v24 = *(const nlv4_inference_orchestrator::trees::TreeNode **)(v10 + 88);
        if (*(_QWORD *)(v10 + 96) - (_QWORD)v24 == 144)
          break;
      }
    }
LABEL_109:
    v10 += 144;
    if (v10 == v11)
      return 0;
  }
  nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v54, v24);
  v25 = *((unsigned __int8 *)this + 207);
  if ((v25 & 0x80u) == 0)
    v26 = (void *)*((unsigned __int8 *)this + 207);
  else
    v26 = (void *)*((_QWORD *)this + 24);
  v27 = v58;
  if ((v58 & 0x80u) != 0)
    v27 = (unint64_t)__p[1];
  if (v26 != (void *)v27)
  {
LABEL_101:
    v48 = 1;
    goto LABEL_102;
  }
  if ((v58 & 0x80u) == 0)
    v28 = __p;
  else
    v28 = (void **)__p[0];
  if ((v25 & 0x80) != 0)
  {
    if (memcmp(*((const void **)this + 23), v28, *((_QWORD *)this + 24)))
      goto LABEL_101;
  }
  else if (*((_BYTE *)this + 207))
  {
    v29 = (unsigned __int8 *)this + 184;
    while (*v29 == *(unsigned __int8 *)v28)
    {
      ++v29;
      v28 = (void **)((char *)v28 + 1);
      if (!--v25)
        goto LABEL_66;
    }
    goto LABEL_101;
  }
LABEL_66:
  v30 = *((unsigned __int8 *)this + 159);
  if ((v30 & 0x80u) == 0)
    v31 = *((unsigned __int8 *)this + 159);
  else
    v31 = *((_QWORD *)this + 18);
  size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v54.__r_.__value_.__l.__size_;
  if (v31 != size)
    goto LABEL_101;
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = &v54;
  else
    v33 = (std::string *)v54.__r_.__value_.__r.__words[0];
  if ((v30 & 0x80) != 0)
  {
    if (memcmp(*((const void **)this + 17), v33, *((_QWORD *)this + 18)))
      goto LABEL_101;
  }
  else if (*((_BYTE *)this + 159))
  {
    v34 = (unsigned __int8 *)this + 136;
    while (*v34 == v33->__r_.__value_.__s.__data_[0])
    {
      ++v34;
      v33 = (std::string *)((char *)v33 + 1);
      if (!--v30)
        goto LABEL_82;
    }
    goto LABEL_101;
  }
LABEL_82:
  v35 = *(_QWORD *)(v10 + 88);
  v37 = *(int64x2_t **)(v35 + 88);
  v36 = *(int64x2_t **)(v35 + 96);
  if (v37 == v36)
    goto LABEL_101;
  v38 = *((unsigned __int8 *)this + 255);
  v39 = *((_QWORD *)this + 30);
  if ((v38 & 0x80u) == 0)
    v40 = *((unsigned __int8 *)this + 255);
  else
    v40 = *((_QWORD *)this + 30);
  while (1)
  {
    v41 = v37[4].u8[7];
    v42 = (char)v41;
    if ((v41 & 0x80u) != 0)
      v41 = v37[3].i64[1];
    if (v40 != v41)
      goto LABEL_99;
    v43 = v42 >= 0 ? &v37[3] : (int64x2_t *)v37[3].i64[0];
    if ((v38 & 0x80) != 0)
      break;
    if (!(_DWORD)v38)
      goto LABEL_111;
    v44 = (unsigned __int8 *)this + 232;
    v45 = v38;
    while (*v44 == v43->u8[0])
    {
      ++v44;
      v43 = (int64x2_t *)((char *)v43 + 1);
      if (!--v45)
        goto LABEL_111;
    }
LABEL_99:
    v37 += 9;
    v48 = 1;
    if (v37 == v36)
      goto LABEL_102;
  }
  v46 = v39;
  v50 = v36;
  v47 = memcmp(*((const void **)this + 29), v43, v39);
  v36 = v50;
  v39 = v46;
  if (v47)
    goto LABEL_99;
LABEL_111:
  v53 = (uint64_t)vmovn_s64(v37[7]);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::findMatchingFullPersonNameMatchingSpan((uint64_t)this, v53, &v51);
  if (v52)
    nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientWithName((uint64_t)this, (uint64_t)a2, (uint64_t)&v51, (unint64_t *)&v53);
  else
    nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientWithRelationshipType((uint64_t)this, (uint64_t)a2, (uint64_t)&v37[1].i64[1], (unint64_t *)&v53);
  if (v52 && SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  v48 = 0;
LABEL_102:
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&v59;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
  if ((char)v58 < 0)
    operator delete(__p[0]);
  if (v56 < 0)
    operator delete(v55);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (v48)
    goto LABEL_109;
  return 1;
}

void sub_1C226FF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23)
{
  if (a21)
  {
    if (a20 < 0)
      operator delete(__p);
  }
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a23);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::findMatchingFullPersonNameMatchingSpan(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  unsigned int v3;
  uint64_t *v5;
  uint64_t *v6;
  __int128 v7;
  char v8;

  v3 = HIDWORD(a2);
  v5 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>>>::find<unsigned int>((_QWORD *)(a1 + 48), a2);
  if (v5
    && (v6 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>>>::find<unsigned int>(v5 + 3, v3)) != 0)
  {
    if (*((char *)v6 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v6[3], v6[4]);
    }
    else
    {
      v7 = *(_OWORD *)(v6 + 3);
      a3->__r_.__value_.__r.__words[2] = v6[5];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
    }
    v8 = 1;
  }
  else
  {
    v8 = 0;
    a3->__r_.__value_.__s.__data_[0] = 0;
  }
  a3[1].__r_.__value_.__s.__data_[0] = v8;
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientWithName(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const void **v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  __int128 v18;
  void **v19;
  __int128 v20;
  void **v21;
  __int128 v22;
  __int128 v23;
  void **v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  std::string v33;
  void *v34;
  char v35;
  void *__p;
  char v37;
  uint64_t v38;
  void **v39;
  std::string *v40;
  std::string *v41;
  unint64_t v42;
  uint64_t v43;

  v5 = *(unsigned __int8 *)(a1 + 303);
  if ((v5 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(a1 + 303);
  else
    v6 = *(_QWORD *)(a1 + 288);
  v7 = *(unsigned __int8 *)(a2 + 71);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 56);
  if (v6 != v7)
    return;
  v12 = (const void **)(a1 + 280);
  if (v8 >= 0)
    v13 = (unsigned __int8 *)(a2 + 48);
  else
    v13 = *(unsigned __int8 **)(a2 + 48);
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*v12, v13, *(_QWORD *)(a1 + 288)))
      return;
    goto LABEL_16;
  }
  if (!*(_BYTE *)(a1 + 303))
  {
LABEL_16:
    nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::createNameNode(a1, a3, *a4, &v33);
    v15 = *(_QWORD *)(a2 + 88);
    v16 = *(_QWORD *)(a2 + 96);
    v14 = (_QWORD *)(a2 + 88);
    if (v15 != v16)
    {
      while (!nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientWithName(nlv4_inference_orchestrator::trees::TreeNode &,std::string const&,std::pair<unsigned int,unsigned int> const&)const::$_0::operator()(a1, v15))
      {
        v15 += 144;
        if (v15 == v16)
        {
          v15 = v16;
          goto LABEL_32;
        }
      }
      if (v15 != v16)
      {
        for (i = v15 + 144; i != v16; i += 144)
        {
          if (!nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientWithName(nlv4_inference_orchestrator::trees::TreeNode &,std::string const&,std::pair<unsigned int,unsigned int> const&)const::$_0::operator()(a1, i))
          {
            if (*(char *)(v15 + 23) < 0)
              operator delete(*(void **)v15);
            v18 = *(_OWORD *)i;
            *(_QWORD *)(v15 + 16) = *(_QWORD *)(i + 16);
            *(_OWORD *)v15 = v18;
            *(_BYTE *)(i + 23) = 0;
            *(_BYTE *)i = 0;
            v19 = (void **)(v15 + 24);
            if (*(char *)(v15 + 47) < 0)
              operator delete(*v19);
            v20 = *(_OWORD *)(i + 24);
            *(_QWORD *)(v15 + 40) = *(_QWORD *)(i + 40);
            *(_OWORD *)v19 = v20;
            *(_BYTE *)(i + 47) = 0;
            *(_BYTE *)(i + 24) = 0;
            v21 = (void **)(v15 + 48);
            if (*(char *)(v15 + 71) < 0)
              operator delete(*v21);
            v22 = *(_OWORD *)(i + 48);
            *(_QWORD *)(v15 + 64) = *(_QWORD *)(i + 64);
            *(_OWORD *)v21 = v22;
            *(_BYTE *)(i + 71) = 0;
            *(_BYTE *)(i + 48) = 0;
            *(_OWORD *)(v15 + 72) = *(_OWORD *)(i + 72);
            std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vdeallocate(v15 + 88);
            *(_OWORD *)(v15 + 88) = *(_OWORD *)(i + 88);
            *(_QWORD *)(v15 + 104) = *(_QWORD *)(i + 104);
            *(_QWORD *)(i + 88) = 0;
            *(_QWORD *)(i + 96) = 0;
            *(_QWORD *)(i + 104) = 0;
            v23 = *(_OWORD *)(i + 128);
            *(_OWORD *)(v15 + 112) = *(_OWORD *)(i + 112);
            *(_OWORD *)(v15 + 128) = v23;
            v15 += 144;
          }
        }
      }
    }
LABEL_32:
    v24 = (void **)std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *>((__int128 *)(v15 + 144), *(__int128 **)(a2 + 96), v15);
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__base_destruct_at_end[abi:ne180100](a2 + 88, v24);
    v25 = *(_QWORD *)(a2 + 96);
    v26 = *(_QWORD *)(a2 + 104);
    if (v25 >= v26)
    {
      v28 = 0x8E38E38E38E38E39 * ((uint64_t)(v25 - *v14) >> 4);
      if (v28 + 1 > 0x1C71C71C71C71C7)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v29 = 0x8E38E38E38E38E39 * ((uint64_t)(v26 - *v14) >> 4);
      v30 = 2 * v29;
      if (2 * v29 <= v28 + 1)
        v30 = v28 + 1;
      if (v29 >= 0xE38E38E38E38E3)
        v31 = 0x1C71C71C71C71C7;
      else
        v31 = v30;
      v43 = a2 + 104;
      if (v31)
        v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v31);
      else
        v32 = 0;
      v39 = (void **)v31;
      v40 = (std::string *)(v31 + 144 * v28);
      v41 = v40;
      v42 = v31 + 144 * v32;
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(v40, (const nlv4_inference_orchestrator::trees::TreeNode *)&v33);
      v41 += 6;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer((uint64_t *)(a2 + 88), &v39);
      v27 = *(_QWORD *)(a2 + 96);
      std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&v39);
    }
    else
    {
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(*(std::string **)(a2 + 96), (const nlv4_inference_orchestrator::trees::TreeNode *)&v33);
      v27 = v25 + 144;
      *(_QWORD *)(a2 + 96) = v25 + 144;
    }
    *(_QWORD *)(a2 + 96) = v27;
    v39 = (void **)&v38;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v39);
    if (v37 < 0)
      operator delete(__p);
    if (v35 < 0)
      operator delete(v34);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    return;
  }
  while (*(unsigned __int8 *)v12 == *v13)
  {
    v12 = (const void **)((char *)v12 + 1);
    ++v13;
    if (!--v5)
      goto LABEL_16;
  }
}

void sub_1C2270320(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer(v2 - 104);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode((void **)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientWithRelationshipType(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const void **v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  _QWORD *v24;
  __int128 *v25;
  uint64_t v26;
  const void **v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  __int128 v45;
  void **v46;
  __int128 v47;
  void **v48;
  __int128 v49;
  __int128 v50;
  void **v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  std::string v60;
  void *v61;
  char v62;
  void *__p;
  char v64;
  uint64_t v65;
  void **v66;
  std::string *v67;
  std::string *v68;
  unint64_t v69;
  uint64_t v70;

  v5 = *(unsigned __int8 *)(a1 + 303);
  if ((v5 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(a1 + 303);
  else
    v6 = *(_QWORD *)(a1 + 288);
  v7 = *(unsigned __int8 *)(a2 + 71);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 56);
  if (v6 != v7)
    return;
  v12 = (const void **)(a1 + 280);
  if (v8 >= 0)
    v13 = (unsigned __int8 *)(a2 + 48);
  else
    v13 = *(unsigned __int8 **)(a2 + 48);
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*v12, v13, *(_QWORD *)(a1 + 288)))
      return;
LABEL_16:
    nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::createRelationshipTypeNode(a1, a3, *a4, &v60);
    v15 = *(_QWORD *)(a2 + 88);
    v14 = *(_QWORD *)(a2 + 96);
    if (v15 == v14)
    {
LABEL_98:
      v66 = (void **)&v65;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v66);
      if (v64 < 0)
        operator delete(__p);
      if (v62 < 0)
        operator delete(v61);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      return;
    }
    v16 = *(unsigned __int8 *)(a1 + 231);
    v17 = *(_QWORD *)(a1 + 216);
    if ((v16 & 0x80u) == 0)
      v18 = *(unsigned __int8 *)(a1 + 231);
    else
      v18 = *(_QWORD *)(a1 + 216);
    while (1)
    {
      v19 = *(unsigned __int8 *)(v15 + 71);
      v20 = (char)v19;
      if ((v19 & 0x80u) != 0)
        v19 = *(_QWORD *)(v15 + 56);
      if (v18 == v19)
      {
        if (v20 >= 0)
          v21 = (unsigned __int8 *)(v15 + 48);
        else
          v21 = *(unsigned __int8 **)(v15 + 48);
        if ((v16 & 0x80) == 0)
        {
          if (!(_DWORD)v16)
            break;
          v22 = (unsigned __int8 *)(a1 + 208);
          v23 = v16;
          while (*v22 == *v21)
          {
            ++v22;
            ++v21;
            if (!--v23)
              goto LABEL_35;
          }
          goto LABEL_33;
        }
        if (!memcmp(*(const void **)(a1 + 208), v21, v17))
          break;
      }
LABEL_33:
      v15 += 144;
      if (v15 == v14)
        goto LABEL_98;
    }
LABEL_35:
    v26 = *(_QWORD *)(v15 + 88);
    v25 = *(__int128 **)(v15 + 96);
    v24 = (_QWORD *)(v15 + 88);
    if ((__int128 *)v26 == v25)
    {
      v25 = *(__int128 **)(v15 + 88);
    }
    else
    {
      v27 = (const void **)(a1 + 184);
      v28 = *(unsigned __int8 *)(a1 + 207);
      v29 = *(_QWORD *)(a1 + 192);
      if ((v28 & 0x80u) == 0)
        v30 = *(unsigned __int8 *)(a1 + 207);
      else
        v30 = *(_QWORD *)(a1 + 192);
      while (1)
      {
        v31 = *(unsigned __int8 *)(v26 + 71);
        v32 = (char)v31;
        if ((v31 & 0x80u) != 0)
          v31 = *(_QWORD *)(v26 + 56);
        if (v30 == v31)
        {
          if (v32 >= 0)
            v33 = (unsigned __int8 *)(v26 + 48);
          else
            v33 = *(unsigned __int8 **)(v26 + 48);
          if ((v28 & 0x80) == 0)
          {
            if (!(_DWORD)v28)
              break;
            v34 = (unsigned __int8 *)(a1 + 184);
            v35 = v28;
            while (*v34 == *v33)
            {
              ++v34;
              ++v33;
              if (!--v35)
                goto LABEL_54;
            }
            goto LABEL_52;
          }
          if (!memcmp(*v27, v33, v29))
            break;
        }
LABEL_52:
        v26 += 144;
        if ((__int128 *)v26 == v25)
          goto LABEL_84;
      }
LABEL_54:
      if ((__int128 *)v26 == v25)
      {
LABEL_84:
        v37 = (uint64_t)v25;
        goto LABEL_85;
      }
      v36 = v26 + 144;
      if ((__int128 *)(v26 + 144) != v25)
      {
        v37 = v26;
        while (1)
        {
          v38 = v26;
          v26 = v36;
          v39 = *(unsigned __int8 *)(a1 + 207);
          if ((v39 & 0x80u) == 0)
            v40 = *(unsigned __int8 *)(a1 + 207);
          else
            v40 = *(_QWORD *)(a1 + 192);
          v41 = *(unsigned __int8 *)(v38 + 215);
          v42 = (char)v41;
          if ((v41 & 0x80u) != 0)
            v41 = *(_QWORD *)(v38 + 200);
          if (v40 != v41)
            goto LABEL_73;
          if (v42 >= 0)
            v43 = (unsigned __int8 *)(v38 + 192);
          else
            v43 = *(unsigned __int8 **)(v38 + 192);
          if ((v39 & 0x80) != 0)
          {
            if (memcmp(*v27, v43, *(_QWORD *)(a1 + 192)))
              goto LABEL_73;
          }
          else if (*(_BYTE *)(a1 + 207))
          {
            v44 = (unsigned __int8 *)(a1 + 184);
            while (*v44 == *v43)
            {
              ++v44;
              ++v43;
              if (!--v39)
                goto LABEL_80;
            }
LABEL_73:
            if (*(char *)(v37 + 23) < 0)
              operator delete(*(void **)v37);
            v45 = *(_OWORD *)v26;
            *(_QWORD *)(v37 + 16) = *(_QWORD *)(v26 + 16);
            *(_OWORD *)v37 = v45;
            *(_BYTE *)(v38 + 167) = 0;
            *(_BYTE *)v26 = 0;
            v46 = (void **)(v37 + 24);
            if (*(char *)(v37 + 47) < 0)
              operator delete(*v46);
            v47 = *(_OWORD *)(v38 + 168);
            *(_QWORD *)(v37 + 40) = *(_QWORD *)(v38 + 184);
            *(_OWORD *)v46 = v47;
            *(_BYTE *)(v38 + 191) = 0;
            *(_BYTE *)(v38 + 168) = 0;
            v48 = (void **)(v37 + 48);
            if (*(char *)(v37 + 71) < 0)
              operator delete(*v48);
            v49 = *(_OWORD *)(v38 + 192);
            *(_QWORD *)(v37 + 64) = *(_QWORD *)(v38 + 208);
            *(_OWORD *)v48 = v49;
            *(_BYTE *)(v38 + 215) = 0;
            *(_BYTE *)(v38 + 192) = 0;
            *(_OWORD *)(v37 + 72) = *(_OWORD *)(v38 + 216);
            std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vdeallocate(v37 + 88);
            *(_OWORD *)(v37 + 88) = *(_OWORD *)(v38 + 232);
            *(_QWORD *)(v37 + 104) = *(_QWORD *)(v38 + 248);
            *(_QWORD *)(v38 + 232) = 0;
            *(_QWORD *)(v38 + 240) = 0;
            *(_QWORD *)(v38 + 248) = 0;
            v50 = *(_OWORD *)(v38 + 272);
            *(_OWORD *)(v37 + 112) = *(_OWORD *)(v38 + 256);
            *(_OWORD *)(v37 + 128) = v50;
            v37 += 144;
          }
LABEL_80:
          v36 = v26 + 144;
          if ((__int128 *)(v26 + 144) == v25)
          {
            v25 = *(__int128 **)(v15 + 96);
            goto LABEL_85;
          }
        }
      }
    }
    v37 = v26;
LABEL_85:
    v51 = (void **)std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *>((__int128 *)(v37 + 144), v25, v37);
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__base_destruct_at_end[abi:ne180100](v15 + 88, v51);
    v52 = *(_QWORD *)(v15 + 104);
    v53 = *(_QWORD *)(v15 + 96);
    if (v53 >= v52)
    {
      v55 = 0x8E38E38E38E38E39 * ((uint64_t)(v53 - *v24) >> 4);
      if (v55 + 1 > 0x1C71C71C71C71C7)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v56 = 0x8E38E38E38E38E39 * ((uint64_t)(v52 - *v24) >> 4);
      v57 = 2 * v56;
      if (2 * v56 <= v55 + 1)
        v57 = v55 + 1;
      if (v56 >= 0xE38E38E38E38E3)
        v58 = 0x1C71C71C71C71C7;
      else
        v58 = v57;
      v70 = v15 + 104;
      if (v58)
        v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v58);
      else
        v59 = 0;
      v66 = (void **)v58;
      v67 = (std::string *)(v58 + 144 * v55);
      v68 = v67;
      v69 = v58 + 144 * v59;
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(v67, (const nlv4_inference_orchestrator::trees::TreeNode *)&v60);
      v68 += 6;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer((uint64_t *)(v15 + 88), &v66);
      v54 = *(_QWORD *)(v15 + 96);
      std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&v66);
    }
    else
    {
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(*(std::string **)(v15 + 96), (const nlv4_inference_orchestrator::trees::TreeNode *)&v60);
      v54 = v53 + 144;
      *(_QWORD *)(v15 + 96) = v53 + 144;
    }
    *(_QWORD *)(v15 + 96) = v54;
    goto LABEL_98;
  }
  if (!*(_BYTE *)(a1 + 303))
    goto LABEL_16;
  while (*(unsigned __int8 *)v12 == *v13)
  {
    v12 = (const void **)((char *)v12 + 1);
    ++v13;
    if (!--v5)
      goto LABEL_16;
  }
}

void sub_1C2270858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;

  std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer(v9 - 128);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a9);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::createRelationshipTypeNode(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, std::string *a4@<X8>)
{
  unint64_t v7;
  uint64_t *v8;
  std::string::size_type v9;
  uint64_t UnicodeScalarAndUtf8Offsets;
  std::string::size_type v11;
  std::string::size_type v12;
  uint64_t v13;
  std::string::size_type v14;
  std::string::size_type v15;
  std::string *v16;

  v7 = HIDWORD(a3);
  v8 = (uint64_t *)(a1 + 88);
  v9 = a3;
  UnicodeScalarAndUtf8Offsets = snlp::common::utilities::getUnicodeScalarAndUtf8Offsets((uint64_t *)(a1 + 88), a3);
  v12 = v11;
  v13 = snlp::common::utilities::getUnicodeScalarAndUtf8Offsets(v8, v7);
  v15 = v14;
  std::string::basic_string[abi:ne180100]<0>(a4, "");
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a4 + 1, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a4[1].__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a4[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v16 = a4 + 2;
  if (*(char *)(a1 + 327) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)(a1 + 304), *(_QWORD *)(a1 + 312));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 304);
    a4[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 320);
  }
  a4[3].__r_.__value_.__r.__words[0] = v12;
  a4[3].__r_.__value_.__l.__size_ = v15;
  a4[3].__r_.__value_.__r.__words[2] = 0;
  a4[4].__r_.__value_.__r.__words[0] = 0;
  a4[4].__r_.__value_.__l.__size_ = 0;
  a4[4].__r_.__value_.__r.__words[2] = v9;
  a4[5].__r_.__value_.__r.__words[0] = v7;
  a4[5].__r_.__value_.__l.__size_ = UnicodeScalarAndUtf8Offsets;
  a4[5].__r_.__value_.__r.__words[2] = v13;
}

void sub_1C227097C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::createNameNode(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, std::string *a4@<X8>)
{
  unint64_t v7;
  uint64_t *v8;
  std::string::size_type v9;
  uint64_t UnicodeScalarAndUtf8Offsets;
  std::string::size_type v11;
  std::string::size_type v12;
  uint64_t v13;
  std::string::size_type v14;
  std::string::size_type v15;
  std::string *v16;

  v7 = HIDWORD(a3);
  v8 = (uint64_t *)(a1 + 88);
  v9 = a3;
  UnicodeScalarAndUtf8Offsets = snlp::common::utilities::getUnicodeScalarAndUtf8Offsets((uint64_t *)(a1 + 88), a3);
  v12 = v11;
  v13 = snlp::common::utilities::getUnicodeScalarAndUtf8Offsets(v8, v7);
  v15 = v14;
  std::string::basic_string[abi:ne180100]<0>(a4, "");
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a4 + 1, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a4[1].__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a4[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v16 = a4 + 2;
  if (*(char *)(a1 + 255) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)(a1 + 232), *(_QWORD *)(a1 + 240));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 232);
    a4[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 248);
  }
  a4[3].__r_.__value_.__r.__words[0] = v12;
  a4[3].__r_.__value_.__l.__size_ = v15;
  a4[3].__r_.__value_.__r.__words[2] = 0;
  a4[4].__r_.__value_.__r.__words[0] = 0;
  a4[4].__r_.__value_.__l.__size_ = 0;
  a4[4].__r_.__value_.__r.__words[2] = v9;
  a4[5].__r_.__value_.__r.__words[0] = v7;
  a4[5].__r_.__value_.__l.__size_ = UnicodeScalarAndUtf8Offsets;
  a4[5].__r_.__value_.__r.__words[2] = v13;
}

void sub_1C2270AA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientWithName(nlv4_inference_orchestrator::trees::TreeNode &,std::string const&,std::pair<unsigned int,unsigned int> const&)const::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v8;
  unsigned __int8 *v9;
  const nlv4_inference_orchestrator::trees::TreeNode *v10;
  const nlv4_inference_orchestrator::trees::TreeNode *v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  void **v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v23;
  _BOOL8 v24;
  int v25;
  std::string v27;
  void *v28;
  char v29;
  void *__p[2];
  unsigned __int8 v31;
  uint64_t v32;
  void **v33;

  v2 = *(unsigned __int8 *)(a1 + 231);
  if ((v2 & 0x80u) == 0)
    v3 = *(unsigned __int8 *)(a1 + 231);
  else
    v3 = *(_QWORD *)(a1 + 216);
  v4 = *(unsigned __int8 *)(a2 + 71);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 56);
  if (v3 != v4)
    return 0;
  v8 = (const void **)(a1 + 208);
  if (v5 >= 0)
    v9 = (unsigned __int8 *)(a2 + 48);
  else
    v9 = *(unsigned __int8 **)(a2 + 48);
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(_QWORD *)(a1 + 216)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 231))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  v10 = *(const nlv4_inference_orchestrator::trees::TreeNode **)(a2 + 88);
  v11 = *(const nlv4_inference_orchestrator::trees::TreeNode **)(a2 + 96);
  if (v10 == v11)
    return 0;
  do
  {
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v27, v10);
    v12 = *(unsigned __int8 *)(a1 + 207);
    if ((v12 & 0x80u) == 0)
      v13 = (void *)*(unsigned __int8 *)(a1 + 207);
    else
      v13 = *(void **)(a1 + 192);
    v14 = v31;
    if ((v31 & 0x80u) != 0)
      v14 = (unint64_t)__p[1];
    if (v13 == (void *)v14)
    {
      if ((v31 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v12 & 0x80) != 0)
      {
        v24 = memcmp(*(const void **)(a1 + 184), v15, *(_QWORD *)(a1 + 192)) == 0;
      }
      else if (*(_BYTE *)(a1 + 207))
      {
        v16 = v12 - 1;
        v17 = (unsigned __int8 *)(a1 + 184);
        do
        {
          v19 = *v17++;
          v18 = v19;
          v21 = *(unsigned __int8 *)v15;
          v15 = (void **)((char *)v15 + 1);
          v20 = v21;
          v23 = v16-- != 0;
          v24 = v18 == v20;
        }
        while (v18 == v20 && v23);
      }
      else
      {
        v24 = 1;
      }
    }
    else
    {
      v24 = 0;
    }
    v33 = (void **)&v32;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v33);
    if ((char)v31 < 0)
      operator delete(__p[0]);
    if (v29 < 0)
      operator delete(v28);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    v10 = (const nlv4_inference_orchestrator::trees::TreeNode *)((char *)v10 + 144);
    v25 = v10 == v11 || v24;
  }
  while (v25 != 1);
  return v24;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>>>::find<unsigned int>(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

_QWORD *snlp::ssu::encoder::SSUPreprocessor::SSUPreprocessor(_QWORD *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = 0;
  *result = a3;
  result[1] = v3;
  return result;
}

{
  uint64_t v3;

  v3 = *a2;
  *a2 = 0;
  *result = a3;
  result[1] = v3;
  return result;
}

void snlp::ssu::encoder::SSUPreprocessor::buildFromAssetsDirectory(snlp::ssu::encoder::SSUPreprocessor *this@<X0>, const std::__fs::filesystem::path *a2@<X1>, _QWORD *a3@<X8>)
{
  NSObject *v6;
  snlp::ssu::encoder::SSUPreprocessor *v7;
  NSObject *v8;
  std::string *p_p;
  _DWORD *v10;
  _QWORD *v11;
  std::string __p;
  std::string v13;
  uint8_t v14[16];
  std::string buf;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)this + 23) >= 0)
      v7 = this;
    else
      v7 = *(snlp::ssu::encoder::SSUPreprocessor **)this;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
    _os_log_impl(&dword_1C2196000, v6, OS_LOG_TYPE_DEBUG, "Building SSUPreprocessor from assets directory: %s", (uint8_t *)&buf, 0xCu);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>(&buf, "spiece.model");
  std::__fs::filesystem::operator/[abi:ne180100](&v13, (uint64_t)this, (std::__fs::filesystem::path *)&buf);
  v8 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
    else
      __p = v13;
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)v14 = 136315138;
    *(_QWORD *)&v14[4] = p_p;
    _os_log_impl(&dword_1C2196000, v8, OS_LOG_TYPE_DEBUG, "Building preprocessor dependency: SentencePiece model using path: %s", v14, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  else
    __p = v13;
  v10 = (_DWORD *)operator new();
  nl_sentencepiece::SentencepieceModel::SentencepieceModel(v10);
  *(_QWORD *)v14 = v10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v11 = (_QWORD *)operator new();
  *v11 = a2;
  v11[1] = v10;
  *a3 = v11;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
}

void sub_1C2271038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a20 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C22710FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

double snlp::ssu::encoder::SSUPreprocessor::preprocess@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  double result;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  double v11[3];

  snlp::ssu::encoder::SSUPreprocessor::tokenizeSentencePieces(a1, a2, (uint64_t)&v7);
  v4 = v10;
  *(_OWORD *)a3 = v9;
  *(_OWORD *)(a3 + 16) = v4;
  result = v11[0];
  v6 = v7;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)v11;
  *(_OWORD *)(a3 + 48) = v6;
  *(_QWORD *)(a3 + 64) = v8;
  return result;
}

void snlp::ssu::encoder::SSUPreprocessor::tokenizeSentencePieces(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  os_signpost_id_t v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  uint8_t v21[16];
  void *v22[2];
  uint64_t v23;
  void *__p;
  void *v25;
  uint64_t v26;
  uint8_t buf[16];
  uint64_t v28;
  uint64_t v29;
  void *v30[2];
  uint64_t v31;

  v6 = SNLPOSLoggerForCategory(7);
  v7 = os_signpost_id_generate(v6);
  v8 = SNLPOSLoggerForCategory(7);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v9 = v8;
    if (os_signpost_enabled(v8))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "SSUPreprocessor SentencePiece tokenization", "", buf, 2u);
    }
  }
  v10 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_DEFAULT, "BEGIN \"SSUPreprocessor SentencePiece tokenization\"", buf, 2u);
  }
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  v12 = *a1;
  v13 = operator new(0x10uLL);
  *v13 = v11;
  v13[1] = v12;
  std::vector<float>::vector(buf, v11 * v12, &snlp::ssu::encoder::SSUPreprocessor::kPaddingValue);
  v30[1] = 0;
  v31 = 0;
  v29 = *(_QWORD *)buf;
  v30[0] = 0;
  std::vector<unsigned long>::reserve(v30, v11);
  v15 = *a2;
  v14 = a2[1];
  while (v15 != v14)
  {
    snlp::ssu::encoder::SSUPreprocessor::tokenizeSentencePiecesUtterance((uint64_t)a1, v15, buf);
    v15 += 24;
  }
  v22[0] = 0;
  v22[1] = 0;
  v23 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v22, v13, (uint64_t)(v13 + 2), 2uLL);
  v16 = v28;
  v17 = *(_OWORD *)buf;
  v28 = 0;
  v26 = 0;
  memset(buf, 0, sizeof(buf));
  *(_OWORD *)a3 = *(_OWORD *)v30;
  *(_QWORD *)(a3 + 16) = v31;
  v30[1] = 0;
  v31 = 0;
  v30[0] = 0;
  *(_OWORD *)(a3 + 24) = *(_OWORD *)v22;
  *(_QWORD *)(a3 + 40) = v23;
  v22[0] = 0;
  v22[1] = 0;
  *(_OWORD *)(a3 + 48) = v17;
  *(_QWORD *)(a3 + 64) = v16;
  v23 = 0;
  __p = 0;
  v25 = 0;
  v18 = SNLPOSLoggerForCategory(7);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v19 = v18;
    if (os_signpost_enabled(v18))
    {
      *(_WORD *)v21 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v19, OS_SIGNPOST_INTERVAL_END, v7, "SSUPreprocessor SentencePiece tokenization", "", v21, 2u);
    }
  }
  v20 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_1C2196000, v20, OS_LOG_TYPE_DEFAULT, "END \"SSUPreprocessor SentencePiece tokenization\"", v21, 2u);
  }
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  operator delete(v13);
}

void sub_1C2271410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  snlp::ssu::encoder::SSUPreprocessor::PreprocessingState::~PreprocessingState((snlp::ssu::encoder::SSUPreprocessor::PreprocessingState *)va);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void snlp::ssu::encoder::SSUPreprocessor::tokenizeSentencePiecesUtterance(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t *v11;
  float *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t *v25;
  char *v26;
  unint64_t v27;
  _QWORD v28[3];
  _BYTE buf[24];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  nl_sentencepiece::SentencepieceModel::encodeUtterance(v28, **(_QWORD **)(a1 + 8), (uint64_t *)a2);
  v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28[1] - v28[0]) >> 3);
  v8 = *(_QWORD *)a1;
  if (v7 >= *(_QWORD *)a1)
  {
    if (v8 < v7)
    {
      v9 = SNLPOSLoggerForCategory(8);
      v6 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v6)
      {
        if (*(char *)(a2 + 23) >= 0)
          v10 = a2;
        else
          v10 = *(_QWORD *)a2;
        *(_DWORD *)buf = 136642819;
        *(_QWORD *)&buf[4] = v10;
        _os_log_impl(&dword_1C2196000, v9, OS_LOG_TYPE_DEFAULT, "Warning: truncating SentencePiece tokens for utterance: %{sensitive}s", buf, 0xCu);
      }
    }
    v7 = v8;
  }
  if (v7)
  {
    v11 = (uint64_t *)v28[0];
    v12 = (float *)a3[3];
    v13 = 24 * v7;
    do
    {
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = (uint64_t *)*v11;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      v6 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(***(_QWORD ***)(a1 + 8) + 504))(**(_QWORD **)(a1 + 8), v15, v16);
      *v12++ = (float)(int)v6;
      v11 += 3;
      v13 -= 24;
    }
    while (v13);
  }
  v17 = a3[6];
  v18 = (unint64_t *)a3[5];
  if ((unint64_t)v18 >= v17)
  {
    v6 = a3[4];
    v20 = ((uint64_t)v18 - v6) >> 3;
    if ((unint64_t)(v20 + 1) >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v21 = v17 - v6;
    v22 = (uint64_t)(v17 - v6) >> 2;
    if (v22 <= v20 + 1)
      v22 = v20 + 1;
    if (v21 >= 0x7FFFFFFFFFFFFFF8)
      v23 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v23 = v22;
    if (v23)
    {
      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a3 + 6), v23);
      v6 = a3[4];
      v18 = (unint64_t *)a3[5];
    }
    else
    {
      v24 = 0;
    }
    v25 = (unint64_t *)&v24[8 * v20];
    v26 = &v24[8 * v23];
    *v25 = v7;
    v19 = v25 + 1;
    while (v18 != (unint64_t *)v6)
    {
      v27 = *--v18;
      *--v25 = v27;
    }
    a3[4] = v25;
    a3[5] = v19;
    a3[6] = v26;
    if (v6)
      operator delete((void *)v6);
  }
  else
  {
    *v18 = v7;
    v19 = v18 + 1;
  }
  a3[5] = v19;
  snlp::ssu::encoder::SSUPreprocessor::logSentencePiecesTokens(v6, (uint64_t)a3, v28, v7);
  a3[3] += 4 * *(_QWORD *)a1;
  *(_QWORD *)buf = v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1C2271684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

void snlp::ssu::encoder::SSUPreprocessor::PreprocessingState::~PreprocessingState(snlp::ssu::encoder::SSUPreprocessor::PreprocessingState *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

uint64_t snlp::ssu::encoder::SSUPreprocessor::logSentencePiecesTokens(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  NSObject *v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  NSObject *v17;
  void **v18;
  uint64_t v19;
  void *__p;
  char v21;
  _QWORD v22[2];
  _QWORD v23[11];
  char v24;
  uint64_t v25;
  uint8_t buf[4];
  void **v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = SNLPOSLoggerForCategory(8);
  result = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v22);
    if (a4)
    {
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"[", 1);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) <= v9)
          std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
        v11 = *a3 + v8;
        v12 = *(char *)(v11 + 23);
        if (v12 >= 0)
          v13 = *a3 + v8;
        else
          v13 = *(_QWORD *)v11;
        if (v12 >= 0)
          v14 = *(unsigned __int8 *)(v11 + 23);
        else
          v14 = *(_QWORD *)(v11 + 8);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v13, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"::", 2);
        v16 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"]", 1);
        ++v9;
        v8 += 24;
      }
      while (a4 != v9);
    }
    v17 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str();
      v18 = v21 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136642819;
      v27 = v18;
      _os_log_impl(&dword_1C2196000, v17, OS_LOG_TYPE_DEBUG, "Encoded utterance as sentence pieces: %{sensitive}s", buf, 0xCu);
      if (v21 < 0)
        operator delete(__p);
    }
    v22[0] = *MEMORY[0x1E0DE4F50];
    v19 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)v22 + *(_QWORD *)(v22[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v23[0] = v19;
    v23[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v24 < 0)
      operator delete((void *)v23[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return MEMORY[0x1C3BB9A90](&v25);
  }
  return result;
}

void sub_1C2271918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C22729C4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[14] = v2;

  _Unwind_Resume(a1);
}

void uaap::TimeSpanWithReferenceHandler::~TimeSpanWithReferenceHandler(uaap::TimeSpanWithReferenceHandler *this)
{
  JUMPOUT(0x1C3BB9B44);
}

_QWORD *uaap::TimeSpanWithReferenceHandler::handle(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  _QWORD *result;

  result = (_QWORD *)DDResultHasType();
  if ((_DWORD)result)
  {
    uaap::mapTimeSpanWithReferenceToItemizedUsos(a3, a4);
    uaap::mapTimeSpansToItemizedUsos(a3, a4);
    return uaap::mapTimeSpanSpansToItemizedUsos(a3, a4);
  }
  return result;
}

_QWORD *uaap::mapTimeSpanWithReferenceToItemizedUsos(uint64_t a1, char **a2)
{
  CFHashCode v4;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uaap::UPDDSpan *v11;
  siri::ontology::oname::graph::ontology_init *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uaap::UPDDSpan *v16;
  uint64_t v17;
  int v18;

  v4 = CFHash(CFSTR("TimeSpanWithReference"));
  result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v4);
  if (result)
  {
    v6 = result;
    v8 = result[3];
    v7 = result[4];
    if (v7 != v8)
    {
      v9 = 0;
      do
      {
        result = *(_QWORD **)(v8 + 8 * v9);
        if (result)
        {
          if (result)
          {
            v10 = (uint64_t)result;
            v11 = (uaap::UPDDSpan *)operator new();
            v17 = 0;
            v18 = 0;
            v12 = (siri::ontology::oname::graph::ontology_init *)MEMORY[0x1C3BB9154](v11, &v17);
            v16 = v11;
            v13 = *((_QWORD *)v11 + 11);
            v14 = siri::ontology::oname::graph::ontology_init::Argument_entity(v12);
            uaap::TimeSpanWithReferenceHandler::resolveTimeSpanWithReference(v10, v11, v13, v14);
            uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v16, a2);
            result = v16;
            if (v16)
            {
              v15 = MEMORY[0x1C3BB916C]();
              result = (_QWORD *)MEMORY[0x1C3BB9B44](v15, 0x10A0C403D23BABBLL);
            }
            v8 = v6[3];
            v7 = v6[4];
          }
        }
        ++v9;
      }
      while (v9 < (v7 - v8) >> 3);
    }
  }
  return result;
}

void sub_1C2272C58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10A0C403D23BABBLL);
  _Unwind_Resume(a1);
}

siri::ontology::UsoGraph *uaap::TimeSpanWithReferenceHandler::resolveTimeSpanWithReference(uint64_t a1, uaap::UPDDSpan *a2, uint64_t a3, uint64_t a4)
{
  siri::ontology::UsoGraph *v4;
  uint64_t v7;
  siri::ontology::oname::graph::ontology_init *EntityNode;
  uaap::UPDDSpan *v9;
  siri::ontology::UsoEntityNode *v10;
  CFTypeRef *v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  const void *v15;
  siri::ontology::oname::graph::ontology_init *v16;
  siri::ontology::oname::graph::ontology_init *v17;
  siri::ontology::oname::graph::ontology_init *v18;
  siri::ontology::oname::graph::ontology_init *v19;
  siri::ontology::oname::graph::ontology_init *v20;
  uaap::UPDDSpan *v21;
  siri::ontology::UsoEntityNode *v22;
  CFTypeRef **v23;
  CFTypeRef **v24;
  char v25;

  v4 = 0;
  if (a1 && a2 && a3 && a4)
  {
    siri::ontology::oname::graph::ontology_init::Root((siri::ontology::oname::graph::ontology_init *)a1);
    v7 = siri::ontology::operator!=();
    if ((v7 & 1) != 0)
      return 0;
    siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v7);
    EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
    v4 = EntityNode;
    v11 = *(CFTypeRef **)(a1 + 56);
    if (v11)
    {
      v12 = siri::ontology::oname::graph::ontology_init::Argument_offsetValue(EntityNode);
      v13 = uaap::TimeHandler::resolveOffsetDurationValue(v11, a2, (uint64_t)v4, v12) != 0;
    }
    else
    {
      v13 = 0;
    }
    v14 = *(_QWORD *)(a1 + 48);
    if (v14)
    {
      v15 = *(const void **)(v14 + 24);
      if (v15)
      {
        v16 = (siri::ontology::oname::graph::ontology_init *)CFEqual(*(CFTypeRef *)(v14 + 24), CFSTR("after"));
        if ((_DWORD)v16)
        {
          siri::ontology::oname::graph::ontology_init::common_OffsetDirection_After(v16);
          goto LABEL_16;
        }
        v17 = (siri::ontology::oname::graph::ontology_init *)CFEqual(v15, CFSTR("before"));
        if ((_DWORD)v17)
        {
          siri::ontology::oname::graph::ontology_init::common_OffsetDirection_Before(v17);
LABEL_16:
          v18 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
          siri::ontology::oname::graph::ontology_init::common_OffsetDirection(v18);
          v19 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
          siri::ontology::oname::graph::ontology_init::Argument_direction(v19);
          v20 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
          siri::ontology::oname::graph::ontology_init::Argument_definedValue(v20);
          siri::ontology::UsoGraphNode::setSuccessor();
          uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v18, *(siri::ontology::UsoEntityNode **)(a1 + 48), v21);
          v23 = *(CFTypeRef ***)(a1 + 64);
          if (v23)
            uaap::TimeHandler::resolveOffsetReference(v23, a2, v4, v22);
          goto LABEL_25;
        }
      }
    }
    v24 = *(CFTypeRef ***)(a1 + 64);
    if (v24)
    {
      if (uaap::TimeHandler::resolveOffsetReference(v24, a2, v4, v10))
        v25 = 1;
      else
        v25 = v13;
      if ((v25 & 1) == 0)
        return 0;
    }
    else if (!v13)
    {
      return 0;
    }
LABEL_25:
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v4, (siri::ontology::UsoEntityNode *)a1, v9);
    siri::ontology::UsoGraphNode::setSuccessor();
  }
  return v4;
}

siri::ontology::oname::graph::ontology_init *uaap::TimeSpanWithReferenceHandler::resolveTimeSpanWithReferenceGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDTimeSpanWithReference *a2, siri::ontology::UsoGraph *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (this)
  {
    v4 = (uint64_t)this;
    v5 = *((_QWORD *)a2 + 11);
    v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::TimeSpanWithReferenceHandler::resolveTimeSpanWithReference(v4, a2, v5, v6);
  }
  return this;
}

uint64_t snlp::common::text_uso_graph::UsoGraphTextTreeParser::node(uint64_t result, std::string *__str)
{
  uint64_t v2;
  int v3;
  std::string *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t NodeByName;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  unint64_t *v24;
  unint64_t v25;
  siri::ontology::oname::graph::ontology_init *v26;
  uint64_t v27;

  v2 = result;
  v3 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((v3 & 0x80000000) == 0)
  {
    v4 = __str;
    if (v3 != 4)
      goto LABEL_7;
LABEL_6:
    if (LODWORD(v4->__r_.__value_.__l.__data_) == 1953460050)
      return result;
    goto LABEL_7;
  }
  if (__str->__r_.__value_.__l.__size_ == 4)
  {
    v4 = (std::string *)__str->__r_.__value_.__r.__words[0];
    goto LABEL_6;
  }
LABEL_7:
  v5 = *(std::__shared_weak_count **)(result + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  NodeByName = snlp::common::text_uso_graph::createNodeByName(__str);
  v9 = NodeByName;
  v11 = *(_QWORD *)(v2 + 96);
  v10 = *(_QWORD *)(v2 + 104);
  if (v11 >= v10)
  {
    v13 = *(_QWORD *)(v2 + 88);
    v14 = (uint64_t)(v11 - v13) >> 4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 60)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v16 = v10 - v13;
    if (v16 >> 3 > v15)
      v15 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v17);
    v19 = &v18[16 * v14];
    v21 = &v18[16 * v20];
    *(_DWORD *)v19 = *(_DWORD *)(v2 + 80);
    *((_QWORD *)v19 + 1) = v9;
    v12 = v19 + 16;
    v23 = *(char **)(v2 + 88);
    v22 = *(char **)(v2 + 96);
    if (v22 != v23)
    {
      do
      {
        *((_OWORD *)v19 - 1) = *((_OWORD *)v22 - 1);
        v19 -= 16;
        v22 -= 16;
      }
      while (v22 != v23);
      v22 = *(char **)(v2 + 88);
    }
    *(_QWORD *)(v2 + 88) = v19;
    *(_QWORD *)(v2 + 96) = v12;
    *(_QWORD *)(v2 + 104) = v21;
    if (v22)
      operator delete(v22);
  }
  else
  {
    *(_DWORD *)v11 = *(_DWORD *)(v2 + 80);
    *(_QWORD *)(v11 + 8) = NodeByName;
    v12 = (char *)(v11 + 16);
  }
  *(_QWORD *)(v2 + 96) = v12;
  if (v5)
  {
    v24 = (unint64_t *)&v5->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (!*(_BYTE *)(v2 + 72))
  {
    v26 = (siri::ontology::oname::graph::ontology_init *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 96) - 8)
                                                                                           + 16))(*(_QWORD *)(*(_QWORD *)(v2 + 96) - 8));
    if ((_DWORD)v26 == 2)
      v27 = siri::ontology::oname::graph::ontology_init::Argument_entity(v26);
    else
      v27 = siri::ontology::oname::graph::ontology_init::Argument_task(v26);
    std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>((std::string *)(v2 + 48), (const std::string *)(v27 + 8));
  }
  return snlp::common::text_uso_graph::UsoGraphTextTreeParser::attachChildInStack((snlp::common::text_uso_graph::UsoGraphTextTreeParser *)v2);
}

void sub_1C227307C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *snlp::common::text_uso_graph::UsoGraphTextTreeParser::edge(std::string *a1, const std::string *a2)
{
  return std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(a1 + 2, a2);
}

uint64_t snlp::common::text_uso_graph::UsoGraphTextTreeParser::stringValue(uint64_t a1, uint64_t a2)
{
  char *StringNode;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  std::string __p;
  char v21;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v21 = 1;
  StringNode = (char *)siri::ontology::UsoGraph::createStringNode();
  v4 = StringNode;
  v6 = *(_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 104);
  if (v6 >= v5)
  {
    v8 = *(_QWORD *)(a1 + 88);
    v9 = (uint64_t)(v6 - v8) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v11 = v5 - v8;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v12);
    v14 = &v13[16 * v9];
    v16 = &v13[16 * v15];
    *(_DWORD *)v14 = *(_DWORD *)(a1 + 80);
    *((_QWORD *)v14 + 1) = v4;
    v7 = v14 + 16;
    v17 = *(char **)(a1 + 88);
    StringNode = *(char **)(a1 + 96);
    if (StringNode != v17)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)StringNode - 1);
        v14 -= 16;
        StringNode -= 16;
      }
      while (StringNode != v17);
      StringNode = *(char **)(a1 + 88);
    }
    *(_QWORD *)(a1 + 88) = v14;
    *(_QWORD *)(a1 + 96) = v7;
    *(_QWORD *)(a1 + 104) = v16;
    if (StringNode)
      operator delete(StringNode);
  }
  else
  {
    *(_DWORD *)v6 = *(_DWORD *)(a1 + 80);
    *(_QWORD *)(v6 + 8) = StringNode;
    v7 = (char *)(v6 + 16);
  }
  *(_QWORD *)(a1 + 96) = v7;
  if (v21 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(a1 + 72))
  {
    v18 = siri::ontology::oname::graph::ontology_init::Argument_entity((siri::ontology::oname::graph::ontology_init *)StringNode);
    std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>((std::string *)(a1 + 48), (const std::string *)(v18 + 8));
  }
  return snlp::common::text_uso_graph::UsoGraphTextTreeParser::attachChildInStack((snlp::common::text_uso_graph::UsoGraphTextTreeParser *)a1);
}

void sub_1C2273204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t snlp::common::text_uso_graph::UsoGraphTextTreeParser::integerValue(std::string *this)
{
  char *IntNode;
  char *v3;
  std::string::size_type size;
  std::string::pointer data;
  std::string::size_type v6;
  std::string::size_type v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  IntNode = (char *)siri::ontology::UsoGraph::createIntNode();
  v3 = IntNode;
  data = this[4].__r_.__value_.__l.__data_;
  size = this[4].__r_.__value_.__l.__size_;
  if ((unint64_t)data >= size)
  {
    v7 = this[3].__r_.__value_.__r.__words[2];
    v8 = (uint64_t)&data[-v7] >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v10 = size - v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v11);
    v13 = &v12[16 * v8];
    v15 = &v12[16 * v14];
    *(_DWORD *)v13 = this[3].__r_.__value_.__r.__words[1];
    *((_QWORD *)v13 + 1) = v3;
    v6 = (std::string::size_type)(v13 + 16);
    v16 = (char *)this[3].__r_.__value_.__r.__words[2];
    IntNode = this[4].__r_.__value_.__l.__data_;
    if (IntNode != v16)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)IntNode - 1);
        v13 -= 16;
        IntNode -= 16;
      }
      while (IntNode != v16);
      IntNode = (char *)this[3].__r_.__value_.__r.__words[2];
    }
    this[3].__r_.__value_.__r.__words[2] = (std::string::size_type)v13;
    this[4].__r_.__value_.__r.__words[0] = v6;
    this[4].__r_.__value_.__l.__size_ = (std::string::size_type)v15;
    if (IntNode)
      operator delete(IntNode);
  }
  else
  {
    *(_DWORD *)data = this[3].__r_.__value_.__r.__words[1];
    *((_QWORD *)data + 1) = IntNode;
    v6 = (std::string::size_type)(data + 16);
  }
  this[4].__r_.__value_.__r.__words[0] = v6;
  if (!this[3].__r_.__value_.__s.__data_[0])
  {
    v17 = siri::ontology::oname::graph::ontology_init::Argument_entity((siri::ontology::oname::graph::ontology_init *)IntNode);
    std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(this + 2, (const std::string *)(v17 + 8));
  }
  return snlp::common::text_uso_graph::UsoGraphTextTreeParser::attachChildInStack((snlp::common::text_uso_graph::UsoGraphTextTreeParser *)this);
}

uint64_t snlp::common::text_uso_graph::UsoGraphTextTreeParser::indentation(uint64_t this, unsigned int a2)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int *v4;

  *(_DWORD *)(this + 80) = a2;
  v3 = *(unsigned int **)(this + 88);
  v2 = *(unsigned int **)(this + 96);
  if (v3 != v2)
  {
    while (*v3 < a2)
    {
      v3 += 4;
      if (v3 == v2)
        return this;
    }
    if (v3 != v2)
    {
      v4 = v3 + 4;
      if (v3 + 4 != v2)
      {
        do
        {
          if (*v4 < a2)
          {
            *(_OWORD *)v3 = *(_OWORD *)v4;
            v3 += 4;
          }
          v4 += 4;
        }
        while (v4 != v2);
        v2 = *(unsigned int **)(this + 96);
      }
    }
    if (v3 != v2)
      *(_QWORD *)(this + 96) = v3;
  }
  return this;
}

void snlp::common::text_uso_graph::UsoGraphTextTreeParser::alias(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  std::string *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 96) - 8);
  v6 = (uint64_t *)(a1 + 112);
  v7 = (_QWORD *)(a1 + 136);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 136, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 120);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v2 = v8;
      if (v8 >= v10)
        v2 = v8 % v10;
    }
    else
    {
      v2 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*v6 + 8 * v2);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v9)
          {
            if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 144, (unsigned __int8 *)v14 + 16, (unsigned __int8 *)a2) & 1) != 0)goto LABEL_43;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v2)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  v14 = (char *)operator new(0x30uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v9;
  v16 = (std::string *)(v14 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v14 + 4) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v14 + 5) = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 136) + 1);
  v18 = *(float *)(a1 + 144);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>((uint64_t)v6, v22);
    v10 = *(_QWORD *)(a1 + 120);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v2 = v9 % v10;
      else
        v2 = v9;
    }
    else
    {
      v2 = (v10 - 1) & v9;
    }
  }
  v23 = *v6;
  v24 = *(_QWORD **)(*v6 + 8 * v2);
  if (v24)
  {
    *(_QWORD *)v14 = *v24;
LABEL_41:
    *v24 = v14;
    goto LABEL_42;
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v14;
  *(_QWORD *)(v23 + 8 * v2) = a1 + 128;
  if (*(_QWORD *)v14)
  {
    v25 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*v6 + 8 * v25);
    goto LABEL_41;
  }
LABEL_42:
  ++*v7;
LABEL_43:
  *((_QWORD *)v14 + 5) = v5;
}

void sub_1C2273650(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t snlp::common::text_uso_graph::UsoGraphTextTreeParser::textAlignment(snlp::common::text_uso_graph::UsoGraphTextTreeParser *this)
{
  const void *v1;
  std::runtime_error *exception;

  v1 = *(const void **)(*((_QWORD *)this + 12) - 8);
  if (!v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    _ZN4snlp6common14text_uso_graph26UsoGraphTextTreeParseErrorCI1St13runtime_errorEPKc(exception, "Last node on the parser stack is null, but it shouldn't");
    goto LABEL_6;
  }
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    _ZN4snlp6common14text_uso_graph26UsoGraphTextTreeParseErrorCI1St13runtime_errorEPKc(exception, "Test alignment parsed but last node on parser stack is not a UsoEntityNode");
LABEL_6:
  }
  return siri::ontology::UsoEntityNode::addUtteranceAlignment();
}

void sub_1C2273724(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t snlp::common::text_uso_graph::UsoGraphTextTreeParser::toTreeDebug(snlp::common::text_uso_graph::UsoGraphTextTreeParser *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 12) - 8) + 48))(*(_QWORD *)(*((_QWORD *)this + 12) - 8));
}

std::runtime_error *_ZN4snlp6common14text_uso_graph26UsoGraphTextTreeParseErrorCI1St13runtime_errorEPKc(std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9D88;
  return result;
}

uint64_t snlp::common::text_uso_graph::UsoGraphTextTreeParser::attachChildInStack(snlp::common::text_uso_graph::UsoGraphTextTreeParser *this)
{
  uint64_t v1;
  char v3;
  std::runtime_error *exception;
  std::string *v6;
  __int128 v7;
  std::runtime_error *v8;
  snlp::common::text_uso_graph::UsoGraphTextTreeParser *v9;
  std::runtime_error *v10;
  std::string v11;
  std::string v12;

  v1 = *(_QWORD *)(*((_QWORD *)this + 12) - 8);
  if (!*((_BYTE *)this + 72))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v1 + 48))(&v11, v1);
    v6 = std::string::insert(&v11, 0, "Empty edge found while attaching: ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v12);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9D88;
  }
  siri::ontology::UsoVocabManager::getEdgeName();
  if (!v3)
  {
    v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = this;
    v10 = v8;
    if (!*((_BYTE *)v9 + 72))
      std::__throw_bad_optional_access[abi:ne180100]();
    std::operator+<char>();
    std::runtime_error::runtime_error(v10, &v12);
    v10->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9D88;
  }
  return siri::ontology::UsoGraphNode::setSuccessor();
}

void sub_1C22738E8(_Unwind_Exception *exception_object)
{
  void *v1;
  char v2;
  uint64_t v3;

  if (*(char *)(v3 - 73) < 0)
    operator delete(*(void **)(v3 - 96));
  if ((v2 & 1) != 0)
    __cxa_free_exception(v1);
  _Unwind_Resume(exception_object);
}

void sub_1C2273AD8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  int v40;
  void *v41;
  uint64_t v42;

  if (*(char *)(v42 - 73) < 0)
    operator delete(*(void **)(v42 - 96));
  if (*(char *)(v42 - 105) < 0)
    operator delete(*(void **)(v42 - 128));
  if (a40 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v40 & 1) == 0)
      goto LABEL_18;
  }
  else if (!v40)
  {
LABEL_18:
    __cxa_end_catch();
    JUMPOUT(0x1C2273BC0);
  }
  __cxa_free_exception(v41);
  goto LABEL_18;
}

uint64_t snlp::common::text_uso_graph::createNodeByName(std::string *__str)
{
  uint64_t v1;
  uint64_t v2;
  std::string *v3;
  uint64_t NodeName;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  std::string::size_type *p_size;
  std::string::size_type v11;
  char v12;
  uint64_t OperatorNode;
  uint64_t v14;
  std::string::size_type size;
  std::string::size_type v16;
  size_t v17;
  std::string *v18;
  const void *v19;
  int v20;
  std::string::size_type *v21;
  std::string::size_type v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  char v27;
  char v28;
  std::runtime_error *v29;
  std::string *v30;
  __int128 v31;
  uint64_t TaskNode;
  std::runtime_error *exception;
  std::string *v35;
  __int128 v36;
  uint64_t v37;
  std::string *v38;
  std::string v39;
  std::string v40;
  std::string v41;
  void *v42;
  uint64_t v43;
  unsigned __int8 v44;
  std::string __p;
  _QWORD v46[3];
  _QWORD v47[3];
  _QWORD v48[3];
  _QWORD v49[3];
  _QWORD v50[3];
  _QWORD v51[3];
  _QWORD v52[3];
  _QWORD v53[3];
  _QWORD v54[3];
  _QWORD v55[3];
  _QWORD v56[3];
  _QWORD v57[3];
  _QWORD v58[3];
  _QWORD v59[3];
  _QWORD v60[3];
  _QWORD v61[3];
  _QWORD v62[3];
  _QWORD v63[3];
  _QWORD v64[3];
  _QWORD v65[3];
  _QWORD v66[3];
  _QWORD v67[3];
  _QWORD v68[3];
  _QWORD v69[3];
  _QWORD v70[3];
  _QWORD v71[3];
  _QWORD v72[3];
  _QWORD v73[3];
  _QWORD v74[3];
  _QWORD v75[3];
  _QWORD v76[3];
  _QWORD v77[3];
  _QWORD v78[3];
  _QWORD v79[3];
  __int128 v80;

  *((_QWORD *)&v80 + 1) = *MEMORY[0x1E0C80C00];
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"::";
  __p.__r_.__value_.__l.__size_ = 2;
  nlv4_inference_orchestrator::trees::split(&v41, __str, (const void **)&__p.__r_.__value_.__l.__data_);
  if ((char)v44 < 0)
    v1 = v43;
  else
    v1 = v44;
  if (v1)
    v2 = 0;
  else
    v2 = 24;
  if (v1)
    v3 = &v41;
  else
    v3 = (std::string *)&v42;
  NodeName = siri::ontology::UsoVocabManager::getNodeName();
  LOBYTE(v6) = v5;
  if (v5)
  {
    v7 = NodeName;
  }
  else
  {
    std::operator+<char>();
    v7 = siri::ontology::UsoVocabManager::getNodeName();
    v6 = v8;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (!v6)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v35 = std::string::append(&v40, " not found in ontology.");
      v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &__p);
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9D88;
    }
  }
  if (!(_BYTE)v6)
    std::__throw_bad_optional_access[abi:ne180100]();
  if (v1)
    v9 = 23;
  else
    v9 = 47;
  p_size = &v41.__r_.__value_.__l.__size_;
  if (!v1)
    p_size = (std::string::size_type *)&v43;
  v11 = *p_size;
  if (v41.__r_.__value_.__s.__data_[v9] >= 0)
    v11 = v41.__r_.__value_.__s.__data_[v9];
  if (!v11)
  {
    if (*(_DWORD *)(v7 + 32) == 5)
      OperatorNode = siri::ontology::UsoGraph::createOperatorNode();
    else
      OperatorNode = siri::ontology::UsoGraph::createEntityNode();
    goto LABEL_61;
  }
  siri::ontology::UsoVocabManager::getVerbName();
  if (v12)
  {
    OperatorNode = siri::ontology::UsoGraph::createTaskNode();
LABEL_61:
    TaskNode = OperatorNode;
    goto LABEL_62;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Check");
  std::string::basic_string[abi:ne180100]<0>(v46, "Control");
  std::string::basic_string[abi:ne180100]<0>(v47, "Convert");
  std::string::basic_string[abi:ne180100]<0>(v48, "Create");
  std::string::basic_string[abi:ne180100]<0>(v49, "Delete");
  std::string::basic_string[abi:ne180100]<0>(v50, "Entity");
  std::string::basic_string[abi:ne180100]<0>(v51, "NoVerb");
  std::string::basic_string[abi:ne180100]<0>(v52, "PlaceholderVerb");
  std::string::basic_string[abi:ne180100]<0>(v53, "RecipientsEventTrigger");
  std::string::basic_string[abi:ne180100]<0>(v54, "RecipientsHiddenPeople");
  std::string::basic_string[abi:ne180100]<0>(v55, "Reference");
  std::string::basic_string[abi:ne180100]<0>(v56, "ReferenceControl");
  std::string::basic_string[abi:ne180100]<0>(v57, "ReferenceDateTimeRangeTrigger");
  std::string::basic_string[abi:ne180100]<0>(v58, "ReferenceDurationTrigger");
  std::string::basic_string[abi:ne180100]<0>(v59, "ReferenceMeasurementTrigger");
  std::string::basic_string[abi:ne180100]<0>(v60, "ReferenceNumberTrigger");
  std::string::basic_string[abi:ne180100]<0>(v61, "ReferencePaymentSortKey");
  std::string::basic_string[abi:ne180100]<0>(v62, "ReferencePhotoCollection");
  std::string::basic_string[abi:ne180100]<0>(v63, "ReferencePhotoCollectionFilter");
  std::string::basic_string[abi:ne180100]<0>(v64, "ReferencePhotoFilter");
  std::string::basic_string[abi:ne180100]<0>(v65, "ReferencePhotoMemoryFilter");
  std::string::basic_string[abi:ne180100]<0>(v66, "ReferencePhotoTag");
  std::string::basic_string[abi:ne180100]<0>(v67, "ReferenceProfile");
  std::string::basic_string[abi:ne180100]<0>(v68, "ReferenceSelect");
  std::string::basic_string[abi:ne180100]<0>(v69, "ReferenceSlideshowFilter");
  std::string::basic_string[abi:ne180100]<0>(v70, "ReferenceStringTrigger");
  std::string::basic_string[abi:ne180100]<0>(v71, "ReferenceTarget");
  std::string::basic_string[abi:ne180100]<0>(v72, "ReferenceTargetSelect");
  std::string::basic_string[abi:ne180100]<0>(v73, "ReferenceTrigger");
  std::string::basic_string[abi:ne180100]<0>(v74, "ReferenceVideoFilter");
  std::string::basic_string[abi:ne180100]<0>(v75, "Request");
  std::string::basic_string[abi:ne180100]<0>(v76, "StockSummarise");
  std::string::basic_string[abi:ne180100]<0>(v77, "Summarise");
  std::string::basic_string[abi:ne180100]<0>(v78, "Target");
  std::string::basic_string[abi:ne180100]<0>(v79, "Update");
  memset(&v40, 0, sizeof(v40));
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
  v39.__r_.__value_.__s.__data_[8] = 0;
  v37 = v2;
  v40.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x348uLL);
  v40.__r_.__value_.__l.__size_ = v40.__r_.__value_.__r.__words[0];
  v40.__r_.__value_.__r.__words[2] = v40.__r_.__value_.__r.__words[0] + 840;
  v40.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v40.__r_.__value_.__r.__words[2], (__int128 *)&__p, &v80, (std::string *)v40.__r_.__value_.__l.__data_);
  v14 = 840;
  do
  {
    if (__p.__r_.__value_.__s.__data_[v14 - 1] < 0)
      operator delete(*(void **)((char *)&v43 + v14));
    v14 -= 24;
  }
  while (v14);
  v38 = v3;
  size = v40.__r_.__value_.__l.__size_;
  v16 = v40.__r_.__value_.__r.__words[0];
  if (v40.__r_.__value_.__r.__words[0] == v40.__r_.__value_.__l.__size_)
  {
LABEL_59:
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v30 = std::string::append(&v40, " not found in ontology.");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v29, &__p);
    v29->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9D88;
  }
  while (1)
  {
    if (*(char *)(v16 + 23) >= 0)
      v17 = *(unsigned __int8 *)(v16 + 23);
    else
      v17 = *(_QWORD *)(v16 + 8);
    std::string::basic_string[abi:ne180100]((uint64_t)&v39, v17 + 1);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v39;
    else
      v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
    if (v17)
    {
      if (*(char *)(v16 + 23) >= 0)
        v19 = (const void *)v16;
      else
        v19 = *(const void **)v16;
      memmove(v18, v19, v17);
    }
    *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v17) = 95;
    v20 = v41.__r_.__value_.__s.__data_[v9];
    v21 = (std::string::size_type *)&v43;
    if (v1)
      v21 = &v41.__r_.__value_.__l.__size_;
    v22 = *v21;
    if (v20 >= 0)
      v23 = (const std::string::value_type *)v38;
    else
      v23 = *(std::string::pointer *)((char *)&v41.__r_.__value_.__l.__data_ + v37);
    if (v20 >= 0)
      v24 = v41.__r_.__value_.__s.__data_[v9];
    else
      v24 = v22;
    v25 = std::string::append(&v39, v23, v24);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    siri::ontology::UsoVocabManager::getVerbName();
    v28 = v27;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (v28)
      break;
    v16 += 24;
    if (v16 == size)
      goto LABEL_59;
  }
  TaskNode = siri::ontology::UsoGraph::createTaskNode();
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_62:
  if ((char)v44 < 0)
    operator delete(v42);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  return TaskNode;
}

