uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

HealthMedicationsExperience::PregnancyTrimesterLactationRatings::Rating_optional __swiftcall PregnancyTrimesterLactationRatings.Rating.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 4;
  if ((unint64_t)rawValue < 4)
    v2 = rawValue;
  *v1 = v2;
  return (HealthMedicationsExperience::PregnancyTrimesterLactationRatings::Rating_optional)rawValue;
}

uint64_t PregnancyTrimesterLactationRatings.Rating.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

BOOL sub_1BCAF5D44(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1BCAF5D58()
{
  sub_1BCB64A90();
  sub_1BCB64A9C();
  return sub_1BCB64AC0();
}

uint64_t sub_1BCAF5D9C()
{
  return sub_1BCB64A9C();
}

uint64_t sub_1BCAF5DC4()
{
  sub_1BCB64A90();
  sub_1BCB64A9C();
  return sub_1BCB64AC0();
}

HealthMedicationsExperience::PregnancyTrimesterLactationRatings::Rating_optional sub_1BCAF5E04(Swift::Int *a1)
{
  return PregnancyTrimesterLactationRatings.Rating.init(rawValue:)(*a1);
}

void sub_1BCAF5E0C(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

void PregnancyTrimesterLactationRatings.pregnancyFirstTrimester.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void PregnancyTrimesterLactationRatings.pregnancySecondTrimester.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

void PregnancyTrimesterLactationRatings.pregnancyThirdTrimester.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 2);
}

void PregnancyTrimesterLactationRatings.lactation.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 3);
}

HealthMedicationsExperience::PregnancyTrimesterLactationRatings __swiftcall PregnancyTrimesterLactationRatings.init(firstTrimester:secondTrimester:thirdTrimester:lactation:)(HealthMedicationsExperience::PregnancyTrimesterLactationRatings::Rating firstTrimester, HealthMedicationsExperience::PregnancyTrimesterLactationRatings::Rating secondTrimester, HealthMedicationsExperience::PregnancyTrimesterLactationRatings::Rating thirdTrimester, HealthMedicationsExperience::PregnancyTrimesterLactationRatings::Rating lactation)
{
  _BYTE *v4;
  char v5;
  char v6;
  char v7;
  HealthMedicationsExperience::PregnancyTrimesterLactationRatings result;

  v5 = *(_BYTE *)secondTrimester;
  v6 = *(_BYTE *)thirdTrimester;
  v7 = *(_BYTE *)lactation;
  *v4 = *(_BYTE *)firstTrimester;
  v4[1] = v5;
  v4[2] = v6;
  v4[3] = v7;
  result.pregnancyFirstTrimester = firstTrimester;
  return result;
}

HealthMedicationsExperience::PregnancyTrimesterLactationRatings_optional __swiftcall PregnancyTrimesterLactationRatings.init(ratingsString:)(Swift::String ratingsString)
{
  int *v1;
  int *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String *v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  int v19;
  HealthMedicationsExperience::PregnancyTrimesterLactationRatings_optional v20;
  Swift::String v21;

  v2 = v1;
  v21 = ratingsString;
  v3 = sub_1BCAF6098();
  v4 = MEMORY[0x1BCCFCDF4](44, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, MEMORY[0x1E0DEA968], v3);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v6 = (unint64_t *)(v4 + 56);
    v7 = (char *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v9 = *(v6 - 3);
      v8 = *(v6 - 2);
      if ((v8 ^ v9) >= 0x4000)
      {
        v11 = *(v6 - 1);
        v10 = *v6;
        if ((*v6 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRetain();
          v13 = (unint64_t)sub_1BCAF70EC(v9, v8, v11, v10, 10);
          v18 = v17;
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
            goto LABEL_12;
        }
        else
        {
          if ((v10 & 0x2000000000000000) != 0)
          {
            v21._countAndFlagsBits = *(v6 - 1);
            v21._object = (void *)(v10 & 0xFFFFFFFFFFFFFFLL);
            v12 = &v21;
          }
          else if ((v11 & 0x1000000000000000) != 0)
          {
            v12 = (Swift::String *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            v12 = (Swift::String *)sub_1BCB64808();
          }
          v13 = sub_1BCAF7458((uint64_t)v12, v9, v8, v11, v10, 10);
          if ((v14 & 1) == 0)
          {
LABEL_12:
            if (v13 <= 3)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v7 = sub_1BCAF6FE8(0, *((_QWORD *)v7 + 2) + 1, 1, v7, &qword_1EF4871D0, (uint64_t)&type metadata for PregnancyTrimesterLactationRatings.Rating);
              v16 = *((_QWORD *)v7 + 2);
              v15 = *((_QWORD *)v7 + 3);
              if (v16 >= v15 >> 1)
                v7 = sub_1BCAF6FE8((char *)(v15 > 1), v16 + 1, 1, v7, &qword_1EF4871D0, (uint64_t)&type metadata for PregnancyTrimesterLactationRatings.Rating);
              *((_QWORD *)v7 + 2) = v16 + 1;
              v7[v16 + 32] = v13;
            }
          }
        }
      }
      v6 += 4;
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
    }
  }
  v7 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_22:
  swift_bridgeObjectRelease();
  if (*((_QWORD *)v7 + 2) == 4)
    v19 = *((_DWORD *)v7 + 8);
  else
    v19 = 4;
  v20 = (HealthMedicationsExperience::PregnancyTrimesterLactationRatings_optional)swift_bridgeObjectRelease();
  *v2 = v19;
  return v20;
}

unint64_t sub_1BCAF6098()
{
  unint64_t result;

  result = qword_1EDA14558;
  if (!qword_1EDA14558)
  {
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EDA14558);
  }
  return result;
}

HealthMedicationsExperience::PregnancyTrimesterLactationRatings_optional __swiftcall PregnancyTrimesterLactationRatings.init(ratings:)(Swift::OpaquePointer ratings)
{
  int *v1;
  int *v2;
  int v3;
  HealthMedicationsExperience::PregnancyTrimesterLactationRatings_optional v4;

  v2 = v1;
  if (*((_QWORD *)ratings._rawValue + 2) == 4)
    v3 = *((_DWORD *)ratings._rawValue + 8);
  else
    v3 = 4;
  v4 = (HealthMedicationsExperience::PregnancyTrimesterLactationRatings_optional)swift_bridgeObjectRelease();
  *v2 = v3;
  return v4;
}

BOOL PregnancyTrimesterLactationRatings.anyPregnancyRatingCritical.getter()
{
  _BYTE *v0;

  return *v0 == 3 || v0[1] == 3 || v0[2] == 3;
}

BOOL PregnancyTrimesterLactationRatings.lactationRatingCritical.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 3) == 3;
}

int HKMedicationUserDomainConcept.pregnancyTrimesterLactationRatings.getter@<W0>(int *a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  void *v5;
  int result;
  Swift::String v7;
  int v8;
  int v9;

  KeyPath = swift_getKeyPath();
  v3 = sub_1BCB1FCE0(KeyPath, 0x53555F6E65, 0xE500000000000000);
  v5 = v4;
  result = swift_release();
  if (v5)
  {
    v7._countAndFlagsBits = v3;
    v7._object = v5;
    result = (int)PregnancyTrimesterLactationRatings.init(ratingsString:)(v7);
    v8 = v9;
    if (v9 == 4)
      v8 = 4;
  }
  else
  {
    v8 = 4;
  }
  *a1 = v8;
  return result;
}

void sub_1BCAF61E4(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;

  v3 = objc_msgSend(*a1, sel_localizedOntologyPregnancyTrimesterLactationRatings);
  v4 = sub_1BCB640B8();

  *a2 = v4;
}

uint64_t sub_1BCAF6248()
{
  sub_1BCAF7D24(&qword_1EF487230, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1BCB65D08);
  return sub_1BCB64A54();
}

uint64_t sub_1BCAF6288()
{
  sub_1BCAF7D24(&qword_1EF487230, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1BCB65D08);
  return sub_1BCB64A48();
}

uint64_t sub_1BCAF62CC()
{
  sub_1BCAF7D24((unint64_t *)&qword_1EF487268, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1BCB65EA4);
  return sub_1BCB63A40();
}

id sub_1BCAF630C()
{
  id *v0;

  return *v0;
}

uint64_t sub_1BCAF6314@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_1BCAF631C(uint64_t a1, uint64_t a2)
{
  return sub_1BCAF6464(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1940]);
}

uint64_t sub_1BCAF6328(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_1BCB64124();
  *a2 = 0;
  return result;
}

uint64_t sub_1BCAF639C(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_1BCB64130();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1BCAF6418@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_1BCB6413C();
  v2 = sub_1BCB6410C();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1BCAF6458(uint64_t a1, uint64_t a2)
{
  return sub_1BCAF6464(a1, a2, MEMORY[0x1E0DEA950]);
}

uint64_t sub_1BCAF6464(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1BCB6413C();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1BCAF64A0()
{
  sub_1BCB6413C();
  sub_1BCB641CC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BCAF64E0()
{
  uint64_t v0;

  sub_1BCB6413C();
  sub_1BCB64A90();
  sub_1BCB641CC();
  v0 = sub_1BCB64AC0();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1BCAF6550(uint64_t a1, uint64_t a2)
{
  return sub_1BCAF659C(a1, a2, (void (*)(uint64_t))MEMORY[0x1E0DEDF30]);
}

uint64_t sub_1BCAF655C()
{
  return sub_1BCB64AB4();
}

uint64_t sub_1BCAF6584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BCAF6620(a1, a2, a3, (void (*)(uint64_t))MEMORY[0x1E0DEDF30]);
}

uint64_t sub_1BCAF6590(uint64_t a1, uint64_t a2)
{
  return sub_1BCAF659C(a1, a2, (void (*)(uint64_t))MEMORY[0x1E0DEDF10]);
}

uint64_t sub_1BCAF659C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t *v3;
  uint64_t v5;

  v5 = *v3;
  sub_1BCB64A90();
  a3(v5);
  return sub_1BCB64AC0();
}

uint64_t sub_1BCAF65EC()
{
  return sub_1BCB64A9C();
}

uint64_t sub_1BCAF6614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BCAF6620(a1, a2, a3, (void (*)(uint64_t))MEMORY[0x1E0DEDF10]);
}

uint64_t sub_1BCAF6620(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t *v4;
  uint64_t v6;

  v6 = *v4;
  sub_1BCB64A90();
  a4(v6);
  return sub_1BCB64AC0();
}

uint64_t sub_1BCAF666C()
{
  return sub_1BCB6413C();
}

uint64_t sub_1BCAF667C()
{
  sub_1BCAF7D24((unint64_t *)&qword_1EF487268, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1BCB65EA4);
  return sub_1BCB63A7C();
}

uint64_t sub_1BCAF66BC()
{
  sub_1BCAF7D24((unint64_t *)&qword_1EF487268, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1BCB65EA4);
  return sub_1BCB63A58();
}

uint64_t sub_1BCAF66FC(void *a1)
{
  id v2;

  sub_1BCAF7D24((unint64_t *)&qword_1EF487268, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1BCB65EA4);
  v2 = a1;
  return sub_1BCB63A4C();
}

uint64_t sub_1BCAF6760()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = sub_1BCB64610();

  return v2;
}

uint64_t sub_1BCAF6794()
{
  sub_1BCAF7D24((unint64_t *)&qword_1EF487268, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1BCB65EA4);
  return sub_1BCB63A70();
}

uint64_t sub_1BCAF67E4()
{
  sub_1BCB64A90();
  sub_1BCB640DC();
  return sub_1BCB64AC0();
}

_QWORD *sub_1BCAF6840@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_1BCAF6850(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_1BCAF685C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_1BCB6413C();
  v2 = v1;
  if (v0 == sub_1BCB6413C() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1BCB649F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1BCAF68E4()
{
  sub_1BCAF7D24((unint64_t *)&qword_1EF487268, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1BCB65EA4);
  return sub_1BCB63A64();
}

BOOL sub_1BCAF693C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1BCAF6950@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1BCB6410C();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1BCAF6994@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1BCB6413C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1BCAF69BC()
{
  sub_1BCAF7D24(&qword_1EDA13990, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BCB65E60);
  sub_1BCAF7D24(&qword_1EF487278, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BCB65DB4);
  return sub_1BCB6491C();
}

_QWORD *sub_1BCAF6A40(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA14280, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1BCAF7D64(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BCAF6B60(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1BCAF6B88(a1, a2, a3, a4, &qword_1EF4871C8, (void (*)(uint64_t))type metadata accessor for MedicationDoseEventUpdateModel);
}

uint64_t sub_1BCAF6B74(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1BCAF6B88(a1, a2, a3, a4, &qword_1EF4871C0, (void (*)(uint64_t))type metadata accessor for MedicationDoseEventLogSource);
}

uint64_t sub_1BCAF6B88(char a1, int64_t a2, char a3, unint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_1BCAF8248(0, a5, a6);
  v13 = *(_QWORD *)(((uint64_t (*)(_QWORD))a6)(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_1BCB648A4();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(((uint64_t (*)(_QWORD))a6)(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1BCAF7F44(0, v11, v21, a4, (uint64_t (*)(_QWORD))a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

_QWORD *sub_1BCAF6D9C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1BCAF84F0(0, &qword_1EF4871B8, (uint64_t)&type metadata for MedicationSearchCluster, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1BCAF7E54(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BCAF6EBC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1BCAF8248(0, (unint64_t *)&unk_1EF4871A8, type metadata accessor for HKMedicationFreeTextFormTypeCode);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1BCAF805C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1BCAF6FD4(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1BCAF6FE8(a1, a2, a3, a4, &qword_1EF4871A0, (uint64_t)&type metadata for Weekdays.Day);
}

char *sub_1BCAF6FE8(char *result, int64_t a2, char a3, char *a4, unint64_t *a5, uint64_t a6)
{
  char v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  char *v12;
  size_t v13;
  char *v14;

  v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    v9 = a2;
    goto LABEL_8;
  }
  v8 = *((_QWORD *)a4 + 3);
  v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2)
    goto LABEL_8;
  if (v9 + 0x4000000000000000 >= 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v9 = a2;
LABEL_8:
    v10 = *((_QWORD *)a4 + 2);
    if (v9 <= v10)
      v11 = *((_QWORD *)a4 + 2);
    else
      v11 = v9;
    if (v11)
    {
      sub_1BCAF84F0(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v12 = (char *)swift_allocObject();
      v13 = _swift_stdlib_malloc_size(v12);
      *((_QWORD *)v12 + 2) = v10;
      *((_QWORD *)v12 + 3) = 2 * v13 - 64;
      v14 = v12 + 32;
      if ((v7 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= &a4[v10 + 32])
          memmove(v14, a4 + 32, v10);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = (char *)MEMORY[0x1E0DEE9D8];
      v14 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1BCAF8144(0, v10, v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

unsigned __int8 *sub_1BCAF70EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  sub_1BCAF8294();
  swift_bridgeObjectRetain();
  v7 = sub_1BCB6425C();
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  v7 = sub_1BCB4B634();
  v12 = v11;
  swift_bridgeObjectRelease();
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (unsigned __int8 *)sub_1BCB64808();
  }
LABEL_7:
  v13 = sub_1BCAF71DC(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *sub_1BCAF71DC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v23 = a3 + 48;
      v24 = a3 + 55;
      v25 = a3 + 87;
      if (a3 > 10)
      {
        v23 = 58;
      }
      else
      {
        v25 = 97;
        v24 = 65;
      }
      if (result)
      {
        v26 = 0;
        do
        {
          v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              v13 = 0;
              if (v27 < 0x61 || v27 >= v25)
                return (unsigned __int8 *)v13;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
            return 0;
          v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v15 = a2 - 1;
  if (a2 == 1)
    return 0;
  v16 = a3 + 48;
  v17 = a3 + 55;
  v18 = a3 + 87;
  if (a3 > 10)
  {
    v16 = 58;
  }
  else
  {
    v18 = 97;
    v17 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v19 = result + 1;
  do
  {
    v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        v13 = 0;
        if (v20 < 0x61 || v20 >= v18)
          return (unsigned __int8 *)v13;
        v21 = -87;
      }
      else
      {
        v21 = -55;
      }
    }
    else
    {
      v21 = -48;
    }
    v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21)))
      return 0;
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1BCAF7458(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  uint64_t v45;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_1BCB4B5BC(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_95;
  result = sub_1BCB64220();
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_1BCB4B5BC(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_1BCB4B5BC(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_91;
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  result = sub_1BCB64220();
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v31 = a6 + 48;
        v32 = a6 + 55;
        v33 = a6 + 87;
        if (a6 > 10)
        {
          v31 = 58;
        }
        else
        {
          v33 = 97;
          v32 = 65;
        }
        if (v19)
        {
          v24 = 0;
          v34 = v19 + 1;
          v35 = result - 1;
          do
          {
            v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                v29 = 0;
                if (v36 < 0x61 || v36 >= v33)
                  return v29;
                v37 = -87;
              }
              else
              {
                v37 = -55;
              }
            }
            else
            {
              v37 = -48;
            }
            v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
              return 0;
            v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37)))
              return 0;
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v39 = a6 + 48;
      v40 = a6 + 55;
      v41 = a6 + 87;
      if (a6 > 10)
      {
        v39 = 58;
      }
      else
      {
        v41 = 97;
        v40 = 65;
      }
      if (v19)
      {
        v42 = 0;
        do
        {
          v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              v29 = 0;
              if (v43 < 0x61 || v43 >= v41)
                return v29;
              v44 = -87;
            }
            else
            {
              v44 = -55;
            }
          }
          else
          {
            v44 = -48;
          }
          v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63)
            return 0;
          v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44)))
            return 0;
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 48;
      v22 = a6 + 55;
      v23 = a6 + 87;
      if (a6 > 10)
      {
        v21 = 58;
      }
      else
      {
        v23 = 97;
        v22 = 65;
      }
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              if (v27 < 0x61 || v27 >= v23)
                return v29;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
            return 0;
          v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28)))
            return 0;
          ++v25;
          if (!--v26)
            return v24;
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

char *keypath_get_selector_localizedOntologyPregnancyTrimesterLactationRatings()
{
  return sel_localizedOntologyPregnancyTrimesterLactationRatings;
}

unint64_t sub_1BCAF788C()
{
  unint64_t result;

  result = qword_1EF487110;
  if (!qword_1EF487110)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for PregnancyTrimesterLactationRatings.Rating, &type metadata for PregnancyTrimesterLactationRatings.Rating);
    atomic_store(result, (unint64_t *)&qword_1EF487110);
  }
  return result;
}

_DWORD *__swift_memcpy4_1(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PregnancyTrimesterLactationRatings(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && a1[4])
    return (*(_DWORD *)a1 + 253);
  v3 = *a1;
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PregnancyTrimesterLactationRatings(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_DWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 4) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for PregnancyTrimesterLactationRatings()
{
  return &type metadata for PregnancyTrimesterLactationRatings;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PregnancyTrimesterLactationRatings.Rating(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PregnancyTrimesterLactationRatings.Rating(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BCAF7A5C + 4 * byte_1BCB65555[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BCAF7A90 + 4 * byte_1BCB65550[v4]))();
}

uint64_t sub_1BCAF7A90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCAF7A98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCAF7AA0);
  return result;
}

uint64_t sub_1BCAF7AAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCAF7AB4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BCAF7AB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCAF7AC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCAF7ACC(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1BCAF7AD8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for PregnancyTrimesterLactationRatings.Rating()
{
  return &type metadata for PregnancyTrimesterLactationRatings.Rating;
}

void type metadata accessor for HKConceptAttributeType(uint64_t a1)
{
  sub_1BCAF84F0(a1, &qword_1EF487118, (uint64_t)&unk_1E75577E8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKMedicationScheduleType(uint64_t a1)
{
  sub_1BCAF84F0(a1, &qword_1EF487120, (uint64_t)&unk_1E7557808, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKMedicationListOnboardingAlgorithmType(uint64_t a1)
{
  sub_1BCAF84F0(a1, &qword_1EF487128, (uint64_t)&unk_1E7557828, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKMedicationListOnboardingDetailsEntryPointType(uint64_t a1)
{
  sub_1BCAF84F0(a1, &qword_1EF487130, (uint64_t)&unk_1E7557848, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKMedicationListOnboardingActionType(uint64_t a1)
{
  sub_1BCAF84F0(a1, &qword_1EF487138, (uint64_t)&unk_1E7557868, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKMedicationListOnboardingAnalyticsStepType(uint64_t a1)
{
  sub_1BCAF84F0(a1, &qword_1EF487140, (uint64_t)&unk_1E7557888, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKMedicationListOnboardingProvenanceType(uint64_t a1)
{
  sub_1BCAF84F0(a1, &qword_1EF487148, (uint64_t)&unk_1E75578A8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKMedicationsNotificationActionIdentifier(uint64_t a1)
{
  sub_1BCAF84F0(a1, &qword_1EF487150, (uint64_t)&unk_1E75578C8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKMedicationRoomType(uint64_t a1)
{
  sub_1BCAF84F0(a1, &qword_1EF487158, (uint64_t)&unk_1E75578E8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKMedicationRoomAnalyticsAction(uint64_t a1)
{
  sub_1BCAF84F0(a1, &qword_1EF487160, (uint64_t)&unk_1E7557908, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKMedicationRoomProvenance(uint64_t a1)
{
  sub_1BCAF84F0(a1, &qword_1EF487168, (uint64_t)&unk_1E7557928, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for SymbolWeight(uint64_t a1)
{
  sub_1BCAF84F0(a1, &qword_1EDA13D90, (uint64_t)&unk_1E7557948, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for ContentMode(uint64_t a1)
{
  sub_1BCAF84F0(a1, &qword_1EDA13D88, (uint64_t)&unk_1E7557968, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKConceptRawIdentifierValue(uint64_t a1)
{
  sub_1BCAF84F0(a1, (unint64_t *)&unk_1EF487170, (uint64_t)&unk_1E7557988, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for CGColor(uint64_t a1)
{
  sub_1BCAF84F0(a1, (unint64_t *)&unk_1EDA13978, (uint64_t)&unk_1E75579A8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for ComparisonResult(uint64_t a1)
{
  sub_1BCAF84F0(a1, (unint64_t *)&unk_1EF487180, (uint64_t)&unk_1E75579D8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKMedicationDoseEventStatus(uint64_t a1)
{
  sub_1BCAF84F0(a1, &qword_1EDA13068, (uint64_t)&unk_1E75579F8, MEMORY[0x1E0DEEC78]);
}

uint64_t sub_1BCAF7CCC()
{
  return sub_1BCAF7D24(&qword_1EF487190, (uint64_t (*)(uint64_t))type metadata accessor for HKConceptRawIdentifierValue, (uint64_t)&unk_1BCB65A54);
}

uint64_t sub_1BCAF7CF8()
{
  return sub_1BCAF7D24(&qword_1EF487198, (uint64_t (*)(uint64_t))type metadata accessor for HKMedicationListOnboardingAnalyticsStepType, (uint64_t)&unk_1BCB65AF4);
}

uint64_t sub_1BCAF7D24(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1BCCFD874](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BCAF7D64(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BCB64910();
  __break(1u);
  return result;
}

uint64_t sub_1BCAF7E54(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BCB64910();
  __break(1u);
  return result;
}

uint64_t sub_1BCAF7F44(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_1BCB64910();
  __break(1u);
  return result;
}

char *sub_1BCAF805C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1BCB64910();
  __break(1u);
  return result;
}

char *sub_1BCAF8144(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)sub_1BCB64910();
  __break(1u);
  return result;
}

void type metadata accessor for HKMedicationFreeTextFormTypeCode(uint64_t a1)
{
  sub_1BCAF84F0(a1, (unint64_t *)&unk_1EF4871E8, (uint64_t)&unk_1E7557A40, MEMORY[0x1E0DEEC78]);
}

void sub_1BCAF8248(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1BCB649DC();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_1BCAF8294()
{
  unint64_t result;

  result = qword_1EF4871D8;
  if (!qword_1EF4871D8)
  {
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0DEBB10], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&qword_1EF4871D8);
  }
  return result;
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_1BCAF84F0(a1, &qword_1EDA139A0, (uint64_t)&unk_1E7557A18, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_1BCAF84F0(a1, &qword_1EDA13D50, (uint64_t)&unk_1E7557A60, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKError(uint64_t a1)
{
  sub_1BCAF84F0(a1, &qword_1EF4871F8, (uint64_t)&unk_1E7557A88, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKListUserDomainType(uint64_t a1)
{
  sub_1BCAF84F0(a1, &qword_1EF487200, (uint64_t)&unk_1E7557AB0, MEMORY[0x1E0DEEC78]);
}

uint64_t sub_1BCAF8348()
{
  return sub_1BCAF7D24(&qword_1EF487208, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1BCB65C20);
}

uint64_t sub_1BCAF8374()
{
  return sub_1BCAF7D24(&qword_1EF487210, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1BCB65C4C);
}

uint64_t sub_1BCAF83A0()
{
  return sub_1BCAF7D24(&qword_1EF487218, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BCB65D78);
}

uint64_t sub_1BCAF83CC()
{
  return sub_1BCAF7D24((unint64_t *)&unk_1EF487220, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BCB65D4C);
}

uint64_t sub_1BCAF83F8()
{
  return sub_1BCAF7D24(&qword_1EDA13998, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BCB65DE8);
}

uint64_t sub_1BCAF8424()
{
  return sub_1BCAF7D24(&qword_1EF487230, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1BCB65D08);
}

uint64_t sub_1BCAF8450()
{
  return sub_1BCAF7D24(&qword_1EF487238, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1BCB65CD4);
}

uint64_t sub_1BCAF847C()
{
  return sub_1BCAF7D24(&qword_1EF487240, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1BCB65C90);
}

uint64_t sub_1BCAF84A8()
{
  return sub_1BCAF7D24(&qword_1EF487248, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1BCB65F4C);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_1BCAF84F0(a1, (unint64_t *)&unk_1EF487280, (uint64_t)&unk_1E7557AD0, MEMORY[0x1E0DEEC78]);
}

void sub_1BCAF84F0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, a3);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t sub_1BCAF8534()
{
  return sub_1BCAF7D24(&qword_1EF487250, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1BCB65F10);
}

unint64_t sub_1BCAF8564()
{
  unint64_t result;

  result = qword_1EF487258;
  if (!qword_1EF487258)
  {
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0DEB470], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EF487258);
  }
  return result;
}

uint64_t sub_1BCAF85A8()
{
  return sub_1BCAF7D24(&qword_1EF487260, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1BCB65F88);
}

uint64_t sub_1BCAF85D4()
{
  return sub_1BCAF7D24((unint64_t *)&qword_1EF487268, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1BCB65EA4);
}

Swift::Bool __swiftcall UIView.isExtraExtraLargeOrBigger(sizeCategory:)(UIContentSizeCategory sizeCategory)
{
  return sub_1BCB645BC();
}

uint64_t UIView.isAtExtraExtraLargeOrBigger.getter()
{
  void *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(v0, sel_traitCollection);
  v2 = objc_msgSend(v1, sel_preferredContentSizeCategory);

  LOBYTE(v1) = sub_1BCB645BC();
  return v1 & 1;
}

uint64_t sub_1BCAF868C(uint64_t a1)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t i;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  id v53;
  id v54;
  void *v55;
  id v56;
  char v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  int64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  int64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;

  v2 = (unint64_t *)&qword_1EF487390;
  sub_1BCAFC448(0, (unint64_t *)&qword_1EF487390, (uint64_t (*)(uint64_t))sub_1BCAFC27C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v72 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v78 = (uint64_t)&v66 - v4;
  sub_1BCAFC4A0();
  v6 = v5;
  v7 = MEMORY[0x1E0C80A78](v5);
  v77 = (uint64_t *)((char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = MEMORY[0x1E0C80A78](v7);
  v82 = (uint64_t *)((char *)&v66 - v10);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (uint64_t *)((char *)&v66 - v12);
  MEMORY[0x1E0C80A78](v11);
  v71 = (char *)&v66 - v14;
  v15 = *(_QWORD *)(a1 + 64);
  v67 = a1 + 64;
  v16 = 1 << *(_BYTE *)(a1 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v69 = (unint64_t)(v16 + 63) >> 6;
  v73 = a1;
  result = swift_bridgeObjectRetain();
  v20 = 0;
  v70 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v80 = v6;
  v68 = v13;
  if (v18)
    goto LABEL_7;
  while (1)
  {
LABEL_8:
    v22 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v22 >= v69)
      goto LABEL_41;
    v23 = *(_QWORD *)(v67 + 8 * v22);
    v24 = v20 + 1;
    if (!v23)
    {
      v24 = v20 + 2;
      if (v20 + 2 >= v69)
        goto LABEL_41;
      v23 = *(_QWORD *)(v67 + 8 * v24);
      if (!v23)
      {
        v24 = v20 + 3;
        if (v20 + 3 >= v69)
          goto LABEL_41;
        v23 = *(_QWORD *)(v67 + 8 * v24);
        if (!v23)
        {
          v24 = v20 + 4;
          if (v20 + 4 >= v69)
            goto LABEL_41;
          v23 = *(_QWORD *)(v67 + 8 * v24);
          if (!v23)
          {
            v25 = v20 + 5;
            if (v20 + 5 >= v69)
            {
LABEL_41:
              swift_release();
              return (uint64_t)v70;
            }
            v23 = *(_QWORD *)(v67 + 8 * v25);
            v24 = v20 + 5;
            if (!v23)
              break;
          }
        }
      }
    }
LABEL_22:
    v75 = (v23 - 1) & v23;
    v76 = v24;
    for (i = __clz(__rbit64(v23)) + (v24 << 6); ; i = __clz(__rbit64(v18)) | (v20 << 6))
    {
      v26 = (uint64_t *)(*(_QWORD *)(v73 + 48) + 32 * i);
      v28 = *v26;
      v27 = v26[1];
      v29 = v26[2];
      v30 = v26[3];
      v31 = v71;
      sub_1BCAFC520(*(_QWORD *)(v73 + 56) + *(_QWORD *)(v72 + 72) * i, (uint64_t)&v71[*(int *)(v6 + 48)], v2, (uint64_t (*)(uint64_t))sub_1BCAFC27C);
      *v31 = v28;
      v31[1] = v27;
      v31[2] = v29;
      v31[3] = v30;
      sub_1BCAFC578((uint64_t)v31, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_1BCAFC4A0);
      swift_bridgeObjectRetain();
      sub_1BCAFC5BC(v29, v30);
      if (qword_1EDA138A8 != -1)
        swift_once();
      swift_beginAccess();
      v32 = off_1EDA138A0;
      v33 = *(int *)(v6 + 48);
      v34 = v82;
      v35 = (uint64_t)v82 + v33;
      v36 = v13[1];
      v37 = v13[2];
      v38 = v13[3];
      *v82 = *v13;
      v34[1] = v36;
      v34[2] = v37;
      v34[3] = v38;
      v81 = v35;
      sub_1BCAFC520((uint64_t)v13 + v33, v35, v2, (uint64_t (*)(uint64_t))sub_1BCAFC27C);
      v39 = v32[2];
      if (!v39)
        break;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1BCAFC5BC(v37, v38);
      swift_bridgeObjectRetain();
      v74 = v32;
      v40 = (char *)(v32 + 6);
      while (1)
      {
        v41 = (void *)*((_QWORD *)v40 - 2);
        v79 = *((_QWORD *)v40 - 1);
        v42 = v81;
        v43 = v77;
        v44 = (uint64_t)v77 + *(int *)(v80 + 48);
        v45 = v82;
        v46 = v82[1];
        *v77 = *v82;
        v43[1] = v46;
        *((_OWORD *)v43 + 1) = *((_OWORD *)v45 + 1);
        sub_1BCAFC520(v42, v44, v2, (uint64_t (*)(uint64_t))sub_1BCAFC27C);
        v47 = v44;
        v48 = v78;
        sub_1BCAFC5D0(v47, v78);
        sub_1BCAFC27C();
        v50 = v49;
        v51 = *(_QWORD *)(v49 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v48, 1, v49) != 1)
          break;
        sub_1BCAFC62C(v48, v2, (uint64_t (*)(uint64_t))sub_1BCAFC27C);
LABEL_28:
        v40 += 24;
        if (!--v39)
        {
          swift_bridgeObjectRelease_n();
          v6 = v80;
          v13 = v68;
          goto LABEL_6;
        }
      }
      v52 = v2;
      v53 = v41;
      swift_bridgeObjectRetain();
      v54 = v53;
      v55 = (void *)sub_1BCB64034();
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v48, v50);
      sub_1BCAFC2E0(0, &qword_1EDA13F10);
      v56 = v54;
      v57 = sub_1BCB645F8();

      if ((v57 & 1) == 0)
      {
        swift_bridgeObjectRelease();

        v2 = v52;
        goto LABEL_28;
      }
      swift_bridgeObjectRelease_n();
      sub_1BCAFC40C((uint64_t)v82, (uint64_t (*)(_QWORD))sub_1BCAFC4A0);
      if (qword_1EDA14148 != -1)
        swift_once();
      v58 = (id)qword_1EDA14130;
      swift_bridgeObjectRetain();
      v59 = sub_1BCB63A34();
      v61 = v60;
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      v13 = v68;
      sub_1BCAFC40C((uint64_t)v68, (uint64_t (*)(_QWORD))sub_1BCAFC4A0);
      result = swift_isUniquelyReferenced_nonNull_native();
      v6 = v80;
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1BCAF6A40(0, v70[2] + 1, 1, v70);
        v70 = (_QWORD *)result;
      }
      v2 = v52;
      v63 = v70[2];
      v62 = v70[3];
      if (v63 >= v62 >> 1)
      {
        result = (uint64_t)sub_1BCAF6A40((_QWORD *)(v62 > 1), v63 + 1, 1, v70);
        v70 = (_QWORD *)result;
      }
      v64 = v70;
      v70[2] = v63 + 1;
      v65 = &v64[2 * v63];
      v65[4] = v59;
      v65[5] = v61;
      v18 = v75;
      v20 = v76;
      if (!v75)
        goto LABEL_8;
LABEL_7:
      v75 = (v18 - 1) & v18;
      v76 = v20;
    }
    swift_bridgeObjectRetain();
    sub_1BCAFC5BC(v37, v38);
LABEL_6:
    v18 = v75;
    v20 = v76;
    sub_1BCAFC40C((uint64_t)v82, (uint64_t (*)(_QWORD))sub_1BCAFC4A0);
    result = sub_1BCAFC40C((uint64_t)v13, (uint64_t (*)(_QWORD))sub_1BCAFC4A0);
    if (v18)
      goto LABEL_7;
  }
  while (1)
  {
    v24 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v24 >= v69)
      goto LABEL_41;
    v23 = *(_QWORD *)(v67 + 8 * v24);
    ++v25;
    if (v23)
      goto LABEL_22;
  }
LABEL_43:
  __break(1u);
  return result;
}

id sub_1BCAF8D18()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView____lazy_storage___gradientBackground;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView____lazy_storage___gradientBackground);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView____lazy_storage___gradientBackground);
  }
  else
  {
    type metadata accessor for MedicationGradientBackground();
    v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_1BCAF8D8C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView____lazy_storage___gradientDefaultBackgroundColor;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView____lazy_storage___gradientDefaultBackgroundColor);
  if (v2)
  {
    v3 = *(id *)(v0
               + OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView____lazy_storage___gradientDefaultBackgroundColor);
  }
  else
  {
    v4 = objc_msgSend((id)objc_opt_self(), sel_systemGray3Color);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_1BCAF8E04()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView____lazy_storage___shapeView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView____lazy_storage___shapeView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView____lazy_storage___shapeView);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MedicationShapeView()), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_1BCAF8E98()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView____lazy_storage___placeholderView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView____lazy_storage___placeholderView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView____lazy_storage___placeholderView);
  }
  else
  {
    v4 = sub_1BCAF8EF8(v0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_1BCAF8EF8(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  _QWORD *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;

  v2 = objc_msgSend((id)objc_opt_self(), sel_whiteColor);
  v3 = (void *)objc_opt_self();
  v4 = objc_msgSend(v3, sel_configurationWithHierarchicalColor_, v2);

  v5 = (_QWORD *)(a1 + OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView_placeholderConfiguration);
  v6 = objc_msgSend(v3, sel_configurationWithWeight_, *(_QWORD *)(a1 + OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView_placeholderConfiguration + 8));
  v7 = objc_msgSend(v4, sel_configurationByApplyingConfiguration_, v6);

  v8 = v7;
  v9 = (void *)sub_1BCB6410C();
  v10 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v9, v8);

  if (v10)
  {
    v11 = objc_msgSend(v10, sel_imageWithoutBaseline);

  }
  else
  {
    v11 = 0;
  }
  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_initWithImage_, v11);

  objc_msgSend(v12, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v12, sel_setContentMode_, *v5);
  objc_msgSend(v12, sel_setHidden_, 1);

  return v12;
}

id sub_1BCAF90B4(unsigned __int8 *a1, void **a2)
{
  int v2;
  void *v3;
  _BYTE *v4;
  id result;
  int v6;

  v2 = *a1;
  v3 = *a2;
  v4 = (char *)*a2 + OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView_circular;
  result = (id)swift_beginAccess();
  v6 = *v4;
  *v4 = v2;
  if (v2 != v6)
    return objc_msgSend(v3, sel_setNeedsLayout);
  return result;
}

uint64_t sub_1BCAF9124()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView_circular);
  swift_beginAccess();
  return *v1;
}

id sub_1BCAF9168(char a1)
{
  char *v1;
  int v3;
  char *v4;
  id result;
  int v6;

  v3 = a1 & 1;
  v4 = &v1[OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView_circular];
  result = (id)swift_beginAccess();
  v6 = *v4;
  *v4 = a1;
  if (v6 != v3)
    return objc_msgSend(v1, sel_setNeedsLayout);
  return result;
}

void (*sub_1BCAF91D8(_QWORD *a1))(id **a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView_circular;
  v3[3] = v1;
  v3[4] = v4;
  v5 = (_BYTE *)(v1 + v4);
  swift_beginAccess();
  *((_BYTE *)v3 + 40) = *v5;
  return sub_1BCAF9244;
}

void sub_1BCAF9244(id **a1)
{
  id *v1;
  _BYTE *v2;
  id v3;
  int v4;
  int v5;

  v1 = *a1;
  v3 = (*a1)[3];
  v2 = (*a1)[4];
  v4 = *((unsigned __int8 *)*a1 + 40);
  v5 = v2[(_QWORD)v3];
  v2[(_QWORD)v3] = v4;
  if (v4 != v5)
    objc_msgSend(v1[3], sel_setNeedsLayout);
  free(v1);
}

uint64_t sub_1BCAF928C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  sub_1BCAFC448(0, &qword_1EF487308, type metadata accessor for MedicationVisualizationConfig, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - v5;
  sub_1BCAFC520(a1, (uint64_t)&v9 - v5, &qword_1EF487308, type metadata accessor for MedicationVisualizationConfig);
  v7 = *a2 + OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView_config;
  swift_beginAccess();
  sub_1BCAF9450((uint64_t)v6, v7);
  swift_endAccess();
  sub_1BCAFA094();
  return sub_1BCAFC62C((uint64_t)v6, &qword_1EF487308, type metadata accessor for MedicationVisualizationConfig);
}

uint64_t sub_1BCAF9374@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView_config;
  swift_beginAccess();
  return sub_1BCAFC520(v3, a1, &qword_1EF487308, type metadata accessor for MedicationVisualizationConfig);
}

uint64_t sub_1BCAF93D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView_config;
  swift_beginAccess();
  sub_1BCAF9450(a1, v3);
  swift_endAccess();
  sub_1BCAFA094();
  return sub_1BCAFC62C(a1, &qword_1EF487308, type metadata accessor for MedicationVisualizationConfig);
}

uint64_t sub_1BCAF9450(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BCAFC448(0, &qword_1EF487308, type metadata accessor for MedicationVisualizationConfig, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_1BCAF94AC(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1BCAF94F4;
}

uint64_t sub_1BCAF94F4(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return sub_1BCAFA094();
  return result;
}

_QWORD *MedicationView.init(frame:)(double a1, double a2, double a3, double a4)
{
  void *v4;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  _QWORD *v20;
  id v21;
  id v22;
  objc_super v24;

  v9 = OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView_placeholderConfiguration;
  v10 = qword_1EDA14300;
  v11 = v4;
  if (v10 != -1)
    swift_once();
  swift_beginAccess();
  *(_OWORD *)&v11[v9] = xmmword_1EDA142F0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView____lazy_storage___gradientBackground] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView____lazy_storage___gradientDefaultBackgroundColor] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView____lazy_storage___shapeView] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView____lazy_storage___placeholderView] = 0;
  v11[OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView_circular] = 1;
  v12 = &v11[OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView_config];
  v13 = type metadata accessor for MedicationVisualizationConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);

  v24.receiver = v11;
  v24.super_class = (Class)type metadata accessor for MedicationView(0);
  v14 = objc_msgSendSuper2(&v24, sel_initWithFrame_, a1, a2, a3, a4);
  objc_msgSend(v14, sel_setClipsToBounds_, 1);
  v15 = sub_1BCAF8D18();
  objc_msgSend(v14, sel_addSubview_, v15);

  v16 = sub_1BCAF8D18();
  objc_msgSend(v14, sel_bounds);
  objc_msgSend(v16, sel_setFrame_);

  v17 = sub_1BCAF8D18();
  objc_msgSend(v17, sel_setAutoresizingMask_, 18);

  v18 = sub_1BCAF8E04();
  objc_msgSend(v14, sel_addSubview_, v18);

  v19 = sub_1BCAF8E04();
  v20 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v14) + 0x148))();

  v21 = sub_1BCAF8E98();
  objc_msgSend(v14, sel_addSubview_, v21);

  v22 = sub_1BCAF8E98();
  (*(void (**)(void))((*v20 & *v14) + 0x140))();

  sub_1BCAFA094();
  return v14;
}

char *MedicationView.__allocating_init(frame:placeholderConfiguration:)(uint64_t *a1, double a2, double a3, double a4, double a5)
{
  objc_class *v5;
  id v11;

  v11 = objc_allocWithZone(v5);
  return MedicationView.init(frame:placeholderConfiguration:)(a1, a2, a3, a4, a5);
}

char *MedicationView.init(frame:placeholderConfiguration:)(uint64_t *a1, double a2, double a3, double a4, double a5)
{
  void *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  _QWORD *v25;
  id v26;
  id v27;
  objc_super v29;

  v10 = *a1;
  v11 = a1[1];
  v12 = OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView_placeholderConfiguration;
  v13 = qword_1EDA14300;
  v14 = v5;
  if (v13 != -1)
    swift_once();
  swift_beginAccess();
  *(_OWORD *)&v14[v12] = xmmword_1EDA142F0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView____lazy_storage___gradientBackground] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView____lazy_storage___gradientDefaultBackgroundColor] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView____lazy_storage___shapeView] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView____lazy_storage___placeholderView] = 0;
  v14[OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView_circular] = 1;
  v15 = &v14[OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView_config];
  v16 = type metadata accessor for MedicationVisualizationConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);

  v29.receiver = v14;
  v29.super_class = (Class)type metadata accessor for MedicationView(0);
  v17 = (char *)objc_msgSendSuper2(&v29, sel_initWithFrame_, a2, a3, a4, a5);
  v18 = &v17[OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView_placeholderConfiguration];
  *(_QWORD *)v18 = v10;
  *((_QWORD *)v18 + 1) = v11;
  v19 = v17;
  objc_msgSend(v19, sel_setClipsToBounds_, 1);
  v20 = sub_1BCAF8D18();
  objc_msgSend(v19, sel_addSubview_, v20);

  v21 = sub_1BCAF8D18();
  objc_msgSend(v19, sel_bounds);
  objc_msgSend(v21, sel_setFrame_);

  v22 = sub_1BCAF8D18();
  objc_msgSend(v22, sel_setAutoresizingMask_, 18);

  v23 = sub_1BCAF8E04();
  objc_msgSend(v19, sel_addSubview_, v23);

  v24 = sub_1BCAF8E04();
  v25 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v19) + 0x148))();

  v26 = sub_1BCAF8E98();
  objc_msgSend(v19, sel_addSubview_, v26);

  v27 = sub_1BCAF8E98();
  (*(void (**)(void))((*v25 & *(_QWORD *)v19) + 0x140))();

  sub_1BCAFA094();
  return v19;
}

uint64_t sub_1BCAF9A8C()
{
  _QWORD *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  _QWORD *v6;
  id v7;
  id v8;

  objc_msgSend(v0, sel_setClipsToBounds_, 1);
  v1 = sub_1BCAF8D18();
  objc_msgSend(v0, sel_addSubview_, v1);

  v2 = sub_1BCAF8D18();
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v2, sel_setFrame_);

  v3 = sub_1BCAF8D18();
  objc_msgSend(v3, sel_setAutoresizingMask_, 18);

  v4 = sub_1BCAF8E04();
  objc_msgSend(v0, sel_addSubview_, v4);

  v5 = sub_1BCAF8E04();
  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x148))();

  v7 = sub_1BCAF8E98();
  objc_msgSend(v0, sel_addSubview_, v7);

  v8 = sub_1BCAF8E98();
  (*(void (**)(void))((*v6 & *v0) + 0x140))();

  return sub_1BCAFA094();
}

void sub_1BCAF9C74()
{
  _QWORD *v0;
  id v1;
  id v2;
  void *v3;
  id v4;
  _QWORD *v5;
  id v6;
  id v7;
  id v8;
  objc_super v9;

  v9.receiver = v0;
  v9.super_class = (Class)type metadata accessor for MedicationView(0);
  objc_msgSendSuper2(&v9, sel_setNeedsUpdateConstraints);
  v1 = sub_1BCAF8E04();
  v2 = objc_msgSend(v1, sel_constraints);

  if (!v2)
  {
    sub_1BCAFC2E0(0, &qword_1EDA13988);
    sub_1BCB642D4();
    v2 = (id)sub_1BCB642C8();
    swift_bridgeObjectRelease();
  }
  v3 = (void *)objc_opt_self();
  objc_msgSend(v3, sel_deactivateConstraints_, v2);

  v4 = sub_1BCAF8E04();
  v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x148))();

  v6 = sub_1BCAF8E98();
  v7 = objc_msgSend(v6, sel_constraints);

  if (!v7)
  {
    sub_1BCAFC2E0(0, &qword_1EDA13988);
    sub_1BCB642D4();
    v7 = (id)sub_1BCB642C8();
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v3, sel_deactivateConstraints_, v7);

  v8 = sub_1BCAF8E98();
  (*(void (**)(void))((*v5 & *v0) + 0x140))();

}

void sub_1BCAF9E4C(void *a1)
{
  void *v1;
  void *v2;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;

  v2 = v1;
  v4 = (void *)objc_opt_self();
  sub_1BCAFBDDC();
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1BCB65FE0;
  v6 = objc_msgSend(v2, sel_leadingAnchor);
  v7 = objc_msgSend(a1, sel_leadingAnchor);
  v8 = objc_msgSend(v6, sel_constraintEqualToAnchor_, v7);

  *(_QWORD *)(v5 + 32) = v8;
  v9 = objc_msgSend(v2, sel_trailingAnchor);
  v10 = objc_msgSend(a1, sel_trailingAnchor);
  v11 = objc_msgSend(v9, sel_constraintEqualToAnchor_, v10);

  *(_QWORD *)(v5 + 40) = v11;
  v12 = objc_msgSend(v2, sel_topAnchor);
  v13 = objc_msgSend(a1, sel_topAnchor);
  v14 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v13);

  *(_QWORD *)(v5 + 48) = v14;
  v15 = objc_msgSend(v2, sel_bottomAnchor);
  v16 = objc_msgSend(a1, sel_bottomAnchor);
  v17 = objc_msgSend(v15, sel_constraintEqualToAnchor_, v16);

  *(_QWORD *)(v5 + 56) = v17;
  sub_1BCB642EC();
  sub_1BCAFC2E0(0, &qword_1EDA13988);
  v18 = (id)sub_1BCB642C8();
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_activateConstraints_, v18);

}

uint64_t sub_1BCAFA094()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  _BOOL8 v25;
  id v26;
  _BOOL8 v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = v0;
  sub_1BCAFC27C();
  v40 = *(_QWORD *)(v2 - 8);
  v41 = v2;
  MEMORY[0x1E0C80A78](v2);
  v39 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for MedicationVisualizationConfig(0);
  v42 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43);
  v38 = (uint64_t)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCAFC448(0, &qword_1EF487308, type metadata accessor for MedicationVisualizationConfig, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v6 = MEMORY[0x1E0C80A78](v5);
  v44 = (uint64_t)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v38 - v9;
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v38 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v38 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v38 - v17;
  v19 = sub_1BCAF8E04();
  v20 = v1 + OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView_config;
  swift_beginAccess();
  sub_1BCAFC520(v20, (uint64_t)v18, &qword_1EF487308, type metadata accessor for MedicationVisualizationConfig);
  v21 = (uint64_t)v19 + OBJC_IVAR____TtC27HealthMedicationsExperience19MedicationShapeView_config;
  swift_beginAccess();
  sub_1BCAFC520(v21, (uint64_t)v16, &qword_1EF487308, type metadata accessor for MedicationVisualizationConfig);
  swift_beginAccess();
  sub_1BCAF9450((uint64_t)v18, v21);
  swift_endAccess();
  sub_1BCB4DD40((uint64_t)v16);
  sub_1BCAFC62C((uint64_t)v18, &qword_1EF487308, type metadata accessor for MedicationVisualizationConfig);
  sub_1BCAFC62C((uint64_t)v16, &qword_1EF487308, type metadata accessor for MedicationVisualizationConfig);

  v22 = sub_1BCAF8E04();
  sub_1BCAFC520(v20, (uint64_t)v13, &qword_1EF487308, type metadata accessor for MedicationVisualizationConfig);
  v23 = v43;
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
  v25 = v24(v13, 1, v43) == 1;
  sub_1BCAFC62C((uint64_t)v13, &qword_1EF487308, type metadata accessor for MedicationVisualizationConfig);
  objc_msgSend(v22, sel_setHidden_, v25);

  v26 = sub_1BCAF8E98();
  sub_1BCAFC520(v20, (uint64_t)v10, &qword_1EF487308, type metadata accessor for MedicationVisualizationConfig);
  v27 = v24(v10, 1, v23) != 1;
  sub_1BCAFC62C((uint64_t)v10, &qword_1EF487308, type metadata accessor for MedicationVisualizationConfig);
  objc_msgSend(v26, sel_setHidden_, v27);

  v28 = sub_1BCAF8D18();
  v29 = v20;
  v30 = v44;
  sub_1BCAFC520(v29, v44, &qword_1EF487308, type metadata accessor for MedicationVisualizationConfig);
  if (v24((char *)v30, 1, v23))
  {
    sub_1BCAFC62C(v30, &qword_1EF487308, type metadata accessor for MedicationVisualizationConfig);
    v31 = sub_1BCAF8D8C();
  }
  else
  {
    v32 = v38;
    sub_1BCAFC794(v30, v38);
    sub_1BCAFC62C(v30, &qword_1EF487308, type metadata accessor for MedicationVisualizationConfig);
    v33 = v32 + *(int *)(v23 + 24);
    v35 = v39;
    v34 = v40;
    v36 = v41;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v39, v33, v41);
    sub_1BCAFC40C(v32, type metadata accessor for MedicationVisualizationConfig);
    v31 = (void *)sub_1BCB64034();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v36);
  }
  objc_msgSend(v28, sel_setBackgroundColor_, v31);

  return sub_1BCAFA4A8();
}

uint64_t sub_1BCAFA4A8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  id *v25;
  id v26;
  void *v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  id v32;
  unint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  char *v40;
  uint64_t v41;
  _BYTE *v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;

  v1 = v0;
  sub_1BCAFC448(0, &qword_1EF487308, type metadata accessor for MedicationVisualizationConfig, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v40 - v3;
  v5 = type metadata accessor for MedicationVisualizationConfig(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t)v1 + OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView_config;
  swift_beginAccess();
  sub_1BCAFC520(v9, (uint64_t)v4, &qword_1EF487308, type metadata accessor for MedicationVisualizationConfig);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return sub_1BCAFC62C((uint64_t)v4, &qword_1EF487308, type metadata accessor for MedicationVisualizationConfig);
  sub_1BCAFC578((uint64_t)v4, (uint64_t)v8, type metadata accessor for MedicationVisualizationConfig);
  objc_msgSend(v1, sel_setIsAccessibilityElement_, 1);
  v11 = (void *)sub_1BCB6410C();
  objc_msgSend(v1, sel_setAccessibilityIdentifier_, v11);

  v47 = *v8;
  MedicationShape.accessibilityLabel.getter();
  if (v13)
    v14 = v12;
  else
    v14 = 0;
  v15 = 0xE000000000000000;
  if (v13)
    v15 = v13;
  v44 = v15;
  v16 = swift_bridgeObjectRetain();
  sub_1BCAF868C(v16);
  swift_bridgeObjectRelease();
  v17 = (void *)objc_opt_self();
  v18 = (void *)sub_1BCB642C8();
  swift_bridgeObjectRelease();
  v19 = objc_msgSend(v17, sel_localizedStringByJoiningStrings_, v18);

  v20 = sub_1BCB6413C();
  v45 = v21;
  v46 = v20;

  if (qword_1EDA138C0 != -1)
    swift_once();
  swift_beginAccess();
  v22 = (char *)off_1EDA138B0;
  v23 = *((_QWORD *)off_1EDA138B0 + 2);
  v24 = (_QWORD *)&unk_1EDA14000;
  if (v23)
  {
    v41 = v14;
    v43 = v1;
    sub_1BCAFC2E0(0, (unint64_t *)&qword_1EDA139E0);
    v42 = v8;
    swift_bridgeObjectRetain_n();
    sub_1BCAFC27C();
    v40 = v22;
    v25 = (id *)(v22 + 48);
    while (1)
    {
      v26 = *(v25 - 2);
      swift_bridgeObjectRetain();
      v27 = (void *)sub_1BCB64034();
      v28 = sub_1BCB645F8();

      if ((v28 & 1) != 0)
        break;
      v25 += 3;
      swift_bridgeObjectRelease();

      if (!--v23)
      {
        swift_bridgeObjectRelease_n();
        v29 = 0;
        v30 = 0xE000000000000000;
        v8 = v42;
        v1 = v43;
        v14 = v41;
        v31 = v44;
        goto LABEL_19;
      }
    }
    swift_bridgeObjectRelease_n();
    v31 = v44;
    if (qword_1EDA14148 != -1)
      swift_once();
    v32 = (id)qword_1EDA14130;
    swift_bridgeObjectRetain();
    v29 = sub_1BCB63A34();
    v30 = v33;
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    v8 = v42;
    v1 = v43;
    v14 = v41;
LABEL_19:
    v24 = &unk_1EDA14000;
  }
  else
  {
    v29 = 0;
    v30 = 0xE000000000000000;
    v31 = v44;
  }
  if (v24[41] != -1)
    swift_once();
  v34 = (id)qword_1EDA14130;
  swift_bridgeObjectRetain();
  sub_1BCB63A34();
  swift_bridgeObjectRelease();

  sub_1BCAFC318();
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1BCB65FF0;
  v36 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v35 + 56) = MEMORY[0x1E0DEA968];
  v37 = sub_1BCAFC3C8();
  *(_QWORD *)(v35 + 32) = v14;
  *(_QWORD *)(v35 + 40) = v31;
  *(_QWORD *)(v35 + 96) = v36;
  *(_QWORD *)(v35 + 104) = v37;
  v38 = v46;
  *(_QWORD *)(v35 + 64) = v37;
  *(_QWORD *)(v35 + 72) = v38;
  *(_QWORD *)(v35 + 80) = v45;
  *(_QWORD *)(v35 + 136) = v36;
  *(_QWORD *)(v35 + 144) = v37;
  *(_QWORD *)(v35 + 112) = v29;
  *(_QWORD *)(v35 + 120) = v30;
  sub_1BCB6416C();
  swift_bridgeObjectRelease();
  v39 = (void *)sub_1BCB6410C();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setAccessibilityLabel_, v39);

  return sub_1BCAFC40C((uint64_t)v8, type metadata accessor for MedicationVisualizationConfig);
}

uint64_t MedicationView.PlaceholderConfiguration.contentMode.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t MedicationView.PlaceholderConfiguration.contentMode.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*MedicationView.PlaceholderConfiguration.contentMode.modify())()
{
  return nullsub_1;
}

uint64_t MedicationView.PlaceholderConfiguration.symbolWeight.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t MedicationView.PlaceholderConfiguration.symbolWeight.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*MedicationView.PlaceholderConfiguration.symbolWeight.modify())()
{
  return nullsub_1;
}

id MedicationView.__deallocating_deinit()
{
  return sub_1BCAFBB90(type metadata accessor for MedicationView);
}

double sub_1BCAFAAF4()
{
  double result;

  *(_QWORD *)&result = 2;
  xmmword_1EDA142F0 = xmmword_1BCB66000;
  return result;
}

uint64_t type metadata accessor for MedicationView(uint64_t a1)
{
  return sub_1BCAFBE48(a1, qword_1EF487368);
}

double static MedicationView.PlaceholderConfiguration.default.getter@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1BCAFABFC(&qword_1EDA14300, (__n128 *)&xmmword_1EDA142F0, a1).n128_u64[0];
  return result;
}

uint64_t static MedicationView.PlaceholderConfiguration.default.setter(uint64_t *a1)
{
  return sub_1BCAFAC78(a1, &qword_1EDA14300, &xmmword_1EDA142F0, (_QWORD *)&xmmword_1EDA142F0 + 1);
}

uint64_t (*static MedicationView.PlaceholderConfiguration.default.modify())()
{
  if (qword_1EDA14300 != -1)
    swift_once();
  swift_beginAccess();
  return j_j__swift_endAccess;
}

double sub_1BCAFABC8()
{
  double result;

  *(_QWORD *)&result = 1;
  xmmword_1EF4872F0 = xmmword_1BCB66010;
  return result;
}

double static MedicationView.PlaceholderConfiguration.small.getter@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1BCAFABFC(&qword_1EF487058, (__n128 *)&xmmword_1EF4872F0, a1).n128_u64[0];
  return result;
}

__n128 sub_1BCAFABFC@<Q0>(_QWORD *a1@<X0>, __n128 *a2@<X1>, __n128 *a3@<X8>)
{
  __n128 result;

  if (*a1 != -1)
    swift_once();
  swift_beginAccess();
  result = *a2;
  *a3 = *a2;
  return result;
}

uint64_t static MedicationView.PlaceholderConfiguration.small.setter(uint64_t *a1)
{
  return sub_1BCAFAC78(a1, &qword_1EF487058, &xmmword_1EF4872F0, (_QWORD *)&xmmword_1EF4872F0 + 1);
}

uint64_t sub_1BCAFAC78(uint64_t *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = *a1;
  v7 = a1[1];
  if (*a2 != -1)
    swift_once();
  result = swift_beginAccess();
  *a3 = v6;
  *a4 = v7;
  return result;
}

uint64_t (*static MedicationView.PlaceholderConfiguration.small.modify())()
{
  if (qword_1EF487058 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

void sub_1BCAFAD54()
{
  qword_1EDA15E68 = 0x404F000000000000;
}

id _s27HealthMedicationsExperience14MedicationViewC5frameACSo6CGRectV_tcfC_0(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

id MedicationListAvatarView.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  objc_super v15;

  *(_QWORD *)&v4[OBJC_IVAR____TtC27HealthMedicationsExperience24MedicationListAvatarView_shapeViewConstraints] = MEMORY[0x1E0DEE9D8];
  v15.receiver = v4;
  v15.super_class = (Class)type metadata accessor for MedicationListAvatarView(0);
  v9 = objc_msgSendSuper2(&v15, sel_initWithFrame_, a1, a2, a3, a4);
  sub_1BCAFC448(0, &qword_1EF487340, (uint64_t (*)(uint64_t))sub_1BCAFBE7C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1BCB66020;
  v11 = sub_1BCB63DF4();
  v12 = MEMORY[0x1E0DC29B0];
  *(_QWORD *)(v10 + 32) = v11;
  *(_QWORD *)(v10 + 40) = v12;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1BCAFBEF0();
  v13 = v9;
  sub_1BCB645D4();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  return v13;
}

void sub_1BCAFAF04(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  int v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v5 = a3 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x1BCCFD9C4](v5);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = objc_msgSend(a2, sel_preferredContentSizeCategory);
    v9 = sub_1BCB645BC() & 1;
    v10 = objc_msgSend(a1, sel_traitCollection);
    v11 = objc_msgSend(v10, sel_preferredContentSizeCategory);

    LODWORD(v10) = sub_1BCB645BC() & 1;
    if (v9 != (_DWORD)v10)
    {
      v12 = v7;
      v13 = sub_1BCAF8E04();

      sub_1BCAFB0D8(v13);
      sub_1BCAFA094();
      v14 = v12;
      v15 = sub_1BCAF8E98();

      sub_1BCAFB670(v15);
      v7 = v8;
      v8 = v15;
    }

  }
}

void sub_1BCAFB0D8(void *a1)
{
  char *v1;
  char *v2;
  double v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  char v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;

  v2 = v1;
  if (qword_1EDA138F0 != -1)
    swift_once();
  v4 = *(double *)&qword_1EDA15E68 / 0.760456;
  v5 = (void *)objc_opt_self();
  v6 = OBJC_IVAR____TtC27HealthMedicationsExperience24MedicationListAvatarView_shapeViewConstraints;
  sub_1BCAFC2E0(0, &qword_1EDA13988);
  swift_bridgeObjectRetain();
  v7 = (void *)sub_1BCB642C8();
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_deactivateConstraints_, v7);

  v8 = objc_msgSend(v2, sel_traitCollection);
  v9 = objc_msgSend(v8, sel_preferredContentSizeCategory);

  LOBYTE(v8) = sub_1BCB645BC();
  if ((v8 & 1) != 0)
  {
    sub_1BCAFBDDC();
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1BCB65FE0;
    v11 = objc_msgSend(a1, sel_centerYAnchor);
    v12 = objc_msgSend(v2, sel_centerYAnchor);
    v13 = objc_msgSend(v11, sel_constraintEqualToAnchor_, v12);

    *(_QWORD *)(v10 + 32) = v13;
    v14 = objc_msgSend(a1, sel_leadingAnchor);
    v15 = objc_msgSend(v2, sel_leadingAnchor);
    v16 = objc_msgSend(v14, sel_constraintEqualToAnchor_, v15);

    *(_QWORD *)(v10 + 40) = v16;
    v17 = objc_msgSend(a1, sel_heightAnchor);
    v18 = objc_msgSend(v17, sel_constraintEqualToConstant_, v4);

    *(_QWORD *)(v10 + 48) = v18;
    v19 = objc_msgSend(a1, sel_widthAnchor);
    v20 = objc_msgSend(v19, sel_constraintEqualToConstant_, v4);

    *(_QWORD *)(v10 + 56) = v20;
    sub_1BCB642EC();
    v21 = v10;
  }
  else
  {
    v36 = v5;
    v22 = objc_msgSend(v2, sel_traitCollection);
    v23 = objc_msgSend(v22, sel_preferredContentSizeCategory);

    v24 = sub_1BCB645BC();
    sub_1BCAFBDDC();
    v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_1BCB65FE0;
    v26 = objc_msgSend(v2, sel_centerXAnchor);
    v27 = objc_msgSend(a1, sel_centerXAnchor);
    v28 = objc_msgSend(v26, sel_constraintEqualToAnchor_, v27);

    *(_QWORD *)(v25 + 32) = v28;
    if ((v24 & 1) != 0)
    {
      v29 = objc_msgSend(v2, sel_topAnchor);
      v30 = objc_msgSend(a1, sel_topAnchor);
      v31 = objc_msgSend(v29, sel_constraintEqualToAnchor_constant_, v30, -13.0);
    }
    else
    {
      v29 = objc_msgSend(v2, sel_centerYAnchor);
      v30 = objc_msgSend(a1, sel_centerYAnchor);
      v31 = objc_msgSend(v29, sel_constraintEqualToAnchor_, v30);
    }

    *(_QWORD *)(v25 + 40) = v31;
    v32 = objc_msgSend(a1, sel_heightAnchor);
    v33 = objc_msgSend(v32, sel_constraintEqualToConstant_, v4);

    *(_QWORD *)(v25 + 48) = v33;
    v34 = objc_msgSend(a1, sel_widthAnchor);
    v35 = objc_msgSend(v34, sel_constraintEqualToConstant_, v4);

    *(_QWORD *)(v25 + 56) = v35;
    sub_1BCB642EC();
    v5 = v36;
    v21 = v25;
  }
  *(_QWORD *)&v2[v6] = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v37 = (id)sub_1BCB642C8();
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_activateConstraints_, v37);

}

void sub_1BCAFB670(id a1)
{
  void *v1;
  void *v2;
  double v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;

  v2 = v1;
  if (qword_1EDA138F0 != -1)
    swift_once();
  v4 = *(double *)&qword_1EDA15E68;
  v5 = objc_msgSend(a1, sel_constraints);
  if (!v5)
  {
    sub_1BCAFC2E0(0, &qword_1EDA13988);
    sub_1BCB642D4();
    v5 = (id)sub_1BCB642C8();
    swift_bridgeObjectRelease();
  }
  v6 = (void *)objc_opt_self();
  objc_msgSend(v6, sel_deactivateConstraints_, v5);

  v7 = objc_msgSend(v2, sel_traitCollection);
  v8 = objc_msgSend(v7, sel_preferredContentSizeCategory);

  LOBYTE(v7) = sub_1BCB645BC();
  if ((v7 & 1) != 0)
  {
    sub_1BCAFBDDC();
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1BCB65FE0;
    v10 = objc_msgSend(a1, sel_centerYAnchor);
    v11 = objc_msgSend(v2, sel_centerYAnchor);
    v12 = objc_msgSend(v10, sel_constraintEqualToAnchor_, v11);

    *(_QWORD *)(v9 + 32) = v12;
    v13 = objc_msgSend(a1, sel_leadingAnchor);
    v14 = objc_msgSend(v2, sel_leadingAnchor);
    v15 = objc_msgSend(v13, sel_constraintEqualToAnchor_constant_, v14, 16.0);

    *(_QWORD *)(v9 + 40) = v15;
    v16 = objc_msgSend(a1, sel_heightAnchor);
    v17 = objc_msgSend(v16, sel_constraintEqualToConstant_, v4);

    *(_QWORD *)(v9 + 48) = v17;
    v18 = objc_msgSend(a1, sel_widthAnchor);
    v19 = objc_msgSend(v18, sel_constraintEqualToConstant_, v4);

    *(_QWORD *)(v9 + 56) = v19;
LABEL_9:
    sub_1BCB642EC();
    sub_1BCAFC2E0(0, &qword_1EDA13988);
    v31 = (id)sub_1BCB642C8();
    swift_bridgeObjectRelease();
    objc_msgSend(v6, sel_activateConstraints_, v31);

    return;
  }
  v20 = objc_msgSend(v2, sel_traitCollection);
  v21 = objc_msgSend(v20, sel_preferredContentSizeCategory);

  LOBYTE(v20) = sub_1BCB645BC();
  if ((v20 & 1) != 0)
  {
    sub_1BCAFBDDC();
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_1BCB66030;
    v23 = objc_msgSend(a1, sel_centerXAnchor);
    v24 = objc_msgSend(v2, sel_centerXAnchor);
    v25 = objc_msgSend(v23, sel_constraintEqualToAnchor_, v24);

    *(_QWORD *)(v22 + 32) = v25;
    v26 = objc_msgSend(a1, sel_topAnchor);
    v27 = objc_msgSend(v2, sel_topAnchor);
    v28 = objc_msgSend(v26, sel_constraintEqualToAnchor_constant_, v27, 48.0);

    *(_QWORD *)(v22 + 40) = v28;
    v29 = objc_msgSend(a1, sel_widthAnchor);
    v30 = objc_msgSend(v29, sel_constraintEqualToConstant_, v4);

    *(_QWORD *)(v22 + 48) = v30;
    goto LABEL_9;
  }
  sub_1BCAFBBD8();
}

void MedicationListAvatarView.__allocating_init(frame:placeholderConfiguration:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void MedicationListAvatarView.init(frame:placeholderConfiguration:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1BCAFBB74()
{
  return swift_bridgeObjectRelease();
}

id MedicationListAvatarView.__deallocating_deinit()
{
  return sub_1BCAFBB90(type metadata accessor for MedicationListAvatarView);
}

id sub_1BCAFBB90(uint64_t (*a1)(_QWORD))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

void sub_1BCAFBBD8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v1 = (void *)objc_opt_self();
  sub_1BCAFBDDC();
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1BCB66030;
  v3 = objc_msgSend(v0, sel_centerXAnchor);
  v4 = sub_1BCAF8E98();
  v5 = objc_msgSend(v4, sel_centerXAnchor);

  v6 = objc_msgSend(v3, sel_constraintEqualToAnchor_, v5);
  *(_QWORD *)(v2 + 32) = v6;
  v7 = objc_msgSend(v0, sel_centerYAnchor);
  v8 = sub_1BCAF8E98();
  v9 = objc_msgSend(v8, sel_centerYAnchor);

  v10 = objc_msgSend(v7, sel_constraintEqualToAnchor_, v9);
  *(_QWORD *)(v2 + 40) = v10;
  v11 = sub_1BCAF8E98();
  v12 = objc_msgSend(v11, sel_widthAnchor);

  v13 = objc_msgSend(v0, sel_widthAnchor);
  v14 = objc_msgSend(v12, sel_constraintEqualToAnchor_multiplier_, v13, 0.6);

  *(_QWORD *)(v2 + 48) = v14;
  sub_1BCB642EC();
  sub_1BCAFC2E0(0, &qword_1EDA13988);
  v15 = (id)sub_1BCB642C8();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_activateConstraints_, v15);

}

void sub_1BCAFBDDC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EDA14550)
  {
    v0 = sub_1BCB649DC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EDA14550);
  }
}

uint64_t type metadata accessor for MedicationListAvatarView(uint64_t a1)
{
  return sub_1BCAFBE48(a1, (uint64_t *)&unk_1EF487380);
}

uint64_t sub_1BCAFBE48(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_1BCAFBE7C()
{
  unint64_t result;

  result = qword_1EF487348;
  if (!qword_1EF487348)
  {
    sub_1BCAFC37C(255, &qword_1EF487350);
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF487348);
  }
  return result;
}

uint64_t sub_1BCAFBEC4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1BCAFBEE8(void *a1, void *a2)
{
  uint64_t v2;

  sub_1BCAFAF04(a1, a2, v2);
}

unint64_t sub_1BCAFBEF0()
{
  unint64_t result;

  result = qword_1EF487358;
  if (!qword_1EF487358)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF487358);
  }
  return result;
}

uint64_t sub_1BCAFBF44@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(*a1 + OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView_circular);
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_1BCAFBF98@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView_config;
  swift_beginAccess();
  return sub_1BCAFC520(v3, a2, &qword_1EF487308, type metadata accessor for MedicationVisualizationConfig);
}

uint64_t sub_1BCAFC000()
{
  return type metadata accessor for MedicationView(0);
}

void sub_1BCAFC008()
{
  unint64_t v0;

  sub_1BCAFC448(319, &qword_1EF487308, type metadata accessor for MedicationVisualizationConfig, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for MedicationView()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MedicationView.circular.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of MedicationView.circular.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of MedicationView.circular.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of MedicationView.config.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of MedicationView.config.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of MedicationView.config.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of MedicationView.__allocating_init(frame:placeholderConfiguration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 304))();
}

uint64_t dispatch thunk of MedicationView.setupViews()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of MedicationView.setPlaceholderConstraints(view:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of MedicationView.setShapeConstraints(shapeView:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x148))();
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MedicationView.PlaceholderConfiguration(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MedicationView.PlaceholderConfiguration(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MedicationView.PlaceholderConfiguration()
{
  return &type metadata for MedicationView.PlaceholderConfiguration;
}

uint64_t sub_1BCAFC224()
{
  return type metadata accessor for MedicationListAvatarView(0);
}

uint64_t sub_1BCAFC22C()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for MedicationListAvatarView()
{
  return swift_lookUpClassMethod();
}

void sub_1BCAFC27C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EDA13F08)
  {
    sub_1BCAFC2E0(255, &qword_1EDA13F10);
    v0 = sub_1BCB6404C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EDA13F08);
  }
}

uint64_t sub_1BCAFC2E0(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void sub_1BCAFC318()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EDA13A08)
  {
    sub_1BCAFC37C(255, (unint64_t *)&qword_1EDA13A10);
    v0 = sub_1BCB649DC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EDA13A08);
  }
}

uint64_t sub_1BCAFC37C(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_1BCAFC3C8()
{
  unint64_t result;

  result = qword_1EDA13948;
  if (!qword_1EDA13948)
  {
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0CB1A70], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EDA13948);
  }
  return result;
}

uint64_t sub_1BCAFC40C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1BCAFC448(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_1BCAFC4A0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF487398)
  {
    sub_1BCAFC448(255, (unint64_t *)&qword_1EF487390, (uint64_t (*)(uint64_t))sub_1BCAFC27C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF487398);
  }
}

uint64_t sub_1BCAFC520(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_1BCAFC448(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_1BCAFC578(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1BCAFC5BC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_1BCAFC5D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BCAFC448(0, (unint64_t *)&qword_1EF487390, (uint64_t (*)(uint64_t))sub_1BCAFC27C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BCAFC62C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  sub_1BCAFC448(0, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void sub_1BCAFC670()
{
  _BYTE *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;

  v1 = OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView_placeholderConfiguration;
  if (qword_1EDA14300 != -1)
    swift_once();
  swift_beginAccess();
  *(_OWORD *)&v0[v1] = xmmword_1EDA142F0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView____lazy_storage___gradientBackground] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView____lazy_storage___gradientDefaultBackgroundColor] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView____lazy_storage___shapeView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView____lazy_storage___placeholderView] = 0;
  v0[OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView_circular] = 1;
  v2 = &v0[OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationView_config];
  v3 = type metadata accessor for MedicationVisualizationConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);

  sub_1BCB648B0();
  __break(1u);
}

uint64_t sub_1BCAFC794(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MedicationVisualizationConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ScheduleItem.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ScheduleItem.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_date;
  v4 = sub_1BCB63B3C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ScheduleItem.medicationIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_medicationIdentifier);
  swift_bridgeObjectRetain();
  return v1;
}

double ScheduleItem.doseAmount.getter()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_doseAmount);
}

uint64_t ScheduleItem.isLastScheduledDose.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_isLastScheduledDose);
}

uint64_t ScheduleItem.__allocating_init(identifier:date:medicationIdentifier:doseAmount:isLastScheduledDose:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, double a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  v15 = v14 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_date;
  v16 = sub_1BCB63B3C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v15, a3, v16);
  v17 = (_QWORD *)(v14 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_medicationIdentifier);
  *v17 = a4;
  v17[1] = a5;
  *(double *)(v14 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_doseAmount) = a7;
  *(_BYTE *)(v14 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_isLastScheduledDose) = a6;
  return v14;
}

uint64_t ScheduleItem.init(identifier:date:medicationIdentifier:doseAmount:isLastScheduledDose:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, double a7)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v13 = v7 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_date;
  v14 = sub_1BCB63B3C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13, a3, v14);
  v15 = (_QWORD *)(v7 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_medicationIdentifier);
  *v15 = a4;
  v15[1] = a5;
  *(double *)(v7 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_doseAmount) = a7;
  *(_BYTE *)(v7 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_isLastScheduledDose) = a6;
  return v7;
}

uint64_t ScheduleItem.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_date;
  v2 = sub_1BCB63B3C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ScheduleItem.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_date;
  v2 = sub_1BCB63B3C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1BCAFCAD8(uint64_t *a1, uint64_t *a2)
{
  return _s27HealthMedicationsExperience12ScheduleItemC2eeoiySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t _s27HealthMedicationsExperience12ScheduleItemC2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  char v5;
  char v6;
  BOOL v7;
  char v8;

  v4 = *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
  if (v4 || (v5 = sub_1BCB649F4(), v6 = 0, (v5 & 1) != 0))
  {
    if ((sub_1BCB63B0C() & 1) == 0)
      goto LABEL_14;
    v7 = *(_QWORD *)(a1 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_medicationIdentifier) == *(_QWORD *)(a2 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_medicationIdentifier)
      && *(_QWORD *)(a1 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_medicationIdentifier + 8) == *(_QWORD *)(a2 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_medicationIdentifier + 8);
    if (v7 || (v8 = sub_1BCB649F4(), v6 = 0, (v8 & 1) != 0))
    {
      if (*(double *)(a1 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_doseAmount) == *(double *)(a2 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_doseAmount))
      {
        v6 = *(_BYTE *)(a1 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_isLastScheduledDose) ^ *(_BYTE *)(a2 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_isLastScheduledDose) ^ 1;
        return v6 & 1;
      }
LABEL_14:
      v6 = 0;
    }
  }
  return v6 & 1;
}

uint64_t sub_1BCAFCBBC()
{
  return type metadata accessor for ScheduleItem();
}

uint64_t type metadata accessor for ScheduleItem()
{
  uint64_t result;

  result = qword_1EDA142E0;
  if (!qword_1EDA142E0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BCAFCC00()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BCB63B3C();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ScheduleItem()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ScheduleItem.__allocating_init(identifier:date:medicationIdentifier:doseAmount:isLastScheduledDose:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

id HKHealthStore.publisher(for:debugIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v7;
  id v9;

  sub_1BCAFCD6C(a1, a4, (uint64_t (*)(_QWORD))type metadata accessor for HKMedicationClusterQueryDescriptor);
  v7 = (_QWORD *)(a4
                + *(int *)(type metadata accessor for HKHealthStore.HKMedicationClusterPublisher.Configuration(0) + 20));
  *v7 = a2;
  v7[1] = a3;
  *(_QWORD *)(a4 + *(int *)(type metadata accessor for HKHealthStore.HKMedicationClusterPublisher(0) + 20)) = v9;
  swift_bridgeObjectRetain();
  return v9;
}

uint64_t type metadata accessor for HKHealthStore.HKMedicationClusterPublisher.Configuration(uint64_t a1)
{
  return sub_1BCAFBE48(a1, qword_1EF487490);
}

uint64_t type metadata accessor for HKHealthStore.HKMedicationClusterPublisher(uint64_t a1)
{
  return sub_1BCAFBE48(a1, qword_1EF487400);
}

uint64_t HKHealthStore.HKMedicationClusterPublisher.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BCAFCD6C(v1, a1, type metadata accessor for HKHealthStore.HKMedicationClusterPublisher.Configuration);
}

uint64_t sub_1BCAFCD6C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

id HKHealthStore.HKMedicationClusterPublisher.healthStore.getter()
{
  uint64_t v0;

  return objc_retain(*(id *)(v0
                           + *(int *)(type metadata accessor for HKHealthStore.HKMedicationClusterPublisher(0) + 20)));
}

uint64_t sub_1BCAFCDD4(uint64_t a1, uint64_t a2, void *a3, void (*a4)(_QWORD *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  _QWORD v18[2];

  sub_1BCAFC448(0, &qword_1EF4874D0, (uint64_t (*)(uint64_t))sub_1BCAFE7C0, MEMORY[0x1E0D2BDE0]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (_QWORD *)((char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v10);
  v14 = (_QWORD *)((char *)v18 - v13);
  if (a2)
  {
    *v12 = a2;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, *MEMORY[0x1E0D2BDD0], v8);
    swift_bridgeObjectRetain();
    v14 = v12;
  }
  else
  {
    if (a3)
    {
      v15 = a3;
    }
    else
    {
      type metadata accessor for HKError(0);
      v18[0] = 0;
      sub_1BCB51E10(MEMORY[0x1E0DEE9D8]);
      sub_1BCAF7D24((unint64_t *)&qword_1EF487268, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1BCB65EA4);
      sub_1BCB63A88();
      v15 = (void *)v18[1];
    }
    *v14 = v15;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v14, *MEMORY[0x1E0D2BDD8], v8);
    v16 = a3;
  }
  a4(v14);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v14, v8);
}

uint64_t sub_1BCAFCF70@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BCAFCD6C(v1, a1, type metadata accessor for HKHealthStore.HKMedicationClusterPublisher.Configuration);
}

id sub_1BCAFCF94(uint64_t a1)
{
  uint64_t v1;

  return *(id *)(v1 + *(int *)(a1 + 20));
}

uint64_t sub_1BCAFCFA4()
{
  sub_1BCAF7D24(&qword_1EF4874C8, type metadata accessor for HKHealthStore.HKMedicationClusterPublisher, (uint64_t)&protocol conformance descriptor for HKHealthStore.HKMedicationClusterPublisher);
  return sub_1BCB63D34();
}

void *_sSo13HKHealthStoreC27HealthMedicationsExperienceE28HKMedicationClusterPublisherV9makeQuery4with13outputHandlerSo7HKQueryCAE13ConfigurationV_y0C12KitAdditions0nH6ResultOySaySo0f6SearchR0CGGctFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Descriptor;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v16;

  Descriptor = type metadata accessor for HKMedicationClusterQueryDescriptor();
  MEMORY[0x1E0C80A78](Descriptor);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCAFCD6C(a1, (uint64_t)v8, v9);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  swift_retain();
  sub_1BCB50840();
  v12 = v11;
  swift_release();
  sub_1BCAFE784((uint64_t)v8);
  v13 = *(void **)(a1
                 + *(int *)(type metadata accessor for HKHealthStore.HKMedicationClusterPublisher.Configuration(0) + 20)
                 + 8);
  v14 = v12;
  if (v13)
    v13 = (void *)sub_1BCB6410C();
  objc_msgSend(v12, sel_setDebugIdentifier_, v13);

  return v12;
}

uint64_t sub_1BCAFD130()
{
  return sub_1BCAF7D24(&qword_1EF4873A0, type metadata accessor for HKHealthStore.HKMedicationClusterPublisher, (uint64_t)&protocol conformance descriptor for HKHealthStore.HKMedicationClusterPublisher);
}

uint64_t sub_1BCAFD15C()
{
  return MEMORY[0x1E0DEDB38];
}

_QWORD *_s28HKMedicationClusterPublisherVwCP(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Descriptor;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  char *__dst;
  uint64_t v30;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v6 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v6;
    v7 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v8 = a2[8];
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v8;
    Descriptor = type metadata accessor for HKMedicationClusterQueryDescriptor();
    v10 = *(int *)(Descriptor + 44);
    __dst = (char *)v4 + v10;
    v30 = Descriptor;
    v11 = (char *)a2 + v10;
    v12 = sub_1BCB63B3C();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    v17 = *(int *)(v30 + 48);
    v18 = (char *)v4 + v17;
    v19 = (uint64_t)a2 + v17;
    v20 = sub_1BCB64070();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    v21 = *(int *)(type metadata accessor for HKHealthStore.HKMedicationClusterPublisher.Configuration(0) + 20);
    v22 = (_QWORD *)((char *)v4 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = *(int *)(a3 + 20);
    v26 = *(void **)((char *)a2 + v25);
    *(_QWORD *)((char *)v4 + v25) = v26;
    swift_bridgeObjectRetain();
    v27 = v26;
  }
  return v4;
}

void _s28HKMedicationClusterPublisherVwxx(uint64_t a1, uint64_t a2)
{
  uint64_t Descriptor;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Descriptor = type metadata accessor for HKMedicationClusterQueryDescriptor();
  v5 = a1 + *(int *)(Descriptor + 44);
  v6 = sub_1BCB63B3C();
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v8 = a1 + *(int *)(Descriptor + 48);
  v9 = sub_1BCB64070();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  type metadata accessor for HKHealthStore.HKMedicationClusterPublisher.Configuration(0);
  swift_bridgeObjectRelease();

}

uint64_t _s28HKMedicationClusterPublisherVwcp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Descriptor;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *__dst;
  uint64_t v28;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  Descriptor = type metadata accessor for HKMedicationClusterQueryDescriptor();
  v9 = *(int *)(Descriptor + 44);
  __dst = (void *)(a1 + v9);
  v28 = Descriptor;
  v10 = (const void *)(a2 + v9);
  v11 = sub_1BCB63B3C();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  v15 = *(int *)(v28 + 48);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_1BCB64070();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = *(int *)(type metadata accessor for HKHealthStore.HKMedicationClusterPublisher.Configuration(0) + 20);
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = *(int *)(a3 + 20);
  v24 = *(void **)(a2 + v23);
  *(_QWORD *)(a1 + v23) = v24;
  swift_bridgeObjectRetain();
  v25 = v24;
  return a1;
}

uint64_t _s28HKMedicationClusterPublisherVwca(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t Descriptor;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  Descriptor = type metadata accessor for HKMedicationClusterQueryDescriptor();
  v8 = *(int *)(Descriptor + 44);
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = sub_1BCB63B3C();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = *(int *)(Descriptor + 48);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = sub_1BCB64070();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  v21 = *(int *)(type metadata accessor for HKHealthStore.HKMedicationClusterPublisher.Configuration(0) + 20);
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  *v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24 = *(int *)(a3 + 20);
  v25 = *(void **)(a2 + v24);
  v26 = *(void **)(a1 + v24);
  *(_QWORD *)(a1 + v24) = v25;
  v27 = v25;

  return a1;
}

uint64_t _s28HKMedicationClusterPublisherVwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t Descriptor;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  Descriptor = type metadata accessor for HKMedicationClusterQueryDescriptor();
  v8 = *(int *)(Descriptor + 44);
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = sub_1BCB63B3C();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = *(int *)(Descriptor + 48);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = sub_1BCB64070();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  v18 = type metadata accessor for HKHealthStore.HKMedicationClusterPublisher.Configuration(0);
  *(_OWORD *)(a1 + *(int *)(v18 + 20)) = *(_OWORD *)(a2 + *(int *)(v18 + 20));
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t _s28HKMedicationClusterPublisherVwta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t Descriptor;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  Descriptor = type metadata accessor for HKMedicationClusterQueryDescriptor();
  v9 = *(int *)(Descriptor + 44);
  v10 = (void *)(a1 + v9);
  v11 = (void *)(a2 + v9);
  v12 = sub_1BCB63B3C();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  v18 = *(int *)(Descriptor + 48);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = sub_1BCB64070();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
  v22 = *(int *)(type metadata accessor for HKHealthStore.HKMedicationClusterPublisher.Configuration(0) + 20);
  v23 = (_QWORD *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  v27 = *(int *)(a3 + 20);
  v28 = *(void **)(a1 + v27);
  *(_QWORD *)(a1 + v27) = *(_QWORD *)(a2 + v27);

  return a1;
}

uint64_t _s28HKMedicationClusterPublisherVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCAFDB54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for HKHealthStore.HKMedicationClusterPublisher.Configuration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t _s28HKMedicationClusterPublisherVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCAFDBDC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for HKHealthStore.HKMedicationClusterPublisher.Configuration(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_1BCAFDC54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BCAFE6EC(a1, a2, a3, type metadata accessor for HKHealthStore.HKMedicationClusterPublisher.Configuration);
}

_QWORD *_s28HKMedicationClusterPublisherV13ConfigurationVwCP(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Descriptor;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  char *__dst;
  uint64_t v27;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v6 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v6;
    v7 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v8 = a2[8];
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v8;
    Descriptor = type metadata accessor for HKMedicationClusterQueryDescriptor();
    v10 = *(int *)(Descriptor + 44);
    __dst = (char *)v4 + v10;
    v27 = Descriptor;
    v11 = (char *)a2 + v10;
    v12 = sub_1BCB63B3C();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    v17 = *(int *)(v27 + 48);
    v18 = (char *)v4 + v17;
    v19 = (uint64_t)a2 + v17;
    v20 = sub_1BCB64070();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    v21 = *(int *)(a3 + 20);
    v22 = (_QWORD *)((char *)v4 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t _s28HKMedicationClusterPublisherV13ConfigurationVwxx(uint64_t a1)
{
  uint64_t Descriptor;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Descriptor = type metadata accessor for HKMedicationClusterQueryDescriptor();
  v3 = a1 + *(int *)(Descriptor + 44);
  v4 = sub_1BCB63B3C();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  v6 = a1 + *(int *)(Descriptor + 48);
  v7 = sub_1BCB64070();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_bridgeObjectRelease();
}

uint64_t _s28HKMedicationClusterPublisherV13ConfigurationVwcp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Descriptor;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  void *__dst;
  uint64_t v25;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  Descriptor = type metadata accessor for HKMedicationClusterQueryDescriptor();
  v9 = *(int *)(Descriptor + 44);
  __dst = (void *)(a1 + v9);
  v25 = Descriptor;
  v10 = (const void *)(a2 + v9);
  v11 = sub_1BCB63B3C();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  v15 = *(int *)(v25 + 48);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_1BCB64070();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = *(int *)(a3 + 20);
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s28HKMedicationClusterPublisherV13ConfigurationVwca(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t Descriptor;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  Descriptor = type metadata accessor for HKMedicationClusterQueryDescriptor();
  v8 = *(int *)(Descriptor + 44);
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = sub_1BCB63B3C();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = *(int *)(Descriptor + 48);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = sub_1BCB64070();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  v21 = *(int *)(a3 + 20);
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  *v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s28HKMedicationClusterPublisherV13ConfigurationVwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t Descriptor;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  Descriptor = type metadata accessor for HKMedicationClusterQueryDescriptor();
  v8 = *(int *)(Descriptor + 44);
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = sub_1BCB63B3C();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = *(int *)(Descriptor + 48);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = sub_1BCB64070();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t _s28HKMedicationClusterPublisherV13ConfigurationVwta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t Descriptor;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  Descriptor = type metadata accessor for HKMedicationClusterQueryDescriptor();
  v9 = *(int *)(Descriptor + 44);
  v10 = (void *)(a1 + v9);
  v11 = (void *)(a2 + v9);
  v12 = sub_1BCB63B3C();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  v18 = *(int *)(Descriptor + 48);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = sub_1BCB64070();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
  v22 = *(int *)(a3 + 20);
  v23 = (_QWORD *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s28HKMedicationClusterPublisherV13ConfigurationVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCAFE5C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Descriptor;
  uint64_t v7;
  unint64_t v9;
  int v10;

  Descriptor = type metadata accessor for HKMedicationClusterQueryDescriptor();
  v7 = *(_QWORD *)(Descriptor - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, Descriptor);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t _s28HKMedicationClusterPublisherV13ConfigurationVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCAFE65C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for HKMedicationClusterQueryDescriptor();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t sub_1BCAFE6D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BCAFE6EC(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for HKMedicationClusterQueryDescriptor);
}

uint64_t sub_1BCAFE6EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BCAFE758()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BCAFE77C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_1BCAFCDD4(a1, a2, a3, *(void (**)(_QWORD *))(v3 + 16));
}

uint64_t sub_1BCAFE784(uint64_t a1)
{
  uint64_t Descriptor;

  Descriptor = type metadata accessor for HKMedicationClusterQueryDescriptor();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(Descriptor - 8) + 8))(a1, Descriptor);
  return a1;
}

void sub_1BCAFE7C0(uint64_t a1)
{
  sub_1BCAFC448(a1, &qword_1EF4874D8, (uint64_t (*)(uint64_t))sub_1BCAFE7DC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

unint64_t sub_1BCAFE7DC()
{
  unint64_t result;

  result = qword_1EF4874E0;
  if (!qword_1EF4874E0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF4874E0);
  }
  return result;
}

uint64_t MedicationDoseEventUpdateModel.init(medicationDoseEvent:status:logDate:doseAmount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t updated;
  uint64_t result;
  uint64_t v13;

  *(_QWORD *)a7 = a1;
  *(_QWORD *)(a7 + 8) = a2;
  *(_BYTE *)(a7 + 16) = a3 & 1;
  updated = type metadata accessor for MedicationDoseEventUpdateModel(0);
  result = sub_1BCB02534(a4, a7 + *(int *)(updated + 24));
  v13 = a7 + *(int *)(updated + 28);
  *(_QWORD *)v13 = a5;
  *(_BYTE *)(v13 + 8) = a6 & 1;
  return result;
}

id sub_1BCAFE894()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t updated;
  uint64_t v16;
  uint64_t v17;
  id *v18;
  uint64_t v19;
  id *v20;
  id v21;
  int v22;
  uint64_t (*v23)(_QWORD);
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char *v36;
  void *v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  id v60;
  void (*v61)(char *, uint64_t);
  uint64_t v63;
  id v64;
  uint64_t v65;
  id v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  char *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;

  v1 = v0;
  sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v3 = MEMORY[0x1E0C80A78](v2);
  v68 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v63 - v5;
  v7 = sub_1BCB63B3C();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v67 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v63 - v12;
  MEMORY[0x1E0C80A78](v11);
  v72 = (char *)&v63 - v14;
  updated = type metadata accessor for MedicationDoseEventUpdateModel(0);
  v16 = MEMORY[0x1E0C80A78](updated);
  v18 = (id *)((char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v16);
  v20 = (id *)((char *)&v63 - v19);
  v21 = *(id *)(v0 + 8);
  v22 = *(unsigned __int8 *)(v1 + 16);
  sub_1BCAFCD6C(v1, (uint64_t)&v63 - v19, v23);
  if (v22 == 1)
    v21 = objc_msgSend(*v20, sel_status);
  sub_1BCAFC40C((uint64_t)v20, type metadata accessor for MedicationDoseEventUpdateModel);
  v24 = v1 + *(int *)(updated + 28);
  if ((*(_BYTE *)(v24 + 8) & 1) != 0)
    v25 = objc_msgSend(*(id *)v1, sel_doseQuantity);
  else
    v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, *(double *)v24);
  v66 = v25;
  v71 = v21;
  sub_1BCB05320(v1 + *(int *)(updated + 24), (uint64_t)v6);
  sub_1BCAFCD6C(v1, (uint64_t)v18, type metadata accessor for MedicationDoseEventUpdateModel);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    v26 = objc_msgSend(*v18, sel_startDate);
    sub_1BCB63B18();

    sub_1BCB027E4((uint64_t)v6, (uint64_t)&qword_1EDA14530, (uint64_t)MEMORY[0x1E0CB0870], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BCAFC448);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v72, v6, v7);
  }
  sub_1BCAFC40C((uint64_t)v18, type metadata accessor for MedicationDoseEventUpdateModel);
  Date.dateWithOutSecsAndNanoSecs()((uint64_t)v13);
  v27 = *(id *)v1;
  v28 = objc_msgSend(*(id *)v1, sel_metadata);
  v29 = MEMORY[0x1E0DEE9B8];
  v69 = v7;
  v70 = v8;
  if (v28)
  {
    v30 = v28;
    v31 = sub_1BCB640B8();

    v32 = sub_1BCB6413C();
    if (*(_QWORD *)(v31 + 16) && (v34 = sub_1BCB0E7B0(v32, v33), (v35 & 1) != 0))
    {
      sub_1BCB053D0(*(_QWORD *)(v31 + 56) + 32 * v34, (uint64_t)&v73);
    }
    else
    {
      v73 = 0u;
      v74 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v74 + 1))
    {
      v36 = v13;
      sub_1BCB0537C(&v73, &v75);
      v37 = (void *)objc_opt_self();
      __swift_project_boxed_opaque_existential_0(&v75, v76);
      v38 = sub_1BCB649E8();
      v39 = objc_msgSend(v37, sel_syncVersionForStatus_, v71);
      v40 = objc_msgSend(v37, sel__metadataWithSyncIdentifier_syncVersion_isLastScheduledDose_, v38, v39, objc_msgSend(v27, sel_isLastScheduledDose));
      swift_unknownObjectRelease();

      v65 = sub_1BCB640B8();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v75);
      goto LABEL_18;
    }
  }
  else
  {
    v73 = 0u;
    v74 = 0u;
  }
  v36 = v13;
  sub_1BCB027E4((uint64_t)&v73, (uint64_t)&qword_1EF487770, v29 + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BCAF84F0);
  v65 = 0;
LABEL_18:
  v41 = *(id *)v1;
  v64 = objc_msgSend(*(id *)v1, sel_logOrigin);
  v42 = objc_msgSend(v41, sel_scheduleItemIdentifier);
  if (v42)
  {
    v43 = v42;
    v63 = sub_1BCB6413C();
    v45 = v44;

  }
  else
  {
    v63 = 0;
    v45 = 0;
  }
  v46 = objc_msgSend(v41, sel_medicationIdentifier, v63);
  v47 = sub_1BCB6413C();
  v49 = v48;

  v50 = objc_msgSend(v41, sel_scheduledDoseQuantity);
  v51 = objc_msgSend(v41, sel_scheduledDate);
  if (v51)
  {
    v52 = v51;
    v53 = (uint64_t)v68;
    sub_1BCB63B18();

    v54 = 0;
  }
  else
  {
    v54 = 1;
    v53 = (uint64_t)v68;
  }
  v56 = v69;
  v55 = v70;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56))(v53, v54, 1, v69);
  sub_1BCAFC2E0(0, &qword_1EDA142A0);
  v57 = (uint64_t)v67;
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v67, v36, v56);
  v58 = v49;
  v59 = v66;
  v60 = sub_1BCB029A4((uint64_t)v64, v63, v45, v47, v58, (uint64_t)v50, (uint64_t)v66, v53, v57, (uint64_t)v71, v65);

  v61 = *(void (**)(char *, uint64_t))(v55 + 8);
  v61(v36, v56);
  v61(v72, v56);
  return v60;
}

uint64_t Date.dateWithOutSecsAndNanoSecs()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(unint64_t, _QWORD, uint64_t);
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = a1;
  v35 = sub_1BCB63B3C();
  v34 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v28 = (char *)&v27 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, v2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3);
  v31 = (char *)&v27 - v4;
  v5 = sub_1BCB63C38();
  v29 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_1BCB639EC();
  v30 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCB63C20();
  sub_1BCAFC448(0, &qword_1EF4874E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v10 = sub_1BCB63C2C();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v14 = 4 * v12;
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1BCB662D0;
  v16 = v15 + v13;
  v17 = *(void (**)(unint64_t, _QWORD, uint64_t))(v11 + 104);
  v17(v16, *MEMORY[0x1E0CB1158], v10);
  v17(v16 + v12, *MEMORY[0x1E0CB1160], v10);
  v17(v16 + 2 * v12, *MEMORY[0x1E0CB1130], v10);
  v18 = 3 * v12;
  v19 = v28;
  v17(v16 + v18, *MEMORY[0x1E0CB1140], v10);
  v17(v16 + v14, *MEMORY[0x1E0CB1178], v10);
  sub_1BCB02590(v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v20 = v33;
  sub_1BCB63BCC();
  v21 = (uint64_t)v31;
  swift_bridgeObjectRelease();
  v22 = *(void (**)(char *, uint64_t))(v29 + 8);
  v22(v7, v5);
  sub_1BCB63C20();
  sub_1BCB63C08();
  v23 = v7;
  v24 = v34;
  v22(v23, v5);
  v25 = v35;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v19, v20, v25);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v21, 1, v25) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v36, v19, v25);
    return sub_1BCB027E4(v21, (uint64_t)&qword_1EDA14530, (uint64_t)MEMORY[0x1E0CB0870], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BCAFC448);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v19, v25);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v36, v21, v25);
  }
}

uint64_t MedicationDoseEventLogger.__allocating_init(healthStore:)(id a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  if (!a1)
  {
    a1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB6780]), sel_init);
    objc_msgSend(a1, sel_setSourceBundleIdentifier_, *MEMORY[0x1E0CB7680]);
    objc_msgSend(a1, sel_resume);
  }
  *(_QWORD *)(v2 + 16) = a1;
  return v2;
}

uint64_t MedicationDoseEventLogger.init(healthStore:)(void *a1)
{
  uint64_t v1;
  id v2;

  if (a1)
  {
    v2 = a1;
  }
  else
  {
    v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB6780]), sel_init);
    objc_msgSend(v2, sel_setSourceBundleIdentifier_, *MEMORY[0x1E0CB7680]);
    objc_msgSend(v2, sel_resume);
  }
  *(_QWORD *)(v1 + 16) = v2;
  return v1;
}

uint64_t MedicationDoseEventLogger.saveMedicationDoseEvents(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[3] = a1;
  v2[4] = v1;
  v2[5] = *(_QWORD *)(type metadata accessor for MedicationDoseEventUpdateModel(0) - 8);
  v2[6] = swift_task_alloc();
  v2[7] = swift_task_alloc();
  v2[8] = *(_QWORD *)(type metadata accessor for MedicationDoseEventLogSource(0) - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  v3 = type metadata accessor for MedicationDoseEventSaveRequest(0);
  v2[11] = v3;
  v2[12] = *(_QWORD *)(v3 - 8);
  v2[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BCAFF3E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = v0[3];
  v2 = *(_QWORD *)(v1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v4 = v0[12];
    v26 = v0[5];
    v27 = v0[8];
    v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v28 = *(_QWORD *)(v4 + 72);
    swift_bridgeObjectRetain();
    v6 = MEMORY[0x1E0DEE9D8];
    v7 = MEMORY[0x1E0DEE9D8];
    do
    {
      sub_1BCAFCD6C(v5, v0[13], type metadata accessor for MedicationDoseEventSaveRequest);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v13 = v0[13];
      if (EnumCaseMultiPayload == 1)
      {
        v15 = v0[6];
        v14 = v0[7];
        sub_1BCAFC578(v13, v14, type metadata accessor for MedicationDoseEventUpdateModel);
        sub_1BCAFCD6C(v14, v15, type metadata accessor for MedicationDoseEventUpdateModel);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v6 = sub_1BCAF6B60(0, *(_QWORD *)(v6 + 16) + 1, 1, v6);
        v17 = *(_QWORD *)(v6 + 16);
        v16 = *(_QWORD *)(v6 + 24);
        if (v17 >= v16 >> 1)
          v6 = sub_1BCAF6B60(v16 > 1, v17 + 1, 1, v6);
        v18 = v0[6];
        v19 = v0[7];
        *(_QWORD *)(v6 + 16) = v17 + 1;
        sub_1BCAFC578(v18, v6+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(_QWORD *)(v26 + 72) * v17, type metadata accessor for MedicationDoseEventUpdateModel);
        v10 = v19;
        v11 = type metadata accessor for MedicationDoseEventUpdateModel;
      }
      else
      {
        v21 = v0[9];
        v20 = v0[10];
        sub_1BCAFC578(v13, v20, type metadata accessor for MedicationDoseEventLogSource);
        sub_1BCAFCD6C(v20, v21, type metadata accessor for MedicationDoseEventLogSource);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v7 = sub_1BCAF6B74(0, *(_QWORD *)(v7 + 16) + 1, 1, v7);
        v23 = *(_QWORD *)(v7 + 16);
        v22 = *(_QWORD *)(v7 + 24);
        if (v23 >= v22 >> 1)
          v7 = sub_1BCAF6B74(v22 > 1, v23 + 1, 1, v7);
        v8 = v0[9];
        v9 = v0[10];
        *(_QWORD *)(v7 + 16) = v23 + 1;
        sub_1BCAFC578(v8, v7+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(_QWORD *)(v27 + 72) * v23, type metadata accessor for MedicationDoseEventLogSource);
        v10 = v9;
        v11 = type metadata accessor for MedicationDoseEventLogSource;
      }
      sub_1BCAFC40C(v10, v11);
      v5 += v28;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
    v3 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = MEMORY[0x1E0DEE9D8];
    v7 = MEMORY[0x1E0DEE9D8];
  }
  v0[14] = v6;
  v0[15] = v7;
  v0[2] = v3;
  v24 = (_QWORD *)swift_task_alloc();
  v0[16] = v24;
  *v24 = v0;
  v24[1] = sub_1BCAFF688;
  return MedicationDoseEventLogger.logMedicationDoseEvents(_:)(v7);
}

uint64_t sub_1BCAFF688(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = (_QWORD *)*v2;
  v3[17] = a1;
  v3[18] = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = (_QWORD *)swift_task_alloc();
    v3[19] = v4;
    *v4 = v3;
    v4[1] = sub_1BCAFF73C;
    v5 = v3[4];
    v4[16] = v3[14];
    v4[17] = v5;
  }
  return swift_task_switch();
}

uint64_t sub_1BCAFF73C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 160) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(v4 + 168) = a1;
  }
  return swift_task_switch();
}

uint64_t sub_1BCAFF7DC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 168);
  sub_1BCB009A8(*(_QWORD *)(v0 + 136));
  sub_1BCB009A8(v1);
  v2 = *(_QWORD *)(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_1BCAFF874()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCAFF8E0()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MedicationDoseEventLogger.logMedicationDoseEvents(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[28] = a1;
  v2[29] = v1;
  v2[30] = *v1;
  v3 = sub_1BCB63B3C();
  v2[31] = v3;
  v2[32] = *(_QWORD *)(v3 - 8);
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  v4 = type metadata accessor for MedicationDoseEventLogSource(0);
  v2[35] = v4;
  v2[36] = *(_QWORD *)(v4 - 8);
  v2[37] = swift_task_alloc();
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BCAFFA14()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 208) = MEMORY[0x1E0DEE9D8];
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(v0 + 312);
    v5 = *(_QWORD *)(v0 + 288);
    v87 = *(_QWORD *)(v0 + 256);
    v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v85 = *(_QWORD *)(v5 + 72);
    swift_bridgeObjectRetain();
    v86 = v4;
    do
    {
      v8 = *(uint64_t **)(v0 + 312);
      v7 = *(_QWORD *)(v0 + 320);
      v90 = v6;
      sub_1BCAFCD6C(v6, v7, type metadata accessor for MedicationDoseEventLogSource);
      sub_1BCAFCD6C(v7, (uint64_t)v8, type metadata accessor for MedicationDoseEventLogSource);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v88 = *v8;
      v89 = *(_QWORD *)(v4 + 8);
      v10 = *(_QWORD *)(v0 + 312);
      v11 = *(_QWORD *)(v0 + 320);
      v12 = *(_QWORD *)(v0 + 248);
      v91 = v3;
      if (EnumCaseMultiPayload == 1)
      {
        v13 = *(_QWORD *)(v0 + 296);
        v14 = *(_QWORD *)(v0 + 264);
        v83 = *(_QWORD *)(v4 + 16);
        sub_1BCB02854();
        v16 = v15;
        v17 = v10 + v15[24];
        v79 = *(_QWORD *)v17;
        v81 = *(_QWORD *)(v10 + v15[20]);
        v78 = *(unsigned __int8 *)(v17 + 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v87 + 32))(v14, v10 + v15[16], v12);
        sub_1BCAFCD6C(v11, v13, type metadata accessor for MedicationDoseEventLogSource);
        v18 = swift_getEnumCaseMultiPayload();
        v19 = *(_QWORD *)(v0 + 296);
        v20 = *(_QWORD *)(v0 + 248);
        if (v18 == 1)
        {
          v21 = v19 + v16[16];
          v22 = (void *)objc_opt_self();
          swift_bridgeObjectRetain();
          v23 = (void *)sub_1BCB6410C();
          swift_bridgeObjectRelease();
          v24 = (void *)sub_1BCB6410C();
          swift_bridgeObjectRelease();
          v25 = objc_msgSend(v22, sel_syncIdentifierForScheduleItemIdentifier_medicationIdentifier_, v23, v24);

          v26 = sub_1BCB6413C();
          v28 = v27;

          swift_release();
          v29 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
          v29(v21, v20);
        }
        else
        {
          swift_bridgeObjectRelease();
          sub_1BCB02E30();
          v48 = v19 + *(int *)(v47 + 48);
          v49 = objc_msgSend((id)objc_opt_self(), sel_syncIdentifierForScheduleItemIdentifier_medicationIdentifier_, 0, 0);
          v26 = sub_1BCB6413C();
          v28 = v50;

          v29 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
          v29(v48, v20);
        }
        v51 = *(_QWORD *)(v0 + 264);
        v52 = *(_QWORD *)(v0 + 248);
        swift_retain();
        v53 = sub_1BCB02B38(2, v88, v89, v51, v81, v79, v78, v26, v28, v83);
        swift_release_n();
      }
      else
      {
        v30 = *(_QWORD *)(v0 + 304);
        v31 = *(_QWORD *)(v0 + 272);
        sub_1BCB02E30();
        v33 = v32;
        v34 = v10 + v32[20];
        v82 = *(_QWORD *)v34;
        v84 = *(_QWORD *)(v10 + v32[16]);
        v80 = *(unsigned __int8 *)(v34 + 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v87 + 32))(v31, v10 + v32[12], v12);
        sub_1BCAFCD6C(v11, v30, type metadata accessor for MedicationDoseEventLogSource);
        v35 = swift_getEnumCaseMultiPayload();
        v36 = *(_QWORD *)(v0 + 304);
        v37 = *(_QWORD *)(v0 + 248);
        if (v35 == 1)
        {
          sub_1BCB02854();
          v39 = v36 + *(int *)(v38 + 64);
          v40 = (void *)objc_opt_self();
          swift_bridgeObjectRetain();
          v41 = (void *)sub_1BCB6410C();
          swift_bridgeObjectRelease();
          v42 = (void *)sub_1BCB6410C();
          swift_bridgeObjectRelease();
          v43 = objc_msgSend(v40, sel_syncIdentifierForScheduleItemIdentifier_medicationIdentifier_, v41, v42);

          v44 = sub_1BCB6413C();
          v46 = v45;

          swift_release();
          v29 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
          v29(v39, v37);
        }
        else
        {
          swift_bridgeObjectRelease();
          v54 = v36 + v33[12];
          v55 = objc_msgSend((id)objc_opt_self(), sel_syncIdentifierForScheduleItemIdentifier_medicationIdentifier_, 0, 0);
          v44 = sub_1BCB6413C();
          v46 = v56;

          v29 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
          v29(v54, v37);
        }
        v51 = *(_QWORD *)(v0 + 272);
        v52 = *(_QWORD *)(v0 + 248);
        v53 = sub_1BCB02B38(1, v88, v89, v51, v84, v82, v80, v44, v46, 0);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29(v51, v52);
      v4 = v86;
      v57 = v53;
      MEMORY[0x1BCCFCA1C]();
      if (*(_QWORD *)((*(_QWORD *)(v0 + 208) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 208) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        sub_1BCB64304();
      v58 = *(_QWORD *)(v0 + 320);
      sub_1BCB64334();
      sub_1BCB642EC();

      sub_1BCAFC40C(v58, type metadata accessor for MedicationDoseEventLogSource);
      v6 = v90 + v85;
      v3 = v91 - 1;
    }
    while (v91 != 1);
    swift_bridgeObjectRelease();
    v1 = *(_QWORD *)(v0 + 208);
  }
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v76 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
    if (v76)
      goto LABEL_18;
LABEL_26:
    swift_beginAccess();
    v77 = *(_QWORD *)(v0 + 208);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v77);
  }
  if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_26;
LABEL_18:
  if (qword_1EDA14510 != -1)
    swift_once();
  v59 = sub_1BCB63DDC();
  *(_QWORD *)(v0 + 328) = __swift_project_value_buffer(v59, (uint64_t)qword_1EDA14518);
  v60 = sub_1BCB63DD0();
  v61 = sub_1BCB64514();
  if (os_log_type_enabled(v60, v61))
  {
    v62 = swift_slowAlloc();
    v63 = swift_slowAlloc();
    v92 = v63;
    *(_DWORD *)v62 = 136315394;
    v64 = sub_1BCB64B14();
    *(_QWORD *)(v0 + 200) = sub_1BCB010C8(v64, v65, &v92);
    sub_1BCB64640();
    swift_bridgeObjectRelease();
    *(_WORD *)(v62 + 12) = 2080;
    swift_beginAccess();
    v66 = sub_1BCAFC2E0(0, &qword_1EDA142A0);
    v67 = swift_bridgeObjectRetain();
    v68 = MEMORY[0x1BCCFCA40](v67, v66);
    v70 = v69;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 216) = sub_1BCB010C8(v68, v70, &v92);
    sub_1BCB64640();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BCAF3000, v60, v61, "%s Saving medication dose events to healthStore: %s", (uint8_t *)v62, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BCCFD928](v63, -1, -1);
    MEMORY[0x1BCCFD928](v62, -1, -1);
  }

  v71 = *(void **)(*(_QWORD *)(v0 + 232) + 16);
  swift_beginAccess();
  if (*(_QWORD *)(v0 + 208) >> 62)
  {
    sub_1BCAFC2E0(0, &qword_1EF487518);
    swift_bridgeObjectRetain();
    sub_1BCB648BC();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    sub_1BCB64A00();
    sub_1BCAFC2E0(0, &qword_1EF487518);
  }
  swift_bridgeObjectRelease();
  sub_1BCAFC2E0(0, &qword_1EF487518);
  v72 = sub_1BCB642C8();
  *(_QWORD *)(v0 + 336) = v72;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1BCB0038C;
  v73 = swift_continuation_init();
  *(_QWORD *)(v0 + 80) = MEMORY[0x1E0C809B0];
  v74 = (_QWORD *)(v0 + 80);
  v74[1] = 0x40000000;
  v74[2] = sub_1BCB00D74;
  v74[3] = &block_descriptor;
  v74[4] = v73;
  objc_msgSend(v71, sel_saveObjects_withCompletion_, v72, v74);
  return swift_continuation_await();
}

uint64_t sub_1BCB0038C()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 344) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_1BCB003EC()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = sub_1BCB63DD0();
  v2 = sub_1BCB64514();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v9 = v4;
    *(_DWORD *)v3 = 136315138;
    v5 = sub_1BCB64B14();
    *(_QWORD *)(v0 + 192) = sub_1BCB010C8(v5, v6, &v9);
    sub_1BCB64640();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BCAF3000, v1, v2, "%s SUCCESS: medication dose events saved in healthStore!", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCFD928](v4, -1, -1);
    MEMORY[0x1BCCFD928](v3, -1, -1);
  }

  swift_beginAccess();
  v7 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

uint64_t sub_1BCB0058C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 336);
  swift_willThrow();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MedicationDoseEventLogger.updateMedicationDoseEvents(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = v1;
  return swift_task_switch();
}

uint64_t sub_1BCB00640()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 120) = MEMORY[0x1E0DEE9D8];
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(type metadata accessor for MedicationDoseEventUpdateModel(0) - 8);
    v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    swift_bridgeObjectRetain();
    do
    {
      v7 = sub_1BCAFE894();
      MEMORY[0x1BCCFCA1C]();
      if (*(_QWORD *)((*(_QWORD *)(v0 + 120) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 120) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        sub_1BCB64304();
      sub_1BCB64334();
      sub_1BCB642EC();

      v5 += v6;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    v1 = *(_QWORD *)(v0 + 120);
  }
  *(_QWORD *)(v0 + 144) = v1;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
    if (v13)
    {
      v8 = *(void **)(*(_QWORD *)(v0 + 136) + 16);
      sub_1BCAFC2E0(0, &qword_1EF487518);
      swift_bridgeObjectRetain();
      sub_1BCB648BC();
      goto LABEL_10;
    }
    v1 = *(_QWORD *)(v0 + 144);
  }
  else if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v8 = *(void **)(*(_QWORD *)(v0 + 136) + 16);
    swift_bridgeObjectRetain_n();
    sub_1BCB64A00();
    sub_1BCAFC2E0(0, &qword_1EF487518);
LABEL_10:
    swift_bridgeObjectRelease();
    sub_1BCAFC2E0(0, &qword_1EF487518);
    v9 = sub_1BCB642C8();
    *(_QWORD *)(v0 + 152) = v9;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_1BCB008C8;
    v10 = swift_continuation_init();
    *(_QWORD *)(v0 + 80) = MEMORY[0x1E0C809B0];
    v11 = (_QWORD *)(v0 + 80);
    v11[1] = 0x40000000;
    v11[2] = sub_1BCB00D74;
    v11[3] = &block_descriptor_5;
    v11[4] = v10;
    objc_msgSend(v8, sel_saveObjects_withCompletion_, v9, v11);
    return swift_continuation_await();
  }
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v1);
}

uint64_t sub_1BCB008C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 160) = v1;
  if (v1)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_1BCB00930()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 144));
}

uint64_t sub_1BCB00968()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 152);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCB009A8(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v20 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
    v5 = v20 + v3;
    if (!__OFADD__(v20, v3))
      goto LABEL_5;
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v4 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v5 = v4 + v3;
  if (__OFADD__(v4, v3))
    goto LABEL_24;
LABEL_5:
  v6 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v6;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v9 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v5 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v8 = 1;
  }
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v10 <= v5)
    v10 = v5;
  swift_bridgeObjectRetain();
  v11 = MEMORY[0x1BCCFCF2C](v8, v10, 1, v6);
  swift_bridgeObjectRelease();
  *v1 = v11;
  v9 = v11 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (*(_QWORD *)(v9 + 24) >> 1) - v12;
  result = sub_1BCB016B8(v9 + 8 * v12 + 32, v13, a1);
  if (v15 < v3)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v16 = v15;
  if (v15 < 1)
    goto LABEL_19;
  v17 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v18 = __OFADD__(v17, v15);
  v19 = v17 + v15;
  if (!v18)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v19;
LABEL_19:
    swift_bridgeObjectRelease();
    if (v16 != v13)
      return sub_1BCB642EC();
LABEL_26:
    sub_1BCB051D8(0, &qword_1EDA14458, &qword_1EDA142A0);
    return sub_1BCB642EC();
  }
  __break(1u);
  return result;
}

uint64_t sub_1BCB00B94(unint64_t a1)
{
  return sub_1BCB00BB8(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))sub_1BCB018D4);
}

uint64_t sub_1BCB00BA0(unint64_t a1)
{
  return sub_1BCB00BB8(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))sub_1BCB01AE0);
}

uint64_t sub_1BCB00BAC(unint64_t a1)
{
  return sub_1BCB00BB8(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))sub_1BCB01D1C);
}

uint64_t sub_1BCB00BB8(unint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, unint64_t))
{
  unint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = *v2;
  if (*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = v7 + v5;
  if (__OFADD__(v7, v5))
    goto LABEL_23;
LABEL_5:
  v6 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v6;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v7 = 1;
  }
  if (v6 >> 62)
    goto LABEL_25;
  v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8)
      v11 = v8;
    swift_bridgeObjectRetain();
    v6 = MEMORY[0x1BCCFCF2C](v7, v11, 1, v6);
    swift_bridgeObjectRelease();
    *v2 = v6;
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = a2(v10 + 8 * *(_QWORD *)(v10 + 16) + 32, (*(_QWORD *)(v10 + 24) >> 1) - *(_QWORD *)(v10 + 16), a1);
    if (v13 >= v5)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v11 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
  }
  if (v13 < 1)
    goto LABEL_19;
  v14 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v15 = __OFADD__(v14, v13);
  v16 = v14 + v13;
  if (!v15)
  {
    *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
LABEL_19:
    swift_bridgeObjectRelease();
    return sub_1BCB642EC();
  }
  __break(1u);
  return result;
}

uint64_t sub_1BCB00D74(uint64_t a1, int a2, void *a3)
{
  uint64_t result;
  _QWORD *v5;
  id v6;

  if (a2)
    return swift_continuation_throwingResume();
  if (a3)
  {
    sub_1BCB052CC();
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MedicationDoseEventLogger.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t MedicationDoseEventLogger.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t MedicationDoseEventLogger.logUnloggedMedications(for:status:logDate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[18] = a4;
  v5[19] = v4;
  v5[16] = a2;
  v5[17] = a3;
  v5[15] = a1;
  return swift_task_switch();
}

uint64_t sub_1BCB00E4C()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[17];
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D2C490]), sel_initWithHealthStore_, *(_QWORD *)(v0[19] + 16));
  v0[20] = v2;
  v3 = sub_1BCB6410C();
  v0[21] = v3;
  v4 = sub_1BCB63B00();
  v0[22] = v4;
  v0[7] = v0 + 24;
  v0[2] = v0;
  v0[3] = sub_1BCB00F58;
  v5 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v0[11] = 0x40000000;
  v0[12] = sub_1BCB0104C;
  v0[13] = &block_descriptor_7;
  v0[14] = v5;
  objc_msgSend(v2, sel_logUnloggedDoseEventsForScheduledItemIdentifier_status_logDate_completion_, v3, v1, v4, v0 + 10);
  return swift_continuation_await();
}

uint64_t sub_1BCB00F58()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 184) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_1BCB00FB8()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 168);
  v2 = *(void **)(v0 + 176);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCB00FF8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;

  v1 = *(void **)(v0 + 176);
  v3 = *(void **)(v0 + 160);
  v2 = *(void **)(v0 + 168);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCB0104C(uint64_t a1, char a2, void *a3)
{
  _QWORD *v4;
  id v5;

  if (a3)
  {
    sub_1BCB052CC();
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    **(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 40) = a2;
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1BCB010C8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_1BCB01198(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1BCB053D0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1BCB053D0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t sub_1BCB01198(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1BCB6464C();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1BCB01350(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_1BCB64808();
  if (!v8)
  {
    sub_1BCB648A4();
    __break(1u);
LABEL_17:
    result = sub_1BCB64910();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_1BCB01350(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1BCB013E4(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1BCB01558(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1BCB01558(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1BCB013E4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_1BCB4B54C(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_1BCB647A8();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_1BCB648A4();
      __break(1u);
LABEL_10:
      v2 = sub_1BCB641FC();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_1BCB64910();
    __break(1u);
LABEL_14:
    result = sub_1BCB648A4();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_1BCB01558(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1BCAF84F0(0, &qword_1EF487778, MEMORY[0x1E0DEDE70], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1BCB64910();
  __break(1u);
  return result;
}

uint64_t sub_1BCB016B8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1BCB051D8(0, &qword_1EDA14458, &qword_1EDA142A0);
        sub_1BCB0540C();
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          v12 = sub_1BCB08FC4(v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1BCAFC2E0(0, &qword_1EDA142A0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_1BCB64910();
  __break(1u);
  return result;
}

uint64_t sub_1BCB018D4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1BCAFC448(0, &qword_1EF487760, (uint64_t (*)(uint64_t))type metadata accessor for ScheduleItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
        sub_1BCB0526C();
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          v12 = sub_1BCB0901C(v16, i, a3);
          v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for ScheduleItem();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_1BCB64910();
  __break(1u);
  return result;
}

uint64_t sub_1BCB01AE0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1BCB051D8(0, (unint64_t *)&qword_1EF487750, (unint64_t *)&qword_1EF487748);
        sub_1BCB0522C(&qword_1EF487758, (unint64_t *)&qword_1EF487750, (unint64_t *)&qword_1EF487748);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          v12 = sub_1BCB09070(v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1BCAFC2E0(0, (unint64_t *)&qword_1EF487748);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_1BCB64910();
  __break(1u);
  return result;
}

uint64_t sub_1BCB01D1C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1BCB051D8(0, &qword_1EF487738, &qword_1EF487730);
        sub_1BCB0522C(&qword_1EF487740, &qword_1EF487738, &qword_1EF487730);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          v12 = sub_1BCB09070(v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1BCAFC2E0(0, &qword_1EF487730);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_1BCB64910();
  __break(1u);
  return result;
}

uint64_t _s27HealthMedicationsExperience28MedicationDoseEventLogSourceO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  int EnumCaseMultiPayload;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  double v41;
  char v42;
  void (*v43)(_BYTE *, char *, uint64_t);
  uint64_t v44;
  _BYTE *v45;
  char v47;
  void (*v48)(_BYTE *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  int v57;
  uint64_t v58;
  uint64_t (*v59)(_QWORD);
  uint64_t v60;
  uint64_t v61;
  char *v62;
  double v63;
  void (*v64)(_BYTE *, char *, uint64_t);
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  char v69;
  void (*v70)(uint64_t, uint64_t);
  char v71;
  uint64_t v72;
  char v73;
  void (*v74)(_BYTE *, uint64_t);
  uint64_t v75;
  char v76;
  void (*v77)(uint64_t, uint64_t);
  void (*v78)(_BYTE *, uint64_t);
  void (*v79)(uint64_t, uint64_t);
  char v81;
  char v82;
  _BYTE v83[12];
  int v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;

  v91 = (_BYTE *)a2;
  v90 = sub_1BCB63B3C();
  v92 = *(_QWORD *)(v90 - 8);
  v3 = MEMORY[0x1E0C80A78](v90);
  v5 = &v83[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = MEMORY[0x1E0C80A78](v3);
  v8 = &v83[-v7];
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = &v83[-v10];
  MEMORY[0x1E0C80A78](v9);
  v13 = &v83[-v12];
  v14 = type metadata accessor for MedicationDoseEventLogSource(0);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (uint64_t *)&v83[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = (uint64_t *)&v83[-v18];
  sub_1BCB0551C();
  v21 = MEMORY[0x1E0C80A78](v20);
  v23 = &v83[*(int *)(v21 + 48) - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24 = a1;
  v25 = &v83[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1BCAFCD6C(v24, (uint64_t)v25, type metadata accessor for MedicationDoseEventLogSource);
  sub_1BCAFCD6C((uint64_t)v91, (uint64_t)v23, type metadata accessor for MedicationDoseEventLogSource);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v89 = v25;
  if (EnumCaseMultiPayload == 1)
  {
    v88 = v5;
    v91 = v8;
    sub_1BCAFCD6C((uint64_t)v25, (uint64_t)v17, type metadata accessor for MedicationDoseEventLogSource);
    v27 = *v17;
    v28 = v17[1];
    v29 = v17[2];
    sub_1BCB02854();
    v31 = v30[16];
    v32 = (char *)v17 + v31;
    v33 = v30[20];
    v87 = *(_BYTE **)((char *)v17 + v33);
    v34 = v30[24];
    v35 = *(double *)((char *)v17 + v34);
    v36 = *((unsigned __int8 *)v17 + v34 + 8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v84 = v36;
      v38 = *v23;
      v37 = v23[1];
      v39 = v23[2];
      v40 = (char *)v23 + v31;
      v85 = *(_QWORD *)((char *)v23 + v33);
      v86 = v39;
      v41 = *(double *)((char *)v23 + v34);
      v42 = *((_BYTE *)v23 + v34 + 8);
      v43 = *(void (**)(_BYTE *, char *, uint64_t))(v92 + 32);
      v44 = v90;
      v43(v91, v32, v90);
      v45 = v88;
      v43(v88, v40, v44);
      if (v27 == v38 && v28 == v37)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v47 = sub_1BCB649F4();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v47 & 1) == 0)
        {
          swift_release();
          swift_release();
          v48 = *(void (**)(_BYTE *, uint64_t))(v92 + 8);
          v48(v45, v44);
          v48(v91, v44);
LABEL_35:
          v58 = 0;
          v59 = type metadata accessor for MedicationDoseEventLogSource;
          goto LABEL_36;
        }
      }
      v71 = _s27HealthMedicationsExperience12ScheduleItemC2eeoiySbAC_ACtFZ_0(v29, v86);
      v72 = (uint64_t)v91;
      if ((v71 & 1) != 0)
      {
        v73 = sub_1BCB63B0C();
        swift_release();
        swift_release();
        if ((v73 & 1) != 0)
        {
          v74 = *(void (**)(_BYTE *, uint64_t))(v92 + 8);
          v74(v45, v44);
          v74((_BYTE *)v72, v44);
          if (v87 != (_BYTE *)v85)
            goto LABEL_35;
          if ((v84 & 1) != 0)
          {
            v75 = (uint64_t)v89;
            if ((v42 & 1) != 0)
            {
LABEL_49:
              v58 = 1;
              goto LABEL_39;
            }
          }
          else
          {
            if (v35 == v41)
              v82 = v42;
            else
              v82 = 1;
            v75 = (uint64_t)v89;
            if ((v82 & 1) == 0)
              goto LABEL_49;
          }
          goto LABEL_38;
        }
      }
      else
      {
        swift_release();
        swift_release();
      }
      v78 = *(void (**)(_BYTE *, uint64_t))(v92 + 8);
      v78(v45, v44);
      v78((_BYTE *)v72, v44);
      goto LABEL_35;
    }
    (*(void (**)(char *, uint64_t))(v92 + 8))(v32, v90);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    v91 = v11;
    sub_1BCAFCD6C((uint64_t)v25, (uint64_t)v19, type metadata accessor for MedicationDoseEventLogSource);
    v50 = *v19;
    v49 = v19[1];
    sub_1BCB02E30();
    v52 = v51[12];
    v53 = (char *)v19 + v52;
    v54 = v51[16];
    v88 = *(_BYTE **)((char *)v19 + v54);
    v55 = v51[20];
    v56 = *(double *)((char *)v19 + v55);
    v57 = *((unsigned __int8 *)v19 + v55 + 8);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      LODWORD(v86) = v57;
      v61 = *v23;
      v60 = v23[1];
      v62 = (char *)v23 + v52;
      v87 = *(_BYTE **)((char *)v23 + v54);
      v63 = *(double *)((char *)v23 + v55);
      LODWORD(v85) = *((unsigned __int8 *)v23 + v55 + 8);
      v64 = *(void (**)(_BYTE *, char *, uint64_t))(v92 + 32);
      v65 = v13;
      v66 = v90;
      v64(v13, v53, v90);
      v67 = (uint64_t)v91;
      v64(v91, v62, v66);
      if (v50 == v61 && v49 == v60)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v69 = sub_1BCB649F4();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v69 & 1) == 0)
        {
          v70 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
          v70(v67, v66);
          v70((uint64_t)v13, v66);
          goto LABEL_35;
        }
      }
      v76 = sub_1BCB63B0C();
      v75 = (uint64_t)v89;
      if ((v76 & 1) != 0)
      {
        v77 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
        v77(v67, v66);
        v77((uint64_t)v65, v66);
        if (v88 == v87)
        {
          if ((v86 & 1) != 0)
          {
            if ((v85 & 1) != 0)
              goto LABEL_49;
          }
          else
          {
            v81 = v85;
            if (v56 != v63)
              v81 = 1;
            if ((v81 & 1) == 0)
              goto LABEL_49;
          }
        }
      }
      else
      {
        v79 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
        v79(v67, v66);
        v79((uint64_t)v65, v66);
      }
LABEL_38:
      v58 = 0;
LABEL_39:
      v59 = type metadata accessor for MedicationDoseEventLogSource;
      goto LABEL_40;
    }
    (*(void (**)(char *, uint64_t))(v92 + 8))(v53, v90);
    swift_bridgeObjectRelease();
  }
  v58 = 0;
  v59 = (uint64_t (*)(_QWORD))sub_1BCB0551C;
LABEL_36:
  v75 = (uint64_t)v89;
LABEL_40:
  sub_1BCAFC40C(v75, v59);
  return v58;
}

uint64_t type metadata accessor for MedicationDoseEventUpdateModel(uint64_t a1)
{
  return sub_1BCAFBE48(a1, qword_1EF487630);
}

uint64_t sub_1BCB02534(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BCB02590(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = sub_1BCB63C2C();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_1BCB0546C();
    v10 = sub_1BCB64784();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      sub_1BCB054DC(&qword_1EF487790, MEMORY[0x1E0CB11D0]);
      v14 = sub_1BCB640D0();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v6, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          sub_1BCB054DC(&qword_1EF487798, MEMORY[0x1E0CB11D8]);
          v20 = sub_1BCB64100();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v6, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E8];
  }
  return result;
}

uint64_t sub_1BCB027E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t, _QWORD))
{
  uint64_t v5;

  v5 = a4(0, a2, a3, MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t type metadata accessor for MedicationDoseEventLogSource(uint64_t a1)
{
  return sub_1BCAFBE48(a1, qword_1EF4875A0);
}

uint64_t type metadata accessor for MedicationDoseEventSaveRequest(uint64_t a1)
{
  return sub_1BCAFBE48(a1, qword_1EF4876E0);
}

void sub_1BCB02854()
{
  unint64_t TupleTypeMetadata;
  uint64_t v1;

  if (!qword_1EF487508)
  {
    MEMORY[0x1E0C80A78](0);
    type metadata accessor for ScheduleItem();
    sub_1BCB63B3C();
    type metadata accessor for HKMedicationDoseEventStatus(255);
    sub_1BCAF84F0(255, &qword_1EF487510, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_1EF487508);
  }
}

id sub_1BCB029A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;

  if (a3)
  {
    v12 = (void *)sub_1BCB6410C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = 0;
  }
  v13 = (void *)sub_1BCB6410C();
  swift_bridgeObjectRelease();
  v14 = sub_1BCB63B3C();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(a8, 1, v14) != 1)
  {
    v16 = (void *)sub_1BCB63B00();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a8, v14);
  }
  v17 = (void *)sub_1BCB63B00();
  if (a11)
  {
    v18 = (void *)sub_1BCB640AC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = 0;
  }
  v19 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_medicationDoseEventWithLogOrigin_scheduleItemIdentifier_medicationIdentifier_scheduledDoseQuantity_doseQuantity_scheduledDate_startDate_status_metadata_, a1, v12, v13, a6, a7, v16, v17, a10, v18);

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a9, v14);
  return v19;
}

id sub_1BCB02B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  double v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  objc_class *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  double v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v36 = a7;
  v34 = *(double *)&a6;
  v37 = a4;
  v38 = a1;
  v40 = a2;
  v41 = a3;
  v11 = sub_1BCB63B3C();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, v15, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v34 - v17;
  if (a10)
    v19 = *(double *)(a10 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_doseAmount);
  else
    v19 = 0.0;
  v20 = (void *)objc_opt_self();
  v21 = (void *)sub_1BCB6410C();
  v22 = objc_msgSend(v20, sel_syncVersionForStatus_, a5);
  if (a10)
    v23 = *(unsigned __int8 *)(a10 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_isLastScheduledDose);
  else
    v23 = 0;
  v39 = a5;
  v24 = objc_msgSend(v20, sel__metadataWithSyncIdentifier_syncVersion_isLastScheduledDose_, v21, v22, v23, *(_QWORD *)&v34);

  v35 = sub_1BCB640B8();
  if (a10)
  {
    v26 = *(_QWORD *)(a10 + 16);
    v25 = *(_QWORD *)(a10 + 24);
    v27 = (objc_class *)MEMORY[0x1E0CB37E8];
    swift_bridgeObjectRetain();
    v28 = objc_msgSend(objc_allocWithZone(v27), sel_initWithDouble_, v19);
    if ((v36 & 1) == 0)
      goto LABEL_9;
LABEL_12:
    v29 = 0;
    if (a10)
      goto LABEL_10;
LABEL_13:
    v30 = 1;
    goto LABEL_14;
  }
  v25 = 0;
  v26 = 0;
  v28 = 0;
  if ((v36 & 1) != 0)
    goto LABEL_12;
LABEL_9:
  v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, v34);
  if (!a10)
    goto LABEL_13;
LABEL_10:
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v18, a10 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_date, v11);
  v30 = 0;
LABEL_14:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v18, v30, 1, v11);
  sub_1BCAFC2E0(0, &qword_1EDA142A0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v37, v11);
  v31 = v41;
  swift_bridgeObjectRetain();
  v32 = sub_1BCB029A4(v38, v26, v25, v40, v31, (uint64_t)v28, (uint64_t)v29, (uint64_t)v18, (uint64_t)v14, v39, v35);

  return v32;
}

void sub_1BCB02E30()
{
  unint64_t TupleTypeMetadata;
  uint64_t v1;

  if (!qword_1EF487520)
  {
    MEMORY[0x1E0C80A78](0);
    sub_1BCB63B3C();
    type metadata accessor for HKMedicationDoseEventStatus(255);
    sub_1BCAF84F0(255, &qword_1EF487510, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_1EF487520);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for MedicationDoseEventLogSource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      sub_1BCB02854();
      v9 = v8;
      v10 = *(int *)(v8 + 64);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = sub_1BCB63B3C();
      v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_retain();
      v14(v11, v12, v13);
      *(uint64_t *)((char *)a1 + *(int *)(v9 + 80)) = *(uint64_t *)((char *)a2 + *(int *)(v9 + 80));
      v15 = *(int *)(v9 + 96);
    }
    else
    {
      sub_1BCB02E30();
      v20 = v19;
      v21 = *(int *)(v19 + 48);
      v22 = (char *)a1 + v21;
      v23 = (char *)a2 + v21;
      v24 = sub_1BCB63B3C();
      v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
      swift_bridgeObjectRetain();
      v25(v22, v23, v24);
      *(uint64_t *)((char *)a1 + *(int *)(v20 + 64)) = *(uint64_t *)((char *)a2 + *(int *)(v20 + 64));
      v15 = *(int *)(v20 + 80);
    }
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v16[8] = v17[8];
    *(_QWORD *)v16 = *(_QWORD *)v17;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for MedicationDoseEventLogSource(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  swift_bridgeObjectRelease();
  if (EnumCaseMultiPayload == 1)
  {
    swift_release();
    sub_1BCB02854();
    v4 = *(int *)(v3 + 64);
  }
  else
  {
    sub_1BCB02E30();
    v4 = *(int *)(v5 + 48);
  }
  v6 = a1 + v4;
  v7 = sub_1BCB63B3C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

_QWORD *initializeWithCopy for MedicationDoseEventLogSource(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  if (EnumCaseMultiPayload == 1)
  {
    a1[2] = a2[2];
    sub_1BCB02854();
    v7 = v6;
    v8 = *(int *)(v6 + 64);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1BCB63B3C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_retain();
    v12(v9, v10, v11);
    *(_QWORD *)((char *)a1 + *(int *)(v7 + 80)) = *(_QWORD *)((char *)a2 + *(int *)(v7 + 80));
    v13 = (int *)(v7 + 96);
  }
  else
  {
    sub_1BCB02E30();
    v15 = v14;
    v16 = *(int *)(v14 + 48);
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = sub_1BCB63B3C();
    v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
    swift_bridgeObjectRetain();
    v20(v17, v18, v19);
    *(_QWORD *)((char *)a1 + *(int *)(v15 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v15 + 64));
    v13 = (int *)(v15 + 80);
  }
  v21 = *v13;
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for MedicationDoseEventLogSource(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  if (a1 != a2)
  {
    sub_1BCAFC40C((uint64_t)a1, type metadata accessor for MedicationDoseEventLogSource);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    a1[1] = a2[1];
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      sub_1BCB02854();
      v6 = v5;
      v7 = *(int *)(v5 + 64);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = sub_1BCB63B3C();
      v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_retain();
      v11(v8, v9, v10);
      *(_QWORD *)((char *)a1 + *(int *)(v6 + 80)) = *(_QWORD *)((char *)a2 + *(int *)(v6 + 80));
      v12 = (int *)(v6 + 96);
    }
    else
    {
      sub_1BCB02E30();
      v14 = v13;
      v15 = *(int *)(v13 + 48);
      v16 = (char *)a1 + v15;
      v17 = (char *)a2 + v15;
      v18 = sub_1BCB63B3C();
      v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
      swift_bridgeObjectRetain();
      v19(v16, v17, v18);
      *(_QWORD *)((char *)a1 + *(int *)(v14 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v14 + 64));
      v12 = (int *)(v14 + 80);
    }
    v20 = *v12;
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = *(_QWORD *)v22;
    v21[8] = v22[8];
    *(_QWORD *)v21 = v23;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for MedicationDoseEventLogSource(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    sub_1BCB02854();
    v6 = v5;
    v7 = *(int *)(v5 + 64);
    v8 = a1 + v7;
    v9 = a2 + v7;
    v10 = sub_1BCB63B3C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    *(_QWORD *)(a1 + *(int *)(v6 + 80)) = *(_QWORD *)(a2 + *(int *)(v6 + 80));
    v11 = (int *)(v6 + 96);
  }
  else
  {
    sub_1BCB02E30();
    v13 = v12;
    v14 = *(int *)(v12 + 48);
    v15 = a1 + v14;
    v16 = a2 + v14;
    v17 = sub_1BCB63B3C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
    *(_QWORD *)(a1 + *(int *)(v13 + 64)) = *(_QWORD *)(a2 + *(int *)(v13 + 64));
    v11 = (int *)(v13 + 80);
  }
  v18 = *v11;
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for MedicationDoseEventLogSource(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    sub_1BCAFC40C(a1, type metadata accessor for MedicationDoseEventLogSource);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (EnumCaseMultiPayload == 1)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      sub_1BCB02854();
      v6 = v5;
      v7 = *(int *)(v5 + 64);
      v8 = a1 + v7;
      v9 = a2 + v7;
      v10 = sub_1BCB63B3C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      *(_QWORD *)(a1 + *(int *)(v6 + 80)) = *(_QWORD *)(a2 + *(int *)(v6 + 80));
      v11 = (int *)(v6 + 96);
    }
    else
    {
      sub_1BCB02E30();
      v13 = v12;
      v14 = *(int *)(v12 + 48);
      v15 = a1 + v14;
      v16 = a2 + v14;
      v17 = sub_1BCB63B3C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
      *(_QWORD *)(a1 + *(int *)(v13 + 64)) = *(_QWORD *)(a2 + *(int *)(v13 + 64));
      v11 = (int *)(v13 + 80);
    }
    v18 = *v11;
    v19 = a1 + v18;
    v20 = a2 + v18;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicationDoseEventLogSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for MedicationDoseEventLogSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_1BCB036A4()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1BCB036B4()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  char v3;
  char *v4;
  char *v5;

  result = sub_1BCB63B3C();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout();
    v4 = &v3;
    swift_getTupleTypeLayout();
    v5 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for MedicationDoseEventUpdateModel(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v7 = a1;
    *((_QWORD *)a1 + 1) = a2[1];
    a1[16] = *((_BYTE *)a2 + 16);
    v8 = *(int *)(a3 + 24);
    v9 = &a1[v8];
    v10 = (char *)a2 + v8;
    v11 = sub_1BCB63B3C();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    v14 = v4;
    if (v13(v10, 1, v11))
    {
      sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = *(int *)(a3 + 28);
    v17 = &v7[v16];
    v18 = (uint64_t)a2 + v16;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = *(_BYTE *)(v18 + 8);
  }
  return v7;
}

uint64_t destroy for MedicationDoseEventUpdateModel(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = sub_1BCB63B3C();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t initializeWithCopy for MedicationDoseEventUpdateModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7 = *(void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(int *)(a3 + 24);
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = sub_1BCB63B3C();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v7;
  if (v13(v10, 1, v11))
  {
    sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v16 = *(int *)(a3 + 28);
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  return a1;
}

uint64_t assignWithCopy for MedicationDoseEventUpdateModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  v9 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v9;
  v10 = *(int *)(a3 + 24);
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = sub_1BCB63B3C();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v19 = *(int *)(a3 + 28);
  v20 = a1 + v19;
  v21 = (uint64_t *)(a2 + v19);
  v22 = *v21;
  *(_BYTE *)(v20 + 8) = *((_BYTE *)v21 + 8);
  *(_QWORD *)v20 = v22;
  return a1;
}

uint64_t initializeWithTake for MedicationDoseEventUpdateModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(int *)(a3 + 24);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_1BCB63B3C();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = *(int *)(a3 + 28);
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  return a1;
}

uint64_t assignWithTake for MedicationDoseEventUpdateModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(int *)(a3 + 24);
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = sub_1BCB63B3C();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  v16 = *(int *)(a3 + 28);
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicationDoseEventUpdateModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCB03E3C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for MedicationDoseEventUpdateModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1BCB03EDC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

void sub_1BCB03F68()
{
  unint64_t v0;

  sub_1BCAFC448(319, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

char *initializeBufferWithCopyOfBuffer for MedicationDoseEventSaveRequest(char *a1, char **a2, uint64_t a3)
{
  int v5;
  char *v6;
  char *v7;
  uint64_t updated;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  char *v15;
  uint64_t v16;
  char *v17;
  int EnumCaseMultiPayload;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v41;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v17[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = *a2;
      v6 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v6;
      a1[16] = *((_BYTE *)a2 + 16);
      updated = type metadata accessor for MedicationDoseEventUpdateModel(0);
      v9 = *(int *)(updated + 24);
      v10 = &a1[v9];
      v11 = (char *)a2 + v9;
      v12 = sub_1BCB63B3C();
      v13 = *(_QWORD *)(v12 - 8);
      v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
      v15 = v7;
      if (v14(v11, 1, v12))
      {
        sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      v37 = *(int *)(updated + 28);
      v38 = &a1[v37];
      v39 = (uint64_t)a2 + v37;
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = *(_BYTE *)(v39 + 8);
    }
    else
    {
      type metadata accessor for MedicationDoseEventLogSource(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v19 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v19;
      if (EnumCaseMultiPayload == 1)
      {
        *((_QWORD *)a1 + 2) = a2[2];
        sub_1BCB02854();
        v21 = v20;
        v22 = *(int *)(v20 + 64);
        v41 = &a1[v22];
        v23 = (uint64_t)a2 + v22;
        v24 = sub_1BCB63B3C();
        v25 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_retain();
        v25(v41, v23, v24);
        *(_QWORD *)&a1[*(int *)(v21 + 80)] = *(char **)((char *)a2 + *(int *)(v21 + 80));
        v26 = (int *)(v21 + 96);
      }
      else
      {
        sub_1BCB02E30();
        v28 = v27;
        v29 = *(int *)(v27 + 48);
        v30 = &a1[v29];
        v31 = (uint64_t)a2 + v29;
        v32 = sub_1BCB63B3C();
        v33 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16);
        swift_bridgeObjectRetain();
        v33(v30, v31, v32);
        *(_QWORD *)&a1[*(int *)(v28 + 64)] = *(char **)((char *)a2 + *(int *)(v28 + 64));
        v26 = (int *)(v28 + 80);
      }
      v34 = *v26;
      v35 = &a1[v34];
      v36 = (uint64_t)a2 + v34;
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = *(_BYTE *)(v36 + 8);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for MedicationDoseEventSaveRequest(id *a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t);
  char *v13;

  if (swift_getEnumCaseMultiPayload() != 1)
  {
    type metadata accessor for MedicationDoseEventLogSource(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    swift_bridgeObjectRelease();
    if (EnumCaseMultiPayload == 1)
    {
      swift_release();
      sub_1BCB02854();
      v8 = *(int *)(v7 + 64);
    }
    else
    {
      sub_1BCB02E30();
      v8 = *(int *)(v9 + 48);
    }
    v10 = (char *)a1 + v8;
    v11 = sub_1BCB63B3C();
    v12 = *(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
    v13 = v10;
    return v12(v13, v11);
  }

  v2 = (char *)a1 + *(int *)(type metadata accessor for MedicationDoseEventUpdateModel(0) + 24);
  v3 = sub_1BCB63B3C();
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if (!(_DWORD)result)
  {
    v12 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
    v13 = v2;
    v11 = v3;
    return v12(v13, v11);
  }
  return result;
}

uint64_t initializeWithCopy for MedicationDoseEventSaveRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t updated;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  id v13;
  uint64_t v14;
  int EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = *(void **)a2;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    updated = type metadata accessor for MedicationDoseEventUpdateModel(0);
    v7 = *(int *)(updated + 24);
    v8 = (void *)(a1 + v7);
    v9 = (const void *)(a2 + v7);
    v10 = sub_1BCB63B3C();
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
    v13 = v5;
    if (v12(v9, 1, v10))
    {
      sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v34 = *(int *)(updated + 28);
    v35 = a1 + v34;
    v36 = a2 + v34;
    *(_QWORD *)v35 = *(_QWORD *)v36;
    *(_BYTE *)(v35 + 8) = *(_BYTE *)(v36 + 8);
  }
  else
  {
    type metadata accessor for MedicationDoseEventLogSource(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v16 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v16;
    if (EnumCaseMultiPayload == 1)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      sub_1BCB02854();
      v18 = v17;
      v19 = *(int *)(v17 + 64);
      v38 = a1 + v19;
      v20 = a2 + v19;
      v21 = sub_1BCB63B3C();
      v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_retain();
      v22(v38, v20, v21);
      *(_QWORD *)(a1 + *(int *)(v18 + 80)) = *(_QWORD *)(a2 + *(int *)(v18 + 80));
      v23 = (int *)(v18 + 96);
    }
    else
    {
      sub_1BCB02E30();
      v25 = v24;
      v26 = *(int *)(v24 + 48);
      v27 = a1 + v26;
      v28 = a2 + v26;
      v29 = sub_1BCB63B3C();
      v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
      swift_bridgeObjectRetain();
      v30(v27, v28, v29);
      *(_QWORD *)(a1 + *(int *)(v25 + 64)) = *(_QWORD *)(a2 + *(int *)(v25 + 64));
      v23 = (int *)(v25 + 80);
    }
    v31 = *v23;
    v32 = a1 + v31;
    v33 = a2 + v31;
    *(_QWORD *)v32 = *(_QWORD *)v33;
    *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for MedicationDoseEventSaveRequest(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t updated;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  id v13;
  uint64_t v14;
  int EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v39;

  if (a1 != a2)
  {
    sub_1BCAFC40C(a1, type metadata accessor for MedicationDoseEventSaveRequest);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v5 = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v5;
      updated = type metadata accessor for MedicationDoseEventUpdateModel(0);
      v7 = *(int *)(updated + 24);
      v8 = (void *)(a1 + v7);
      v9 = (const void *)(a2 + v7);
      v10 = sub_1BCB63B3C();
      v11 = *(_QWORD *)(v10 - 8);
      v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
      v13 = v4;
      if (v12(v9, 1, v10))
      {
        sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      v34 = *(int *)(updated + 28);
      v35 = a1 + v34;
      v36 = (uint64_t *)(a2 + v34);
      v37 = *v36;
      *(_BYTE *)(v35 + 8) = *((_BYTE *)v36 + 8);
      *(_QWORD *)v35 = v37;
    }
    else
    {
      type metadata accessor for MedicationDoseEventLogSource(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      if (EnumCaseMultiPayload == 1)
      {
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        sub_1BCB02854();
        v17 = v16;
        v18 = *(int *)(v16 + 64);
        v39 = a1 + v18;
        v19 = a2 + v18;
        v20 = sub_1BCB63B3C();
        v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_retain();
        v21(v39, v19, v20);
        *(_QWORD *)(a1 + *(int *)(v17 + 80)) = *(_QWORD *)(a2 + *(int *)(v17 + 80));
        v22 = (int *)(v17 + 96);
      }
      else
      {
        sub_1BCB02E30();
        v24 = v23;
        v25 = *(int *)(v23 + 48);
        v26 = a1 + v25;
        v27 = a2 + v25;
        v28 = sub_1BCB63B3C();
        v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
        swift_bridgeObjectRetain();
        v29(v26, v27, v28);
        *(_QWORD *)(a1 + *(int *)(v24 + 64)) = *(_QWORD *)(a2 + *(int *)(v24 + 64));
        v22 = (int *)(v24 + 80);
      }
      v30 = *v22;
      v31 = a1 + v30;
      v32 = (uint64_t *)(a2 + v30);
      v33 = *v32;
      *(_BYTE *)(v31 + 8) = *((_BYTE *)v32 + 8);
      *(_QWORD *)v31 = v33;
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for MedicationDoseEventSaveRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t updated;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    updated = type metadata accessor for MedicationDoseEventUpdateModel(0);
    v6 = *(int *)(updated + 24);
    v7 = (void *)(a1 + v6);
    v8 = (const void *)(a2 + v6);
    v9 = sub_1BCB63B3C();
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    {
      sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
    v29 = *(int *)(updated + 28);
    v30 = a1 + v29;
    v31 = a2 + v29;
    *(_QWORD *)v30 = *(_QWORD *)v31;
    *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  }
  else
  {
    type metadata accessor for MedicationDoseEventLogSource(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (EnumCaseMultiPayload == 1)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      sub_1BCB02854();
      v14 = v13;
      v15 = *(int *)(v13 + 64);
      v16 = a1 + v15;
      v17 = a2 + v15;
      v18 = sub_1BCB63B3C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
      *(_QWORD *)(a1 + *(int *)(v14 + 80)) = *(_QWORD *)(a2 + *(int *)(v14 + 80));
      v19 = (int *)(v14 + 96);
    }
    else
    {
      sub_1BCB02E30();
      v21 = v20;
      v22 = *(int *)(v20 + 48);
      v23 = a1 + v22;
      v24 = a2 + v22;
      v25 = sub_1BCB63B3C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
      *(_QWORD *)(a1 + *(int *)(v21 + 64)) = *(_QWORD *)(a2 + *(int *)(v21 + 64));
      v19 = (int *)(v21 + 80);
    }
    v26 = *v19;
    v27 = a1 + v26;
    v28 = a2 + v26;
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for MedicationDoseEventSaveRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t updated;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (a1 != a2)
  {
    sub_1BCAFC40C(a1, type metadata accessor for MedicationDoseEventSaveRequest);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v4;
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      updated = type metadata accessor for MedicationDoseEventUpdateModel(0);
      v6 = *(int *)(updated + 24);
      v7 = (void *)(a1 + v6);
      v8 = (const void *)(a2 + v6);
      v9 = sub_1BCB63B3C();
      v10 = *(_QWORD *)(v9 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
      v29 = *(int *)(updated + 28);
      v30 = a1 + v29;
      v31 = a2 + v29;
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
    }
    else
    {
      type metadata accessor for MedicationDoseEventLogSource(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (EnumCaseMultiPayload == 1)
      {
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        sub_1BCB02854();
        v14 = v13;
        v15 = *(int *)(v13 + 64);
        v16 = a1 + v15;
        v17 = a2 + v15;
        v18 = sub_1BCB63B3C();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
        *(_QWORD *)(a1 + *(int *)(v14 + 80)) = *(_QWORD *)(a2 + *(int *)(v14 + 80));
        v19 = (int *)(v14 + 96);
      }
      else
      {
        sub_1BCB02E30();
        v21 = v20;
        v22 = *(int *)(v20 + 48);
        v23 = a1 + v22;
        v24 = a2 + v22;
        v25 = sub_1BCB63B3C();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
        *(_QWORD *)(a1 + *(int *)(v21 + 64)) = *(_QWORD *)(a2 + *(int *)(v21 + 64));
        v19 = (int *)(v21 + 80);
      }
      v26 = *v19;
      v27 = a1 + v26;
      v28 = a2 + v26;
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1BCB04D04()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for MedicationDoseEventLogSource(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for MedicationDoseEventUpdateModel(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for MedicationDoseEventLogger()
{
  return objc_opt_self();
}

uint64_t method lookup function for MedicationDoseEventLogger()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MedicationDoseEventLogger.__allocating_init(healthStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

void sub_1BCB04DB8(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  char v33;
  uint64_t v34;
  id v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = a1;
  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
    if (v5)
    {
LABEL_3:
      sub_1BCB05110();
      v3 = sub_1BCB64784();
      if (!v2)
        goto LABEL_4;
LABEL_8:
      swift_bridgeObjectRetain();
      v4 = sub_1BCB648D4();
      swift_bridgeObjectRelease();
      if (!v4)
        return;
      goto LABEL_9;
    }
  }
  else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v3 = MEMORY[0x1E0DEE9E8];
  if (v2)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return;
LABEL_9:
  v6 = v3 + 56;
  v42 = v4;
  if ((v1 & 0xC000000000000001) != 0)
  {
    v7 = 0;
    v40 = v1;
    while (1)
    {
      while (1)
      {
        v8 = MEMORY[0x1BCCFCF20](v7, v1);
        v9 = __OFADD__(v7++, 1);
        if (v9)
        {
          __break(1u);
          goto LABEL_36;
        }
        v10 = v8;
        v11 = sub_1BCB645EC();
        v12 = -1 << *(_BYTE *)(v3 + 32);
        v13 = v11 & ~v12;
        v14 = v13 >> 6;
        v15 = *(_QWORD *)(v6 + 8 * (v13 >> 6));
        v16 = 1 << v13;
        if (((1 << v13) & v15) != 0)
          break;
LABEL_20:
        *(_QWORD *)(v6 + 8 * v14) = v16 | v15;
        *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v13) = v10;
        v22 = *(_QWORD *)(v3 + 16);
        v9 = __OFADD__(v22, 1);
        v23 = v22 + 1;
        if (v9)
          goto LABEL_37;
        *(_QWORD *)(v3 + 16) = v23;
        if (v7 == v4)
          return;
      }
      sub_1BCAFC2E0(0, &qword_1EF487720);
      v17 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v13);
      v18 = sub_1BCB645F8();

      if ((v18 & 1) == 0)
      {
        v19 = ~v12;
        while (1)
        {
          v13 = (v13 + 1) & v19;
          v14 = v13 >> 6;
          v15 = *(_QWORD *)(v6 + 8 * (v13 >> 6));
          v16 = 1 << v13;
          if ((v15 & (1 << v13)) == 0)
            break;
          v20 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v13);
          v21 = sub_1BCB645F8();

          if ((v21 & 1) != 0)
            goto LABEL_11;
        }
        v1 = v40;
        v4 = v42;
        goto LABEL_20;
      }
LABEL_11:
      swift_unknownObjectRelease();
      v1 = v40;
      v4 = v42;
      if (v7 == v42)
        return;
    }
  }
  v24 = 0;
  v39 = v1 + 32;
  v41 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v24 != v41)
  {
    v25 = *(id *)(v39 + 8 * v24);
    v26 = sub_1BCB645EC();
    v27 = -1 << *(_BYTE *)(v3 + 32);
    v28 = v26 & ~v27;
    v29 = v28 >> 6;
    v30 = *(_QWORD *)(v6 + 8 * (v28 >> 6));
    v31 = 1 << v28;
    if (((1 << v28) & v30) != 0)
    {
      sub_1BCAFC2E0(0, &qword_1EF487720);
      v32 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v28);
      v33 = sub_1BCB645F8();

      if ((v33 & 1) != 0)
      {
LABEL_24:

        goto LABEL_25;
      }
      v34 = ~v27;
      while (1)
      {
        v28 = (v28 + 1) & v34;
        v29 = v28 >> 6;
        v30 = *(_QWORD *)(v6 + 8 * (v28 >> 6));
        v31 = 1 << v28;
        if ((v30 & (1 << v28)) == 0)
          break;
        v35 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v28);
        v36 = sub_1BCB645F8();

        if ((v36 & 1) != 0)
          goto LABEL_24;
      }
    }
    *(_QWORD *)(v6 + 8 * v29) = v31 | v30;
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v28) = v25;
    v37 = *(_QWORD *)(v3 + 16);
    v9 = __OFADD__(v37, 1);
    v38 = v37 + 1;
    if (v9)
      goto LABEL_38;
    *(_QWORD *)(v3 + 16) = v38;
LABEL_25:
    if (++v24 == v42)
      return;
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

void sub_1BCB05110()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF487718)
  {
    sub_1BCAFC2E0(255, &qword_1EF487720);
    sub_1BCB05180();
    v0 = sub_1BCB64790();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF487718);
  }
}

unint64_t sub_1BCB05180()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF487728;
  if (!qword_1EF487728)
  {
    v1 = sub_1BCAFC2E0(255, &qword_1EF487720);
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&qword_1EF487728);
  }
  return result;
}

void sub_1BCB051D8(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_1BCAFC2E0(255, a3);
    v4 = sub_1BCB64358();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_1BCB0522C(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1BCB051D8(255, a2, a3);
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0DEAF50], v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BCB0526C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF487768;
  if (!qword_1EF487768)
  {
    sub_1BCAFC448(255, &qword_1EF487760, (uint64_t (*)(uint64_t))type metadata accessor for ScheduleItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF487768);
  }
  return result;
}

unint64_t sub_1BCB052CC()
{
  unint64_t result;

  result = qword_1EDA14290;
  if (!qword_1EDA14290)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EDA14290);
  }
  return result;
}

uint64_t sub_1BCB05320(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_1BCB0537C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

_QWORD *__swift_project_boxed_opaque_existential_0(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1BCB053D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_1BCB0540C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF487780;
  if (!qword_1EF487780)
  {
    sub_1BCB051D8(255, &qword_1EDA14458, &qword_1EDA142A0);
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF487780);
  }
  return result;
}

void sub_1BCB0546C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF487788)
  {
    sub_1BCB63C2C();
    sub_1BCB054DC(&qword_1EF487790, MEMORY[0x1E0CB11D0]);
    v0 = sub_1BCB64790();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF487788);
  }
}

uint64_t sub_1BCB054DC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1BCB63C2C();
    result = MEMORY[0x1BCCFD874](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1BCB0551C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF4877A0)
  {
    type metadata accessor for MedicationDoseEventLogSource(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF4877A0);
  }
}

uint64_t MedicationRoomInteractionAnalyticsManager.provenance.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1BCB0558C()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t sub_1BCB055BC(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 24) = a1;
  return result;
}

uint64_t (*sub_1BCB055F8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1BCB05634()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t sub_1BCB05664(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 25) = a1;
  return result;
}

uint64_t (*sub_1BCB056A0())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

id MedicationRoomInteractionAnalyticsManager.calendarCache.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

uint64_t MedicationRoomInteractionAnalyticsManager.__allocating_init(provenance:hasSideEffectsContent:hasPregnancyContent:)(uint64_t a1, char a2, char a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB6360]), sel_init);
  *(_QWORD *)(v6 + 16) = a1;
  *(_BYTE *)(v6 + 24) = a2;
  *(_BYTE *)(v6 + 25) = a3;
  return v6;
}

uint64_t MedicationRoomInteractionAnalyticsManager.init(provenance:hasSideEffectsContent:hasPregnancyContent:)(uint64_t a1, char a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB6360]), sel_init);
  *(_QWORD *)(v3 + 16) = a1;
  *(_BYTE *)(v3 + 24) = a2;
  *(_BYTE *)(v3 + 25) = a3;
  return v3;
}

void sub_1BCB057A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  char v18;
  char v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t aBlock[6];
  uint64_t v27;

  v3 = v2;
  if (qword_1EDA14510 != -1)
    swift_once();
  v6 = sub_1BCB63DDC();
  __swift_project_value_buffer(v6, (uint64_t)qword_1EDA14518);
  v7 = sub_1BCB63DD0();
  v8 = sub_1BCB64514();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v25 = swift_slowAlloc();
    *(_DWORD *)v9 = 136315650;
    aBlock[0] = v25;
    v10 = sub_1BCB64B14();
    v27 = sub_1BCB010C8(v10, v11, aBlock);
    sub_1BCB64640();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    v12 = (id)HKStringFromMedicationRoomAnalyticsAction();
    v13 = sub_1BCB6413C();
    v15 = v14;

    v27 = sub_1BCB010C8(v13, v15, aBlock);
    sub_1BCB64640();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 22) = 2048;
    v27 = a2;
    sub_1BCB64640();
    _os_log_impl(&dword_1BCAF3000, v7, v8, "[%s] Submitting analytics for action: %s, roomType: %ld", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BCCFD928](v25, -1, -1);
    MEMORY[0x1BCCFD928](v9, -1, -1);
  }

  v16 = *(_QWORD *)(v3 + 16);
  v17 = *(void **)(v3 + 32);
  swift_beginAccess();
  v18 = *(_BYTE *)(v3 + 24);
  swift_beginAccess();
  v19 = *(_BYTE *)(v3 + 25);
  type metadata accessor for MedicationRoomInteractionEvent();
  swift_allocObject();
  v20 = v17;
  v21 = sub_1BCB2F57C(a1, a2, v16, v20, v18, v19);

  v22 = (id)HKLogMedication();
  if (qword_1EDA13DC8 != -1)
    swift_once();
  v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB62B8]), sel_initWithLoggingCategory_healthDataSource_, v22, *((_QWORD *)off_1EDA14058 + 2));

  aBlock[4] = (uint64_t)sub_1BCB05B10;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1BCB05DCC;
  aBlock[3] = (uint64_t)&block_descriptor_0;
  v24 = _Block_copy(aBlock);
  objc_msgSend(v23, sel_submitEvent_completion_, v21, v24);
  _Block_release(v24);
  swift_release();

}

void sub_1BCB05B10(char a1, void *a2)
{
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v6;
  id v7;
  id v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  NSObject *oslog;

  if ((a1 & 1) != 0)
  {
    if (qword_1EDA14510 != -1)
      swift_once();
    v2 = sub_1BCB63DDC();
    __swift_project_value_buffer(v2, (uint64_t)qword_1EDA14518);
    oslog = sub_1BCB63DD0();
    v3 = sub_1BCB644F0();
    if (os_log_type_enabled(oslog, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1BCAF3000, oslog, v3, "[MedicationRoomInteractionAnalytics] Successfully submitted analytics", v4, 2u);
      MEMORY[0x1BCCFD928](v4, -1, -1);
    }
    goto LABEL_12;
  }
  if (qword_1EDA14510 != -1)
    swift_once();
  v6 = sub_1BCB63DDC();
  __swift_project_value_buffer(v6, (uint64_t)qword_1EDA14518);
  v7 = a2;
  v8 = a2;
  oslog = sub_1BCB63DD0();
  v9 = sub_1BCB644FC();
  if (!os_log_type_enabled(oslog, v9))
  {

LABEL_12:
    return;
  }
  v10 = (uint8_t *)swift_slowAlloc();
  v11 = (_QWORD *)swift_slowAlloc();
  *(_DWORD *)v10 = 138412290;
  if (a2)
  {
    v12 = a2;
    v13 = _swift_stdlib_bridgeErrorToNSError();
    sub_1BCB64640();
  }
  else
  {
    sub_1BCB64640();
    v13 = 0;
  }
  *v11 = v13;

  _os_log_impl(&dword_1BCAF3000, oslog, v9, "[MedicationRoomInteractionAnalytics] Failed to submit analytics with error: %@.", v10, 0xCu);
  sub_1BCB06014();
  swift_arrayDestroy();
  MEMORY[0x1BCCFD928](v11, -1, -1);
  MEMORY[0x1BCCFD928](v10, -1, -1);

}

void sub_1BCB05DCC(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

uint64_t MedicationRoomInteractionAnalyticsManager.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t MedicationRoomInteractionAnalyticsManager.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_1BCB05E84@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 24);
  return result;
}

uint64_t sub_1BCB05EC8(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 24) = v2;
  return result;
}

uint64_t sub_1BCB05F08@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 25);
  return result;
}

uint64_t sub_1BCB05F4C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 25) = v2;
  return result;
}

uint64_t type metadata accessor for MedicationRoomInteractionAnalyticsManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for MedicationRoomInteractionAnalyticsManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MedicationRoomInteractionAnalyticsManager.hasSideEffectsContent.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of MedicationRoomInteractionAnalyticsManager.hasSideEffectsContent.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of MedicationRoomInteractionAnalyticsManager.hasSideEffectsContent.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of MedicationRoomInteractionAnalyticsManager.hasPregnancyContent.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of MedicationRoomInteractionAnalyticsManager.hasPregnancyContent.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of MedicationRoomInteractionAnalyticsManager.hasPregnancyContent.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of MedicationRoomInteractionAnalyticsManager.__allocating_init(provenance:hasSideEffectsContent:hasPregnancyContent:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of MedicationRoomInteractionAnalyticsManager.submitMedicationInteraction(action:roomType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

void sub_1BCB06014()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF4878A0)
  {
    sub_1BCB06068();
    v0 = sub_1BCB64628();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF4878A0);
  }
}

unint64_t sub_1BCB06068()
{
  unint64_t result;

  result = qword_1EDA139E0;
  if (!qword_1EDA139E0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EDA139E0);
  }
  return result;
}

uint64_t MedicationScheduleItemDataSource.__allocating_init(healthStore:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t MedicationScheduleItemDataSource.init(healthStore:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t MedicationScheduleItemDataSource.fetchScheduleItem(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  sub_1BCB06664();
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  sub_1BCB066B8(0, &qword_1EDA14438, (unint64_t *)&unk_1EDA14490, 0x1E0D2C4A8, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for HKMedicationScheduleItemQueryDescriptor);
  v3[16] = v4;
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  sub_1BCB066B8(0, &qword_1EDA142D0, (unint64_t *)&unk_1EDA14490, 0x1E0D2C4A8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CAEB88]);
  v3[19] = v5;
  v3[20] = *(_QWORD *)(v5 - 8);
  v3[21] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BCB061F0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = v0[20];
  v1 = v0[21];
  v3 = v0[17];
  v5 = v0[15];
  v4 = (int *)v0[16];
  v6 = v0[14];
  v16 = v0[19];
  v17 = v6;
  v20 = v0[13];
  v21 = v0[18];
  v18 = v0[12];
  v19 = v0[11];
  KeyPath = swift_getKeyPath();
  MEMORY[0x1BCCFC188](KeyPath, 0);
  v8 = sub_1BCB63B3C();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
  v9(v5, 1, 1, v8);
  v9(v6, 1, 1, v8);
  sub_1BCB06774();
  v10 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1BCB66020;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 16))(v11 + v10, v1, v16);
  v9(v3, 1, 1, v8);
  v12 = v3 + v4[7];
  v9(v12, 1, 1, v8);
  v13 = (_QWORD *)(v3 + v4[8]);
  *v13 = 0;
  v13[1] = 0;
  v14 = v4[9];
  *(_QWORD *)(v3 + v14) = 0;
  swift_bridgeObjectRetain();
  sub_1BCB64064();
  sub_1BCB067E8(v5, v3);
  sub_1BCB067E8(v17, v12);
  swift_bridgeObjectRelease();
  *v13 = v19;
  v13[1] = v18;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + v14) = v11;
  sub_1BCB0682C(v3, v21);
  v0[22] = *(_QWORD *)(v20 + 16);
  return swift_task_switch();
}

uint64_t sub_1BCB063C0()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (void *)v0[22];
  v2 = v0[18];
  v0[7] = v0 + 10;
  v0[2] = v0;
  v0[3] = sub_1BCB06428;
  v3 = swift_continuation_init();
  sub_1BCB08C48(v3, v2, v1);
  return swift_continuation_await();
}

uint64_t sub_1BCB06428()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 184) = v2;
  if (v2)
    swift_willThrow();
  else
    *(_QWORD *)(v1 + 192) = *(_QWORD *)(v1 + 80);
  return swift_task_switch();
}

void sub_1BCB0649C()
{
  uint64_t v0;
  unint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 192);
  if (!(v1 >> 62))
  {
    if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease();
    v2 = 0;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  v3 = sub_1BCB648D4();
  swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_8;
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v2 = (id)MEMORY[0x1BCCFCF20](0, *(_QWORD *)(v0 + 192));
    goto LABEL_6;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v2 = *(id *)(*(_QWORD *)(v0 + 192) + 32);
LABEL_6:
    swift_bridgeObjectRelease();
LABEL_9:
    v5 = *(_QWORD *)(v0 + 160);
    v4 = *(_QWORD *)(v0 + 168);
    v6 = *(_QWORD *)(v0 + 152);
    sub_1BCB08F68(*(_QWORD *)(v0 + 144));
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(id))(v0 + 8))(v2);
    return;
  }
  __break(1u);
}

uint64_t sub_1BCB065D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 152);
  sub_1BCB08F68(*(_QWORD *)(v0 + 144));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1BCB06664()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EDA14530)
  {
    sub_1BCB63B3C();
    v0 = sub_1BCB64628();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EDA14530);
  }
}

void sub_1BCB066B8(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = sub_1BCAFC2E0(255, a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

char *keypath_get_selector_scheduledDateTime()
{
  return sel_scheduledDateTime;
}

void sub_1BCB06724(id *a1)
{
  id v1;

  v1 = objc_msgSend(*a1, sel_scheduledDateTime);
  sub_1BCB63B18();

}

void sub_1BCB06774()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EDA144E8)
  {
    sub_1BCB066B8(255, &qword_1EDA142D0, (unint64_t *)&unk_1EDA14490, 0x1E0D2C4A8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CAEB88]);
    v0 = sub_1BCB649DC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EDA144E8);
  }
}

uint64_t sub_1BCB067E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BCB06664();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BCB0682C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BCB066B8(0, &qword_1EDA14438, (unint64_t *)&unk_1EDA14490, 0x1E0D2C4A8, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for HKMedicationScheduleItemQueryDescriptor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t MedicationScheduleItemDataSource.hk_scheduleItems(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  sub_1BCB06664();
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  sub_1BCB066B8(0, &qword_1EDA14438, (unint64_t *)&unk_1EDA14490, 0x1E0D2C4A8, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for HKMedicationScheduleItemQueryDescriptor);
  v3[16] = v4;
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BCB06950()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0[17];
  v3 = v0[15];
  v2 = (int *)v0[16];
  v4 = v0[14];
  v13 = v0[13];
  v14 = v0[18];
  v5 = v0[12];
  v12 = v0[11];
  v6 = sub_1BCB63B3C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v3, 1, 1, v6);
  v7(v4, 1, 1, v6);
  v7(v1, 1, 1, v6);
  v8 = v1 + v2[7];
  v7(v8, 1, 1, v6);
  v9 = (_QWORD *)(v1 + v2[8]);
  *v9 = 0;
  v9[1] = 0;
  v10 = v2[9];
  *(_QWORD *)(v1 + v10) = 0;
  swift_bridgeObjectRetain();
  sub_1BCB64064();
  sub_1BCB067E8(v3, v1);
  sub_1BCB067E8(v4, v8);
  swift_bridgeObjectRelease();
  *v9 = v12;
  v9[1] = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v10) = 0;
  sub_1BCB0682C(v1, v14);
  v0[19] = *(_QWORD *)(v13 + 16);
  return swift_task_switch();
}

uint64_t sub_1BCB06AAC()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v0[18];
  v1 = (void *)v0[19];
  v0[7] = v0 + 10;
  v0[2] = v0;
  v0[3] = sub_1BCB06B10;
  v3 = swift_continuation_init();
  sub_1BCB08C48(v3, v2, v1);
  return swift_continuation_await();
}

uint64_t sub_1BCB06B10()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 160) = v2;
  if (v2)
    swift_willThrow();
  else
    *(_QWORD *)(v1 + 168) = *(_QWORD *)(v1 + 80);
  return swift_task_switch();
}

uint64_t sub_1BCB06B84()
{
  uint64_t v0;

  sub_1BCB08F68(*(_QWORD *)(v0 + 144));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 168));
}

uint64_t sub_1BCB06BEC()
{
  uint64_t v0;

  sub_1BCB08F68(*(_QWORD *)(v0 + 144));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MedicationScheduleItemDataSource.fetchScheduleItems(in:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[11] = a1;
  v2[12] = v1;
  sub_1BCB06664();
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  sub_1BCB066B8(0, &qword_1EDA14438, (unint64_t *)&unk_1EDA14490, 0x1E0D2C4A8, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for HKMedicationScheduleItemQueryDescriptor);
  v2[15] = v3;
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  sub_1BCB066B8(0, &qword_1EDA142D0, (unint64_t *)&unk_1EDA14490, 0x1E0D2C4A8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CAEB88]);
  v2[18] = v4;
  v2[19] = *(_QWORD *)(v4 - 8);
  v2[20] = swift_task_alloc();
  v5 = sub_1BCB63B3C();
  v2[21] = v5;
  v2[22] = *(_QWORD *)(v5 - 8);
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BCB06D94()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t KeyPath;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = v0[23];
  v2 = v0[24];
  v4 = v0[21];
  v3 = v0[22];
  v18 = v0[20];
  v19 = v0[19];
  v5 = v0[16];
  v22 = v0[17];
  v6 = v0[14];
  v7 = (int *)v0[15];
  v17 = v0[13];
  v20 = v0[18];
  v21 = v0[12];
  sub_1BCB639BC();
  sub_1BCB639B0();
  KeyPath = swift_getKeyPath();
  MEMORY[0x1BCCFC188](KeyPath, 0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v9(v6, v2, v4);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  v10(v6, 0, 1, v4);
  v9(v17, v1, v4);
  v10(v17, 0, 1, v4);
  sub_1BCB06774();
  v11 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1BCB66020;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v19 + 16))(v12 + v11, v18, v20);
  v10(v5, 1, 1, v4);
  v13 = v5 + v7[7];
  v10(v13, 1, 1, v4);
  v14 = (_QWORD *)(v5 + v7[8]);
  *v14 = 0;
  v14[1] = 0;
  v15 = v7[9];
  *(_QWORD *)(v5 + v15) = 0;
  sub_1BCB64064();
  sub_1BCB067E8(v6, v5);
  sub_1BCB067E8(v17, v13);
  swift_bridgeObjectRelease();
  *v14 = 0;
  v14[1] = 0;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 + v15) = v12;
  sub_1BCB0682C(v5, v22);
  v0[25] = *(_QWORD *)(v21 + 16);
  return swift_task_switch();
}

uint64_t sub_1BCB06F88()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (void *)v0[25];
  v2 = v0[17];
  v0[7] = v0 + 10;
  v0[2] = v0;
  v0[3] = sub_1BCB06FF0;
  v3 = swift_continuation_init();
  sub_1BCB08C48(v3, v2, v1);
  return swift_continuation_await();
}

uint64_t sub_1BCB06FF0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 208) = v2;
  if (v2)
    swift_willThrow();
  else
    *(_QWORD *)(v1 + 216) = *(_QWORD *)(v1 + 80);
  return swift_task_switch();
}

uint64_t sub_1BCB07064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 144);
  sub_1BCB08F68(*(_QWORD *)(v0 + 136));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v8(v1, v3);
  v8(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 216));
}

uint64_t sub_1BCB07140()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 144);
  sub_1BCB08F68(*(_QWORD *)(v0 + 136));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v8(v1, v3);
  v8(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCB07218(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  sub_1BCB066B8(0, &qword_1EDA14450, &qword_1EDA144B0, 0x1E0CB6AD8, MEMORY[0x1E0CB43C0]);
  v3[5] = v4;
  v3[6] = *(_QWORD *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BCB0729C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  id v5;
  id v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t KeyPath;
  _QWORD *v9;

  v1 = (void *)objc_opt_self();
  v2 = (void *)sub_1BCB6410C();
  v3 = objc_msgSend(v1, sel_predicateForMedicationDoseEventWithScheduleItemIdentifier_, v2);
  *(_QWORD *)(v0 + 64) = v3;

  v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4398];
  sub_1BCB09B4C(0, (unint64_t *)&unk_1EDA14500, (unint64_t *)&unk_1EDA14440, MEMORY[0x1E0CB4398]);
  sub_1BCB066B8(0, (unint64_t *)&unk_1EDA14440, &qword_1EDA144B0, 0x1E0CB6AD8, v4);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1BCB66020;
  v5 = objc_msgSend((id)objc_opt_self(), sel_medicationDoseEventType);
  sub_1BCAFC2E0(0, &qword_1EDA144B0);
  v6 = v3;
  sub_1BCB6407C();

  v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CAEB88];
  sub_1BCB09B4C(0, (unint64_t *)&unk_1EDA144F0, &qword_1EDA142D8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CAEB88]);
  sub_1BCB066B8(0, &qword_1EDA142D8, &qword_1EDA144B0, 0x1E0CB6AD8, v7);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1BCB66020;
  KeyPath = swift_getKeyPath();
  MEMORY[0x1BCCFC188](KeyPath, 0);
  sub_1BCB64088();
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v9;
  *v9 = v0;
  v9[1] = sub_1BCB07508;
  return sub_1BCB64094();
}

uint64_t sub_1BCB07508(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 88) = a1;
  return swift_task_switch();
}

uint64_t sub_1BCB0757C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = sub_1BCB52100(*(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(void **)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 40);
  if (v2)
  {
    (*(void (**)(_QWORD, _QWORD))(v1 + 8))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 40));

  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v5);
    v2 = MEMORY[0x1E0DEE9D8];
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_1BCB07620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MedicationScheduleItemDataSource.unloggedScheduleItems(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[191] = v2;
  v3[185] = a2;
  v3[179] = a1;
  sub_1BCB06664();
  v3[197] = swift_task_alloc();
  v4 = sub_1BCB63B3C();
  v3[203] = v4;
  v3[209] = *(_QWORD *)(v4 - 8);
  v3[210] = swift_task_alloc();
  v3[211] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BCB07710()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  _QWORD *v6;

  v1 = v0[191];
  v2 = v0[185];
  v3 = v0[179];
  v4 = (_QWORD *)swift_allocObject();
  v0[212] = v4;
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8];
  sub_1BCB066B8(255, &qword_1EDA14458, &qword_1EDA142A0, 0x1E0CB68A8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  swift_asyncLet_begin();
  v6 = (_QWORD *)swift_allocObject();
  v0[213] = v6;
  v6[2] = v1;
  v6[3] = v3;
  v6[4] = v2;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1BCB066B8(255, &qword_1EDA14460, (unint64_t *)&unk_1EDA14490, 0x1E0D2C4A8, v5);
  swift_asyncLet_begin();
  return swift_asyncLet_get_throwing();
}

uint64_t sub_1BCB07894()
{
  uint64_t v0;
  _QWORD *v1;

  v1[214] = v0;
  if (v0)
    return swift_asyncLet_finish();
  v1[215] = v1[173];
  swift_bridgeObjectRetain();
  return swift_asyncLet_get_throwing();
}

uint64_t sub_1BCB0791C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 1728) = v0;
  return swift_task_switch();
}

uint64_t sub_1BCB07944()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void **p_weak_ivar_lyt;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  id v49;
  void *v50;
  _QWORD *v51;
  uint64_t v52;
  id v53;
  unint64_t v54;
  id v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *i;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v1 = v0[215];
  v2 = v0[167];
  v3 = MEMORY[0x1E0DEE9D8];
  v69 = MEMORY[0x1E0DEE9D8];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1BCB648D4();
    v4 = result;
    v68 = v2;
    if (result)
    {
LABEL_3:
      if (v4 < 1)
      {
        __break(1u);
        goto LABEL_53;
      }
      v6 = 0;
      v7 = v0[215] + 32;
      do
      {
        if ((v1 & 0xC000000000000001) != 0)
          v8 = (id)MEMORY[0x1BCCFCF20](v6, v0[215]);
        else
          v8 = *(id *)(v7 + 8 * v6);
        v9 = v8;
        if (objc_msgSend(v8, sel_status) == (id)4 || objc_msgSend(v9, sel_status) == (id)5)
        {

        }
        else
        {
          sub_1BCB64820();
          sub_1BCB64850();
          sub_1BCB6485C();
          sub_1BCB6482C();
        }
        ++v6;
      }
      while (v4 != v6);
      swift_bridgeObjectRelease();
      v2 = v68;
      v10 = v69;
      v70 = v3;
      if (v10 < 0)
        goto LABEL_37;
      goto LABEL_17;
    }
  }
  else
  {
    v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v68 = v2;
    if (v4)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  v10 = MEMORY[0x1E0DEE9D8];
  v70 = v3;
  if ((MEMORY[0x1E0DEE9D8] & 0x8000000000000000) != 0)
    goto LABEL_37;
LABEL_17:
  if ((v10 & 0x4000000000000000) == 0)
  {
    v11 = *(_QWORD *)(v10 + 16);
    result = swift_retain();
    if (!v11)
      goto LABEL_38;
LABEL_19:
    if (v11 >= 1)
    {
      v12 = 0;
      v13 = v0[209];
      v14 = v10 & 0xC000000000000001;
      p_weak_ivar_lyt = &TestMedicationDetailProvider.weak_ivar_lyt;
      v57 = v10;
      v62 = v10 & 0xC000000000000001;
      v63 = v11;
      while (1)
      {
        if (v14)
          v17 = (id)MEMORY[0x1BCCFCF20](v12, v10);
        else
          v17 = *(id *)(v10 + 8 * v12 + 32);
        v18 = v17;
        v19 = objc_msgSend(v17, (SEL)p_weak_ivar_lyt[473], v57);
        if (v19)
        {
          v20 = v19;
          v65 = sub_1BCB6413C();
          v22 = v21;

          v23 = objc_msgSend(v18, sel_scheduledDate);
          if (v23)
          {
            v24 = v23;
            v25 = v0[210];
            v26 = v0[203];
            v27 = v0[197];
            sub_1BCB63B18();

            v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
            v29 = v25;
            v11 = v63;
            v28(v27, v29, v26);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v27, 0, 1, v26);
            v30 = v27;
            p_weak_ivar_lyt = (void **)(&TestMedicationDetailProvider + 56);
            v31 = v26;
            v14 = v62;
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v30, 1, v31) != 1)
            {
              v28(v0[211], v0[197], v0[203]);
              v32 = objc_msgSend(v18, sel_scheduledDoseQuantity);
              if (v32)
              {
                v33 = v32;
                v60 = v0[210];
                v61 = v0[211];
                v34 = v0[203];
                (*(void (**)(void))(v13 + 16))();
                v35 = objc_msgSend(v18, sel_medicationIdentifier);
                v36 = sub_1BCB6413C();
                v58 = v37;
                v59 = v36;

                objc_msgSend(v33, sel_doubleValue);
                v39 = v38;
                v40 = objc_msgSend(v18, sel_isLastScheduledDose);
                type metadata accessor for ScheduleItem();
                v41 = swift_allocObject();
                *(_QWORD *)(v41 + 16) = v65;
                *(_QWORD *)(v41 + 24) = v22;
                v28(v41 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_date, v60, v34);
                v42 = (uint64_t *)(v41 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_medicationIdentifier);
                *v42 = v59;
                v42[1] = v58;
                *(_QWORD *)(v41 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_doseAmount) = v39;
                *(_BYTE *)(v41 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_isLastScheduledDose) = v40;

                (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v61, v34);
                MEMORY[0x1BCCFCA1C]();
                if (*(_QWORD *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                  sub_1BCB64304();
                sub_1BCB64334();
                sub_1BCB642EC();
                v10 = v57;
                v14 = v62;
                v11 = v63;
                p_weak_ivar_lyt = (void **)(&TestMedicationDetailProvider + 56);
              }
              else
              {
                v43 = v0[203];
                v44 = v0[211];
                swift_bridgeObjectRelease();
                (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v44, v43);

                v10 = v57;
              }
              goto LABEL_24;
            }
          }
          else
          {
            (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v13 + 56))(v0[197], 1, 1, v0[203]);
          }
          v16 = v0[197];
          swift_bridgeObjectRelease();
          sub_1BCB09944(v16);
        }

LABEL_24:
        if (v11 == ++v12)
        {
          swift_release();
          v2 = v68;
          v45 = v70;
          goto LABEL_39;
        }
      }
    }
LABEL_53:
    __break(1u);
    return result;
  }
LABEL_37:
  swift_retain();
  result = sub_1BCB648D4();
  v11 = result;
  if (result)
    goto LABEL_19;
LABEL_38:
  swift_release();
  v45 = MEMORY[0x1E0DEE9D8];
LABEL_39:
  v64 = v45;
  swift_release();
  if (v2 >> 62)
    goto LABEL_49;
  v46 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  for (i = v0; v46; i = v0)
  {
    v47 = 0;
    v66 = v2 & 0xC000000000000001;
    v48 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v49 = v66 ? (id)MEMORY[0x1BCCFCF20](v47, v2) : *(id *)(v2 + 8 * v47 + 32);
      v50 = v49;
      v51 = (_QWORD *)(v47 + 1);
      if (__OFADD__(v47, 1))
        break;
      v0 = (_QWORD *)v46;
      v52 = i[215];
      v53 = objc_msgSend(v49, sel_doses);
      sub_1BCAFC2E0(0, &qword_1EDA144A0);
      v54 = sub_1BCB642D4();

      swift_bridgeObjectRetain();
      v55 = v50;
      v56 = sub_1BCB093E0(v54, v52, v55);

      v46 = (uint64_t)v0;
      swift_bridgeObjectRelease();
      v2 = v68;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_1BCB00B94(v56);

      swift_bridgeObjectRelease();
      ++v47;
      if (v51 == v0)
        goto LABEL_51;
    }
    __break(1u);
LABEL_49:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v46 = sub_1BCB648D4();
  }
  v48 = MEMORY[0x1E0DEE9D8];
LABEL_51:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_1BCB00B94(v48);
  i[217] = v64;
  return swift_asyncLet_finish();
}

uint64_t sub_1BCB07FF8()
{
  return swift_task_switch();
}

uint64_t sub_1BCB0800C()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1BCB08060()
{
  return swift_task_switch();
}

uint64_t sub_1BCB08074()
{
  uint64_t v0;

  swift_release_n();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 1736));
}

uint64_t sub_1BCB080E8()
{
  return swift_task_switch();
}

uint64_t sub_1BCB080FC()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1BCB08150()
{
  return swift_task_switch();
}

uint64_t sub_1BCB08164()
{
  uint64_t v0;

  swift_release_n();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCB081DC()
{
  swift_bridgeObjectRelease();
  return swift_asyncLet_finish();
}

uint64_t sub_1BCB08230()
{
  return swift_task_switch();
}

uint64_t sub_1BCB08244()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1BCB08298()
{
  return swift_task_switch();
}

uint64_t sub_1BCB082AC()
{
  uint64_t v0;

  swift_release_n();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCB08324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;

  *(_QWORD *)(v4 + 16) = a1;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v7;
  *v7 = v4;
  v7[1] = sub_1BCB0838C;
  return sub_1BCB07218(a3, a4);
}

uint64_t sub_1BCB0838C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 32) = a1;
  return swift_task_switch();
}

uint64_t sub_1BCB08408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;

  *(_QWORD *)(v4 + 16) = a1;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v7;
  *v7 = v4;
  v7[1] = sub_1BCB08470;
  return MedicationScheduleItemDataSource.hk_scheduleItems(for:)(a3, a4);
}

uint64_t sub_1BCB08470(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 32) = a1;
  return swift_task_switch();
}

uint64_t sub_1BCB084EC()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MedicationScheduleItemDataSource.scheduleItems(for:medicationsIdentifiers:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v7;
  _QWORD *v8;

  v7 = *v3;
  v4[6] = a3;
  v4[7] = v7;
  v4[4] = a1;
  v4[5] = a2;
  v8 = (_QWORD *)swift_task_alloc();
  v4[8] = v8;
  *v8 = v4;
  v8[1] = sub_1BCB0856C;
  return MedicationScheduleItemDataSource.hk_scheduleItems(for:)(a1, a2);
}

uint64_t sub_1BCB0856C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 72) = a1;
  *(_QWORD *)(v3 + 80) = v1;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v3 + 8))();
  else
    return swift_task_switch();
}

uint64_t sub_1BCB085E0()
{
  uint64_t v0;
  unint64_t v1;
  id v2;
  uint64_t v3;
  id v4;
  unint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19[2];

  v1 = *(_QWORD *)(v0 + 72);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
    if (v8)
      goto LABEL_3;
  }
  else if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    if ((v1 & 0xC000000000000001) != 0)
    {
      v2 = (id)MEMORY[0x1BCCFCF20](0, *(_QWORD *)(v0 + 72));
      goto LABEL_6;
    }
    if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v2 = *(id *)(*(_QWORD *)(v0 + 72) + 32);
LABEL_6:
      v3 = *(_QWORD *)(v0 + 48);
      swift_bridgeObjectRelease();
      v4 = objc_msgSend(v2, sel_doses);
      sub_1BCAFC2E0(0, &qword_1EDA144A0);
      v5 = sub_1BCB642D4();

      swift_bridgeObjectRetain();
      v6 = v2;
      v7 = sub_1BCB09980(v5, v3, v6);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
    }
    __break(1u);
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  if (qword_1EDA14510 != -1)
LABEL_16:
    swift_once();
  v9 = sub_1BCB63DDC();
  __swift_project_value_buffer(v9, (uint64_t)qword_1EDA14518);
  swift_bridgeObjectRetain_n();
  v10 = sub_1BCB63DD0();
  v11 = sub_1BCB644FC();
  if (os_log_type_enabled(v10, v11))
  {
    v18 = *(_QWORD *)(v0 + 32);
    v12 = *(_QWORD *)(v0 + 40);
    v13 = swift_slowAlloc();
    v14 = swift_slowAlloc();
    v19[0] = v14;
    *(_DWORD *)v13 = 136315394;
    v15 = sub_1BCB64B14();
    *(_QWORD *)(v0 + 16) = sub_1BCB010C8(v15, v16, v19);
    sub_1BCB64640();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 24) = sub_1BCB010C8(v18, v12, v19);
    sub_1BCB64640();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1BCAF3000, v10, v11, "[%s] Schedule item with identifier %s is not found", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BCCFD928](v14, -1, -1);
    MEMORY[0x1BCCFD928](v13, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v7 = MEMORY[0x1E0DEE9D8];
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

uint64_t sub_1BCB08910@<X0>(void **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;

  v9 = sub_1BCB63B3C();
  result = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  if (!a2)
  {
    v49 = v12;
    v27 = v14;
LABEL_16:
    v28 = objc_msgSend(a3, sel_identifier);
    v29 = sub_1BCB6413C();
    v47 = v30;
    v48 = v29;

    v31 = objc_msgSend(a3, sel_scheduledDateTime);
    sub_1BCB63B18();

    v32 = objc_msgSend(v14, sel_medicationIdentifier);
    v33 = sub_1BCB6413C();
    v35 = v34;

    v36 = objc_msgSend(v14, sel_dose);
    objc_msgSend(v36, sel_doubleValue);
    v38 = v37;

    v39 = objc_msgSend(v14, sel_isLastScheduledDose);
    type metadata accessor for ScheduleItem();
    v26 = swift_allocObject();
    v40 = v47;
    *(_QWORD *)(v26 + 16) = v48;
    *(_QWORD *)(v26 + 24) = v40;
    result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 32))(v26 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_date, v13, v9);
    v41 = (uint64_t *)(v26 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_medicationIdentifier);
    *v41 = v33;
    v41[1] = v35;
    *(_QWORD *)(v26 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_doseAmount) = v38;
    *(_BYTE *)(v26 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_isLastScheduledDose) = v39;
    goto LABEL_17;
  }
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
  {
    v43 = a3;
    v44 = v14;
    v45 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    v46 = v9;
    v48 = v4;
    v49 = v12;
    v47 = a4;
    v16 = v14;
    swift_bridgeObjectRetain();
    v17 = (uint64_t *)(a2 + 40);
    while (1)
    {
      v18 = *(v17 - 1);
      v19 = *v17;
      swift_bridgeObjectRetain();
      v20 = objc_msgSend(v16, sel_medicationIdentifier);
      v21 = sub_1BCB6413C();
      v23 = v22;

      if (v21 == v18 && v23 == v19)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_15;
      }
      v25 = sub_1BCB649F4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v25 & 1) != 0)
        break;
      v17 += 2;
      if (!--v15)
      {

        result = swift_bridgeObjectRelease();
        v26 = 0;
        a4 = v47;
        goto LABEL_17;
      }
    }
    swift_bridgeObjectRelease();
LABEL_15:
    a4 = v47;
    v13 = v45;
    v9 = v46;
    a3 = v43;
    v14 = v44;
    goto LABEL_16;
  }
  v26 = 0;
LABEL_17:
  *a4 = v26;
  return result;
}

uint64_t MedicationScheduleItemDataSource.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t MedicationScheduleItemDataSource.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

void sub_1BCB08C48(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  sub_1BCB06664();
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v41 = (uint64_t)&v35 - v10;
  sub_1BCB066B8(0, &qword_1EDA142D0, (unint64_t *)&unk_1EDA14490, 0x1E0D2C4A8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CAEB88]);
  v12 = v11;
  v43 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v35 - v16;
  sub_1BCB066B8(0, &qword_1EDA14438, (unint64_t *)&unk_1EDA14490, 0x1E0D2C4A8, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for HKMedicationScheduleItemQueryDescriptor);
  v19 = v18;
  v20 = *(_QWORD *)(a2 + *(int *)(v18 + 36));
  if (v20)
  {
    v40 = a1;
    v21 = *(_QWORD *)(v20 + 16);
    v22 = MEMORY[0x1E0DEE9D8];
    if (v21)
    {
      v36 = v18;
      v37 = v9;
      v38 = a3;
      v39 = a2;
      v44 = MEMORY[0x1E0DEE9D8];
      sub_1BCB64844();
      v42 = sub_1BCAFC2E0(0, &qword_1EDA14548);
      v23 = v43;
      v24 = v20 + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
      v25 = *(_QWORD *)(v43 + 72);
      v26 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
      do
      {
        v26(v17, v24, v12);
        v26(v15, (uint64_t)v17, v12);
        sub_1BCAFC2E0(0, (unint64_t *)&unk_1EDA14490);
        sub_1BCB64550();
        (*(void (**)(char *, uint64_t))(v23 + 8))(v17, v12);
        sub_1BCB64820();
        sub_1BCB64850();
        v23 = v43;
        sub_1BCB6485C();
        sub_1BCB6482C();
        v24 += v25;
        --v21;
      }
      while (v21);
      v22 = v44;
      a3 = v38;
      a2 = v39;
      v19 = v36;
      v9 = v37;
    }
    a1 = v40;
  }
  else
  {
    v22 = 0;
  }
  v27 = v41;
  sub_1BCB05320(a2, v41);
  sub_1BCB05320(a2 + *(int *)(v19 + 28), (uint64_t)v9);
  v28 = (uint64_t *)(a2 + *(int *)(v19 + 32));
  v29 = *v28;
  v30 = v28[1];
  v31 = (uint64_t)v9;
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = a3;
  *(_QWORD *)(v32 + 24) = a1;
  objc_allocWithZone(MEMORY[0x1E0D2C4B8]);
  swift_bridgeObjectRetain();
  v33 = a3;
  v34 = sub_1BCB326E8(v27, v31, v29, v30, v22, (uint64_t)sub_1BCB09BE8, v32);
  sub_1BCB645E0();
  objc_msgSend(v33, sel_executeQuery_, v34);

}

uint64_t sub_1BCB08F68(uint64_t a1)
{
  uint64_t v2;

  sub_1BCB066B8(0, &qword_1EDA14438, (unint64_t *)&unk_1EDA14490, 0x1E0D2C4A8, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for HKMedicationScheduleItemQueryDescriptor);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t (*sub_1BCB08FC4(void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1BCB090F0(v6, a2, a3);
  return sub_1BCB09018;
}

uint64_t (*sub_1BCB0901C(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1BCB09300(v6, a2, a3);
  return sub_1BCB09018;
}

uint64_t (*sub_1BCB09070(void (**a1)(id *), unint64_t a2, uint64_t a3))()
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1BCB09374(v6, a2, a3);
  return sub_1BCB09018;
}

void sub_1BCB090C4(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_1BCB090F0(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x1BCCFCF20](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_1BCB0915C;
  }
  __break(1u);
  return result;
}

void sub_1BCB0915C(id *a1)
{

}

uint64_t sub_1BCB09168(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_1BCB09BF0;
  v6[2] = a1;
  v7 = (_QWORD *)swift_task_alloc();
  v6[3] = v7;
  *v7 = v6;
  v7[1] = sub_1BCB0838C;
  return sub_1BCB07218(v4, v5);
}

uint64_t objectdestroyTm()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BCB09228(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_1BCB092B8;
  v6[2] = a1;
  v7 = (_QWORD *)swift_task_alloc();
  v6[3] = v7;
  *v7 = v6;
  v7[1] = sub_1BCB08470;
  return MedicationScheduleItemDataSource.hk_scheduleItems(for:)(v4, v5);
}

uint64_t sub_1BCB092B8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t (*sub_1BCB09300(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x1BCCFCF20](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return sub_1BCB0936C;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BCB0936C()
{
  return swift_release();
}

void (*sub_1BCB09374(void (*result)(id *), unint64_t a2, uint64_t a3))(id *)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x1BCCFCF20](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_1BCB09BF8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BCB093E0(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  BOOL v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  char v18;
  id v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  char *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  id v71;
  unint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;

  v71 = a3;
  v73 = a2;
  v4 = sub_1BCB63B3C();
  v64 = *(_QWORD *)(v4 - 8);
  v65 = v4;
  MEMORY[0x1E0C80A78](v4);
  v63 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_42;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v6)
  {
    v7 = 0;
    v8 = v73 & 0xFFFFFFFFFFFFFF8;
    v62 = v73 & 0xFFFFFFFFFFFFFF8;
    if (v73 < 0)
      v8 = v73;
    v60 = a1 + 32;
    v61 = v8;
    v72 = v73 & 0xC000000000000001;
    v68 = (unint64_t)v73 >> 62;
    v69 = a1 & 0xC000000000000001;
    v66 = v6;
    v67 = a1;
    while (1)
    {
      v10 = v69 ? (id)MEMORY[0x1BCCFCF20](v7, a1) : *(id *)(v60 + 8 * v7);
      v74 = v10;
      v11 = __OFADD__(v7, 1);
      v12 = v7 + 1;
      if (v11)
        break;
      if (!v68)
      {
        a1 = *(_QWORD *)(v62 + 16);
        v13 = v74;
        v14 = v71;
        swift_bridgeObjectRetain();
        v70 = v12;
        if (a1)
          goto LABEL_16;
        goto LABEL_35;
      }
      v15 = v74;
      v16 = v71;
      swift_bridgeObjectRetain();
      a1 = sub_1BCB648D4();
      v70 = v12;
      if (a1)
      {
LABEL_16:
        v17 = 4;
        do
        {
          if (v72)
            v19 = (id)MEMORY[0x1BCCFCF20](v17 - 4, v73);
          else
            v19 = *(id *)(v73 + 8 * v17);
          v20 = v19;
          v21 = v17 - 3;
          if (__OFADD__(v17 - 4, 1))
          {
            __break(1u);
            goto LABEL_41;
          }
          v22 = objc_msgSend(v74, sel_medicationIdentifier);
          v23 = sub_1BCB6413C();
          v25 = v24;

          v26 = objc_msgSend(v20, sel_medicationIdentifier);
          v27 = sub_1BCB6413C();
          v29 = v28;

          if (v23 == v27 && v25 == v29)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            v31 = sub_1BCB649F4();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v31 & 1) == 0)
            {

              goto LABEL_18;
            }
          }
          v32 = objc_msgSend(v71, sel_identifier);
          v33 = sub_1BCB6413C();
          v35 = v34;

          v36 = objc_msgSend(v20, sel_scheduleItemIdentifier);
          if (v36)
          {
            v37 = v36;
            v38 = sub_1BCB6413C();
            v40 = v39;

            if (v33 == v38 && v35 == v40)
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_6:
              swift_bridgeObjectRelease();
              v9 = v74;

              goto LABEL_7;
            }
            v18 = sub_1BCB649F4();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v18 & 1) != 0)
            {

              goto LABEL_6;
            }
          }
          else
          {

            swift_bridgeObjectRelease();
          }
LABEL_18:
          ++v17;
        }
        while (v21 != a1);
      }
LABEL_35:
      v41 = v71;

      swift_bridgeObjectRelease();
      v42 = v74;

      v43 = objc_msgSend(v41, sel_identifier);
      v44 = sub_1BCB6413C();
      v46 = v45;

      v47 = objc_msgSend(v41, sel_scheduledDateTime);
      v48 = v63;
      sub_1BCB63B18();

      v49 = objc_msgSend(v42, sel_medicationIdentifier);
      v50 = sub_1BCB6413C();
      v52 = v51;

      v53 = objc_msgSend(v42, sel_dose);
      objc_msgSend(v53, sel_doubleValue);
      v55 = v54;

      LOBYTE(v53) = objc_msgSend(v42, sel_isLastScheduledDose);
      type metadata accessor for ScheduleItem();
      v56 = swift_allocObject();
      *(_QWORD *)(v56 + 16) = v44;
      *(_QWORD *)(v56 + 24) = v46;
      (*(void (**)(uint64_t, char *, uint64_t))(v64 + 32))(v56 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_date, v48, v65);
      v57 = (uint64_t *)(v56 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_medicationIdentifier);
      *v57 = v50;
      v57[1] = v52;
      *(_QWORD *)(v56 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_doseAmount) = v55;
      *(_BYTE *)(v56 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_isLastScheduledDose) = (_BYTE)v53;

      MEMORY[0x1BCCFCA1C]();
      if (*(_QWORD *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1BCB64304();
      sub_1BCB64334();
      sub_1BCB642EC();
LABEL_7:
      a1 = v67;
      v7 = v70;
      if (v70 == v66)
      {
        swift_bridgeObjectRelease();
        return v75;
      }
    }
LABEL_41:
    __break(1u);
LABEL_42:
    swift_bridgeObjectRetain();
    v6 = sub_1BCB648D4();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1BCB09944(uint64_t a1)
{
  uint64_t v2;

  sub_1BCB06664();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BCB09980(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t i;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  v15 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_17;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; v5 = sub_1BCB648D4())
  {
    for (i = 4; ; ++i)
    {
      v7 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1BCCFCF20](i - 4, a1) : *(id *)(a1 + 8 * i);
      v8 = v7;
      v9 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v14 = v7;
      sub_1BCB08910(&v14, a2, a3, &v13);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return swift_bridgeObjectRelease();
      }

      if (v13)
      {
        MEMORY[0x1BCCFCA1C]();
        if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1BCB64304();
        sub_1BCB64334();
        sub_1BCB642EC();
      }
      if (v9 == v5)
      {
        swift_bridgeObjectRelease();
        return v15;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

uint64_t type metadata accessor for MedicationScheduleItemDataSource()
{
  return objc_opt_self();
}

uint64_t method lookup function for MedicationScheduleItemDataSource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MedicationScheduleItemDataSource.__allocating_init(healthStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

void sub_1BCB09B4C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_1BCB066B8(255, a3, &qword_1EDA144B0, 0x1E0CB6AD8, a4);
    v5 = sub_1BCB649DC();
    if (!v6)
      atomic_store(v5, a2);
  }
}

char *keypath_get_selector_startDate()
{
  return sel_startDate;
}

uint64_t sub_1BCB09BC4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1BCB09BE8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_1BCB3195C(a1, a2, a3, *(id *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

void sub_1BCB09BFC(uint64_t *a1@<X8>)
{
  void *v1;
  uint64_t v2;
  unint64_t p_weak_ivar_lyt;
  void *v4;
  id v6;
  unint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  id v23;
  unint64_t v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  void **v35;
  unint64_t v36;
  id v37;
  void *v38;
  id v39;
  unint64_t v40;
  void **v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  char v48;
  uint64_t v49;
  id v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  id v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  id v86;
  id v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;

  v4 = v1;
  v6 = objc_msgSend(v1, sel_routedDoseFormProducts);
  sub_1BCAFC2E0(0, (unint64_t *)&qword_1EF487748);
  v7 = sub_1BCB642D4();

  if (!(v7 >> 62))
  {
    if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  v14 = sub_1BCB648D4();
  swift_bridgeObjectRelease();
  if (!v14)
    goto LABEL_10;
LABEL_3:
  if ((v7 & 0xC000000000000001) != 0)
  {
LABEL_63:
    v8 = (id)MEMORY[0x1BCCFCF20](0, v7);
  }
  else
  {
    if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_66;
    }
    v8 = *(id *)(v7 + 32);
  }
  v9 = v8;
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v9, sel_firstConceptOfRelationshipType_, 982);

  if (v10)
  {
    v11 = objc_msgSend(v10, sel_localizedPreferredName);

    if (v11)
    {
      v12 = sub_1BCB6413C();
      v2 = v13;

      goto LABEL_12;
    }
  }
LABEL_11:
  v12 = 0;
  v2 = 0;
LABEL_12:
  v15 = objc_msgSend(v4, sel_specificProduct);
  v16 = objc_msgSend(v15, sel_firstAttributeForType_, 984);

  if (v16)
  {
    v17 = objc_msgSend(v16, sel_stringValue);

    v99 = sub_1BCB6413C();
    v105 = v18;

  }
  else
  {
    v99 = 0;
    v105 = 0;
  }
  v19 = objc_msgSend(v4, sel_tradeNameProduct);
  if (v19
    && (v20 = v19,
        v21 = objc_msgSend(v19, sel_localizedPreferredName),
        v20,
        v21))
  {
    v95 = sub_1BCB6413C();
    v102 = v22;

  }
  else
  {
    v95 = 0;
    v102 = 0;
  }
  p_weak_ivar_lyt = (unint64_t)&TestMedicationDetailProvider.weak_ivar_lyt;
  v23 = objc_msgSend(v4, sel_ingredientProducts);
  v24 = sub_1BCB642D4();

  if (!(v24 >> 62))
  {
    if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_21;
LABEL_27:
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  v29 = sub_1BCB648D4();
  swift_bridgeObjectRelease();
  if (!v29)
    goto LABEL_27;
LABEL_21:
  if ((v24 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v25 = *(id *)(v24 + 32);
      goto LABEL_24;
    }
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  v25 = (id)MEMORY[0x1BCCFCF20](0, v24);
LABEL_24:
  v26 = v25;
  swift_bridgeObjectRelease();
  v27 = objc_msgSend(v26, sel_localizedPreferredName);

  if (v27)
  {
    v93 = sub_1BCB6413C();
    v98 = v28;

    goto LABEL_29;
  }
LABEL_28:
  v93 = 0;
  v98 = 0;
LABEL_29:
  v104 = objc_msgSend(v4, sel_specificProduct);
  v100 = v2;
  v94 = v4;
  v96 = v12;
  v97 = a1;
  if ((objc_msgSend(v104, sel_meds_isClinicalProduct) & 1) == 0)
  {
    if (!objc_msgSend(v104, sel_meds_isSpecificProduct))
    {
LABEL_55:

LABEL_56:
      v48 = 0;
      v34 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v49 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (!v49)
        goto LABEL_72;
      goto LABEL_70;
    }
    v30 = objc_msgSend(v104, sel_firstConceptOfRelationshipType_, 798);

    v104 = v30;
    if (!v30)
      goto LABEL_56;
  }
  v31 = objc_msgSend(v104, sel_relationships);
  if (!v31)
    goto LABEL_55;
  v32 = v31;
  sub_1BCAFC2E0(0, &qword_1EF487908);
  p_weak_ivar_lyt = sub_1BCB642D4();

  if (!(p_weak_ivar_lyt >> 62))
  {
    v33 = *(_QWORD *)((p_weak_ivar_lyt & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v33)
    {
LABEL_35:
      v92 = 0;
      v7 = 0;
      v4 = (void *)(p_weak_ivar_lyt & 0xC000000000000001);
      v103 = p_weak_ivar_lyt & 0xFFFFFFFFFFFFFF8;
      v34 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v35 = &TestMedicationDetailProvider.weak_ivar_lyt;
      v101 = p_weak_ivar_lyt & 0xC000000000000001;
LABEL_36:
      v36 = v7;
      do
      {
        if (v4)
        {
          v37 = (id)MEMORY[0x1BCCFCF20](v36, p_weak_ivar_lyt);
        }
        else
        {
          if (v36 >= *(_QWORD *)(v103 + 16))
          {
            __break(1u);
            goto LABEL_63;
          }
          v37 = *(id *)(p_weak_ivar_lyt + 8 * v36 + 32);
        }
        v38 = v37;
        v7 = v36 + 1;
        if (__OFADD__(v36, 1))
        {
          __break(1u);
LABEL_61:

          swift_bridgeObjectRelease();
          v48 = 1;
          v12 = v96;
          a1 = v97;
          v2 = v100;
          goto LABEL_69;
        }
        if (objc_msgSend(v37, (SEL)v35[503]) == (id)809)
        {
          v39 = objc_msgSend(v38, sel_destination);
          a1 = (uint64_t *)objc_msgSend(v39, sel_meds_englishUSName);

          if (a1)
          {
            v40 = p_weak_ivar_lyt;
            v41 = v35;
            v42 = sub_1BCB6413C();
            v44 = v43;

            v45 = HIBYTE(v44) & 0xF;
            if ((v44 & 0x2000000000000000) == 0)
              v45 = v42 & 0xFFFFFFFFFFFFLL;
            if (v45)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v34 = sub_1BCAF6A40(0, v34[2] + 1, 1, v34);
              a1 = (uint64_t *)v34[2];
              v46 = v34[3];
              if ((unint64_t)a1 >= v46 >> 1)
                v34 = sub_1BCAF6A40((_QWORD *)(v46 > 1), (int64_t)a1 + 1, 1, v34);
              v34[2] = (char *)a1 + 1;
              v47 = &v34[2 * (_QWORD)a1];
              v47[4] = v42;
              v47[5] = v44;

              v92 = 1;
              v35 = v41;
              p_weak_ivar_lyt = v40;
              v4 = (void *)v101;
              if (v7 == v33)
                goto LABEL_61;
              goto LABEL_36;
            }
            swift_bridgeObjectRelease();
            v35 = v41;
            p_weak_ivar_lyt = v40;
            v4 = (void *)v101;
          }
        }

        ++v36;
      }
      while (v7 != v33);

      swift_bridgeObjectRelease();
      v12 = v96;
      a1 = v97;
      v2 = v100;
      p_weak_ivar_lyt = 0x1E755C000;
      v48 = v92;
      v49 = v34[2];
      if (v49)
        goto LABEL_70;
LABEL_72:
      swift_bridgeObjectRelease();
      v50 = objc_msgSend(v94, *(SEL *)(p_weak_ivar_lyt + 3976));
      v51 = sub_1BCB642D4();

      if (v51 >> 62)
      {
        swift_bridgeObjectRetain();
        v52 = sub_1BCB648D4();
        swift_bridgeObjectRelease();
        if (v52)
          goto LABEL_74;
      }
      else
      {
        v52 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v52)
        {
LABEL_74:
          if (v52 < 1)
          {
            __break(1u);
LABEL_142:
            p_weak_ivar_lyt = (unint64_t)sub_1BCAF6A40(0, *(_QWORD *)(p_weak_ivar_lyt + 16) + 1, 1, (_QWORD *)p_weak_ivar_lyt);
LABEL_101:
            v69 = *(_QWORD *)(p_weak_ivar_lyt + 16);
            v68 = *(_QWORD *)(p_weak_ivar_lyt + 24);
            if (v69 >= v68 >> 1)
              p_weak_ivar_lyt = (unint64_t)sub_1BCAF6A40((_QWORD *)(v68 > 1), v69 + 1, 1, (_QWORD *)p_weak_ivar_lyt);
            *(_QWORD *)(p_weak_ivar_lyt + 16) = v69 + 1;
            v70 = p_weak_ivar_lyt + 16 * v69;
            *(_QWORD *)(v70 + 32) = v99;
            *(_QWORD *)(v70 + 40) = v105;
            goto LABEL_104;
          }
          v53 = 0;
          v34 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          do
          {
            if ((v51 & 0xC000000000000001) != 0)
              v54 = (id)MEMORY[0x1BCCFCF20](v53, v51);
            else
              v54 = *(id *)(v51 + 8 * v53 + 32);
            v55 = v54;
            v56 = objc_msgSend(v54, sel_localizedPreferredName);
            if (v56)
            {
              v57 = v56;
              v58 = sub_1BCB6413C();
              v60 = v59;

              v61 = HIBYTE(v60) & 0xF;
              if ((v60 & 0x2000000000000000) == 0)
                v61 = v58 & 0xFFFFFFFFFFFFLL;
              if (v61)
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v34 = sub_1BCAF6A40(0, v34[2] + 1, 1, v34);
                v63 = v34[2];
                v62 = v34[3];
                if (v63 >= v62 >> 1)
                  v34 = sub_1BCAF6A40((_QWORD *)(v62 > 1), v63 + 1, 1, v34);
                v34[2] = v63 + 1;
                v64 = &v34[2 * v63];
                v64[4] = v58;
                v64[5] = v60;
              }
              else
              {
                swift_bridgeObjectRelease();
              }
            }
            ++v53;

          }
          while (v52 != v53);
          goto LABEL_92;
        }
      }
      v34 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_92:
      swift_bridgeObjectRelease();
      v48 = 0;
      v12 = v96;
      a1 = v97;
      v2 = v100;
      goto LABEL_93;
    }
    goto LABEL_68;
  }
LABEL_67:
  swift_bridgeObjectRetain();
  v33 = sub_1BCB648D4();
  swift_bridgeObjectRelease();
  if (v33)
    goto LABEL_35;
LABEL_68:

  swift_bridgeObjectRelease();
  v48 = 0;
  v34 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v12 = v96;
  a1 = v97;
LABEL_69:
  p_weak_ivar_lyt = (unint64_t)&TestMedicationDetailProvider.weak_ivar_lyt;
  v49 = v34[2];
  if (!v49)
    goto LABEL_72;
LABEL_70:
  if (v49 == 1 && v105)
    goto LABEL_72;
LABEL_93:
  if (!v2)
  {
    p_weak_ivar_lyt = MEMORY[0x1E0DEE9D8];
    if (!v105)
      goto LABEL_104;
LABEL_99:
    if ((v48 & 1) != 0)
      goto LABEL_104;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_101;
    goto LABEL_142;
  }
  swift_bridgeObjectRetain();
  p_weak_ivar_lyt = (unint64_t)sub_1BCAF6A40(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v66 = *(_QWORD *)(p_weak_ivar_lyt + 16);
  v65 = *(_QWORD *)(p_weak_ivar_lyt + 24);
  if (v66 >= v65 >> 1)
    p_weak_ivar_lyt = (unint64_t)sub_1BCAF6A40((_QWORD *)(v65 > 1), v66 + 1, 1, (_QWORD *)p_weak_ivar_lyt);
  *(_QWORD *)(p_weak_ivar_lyt + 16) = v66 + 1;
  v67 = p_weak_ivar_lyt + 16 * v66;
  *(_QWORD *)(v67 + 32) = v12;
  *(_QWORD *)(v67 + 40) = v2;
  if (v105)
    goto LABEL_99;
LABEL_104:
  v71 = v34[2];
  if (!v71)
    goto LABEL_116;
  if (v71 != 1)
  {
    v106 = v34;
    swift_bridgeObjectRetain_n();
    sub_1BCB25588((uint64_t *)&v106);
    swift_bridgeObjectRelease();
    sub_1BCB0AF10();
    sub_1BCB0AF80();
    v74 = sub_1BCB640F4();
    v73 = v75;
    swift_release();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      p_weak_ivar_lyt = (unint64_t)sub_1BCAF6A40(0, *(_QWORD *)(p_weak_ivar_lyt + 16) + 1, 1, (_QWORD *)p_weak_ivar_lyt);
    v77 = *(_QWORD *)(p_weak_ivar_lyt + 16);
    v76 = *(_QWORD *)(p_weak_ivar_lyt + 24);
    if (v77 >= v76 >> 1)
      p_weak_ivar_lyt = (unint64_t)sub_1BCAF6A40((_QWORD *)(v76 > 1), v77 + 1, 1, (_QWORD *)p_weak_ivar_lyt);
    *(_QWORD *)(p_weak_ivar_lyt + 16) = v77 + 1;
    v78 = p_weak_ivar_lyt + 16 * v77;
    *(_QWORD *)(v78 + 32) = v74;
LABEL_115:
    *(_QWORD *)(v78 + 40) = v73;
    v2 = v100;
LABEL_116:
    if (v102)
      goto LABEL_117;
    goto LABEL_122;
  }
  v72 = v34[4];
  v73 = v34[5];
  if (v102)
  {
    v106 = (_QWORD *)v34[4];
    v107 = v73;
    sub_1BCAF6098();
    swift_bridgeObjectRetain();
    if ((sub_1BCB64688() & 1) == 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        p_weak_ivar_lyt = (unint64_t)sub_1BCAF6A40(0, *(_QWORD *)(p_weak_ivar_lyt + 16) + 1, 1, (_QWORD *)p_weak_ivar_lyt);
      v82 = *(_QWORD *)(p_weak_ivar_lyt + 16);
      v81 = *(_QWORD *)(p_weak_ivar_lyt + 24);
      if (v82 >= v81 >> 1)
        p_weak_ivar_lyt = (unint64_t)sub_1BCAF6A40((_QWORD *)(v81 > 1), v82 + 1, 1, (_QWORD *)p_weak_ivar_lyt);
      *(_QWORD *)(p_weak_ivar_lyt + 16) = v82 + 1;
      v83 = p_weak_ivar_lyt + 16 * v82;
      *(_QWORD *)(v83 + 32) = v72;
      *(_QWORD *)(v83 + 40) = v73;
      swift_bridgeObjectRelease();
      v2 = v100;
      goto LABEL_118;
    }
    v2 = v100;
    if (!v98)
    {
      swift_bridgeObjectRelease();
LABEL_117:
      swift_bridgeObjectRelease();
LABEL_118:
      v79 = v95;
      v80 = v102;
      goto LABEL_140;
    }
    goto LABEL_120;
  }
  swift_bridgeObjectRetain();
  if (v98)
  {
LABEL_120:
    v106 = (_QWORD *)v72;
    v107 = v73;
    sub_1BCAF6098();
    if ((sub_1BCB64688() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if (v102)
        goto LABEL_117;
LABEL_122:
      v80 = v98;
      if (v98)
      {
        v79 = v93;
        goto LABEL_140;
      }
      goto LABEL_135;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      p_weak_ivar_lyt = (unint64_t)sub_1BCAF6A40(0, *(_QWORD *)(p_weak_ivar_lyt + 16) + 1, 1, (_QWORD *)p_weak_ivar_lyt);
    v85 = *(_QWORD *)(p_weak_ivar_lyt + 16);
    v84 = *(_QWORD *)(p_weak_ivar_lyt + 24);
    if (v85 >= v84 >> 1)
      p_weak_ivar_lyt = (unint64_t)sub_1BCAF6A40((_QWORD *)(v84 > 1), v85 + 1, 1, (_QWORD *)p_weak_ivar_lyt);
    *(_QWORD *)(p_weak_ivar_lyt + 16) = v85 + 1;
    v78 = p_weak_ivar_lyt + 16 * v85;
    *(_QWORD *)(v78 + 32) = v72;
    goto LABEL_115;
  }
  swift_bridgeObjectRelease();
LABEL_135:
  v86 = objc_msgSend(v94, sel_specificProduct);
  v87 = objc_msgSend(v86, sel_preferredName);

  if (v87)
  {
    v79 = sub_1BCB6413C();
    v80 = v88;

  }
  else
  {
    if (qword_1EDA14148 != -1)
      swift_once();
    v89 = (id)qword_1EDA14130;
    swift_bridgeObjectRetain();
    v79 = sub_1BCB63A34();
    v91 = v90;
    swift_bridgeObjectRelease();

    v80 = v91;
    v2 = v100;
  }
LABEL_140:
  *a1 = v79;
  a1[1] = v80;
  a1[2] = p_weak_ivar_lyt;
  a1[3] = v12;
  a1[4] = v2;
  a1[5] = v99;
  a1[6] = v105;
  a1[7] = (uint64_t)v34;
}

uint64_t HKMedicationSearchResult.doseForm.getter()
{
  uint64_t v0;
  uint64_t v2[4];

  sub_1BCB09BFC(v2);
  v0 = v2[3];
  swift_bridgeObjectRetain();
  sub_1BCB0A954((uint64_t)v2);
  return v0;
}

uint64_t sub_1BCB0A954(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t HKMedicationSearchResult.ingredients.getter()
{
  uint64_t v0;
  uint64_t v2[8];

  sub_1BCB09BFC(v2);
  v0 = v2[7];
  swift_bridgeObjectRetain();
  sub_1BCB0A954((uint64_t)v2);
  return v0;
}

uint64_t HKMedicationSearchResult.strength.getter()
{
  uint64_t v0;
  uint64_t v2[6];

  sub_1BCB09BFC(v2);
  v0 = v2[5];
  swift_bridgeObjectRetain();
  sub_1BCB0A954((uint64_t)v2);
  return v0;
}

uint64_t HKMedicationSearchResult.primaryName.getter()
{
  uint64_t v0;
  uint64_t v2;

  sub_1BCB09BFC(&v2);
  v0 = v2;
  swift_bridgeObjectRetain();
  sub_1BCB0A954((uint64_t)&v2);
  return v0;
}

uint64_t HKMedicationSearchResult.secondaryName.getter()
{
  return sub_1BCB0AE44();
}

unint64_t sub_1BCB0AA88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDA14188;
  if (!qword_1EDA14188)
  {
    sub_1BCB0ADA0(255, (unint64_t *)&qword_1EDA14180, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&qword_1EDA14188);
  }
  return result;
}

uint64_t sub_1BCB0AAE0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t HKMedicationSearchResult.commaSeparatedIngredients.getter()
{
  uint64_t v0;
  uint64_t v2[8];
  uint64_t v3;

  sub_1BCB09BFC(v2);
  v3 = v2[7];
  swift_bridgeObjectRetain();
  sub_1BCB0A954((uint64_t)v2);
  sub_1BCB0ADA0(0, (unint64_t *)&qword_1EDA14180, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
  sub_1BCB0AA88();
  v0 = sub_1BCB640F4();
  sub_1BCB0AAE0((uint64_t)&v3);
  return v0;
}

uint64_t HKMedicationSearchResult.commaSeparatedStrengthAndIngredients.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3[7];
  uint64_t v4;
  uint64_t v5[5];
  uint64_t v6;
  uint64_t v7[8];
  uint64_t v8;
  _BYTE v9[16];
  uint64_t v10;
  _QWORD v11[2];

  sub_1BCB09BFC(v3);
  v0 = v4;
  v10 = v4;
  swift_bridgeObjectRetain();
  sub_1BCB0A954((uint64_t)v3);
  v1 = *(_QWORD *)(v0 + 16);
  sub_1BCB0AAE0((uint64_t)&v10);
  sub_1BCB09BFC(v5);
  sub_1BCB0AD4C((uint64_t)&v6, (uint64_t)v9);
  sub_1BCB0ADE8((uint64_t)v9);
  sub_1BCB0A954((uint64_t)v5);
  sub_1BCB0AD4C((uint64_t)v9, (uint64_t)v11);
  if (v11[1])
  {
    sub_1BCB641F0();
    sub_1BCB0AE10((uint64_t)v9);
    if (v1)
    {
      sub_1BCB641F0();
LABEL_5:
      sub_1BCB09BFC(v7);
      v8 = v7[7];
      swift_bridgeObjectRetain();
      sub_1BCB0A954((uint64_t)v7);
      sub_1BCB0ADA0(0, (unint64_t *)&qword_1EDA14180, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
      sub_1BCB0AA88();
      sub_1BCB640F4();
      sub_1BCB0AAE0((uint64_t)&v8);
      sub_1BCB641F0();
      swift_bridgeObjectRelease();
    }
  }
  else if (v1)
  {
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1BCB0AD4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BCB0ADA0(0, (unint64_t *)&qword_1EDA131B0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1BCB0ADA0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x1E0DEA968]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_1BCB0ADE8(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1BCB0AE10(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t HKMedicationSearchResult.secondaryNameMultipleLines.getter()
{
  return sub_1BCB0AE44();
}

uint64_t sub_1BCB0AE44()
{
  uint64_t v0;
  uint64_t v2[2];
  uint64_t v3;
  uint64_t v4;

  sub_1BCB09BFC(v2);
  v4 = v3;
  if (*(_QWORD *)(v3 + 16))
  {
    sub_1BCB0ADA0(0, (unint64_t *)&qword_1EDA14180, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
    sub_1BCB0AA88();
    swift_bridgeObjectRetain();
    v0 = sub_1BCB640F4();
    sub_1BCB0A954((uint64_t)v2);
    sub_1BCB0AAE0((uint64_t)&v4);
  }
  else
  {
    sub_1BCB0A954((uint64_t)v2);
    return 0;
  }
  return v0;
}

void sub_1BCB0AF10()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF4878F8)
  {
    sub_1BCB0ADA0(255, (unint64_t *)&qword_1EDA14180, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
    sub_1BCB0AA88();
    v0 = sub_1BCB648C8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF4878F8);
  }
}

unint64_t sub_1BCB0AF80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF487900;
  if (!qword_1EF487900)
  {
    sub_1BCB0AF10();
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0DECCF0], v1);
    atomic_store(result, (unint64_t *)&qword_1EF487900);
  }
  return result;
}

uint64_t sub_1BCB0AFC8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
    return sub_1BCB64250();
  else
    return 0;
}

Swift::String __swiftcall LoggingUnitDisplayable.loggingQuantityString(for:)(NSNumber_optional a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::String result;
  uint64_t v18;

  v2 = v1;
  v3 = *(_QWORD *)&a1.is_nil;
  if (a1.value.super.super.isa)
  {
    v4 = a1.value.super.super.isa;
    -[objc_class doubleValue](v4, sel_doubleValue);
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v3, v2);
    v7 = v6;

    v8 = v5;
    v9 = v7;
  }
  else
  {
    if (qword_1EDA14510 != -1)
      swift_once();
    v10 = sub_1BCB63DDC();
    __swift_project_value_buffer(v10, (uint64_t)qword_1EDA14518);
    v11 = sub_1BCB63DD0();
    v12 = sub_1BCB644FC();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      v18 = v14;
      *(_DWORD *)v13 = 136315138;
      v15 = sub_1BCB64B14();
      sub_1BCB010C8(v15, v16, &v18);
      sub_1BCB64640();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1BCAF3000, v11, v12, "[%s] Unable to generate doseQuantityText with nil amount, continuing with 0.", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCFD928](v14, -1, -1);
      MEMORY[0x1BCCFD928](v13, -1, -1);
    }

    v8 = (*(uint64_t (**)(uint64_t, uint64_t, double))(v2 + 24))(v3, v2, 0.0);
  }
  result._object = v9;
  result._countAndFlagsBits = v8;
  return result;
}

Swift::String __swiftcall LoggingUnitDisplayable.loggingQuantityString(for:)(Swift::Double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(void);
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  Swift::String result;
  uint64_t v33;
  char *v34;
  uint64_t v35;

  v2 = v1;
  v4 = sub_1BCB63B90();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCAFC448(0, &qword_1EDA13898, v8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v33 - v10;
  v12 = *(void (**)(void))(v5 + 56);
  v34 = v11;
  v12();
  if (qword_1EDA14148 != -1)
    swift_once();
  v13 = (void *)qword_1EDA14130;
  v33 = *(_QWORD *)algn_1EDA14138;
  sub_1BCAFC448(0, (unint64_t *)&qword_1EDA13A08, (uint64_t (*)(uint64_t))sub_1BCB0C1E4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1BCB66000;
  v15 = v13;
  swift_bridgeObjectRetain();
  sub_1BCB63B84();
  v16 = v35;
  v17 = static LoggingUnitDisplayable.formatLoggingAmountAsString(_:shouldIncludeGroupingSeparator:localeOverride:)(*(uint64_t *)&a1, 0, 1, (uint64_t)v7, v35, v2);
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v20 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v14 + 56) = MEMORY[0x1E0DEA968];
  v21 = sub_1BCAFC3C8();
  *(_QWORD *)(v14 + 64) = v21;
  *(_QWORD *)(v14 + 32) = v17;
  *(_QWORD *)(v14 + 40) = v19;
  v22 = (*(uint64_t (**)(uint64_t, Swift::Double))(*(_QWORD *)(v2 + 8) + 8))(v16, a1);
  *(_QWORD *)(v14 + 96) = v20;
  *(_QWORD *)(v14 + 104) = v21;
  *(_QWORD *)(v14 + 72) = v22;
  *(_QWORD *)(v14 + 80) = v23;
  v24 = sub_1BCB63A34();
  v26 = v25;
  if (*(_QWORD *)(v14 + 16))
  {
    v27 = (uint64_t)v34;
    v24 = sub_1BCB64160();
    v29 = v28;
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26 = v29;
  }
  else
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    v27 = (uint64_t)v34;
  }
  sub_1BCB0C238(v27);
  v30 = v24;
  v31 = v26;
  result._object = v31;
  result._countAndFlagsBits = v30;
  return result;
}

id sub_1BCB0B4A0(char a1)
{
  return static LoggingUnitDisplayable.formatter(usesGroupingSeparator:localeOverride:)(a1);
}

id static LoggingUnitDisplayable.formatter(usesGroupingSeparator:localeOverride:)(char a1)
{
  id v2;
  void *v3;

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37F0]), sel_init);
  objc_msgSend(v2, sel_setNumberStyle_, 1);
  objc_msgSend(v2, sel_setMaximumFractionDigits_, 2);
  objc_msgSend(v2, sel_setMaximumIntegerDigits_, 5);
  objc_msgSend(v2, sel_setUsesGroupingSeparator_, a1 & 1);
  v3 = (void *)sub_1BCB63B78();
  objc_msgSend(v2, sel_setLocale_, v3);

  return v2;
}

uint64_t sub_1BCB0B568(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static LoggingUnitDisplayable.formatLoggingAmountAsString(_:shouldIncludeGroupingSeparator:localeOverride:)(a1, a2 & 1, a3, a4, a5, a6);
}

uint64_t static LoggingUnitDisplayable.formatLoggingAmountAsString(_:shouldIncludeGroupingSeparator:localeOverride:)(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;

  if ((a2 & 1) != 0
    || (v7 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(a6 + 32))(a3 & 1, a4, a5, a6),
        v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, *(double *)&a1),
        v9 = objc_msgSend(v7, sel_stringFromNumber_, v8),
        v7,
        v8,
        !v9))
  {
    if (qword_1EDA14510 != -1)
      swift_once();
    v11 = sub_1BCB63DDC();
    __swift_project_value_buffer(v11, (uint64_t)qword_1EDA14518);
    v12 = sub_1BCB63DD0();
    v13 = sub_1BCB644FC();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc();
      v15 = swift_slowAlloc();
      v21 = v15;
      *(_DWORD *)v14 = 136315394;
      v16 = sub_1BCB64B14();
      sub_1BCB010C8(v16, v17, &v21);
      sub_1BCB64640();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2080;
      sub_1BCB0C28C(0, &qword_1EF487510);
      v18 = sub_1BCB64190();
      sub_1BCB010C8(v18, v19, &v21);
      sub_1BCB64640();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1BCAF3000, v12, v13, "[%s] Unable to format double as dose string = %s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BCCFD928](v15, -1, -1);
      MEMORY[0x1BCCFD928](v14, -1, -1);
    }

    return 48;
  }
  else
  {
    v10 = sub_1BCB6413C();

  }
  return v10;
}

double sub_1BCB0B804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static LoggingUnitDisplayable.formatLoggingStringAsDouble(_:localeOverride:)(a1, a2, a3, a4, a5);
}

double static LoggingUnitDisplayable.formatLoggingStringAsDouble(_:localeOverride:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  id v22;
  void *v23;
  id v24;
  double v25;
  double v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = sub_1BCB63B90();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v13 = static LoggingUnitDisplayable.formatter(usesGroupingSeparator:localeOverride:)(1);
    v14 = a1;
    v15 = a4;
    v16 = (void *)sub_1BCB6410C();
    v17 = objc_msgSend(v13, sel_numberFromString_, v16);

    v18 = v15;
    a1 = v14;
    if (v17)
    {
      objc_msgSend(v17, sel_doubleValue);
      v20 = v19;
      sub_1BCB63B84();
      static LoggingUnitDisplayable.formatLoggingAmountAsString(_:shouldIncludeGroupingSeparator:localeOverride:)(v20, 0, 1, (uint64_t)v12, v18, a5);
      v21 = *(void (**)(char *, uint64_t))(v10 + 8);
      v21(v12, v9);
      sub_1BCB63B84();
      v22 = static LoggingUnitDisplayable.formatter(usesGroupingSeparator:localeOverride:)(1);
      v21(v12, v9);
      v23 = (void *)sub_1BCB6410C();
      swift_bridgeObjectRelease();
      v24 = objc_msgSend(v22, sel_numberFromString_, v23);

      if (v24)
      {
        objc_msgSend(v24, sel_doubleValue);
        v26 = v25;

        return v26;
      }

      a1 = v14;
    }
  }
  if (qword_1EDA14510 != -1)
    swift_once();
  v27 = sub_1BCB63DDC();
  __swift_project_value_buffer(v27, (uint64_t)qword_1EDA14518);
  swift_bridgeObjectRetain_n();
  v28 = sub_1BCB63DD0();
  v29 = sub_1BCB644FC();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = swift_slowAlloc();
    v31 = swift_slowAlloc();
    v40 = v31;
    *(_DWORD *)v30 = 136315394;
    v32 = sub_1BCB64B14();
    v38 = sub_1BCB010C8(v32, v33, &v40);
    sub_1BCB64640();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2080;
    v38 = a1;
    v39 = a2;
    sub_1BCB0C28C(0, (unint64_t *)&qword_1EDA131B0);
    swift_bridgeObjectRetain();
    v34 = sub_1BCB64190();
    v38 = sub_1BCB010C8(v34, v35, &v40);
    sub_1BCB64640();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BCAF3000, v28, v29, "[%s] Unable to format dose string as double = %s", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BCCFD928](v31, -1, -1);
    MEMORY[0x1BCCFD928](v30, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return 0.0;
}

BOOL static LoggingUnitDisplayable.userEnteredLoggingAmountIsValid(_:localeOverride:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void (*v30)(char *, uint64_t);
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;

  v10 = sub_1BCB639A4();
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v63 - v15;
  v17 = MEMORY[0x1E0C80A78](v14);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v63 - v20;
  v22 = HIBYTE(a2) & 0xF;
  v63 = a1;
  v64 = a2;
  if ((a2 & 0x2000000000000000) == 0)
    v22 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v22)
    return 1;
  v23 = v19;
  v24 = v18;
  v25 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(a5 + 32))(0, a3, a4, a5);
  v26 = objc_msgSend(v25, sel_decimalSeparator);

  if (!v26)
  {
    if (qword_1EDA14510 != -1)
      swift_once();
    v55 = sub_1BCB63DDC();
    __swift_project_value_buffer(v55, (uint64_t)qword_1EDA14518);
    v56 = sub_1BCB63DD0();
    v57 = sub_1BCB644FC();
    if (!os_log_type_enabled(v56, v57))
      goto LABEL_20;
    v58 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v58 = 0;
    v59 = "[Medications] unable to verify logging amount because separator string is invalid.";
    goto LABEL_19;
  }
  v27 = sub_1BCB6413C();
  v29 = v28;

  sub_1BCB63974();
  sub_1BCB63980();
  sub_1BCB63974();
  sub_1BCB63998();
  v30 = *(void (**)(char *, uint64_t))(v23 + 8);
  v30(v13, v10);
  v30(v16, v10);
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v13, v21, v10);
  sub_1BCB0C2D0(&qword_1EF487910, MEMORY[0x1E0CAE4D0]);
  sub_1BCB646AC();
  sub_1BCB0C2D0((unint64_t *)&unk_1EF487918, MEMORY[0x1E0CAE4C8]);
  v31 = sub_1BCB64100();
  v30(v16, v10);
  v30(v24, v10);
  v30(v21, v10);
  if ((v31 & 1) == 0)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    return 0;
  }
  v32 = sub_1BCB0AFC8(v27, v29);
  v34 = v33;
  swift_bridgeObjectRelease();
  if (!v34)
  {
    if (qword_1EDA14510 != -1)
      swift_once();
    v60 = sub_1BCB63DDC();
    __swift_project_value_buffer(v60, (uint64_t)qword_1EDA14518);
    v56 = sub_1BCB63DD0();
    v57 = sub_1BCB644FC();
    if (!os_log_type_enabled(v56, v57))
      goto LABEL_20;
    v58 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v58 = 0;
    v59 = "[Medications] unable to verify logging amount because separator char is invalid.";
LABEL_19:
    _os_log_impl(&dword_1BCAF3000, v56, v57, v59, v58, 2u);
    MEMORY[0x1BCCFD928](v58, -1, -1);
LABEL_20:

    return 0;
  }
  v36 = v63;
  v35 = v64;
  v37 = sub_1BCB0C0AC(v32, v34, v63, v64);
  v39 = v38;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((v39 & 1) == 0)
  {
    v40 = sub_1BCB64268();
    v42 = v41;
    v44 = v43;
    v46 = v45;
    swift_bridgeObjectRelease();
    MEMORY[0x1BCCFC914](v40, v42, v44, v46);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v47 = sub_1BCB0C198(v37, v36, v35);
    v49 = v48;
    v51 = v50;
    v53 = v52;
    swift_bridgeObjectRelease();
    MEMORY[0x1BCCFC914](v47, v49, v51, v53);
    swift_bridgeObjectRelease();
  }
  v61 = sub_1BCB641D8();
  swift_bridgeObjectRelease();
  if (v61 >= 6)
    goto LABEL_22;
  v62 = sub_1BCB641D8();
  swift_bridgeObjectRelease();
  return v62 < 4;
}

unint64_t sub_1BCB0C0AC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;

  v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v4 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return 0;
  v7 = 4 * v4;
  v8 = 15;
  while (sub_1BCB64250() != a1 || v9 != a2)
  {
    v10 = sub_1BCB649F4();
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
      return v8;
    v8 = sub_1BCB641E4();
    if (v7 == v8 >> 14)
      return 0;
  }
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t sub_1BCB0C198(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v3 = a2 & 0xFFFFFFFFFFFFLL;
  if (4 * v3 >= result >> 14)
    return sub_1BCB64268();
  __break(1u);
  return result;
}

unint64_t sub_1BCB0C1E4()
{
  unint64_t result;

  result = qword_1EDA13A10;
  if (!qword_1EDA13A10)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EDA13A10);
  }
  return result;
}

uint64_t sub_1BCB0C238(uint64_t a1)
{
  uint64_t v2;

  sub_1BCAFC448(0, &qword_1EDA13898, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1BCB0C28C(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_1BCB64628();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t sub_1BCB0C2D0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1BCB639A4();
    result = MEMORY[0x1BCCFD874](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t dispatch thunk of MedicationLoggingUnitProviding.localizedResolvedLoggingUnit(for:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of LoggingUnitDisplayable.loggingQuantityString(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of LoggingUnitDisplayable.loggingQuantityString(for:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static LoggingUnitDisplayable.formatter(usesGroupingSeparator:localeOverride:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of static LoggingUnitDisplayable.formatLoggingAmountAsString(_:shouldIncludeGroupingSeparator:localeOverride:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a6 + 40))(a1, a2 & 1);
}

uint64_t dispatch thunk of static LoggingUnitDisplayable.formatLoggingStringAsDouble(_:localeOverride:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of static LoggingUnitDisplayable.userEnteredLoggingAmountIsValid(_:localeOverride:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

_QWORD *MedicationDataSource.__allocating_init(healthStore:)(void *a1)
{
  _QWORD *v2;
  id v3;

  v2 = (_QWORD *)swift_allocObject();
  swift_defaultActor_initialize();
  v2[14] = MEMORY[0x1E0DEE9E0];
  v2[15] = a1;
  sub_1BCB63DB8();
  v3 = a1;
  v2[16] = sub_1BCB63DAC();
  return v2;
}

_QWORD *MedicationDataSource.init(healthStore:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  id v4;

  v2 = v1;
  swift_defaultActor_initialize();
  v2[14] = MEMORY[0x1E0DEE9E0];
  v2[15] = a1;
  sub_1BCB63DB8();
  v4 = a1;
  v2[16] = sub_1BCB63DAC();
  return v2;
}

uint64_t sub_1BCB0C410(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  sub_1BCB066B8(0, &qword_1EDA13C78, &qword_1EDA14538, 0x1E0CB6CE8, MEMORY[0x1E0D2BF68]);
  v3[14] = v4;
  v3[15] = *(_QWORD *)(v4 - 8);
  v3[16] = swift_task_alloc();
  sub_1BCB066B8(0, &qword_1EDA13C70, &qword_1EDA14538, 0x1E0CB6CE8, MEMORY[0x1E0D2BF58]);
  v3[17] = v5;
  v3[18] = *(_QWORD *)(v5 - 8);
  v3[19] = swift_task_alloc();
  sub_1BCB066B8(0, &qword_1EDA13C80, &qword_1EDA14538, 0x1E0CB6CE8, MEMORY[0x1E0D2BF80]);
  v3[20] = v6;
  v3[21] = *(_QWORD *)(v6 - 8);
  v3[22] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BCB0C524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  void *v7;
  id v8;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 104);
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 112);
  if (*(_QWORD *)(v2 + 16))
  {
    v4 = *(_QWORD *)(v0 + 88);
    v3 = *(_QWORD *)(v0 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v5 = sub_1BCB0E7B0(v4, v3);
    if ((v6 & 1) != 0)
    {
      v7 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v5);
      v8 = v7;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void *))(v0 + 8))(v7);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v10 = *(_QWORD *)(v0 + 128);
  v26 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 112);
  v12 = (void *)objc_opt_self();
  sub_1BCAFC2E0(0, (unint64_t *)&qword_1EDA144A8);
  v13 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__typeIdentifier);
  v14 = objc_msgSend(v12, sel_predicateForUserDomainConceptsWithTypeIdentifier_, v13);
  *(_QWORD *)(v0 + 184) = v14;

  v15 = (void *)sub_1BCB6410C();
  v16 = objc_msgSend(v12, sel_predicateForUserDomainConceptsWithSemanticIdentifier_, v15);
  *(_QWORD *)(v0 + 192) = v16;

  sub_1BCAFBDDC();
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1BCB665A0;
  *(_QWORD *)(v17 + 32) = v14;
  *(_QWORD *)(v17 + 40) = v16;
  sub_1BCB642EC();
  sub_1BCAFC2E0(0, &qword_1EDA14540);
  v18 = v14;
  v19 = v16;
  v20 = (void *)sub_1BCB642C8();
  swift_bridgeObjectRelease();
  v21 = objc_msgSend((id)objc_opt_self(), sel_andPredicateWithSubpredicates_, v20);
  *(_QWORD *)(v0 + 200) = v21;

  sub_1BCAFC2E0(0, &qword_1EDA14538);
  v22 = v21;
  v23 = MEMORY[0x1E0DEE9D8];
  sub_1BCB63D58();
  *(_QWORD *)(v0 + 64) = v23;
  sub_1BCB63D4C();
  sub_1BCB63D40();
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v10, v11);
  *(_QWORD *)(v0 + 208) = sub_1BCB10F28(&qword_1EF487928, v24, (uint64_t (*)(uint64_t))type metadata accessor for MedicationDataSource, (uint64_t)&protocol conformance descriptor for MedicationDataSource);
  *(_QWORD *)(v0 + 216) = sub_1BCB0E834();
  v25 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 224) = v25;
  *v25 = v0;
  v25[1] = sub_1BCB0C87C;
  return sub_1BCB64394();
}

uint64_t sub_1BCB0C87C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  swift_getObjectType();
  sub_1BCB64370();
  if (v0)
    *(_QWORD *)(v2 + 240) = v0;
  return swift_task_switch();
}

uint64_t sub_1BCB0C908()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 232) = *(_QWORD *)(v0 + 72);
  return swift_task_switch();
}

uint64_t sub_1BCB0C924()
{
  uint64_t v0;
  void *v1;
  id v2;
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(void **)(v0 + 232);
  if (!v1)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));
    v5 = *(_QWORD *)(v0 + 64);
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      v21 = sub_1BCB648D4();
      result = swift_bridgeObjectRelease();
      if (v21)
        goto LABEL_7;
    }
    else if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_7:
      if ((v5 & 0xC000000000000001) != 0)
      {
        v6 = (id)MEMORY[0x1BCCFCF20](0, v5);
      }
      else
      {
        if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return result;
        }
        v6 = *(id *)(v5 + 32);
      }
      v7 = v6;
      swift_bridgeObjectRelease();
      v8 = objc_msgSend(v7, sel_userConcept);
      objc_opt_self();
      v9 = swift_dynamicCastObjCClass();
      v10 = *(void **)(v0 + 192);
      v11 = *(void **)(v0 + 200);
      v12 = *(_QWORD *)(v0 + 176);
      v13 = *(void **)(v0 + 184);
      v14 = *(_QWORD *)(v0 + 160);
      v15 = *(_QWORD *)(v0 + 168);
      if (v9)
      {
        v30 = *(_QWORD *)(v0 + 176);
        v28 = *(void **)(v0 + 184);
        v29 = *(_QWORD *)(v0 + 168);
        v17 = *(_QWORD *)(v0 + 96);
        v16 = *(_QWORD *)(v0 + 104);
        v18 = *(_QWORD *)(v0 + 88);
        swift_beginAccess();
        swift_bridgeObjectRetain();
        v19 = v8;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v31 = *(_QWORD *)(v16 + 112);
        *(_QWORD *)(v16 + 112) = 0x8000000000000000;
        sub_1BCB0FB74(v9, v18, v17, isUniquelyReferenced_nonNull_native, &qword_1EDA144B8, (unint64_t *)&qword_1EDA144A8, 0x1E0D2C4D8, (void (*)(void))sub_1BCB290A0);
        *(_QWORD *)(v16 + 112) = v31;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_endAccess();

        (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v14);
      }
      else
      {

        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v12, v14);
      }
LABEL_15:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v9);
    }
    v23 = *(void **)(v0 + 192);
    v22 = *(void **)(v0 + 200);
    v24 = *(_QWORD *)(v0 + 176);
    v25 = *(void **)(v0 + 184);
    v26 = *(_QWORD *)(v0 + 160);
    v27 = *(_QWORD *)(v0 + 168);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v24, v26);

    v9 = 0;
    goto LABEL_15;
  }
  v2 = v1;
  MEMORY[0x1BCCFCA1C]();
  if (*(_QWORD *)((*(_QWORD *)(v0 + 64) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 64) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    sub_1BCB64304();
  sub_1BCB64334();
  sub_1BCB642EC();

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 248) = v3;
  *v3 = v0;
  v3[1] = sub_1BCB0CD50;
  return sub_1BCB64394();
}

uint64_t sub_1BCB0CC44()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 80) = *(_QWORD *)(v0 + 240);
  sub_1BCB052CC();
  swift_willThrowTypedImpl();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_1BCB0CCAC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void **)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(void **)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 152);
  v8 = *(_QWORD *)(v0 + 136);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCB0CD50()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    if (*(_QWORD *)(v2 + 104))
    {
      swift_getObjectType();
      sub_1BCB64370();
    }
    *(_QWORD *)(v2 + 240) = v0;
  }
  else
  {
    swift_getObjectType();
    sub_1BCB64370();
  }
  return swift_task_switch();
}

uint64_t sub_1BCB0CE14(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  sub_1BCB10DB8(0, &qword_1EDA13968, MEMORY[0x1E0DF07C0]);
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BCB0CE84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  sub_1BCB066B8(0, &qword_1EDA14468, (unint64_t *)&qword_1EDA144A8, 0x1E0D2C4D8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, *MEMORY[0x1E0DF07B8], v3);
  sub_1BCB643D0();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCB0CF3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  char *v16;
  id v17;
  uint64_t v19;

  sub_1BCB10DB8(0, &qword_1EDA13970, MEMORY[0x1E0DF07E8]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - v7;
  sub_1BCB10C0C(0, (unint64_t *)&unk_1EDA14470, (void (*)(uint64_t))MEMORY[0x1E0DF0750]);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v19 - v10;
  v12 = sub_1BCB643B8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = swift_allocObject();
  swift_weakInit();
  v14 = *(void **)(a2 + 128);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  v15 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = 0;
  *((_QWORD *)v16 + 3) = 0;
  *((_QWORD *)v16 + 4) = v14;
  *((_QWORD *)v16 + 5) = v13;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v16[v15], v8, v5);
  v17 = v14;
  sub_1BCB3F180((uint64_t)v11, (uint64_t)&unk_1EF4879B0, (uint64_t)v16);
  return swift_release();
}

uint64_t sub_1BCB0D0C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;

  v6[10] = a5;
  v6[11] = a6;
  v6[9] = a4;
  sub_1BCB10DB8(0, &qword_1EDA13960, MEMORY[0x1E0DF0790]);
  v6[12] = v7;
  v6[13] = *(_QWORD *)(v7 - 8);
  v6[14] = swift_task_alloc();
  v8 = sub_1BCB63D94();
  v9 = (void (*)(uint64_t))MEMORY[0x1E0D2F000];
  v6[15] = v8;
  v6[16] = *(_QWORD *)(v8 - 8);
  v6[17] = swift_task_alloc();
  v6[18] = swift_task_alloc();
  v6[19] = swift_task_alloc();
  sub_1BCB10C0C(0, &qword_1EDA13918, v9);
  v6[20] = swift_task_alloc();
  sub_1BCB10EA8(0, &qword_1EF4879B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C95E80]);
  v6[21] = v10;
  v6[22] = *(_QWORD *)(v10 - 8);
  v6[23] = swift_task_alloc();
  sub_1BCB10E94(0);
  v6[24] = v11;
  v6[25] = *(_QWORD *)(v11 - 8);
  v6[26] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BCB0D210()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = v0[22];
  v1 = v0[23];
  v3 = v0[21];
  v4 = sub_1BCB63DA0();
  v0[27] = v4;
  v0[5] = v4;
  sub_1BCB10E30();
  v6 = v5;
  v7 = sub_1BCB10F28(&qword_1EF4879C8, 255, (uint64_t (*)(uint64_t))sub_1BCB10E30, MEMORY[0x1E0C95FB8]);
  MEMORY[0x1BCCFC704](v6, v7);
  sub_1BCB63E54();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_beginAccess();
  v0[28] = sub_1BCB10F28(&qword_1EF4879D8, 255, (uint64_t (*)(uint64_t))sub_1BCB10E94, MEMORY[0x1E0C95E78]);
  v8 = (_QWORD *)swift_task_alloc();
  v0[29] = v8;
  *v8 = v0;
  v8[1] = sub_1BCB0D344;
  return sub_1BCB64394();
}

uint64_t sub_1BCB0D344()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    *(_QWORD *)(v2 + 240) = v0;
  }
  else
  {
    *(_DWORD *)(v2 + 304) = *MEMORY[0x1E0D2EFF8];
    *(_DWORD *)(v2 + 308) = *MEMORY[0x1E0D2EFF0];
  }
  return swift_task_switch();
}

uint64_t sub_1BCB0D3C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v15)(uint64_t, uint64_t);
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  id v21;
  void *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));
    swift_release();
LABEL_7:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 152), v1, v2);
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 248) = Strong;
  if (!Strong)
  {
LABEL_6:
    swift_release();
    v7 = *(_QWORD *)(v0 + 200);
    v6 = *(_QWORD *)(v0 + 208);
    v8 = *(_QWORD *)(v0 + 192);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 120));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    goto LABEL_7;
  }
  v5 = Strong;
  if ((sub_1BCB643DC() & 1) != 0)
  {
    swift_release();
    goto LABEL_6;
  }
  v10 = *(_DWORD *)(v0 + 304);
  v11 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 120);
  v13 = *(_QWORD *)(v0 + 128);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  v14(v11, *(_QWORD *)(v0 + 152), v12);
  v15 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 88);
  if (v15(v11, v12) != v10)
  {
    v23 = *(_DWORD *)(v0 + 308);
    v24 = *(_QWORD *)(v0 + 144);
    v25 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 136);
    v27 = *(_QWORD *)(v0 + 120);
    v13 = *(_QWORD *)(*(_QWORD *)(v0 + 128) + 8);
    *(_QWORD *)(v0 + 256) = v13;
    ((void (*)(uint64_t, uint64_t))v13)(v24, v27);
    v14(v26, v25, v27);
    v28 = v15(v26, v27);
    v29 = *(_QWORD *)(v0 + 120);
    if (v28 != v23)
    {
      v33 = *(_QWORD *)(v0 + 136);
      ((void (*)(_QWORD, _QWORD))v13)(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 120));
      swift_release();
      ((void (*)(uint64_t, uint64_t))v13)(v33, v29);
      goto LABEL_41;
    }
    v30 = *(unint64_t **)(v0 + 136);
    (*(void (**)(unint64_t *, _QWORD))(*(_QWORD *)(v0 + 128) + 96))(v30, *(_QWORD *)(v0 + 120));
    v16 = *v30;
    *(_QWORD *)(v0 + 280) = *v30;
    if (!(v16 >> 62))
    {
      if (!*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_40:
        ((void (*)(_QWORD, _QWORD))v13)(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 120));
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_41;
      }
LABEL_25:
      v31 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 288) = v31;
      *v31 = v0;
      v31[1] = sub_1BCB0DA6C;
      return sub_1BCB0DBAC(v16);
    }
LABEL_39:
    swift_bridgeObjectRetain();
    v36 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
    if (!v36)
      goto LABEL_40;
    goto LABEL_25;
  }
  v16 = *(_QWORD *)(v0 + 144);
  (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)(v0 + 128) + 96))(v16, *(_QWORD *)(v0 + 120));
  v17 = *(_QWORD *)v16;
  *(_QWORD *)(v0 + 56) = MEMORY[0x1E0DEE9D8];
  if ((unint64_t)v17 >> 62)
  {
    if (v17 < 0)
      v16 = v17;
    else
      v16 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v18 = sub_1BCB648D4();
    if (v18)
      goto LABEL_11;
  }
  else
  {
    v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v18)
    {
LABEL_11:
      if (v18 >= 1)
      {
        v19 = 0;
        v20 = (unint64_t *)(v0 + 56);
        do
        {
          if ((v17 & 0xC000000000000001) != 0)
            v21 = (id)MEMORY[0x1BCCFCF20](v19, v17);
          else
            v21 = *(id *)(v17 + 8 * v19 + 32);
          v22 = v21;
          objc_opt_self();
          if (swift_dynamicCastObjCClass())
          {
            MEMORY[0x1BCCFCA1C]();
            if (*(_QWORD *)((*v20 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v20 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              sub_1BCB64304();
            sub_1BCB64334();
            sub_1BCB642EC();
          }
          else
          {

          }
          ++v19;
        }
        while (v18 != v19);
        swift_bridgeObjectRelease();
        v32 = *v20;
        goto LABEL_33;
      }
      __break(1u);
      goto LABEL_39;
    }
  }
  swift_bridgeObjectRelease();
  v32 = MEMORY[0x1E0DEE9D8];
LABEL_33:
  *(_QWORD *)(v0 + 264) = v32;
  swift_bridgeObjectRelease();
  if (v32 >> 62)
  {
    swift_bridgeObjectRetain();
    v35 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
    if (v35)
      goto LABEL_35;
  }
  else if (*(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_35:
    v34 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 272) = v34;
    *v34 = v0;
    v34[1] = sub_1BCB0D92C;
    v34[5] = v32;
    v34[6] = v5;
    return swift_task_switch();
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 120));
  swift_release();
  swift_bridgeObjectRelease();
LABEL_41:
  v37 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 296) = v37;
  *v37 = v0;
  v37[1] = sub_1BCB0DB48;
  return sub_1BCB64394();
}

uint64_t sub_1BCB0D8D0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 48) = *(_QWORD *)(v0 + 240);
  sub_1BCB052CC();
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

uint64_t sub_1BCB0D92C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1BCB0D980()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[19];
  v2 = v0[15];
  v3 = v0[16];
  v5 = v0[13];
  v4 = v0[14];
  v6 = v0[12];
  v0[8] = v0[33];
  sub_1BCB10DB8(0, &qword_1EDA13970, MEMORY[0x1E0DF07E8]);
  sub_1BCB643C4();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v7 = (_QWORD *)swift_task_alloc();
  v0[37] = v7;
  *v7 = v0;
  v7[1] = sub_1BCB0DB48;
  return sub_1BCB64394();
}

uint64_t sub_1BCB0DA6C()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_1BCB0DAC8()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (void (*)(uint64_t, uint64_t))v0[32];
  v2 = v0[19];
  v3 = v0[15];
  swift_release();
  v1(v2, v3);
  v4 = (_QWORD *)swift_task_alloc();
  v0[37] = v4;
  *v4 = v0;
  v4[1] = sub_1BCB0DB48;
  return sub_1BCB64394();
}

uint64_t sub_1BCB0DB48()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 240) = v0;
  return swift_task_switch();
}

uint64_t sub_1BCB0DBAC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[8] = a1;
  v2[9] = v1;
  sub_1BCB10C0C(0, &qword_1EF487960, (void (*)(uint64_t))MEMORY[0x1E0CB0998]);
  v2[10] = swift_task_alloc();
  v3 = sub_1BCB63B54();
  v2[11] = v3;
  v2[12] = *(_QWORD *)(v3 - 8);
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BCB0DC58()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  id v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  int64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  unint64_t v66;
  uint64_t v67;
  int64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v1 = *(_QWORD *)(v0 + 64);
  if (v1 >> 62)
    goto LABEL_58;
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x1E0DEE9D8];
    if (v2)
    {
      v70 = MEMORY[0x1E0DEE9D8];
      result = sub_1BCB24820(0, v2 & ~(v2 >> 63), 0);
      if (v2 < 0)
      {
        __break(1u);
        return result;
      }
      v5 = 0;
      v3 = v70;
      v6 = v69[12];
      v7 = v1 & 0xC000000000000001;
      v8 = v69[8] + 32;
      do
      {
        v9 = v3;
        if (v7)
        {
          v10 = v69;
          v11 = (id)MEMORY[0x1BCCFCF20](v5, v69[8]);
        }
        else
        {
          v11 = *(id *)(v8 + 8 * v5);
          v10 = v69;
        }
        v12 = objc_msgSend(v11, sel_UUID);
        sub_1BCB63B48();

        v3 = v9;
        v71 = v9;
        v13 = *(_QWORD *)(v9 + 16);
        v14 = *(_QWORD *)(v3 + 24);
        v1 = v13 + 1;
        if (v13 >= v14 >> 1)
        {
          sub_1BCB24820(v14 > 1, v13 + 1, 1);
          v3 = v71;
        }
        v15 = v10[15];
        v16 = v10[11];
        ++v5;
        *(_QWORD *)(v3 + 16) = v1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v3+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v13, v15, v16);
      }
      while (v2 != v5);
    }
    v17 = v69;
    v18 = v69[12];
    v58 = v69[9] + 112;
    swift_beginAccess();
    v60 = *(_QWORD *)v58 + 64;
    v19 = -1;
    v20 = -1 << *(_BYTE *)(*(_QWORD *)v58 + 32);
    if (-v20 < 64)
      v19 = ~(-1 << -(char)v20);
    v21 = v19 & *(_QWORD *)(*(_QWORD *)v58 + 64);
    v61 = (unint64_t)(63 - v20) >> 6;
    v64 = *(_QWORD *)v58;
    swift_bridgeObjectRetain();
    v22 = 0;
    v59 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v63 = v3;
    if (v21)
    {
      do
      {
LABEL_19:
        v67 = (v21 - 1) & v21;
        v68 = v22;
        v26 = __clz(__rbit64(v21)) | (v22 << 6);
LABEL_34:
        v31 = (unint64_t *)(*(_QWORD *)(v64 + 48) + 16 * v26);
        v1 = *v31;
        v32 = *(void **)(*(_QWORD *)(v64 + 56) + 8 * v26);
        v66 = v31[1];
        swift_bridgeObjectRetain();
        v65 = v32;
        v33 = objc_msgSend(v65, sel_UUID);
        sub_1BCB63B48();

        v34 = *(_QWORD *)(v3 + 16);
        if (v34)
        {
          v62 = v1;
          v35 = v3 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
          swift_bridgeObjectRetain();
          v36 = *(_QWORD *)(v18 + 72);
          v1 = *(_QWORD *)(v18 + 16);
          while (1)
          {
            v38 = v17[10];
            v37 = v17[11];
            ((void (*)(uint64_t, uint64_t, uint64_t))v1)(v38, v35, v37);
            v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
            v23(v38, 0, 1, v37);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v38, 1, v37) == 1)
              break;
            v39 = v17[13];
            v40 = v17[11];
            (*(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 32))(v39, v17[10], v40);
            sub_1BCB10F28(&qword_1EF487968, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
            v41 = sub_1BCB64100();
            v42 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
            v42(v39, v40);
            if ((v41 & 1) != 0)
            {
              v43 = v69[14];
              v44 = v69[11];
              v3 = v63;
              swift_bridgeObjectRelease();
              v42(v43, v44);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                v45 = v59;
              else
                v45 = sub_1BCAF6A40(0, v59[2] + 1, 1, v59);
              v21 = v67;
              v22 = v68;
              v1 = v66;
              v47 = v45[2];
              v46 = v45[3];
              if (v47 >= v46 >> 1)
                v45 = sub_1BCAF6A40((_QWORD *)(v46 > 1), v47 + 1, 1, v45);
              v45[2] = v47 + 1;
              v59 = v45;
              v48 = &v45[2 * v47];
              v48[4] = v62;
              v48[5] = v66;

              v17 = v69;
              if (v67)
                goto LABEL_19;
              goto LABEL_20;
            }
            v35 += v36;
            --v34;
            v17 = v69;
            if (!v34)
              goto LABEL_17;
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
LABEL_17:
          v23(v17[10], 1, 1, v17[11]);
        }
        v24 = v17[14];
        v25 = v17[11];
        v3 = v63;
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v24, v25);

        swift_bridgeObjectRelease();
        v21 = v67;
        v22 = v68;
      }
      while (v67);
    }
LABEL_20:
    v27 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_57;
    }
    if (v27 >= v61)
      break;
    v28 = *(_QWORD *)(v60 + 8 * v27);
    v29 = v22 + 1;
    if (v28)
      goto LABEL_33;
    v29 = v22 + 2;
    if (v22 + 2 >= v61)
      break;
    v28 = *(_QWORD *)(v60 + 8 * v29);
    if (v28)
      goto LABEL_33;
    v29 = v22 + 3;
    if (v22 + 3 >= v61)
      break;
    v28 = *(_QWORD *)(v60 + 8 * v29);
    if (v28)
      goto LABEL_33;
    v30 = v22 + 4;
    if (v22 + 4 >= v61)
      break;
    v28 = *(_QWORD *)(v60 + 8 * v30);
    if (v28)
    {
      v29 = v22 + 4;
LABEL_33:
      v67 = (v28 - 1) & v28;
      v68 = v29;
      v26 = __clz(__rbit64(v28)) + (v29 << 6);
      goto LABEL_34;
    }
    while (1)
    {
      v29 = v30 + 1;
      if (__OFADD__(v30, 1))
        break;
      if (v29 >= v61)
        goto LABEL_47;
      v28 = *(_QWORD *)(v60 + 8 * v29);
      ++v30;
      if (v28)
        goto LABEL_33;
    }
LABEL_57:
    __break(1u);
LABEL_58:
    swift_bridgeObjectRetain();
    v2 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
  }
LABEL_47:
  swift_release();
  swift_bridgeObjectRelease();
  v49 = v59[2];
  if (v49)
  {
    swift_bridgeObjectRetain_n();
    v50 = v59 + 5;
    do
    {
      v52 = *(v50 - 1);
      v53 = *v50;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v54 = sub_1BCB0E7B0(v52, v53);
      LOBYTE(v52) = v55;
      swift_bridgeObjectRelease();
      v51 = 0;
      if ((v52 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v57 = *(_QWORD *)v58;
        v72 = *(_QWORD *)v58;
        *(_QWORD *)v58 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_1BCB103C0(&qword_1EDA144B8, (unint64_t *)&qword_1EDA144A8);
          v57 = v72;
        }
        swift_bridgeObjectRelease();
        v51 = *(void **)(*(_QWORD *)(v57 + 56) + 8 * v54);
        sub_1BCB2EDFC(v54, v57);
        *(_QWORD *)v58 = v57;
        swift_bridgeObjectRelease();
      }
      swift_endAccess();

      swift_bridgeObjectRelease();
      v50 += 2;
      --v49;
    }
    while (v49);
    swift_bridgeObjectRelease_n();
    v17 = v69;
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v17[1])();
}

uint64_t sub_1BCB0E334(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

uint64_t sub_1BCB0E34C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;

  v1 = *(_QWORD *)(v0 + 40);
  if (v1 >> 62)
    goto LABEL_25;
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; v2 = sub_1BCB648D4())
  {
    v3 = 0;
    v4 = v30 + 16;
    v5 = (unint64_t *)(*(_QWORD *)(v30 + 48) + 112);
    v31 = v2;
    v32 = v1 & 0xC000000000000001;
    v29 = *(_QWORD *)(v30 + 40) + 32;
    while (1)
    {
      v7 = v32 ? (_QWORD *)MEMORY[0x1BCCFCF20](v3, *(_QWORD *)(v30 + 40)) : *(id *)(v29 + 8 * v3);
      v1 = (unint64_t)v7;
      if (__OFADD__(v3, 1))
        break;
      v33 = v3 + 1;
      v8 = objc_msgSend(v7, sel_semanticIdentifier);
      v9 = objc_msgSend(v8, sel_stringValue);

      v10 = sub_1BCB6413C();
      v12 = v11;

      v13 = v4;
      swift_beginAccess();
      v14 = (id)v1;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v1 = *v5;
      v34 = (_QWORD *)*v5;
      *v5 = 0x8000000000000000;
      v17 = sub_1BCB0E7B0(v10, v12);
      v18 = *(_QWORD *)(v1 + 16);
      v19 = (v16 & 1) == 0;
      v20 = v18 + v19;
      if (__OFADD__(v18, v19))
        goto LABEL_23;
      v21 = v16;
      if (*(_QWORD *)(v1 + 24) >= v20)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v16 & 1) != 0)
            goto LABEL_4;
        }
        else
        {
          sub_1BCB103C0(&qword_1EDA144B8, (unint64_t *)&qword_1EDA144A8);
          v1 = (unint64_t)v34;
          if ((v21 & 1) != 0)
            goto LABEL_4;
        }
      }
      else
      {
        sub_1BCB290A0(v20, isUniquelyReferenced_nonNull_native);
        v1 = (unint64_t)v34;
        v22 = sub_1BCB0E7B0(v10, v12);
        if ((v21 & 1) != (v23 & 1))
          return sub_1BCB64A3C();
        v17 = v22;
        if ((v21 & 1) != 0)
        {
LABEL_4:
          v6 = *(_QWORD *)(v1 + 56);

          *(_QWORD *)(v6 + 8 * v17) = v14;
          goto LABEL_5;
        }
      }
      *(_QWORD *)(v1 + 8 * (v17 >> 6) + 64) |= 1 << v17;
      v24 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v17);
      *v24 = v10;
      v24[1] = v12;
      *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v17) = v14;
      v25 = *(_QWORD *)(v1 + 16);
      v26 = __OFADD__(v25, 1);
      v27 = v25 + 1;
      if (v26)
        goto LABEL_24;
      *(_QWORD *)(v1 + 16) = v27;
      swift_bridgeObjectRetain();
LABEL_5:
      *v5 = v1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 = v13;
      swift_endAccess();

      ++v3;
      if (v33 == v31)
        goto LABEL_26;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
  }
LABEL_26:
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v30 + 8))();
}

uint64_t MedicationDataSource.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_defaultActor_destroy();
  return v0;
}

uint64_t MedicationDataSource.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t MedicationDataSource.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1BCB0E6B0()
{
  uint64_t v0;

  return v0;
}

unint64_t sub_1BCB0E6BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1BCB64A90();
  swift_bridgeObjectRetain();
  sub_1BCB641CC();
  swift_bridgeObjectRelease();
  if (a4 == 1)
  {
    sub_1BCB64A9C();
  }
  else
  {
    sub_1BCB64A9C();
    sub_1BCB64AA8();
    if (a4)
    {
      swift_bridgeObjectRetain();
      sub_1BCB641CC();
      v8 = a3;
      v9 = a4;
    }
    else
    {
      v8 = a3;
      v9 = 0;
    }
    sub_1BCB10A44(v8, v9);
  }
  v10 = sub_1BCB64AC0();
  return sub_1BCB0EB98(a1, a2, a3, a4, v10);
}

unint64_t sub_1BCB0E7B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BCB64A90();
  sub_1BCB641CC();
  v4 = sub_1BCB64AC0();
  return sub_1BCB0EE94(a1, a2, v4);
}

uint64_t type metadata accessor for MedicationDataSource()
{
  return objc_opt_self();
}

unint64_t sub_1BCB0E834()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF487930;
  if (!qword_1EF487930)
  {
    sub_1BCB066B8(255, &qword_1EDA13C70, &qword_1EDA14538, 0x1E0CB6CE8, MEMORY[0x1E0D2BF58]);
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0D2BF60], v1);
    atomic_store(result, (unint64_t *)&qword_1EF487930);
  }
  return result;
}

unint64_t sub_1BCB0E89C(uint64_t a1)
{
  uint64_t v2;

  sub_1BCB6413C();
  sub_1BCB64A90();
  sub_1BCB641CC();
  v2 = sub_1BCB64AC0();
  swift_bridgeObjectRelease();
  return sub_1BCB0EF74(a1, v2);
}

unint64_t sub_1BCB0E91C(void *a1)
{
  id v2;
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  _BYTE v9[72];

  sub_1BCB64A90();
  if (a1)
  {
    sub_1BCB64AA8();
    v2 = a1;
    v3 = objc_msgSend(v2, sel_ingredientProducts);
    sub_1BCAFC2E0(0, (unint64_t *)&qword_1EF487748);
    v4 = sub_1BCB642D4();

    sub_1BCB2B278(v9, v4);
    swift_bridgeObjectRelease();
    v5 = objc_msgSend(v2, sel_tradeNameProduct);
    if (v5)
    {
      v6 = v5;
      sub_1BCB64604();

    }
    else
    {

    }
  }
  else
  {
    sub_1BCB64AA8();
  }
  v7 = sub_1BCB64AC0();
  return sub_1BCB0F0E8(a1, v7);
}

void sub_1BCB0EA24(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v7[72];

  sub_1BCB64A90();
  swift_bridgeObjectRetain();
  sub_1BCB2B278(v7, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1BCB641CC();
  swift_bridgeObjectRelease();
  v6 = sub_1BCB64AC0();
  sub_1BCB0F32C(a1, a2, a3, v6);
}

unint64_t sub_1BCB0EAC4(void *a1)
{
  id v2;
  uint64_t v3;

  sub_1BCB64A90();
  sub_1BCB64AA8();
  if (a1)
  {
    v2 = a1;
    sub_1BCB64604();

  }
  v3 = sub_1BCB64AC0();
  return sub_1BCB0F6FC(a1, v3);
}

unint64_t sub_1BCB0EB40(uint64_t a1)
{
  uint64_t v2;

  sub_1BCB64A90();
  sub_1BCB64A9C();
  v2 = sub_1BCB64AC0();
  return sub_1BCB0F7FC(a1, v2);
}

unint64_t sub_1BCB0EB98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = -1 << *(_BYTE *)(v5 + 32);
  v7 = a5 & ~v6;
  if (((*(_QWORD *)(v5 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    return v7;
  v23 = ~v6;
  while (1)
  {
    v14 = (_QWORD *)(*(_QWORD *)(v5 + 48) + 32 * v7);
    v15 = v14[2];
    v16 = v14[3];
    v17 = *v14 == a1 && v14[1] == a2;
    if (!v17 && (sub_1BCB649F4() & 1) == 0)
      goto LABEL_6;
    if (v16 == 1)
    {
      if (a4 == 1)
      {
        sub_1BCB10A44(v15, 1);
        sub_1BCB10A44(a3, 1);
        return v7;
      }
LABEL_4:
      sub_1BCAFC5BC(a3, a4);
      sub_1BCAFC5BC(v15, v16);
      sub_1BCB10A44(v15, v16);
      v12 = a3;
      v13 = a4;
LABEL_5:
      sub_1BCB10A44(v12, v13);
      goto LABEL_6;
    }
    if (a4 == 1)
      goto LABEL_4;
    if (!v16)
      break;
    if (!a4)
    {
      sub_1BCAFC5BC(a3, 0);
      sub_1BCAFC5BC(v15, v16);
      sub_1BCB10A44(v15, v16);
      v12 = a3;
      v13 = 0;
      goto LABEL_5;
    }
    if (v15 == a3 && v16 == a4)
    {
      sub_1BCAFC5BC(a3, a4);
      sub_1BCAFC5BC(a3, a4);
      sub_1BCB10A44(a3, a4);
      v21 = a3;
      v22 = a4;
      goto LABEL_29;
    }
    v19 = sub_1BCB649F4();
    sub_1BCAFC5BC(a3, a4);
    sub_1BCAFC5BC(v15, v16);
    sub_1BCB10A44(v15, v16);
    sub_1BCB10A44(a3, a4);
    if ((v19 & 1) != 0)
      return v7;
LABEL_6:
    v7 = (v7 + 1) & v23;
    if (((*(_QWORD *)(v5 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
      return v7;
  }
  swift_bridgeObjectRetain();
  sub_1BCAFC5BC(a3, a4);
  sub_1BCAFC5BC(v15, 0);
  sub_1BCAFC5BC(a3, a4);
  sub_1BCAFC5BC(v15, 0);
  swift_bridgeObjectRetain();
  sub_1BCAFC5BC(v15, 0);
  sub_1BCB10A44(v15, 0);
  sub_1BCB10A44(a3, a4);
  if (a4)
  {
    sub_1BCB10A44(v15, 0);
    sub_1BCB10A44(a3, a4);
    sub_1BCB10A44(a3, a4);
    sub_1BCB10A44(v15, 0);
    swift_bridgeObjectRelease();
    v12 = v15;
    v13 = 0;
    goto LABEL_5;
  }
  sub_1BCB10A44(a3, 0);
  sub_1BCB10A44(v15, 0);
  swift_bridgeObjectRelease();
  v21 = v15;
  v22 = 0;
LABEL_29:
  sub_1BCB10A44(v21, v22);
  return v7;
}

unint64_t sub_1BCB0EE94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1BCB649F4() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1BCB649F4() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1BCB0EF74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_1BCB6413C();
    v8 = v7;
    if (v6 == sub_1BCB6413C() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_1BCB649F4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_1BCB6413C();
          v15 = v14;
          if (v13 == sub_1BCB6413C() && v15 == v16)
            break;
          v18 = sub_1BCB649F4();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1BCB0F0E8(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  char v22;
  uint64_t v24;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = v2;
    v8 = ~v4;
    v24 = v2 + 64;
    do
    {
      v9 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * v5);
      if (v9)
      {
        v10 = v9;
        v11 = v10;
        if (a1)
        {
          v12 = v10;
          v13 = a1;
          v14 = objc_msgSend(v12, sel_ingredientProducts);
          sub_1BCAFC2E0(0, (unint64_t *)&qword_1EF487748);
          v15 = sub_1BCB642D4();

          v16 = objc_msgSend(v13, sel_ingredientProducts);
          v17 = sub_1BCB642D4();

          LOBYTE(v16) = sub_1BCB21780(v15, v17);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v16 & 1) != 0)
          {
            v18 = objc_msgSend(v12, sel_tradeNameProduct);
            v19 = objc_msgSend(v13, sel_tradeNameProduct);
            v20 = v19;
            if (!v18)
            {

              v3 = v24;
              if (!v20)
                return v5;
              goto LABEL_16;
            }
            if (v19)
            {
              v21 = v18;
              v22 = sub_1BCB645F8();

              v3 = v24;
              if ((v22 & 1) != 0)
                return v5;
              goto LABEL_17;
            }

            v11 = v13;
          }
          else
          {
            v11 = v12;
            v18 = v13;
          }
          v3 = v24;

          v20 = v18;
        }
        else
        {
          v20 = v10;
        }
      }
      else
      {
        if (!a1)
          return v5;
        v11 = 0;
        v20 = 0;
      }

LABEL_16:
LABEL_17:
      v5 = (v5 + 1) & v8;
    }
    while (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

void sub_1BCB0F32C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  char v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  char v25;
  id v26;
  void *v27;
  char v28;
  unint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;

  v5 = -1 << *(_BYTE *)(v4 + 32);
  v6 = a4 & ~v5;
  if (((*(_QWORD *)(v4 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return;
  v7 = a1;
  v8 = a1 >> 62;
  if (a1 >> 62)
  {
LABEL_59:
    swift_bridgeObjectRetain();
    v10 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
    v9 = v7 & 0xFFFFFFFFFFFFFF8;
  }
  else
  {
    v9 = a1 & 0xFFFFFFFFFFFFFF8;
    v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v33 = ~v5;
  v11 = v9 + 32;
  v36 = v9;
  if (v7 < 0)
    v9 = v7;
  if (v8)
    v11 = v9;
  v32 = v11;
  v39 = v7;
  v40 = v7 & 0xC000000000000001;
  v37 = 2 - v10;
  v38 = v10;
  while (1)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v35 + 48) + 24 * v6);
    v5 = (unint64_t)v12 >> 62;
    if ((unint64_t)v12 >> 62)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v13 = sub_1BCB648D4();
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    if (v13 == v38)
    {
      if (!v38)
        goto LABEL_53;
      v7 = v12 & 0xFFFFFFFFFFFFFF8;
      v14 = (v12 & 0xFFFFFFFFFFFFFF8) + 32;
      v15 = v12 < 0 ? v12 : v12 & 0xFFFFFFFFFFFFFF8;
      if (v5)
        v14 = v15;
      if (v14 == v32)
        goto LABEL_53;
      if (v38 < 0)
      {
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      v5 = v12 & 0xC000000000000001;
      if ((v12 & 0xC000000000000001) != 0)
      {
        v16 = (id)MEMORY[0x1BCCFCF20](0, v12);
      }
      else
      {
        if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_57;
        v16 = *(id *)(v12 + 32);
      }
      v17 = v16;
      if (v40)
      {
        v18 = (id)MEMORY[0x1BCCFCF20](0, v39);
      }
      else
      {
        if (!*(_QWORD *)(v36 + 16))
          goto LABEL_58;
        v18 = *(id *)(v39 + 32);
      }
      v19 = v18;
      sub_1BCAFC2E0(0, (unint64_t *)&qword_1EF487748);
      v20 = sub_1BCB645F8();

      if ((v20 & 1) != 0)
        break;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = (v6 + 1) & v33;
    if (((*(_QWORD *)(v34 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      return;
  }
  if (v38 == 1)
    goto LABEL_53;
  if (v5)
  {
    v21 = (id)MEMORY[0x1BCCFCF20](1, v12);
    goto LABEL_33;
  }
  if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    v21 = *(id *)(v12 + 40);
LABEL_33:
    v22 = v21;
    if (v40)
    {
      v23 = (id)MEMORY[0x1BCCFCF20](1, v39);
    }
    else
    {
      if (*(_QWORD *)(v36 + 16) < 2uLL)
        goto LABEL_61;
      v23 = *(id *)(v39 + 40);
    }
    v24 = v23;
    v25 = sub_1BCB645F8();

    if ((v25 & 1) != 0)
    {
      v8 = 6;
      while (v37 + v8 != 6)
      {
        v29 = v8 - 4;
        if (v5)
        {
          v30 = (id)MEMORY[0x1BCCFCF20](v8 - 4, v12);
        }
        else
        {
          if (v29 >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_55:
            __break(1u);
            goto LABEL_56;
          }
          v30 = *(id *)(v12 + 8 * v8);
        }
        v31 = v30;
        if (v40)
        {
          v26 = (id)MEMORY[0x1BCCFCF20](v8 - 4, v39);
        }
        else
        {
          if (v29 >= *(_QWORD *)(v36 + 16))
            goto LABEL_55;
          v26 = *(id *)(v39 + 8 * v8);
        }
        v27 = v26;
        v28 = sub_1BCB645F8();

        ++v8;
        if ((v28 & 1) == 0)
          goto LABEL_9;
      }
LABEL_53:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    goto LABEL_9;
  }
  __break(1u);
LABEL_61:
  __break(1u);
}

unint64_t sub_1BCB0F6FC(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  char v12;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = v2;
    v8 = ~v4;
    do
    {
      v9 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * v5);
      if (v9)
      {
        if (a1)
        {
          sub_1BCAFC2E0(0, &qword_1EF487998);
          v10 = v9;
          v11 = a1;
          v12 = sub_1BCB645F8();

          if ((v12 & 1) != 0)
            return v5;
        }
      }
      else if (!a1)
      {
        return v5;
      }
      v5 = (v5 + 1) & v8;
    }
    while (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t sub_1BCB0F7FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

void sub_1BCB0F898(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1BCB0FB74(a1, a2, a3, a4, &qword_1EDA144B8, (unint64_t *)&qword_1EDA144A8, 0x1E0D2C4D8, (void (*)(void))sub_1BCB290A0);
}

uint64_t sub_1BCB0F8BC(uint64_t a1)
{
  uint64_t v1;

  return sub_1BCB0CF3C(a1, v1);
}

uint64_t method lookup function for MedicationDataSource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MedicationDataSource.__allocating_init(healthStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of MedicationDataSource.fetchMedication(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 144) + *(_QWORD *)(*(_QWORD *)v2 + 144));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1BCB0F948;
  return v8(a1, a2);
}

uint64_t sub_1BCB0F948(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t dispatch thunk of MedicationDataSource.observeChanges()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 152) + *(_QWORD *)(*(_QWORD *)v1 + 152));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1BCB092B8;
  return v6(a1);
}

uint64_t sub_1BCB0FA00(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1BCB0E7B0(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_1BCB0FFF8();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v18[7] + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v20 = (uint64_t *)(v18[6] + 16 * v12);
    *v20 = a2;
    v20[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v21 = v18[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1BCB292A0(result, a4 & 1);
  result = sub_1BCB0E7B0(a2, a3);
  if ((v16 & 1) == (v19 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1BCB64A3C();
  __break(1u);
  return result;
}

void sub_1BCB0FB50(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1BCB0FB74(a1, a2, a3, a4, (unint64_t *)&qword_1EF487988, (unint64_t *)&qword_1EDA139E0, 0x1E0DE7910, (void (*)(void))sub_1BCB295B4);
}

void sub_1BCB0FB74(uint64_t a1, uint64_t a2, uint64_t a3, char a4, unint64_t *a5, unint64_t *a6, uint64_t a7, void (*a8)(void))
{
  _QWORD *v8;
  _QWORD *v11;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;

  v11 = v8;
  v15 = *v8;
  v17 = sub_1BCB0E7B0(a2, a3);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v21 = v16;
  v22 = *(_QWORD *)(v15 + 24);
  if (v22 >= v20 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v22 >= v20 && (a4 & 1) == 0)
  {
    sub_1BCB103C0(a5, a6);
LABEL_7:
    v23 = (_QWORD *)*v11;
    if ((v21 & 1) != 0)
    {
LABEL_8:
      v24 = v23[7];

      *(_QWORD *)(v24 + 8 * v17) = a1;
      return;
    }
LABEL_11:
    v23[(v17 >> 6) + 8] |= 1 << v17;
    v27 = (uint64_t *)(v23[6] + 16 * v17);
    *v27 = a2;
    v27[1] = a3;
    *(_QWORD *)(v23[7] + 8 * v17) = a1;
    v28 = v23[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (!v29)
    {
      v23[2] = v30;
      swift_bridgeObjectRetain();
      return;
    }
    goto LABEL_14;
  }
  a8();
  v25 = sub_1BCB0E7B0(a2, a3);
  if ((v21 & 1) == (v26 & 1))
  {
    v17 = v25;
    v23 = (_QWORD *)*v11;
    if ((v21 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  sub_1BCB64A3C();
  __break(1u);
}

_OWORD *sub_1BCB0FD0C(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1BCB0E7B0(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
        return sub_1BCB0537C(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1BCB101B0();
      goto LABEL_7;
    }
    sub_1BCB29D28(v15, a4 & 1);
    v21 = sub_1BCB0E7B0(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1BCB0FF90(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)sub_1BCB64A3C();
  __break(1u);
  return result;
}

void sub_1BCB0FE3C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1BCB0FB74(a1, a2, a3, a4, (unint64_t *)&unk_1EDA13DA8, &qword_1EDA13D48, 0x1E0CB6988, (void (*)(void))sub_1BCB2A038);
}

uint64_t sub_1BCB0FE60(char a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1BCB0EB40(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_1BCB10838();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v16[7] + v10) = a1 & 1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_QWORD *)(v16[6] + 8 * v10) = a2;
    *(_BYTE *)(v16[7] + v10) = a1 & 1;
    v18 = v16[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (!v19)
    {
      v16[2] = v20;
      return result;
    }
    goto LABEL_14;
  }
  sub_1BCB2A5E0(result, a3 & 1);
  result = sub_1BCB0EB40(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  type metadata accessor for HKMedicationListOnboardingAnalyticsStepType(0);
  result = sub_1BCB64A3C();
  __break(1u);
  return result;
}

_OWORD *sub_1BCB0FF90(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_1BCB0537C(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

void *sub_1BCB0FFF8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_1BCB10BBC(0, &qword_1EF4879A0);
  v2 = *v0;
  v3 = sub_1BCB648E0();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BCB101B0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_1BCB10BBC(0, (unint64_t *)&qword_1EF487990);
  v2 = *v0;
  v3 = sub_1BCB648E0();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_1BCB053D0(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_1BCB0537C(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1BCB103A4()
{
  return sub_1BCB103C0((unint64_t *)&unk_1EDA13DA8, &qword_1EDA13D48);
}

id sub_1BCB103C0(unint64_t *a1, unint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id result;
  uint64_t v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v3 = v2;
  sub_1BCB10578(0, a1, a2);
  v4 = *v2;
  v5 = sub_1BCB648E0();
  v6 = v5;
  if (!*(_QWORD *)(v4 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v3 = v6;
    return result;
  }
  result = (id)(v5 + 64);
  v8 = v4 + 64;
  v9 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  if (v6 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v4 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v24 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v15)
      goto LABEL_26;
    v25 = *(_QWORD *)(v8 + 8 * v24);
    ++v11;
    if (!v25)
    {
      v11 = v24 + 1;
      if (v24 + 1 >= v15)
        goto LABEL_26;
      v25 = *(_QWORD *)(v8 + 8 * v11);
      if (!v25)
        break;
    }
LABEL_25:
    v14 = (v25 - 1) & v25;
    v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v17);
    v20 = v19[1];
    v21 = 8 * v17;
    v22 = *(void **)(*(_QWORD *)(v4 + 56) + v21);
    v23 = (_QWORD *)(*(_QWORD *)(v6 + 48) + v18);
    *v23 = *v19;
    v23[1] = v20;
    *(_QWORD *)(*(_QWORD *)(v6 + 56) + v21) = v22;
    swift_bridgeObjectRetain();
    result = v22;
  }
  v26 = v24 + 2;
  if (v26 >= v15)
    goto LABEL_26;
  v25 = *(_QWORD *)(v8 + 8 * v26);
  if (v25)
  {
    v11 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v25 = *(_QWORD *)(v8 + 8 * v11);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1BCB10578(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_1BCAFC2E0(255, a3);
    v4 = sub_1BCB64904();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void *sub_1BCB105DC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;

  sub_1BCB10A58();
  v35 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCB10ACC();
  v32 = v0;
  v4 = *v0;
  v5 = sub_1BCB648E0();
  v6 = *(_QWORD *)(v4 + 16);
  v36 = v5;
  if (!v6)
  {
    result = (void *)swift_release();
    v30 = v36;
    v29 = v32;
LABEL_28:
    *v29 = v30;
    return result;
  }
  v7 = v5;
  result = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    v7 = v36;
  }
  v33 = v4 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v34 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v26 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v34)
      goto LABEL_26;
    v27 = *(_QWORD *)(v33 + 8 * v26);
    ++v11;
    if (!v27)
    {
      v11 = v26 + 1;
      if (v26 + 1 >= v34)
        goto LABEL_26;
      v27 = *(_QWORD *)(v33 + 8 * v11);
      if (!v27)
        break;
    }
LABEL_25:
    v14 = (v27 - 1) & v27;
    v16 = __clz(__rbit64(v27)) + (v11 << 6);
LABEL_12:
    v17 = 32 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 32 * v16);
    v20 = *v18;
    v19 = v18[1];
    v21 = v18[2];
    v22 = v18[3];
    v23 = *(_QWORD *)(v35 + 72) * v16;
    sub_1BCB10B78(*(_QWORD *)(v4 + 56) + v23, (uint64_t)v3);
    v24 = v36;
    v25 = (_QWORD *)(*(_QWORD *)(v36 + 48) + v17);
    *v25 = v20;
    v25[1] = v19;
    v25[2] = v21;
    v25[3] = v22;
    sub_1BCAFC5D0((uint64_t)v3, *(_QWORD *)(v24 + 56) + v23);
    swift_bridgeObjectRetain();
    result = (void *)sub_1BCAFC5BC(v21, v22);
  }
  v28 = v26 + 2;
  if (v28 >= v34)
  {
LABEL_26:
    result = (void *)swift_release();
    v29 = v32;
    v30 = v36;
    goto LABEL_28;
  }
  v27 = *(_QWORD *)(v33 + 8 * v28);
  if (v27)
  {
    v11 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v11 >= v34)
      goto LABEL_26;
    v27 = *(_QWORD *)(v33 + 8 * v11);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BCB10838()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  sub_1BCB109C0();
  v2 = *v0;
  v3 = sub_1BCB648E0();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1BCB109C0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF487970)
  {
    type metadata accessor for HKMedicationListOnboardingAnalyticsStepType(255);
    sub_1BCB10F28(&qword_1EF487978, 255, (uint64_t (*)(uint64_t))type metadata accessor for HKMedicationListOnboardingAnalyticsStepType, (uint64_t)&unk_1BCB65AB4);
    v0 = sub_1BCB64904();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF487970);
  }
}

uint64_t sub_1BCB10A44(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

void sub_1BCB10A58()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF487390)
  {
    sub_1BCB066B8(255, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    v0 = sub_1BCB64628();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF487390);
  }
}

void sub_1BCB10ACC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF487980)
  {
    sub_1BCB10A58();
    sub_1BCB10B34();
    v0 = sub_1BCB64904();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF487980);
  }
}

unint64_t sub_1BCB10B34()
{
  unint64_t result;

  result = qword_1EDA143A0;
  if (!qword_1EDA143A0)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for MedicationVisualizationFragment, &type metadata for MedicationVisualizationFragment);
    atomic_store(result, (unint64_t *)&qword_1EDA143A0);
  }
  return result;
}

uint64_t sub_1BCB10B78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BCB10A58();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1BCB10BBC(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_1BCB64904();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void sub_1BCB10C0C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1BCB64628();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_1BCB10C58()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BCB10C7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  sub_1BCB10DB8(0, &qword_1EDA13970, MEMORY[0x1E0DF07E8]);
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  swift_unknownObjectRelease();

  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v2);
  return swift_deallocObject();
}

uint64_t sub_1BCB10D10(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  sub_1BCB10DB8(0, &qword_1EDA13970, MEMORY[0x1E0DF07E8]);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = (uint64_t)v1 + ((v5 + 48) & ~v5);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1BCB092B8;
  return sub_1BCB0D0C4(a1, v6, v7, v8, v9, v10);
}

void sub_1BCB10DB8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_1BCB066B8(255, &qword_1EDA14468, (unint64_t *)&qword_1EDA144A8, 0x1E0D2C4D8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_1BCB10E30()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF4879C0)
  {
    sub_1BCB63D94();
    v0 = sub_1BCB63EB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF4879C0);
  }
}

void sub_1BCB10E94(uint64_t a1)
{
  sub_1BCB10EA8(a1, &qword_1EF4879D0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C95E68]);
}

void sub_1BCB10EA8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_1BCB10E30();
    v7 = v6;
    v8 = sub_1BCB10F28(&qword_1EF4879C8, 255, (uint64_t (*)(uint64_t))sub_1BCB10E30, MEMORY[0x1E0C95FB8]);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_1BCB10F28(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x1BCCFD874](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void MedicationShape.fragments.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_1BCB10F8C()
{
  uint64_t result;

  sub_1BCAF84F0(0, &qword_1EF4879E0, (uint64_t)&type metadata for MedicationVisualizationFragment, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_1BCB66000;
  strcpy((char *)(result + 32), "capsule_left");
  *(_BYTE *)(result + 45) = 0;
  *(_WORD *)(result + 46) = -5120;
  *(_OWORD *)(result + 48) = xmmword_1BCB66840;
  strcpy((char *)(result + 64), "capsule_right");
  *(_WORD *)(result + 78) = -4864;
  *(_OWORD *)(result + 80) = xmmword_1BCB66850;
  return result;
}

HealthMedicationsExperience::MedicationShape_optional __swiftcall MedicationShape.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  HealthMedicationsExperience::MedicationShape_optional result;
  char v5;
  char v6;

  v2 = v1;
  v3 = sub_1BCB64A0C();
  result.value = swift_bridgeObjectRelease();
  v5 = 0;
  v6 = 30;
  switch(v3)
  {
    case 0:
      goto LABEL_32;
    case 1:
      v5 = 1;
      goto LABEL_32;
    case 2:
      v5 = 2;
      goto LABEL_32;
    case 3:
      v5 = 3;
      goto LABEL_32;
    case 4:
      v5 = 4;
      goto LABEL_32;
    case 5:
      v5 = 5;
      goto LABEL_32;
    case 6:
      v5 = 6;
      goto LABEL_32;
    case 7:
      v5 = 7;
      goto LABEL_32;
    case 8:
      v5 = 8;
      goto LABEL_32;
    case 9:
      v5 = 9;
      goto LABEL_32;
    case 10:
      v5 = 10;
      goto LABEL_32;
    case 11:
      v5 = 11;
      goto LABEL_32;
    case 12:
      v5 = 12;
      goto LABEL_32;
    case 13:
      v5 = 13;
      goto LABEL_32;
    case 14:
      v5 = 14;
      goto LABEL_32;
    case 15:
      v5 = 15;
      goto LABEL_32;
    case 16:
      v5 = 16;
      goto LABEL_32;
    case 17:
      v5 = 17;
      goto LABEL_32;
    case 18:
      v5 = 18;
      goto LABEL_32;
    case 19:
      v5 = 19;
      goto LABEL_32;
    case 20:
      v5 = 20;
      goto LABEL_32;
    case 21:
      v5 = 21;
      goto LABEL_32;
    case 22:
      v5 = 22;
      goto LABEL_32;
    case 23:
      v5 = 23;
      goto LABEL_32;
    case 24:
      v5 = 24;
      goto LABEL_32;
    case 25:
      v5 = 25;
      goto LABEL_32;
    case 26:
      v5 = 26;
      goto LABEL_32;
    case 27:
      v5 = 27;
      goto LABEL_32;
    case 28:
      v5 = 28;
      goto LABEL_32;
    case 29:
      v5 = 29;
LABEL_32:
      v6 = v5;
      break;
    case 30:
      break;
    case 31:
      v6 = 31;
      break;
    case 32:
      v6 = 32;
      break;
    case 33:
      v6 = 33;
      break;
    case 34:
      v6 = 34;
      break;
    case 35:
      v6 = 35;
      break;
    case 36:
      v6 = 36;
      break;
    case 37:
      v6 = 37;
      break;
    case 38:
      v6 = 38;
      break;
    case 39:
      v6 = 39;
      break;
    case 40:
      v6 = 40;
      break;
    case 41:
      v6 = 41;
      break;
    case 42:
      v6 = 42;
      break;
    case 43:
      v6 = 43;
      break;
    case 44:
      v6 = 44;
      break;
    case 45:
      v6 = 45;
      break;
    case 46:
      v6 = 46;
      break;
    case 47:
      v6 = 47;
      break;
    default:
      v6 = 48;
      break;
  }
  *v2 = v6;
  return result;
}

void *static MedicationShape.allCases.getter()
{
  return &unk_1E7557268;
}

uint64_t MedicationShape.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCB125E0 + 4 * word_1BCB669B0[*v0]))(0x656C7573706163, 0xE700000000000000);
}

uint64_t sub_1BCB125E0()
{
  return 0x6950656C63726963;
}

uint64_t sub_1BCB127E4()
{
  return 0x6C6C695064;
}

uint64_t sub_1BCB127F8()
{
  return 0x6C69506E776F4464;
}

unint64_t sub_1BCB1283C()
{
  return 0xD000000000000010;
}

uint64_t sub_1BCB12858()
{
  return 0x65676E657A6F6CLL;
}

uint64_t sub_1BCB128C0()
{
  return 0x62617463656A6E69;
}

uint64_t sub_1BCB128E4()
{
  return 0x70706F7244657965;
}

uint64_t sub_1BCB12904()
{
  return 0x74656B636170;
}

uint64_t sub_1BCB12918()
{
  return 0x72656C61686E69;
}

uint64_t sub_1BCB1292C()
{
  return 6583657;
}

uint64_t sub_1BCB12940()
{
  return 0x526C616E69676176;
}

uint64_t sub_1BCB12960()
{
  return 0x6863746170;
}

uint64_t sub_1BCB12974()
{
  return 0x74656C6C7562;
}

uint64_t sub_1BCB12988()
{
  return 1886351972;
}

uint64_t sub_1BCB12998()
{
  return 1835102054;
}

uint64_t sub_1BCB129A8()
{
  return 0x6E6F6F7073;
}

uint64_t sub_1BCB129BC()
{
  return 0x656666456C61726FLL;
}

uint64_t sub_1BCB129E0()
{
  return 0x657A696C7562656ELL;
}

uint64_t sub_1BCB12A00()
{
  return 0x73656C62627562;
}

uint64_t sub_1BCB12A14()
{
  return 6580588;
}

uint64_t sub_1BCB12A24()
{
  return 6382964;
}

uint64_t sub_1BCB12A34()
{
  return sub_1BCB33938();
}

unint64_t sub_1BCB12A44()
{
  unint64_t result;

  result = qword_1EF4879E8;
  if (!qword_1EF4879E8)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for MedicationShape, &type metadata for MedicationShape);
    atomic_store(result, (unint64_t *)&qword_1EF4879E8);
  }
  return result;
}

uint64_t sub_1BCB12A88()
{
  sub_1BCB64A90();
  MedicationShape.rawValue.getter();
  sub_1BCB641CC();
  swift_bridgeObjectRelease();
  return sub_1BCB64AC0();
}

uint64_t sub_1BCB12AEC()
{
  MedicationShape.rawValue.getter();
  sub_1BCB641CC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BCB12B3C()
{
  sub_1BCB64A90();
  MedicationShape.rawValue.getter();
  sub_1BCB641CC();
  swift_bridgeObjectRelease();
  return sub_1BCB64AC0();
}

HealthMedicationsExperience::MedicationShape_optional sub_1BCB12B9C(Swift::String *a1)
{
  return MedicationShape.init(rawValue:)(*a1);
}

uint64_t sub_1BCB12BA8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = MedicationShape.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_1BCB12BD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF4879F0;
  if (!qword_1EF4879F0)
  {
    sub_1BCAF84F0(255, &qword_1EF4879F8, (uint64_t)&type metadata for MedicationShape, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF4879F0);
  }
  return result;
}

void sub_1BCB12C30(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7557268;
}

uint64_t getEnumTagSinglePayload for MedicationShape(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xD1)
    goto LABEL_17;
  if (a2 + 47 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 47) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 47;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 47;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 47;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x30;
  v8 = v6 - 48;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicationShape(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 47 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 47) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xD1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xD0)
    return ((uint64_t (*)(void))((char *)&loc_1BCB12D1C + 4 * byte_1BCB66A15[v4]))();
  *a1 = a2 + 47;
  return ((uint64_t (*)(void))((char *)sub_1BCB12D50 + 4 * byte_1BCB66A10[v4]))();
}

uint64_t sub_1BCB12D50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCB12D58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCB12D60);
  return result;
}

uint64_t sub_1BCB12D6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCB12D74);
  *(_BYTE *)result = a2 + 47;
  return result;
}

uint64_t sub_1BCB12D78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCB12D80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MedicationShape()
{
  return &type metadata for MedicationShape;
}

unint64_t _s27HealthMedicationsExperience21SearchItemDisplayablePAAE21primaryTextAttributesSDySo21NSAttributedStringKeyaypGvg_0()
{
  uint64_t inited;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;

  sub_1BCB1300C();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BCB66000;
  v1 = (void *)*MEMORY[0x1E0DC1138];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1138];
  v2 = sub_1BCAFC2E0(0, &qword_1EDA139B8);
  v3 = v1;
  *(_QWORD *)(inited + 40) = sub_1BCB645C8();
  v4 = (void *)*MEMORY[0x1E0DC1140];
  *(_QWORD *)(inited + 64) = v2;
  *(_QWORD *)(inited + 72) = v4;
  v5 = (void *)objc_opt_self();
  v6 = v4;
  v7 = objc_msgSend(v5, sel_labelColor);
  *(_QWORD *)(inited + 104) = sub_1BCAFC2E0(0, &qword_1EDA13F10);
  *(_QWORD *)(inited + 80) = v7;
  return sub_1BCB2C23C(inited);
}

unint64_t _s27HealthMedicationsExperience21SearchItemDisplayablePAAE23secondaryTextAttributesSDySo21NSAttributedStringKeyaypGvg_0()
{
  uint64_t inited;
  void **v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id v11;

  sub_1BCB1300C();
  inited = swift_initStackObject();
  v1 = (void **)MEMORY[0x1E0DC1138];
  *(_OWORD *)(inited + 16) = xmmword_1BCB66000;
  v2 = *v1;
  *(_QWORD *)(inited + 32) = *v1;
  v3 = (void *)objc_opt_self();
  v4 = *MEMORY[0x1E0DC4B10];
  v5 = v2;
  v6 = objc_msgSend(v3, sel_preferredFontForTextStyle_, v4);
  v7 = sub_1BCAFC2E0(0, &qword_1EDA139B8);
  *(_QWORD *)(inited + 40) = v6;
  v8 = (void *)*MEMORY[0x1E0DC1140];
  *(_QWORD *)(inited + 64) = v7;
  *(_QWORD *)(inited + 72) = v8;
  v9 = (void *)objc_opt_self();
  v10 = v8;
  v11 = objc_msgSend(v9, sel_labelColor);
  *(_QWORD *)(inited + 104) = sub_1BCAFC2E0(0, &qword_1EDA13F10);
  *(_QWORD *)(inited + 80) = v11;
  return sub_1BCB2C23C(inited);
}

uint64_t dispatch thunk of SearchItemDisplayable.searchItemDisplayString.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SearchItemDisplayable.primaryTextAttributes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SearchItemDisplayable.secondaryTextAttributes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

void sub_1BCB1300C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EDA139F8)
  {
    sub_1BCB13060();
    v0 = sub_1BCB649DC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EDA139F8);
  }
}

void sub_1BCB13060()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EDA139A8)
  {
    type metadata accessor for Key(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EDA139A8);
  }
}

uint64_t sub_1BCB130C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  int64_t v7;
  unint64_t v8;
  unint64_t i;
  id v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  v25 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!v5)
    goto LABEL_13;
LABEL_4:
  v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v8 | (v7 << 6); ; i = __clz(__rbit64(v15)) + (v7 << 6))
  {
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    if (v17 >> 62)
    {
      swift_bridgeObjectRetain_n();
      v24 = sub_1BCB648D4();
      result = swift_bridgeObjectRelease();
      if (!v24)
        goto LABEL_12;
    }
    else
    {
      v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (!v18)
        goto LABEL_12;
    }
    if ((v17 & 0xC000000000000001) == 0)
      break;
    v19 = (id)MEMORY[0x1BCCFCF20](0, v17);
LABEL_31:
    v20 = v19;
    v21 = objc_msgSend(v20, sel_routedDoseFormProducts);
    sub_1BCAFC2E0(0, (unint64_t *)&qword_1EF487748);
    v22 = sub_1BCB642D4();

    if (v22 >> 62)
    {
      swift_bridgeObjectRetain();
      v23 = sub_1BCB648D4();

      swift_bridgeObjectRelease();
    }
    else
    {
      v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);

    }
    swift_bridgeObjectRelease();
    if (!v23)
    {

      v20 = 0;
    }
    v10 = v20;
    v11 = sub_1BCB2B548(v17, v20);

    if ((v11 & 1) == 0)
    {
LABEL_12:
      result = swift_bridgeObjectRelease();
      if (v5)
        goto LABEL_4;
      goto LABEL_13;
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1BCAF6D9C(0, v25[2] + 1, 1, v25);
      v25 = (_QWORD *)result;
    }
    v13 = v25[2];
    v12 = v25[3];
    if (v13 >= v12 >> 1)
    {
      result = (uint64_t)sub_1BCAF6D9C((_QWORD *)(v12 > 1), v13 + 1, 1, v25);
      v25 = (_QWORD *)result;
    }
    v25[2] = v13 + 1;
    v25[v13 + 4] = v17;
    if (v5)
      goto LABEL_4;
LABEL_13:
    if (__OFADD__(v7++, 1))
      goto LABEL_45;
    if (v7 >= v26)
    {
LABEL_43:
      swift_release();
      return (uint64_t)v25;
    }
    v15 = *(_QWORD *)(v2 + 8 * v7);
    if (!v15)
    {
      v16 = v7 + 1;
      if (v7 + 1 >= v26)
        goto LABEL_43;
      v15 = *(_QWORD *)(v2 + 8 * v16);
      if (!v15)
      {
        v16 = v7 + 2;
        if (v7 + 2 >= v26)
          goto LABEL_43;
        v15 = *(_QWORD *)(v2 + 8 * v16);
        if (!v15)
        {
          v16 = v7 + 3;
          if (v7 + 3 >= v26)
            goto LABEL_43;
          v15 = *(_QWORD *)(v2 + 8 * v16);
          if (!v15)
          {
            v16 = v7 + 4;
            if (v7 + 4 >= v26)
              goto LABEL_43;
            v15 = *(_QWORD *)(v2 + 8 * v16);
            if (!v15)
            {
              while (1)
              {
                v7 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_46;
                if (v7 >= v26)
                  goto LABEL_43;
                v15 = *(_QWORD *)(v2 + 8 * v7);
                ++v16;
                if (v15)
                  goto LABEL_25;
              }
            }
          }
        }
      }
      v7 = v16;
    }
LABEL_25:
    v5 = (v15 - 1) & v15;
  }
  if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v19 = *(id *)(v17 + 32);
    goto LABEL_31;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

uint64_t MedicationOntologyContentProvider.minimumSearchTermLength.getter()
{
  return 2;
}

uint64_t MedicationOntologyContentProvider.medicationsPublisher(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v22 = *v2;
  sub_1BCB136B4();
  v6 = v5;
  v23 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCB13720();
  v10 = v9;
  v24 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCB137A4();
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1BCB641D8() < 3)
  {
    v25 = MEMORY[0x1E0DEE9D8];
    sub_1BCAF84F0(0, &qword_1EF487A08, (uint64_t)&type metadata for MedicationSearchCluster, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BCB63EE4();
    sub_1BCB052CC();
    sub_1BCB63ECC();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v6);
    sub_1BCAF7D24(&qword_1EF487A30, (uint64_t (*)(uint64_t))sub_1BCB13720, MEMORY[0x1E0C964C8]);
    v20 = sub_1BCB63F68();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v10);
  }
  else
  {
    v18 = (_QWORD *)swift_allocObject();
    v18[2] = a1;
    v18[3] = a2;
    v19 = v22;
    v18[4] = v2;
    v18[5] = v19;
    sub_1BCB1381C();
    sub_1BCAF7D24(&qword_1EF487A28, (uint64_t (*)(uint64_t))sub_1BCB1381C, MEMORY[0x1E0C95950]);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1BCB63F14();
    sub_1BCAF7D24(&qword_1EF487A38, (uint64_t (*)(uint64_t))sub_1BCB137A4, MEMORY[0x1E0C96148]);
    v20 = sub_1BCB63F68();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  return v20;
}

void sub_1BCB136B4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF487A00)
  {
    sub_1BCAF84F0(255, &qword_1EF487A08, (uint64_t)&type metadata for MedicationSearchCluster, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = sub_1BCB63ED8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF487A00);
  }
}

void sub_1BCB13720()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF487A10)
  {
    sub_1BCAF84F0(255, &qword_1EF487A08, (uint64_t)&type metadata for MedicationSearchCluster, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BCB052CC();
    v0 = sub_1BCB64ACC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF487A10);
  }
}

void sub_1BCB137A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF487A18)
  {
    sub_1BCB1381C();
    sub_1BCAF7D24(&qword_1EF487A28, (uint64_t (*)(uint64_t))sub_1BCB1381C, MEMORY[0x1E0C95950]);
    v0 = sub_1BCB63F20();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF487A18);
  }
}

void sub_1BCB1381C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF487A20)
  {
    type metadata accessor for HKHealthStore.HKMedicationClusterPublisher(255);
    sub_1BCAF84F0(255, &qword_1EF487A08, (uint64_t)&type metadata for MedicationSearchCluster, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BCAF7D24(&qword_1EF4873A0, type metadata accessor for HKHealthStore.HKMedicationClusterPublisher, (uint64_t)&protocol conformance descriptor for HKHealthStore.HKMedicationClusterPublisher);
    v0 = sub_1BCB63E30();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF487A20);
  }
}

uint64_t sub_1BCB138C8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Descriptor;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;

  v68 = a1;
  v69 = a4;
  v64 = a3;
  v67 = a2;
  v75 = a5;
  v65 = type metadata accessor for HKHealthStore.HKMedicationClusterPublisher(0);
  MEMORY[0x1E0C80A78](v65);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCB14B38();
  v10 = *(_QWORD *)(v9 - 8);
  v71 = v9;
  v72 = v10;
  MEMORY[0x1E0C80A78](v9);
  v66 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCB1381C();
  v13 = *(_QWORD *)(v12 - 8);
  v73 = v12;
  v74 = v13;
  MEMORY[0x1E0C80A78](v12);
  v70 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_1BCB63B3C();
  v15 = *(_QWORD *)(v76 - 8);
  v63 = *(_QWORD *)(v15 + 64);
  v16 = MEMORY[0x1E0C80A78](v76);
  v62 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v77 = (char *)&v59 - v18;
  Descriptor = type metadata accessor for HKMedicationClusterQueryDescriptor();
  MEMORY[0x1E0C80A78](Descriptor);
  v21 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1BCB639A4();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v59 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = a1;
  v79 = a2;
  sub_1BCB6398C();
  sub_1BCAF6098();
  v26 = MEMORY[0x1E0DEA968];
  v27 = sub_1BCB64658();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  v78 = v27;
  sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA14180, v26, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BCB0AA88();
  v78 = sub_1BCB640F4();
  v79 = v28;
  v59 = sub_1BCB641A8();
  v60 = v29;
  v30 = *MEMORY[0x1E0D2C250];
  *((_OWORD *)v21 + 1) = 0u;
  *((_OWORD *)v21 + 2) = 0u;
  v21[48] = 1;
  *((_QWORD *)v21 + 8) = 0;
  v31 = v76;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(&v21[*(int *)(Descriptor + 44)], 1, 1, v76);
  sub_1BCB64064();
  *v21 = 2;
  *((_QWORD *)v21 + 7) = v27;
  *((_QWORD *)v21 + 1) = v30;
  v32 = v77;
  sub_1BCB63B24();
  v64 = (_QWORD *)v64[2];
  v33 = v64;
  v78 = 0;
  v79 = 0xE000000000000000;
  sub_1BCB6479C();
  swift_bridgeObjectRelease();
  v78 = 0xD000000000000014;
  v79 = 0x80000001BCB6A9C0;
  sub_1BCB641F0();
  v34 = v78;
  v35 = v79;
  sub_1BCB14BCC((uint64_t)v21, (uint64_t)v8);
  v36 = (uint64_t)v8;
  v37 = &v8[*(int *)(type metadata accessor for HKHealthStore.HKMedicationClusterPublisher.Configuration(0) + 20)];
  *(_QWORD *)v37 = v34;
  *((_QWORD *)v37 + 1) = v35;
  *(_QWORD *)&v8[*(int *)(v65 + 20)] = v33;
  v38 = v62;
  v39 = v32;
  v40 = v31;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v62, v39, v31);
  v41 = *(unsigned __int8 *)(v15 + 80);
  v61 = v15;
  v42 = (v41 + 16) & ~v41;
  v43 = (v63 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  v44 = swift_allocObject();
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v44 + v42, v38, v40);
  v45 = (uint64_t *)(v44 + v43);
  v46 = v59;
  v47 = v60;
  *v45 = v59;
  v45[1] = v47;
  v48 = v69;
  *(_QWORD *)(v44 + ((v43 + 23) & 0xFFFFFFFFFFFFFFF8)) = v69;
  sub_1BCAFE7C0(0);
  sub_1BCAF7D24(&qword_1EF4873A0, type metadata accessor for HKHealthStore.HKMedicationClusterPublisher, (uint64_t)&protocol conformance descriptor for HKHealthStore.HKMedicationClusterPublisher);
  v49 = v64;
  v50 = v47;
  swift_bridgeObjectRetain();
  v51 = v66;
  sub_1BCB63F80();
  swift_release();
  sub_1BCAFC40C(v36, type metadata accessor for HKHealthStore.HKMedicationClusterPublisher);
  v52 = (_QWORD *)swift_allocObject();
  v52[2] = v46;
  v52[3] = v50;
  v52[4] = v48;
  sub_1BCAF84F0(0, &qword_1EF487A08, (uint64_t)&type metadata for MedicationSearchCluster, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  v53 = v50;
  swift_bridgeObjectRetain();
  v55 = v70;
  v54 = v71;
  sub_1BCB63E24();
  swift_release();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v51, v54);
  v56 = (_QWORD *)swift_allocObject();
  v56[2] = v46;
  v56[3] = v53;
  v56[4] = v68;
  v56[5] = v67;
  v56[6] = v48;
  swift_bridgeObjectRetain();
  v57 = v73;
  sub_1BCB63E24();
  swift_release();
  (*(void (**)(char *, uint64_t))(v74 + 8))(v55, v57);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v77, v76);
  return sub_1BCAFC40C((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for HKMedicationClusterQueryDescriptor);
}

uint64_t sub_1BCB13E5C()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BCB13E88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BCB138C8(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD **)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_1BCB13E94@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  v8 = sub_1BCB63B3C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  sub_1BCB63B24();
  sub_1BCB63AE8();
  v14 = v13;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (qword_1EDA14510 != -1)
    swift_once();
  v15 = sub_1BCB63DDC();
  __swift_project_value_buffer(v15, (uint64_t)qword_1EDA14518);
  swift_bridgeObjectRetain_n();
  v16 = sub_1BCB63DD0();
  v17 = sub_1BCB644F0();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc();
    v19 = swift_slowAlloc();
    v26 = a4;
    v20 = v19;
    v28 = v19;
    *(_DWORD *)v18 = 136446722;
    v21 = sub_1BCB64B14();
    v27 = sub_1BCB010C8(v21, v22, &v28);
    sub_1BCB64640();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    swift_bridgeObjectRetain();
    v27 = sub_1BCB010C8(a2, a3, &v28);
    sub_1BCB64640();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v18 + 22) = 2048;
    v27 = v14;
    sub_1BCB64640();
    _os_log_impl(&dword_1BCAF3000, v16, v17, "[%{public}s] searching for [%s] took: %f", (uint8_t *)v18, 0x20u);
    swift_arrayDestroy();
    v23 = v20;
    a4 = v26;
    MEMORY[0x1BCCFD928](v23, -1, -1);
    MEMORY[0x1BCCFD928](v18, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  *a4 = v12;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BCB14128@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;

  v43 = a3;
  v44 = a4;
  v41 = a2;
  v39 = a5;
  v42 = sub_1BCB63B3C();
  v40 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42);
  v7 = *a1;
  v38 = (uint64_t)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCB63B24();
  v49 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  if (v7 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain_n();
    v8 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
    if (v8)
      goto LABEL_3;
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
    {
LABEL_3:
      v47 = v7 & 0xC000000000000001;
      v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      v10 = 4;
      v46 = MEMORY[0x1E0DEE9B0] + 8;
      v45 = xmmword_1BCB66010;
      while (1)
      {
        v12 = v10 - 4;
        if (v47)
        {
          v13 = (id)MEMORY[0x1BCCFCF20](v10 - 4, v7);
          v14 = v10 - 3;
          if (__OFADD__(v12, 1))
            goto LABEL_26;
        }
        else
        {
          v13 = *(id *)(v7 + 8 * v10);
          v14 = v10 - 3;
          if (__OFADD__(v12, 1))
          {
LABEL_26:
            __break(1u);
LABEL_27:
            __break(1u);
LABEL_28:
            __break(1u);
            goto LABEL_29;
          }
        }
        v15 = v13;
        v16 = objc_msgSend(v15, sel_routedDoseFormProducts);
        sub_1BCAFC2E0(0, (unint64_t *)&qword_1EF487748);
        v17 = sub_1BCB642D4();

        if (v17 >> 62)
        {
          swift_bridgeObjectRetain();
          v18 = sub_1BCB648D4();
          swift_bridgeObjectRelease();
        }
        else
        {
          v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        if (v18)
        {
          v19 = v15;
        }
        else
        {

          v19 = 0;
        }
        v21 = sub_1BCB0E91C(v19);
        v22 = v9[2];
        v23 = (v20 & 1) == 0;
        v24 = v22 + v23;
        if (__OFADD__(v22, v23))
          goto LABEL_27;
        v25 = v20;
        if (v9[3] < v24)
        {
          sub_1BCB290BC(v24, 1);
          v9 = v49;
          v26 = sub_1BCB0E91C(v19);
          if ((v25 & 1) != (v27 & 1))
          {
            sub_1BCAF84F0(0, &qword_1EF487A60, (uint64_t)&type metadata for MedicationGroupingKey, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            result = sub_1BCB64A3C();
            __break(1u);
            return result;
          }
          v21 = v26;
        }
        if ((v25 & 1) != 0)
        {

          v11 = (_QWORD *)(v9[7] + 8 * v21);
          MEMORY[0x1BCCFCA1C]();
          if (*(_QWORD *)((*v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_1BCB64304();
          sub_1BCB64334();
          sub_1BCB642EC();
        }
        else
        {
          sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA14550, v46, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
          v28 = swift_allocObject();
          *(_OWORD *)(v28 + 16) = v45;
          *(_QWORD *)(v28 + 32) = v15;
          v48 = v28;
          sub_1BCB642EC();
          v29 = v48;
          v9[(v21 >> 6) + 8] |= 1 << v21;
          v30 = 8 * v21;
          *(_QWORD *)(v9[6] + v30) = v19;
          *(_QWORD *)(v9[7] + v30) = v29;
          v31 = v9[2];
          v32 = __OFADD__(v31, 1);
          v33 = v31 + 1;
          if (v32)
            goto LABEL_28;
          v9[2] = v33;
        }
        ++v10;
        if (v14 == v8)
          goto LABEL_31;
      }
    }
  }
  v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_31:
  swift_bridgeObjectRelease();
  v34 = sub_1BCB130C8((uint64_t)v9);
  swift_release();
  *v39 = v34;
  v35 = v38;
  sub_1BCB14684(v38, v41, v43, v44, "[%{public}s] grouping for [%s] took: %f");
  return (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v35, v42);
}

uint64_t sub_1BCB14500@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v20 = a3;
  v21 = a6;
  v12 = sub_1BCB63B3C();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  sub_1BCB63B24();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = MEMORY[0x1E0DEE9E0];
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = v17;
  v18[3] = a4;
  v18[4] = a5;
  v22 = v16;
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1BCB16F50(&v22, a4, a5, sub_1BCB14DBC);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *a7 = v22;
  sub_1BCB14684((uint64_t)v15, a2, v20, v21, "[%{public}s] sorting for [%s] took: %f");
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

void sub_1BCB14684(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = sub_1BCB63B3C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCB63B24();
  sub_1BCB63AE8();
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (qword_1EDA14510 != -1)
    swift_once();
  v14 = sub_1BCB63DDC();
  __swift_project_value_buffer(v14, (uint64_t)qword_1EDA14518);
  swift_bridgeObjectRetain_n();
  v15 = sub_1BCB63DD0();
  v16 = sub_1BCB644F0();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    v22 = v18;
    *(_DWORD *)v17 = 136446722;
    v19 = sub_1BCB64B14();
    v21 = sub_1BCB010C8(v19, v20, &v22);
    sub_1BCB64640();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    swift_bridgeObjectRetain();
    v21 = sub_1BCB010C8(a2, a3, &v22);
    sub_1BCB64640();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v17 + 22) = 2048;
    v21 = v13;
    sub_1BCB64640();
    _os_log_impl(&dword_1BCAF3000, v15, v16, a5, (uint8_t *)v17, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BCCFD928](v18, -1, -1);
    MEMORY[0x1BCCFD928](v17, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_1BCB148F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_1BCAF84F0(0, &qword_1EF487A48, MEMORY[0x1E0DEA2D0], MEMORY[0x1E0DECDE0]);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v22 - v13;
  v15 = (uint64_t *)(a3 + 16);
  swift_beginAccess();
  v16 = *(_QWORD *)(a3 + 16);
  if (!*(_QWORD *)(v16 + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain();
  v17 = sub_1BCB0E7B0(a1, a2);
  if ((v18 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    swift_endAccess();
    v25 = a1;
    v26 = a2;
    v23 = a4;
    v24 = a5;
    sub_1BCB17040();
    sub_1BCB640E8();
    sub_1BCB17084();
    sub_1BCB64460();
    sub_1BCB64484();
    v19 = sub_1BCB64478();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *v15;
    *v15 = 0x8000000000000000;
    sub_1BCB0FA00(v19, a1, a2, isUniquelyReferenced_nonNull_native);
    *v15 = v23;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    return v19;
  }
  v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
  swift_endAccess();
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t sub_1BCB14B00()
{
  return 2;
}

uint64_t sub_1BCB14B08(uint64_t a1, uint64_t a2)
{
  return MedicationOntologyContentProvider.medicationsPublisher(with:)(a1, a2);
}

uint64_t dispatch thunk of MedicationOntologySearching.minimumSearchTermLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of MedicationOntologySearching.medicationsPublisher(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

void sub_1BCB14B38()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF487A40)
  {
    type metadata accessor for HKHealthStore.HKMedicationClusterPublisher(255);
    sub_1BCAFE7C0(255);
    sub_1BCAF7D24(&qword_1EF4873A0, type metadata accessor for HKHealthStore.HKMedicationClusterPublisher, (uint64_t)&protocol conformance descriptor for HKHealthStore.HKMedicationClusterPublisher);
    v0 = sub_1BCB63E30();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF487A40);
  }
}

uint64_t sub_1BCB14BCC(uint64_t a1, uint64_t a2)
{
  uint64_t Descriptor;

  Descriptor = type metadata accessor for HKMedicationClusterQueryDescriptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Descriptor - 8) + 16))(a2, a1, Descriptor);
  return a2;
}

uint64_t sub_1BCB14C10()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1BCB63B3C();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BCB14C90@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = sub_1BCB63B3C();
  v6 = v2
     + ((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64)
       + ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1BCB13E94(a1, *(_QWORD *)v6, *(_QWORD *)(v6 + 8), a2);
}

uint64_t sub_1BCB14D00()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BCB14D24@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1BCB14128(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_1BCB14D30()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BCB14D5C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1BCB14500(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), a2);
}

uint64_t sub_1BCB14D6C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BCB14D90()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BCB14DBC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1BCB148F8(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_1BCB14DC8(char *__src, char *a2, unint64_t a3, char *__dst, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t))
{
  char *v7;
  char *v8;
  char *v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char *v32;
  uint64_t result;
  char *v34;
  char *v35;
  unsigned __int8 v37;
  char *v38;
  unint64_t v39;
  char *v41;
  unsigned __int8 v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  const void *v47;
  char *v48;

  v7 = __dst;
  v8 = a2;
  v9 = __src;
  v10 = a2 - __src;
  v11 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v11 = a2 - __src;
  v12 = v11 >> 3;
  v13 = a3 - (_QWORD)a2;
  v14 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v14 = a3 - (_QWORD)a2;
  v15 = v14 >> 3;
  v48 = __src;
  v47 = __dst;
  if (v12 >= v14 >> 3)
  {
    if (v13 < -7)
      goto LABEL_51;
    if (__dst != a2 || &a2[8 * v15] <= __dst)
      memmove(__dst, a2, 8 * v15);
    v23 = &v7[8 * v15];
    v46 = v23;
    v48 = v8;
    if (v9 >= v8 || v13 < 8)
      goto LABEL_50;
    v24 = (char *)(a3 - 8);
    v25 = v8;
    v45 = v7;
    while (1)
    {
      v43 = v8;
      v39 = (unint64_t)v23;
      v41 = v24 + 8;
      v34 = v23 - 8;
      v35 = v25 - 8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      MedicationSearchCluster.primaryName.getter();
      v26 = sub_1BCB64244();
      swift_bridgeObjectRelease();
      MedicationSearchCluster.primaryName.getter();
      v37 = sub_1BCB64244();
      swift_bridgeObjectRelease();
      v27 = MedicationSearchCluster.primaryName.getter();
      v28 = a7(v27);
      swift_bridgeObjectRelease();
      v29 = MedicationSearchCluster.primaryName.getter();
      v30 = a7(v29);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v31 = ((v26 ^ v37) & 1) != 0 ? v26 : v28 < v30;
      if ((v31 & 1) != 0)
        break;
      v46 = v34;
      if ((unint64_t)v41 < v39 || (unint64_t)v24 >= v39)
      {
        *(_QWORD *)v24 = *(_QWORD *)v34;
        v25 = v43;
        v23 = v34;
        goto LABEL_48;
      }
      v32 = v45;
      if (v41 != (char *)v39)
        *(_QWORD *)v24 = *(_QWORD *)v34;
      v25 = v43;
      v23 = v34;
      if (v43 <= v9)
        goto LABEL_50;
LABEL_49:
      v24 -= 8;
      v8 = v25;
      if (v23 <= v32)
        goto LABEL_50;
    }
    v23 = (char *)v39;
    v25 = v35;
    if (v41 != v43 || v24 >= v43)
      *(_QWORD *)v24 = *(_QWORD *)v35;
    v48 = v35;
LABEL_48:
    v32 = v45;
    if (v25 <= v9)
      goto LABEL_50;
    goto LABEL_49;
  }
  if (v10 >= -7)
  {
    if (__dst != __src || &__src[8 * v12] <= __dst)
      memmove(__dst, __src, 8 * v12);
    v38 = &v7[8 * v12];
    v46 = v38;
    if ((unint64_t)v8 < a3 && v10 >= 8)
    {
      do
      {
        v44 = v7;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        MedicationSearchCluster.primaryName.getter();
        v16 = sub_1BCB64244();
        swift_bridgeObjectRelease();
        MedicationSearchCluster.primaryName.getter();
        v42 = sub_1BCB64244();
        swift_bridgeObjectRelease();
        v17 = MedicationSearchCluster.primaryName.getter();
        v18 = a7(v17);
        swift_bridgeObjectRelease();
        v19 = MedicationSearchCluster.primaryName.getter();
        v20 = a7(v19);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (((v16 ^ v42) & 1) != 0)
          v21 = v16;
        else
          v21 = v18 < v20;
        if (v21)
        {
          v22 = v8 + 8;
          v7 = v44;
          if (v9 < v8 || v9 >= v22 || v9 != v8)
            *(_QWORD *)v9 = *(_QWORD *)v8;
        }
        else
        {
          if (v9 != v44)
            *(_QWORD *)v9 = *(_QWORD *)v44;
          v7 = v44 + 8;
          v47 = v44 + 8;
          v22 = v8;
        }
        v9 += 8;
        if (v7 >= v38)
          break;
        v8 = v22;
      }
      while ((unint64_t)v22 < a3);
      v48 = v9;
    }
LABEL_50:
    sub_1BCB28F28((void **)&v48, &v47, &v46);
    return 1;
  }
LABEL_51:
  swift_release();
  swift_bridgeObjectRelease();
  result = sub_1BCB64910();
  __break(1u);
  return result;
}

uint64_t sub_1BCB152AC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t))
{
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  unsigned __int8 v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  BOOL v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[8];
  uint64_t v52[11];

  v52[10] = a6;
  v41 = result;
  if (a3 == a2)
    return result;
  v43 = *a4;
  v7 = (unint64_t *)(*a4 + 8 * a3 - 8);
LABEL_5:
  v44 = a3;
  v8 = *(_QWORD *)(v43 + 8 * a3);
  v45 = v41;
  v42 = v7;
  while (1)
  {
    v9 = *v7;
    v10 = v8 >> 62;
    if (v8 >> 62)
      break;
    v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    result = swift_bridgeObjectRetain();
    if (v11)
      goto LABEL_8;
LABEL_13:
    swift_bridgeObjectRelease();
    if (qword_1EDA14148 != -1)
      swift_once();
    v14 = (id)qword_1EDA14130;
    swift_bridgeObjectRetain();
    sub_1BCB63A34();
    swift_bridgeObjectRelease();

LABEL_16:
    v15 = sub_1BCB64244();
    swift_bridgeObjectRelease();
    v16 = v9 >> 62;
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      result = sub_1BCB648D4();
      v47 = v15;
      if (!result)
      {
LABEL_23:
        swift_bridgeObjectRelease();
        if (qword_1EDA14148 != -1)
          swift_once();
        v20 = (id)qword_1EDA14130;
        swift_bridgeObjectRetain();
        sub_1BCB63A34();
        swift_bridgeObjectRelease();

        v16 = v9 >> 62;
        v10 = v8 >> 62;
        goto LABEL_26;
      }
    }
    else
    {
      v17 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      v47 = v15;
      if (!v17)
        goto LABEL_23;
    }
    if ((v9 & 0xC000000000000001) != 0)
    {
      v18 = (id)MEMORY[0x1BCCFCF20](0, v9);
    }
    else
    {
      if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_58;
      v18 = *(id *)(v9 + 32);
    }
    v19 = v18;
    swift_bridgeObjectRelease();
    sub_1BCB09BFC(&v50);
    swift_bridgeObjectRetain();
    sub_1BCB0A954((uint64_t)&v50);

LABEL_26:
    v21 = sub_1BCB64244();
    swift_bridgeObjectRelease();
    if (v10)
    {
      swift_bridgeObjectRetain();
      result = sub_1BCB648D4();
      v46 = v21;
      if (!result)
      {
LABEL_33:
        swift_bridgeObjectRelease();
        if (qword_1EDA14148 != -1)
          swift_once();
        v27 = (id)qword_1EDA14130;
        swift_bridgeObjectRetain();
        v25 = sub_1BCB63A34();
        v26 = v28;
        swift_bridgeObjectRelease();

        goto LABEL_36;
      }
    }
    else
    {
      v22 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      v46 = v21;
      if (!v22)
        goto LABEL_33;
    }
    if ((v8 & 0xC000000000000001) != 0)
    {
      v23 = (id)MEMORY[0x1BCCFCF20](0, v8);
    }
    else
    {
      if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_59;
      v23 = *(id *)(v8 + 32);
    }
    v24 = v23;
    swift_bridgeObjectRelease();
    sub_1BCB09BFC(v51);
    v25 = v51[0];
    v26 = v51[1];
    swift_bridgeObjectRetain();
    sub_1BCB0A954((uint64_t)v51);

LABEL_36:
    v29 = a7(v25, v26);
    swift_bridgeObjectRelease();
    if (v16)
    {
      swift_bridgeObjectRetain();
      result = sub_1BCB648D4();
      if (result)
      {
LABEL_38:
        if ((v9 & 0xC000000000000001) != 0)
        {
          v31 = (id)MEMORY[0x1BCCFCF20](0, v9);
        }
        else
        {
          if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_60;
          v31 = *(id *)(v9 + 32);
        }
        v32 = v31;
        swift_bridgeObjectRelease();
        sub_1BCB09BFC(v52);
        v34 = v52[0];
        v33 = v52[1];
        swift_bridgeObjectRetain();
        sub_1BCB0A954((uint64_t)v52);

        goto LABEL_46;
      }
    }
    else
    {
      v30 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v30)
        goto LABEL_38;
    }
    swift_bridgeObjectRelease();
    if (qword_1EDA14148 != -1)
      swift_once();
    v35 = (id)qword_1EDA14130;
    swift_bridgeObjectRetain();
    v34 = sub_1BCB63A34();
    v33 = v36;
    swift_bridgeObjectRelease();

LABEL_46:
    v37 = a7(v34, v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (((v47 ^ v46) & 1) != 0)
      v38 = v47;
    else
      v38 = v29 < v37;
    if (v38)
    {
      if (!v43)
        goto LABEL_61;
      v39 = *v7;
      v8 = v7[1];
      *v7 = v8;
      v7[1] = v39;
      --v7;
      if (v44 != ++v45)
        continue;
    }
    a3 = v44 + 1;
    v7 = v42 + 1;
    if (v44 + 1 == a2)
      return result;
    goto LABEL_5;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  result = sub_1BCB648D4();
  if (!result)
    goto LABEL_13;
LABEL_8:
  if ((v8 & 0xC000000000000001) != 0)
  {
    v12 = (id)MEMORY[0x1BCCFCF20](0, v8);
    goto LABEL_11;
  }
  if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v12 = *(id *)(v8 + 32);
LABEL_11:
    v13 = v12;
    swift_bridgeObjectRelease();
    sub_1BCB09BFC(&v49);
    swift_bridgeObjectRetain();
    sub_1BCB0A954((uint64_t)&v49);

    goto LABEL_16;
  }
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
  return result;
}

uint64_t sub_1BCB159A4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  char v31;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  unsigned __int8 v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  id v69;
  char v70;
  uint64_t v71;
  id v72;
  void *v73;
  id v74;
  unsigned __int8 v75;
  uint64_t v76;
  id v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  BOOL v121;
  uint64_t v122;
  char v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  unint64_t v155;
  char *v156;
  unint64_t v157;
  uint64_t result;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  BOOL v166;
  _QWORD *v167;
  uint64_t v168;
  char *__dst;
  uint64_t v170;
  char *v171;
  char *v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unsigned __int8 v182;
  unint64_t *v183;
  unsigned __int8 v184;
  BOOL v185;
  uint64_t v186;
  char *v187;
  unsigned __int8 v188;
  BOOL v189;
  int v190[2];
  uint64_t v193;
  uint64_t v194;
  uint64_t v195[8];
  uint64_t v196[8];
  uint64_t v197;
  uint64_t v198;
  uint64_t v199[8];
  uint64_t v200[9];
  uint64_t v201;

  v7 = a1[1];
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  v8 = sub_1BCB649C4();
  if (v8 >= v7)
  {
    if (v7 < 0)
      goto LABEL_240;
    if (v7)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1BCB152AC(0, v7, 1, a1, a2, a3, a4);
      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease_n();
    }
LABEL_210:
    swift_bridgeObjectRelease();
    return swift_release_n();
  }
  if (v7 >= 0)
    v9 = v7;
  else
    v9 = v7 + 1;
  if (v7 < -1)
    goto LABEL_248;
  v168 = v7;
  v162 = v8;
  v175 = v4;
  v159 = a1;
  if (v7 < 2)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v7 != 1)
    {
      v96 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v13 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_197:
      if (v96 < 2)
      {
LABEL_208:
        swift_bridgeObjectRelease();
        *(_QWORD *)(v11 + 16) = 0;
        swift_release();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        goto LABEL_210;
      }
      v148 = *v159;
      v170 = v11;
      *(_QWORD *)v190 = *v159;
      while (1)
      {
        v149 = v96 - 2;
        if (v96 < 2)
          goto LABEL_234;
        if (!v148)
          goto LABEL_247;
        v174 = v13;
        v150 = v13 + 32;
        v151 = *(_QWORD *)&v13[16 * v149 + 32];
        v152 = *(_QWORD *)&v150[16 * v96 - 8];
        v153 = (char *)(v148 + 8 * v151);
        v154 = (char *)(v148 + 8 * *(_QWORD *)&v150[16 * v96 - 16]);
        v155 = v148 + 8 * v152;
        swift_bridgeObjectRetain();
        swift_retain();
        sub_1BCB14DC8(v153, v154, v155, __dst, a2, a3, (uint64_t (*)(uint64_t))a4);
        if (v175)
          goto LABEL_209;
        swift_bridgeObjectRelease();
        swift_release();
        if (v152 < v151)
          goto LABEL_235;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v174 = sub_1BCB2908C((uint64_t)v174);
        if (v149 >= *((_QWORD *)v174 + 2))
          goto LABEL_236;
        v156 = &v174[16 * v149 + 32];
        *(_QWORD *)v156 = v151;
        *((_QWORD *)v156 + 1) = v152;
        v157 = *((_QWORD *)v174 + 2);
        if (v96 > v157)
          goto LABEL_237;
        v13 = v174;
        memmove(&v174[16 * v96 + 16], &v174[16 * v96 + 32], 16 * (v157 - v96));
        *((_QWORD *)v174 + 2) = v157 - 1;
        v96 = v157 - 1;
        v11 = v170;
        v148 = *(_QWORD *)v190;
        if (v157 <= 2)
          goto LABEL_208;
      }
    }
  }
  else
  {
    v10 = v9 >> 1;
    v11 = sub_1BCB6431C();
    *(_QWORD *)(v11 + 16) = v10;
    __dst = (char *)(v11 + 32);
  }
  v12 = 0;
  v176 = *a1;
  v160 = *a1 - 8;
  v161 = *a1 + 16;
  v13 = (char *)MEMORY[0x1E0DEE9D8];
  v180 = a3;
  v170 = v11;
  v14 = v7;
LABEL_13:
  v15 = v12;
  v16 = v12 + 1;
  if (v12 + 1 < v14)
  {
    v171 = v13;
    v18 = *(_QWORD *)(v176 + 8 * v12);
    v201 = *(_QWORD *)(v176 + 8 * v16);
    v17 = v201;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MedicationSearchCluster.primaryName.getter();
    v188 = sub_1BCB64244();
    swift_bridgeObjectRelease();
    v201 = v18;
    MedicationSearchCluster.primaryName.getter();
    v184 = sub_1BCB64244();
    swift_bridgeObjectRelease();
    v201 = v17;
    v19 = MedicationSearchCluster.primaryName.getter();
    v181 = ((uint64_t (*)(uint64_t))a4)(v19);
    swift_bridgeObjectRelease();
    v201 = v18;
    v20 = MedicationSearchCluster.primaryName.getter();
    v21 = ((uint64_t (*)(uint64_t))a4)(v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (((v188 ^ v184) & 1) != 0)
      v22 = v188;
    else
      v22 = v181 < v21;
    v166 = v22;
    v16 = v15 + 2;
    v164 = v15;
    if (v15 + 2 < v14)
    {
      v23 = (uint64_t *)(v161 + 8 * v15);
      while (1)
      {
        v25 = *(v23 - 1);
        v24 = *v23;
        v26 = (unint64_t)*v23 >> 62;
        if (v26)
        {
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          v27 = sub_1BCB648D4();
        }
        else
        {
          v27 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
        }
        v177 = v16;
        if (v27)
        {
          if ((v24 & 0xC000000000000001) != 0)
          {
            v28 = (id)MEMORY[0x1BCCFCF20](0, v24);
          }
          else
          {
            if (!*(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_229;
            v28 = *(id *)(v24 + 32);
          }
          v29 = v28;
          swift_bridgeObjectRelease();
          sub_1BCB09BFC(&v193);
          swift_bridgeObjectRetain();
          sub_1BCB0A954((uint64_t)&v193);

        }
        else
        {
          swift_bridgeObjectRelease();
          if (qword_1EDA14148 != -1)
            swift_once();
          v30 = (id)qword_1EDA14130;
          swift_bridgeObjectRetain();
          sub_1BCB63A34();
          swift_bridgeObjectRelease();

        }
        v31 = sub_1BCB64244();
        swift_bridgeObjectRelease();
        if (v25 >> 62)
        {
          swift_bridgeObjectRetain();
          v185 = v31;
          if (!sub_1BCB648D4())
          {
LABEL_37:
            swift_bridgeObjectRelease();
            if (qword_1EDA14148 != -1)
              swift_once();
            v35 = (id)qword_1EDA14130;
            swift_bridgeObjectRetain();
            sub_1BCB63A34();
            swift_bridgeObjectRelease();

            goto LABEL_40;
          }
        }
        else
        {
          v32 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          v185 = v31;
          if (!v32)
            goto LABEL_37;
        }
        if ((v25 & 0xC000000000000001) != 0)
        {
          v33 = (id)MEMORY[0x1BCCFCF20](0, v25);
        }
        else
        {
          if (!*(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_230;
          v33 = *(id *)(v25 + 32);
        }
        v34 = v33;
        swift_bridgeObjectRelease();
        sub_1BCB09BFC(&v194);
        swift_bridgeObjectRetain();
        sub_1BCB0A954((uint64_t)&v194);

LABEL_40:
        v36 = sub_1BCB64244();
        swift_bridgeObjectRelease();
        if (v26)
        {
          swift_bridgeObjectRetain();
          v182 = v36;
          if (!sub_1BCB648D4())
          {
LABEL_47:
            swift_bridgeObjectRelease();
            if (qword_1EDA14148 != -1)
              swift_once();
            v42 = (id)qword_1EDA14130;
            swift_bridgeObjectRetain();
            v40 = sub_1BCB63A34();
            v41 = v43;
            swift_bridgeObjectRelease();

            goto LABEL_50;
          }
        }
        else
        {
          v37 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          v182 = v36;
          if (!v37)
            goto LABEL_47;
        }
        if ((v24 & 0xC000000000000001) != 0)
        {
          v38 = (id)MEMORY[0x1BCCFCF20](0, v24);
        }
        else
        {
          if (!*(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_231;
          v38 = *(id *)(v24 + 32);
        }
        v39 = v38;
        swift_bridgeObjectRelease();
        sub_1BCB09BFC(v195);
        v40 = v195[0];
        v41 = v195[1];
        swift_bridgeObjectRetain();
        sub_1BCB0A954((uint64_t)v195);

LABEL_50:
        v44 = a4(v40, v41);
        swift_bridgeObjectRelease();
        if (v25 >> 62)
        {
          swift_bridgeObjectRetain();
          if (!sub_1BCB648D4())
          {
LABEL_57:
            swift_bridgeObjectRelease();
            if (qword_1EDA14148 != -1)
              swift_once();
            v50 = (id)qword_1EDA14130;
            swift_bridgeObjectRetain();
            v48 = sub_1BCB63A34();
            v49 = v51;
            swift_bridgeObjectRelease();

            goto LABEL_60;
          }
        }
        else
        {
          v45 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v45)
            goto LABEL_57;
        }
        if ((v25 & 0xC000000000000001) != 0)
        {
          v46 = (id)MEMORY[0x1BCCFCF20](0, v25);
        }
        else
        {
          if (!*(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_232;
          v46 = *(id *)(v25 + 32);
        }
        v47 = v46;
        swift_bridgeObjectRelease();
        sub_1BCB09BFC(v196);
        v48 = v196[0];
        v49 = v196[1];
        swift_bridgeObjectRetain();
        sub_1BCB0A954((uint64_t)v196);

LABEL_60:
        v52 = a4(v48, v49);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (((v185 ^ v182) & 1) != 0)
          v53 = v185;
        else
          v53 = v44 < v52;
        if (v166 != v53)
        {
          v16 = v177;
          a3 = v180;
          break;
        }
        a3 = v180;
        v16 = v177 + 1;
        ++v23;
        if (v168 == v177 + 1)
        {
          v16 = v168;
          break;
        }
      }
    }
    v11 = v170;
    v13 = v171;
    v15 = v164;
    if (v166)
    {
      if (v16 < v164)
        goto LABEL_243;
      if (v164 < v16)
      {
        v54 = (uint64_t *)(v160 + 8 * v16);
        v55 = v16;
        v56 = v164;
        v57 = (uint64_t *)(v176 + 8 * v164);
        do
        {
          if (v56 != --v55)
          {
            if (!v176)
              goto LABEL_246;
            v58 = *v57;
            *v57 = *v54;
            *v54 = v58;
          }
          ++v56;
          --v54;
          ++v57;
        }
        while (v56 < v55);
      }
    }
  }
  if (v16 >= v168)
    goto LABEL_144;
  if (__OFSUB__(v16, v15))
    goto LABEL_239;
  if (v16 - v15 >= v162)
    goto LABEL_144;
  if (__OFADD__(v15, v162))
    goto LABEL_241;
  v59 = v168;
  if (v15 + v162 < v168)
    v59 = v15 + v162;
  if (v59 < v15)
    goto LABEL_242;
  if (v16 == v59)
    goto LABEL_144;
  v163 = v59;
  v165 = v15;
  v172 = v13;
  v60 = (_QWORD *)(v160 + 8 * v16);
LABEL_91:
  v178 = v16;
  v62 = *(_QWORD *)(v176 + 8 * v16);
  v63 = v165;
  v167 = v60;
  v64 = v60;
  while (1)
  {
    v65 = *v64;
    if (v62 >> 62)
      break;
    v66 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v183 = v64;
    v186 = v63;
    if (v66)
      goto LABEL_94;
LABEL_99:
    swift_bridgeObjectRelease();
    if (qword_1EDA14148 != -1)
      swift_once();
    v69 = (id)qword_1EDA14130;
    swift_bridgeObjectRetain();
    sub_1BCB63A34();
    swift_bridgeObjectRelease();

LABEL_102:
    v70 = sub_1BCB64244();
    swift_bridgeObjectRelease();
    if (v65 >> 62)
    {
      swift_bridgeObjectRetain();
      v189 = v70;
      if (!sub_1BCB648D4())
      {
LABEL_109:
        swift_bridgeObjectRelease();
        if (qword_1EDA14148 != -1)
          swift_once();
        v74 = (id)qword_1EDA14130;
        swift_bridgeObjectRetain();
        sub_1BCB63A34();
        swift_bridgeObjectRelease();

        goto LABEL_112;
      }
    }
    else
    {
      v71 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      v189 = v70;
      if (!v71)
        goto LABEL_109;
    }
    if ((v65 & 0xC000000000000001) != 0)
    {
      v72 = (id)MEMORY[0x1BCCFCF20](0, v65);
    }
    else
    {
      if (!*(_QWORD *)((v65 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_212;
      v72 = *(id *)(v65 + 32);
    }
    v73 = v72;
    swift_bridgeObjectRelease();
    sub_1BCB09BFC(&v198);
    swift_bridgeObjectRetain();
    sub_1BCB0A954((uint64_t)&v198);

LABEL_112:
    v75 = sub_1BCB64244();
    swift_bridgeObjectRelease();
    if (v62 >> 62)
    {
      swift_bridgeObjectRetain();
      if (!sub_1BCB648D4())
      {
LABEL_119:
        swift_bridgeObjectRelease();
        if (qword_1EDA14148 != -1)
          swift_once();
        v81 = (id)qword_1EDA14130;
        swift_bridgeObjectRetain();
        v79 = sub_1BCB63A34();
        v80 = v82;
        swift_bridgeObjectRelease();

        goto LABEL_122;
      }
    }
    else
    {
      v76 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v76)
        goto LABEL_119;
    }
    if ((v62 & 0xC000000000000001) != 0)
    {
      v77 = (id)MEMORY[0x1BCCFCF20](0, v62);
    }
    else
    {
      if (!*(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_213;
      v77 = *(id *)(v62 + 32);
    }
    v78 = v77;
    swift_bridgeObjectRelease();
    sub_1BCB09BFC(v199);
    v79 = v199[0];
    v80 = v199[1];
    swift_bridgeObjectRetain();
    sub_1BCB0A954((uint64_t)v199);

LABEL_122:
    v83 = a4(v79, v80);
    swift_bridgeObjectRelease();
    if (v65 >> 62)
    {
      swift_bridgeObjectRetain();
      if (!sub_1BCB648D4())
      {
LABEL_129:
        swift_bridgeObjectRelease();
        if (qword_1EDA14148 != -1)
          swift_once();
        v89 = (id)qword_1EDA14130;
        swift_bridgeObjectRetain();
        v87 = sub_1BCB63A34();
        v88 = v90;
        swift_bridgeObjectRelease();

        goto LABEL_132;
      }
    }
    else
    {
      v84 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v84)
        goto LABEL_129;
    }
    if ((v65 & 0xC000000000000001) != 0)
    {
      v85 = (id)MEMORY[0x1BCCFCF20](0, v65);
    }
    else
    {
      if (!*(_QWORD *)((v65 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_214;
      v85 = *(id *)(v65 + 32);
    }
    v86 = v85;
    swift_bridgeObjectRelease();
    sub_1BCB09BFC(v200);
    v87 = v200[0];
    v88 = v200[1];
    swift_bridgeObjectRetain();
    sub_1BCB0A954((uint64_t)v200);

LABEL_132:
    v91 = a4(v87, v88);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (((v189 ^ v75) & 1) != 0)
      v92 = v189;
    else
      v92 = v83 < v91;
    if (!v92)
    {
      v61 = v178;
      a3 = v180;
LABEL_90:
      v16 = v61 + 1;
      v60 = v167 + 1;
      if (v16 != v163)
        goto LABEL_91;
      v16 = v163;
      v11 = v170;
      v13 = v172;
      v15 = v165;
LABEL_144:
      if (v16 < v15)
        goto LABEL_238;
      v179 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = sub_1BCB28D7C(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
      v95 = *((_QWORD *)v13 + 2);
      v94 = *((_QWORD *)v13 + 3);
      v96 = v95 + 1;
      v97 = a3;
      if (v95 >= v94 >> 1)
        v13 = sub_1BCB28D7C((char *)(v94 > 1), v95 + 1, 1, v13);
      *((_QWORD *)v13 + 2) = v96;
      v98 = v13 + 32;
      v99 = &v13[16 * v95 + 32];
      *(_QWORD *)v99 = v15;
      *((_QWORD *)v99 + 1) = v179;
      if (v95)
      {
        v173 = v13;
        v187 = v13 + 32;
        while (1)
        {
          v100 = v96 - 1;
          if (v96 >= 4)
          {
            v105 = &v98[16 * v96];
            v106 = *((_QWORD *)v105 - 8);
            v107 = *((_QWORD *)v105 - 7);
            v111 = __OFSUB__(v107, v106);
            v108 = v107 - v106;
            if (v111)
              goto LABEL_219;
            v110 = *((_QWORD *)v105 - 6);
            v109 = *((_QWORD *)v105 - 5);
            v111 = __OFSUB__(v109, v110);
            v103 = v109 - v110;
            v104 = v111;
            if (v111)
              goto LABEL_220;
            v112 = v96 - 2;
            v113 = &v98[16 * v96 - 32];
            v115 = *(_QWORD *)v113;
            v114 = *((_QWORD *)v113 + 1);
            v111 = __OFSUB__(v114, v115);
            v116 = v114 - v115;
            if (v111)
              goto LABEL_222;
            v111 = __OFADD__(v103, v116);
            v117 = v103 + v116;
            if (v111)
              goto LABEL_225;
            if (v117 >= v108)
            {
              v135 = &v98[16 * v100];
              v137 = *(_QWORD *)v135;
              v136 = *((_QWORD *)v135 + 1);
              v111 = __OFSUB__(v136, v137);
              v138 = v136 - v137;
              if (v111)
                goto LABEL_233;
              v128 = v103 < v138;
              goto LABEL_182;
            }
          }
          else
          {
            if (v96 != 3)
            {
              v129 = *((_QWORD *)v13 + 4);
              v130 = *((_QWORD *)v13 + 5);
              v111 = __OFSUB__(v130, v129);
              v122 = v130 - v129;
              v123 = v111;
              goto LABEL_176;
            }
            v102 = *((_QWORD *)v13 + 4);
            v101 = *((_QWORD *)v13 + 5);
            v111 = __OFSUB__(v101, v102);
            v103 = v101 - v102;
            v104 = v111;
          }
          if ((v104 & 1) != 0)
            goto LABEL_221;
          v112 = v96 - 2;
          v118 = &v98[16 * v96 - 32];
          v120 = *(_QWORD *)v118;
          v119 = *((_QWORD *)v118 + 1);
          v121 = __OFSUB__(v119, v120);
          v122 = v119 - v120;
          v123 = v121;
          if (v121)
            goto LABEL_224;
          v124 = &v98[16 * v100];
          v126 = *(_QWORD *)v124;
          v125 = *((_QWORD *)v124 + 1);
          v111 = __OFSUB__(v125, v126);
          v127 = v125 - v126;
          if (v111)
            goto LABEL_227;
          if (__OFADD__(v122, v127))
            goto LABEL_228;
          if (v122 + v127 >= v103)
          {
            v128 = v103 < v127;
LABEL_182:
            if (v128)
              v100 = v112;
            goto LABEL_184;
          }
LABEL_176:
          if ((v123 & 1) != 0)
            goto LABEL_223;
          v131 = &v98[16 * v100];
          v133 = *(_QWORD *)v131;
          v132 = *((_QWORD *)v131 + 1);
          v111 = __OFSUB__(v132, v133);
          v134 = v132 - v133;
          if (v111)
            goto LABEL_226;
          if (v134 < v122)
            goto LABEL_193;
LABEL_184:
          v139 = v100 - 1;
          if (v100 - 1 >= v96)
            goto LABEL_215;
          if (!v176)
            goto LABEL_245;
          v140 = &v98[16 * v139];
          v141 = *(_QWORD *)v140;
          v142 = v100;
          v143 = &v98[16 * v100];
          v144 = *((_QWORD *)v143 + 1);
          v145 = (char *)(v176 + 8 * *(_QWORD *)v140);
          v146 = (char *)(v176 + 8 * *(_QWORD *)v143);
          swift_bridgeObjectRetain();
          swift_retain();
          sub_1BCB14DC8(v145, v146, v176 + 8 * v144, __dst, a2, v180, (uint64_t (*)(uint64_t))a4);
          if (v175)
          {
LABEL_209:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            *(_QWORD *)(v170 + 16) = 0;
            swift_release();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            goto LABEL_210;
          }
          swift_bridgeObjectRelease();
          swift_release();
          if (v144 < v141)
            goto LABEL_216;
          if (v142 > *((_QWORD *)v173 + 2))
            goto LABEL_217;
          *(_QWORD *)v140 = v141;
          v98 = v187;
          *(_QWORD *)&v187[16 * v139 + 8] = v144;
          v147 = *((_QWORD *)v173 + 2);
          if (v142 >= v147)
            goto LABEL_218;
          v13 = v173;
          v175 = 0;
          v96 = v147 - 1;
          memmove(v143, v143 + 16, 16 * (v147 - 1 - v142));
          *((_QWORD *)v173 + 2) = v147 - 1;
          v97 = v180;
          v11 = v170;
          if (v147 <= 2)
            goto LABEL_193;
        }
      }
      v96 = 1;
LABEL_193:
      v14 = v168;
      v12 = v179;
      a3 = v97;
      if (v179 >= v168)
        goto LABEL_197;
      goto LABEL_13;
    }
    v61 = v178;
    a3 = v180;
    if (!v176)
      goto LABEL_244;
    v93 = *v183;
    v62 = v183[1];
    *v183 = v62;
    v183[1] = v93;
    v64 = v183 - 1;
    v63 = v186 + 1;
    if (v178 == v186 + 1)
      goto LABEL_90;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v183 = v64;
  v186 = v63;
  if (!sub_1BCB648D4())
    goto LABEL_99;
LABEL_94:
  if ((v62 & 0xC000000000000001) != 0)
  {
    v67 = (id)MEMORY[0x1BCCFCF20](0, v62);
    goto LABEL_97;
  }
  if (*(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v67 = *(id *)(v62 + 32);
LABEL_97:
    v68 = v67;
    swift_bridgeObjectRelease();
    sub_1BCB09BFC(&v197);
    swift_bridgeObjectRetain();
    sub_1BCB0A954((uint64_t)&v197);

    goto LABEL_102;
  }
  __break(1u);
LABEL_212:
  __break(1u);
LABEL_213:
  __break(1u);
LABEL_214:
  __break(1u);
LABEL_215:
  __break(1u);
LABEL_216:
  __break(1u);
LABEL_217:
  __break(1u);
LABEL_218:
  __break(1u);
LABEL_219:
  __break(1u);
LABEL_220:
  __break(1u);
LABEL_221:
  __break(1u);
LABEL_222:
  __break(1u);
LABEL_223:
  __break(1u);
LABEL_224:
  __break(1u);
LABEL_225:
  __break(1u);
LABEL_226:
  __break(1u);
LABEL_227:
  __break(1u);
LABEL_228:
  __break(1u);
LABEL_229:
  __break(1u);
LABEL_230:
  __break(1u);
LABEL_231:
  __break(1u);
LABEL_232:
  __break(1u);
LABEL_233:
  __break(1u);
LABEL_234:
  __break(1u);
LABEL_235:
  __break(1u);
LABEL_236:
  __break(1u);
LABEL_237:
  __break(1u);
LABEL_238:
  __break(1u);
LABEL_239:
  __break(1u);
LABEL_240:
  __break(1u);
LABEL_241:
  __break(1u);
LABEL_242:
  __break(1u);
LABEL_243:
  __break(1u);
LABEL_244:
  swift_release_n();
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_245:
  swift_release_n();
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_246:
  swift_release_n();
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_247:
  swift_release_n();
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_248:
  swift_release_n();
  swift_bridgeObjectRelease_n();
  result = sub_1BCB648A4();
  __break(1u);
  return result;
}

uint64_t sub_1BCB16F50(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11[2];

  v8 = *a1;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v8 = sub_1BCB2B3A4(v8);
  v9 = *(_QWORD *)(v8 + 16);
  v11[0] = v8 + 32;
  v11[1] = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1BCB159A4(v11, a2, a3, a4);
  swift_bridgeObjectRelease();
  swift_release();
  *a1 = v8;
  swift_release_n();
  return swift_bridgeObjectRelease_n();
}

unint64_t sub_1BCB17040()
{
  unint64_t result;

  result = qword_1EF487A50;
  if (!qword_1EF487A50)
  {
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0DEA980], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EF487A50);
  }
  return result;
}

unint64_t sub_1BCB17084()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF487A58;
  if (!qword_1EF487A58)
  {
    sub_1BCAF84F0(255, &qword_1EF487A48, MEMORY[0x1E0DEA2D0], MEMORY[0x1E0DECDE0]);
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0DECE10], v1);
    atomic_store(result, (unint64_t *)&qword_1EF487A58);
  }
  return result;
}

uint64_t sub_1BCB170E4()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1BCB6413C();
  qword_1EDA141A8 = result;
  unk_1EDA141B0 = v1;
  return result;
}

uint64_t static NSUserDefaults.medicationsUserDefaultsDomain.getter()
{
  return sub_1BCB17700(&qword_1EDA141B8, &qword_1EDA141A8);
}

uint64_t sub_1BCB17130()
{
  uint64_t result;

  result = sub_1BCB1714C();
  qword_1EDA141D8 = result;
  return result;
}

uint64_t sub_1BCB1714C()
{
  id v0;
  void *v1;
  id v2;
  uint64_t result;

  if (qword_1EDA141B8 != -1)
    swift_once();
  v0 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  swift_bridgeObjectRetain();
  v1 = (void *)sub_1BCB6410C();
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (v2)
    return (uint64_t)v2;
  sub_1BCB6479C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1BCB641F0();
  swift_bridgeObjectRelease();
  result = sub_1BCB648B0();
  __break(1u);
  return result;
}

id static NSUserDefaults.medications.getter()
{
  if (qword_1EDA141E0 != -1)
    swift_once();
  return (id)qword_1EDA141D8;
}

uint64_t sub_1BCB172D8()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1BCB6413C();
  qword_1EDA14208 = result;
  unk_1EDA14210 = v1;
  return result;
}

uint64_t static NSUserDefaults.doseRemindersEnabledKey.getter()
{
  return sub_1BCB17700(&qword_1EDA14218, &qword_1EDA14208);
}

uint64_t sub_1BCB17324()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1BCB6413C();
  qword_1EDA14220 = result;
  *(_QWORD *)algn_1EDA14228 = v1;
  return result;
}

uint64_t static NSUserDefaults.followUpNotificationsEnabledKey.getter()
{
  return sub_1BCB17700(&qword_1EDA14230, &qword_1EDA14220);
}

uint64_t sub_1BCB17370()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1BCB6413C();
  qword_1EDA14238 = result;
  unk_1EDA14240 = v1;
  return result;
}

uint64_t static NSUserDefaults.didShowLifeStyleFactorsSelectionPageKey.getter()
{
  return sub_1BCB17700(&qword_1EDA14248, &qword_1EDA14238);
}

uint64_t sub_1BCB173BC()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1BCB6413C();
  qword_1EDA141C0 = result;
  *(_QWORD *)algn_1EDA141C8 = v1;
  return result;
}

uint64_t static NSUserDefaults.timeZoneExperienceEnabledKey.getter()
{
  return sub_1BCB17700(&qword_1EDA141D0, &qword_1EDA141C0);
}

uint64_t sub_1BCB17408()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1BCB6413C();
  qword_1EDA14250 = result;
  unk_1EDA14258 = v1;
  return result;
}

uint64_t static NSUserDefaults.didDismissCHRAddAccountTileInCategoryRoom.getter()
{
  return sub_1BCB17700(&qword_1EDA14268, &qword_1EDA14250);
}

uint64_t sub_1BCB17454()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1BCB6413C();
  qword_1EDA131B8 = result;
  unk_1EDA131C0 = v1;
  return result;
}

uint64_t static NSUserDefaults.didDismissFollowUpTipKey.getter()
{
  return sub_1BCB17700(&qword_1EDA131D0, &qword_1EDA131B8);
}

uint64_t sub_1BCB174A0()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1BCB6413C();
  qword_1EDA13210 = result;
  unk_1EDA13218 = v1;
  return result;
}

uint64_t static NSUserDefaults.scheduleCompatibilityTileDismissalDateKey.getter()
{
  return sub_1BCB17700(&qword_1EDA13228, &qword_1EDA13210);
}

uint64_t sub_1BCB174EC()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1BCB6413C();
  qword_1EDA13250 = result;
  *(_QWORD *)algn_1EDA13258 = v1;
  return result;
}

uint64_t static NSUserDefaults.scheduleCompatibilityLearnMoreOverrideURLKey.getter()
{
  return sub_1BCB17700(&qword_1EDA13260, &qword_1EDA13250);
}

uint64_t sub_1BCB17538()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1BCB6413C();
  qword_1EF487A68 = result;
  unk_1EF487A70 = v1;
  return result;
}

uint64_t static NSUserDefaults.scheduleUnavailableHasShownFirstAppearanceKey.getter()
{
  return sub_1BCB17700(&qword_1EF487068, &qword_1EF487A68);
}

uint64_t sub_1BCB17584()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1BCB6413C();
  qword_1EF487A78 = result;
  unk_1EF487A80 = v1;
  return result;
}

uint64_t static NSUserDefaults.scheduleUnavailableAcknowledgedMedicationIdentifiersKey.getter()
{
  return sub_1BCB17700(&qword_1EF487070, &qword_1EF487A78);
}

uint64_t sub_1BCB175D0()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1BCB6413C();
  qword_1EDA131F8 = result;
  unk_1EDA13200 = v1;
  return result;
}

uint64_t static NSUserDefaults.medicationsCategoryRoomLastEnteredDateKey.getter()
{
  return sub_1BCB17700(&qword_1EDA13208, &qword_1EDA131F8);
}

uint64_t sub_1BCB1761C()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1BCB6413C();
  qword_1EDA141E8 = result;
  *(_QWORD *)algn_1EDA141F0 = v1;
  return result;
}

uint64_t static NSUserDefaults.shardCheckOverrideKey.getter()
{
  return sub_1BCB17700(&qword_1EDA14200, &qword_1EDA141E8);
}

uint64_t sub_1BCB17668()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1BCB6413C();
  qword_1EDA13230 = result;
  unk_1EDA13238 = v1;
  return result;
}

uint64_t static NSUserDefaults.alwaysShowLifeStyleFactorsSelectionPageKey.getter()
{
  return sub_1BCB17700(&qword_1EDA13248, &qword_1EDA13230);
}

uint64_t sub_1BCB176B4()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1BCB6413C();
  qword_1EDA131D8 = result;
  unk_1EDA131E0 = v1;
  return result;
}

uint64_t static NSUserDefaults.showMinorDrugInteractionsKey.getter()
{
  return sub_1BCB17700(&qword_1EDA131F0, &qword_1EDA131D8);
}

uint64_t sub_1BCB17700(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

id MedicationDoseEvent.medicationDoseEvent.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t sub_1BCB17758@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1BCB63F50();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1BCB177D4(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  v2 = v1;
  swift_retain();
  return sub_1BCB63F5C();
}

uint64_t sub_1BCB17848()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1BCB63F50();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1BCB178C0()
{
  swift_beginAccess();
  sub_1BCAFC448(0, &qword_1EDA13940, (uint64_t (*)(uint64_t))sub_1BCB17AE8, MEMORY[0x1E0C96198]);
  sub_1BCB63F38();
  return swift_endAccess();
}

uint64_t sub_1BCB17938(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t, uint64_t);
  uint64_t v12;

  sub_1BCAFC448(0, &qword_1EF487A88, (uint64_t (*)(uint64_t))sub_1BCB17AE8, MEMORY[0x1E0C96180]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v12 - v8;
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v10((char *)&v12 - v8, a1, v3);
  v10(v7, (uint64_t)v9, v3);
  swift_beginAccess();
  sub_1BCAFC448(0, &qword_1EDA13940, (uint64_t (*)(uint64_t))sub_1BCB17AE8, MEMORY[0x1E0C96198]);
  sub_1BCB63F44();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
}

uint64_t sub_1BCB17A74()
{
  swift_beginAccess();
  sub_1BCAFC448(0, &qword_1EDA13940, (uint64_t (*)(uint64_t))sub_1BCB17AE8, MEMORY[0x1E0C96198]);
  sub_1BCB63F38();
  return swift_endAccess();
}

void sub_1BCB17AE8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EDA139B0)
  {
    sub_1BCAFC2E0(255, (unint64_t *)&qword_1EDA144A8);
    v0 = sub_1BCB64628();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EDA139B0);
  }
}

uint64_t MedicationDoseEvent.__allocating_init(_:medicationDetailProvider:medication:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  MedicationDoseEvent.init(_:medicationDetailProvider:medication:)(a1, a2, a3);
  return v6;
}

uint64_t MedicationDoseEvent.init(_:medicationDetailProvider:medication:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  void *v21;

  sub_1BCAFC448(0, &qword_1EDA13940, (uint64_t (*)(uint64_t))sub_1BCB17AE8, MEMORY[0x1E0C96198]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v20 - v10;
  v12 = v3 + OBJC_IVAR____TtC27HealthMedicationsExperience19MedicationDoseEvent__medication;
  v21 = 0;
  sub_1BCB17AE8();
  sub_1BCB63F2C();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v12, v11, v8);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC27HealthMedicationsExperience19MedicationDoseEvent_medicationDetailProvider) = 0;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC27HealthMedicationsExperience19MedicationDoseEvent_medicationDetailProvider) = a2;
  v13 = a1;
  swift_retain();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  v21 = a3;
  v14 = a3;
  swift_retain();
  sub_1BCB63F5C();
  if (a2)
  {
    swift_retain();
    swift_retain();
    v15 = objc_msgSend(v13, sel_medicationIdentifier);
    v16 = sub_1BCB6413C();
    v18 = v17;

    sub_1BCB181B8(v3, v16, v18, a2, (uint64_t)&unk_1E7558210, (uint64_t)sub_1BCB187A0, (uint64_t)&block_descriptor_16);
    swift_release();
    swift_bridgeObjectRelease();

    swift_release_n();
  }
  else
  {

  }
  return v3;
}

uint64_t sub_1BCB17D84(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t result;
  id v14;

  v7 = objc_msgSend(*(id *)(v3 + 16), sel_medicationIdentifier);
  v8 = sub_1BCB6413C();
  v10 = v9;

  if (v8 == a2 && v10 == a3)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v12 = sub_1BCB649F4();
  result = swift_bridgeObjectRelease();
  if ((v12 & 1) != 0)
  {
LABEL_8:
    swift_getKeyPath();
    swift_getKeyPath();
    v14 = a1;
    swift_retain();
    return sub_1BCB63F5C();
  }
  return result;
}

unint64_t sub_1BCB17EE0()
{
  uint64_t v0;
  id v1;
  id v2;

  sub_1BCB6479C();
  swift_bridgeObjectRelease();
  v1 = *(id *)(v0 + 16);
  v2 = objc_msgSend(v1, sel_description);
  sub_1BCB6413C();

  sub_1BCB641F0();
  swift_bridgeObjectRelease();
  sub_1BCB641F0();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1BCB63F50();
  swift_release();
  swift_release();
  sub_1BCB17AE8();
  sub_1BCB64190();
  sub_1BCB641F0();
  swift_bridgeObjectRelease();
  return 0xD000000000000015;
}

uint64_t MedicationDoseEvent.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC27HealthMedicationsExperience19MedicationDoseEvent__medication;
  sub_1BCAFC448(0, &qword_1EDA13940, (uint64_t (*)(uint64_t))sub_1BCB17AE8, MEMORY[0x1E0C96198]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return v0;
}

uint64_t MedicationDoseEvent.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC27HealthMedicationsExperience19MedicationDoseEvent__medication;
  sub_1BCAFC448(0, &qword_1EDA13940, (uint64_t (*)(uint64_t))sub_1BCB17AE8, MEMORY[0x1E0C96198]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return swift_deallocClassInstance();
}

unint64_t sub_1BCB18130()
{
  return sub_1BCB17EE0();
}

uint64_t sub_1BCB18150@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for MedicationDoseEvent();
  result = sub_1BCB63E78();
  *a1 = result;
  return result;
}

uint64_t sub_1BCB18190()
{
  return _s27HealthMedicationsExperience19MedicationDoseEventC2eeoiySbAC_ACtFZ_0();
}

uint64_t sub_1BCB1819C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BCB181B8(a1, a2, a3, a4, (uint64_t)&unk_1E75581C0, (uint64_t)sub_1BCB1869C, (uint64_t)&block_descriptor_1);
}

uint64_t sub_1BCB181B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[6];

  v22[0] = a7;
  v12 = sub_1BCB63FBC();
  v25 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1BCB63FD4();
  v23 = *(_QWORD *)(v15 - 8);
  v24 = v15;
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = *(_QWORD *)(a4 + 72);
  v18 = swift_allocObject();
  swift_weakInit();
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = v18;
  v19[3] = a2;
  v19[4] = a3;
  v19[5] = a1;
  aBlock[4] = a6;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BCB1AB00;
  aBlock[3] = v22[0];
  v20 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1BCB63FC8();
  v26 = MEMORY[0x1E0DEE9D8];
  sub_1BCB186C0();
  sub_1BCAFC448(0, &qword_1EDA13D28, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BCB18708();
  sub_1BCB646C4();
  MEMORY[0x1BCCFCCEC](0, v17, v14, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v17, v24);
  swift_release();
  return swift_release();
}

uint64_t _s27HealthMedicationsExperience19MedicationDoseEventC2eeoiySbAC_ACtFZ_0()
{
  id v0;
  char v1;
  void *v3;

  sub_1BCAFC2E0(0, (unint64_t *)&qword_1EDA139E0);
  if ((sub_1BCB645F8() & 1) != 0)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    sub_1BCB63F50();
    swift_release();
    swift_release();
    swift_getKeyPath();
    swift_getKeyPath();
    sub_1BCB63F50();
    swift_release();
    swift_release();
    if (v3)
    {
      sub_1BCAFC2E0(0, (unint64_t *)&qword_1EDA144A8);
      v0 = v3;
      v1 = sub_1BCB645F8();

    }
    else
    {
      v1 = 1;
    }
  }
  else
  {
    v1 = 0;
  }
  return v1 & 1;
}

uint64_t sub_1BCB1853C()
{
  return MEMORY[0x1E0C96020];
}

uint64_t sub_1BCB18550()
{
  return type metadata accessor for MedicationDoseEvent();
}

uint64_t type metadata accessor for MedicationDoseEvent()
{
  uint64_t result;

  result = qword_1EDA138D8;
  if (!qword_1EDA138D8)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1BCB18594()
{
  unint64_t v0;

  sub_1BCAFC448(319, &qword_1EDA13940, (uint64_t (*)(uint64_t))sub_1BCB17AE8, MEMORY[0x1E0C96198]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for MedicationDoseEvent()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MedicationDoseEvent.medication.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of MedicationDoseEvent.$medication.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of MedicationDoseEvent.__allocating_init(_:medicationDetailProvider:medication:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of MedicationDoseEvent.medicationDetailDidUpdate(_:for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of MedicationDoseEvent.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t sub_1BCB18674()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BCB1869C()
{
  uint64_t v0;

  return sub_1BCB44B20(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

unint64_t sub_1BCB186C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDA13D20;
  if (!qword_1EDA13D20)
  {
    v1 = sub_1BCB63FBC();
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0DEF510], v1);
    atomic_store(result, (unint64_t *)&qword_1EDA13D20);
  }
  return result;
}

unint64_t sub_1BCB18708()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDA13D30;
  if (!qword_1EDA13D30)
  {
    sub_1BCAFC448(255, &qword_1EDA13D28, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1EDA13D30);
  }
  return result;
}

uint64_t objectdestroy_7Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

void *sub_1BCB187AC()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_color);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void sub_1BCB187F8(void *a1)
{
  sub_1BCB1914C(a1);

}

uint64_t (*sub_1BCB1881C(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1BCB18864;
}

uint64_t sub_1BCB18864(uint64_t a1, char a2)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v5 = (uint64_t *)(*(_QWORD *)(a1 + 24)
                   + OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment);
    v6 = v5[1];
    if (v6)
    {
      v7 = v5[2];
      v8 = v5[3];
      v9 = *v5;
      sub_1BCAFC5BC(v7, v8);
      sub_1BCB19224(v9, v6, v7, v8);
      result = sub_1BCB1925C(v9, v6, v7, v8);
      if (v8 != 1)
      {
        objc_msgSend(*(id *)(a1 + 24), sel_setNeedsDisplay);
        return sub_1BCB10A44(v7, v8);
      }
    }
  }
  return result;
}

char *MedicationFragmentLayer.__allocating_init(fragment:)(uint64_t *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return MedicationFragmentLayer.init(fragment:)(a1);
}

char *MedicationFragmentLayer.init(fragment:)(uint64_t *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  double v11;
  double v12;
  char *v13;
  id v14;
  double v15;
  double v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  objc_super v23;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = &v1[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment];
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *(_QWORD *)&v1[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_color] = 0;
  v23.receiver = v1;
  v23.super_class = (Class)type metadata accessor for MedicationFragmentLayer();
  v7 = objc_msgSendSuper2(&v23, sel_init);
  v8 = (void *)objc_opt_self();
  v9 = v7;
  v10 = objc_msgSend(v8, sel_mainScreen);
  objc_msgSend(v10, sel_scale);
  v12 = v11;

  objc_msgSend(v9, sel_setContentsScale_, v12);
  v13 = (char *)v9;
  v14 = objc_msgSend(v8, sel_mainScreen);
  objc_msgSend(v14, sel_scale);
  v16 = v15;

  objc_msgSend(v13, sel_setRasterizationScale_, v16);
  objc_msgSend(v13, sel_setNeedsDisplayOnBoundsChange_, 1);

  v17 = &v13[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment];
  v18 = *(_QWORD *)&v13[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment];
  v19 = *(_QWORD *)&v13[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment + 8];
  v20 = *(_QWORD *)&v13[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment + 16];
  v21 = *(_QWORD *)&v13[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment + 24];
  *(_QWORD *)v17 = v2;
  *((_QWORD *)v17 + 1) = v3;
  *((_QWORD *)v17 + 2) = v4;
  *((_QWORD *)v17 + 3) = v5;
  sub_1BCB1925C(v18, v19, v20, v21);
  return v13;
}

id MedicationFragmentLayer.__allocating_init(layer:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  v4 = objc_msgSend(v3, sel_initWithLayer_, sub_1BCB649E8());
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v4;
}

char *MedicationFragmentLayer.init(layer:)(_QWORD *a1)
{
  char *v1;
  char *v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  double v9;
  double v10;
  char *v11;
  id v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  char v26[32];
  objc_super v27;

  v3 = &v1[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment];
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *(_QWORD *)&v1[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_color] = 0;
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  v4 = sub_1BCB649E8();
  v27.receiver = v1;
  v27.super_class = (Class)type metadata accessor for MedicationFragmentLayer();
  v5 = objc_msgSendSuper2(&v27, sel_initWithLayer_, v4);
  swift_unknownObjectRelease();
  v6 = (void *)objc_opt_self();
  v7 = v5;
  v8 = objc_msgSend(v6, sel_mainScreen);
  objc_msgSend(v8, sel_scale);
  v10 = v9;

  objc_msgSend(v7, sel_setContentsScale_, v10);
  v11 = (char *)v7;
  v12 = objc_msgSend(v6, sel_mainScreen);
  objc_msgSend(v12, sel_scale);
  v14 = v13;

  objc_msgSend(v11, sel_setRasterizationScale_, v14);
  objc_msgSend(v11, sel_setNeedsDisplayOnBoundsChange_, 1);

  sub_1BCB053D0((uint64_t)a1, (uint64_t)v26);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v15 = *(_QWORD *)&v25[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment];
    v16 = *(_QWORD *)&v25[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment + 8];
    v17 = *(_QWORD *)&v25[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment + 16];
    v18 = *(_QWORD *)&v25[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment + 24];
    sub_1BCB19224(v15, v16, v17, v18);

    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    if (v16)
    {
      v19 = (uint64_t *)&v11[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment];
      v20 = *(_QWORD *)&v11[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment];
      v21 = *(_QWORD *)&v11[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment + 8];
      v22 = *(_QWORD *)&v11[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment + 16];
      v23 = *(_QWORD *)&v11[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment + 24];
      *v19 = v15;
      v19[1] = v16;
      v19[2] = v17;
      v19[3] = v18;
      sub_1BCB1925C(v20, v21, v22, v23);
    }
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v11;
}

void sub_1BCB18E10(CGContext *a1)
{
  char *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id *v10;
  id v11;
  id v12;
  CGRect v13;

  UIGraphicsPushContext(a1);
  v2 = (uint64_t *)&v1[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment];
  v3 = *(_QWORD *)&v1[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment + 8];
  if (v3)
  {
    v4 = *v2;
    v5 = v2[2];
    v6 = v2[3];
    swift_bridgeObjectRetain();
    sub_1BCB19224(v4, v3, v5, v6);
    if (qword_1EDA13DB8 != -1)
      swift_once();
    v7 = (id)qword_1EDA13DD0;
    v8 = (void *)sub_1BCB6410C();
    swift_bridgeObjectRelease();
    v9 = objc_msgSend((id)objc_opt_self(), sel_imageNamed_inBundle_withConfiguration_, v8, v7, 0);

    sub_1BCB1925C(v4, v3, v5, v6);
    if (v9)
    {
      objc_msgSend(v1, sel_bounds);
      objc_msgSend(v9, sel_drawInRect_);
      v10 = (id *)&v1[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_color];
      swift_beginAccess();
      if (*v10)
      {
        v11 = *v10;
        v12 = objc_msgSend(v11, sel_colorWithAlphaComponent_, 0.85);
        objc_msgSend(v12, sel_setFill);

        objc_msgSend(v1, sel_bounds);
        UIRectFillUsingBlendMode(v13, kCGBlendModePlusDarker);
        objc_msgSend(v1, sel_bounds);
        objc_msgSend(v9, sel_drawInRect_blendMode_alpha_, 22);

      }
      else
      {

      }
    }
  }
  UIGraphicsPopContext();
}

id MedicationFragmentLayer.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void MedicationFragmentLayer.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id MedicationFragmentLayer.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MedicationFragmentLayer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_1BCB1914C(void *a1)
{
  char *v1;
  void **v3;
  void *v4;
  id v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (void **)&v1[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_color];
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;
  v5 = a1;

  v6 = (uint64_t *)&v1[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment];
  v7 = *(_QWORD *)&v1[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment + 8];
  if (v7)
  {
    v8 = v6[2];
    v9 = v6[3];
    v10 = *v6;
    sub_1BCAFC5BC(v8, v9);
    sub_1BCB19224(v10, v7, v8, v9);
    sub_1BCB1925C(v10, v7, v8, v9);
    if (v9 != 1)
    {
      objc_msgSend(v1, sel_setNeedsDisplay);
      sub_1BCB10A44(v8, v9);
    }
  }
}

uint64_t sub_1BCB19224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return sub_1BCAFC5BC(a3, a4);
  }
  return result;
}

uint64_t sub_1BCB1925C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return sub_1BCB10A44(a3, a4);
  }
  return result;
}

uint64_t type metadata accessor for MedicationFragmentLayer()
{
  return objc_opt_self();
}

id sub_1BCB192B4@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  void **v3;
  void *v4;

  v3 = (void **)(*a1 + OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_color);
  swift_beginAccess();
  v4 = *v3;
  *a2 = *v3;
  return v4;
}

void sub_1BCB19304(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  sub_1BCB1914C(v1);

}

uint64_t method lookup function for MedicationFragmentLayer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MedicationFragmentLayer.color.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of MedicationFragmentLayer.color.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of MedicationFragmentLayer.color.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of MedicationFragmentLayer.__allocating_init(fragment:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

void sub_1BCB193A8(id *a1)
{
  id v1;

  v1 = objc_msgSend(*a1, sel_startDate);
  sub_1BCB63B18();

}

uint64_t MedicationDoseDaySummary.loggedDoses.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MedicationDoseDaySummary.loggedDoses.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*MedicationDoseDaySummary.loggedDoses.modify())()
{
  return nullsub_1;
}

uint64_t MedicationDoseDaySummary.scheduledDoses.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MedicationDoseDaySummary.scheduledDoses.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*MedicationDoseDaySummary.scheduledDoses.modify())()
{
  return nullsub_1;
}

uint64_t MedicationDoseDaySummary.hasSchedules.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t MedicationDoseDaySummary.hasSchedules.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*MedicationDoseDaySummary.hasSchedules.modify())()
{
  return nullsub_1;
}

uint64_t MedicationDoseDaySummary.initialDataLoaded.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t MedicationDoseDaySummary.initialDataLoaded.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = result;
  return result;
}

uint64_t (*MedicationDoseDaySummary.initialDataLoaded.modify())()
{
  return nullsub_1;
}

void sub_1BCB194B4()
{
  qword_1EDA15E70 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)algn_1EDA15E78 = MEMORY[0x1E0DEE9D8];
  word_1EDA15E80 = 0;
}

double sub_1BCB194D0@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  char v4;
  char v5;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1BCB63F50();
  swift_release();
  swift_release();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 17) = v5;
  return result;
}

uint64_t sub_1BCB1955C(uint64_t a1, void **a2)
{
  void *v2;
  id v3;

  v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = v2;
  return sub_1BCB63F5C();
}

uint64_t sub_1BCB195F8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1BCB63F50();
  swift_release();
  return swift_release();
}

uint64_t sub_1BCB19664()
{
  swift_beginAccess();
  sub_1BCB1FA20(0, &qword_1EDA13D08, MEMORY[0x1E0C96198]);
  sub_1BCB63F38();
  return swift_endAccess();
}

uint64_t sub_1BCB196D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t, uint64_t);
  uint64_t v12;

  sub_1BCB1FA20(0, &qword_1EF487B80, MEMORY[0x1E0C96180]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v12 - v8;
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v10((char *)&v12 - v8, a1, v3);
  v10(v7, (uint64_t)v9, v3);
  swift_beginAccess();
  sub_1BCB1FA20(0, &qword_1EDA13D08, MEMORY[0x1E0C96198]);
  sub_1BCB63F44();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
}

uint64_t sub_1BCB197FC()
{
  swift_beginAccess();
  sub_1BCB1FA20(0, &qword_1EDA13D08, MEMORY[0x1E0C96198]);
  sub_1BCB63F38();
  return swift_endAccess();
}

char *MedicationDoseDaySummaryProvider.__allocating_init(healthStore:date:medicationDetailProvider:)(void *a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  id v7;
  char *v8;

  v7 = objc_allocWithZone(v3);
  v8 = sub_1BCB1F144(a1, a2, a3);

  swift_release();
  return v8;
}

char *MedicationDoseDaySummaryProvider.init(healthStore:date:medicationDetailProvider:)(void *a1, uint64_t a2, uint64_t a3)
{
  char *v4;

  v4 = sub_1BCB1F144(a1, a2, a3);

  swift_release();
  return v4;
}

id MedicationDoseDaySummaryProvider.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  if (*(_QWORD *)&v0[OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_observerQuery])
    objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_healthStore], sel_stopQuery_);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MedicationDoseDaySummaryProvider();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1BCB19AAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  void (*v10)(_BYTE *, uint64_t, uint64_t);
  uint64_t result;
  _BYTE v12[24];

  v2 = v1;
  v4 = sub_1BCB63B3C();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = v2 + OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_date;
  swift_beginAccess();
  v10 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16);
  v10(v8, v9, v4);
  sub_1BCAF7D24((unint64_t *)&unk_1EF487AA8, v5, MEMORY[0x1E0CB08B8]);
  LOBYTE(v5) = sub_1BCB64100();
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v4);
  if ((v5 & 1) == 0)
  {
    if (*(_QWORD *)(v2 + OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_observerQuery))
      objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_healthStore), sel_stopQuery_);
    v10(v8, a1, v4);
    swift_beginAccess();
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 40))(v9, v8, v4);
    swift_endAccess();
    return sub_1BCB19C14();
  }
  return result;
}

uint64_t sub_1BCB19C14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  void *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD aBlock[6];

  v1 = v0;
  v34 = sub_1BCB63C38();
  v2 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1BCB63B3C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v33 - v11;
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v33 - v13;
  v15 = v1 + OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_date;
  swift_beginAccess();
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v16(v12, v15, v5);
  sub_1BCB63C20();
  sub_1BCB63B9C();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v34);
  v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17(v12, v5);
  v35 = v5;
  v16(v9, v15, v5);
  Date.endOfDay()(v12);
  v17(v9, v5);
  v18 = (void *)objc_opt_self();
  v19 = (void *)sub_1BCB63B00();
  v20 = (void *)sub_1BCB63B00();
  v21 = objc_msgSend(v18, sel_predicateForSamplesWithStartDate_endDate_options_, v19, v20, 0);

  v22 = OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_doseEventPredicate;
  v23 = *(void **)(v1
                 + OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_doseEventPredicate);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_doseEventPredicate) = v21;

  v24 = objc_msgSend((id)objc_opt_self(), sel_medicationDoseEventType);
  v25 = *(_QWORD *)(v1 + v22);
  v26 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v27 = objc_allocWithZone(MEMORY[0x1E0CB6980]);
  aBlock[4] = sub_1BCB1FB58;
  aBlock[5] = v26;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BCB1F094;
  aBlock[3] = &block_descriptor_83;
  v28 = _Block_copy(aBlock);
  swift_retain();
  v29 = objc_msgSend(v27, sel_initWithSampleType_predicate_updateHandler_, v24, v25, v28);

  _Block_release(v28);
  swift_release();
  swift_release();
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_healthStore), sel_executeQuery_, v29);
  v30 = *(void **)(v1 + OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_observerQuery);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_observerQuery) = v29;

  v31 = v35;
  v17(v12, v35);
  return ((uint64_t (*)(char *, uint64_t))v17)(v14, v31);
}

void sub_1BCB19F34(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  id v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  _QWORD *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  sub_1BCAFC448(0, (unint64_t *)&unk_1EDA14470, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v31 - v8;
  swift_beginAccess();
  v10 = MEMORY[0x1BCCFD9C4](a5 + 16);
  if (v10)
  {
    v11 = (void *)v10;
    if (a4)
    {
      if (qword_1EDA14510 != -1)
        swift_once();
      v12 = sub_1BCB63DDC();
      __swift_project_value_buffer(v12, (uint64_t)qword_1EDA14518);
      v13 = v11;
      v14 = a4;
      v15 = v13;
      v16 = a4;
      v17 = sub_1BCB63DD0();
      v18 = sub_1BCB644FC();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = swift_slowAlloc();
        v20 = (_QWORD *)swift_slowAlloc();
        v31 = swift_slowAlloc();
        v32 = (uint64_t)v15;
        v33 = v31;
        *(_DWORD *)v19 = 138412546;
        v21 = v15;
        sub_1BCB64640();
        *v20 = v11;

        *(_WORD *)(v19 + 12) = 2080;
        v32 = (uint64_t)a4;
        v22 = a4;
        v23 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
        sub_1BCAFC448(0, &qword_1EF487B78, (uint64_t (*)(uint64_t))sub_1BCB052CC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        v24 = sub_1BCB64190();
        v32 = sub_1BCB010C8(v24, v25, &v33);
        sub_1BCB64640();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1BCAF3000, v17, v18, "[%@] Error fetching medication dose event samples HKObserverQuery returned error: %s", (uint8_t *)v19, 0x16u);
        sub_1BCB066B8(0, (unint64_t *)&qword_1EF4878A0, (unint64_t *)&qword_1EDA139E0, 0x1E0DE7910, v23);
        swift_arrayDestroy();
        MEMORY[0x1BCCFD928](v20, -1, -1);
        v26 = v31;
        swift_arrayDestroy();
        MEMORY[0x1BCCFD928](v26, -1, -1);
        MEMORY[0x1BCCFD928](v19, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      v27 = sub_1BCB643B8();
      v28 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750];
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v9, 1, 1, v27);
      v29 = (_QWORD *)swift_allocObject();
      v29[2] = 0;
      v29[3] = 0;
      v29[4] = v11;
      v30 = v11;
      sub_1BCB1A334((uint64_t)v9, (uint64_t)&unk_1EF487B98, (uint64_t)v29);
      swift_release();

      sub_1BCAFC62C((uint64_t)v9, (unint64_t *)&unk_1EDA14470, v28);
    }
  }
}

uint64_t sub_1BCB1A2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = sub_1BCB09BF0;
  v6[234] = a4;
  v6[235] = swift_getObjectType();
  return swift_task_switch();
}

uint64_t sub_1BCB1A334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  sub_1BCAFC448(0, (unint64_t *)&unk_1EDA14470, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v16 - v7;
  sub_1BCB1FA68(a1, (uint64_t)v16 - v7);
  v9 = sub_1BCB643B8();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1BCAFC62C((uint64_t)v8, (unint64_t *)&unk_1EDA14470, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750]);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v11 = sub_1BCB64370();
      v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_1BCB643AC();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v11 = 0;
  v13 = 0;
LABEL_6:
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

void sub_1BCB1A4DC()
{
  uint64_t v0;
  uint64_t ObjectType;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[6];

  ObjectType = swift_getObjectType();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_scheduleControl);
  v3 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = ObjectType;
  v6[4] = sub_1BCB1F9E4;
  v6[5] = v4;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1107296256;
  v6[2] = sub_1BCB1AB2C;
  v6[3] = &block_descriptor_68;
  v5 = _Block_copy(v6);
  swift_release();
  objc_msgSend(v2, sel_fetchAllSchedulesWithCompletion_, v5);
  _Block_release(v5);
}

void sub_1BCB1A5C0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t aBlock[6];
  uint64_t v36;

  v34 = a4;
  v7 = sub_1BCB63FBC();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1BCB63FD4();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 && (swift_beginAccess(), (v15 = MEMORY[0x1BCCFD9C4](a3 + 16)) != 0))
  {
    v16 = (void *)v15;
    sub_1BCAFC2E0(0, (unint64_t *)&unk_1EDA13D78);
    swift_bridgeObjectRetain();
    v17 = (void *)sub_1BCB64580();
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = v16;
    *(_QWORD *)(v18 + 24) = a1;
    aBlock[4] = (uint64_t)sub_1BCB1FA18;
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1BCB1AB00;
    aBlock[3] = (uint64_t)&block_descriptor_74;
    v19 = _Block_copy(aBlock);
    v34 = v16;
    swift_release();
    sub_1BCB63FC8();
    aBlock[0] = MEMORY[0x1E0DEE9D8];
    v20 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
    sub_1BCAF7D24((unint64_t *)&qword_1EDA13D20, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1BCAFC448(0, &qword_1EDA13D28, v20, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BCB18708();
    sub_1BCB646C4();
    MEMORY[0x1BCCFCCEC](0, v14, v10, v19);
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    if (qword_1EDA14510 != -1)
      swift_once();
    v21 = sub_1BCB63DDC();
    __swift_project_value_buffer(v21, (uint64_t)qword_1EDA14518);
    v22 = a2;
    v23 = a2;
    v24 = sub_1BCB63DD0();
    v25 = sub_1BCB644FC();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc();
      v27 = swift_slowAlloc();
      aBlock[0] = v27;
      *(_DWORD *)v26 = 136315394;
      v28 = sub_1BCB64B14();
      v36 = sub_1BCB010C8(v28, v29, aBlock);
      sub_1BCB64640();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2080;
      v36 = (uint64_t)a2;
      v30 = a2;
      sub_1BCAFC448(0, &qword_1EF487B78, (uint64_t (*)(uint64_t))sub_1BCB052CC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      v31 = sub_1BCB64190();
      v36 = sub_1BCB010C8(v31, v32, aBlock);
      sub_1BCB64640();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1BCAF3000, v24, v25, "[%s] Could not load schedules with error: %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BCCFD928](v27, -1, -1);
      MEMORY[0x1BCCFD928](v26, -1, -1);
    }
    else
    {

    }
  }
}

uint64_t sub_1BCB1A9EC(void *a1, unint64_t a2)
{
  id v4;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1BCB63F50();
  swift_release();
  swift_release();
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1BCB648D4();
    swift_bridgeObjectRelease();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  v4 = a1;
  return sub_1BCB63F5C();
}

uint64_t sub_1BCB1AB00(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_1BCB1AB2C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  id v6;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_1BCAFC2E0(0, (unint64_t *)&qword_1EDA14480);
    v4 = sub_1BCB642D4();
  }
  swift_retain();
  v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1BCB1ABB8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  sub_1BCB066B8(0, &qword_1EDA14450, &qword_1EDA144B0, 0x1E0CB6AD8, MEMORY[0x1E0CB43C0]);
  v1[3] = v2;
  v1[4] = *(_QWORD *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BCB1AC38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  id v3;
  void *v4;
  id v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t KeyPath;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4398];
  sub_1BCB09B4C(0, (unint64_t *)&unk_1EDA14500, (unint64_t *)&unk_1EDA14440, MEMORY[0x1E0CB4398]);
  sub_1BCB066B8(0, (unint64_t *)&unk_1EDA14440, &qword_1EDA144B0, 0x1E0CB6AD8, v2);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1BCB66020;
  v3 = objc_msgSend((id)objc_opt_self(), sel_medicationDoseEventType);
  v4 = *(void **)(v1 + OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_doseEventPredicate);
  sub_1BCAFC2E0(0, &qword_1EDA144B0);
  v5 = v4;
  sub_1BCB6407C();

  v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CAEB88];
  sub_1BCB09B4C(0, (unint64_t *)&unk_1EDA144F0, &qword_1EDA142D8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CAEB88]);
  sub_1BCB066B8(0, &qword_1EDA142D8, &qword_1EDA144B0, 0x1E0CB6AD8, v6);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1BCB66020;
  KeyPath = swift_getKeyPath();
  MEMORY[0x1BCCFC188](KeyPath, 0);
  sub_1BCB64088();
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v8;
  *v8 = v0;
  v8[1] = sub_1BCB1AE68;
  return sub_1BCB64094();
}

uint64_t sub_1BCB1AE68(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 64) = a1;
  return swift_task_switch();
}

uint64_t sub_1BCB1AEDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = sub_1BCB52100(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease();
  if (v4)
    v5 = v4;
  else
    v5 = MEMORY[0x1E0DEE9D8];
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

uint64_t sub_1BCB1AF64()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 32) + 8))(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 24));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCB1AFAC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[14] = v0;
  sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v1[15] = swift_task_alloc();
  v1[16] = swift_task_alloc();
  sub_1BCB066B8(0, &qword_1EDA14438, (unint64_t *)&unk_1EDA14490, 0x1E0D2C4A8, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for HKMedicationScheduleItemQueryDescriptor);
  v1[17] = v2;
  v1[18] = swift_task_alloc();
  v1[19] = swift_task_alloc();
  sub_1BCB066B8(0, &qword_1EDA142D0, (unint64_t *)&unk_1EDA14490, 0x1E0D2C4A8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CAEB88]);
  v1[20] = v3;
  v1[21] = *(_QWORD *)(v3 - 8);
  v1[22] = swift_task_alloc();
  v4 = sub_1BCB63C38();
  v1[23] = v4;
  v1[24] = *(_QWORD *)(v4 - 8);
  v1[25] = swift_task_alloc();
  v5 = sub_1BCB63B3C();
  v1[26] = v5;
  v1[27] = *(_QWORD *)(v5 - 8);
  v1[28] = swift_task_alloc();
  v1[29] = swift_task_alloc();
  v1[30] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BCB1B13C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  void (*v9)(uint64_t, uint64_t);
  uint64_t KeyPath;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = v0[29];
  v2 = (_QWORD *)v0[27];
  v19 = v0[30];
  v20 = (char *)v0[28];
  v3 = v0[25];
  v4 = v0[26];
  v5 = v0[24];
  v18 = v0[23];
  v6 = v0[18];
  v28 = v0[19];
  v22 = v0[22];
  v23 = v0[15];
  v26 = v0[20];
  v27 = v0[14];
  v7 = v27 + OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_date;
  v24 = v0[21];
  v25 = (int *)v0[17];
  v21 = v0[16];
  swift_beginAccess();
  v8 = (void (*)(uint64_t, uint64_t, uint64_t))v2[2];
  v8(v1, v7, v4);
  sub_1BCB63C20();
  sub_1BCB63B9C();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v18);
  v9 = (void (*)(uint64_t, uint64_t))v2[1];
  v0[31] = v9;
  v9(v1, v4);
  v8(v1, v7, v4);
  Date.endOfDay()(v20);
  v9(v1, v4);
  KeyPath = swift_getKeyPath();
  MEMORY[0x1BCCFC188](KeyPath, 0);
  v8(v21, v19, v4);
  v11 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v2[7];
  v11(v21, 0, 1, v4);
  v8(v23, (uint64_t)v20, v4);
  v11(v23, 0, 1, v4);
  sub_1BCB06774();
  v12 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1BCB66020;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v24 + 16))(v13 + v12, v22, v26);
  v11(v6, 1, 1, v4);
  v14 = v6 + v25[7];
  v11(v14, 1, 1, v4);
  v15 = (_QWORD *)(v6 + v25[8]);
  *v15 = 0;
  v15[1] = 0;
  v16 = v25[9];
  *(_QWORD *)(v6 + v16) = 0;
  sub_1BCB64064();
  sub_1BCB067E8(v21, v6);
  sub_1BCB067E8(v23, v14);
  swift_bridgeObjectRelease();
  *v15 = 0;
  v15[1] = 0;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v6 + v16) = v13;
  sub_1BCB0682C(v6, v28);
  v0[32] = *(_QWORD *)(v27 + OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_healthStore);
  return swift_task_switch();
}

uint64_t sub_1BCB1B3E8()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (void *)v0[32];
  v2 = v0[19];
  v0[7] = v0 + 13;
  v0[2] = v0;
  v0[3] = sub_1BCB1B450;
  v3 = swift_continuation_init();
  sub_1BCB08C48(v3, v2, v1);
  return swift_continuation_await();
}

uint64_t sub_1BCB1B450()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 264) = v2;
  if (v2)
    swift_willThrow();
  else
    *(_QWORD *)(v1 + 272) = *(_QWORD *)(v1 + 104);
  return swift_task_switch();
}

uint64_t sub_1BCB1B4C4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
  v3 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 160);
  sub_1BCB08F68(*(_QWORD *)(v0 + 152));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  v2(v3, v4);
  v2(v1, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 272));
}

uint64_t sub_1BCB1B5B4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
  v3 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 160);
  sub_1BCB08F68(*(_QWORD *)(v0 + 152));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  v2(v3, v4);
  v2(v1, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCB1B6A0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 1872) = v0;
  *(_QWORD *)(v1 + 1880) = swift_getObjectType();
  return swift_task_switch();
}

uint64_t sub_1BCB1B6E4()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v11[2];

  if (qword_1EDA14510 != -1)
    swift_once();
  v1 = sub_1BCB63DDC();
  v0[236] = __swift_project_value_buffer(v1, (uint64_t)qword_1EDA14518);
  v2 = sub_1BCB63DD0();
  v3 = sub_1BCB64514();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v11[0] = v5;
    *(_DWORD *)v4 = 136446210;
    v6 = sub_1BCB64B14();
    v0[233] = sub_1BCB010C8(v6, v7, v11);
    sub_1BCB64640();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BCAF3000, v2, v3, "[%{public}s] Aquiring database assertion", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCFD928](v5, -1, -1);
    MEMORY[0x1BCCFD928](v4, -1, -1);
  }

  v8 = *(void **)(v0[234] + OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_healthStore);
  v11[0] = 0x6C7070612E6D6F63;
  v11[1] = 0xEA00000000002E65;
  sub_1BCB64B14();
  sub_1BCB641F0();
  swift_bridgeObjectRelease();
  v9 = sub_1BCB6410C();
  v0[237] = v9;
  swift_bridgeObjectRelease();
  v0[162] = v0;
  v0[167] = v0 + 185;
  v0[163] = sub_1BCB1B950;
  v0[179] = swift_continuation_init();
  v0[175] = MEMORY[0x1E0C809B0];
  v0[176] = 0x40000000;
  v0[177] = sub_1BCB1CD24;
  v0[178] = &block_descriptor_29;
  objc_msgSend(v8, sel_requestDatabaseAccessibilityAssertion_timeout_completion_, v9, v0 + 175, 10.0);
  return swift_continuation_await();
}

uint64_t sub_1BCB1B950()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 1904) = *(_QWORD *)(*(_QWORD *)v0 + 1328);
  return swift_task_switch();
}

uint64_t sub_1BCB1B9B0()
{
  _QWORD *v0;
  void *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  id v13;
  uint64_t v15;

  v1 = (void *)v0[237];
  v0[239] = v0[185];

  v2 = sub_1BCB63DD0();
  v3 = sub_1BCB64514();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v15 = v5;
    *(_DWORD *)v4 = 136446210;
    v6 = sub_1BCB64B14();
    v0[227] = sub_1BCB010C8(v6, v7, &v15);
    sub_1BCB64640();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BCAF3000, v2, v3, "[%{public}s] Took assertion and beginning query for underlying data.", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCFD928](v5, -1, -1);
    MEMORY[0x1BCCFD928](v4, -1, -1);
  }

  v8 = (void *)v0[234];
  v9 = swift_allocObject();
  v0[240] = v9;
  *(_QWORD *)(v9 + 16) = v8;
  v10 = v8;
  swift_retain();
  v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8];
  sub_1BCB066B8(255, &qword_1EDA14458, &qword_1EDA142A0, 0x1E0CB68A8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  swift_asyncLet_begin();
  v12 = swift_allocObject();
  v0[241] = v12;
  *(_QWORD *)(v12 + 16) = v10;
  v13 = v10;
  swift_retain();
  sub_1BCB066B8(255, &qword_1EDA14460, (unint64_t *)&unk_1EDA14490, 0x1E0D2C4A8, v11);
  swift_asyncLet_begin();
  return swift_asyncLet_get_throwing();
}

uint64_t sub_1BCB1BC1C()
{
  uint64_t v0;
  _QWORD *v1;

  v1[242] = v0;
  if (v0)
    return swift_asyncLet_finish();
  v1[243] = v1[197];
  swift_bridgeObjectRetain();
  return swift_asyncLet_get_throwing();
}

uint64_t sub_1BCB1BCA4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;

  v1[244] = v0;
  if (v0)
    return swift_task_switch();
  v3 = v1[191];
  v1[245] = v3;
  swift_bridgeObjectRetain();
  v4 = (_QWORD *)swift_task_alloc();
  v1[246] = v4;
  *v4 = v1;
  v4[1] = sub_1BCB1BD40;
  return sub_1BCB1CE44(v1[243], v3);
}

uint64_t sub_1BCB1BD40()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 1976) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0)
    return swift_asyncLet_finish();
  else
    return swift_task_switch();
}

uint64_t sub_1BCB1BDFC()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;

  v1 = sub_1BCB63DD0();
  v2 = sub_1BCB64514();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v8 = v4;
    *(_DWORD *)v3 = 136446210;
    v5 = sub_1BCB64B14();
    *(_QWORD *)(v0 + 1768) = sub_1BCB010C8(v5, v6, &v8);
    sub_1BCB64640();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BCAF3000, v1, v2, "[%{public}s] Finished query and update handler for underlying data. Invalidating assertion.", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCFD928](v4, -1, -1);
    MEMORY[0x1BCCFD928](v3, -1, -1);
  }

  objc_msgSend(*(id *)(v0 + 1912), sel_invalidate);
  return swift_asyncLet_finish();
}

uint64_t sub_1BCB1BF70()
{
  return swift_task_switch();
}

uint64_t sub_1BCB1BF84()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1BCB1BFD8()
{
  return swift_task_switch();
}

uint64_t sub_1BCB1BFEC()
{
  uint64_t v0;

  swift_release_n();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCB1C038()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  NSObject *log;
  uint64_t v19;
  uint64_t v20;

  v1 = *(void **)(v0 + 1896);
  swift_willThrow();

  v2 = *(void **)(v0 + 1904);
  v3 = *(id *)(v0 + 1872);
  v4 = v2;
  v5 = v3;
  v6 = v2;
  v7 = sub_1BCB63DD0();
  v8 = sub_1BCB644FC();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(void **)(v0 + 1872);
    v10 = swift_slowAlloc();
    log = v7;
    v11 = (_QWORD *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v20 = v19;
    *(_DWORD *)v10 = 138412546;
    *(_QWORD *)(v0 + 1720) = v9;
    v12 = v9;
    sub_1BCB64640();
    *v11 = v9;

    *(_WORD *)(v10 + 12) = 2080;
    *(_QWORD *)(v0 + 1672) = v2;
    v13 = v2;
    sub_1BCB052CC();
    v14 = sub_1BCB64190();
    *(_QWORD *)(v0 + 1624) = sub_1BCB010C8(v14, v15, &v20);
    sub_1BCB64640();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1BCAF3000, log, v8, "[%@] Error fetching medication dose data error: %s", (uint8_t *)v10, 0x16u);
    sub_1BCB066B8(0, (unint64_t *)&qword_1EF4878A0, (unint64_t *)&qword_1EDA139E0, 0x1E0DE7910, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    swift_arrayDestroy();
    MEMORY[0x1BCCFD928](v11, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1BCCFD928](v19, -1, -1);
    MEMORY[0x1BCCFD928](v10, -1, -1);

  }
  else
  {
    v16 = *(void **)(v0 + 1872);

  }
  sub_1BCB1F894(0);
  sub_1BCB1F894(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCB1C2D4()
{
  return swift_task_switch();
}

uint64_t sub_1BCB1C2E8()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1BCB1C33C()
{
  return swift_task_switch();
}

uint64_t sub_1BCB1C350()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  NSObject *log;
  uint64_t v18;
  uint64_t v19;

  swift_release();
  v1 = *(void **)(v0 + 1936);
  v2 = *(id *)(v0 + 1872);
  v3 = v1;
  v4 = v2;
  v5 = v1;
  v6 = sub_1BCB63DD0();
  v7 = sub_1BCB644FC();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(void **)(v0 + 1872);
    v9 = swift_slowAlloc();
    log = v6;
    v10 = (_QWORD *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    v19 = v18;
    *(_DWORD *)v9 = 138412546;
    *(_QWORD *)(v0 + 1720) = v8;
    v11 = v8;
    sub_1BCB64640();
    *v10 = v8;

    *(_WORD *)(v9 + 12) = 2080;
    *(_QWORD *)(v0 + 1672) = v1;
    v12 = v1;
    sub_1BCB052CC();
    v13 = sub_1BCB64190();
    *(_QWORD *)(v0 + 1624) = sub_1BCB010C8(v13, v14, &v19);
    sub_1BCB64640();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1BCAF3000, log, v7, "[%@] Error fetching medication dose data error: %s", (uint8_t *)v9, 0x16u);
    sub_1BCB066B8(0, (unint64_t *)&qword_1EF4878A0, (unint64_t *)&qword_1EDA139E0, 0x1E0DE7910, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    swift_arrayDestroy();
    MEMORY[0x1BCCFD928](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1BCCFD928](v18, -1, -1);
    MEMORY[0x1BCCFD928](v9, -1, -1);

    sub_1BCB1F894((uint64_t)&unk_1EF487B60);
  }
  else
  {
    v15 = *(void **)(v0 + 1872);

    sub_1BCB1F894((uint64_t)&unk_1EF487B60);
  }
  sub_1BCB1F894((uint64_t)&unk_1EF487B70);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCB1C628()
{
  swift_bridgeObjectRelease();
  return swift_asyncLet_finish();
}

uint64_t sub_1BCB1C67C()
{
  return swift_task_switch();
}

uint64_t sub_1BCB1C690()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1BCB1C6E4()
{
  return swift_task_switch();
}

uint64_t sub_1BCB1C6F8()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  NSObject *log;
  uint64_t v18;
  uint64_t v19;

  swift_release();
  v1 = *(void **)(v0 + 1952);
  v2 = *(id *)(v0 + 1872);
  v3 = v1;
  v4 = v2;
  v5 = v1;
  v6 = sub_1BCB63DD0();
  v7 = sub_1BCB644FC();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(void **)(v0 + 1872);
    v9 = swift_slowAlloc();
    log = v6;
    v10 = (_QWORD *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    v19 = v18;
    *(_DWORD *)v9 = 138412546;
    *(_QWORD *)(v0 + 1720) = v8;
    v11 = v8;
    sub_1BCB64640();
    *v10 = v8;

    *(_WORD *)(v9 + 12) = 2080;
    *(_QWORD *)(v0 + 1672) = v1;
    v12 = v1;
    sub_1BCB052CC();
    v13 = sub_1BCB64190();
    *(_QWORD *)(v0 + 1624) = sub_1BCB010C8(v13, v14, &v19);
    sub_1BCB64640();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1BCAF3000, log, v7, "[%@] Error fetching medication dose data error: %s", (uint8_t *)v9, 0x16u);
    sub_1BCB066B8(0, (unint64_t *)&qword_1EF4878A0, (unint64_t *)&qword_1EDA139E0, 0x1E0DE7910, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    swift_arrayDestroy();
    MEMORY[0x1BCCFD928](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1BCCFD928](v18, -1, -1);
    MEMORY[0x1BCCFD928](v9, -1, -1);

    sub_1BCB1F894((uint64_t)&unk_1EF487B60);
  }
  else
  {
    v15 = *(void **)(v0 + 1872);

    sub_1BCB1F894((uint64_t)&unk_1EF487B60);
  }
  sub_1BCB1F894((uint64_t)&unk_1EF487B70);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCB1C9D0()
{
  return swift_task_switch();
}

uint64_t sub_1BCB1C9E4()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1BCB1CA38()
{
  return swift_task_switch();
}

uint64_t sub_1BCB1CA4C()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  NSObject *log;
  uint64_t v18;
  uint64_t v19;

  swift_release();
  v1 = *(void **)(v0 + 1976);
  v2 = *(id *)(v0 + 1872);
  v3 = v1;
  v4 = v2;
  v5 = v1;
  v6 = sub_1BCB63DD0();
  v7 = sub_1BCB644FC();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(void **)(v0 + 1872);
    v9 = swift_slowAlloc();
    log = v6;
    v10 = (_QWORD *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    v19 = v18;
    *(_DWORD *)v9 = 138412546;
    *(_QWORD *)(v0 + 1720) = v8;
    v11 = v8;
    sub_1BCB64640();
    *v10 = v8;

    *(_WORD *)(v9 + 12) = 2080;
    *(_QWORD *)(v0 + 1672) = v1;
    v12 = v1;
    sub_1BCB052CC();
    v13 = sub_1BCB64190();
    *(_QWORD *)(v0 + 1624) = sub_1BCB010C8(v13, v14, &v19);
    sub_1BCB64640();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1BCAF3000, log, v7, "[%@] Error fetching medication dose data error: %s", (uint8_t *)v9, 0x16u);
    sub_1BCB066B8(0, (unint64_t *)&qword_1EF4878A0, (unint64_t *)&qword_1EDA139E0, 0x1E0DE7910, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    swift_arrayDestroy();
    MEMORY[0x1BCCFD928](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1BCCFD928](v18, -1, -1);
    MEMORY[0x1BCCFD928](v9, -1, -1);

    sub_1BCB1F894((uint64_t)&unk_1EF487B60);
  }
  else
  {
    v15 = *(void **)(v0 + 1872);

    sub_1BCB1F894((uint64_t)&unk_1EF487B60);
  }
  sub_1BCB1F894((uint64_t)&unk_1EF487B70);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCB1CD24(uint64_t result, void *a2, void *a3)
{
  _QWORD *v4;
  id v5;
  id v6;

  if (a3)
  {
    sub_1BCB052CC();
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 64) + 40) = a2;
    v6 = a2;
    return swift_continuation_throwingResume();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BCB1CDAC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_1BCB08470;
  return sub_1BCB1ABB8();
}

uint64_t sub_1BCB1CDF8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_1BCB0838C;
  return sub_1BCB1AFAC();
}

uint64_t sub_1BCB1CE44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[33] = a2;
  v3[34] = v2;
  v3[32] = a1;
  sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v3[35] = swift_task_alloc();
  v4 = sub_1BCB63B3C();
  v3[36] = v4;
  v3[37] = *(_QWORD *)(v4 - 8);
  v3[38] = swift_task_alloc();
  v3[39] = swift_task_alloc();
  v5 = sub_1BCB63FBC();
  v3[40] = v5;
  v3[41] = *(_QWORD *)(v5 - 8);
  v3[42] = swift_task_alloc();
  v6 = sub_1BCB63FD4();
  v3[43] = v6;
  v3[44] = *(_QWORD *)(v6 - 8);
  v3[45] = swift_task_alloc();
  return swift_task_switch();
}

void sub_1BCB1CF40()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  uint64_t (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v1 = MEMORY[0x1E0DEE9D8];
  v0[27] = MEMORY[0x1E0DEE9D8];
  v2 = v0[32];
  v0[30] = v1;
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = sub_1BCB648D4();
    v0[46] = v11;
    if (v11)
    {
LABEL_3:
      v4 = v0[32];
      v0[47] = *(_QWORD *)(v0[34]
                         + OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_medicationDetailProvider);
      v0[48] = v1;
      if ((v4 & 0xC000000000000001) != 0)
        v5 = (id)MEMORY[0x1BCCFCF20](0);
      else
        v5 = *(id *)(v4 + 32);
      v0[49] = v5;
      v0[50] = 1;
      v6 = objc_msgSend(v5, sel_medicationIdentifier);
      v7 = sub_1BCB6413C();
      v9 = v8;

      v0[51] = v9;
      v10 = (_QWORD *)swift_task_alloc();
      v0[52] = v10;
      *v10 = v0;
      v10[1] = sub_1BCB1D4CC;
LABEL_7:
      sub_1BCB42F60(v7, v9);
      return;
    }
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v0[46] = v3;
    if (v3)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  v0[55] = v1;
  v12 = v0[33];
  if (v12 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain();
    v33 = sub_1BCB648D4();
    v0[56] = v33;
    if (v33)
      goto LABEL_11;
LABEL_30:
    v34 = v0[45];
    v35 = v0[42];
    v45 = v0[44];
    v46 = v0[43];
    v36 = v0[40];
    v44 = v0[41];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BCAFC2E0(0, (unint64_t *)&unk_1EDA13D78);
    v37 = (void *)sub_1BCB64580();
    v38 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v39 = v0[30];
    v40 = v0[27];
    v41 = (_QWORD *)swift_allocObject();
    v41[2] = v38;
    v41[3] = v39;
    v41[4] = v40;
    v0[6] = sub_1BCB1F818;
    v0[7] = v41;
    v0[2] = MEMORY[0x1E0C809B0];
    v0[3] = 1107296256;
    v0[4] = sub_1BCB1AB00;
    v0[5] = &block_descriptor_2;
    v42 = _Block_copy(v0 + 2);
    swift_retain();
    sub_1BCB63FC8();
    v0[28] = v1;
    v43 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
    sub_1BCAF7D24((unint64_t *)&qword_1EDA13D20, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1BCAFC448(0, &qword_1EDA13D28, v43, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BCB18708();
    sub_1BCB646C4();
    MEMORY[0x1BCCFCCEC](0, v34, v35, v42);
    _Block_release(v42);

    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v35, v36);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v34, v46);
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    ((void (*)(void))v0[1])();
    return;
  }
  v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v0[56] = v13;
  if (!v13)
    goto LABEL_30;
LABEL_11:
  v14 = 0;
  v0[57] = OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_medicationDetailProvider;
  while (1)
  {
    v15 = v0[33];
    if ((v15 & 0xC000000000000001) != 0)
    {
      v16 = (id)MEMORY[0x1BCCFCF20](v14);
    }
    else
    {
      if (v14 >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_28;
      v16 = *(id *)(v15 + 8 * v14 + 32);
    }
    v17 = v16;
    v0[58] = v16;
    v0[59] = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v18 = objc_msgSend(v16, sel_identifier);
    v19 = sub_1BCB6413C();
    v21 = v20;

    v0[60] = v19;
    v0[61] = v21;
    v22 = objc_msgSend(v17, sel_doses);
    sub_1BCAFC2E0(0, &qword_1EDA144A0);
    v23 = sub_1BCB642D4();
    v0[62] = v23;

    if (v23 >> 62)
      break;
    v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    v0[63] = v24;
    if (v24)
      goto LABEL_22;
LABEL_19:
    v25 = v0[59];
    v26 = v0[56];

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v25 == v26)
      goto LABEL_30;
    v14 = v0[59];
  }
  swift_bridgeObjectRetain();
  v27 = sub_1BCB648D4();
  swift_bridgeObjectRelease();
  v0[63] = v27;
  if (!v27)
    goto LABEL_19;
LABEL_22:
  v0[64] = *(_QWORD *)(v0[34] + v0[57]);
  v28 = v0[62];
  if ((v28 & 0xC000000000000001) != 0)
  {
    v29 = (id)MEMORY[0x1BCCFCF20](0);
LABEL_26:
    v0[65] = v29;
    v0[66] = 1;
    v30 = objc_msgSend(v29, sel_medicationIdentifier);
    v7 = sub_1BCB6413C();
    v9 = v31;

    v0[67] = v9;
    v32 = (_QWORD *)swift_task_alloc();
    v0[68] = v32;
    *v32 = v0;
    v32[1] = sub_1BCB1E260;
    goto LABEL_7;
  }
  if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v29 = *(id *)(v28 + 32);
    goto LABEL_26;
  }
  __break(1u);
}

uint64_t sub_1BCB1D4CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 424) = a1;
  *(_QWORD *)(v3 + 432) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_1BCB1D578()
{
  uint64_t v0;
  void **p_weak_ivar_lyt;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  void **v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  id v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  void *v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v76)(uint64_t, uint64_t, uint64_t);
  void *v77;
  id v78;
  id v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  id v90;
  void **v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  void *v109;
  uint64_t (*v110)(uint64_t);
  uint64_t v111;
  void **v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  void **v123;

  p_weak_ivar_lyt = *(void ***)(v0 + 424);
  if (!p_weak_ivar_lyt)
  {
    v30 = *(_QWORD **)(v0 + 384);
    goto LABEL_15;
  }
  if (objc_msgSend(*(id *)(v0 + 392), sel_status) == (id)4 || objc_msgSend(*(id *)(v0 + 392), sel_status) == (id)5)
  {
    v2 = *(void **)(v0 + 392);
    v3 = *(_QWORD *)(v0 + 376);
    v4 = *(_QWORD *)(v0 + 360);
    v119 = *(_QWORD *)(v0 + 352);
    v122 = *(void **)(v0 + 344);
    v113 = *(_QWORD *)(v0 + 336);
    v117 = *(_QWORD *)(v0 + 328);
    v114 = *(_QWORD *)(v0 + 320);
    type metadata accessor for MedicationDose();
    v5 = swift_allocObject();
    v6 = OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationDose_medicationDetailProvider;
    *(_QWORD *)(v5 + OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationDose_medicationDetailProvider) = 0;
    *(_QWORD *)(v5 + 16) = v2;
    *(_QWORD *)(v5 + 24) = 0;
    *(_BYTE *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + v6) = v3;
    v7 = v2;
    swift_retain_n();
    v8 = v7;
    v123 = p_weak_ivar_lyt;
    v9 = p_weak_ivar_lyt;
    swift_release();
    swift_beginAccess();
    *(_QWORD *)(v0 + 232) = v9;
    sub_1BCAFC2E0(0, (unint64_t *)&qword_1EDA144A8);
    v112 = v9;
    sub_1BCB63F2C();
    swift_endAccess();
    v10 = v8;
    swift_retain();
    swift_retain();
    v11 = objc_msgSend(v10, sel_medicationIdentifier);
    v12 = sub_1BCB6413C();
    v14 = v13;

    v111 = *(_QWORD *)(v3 + 72);
    v15 = swift_allocObject();
    swift_weakInit();
    v16 = (_QWORD *)swift_allocObject();
    v16[2] = v15;
    v16[3] = v12;
    v16[4] = v14;
    v16[5] = v5;
    *(_QWORD *)(v0 + 96) = sub_1BCB1869C;
    *(_QWORD *)(v0 + 104) = v16;
    *(_QWORD *)(v0 + 64) = MEMORY[0x1E0C809B0];
    *(_QWORD *)(v0 + 72) = 1107296256;
    *(_QWORD *)(v0 + 80) = sub_1BCB1AB00;
    *(_QWORD *)(v0 + 88) = &block_descriptor_28;
    v17 = _Block_copy((const void *)(v0 + 64));
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1BCB63FC8();
    *(_QWORD *)(v0 + 248) = MEMORY[0x1E0DEE9D8];
    v18 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
    sub_1BCAF7D24((unint64_t *)&qword_1EDA13D20, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1BCAFC448(0, &qword_1EDA13D28, v18, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BCB18708();
    sub_1BCB646C4();
    MEMORY[0x1BCCFCCEC](0, v4, v113, v17);
    _Block_release(v17);
    (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v113, v114);
    (*(void (**)(uint64_t, void *))(v119 + 8))(v4, v122);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release_n();

    swift_release();
    v19 = swift_release();
    MEMORY[0x1BCCFCA1C](v19);
    if (*(_QWORD *)((*(_QWORD *)(v0 + 240) & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*(_QWORD *)(v0 + 240) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
    {
LABEL_5:
      sub_1BCB64334();
      sub_1BCB642EC();
      p_weak_ivar_lyt = v123;
      goto LABEL_6;
    }
LABEL_54:
    sub_1BCB64304();
    goto LABEL_5;
  }
  v62 = objc_msgSend(*(id *)(v0 + 392), sel_scheduleItemIdentifier);
  if (!v62)
    goto LABEL_6;
  v63 = v62;
  v64 = *(void **)(v0 + 392);
  v65 = sub_1BCB6413C();
  v67 = v66;

  v68 = objc_msgSend(v64, sel_scheduledDate);
  if (!v68)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 296) + 56))(*(_QWORD *)(v0 + 280), 1, 1, *(_QWORD *)(v0 + 288));
    goto LABEL_47;
  }
  v69 = v68;
  v123 = (void **)v65;
  v70 = p_weak_ivar_lyt;
  v72 = *(_QWORD *)(v0 + 296);
  v71 = *(_QWORD *)(v0 + 304);
  v74 = *(_QWORD *)(v0 + 280);
  v73 = *(_QWORD *)(v0 + 288);
  sub_1BCB63B18();

  v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 32);
  v75(v74, v71, v73);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v72 + 56))(v74, 0, 1, v73);
  v76 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
  p_weak_ivar_lyt = v70;
  if (v76(v74, 1, v73) == 1)
  {
LABEL_47:
    v99 = *(_QWORD *)(v0 + 280);
    swift_bridgeObjectRelease();
    sub_1BCAFC62C(v99, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
    goto LABEL_6;
  }
  v77 = *(void **)(v0 + 392);
  v75(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 288));
  v78 = objc_msgSend(v77, sel_scheduledDoseQuantity);
  if (v78)
  {
    v79 = v78;
    v80 = *(void **)(v0 + 392);
    v120 = *(_QWORD *)(v0 + 376);
    v81 = *(_QWORD *)(v0 + 304);
    v82 = *(_QWORD *)(v0 + 288);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 + 296) + 16))(v81, *(_QWORD *)(v0 + 312), v82);
    v83 = objc_msgSend(v80, sel_medicationIdentifier);
    v84 = sub_1BCB6413C();
    v115 = v85;

    sub_1BCB643E8();
    v87 = v86;
    v122 = v79;
    LOBYTE(v79) = objc_msgSend(v80, sel_isLastScheduledDose);
    type metadata accessor for ScheduleItem();
    v88 = swift_allocObject();
    *(_QWORD *)(v88 + 16) = v123;
    *(_QWORD *)(v88 + 24) = v67;
    v75(v88 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_date, v81, v82);
    v89 = (uint64_t *)(v88 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_medicationIdentifier);
    *v89 = v84;
    v89[1] = v115;
    *(_QWORD *)(v88 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_doseAmount) = v87;
    *(_BYTE *)(v88 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_isLastScheduledDose) = (_BYTE)v79;
    *(_QWORD *)(v0 + 136) = v88;
    *(_QWORD *)(v0 + 144) = v80;
    *(_BYTE *)(v0 + 152) = 1;
    type metadata accessor for MedicationDose();
    swift_allocObject();
    v90 = v80;
    p_weak_ivar_lyt = v70;
    swift_retain();
    v91 = v70;
    swift_retain();
    MedicationDose.init(_:medicationDetailProvider:medication:)((char **)(v0 + 136), v120, v91);
    MEMORY[0x1BCCFCA1C]();
    if (*(_QWORD *)((*(_QWORD *)(v0 + 216) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 216) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      goto LABEL_56;
    goto LABEL_41;
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 296) + 8))(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 288));
  swift_bridgeObjectRelease();
LABEL_6:
  v20 = objc_msgSend(*(id *)(v0 + 392), sel_scheduleItemIdentifier, v111);
  if (v20)
  {
    v21 = v20;
    v22 = *(void **)(v0 + 392);
    v23 = sub_1BCB6413C();
    v25 = v24;

    *(_QWORD *)(v0 + 200) = v23;
    *(_QWORD *)(v0 + 208) = v25;
    sub_1BCB641F0();
    v26 = objc_msgSend(v22, sel_medicationIdentifier);
    sub_1BCB6413C();

    sub_1BCB641F0();
    swift_bridgeObjectRelease();
    v27 = *(_QWORD *)(v0 + 200);
    v28 = *(_QWORD *)(v0 + 208);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *(_QWORD **)(v0 + 384);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v30 = sub_1BCAF6A40(0, v30[2] + 1, 1, *(_QWORD **)(v0 + 384));
    v32 = v30[2];
    v31 = v30[3];
    if (v32 >= v31 >> 1)
      v30 = sub_1BCAF6A40((_QWORD *)(v31 > 1), v32 + 1, 1, v30);
    v30[2] = v32 + 1;
    v33 = &v30[2 * v32];
    v33[4] = v27;
    v33[5] = v28;
  }
  else
  {
    v30 = *(_QWORD **)(v0 + 384);
  }

LABEL_15:
  v34 = *(_QWORD *)(v0 + 400);
  v35 = *(_QWORD *)(v0 + 368);

  if (v34 == v35)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 440) = v30;
    v36 = *(_QWORD *)(v0 + 264);
    if (v36 >> 62)
    {
LABEL_51:
      swift_bridgeObjectRetain();
      v100 = sub_1BCB648D4();
      *(_QWORD *)(v0 + 448) = v100;
      if (v100)
        goto LABEL_18;
    }
    else
    {
      v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 448) = v37;
      if (v37)
      {
LABEL_18:
        v38 = 0;
        *(_QWORD *)(v0 + 456) = OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_medicationDetailProvider;
        p_weak_ivar_lyt = &TestMedicationDetailProvider.weak_ivar_lyt;
        while (1)
        {
          v39 = *(_QWORD *)(v0 + 264);
          if ((v39 & 0xC000000000000001) != 0)
          {
            v40 = (id)MEMORY[0x1BCCFCF20](v38);
          }
          else
          {
            if (v38 >= *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_50;
            v40 = *(id *)(v39 + 8 * v38 + 32);
          }
          v41 = v40;
          *(_QWORD *)(v0 + 464) = v40;
          *(_QWORD *)(v0 + 472) = v38 + 1;
          if (__OFADD__(v38, 1))
          {
            __break(1u);
LABEL_50:
            __break(1u);
            goto LABEL_51;
          }
          v42 = objc_msgSend(v40, sel_identifier);
          v43 = sub_1BCB6413C();
          v45 = v44;

          *(_QWORD *)(v0 + 480) = v43;
          *(_QWORD *)(v0 + 488) = v45;
          v46 = objc_msgSend(v41, sel_doses);
          sub_1BCAFC2E0(0, &qword_1EDA144A0);
          v47 = sub_1BCB642D4();
          *(_QWORD *)(v0 + 496) = v47;

          if (v47 >> 62)
          {
            swift_bridgeObjectRetain();
            v51 = sub_1BCB648D4();
            swift_bridgeObjectRelease();
            *(_QWORD *)(v0 + 504) = v51;
            if (v51)
            {
LABEL_29:
              *(_QWORD *)(v0 + 512) = *(_QWORD *)(*(_QWORD *)(v0 + 272) + *(_QWORD *)(v0 + 456));
              v52 = *(_QWORD *)(v0 + 496);
              if ((v52 & 0xC000000000000001) != 0)
              {
                v53 = (id)MEMORY[0x1BCCFCF20](0);
LABEL_44:
                *(_QWORD *)(v0 + 520) = v53;
                *(_QWORD *)(v0 + 528) = 1;
                v95 = objc_msgSend(v53, sel_medicationIdentifier);
                v58 = sub_1BCB6413C();
                v60 = v96;

                *(_QWORD *)(v0 + 536) = v60;
                v97 = (_QWORD *)swift_task_alloc();
                *(_QWORD *)(v0 + 544) = v97;
                *v97 = v0;
                v97[1] = sub_1BCB1E260;
                return sub_1BCB42F60(v58, v60);
              }
              if (*(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
                v53 = *(id *)(v52 + 32);
                goto LABEL_44;
              }
              __break(1u);
LABEL_56:
              sub_1BCB64304();
LABEL_41:
              v92 = *(_QWORD *)(v0 + 312);
              v93 = *(_QWORD *)(v0 + 288);
              v94 = *(_QWORD *)(v0 + 296);
              sub_1BCB64334();
              sub_1BCB642EC();
              swift_release();

              (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v92, v93);
              goto LABEL_6;
            }
          }
          else
          {
            v48 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10);
            *(_QWORD *)(v0 + 504) = v48;
            if (v48)
              goto LABEL_29;
          }
          v49 = *(_QWORD *)(v0 + 472);
          v50 = *(_QWORD *)(v0 + 448);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v49 == v50)
            break;
          v38 = *(_QWORD *)(v0 + 472);
        }
      }
    }
    v101 = *(_QWORD *)(v0 + 360);
    v102 = *(_QWORD *)(v0 + 336);
    v118 = *(_QWORD *)(v0 + 352);
    v121 = *(_QWORD *)(v0 + 344);
    v103 = *(_QWORD *)(v0 + 320);
    v116 = *(_QWORD *)(v0 + 328);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BCAFC2E0(0, (unint64_t *)&unk_1EDA13D78);
    v104 = (void *)sub_1BCB64580();
    v105 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v106 = *(_QWORD *)(v0 + 240);
    v107 = *(_QWORD *)(v0 + 216);
    v108 = (_QWORD *)swift_allocObject();
    v108[2] = v105;
    v108[3] = v106;
    v108[4] = v107;
    *(_QWORD *)(v0 + 48) = sub_1BCB1F818;
    *(_QWORD *)(v0 + 56) = v108;
    *(_QWORD *)(v0 + 16) = MEMORY[0x1E0C809B0];
    *(_QWORD *)(v0 + 24) = 1107296256;
    *(_QWORD *)(v0 + 32) = sub_1BCB1AB00;
    *(_QWORD *)(v0 + 40) = &block_descriptor_2;
    v109 = _Block_copy((const void *)(v0 + 16));
    swift_retain();
    sub_1BCB63FC8();
    *(_QWORD *)(v0 + 224) = MEMORY[0x1E0DEE9D8];
    v110 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
    sub_1BCAF7D24((unint64_t *)&qword_1EDA13D20, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1BCAFC448(0, &qword_1EDA13D28, v110, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BCB18708();
    sub_1BCB646C4();
    MEMORY[0x1BCCFCCEC](0, v101, v102, v109);
    _Block_release(v109);

    (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v102, v103);
    (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v101, v121);
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v54 = *(_QWORD *)(v0 + 400);
    *(_QWORD *)(v0 + 384) = v30;
    v55 = *(_QWORD *)(v0 + 256);
    if ((v55 & 0xC000000000000001) != 0)
      v56 = (id)MEMORY[0x1BCCFCF20](v54);
    else
      v56 = *(id *)(v55 + 8 * v54 + 32);
    *(_QWORD *)(v0 + 392) = v56;
    *(_QWORD *)(v0 + 400) = v54 + 1;
    if (__OFADD__(v54, 1))
    {
      __break(1u);
      goto LABEL_54;
    }
    v57 = objc_msgSend(v56, sel_medicationIdentifier);
    v58 = sub_1BCB6413C();
    v60 = v59;

    *(_QWORD *)(v0 + 408) = v60;
    v61 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 416) = v61;
    *v61 = v0;
    v61[1] = sub_1BCB1D4CC;
    return sub_1BCB42F60(v58, v60);
  }
}

uint64_t sub_1BCB1E260(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 552) = a1;
  *(_QWORD *)(v3 + 560) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

void sub_1BCB1E32C()
{
  uint64_t v0;
  unint64_t *v1;
  void *v2;
  uint64_t v3;
  void **p_weak_ivar_lyt;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  void *v59;
  uint64_t (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;

  *(_QWORD *)(v0 + 184) = *(_QWORD *)(v0 + 480);
  v1 = (unint64_t *)(v0 + 184);
  v2 = *(void **)(v0 + 520);
  v3 = *(_QWORD *)(v0 + 440);
  *(_QWORD *)(v0 + 192) = *(_QWORD *)(v0 + 488);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BCB641F0();
  p_weak_ivar_lyt = &TestMedicationDetailProvider.weak_ivar_lyt;
  v5 = objc_msgSend(v2, sel_medicationIdentifier);
  sub_1BCB6413C();

  sub_1BCB641F0();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v0 + 192);
  v7 = *(_QWORD *)(v3 + 16);
  v8 = *(_QWORD *)(v0 + 440);
  if (!v7)
    goto LABEL_9;
  v9 = *v1;
  v10 = *(_QWORD *)(v8 + 32) == *v1 && *(_QWORD *)(v8 + 40) == v6;
  if (v10 || (sub_1BCB649F4() & 1) != 0)
    goto LABEL_7;
  v13 = *(_QWORD *)(v0 + 440);
  if (v7 == 1)
    goto LABEL_9;
  if (*(_QWORD *)(v13 + 48) == v9 && *(_QWORD *)(v13 + 56) == v6 || (sub_1BCB649F4() & 1) != 0)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    v11 = *(void **)(v0 + 552);
    v12 = *(void **)(v0 + 520);
    swift_bridgeObjectRelease();

    goto LABEL_13;
  }
  if (v7 == 2)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    v9 = *(_QWORD *)(v0 + 552);
    swift_bridgeObjectRelease();
    if (v9)
    {
      v14 = *(void **)(v0 + 552);
      v15 = *(void **)(v0 + 520);
      v16 = *(_QWORD *)(v0 + 512);
      v17 = *(_QWORD *)(v0 + 480);
      v18 = *(_QWORD *)(v0 + 488);
      v19 = *(void **)(v0 + 464);
      v20 = *(_QWORD *)(v0 + 304);
      v68 = *(_QWORD *)(v0 + 296);
      v70 = *(_QWORD *)(v0 + 288);
      swift_bridgeObjectRetain();
      v71 = v14;
      v21 = objc_msgSend(v19, sel_scheduledDateTime);
      sub_1BCB63B18();

      v22 = objc_msgSend(v15, sel_medicationIdentifier);
      v23 = sub_1BCB6413C();
      v25 = v24;

      v26 = objc_msgSend(v15, sel_dose);
      sub_1BCB643E8();
      v28 = v27;

      LOBYTE(v26) = objc_msgSend(v15, sel_isLastScheduledDose);
      type metadata accessor for ScheduleItem();
      v29 = swift_allocObject();
      *(_QWORD *)(v29 + 16) = v17;
      *(_QWORD *)(v29 + 24) = v18;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 32))(v29 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_date, v20, v70);
      v30 = (uint64_t *)(v29 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_medicationIdentifier);
      *v30 = v23;
      v30[1] = v25;
      *(_QWORD *)(v29 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_doseAmount) = v28;
      *(_BYTE *)(v29 + OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_isLastScheduledDose) = (_BYTE)v26;
      *(_QWORD *)(v0 + 160) = v29;
      *(_QWORD *)(v0 + 168) = 0;
      *(_BYTE *)(v0 + 176) = 1;
      type metadata accessor for MedicationDose();
      swift_allocObject();
      v9 = (unint64_t)v71;
      swift_retain();
      swift_retain();
      MedicationDose.init(_:medicationDetailProvider:medication:)((char **)(v0 + 160), v16, (void *)v9);
      MEMORY[0x1BCCFCA1C]();
      if (*(_QWORD *)((*(_QWORD *)(v0 + 216) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 216) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        goto LABEL_48;
      goto LABEL_11;
    }
    v11 = *(void **)(v0 + 520);
    while (1)
    {
LABEL_13:

      v31 = *(_QWORD *)(v0 + 528);
      if (v31 == *(_QWORD *)(v0 + 504))
      {
        while (1)
        {
          v9 = *(_QWORD *)(v0 + 496);
          v32 = *(_QWORD *)(v0 + 472);
          v33 = *(_QWORD *)(v0 + 448);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v32 == v33)
          {
            v51 = *(_QWORD *)(v0 + 360);
            v52 = *(_QWORD *)(v0 + 336);
            v67 = *(_QWORD *)(v0 + 352);
            v69 = *(_QWORD *)(v0 + 344);
            v53 = *(_QWORD *)(v0 + 320);
            v66 = *(_QWORD *)(v0 + 328);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1BCAFC2E0(0, (unint64_t *)&unk_1EDA13D78);
            v54 = (void *)sub_1BCB64580();
            v55 = swift_allocObject();
            swift_unknownObjectWeakInit();
            v56 = *(_QWORD *)(v0 + 240);
            v57 = *(_QWORD *)(v0 + 216);
            v58 = (_QWORD *)swift_allocObject();
            v58[2] = v55;
            v58[3] = v56;
            v58[4] = v57;
            *(_QWORD *)(v0 + 48) = sub_1BCB1F818;
            *(_QWORD *)(v0 + 56) = v58;
            *(_QWORD *)(v0 + 16) = MEMORY[0x1E0C809B0];
            *(_QWORD *)(v0 + 24) = 1107296256;
            *(_QWORD *)(v0 + 32) = sub_1BCB1AB00;
            *(_QWORD *)(v0 + 40) = &block_descriptor_2;
            v59 = _Block_copy((const void *)(v0 + 16));
            swift_retain();
            sub_1BCB63FC8();
            *(_QWORD *)(v0 + 224) = MEMORY[0x1E0DEE9D8];
            v60 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
            sub_1BCAF7D24((unint64_t *)&qword_1EDA13D20, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
            sub_1BCAFC448(0, &qword_1EDA13D28, v60, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
            sub_1BCB18708();
            sub_1BCB646C4();
            MEMORY[0x1BCCFCCEC](0, v51, v52, v59);
            _Block_release(v59);

            (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v52, v53);
            (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v51, v69);
            swift_release();
            swift_release();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            (*(void (**)(void))(v0 + 8))();
            return;
          }
          v34 = *(_QWORD *)(v0 + 472);
          v35 = *(_QWORD *)(v0 + 264);
          if ((v35 & 0xC000000000000001) != 0)
          {
            v36 = (id)MEMORY[0x1BCCFCF20](*(_QWORD *)(v0 + 472));
          }
          else
          {
            if (v34 >= *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_46;
            v36 = *(id *)(v35 + 8 * v34 + 32);
          }
          v9 = (unint64_t)v36;
          *(_QWORD *)(v0 + 464) = v36;
          *(_QWORD *)(v0 + 472) = v34 + 1;
          if (__OFADD__(v34, 1))
            break;
          v37 = objc_msgSend(v36, sel_identifier);
          v38 = sub_1BCB6413C();
          v40 = v39;

          *(_QWORD *)(v0 + 480) = v38;
          *(_QWORD *)(v0 + 488) = v40;
          v41 = objc_msgSend((id)v9, sel_doses);
          sub_1BCAFC2E0(0, &qword_1EDA144A0);
          v9 = sub_1BCB642D4();
          *(_QWORD *)(v0 + 496) = v9;

          if (v9 >> 62)
          {
            swift_bridgeObjectRetain();
            v43 = sub_1BCB648D4();
            swift_bridgeObjectRelease();
            *(_QWORD *)(v0 + 504) = v43;
            if (v43)
            {
LABEL_24:
              v31 = 0;
              *(_QWORD *)(v0 + 512) = *(_QWORD *)(*(_QWORD *)(v0 + 272) + *(_QWORD *)(v0 + 456));
              goto LABEL_25;
            }
          }
          else
          {
            v42 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
            *(_QWORD *)(v0 + 504) = v42;
            if (v42)
              goto LABEL_24;
          }
        }
        __break(1u);
LABEL_46:
        __break(1u);
      }
      else
      {
LABEL_25:
        v44 = *(_QWORD *)(v0 + 496);
        if ((v44 & 0xC000000000000001) != 0)
        {
          v45 = (id)MEMORY[0x1BCCFCF20](v31);
        }
        else
        {
          if (v31 >= *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_50;
          }
          v45 = *(id *)(v44 + 8 * v31 + 32);
        }
        *(_QWORD *)(v0 + 520) = v45;
        *(_QWORD *)(v0 + 528) = v31 + 1;
        if (!__OFADD__(v31, 1))
        {
          v46 = objc_msgSend(v45, (SEL)p_weak_ivar_lyt[474]);
          v47 = sub_1BCB6413C();
          v49 = v48;

          *(_QWORD *)(v0 + 536) = v49;
          v50 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 544) = v50;
          *v50 = v0;
          v50[1] = sub_1BCB1E260;
          sub_1BCB42F60(v47, v49);
          return;
        }
      }
      __break(1u);
LABEL_48:
      sub_1BCB64304();
LABEL_11:
      v11 = *(void **)(v0 + 520);
      sub_1BCB64334();
      sub_1BCB642EC();
      swift_release();

      p_weak_ivar_lyt = (void **)(&TestMedicationDetailProvider + 56);
    }
  }
  v61 = 0;
  v62 = 2;
  while (1)
  {
    v63 = v62 + 1;
    if (__OFADD__(v62, 1))
      break;
    v64 = *(_QWORD *)(v0 + 440);
    v65 = *(_QWORD *)(v64 + v61 + 64) == v9 && *(_QWORD *)(v64 + v61 + 72) == v6;
    if (v65 || (sub_1BCB649F4() & 1) != 0)
      goto LABEL_7;
    ++v62;
    v61 += 16;
    if (v63 == v7)
      goto LABEL_9;
  }
LABEL_50:
  __break(1u);
}

uint64_t sub_1BCB1EB2C()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCB1EBA8()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCB1EC2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 16;
  swift_beginAccess();
  result = MEMORY[0x1BCCFD9C4](v1);
  if (result)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BCB63F50();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_getKeyPath();
    swift_getKeyPath();
    return sub_1BCB63F5C();
  }
  return result;
}

id MedicationDoseDaySummaryProvider.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void MedicationDoseDaySummaryProvider.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1BCB1EE70@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for MedicationDoseDaySummaryProvider();
  result = sub_1BCB63E78();
  *a1 = result;
  return result;
}

Swift::Void __swiftcall MedicationDoseDaySummaryProvider.scheduleControlDidRescheduleItems()()
{
  void *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;

  v1 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750];
  sub_1BCAFC448(0, (unint64_t *)&unk_1EDA14470, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v8 - v3;
  v5 = sub_1BCB643B8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v0;
  v7 = v0;
  sub_1BCB1A334((uint64_t)v4, (uint64_t)&unk_1EF487AC0, (uint64_t)v6);
  swift_release();
  sub_1BCAFC62C((uint64_t)v4, (unint64_t *)&unk_1EDA14470, v1);
}

void sub_1BCB1F094(uint64_t a1, void *a2, void *aBlock, void *a4)
{
  void (*v6)(id, uint64_t (*)(), uint64_t, void *);
  void *v7;
  uint64_t v8;
  id v9;
  id v10;

  v6 = *(void (**)(id, uint64_t (*)(), uint64_t, void *))(a1 + 32);
  v7 = _Block_copy(aBlock);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v7;
  swift_retain();
  v10 = a2;
  v9 = a4;
  v6(v10, sub_1BCB1FB84, v8, a4);
  swift_release();
  swift_release();

}

char *sub_1BCB1F144(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  objc_class *v24;
  char *v25;
  void *v26;
  char *v27;
  id v28;
  void *v29;
  uint64_t v31;
  objc_super v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;

  sub_1BCB1FA20(0, &qword_1EDA13D08, MEMORY[0x1E0C96198]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v31 - v10;
  v12 = &v3[OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider__daySummary];
  v13 = qword_1EDA13CB8;
  v14 = v3;
  if (v13 != -1)
    swift_once();
  v33 = qword_1EDA15E70;
  v34 = *(_QWORD *)algn_1EDA15E78;
  v35 = word_1EDA15E80;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BCB63F2C();
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v11, v8);
  *(_QWORD *)&v14[OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_observerQuery] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_doseEventPredicate] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_healthStore] = a1;
  if (a3)
  {
    v15 = a1;
    v16 = a3;
  }
  else
  {
    v17 = qword_1EDA13CB0;
    v18 = a1;
    if (v17 != -1)
      swift_once();
    swift_beginAccess();
    v16 = swift_retain();
  }
  *(_QWORD *)&v14[OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_medicationDetailProvider] = v16;
  v19 = objc_allocWithZone(MEMORY[0x1E0D2C490]);
  swift_retain();
  v20 = objc_msgSend(v19, sel_initWithHealthStore_, a1);
  *(_QWORD *)&v14[OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_scheduleControl] = v20;
  v21 = &v14[OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_date];
  v22 = sub_1BCB63B3C();
  v23 = *(_QWORD *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v21, a2, v22);

  v24 = (objc_class *)type metadata accessor for MedicationDoseDaySummaryProvider();
  v32.receiver = v14;
  v32.super_class = v24;
  v25 = (char *)objc_msgSendSuper2(&v32, sel_init);
  v26 = *(void **)&v25[OBJC_IVAR____TtC27HealthMedicationsExperience32MedicationDoseDaySummaryProvider_scheduleControl];
  sub_1BCAFC2E0(0, (unint64_t *)&unk_1EDA13D78);
  v27 = v25;
  v28 = v26;
  v29 = (void *)sub_1BCB64580();
  objc_msgSend(v28, sel_registerObserver_queue_, v27, v29);

  sub_1BCB19C14();
  sub_1BCB1A4DC();

  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a2, v22);
  return v27;
}

uint64_t type metadata accessor for MedicationDoseDaySummaryProvider()
{
  uint64_t result;

  result = qword_1EDA13400;
  if (!qword_1EDA13400)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BCB1F450(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1BCB09BF0;
  return sub_1BCB1A2C8(a1, v4, v5, v6);
}

uint64_t destroy for MedicationDoseDaySummary()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s27HealthMedicationsExperience24MedicationDoseDaySummaryVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MedicationDoseDaySummary(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

__n128 __swift_memcpy18_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for MedicationDoseDaySummary(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicationDoseDaySummary(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 18))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicationDoseDaySummary(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 18) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicationDoseDaySummary()
{
  return &type metadata for MedicationDoseDaySummary;
}

uint64_t sub_1BCB1F690()
{
  return type metadata accessor for MedicationDoseDaySummaryProvider();
}

void sub_1BCB1F698()
{
  unint64_t v0;
  unint64_t v1;

  sub_1BCB1FA20(319, &qword_1EDA13D08, MEMORY[0x1E0C96198]);
  if (v0 <= 0x3F)
  {
    sub_1BCB63B3C();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for MedicationDoseDaySummaryProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MedicationDoseDaySummaryProvider.daySummary.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of MedicationDoseDaySummaryProvider.$daySummary.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of MedicationDoseDaySummaryProvider.__allocating_init(healthStore:date:medicationDetailProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of MedicationDoseDaySummaryProvider.changeDate(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t sub_1BCB1F7C0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BCB1F7E4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BCB1F818()
{
  uint64_t v0;

  return sub_1BCB1EC2C(*(_QWORD *)(v0 + 16));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_1BCB1F83C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BCB1F860()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BCB1F894(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_1BCB1F8A4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1BCB1F8C8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1BCB092B8;
  v3[2] = a1;
  v4 = (_QWORD *)swift_task_alloc();
  v3[3] = v4;
  *v4 = v3;
  v4[1] = sub_1BCB08470;
  return sub_1BCB1ABB8();
}

uint64_t sub_1BCB1F940(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1BCB09BF0;
  v3[2] = a1;
  v4 = (_QWORD *)swift_task_alloc();
  v3[3] = v4;
  *v4 = v3;
  v4[1] = sub_1BCB0838C;
  return sub_1BCB1AFAC();
}

uint64_t sub_1BCB1F9C0()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1BCB1F9E4(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_1BCB1A5C0(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t sub_1BCB1F9EC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BCB1FA18()
{
  uint64_t v0;

  return sub_1BCB1A9EC(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1BCB1FA20(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for MedicationDoseDaySummary);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_1BCB1FA68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BCAFC448(0, (unint64_t *)&unk_1EDA14470, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BCB1FAC4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BCB1FAE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1BCB09BF0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EF488190 + dword_1EF488190))(a1, v4);
}

void sub_1BCB1FB58(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;

  sub_1BCB19F34(a1, a2, a3, a4, v4);
}

uint64_t sub_1BCB1FB60()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1BCB1FB84()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1BCB1FBC0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1BCB092B8;
  return sub_1BCB1A2C8(a1, v4, v5, v6);
}

uint64_t HKMedicationUserDomainConcept.ontologyPregnancyTrimesterLactationRatings.getter()
{
  return sub_1BCB203BC((uint64_t)&unk_1BCB66F88, 0x53555F6E65);
}

id HKMedicationUserDomainConcept.freeTextMedicationForm.getter()
{
  return sub_1BCB1FC80((SEL *)&selRef_freeTextMedicationFormCode);
}

id HKMedicationUserDomainConcept.freeTextMedicationLoggingUnit.getter()
{
  return sub_1BCB1FC80((SEL *)&selRef_freeTextMedicationLoggingUnitCode);
}

id sub_1BCB1FC80(SEL *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;

  v2 = objc_msgSend(v1, *a1);
  v3 = v2;
  if (!v2)
    return 0;
  v4 = objc_msgSend(v2, sel_longLongValue);

  return v4;
}

uint64_t sub_1BCB1FCE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  char v13;
  uint64_t v15;

  v7 = sub_1BCB63B6C();
  v8 = v3;
  swift_retain();
  v9 = sub_1BCB20D2C(v7, v8, a1);
  swift_bridgeObjectRelease();

  swift_release();
  if (v9[2])
  {
    v10 = v9[4];
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRelease();
    v11 = v8;
    swift_getAtKeyPath();

    if (*(_QWORD *)(v15 + 16))
    {
      swift_bridgeObjectRetain();
      v12 = sub_1BCB0E7B0(a2, a3);
      if ((v13 & 1) != 0)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 16 * v12);
        swift_bridgeObjectRetain();
      }
      else
      {
        v10 = 0;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v10 = 0;
    }
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1BCB1FE14@<X0>(void *a1@<X1>, _QWORD *a2@<X8>)
{
  id v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;

  v4 = objc_allocWithZone(MEMORY[0x1E0C99DC8]);
  swift_bridgeObjectRetain();
  v5 = (void *)sub_1BCB6410C();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel_initWithLocaleIdentifier_, v5);

  v7 = objc_msgSend(v6, sel_languageCode);
  v8 = sub_1BCB6413C();
  v10 = v9;

  v11 = objc_msgSend(v6, sel_regionCode);
  if (v11)
  {
    v12 = v11;
    v13 = sub_1BCB6413C();
    v15 = v14;

  }
  else
  {
    v15 = 0xE200000000000000;
    v13 = 21333;
  }
  sub_1BCB0ADA0(0, (unint64_t *)&qword_1EDA14280, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1BCB66000;
  *(_QWORD *)(v16 + 32) = v8;
  *(_QWORD *)(v16 + 40) = v10;
  *(_QWORD *)(v16 + 48) = v13;
  *(_QWORD *)(v16 + 56) = v15;
  sub_1BCB0ADA0(0, (unint64_t *)&qword_1EDA14180, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
  sub_1BCB0AA88();
  v17 = sub_1BCB640F4();
  v19 = v18;
  swift_bridgeObjectRelease();

  v20 = a1;
  swift_getAtKeyPath();

  if (*(_QWORD *)(v27 + 16) && (v21 = sub_1BCB0E7B0(v17, v19), (v22 & 1) != 0))
  {
    v23 = (uint64_t *)(*(_QWORD *)(v27 + 56) + 16 * v21);
    v24 = *v23;
    v25 = v23[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    v24 = 0;
    v25 = 0;
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v24;
  a2[1] = v25;
  return result;
}

uint64_t sub_1BCB2001C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  id v30;
  unint64_t v31;
  char v32;
  uint64_t v34;
  uint64_t v35;

  v4 = v3;
  v7 = sub_1BCB63B6C();
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v34 = a2;
    v9 = v7 + 40;
    do
    {
      v10 = objc_allocWithZone(MEMORY[0x1E0C99DC8]);
      swift_bridgeObjectRetain();
      v11 = (void *)sub_1BCB6410C();
      v12 = objc_msgSend(v10, sel_initWithLocaleIdentifier_, v11);

      v13 = objc_msgSend(v12, sel_languageCode);
      v14 = sub_1BCB6413C();
      v16 = v15;

      v17 = objc_msgSend(v12, sel_regionCode);
      if (v17)
      {
        v18 = v17;
        v19 = sub_1BCB6413C();
        v21 = v20;

      }
      else
      {
        v21 = 0xE200000000000000;
        v19 = 21333;
      }
      sub_1BCB0ADA0(0, (unint64_t *)&qword_1EDA14280, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
      v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = xmmword_1BCB66000;
      *(_QWORD *)(v22 + 32) = v14;
      *(_QWORD *)(v22 + 40) = v16;
      *(_QWORD *)(v22 + 48) = v19;
      *(_QWORD *)(v22 + 56) = v21;
      sub_1BCB0ADA0(0, (unint64_t *)&qword_1EDA14180, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
      sub_1BCB0AA88();
      v23 = sub_1BCB640F4();
      v25 = v24;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v26 = v4;
      swift_getAtKeyPath();

      if (*(_QWORD *)(v35 + 16))
      {
        v27 = sub_1BCB0E7B0(v23, v25);
        if ((v28 & 1) != 0)
        {
          v29 = *(_QWORD *)(*(_QWORD *)(v35 + 56) + 8 * v27);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          goto LABEL_17;
        }
      }
      v9 += 16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    a2 = v34;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v30 = v4;
  swift_getAtKeyPath();

  if (*(_QWORD *)(v35 + 16))
  {
    swift_bridgeObjectRetain();
    v31 = sub_1BCB0E7B0(a2, a3);
    if ((v32 & 1) != 0)
    {
      v29 = *(_QWORD *)(*(_QWORD *)(v35 + 56) + 8 * v31);
      swift_bridgeObjectRetain();
    }
    else
    {
      v29 = 0;
    }
LABEL_17:
    swift_bridgeObjectRelease();
  }
  else
  {
    v29 = 0;
  }
  swift_bridgeObjectRelease();
  return v29;
}

uint64_t HKMedicationUserDomainConcept.brandName.getter()
{
  return sub_1BCB203BC((uint64_t)&unk_1BCB66FD0, 0x53555F6E65);
}

void sub_1BCB202F0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1BCB2040C(a1, (SEL *)&selRef_localizedOntologyBrandNames, a2);
}

uint64_t HKMedicationUserDomainConcept.preferredName.getter()
{
  return sub_1BCB203BC((uint64_t)&unk_1BCB67020, 0x53555F6E65);
}

void sub_1BCB20314(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1BCB2040C(a1, (SEL *)&selRef_localizedOntologyPreferredNames, a2);
}

uint64_t HKMedicationUserDomainConcept.genericName.getter()
{
  return sub_1BCB203BC((uint64_t)&unk_1BCB67070, 0x53555F6E65);
}

void sub_1BCB20338(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1BCB2040C(a1, (SEL *)&selRef_localizedOntologyGenericNames, a2);
}

uint64_t HKMedicationUserDomainConcept.manufacturedDoseForm.getter()
{
  return sub_1BCB203BC((uint64_t)&unk_1BCB670C8, 0x53555F6E65);
}

void sub_1BCB2035C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1BCB2040C(a1, (SEL *)&selRef_localizedOntologyManufacturedDoseForms, a2);
}

uint64_t HKMedicationUserDomainConcept.basicDoseForm.getter()
{
  return sub_1BCB203BC((uint64_t)&unk_1BCB67110, 0x53555F6E65);
}

void sub_1BCB20380(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1BCB2040C(a1, (SEL *)&selRef_localizedOntologyBasicDoseForms, a2);
}

uint64_t HKMedicationUserDomainConcept.ontologyLoggingUnitSingular.getter()
{
  return sub_1BCB203BC((uint64_t)&unk_1BCB67168, 0x53552D6E65);
}

uint64_t HKMedicationUserDomainConcept.ontologyLoggingUnitPlural.getter()
{
  return sub_1BCB203BC((uint64_t)&unk_1BCB671B8, 0x53552D6E65);
}

uint64_t sub_1BCB203BC(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath();
  v4 = sub_1BCB1FCE0(KeyPath, a2, 0xE500000000000000);
  swift_release();
  return v4;
}

void sub_1BCB2040C(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  id v4;
  uint64_t v5;

  v4 = objc_msgSend(*a1, *a2);
  v5 = sub_1BCB640B8();

  *a3 = v5;
}

char *keypath_get_selector_localizedOntologyBrandNames()
{
  return sel_localizedOntologyBrandNames;
}

void sub_1BCB2047C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1BCB2040C(a1, (SEL *)&selRef_localizedOntologyBrandNames, a2);
}

char *keypath_get_selector_localizedOntologyPreferredNames()
{
  return sel_localizedOntologyPreferredNames;
}

void sub_1BCB204A4(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1BCB2040C(a1, (SEL *)&selRef_localizedOntologyPreferredNames, a2);
}

char *keypath_get_selector_localizedOntologyGenericNames()
{
  return sel_localizedOntologyGenericNames;
}

void sub_1BCB204CC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1BCB2040C(a1, (SEL *)&selRef_localizedOntologyGenericNames, a2);
}

char *keypath_get_selector_localizedOntologyManufacturedDoseForms()
{
  return sel_localizedOntologyManufacturedDoseForms;
}

void sub_1BCB204F4(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1BCB2040C(a1, (SEL *)&selRef_localizedOntologyManufacturedDoseForms, a2);
}

char *keypath_get_selector_localizedOntologyBasicDoseForms()
{
  return sel_localizedOntologyBasicDoseForms;
}

void sub_1BCB2051C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1BCB2040C(a1, (SEL *)&selRef_localizedOntologyBasicDoseForms, a2);
}

char *keypath_get_selector_localizedOntologyLoggingUnitSingular()
{
  return sel_localizedOntologyLoggingUnitSingular;
}

void sub_1BCB20544(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1BCB2040C(a1, (SEL *)&selRef_localizedOntologyLoggingUnitSingular, a2);
}

char *keypath_get_selector_localizedOntologyLoggingUnitPlural()
{
  return sel_localizedOntologyLoggingUnitPlural;
}

void sub_1BCB2056C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1BCB2040C(a1, (SEL *)&selRef_localizedOntologyLoggingUnitPlural, a2);
}

Swift::String __swiftcall HKMedicationUserDomainConcept.localizedResolvedLoggingUnit(for:)(Swift::Double a1)
{
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v3;
  Swift::String result;

  v3 = HKMedicationUserDomainConcept.localizedResolvedLoggingUnit(for:standalone:)(a1, 0);
  object = v3._object;
  countAndFlagsBits = v3._countAndFlagsBits;
  result._object = object;
  result._countAndFlagsBits = countAndFlagsBits;
  return result;
}

Swift::String __swiftcall HKMedicationUserDomainConcept.localizedResolvedLoggingUnit(for:standalone:)(Swift::Double a1, Swift::Bool standalone)
{
  void *v2;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  Swift::String result;

  KeyPath = swift_getKeyPath();
  v6 = sub_1BCB1FCE0(KeyPath, 0x53552D6E65, 0xE500000000000000);
  v8 = v7;
  swift_release();
  v9 = swift_getKeyPath();
  v10 = sub_1BCB1FCE0(v9, 0x53552D6E65, 0xE500000000000000);
  v12 = v11;
  swift_release();
  v13 = objc_msgSend(v2, sel_freeTextMedicationLoggingUnitCode);
  v14 = v13;
  if (v13)
  {
    v15 = objc_msgSend(v13, sel_longLongValue);

  }
  else
  {
    v15 = 0;
  }
  v16 = sub_1BCB20E84(standalone, v6, v8, v10, v12, (uint64_t)v15, v14 == 0, a1);
  v18 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BCAF6098();
  v19 = sub_1BCB64670();
  if (standalone && v19)
  {
    v16 = sub_1BCB64664();
    v21 = v20;
    swift_bridgeObjectRelease();
    v18 = v21;
  }
  v22 = v16;
  v23 = v18;
  result._object = v23;
  result._countAndFlagsBits = v22;
  return result;
}

uint64_t static HKMedicationUserDomainConcept.localizedResolvedLoggingUnit(for:standalone:singularUnit:pluralUnit:freeTextMedicationLoggingUnit:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, double a8)
{
  return sub_1BCB20E84(a1, a2, a3, a4, a5, a6, a7 & 1, a8);
}

Swift::String __swiftcall HKMedicationUserDomainConcept.localizedLoggingQuantityAffix()()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  Swift::String result;

  v1 = objc_msgSend(v0, sel_freeTextMedicationLoggingUnitCode);
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, sel_longLongValue);

  }
  else
  {
    v3 = 0;
  }
  v4 = sub_1BCB210F4((uint64_t)v3, v2 == 0);
  result._object = v5;
  result._countAndFlagsBits = v4;
  return result;
}

uint64_t static HKMedicationUserDomainConcept.localizedLoggingQuantityAffix(freeTextMedicationLoggingUnit:)(uint64_t a1, char a2)
{
  return sub_1BCB210F4(a1, a2 & 1);
}

uint64_t HKMedicationUserDomainConcept.localizedResolvedForm.getter()
{
  void *v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v10;

  KeyPath = swift_getKeyPath();
  sub_1BCB1FCE0(KeyPath, 0x53555F6E65, 0xE500000000000000);
  v3 = v2;
  swift_release();
  if (v3)
  {
    sub_1BCAF6098();
    v4 = sub_1BCB64664();
  }
  else
  {
    v5 = objc_msgSend(v0, sel_freeTextMedicationFormCode);
    if (!v5)
    {
      v10 = swift_getKeyPath();
      v4 = sub_1BCB1FCE0(v10, 0x53555F6E65, 0xE500000000000000);
      swift_release();
      return v4;
    }
    v6 = v5;
    v7 = objc_msgSend(v5, sel_longLongValue);

    HKMedicationFreeTextFormTypeCode.localizationKey.getter((uint64_t)v7);
    if (qword_1EDA14148 != -1)
      swift_once();
    v8 = (id)qword_1EDA14130;
    swift_bridgeObjectRetain();
    v4 = sub_1BCB63A34();
    swift_bridgeObjectRelease();

  }
  swift_bridgeObjectRelease();
  return v4;
}

void HKMedicationUserDomainConcept.resolvedQuantifiedStrengthDisplayString.getter()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  id v4;
  unint64_t v5;
  id v6;
  uint64_t v7;

  v1 = objc_msgSend(v0, sel_unlocalizedQuantifiedUnitStrengthPreferredDisplayString);
  if (!v1)
  {
    v4 = objc_msgSend(v0, sel_freeTextMedicationIngredientNamedStrengthQuantities);
    sub_1BCAFC2E0(0, &qword_1EF487BA0);
    v5 = sub_1BCB642D4();

    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      v7 = sub_1BCB648D4();
      swift_bridgeObjectRelease();
      if (v7)
      {
LABEL_6:
        if ((v5 & 0xC000000000000001) != 0)
        {
          v6 = (id)MEMORY[0x1BCCFCF20](0, v5);
        }
        else
        {
          if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          v6 = *(id *)(v5 + 32);
        }
        v3 = v6;
        swift_bridgeObjectRelease();
        HKUserDomainConceptNamedQuantity.formattedDisplayString.getter();
        goto LABEL_10;
      }
    }
    else if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
    return;
  }

  v2 = objc_msgSend(v0, sel_unlocalizedQuantifiedUnitStrengthPreferredDisplayString);
  if (v2)
  {
    v3 = v2;
    sub_1BCB6413C();
LABEL_10:

  }
}

id HKUserDomainConceptNamedQuantity.formattedDisplayString.getter()
{
  void *v0;
  id v1;
  void *v2;
  id result;
  void *v4;
  id v5;
  id v6;
  char v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;

  v1 = objc_msgSend(v0, sel_quantity);
  if (!v1)
    return 0;
  v2 = v1;
  result = objc_msgSend((id)objc_opt_self(), sel_medicationDoseEventTypeForIdentifier_, *MEMORY[0x1E0CB5418]);
  if (result)
  {
    v4 = result;
    v5 = objc_msgSend(v2, sel__unit);
    sub_1BCAFC2E0(0, (unint64_t *)&qword_1EF487BA8);
    v6 = objc_msgSend((id)objc_opt_self(), sel_percentUnit);
    v7 = sub_1BCB645F8();

    v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D2F820]), sel_init);
    v9 = v8;
    if ((v7 & 1) != 0)
      objc_msgSend(v8, sel_setHasSpaceBetweenValueAndUnit_, 0);

    v10 = objc_msgSend(v2, sel_localizedStringForType_parameters_, v4, v9);
    v11 = sub_1BCB6413C();

    return (id)v11;
  }
  __break(1u);
  return result;
}

uint64_t HKMedicationUserDomainConcept.componentNames.getter()
{
  uint64_t KeyPath;
  uint64_t v1;

  KeyPath = swift_getKeyPath();
  v1 = sub_1BCB2001C(KeyPath, 0x53552D6E65, 0xE500000000000000);
  swift_release();
  return v1;
}

void sub_1BCB20C7C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;

  v3 = objc_msgSend(*a1, sel_localizedOntologyComponentNames);
  sub_1BCB0ADA0(0, (unint64_t *)&qword_1EDA14180, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
  v4 = sub_1BCB640B8();

  *a2 = v4;
}

uint64_t HKMedicationUserDomainConcept.unitString.getter()
{
  return 26477;
}

uint64_t sub_1BCB20D08(Swift::Double a1)
{
  return HKMedicationUserDomainConcept.localizedResolvedLoggingUnit(for:standalone:)(a1, 0)._countAndFlagsBits;
}

_QWORD *sub_1BCB20D2C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = a3;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v6 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v9 = *v6;
    v17 = *(v6 - 1);
    v18 = v9;
    swift_bridgeObjectRetain();
    sub_1BCB1FE14(a2, &v15);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7;
    }
    swift_bridgeObjectRelease();
    v10 = v16;
    if (v16)
    {
      v11 = v15;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = sub_1BCAF6A40(0, v7[2] + 1, 1, v7);
      v13 = v7[2];
      v12 = v7[3];
      if (v13 >= v12 >> 1)
        v7 = sub_1BCAF6A40((_QWORD *)(v12 > 1), v13 + 1, 1, v7);
      v7[2] = v13 + 1;
      v8 = &v7[2 * v13];
      v8[4] = v11;
      v8[5] = v10;
    }
    v6 += 2;
    --v4;
  }
  while (v4);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1BCB20E84(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, double a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a8 != 1.0 || a3 == 0)
  {
    if (a5)
    {
      swift_bridgeObjectRetain();
      return a4;
    }
    else
    {
      if ((a7 & 1) != 0 || (sub_1BCB3AF48(a1 & 1, a6), !v13))
      {
        if ((a1 & 1) != 0)
        {
          if (qword_1EDA14148 != -1)
            swift_once();
        }
        else if (qword_1EDA14148 != -1)
        {
          swift_once();
        }
        v17 = (id)qword_1EDA14130;
        swift_bridgeObjectRetain();
        sub_1BCB63A34();
        swift_bridgeObjectRelease();

        sub_1BCAFC318();
        v18 = swift_allocObject();
        v19 = MEMORY[0x1E0DEB070];
        *(_OWORD *)(v18 + 16) = xmmword_1BCB66020;
        v20 = MEMORY[0x1E0DEB100];
        *(_QWORD *)(v18 + 56) = v19;
        *(_QWORD *)(v18 + 64) = v20;
        *(double *)(v18 + 32) = a8;
        a2 = sub_1BCB64118();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_1BCAFC318();
        v14 = swift_allocObject();
        v15 = MEMORY[0x1E0DEB070];
        *(_OWORD *)(v14 + 16) = xmmword_1BCB66020;
        v16 = MEMORY[0x1E0DEB100];
        *(_QWORD *)(v14 + 56) = v15;
        *(_QWORD *)(v14 + 64) = v16;
        *(double *)(v14 + 32) = a8;
        a2 = sub_1BCB64118();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return a2;
}

uint64_t sub_1BCB210F4(uint64_t a1, char a2)
{
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;

  if ((a2 & 1) != 0 || (sub_1BCB3ADFC(a1), !v2))
  {
    if (qword_1EDA14148 != -1)
      swift_once();
    v4 = (id)qword_1EDA14130;
    swift_bridgeObjectRetain();
    sub_1BCB63A34();
    swift_bridgeObjectRelease();

  }
  else
  {
    if (qword_1EDA14148 != -1)
      swift_once();
    v3 = (id)qword_1EDA14130;
    swift_bridgeObjectRetain();
    sub_1BCB63A34();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  v5 = sub_1BCB64118();
  swift_bridgeObjectRelease();
  return v5;
}

char *keypath_get_selector_localizedOntologyComponentNames()
{
  return sel_localizedOntologyComponentNames;
}

void HKMedicationSearchResult.groupingKey.getter(_QWORD *a1@<X8>)
{
  void *v1;
  id v3;
  id v4;
  unint64_t v5;
  uint64_t v6;

  v3 = v1;
  v4 = objc_msgSend(v3, sel_routedDoseFormProducts);
  sub_1BCAFC2E0(0, (unint64_t *)&qword_1EF487748);
  v5 = sub_1BCB642D4();

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v6)
  {

    v3 = 0;
  }
  *a1 = v3;
}

HealthMedicationsExperience::MedicationSearchCluster_optional __swiftcall MedicationSearchCluster.init(results:)(Swift::OpaquePointer results)
{
  unint64_t *v1;
  unint64_t rawValue;
  unint64_t *v3;
  id v4;
  id v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  char v10;
  void *v11;
  Swift::Bool v12;
  HealthMedicationsExperience::MedicationSearchCluster_optional result;

  rawValue = (unint64_t)results._rawValue;
  v3 = v1;
  if (!((unint64_t)results._rawValue >> 62))
  {
    v4 = *(id *)(((unint64_t)results._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
LABEL_11:
    v11 = (void *)swift_bridgeObjectRelease();
    rawValue = 0;
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  v4 = (id)sub_1BCB648D4();
  swift_bridgeObjectRelease();
  if (!v4)
    goto LABEL_11;
LABEL_3:
  if ((rawValue & 0xC000000000000001) != 0)
  {
    v5 = (id)MEMORY[0x1BCCFCF20](0, rawValue);
  }
  else
  {
    if (!*(_QWORD *)((rawValue & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_17;
    }
    v5 = *(id *)(rawValue + 32);
  }
  v4 = v5;
  v6 = objc_msgSend(v4, sel_routedDoseFormProducts);
  sub_1BCAFC2E0(0, (unint64_t *)&qword_1EF487748);
  v7 = sub_1BCB642D4();

  if (!(v7 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);

    goto LABEL_8;
  }
LABEL_17:
  swift_bridgeObjectRetain();
  v8 = sub_1BCB648D4();

  swift_bridgeObjectRelease();
LABEL_8:
  swift_bridgeObjectRelease();
  if (!v8)
  {

    v4 = 0;
  }
  v9 = v4;
  v10 = sub_1BCB2B548(rawValue, v4);

  if ((v10 & 1) == 0)
    goto LABEL_11;
LABEL_12:
  *v3 = rawValue;
  result.value.results._rawValue = v11;
  result.is_nil = v12;
  return result;
}

uint64_t MedicationSearchCluster.primaryTitle.getter()
{
  return MedicationSearchCluster.primaryName.getter();
}

uint64_t MedicationSearchCluster.primaryName.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v8;

  v1 = *v0;
  if (!((unint64_t)*v0 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease();
    if (qword_1EDA14148 == -1)
    {
LABEL_9:
      v6 = (id)qword_1EDA14130;
      swift_bridgeObjectRetain();
      v5 = sub_1BCB63A34();
      swift_bridgeObjectRelease();

      return v5;
    }
LABEL_13:
    swift_once();
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  if (!sub_1BCB648D4())
    goto LABEL_8;
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v3 = (id)MEMORY[0x1BCCFCF20](0, v1);
    goto LABEL_6;
  }
  if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_13;
  }
  v3 = *(id *)(v1 + 32);
LABEL_6:
  v4 = v3;
  swift_bridgeObjectRelease();
  sub_1BCB09BFC(&v8);
  v5 = v8;
  swift_bridgeObjectRetain();
  sub_1BCB0A954((uint64_t)&v8);

  return v5;
}

void MedicationGroupingKey.hash(into:)(uint64_t a1)
{
  void **v1;
  void *v3;
  id v4;
  unint64_t v5;
  id v6;
  id v7;

  v3 = *v1;
  v4 = objc_msgSend(v3, sel_ingredientProducts);
  sub_1BCAFC2E0(0, (unint64_t *)&qword_1EF487748);
  v5 = sub_1BCB642D4();

  sub_1BCB2B27C(a1, v5);
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v3, sel_tradeNameProduct);
  if (v6)
  {
    v7 = v6;
    sub_1BCB64604();

  }
}

uint64_t sub_1BCB21780(uint64_t a1, unint64_t a2)
{
  return sub_1BCB21794(a1, a2, (uint64_t)&qword_1EF487748);
}

uint64_t sub_1BCB21794(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t i;
  id v19;
  void *v20;
  char v21;
  unint64_t v22;
  unint64_t v23;

  v6 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v8 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_35:
    swift_bridgeObjectRetain();
    v9 = (void *)sub_1BCB648D4();
    swift_bridgeObjectRelease();
    if ((void *)v7 == v9)
      goto LABEL_4;
    return 0;
  }
  swift_bridgeObjectRetain();
  v7 = sub_1BCB648D4();
  swift_bridgeObjectRelease();
  v8 = a2 >> 62;
  if (a2 >> 62)
    goto LABEL_35;
LABEL_3:
  v9 = *(void **)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if ((void *)v7 != v9)
    return 0;
LABEL_4:
  if (!v7)
    return 1;
  v10 = a1 & 0xFFFFFFFFFFFFFF8;
  v11 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a1 < 0)
    v10 = a1;
  if (v6)
    v11 = v10;
  v12 = a2 & 0xFFFFFFFFFFFFFF8;
  v13 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if ((a2 & 0x8000000000000000) != 0)
    v12 = a2;
  if (v8)
    v13 = v12;
  if (v11 == v13)
    return 1;
  if (v7 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v23 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_41:
    result = MEMORY[0x1BCCFCF20](0, a1);
    goto LABEL_18;
  }
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_43;
  }
  result = (uint64_t)*(id *)(a1 + 32);
LABEL_18:
  v9 = (void *)result;
  v8 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_43:
    v15 = (id)MEMORY[0x1BCCFCF20](0, a2);
LABEL_21:
    v16 = v15;
    sub_1BCAFC2E0(0, (unint64_t *)a3);
    a3 = sub_1BCB645F8();

    if ((a3 & 1) != 0)
    {
      v17 = 1 - v7;
      for (i = 5; ; ++i)
      {
        v7 = v17 + i == 5;
        if (v17 + i == 5)
          return v7;
        v22 = i - 4;
        if (v23)
        {
          a3 = MEMORY[0x1BCCFCF20](i - 4, a1);
          if (v8)
            goto LABEL_23;
        }
        else
        {
          if (v22 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_39:
            __break(1u);
            goto LABEL_40;
          }
          a3 = (uint64_t)*(id *)(a1 + 8 * i);
          if (v8)
          {
LABEL_23:
            v19 = (id)MEMORY[0x1BCCFCF20](i - 4, a2);
            goto LABEL_24;
          }
        }
        if (v22 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_39;
        v19 = *(id *)(a2 + 8 * i);
LABEL_24:
        v20 = v19;
        v21 = sub_1BCB645F8();

        if ((v21 & 1) == 0)
          return v7;
      }
    }
    return 0;
  }
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v15 = *(id *)(a2 + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BCB21A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  char v20;
  uint64_t v22;
  void *v23;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
  {
LABEL_14:
    v20 = 0;
    return v20 & 1;
  }
  if (v2 && a1 != a2)
  {
    sub_1BCAFC2E0(0, (unint64_t *)&qword_1EDA139E0);
    v5 = v2 - 1;
    v6 = (void **)(a2 + 56);
    v7 = (void **)(a1 + 56);
    while (1)
    {
      v22 = v5;
      v8 = (uint64_t)*(v7 - 2);
      v9 = (uint64_t)*(v7 - 1);
      v10 = *v7;
      v11 = *(v6 - 3);
      v12 = (uint64_t)*(v6 - 2);
      v13 = (uint64_t)*(v6 - 1);
      v23 = *v6;
      v14 = *(v7 - 3);
      swift_bridgeObjectRetain();
      v15 = v10;
      v16 = v11;
      swift_bridgeObjectRetain();
      v17 = v23;
      if ((sub_1BCB645F8() & 1) == 0 || (v8 != v12 || v9 != v13) && (sub_1BCB649F4() & 1) == 0)
        break;
      v18 = v15;
      v19 = v17;
      v20 = sub_1BCB645F8();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      v5 = v22 - 1;
      if ((v20 & 1) != 0)
      {
        v7 += 4;
        v6 += 4;
        if (v22)
          continue;
      }
      return v20 & 1;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    goto LABEL_14;
  }
  v20 = 1;
  return v20 & 1;
}

uint64_t MedicationGroupingKey.hashValue.getter()
{
  void **v0;
  void *v1;
  id v2;
  unint64_t v3;
  id v4;
  void *v5;
  _BYTE v7[72];

  v1 = *v0;
  sub_1BCB64A90();
  v2 = objc_msgSend(v1, sel_ingredientProducts);
  sub_1BCAFC2E0(0, (unint64_t *)&qword_1EF487748);
  v3 = sub_1BCB642D4();

  sub_1BCB2B27C((uint64_t)v7, v3);
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v1, sel_tradeNameProduct);
  if (v4)
  {
    v5 = v4;
    sub_1BCB64604();

  }
  return sub_1BCB64AC0();
}

uint64_t sub_1BCB21CA4()
{
  void **v0;
  void *v1;
  id v2;
  unint64_t v3;
  id v4;
  void *v5;
  _BYTE v7[72];

  v1 = *v0;
  sub_1BCB64A90();
  v2 = objc_msgSend(v1, sel_ingredientProducts);
  sub_1BCAFC2E0(0, (unint64_t *)&qword_1EF487748);
  v3 = sub_1BCB642D4();

  sub_1BCB2B27C((uint64_t)v7, v3);
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v1, sel_tradeNameProduct);
  if (v4)
  {
    v5 = v4;
    sub_1BCB64604();

  }
  return sub_1BCB64AC0();
}

void sub_1BCB21D6C(uint64_t a1)
{
  void **v1;
  void *v3;
  id v4;
  unint64_t v5;
  id v6;
  id v7;

  v3 = *v1;
  v4 = objc_msgSend(v3, sel_ingredientProducts);
  sub_1BCAFC2E0(0, (unint64_t *)&qword_1EF487748);
  v5 = sub_1BCB642D4();

  sub_1BCB2B27C(a1, v5);
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v3, sel_tradeNameProduct);
  if (v6)
  {
    v7 = v6;
    sub_1BCB64604();

  }
}

uint64_t sub_1BCB21E40()
{
  void **v0;
  void *v1;
  id v2;
  unint64_t v3;
  id v4;
  void *v5;
  _BYTE v7[72];

  v1 = *v0;
  sub_1BCB64A90();
  v2 = objc_msgSend(v1, sel_ingredientProducts);
  sub_1BCAFC2E0(0, (unint64_t *)&qword_1EF487748);
  v3 = sub_1BCB642D4();

  sub_1BCB2B27C((uint64_t)v7, v3);
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v1, sel_tradeNameProduct);
  if (v4)
  {
    v5 = v4;
    sub_1BCB64604();

  }
  return sub_1BCB64AC0();
}

uint64_t MedicationRouteFormConcept.uniqueIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

HealthMedicationsExperience::MedicationRouteFormConcept __swiftcall MedicationRouteFormConcept.init(_:)(Swift::OpaquePointer a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  HealthMedicationsExperience::MedicationRouteFormConcept result;

  v2 = v1;
  if (((unint64_t)a1._rawValue & 0x8000000000000000) != 0
    || ((unint64_t)a1._rawValue & 0x4000000000000000) != 0)
  {
    v18 = swift_bridgeObjectRetain();
    v3 = (uint64_t)sub_1BCB24388(v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = (unint64_t)a1._rawValue & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  v25 = v3;
  sub_1BCB255AC(&v25);
  swift_bridgeObjectRelease();
  v4 = v25;
  if (v25 < 0 || (v25 & 0x4000000000000000) != 0)
  {
    swift_retain();
    v5 = sub_1BCB648D4();
    if (v5)
      goto LABEL_7;
LABEL_18:
    swift_release();
    v7 = MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  v5 = *(_QWORD *)(v25 + 16);
  swift_retain();
  if (!v5)
    goto LABEL_18;
LABEL_7:
  v25 = MEMORY[0x1E0DEE9D8];
  sub_1BCB2483C(0, v5 & ~(v5 >> 63), 0);
  if (v5 < 0)
  {
    __break(1u);
    v19 = (void *)swift_release();
    __break(1u);
    goto LABEL_21;
  }
  v24 = v2;
  v6 = 0;
  v7 = v25;
  do
  {
    if ((v4 & 0xC000000000000001) != 0)
      v8 = (id)MEMORY[0x1BCCFCF20](v6, v4);
    else
      v8 = *(id *)(v4 + 8 * v6 + 32);
    v9 = v8;
    v10 = objc_msgSend(v8, sel_identifier);
    v11 = objc_msgSend(v10, sel_rawIdentifier);

    v27 = v11;
    v12 = sub_1BCB649D0();
    v14 = v13;

    v25 = v7;
    v16 = *(_QWORD *)(v7 + 16);
    v15 = *(_QWORD *)(v7 + 24);
    if (v16 >= v15 >> 1)
    {
      sub_1BCB2483C(v15 > 1, v16 + 1, 1);
      v7 = v25;
    }
    ++v6;
    *(_QWORD *)(v7 + 16) = v16 + 1;
    v17 = v7 + 16 * v16;
    *(_QWORD *)(v17 + 32) = v12;
    *(_QWORD *)(v17 + 40) = v14;
  }
  while (v5 != v6);
  swift_release();
  v2 = v24;
LABEL_19:
  v25 = v7;
  sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA14180, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BCB0AA88();
  sub_1BCB640F4();
  swift_bridgeObjectRelease();
  v25 = 0xD00000000000001BLL;
  v26 = 0x80000001BCB6AEA0;
  sub_1BCB641F0();
  v19 = (void *)swift_bridgeObjectRelease();
  v22 = v25;
  v23 = v26;
  *v2 = v4;
  v2[1] = v22;
  v2[2] = v23;
LABEL_21:
  result.uniqueIdentifier._object = v21;
  result.uniqueIdentifier._countAndFlagsBits = v20;
  result.routeConcepts._rawValue = v19;
  return result;
}

uint64_t MedicationRouteFormConcept.displayString.getter()
{
  unint64_t *v0;
  unint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v1 = *v0;
  KeyPath = swift_getKeyPath();
  v3 = sub_1BCB223BC(KeyPath, v1);
  swift_release();
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v5 = (uint64_t *)(v3 + 40);
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v8 = *v5;
      if (*v5)
      {
        v9 = *(v5 - 1);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v6 = sub_1BCAF6A40(0, v6[2] + 1, 1, v6);
        v11 = v6[2];
        v10 = v6[3];
        if (v11 >= v10 >> 1)
          v6 = sub_1BCAF6A40((_QWORD *)(v10 > 1), v11 + 1, 1, v6);
        v6[2] = v11 + 1;
        v7 = &v6[2 * v11];
        v7[4] = v9;
        v7[5] = v8;
      }
      v5 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA14180, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BCB0AA88();
  v12 = sub_1BCB640F4();
  swift_bridgeObjectRelease();
  return v12;
}

void sub_1BCB2233C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  if (objc_msgSend(*a1, sel_meds_isRoutedDoseFormProduct)
    && (v4 = objc_msgSend(v3, sel_meds_preferredNameForFirstObjectOfRelationshipType_, 982)) != 0)
  {
    v5 = v4;
    v6 = sub_1BCB6413C();
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  *a2 = v6;
  a2[1] = v8;
}

uint64_t sub_1BCB223BC(uint64_t a1, unint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t (*v7)(void);
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E10]), sel_init);
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    result = sub_1BCB648D4();
    v4 = result;
    if (!result)
      goto LABEL_10;
  }
  else
  {
    v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (!v4)
      goto LABEL_10;
  }
  if (v4 < 1)
  {
    __break(1u);
    return result;
  }
  v6 = 0;
  v7 = MEMORY[0x1E0DEB940];
  do
  {
    if ((a2 & 0xC000000000000001) != 0)
      v8 = (id)MEMORY[0x1BCCFCF20](v6, a2);
    else
      v8 = *(id *)(a2 + 8 * v6 + 32);
    v9 = v8;
    ++v6;
    swift_getAtKeyPath();

    sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA131B0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))v7);
    objc_msgSend(v3, sel_addObject_, sub_1BCB64A24(), v13, v14);
    swift_unknownObjectRelease();
  }
  while (v4 != v6);
LABEL_10:
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v3, sel_array);
  v11 = sub_1BCB642D4();

  v12 = sub_1BCB522E4(v11);
  swift_bridgeObjectRelease();

  if (v12)
    return v12;
  else
    return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1BCB22580(uint64_t a1, unint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E10]), sel_init);
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    result = sub_1BCB648D4();
    v4 = result;
    if (!result)
      goto LABEL_10;
  }
  else
  {
    v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (!v4)
      goto LABEL_10;
  }
  if (v4 < 1)
  {
    __break(1u);
    return result;
  }
  v6 = 0;
  v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8];
  do
  {
    if ((a2 & 0xC000000000000001) != 0)
      v8 = (id)MEMORY[0x1BCCFCF20](v6, a2);
    else
      v8 = *(id *)(a2 + 8 * v6 + 32);
    v9 = v8;
    ++v6;
    swift_getAtKeyPath();

    sub_1BCB066B8(0, (unint64_t *)&qword_1EF487750, (unint64_t *)&qword_1EF487748, 0x1E0CB64A0, v7);
    objc_msgSend(v3, sel_addObject_, sub_1BCB64A24());
    swift_unknownObjectRelease();
  }
  while (v4 != v6);
LABEL_10:
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v3, sel_array);
  v11 = sub_1BCB642D4();

  v12 = sub_1BCB52450(v11);
  swift_bridgeObjectRelease();

  if (v12)
    return v12;
  else
    return MEMORY[0x1E0DEE9D8];
}

uint64_t static MedicationRouteFormConcept.== infix(_:_:)(uint64_t *a1, unint64_t *a2)
{
  return sub_1BCB21794(*a1, *a2, (uint64_t)&qword_1EF487748) & 1;
}

uint64_t MedicationRouteFormConcept.hash(into:)(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  sub_1BCB2B27C(a1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1BCB641CC();
  return swift_bridgeObjectRelease();
}

uint64_t MedicationRouteFormConcept.hashValue.getter()
{
  unint64_t *v0;
  unint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1BCB64A90();
  swift_bridgeObjectRetain();
  sub_1BCB2B27C((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1BCB641CC();
  swift_bridgeObjectRelease();
  return sub_1BCB64AC0();
}

uint64_t sub_1BCB22860()
{
  unint64_t *v0;
  unint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1BCB64A90();
  swift_bridgeObjectRetain();
  sub_1BCB2B27C((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1BCB641CC();
  swift_bridgeObjectRelease();
  return sub_1BCB64AC0();
}

uint64_t sub_1BCB228E0(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  sub_1BCB2B27C(a1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1BCB641CC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BCB22944()
{
  unint64_t *v0;
  unint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1BCB64A90();
  swift_bridgeObjectRetain();
  sub_1BCB2B27C((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1BCB641CC();
  swift_bridgeObjectRelease();
  return sub_1BCB64AC0();
}

uint64_t sub_1BCB229C0(uint64_t *a1, unint64_t *a2)
{
  return sub_1BCB21794(*a1, *a2, (uint64_t)&qword_1EF487748) & 1;
}

BOOL MedicationSearchCluster.isTradeCluster.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  _BOOL8 v8;
  BOOL v9;

  v1 = *v0;
  if ((unint64_t)*v0 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v2; v2 = sub_1BCB648D4())
  {
    v3 = 4;
    while (1)
    {
      v4 = (v1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1BCCFCF20](v3 - 4, v1) : *(id *)(v1 + 8 * v3);
      v5 = v4;
      v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1))
        break;
      v7 = objc_msgSend(v4, sel_tradeNameProduct);

      v8 = v7 != 0;
      ++v3;
      if (v7)
        v9 = v6 == v2;
      else
        v9 = 1;
      if (v9)
        goto LABEL_17;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain_n();
  }
  v8 = 1;
LABEL_17:
  swift_bridgeObjectRelease_n();
  return v8;
}

uint64_t MedicationSearchCluster.ingredientProductName.getter()
{
  unint64_t *v0;
  unint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t i;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;

  v1 = *v0;
  KeyPath = swift_getKeyPath();
  v3 = sub_1BCB22580(KeyPath, v1);
  swift_release();
  v4 = MEMORY[0x1E0DEE9D8];
  v24 = MEMORY[0x1E0DEE9D8];
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v5; ++i)
    {
      v7 = swift_bridgeObjectRetain();
      sub_1BCB00BA0(v7);
    }
    swift_bridgeObjectRelease_n();
    v8 = v24;
    if (!(v24 >> 62))
    {
LABEL_5:
      v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9)
        goto LABEL_6;
LABEL_19:
      swift_bridgeObjectRelease();
      v11 = MEMORY[0x1E0DEE9D8];
LABEL_20:
      v24 = v11;
      swift_bridgeObjectRetain();
      sub_1BCB25624((uint64_t *)&v24, sub_1BCB2B390, sub_1BCB2569C);
      swift_bridgeObjectRelease();
      sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA14180, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      sub_1BCB0AA88();
      v22 = sub_1BCB640F4();
      swift_release();
      return v22;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x1E0DEE9D8];
    if (!(MEMORY[0x1E0DEE9D8] >> 62))
      goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  v9 = sub_1BCB648D4();
  swift_bridgeObjectRelease();
  if (!v9)
    goto LABEL_19;
LABEL_6:
  v24 = v4;
  sub_1BCB2483C(0, v9 & ~(v9 >> 63), 0);
  if ((v9 & 0x8000000000000000) == 0)
  {
    v10 = 0;
    v11 = v24;
    do
    {
      v12 = *(id *)(v8 + 8 * v10 + 32);
      v13 = objc_msgSend(v12, sel_localizedPreferredName);
      if (v13)
      {
        v14 = v13;
        v15 = sub_1BCB6413C();
        v17 = v16;

      }
      else
      {
        if (qword_1EDA14148 != -1)
          swift_once();
        v14 = (id)qword_1EDA14130;
        swift_bridgeObjectRetain();
        v15 = sub_1BCB63A34();
        v17 = v18;

        swift_bridgeObjectRelease();
      }

      v24 = v11;
      v20 = *(_QWORD *)(v11 + 16);
      v19 = *(_QWORD *)(v11 + 24);
      if (v20 >= v19 >> 1)
      {
        sub_1BCB2483C(v19 > 1, v20 + 1, 1);
        v11 = v24;
      }
      ++v10;
      *(_QWORD *)(v11 + 16) = v20 + 1;
      v21 = v11 + 16 * v20;
      *(_QWORD *)(v21 + 32) = v15;
      *(_QWORD *)(v21 + 40) = v17;
    }
    while (v9 != v10);
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

void sub_1BCB22E20(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;

  v3 = objc_msgSend(*a1, sel_ingredientProducts);
  sub_1BCAFC2E0(0, (unint64_t *)&qword_1EF487748);
  v4 = sub_1BCB642D4();

  *a2 = v4;
}

uint64_t sub_1BCB22E90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v17 = MEMORY[0x1E0DEE9D8];
  v3 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v10 | (v9 << 6); ; i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    sub_1BCB24010(&v16, (unint64_t)&v15);
    if (v1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = sub_1BCB00BA0(v15);
    if (v6)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v9 >= v7)
      goto LABEL_26;
    v13 = *(_QWORD *)(v3 + 8 * v9);
    if (!v13)
      break;
LABEL_17:
    v6 = (v13 - 1) & v13;
  }
  v14 = v9 + 1;
  if (v9 + 1 >= v7)
    goto LABEL_26;
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
    goto LABEL_16;
  v14 = v9 + 2;
  if (v9 + 2 >= v7)
    goto LABEL_26;
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
    goto LABEL_16;
  v14 = v9 + 3;
  if (v9 + 3 >= v7)
    goto LABEL_26;
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
    goto LABEL_16;
  v14 = v9 + 4;
  if (v9 + 4 >= v7)
  {
LABEL_26:
    swift_release();
    return v17;
  }
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
LABEL_16:
    v9 = v14;
    goto LABEL_17;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v7)
      goto LABEL_26;
    v13 = *(_QWORD *)(v3 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t MedicationSearchCluster.secondaryTitle.getter()
{
  if (MedicationSearchCluster.isTradeCluster.getter())
    return MedicationSearchCluster.ingredientProductName.getter();
  else
    return 0;
}

uint64_t MedicationSearchCluster.hash(into:)(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  sub_1BCB2B27C(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t static MedicationSearchCluster.== infix(_:_:)(uint64_t *a1, unint64_t *a2)
{
  return sub_1BCB21794(*a1, *a2, (uint64_t)&qword_1EF4874E0) & 1;
}

uint64_t MedicationSearchCluster.hashValue.getter()
{
  unint64_t *v0;
  unint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1BCB64A90();
  swift_bridgeObjectRetain();
  sub_1BCB2B27C((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_1BCB64AC0();
}

uint64_t sub_1BCB23154()
{
  unint64_t *v0;
  unint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1BCB64A90();
  swift_bridgeObjectRetain();
  sub_1BCB2B27C((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_1BCB64AC0();
}

uint64_t sub_1BCB231A8(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  sub_1BCB2B27C(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BCB231E0()
{
  unint64_t *v0;
  unint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1BCB64A90();
  swift_bridgeObjectRetain();
  sub_1BCB2B27C((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_1BCB64AC0();
}

uint64_t sub_1BCB23230(uint64_t *a1, unint64_t *a2)
{
  return sub_1BCB21794(*a1, *a2, (uint64_t)&qword_1EF4874E0) & 1;
}

HealthMedicationsExperience::MedicationSearchClusterFormsGrouper __swiftcall MedicationSearchClusterFormsGrouper.init(_:)(HealthMedicationsExperience::MedicationSearchCluster a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  HealthMedicationsExperience::MedicationSearchClusterFormsGrouper result;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;

  v30 = v1;
  v2 = *(_QWORD *)a1.results._rawValue;
  v39 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  if (*(_QWORD *)a1.results._rawValue >> 62)
  {
LABEL_25:
    swift_bridgeObjectRetain();
    v3 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  if (!v3)
  {
LABEL_21:
    result.routesToConcepts._rawValue = (void *)swift_bridgeObjectRelease();
    *v30 = v4;
    return result;
  }
  v33 = v2 & 0xC000000000000001;
  v5 = 4;
  v31 = MEMORY[0x1E0DEE9B0] + 8;
  v32 = v3;
  while (1)
  {
    v8 = v5 - 4;
    if (v33)
    {
      v9 = (id)MEMORY[0x1BCCFCF20](v5 - 4, v2);
      v10 = v5 - 3;
      if (__OFADD__(v8, 1))
        goto LABEL_22;
    }
    else
    {
      v9 = *(id *)(v2 + 8 * v5);
      v10 = v5 - 3;
      if (__OFADD__(v8, 1))
      {
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
    }
    v34 = v10;
    v11 = v2;
    v12 = v9;
    v13 = objc_msgSend(v9, sel_routedDoseFormProducts);
    sub_1BCAFC2E0(0, (unint64_t *)&qword_1EF487748);
    v14 = sub_1BCB642D4();

    MedicationRouteFormConcept.init(_:)((Swift::OpaquePointer)v14);
    v2 = v37;
    sub_1BCB0EA24(v36, v37, v38);
    v17 = v16;
    v18 = v4[2];
    v19 = (v15 & 1) == 0;
    v20 = v18 + v19;
    if (__OFADD__(v18, v19))
      goto LABEL_23;
    v21 = v15;
    if (v4[3] < v20)
      break;
LABEL_18:
    if ((v21 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v6 = swift_bridgeObjectRelease();
      v7 = (_QWORD *)(v4[7] + 8 * v17);
      MEMORY[0x1BCCFCA1C](v6);
      if (*(_QWORD *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1BCB64304();
      sub_1BCB64334();
      sub_1BCB642EC();
    }
    else
    {
      sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA14550, v31, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_1BCB66010;
      *(_QWORD *)(v24 + 32) = v12;
      v35 = v24;
      sub_1BCB642EC();
      v4[(v17 >> 6) + 8] |= 1 << v17;
      v25 = (unint64_t *)(v4[6] + 24 * v17);
      *v25 = v36;
      v25[1] = v37;
      v25[2] = v38;
      *(_QWORD *)(v4[7] + 8 * v17) = v35;
      v26 = v4[2];
      v27 = __OFADD__(v26, 1);
      v28 = v26 + 1;
      if (v27)
        goto LABEL_24;
      v4[2] = v28;
    }
    v2 = v11;
    ++v5;
    if (v34 == v32)
      goto LABEL_21;
  }
  sub_1BCB295D0(v20, 1);
  v4 = v39;
  sub_1BCB0EA24(v36, v37, v38);
  if ((v21 & 1) == (v23 & 1))
  {
    v17 = v22;
    goto LABEL_18;
  }
  result.routesToConcepts._rawValue = (void *)sub_1BCB64A3C();
  __break(1u);
  return result;
}

uint64_t MedicationSearchClusterFormsGrouper.availableRoutes.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;

  v1 = *v0;
  swift_bridgeObjectRetain_n();
  v2 = sub_1BCB24494(v1);
  swift_bridgeObjectRelease();
  v4 = v2;
  sub_1BCB25624((uint64_t *)&v4, sub_1BCB2B3CC, sub_1BCB26570);
  swift_bridgeObjectRelease();
  return (uint64_t)v4;
}

BOOL MedicationSearchClusterFormsGrouper.hasSingleRoute.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) == 1;
}

uint64_t MedicationSearchClusterFormsGrouper.hasSingleProduct.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v1 = *v0;
  swift_bridgeObjectRetain_n();
  v16 = sub_1BCB24494(v1);
  sub_1BCB25624((uint64_t *)&v16, sub_1BCB2B3CC, sub_1BCB26570);
  swift_bridgeObjectRelease_n();
  if (!v16[2])
  {
    swift_release();
    return 0;
  }
  v3 = v16[4];
  v2 = v16[5];
  v4 = v16[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  if (*(_QWORD *)(v1 + 16) != 1 || (sub_1BCB0EA24(v3, v2, v4), (v6 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
    if (v8)
      goto LABEL_6;
LABEL_20:
    swift_bridgeObjectRelease();
    v14 = MEMORY[0x1E0DEE9D8];
    if (!(MEMORY[0x1E0DEE9D8] >> 62))
    {
LABEL_17:
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_18:
      swift_bridgeObjectRelease();
      return v15 == 1;
    }
LABEL_21:
    swift_bridgeObjectRetain();
    v15 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v8)
    goto LABEL_20;
LABEL_6:
  v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1BCB64844();
  if ((v8 & 0x8000000000000000) == 0)
  {
    v9 = 0;
    do
    {
      if ((v7 & 0xC000000000000001) != 0)
        v10 = (id)MEMORY[0x1BCCFCF20](v9, v7);
      else
        v10 = *(id *)(v7 + 8 * v9 + 32);
      v11 = v10;
      ++v9;
      v12 = objc_msgSend(v10, sel_specificProduct);

      sub_1BCB64820();
      sub_1BCB64850();
      sub_1BCB6485C();
      sub_1BCB6482C();
    }
    while (v8 != v9);
    v14 = (unint64_t)v16;
    swift_bridgeObjectRelease();
    if (!(v14 >> 62))
      goto LABEL_17;
    goto LABEL_21;
  }
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t MedicationSearchClusterFormsGrouper.singleSpecificProduct.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;

  v1 = *v0;
  swift_bridgeObjectRetain_n();
  v18 = sub_1BCB24494(v1);
  sub_1BCB25624((uint64_t *)&v18, sub_1BCB2B3CC, sub_1BCB26570);
  swift_bridgeObjectRelease_n();
  if (!v18[2])
  {
    swift_release();
    return 0;
  }
  v3 = v18[4];
  v2 = v18[5];
  v4 = v18[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  if (*(_QWORD *)(v1 + 16) != 1 || (sub_1BCB0EA24(v3, v2, v4), (v6 & 1) == 0))
  {
    swift_bridgeObjectRelease();
LABEL_13:
    swift_bridgeObjectRelease();
    return 0;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!(v7 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v8)
      goto LABEL_6;
LABEL_25:
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x1E0DEE9D8];
    if (!(MEMORY[0x1E0DEE9D8] >> 62))
      goto LABEL_18;
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  v8 = sub_1BCB648D4();
  swift_bridgeObjectRelease();
  if (!v8)
    goto LABEL_25;
LABEL_6:
  v18 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v9 = (unint64_t)&v18;
  sub_1BCB64844();
  if (v8 < 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  v10 = 0;
  do
  {
    if ((v7 & 0xC000000000000001) != 0)
      v11 = (id)MEMORY[0x1BCCFCF20](v10, v7);
    else
      v11 = *(id *)(v7 + 8 * v10 + 32);
    v12 = v11;
    ++v10;
    v13 = objc_msgSend(v11, sel_specificProduct);

    sub_1BCB64820();
    sub_1BCB64850();
    sub_1BCB6485C();
    sub_1BCB6482C();
  }
  while (v8 != v10);
  v9 = (unint64_t)v18;
  swift_bridgeObjectRelease();
  if (!(v9 >> 62))
  {
LABEL_18:
    if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10) == 1)
      goto LABEL_19;
    goto LABEL_13;
  }
LABEL_26:
  swift_bridgeObjectRetain();
  v17 = sub_1BCB648D4();
  swift_bridgeObjectRelease();
  if (v17 != 1)
    goto LABEL_13;
  swift_bridgeObjectRetain();
  v14 = sub_1BCB648D4();
  swift_bridgeObjectRelease();
  if (!v14)
    goto LABEL_23;
LABEL_19:
  if ((v9 & 0xC000000000000001) != 0)
  {
LABEL_31:
    v16 = (_QWORD *)MEMORY[0x1BCCFCF20](0, v9);
    goto LABEL_22;
  }
  if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v16 = *(id *)(v9 + 32);
LABEL_22:
    v14 = (uint64_t)v16;
LABEL_23:
    swift_bridgeObjectRelease();
    return v14;
  }
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

Swift::OpaquePointer_optional __swiftcall MedicationSearchClusterFormsGrouper.getSpecificProducts(for:)(HealthMedicationsExperience::MedicationRouteFormConcept a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  Swift::Bool v38;
  void *v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  Swift::OpaquePointer_optional result;

  v2 = *v1;
  v3 = MEMORY[0x1E0DEE9D8];
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_19;
  v4 = *((_QWORD *)a1.routeConcepts._rawValue + 1);
  v5 = *((_QWORD *)a1.routeConcepts._rawValue + 2);
  v6 = *(_QWORD *)a1.routeConcepts._rawValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BCB0EA24(v6, v4, v5);
  if ((v8 & 1) != 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      v10 = sub_1BCB648D4();
      if (v10)
        goto LABEL_5;
    }
    else
    {
      v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v10)
      {
LABEL_5:
        if (v10 < 1)
        {
          __break(1u);
LABEL_50:
          sub_1BCB066B8(0, &qword_1EF487BB0, &qword_1EF487998, 0x1E0CB64B0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
          v39 = (void *)sub_1BCB64A3C();
          __break(1u);
          goto LABEL_51;
        }
        for (i = 0; i != v10; ++i)
        {
          if ((v9 & 0xC000000000000001) != 0)
            v12 = (id)MEMORY[0x1BCCFCF20](i, v9);
          else
            v12 = *(id *)(v9 + 8 * i + 32);
          v13 = v12;
          v14 = objc_msgSend(v12, sel_specificProduct);

          if (v14)
          {
            MEMORY[0x1BCCFCA1C]();
            if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              sub_1BCB64304();
            sub_1BCB64334();
            sub_1BCB642EC();
          }
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_19:
  v44 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  if (v3 >> 62)
    goto LABEL_46;
  v15 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v15)
  {
    v42 = v3 & 0xC000000000000001;
    v16 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v17 = 4;
    v41 = MEMORY[0x1E0DEE9B0] + 8;
    v40 = xmmword_1BCB66010;
    v18 = v3;
    while (1)
    {
      v20 = v42 ? (id)MEMORY[0x1BCCFCF20](v17 - 4, v3, a1.uniqueIdentifier._object) : *(id *)(v3 + 8 * v17);
      v21 = v20;
      v22 = v17 - 3;
      if (__OFADD__(v17 - 4, 1))
        break;
      if (objc_msgSend(v20, sel_meds_isClinicalProduct))
      {
        v23 = v21;
LABEL_34:
        v24 = objc_msgSend(v23, sel_identifier, v40);

        goto LABEL_36;
      }
      if (objc_msgSend(v21, sel_meds_isSpecificProduct))
      {
        v23 = objc_msgSend(v21, sel_firstConceptOfRelationshipType_, 798);
        if (v23)
          goto LABEL_34;
      }
      v24 = 0;
LABEL_36:
      v26 = sub_1BCB0EAC4(v24);
      v27 = v16[2];
      v28 = (v25 & 1) == 0;
      v29 = v27 + v28;
      if (__OFADD__(v27, v28))
        goto LABEL_44;
      v3 = v25;
      if (v16[3] < v29)
      {
        sub_1BCB29A14(v29, 1);
        v16 = v44;
        v30 = sub_1BCB0EAC4(v24);
        if ((v3 & 1) != (v31 & 1))
          goto LABEL_50;
        v26 = v30;
      }
      if ((v3 & 1) != 0)
      {

        v19 = (_QWORD *)(v16[7] + 8 * v26);
        MEMORY[0x1BCCFCA1C]();
        if (*(_QWORD *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1BCB64304();
        sub_1BCB64334();
        sub_1BCB642EC();
      }
      else
      {
        sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA14550, v41, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v32 = swift_allocObject();
        *(_OWORD *)(v32 + 16) = v40;
        *(_QWORD *)(v32 + 32) = v21;
        v43 = v32;
        sub_1BCB642EC();
        v16[(v26 >> 6) + 8] |= 1 << v26;
        v33 = 8 * v26;
        *(_QWORD *)(v16[6] + v33) = v24;
        *(_QWORD *)(v16[7] + v33) = v43;
        v34 = v16[2];
        v35 = __OFADD__(v34, 1);
        v36 = v34 + 1;
        if (v35)
          goto LABEL_45;
        v16[2] = v36;
      }
      v3 = v18;
      ++v17;
      if (v22 == v15)
        goto LABEL_48;
    }
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    swift_bridgeObjectRetain();
    v15 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
  }
  v16 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_48:
  swift_bridgeObjectRelease();
  v37 = sub_1BCB22E90((uint64_t)v16);
  swift_release();
  v39 = (void *)v37;
LABEL_51:
  result.value._rawValue = v39;
  result.is_nil = v38;
  return result;
}

uint64_t sub_1BCB24010@<X0>(unint64_t *a1@<X0>, unint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  char *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *a1;
  v26 = MEMORY[0x1E0DEE9E8];
  v25 = MEMORY[0x1E0DEE9D8];
  if (v3 >> 62)
    goto LABEL_30;
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v4)
  {
    while (1)
    {
      v23 = (_QWORD *)a2;
      a2 = 0;
      v5 = v3 & 0xC000000000000001;
      while (v5)
      {
        v6 = (id)MEMORY[0x1BCCFCF20](a2, v3);
LABEL_9:
        v7 = v6;
        v8 = (char *)(a2 + 1);
        if (__OFADD__(a2, 1))
          goto LABEL_29;
        if (objc_msgSend(v6, sel_meds_isClinicalProduct))
        {
          v9 = v7;
        }
        else
        {
          if ((objc_msgSend(v7, sel_meds_isSpecificProduct) & 1) == 0)
            goto LABEL_16;
          v9 = objc_msgSend(v7, sel_firstConceptOfRelationshipType_, 798);
          if (!v9)
            goto LABEL_16;
        }
        v10 = objc_msgSend(v9, sel_firstAttributeForType_, 984, v22);

        if (v10)
        {
          v11 = objc_msgSend(v10, sel_stringValue);

          goto LABEL_20;
        }
LABEL_16:
        v12 = objc_msgSend(v7, sel_firstAttributeForType_, 984, v22);
        if (v12)
        {
          v13 = v12;
          v11 = objc_msgSend(v12, sel_stringValue);

        }
        else
        {
          v14 = objc_msgSend(v7, sel_localizedPreferredName);
          if (!v14)
          {
            if (qword_1EDA14148 != -1)
              swift_once();
            v11 = (id)qword_1EDA14130;
            swift_bridgeObjectRetain();
            v22 = 0xE000000000000000;
            v15 = sub_1BCB63A34();
            v17 = v19;
            swift_bridgeObjectRelease();
            v5 = v3 & 0xC000000000000001;
            goto LABEL_21;
          }
          v11 = v14;
        }
LABEL_20:
        v15 = sub_1BCB6413C();
        v17 = v16;
LABEL_21:

        swift_bridgeObjectRetain();
        v18 = sub_1BCB45C50(&v24, v15, v17);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v18 & 1) != 0)
        {
          sub_1BCB64820();
          sub_1BCB64850();
          sub_1BCB6485C();
          sub_1BCB6482C();
        }
        else
        {

        }
        ++a2;
        if (v8 == (char *)v4)
        {
          v20 = v25;
          a2 = (unint64_t)v23;
          goto LABEL_32;
        }
      }
      if (a2 < *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      swift_bridgeObjectRetain();
      v4 = sub_1BCB648D4();
      if (!v4)
        goto LABEL_31;
    }
    v6 = *(id *)(v3 + 8 * a2 + 32);
    goto LABEL_9;
  }
LABEL_31:
  v20 = MEMORY[0x1E0DEE9D8];
LABEL_32:
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v20;
  return result;
}

_QWORD *sub_1BCB24388(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v2 <= 0)
    {
      v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA14550, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v3 = (_QWORD *)swift_allocObject();
      v4 = _swift_stdlib_malloc_size(v3);
      v5 = v4 - 32;
      if (v4 < 32)
        v5 = v4 - 25;
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_1BCB01AE0((unint64_t)(v3 + 4), v2, v1);
    v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    v2 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
    if (!v2)
      return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

_QWORD *sub_1BCB24494(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1BCAF84F0(0, &qword_1EF487C20, (uint64_t)&type metadata for MedicationRouteFormConcept, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  v5 = sub_1BCB2AB68(&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1BCB2BDB8();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t sub_1BCB2459C(uint64_t a1)
{
  return sub_1BCB245D4(a1, &qword_1EF487BD8, 0x1E0D2C500, &qword_1EF487BE0);
}

uint64_t sub_1BCB245B8(uint64_t a1)
{
  return sub_1BCB245D4(a1, (unint64_t *)&qword_1EDA14480, 0x1E0D2C480, &qword_1EF487BE8);
}

uint64_t sub_1BCB245D4(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;

  if ((a1 & 0xC000000000000001) != 0)
  {
    v8 = sub_1BCB64724();
    if (v8)
      goto LABEL_3;
    return MEMORY[0x1E0DEE9D8];
  }
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    return MEMORY[0x1E0DEE9D8];
LABEL_3:
  if (v8 <= 0)
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA14550, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v9 = (_QWORD *)swift_allocObject();
    v10 = _swift_stdlib_malloc_size(v9);
    v11 = v10 - 32;
    if (v10 < 32)
      v11 = v10 - 25;
    v9[2] = v8;
    v9[3] = (2 * (v11 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  v12 = sub_1BCB2AD84(&v14, v9 + 4, v8, a1, a2, a3, a4);
  result = sub_1BCB2BDB8();
  if (v12 == (_QWORD *)v8)
    return (uint64_t)v9;
  __break(1u);
  return result;
}

uint64_t sub_1BCB2470C(uint64_t a1)
{
  return sub_1BCB245D4(a1, (unint64_t *)&qword_1EDA144A8, 0x1E0D2C4D8, &qword_1EF487BF0);
}

_QWORD *sub_1BCB24728(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA14280, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_1BCB2B07C((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1BCB2BDB8();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t sub_1BCB24820(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BCB24A44(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1BCB2483C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BCB248C8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BCB24858(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BCB24DAC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1BCB24874(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BCB24F44(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1BCB24890(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BCB2527C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1BCB248AC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BCB25428(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BCB248C8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA14280, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1BCB64910();
  __break(1u);
  return result;
}

uint64_t sub_1BCB24A44(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_1BCAF8248(0, &qword_1EF487BD0, (void (*)(uint64_t))MEMORY[0x1E0CB0998]);
  v10 = *(_QWORD *)(sub_1BCB63B54() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(sub_1BCB63B54() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = sub_1BCB64910();
  __break(1u);
  return result;
}

uint64_t sub_1BCB24C30(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1BCAF84F0(0, &qword_1EF4871B8, (uint64_t)&type metadata for MedicationSearchCluster, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1BCB64910();
  __break(1u);
  return result;
}

uint64_t sub_1BCB24DAC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_1BCB2BB90();
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA131B0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1BCB64910();
  __break(1u);
  return result;
}

uint64_t sub_1BCB24F44(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_1BCB2BEE8();
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8)
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    sub_1BCB066B8(0, (unint64_t *)&qword_1EF487750, (unint64_t *)&qword_1EF487748, 0x1E0CB64A0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1BCB64910();
  __break(1u);
  return result;
}

uint64_t sub_1BCB250E4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1BCAF84F0(0, &qword_1EF487C20, (uint64_t)&type metadata for MedicationRouteFormConcept, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1BCB64910();
  __break(1u);
  return result;
}

uint64_t sub_1BCB2527C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_1BCAF8248(0, &qword_1EF487BF8, (void (*)(uint64_t))sub_1BCB2BBFC);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    sub_1BCB2BBFC();
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1BCB64910();
  __break(1u);
  return result;
}

uint64_t sub_1BCB25428(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1BCAF84F0(0, &qword_1EF4871A0, (uint64_t)&type metadata for Weekdays.Day, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1BCB64910();
  __break(1u);
  return result;
}

uint64_t sub_1BCB25588(uint64_t *a1)
{
  return sub_1BCB25624(a1, sub_1BCB2B390, sub_1BCB2569C);
}

uint64_t sub_1BCB255AC(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    sub_1BCB2B3B8();
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_1BCB25D84(v6);
  return sub_1BCB6482C();
}

uint64_t sub_1BCB25624(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = a2(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  result = a3(v9);
  *a1 = v6;
  return result;
}

uint64_t sub_1BCB2569C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = sub_1BCB649C4();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_1BCB27978(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v105 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v11 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_118:
      v94 = v11;
      v104 = v8;
      if (v12 >= 2)
      {
        v95 = *v102;
        do
        {
          v96 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v95)
            goto LABEL_159;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v12 + 24];
          sub_1BCB28284((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(_QWORD *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = sub_1BCB2908C((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_149;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v12 > v101)
            goto LABEL_150;
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_1BCB6431C();
    *(_QWORD *)(v7 + 16) = v6;
    v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v103 = v10 + 8;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v106 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = sub_1BCB649F4();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v103 + 16 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ sub_1BCB649F4()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 2;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 16 * v20;
        v26 = 16 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = v10 + v25;
            v30 = *(_QWORD *)(v10 + v26);
            v31 = *(_QWORD *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(_QWORD *)(v29 - 16) = v30;
            *(_QWORD *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v105)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_1BCB28D7C(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v41 = *((_QWORD *)v11 + 2);
    v40 = *((_QWORD *)v11 + 3);
    v12 = v41 + 1;
    if (v41 >= v40 >> 1)
      v11 = sub_1BCB28D7C((char *)(v40 > 1), v41 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v42 = v11 + 32;
    v43 = &v11[16 * v41 + 32];
    *(_QWORD *)v43 = v13;
    *((_QWORD *)v43 + 1) = v9;
    if (v41)
    {
      v107 = v9;
      while (1)
      {
        v44 = v12 - 1;
        if (v12 >= 4)
        {
          v49 = &v42[16 * v12];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_135;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_136;
          v56 = v12 - 2;
          v57 = &v42[16 * v12 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_138;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_141;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_145;
            v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v73 = *((_QWORD *)v11 + 4);
            v74 = *((_QWORD *)v11 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_99;
          }
          v46 = *((_QWORD *)v11 + 4);
          v45 = *((_QWORD *)v11 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_137;
        v56 = v12 - 2;
        v62 = &v42[16 * v12 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_140;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_143;
        if (__OFADD__(v66, v71))
          goto LABEL_144;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_105:
          if (v72)
            v44 = v56;
          goto LABEL_107;
        }
LABEL_99:
        if ((v67 & 1) != 0)
          goto LABEL_139;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_142;
        if (v78 < v66)
          goto LABEL_15;
LABEL_107:
        v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        v84 = v10;
        if (!v10)
          goto LABEL_157;
        v85 = v11;
        v86 = &v42[16 * v83];
        v87 = *(_QWORD *)v86;
        v88 = v42;
        v89 = v44;
        v90 = &v42[16 * v44];
        v91 = *((_QWORD *)v90 + 1);
        v92 = v84;
        sub_1BCB28284((char *)(v84 + 16 * *(_QWORD *)v86), (char *)(v84 + 16 * *(_QWORD *)v90), v84 + 16 * v91, __dst);
        if (v1)
          goto LABEL_115;
        if (v91 < v87)
          goto LABEL_132;
        if (v89 > *((_QWORD *)v85 + 2))
          goto LABEL_133;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v88[16 * v83 + 8] = v91;
        v93 = *((_QWORD *)v85 + 2);
        if (v89 >= v93)
          goto LABEL_134;
        v11 = v85;
        v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        v42 = v88;
        *((_QWORD *)v85 + 2) = v93 - 1;
        v10 = v92;
        v9 = v107;
        if (v93 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v106;
    if (v9 >= v106)
    {
      v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105))
    goto LABEL_153;
  if (v13 + v105 >= v3)
    v32 = v3;
  else
    v32 = v13 + v105;
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      v33 = (_QWORD *)(v10 + 16 * v9);
      do
      {
        v34 = (uint64_t *)(v10 + 16 * v9);
        v35 = *v34;
        v36 = v34[1];
        v37 = v13;
        v38 = v33;
        do
        {
          v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (sub_1BCB649F4() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v35 = *v38;
          v36 = v38[1];
          *(_OWORD *)v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = sub_1BCB648A4();
  __break(1u);
  return result;
}

void sub_1BCB25D84(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  char v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  void **v111;
  uint64_t v112;
  uint64_t v113;

  v3 = a1[1];
  v4 = sub_1BCB649C4();
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_131;
    if (v3)
      sub_1BCB27A44(0, v3, 1, a1);
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_139;
  v102 = v4;
  v99 = a1;
  if (v3 < 2)
  {
    v8 = (char *)MEMORY[0x1E0DEE9D8];
    v113 = MEMORY[0x1E0DEE9D8];
    v111 = (void **)((MEMORY[0x1E0DEE9D8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      v11 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_97:
      if (v11 >= 2)
      {
        v93 = *v99;
        do
        {
          v94 = v11 - 2;
          if (v11 < 2)
            goto LABEL_126;
          if (!v93)
            goto LABEL_138;
          v95 = *(_QWORD *)&v8[16 * v94 + 32];
          v96 = *(_QWORD *)&v8[16 * v11 + 24];
          sub_1BCB2851C((id *)(v93 + 8 * v95), (id *)(v93 + 8 * *(_QWORD *)&v8[16 * v11 + 16]), v93 + 8 * v96, v111);
          if (v1)
            break;
          if (v96 < v95)
            goto LABEL_127;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v8 = sub_1BCB2908C((uint64_t)v8);
          if (v94 >= *((_QWORD *)v8 + 2))
            goto LABEL_128;
          v97 = &v8[16 * v94 + 32];
          *(_QWORD *)v97 = v95;
          *((_QWORD *)v97 + 1) = v96;
          v98 = *((_QWORD *)v8 + 2);
          if (v11 > v98)
            goto LABEL_129;
          memmove(&v8[16 * v11 + 16], &v8[16 * v11 + 32], 16 * (v98 - v11));
          *((_QWORD *)v8 + 2) = v98 - 1;
          v11 = v98 - 1;
        }
        while (v98 > 2);
      }
LABEL_108:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v113 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      sub_1BCB642EC();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v6 = v5 >> 1;
    sub_1BCAFC2E0(0, (unint64_t *)&qword_1EF487748);
    v7 = sub_1BCB6431C();
    *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) = v6;
    v111 = (void **)((v7 & 0xFFFFFFFFFFFFFF8) + 32);
    v113 = v7;
  }
  v9 = 0;
  v10 = *a1;
  v100 = *a1 - 8;
  v101 = *a1 + 16;
  v8 = (char *)MEMORY[0x1E0DEE9D8];
  v107 = v3;
  v112 = *a1;
  while (1)
  {
    v12 = v9++;
    v108 = v12;
    if (v9 < v3)
    {
      v103 = v8;
      v13 = *(void **)(v10 + 8 * v12);
      v14 = *(id *)(v10 + 8 * v9);
      v15 = v13;
      v16 = objc_msgSend(v14, sel_identifier);
      v109 = objc_msgSend(v16, sel_rawIdentifier);

      v17 = objc_msgSend(v15, sel_identifier);
      v105 = objc_msgSend(v17, sel_rawIdentifier);

      v9 = v12 + 2;
      if (v12 + 2 < v3)
      {
        v18 = (id *)(v101 + 8 * v12);
        while (1)
        {
          v19 = *(v18 - 1);
          v20 = *v18;
          v21 = v19;
          v22 = objc_msgSend(v20, sel_identifier);
          v23 = objc_msgSend(v22, sel_rawIdentifier);

          v24 = objc_msgSend(v21, sel_identifier);
          v25 = objc_msgSend(v24, sel_rawIdentifier);

          if ((uint64_t)v109 < (uint64_t)v105 == (uint64_t)v23 >= (uint64_t)v25)
            break;
          ++v9;
          ++v18;
          v3 = v107;
          if (v107 == v9)
          {
            v9 = v107;
            goto LABEL_22;
          }
        }
        v3 = v107;
LABEL_22:
        v12 = v108;
      }
      v8 = v103;
      v10 = v112;
      if ((uint64_t)v109 < (uint64_t)v105)
      {
        if (v9 < v12)
          goto LABEL_132;
        if (v12 < v9)
        {
          v26 = (uint64_t *)(v100 + 8 * v9);
          v27 = v9;
          v28 = v12;
          v29 = (uint64_t *)(v112 + 8 * v12);
          do
          {
            if (v28 != --v27)
            {
              if (!v112)
                goto LABEL_137;
              v30 = *v29;
              *v29 = *v26;
              *v26 = v30;
            }
            ++v28;
            --v26;
            ++v29;
          }
          while (v28 < v27);
        }
      }
    }
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v12))
        goto LABEL_130;
      if (v9 - v12 < v102)
        break;
    }
LABEL_49:
    if (v9 < v12)
      goto LABEL_125;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v8 = sub_1BCB28D7C(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
    v44 = *((_QWORD *)v8 + 2);
    v43 = *((_QWORD *)v8 + 3);
    v11 = v44 + 1;
    v10 = v112;
    if (v44 >= v43 >> 1)
    {
      v92 = sub_1BCB28D7C((char *)(v43 > 1), v44 + 1, 1, v8);
      v10 = v112;
      v8 = v92;
    }
    *((_QWORD *)v8 + 2) = v11;
    v45 = v8 + 32;
    v46 = &v8[16 * v44 + 32];
    *(_QWORD *)v46 = v12;
    *((_QWORD *)v46 + 1) = v9;
    if (v44)
    {
      while (1)
      {
        v47 = v11 - 1;
        if (v11 >= 4)
        {
          v52 = &v45[16 * v11];
          v53 = *((_QWORD *)v52 - 8);
          v54 = *((_QWORD *)v52 - 7);
          v58 = __OFSUB__(v54, v53);
          v55 = v54 - v53;
          if (v58)
            goto LABEL_114;
          v57 = *((_QWORD *)v52 - 6);
          v56 = *((_QWORD *)v52 - 5);
          v58 = __OFSUB__(v56, v57);
          v50 = v56 - v57;
          v51 = v58;
          if (v58)
            goto LABEL_115;
          v59 = v11 - 2;
          v60 = &v45[16 * v11 - 32];
          v62 = *(_QWORD *)v60;
          v61 = *((_QWORD *)v60 + 1);
          v58 = __OFSUB__(v61, v62);
          v63 = v61 - v62;
          if (v58)
            goto LABEL_117;
          v58 = __OFADD__(v50, v63);
          v64 = v50 + v63;
          if (v58)
            goto LABEL_120;
          if (v64 >= v55)
          {
            v82 = &v45[16 * v47];
            v84 = *(_QWORD *)v82;
            v83 = *((_QWORD *)v82 + 1);
            v58 = __OFSUB__(v83, v84);
            v85 = v83 - v84;
            if (v58)
              goto LABEL_124;
            v75 = v50 < v85;
            goto LABEL_86;
          }
        }
        else
        {
          if (v11 != 3)
          {
            v76 = *((_QWORD *)v8 + 4);
            v77 = *((_QWORD *)v8 + 5);
            v58 = __OFSUB__(v77, v76);
            v69 = v77 - v76;
            v70 = v58;
            goto LABEL_80;
          }
          v49 = *((_QWORD *)v8 + 4);
          v48 = *((_QWORD *)v8 + 5);
          v58 = __OFSUB__(v48, v49);
          v50 = v48 - v49;
          v51 = v58;
        }
        if ((v51 & 1) != 0)
          goto LABEL_116;
        v59 = v11 - 2;
        v65 = &v45[16 * v11 - 32];
        v67 = *(_QWORD *)v65;
        v66 = *((_QWORD *)v65 + 1);
        v68 = __OFSUB__(v66, v67);
        v69 = v66 - v67;
        v70 = v68;
        if (v68)
          goto LABEL_119;
        v71 = &v45[16 * v47];
        v73 = *(_QWORD *)v71;
        v72 = *((_QWORD *)v71 + 1);
        v58 = __OFSUB__(v72, v73);
        v74 = v72 - v73;
        if (v58)
          goto LABEL_122;
        if (__OFADD__(v69, v74))
          goto LABEL_123;
        if (v69 + v74 >= v50)
        {
          v75 = v50 < v74;
LABEL_86:
          if (v75)
            v47 = v59;
          goto LABEL_88;
        }
LABEL_80:
        if ((v70 & 1) != 0)
          goto LABEL_118;
        v78 = &v45[16 * v47];
        v80 = *(_QWORD *)v78;
        v79 = *((_QWORD *)v78 + 1);
        v58 = __OFSUB__(v79, v80);
        v81 = v79 - v80;
        if (v58)
          goto LABEL_121;
        if (v81 < v69)
          goto LABEL_14;
LABEL_88:
        v86 = v47 - 1;
        if (v47 - 1 >= v11)
        {
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
          goto LABEL_134;
        }
        if (!v10)
          goto LABEL_136;
        v87 = &v45[16 * v86];
        v88 = *(_QWORD *)v87;
        v89 = &v45[16 * v47];
        v90 = *((_QWORD *)v89 + 1);
        sub_1BCB2851C((id *)(v10 + 8 * *(_QWORD *)v87), (id *)(v10 + 8 * *(_QWORD *)v89), v10 + 8 * v90, v111);
        if (v1)
          goto LABEL_108;
        if (v90 < v88)
          goto LABEL_111;
        if (v47 > *((_QWORD *)v8 + 2))
          goto LABEL_112;
        *(_QWORD *)v87 = v88;
        *(_QWORD *)&v45[16 * v86 + 8] = v90;
        v91 = *((_QWORD *)v8 + 2);
        if (v47 >= v91)
          goto LABEL_113;
        v11 = v91 - 1;
        memmove(&v45[16 * v47], v89 + 16, 16 * (v91 - 1 - v47));
        *((_QWORD *)v8 + 2) = v91 - 1;
        v10 = v112;
        if (v91 <= 2)
          goto LABEL_14;
      }
    }
    v11 = 1;
LABEL_14:
    v3 = v107;
    if (v9 >= v107)
      goto LABEL_97;
  }
  if (__OFADD__(v12, v102))
    goto LABEL_133;
  if (v12 + v102 >= v3)
    v31 = v3;
  else
    v31 = v12 + v102;
  if (v31 >= v12)
  {
    if (v9 != v31)
    {
      v104 = v8;
      v106 = v31;
      v32 = v100 + 8 * v9;
      do
      {
        v33 = *(void **)(v10 + 8 * v9);
        v34 = v12;
        v110 = v32;
        while (1)
        {
          v35 = *(void **)v32;
          v36 = v33;
          v37 = v35;
          v38 = objc_msgSend(v36, sel_identifier);
          v39 = objc_msgSend(v38, sel_rawIdentifier);

          v40 = objc_msgSend(v37, sel_identifier);
          v41 = objc_msgSend(v40, sel_rawIdentifier);

          if ((uint64_t)v39 >= (uint64_t)v41)
            break;
          v10 = v112;
          if (!v112)
            goto LABEL_135;
          v42 = *(void **)v32;
          v33 = *(void **)(v32 + 8);
          *(_QWORD *)v32 = v33;
          *(_QWORD *)(v32 + 8) = v42;
          v32 -= 8;
          if (v9 == ++v34)
            goto LABEL_42;
        }
        v10 = v112;
LABEL_42:
        ++v9;
        v12 = v108;
        v32 = v110 + 8;
      }
      while (v9 != v106);
      v9 = v106;
      v8 = v104;
    }
    goto LABEL_49;
  }
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  sub_1BCB648A4();
  __break(1u);
}

uint64_t sub_1BCB26570(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  void *v84;
  id v85;
  void *v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  id v105;
  void *v106;
  id v107;
  void *v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  BOOL v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  BOOL v154;
  uint64_t v155;
  char v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  BOOL v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  char *v179;
  uint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  unint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t *v199;
  int v200;
  unint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;

  v3 = a1[1];
  result = sub_1BCB649C4();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_259;
    if (v3)
      return sub_1BCB27B78(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_267;
  v6 = (char *)MEMORY[0x1E0DEE9D8];
  v194 = v3;
  v190 = result;
  v196 = v1;
  v188 = a1;
  if (v3 < 2)
  {
    v195 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v130 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v189 = MEMORY[0x1E0DEE9D8];
LABEL_221:
      if (v130 >= 2)
      {
        v180 = *v188;
        do
        {
          v181 = v130 - 2;
          if (v130 < 2)
            goto LABEL_253;
          if (!v180)
            goto LABEL_266;
          v182 = v6;
          v183 = v6 + 32;
          v184 = *(_QWORD *)&v6[16 * v181 + 32];
          v185 = *(_QWORD *)&v6[16 * v130 + 24];
          sub_1BCB288D8((char *)(v180 + 24 * v184), (char *)(v180 + 24 * *(_QWORD *)&v183[16 * v130 - 16]), v180 + 24 * v185, v195);
          if (v196)
            break;
          if (v185 < v184)
            goto LABEL_255;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v182 = sub_1BCB2908C((uint64_t)v182);
          if (v181 >= *((_QWORD *)v182 + 2))
            goto LABEL_256;
          v186 = &v182[16 * v181 + 32];
          *(_QWORD *)v186 = v184;
          *((_QWORD *)v186 + 1) = v185;
          v187 = *((_QWORD *)v182 + 2);
          if (v130 > v187)
            goto LABEL_257;
          v6 = v182;
          memmove(&v182[16 * v130 + 16], &v182[16 * v130 + 32], 16 * (v187 - v130));
          *((_QWORD *)v182 + 2) = v187 - 1;
          v130 = v187 - 1;
        }
        while (v187 > 2);
      }
LABEL_232:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v189 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v189 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v7 = v5 >> 1;
    v8 = sub_1BCB6431C();
    *(_QWORD *)(v8 + 16) = v7;
    v189 = v8;
    v195 = (char *)(v8 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v11 = v3;
  v198 = *a1;
  while (1)
  {
    v12 = v9++;
    v197 = v12;
    v191 = v6;
    if (v9 >= v11)
      goto LABEL_92;
    v13 = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14 = MedicationRouteFormConcept.displayString.getter();
    v16 = v15;
    if (v14 == MedicationRouteFormConcept.displayString.getter() && v16 == v17)
      v200 = 0;
    else
      v200 = sub_1BCB649F4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = v198;
    v9 = v197 + 2;
    if (v197 + 2 < v194)
      break;
LABEL_82:
    if ((v200 & 1) != 0)
      goto LABEL_85;
LABEL_92:
    if (v9 >= v194)
      goto LABEL_170;
    if (__OFSUB__(v9, v197))
      goto LABEL_258;
    if (v9 - v197 >= v190)
      goto LABEL_170;
    v75 = v197 + v190;
    if (__OFADD__(v197, v190))
      goto LABEL_260;
    if (v75 >= v194)
      v75 = v194;
    if (v75 < v197)
    {
LABEL_261:
      __break(1u);
      goto LABEL_262;
    }
    v192 = v75;
    if (v9 != v75)
    {
LABEL_104:
      v76 = *(_QWORD *)(v10 + 24 * v9);
      v193 = v9;
      while (1)
      {
        v77 = (unint64_t *)(v10 + 24 * v9);
        v78 = *(v77 - 3);
        v199 = v77 - 3;
        v79 = objc_allocWithZone(MEMORY[0x1E0C99E10]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v80 = objc_msgSend(v79, sel_init);
        if (v76 >> 62)
        {
          swift_bridgeObjectRetain();
          v81 = sub_1BCB648D4();
        }
        else
        {
          v81 = *(_QWORD *)((v76 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
        }
        v209 = v78;
        v201 = v77;
        v202 = v9;
        if (v81)
        {
          if (v81 < 1)
          {
            __break(1u);
LABEL_235:
            __break(1u);
LABEL_236:
            __break(1u);
LABEL_237:
            __break(1u);
LABEL_238:
            __break(1u);
LABEL_239:
            __break(1u);
LABEL_240:
            __break(1u);
LABEL_241:
            __break(1u);
LABEL_242:
            __break(1u);
LABEL_243:
            __break(1u);
LABEL_244:
            __break(1u);
LABEL_245:
            __break(1u);
LABEL_246:
            __break(1u);
LABEL_247:
            __break(1u);
LABEL_248:
            __break(1u);
LABEL_249:
            __break(1u);
LABEL_250:
            __break(1u);
LABEL_251:
            __break(1u);
LABEL_252:
            __break(1u);
LABEL_253:
            __break(1u);
LABEL_254:
            __break(1u);
LABEL_255:
            __break(1u);
LABEL_256:
            __break(1u);
LABEL_257:
            __break(1u);
LABEL_258:
            __break(1u);
LABEL_259:
            __break(1u);
LABEL_260:
            __break(1u);
            goto LABEL_261;
          }
          v82 = 0;
          do
          {
            if ((v76 & 0xC000000000000001) != 0)
              v83 = (id)MEMORY[0x1BCCFCF20](v82, v76);
            else
              v83 = *(id *)(v76 + 8 * v82 + 32);
            v84 = v83;
            if (objc_msgSend(v83, sel_meds_isRoutedDoseFormProduct))
            {
              v85 = objc_msgSend(v84, sel_meds_preferredNameForFirstObjectOfRelationshipType_, 982);
              if (v85)
              {
                v86 = v85;
                sub_1BCB6413C();

              }
              else
              {

              }
              v78 = v209;
            }
            else
            {

            }
            ++v82;
            sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA131B0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            objc_msgSend(v80, sel_addObject_, sub_1BCB64A24());
            swift_unknownObjectRelease();
          }
          while (v81 != v82);
        }
        swift_bridgeObjectRelease();
        v87 = objc_msgSend(v80, sel_array);
        v88 = sub_1BCB642D4();

        v89 = sub_1BCB522E4(v88);
        swift_bridgeObjectRelease();

        v90 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        if (v89)
          v91 = v89;
        else
          v91 = MEMORY[0x1E0DEE9D8];
        v92 = *(_QWORD *)(v91 + 16);
        if (v92)
        {
          swift_bridgeObjectRetain();
          v93 = (uint64_t *)(v91 + 40);
          do
          {
            v95 = *v93;
            if (*v93)
            {
              v96 = *(v93 - 1);
              swift_bridgeObjectRetain();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v90 = sub_1BCAF6A40(0, v90[2] + 1, 1, v90);
              v98 = v90[2];
              v97 = v90[3];
              if (v98 >= v97 >> 1)
                v90 = sub_1BCAF6A40((_QWORD *)(v97 > 1), v98 + 1, 1, v90);
              v90[2] = v98 + 1;
              v94 = &v90[2 * v98];
              v94[4] = v96;
              v94[5] = v95;
            }
            v93 += 2;
            --v92;
          }
          while (v92);
          swift_bridgeObjectRelease();
          v78 = v209;
        }
        swift_bridgeObjectRelease();
        sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA14180, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
        sub_1BCB0AA88();
        v205 = sub_1BCB640F4();
        v100 = v99;
        swift_bridgeObjectRelease();
        v101 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E10]), sel_init);
        if (v78 >> 62)
        {
          swift_bridgeObjectRetain();
          v102 = sub_1BCB648D4();
        }
        else
        {
          v102 = *(_QWORD *)((v78 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
        }
        v206 = v100;
        if (v102)
        {
          if (v102 < 1)
            goto LABEL_235;
          v103 = 0;
          v104 = v78 & 0xC000000000000001;
          do
          {
            if (v104)
              v105 = (id)MEMORY[0x1BCCFCF20](v103, v78);
            else
              v105 = *(id *)(v78 + 8 * v103 + 32);
            v106 = v105;
            if (objc_msgSend(v105, sel_meds_isRoutedDoseFormProduct))
            {
              v107 = objc_msgSend(v106, sel_meds_preferredNameForFirstObjectOfRelationshipType_, 982);
              if (v107)
              {
                v108 = v107;
                sub_1BCB6413C();

              }
              else
              {

              }
              v78 = v209;
            }
            else
            {

            }
            ++v103;
            sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA131B0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            objc_msgSend(v101, sel_addObject_, sub_1BCB64A24());
            swift_unknownObjectRelease();
          }
          while (v102 != v103);
        }
        swift_bridgeObjectRelease();
        v109 = objc_msgSend(v101, sel_array);
        v110 = sub_1BCB642D4();

        v111 = sub_1BCB522E4(v110);
        swift_bridgeObjectRelease();

        v112 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        if (v111)
          v113 = v111;
        else
          v113 = MEMORY[0x1E0DEE9D8];
        v114 = *(_QWORD *)(v113 + 16);
        if (v114)
        {
          swift_bridgeObjectRetain();
          v115 = (uint64_t *)(v113 + 40);
          do
          {
            v117 = *v115;
            if (*v115)
            {
              v118 = *(v115 - 1);
              swift_bridgeObjectRetain();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v112 = sub_1BCAF6A40(0, v112[2] + 1, 1, v112);
              v120 = v112[2];
              v119 = v112[3];
              if (v120 >= v119 >> 1)
                v112 = sub_1BCAF6A40((_QWORD *)(v119 > 1), v120 + 1, 1, v112);
              v112[2] = v120 + 1;
              v116 = &v112[2 * v120];
              v116[4] = v118;
              v116[5] = v117;
            }
            v115 += 2;
            --v114;
          }
          while (v114);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v121 = sub_1BCB640F4();
        v123 = v122;
        swift_bridgeObjectRelease();
        if (v205 == v121 && v206 == v123)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
LABEL_102:
          v10 = v198;
LABEL_103:
          v9 = v193 + 1;
          if (v193 + 1 == v192)
          {
            v9 = v192;
            break;
          }
          goto LABEL_104;
        }
        v124 = sub_1BCB649F4();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v124 & 1) == 0)
          goto LABEL_102;
        v10 = v198;
        if (!v198)
          goto LABEL_263;
        v9 = v202 - 1;
        v125 = v201 - 2;
        v76 = *v201;
        v126 = v201[1];
        v127 = v201[2];
        *(_OWORD *)v201 = *(_OWORD *)v199;
        v201[2] = v199[2];
        *v199 = v76;
        *v125 = v126;
        v125[1] = v127;
        if (v202 - 1 == v197)
          goto LABEL_103;
      }
    }
LABEL_170:
    if (v9 < v197)
      goto LABEL_254;
    v6 = v191;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v6 = sub_1BCB28D7C(0, *((_QWORD *)v191 + 2) + 1, 1, v191);
    v129 = *((_QWORD *)v6 + 2);
    v128 = *((_QWORD *)v6 + 3);
    v130 = v129 + 1;
    v10 = v198;
    if (v129 >= v128 >> 1)
    {
      v179 = sub_1BCB28D7C((char *)(v128 > 1), v129 + 1, 1, v6);
      v10 = v198;
      v6 = v179;
    }
    *((_QWORD *)v6 + 2) = v130;
    v131 = v6 + 32;
    v132 = &v6[16 * v129 + 32];
    *(_QWORD *)v132 = v197;
    *((_QWORD *)v132 + 1) = v9;
    if (v129)
    {
      while (1)
      {
        v133 = v130 - 1;
        if (v130 >= 4)
        {
          v138 = &v131[16 * v130];
          v139 = *((_QWORD *)v138 - 8);
          v140 = *((_QWORD *)v138 - 7);
          v144 = __OFSUB__(v140, v139);
          v141 = v140 - v139;
          if (v144)
            goto LABEL_240;
          v143 = *((_QWORD *)v138 - 6);
          v142 = *((_QWORD *)v138 - 5);
          v144 = __OFSUB__(v142, v143);
          v136 = v142 - v143;
          v137 = v144;
          if (v144)
            goto LABEL_241;
          v145 = v130 - 2;
          v146 = &v131[16 * v130 - 32];
          v148 = *(_QWORD *)v146;
          v147 = *((_QWORD *)v146 + 1);
          v144 = __OFSUB__(v147, v148);
          v149 = v147 - v148;
          if (v144)
            goto LABEL_243;
          v144 = __OFADD__(v136, v149);
          v150 = v136 + v149;
          if (v144)
            goto LABEL_246;
          if (v150 >= v141)
          {
            v168 = &v131[16 * v133];
            v170 = *(_QWORD *)v168;
            v169 = *((_QWORD *)v168 + 1);
            v144 = __OFSUB__(v169, v170);
            v171 = v169 - v170;
            if (v144)
              goto LABEL_252;
            v161 = v136 < v171;
            goto LABEL_207;
          }
        }
        else
        {
          if (v130 != 3)
          {
            v162 = *((_QWORD *)v6 + 4);
            v163 = *((_QWORD *)v6 + 5);
            v144 = __OFSUB__(v163, v162);
            v155 = v163 - v162;
            v156 = v144;
            goto LABEL_201;
          }
          v135 = *((_QWORD *)v6 + 4);
          v134 = *((_QWORD *)v6 + 5);
          v144 = __OFSUB__(v134, v135);
          v136 = v134 - v135;
          v137 = v144;
        }
        if ((v137 & 1) != 0)
          goto LABEL_242;
        v145 = v130 - 2;
        v151 = &v131[16 * v130 - 32];
        v153 = *(_QWORD *)v151;
        v152 = *((_QWORD *)v151 + 1);
        v154 = __OFSUB__(v152, v153);
        v155 = v152 - v153;
        v156 = v154;
        if (v154)
          goto LABEL_245;
        v157 = &v131[16 * v133];
        v159 = *(_QWORD *)v157;
        v158 = *((_QWORD *)v157 + 1);
        v144 = __OFSUB__(v158, v159);
        v160 = v158 - v159;
        if (v144)
          goto LABEL_248;
        if (__OFADD__(v155, v160))
          goto LABEL_249;
        if (v155 + v160 >= v136)
        {
          v161 = v136 < v160;
LABEL_207:
          if (v161)
            v133 = v145;
          goto LABEL_209;
        }
LABEL_201:
        if ((v156 & 1) != 0)
          goto LABEL_244;
        v164 = &v131[16 * v133];
        v166 = *(_QWORD *)v164;
        v165 = *((_QWORD *)v164 + 1);
        v144 = __OFSUB__(v165, v166);
        v167 = v165 - v166;
        if (v144)
          goto LABEL_247;
        if (v167 < v155)
          goto LABEL_218;
LABEL_209:
        v172 = v133 - 1;
        if (v133 - 1 >= v130)
          goto LABEL_236;
        if (!v10)
          goto LABEL_264;
        v173 = v6;
        v174 = &v131[16 * v172];
        v175 = *(_QWORD *)v174;
        v176 = &v131[16 * v133];
        v177 = *((_QWORD *)v176 + 1);
        sub_1BCB288D8((char *)(v10 + 24 * *(_QWORD *)v174), (char *)(v10 + 24 * *(_QWORD *)v176), v10 + 24 * v177, v195);
        if (v196)
          goto LABEL_232;
        if (v177 < v175)
          goto LABEL_237;
        if (v133 > *((_QWORD *)v173 + 2))
          goto LABEL_238;
        *(_QWORD *)v174 = v175;
        *(_QWORD *)&v131[16 * v172 + 8] = v177;
        v178 = *((_QWORD *)v173 + 2);
        if (v133 >= v178)
          goto LABEL_239;
        v6 = v173;
        v130 = v178 - 1;
        memmove(&v131[16 * v133], v176 + 16, 16 * (v178 - 1 - v133));
        *((_QWORD *)v173 + 2) = v178 - 1;
        v10 = v198;
        if (v178 <= 2)
          goto LABEL_218;
      }
    }
    v130 = 1;
LABEL_218:
    v11 = v194;
    if (v9 >= v194)
      goto LABEL_221;
  }
  while (1)
  {
    v18 = *(_QWORD *)(v10 + 24 * v9);
    v19 = *(_QWORD *)(v10 + 24 * v13);
    v20 = objc_allocWithZone(MEMORY[0x1E0C99E10]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = objc_msgSend(v20, sel_init);
    if (v18 >> 62)
    {
      swift_bridgeObjectRetain();
      v22 = sub_1BCB648D4();
    }
    else
    {
      v22 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    v208 = v19;
    v207 = v9;
    if (v22)
    {
      if (v22 < 1)
        goto LABEL_250;
      v23 = 0;
      do
      {
        if ((v18 & 0xC000000000000001) != 0)
          v24 = (id)MEMORY[0x1BCCFCF20](v23, v18);
        else
          v24 = *(id *)(v18 + 8 * v23 + 32);
        v25 = v24;
        if (objc_msgSend(v24, sel_meds_isRoutedDoseFormProduct)
          && (v26 = objc_msgSend(v25, sel_meds_preferredNameForFirstObjectOfRelationshipType_, 982)) != 0)
        {
          v27 = v26;
          sub_1BCB6413C();

        }
        else
        {

        }
        ++v23;
        sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA131B0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        objc_msgSend(v21, sel_addObject_, sub_1BCB64A24());
        swift_unknownObjectRelease();
      }
      while (v22 != v23);
    }
    swift_bridgeObjectRelease();
    v28 = objc_msgSend(v21, sel_array);
    v29 = sub_1BCB642D4();

    v30 = sub_1BCB522E4(v29);
    swift_bridgeObjectRelease();

    v31 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (v30)
      v32 = v30;
    else
      v32 = MEMORY[0x1E0DEE9D8];
    v33 = *(_QWORD *)(v32 + 16);
    if (v33)
    {
      swift_bridgeObjectRetain();
      v34 = (uint64_t *)(v32 + 40);
      do
      {
        v36 = *v34;
        if (*v34)
        {
          v37 = *(v34 - 1);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v31 = sub_1BCAF6A40(0, v31[2] + 1, 1, v31);
          v39 = v31[2];
          v38 = v31[3];
          if (v39 >= v38 >> 1)
            v31 = sub_1BCAF6A40((_QWORD *)(v38 > 1), v39 + 1, 1, v31);
          v31[2] = v39 + 1;
          v35 = &v31[2 * v39];
          v35[4] = v37;
          v35[5] = v36;
        }
        v34 += 2;
        --v33;
      }
      while (v33);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA14180, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BCB0AA88();
    v40 = sub_1BCB640F4();
    v204 = v41;
    swift_bridgeObjectRelease();
    v42 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E10]), sel_init);
    v43 = v208;
    if (v208 >> 62)
    {
      swift_bridgeObjectRetain();
      v44 = sub_1BCB648D4();
      v203 = v40;
      if (!v44)
        goto LABEL_62;
    }
    else
    {
      v44 = *(_QWORD *)((v208 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      v203 = v40;
      if (!v44)
        goto LABEL_62;
    }
    if (v44 < 1)
      goto LABEL_251;
    v45 = 0;
    do
    {
      if ((v208 & 0xC000000000000001) != 0)
        v46 = (id)MEMORY[0x1BCCFCF20](v45, v43);
      else
        v46 = *(id *)(v43 + 8 * v45 + 32);
      v47 = v46;
      if (objc_msgSend(v46, sel_meds_isRoutedDoseFormProduct))
      {
        v48 = objc_msgSend(v47, sel_meds_preferredNameForFirstObjectOfRelationshipType_, 982);
        if (v48)
        {
          v49 = v48;
          sub_1BCB6413C();

        }
        else
        {

        }
        v43 = v208;
      }
      else
      {

      }
      ++v45;
      sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA131B0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      objc_msgSend(v42, sel_addObject_, sub_1BCB64A24());
      swift_unknownObjectRelease();
    }
    while (v44 != v45);
LABEL_62:
    swift_bridgeObjectRelease();
    v50 = objc_msgSend(v42, sel_array);
    v51 = sub_1BCB642D4();

    v52 = sub_1BCB522E4(v51);
    swift_bridgeObjectRelease();

    v53 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (v52)
      v54 = v52;
    else
      v54 = MEMORY[0x1E0DEE9D8];
    v55 = *(_QWORD *)(v54 + 16);
    if (v55)
    {
      swift_bridgeObjectRetain();
      v56 = (uint64_t *)(v54 + 40);
      do
      {
        v58 = *v56;
        if (*v56)
        {
          v59 = *(v56 - 1);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v53 = sub_1BCAF6A40(0, v53[2] + 1, 1, v53);
          v61 = v53[2];
          v60 = v53[3];
          if (v61 >= v60 >> 1)
            v53 = sub_1BCAF6A40((_QWORD *)(v60 > 1), v61 + 1, 1, v53);
          v53[2] = v61 + 1;
          v57 = &v53[2 * v61];
          v57[4] = v59;
          v57[5] = v58;
        }
        v56 += 2;
        --v55;
      }
      while (v55);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v62 = sub_1BCB640F4();
    v64 = v63;
    swift_bridgeObjectRelease();
    if (v203 == v62 && v204 == v64)
      v65 = 0;
    else
      v65 = sub_1BCB649F4();
    v9 = v207;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (((v200 ^ v65) & 1) != 0)
      break;
    v13 = v207;
    v9 = v207 + 1;
    v10 = v198;
    if (v207 + 1 == v194)
    {
      v9 = v194;
      goto LABEL_82;
    }
  }
  v10 = v198;
  if ((v200 & 1) == 0)
    goto LABEL_92;
LABEL_85:
  v66 = v197;
  if (v9 >= v197)
  {
    if (v197 < v9)
    {
      v67 = 24 * v9;
      v68 = 24 * v197;
      v69 = v9;
      while (1)
      {
        if (v66 != --v69)
        {
          if (!v10)
            goto LABEL_265;
          v70 = v10 + v68;
          v71 = v10 + v67;
          v72 = *(_OWORD *)(v10 + v68);
          v73 = *(_QWORD *)(v10 + v68 + 16);
          v74 = *(_QWORD *)(v10 + v67 - 8);
          *(_OWORD *)v70 = *(_OWORD *)(v10 + v67 - 24);
          *(_QWORD *)(v70 + 16) = v74;
          *(_OWORD *)(v71 - 24) = v72;
          *(_QWORD *)(v71 - 8) = v73;
        }
        ++v66;
        v67 -= 24;
        v68 += 24;
        if (v66 >= v69)
          goto LABEL_92;
      }
    }
    goto LABEL_92;
  }
LABEL_262:
  __break(1u);
LABEL_263:
  __break(1u);
LABEL_264:
  __break(1u);
LABEL_265:
  __break(1u);
LABEL_266:
  __break(1u);
LABEL_267:
  result = sub_1BCB648A4();
  __break(1u);
  return result;
}

uint64_t sub_1BCB27978(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (result = sub_1BCB649F4(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

void sub_1BCB27A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v18;
  uint64_t v19;

  if (a3 != a2)
  {
    v4 = a3;
    v19 = *a4;
    v5 = *a4 + 8 * a3 - 8;
LABEL_5:
    v6 = *(void **)(v19 + 8 * v4);
    v7 = a1;
    v18 = v5;
    while (1)
    {
      v8 = *(void **)v5;
      v9 = v6;
      v10 = v8;
      v11 = objc_msgSend(v9, sel_identifier);
      v12 = objc_msgSend(v11, sel_rawIdentifier);

      v13 = objc_msgSend(v10, sel_identifier);
      v14 = objc_msgSend(v13, sel_rawIdentifier);

      if ((uint64_t)v12 >= (uint64_t)v14)
      {
LABEL_4:
        ++v4;
        v5 = v18 + 8;
        if (v4 == a2)
          return;
        goto LABEL_5;
      }
      if (!v19)
        break;
      v15 = *(void **)v5;
      v6 = *(void **)(v5 + 8);
      *(_QWORD *)v5 = v6;
      *(_QWORD *)(v5 + 8) = v15;
      v5 -= 8;
      if (v4 == ++v7)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t sub_1BCB27B78(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;

  v59 = result;
  if (a3 == a2)
    return result;
  v4 = *a4;
  v60 = *a4;
LABEL_6:
  v5 = *(_QWORD *)(v4 + 24 * a3);
  v58 = a3;
  while (1)
  {
    v63 = a3;
    v6 = (unint64_t *)(v4 + 24 * a3);
    v7 = *(v6 - 3);
    v8 = objc_allocWithZone(MEMORY[0x1E0C99E10]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v66 = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = objc_msgSend(v8, sel_init);
    v61 = v6 - 3;
    v62 = v6;
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      result = sub_1BCB648D4();
      v10 = result;
      if (!result)
        goto LABEL_20;
    }
    else
    {
      v10 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (!v10)
        goto LABEL_20;
    }
    if (v10 < 1)
      break;
    v11 = 0;
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
        v12 = (id)MEMORY[0x1BCCFCF20](v11, v5);
      else
        v12 = *(id *)(v5 + 8 * v11 + 32);
      v13 = v12;
      if (objc_msgSend(v12, sel_meds_isRoutedDoseFormProduct)
        && (v14 = objc_msgSend(v13, sel_meds_preferredNameForFirstObjectOfRelationshipType_, 982)) != 0)
      {
        v15 = v14;
        sub_1BCB6413C();

      }
      else
      {

      }
      ++v11;
      sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA131B0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      objc_msgSend(v9, sel_addObject_, sub_1BCB64A24());
      swift_unknownObjectRelease();
    }
    while (v10 != v11);
LABEL_20:
    swift_bridgeObjectRelease();
    v16 = objc_msgSend(v9, sel_array);
    v17 = sub_1BCB642D4();

    v18 = sub_1BCB522E4(v17);
    swift_bridgeObjectRelease();

    v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (v18)
      v20 = v18;
    else
      v20 = MEMORY[0x1E0DEE9D8];
    v21 = *(_QWORD *)(v20 + 16);
    if (v21)
    {
      swift_bridgeObjectRetain();
      v22 = (uint64_t *)(v20 + 40);
      do
      {
        v24 = *v22;
        if (*v22)
        {
          v25 = *(v22 - 1);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v19 = sub_1BCAF6A40(0, v19[2] + 1, 1, v19);
          v27 = v19[2];
          v26 = v19[3];
          if (v27 >= v26 >> 1)
            v19 = sub_1BCAF6A40((_QWORD *)(v26 > 1), v27 + 1, 1, v19);
          v19[2] = v27 + 1;
          v23 = &v19[2 * v27];
          v23[4] = v25;
          v23[5] = v24;
        }
        v22 += 2;
        --v21;
      }
      while (v21);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA14180, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BCB0AA88();
    v64 = sub_1BCB640F4();
    v65 = v28;
    swift_bridgeObjectRelease();
    v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E10]), sel_init);
    v30 = v66;
    if (v66 >> 62)
    {
      swift_bridgeObjectRetain();
      result = sub_1BCB648D4();
      v30 = v66;
      v31 = result;
      if (!result)
        goto LABEL_46;
    }
    else
    {
      v31 = *(_QWORD *)((v66 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (!v31)
        goto LABEL_46;
    }
    if (v31 < 1)
      goto LABEL_66;
    v32 = 0;
    v33 = v30 & 0xC000000000000001;
    do
    {
      if (v33)
        v34 = (id)MEMORY[0x1BCCFCF20](v32, v30);
      else
        v34 = *(id *)(v30 + 8 * v32 + 32);
      v35 = v34;
      if (objc_msgSend(v34, sel_meds_isRoutedDoseFormProduct)
        && (v36 = objc_msgSend(v35, sel_meds_preferredNameForFirstObjectOfRelationshipType_, 982)) != 0)
      {
        v37 = v36;
        sub_1BCB6413C();

      }
      else
      {

      }
      ++v32;
      sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA131B0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      objc_msgSend(v29, sel_addObject_, sub_1BCB64A24());
      swift_unknownObjectRelease();
      v30 = v66;
    }
    while (v31 != v32);
LABEL_46:
    swift_bridgeObjectRelease();
    v38 = objc_msgSend(v29, sel_array);
    v39 = sub_1BCB642D4();

    v40 = sub_1BCB522E4(v39);
    swift_bridgeObjectRelease();

    v41 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (v40)
      v42 = v40;
    else
      v42 = MEMORY[0x1E0DEE9D8];
    v43 = *(_QWORD *)(v42 + 16);
    if (v43)
    {
      swift_bridgeObjectRetain();
      v44 = (uint64_t *)(v42 + 40);
      do
      {
        v46 = *v44;
        if (*v44)
        {
          v47 = *(v44 - 1);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v41 = sub_1BCAF6A40(0, v41[2] + 1, 1, v41);
          v49 = v41[2];
          v48 = v41[3];
          if (v49 >= v48 >> 1)
            v41 = sub_1BCAF6A40((_QWORD *)(v48 > 1), v49 + 1, 1, v41);
          v41[2] = v49 + 1;
          v45 = &v41[2 * v49];
          v45[4] = v47;
          v45[5] = v46;
        }
        v44 += 2;
        --v43;
      }
      while (v43);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v50 = sub_1BCB640F4();
    v52 = v51;
    swift_bridgeObjectRelease();
    v4 = v60;
    if (v64 == v50 && v65 == v52)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease_n();
LABEL_5:
      a3 = v58 + 1;
      if (v58 + 1 == a2)
        return result;
      goto LABEL_6;
    }
    v53 = sub_1BCB649F4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v53 & 1) != 0)
    {
      if (!v60)
        goto LABEL_67;
      a3 = v63 - 1;
      v54 = v62 - 2;
      v5 = *v62;
      v55 = v62[1];
      v56 = v62[2];
      *(_OWORD *)v62 = *(_OWORD *)v61;
      v62[2] = v61[2];
      *v61 = v5;
      *v54 = v55;
      v54[1] = v56;
      if (v63 - 1 != v59)
        continue;
    }
    goto LABEL_5;
  }
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
  return result;
}

uint64_t sub_1BCB28284(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v17 = &v4[16 * v13];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (char *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 16;
          v21 = *((_QWORD *)v19 - 2);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 16;
          v23 = *((_QWORD *)v17 - 2) == v21 && *((_QWORD *)v17 - 1) == v22;
          if (v23 || (sub_1BCB649F4() & 1) == 0)
          {
            v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            v19 = v6;
            v17 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_OWORD *)v18 = *(_OWORD *)v19;
            v27 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 16;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (sub_1BCB649F4() & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_50:
    sub_1BCB28E80((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = sub_1BCB64910();
  __break(1u);
  return result;
}

uint64_t sub_1BCB2851C(id *__src, id *a2, unint64_t a3, void **a4)
{
  id *v4;
  id *v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void **v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id *v21;
  void **v22;
  char *v23;
  id *v24;
  id *v25;
  char *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t result;
  id *v35;
  unint64_t v37;
  char *v38;
  id *v39;
  char *v41;
  void **v42;
  id *v43;

  v4 = a2;
  v5 = __src;
  v6 = (char *)a2 - (char *)__src;
  v7 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v7 = (char *)a2 - (char *)__src;
  v8 = v7 >> 3;
  v9 = a3 - (_QWORD)a2;
  v10 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v10 = a3 - (_QWORD)a2;
  v11 = v10 >> 3;
  v43 = __src;
  v42 = a4;
  if (v8 >= v10 >> 3)
  {
    if (v9 < -7)
      goto LABEL_46;
    if (a4 != a2 || &a2[v11] <= a4)
      memmove(a4, a2, 8 * v11);
    v23 = (char *)&a4[v11];
    v41 = v23;
    v43 = v4;
    if (v5 >= v4 || v9 < 8)
      goto LABEL_45;
    v24 = (id *)(a3 - 8);
    v25 = v4;
    v35 = v5;
    while (1)
    {
      v37 = (unint64_t)v23;
      v39 = v24 + 1;
      v26 = v23 - 8;
      v27 = *--v25;
      v28 = *((id *)v23 - 1);
      v29 = v27;
      v30 = objc_msgSend(v28, sel_identifier);
      v31 = objc_msgSend(v30, sel_rawIdentifier);

      v32 = objc_msgSend(v29, sel_identifier);
      v33 = objc_msgSend(v32, sel_rawIdentifier);

      if ((uint64_t)v31 < (uint64_t)v33)
        break;
      v41 = v26;
      if ((unint64_t)v39 < v37 || (unint64_t)v24 >= v37)
      {
        *v24 = *(id *)v26;
        v25 = v4;
        v23 = v26;
        goto LABEL_43;
      }
      if (v39 != (id *)v37)
        *v24 = *(id *)v26;
      v25 = v4;
      v23 = v26;
      if (v4 <= v35)
        goto LABEL_45;
LABEL_44:
      --v24;
      v4 = v25;
      if (v23 <= (char *)a4)
        goto LABEL_45;
    }
    v23 = (char *)v37;
    if (v39 != v4 || v24 >= v4)
      *v24 = *v25;
    v43 = v25;
LABEL_43:
    if (v25 <= v35)
      goto LABEL_45;
    goto LABEL_44;
  }
  if (v6 >= -7)
  {
    if (a4 != __src || &__src[v8] <= a4)
      memmove(a4, __src, 8 * v8);
    v38 = (char *)&a4[v8];
    v41 = v38;
    if ((unint64_t)v4 < a3 && v6 >= 8)
    {
      v12 = a4;
      do
      {
        v13 = v5;
        v14 = *v12;
        v15 = *v4;
        v16 = v14;
        v17 = objc_msgSend(v15, sel_identifier);
        v18 = objc_msgSend(v17, sel_rawIdentifier);

        v19 = objc_msgSend(v16, sel_identifier);
        v20 = objc_msgSend(v19, sel_rawIdentifier);

        if ((uint64_t)v18 >= (uint64_t)v20)
        {
          v22 = v13;
          if (v13 != v12)
            *v13 = *v12;
          v42 = ++v12;
          v21 = v4;
        }
        else
        {
          v21 = v4 + 1;
          v22 = v13;
          if (v13 < v4 || v13 >= v21 || v13 != v4)
            *v13 = *v4;
        }
        v5 = v22 + 1;
        if (v12 >= (void **)v38)
          break;
        v4 = v21;
      }
      while ((unint64_t)v21 < a3);
      v43 = v5;
    }
LABEL_45:
    sub_1BCB28F28((void **)&v43, (const void **)&v42, &v41);
    return 1;
  }
LABEL_46:
  result = sub_1BCB64910();
  __break(1u);
  return result;
}

uint64_t sub_1BCB288D8(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  uint64_t result;
  char *v35;
  char *v36;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;

  v4 = __dst;
  v5 = __src;
  v6 = a2 - __src;
  v7 = (a2 - __src) / 24;
  v8 = a3 - (_QWORD)a2;
  v9 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  v44 = __src;
  v43 = __dst;
  if (v7 >= v9)
  {
    if (v8 >= -23)
    {
      if (__dst != a2 || &a2[24 * v9] <= __dst)
      {
        v20 = a2;
        memmove(__dst, a2, 24 * v9);
        a2 = v20;
      }
      v21 = &v4[24 * v9];
      v42 = v21;
      v44 = a2;
      if (v5 < a2 && v8 >= 24)
      {
        v22 = a3 - 24;
        v23 = a2;
        v35 = v4;
        v39 = v5;
        do
        {
          v38 = v21;
          v24 = v21 - 24;
          v23 -= 24;
          v41 = a2;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v25 = MedicationRouteFormConcept.displayString.getter();
          v27 = v26;
          if (v25 == MedicationRouteFormConcept.displayString.getter() && v27 == v28)
            v29 = 0;
          else
            v29 = sub_1BCB649F4();
          v30 = (char *)(v22 + 24);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v29 & 1) != 0)
          {
            v31 = v35;
            v21 = v38;
            if (v30 != v41 || v22 >= (unint64_t)v41)
            {
              v32 = *(_OWORD *)v23;
              *(_QWORD *)(v22 + 16) = *((_QWORD *)v23 + 2);
              *(_OWORD *)v22 = v32;
            }
            v44 = v23;
          }
          else
          {
            v42 = v24;
            v31 = v35;
            v23 = v41;
            if (v30 < v38 || v22 >= (unint64_t)v38 || v30 != v38)
            {
              v33 = *(_OWORD *)v24;
              *(_QWORD *)(v22 + 16) = *((_QWORD *)v24 + 2);
              *(_OWORD *)v22 = v33;
            }
            v21 = v24;
          }
          if (v23 <= v39)
            break;
          v22 -= 24;
          a2 = v23;
        }
        while (v21 > v31);
      }
LABEL_45:
      sub_1BCB28FD0((void **)&v44, (const void **)&v43, &v42);
      return 1;
    }
  }
  else if (v6 >= -23)
  {
    if (__dst != __src || &__src[24 * v7] <= __dst)
    {
      v10 = a2;
      memmove(__dst, __src, 24 * v7);
      a2 = v10;
    }
    v36 = &v4[24 * v7];
    v42 = v36;
    if ((unint64_t)a2 < a3 && v6 >= 24)
    {
      while (1)
      {
        v40 = a2;
        v11 = v4;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v12 = MedicationRouteFormConcept.displayString.getter();
        v14 = v13;
        if (v12 == MedicationRouteFormConcept.displayString.getter() && v14 == v15)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v16 = sub_1BCB649F4();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v16 & 1) != 0)
          {
            v17 = v40 + 24;
            if (v5 < v40 || v5 >= v17 || v5 != v40)
            {
              v18 = *(_OWORD *)v40;
              *((_QWORD *)v5 + 2) = *((_QWORD *)v40 + 2);
              *(_OWORD *)v5 = v18;
            }
            goto LABEL_19;
          }
        }
        if (v5 != v4)
        {
          v19 = *(_OWORD *)v4;
          *((_QWORD *)v5 + 2) = *((_QWORD *)v4 + 2);
          *(_OWORD *)v5 = v19;
        }
        v4 += 24;
        v43 = v11 + 24;
        v17 = v40;
LABEL_19:
        v5 += 24;
        if (v4 < v36)
        {
          a2 = v17;
          if ((unint64_t)v17 < a3)
            continue;
        }
        v44 = v5;
        goto LABEL_45;
      }
    }
    goto LABEL_45;
  }
  result = sub_1BCB64910();
  __break(1u);
  return result;
}

char *sub_1BCB28D7C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1BCAF8248(0, &qword_1EF487C28, (void (*)(uint64_t))sub_1BCB2BDC0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1BCB28E80(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)sub_1BCB64910();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_1BCB28F28(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)sub_1BCB64910();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_1BCB28FD0(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -24)
  {
    result = (char *)sub_1BCB64910();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
      return (char *)memmove(result, v3, 24 * v6);
  }
  return result;
}

char *sub_1BCB2908C(uint64_t a1)
{
  return sub_1BCB28D7C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1BCB290A0(uint64_t a1, char a2)
{
  return sub_1BCB2A054(a1, a2, &qword_1EDA144B8, (unint64_t *)&qword_1EDA144A8);
}

unint64_t sub_1BCB290BC(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;

  v3 = v2;
  v5 = *v2;
  sub_1BCB2BF5C();
  v6 = (_QWORD *)sub_1BCB648EC();
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v8 = (_QWORD *)(v5 + 64);
    v9 = -1;
    if (v7 < 64)
      v9 = ~(-1 << v7);
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v11 = (unint64_t)(v7 + 63) >> 6;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v15 = v14 | (v13 << 6);
      }
      else
      {
        v16 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v16 >= v11)
          goto LABEL_22;
        v17 = v8[v16];
        ++v13;
        if (!v17)
        {
          v13 = v16 + 1;
          if (v16 + 1 >= v11)
            goto LABEL_22;
          v17 = v8[v13];
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v11)
            {
LABEL_22:
              swift_release();
              if ((a2 & 1) != 0)
              {
                v23 = 1 << *(_BYTE *)(v5 + 32);
                if (v23 > 63)
                  bzero((void *)(v5 + 64), ((unint64_t)(v23 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v23;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                v13 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_29;
                if (v13 >= v11)
                  goto LABEL_22;
                v17 = v8[v13];
                ++v18;
                if (v17)
                  goto LABEL_19;
              }
            }
            v13 = v18;
          }
        }
LABEL_19:
        v10 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v13 << 6);
      }
      v19 = 8 * v15;
      v20 = *(void **)(*(_QWORD *)(v5 + 48) + v19);
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v19);
      if ((a2 & 1) == 0)
      {
        v22 = v20;
        swift_bridgeObjectRetain();
      }
      result = sub_1BCB2A8A0(v20, v21, v6);
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t sub_1BCB292A0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  sub_1BCB10BBC(0, &qword_1EF4879A0);
  v37 = a2;
  v6 = sub_1BCB648EC();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1BCB64A90();
    sub_1BCB641CC();
    result = sub_1BCB64AC0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1BCB295B4(uint64_t a1, char a2)
{
  return sub_1BCB2A054(a1, a2, (unint64_t *)&qword_1EF487988, (unint64_t *)&qword_1EDA139E0);
}

uint64_t sub_1BCB295D0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char v44;
  int64_t v45;

  v3 = v2;
  v5 = *v2;
  sub_1BCB2BE1C();
  v44 = a2;
  v6 = sub_1BCB648EC();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_51;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v42 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v40 = v2;
  v41 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  v43 = v5;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_53;
    if (v18 >= v41)
      break;
    v19 = v42;
    v20 = v42[v18];
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v41)
        goto LABEL_44;
      v20 = v42[v13];
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v41)
        {
LABEL_44:
          swift_release();
          v3 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_51;
          goto LABEL_47;
        }
        v20 = v42[v21];
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_54;
            if (v13 >= v41)
              goto LABEL_44;
            v20 = v42[v13];
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v13 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    v22 = (unint64_t *)(*(_QWORD *)(v5 + 48) + 24 * v17);
    v24 = *v22;
    v23 = v22[1];
    v25 = v22[2];
    v26 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
    if ((v44 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1BCB64A90();
    v45 = v13;
    if (v24 >> 62)
    {
      swift_bridgeObjectRetain_n();
      sub_1BCB648D4();
      swift_bridgeObjectRelease();
      sub_1BCB64A9C();
      swift_bridgeObjectRetain();
      v27 = sub_1BCB648D4();
      result = swift_bridgeObjectRelease();
      if (!v27)
        goto LABEL_33;
    }
    else
    {
      swift_bridgeObjectRetain();
      result = sub_1BCB64A9C();
      v27 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v27)
        goto LABEL_33;
    }
    if (v27 < 1)
    {
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
      return result;
    }
    if ((v24 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v27; ++i)
      {
        MEMORY[0x1BCCFCF20](i, v24);
        sub_1BCB64604();
        swift_unknownObjectRelease();
      }
    }
    else
    {
      v29 = 0;
      do
      {
        v30 = *(void **)(v24 + 8 * v29++ + 32);
        v31 = v30;
        sub_1BCB64604();

      }
      while (v27 != v29);
    }
LABEL_33:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1BCB641CC();
    swift_bridgeObjectRelease();
    result = sub_1BCB64AC0();
    v32 = -1 << *(_BYTE *)(v7 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v11 + 8 * (v33 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v11 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_52;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v11 + 8 * v34);
      }
      while (v38 == -1);
      v14 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (unint64_t *)(*(_QWORD *)(v7 + 48) + 24 * v14);
    *v15 = v24;
    v15[1] = v23;
    v15[2] = v25;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14) = v26;
    ++*(_QWORD *)(v7 + 16);
    v5 = v43;
    v13 = v45;
  }
  swift_release();
  v3 = v40;
  v19 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_51;
LABEL_47:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v19, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_51:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1BCB29A14(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;

  v3 = v2;
  v5 = *v2;
  sub_1BCB2BC60();
  v6 = sub_1BCB648EC();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_42;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      return result;
    }
    if (v18 >= v36)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v37 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v36)
        goto LABEL_35;
      v20 = *(_QWORD *)(v37 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v36)
        {
LABEL_35:
          swift_release();
          v3 = v35;
          if ((a2 & 1) == 0)
            goto LABEL_42;
          goto LABEL_38;
        }
        v20 = *(_QWORD *)(v37 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_44;
            if (v13 >= v36)
              goto LABEL_35;
            v20 = *(_QWORD *)(v37 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v13 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    v22 = 8 * v17;
    v23 = *(void **)(*(_QWORD *)(v5 + 48) + v22);
    v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
    if ((a2 & 1) == 0)
    {
      v25 = v23;
      swift_bridgeObjectRetain();
    }
    sub_1BCB64A90();
    sub_1BCB64AA8();
    if (v23)
    {
      v26 = v23;
      sub_1BCB64604();

    }
    result = sub_1BCB64AC0();
    v27 = -1 << *(_BYTE *)(v7 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v11 + 8 * (v28 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v11 + 8 * v29);
      }
      while (v33 == -1);
      v14 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = 8 * v14;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v15) = v23;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v15) = v24;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v19 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_42;
LABEL_38:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v19, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_42:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1BCB29D28(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  _OWORD v36[2];

  v3 = v2;
  v5 = *v2;
  sub_1BCB10BBC(0, (unint64_t *)&qword_1EF487990);
  v6 = a2;
  v7 = sub_1BCB648EC();
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v35 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v19 >= v34)
          goto LABEL_34;
        v20 = v35[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v34)
            goto LABEL_34;
          v20 = v35[v14];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v34)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((v6 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v35[v21];
            if (!v20)
            {
              while (1)
              {
                v14 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_41;
                if (v14 >= v34)
                  goto LABEL_34;
                v20 = v35[v14];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v14 = v21;
          }
        }
LABEL_21:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v24 = *v22;
      v23 = v22[1];
      v25 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      if ((v6 & 1) != 0)
      {
        sub_1BCB0537C(v25, v36);
      }
      else
      {
        sub_1BCB053D0((uint64_t)v25, (uint64_t)v36);
        swift_bridgeObjectRetain();
      }
      sub_1BCB64A90();
      sub_1BCB641CC();
      result = sub_1BCB64AC0();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
      *v16 = v24;
      v16[1] = v23;
      result = (uint64_t)sub_1BCB0537C(v36, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_1BCB2A038(uint64_t a1, char a2)
{
  return sub_1BCB2A054(a1, a2, (unint64_t *)&unk_1EDA13DA8, &qword_1EDA13D48);
}

uint64_t sub_1BCB2A054(uint64_t a1, char a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;

  v5 = v4;
  v7 = *v4;
  sub_1BCB10578(0, a3, a4);
  v40 = a2;
  v8 = sub_1BCB648EC();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_40;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v39 = v7 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v7 + 64);
  v37 = v4;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_31;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v38)
      break;
    v24 = (_QWORD *)(v7 + 64);
    v25 = *(_QWORD *)(v39 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v38)
        goto LABEL_33;
      v25 = *(_QWORD *)(v39 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_33:
          swift_release();
          v5 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v15 >= v38)
              goto LABEL_33;
            v25 = *(_QWORD *)(v39 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v15 = v26;
      }
    }
LABEL_30:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_31:
    v31 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(void **)(*(_QWORD *)(v7 + 56) + 8 * v22);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v35 = v34;
    }
    sub_1BCB64A90();
    sub_1BCB641CC();
    result = sub_1BCB64AC0();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release();
  v5 = v37;
  v24 = (_QWORD *)(v7 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v36 = 1 << *(_BYTE *)(v7 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v5 = v9;
  return result;
}

uint64_t sub_1BCB2A368(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;

  v3 = v2;
  sub_1BCB10A58();
  v32 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  sub_1BCB10ACC();
  v9 = a2;
  v33 = (_QWORD *)sub_1BCB648EC();
  if (*(_QWORD *)(v8 + 16))
  {
    v10 = 1 << *(_BYTE *)(v8 + 32);
    v11 = *(_QWORD *)(v8 + 64);
    v30 = v2;
    v31 = (_QWORD *)(v8 + 64);
    v12 = -1;
    if (v10 < 64)
      v12 = ~(-1 << v10);
    v13 = v12 & v11;
    v14 = (unint64_t)(v10 + 63) >> 6;
    result = swift_retain();
    v16 = 0;
    while (1)
    {
      if (v13)
      {
        v17 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v18 = v17 | (v16 << 6);
      }
      else
      {
        v19 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return result;
        }
        v20 = v31;
        if (v19 >= v14)
          goto LABEL_23;
        v21 = v31[v19];
        ++v16;
        if (!v21)
        {
          v16 = v19 + 1;
          if (v19 + 1 >= v14)
            goto LABEL_23;
          v21 = v31[v16];
          if (!v21)
          {
            v22 = v19 + 2;
            if (v22 >= v14)
            {
LABEL_23:
              swift_release();
              if ((v9 & 1) == 0)
              {
                result = swift_release();
                v3 = v30;
                goto LABEL_30;
              }
              v29 = 1 << *(_BYTE *)(v8 + 32);
              if (v29 >= 64)
                bzero(v20, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v20 = -1 << v29;
              v3 = v30;
              *(_QWORD *)(v8 + 16) = 0;
              break;
            }
            v21 = v31[v22];
            if (!v21)
            {
              while (1)
              {
                v16 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_32;
                if (v16 >= v14)
                  goto LABEL_23;
                v21 = v31[v16];
                ++v22;
                if (v21)
                  goto LABEL_20;
              }
            }
            v16 = v22;
          }
        }
LABEL_20:
        v13 = (v21 - 1) & v21;
        v18 = __clz(__rbit64(v21)) + (v16 << 6);
      }
      v23 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 32 * v18);
      v25 = *v23;
      v24 = v23[1];
      v27 = v23[2];
      v26 = v23[3];
      v28 = *(_QWORD *)(v8 + 56) + *(_QWORD *)(v32 + 72) * v18;
      if ((v9 & 1) != 0)
      {
        sub_1BCAFC5D0(v28, (uint64_t)v7);
      }
      else
      {
        sub_1BCB10B78(v28, (uint64_t)v7);
        swift_bridgeObjectRetain();
        sub_1BCAFC5BC(v27, v26);
      }
      result = sub_1BCB2AA00(v25, v24, v27, v26, (uint64_t)v7, v33);
    }
  }
  result = swift_release();
LABEL_30:
  *v3 = v33;
  return result;
}

uint64_t sub_1BCB2A5E0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;

  v3 = v2;
  v5 = *v2;
  sub_1BCB109C0();
  result = sub_1BCB648EC();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v30 = a2;
    v8 = 0;
    v31 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v12)
          goto LABEL_31;
        v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_31;
          v18 = v31[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v31 = -1 << v29;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_40;
                if (v8 >= v12)
                  goto LABEL_31;
                v18 = v31[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
      v21 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v16);
      sub_1BCB64A90();
      sub_1BCB64A9C();
      result = sub_1BCB64AC0();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v20;
      *(_BYTE *)(*(_QWORD *)(v7 + 56) + v14) = v21;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

unint64_t sub_1BCB2A8A0(void *a1, uint64_t a2, _QWORD *a3)
{
  id v6;
  id v7;
  unint64_t v8;
  id v9;
  void *v10;
  unint64_t result;
  uint64_t v12;
  _BYTE v13[72];

  sub_1BCB64A90();
  if (a1)
  {
    sub_1BCB64AA8();
    v6 = a1;
    v7 = objc_msgSend(v6, sel_ingredientProducts);
    sub_1BCAFC2E0(0, (unint64_t *)&qword_1EF487748);
    v8 = sub_1BCB642D4();

    sub_1BCB2B27C((uint64_t)v13, v8);
    swift_bridgeObjectRelease();
    v9 = objc_msgSend(v6, sel_tradeNameProduct);
    if (v9)
    {
      v10 = v9;
      sub_1BCB64604();

    }
    else
    {

    }
  }
  else
  {
    sub_1BCB64AA8();
  }
  sub_1BCB64AC0();
  result = sub_1BCB646DC();
  *(_QWORD *)((char *)a3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
  v12 = 8 * result;
  *(_QWORD *)(a3[6] + v12) = a1;
  *(_QWORD *)(a3[7] + v12) = a2;
  ++a3[2];
  return result;
}

uint64_t sub_1BCB2AA00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  sub_1BCB64A90();
  swift_bridgeObjectRetain();
  sub_1BCB641CC();
  swift_bridgeObjectRelease();
  if (a4 == 1)
  {
    sub_1BCB64A9C();
  }
  else
  {
    sub_1BCB64A9C();
    sub_1BCB64AA8();
    if (a4)
    {
      swift_bridgeObjectRetain();
      sub_1BCB641CC();
      v12 = a3;
      v13 = a4;
    }
    else
    {
      v12 = a3;
      v13 = 0;
    }
    sub_1BCB10A44(v12, v13);
  }
  sub_1BCB64AC0();
  v14 = sub_1BCB646DC();
  *(_QWORD *)((char *)a6 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v14;
  v15 = (_QWORD *)(a6[6] + 32 * v14);
  *v15 = a1;
  v15[1] = a2;
  v15[2] = a3;
  v15[3] = a4;
  v16 = a6[7];
  sub_1BCB10A58();
  result = sub_1BCAFC5D0(a5, v16 + *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72) * v14);
  ++a6[2];
  return result;
}

_QWORD *sub_1BCB2AB68(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_39:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v10 = a2;
  v22 = -1 << *(_BYTE *)(a4 + 32);
  v23 = result;
  v11 = 0;
  v12 = 0;
  v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v15 = v14 | (v11 << 6);
  while (1)
  {
    ++v12;
    v19 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 24 * v15);
    v20 = v19[1];
    v21 = v19[2];
    *v10 = *v19;
    v10[1] = v20;
    v10[2] = v21;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v10 += 3;
    swift_bridgeObjectRetain();
    result = (_QWORD *)swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_8;
LABEL_9:
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v16 >= v13)
      goto LABEL_33;
    v17 = *(_QWORD *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        v8 = 0;
        v11 = v16;
      }
      else
      {
        v17 = *(_QWORD *)(v5 + 8 * v11);
        if (v17)
          goto LABEL_14;
        v18 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_33;
        v17 = *(_QWORD *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          v16 = v18;
          goto LABEL_18;
        }
        v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          v17 = *(_QWORD *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            v16 = v11;
            goto LABEL_18;
          }
          v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            v8 = 0;
            goto LABEL_37;
          }
          v17 = *(_QWORD *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              v16 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_42;
              if (v16 >= v13)
              {
                v8 = 0;
                v11 = v13 - 1;
                goto LABEL_37;
              }
              v17 = *(_QWORD *)(v5 + 8 * v16);
              ++v18;
              if (v17)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v8 = 0;
        v11 = v16 + 2;
      }
LABEL_37:
      v9 = v12;
LABEL_38:
      v6 = v22;
      result = v23;
      goto LABEL_39;
    }
LABEL_18:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_1BCB2AD84(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, unint64_t *a7)
{
  uint64_t v7;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  int64_t v30;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;

  v7 = a4;
  v9 = a2;
  v29 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    sub_1BCB646F4();
    sub_1BCAFC2E0(0, a5);
    sub_1BCB2BB50(a7, a5);
    result = (_QWORD *)sub_1BCB6443C();
    v7 = v33;
    v12 = v34;
    v13 = v35;
    v14 = v36;
    v15 = v37;
    if (v9)
      goto LABEL_3;
LABEL_36:
    v16 = 0;
    goto LABEL_38;
  }
  v14 = 0;
  v24 = -1 << *(_BYTE *)(a4 + 32);
  v12 = a4 + 56;
  v13 = ~v24;
  v25 = -v24;
  if (v25 < 64)
    v26 = ~(-1 << v25);
  else
    v26 = -1;
  v15 = v26 & *(_QWORD *)(a4 + 56);
  if (!a2)
    goto LABEL_36;
LABEL_3:
  if (!a3)
  {
    v16 = 0;
LABEL_38:
    v27 = v29;
LABEL_41:
    *v27 = v7;
    v27[1] = v12;
    v27[2] = v13;
    v27[3] = v14;
    v27[4] = v15;
    return (_QWORD *)v16;
  }
  if (a3 < 0)
    goto LABEL_48;
  v16 = 0;
  v30 = (unint64_t)(v13 + 64) >> 6;
  v28 = v13;
  while (1)
  {
    if (v7 < 0)
    {
      if (!sub_1BCB64748())
        goto LABEL_40;
      sub_1BCAFC2E0(0, a5);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v19 = v32;
      result = (_QWORD *)swift_unknownObjectRelease();
      if (!v32)
        goto LABEL_40;
      goto LABEL_8;
    }
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v14 << 6);
      goto LABEL_7;
    }
    v20 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v20 >= v30)
    {
      v15 = 0;
      goto LABEL_40;
    }
    v21 = *(_QWORD *)(v12 + 8 * v20);
    if (v21)
      goto LABEL_23;
    v22 = v14 + 2;
    if (v14 + 2 >= v30)
    {
      v15 = 0;
      ++v14;
      goto LABEL_40;
    }
    v21 = *(_QWORD *)(v12 + 8 * v22);
    if (!v21)
    {
      if (v14 + 3 >= v30)
        goto LABEL_44;
      v21 = *(_QWORD *)(v12 + 8 * (v14 + 3));
      if (v21)
      {
        v20 = v14 + 3;
        goto LABEL_23;
      }
      v22 = v14 + 4;
      if (v14 + 4 >= v30)
      {
        v15 = 0;
        v14 += 3;
        goto LABEL_40;
      }
      v21 = *(_QWORD *)(v12 + 8 * v22);
      if (!v21)
      {
        v20 = v14 + 5;
        if (v14 + 5 >= v30)
        {
LABEL_44:
          v15 = 0;
          v14 = v22;
          goto LABEL_40;
        }
        v21 = *(_QWORD *)(v12 + 8 * v20);
        if (!v21)
        {
          v23 = v14 + 6;
          while (v30 != v23)
          {
            v21 = *(_QWORD *)(v12 + 8 * v23++);
            if (v21)
            {
              v20 = v23 - 1;
              goto LABEL_23;
            }
          }
          v15 = 0;
          v14 = v30 - 1;
          goto LABEL_40;
        }
        goto LABEL_23;
      }
    }
    v20 = v22;
LABEL_23:
    v15 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v20 << 6);
    v14 = v20;
LABEL_7:
    result = *(id *)(*(_QWORD *)(v7 + 48) + 8 * v18);
    v19 = result;
    if (!result)
      goto LABEL_40;
LABEL_8:
    ++v16;
    *v9++ = v19;
    if (v16 == a3)
    {
      v16 = a3;
LABEL_40:
      v13 = v28;
      v27 = v29;
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_1BCB2B07C(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_1BCB2B27C(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  void **v5;
  void *v6;
  id v7;

  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1BCB648D4();
    swift_bridgeObjectRelease();
    sub_1BCB64A9C();
    swift_bridgeObjectRetain();
    v3 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
    if (!v3)
      return;
  }
  else
  {
    sub_1BCB64A9C();
    v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3)
      return;
  }
  if (v3 < 1)
  {
    __break(1u);
  }
  else if ((a2 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v3; ++i)
    {
      MEMORY[0x1BCCFCF20](i, a2);
      sub_1BCB64604();
      swift_unknownObjectRelease();
    }
  }
  else
  {
    v5 = (void **)(a2 + 32);
    do
    {
      v6 = *v5++;
      v7 = v6;
      sub_1BCB64604();

      --v3;
    }
    while (v3);
  }
}

uint64_t sub_1BCB2B390(uint64_t a1)
{
  return sub_1BCB248C8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1BCB2B3A4(uint64_t a1)
{
  return sub_1BCB24C30(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void sub_1BCB2B3B8()
{
  JUMPOUT(0x1BCCFD118);
}

uint64_t sub_1BCB2B3CC(uint64_t a1)
{
  return sub_1BCB250E4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t _s27HealthMedicationsExperience21MedicationGroupingKeyV2eeoiySbAC_ACtFZ_0(id *a1, void **a2)
{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  char v12;

  v2 = *a1;
  v3 = *a2;
  v4 = objc_msgSend(*a1, sel_ingredientProducts);
  sub_1BCAFC2E0(0, (unint64_t *)&qword_1EF487748);
  v5 = sub_1BCB642D4();

  v6 = objc_msgSend(v3, sel_ingredientProducts);
  v7 = sub_1BCB642D4();

  LOBYTE(v6) = sub_1BCB21794(v5, v7, (uint64_t)&qword_1EF487748);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    v8 = objc_msgSend(v2, sel_tradeNameProduct);
    v9 = objc_msgSend(v3, sel_tradeNameProduct);
    v10 = v9;
    if (v8)
    {
      if (!v9)
      {
        v12 = 0;
        goto LABEL_10;
      }
      v11 = v8;
      v12 = sub_1BCB645F8();

    }
    else
    {
      if (!v9)
      {
        v12 = 1;
        return v12 & 1;
      }
      v12 = 0;
    }
    v8 = v10;
LABEL_10:

    return v12 & 1;
  }
  v12 = 0;
  return v12 & 1;
}

uint64_t sub_1BCB2B548(unint64_t a1, void *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  char v23;
  void *v24;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;

  v3 = a1;
  if (a1 >> 62)
  {
LABEL_35:
    swift_bridgeObjectRetain();
    v4 = sub_1BCB648D4();
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      v26 = v4;
      v27 = a2;
      v28 = v3 & 0xC000000000000001;
      v5 = 4;
      while (1)
      {
        v6 = v5 - 4;
        if (v28)
        {
          v7 = (id)MEMORY[0x1BCCFCF20](v5 - 4, v3);
          v8 = v5 - 3;
          if (__OFADD__(v6, 1))
            goto LABEL_34;
        }
        else
        {
          v7 = *(id *)(v3 + 8 * v5);
          v8 = v5 - 3;
          if (__OFADD__(v6, 1))
          {
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
        }
        v29 = v8;
        v9 = v7;
        v10 = objc_msgSend(v9, sel_routedDoseFormProducts);
        sub_1BCAFC2E0(0, (unint64_t *)&qword_1EF487748);
        v11 = sub_1BCB642D4();

        if (v11 >> 62)
        {
          swift_bridgeObjectRetain();
          v12 = sub_1BCB648D4();
          swift_bridgeObjectRelease();
        }
        else
        {
          v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        if (!v12)
          break;
        if (!a2)
        {
          v24 = v9;
LABEL_28:
          swift_bridgeObjectRelease();

          return 0;
        }
        v13 = v3;
        v14 = v9;
        v15 = objc_msgSend(v14, sel_ingredientProducts);
        v16 = sub_1BCB642D4();

        v17 = objc_msgSend(a2, sel_ingredientProducts);
        v18 = sub_1BCB642D4();

        LOBYTE(v17) = sub_1BCB21794(v16, v18, (uint64_t)&qword_1EF487748);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v17 & 1) == 0)
        {
          v19 = v14;
LABEL_30:

          v21 = v19;
LABEL_31:

LABEL_32:
          swift_bridgeObjectRelease();
          return 0;
        }
        v19 = objc_msgSend(v14, sel_tradeNameProduct);
        v20 = objc_msgSend(a2, sel_tradeNameProduct);
        v21 = v20;
        if (!v19)
        {

          v3 = v13;
          v4 = v26;
          a2 = v27;
          if (v21)
            goto LABEL_31;
LABEL_5:

          goto LABEL_6;
        }
        v3 = v13;
        if (!v20)
        {

          goto LABEL_30;
        }
        v22 = v19;
        v23 = sub_1BCB645F8();

        v4 = v26;
        a2 = v27;
        if ((v23 & 1) == 0)
          goto LABEL_32;
LABEL_6:
        ++v5;
        if (v29 == v4)
          goto LABEL_36;
      }

      if (a2)
      {
        v24 = 0;
        goto LABEL_28;
      }
      goto LABEL_5;
    }
  }
LABEL_36:
  swift_bridgeObjectRelease();
  return 1;
}

char *keypath_get_selector_ingredientProducts()
{
  return sel_ingredientProducts;
}

unint64_t sub_1BCB2B890()
{
  unint64_t result;

  result = qword_1EF487BB8;
  if (!qword_1EF487BB8)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for MedicationGroupingKey, &type metadata for MedicationGroupingKey);
    atomic_store(result, (unint64_t *)&qword_1EF487BB8);
  }
  return result;
}

unint64_t sub_1BCB2B8D8()
{
  unint64_t result;

  result = qword_1EF487BC0;
  if (!qword_1EF487BC0)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for MedicationRouteFormConcept, &type metadata for MedicationRouteFormConcept);
    atomic_store(result, (unint64_t *)&qword_1EF487BC0);
  }
  return result;
}

unint64_t sub_1BCB2B920()
{
  unint64_t result;

  result = qword_1EF487BC8;
  if (!qword_1EF487BC8)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for MedicationSearchCluster, &type metadata for MedicationSearchCluster);
    atomic_store(result, (unint64_t *)&qword_1EF487BC8);
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicationGroupingKey()
{
  return &type metadata for MedicationGroupingKey;
}

uint64_t destroy for MedicationRouteFormConcept()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s27HealthMedicationsExperience26MedicationRouteFormConceptVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MedicationRouteFormConcept(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for MedicationRouteFormConcept(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicationRouteFormConcept(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicationRouteFormConcept(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicationRouteFormConcept()
{
  return &type metadata for MedicationRouteFormConcept;
}

ValueMetadata *type metadata accessor for MedicationSearchCluster()
{
  return &type metadata for MedicationSearchCluster;
}

ValueMetadata *type metadata accessor for MedicationSearchClusterFormsGrouper()
{
  return &type metadata for MedicationSearchClusterFormsGrouper;
}

uint64_t sub_1BCB2BB50(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1BCAFC2E0(255, a2);
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0DEFCF8], v4);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1BCB2BB90()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EDA130E0)
  {
    sub_1BCAF84F0(255, (unint64_t *)&qword_1EDA131B0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = sub_1BCB649DC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EDA130E0);
  }
}

void sub_1BCB2BBFC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF487C00)
  {
    type metadata accessor for HKMedicationFreeTextFormTypeCode(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF487C00);
  }
}

void sub_1BCB2BC60()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF487C08)
  {
    sub_1BCB066B8(255, &qword_1EF487BB0, &qword_1EF487998, 0x1E0CB64B0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1BCB066B8(255, (unint64_t *)&qword_1EF487750, (unint64_t *)&qword_1EF487748, 0x1E0CB64A0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BCB2BD18();
    v0 = sub_1BCB64904();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF487C08);
  }
}

unint64_t sub_1BCB2BD18()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_1EF487C10;
  if (!qword_1EF487C10)
  {
    sub_1BCB066B8(255, &qword_1EF487BB0, &qword_1EF487998, 0x1E0CB64B0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = v1;
    v3 = sub_1BCB2BB50(&qword_1EF487C18, &qword_1EF487998);
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0DEE990], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EF487C10);
  }
  return result;
}

uint64_t sub_1BCB2BDB8()
{
  return swift_release();
}

void sub_1BCB2BDC0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF487C30)
  {
    v0 = sub_1BCB644C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF487C30);
  }
}

void sub_1BCB2BE1C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF487C38)
  {
    sub_1BCB066B8(255, &qword_1EF4874D8, (unint64_t *)&qword_1EF4874E0, 0x1E0D2C4D0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BCB2BEA4();
    v0 = sub_1BCB64904();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF487C38);
  }
}

unint64_t sub_1BCB2BEA4()
{
  unint64_t result;

  result = qword_1EF487C40;
  if (!qword_1EF487C40)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for MedicationRouteFormConcept, &type metadata for MedicationRouteFormConcept);
    atomic_store(result, (unint64_t *)&qword_1EF487C40);
  }
  return result;
}

void sub_1BCB2BEE8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF487C48)
  {
    sub_1BCB066B8(255, (unint64_t *)&qword_1EF487750, (unint64_t *)&qword_1EF487748, 0x1E0CB64A0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = sub_1BCB649DC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF487C48);
  }
}

void sub_1BCB2BF5C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF487C50)
  {
    sub_1BCAF84F0(255, &qword_1EF487A60, (uint64_t)&type metadata for MedicationGroupingKey, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1BCB066B8(255, &qword_1EF4874D8, (unint64_t *)&qword_1EF4874E0, 0x1E0D2C4D0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BCB2C00C();
    v0 = sub_1BCB64904();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF487C50);
  }
}

unint64_t sub_1BCB2C00C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EF487C58;
  if (!qword_1EF487C58)
  {
    sub_1BCAF84F0(255, &qword_1EF487A60, (uint64_t)&type metadata for MedicationGroupingKey, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = v1;
    v3 = sub_1BCB2C084();
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0DEE990], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EF487C58);
  }
  return result;
}

unint64_t sub_1BCB2C084()
{
  unint64_t result;

  result = qword_1EF487C60;
  if (!qword_1EF487C60)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for MedicationGroupingKey, &type metadata for MedicationGroupingKey);
    atomic_store(result, (unint64_t *)&qword_1EF487C60);
  }
  return result;
}

uint64_t sub_1BCB2C0C8()
{
  sub_1BCB2C170();
  return sub_1BCB642B0();
}

uint64_t sub_1BCB2C124()
{
  sub_1BCB2C170();
  return sub_1BCB642A4();
}

unint64_t sub_1BCB2C170()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDA132D8;
  if (!qword_1EDA132D8)
  {
    type metadata accessor for HKMedicationDoseEventStatus(255);
    result = MEMORY[0x1BCCFD874](&unk_1BCB65994, v1);
    atomic_store(result, (unint64_t *)&qword_1EDA132D8);
  }
  return result;
}

id MedicationRoomInteractionEvent.__allocating_init(action:roomType:provenance:calendarCache:hasSideEffectsContent:hasPregnancyContent:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5, char a6)
{
  id v12;

  swift_allocObject();
  v12 = sub_1BCB2F57C(a1, a2, a3, a4, a5, a6);

  return v12;
}

unint64_t sub_1BCB2C23C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1BCB31210();
  v2 = sub_1BCB648F8();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1BCAFCD6C(v6, (uint64_t)&v13, (uint64_t (*)(_QWORD))sub_1BCB13060);
    v7 = v13;
    result = sub_1BCB0E89C(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)sub_1BCB0537C(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1BCB2C364(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1BCB30F10();
  v2 = (_QWORD *)sub_1BCB648F8();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = sub_1BCB0E7B0(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1BCB2C478(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1BCB31140();
  v2 = sub_1BCB648F8();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1BCAFCD6C(v6, (uint64_t)&v15, (uint64_t (*)(_QWORD))sub_1BCB311A8);
    v7 = v15;
    v8 = v16;
    result = sub_1BCB0E7B0(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_1BCB0537C(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1BCB2C5A8(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  id v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  char *v19;
  _QWORD *v20;
  unint64_t v21;
  id v22[6];
  uint64_t v23;

  v2 = v1;
  v3 = a1;
  v23 = MEMORY[0x1E0DEE9D8];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1BCB646F4();
    sub_1BCAFC2E0(0, &qword_1EF487DF8);
    sub_1BCB2BB50(&qword_1EF487E00, &qword_1EF487DF8);
    result = sub_1BCB6443C();
    v3 = (unint64_t)v22[1];
    v20 = v22[2];
    v5 = (uint64_t)v22[3];
    v6 = (int64_t)v22[4];
    v7 = (unint64_t)v22[5];
  }
  else
  {
    v8 = -1 << *(_BYTE *)(a1 + 32);
    v20 = (_QWORD *)(a1 + 56);
    v5 = ~v8;
    v9 = -v8;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v7 = v10 & *(_QWORD *)(a1 + 56);
    result = swift_bridgeObjectRetain();
    v6 = 0;
  }
  v11 = (unint64_t)(v5 + 64) >> 6;
  if ((v3 & 0x8000000000000000) == 0)
    goto LABEL_11;
LABEL_8:
  v12 = sub_1BCB64748();
  if (!v12)
    goto LABEL_35;
  v21 = v12;
  sub_1BCAFC2E0(0, &qword_1EF487DF8);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  v13 = v22[0];
  swift_unknownObjectRelease();
  v14 = v6;
  v15 = v7;
  if (!v13)
    goto LABEL_35;
  while (1)
  {
    v22[0] = v13;
    sub_1BCB2DB44(v22, &v21);

    if (v2)
    {
      sub_1BCB2BDB8();
      return swift_bridgeObjectRelease();
    }
    result = sub_1BCB00BAC(v21);
    v6 = v14;
    v7 = v15;
    if ((v3 & 0x8000000000000000) != 0)
      goto LABEL_8;
LABEL_11:
    if (!v7)
      break;
    v15 = (v7 - 1) & v7;
    v16 = __clz(__rbit64(v7)) | (v6 << 6);
    v14 = v6;
LABEL_24:
    v13 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    if (!v13)
      goto LABEL_35;
  }
  v14 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    return result;
  }
  if (v14 >= v11)
    goto LABEL_35;
  v17 = v20[v14];
  if (v17)
  {
LABEL_23:
    v15 = (v17 - 1) & v17;
    v16 = __clz(__rbit64(v17)) + (v14 << 6);
    goto LABEL_24;
  }
  v18 = v6 + 2;
  if (v6 + 2 >= v11)
    goto LABEL_35;
  v17 = v20[v18];
  if (v17)
    goto LABEL_22;
  v18 = v6 + 3;
  if (v6 + 3 >= v11)
    goto LABEL_35;
  v17 = v20[v18];
  if (v17)
    goto LABEL_22;
  v18 = v6 + 4;
  if (v6 + 4 >= v11)
    goto LABEL_35;
  v17 = v20[v18];
  if (v17)
  {
LABEL_22:
    v14 = v18;
    goto LABEL_23;
  }
  v14 = v6 + 5;
  if (v6 + 5 >= v11)
    goto LABEL_35;
  v17 = v20[v14];
  if (v17)
    goto LABEL_23;
  v19 = (char *)(v6 + 6);
  while ((char *)v11 != v19)
  {
    v17 = v20[(_QWORD)v19++];
    if (v17)
    {
      v14 = (int64_t)(v19 - 1);
      goto LABEL_23;
    }
  }
LABEL_35:
  sub_1BCB2BDB8();
  return v23;
}

id MedicationRoomInteractionEvent.init(action:roomType:provenance:calendarCache:hasSideEffectsContent:hasPregnancyContent:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5, char a6)
{
  id v7;

  v7 = sub_1BCB2F57C(a1, a2, a3, a4, a5, a6);

  return v7;
}

uint64_t sub_1BCB2C8EC()
{
  sub_1BCB6479C();
  sub_1BCB641F0();
  swift_bridgeObjectRetain();
  sub_1BCB641F0();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1BCB2C97C()
{
  return sub_1BCB2C8EC();
}

uint64_t sub_1BCB2C9A4()
{
  return 1;
}

unint64_t sub_1BCB2C9D8()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_1BCB2C9F4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char **v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  NSObject *v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  unsigned __int8 v37;
  unint64_t v38;
  char v39;
  uint8_t *v40;
  unint64_t v41;
  _OWORD v42[2];
  __int128 v43;
  uint64_t v44;
  unint64_t v45;

  v2 = sub_1BCB63DDC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(a1, sel_healthDataSource);
  swift_unknownObjectRelease();
  if (v6)
  {
    v45 = sub_1BCB2C478(MEMORY[0x1E0DEE9D8]);
    if (qword_1EDA13DC8 != -1)
      swift_once();
    v7 = off_1EDA14058;
    sub_1BCB2F710();
    swift_getKeyPath();
    swift_getKeyPath();
    *(_QWORD *)&v42[0] = v7;
    swift_retain();
    sub_1BCB63CC8();
    swift_release();
    swift_release();
    swift_release();
    v8 = sub_1BCB63D7C();
    swift_release();
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      v9 = sub_1BCB648D4();
      swift_bridgeObjectRelease();
    }
    else
    {
      v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x1E0DEAFA0];
    v44 = MEMORY[0x1E0DEAFA0];
    LOBYTE(v43) = v9 > 0;
    sub_1BCB0537C(&v43, v42);
    v11 = v45;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v41 = v11;
    sub_1BCB0FD0C(v42, 0x4C7364654D736168, 0xEB00000000747369, isUniquelyReferenced_nonNull_native);
    v13 = v41;
    v45 = v41;
    swift_bridgeObjectRelease();
    v14 = sub_1BCB6413C();
    v16 = v15;
    v17 = &selRef_stringFromNumber_;
    v18 = objc_msgSend(a1, sel_environmentDataSource);
    v19 = objc_msgSend(v18, sel_activePairedDeviceProductType);

    if (v19)
    {
      v20 = sub_1BCB6413C();
      v21 = v10;
      v23 = v22;

      v44 = MEMORY[0x1E0DEA968];
      *(_QWORD *)&v43 = v20;
      *((_QWORD *)&v43 + 1) = v23;
      v10 = v21;
      v17 = &selRef_stringFromNumber_;
      sub_1BCB0537C(&v43, v42);
      v24 = swift_isUniquelyReferenced_nonNull_native();
      v41 = v13;
      v45 = 0x8000000000000000;
      sub_1BCB0FD0C(v42, v14, v16, v24);
      v45 = v41;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1BCB2EC40(v14, v16, &v43);
      swift_bridgeObjectRelease();
      sub_1BCB2F77C((uint64_t)&v43);
    }
    v33 = sub_1BCB6413C();
    v35 = v34;
    v36 = objc_msgSend(a1, v17[61]);
    v37 = objc_msgSend(v36, sel_isImproveHealthAndActivityEnabled);

    v44 = v10;
    LOBYTE(v43) = v37;
    sub_1BCB0537C(&v43, v42);
    v38 = v45;
    v39 = swift_isUniquelyReferenced_nonNull_native();
    v41 = v38;
    v45 = 0x8000000000000000;
    sub_1BCB0FD0C(v42, v33, v35, v39);
    v45 = v41;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v45;
  }
  else
  {
    sub_1BCB63DC4();
    v25 = sub_1BCB63DD0();
    v26 = sub_1BCB64508();
    if (os_log_type_enabled(v25, (os_log_type_t)v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      *(_QWORD *)&v43 = v28;
      *(_DWORD *)v27 = 136446210;
      v40 = v27 + 4;
      v29 = sub_1BCB64B14();
      *(_QWORD *)&v42[0] = sub_1BCB010C8(v29, v30, (uint64_t *)&v43);
      sub_1BCB64640();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1BCAF3000, v25, (os_log_type_t)v26, "[%{public}s] Tried to create a payload with a dataSource containing nil healthDataSource", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCFD928](v28, -1, -1);
      MEMORY[0x1BCCFD928](v27, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    sub_1BCB2F6CC();
    swift_allocError();
    *v31 = 0xD00000000000002CLL;
    v31[1] = 0x80000001BCB6AEC0;
    return swift_willThrow();
  }
}

uint64_t sub_1BCB2CF20(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  char v38;
  char v39;
  unint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  id v44;
  uint64_t v45;
  char v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  id v72;
  id v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  unint64_t v86;
  _OWORD v87[2];
  __int128 v88;
  uint64_t v89;
  unint64_t v90;

  v2 = v1;
  v4 = sub_1BCB63DDC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1BCB63B3C();
  v9 = *(_QWORD *)(v8 - 8);
  v83 = v8;
  v84 = v9;
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(a1, sel_healthDataSource);
  if (v12)
  {
    v13 = v12;
    v14 = sub_1BCB2C478(MEMORY[0x1E0DEE9D8]);
    v85 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D2C430]), sel_initWithDataSource_, v13);
    v15 = (id)HKStringFromMedicationRoomProvenance();
    v16 = sub_1BCB6413C();
    v18 = v17;

    v19 = MEMORY[0x1E0DEA968];
    v89 = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v88 = v16;
    *((_QWORD *)&v88 + 1) = v18;
    sub_1BCB0537C(&v88, v87);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v90 = v14;
    sub_1BCB0FD0C(v87, 0x6E616E65766F7270, 0xEA00000000006563, isUniquelyReferenced_nonNull_native);
    v21 = v90;
    swift_bridgeObjectRelease();
    v22 = (id)HKStringFromMedicationRoomType();
    v23 = sub_1BCB6413C();
    v25 = v24;

    v89 = v19;
    *(_QWORD *)&v88 = v23;
    *((_QWORD *)&v88 + 1) = v25;
    sub_1BCB0537C(&v88, v87);
    v26 = swift_isUniquelyReferenced_nonNull_native();
    v90 = v21;
    sub_1BCB0FD0C(v87, 0x657079546D6F6F72, 0xE800000000000000, v26);
    v27 = v90;
    swift_bridgeObjectRelease();
    v28 = (id)HKStringFromMedicationRoomAnalyticsAction();
    v29 = sub_1BCB6413C();
    v31 = v30;

    v89 = v19;
    *(_QWORD *)&v88 = v29;
    *((_QWORD *)&v88 + 1) = v31;
    sub_1BCB0537C(&v88, v87);
    v32 = swift_isUniquelyReferenced_nonNull_native();
    v90 = v27;
    sub_1BCB0FD0C(v87, 0x6E6F69746361, 0xE600000000000000, v32);
    v33 = v90;
    swift_bridgeObjectRelease();
    v34 = sub_1BCB2FAFC();
    v35 = MEMORY[0x1E0DEAFA0];
    v89 = MEMORY[0x1E0DEAFA0];
    LOBYTE(v88) = v34 & 1;
    sub_1BCB0537C(&v88, v87);
    v36 = swift_isUniquelyReferenced_nonNull_native();
    v90 = v33;
    sub_1BCB0FD0C(v87, 0xD000000000000013, 0x80000001BCB6AEF0, v36);
    v37 = v90;
    swift_bridgeObjectRelease();
    v38 = *(_BYTE *)(v2 + 48);
    v89 = v35;
    LOBYTE(v88) = v38;
    sub_1BCB0537C(&v88, v87);
    v39 = swift_isUniquelyReferenced_nonNull_native();
    v90 = v37;
    sub_1BCB0FD0C(v87, 0xD000000000000015, 0x80000001BCB6A700, v39);
    v40 = v90;
    swift_bridgeObjectRelease();
    v41 = *(_BYTE *)(v2 + 49);
    v89 = v35;
    LOBYTE(v88) = v41;
    sub_1BCB0537C(&v88, v87);
    v42 = swift_isUniquelyReferenced_nonNull_native();
    v86 = v40;
    sub_1BCB0FD0C(v87, 0xD000000000000013, 0x80000001BCB6A720, v42);
    v43 = v86;
    v90 = v86;
    swift_bridgeObjectRelease();
    v44 = sub_1BCB30350();
    if (v45)
    {
      v89 = v19;
      *(_QWORD *)&v88 = v44;
      *((_QWORD *)&v88 + 1) = v45;
      sub_1BCB0537C(&v88, v87);
      v46 = swift_isUniquelyReferenced_nonNull_native();
      v86 = v43;
      sub_1BCB0FD0C(v87, 0xD000000000000018, 0x80000001BCB6AF10, v46);
      v90 = v86;
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1BCB2EC40(0xD000000000000018, 0x80000001BCB6AF10, &v88);
      sub_1BCB2F77C((uint64_t)&v88);
    }
    v55 = v19;
    v56 = sub_1BCB6413C();
    v58 = v57;
    v59 = objc_msgSend(v85, sel_biologicalSex);
    if (v59)
    {
      v60 = v59;
      v61 = sub_1BCB6413C();
      v63 = v62;

      v89 = v55;
      v64 = v83;
      if (v63)
      {
LABEL_13:
        *(_QWORD *)&v88 = v61;
        *((_QWORD *)&v88 + 1) = v63;
        sub_1BCB0537C(&v88, v87);
        v66 = v90;
        v67 = swift_isUniquelyReferenced_nonNull_native();
        v86 = v66;
        v90 = 0x8000000000000000;
        sub_1BCB0FD0C(v87, v56, v58, v67);
        v90 = v86;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v68 = sub_1BCB6413C();
        v70 = v69;
        sub_1BCB63B30();
        v71 = (void *)sub_1BCB63B00();
        (*(void (**)(char *, uint64_t))(v84 + 8))(v11, v64);
        v72 = v85;
        v73 = objc_msgSend(v85, sel_bucketedUserAgeForCurrentDate_, v71);

        v89 = sub_1BCAFC2E0(0, &qword_1EF487720);
        *(_QWORD *)&v88 = v73;
        sub_1BCB0537C(&v88, v87);
        v74 = v90;
        v75 = swift_isUniquelyReferenced_nonNull_native();
        v86 = v74;
        v90 = 0x8000000000000000;
        sub_1BCB0FD0C(v87, v68, v70, v75);
        v90 = v86;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v76 = sub_1BCB6413C();
        v78 = v77;
        v79 = sub_1BCB2E4BC(v13);
        v89 = MEMORY[0x1E0DEAFA0];
        LOBYTE(v88) = v79 & 1;
        sub_1BCB0537C(&v88, v87);
        v80 = v90;
        v81 = swift_isUniquelyReferenced_nonNull_native();
        v86 = v80;
        v90 = 0x8000000000000000;
        sub_1BCB0FD0C(v87, v76, v78, v81);
        v90 = v86;
        swift_unknownObjectRelease();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v90;
      }
    }
    else
    {
      v89 = v55;
      v64 = v83;
    }
    v61 = sub_1BCB6413C();
    v63 = v65;
    goto LABEL_13;
  }
  sub_1BCB63DC4();
  v47 = sub_1BCB63DD0();
  v48 = sub_1BCB64508();
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc();
    v50 = swift_slowAlloc();
    *(_QWORD *)&v88 = v50;
    *(_DWORD *)v49 = 136446210;
    v85 = v49 + 4;
    v51 = sub_1BCB64B14();
    *(_QWORD *)&v87[0] = sub_1BCB010C8(v51, v52, (uint64_t *)&v88);
    sub_1BCB64640();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BCAF3000, v47, v48, "[%{public}s] Tried to create a payload with a dataSource containing nil healthDataSource", v49, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCFD928](v50, -1, -1);
    MEMORY[0x1BCCFD928](v49, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_1BCB2F6CC();
  swift_allocError();
  *v53 = 0xD00000000000002CLL;
  v53[1] = 0x80000001BCB6AEC0;
  return swift_willThrow();
}

id sub_1BCB2D700(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id))
{
  id v6;
  void *v7;

  v6 = a3;
  swift_retain();
  a5(v6);
  swift_release();

  v7 = (void *)sub_1BCB640AC();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1BCB2D7E0(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[4];

  v9 = sub_1BCB63DDC();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v14 = result;
    if (a2)
    {
      v15 = a2;
      sub_1BCB63DC4();
      v16 = a2;
      v17 = a2;
      v18 = sub_1BCB63DD0();
      v19 = sub_1BCB644FC();
      v20 = v19;
      if (os_log_type_enabled(v18, v19))
      {
        v21 = swift_slowAlloc();
        v34 = swift_slowAlloc();
        v37[0] = v34;
        *(_DWORD *)v21 = 136315650;
        v33 = v20;
        v22 = sub_1BCB64B14();
        v24 = sub_1BCB010C8(v22, v23, v37);
        v35 = a4;
        v36 = v24;
        sub_1BCB64640();
        swift_bridgeObjectRelease();
        *(_WORD *)(v21 + 12) = 2080;
        v36 = sub_1BCB010C8(0xD00000000000001DLL, 0x80000001BCB6B100, v37);
        sub_1BCB64640();
        *(_WORD *)(v21 + 22) = 2080;
        v36 = (uint64_t)a2;
        v25 = a2;
        sub_1BCB052CC();
        v26 = sub_1BCB6419C();
        v36 = sub_1BCB010C8(v26, v27, v37);
        sub_1BCB64640();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1BCAF3000, v18, (os_log_type_t)v33, "%s.%s Error: %s", (uint8_t *)v21, 0x20u);
        v28 = v34;
        swift_arrayDestroy();
        MEMORY[0x1BCCFD928](v28, -1, -1);
        MEMORY[0x1BCCFD928](v21, -1, -1);
      }
      else
      {

      }
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      sub_1BCB645B0();

    }
    else
    {
      if (a1)
      {
        v29 = sub_1BCB2C5A8(a1);
        swift_retain();
        v30 = (unint64_t)sub_1BCB2F7D4(v29, v14);
        swift_bridgeObjectRelease();
        swift_release();
        v31 = v30 >> 62 ? sub_1BCB648D4() : *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRelease();
        if (v31 >= 1)
        {
          swift_beginAccess();
          *(_BYTE *)(a5 + 16) = 1;
        }
      }
      sub_1BCB645B0();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1BCB2DB44@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  int64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t result;
  void (*v21)(_BYTE *, _QWORD);
  uint64_t v22;
  _BYTE v24[32];
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v2 = objc_msgSend(*a1, sel_interactions);
  sub_1BCAFC2E0(0, &qword_1EF487E08);
  sub_1BCB2BB50(&qword_1EF487E10, &qword_1EF487E08);
  v3 = sub_1BCB64400();

  if ((v3 & 0xC000000000000001) != 0)
  {
    v4 = sub_1BCB64724();
    if (!v4)
      goto LABEL_15;
    v5 = v4;
    v28 = MEMORY[0x1E0DEE9D8];
    sub_1BCB64844();
    v25 = sub_1BCB646E8();
    v26 = v6;
    v27 = 1;
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_9;
    __break(1u);
  }
  v5 = *(_QWORD *)(v3 + 16);
  if (!v5)
  {
LABEL_15:
    result = swift_bridgeObjectRelease();
    v22 = MEMORY[0x1E0DEE9D8];
LABEL_16:
    *a2 = v22;
    return result;
  }
  v28 = MEMORY[0x1E0DEE9D8];
  sub_1BCB64844();
  v25 = sub_1BCB2F4F4(v3);
  v26 = v7;
  v27 = v8 & 1;
  while (1)
  {
LABEL_9:
    while (1)
    {
      v14 = v25;
      v15 = v26;
      v16 = v27;
      sub_1BCB2F28C(v25, v26, v27, v3);
      v18 = v17;
      v19 = objc_msgSend(v17, sel_severity);

      sub_1BCB64820();
      sub_1BCB64850();
      sub_1BCB6485C();
      result = sub_1BCB6482C();
      if ((v3 & 0xC000000000000001) != 0)
        break;
      v9 = sub_1BCB2F1A8(v14, v15, v16, v3);
      v11 = v10;
      v13 = v12;
      sub_1BCB31134(v14, v15, v16);
      v25 = v9;
      v26 = v11;
      v27 = v13 & 1;
      if (!--v5)
        goto LABEL_14;
    }
    if ((v16 & 1) == 0)
      break;
    if (sub_1BCB64700())
      swift_isUniquelyReferenced_nonNull_native();
    sub_1BCB310A4();
    v21 = (void (*)(_BYTE *, _QWORD))sub_1BCB64418();
    sub_1BCB64754();
    v21(v24, 0);
    if (!--v5)
    {
LABEL_14:
      sub_1BCB31134(v25, v26, v27);
      v22 = v28;
      result = swift_bridgeObjectRelease();
      goto LABEL_16;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1BCB2DDE0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  id v6;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_1BCAFC2E0(0, &qword_1EF487DF8);
    sub_1BCB2BB50(&qword_1EF487E00, &qword_1EF487DF8);
    v4 = sub_1BCB64400();
  }
  swift_retain();
  v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1BCB2DE98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  id v17;
  id v18[3];
  id v19[3];
  uint64_t v20;

  sub_1BCAF84F0(0, &qword_1EDA130E8, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D29FA8]);
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v5 = (char *)&v16 - v4;
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0 && sub_1BCB648D4())
    sub_1BCB04DB8(MEMORY[0x1E0DEE9D8]);
  else
    v6 = MEMORY[0x1E0DEE9E8];
  v20 = v6;
  v7 = *(_QWORD *)(v0 + 64);
  v8 = v7
     + OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isAlcoholDrugInteractionFactorEnabled;
  swift_beginAccess();
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9(v5, v8, v2);
  sub_1BCB63D10();
  v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v5, v2);
  if (LOBYTE(v19[0]) == 1)
  {
    sub_1BCB45DFC(v19, objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInteger_, 1));

  }
  v11 = v7
      + OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isTobaccoDrugInteractionFactorEnabled;
  swift_beginAccess();
  v9(v5, v11, v2);
  sub_1BCB63D10();
  v10(v5, v2);
  if (LOBYTE(v18[0]) == 1)
  {
    sub_1BCB45DFC(v18, objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInteger_, 3));

  }
  v12 = v7
      + OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isMarijuanaDrugInteractionFactorEnabled;
  swift_beginAccess();
  v9(v5, v12, v2);
  sub_1BCB63D10();
  v10(v5, v2);
  if (v17 == 1)
  {
    sub_1BCB45DFC(&v17, objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInteger_, 2));

  }
  v13 = v20;
  if ((v20 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(v20 + 16))
      return v13;
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  v14 = sub_1BCB64724();
  swift_bridgeObjectRelease();
  if (!v14)
  {
LABEL_11:
    sub_1BCB45DFC(&v17, objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInteger_, 0));

    return v20;
  }
  return v13;
}

void sub_1BCB2E180(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30[3];

  v9 = sub_1BCB63DDC();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    if (!a2)
    {
LABEL_12:
      sub_1BCB645B0();
      return;
    }
    if (a2 >> 62)
    {
      swift_bridgeObjectRetain();
      v25 = sub_1BCB648D4();
      if (v25)
        goto LABEL_7;
    }
    else
    {
      v25 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v25)
      {
LABEL_7:
        if ((a2 & 0xC000000000000001) != 0)
        {
          v26 = (id)MEMORY[0x1BCCFCF20](0, a2);
        }
        else
        {
          if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          v26 = *(id *)(a2 + 32);
        }
        v25 = (uint64_t)v26;
      }
    }
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v27 = *(void **)(a5 + 16);
    *(_QWORD *)(a5 + 16) = v25;

    goto LABEL_12;
  }
  v13 = a3;
  sub_1BCB63DC4();
  v14 = a3;
  v15 = a3;
  v16 = sub_1BCB63DD0();
  v17 = sub_1BCB644FC();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc();
    v28[0] = swift_slowAlloc();
    v30[0] = v28[0];
    *(_DWORD *)v18 = 136315650;
    v28[1] = a4;
    v19 = sub_1BCB64B14();
    v29 = sub_1BCB010C8(v19, v20, v30);
    sub_1BCB64640();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    v29 = sub_1BCB010C8(0xD000000000000021, 0x80000001BCB6B0B0, v30);
    sub_1BCB64640();
    *(_WORD *)(v18 + 22) = 2080;
    v29 = (uint64_t)a3;
    v21 = a3;
    sub_1BCB052CC();
    v22 = sub_1BCB6419C();
    v29 = sub_1BCB010C8(v22, v23, v30);
    sub_1BCB64640();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1BCAF3000, v16, v17, "%s.%s Error: %s", (uint8_t *)v18, 0x20u);
    v24 = v28[0];
    swift_arrayDestroy();
    MEMORY[0x1BCCFD928](v24, -1, -1);
    MEMORY[0x1BCCFD928](v18, -1, -1);
  }
  else
  {

  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_1BCB645B0();

}

uint64_t sub_1BCB2E4BC(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  dispatch_semaphore_t v12;
  _QWORD *v13;
  void *v14;
  NSObject *v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t aBlock[6];

  v3 = *v1;
  v4 = sub_1BCB63FEC();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v26 - v9;
  v11 = swift_allocObject();
  *(_BYTE *)(v11 + 16) = 0;
  v12 = dispatch_semaphore_create(0);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v11;
  v13[3] = v12;
  v26[0] = v3;
  v13[4] = v3;
  aBlock[4] = (uint64_t)sub_1BCB30FC0;
  aBlock[5] = (uint64_t)v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1BCB2E998;
  aBlock[3] = (uint64_t)&block_descriptor_3;
  v14 = _Block_copy(aBlock);
  swift_retain();
  v15 = v12;
  swift_release();
  objc_msgSend(a1, sel_isImproveHealthRecordsAnalyticsSubmissionAllowedWithCompletion_, v14);
  _Block_release(v14);
  sub_1BCB63FE0();
  MEMORY[0x1BCCFC764](v8, 3.0);
  v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  sub_1BCB645A4();
  v16(v10, v4);
  if ((sub_1BCB63FB0() & 1) == 0)
    goto LABEL_7;
  if (qword_1EDA14510 != -1)
    swift_once();
  v17 = sub_1BCB63DDC();
  __swift_project_value_buffer(v17, (uint64_t)qword_1EDA14518);
  v18 = sub_1BCB63DD0();
  v19 = sub_1BCB644FC();
  if (!os_log_type_enabled(v18, v19))
  {

LABEL_7:
    goto LABEL_8;
  }
  v20 = (uint8_t *)swift_slowAlloc();
  v21 = swift_slowAlloc();
  aBlock[0] = v21;
  *(_DWORD *)v20 = 136446210;
  v22 = sub_1BCB64B14();
  v26[1] = sub_1BCB010C8(v22, v23, aBlock);
  sub_1BCB64640();
  swift_bridgeObjectRelease();
  _os_log_impl(&dword_1BCAF3000, v18, v19, "[%{public}s] Timed out fetching IHR status for analytics.", v20, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1BCCFD928](v21, -1, -1);
  MEMORY[0x1BCCFD928](v20, -1, -1);

LABEL_8:
  swift_beginAccess();
  v24 = *(unsigned __int8 *)(v11 + 16);
  swift_release();
  return v24;
}

uint64_t sub_1BCB2E7E0(void *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13[4];

  if (a1)
  {
    v4 = objc_msgSend(a1, sel_BOOLValue);
    swift_beginAccess();
    *(_BYTE *)(a3 + 16) = v4;
  }
  else
  {
    if (qword_1EDA14510 != -1)
      swift_once();
    v5 = sub_1BCB63DDC();
    __swift_project_value_buffer(v5, (uint64_t)qword_1EDA14518);
    v6 = sub_1BCB63DD0();
    v7 = sub_1BCB644FC();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v13[0] = v9;
      *(_DWORD *)v8 = 136446210;
      v10 = sub_1BCB64B14();
      v13[3] = sub_1BCB010C8(v10, v11, v13);
      sub_1BCB64640();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1BCAF3000, v6, v7, "[%{public}s] failed fetching IHR status for analytics.", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCFD928](v9, -1, -1);
      MEMORY[0x1BCCFD928](v8, -1, -1);
    }

  }
  return sub_1BCB645B0();
}

void sub_1BCB2E998(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(void *, void *);
  id v6;
  id v7;

  v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

uint64_t MedicationRoomInteractionEvent.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t MedicationRoomInteractionEvent.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1BCB2EA6C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  sub_1BCB2F710();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_1BCB63CC8();
  swift_release();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1BCB2EB10()
{
  sub_1BCB2F710();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  return sub_1BCB63CD4();
}

uint64_t sub_1BCB2EBA0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v7)(id, uint64_t, void *);
  id v8;
  id v9;

  v5 = a3;
  v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_1BCAFC2E0(0, &qword_1EDA144B0);
    v5 = sub_1BCB642D4();
  }
  swift_retain();
  v8 = a2;
  v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

double sub_1BCB2EC40@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_1BCB0E7B0(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1BCB101B0();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_1BCB0537C((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v8), a3);
    sub_1BCB2EE00(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_1BCB2ED30(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_1BCB0E7B0(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1BCB103A4();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
  sub_1BCB2EFD4(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_1BCB2EE00(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1BCB646D0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1BCB64A90();
        swift_bridgeObjectRetain();
        sub_1BCB641CC();
        v10 = sub_1BCB64AC0();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1BCB2EFD4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1BCB646D0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1BCB64A90();
        swift_bridgeObjectRetain();
        sub_1BCB641CC();
        v9 = sub_1BCB64AC0();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

int64_t sub_1BCB2F1A8(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void sub_1BCB2F28C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  id v13;
  char v14;
  id v15;
  void *v16;

  v6 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (sub_1BCB6470C() == *(_DWORD *)(a4 + 36))
      {
        sub_1BCB64718();
        sub_1BCAFC2E0(0, &qword_1EF487E08);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v4 = v16;
        swift_unknownObjectRelease();
        v8 = sub_1BCB645EC();
        v9 = -1 << *(_BYTE *)(a4 + 32);
        v6 = v8 & ~v9;
        if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
        {
          v10 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          v11 = sub_1BCB645F8();

          if ((v11 & 1) == 0)
          {
            v12 = ~v9;
            do
            {
              v6 = (v6 + 1) & v12;
              if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
                goto LABEL_24;
              v13 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
              v14 = sub_1BCB645F8();

            }
            while ((v14 & 1) == 0);
          }

LABEL_20:
          v15 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v7 = a4;
  else
    v7 = a4 & 0xFFFFFFFFFFFFFF8;
  MEMORY[0x1BCCFCE9C](a1, a2, v7);
  sub_1BCAFC2E0(0, &qword_1EF487E08);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
}

uint64_t sub_1BCB2F4F4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

id sub_1BCB2F57C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  id result;

  v7 = v6;
  *(_QWORD *)(v6 + 56) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB6780]), sel_init);
  if (qword_1EDA13DC8 != -1)
    swift_once();
  v14 = qword_1EDA141E0;
  v15 = *((id *)off_1EDA14058 + 2);
  if (v14 != -1)
    swift_once();
  v16 = (void *)qword_1EDA141D8;
  type metadata accessor for MedicationsSettingsManager();
  swift_allocObject();
  v17 = sub_1BCB3DEA0(v15, 0, v16);

  *(_QWORD *)(v7 + 64) = v17;
  result = objc_msgSend(a4, sel_currentCalendar);
  if (result)
  {
    *(_QWORD *)(v7 + 16) = result;
    *(_QWORD *)(v7 + 24) = a1;
    *(_QWORD *)(v7 + 32) = a2;
    *(_QWORD *)(v7 + 40) = a3;
    *(_BYTE *)(v7 + 48) = a5 & 1;
    *(_BYTE *)(v7 + 49) = a6 & 1;
    return (id)v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1BCB2F6CC()
{
  unint64_t result;

  result = qword_1EF487C68;
  if (!qword_1EF487C68)
  {
    result = MEMORY[0x1BCCFD874](&unk_1BCB67644, &type metadata for MedicationRoomInteractionEvent.AnalyticsEventPayloadError);
    atomic_store(result, (unint64_t *)&qword_1EF487C68);
  }
  return result;
}

void sub_1BCB2F710()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EDA132E8)
  {
    type metadata accessor for MedicationsExperienceStore();
    sub_1BCB63D88();
    v0 = sub_1BCB63CE0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EDA132E8);
  }
}

uint64_t sub_1BCB2F77C(uint64_t a1)
{
  uint64_t v2;

  sub_1BCAF84F0(0, (unint64_t *)&qword_1EF487770, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1BCB2F7D4(unint64_t a1, uint64_t a2)
{
  void (**v2)(char *, _QWORD);
  void (**v3)(char *, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id result;
  void *v17;
  _QWORD v18[2];
  uint64_t v19;
  unint64_t v20;
  void (**v21)(char *, uint64_t, _QWORD);
  uint64_t v22;
  char v23;
  uint64_t v24;

  v3 = v2;
  v22 = a2;
  sub_1BCAF84F0(0, &qword_1EDA13060, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650]);
  v6 = v5;
  v21 = *(void (***)(char *, uint64_t, _QWORD))(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v18 - v7;
  v24 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
  {
LABEL_19:
    v9 = sub_1BCB648D4();
    if (v9)
      goto LABEL_3;
    return (id)MEMORY[0x1E0DEE9D8];
  }
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v9)
    return (id)MEMORY[0x1E0DEE9D8];
LABEL_3:
  v10 = 0;
  v20 = a1 & 0xC000000000000001;
  v18[1] = v3;
  v19 = a1 & 0xFFFFFFFFFFFFFF8;
  while (1)
  {
    if (v20)
    {
      v11 = (id)MEMORY[0x1BCCFCF20](v10, a1);
    }
    else
    {
      if (v10 >= *(_QWORD *)(v19 + 16))
      {
        __break(1u);
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
      v11 = *(id *)(a1 + 8 * v10 + 32);
    }
    v12 = v11;
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_18;
    v14 = a1;
    v15 = *(_QWORD *)(v22 + 64)
        + OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__showMinorDrugInteractions;
    swift_beginAccess();
    v3 = (void (**)(char *, _QWORD))v21;
    v21[2](v8, v15, v6);
    sub_1BCB63C8C();
    v3[1](v8, v6);
    if (v23 == 1)
      break;
LABEL_13:
    if (objc_msgSend(v12, sel_severityLevel) == (id)4)
    {

      goto LABEL_5;
    }
LABEL_4:
    sub_1BCB64820();
    v3 = *(void (***)(char *, _QWORD))(v24 + 16);
    sub_1BCB64850();
    sub_1BCB6485C();
    sub_1BCB6482C();
LABEL_5:
    a1 = v14;
    ++v10;
    if (v13 == v9)
      return (id)v24;
  }
  result = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (result)
  {
    v17 = result;
    v3 = (void (**)(char *, _QWORD))objc_msgSend(result, sel_isAppleInternalInstall);

    if ((v3 & 1) != 0)
      goto LABEL_4;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

unint64_t sub_1BCB2FA2C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE *i;
  uint64_t v5;
  char v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1BCB109C0();
    v3 = (_QWORD *)sub_1BCB648F8();
    for (i = (_BYTE *)(a1 + 40); ; i += 16)
    {
      v5 = *((_QWORD *)i - 1);
      v6 = *i;
      result = sub_1BCB0EB40(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      *(_BYTE *)(v3[7] + result) = v6;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

uint64_t sub_1BCB2FAFC()
{
  NSObject *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t i;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  id v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  dispatch_semaphore_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  Class isa;
  void *v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  NSObject v51;
  uint64_t aBlock[6];
  uint64_t v53;

  v1 = v0;
  v51.isa = v0->isa;
  v2 = sub_1BCB63FEC();
  v50 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v49 = (char *)&v45 - v6;
  if (qword_1EDA13DC8 != -1)
    swift_once();
  v7 = off_1EDA14058;
  sub_1BCB2F710();
  swift_getKeyPath();
  swift_getKeyPath();
  v53 = (uint64_t)v7;
  swift_retain();
  sub_1BCB63CC8();
  swift_release();
  swift_release();
  swift_release();
  v8 = sub_1BCB63D7C();
  swift_release();
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    v20 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
    if (v20)
    {
      aBlock[0] = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      v9 = sub_1BCB648D4();
      swift_bridgeObjectRelease();
      if (!v9)
      {
        v48 = v2;
        swift_bridgeObjectRelease();
        v14 = MEMORY[0x1E0DEE9D8];
        goto LABEL_15;
      }
      if (v9 >= 1)
      {
        v48 = v2;
LABEL_6:
        for (i = 0; i != v9; ++i)
        {
          if ((v8 & 0xC000000000000001) != 0)
            v11 = (id)MEMORY[0x1BCCFCF20](i, v8);
          else
            v11 = *(id *)(v8 + 8 * i + 32);
          v12 = v11;
          v13 = objc_msgSend(v11, sel_firstOntologyCoding);

          if (v13)
          {
            sub_1BCB64820();
            sub_1BCB64850();
            sub_1BCB6485C();
            sub_1BCB6482C();
          }
          else
          {

          }
        }
        swift_bridgeObjectRelease();
        v14 = aBlock[0];
LABEL_15:
        aBlock[0] = MEMORY[0x1E0DEE9D8];
        if (v14 < 0 || (v14 & 0x4000000000000000) != 0)
        {
          swift_retain();
          v15 = sub_1BCB648D4();
          if (v15)
            goto LABEL_18;
        }
        else
        {
          v15 = *(_QWORD *)(v14 + 16);
          swift_retain();
          if (v15)
          {
LABEL_18:
            if (v15 < 1)
            {
              __break(1u);
              goto LABEL_50;
            }
            for (j = 0; j != v15; ++j)
            {
              if ((v14 & 0xC000000000000001) != 0)
                v17 = (id)MEMORY[0x1BCCFCF20](j, v14);
              else
                v17 = *(id *)(v14 + 8 * j + 32);
              v18 = v17;
              objc_opt_self();
              if (swift_dynamicCastObjCClass())
              {
                MEMORY[0x1BCCFCA1C]();
                if (*(_QWORD *)((aBlock[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((aBlock[0] & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
                  sub_1BCB64304();
                sub_1BCB64334();
                sub_1BCB642EC();
              }
              else
              {

              }
            }
            swift_release();
            v19 = aBlock[0];
LABEL_37:
            swift_release();
            sub_1BCB2DE98();
            v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D2C418]), sel_initWithHealthStore_, v1[7].isa);
            v23 = dispatch_semaphore_create(0);
            v14 = swift_allocObject();
            *(_BYTE *)(v14 + 16) = 0;
            v47 = v14 + 16;
            sub_1BCB3C328(v19);
            swift_bridgeObjectRelease();
            sub_1BCAFC2E0(0, (unint64_t *)&qword_1EDA144A8);
            sub_1BCB2BB50(&qword_1EF487BF0, (unint64_t *)&qword_1EDA144A8);
            v24 = (void *)sub_1BCB643F4();
            swift_bridgeObjectRelease();
            sub_1BCAFC2E0(0, &qword_1EF487720);
            sub_1BCB2BB50((unint64_t *)&qword_1EF487728, &qword_1EF487720);
            v25 = (void *)sub_1BCB643F4();
            swift_bridgeObjectRelease();
            v26 = swift_allocObject();
            swift_weakInit();
            v27 = (_QWORD *)swift_allocObject();
            v27[2] = v26;
            v27[3] = v23;
            isa = v51.isa;
            v27[4] = v14;
            v27[5] = isa;
            aBlock[4] = (uint64_t)sub_1BCB31098;
            aBlock[5] = (uint64_t)v27;
            aBlock[0] = MEMORY[0x1E0C809B0];
            aBlock[1] = 1107296256;
            aBlock[2] = (uint64_t)sub_1BCB2DDE0;
            aBlock[3] = (uint64_t)&block_descriptor_25;
            v29 = _Block_copy(aBlock);
            v1 = v23;
            swift_retain();
            swift_release();
            v46 = v22;
            objc_msgSend(v22, sel_interactionResultsForMedications_lifestyleFactors_completion_, v24, v25, v29);
            _Block_release(v29);

            sub_1BCB63FE0();
            v30 = v49;
            MEMORY[0x1BCCFC764](v5, 3.0);
            v31 = *(void (**)(char *, uint64_t))(v50 + 8);
            v32 = v48;
            v31(v5, v48);
            LOBYTE(v29) = sub_1BCB645A4();
            v31(v30, v32);
            if ((v29 & 1) != 0)
            {
              if (qword_1EDA14510 != -1)
                swift_once();
              v41 = sub_1BCB63DDC();
              __swift_project_value_buffer(v41, (uint64_t)qword_1EDA14518);
              v34 = sub_1BCB63DD0();
              v35 = sub_1BCB644FC();
              if (os_log_type_enabled(v34, v35))
              {
                v36 = (uint8_t *)swift_slowAlloc();
                v37 = swift_slowAlloc();
                aBlock[0] = v37;
                *(_DWORD *)v36 = 136446210;
                v42 = sub_1BCB64B14();
                v53 = sub_1BCB010C8(v42, v43, aBlock);
                sub_1BCB64640();
                swift_bridgeObjectRelease();
                v40 = "[%{public}s] Timed out fetching ddi interaction info for analytics.";
                goto LABEL_45;
              }
LABEL_46:

              goto LABEL_47;
            }
            if (qword_1EDA14510 == -1)
            {
LABEL_39:
              v33 = sub_1BCB63DDC();
              __swift_project_value_buffer(v33, (uint64_t)qword_1EDA14518);
              v34 = sub_1BCB63DD0();
              v35 = sub_1BCB64514();
              if (os_log_type_enabled(v34, v35))
              {
                v36 = (uint8_t *)swift_slowAlloc();
                v37 = swift_slowAlloc();
                aBlock[0] = v37;
                *(_DWORD *)v36 = 136446210;
                v38 = sub_1BCB64B14();
                v53 = sub_1BCB010C8(v38, v39, aBlock);
                sub_1BCB64640();
                swift_bridgeObjectRelease();
                v40 = "[%{public}s] Successfully fetched ddi interaction info for analytics.";
LABEL_45:
                _os_log_impl(&dword_1BCAF3000, v34, v35, v40, v36, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x1BCCFD928](v37, -1, -1);
                MEMORY[0x1BCCFD928](v36, -1, -1);

LABEL_47:
                swift_beginAccess();
                v21 = *(unsigned __int8 *)(v14 + 16);
                swift_release();
                return v21;
              }
              goto LABEL_46;
            }
LABEL_50:
            swift_once();
            goto LABEL_39;
          }
        }
        swift_release();
        v19 = MEMORY[0x1E0DEE9D8];
        goto LABEL_37;
      }
      __break(1u);
    }
  }
  else
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v9)
    {
      v48 = v2;
      aBlock[0] = MEMORY[0x1E0DEE9D8];
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

id sub_1BCB30350()
{
  id *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t inited;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  id result;
  void *v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  void **v27;
  dispatch_semaphore_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  id v32;
  id v33;
  uint64_t v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*isa)(char *, uint64_t);
  void *v45;
  void *v46;
  id v47;
  char *v48;
  void *v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  id v52;
  char *v53;
  char *v54;
  void *v55;
  id v56;
  void *v57;
  void *v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD v69[2];
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  id v75;
  id v76;
  id v77;
  __int128 v78;
  char *v79;
  char *v80;
  NSObject *v81;
  uint64_t v82;
  id v83;
  id v84;
  uint64_t v85;
  uint64_t aBlock[6];

  v83 = *v0;
  v1 = sub_1BCB63B3C();
  v70 = *(_QWORD *)(v1 - 8);
  v2 = MEMORY[0x1E0C80A78](v1);
  v71 = (char *)v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x1E0C80A78](v2);
  v73 = (char *)v69 - v5;
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v69 - v6;
  v8 = sub_1BCB63FEC();
  v81 = *(NSObject **)(v8 - 8);
  v82 = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  v79 = (char *)v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v80 = (char *)v69 - v11;
  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB6780]), sel_init);
  sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA14550, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BCB665A0;
  *(_QWORD *)(inited + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, 4);
  *(_QWORD *)(inited + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, 5);
  aBlock[0] = inited;
  sub_1BCB642EC();
  v14 = aBlock[0];
  if ((unint64_t)aBlock[0] >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = *(_QWORD *)((aBlock[0] & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v74 = v1;
  v72 = v7;
  if (v15)
    sub_1BCB04DB8(v14);
  v84 = v12;
  swift_bridgeObjectRelease();
  v16 = (void *)objc_opt_self();
  sub_1BCAFC2E0(0, &qword_1EF487720);
  sub_1BCB2BB50((unint64_t *)&qword_1EF487728, &qword_1EF487720);
  v17 = (void *)sub_1BCB643F4();
  swift_bridgeObjectRelease();
  v18 = objc_msgSend(v16, sel_predicateForMedicationDoseEventWithStatuses_, v17);

  sub_1BCAFC2E0(0, &qword_1EF487DE8);
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_medicationDoseEventTypeForIdentifier_, *MEMORY[0x1E0CB5418]);
  if (result)
  {
    v20 = result;
    v21 = objc_allocWithZone(MEMORY[0x1E0CB6A88]);
    v76 = v20;
    v77 = v18;
    v22 = objc_msgSend(v21, sel_initWithSampleType_predicate_, v20, v18);
    sub_1BCB6413C();
    v23 = objc_allocWithZone(MEMORY[0x1E0CB3928]);
    v24 = (void *)sub_1BCB6410C();
    swift_bridgeObjectRelease();
    v25 = objc_msgSend(v23, sel_initWithKey_ascending_, v24, 1);

    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = 0;
    v27 = (void **)(v26 + 16);
    v28 = dispatch_semaphore_create(0);
    v29 = swift_allocObject();
    v78 = xmmword_1BCB66010;
    *(_OWORD *)(v29 + 16) = xmmword_1BCB66010;
    *(_QWORD *)(v29 + 32) = v22;
    aBlock[0] = v29;
    sub_1BCB642EC();
    v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = v78;
    *(_QWORD *)(v30 + 32) = v25;
    aBlock[0] = v30;
    sub_1BCB642EC();
    v31 = (_QWORD *)swift_allocObject();
    v31[2] = v28;
    v31[3] = v26;
    v31[4] = v83;
    v32 = objc_allocWithZone(MEMORY[0x1E0CB6AF8]);
    sub_1BCAFC2E0(0, &qword_1EF487DF0);
    *(_QWORD *)&v78 = v22;
    v33 = v25;
    v34 = v26;
    v75 = v33;
    v35 = v28;
    swift_retain();
    v36 = (void *)sub_1BCB642C8();
    swift_bridgeObjectRelease();
    sub_1BCAFC2E0(0, &qword_1EDA14548);
    v37 = (void *)sub_1BCB642C8();
    swift_bridgeObjectRelease();
    aBlock[4] = (uint64_t)sub_1BCB31034;
    aBlock[5] = (uint64_t)v31;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1BCB2EBA0;
    aBlock[3] = (uint64_t)&block_descriptor_15;
    v38 = _Block_copy(aBlock);
    v39 = objc_msgSend(v32, sel_initWithQueryDescriptors_limit_sortDescriptors_resultsHandler_, v36, 1, v37, v38);

    _Block_release(v38);
    swift_release();
    v40 = v84;
    objc_msgSend(v84, sel_executeQuery_, v39);
    v41 = v79;
    sub_1BCB63FE0();
    v42 = v80;
    MEMORY[0x1BCCFC764](v41, 3.0);
    v43 = v82;
    isa = (void (*)(char *, uint64_t))v81[1].isa;
    isa(v41, v82);
    LOBYTE(v41) = sub_1BCB645A4();
    isa(v42, v43);
    if ((v41 & 1) != 0)
    {
      if (qword_1EDA14510 != -1)
        swift_once();
      v62 = sub_1BCB63DDC();
      __swift_project_value_buffer(v62, (uint64_t)qword_1EDA14518);
      v63 = sub_1BCB63DD0();
      v64 = sub_1BCB644FC();
      if (os_log_type_enabled(v63, v64))
      {
        v65 = (uint8_t *)swift_slowAlloc();
        v66 = swift_slowAlloc();
        aBlock[0] = v66;
        *(_DWORD *)v65 = 136446210;
        v67 = sub_1BCB64B14();
        v85 = sub_1BCB010C8(v67, v68, aBlock);
        sub_1BCB64640();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1BCAF3000, v63, v64, "[%{public}s] Timed out fetching oldest dose event for analytics.", v65, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BCCFD928](v66, -1, -1);
        MEMORY[0x1BCCFD928](v65, -1, -1);
        swift_release();

      }
      else
      {
        swift_release();

      }
    }
    else
    {
      swift_beginAccess();
      v45 = *v27;
      if (*v27)
      {
        v46 = *(void **)(v69[1] + 16);
        v83 = v45;
        v47 = objc_msgSend(v83, sel_startDate);
        v48 = v73;
        sub_1BCB63B18();

        v49 = (void *)sub_1BCB63B00();
        v81 = v35;
        v50 = *(void (**)(char *, uint64_t))(v70 + 8);
        v51 = v74;
        v50(v48, v74);
        v52 = objc_msgSend(v46, sel_startOfDayForDate_, v49);

        v82 = v34;
        v53 = v72;
        sub_1BCB63B18();

        v54 = v71;
        sub_1BCB63B24();
        v55 = (void *)sub_1BCB63B00();
        v50(v54, v51);
        v56 = objc_msgSend(v46, sel_startOfDayForDate_, v55);

        sub_1BCB63B18();
        v57 = (void *)sub_1BCB63B00();
        v58 = (void *)sub_1BCB63B00();
        v59 = (id)HKMedicationAnalyticsWeeksBetweenDates();

        v60 = objc_msgSend(v59, sel_stringValue);
        v61 = sub_1BCB6413C();

        v50(v48, v51);
        v50(v53, v51);
        swift_release();
        return (id)v61;
      }

      swift_release();
    }
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for MedicationRoomInteractionEvent()
{
  return objc_opt_self();
}

uint64_t method lookup function for MedicationRoomInteractionEvent()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MedicationRoomInteractionEvent.__allocating_init(action:roomType:provenance:calendarCache:hasSideEffectsContent:hasPregnancyContent:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of MedicationRoomInteractionEvent.isEventSubmissionIHAGated.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of MedicationRoomInteractionEvent.eventName.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of MedicationRoomInteractionEvent.makeUnrestrictedEventPayload(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of MedicationRoomInteractionEvent.makeIHAGatedEventPayload(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

_QWORD *initializeBufferWithCopyOfBuffer for MedicationRoomInteractionEvent.AnalyticsEventPayloadError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for MedicationRoomInteractionEvent.AnalyticsEventPayloadError()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for MedicationRoomInteractionEvent.AnalyticsEventPayloadError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for MedicationRoomInteractionEvent.AnalyticsEventPayloadError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicationRoomInteractionEvent.AnalyticsEventPayloadError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicationRoomInteractionEvent.AnalyticsEventPayloadError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicationRoomInteractionEvent.AnalyticsEventPayloadError()
{
  return &type metadata for MedicationRoomInteractionEvent.AnalyticsEventPayloadError;
}

void sub_1BCB30F10()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF487988)
  {
    sub_1BCAFC2E0(255, (unint64_t *)&qword_1EDA139E0);
    v0 = sub_1BCB64904();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF487988);
  }
}

uint64_t sub_1BCB30F84()
{
  return swift_deallocObject();
}

uint64_t sub_1BCB30F94()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1BCB30FC0(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1BCB2E7E0(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t sub_1BCB30FE4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1BCB31008()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void sub_1BCB31034(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3;

  sub_1BCB2E180(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_1BCB31040()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BCB31064()
{
  uint64_t v0;

  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BCB31098(unint64_t a1, void *a2)
{
  uint64_t *v2;

  return sub_1BCB2D7E0(a1, a2, v2[2], v2[3], v2[4]);
}

void sub_1BCB310A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF487E18)
  {
    sub_1BCAFC2E0(255, &qword_1EF487E08);
    sub_1BCB2BB50(&qword_1EF487E10, &qword_1EF487E08);
    v0 = sub_1BCB64424();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF487E18);
  }
}

uint64_t sub_1BCB31134(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

void sub_1BCB31140()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF487990)
  {
    v0 = sub_1BCB64904();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF487990);
  }
}

void sub_1BCB311A8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF487E20)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF487E20);
  }
}

void sub_1BCB31210()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EDA139E8)
  {
    type metadata accessor for Key(255);
    sub_1BCAF7D24(&qword_1EDA13990, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BCB65E60);
    v0 = sub_1BCB64904();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EDA139E8);
  }
}

uint64_t HKMedicationScheduleItemQueryDescriptor.init(_:toDate:identifier:sortDescriptors:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  int *Descriptor;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;

  v14 = sub_1BCB63B3C();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v15(a7, 1, 1, v14);
  Descriptor = (int *)type metadata accessor for HKMedicationScheduleItemQueryDescriptor(0, a6, v16, v17);
  v19 = a7 + Descriptor[7];
  v15(v19, 1, 1, v14);
  v20 = (_QWORD *)(a7 + Descriptor[8]);
  *v20 = 0;
  v20[1] = 0;
  v21 = Descriptor[9];
  *(_QWORD *)(a7 + v21) = 0;
  sub_1BCB64064();
  sub_1BCB067E8(a1, a7);
  sub_1BCB067E8(a2, v19);
  swift_bridgeObjectRelease();
  *v20 = a3;
  v20[1] = a4;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a7 + v21) = a5;
  return result;
}

uint64_t type metadata accessor for HKMedicationScheduleItemQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HKMedicationScheduleItemQueryDescriptor);
}

uint64_t HKMedicationScheduleItemQueryDescriptor.result(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  return swift_task_switch();
}

uint64_t sub_1BCB313D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v2 = v0[12];
  v1 = v0[13];
  v3 = (void *)v0[11];
  v0[7] = v0 + 10;
  v0[2] = v0;
  v0[3] = sub_1BCB31440;
  v4 = swift_continuation_init();
  sub_1BCB31670(v4, v1, v3, *(_QWORD *)(v2 + 16));
  return swift_continuation_await();
}

uint64_t sub_1BCB31440()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (!*(_QWORD *)(v1 + 48))
    return (*(uint64_t (**)(_QWORD))(v1 + 8))(*(_QWORD *)(v1 + 80));
  swift_willThrow();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t HKMedicationScheduleItemQueryDescriptor.fromDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BCB05320(v1, a1);
}

uint64_t HKMedicationScheduleItemQueryDescriptor.fromDate.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1BCB067E8(a1, v1);
}

uint64_t (*HKMedicationScheduleItemQueryDescriptor.fromDate.modify())()
{
  return nullsub_1;
}

uint64_t HKMedicationScheduleItemQueryDescriptor.toDate.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1BCB05320(v2 + *(int *)(a1 + 28), a2);
}

uint64_t HKMedicationScheduleItemQueryDescriptor.toDate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1BCB067E8(a1, v2 + *(int *)(a2 + 28));
}

uint64_t (*HKMedicationScheduleItemQueryDescriptor.toDate.modify())()
{
  return nullsub_1;
}

uint64_t HKMedicationScheduleItemQueryDescriptor.identifier.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 32));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HKMedicationScheduleItemQueryDescriptor.identifier.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 32));
  result = swift_bridgeObjectRelease();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*HKMedicationScheduleItemQueryDescriptor.identifier.modify())()
{
  return nullsub_1;
}

uint64_t HKMedicationScheduleItemQueryDescriptor.sortDescriptors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HKMedicationScheduleItemQueryDescriptor.sortDescriptors.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 36);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t (*HKMedicationScheduleItemQueryDescriptor.sortDescriptors.modify())()
{
  return nullsub_1;
}

uint64_t HKMedicationScheduleItemQueryDescriptor.queryAttributes.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 40);
  v5 = sub_1BCB64070();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t HKMedicationScheduleItemQueryDescriptor.queryAttributes.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 40);
  v5 = sub_1BCB64070();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*HKMedicationScheduleItemQueryDescriptor.queryAttributes.modify())()
{
  return nullsub_1;
}

void sub_1BCB31670(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Descriptor;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_1BCB06664();
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v30 - v12;
  Descriptor = type metadata accessor for HKMedicationScheduleItemQueryDescriptor(0, a4, v14, v15);
  v17 = Descriptor;
  v18 = *(_QWORD *)(a2 + *(int *)(Descriptor + 36));
  if (v18)
  {
    v31 = a1;
    v32 = v18;
    MEMORY[0x1E0C80A78](Descriptor);
    *(&v30 - 2) = a4;
    sub_1BCB63A1C();
    v19 = sub_1BCB64358();
    v20 = (char *)sub_1BCAFC2E0(0, &qword_1EDA14548);
    v21 = MEMORY[0x1BCCFD874](MEMORY[0x1E0DEAF50], v19);
    v23 = sub_1BCB55F28((void (*)(char *, char *))sub_1BCB328B8, (uint64_t)(&v30 - 4), v19, v20, MEMORY[0x1E0DEDCE8], v21, MEMORY[0x1E0DEDD18], v22);
    a1 = v31;
  }
  else
  {
    v23 = 0;
  }
  sub_1BCB05320(a2, (uint64_t)v13);
  sub_1BCB05320(a2 + *(int *)(v17 + 28), (uint64_t)v11);
  v24 = (uint64_t *)(a2 + *(int *)(v17 + 32));
  v25 = *v24;
  v26 = v24[1];
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = a3;
  *(_QWORD *)(v27 + 24) = a1;
  objc_allocWithZone(MEMORY[0x1E0D2C4B8]);
  swift_bridgeObjectRetain();
  v28 = a3;
  v29 = sub_1BCB326E8((uint64_t)v13, (uint64_t)v11, v25, v26, v23, (uint64_t)sub_1BCB09BE8, v27);
  sub_1BCB645E0();
  objc_msgSend(v28, sel_executeQuery_, v29);

}

uint64_t sub_1BCB3189C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v4 = sub_1BCB63A1C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v9 - v6;
  sub_1BCAFC2E0(0, &qword_1EDA14548);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  result = sub_1BCB64550();
  *a2 = result;
  return result;
}

uint64_t sub_1BCB3195C(uint64_t a1, uint64_t a2, void *a3, id a4, uint64_t a5)
{
  void *v9;
  _QWORD *v10;
  id v11;
  void *v12;

  objc_msgSend(a4, sel_stopQuery_, a1);
  if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(a5 + 64) + 40) = a2;
    swift_bridgeObjectRetain();
    return swift_continuation_throwingResume();
  }
  else
  {
    if (a3)
    {
      v9 = a3;
    }
    else
    {
      type metadata accessor for HKError(0);
      sub_1BCB51E10(MEMORY[0x1E0DEE9D8]);
      sub_1BCB3298C();
      sub_1BCB63A88();
      v9 = v12;
    }
    sub_1BCB052CC();
    swift_allocError();
    *v10 = v9;
    v11 = a3;
    return swift_continuation_throwingResumeWithError();
  }
}

uint64_t sub_1BCB31A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;

  *(_QWORD *)(v4 + 16) = a1;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v7;
  *v7 = v4;
  v7[1] = sub_1BCB31ACC;
  v7[12] = a3;
  v7[13] = v3;
  v7[11] = a2;
  return swift_task_switch();
}

uint64_t sub_1BCB31ACC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1BCB31B28()
{
  return swift_allocateGenericValueMetadata();
}

void sub_1BCB31B30()
{
  unint64_t v0;
  unint64_t v1;

  sub_1BCB06664();
  if (v0 <= 0x3F)
  {
    sub_1BCB64070();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *sub_1BCB31BC8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1BCB63B3C();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      sub_1BCB06664();
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v12 = a3[7];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    if (v9((uint64_t *)((char *)a2 + v12), 1, v7))
    {
      sub_1BCB06664();
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    }
    v16 = a3[8];
    v17 = a3[9];
    v18 = (uint64_t *)((char *)a1 + v16);
    v19 = (uint64_t *)((char *)a2 + v16);
    v20 = v19[1];
    v21 = *(uint64_t *)((char *)a2 + v17);
    *v18 = *v19;
    v18[1] = v20;
    *(uint64_t *)((char *)a1 + v17) = v21;
    v22 = a3[10];
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    v25 = sub_1BCB64070();
    v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v26(v23, v24, v25);
  }
  return a1;
}

uint64_t sub_1BCB31D70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_1BCB63B3C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v7 = a1 + *(int *)(a2 + 28);
  if (!v6(v7, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = a1 + *(int *)(a2 + 40);
  v9 = sub_1BCB64070();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

char *sub_1BCB31E40(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);

  v6 = sub_1BCB63B3C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_1BCB06664();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = a3[7];
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    sub_1BCB06664();
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  v14 = a3[8];
  v15 = a3[9];
  v16 = &a1[v14];
  v17 = &a2[v14];
  v18 = *((_QWORD *)v17 + 1);
  v19 = *(_QWORD *)&a2[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *((_QWORD *)v16 + 1) = v18;
  *(_QWORD *)&a1[v15] = v19;
  v20 = a3[10];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = sub_1BCB64070();
  v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24(v21, v22, v23);
  return a1;
}

char *sub_1BCB31FBC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v6 = sub_1BCB63B3C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    sub_1BCB06664();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[7];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v8(&a1[v12], 1, v6);
  v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v13, v14, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    sub_1BCB06664();
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
LABEL_13:
  v18 = a3[8];
  v19 = &a1[v18];
  v20 = &a2[v18];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21 = a3[10];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = sub_1BCB64070();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 24))(v22, v23, v24);
  return a1;
}

char *sub_1BCB321E0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = sub_1BCB63B3C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_1BCB06664();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = a3[7];
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    sub_1BCB06664();
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  v14 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  v15 = a3[10];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = sub_1BCB64070();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

char *sub_1BCB32340(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v6 = sub_1BCB63B3C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    sub_1BCB06664();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[7];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v8(&a1[v12], 1, v6);
  v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v13, v14, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    sub_1BCB06664();
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
LABEL_13:
  v18 = a3[8];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v22 = *(_QWORD *)v20;
  v21 = *((_QWORD *)v20 + 1);
  *(_QWORD *)v19 = v22;
  *((_QWORD *)v19 + 1) = v21;
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  swift_bridgeObjectRelease();
  v23 = a3[10];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = sub_1BCB64070();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  return a1;
}

uint64_t sub_1BCB3254C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCB32558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;

  sub_1BCB06664();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 8);
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = sub_1BCB64070();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v11);
  }
}

uint64_t sub_1BCB32610()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1BCB3261C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  sub_1BCB06664();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 32) + 8) = a2;
      return;
    }
    v10 = sub_1BCB64070();
    v12 = a1 + *(int *)(a4 + 40);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  v11(v12, a2, a2, v10);
}

uint64_t sub_1BCB326C4()
{
  uint64_t v0;

  return swift_deallocObject();
}

id sub_1BCB326E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, uint64_t, uint64_t);
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v24;
  _QWORD aBlock[6];

  v13 = sub_1BCB63B3C();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  v16 = 0;
  if (v15(a1, 1, v13) != 1)
  {
    v16 = (void *)sub_1BCB63B00();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v13);
  }
  if (v15(a2, 1, v13) == 1)
  {
    v17 = 0;
  }
  else
  {
    v17 = (void *)sub_1BCB63B00();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a2, v13);
  }
  v18 = a7;
  if (!a4)
  {
    v19 = 0;
    if (a5)
      goto LABEL_8;
LABEL_10:
    v20 = 0;
    goto LABEL_11;
  }
  v19 = (void *)sub_1BCB6410C();
  swift_bridgeObjectRelease();
  if (!a5)
    goto LABEL_10;
LABEL_8:
  sub_1BCAFC2E0(0, &qword_1EDA14548);
  v20 = (void *)sub_1BCB642C8();
  swift_bridgeObjectRelease();
LABEL_11:
  aBlock[4] = a6;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BCB328D4;
  aBlock[3] = &block_descriptor_4;
  v21 = _Block_copy(aBlock);
  v22 = objc_msgSend(v24, sel_initWithFromDate_toDate_identifier_sortDescriptors_resultsHandler_, v16, v17, v19, v20, v21);

  _Block_release(v21);
  swift_release();
  return v22;
}

uint64_t sub_1BCB328B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BCB3189C(a1, a2);
}

uint64_t sub_1BCB328D4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v7)(id, uint64_t, void *);
  id v8;
  id v9;

  v5 = a3;
  v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_1BCAFC2E0(0, (unint64_t *)&unk_1EDA14490);
    v5 = sub_1BCB642D4();
  }
  swift_retain();
  v8 = a2;
  v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

unint64_t sub_1BCB3298C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF487268;
  if (!qword_1EF487268)
  {
    type metadata accessor for HKError(255);
    result = MEMORY[0x1BCCFD874](&unk_1BCB65EA4, v1);
    atomic_store(result, (unint64_t *)&qword_1EF487268);
  }
  return result;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1BCCFD7FC](a1, v6, a5);
}

uint64_t NotificationActionHandler.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t NotificationActionHandler.doseEventStatus.getter()
{
  _QWORD *v0;
  uint64_t result;

  result = 4;
  switch(*v0)
  {
    case 1:
    case 5:
      return result;
    case 2:
    case 6:
      result = 5;
      break;
    case 3:
      result = 3;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t NotificationActionHandler.analyticsInteraction.getter()
{
  _QWORD *v0;
  uint64_t result;

  result = 2;
  switch(*v0)
  {
    case 1:
    case 5:
      result = 4;
      break;
    case 2:
    case 6:
      result = 5;
      break;
    case 3:
      result = 6;
      break;
    case 4:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

ValueMetadata *type metadata accessor for NotificationActionHandler()
{
  return &type metadata for NotificationActionHandler;
}

uint64_t HKMedicationScheduleControl.fetchAllMedicationSchedules()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return swift_task_switch();
}

uint64_t sub_1BCB32AE4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[3];
  v2 = swift_task_alloc();
  v0[4] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v0[5] = v3;
  sub_1BCB32D80(0);
  *v3 = v0;
  v3[1] = sub_1BCB32B90;
  return sub_1BCB64A18();
}

uint64_t sub_1BCB32B90()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1BCB32BFC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1BCB32C08()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1BCB32C3C(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[6];

  sub_1BCB337E4(0, &qword_1EF487E50, MEMORY[0x1E0DF05D8]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)aBlock - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)aBlock - v7, a1, v5);
  v9 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, v8, v5);
  aBlock[4] = sub_1BCB338C4;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BCB1AB2C;
  aBlock[3] = &block_descriptor_19;
  v11 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_fetchAllSchedulesWithCompletion_, v11);
  _Block_release(v11);
}

void sub_1BCB32D78(uint64_t a1)
{
  uint64_t v1;

  sub_1BCB32C3C(a1, *(void **)(v1 + 16));
}

void sub_1BCB32D80(uint64_t a1)
{
  sub_1BCAFC448(a1, &qword_1EDA13950, (uint64_t (*)(uint64_t))sub_1BCB32D9C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

unint64_t sub_1BCB32D9C()
{
  unint64_t result;

  result = qword_1EDA14480;
  if (!qword_1EDA14480)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EDA14480);
  }
  return result;
}

uint64_t sub_1BCB32DD8(uint64_t a1, id a2)
{
  id v4;

  if (a1)
  {
    sub_1BCB337E4(0, &qword_1EF487E50, MEMORY[0x1E0DF05D8]);
    swift_bridgeObjectRetain();
    return sub_1BCB64388();
  }
  else
  {
    if (!a2)
    {
      type metadata accessor for HKError(0);
      sub_1BCB51E10(MEMORY[0x1E0DEE9D8]);
      sub_1BCAF7D24((unint64_t *)&qword_1EF487268, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_1BCB65EA4);
      sub_1BCB63A88();
    }
    v4 = a2;
    sub_1BCB337E4(0, &qword_1EF487E50, MEMORY[0x1E0DF05D8]);
    return sub_1BCB6437C();
  }
}

uint64_t HKMedicationScheduleControl.schedulePublisher(for:using:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v12;

  sub_1BCB33018();
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v1;
  *(_QWORD *)(v8 + 24) = a1;
  sub_1BCB337E4(0, &qword_1EDA13928, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0C960D8]);
  sub_1BCB33088();
  v9 = v1;
  swift_bridgeObjectRetain();
  sub_1BCB63F14();
  sub_1BCAF7D24(&qword_1EDA13930, (uint64_t (*)(uint64_t))sub_1BCB33018, MEMORY[0x1E0C96148]);
  v10 = sub_1BCB63F68();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v10;
}

void sub_1BCB33018()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EDA13938)
  {
    sub_1BCB337E4(255, &qword_1EDA13928, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0C960D8]);
    sub_1BCB33088();
    v0 = sub_1BCB63F20();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EDA13938);
  }
}

unint64_t sub_1BCB33088()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDA13920;
  if (!qword_1EDA13920)
  {
    sub_1BCB337E4(255, &qword_1EDA13928, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0C960D8]);
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0C96108], v1);
    atomic_store(result, (unint64_t *)&qword_1EDA13920);
  }
  return result;
}

uint64_t sub_1BCB330E0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  id v7;
  uint64_t result;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  sub_1BCB337E4(0, &qword_1EDA13928, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0C960D8]);
  swift_allocObject();
  v7 = a1;
  swift_bridgeObjectRetain();
  result = sub_1BCB63EFC();
  *a3 = result;
  return result;
}

uint64_t sub_1BCB33180@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1BCB330E0(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1BCB33188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  sub_1BCAFC448(0, (unint64_t *)&unk_1EDA14470, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v15 - v8;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  v11 = sub_1BCB643B8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v12;
  v13[5] = a4;
  v13[6] = sub_1BCB33328;
  v13[7] = v10;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1BCB1A334((uint64_t)v9, (uint64_t)&unk_1EF487E48, (uint64_t)v13);
  swift_release();
  return sub_1BCB33684((uint64_t)v9);
}

uint64_t objectdestroyTm_1()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BCB332FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1BCB33188(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1BCB33304()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BCB33328(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_1BCB33360()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BCB33384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[21] = a6;
  v7[22] = a7;
  v7[19] = a4;
  v7[20] = a5;
  return swift_task_switch();
}

uint64_t sub_1BCB333A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 152) + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1BCCFD9C4](v1);
  *(_QWORD *)(v0 + 184) = v2;
  if (!v2)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = (void *)v2;
  v4 = sub_1BCB642C8();
  *(_QWORD *)(v0 + 192) = v4;
  *(_QWORD *)(v0 + 56) = v0 + 144;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1BCB3349C;
  v5 = swift_continuation_init();
  *(_QWORD *)(v0 + 80) = MEMORY[0x1E0C809B0];
  v6 = (_QWORD *)(v0 + 80);
  v6[1] = 0x40000000;
  v6[2] = sub_1BCB336D8;
  v6[3] = &block_descriptor_5;
  v6[4] = v5;
  objc_msgSend(v3, sel_fetchSchedulesWithMedicationIdentifiers_completion_, v4, v6);
  return swift_continuation_await();
}

uint64_t sub_1BCB3349C()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 200) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_1BCB334FC()
{
  uint64_t v0;
  void *v1;
  void (*v2)(uint64_t, _QWORD);
  uint64_t v3;

  v1 = *(void **)(v0 + 184);
  v2 = *(void (**)(uint64_t, _QWORD))(v0 + 168);
  v3 = *(_QWORD *)(v0 + 144);

  if (!v3)
    v3 = MEMORY[0x1E0DEE9D8];
  v2(v3, 0);

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCB33564()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void (*v4)(void *, uint64_t);
  id v5;

  v2 = *(void **)(v0 + 192);
  v1 = *(void **)(v0 + 200);
  v3 = *(void **)(v0 + 184);
  v4 = *(void (**)(void *, uint64_t))(v0 + 168);
  swift_willThrow();

  v5 = v1;
  v4(v1, 1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCB335E4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BCB33620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  v4 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_1BCB092B8;
  *(_OWORD *)(v2 + 168) = v4;
  *(_OWORD *)(v2 + 152) = v3;
  return swift_task_switch();
}

uint64_t sub_1BCB33684(uint64_t a1)
{
  uint64_t v2;

  sub_1BCAFC448(0, (unint64_t *)&unk_1EDA14470, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BCB336D8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  _QWORD *v5;
  id v6;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    sub_1BCB052CC();
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    v8 = 0;
    if (a2)
    {
      sub_1BCB32D9C();
      v8 = sub_1BCB642D4();
    }
    v9 = v8;
    sub_1BCB33788((uint64_t)&v9, *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40));
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1BCB33788(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BCAFC448(0, &qword_1EDA13958, (uint64_t (*)(uint64_t))sub_1BCB32D80, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1BCB337E4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_1BCB32D80(255);
    v7 = v6;
    v8 = sub_1BCB052CC();
    v9 = a3(a1, v7, v8, MEMORY[0x1E0DEDB38]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_1BCB33854()
{
  uint64_t v0;
  uint64_t v1;

  sub_1BCB337E4(0, &qword_1EF487E50, MEMORY[0x1E0DF05D8]);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_1BCB338C4(uint64_t a1, void *a2)
{
  sub_1BCB337E4(0, &qword_1EF487E50, MEMORY[0x1E0DF05D8]);
  return sub_1BCB32DD8(a1, a2);
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t sub_1BCB33938()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = MedicationShape.rawValue.getter();
  v2 = v1;
  if (v0 == MedicationShape.rawValue.getter() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1BCB649F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

BOOL sub_1BCB339CC(char a1, char a2)
{
  return a1 == a2;
}

id HKConcept.clinicalProduct.getter()
{
  void *v0;
  id v1;

  if (objc_msgSend(v0, sel_meds_isClinicalProduct))
  {
    v1 = v0;
  }
  else if (objc_msgSend(v0, sel_meds_isSpecificProduct))
  {
    return objc_msgSend(v0, sel_firstConceptOfRelationshipType_, 798);
  }
  else
  {
    return 0;
  }
  return v0;
}

uint64_t HKConcept.routedDoseFormName.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;

  if (!objc_msgSend(v0, sel_meds_isRoutedDoseFormProduct))
    return 0;
  v1 = objc_msgSend(v0, sel_meds_preferredNameForFirstObjectOfRelationshipType_, 982);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = sub_1BCB6413C();

  return v3;
}

uint64_t HKConcept.conceptDisplayName.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, sel_localizedPreferredName);
  if (v1)
  {
    v2 = v1;
    v3 = sub_1BCB6413C();
  }
  else
  {
    if (qword_1EDA14148 != -1)
      swift_once();
    v2 = (id)qword_1EDA14130;
    swift_bridgeObjectRetain();
    v3 = sub_1BCB63A34();
    swift_bridgeObjectRelease();
  }

  return v3;
}

uint64_t HKConcept.strengthDisplay.getter()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v8;

  if (objc_msgSend(v0, sel_meds_isClinicalProduct))
  {
    v1 = v0;
  }
  else
  {
    if (!objc_msgSend(v0, sel_meds_isSpecificProduct))
      goto LABEL_7;
    v1 = objc_msgSend(v0, sel_firstConceptOfRelationshipType_, 798);
    if (!v1)
      goto LABEL_7;
  }
  v2 = objc_msgSend(v1, sel_firstAttributeForType_, 984);

  if (v2)
  {
    v3 = objc_msgSend(v2, sel_stringValue);
LABEL_9:
    v5 = v3;

LABEL_10:
    v6 = sub_1BCB6413C();
    goto LABEL_11;
  }
LABEL_7:
  v4 = objc_msgSend(v0, sel_firstAttributeForType_, 984);
  if (v4)
  {
    v2 = v4;
    v3 = objc_msgSend(v4, sel_stringValue);
    goto LABEL_9;
  }
  v8 = objc_msgSend(v0, sel_localizedPreferredName);
  if (v8)
  {
    v5 = v8;
    goto LABEL_10;
  }
  if (qword_1EDA14148 != -1)
    swift_once();
  v5 = (id)qword_1EDA14130;
  swift_bridgeObjectRetain();
  v6 = sub_1BCB63A34();
  swift_bridgeObjectRelease();
LABEL_11:

  return v6;
}

uint64_t MedicationConceptType.init(rawValue:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = result - 73;
  if ((unint64_t)(result - 841) >= 5)
    v2 = 5;
  *a2 = v2;
  return result;
}

id MedicationConceptType.conceptIdentifier.getter()
{
  unsigned __int8 *v0;

  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB64B0]), sel_initWithRawIdentifier_, *v0 + 841);
}

uint64_t MedicationConceptType.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0 + 841;
}

uint64_t MedicationConceptType.debugDescription.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, uint64_t))((char *)sub_1BCB33E30 + 4 * byte_1BCB67790[*v0]))(0x6369666963657073, -1192218645498990000);
}

uint64_t sub_1BCB33E30()
{
  return 0x6C6163696E696C63;
}

unint64_t sub_1BCB33E44()
{
  return 0xD000000000000018;
}

unint64_t sub_1BCB33E64()
{
  return 0xD000000000000013;
}

uint64_t sub_1BCB33E80()
{
  return 0x6D614E6564617254;
}

BOOL sub_1BCB33E9C(char *a1, char *a2)
{
  return sub_1BCB339CC(*a1, *a2);
}

uint64_t sub_1BCB33EA8()
{
  sub_1BCB64A90();
  sub_1BCB64AB4();
  return sub_1BCB64AC0();
}

uint64_t sub_1BCB33EEC()
{
  return sub_1BCB64AB4();
}

uint64_t sub_1BCB33F18()
{
  sub_1BCB64A90();
  sub_1BCB64AB4();
  return sub_1BCB64AC0();
}

_QWORD *sub_1BCB33F58@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *result - 841;
  if (v2 >= 5)
    LOBYTE(v2) = 5;
  *a2 = v2;
  return result;
}

void sub_1BCB33F74(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 841;
}

void *HKConcept.formDisplay.getter()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = objc_msgSend(v0, sel_firstAttributeForType_, 796);
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, sel_stringValue);

    v2 = (void *)sub_1BCB6413C();
  }
  v4 = objc_msgSend(v0, sel_firstAttributeForType_, 795);
  v5 = v4;
  if (v4)
  {
    v6 = objc_msgSend(v4, sel_stringValue);

    sub_1BCB6413C();
  }
  return v2;
}

id HKConcept.loggingDoseForm.getter()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;

  if (!objc_msgSend(v0, sel_meds_isSpecificProduct))
    return 0;
  v1 = objc_msgSend(v0, sel_firstConceptOfRelationshipType_, 798);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_msgSend(v1, sel_firstConceptOfRelationshipType_, 798);

  if (v3)
  {
    v4 = objc_msgSend(v3, sel_firstConceptOfRelationshipType_, 982);

    if (v4)
    {
      v3 = objc_msgSend(v4, sel_firstConceptOfRelationshipType_, 797);

      return v3;
    }
    return 0;
  }
  return v3;
}

uint64_t HKConcept.educationalContent.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, sel_allConceptsOfRelationshipType_, 988);
  sub_1BCB34290();
  v2 = sub_1BCB642D4();

  return v2;
}

id HKConcept.tradeName.getter()
{
  return sub_1BCB341B8((SEL *)&selRef_meds_isTradeNameProduct, 985);
}

id HKConcept.ingredientProduct.getter()
{
  return sub_1BCB341B8((SEL *)&selRef_meds_isIngredientProduct, 798);
}

id sub_1BCB341B8(SEL *a1, uint64_t a2)
{
  void *v2;

  if (objc_msgSend(v2, *a1))
    return objc_msgSend(v2, sel_firstConceptOfRelationshipType_, a2);
  else
    return 0;
}

void *HKConcept.firstAttribute(for:)(uint64_t a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;

  v2 = objc_msgSend(v1, sel_firstAttributeForType_, a1);
  v3 = v2;
  if (v2)
  {
    v4 = objc_msgSend(v2, sel_stringValue);

    v3 = (void *)sub_1BCB6413C();
  }
  return v3;
}

unint64_t sub_1BCB34290()
{
  unint64_t result;

  result = qword_1EF487748;
  if (!qword_1EF487748)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF487748);
  }
  return result;
}

unint64_t sub_1BCB342D0()
{
  unint64_t result;

  result = qword_1EF487E58;
  if (!qword_1EF487E58)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for MedicationConceptType, &type metadata for MedicationConceptType);
    atomic_store(result, (unint64_t *)&qword_1EF487E58);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MedicationConceptType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicationConceptType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1BCB343F0 + 4 * byte_1BCB6779A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1BCB34424 + 4 * byte_1BCB67795[v4]))();
}

uint64_t sub_1BCB34424(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCB3442C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCB34434);
  return result;
}

uint64_t sub_1BCB34440(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCB34448);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1BCB3444C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCB34454(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MedicationConceptType()
{
  return &type metadata for MedicationConceptType;
}

uint64_t HKMedicationFreeTextFormTypeCode.localizedFormString.getter(uint64_t a1)
{
  id v2;
  uint64_t v3;

  if (qword_1EDA14148 != -1)
    swift_once();
  HKMedicationFreeTextFormTypeCode.localizationKey.getter(a1);
  v2 = (id)qword_1EDA14130;
  swift_bridgeObjectRetain();
  v3 = sub_1BCB63A34();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v3;
}

unint64_t HKMedicationFreeTextFormTypeCode.localizationKey.getter(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;

  v1 = a1 - 1;
  result = 0xD000000000000017;
  switch(v1)
  {
    case 0:
      return result;
    case 2:
      result = 0xD000000000000016;
      break;
    case 4:
      result = 0xD000000000000014;
      break;
    case 5:
      result = 0xD000000000000013;
      break;
    case 6:
      result = 0xD000000000000017;
      break;
    case 7:
      result = 0xD000000000000019;
      break;
    case 8:
      result = 0xD000000000000016;
      break;
    case 9:
      result = 0xD000000000000016;
      break;
    case 10:
      result = 0xD000000000000018;
      break;
    case 12:
      result = 0xD000000000000016;
      break;
    case 14:
      result = 0xD00000000000001BLL;
      break;
    case 15:
      result = 0xD000000000000016;
      break;
    case 16:
      result = 0xD000000000000017;
      break;
    default:
      result = 0xD000000000000015;
      break;
  }
  return result;
}

uint64_t HKMedicationFreeTextFormTypeCode.englishFormString.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v19;
  _OWORD v20[2];
  _QWORD v21[4];

  sub_1BCB34C30();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1BCB63AC4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EDA14148 != -1)
    swift_once();
  v21[0] = qword_1EDA14130;
  v21[1] = *(_QWORD *)algn_1EDA14138;
  v21[2] = qword_1EDA14140;
  v9 = (id)qword_1EDA14130;
  swift_bridgeObjectRetain();
  LocalizationSource.stringsTable(forLanguageCode:)(28261, 0xE200000000000000, (uint64_t)v4);
  swift_bridgeObjectRelease();

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    v12 = objc_allocWithZone(MEMORY[0x1E0C99D80]);
    v13 = (void *)sub_1BCB63AAC();
    v14 = objc_msgSend(v12, sel_initWithContentsOfURL_, v13);

    if (v14)
    {
      HKMedicationFreeTextFormTypeCode.localizationKey.getter(a1);
      v15 = (void *)sub_1BCB6410C();
      swift_bridgeObjectRelease();
      v16 = objc_msgSend(v14, sel_valueForKey_, v15);

      if (v16)
      {
        sub_1BCB646A0();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v20, 0, sizeof(v20));
      }
      sub_1BCB34C84((uint64_t)v20, (uint64_t)v21);
      if (v21[3])
      {
        if ((swift_dynamicCast() & 1) != 0)
        {

          v11 = v19;
LABEL_16:
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          return v11;
        }
      }
      else
      {
        sub_1BCAFC40C((uint64_t)v21, (uint64_t (*)(_QWORD))sub_1BCB34CC8);
      }
      v17 = (id)qword_1EDA14130;
      swift_bridgeObjectRetain();
      v11 = sub_1BCB63A34();

    }
    else
    {
      HKMedicationFreeTextFormTypeCode.localizationKey.getter(a1);
      v17 = (id)qword_1EDA14130;
      swift_bridgeObjectRetain();
      v11 = sub_1BCB63A34();
    }
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  sub_1BCAFC40C((uint64_t)v4, (uint64_t (*)(_QWORD))sub_1BCB34C30);
  HKMedicationFreeTextFormTypeCode.localizationKey.getter(a1);
  v10 = (id)qword_1EDA14130;
  swift_bridgeObjectRetain();
  v11 = sub_1BCB63A34();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v11;
}

uint64_t static HKMedicationFreeTextFormTypeCode.allFormsAndTheirDisplayInEnglish.getter()
{
  _QWORD *v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v0 = _sSo32HKMedicationFreeTextFormTypeCodeV27HealthMedicationsExperienceE8allCasesSayABGvgZ_0();
  v1 = v0[2];
  if (v1)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    sub_1BCB24890(0, v1, 0);
    v2 = 0;
    v3 = v12;
    do
    {
      v4 = v0[v2 + 4];
      v5 = HKMedicationFreeTextFormTypeCode.englishFormString.getter(v4);
      v7 = v6;
      v9 = *(_QWORD *)(v12 + 16);
      v8 = *(_QWORD *)(v12 + 24);
      if (v9 >= v8 >> 1)
        sub_1BCB24890(v8 > 1, v9 + 1, 1);
      ++v2;
      *(_QWORD *)(v12 + 16) = v9 + 1;
      v10 = (_QWORD *)(v12 + 24 * v9);
      v10[4] = v4;
      v10[5] = v5;
      v10[6] = v7;
    }
    while (v1 != v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

_QWORD *_sSo32HKMedicationFreeTextFormTypeCodeV27HealthMedicationsExperienceE8allCasesSayABGvgZ_0()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v0 = sub_1BCAF6EBC(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v2 = v0[2];
  v1 = v0[3];
  if (v2 >= v1 >> 1)
    v0 = sub_1BCAF6EBC((_QWORD *)(v1 > 1), v2 + 1, 1, v0);
  v0[2] = v2 + 1;
  v0[v2 + 4] = 1;
  v3 = v2 + 5;
  v4 = -16;
  do
  {
    v5 = v0[3];
    if (v3 - 4 >= v5 >> 1)
      v0 = sub_1BCAF6EBC((_QWORD *)(v5 > 1), v3 - 3, 1, v0);
    v0[2] = v3 - 3;
    v0[v3++] = v4 + 18;
  }
  while (!__CFADD__(v4++, 1));
  return v0;
}

void sub_1BCB34C30()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF487E60)
  {
    sub_1BCB63AC4();
    v0 = sub_1BCB64628();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF487E60);
  }
}

uint64_t sub_1BCB34C84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BCB34CC8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1BCB34CC8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF487770)
  {
    v0 = sub_1BCB64628();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF487770);
  }
}

uint64_t sub_1BCB34D20()
{
  uint64_t v0;
  id v1;

  v0 = sub_1BCB63DDC();
  __swift_allocate_value_buffer(v0, qword_1EDA14518);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EDA14518);
  v1 = (id)HKLogMedication();
  return sub_1BCB63DE8();
}

uint64_t static Logger.medication.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1EDA14510 != -1)
    swift_once();
  v2 = sub_1BCB63DDC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EDA14518);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

id static HKQuantityFormattingParameters.parametersForUnit(_:)()
{
  id v0;
  char v1;
  id v2;
  id v3;

  sub_1BCB34EC8();
  v0 = objc_msgSend((id)objc_opt_self(), sel_percentUnit);
  v1 = sub_1BCB645F8();

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D2F820]), sel_init);
  v3 = v2;
  if ((v1 & 1) != 0)
    objc_msgSend(v2, sel_setHasSpaceBetweenValueAndUnit_, 0);
  return v3;
}

unint64_t sub_1BCB34EC8()
{
  unint64_t result;

  result = qword_1EF487BA8;
  if (!qword_1EF487BA8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF487BA8);
  }
  return result;
}

uint64_t sub_1BCB34F04()
{
  return swift_deallocClassInstance();
}

id sub_1BCB34F14()
{
  uint64_t ObjCClassFromMetadata;
  id result;

  _s38HealthMedicationsExperienceBundleClassCMa();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  result = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  qword_1EDA13DD0 = (uint64_t)result;
  return result;
}

id static NSBundle.healthMedicationsExperience.getter()
{
  if (qword_1EDA13DB8 != -1)
    swift_once();
  return (id)qword_1EDA13DD0;
}

uint64_t _s38HealthMedicationsExperienceBundleClassCMa()
{
  return objc_opt_self();
}

uint64_t Weekdays.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

HealthMedicationsExperience::Weekdays __swiftcall Weekdays.init(rawValue:)(HealthMedicationsExperience::Weekdays rawValue)
{
  HealthMedicationsExperience::Weekdays *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static Weekdays.none.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void static Weekdays.monday.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static Weekdays.tuesday.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static Weekdays.wednesday.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static Weekdays.thursday.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static Weekdays.friday.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void static Weekdays.saturday.getter(_QWORD *a1@<X8>)
{
  *a1 = 32;
}

void static Weekdays.sunday.getter(_QWORD *a1@<X8>)
{
  *a1 = 64;
}

void static Weekdays.everyDay.getter(_QWORD *a1@<X8>)
{
  *a1 = 127;
}

void static Weekdays.weekends.getter(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  sub_1BCB36608();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = 127;
  sub_1BCB36660();
  sub_1BCB64B08();
  v7 = 0;
  while (1)
  {
    sub_1BCB6401C();
    if ((v12 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      *a1 = v7;
      return;
    }
    v8 = v11;
    v9 = log2f((float)v11);
    if ((~LODWORD(v9) & 0x7F800000) == 0)
      break;
    if (v9 <= -9.2234e18)
      goto LABEL_13;
    if (v9 >= 9.2234e18)
      goto LABEL_14;
    if ((unint64_t)(uint64_t)v9 <= 6)
    {
      if ((objc_msgSend((id)objc_opt_self(), sel_weekdayIsWeekend_, qword_1BCB67C40[(uint64_t)v9]) & ((v8 & ~v7) != 0)) != 0)
        v10 = v8;
      else
        v10 = 0;
      v7 |= v10;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
}

void Weekdays.singleDay.getter(_BYTE *a1@<X8>)
{
  uint64_t *v1;
  float v3;
  uint64_t v4;

  v3 = log2f((float)*v1);
  if ((~LODWORD(v3) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v3 <= -9.2234e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v3 >= 9.2234e18)
  {
LABEL_9:
    __break(1u);
    return;
  }
  v4 = (uint64_t)v3;
  if ((unint64_t)(uint64_t)v3 >= 7)
    LOBYTE(v4) = 7;
  *a1 = v4;
}

id Weekdays.Day.isWeekendInCurrentLocale.getter()
{
  char *v0;

  return objc_msgSend((id)objc_opt_self(), sel_weekdayIsWeekend_, qword_1BCB67C40[*v0]);
}

void static Weekdays.weekDays.getter(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  sub_1BCB36608();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = 127;
  sub_1BCB36660();
  sub_1BCB64B08();
  v7 = 0;
  while (1)
  {
    sub_1BCB6401C();
    if ((v14 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      *a1 = v7;
      return;
    }
    v8 = v13;
    v9 = log2f((float)v13);
    if ((~LODWORD(v9) & 0x7F800000) == 0)
      break;
    if (v9 <= -9.2234e18)
      goto LABEL_16;
    if (v9 >= 9.2234e18)
      goto LABEL_17;
    if ((unint64_t)(uint64_t)v9 <= 6)
    {
      v10 = objc_msgSend((id)objc_opt_self(), sel_weekdayIsWeekend_, qword_1BCB67C40[(uint64_t)v9]);
      if ((v8 & ~v7) != 0)
        v11 = v10;
      else
        v11 = 1;
      if (v11)
        v12 = 0;
      else
        v12 = v8;
      v7 |= v12;
    }
  }
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
}

uint64_t Weekdays.sortedWeekdays(calendar:)()
{
  unint64_t *v0;
  unint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v1 = *v0;
  result = sub_1BCB63BA8();
  if (result > 7)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v3 = result;
  v4 = result - 1;
  v5 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if ((unint64_t)(v3 - 1) < 6)
    {
      v7 = 0x40302010006uLL >> (8 * v4);
      goto LABEL_8;
    }
    if (v4 == 6)
      break;
LABEL_3:
    ++v4;
    if (__OFADD__(v3++, 1))
    {
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
  }
  LOBYTE(v7) = 5;
LABEL_8:
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1BCAF6FD4(0, *(_QWORD *)(v5 + 16) + 1, 1, (char *)v5);
    v5 = result;
  }
  v9 = *(_QWORD *)(v5 + 16);
  v8 = *(_QWORD *)(v5 + 24);
  if (v9 >= v8 >> 1)
  {
    result = (uint64_t)sub_1BCAF6FD4((char *)(v8 > 1), v9 + 1, 1, (char *)v5);
    v5 = result;
  }
  *(_QWORD *)(v5 + 16) = v9 + 1;
  *(_BYTE *)(v5 + v9 + 32) = v7;
  if (v4 != 6)
    goto LABEL_3;
  if (sub_1BCB63BA8() < 2)
  {
LABEL_25:
    v14 = *(_QWORD *)(v5 + 16);
    if (v14)
    {
      swift_bridgeObjectRetain();
      v15 = 0;
      v16 = MEMORY[0x1E0DEE9D8];
      do
      {
        v19 = *(unsigned __int8 *)(v5 + v15 + 32);
        if (v19 > 0x3F || ((v1 >> v19) & 1) != 0)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            sub_1BCB248AC(0, *(_QWORD *)(v16 + 16) + 1, 1);
          v18 = *(_QWORD *)(v16 + 16);
          v17 = *(_QWORD *)(v16 + 24);
          if (v18 >= v17 >> 1)
            sub_1BCB248AC(v17 > 1, v18 + 1, 1);
          *(_QWORD *)(v16 + 16) = v18 + 1;
          *(_BYTE *)(v16 + v18 + 32) = v19;
        }
        ++v15;
      }
      while (v14 != v15);
      swift_bridgeObjectRelease();
    }
    else
    {
      v16 = MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
    return v16;
  }
  result = sub_1BCB63BA8();
  if (__OFSUB__(result, 1))
    goto LABEL_41;
  if (result - 1 >= 1)
  {
    v10 = 0;
    v11 = result - 2;
    while (1)
    {
      if (v10 <= 6)
      {
        v13 = *(_QWORD *)(v5 + 16);
        v12 = *(_QWORD *)(v5 + 24);
        if (v13 >= v12 >> 1)
        {
          result = (uint64_t)sub_1BCAF6FD4((char *)(v12 > 1), v13 + 1, 1, (char *)v5);
          v5 = result;
        }
        *(_QWORD *)(v5 + 16) = v13 + 1;
        *(_BYTE *)(v5 + v13 + 32) = 0x5040302010006uLL >> (8 * v10);
      }
      if (v11 == v10)
        goto LABEL_25;
      if (__OFADD__(++v10, 1))
        goto LABEL_39;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

void Weekdays.Day.weekday.getter(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  unsigned int v2;
  uint64_t v3;

  v2 = *v1;
  if (v2 >= 0x40)
    v3 = 0;
  else
    v3 = 1 << v2;
  *a1 = v3;
}

uint64_t Weekdays.enumerate(_:_:)(uint64_t a1, void (*a2)(char *))
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  char v9;
  uint64_t v10;

  v10 = *v2;
  v4 = Weekdays.sortedWeekdays(calendar:)();
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (char *)(v4 + 32);
    do
    {
      v7 = *v6++;
      v9 = v7;
      a2(&v9);
      --v5;
    }
    while (v5);
  }
  return swift_bridgeObjectRelease();
}

HealthMedicationsExperience::Weekdays::Day_optional __swiftcall Weekdays.Day.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 7;
  if ((unint64_t)rawValue < 7)
    v2 = rawValue;
  *v1 = v2;
  return (HealthMedicationsExperience::Weekdays::Day_optional)rawValue;
}

uint64_t Weekdays.Day.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t Weekdays.Day.gregorianCalendarDay.getter()
{
  char *v0;

  return qword_1BCB67C40[*v0];
}

void *static Weekdays.Day.allCases.getter()
{
  return &unk_1E75573C0;
}

HealthMedicationsExperience::Weekdays::Day_optional sub_1BCB35854(Swift::Int *a1)
{
  return Weekdays.Day.init(rawValue:)(*a1);
}

void sub_1BCB3585C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E75573C0;
}

void Weekdays.toString(calendar:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  Class isa;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  _QWORD *v32;
  char *v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  NSDateFormatter v69;

  v1 = sub_1BCB63B90();
  v2 = *(_QWORD *)(v1 - 8);
  v65 = v1;
  v66 = v2;
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCB36788(0, &qword_1EF487E78, MEMORY[0x1E0CAEE88]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v54 - v8;
  sub_1BCB36788(0, &qword_1EF487E90, MEMORY[0x1E0CAEE68]);
  v11 = v10;
  v64 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v63 = (char *)&v54 - v12;
  sub_1BCB36788(0, &qword_1EF487E98, MEMORY[0x1E0CAEEA0]);
  v14 = v13;
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v54 - v16;
  v18 = *v0;
  if (*v0)
  {
    v59 = v17;
    v60 = v15;
    v68 = v18;
    v19 = Weekdays.sortedWeekdays(calendar:)();
    if (v18 == 127)
    {
      swift_bridgeObjectRelease();
      if (qword_1EDA14148 == -1)
        goto LABEL_10;
      goto LABEL_32;
    }
    static Weekdays.weekDays.getter(&v68);
    if (v18 == v68)
    {
      swift_bridgeObjectRelease();
      if (qword_1EDA14148 == -1)
        goto LABEL_10;
      goto LABEL_32;
    }
    static Weekdays.weekends.getter(&v68);
    if (v18 == v68)
    {
      swift_bridgeObjectRelease();
      if (qword_1EDA14148 == -1)
      {
LABEL_10:
        v20 = (id)qword_1EDA14130;
        swift_bridgeObjectRetain();
        sub_1BCB63A34();
        swift_bridgeObjectRelease();

        return;
      }
LABEL_32:
      swift_once();
      goto LABEL_10;
    }
    v62 = v4;
    v21 = *(_QWORD *)(v19 + 16);
    if (v21)
    {
      if (v21 != 1)
      {
        v54 = v11;
        v55 = v14;
        v56 = v9;
        v57 = v7;
        v58 = v6;
        swift_bridgeObjectRetain();
        v27 = 0;
        v28 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v61 = v19;
        while (1)
        {
          v29 = v27 + 1;
          if (__OFADD__(v27, 1))
            break;
          v30 = *(char *)(v19 + v27 + 32);
          v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3578]), sel_init);
          if (!*(_QWORD *)(sub_1BCB63B6C() + 16))
            goto LABEL_30;
          v32 = v28;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v33 = v62;
          sub_1BCB63B60();
          v34 = (void *)sub_1BCB63B78();
          objc_msgSend(v31, sel_setLocale_, v34);

          objc_msgSend(v31, sel_setFormattingContext_, 2);
          (*(void (**)(char *, uint64_t))(v66 + 8))(v33, v65);
          v35 = objc_msgSend(v31, sel_shortStandaloneWeekdaySymbols);
          if (!v35)
            goto LABEL_36;
          v36 = v35;
          v37 = sub_1BCB642D4();

          v38 = qword_1BCB67C78[v30];
          if (v38 >= *(_QWORD *)(v37 + 16))
            goto LABEL_31;
          v28 = v32;
          v39 = v37 + 16 * v38;
          v41 = *(_QWORD *)(v39 + 32);
          v40 = *(_QWORD *)(v39 + 40);
          swift_bridgeObjectRetain();

          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v28 = sub_1BCAF6A40(0, v32[2] + 1, 1, v32);
          v43 = v28[2];
          v42 = v28[3];
          if (v43 >= v42 >> 1)
            v28 = sub_1BCAF6A40((_QWORD *)(v42 > 1), v43 + 1, 1, v28);
          v28[2] = v43 + 1;
          v44 = &v28[2 * v43];
          v44[4] = v41;
          v44[5] = v40;
          ++v27;
          v19 = v61;
          if (v29 == v21)
          {
            swift_bridgeObjectRelease_n();
            v67 = v28;
            v45 = v63;
            v46 = v64;
            v47 = v54;
            (*(void (**)(char *, _QWORD, uint64_t))(v64 + 104))(v63, *MEMORY[0x1E0CAEE60], v54);
            v49 = v56;
            v48 = v57;
            v50 = v58;
            (*(void (**)(char *, _QWORD, uint64_t))(v57 + 104))(v56, *MEMORY[0x1E0CAEE80], v58);
            v51 = MEMORY[0x1E0DEA968];
            sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA14180, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
            sub_1BCB36740(&qword_1EF487E88, (unint64_t *)&qword_1EDA14180, v51, MEMORY[0x1E0DEAF38]);
            v52 = v59;
            sub_1BCB638F0();
            (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
            (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v47);
            sub_1BCB36870();
            v53 = v55;
            sub_1BCB64274();
            (*(void (**)(char *, uint64_t))(v60 + 8))(v52, v53);
            swift_bridgeObjectRelease();
            return;
          }
        }
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      v22 = *(char *)(v19 + 32);
      swift_bridgeObjectRelease();
      sub_1BCB368C8();
      v69 = NSDateFormatter.init(formattingContext:)(NSFormattingContextStandalone);
      isa = v69.super.super.isa;
      v24 = -[objc_class standaloneWeekdaySymbols](v69.super.super.isa, sel_standaloneWeekdaySymbols, v69._formatter, v69._counter);
      if (v24)
      {
        v25 = v24;
        v26 = sub_1BCB642D4();

        if (qword_1BCB67C78[v22] < *(_QWORD *)(v26 + 16))
        {
          swift_bridgeObjectRetain();

          swift_bridgeObjectRelease();
          return;
        }
        __break(1u);
LABEL_36:
        __break(1u);
      }
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

NSDateFormatter __swiftcall NSDateFormatter.init(formattingContext:)(NSFormattingContext formattingContext)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  objc_class *v7;
  NSMutableDictionary *v8;
  __CFDateFormatter *v9;
  NSUInteger v10;
  void *v11;
  uint64_t v12;
  NSDateFormatter result;

  v2 = sub_1BCB63B90();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v7 = (objc_class *)sub_1BCB63B6C();
  if (*((_QWORD *)v7 + 2))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_1BCB63B60();
    v11 = (void *)sub_1BCB63B78();
    objc_msgSend(v6, sel_setLocale_, v11);

    objc_msgSend(v6, sel_setFormattingContext_, formattingContext);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v7 = (objc_class *)v6;
  }
  else
  {
    __break(1u);
  }
  result._counter = v10;
  result._formatter = v9;
  result._attributes = v8;
  result.super.super.isa = v7;
  return result;
}

Swift::String_optional __swiftcall NSDateFormatter.standaloneWeekdaySymbol(for:)(HealthMedicationsExperience::Weekdays::Day a1)
{
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String_optional result;

  v2 = *(char *)a1;
  v3 = objc_msgSend(v1, sel_standaloneWeekdaySymbols);
  if (!v3)
    goto LABEL_5;
  v5 = v3;
  v6 = sub_1BCB642D4();

  v7 = qword_1BCB67C78[v2];
  if (v7 >= *(_QWORD *)(v6 + 16))
  {
    __break(1u);
LABEL_5:
    __break(1u);
    goto LABEL_6;
  }
  v8 = v6 + 16 * v7;
  v9 = *(void **)(v8 + 32);
  v10 = *(void **)(v8 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v3 = v9;
  v4 = v10;
LABEL_6:
  result.value._object = v4;
  result.value._countAndFlagsBits = (uint64_t)v3;
  return result;
}

Swift::String_optional __swiftcall NSDateFormatter.shortStandaloneWeekdaySymbol(for:)(HealthMedicationsExperience::Weekdays::Day a1)
{
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String_optional result;

  v2 = *(char *)a1;
  v3 = objc_msgSend(v1, sel_shortStandaloneWeekdaySymbols);
  if (!v3)
    goto LABEL_5;
  v5 = v3;
  v6 = sub_1BCB642D4();

  v7 = qword_1BCB67C78[v2];
  if (v7 >= *(_QWORD *)(v6 + 16))
  {
    __break(1u);
LABEL_5:
    __break(1u);
    goto LABEL_6;
  }
  v8 = v6 + 16 * v7;
  v9 = *(void **)(v8 + 32);
  v10 = *(void **)(v8 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v3 = v9;
  v4 = v10;
LABEL_6:
  result.value._object = v4;
  result.value._countAndFlagsBits = (uint64_t)v3;
  return result;
}

_QWORD *sub_1BCB361F8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1BCB36204()
{
  sub_1BCB36660();
  return sub_1BCB64B08();
}

uint64_t sub_1BCB3623C()
{
  return 0;
}

uint64_t sub_1BCB36244()
{
  uint64_t *v0;

  return sub_1BCB36C7C(*v0);
}

uint64_t sub_1BCB3624C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_1BCB36254(a1, a2, a3, *v3);
}

uint64_t sub_1BCB36254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  _QWORD v15[2];
  char v16;
  uint64_t v17;

  sub_1BCB36608();
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a4;
  sub_1BCB36C38();
  result = sub_1BCB64280();
  if (!a2)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v12, v9);
    return 0;
  }
  if (!a3)
  {
LABEL_11:
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v12, v9);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    sub_1BCAF7D24(&qword_1EF487EC8, (uint64_t (*)(uint64_t))sub_1BCB36608, MEMORY[0x1E0D2F330]);
    sub_1BCB64634();
    if ((v16 & 1) != 0)
    {
      v14 = 0;
LABEL_10:
      (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v12, v9);
      return v14;
    }
    v14 = 0;
    while (1)
    {
      *(_QWORD *)(a2 + 8 * v14) = v15[1];
      if (a3 - 1 == v14)
        goto LABEL_11;
      sub_1BCB64634();
      ++v14;
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1BCB363D8()
{
  return sub_1BCB64298();
}

uint64_t sub_1BCB363F8()
{
  sub_1BCB64A90();
  sub_1BCB64A9C();
  return sub_1BCB64AC0();
}

uint64_t sub_1BCB3643C()
{
  sub_1BCB64A90();
  sub_1BCB64A9C();
  return sub_1BCB64AC0();
}

void sub_1BCB3647C(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_1BCB36484@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_1BCB36498@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_1BCB364AC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1BCB364C0(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_1BCB364F0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1BCB3651C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_1BCB36540(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_1BCB36554(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_1BCB36568(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_1BCB3657C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1BCB36590(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1BCB365A4(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1BCB365B8(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1BCB365CC()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_1BCB365DC()
{
  return sub_1BCB646B8();
}

_QWORD *sub_1BCB365F4(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

void sub_1BCB36608()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF487E68)
  {
    sub_1BCB36660();
    v0 = sub_1BCB64028();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF487E68);
  }
}

unint64_t sub_1BCB36660()
{
  unint64_t result;

  result = qword_1EF487E70;
  if (!qword_1EF487E70)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for Weekdays, &type metadata for Weekdays);
    atomic_store(result, (unint64_t *)&qword_1EF487E70);
  }
  return result;
}

Swift::String_optional __swiftcall NSDateFormatter.veryShortStandaloneWeekdaySymbol(for:)(HealthMedicationsExperience::Weekdays::Day a1)
{
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String_optional result;

  v2 = *(char *)a1;
  v3 = objc_msgSend(v1, sel_veryShortStandaloneWeekdaySymbols);
  if (!v3)
    goto LABEL_5;
  v5 = v3;
  v6 = sub_1BCB642D4();

  v7 = qword_1BCB67C78[v2];
  if (v7 >= *(_QWORD *)(v6 + 16))
  {
    __break(1u);
LABEL_5:
    __break(1u);
    goto LABEL_6;
  }
  v8 = v6 + 16 * v7;
  v9 = *(void **)(v8 + 32);
  v10 = *(void **)(v8 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v3 = v9;
  v4 = v10;
LABEL_6:
  result.value._object = v4;
  result.value._countAndFlagsBits = (uint64_t)v3;
  return result;
}

uint64_t sub_1BCB36740(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_1BCAF84F0(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1BCCFD874](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1BCB36788(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v12[4];

  if (!*a2)
  {
    v6 = sub_1BCB63968();
    v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE370];
    v8 = MEMORY[0x1E0DEA968];
    sub_1BCAF84F0(255, (unint64_t *)&qword_1EDA14180, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v12[0] = v6;
    v12[1] = v9;
    v12[2] = sub_1BCAF7D24(&qword_1EF487E80, v7, MEMORY[0x1E0CAE368]);
    v12[3] = sub_1BCB36740(&qword_1EF487E88, (unint64_t *)&qword_1EDA14180, v8, MEMORY[0x1E0DEAF38]);
    v10 = a3(a1, v12);
    if (!v11)
      atomic_store(v10, a2);
  }
}

unint64_t sub_1BCB36870()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF487EA0;
  if (!qword_1EF487EA0)
  {
    sub_1BCB36788(255, &qword_1EF487E98, MEMORY[0x1E0CAEEA0]);
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0CAEEB0], v1);
    atomic_store(result, (unint64_t *)&qword_1EF487EA0);
  }
  return result;
}

unint64_t sub_1BCB368C8()
{
  unint64_t result;

  result = qword_1EF487EA8;
  if (!qword_1EF487EA8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF487EA8);
  }
  return result;
}

unint64_t sub_1BCB36908()
{
  unint64_t result;

  result = qword_1EF487EB0;
  if (!qword_1EF487EB0)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for Weekdays.Day, &type metadata for Weekdays.Day);
    atomic_store(result, (unint64_t *)&qword_1EF487EB0);
  }
  return result;
}

uint64_t sub_1BCB3694C()
{
  return sub_1BCB36740(&qword_1EF487EB8, &qword_1EF487EC0, (uint64_t)&type metadata for Weekdays.Day, MEMORY[0x1E0DEAF50]);
}

unint64_t sub_1BCB36984()
{
  unint64_t result;

  result = qword_1EDA13900;
  if (!qword_1EDA13900)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for Weekdays, &type metadata for Weekdays);
    atomic_store(result, (unint64_t *)&qword_1EDA13900);
  }
  return result;
}

unint64_t sub_1BCB369CC()
{
  unint64_t result;

  result = qword_1EDA13908;
  if (!qword_1EDA13908)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for Weekdays, &type metadata for Weekdays);
    atomic_store(result, (unint64_t *)&qword_1EDA13908);
  }
  return result;
}

uint64_t sub_1BCB36A10()
{
  return sub_1BCAF7D24(&qword_1EF487EC8, (uint64_t (*)(uint64_t))sub_1BCB36608, MEMORY[0x1E0D2F330]);
}

unint64_t sub_1BCB36A40()
{
  unint64_t result;

  result = qword_1EDA138F8;
  if (!qword_1EDA138F8)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for Weekdays, &type metadata for Weekdays);
    atomic_store(result, (unint64_t *)&qword_1EDA138F8);
  }
  return result;
}

unint64_t sub_1BCB36A88()
{
  unint64_t result;

  result = qword_1EDA13910;
  if (!qword_1EDA13910)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for Weekdays, &type metadata for Weekdays);
    atomic_store(result, (unint64_t *)&qword_1EDA13910);
  }
  return result;
}

ValueMetadata *type metadata accessor for Weekdays()
{
  return &type metadata for Weekdays;
}

uint64_t getEnumTagSinglePayload for Weekdays.Day(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Weekdays.Day(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1BCB36BB8 + 4 * byte_1BCB678D5[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1BCB36BEC + 4 * asc_1BCB678D0[v4]))();
}

uint64_t sub_1BCB36BEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCB36BF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCB36BFCLL);
  return result;
}

uint64_t sub_1BCB36C08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCB36C10);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1BCB36C14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCB36C1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Weekdays.Day()
{
  return &type metadata for Weekdays.Day;
}

unint64_t sub_1BCB36C38()
{
  unint64_t result;

  result = qword_1EF487ED0;
  if (!qword_1EF487ED0)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for Weekdays, &type metadata for Weekdays);
    atomic_store(result, (unint64_t *)&qword_1EF487ED0);
  }
  return result;
}

uint64_t sub_1BCB36C7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  sub_1BCB36608();
  v3 = v2;
  v26 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = a1;
  sub_1BCB36C38();
  sub_1BCB64280();
  sub_1BCAF7D24(&qword_1EF487EC8, (uint64_t (*)(uint64_t))sub_1BCB36608, MEMORY[0x1E0D2F330]);
  result = sub_1BCB64634();
  v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if ((v28 & 1) != 0)
  {
    v8 = 0;
LABEL_22:
    result = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v5, v3);
    v22 = v7[3];
    if (v22 < 2)
      return (uint64_t)v7;
    v23 = v22 >> 1;
    v21 = __OFSUB__(v23, v8);
    v24 = v23 - v8;
    if (!v21)
    {
      v7[2] = v24;
      return (uint64_t)v7;
    }
  }
  else
  {
    v8 = 0;
    v9 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
    while (1)
    {
      v10 = v27;
      if (!v8)
      {
        v11 = v7[3];
        if ((uint64_t)((v11 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_27;
        v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
        if (v12 <= 1)
          v13 = 1;
        else
          v13 = v12;
        sub_1BCAF84F0(0, &qword_1EF487ED8, (uint64_t)&type metadata for Weekdays, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v14 = (_QWORD *)swift_allocObject();
        v15 = _swift_stdlib_malloc_size(v14);
        v16 = v15 - 32;
        if (v15 < 32)
          v16 = v15 - 25;
        v17 = v16 >> 3;
        v14[2] = v13;
        v14[3] = 2 * (v16 >> 3);
        v18 = (unint64_t)(v14 + 4);
        v19 = v7[3] >> 1;
        if (v7[2])
        {
          if (v14 != v7 || v18 >= (unint64_t)&v7[v19 + 4])
            memmove(v14 + 4, v7 + 4, 8 * v19);
          v7[2] = 0;
        }
        v9 = (_QWORD *)(v18 + 8 * v19);
        v8 = (v17 & 0x7FFFFFFFFFFFFFFFLL) - v19;
        result = swift_release();
        v7 = v14;
      }
      v21 = __OFSUB__(v8--, 1);
      if (v21)
        break;
      *v9++ = v10;
      result = sub_1BCB64634();
      if ((v28 & 1) != 0)
        goto LABEL_22;
    }
    __break(1u);
LABEL_27:
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t static String.MedicationsDisableFixedScannerReticleDefaultKey.getter()
{
  return 0xD00000000000002FLL;
}

unint64_t static String.MedicationsHideTapToRadarWhileScanningDefaultKey.getter()
{
  return 0xD000000000000030;
}

unint64_t static String.MedicationsLimitCandidateCountDefaultKey.getter()
{
  return 0xD000000000000028;
}

unint64_t static String.MedicationsAllowEndDatesInPastDefaultKey.getter()
{
  return 0xD000000000000028;
}

uint64_t MedicationsScheduleIncompatibilityCache.incompatibilityCacheObject.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD v8[2];

  sub_1BCB36FC8();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v0
     + OBJC_IVAR____TtC27HealthMedicationsExperience39MedicationsScheduleIncompatibilityCache__incompatibilityCacheObject;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  sub_1BCB63D10();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v8[1];
}

void sub_1BCB36FC8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF487EE0)
  {
    v0 = sub_1BCB63D28();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF487EE0);
  }
}

double sub_1BCB3701C@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double result;
  double v11[3];

  sub_1BCB36FC8();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1
     + OBJC_IVAR____TtC27HealthMedicationsExperience39MedicationsScheduleIncompatibilityCache__incompatibilityCacheObject;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  sub_1BCB63D10();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = v11[0];
  *a2 = *(_OWORD *)v11;
  return result;
}

uint64_t sub_1BCB370E8(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_beginAccess();
  sub_1BCB371F0(v1, v2);
  sub_1BCB36FC8();
  sub_1BCB63D1C();
  return swift_endAccess();
}

uint64_t MedicationsScheduleIncompatibilityCache.incompatibilityCacheObject.setter(uint64_t a1, unint64_t a2)
{
  swift_beginAccess();
  sub_1BCB371F0(a1, a2);
  sub_1BCB36FC8();
  sub_1BCB63D1C();
  swift_endAccess();
  return sub_1BCB37234(a1, a2);
}

uint64_t sub_1BCB371F0(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_1BCB37234(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

void (*MedicationsScheduleIncompatibilityCache.incompatibilityCacheObject.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  swift_beginAccess();
  sub_1BCB36FC8();
  v2[7] = sub_1BCB63D04();
  return sub_1BCB372EC;
}

void sub_1BCB372EC(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 56))(*a1, 0);
  swift_endAccess();
  free(v1);
}

_QWORD *MedicationsScheduleIncompatibilityCache.__allocating_init(healthStore:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  sub_1BCB36FC8();
  v17 = v2;
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (_QWORD *)swift_allocObject();
  if (qword_1EF4870A0 != -1)
    swift_once();
  v7 = unk_1EF488B40;
  v6[3] = qword_1EF488B38;
  v6[4] = v7;
  v8 = *MEMORY[0x1E0D2C2D0];
  v9 = qword_1EDA13280;
  swift_bridgeObjectRetain();
  if (v9 != -1)
    swift_once();
  v10 = objc_allocWithZone(MEMORY[0x1E0CB67F0]);
  swift_bridgeObjectRetain();
  v11 = a1;
  v12 = (void *)sub_1BCB6410C();
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(v10, sel_initWithCategory_domainName_healthStore_, v8, v12, v11);

  v6[2] = v13;
  v18 = xmmword_1BCB67CB0;
  v14 = v13;
  swift_bridgeObjectRetain();
  sub_1BCB63CF8();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))((uint64_t)v6+ OBJC_IVAR____TtC27HealthMedicationsExperience39MedicationsScheduleIncompatibilityCache__incompatibilityCacheObject, v5, v17);
  MedicationsScheduleIncompatibilityCache.generateScheduleIncompatibilityCache(healthStore:)((HKHealthStore)v11);

  return v6;
}

_QWORD *MedicationsScheduleIncompatibilityCache.init(healthStore:)(void *a1)
{
  _QWORD *v2;

  v2 = sub_1BCB38BC8(a1);

  return v2;
}

Swift::Void __swiftcall MedicationsScheduleIncompatibilityCache.generateScheduleIncompatibilityCache(healthStore:)(HKHealthStore healthStore)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t aBlock[7];

  v3 = *v1;
  v4 = sub_1BCB63DDC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C8F2B8]), sel_init);
  v9 = objc_msgSend(v8, sel_primaryAppleAccount);
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CFAC40]), sel_initWithAccount_, v9);
    if (v11)
    {
      v12 = v11;
      v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D2C488]), sel_initWithHealthStore_accountStore_deviceRequest_, healthStore.super.isa, v8, v11);
      v14 = swift_allocObject();
      *(_QWORD *)(v14 + 16) = v1;
      *(_QWORD *)(v14 + 24) = v3;
      aBlock[4] = (uint64_t)sub_1BCB38DB4;
      aBlock[5] = v14;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1BCB37D60;
      aBlock[3] = (uint64_t)&block_descriptor_6;
      v15 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v13, sel_resolveIncompatibleSchedulesWithCompletion_, v15);
      _Block_release(v15);

      return;
    }

  }
  sub_1BCB63DC4();
  v16 = sub_1BCB63DD0();
  v17 = sub_1BCB644F0();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v22 = v4;
    aBlock[0] = v19;
    *(_DWORD *)v18 = 136315138;
    v20 = sub_1BCB64B14();
    aBlock[6] = sub_1BCB010C8(v20, v21, aBlock);
    sub_1BCB64640();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BCAF3000, v16, v17, "[%s] Unable to create AADeviceListRequest", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCFD928](v19, -1, -1);
    MEMORY[0x1BCCFD928](v18, -1, -1);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v22);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_1BCB37814(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17[3];
  uint64_t v18;
  unint64_t v19;

  v2 = sub_1BCB63DDC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v17[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v6 = MedicationsScheduleIncompatibilityCache._serializedCache(result:)();
    v8 = v7;
    v18 = v6;
    v19 = v7;
    swift_beginAccess();
    sub_1BCB371F0(v6, v8);
    sub_1BCB36FC8();
    sub_1BCB63D1C();
    swift_endAccess();
    return sub_1BCB37234(v6, v8);
  }
  else
  {
    sub_1BCB63DC4();
    v10 = sub_1BCB63DD0();
    v11 = sub_1BCB644F0();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v17[0] = v13;
      *(_DWORD *)v12 = 136315138;
      v14 = sub_1BCB64B14();
      v18 = sub_1BCB010C8(v14, v15, v17);
      sub_1BCB64640();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1BCAF3000, v10, v11, "[%s] IncompatibilityResult is nil", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCFD928](v13, -1, -1);
      MEMORY[0x1BCCFD928](v12, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

uint64_t MedicationsScheduleIncompatibilityCache._serializedCache(result:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  id v26[2];

  v26[1] = *(id *)MEMORY[0x1E0C80C00];
  v0 = sub_1BCB63DDC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (void *)objc_opt_self();
  sub_1BCAFC2E0(0, &qword_1EF487EF0);
  v5 = (void *)sub_1BCB642C8();
  v26[0] = 0;
  v6 = objc_msgSend(v4, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v5, 0, v26);

  v7 = v26[0];
  if (v6)
  {
    v8 = sub_1BCB63ADC();

  }
  else
  {
    v9 = v7;
    v10 = (void *)sub_1BCB63AA0();

    swift_willThrow();
    sub_1BCB63DC4();
    v11 = v10;
    v12 = v10;
    v13 = sub_1BCB63DD0();
    v14 = sub_1BCB644FC();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc();
      v23 = (_QWORD *)swift_slowAlloc();
      v24 = (void *)swift_slowAlloc();
      v26[0] = v24;
      *(_DWORD *)v15 = 136315394;
      v16 = sub_1BCB64B14();
      v25 = sub_1BCB010C8(v16, v17, (uint64_t *)v26);
      sub_1BCB64640();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2112;
      v18 = v10;
      v19 = _swift_stdlib_bridgeErrorToNSError();
      v25 = v19;
      sub_1BCB64640();
      v20 = v23;
      *v23 = v19;

      _os_log_impl(&dword_1BCAF3000, v13, v14, "%s Failed to serialize the incompatibility cache, returning empty data object. %@", (uint8_t *)v15, 0x16u);
      sub_1BCB066B8(0, (unint64_t *)&qword_1EF4878A0, (unint64_t *)&qword_1EDA139E0, 0x1E0DE7910, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      swift_arrayDestroy();
      MEMORY[0x1BCCFD928](v20, -1, -1);
      v21 = v24;
      swift_arrayDestroy();
      MEMORY[0x1BCCFD928](v21, -1, -1);
      MEMORY[0x1BCCFD928](v15, -1, -1);
    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);

    return 0;
  }
  return v8;
}

uint64_t sub_1BCB37D60(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  id v6;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_1BCAFC2E0(0, &qword_1EF487EF0);
    v4 = sub_1BCB642D4();
  }
  swift_retain();
  v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t MedicationsScheduleIncompatibilityCache.getIncompatibilityResult(schedule:)(void *a1)
{
  return sub_1BCB37E0C(a1, (uint64_t (*)(unint64_t, id))sub_1BCB38764);
}

uint64_t MedicationsScheduleIncompatibilityCache.getIncompatibilityResult(medication:)(void *a1)
{
  return sub_1BCB37E0C(a1, (uint64_t (*)(unint64_t, id))sub_1BCB38998);
}

uint64_t sub_1BCB37E0C(void *a1, uint64_t (*a2)(unint64_t, id))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD v19[3];
  uint64_t v20;

  v4 = sub_1BCB63DDC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (unint64_t)MedicationsScheduleIncompatibilityCache._unserializedCache()();
  if (v8)
  {
    v9 = v8;
    v10 = a1;
    v11 = a2(v9, v10);
    swift_bridgeObjectRelease();

  }
  else
  {
    sub_1BCB63DC4();
    v12 = sub_1BCB63DD0();
    v13 = sub_1BCB644FC();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      v20 = v15;
      *(_DWORD *)v14 = 136315138;
      v16 = sub_1BCB64B14();
      v19[2] = sub_1BCB010C8(v16, v17, &v20);
      sub_1BCB64640();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1BCAF3000, v12, v13, "%s Failed to get the incompatibility result cache back, getter returned nil.", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCFD928](v15, -1, -1);
      MEMORY[0x1BCCFD928](v14, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 0;
  }
  return v11;
}

Swift::OpaquePointer_optional __swiftcall MedicationsScheduleIncompatibilityCache._unserializedCache()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  char *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  Swift::Bool v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  id v39[8];
  Swift::OpaquePointer_optional result;

  v39[7] = *(id *)MEMORY[0x1E0C80C00];
  v36 = *v0;
  v35 = sub_1BCB63DDC();
  v1 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v37 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCB36FC8();
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (void *)objc_opt_self();
  v9 = (void *)objc_opt_self();
  sub_1BCAFC2E0(0, &qword_1EF487EF0);
  v10 = objc_msgSend(v9, sel_hk_typesForArrayOf_, swift_getObjCClassFromMetadata());
  sub_1BCB64400();

  v11 = (void *)sub_1BCB643F4();
  swift_bridgeObjectRelease();
  v12 = (char *)v0
      + OBJC_IVAR____TtC27HealthMedicationsExperience39MedicationsScheduleIncompatibilityCache__incompatibilityCacheObject;
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v12, v4);
  sub_1BCB63D10();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v13 = v39[0];
  v14 = v39[1];
  v15 = (void *)sub_1BCB63AD0();
  sub_1BCB37234((uint64_t)v13, (unint64_t)v14);
  v39[0] = 0;
  v16 = objc_msgSend(v8, sel_unarchivedObjectOfClasses_fromData_error_, v11, v15, v39);

  v17 = v39[0];
  if (v16)
  {
    sub_1BCB646A0();
    swift_unknownObjectRelease();
    sub_1BCB066B8(0, &qword_1EF487EF8, &qword_1EF487EF0, 0x1E0D2C498, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    if (swift_dynamicCast())
      v19 = (void *)v38;
    else
      v19 = 0;
  }
  else
  {
    v20 = v17;
    v21 = v1;
    v22 = (void *)sub_1BCB63AA0();

    swift_willThrow();
    sub_1BCB63DC4();
    v23 = v22;
    v24 = v22;
    v25 = sub_1BCB63DD0();
    v26 = sub_1BCB644FC();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc();
      v28 = (_QWORD *)swift_slowAlloc();
      v29 = (void *)swift_slowAlloc();
      v39[0] = v29;
      *(_DWORD *)v27 = 136315394;
      v30 = sub_1BCB64B14();
      v38 = sub_1BCB010C8(v30, v31, (uint64_t *)v39);
      sub_1BCB64640();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2112;
      v32 = v22;
      v33 = _swift_stdlib_bridgeErrorToNSError();
      v38 = v33;
      sub_1BCB64640();
      *v28 = v33;

      _os_log_impl(&dword_1BCAF3000, v25, v26, "%s Failed to unserialize the incompatibility cache data to an object array, returning nil. %@", (uint8_t *)v27, 0x16u);
      sub_1BCB066B8(0, (unint64_t *)&qword_1EF4878A0, (unint64_t *)&qword_1EDA139E0, 0x1E0DE7910, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      swift_arrayDestroy();
      MEMORY[0x1BCCFD928](v28, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1BCCFD928](v29, -1, -1);
      MEMORY[0x1BCCFD928](v27, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v37, v35);
    v19 = 0;
  }
  result.value._rawValue = v19;
  result.is_nil = v18;
  return result;
}

uint64_t static MedicationsScheduleIncompatibilityCache.== infix(_:_:)()
{
  sub_1BCAFC2E0(0, (unint64_t *)&qword_1EDA139E0);
  return sub_1BCB645F8() & 1;
}

void MedicationsScheduleIncompatibilityCache.hash(into:)()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + 16);
  sub_1BCB64604();

}

uint64_t MedicationsScheduleIncompatibilityCache.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0
     + OBJC_IVAR____TtC27HealthMedicationsExperience39MedicationsScheduleIncompatibilityCache__incompatibilityCacheObject;
  sub_1BCB36FC8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t MedicationsScheduleIncompatibilityCache.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0
     + OBJC_IVAR____TtC27HealthMedicationsExperience39MedicationsScheduleIncompatibilityCache__incompatibilityCacheObject;
  sub_1BCB36FC8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t MedicationsScheduleIncompatibilityCache.hashValue.getter()
{
  uint64_t v0;
  id v1;

  sub_1BCB64A90();
  v1 = *(id *)(v0 + 16);
  sub_1BCB64604();

  return sub_1BCB64AC0();
}

uint64_t sub_1BCB3862C()
{
  sub_1BCAFC2E0(0, (unint64_t *)&qword_1EDA139E0);
  return sub_1BCB645F8() & 1;
}

uint64_t sub_1BCB38680()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;

  v1 = *v0;
  sub_1BCB64A90();
  v2 = *(id *)(v1 + 16);
  sub_1BCB64604();

  return sub_1BCB64AC0();
}

void sub_1BCB386D0()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(*(_QWORD *)v0 + 16);
  sub_1BCB64604();

}

uint64_t sub_1BCB38718()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;

  v1 = *v0;
  sub_1BCB64A90();
  v2 = *(id *)(v1 + 16);
  sub_1BCB64604();

  return sub_1BCB64AC0();
}

void *sub_1BCB38764(unint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **p_weak_ivar_lyt;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v3 = v2;
  v4 = a1;
  if (a1 >> 62)
  {
LABEL_28:
    swift_bridgeObjectRetain();
    v5 = sub_1BCB648D4();
    if (v5)
      goto LABEL_3;
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
    {
LABEL_3:
      v22 = v3;
      v23 = v5;
      v24 = v4;
      v25 = v4 & 0xC000000000000001;
      v6 = 4;
      p_weak_ivar_lyt = &TestMedicationDetailProvider.weak_ivar_lyt;
      while (1)
      {
        if (v25)
          v8 = (id)MEMORY[0x1BCCFCF20](v6 - 4, v4);
        else
          v8 = *(id *)(v4 + 8 * v6);
        v9 = v8;
        v10 = v6 - 3;
        if (__OFADD__(v6 - 4, 1))
        {
          __break(1u);
          goto LABEL_28;
        }
        v3 = (uint64_t)objc_msgSend(v8, sel_schedule);
        v11 = objc_msgSend((id)v3, (SEL)p_weak_ivar_lyt[474]);

        v12 = v9;
        if (v11)
        {
          v13 = sub_1BCB6413C();
          v15 = v14;

        }
        else
        {
          v13 = 0;
          v15 = 0;
        }
        v16 = p_weak_ivar_lyt;
        v17 = objc_msgSend(a2, (SEL)p_weak_ivar_lyt[474], v22);
        if (!v17)
          break;
        v3 = (uint64_t)v17;
        v18 = sub_1BCB6413C();
        v20 = v19;

        if (!v15)
        {
          if (!v20)
            goto LABEL_26;
          goto LABEL_5;
        }
        if (!v20)
          goto LABEL_5;
        if (v13 == v18 && v15 == v20)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_26:
          swift_bridgeObjectRelease();
          return v12;
        }
        v3 = sub_1BCB649F4();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v3 & 1) != 0)
          goto LABEL_26;

LABEL_6:
        v4 = v24;
        ++v6;
        p_weak_ivar_lyt = v16;
        if (v10 == v23)
          goto LABEL_29;
      }
      if (!v15)
        goto LABEL_26;
LABEL_5:

      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
LABEL_29:
  swift_bridgeObjectRelease();
  return 0;
}

void *sub_1BCB38998(unint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v20;

  if (a1 >> 62)
    goto LABEL_22;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; v3 = sub_1BCB648D4())
  {
    v20 = v3;
    v4 = 4;
    while (1)
    {
      v5 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1BCCFCF20](v4 - 4, a1) : *(id *)(a1 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v8 = objc_msgSend(v5, sel_schedule);
      v9 = objc_msgSend(v8, sel_medicationIdentifier);

      if (v9)
      {
        v10 = sub_1BCB6413C();
        v12 = v11;

      }
      else
      {
        v10 = 0;
        v12 = 0;
      }
      v13 = objc_msgSend(a2, sel_semanticIdentifier);
      v14 = objc_msgSend(v13, sel_stringValue);

      v15 = sub_1BCB6413C();
      v17 = v16;

      if (v12)
      {
        if (v10 == v15 && v12 == v17)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_20:
          swift_bridgeObjectRelease();
          return v6;
        }
        v18 = sub_1BCB649F4();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v18 & 1) != 0)
          goto LABEL_20;

      }
      else
      {

        swift_bridgeObjectRelease();
      }
      ++v4;
      if (v7 == v20)
        goto LABEL_23;
    }
    __break(1u);
LABEL_22:
    swift_bridgeObjectRetain();
  }
LABEL_23:
  swift_bridgeObjectRelease();
  return 0;
}

_QWORD *sub_1BCB38BC8(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  __int128 v17;

  sub_1BCB36FC8();
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EF4870A0 != -1)
    swift_once();
  v8 = unk_1EF488B40;
  v1[3] = qword_1EF488B38;
  v1[4] = v8;
  v9 = *MEMORY[0x1E0D2C2D0];
  v10 = qword_1EDA13280;
  swift_bridgeObjectRetain();
  if (v10 != -1)
    swift_once();
  v11 = objc_allocWithZone(MEMORY[0x1E0CB67F0]);
  swift_bridgeObjectRetain();
  v12 = a1;
  v13 = (void *)sub_1BCB6410C();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v11, sel_initWithCategory_domainName_healthStore_, v9, v13, v12);

  v1[2] = v14;
  v17 = xmmword_1BCB67CB0;
  v15 = v14;
  swift_bridgeObjectRetain();
  sub_1BCB63CF8();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))((uint64_t)v1+ OBJC_IVAR____TtC27HealthMedicationsExperience39MedicationsScheduleIncompatibilityCache__incompatibilityCacheObject, v7, v4);
  MedicationsScheduleIncompatibilityCache.generateScheduleIncompatibilityCache(healthStore:)((HKHealthStore)v12);
  return v1;
}

uint64_t sub_1BCB38D90()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BCB38DB4(uint64_t a1)
{
  return sub_1BCB37814(a1);
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

unint64_t sub_1BCB38DD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF487F00;
  if (!qword_1EF487F00)
  {
    v1 = type metadata accessor for MedicationsScheduleIncompatibilityCache();
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for MedicationsScheduleIncompatibilityCache, v1);
    atomic_store(result, (unint64_t *)&qword_1EF487F00);
  }
  return result;
}

uint64_t type metadata accessor for MedicationsScheduleIncompatibilityCache()
{
  uint64_t result;

  result = qword_1EF487F30;
  if (!qword_1EF487F30)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BCB38E64()
{
  return type metadata accessor for MedicationsScheduleIncompatibilityCache();
}

void sub_1BCB38E6C()
{
  unint64_t v0;

  sub_1BCB36FC8();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for MedicationsScheduleIncompatibilityCache()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MedicationsScheduleIncompatibilityCache.__allocating_init(healthStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_1BCB38F04(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, char a7, char a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, char a15, uint64_t a16, char a17, char a18, uint64_t a19, char a20,char a21)
{
  uint64_t v21;

  *(_QWORD *)(v21 + 16) = a1;
  *(_QWORD *)(v21 + 24) = a2;
  *(_QWORD *)(v21 + 32) = a3;
  *(_BYTE *)(v21 + 40) = a4 & 1;
  *(_BYTE *)(v21 + 41) = a5;
  *(_QWORD *)(v21 + 48) = a6;
  *(_BYTE *)(v21 + 56) = a7 & 1;
  *(_BYTE *)(v21 + 57) = a8;
  *(_QWORD *)(v21 + 64) = a9;
  *(_BYTE *)(v21 + 72) = a10 & 1;
  *(_QWORD *)(v21 + 96) = a13;
  *(_BYTE *)(v21 + 104) = a14 & 1;
  *(_QWORD *)(v21 + 80) = a11;
  *(_BYTE *)(v21 + 88) = a12 & 1;
  *(_BYTE *)(v21 + 105) = a15;
  *(_QWORD *)(v21 + 112) = a16;
  *(_BYTE *)(v21 + 120) = a17 & 1;
  *(_BYTE *)(v21 + 121) = a18;
  *(_QWORD *)(v21 + 128) = a19;
  *(_BYTE *)(v21 + 136) = a20 & 1;
  *(_BYTE *)(v21 + 137) = a21;
  return v21;
}

uint64_t sub_1BCB39048(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  id v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98;
  char v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  char v107;
  NSObject *v108;
  os_log_type_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  unint64_t v131;

  v123 = *v1;
  v4 = sub_1BCB63DDC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1BCB63B3C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v119 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(a1, sel_healthDataSource);
  if (!v12)
  {
    sub_1BCB63DC4();
    v25 = sub_1BCB63DD0();
    v26 = sub_1BCB64508();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      *(_QWORD *)&v129 = v28;
      v125 = v4;
      *(_DWORD *)v27 = 136446210;
      v29 = sub_1BCB64B14();
      *(_QWORD *)&v127 = sub_1BCB010C8(v29, v30, (uint64_t *)&v129);
      sub_1BCB64640();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1BCAF3000, v25, v26, "[%{public}s] Tried to create a payload with a dataSource containing nil healthDataSource", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCFD928](v28, -1, -1);
      MEMORY[0x1BCCFD928](v27, -1, -1);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v125);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    sub_1BCB3A178();
    swift_allocError();
    *v118 = 0xD000000000000020;
    v118[1] = 0x80000001BCB6B7D0;
    return swift_willThrow();
  }
  v13 = v12;
  v120 = v1;
  v125 = v4;
  v122 = v2;
  v14 = objc_allocWithZone(MEMORY[0x1E0D2C430]);
  v121 = v13;
  v15 = objc_msgSend(v14, sel_initWithDataSource_, v13);
  v131 = sub_1BCB2C478(MEMORY[0x1E0DEE9D8]);
  v16 = sub_1BCB6413C();
  v18 = v17;
  v124 = v15;
  v19 = objc_msgSend(v15, sel_biologicalSex);
  v20 = MEMORY[0x1E0DEA968];
  if (v19)
  {
    v21 = v19;
    v22 = sub_1BCB6413C();
    v24 = v23;

    *((_QWORD *)&v130 + 1) = v20;
    if (v24)
      goto LABEL_9;
  }
  else
  {
    *((_QWORD *)&v130 + 1) = MEMORY[0x1E0DEA968];
  }
  v22 = sub_1BCB6413C();
  v24 = v31;
LABEL_9:
  v32 = v120;
  *(_QWORD *)&v129 = v22;
  *((_QWORD *)&v129 + 1) = v24;
  sub_1BCB0537C(&v129, &v127);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v126 = v131;
  v131 = 0x8000000000000000;
  sub_1BCB0FD0C(&v127, v16, v18, isUniquelyReferenced_nonNull_native);
  v131 = v126;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v34 = sub_1BCB6413C();
  v36 = v35;
  sub_1BCB63B30();
  v37 = (void *)sub_1BCB63B00();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v38 = v124;
  v39 = objc_msgSend(v124, sel_bucketedUserAgeForCurrentDate_, v37);

  *((_QWORD *)&v130 + 1) = sub_1BCAFC2E0(0, &qword_1EF487720);
  *(_QWORD *)&v129 = v39;
  sub_1BCB0537C(&v129, &v127);
  v40 = swift_isUniquelyReferenced_nonNull_native();
  v126 = v131;
  v131 = 0x8000000000000000;
  sub_1BCB0FD0C(&v127, v34, v36, v40);
  v131 = v126;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v41 = sub_1BCB6413C();
  v43 = v42;
  v44 = objc_msgSend(v38, sel_activePairedWatchProductType);
  if (v44)
  {
    v45 = v44;
    v46 = sub_1BCB6413C();
    v48 = v47;

    *((_QWORD *)&v130 + 1) = MEMORY[0x1E0DEA968];
    if (v48)
      goto LABEL_14;
  }
  else
  {
    *((_QWORD *)&v130 + 1) = MEMORY[0x1E0DEA968];
  }
  v46 = sub_1BCB6413C();
  v48 = v49;
LABEL_14:
  *(_QWORD *)&v129 = v46;
  *((_QWORD *)&v129 + 1) = v48;
  sub_1BCB0537C(&v129, &v127);
  v50 = swift_isUniquelyReferenced_nonNull_native();
  v126 = v131;
  v131 = 0x8000000000000000;
  sub_1BCB0FD0C(&v127, v41, v43, v50);
  v131 = v126;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v51 = (id)HKStringFromMedicationListOnboardingProvenanceType();
  v52 = sub_1BCB6413C();
  v54 = v53;

  v55 = MEMORY[0x1E0DEA968];
  *((_QWORD *)&v130 + 1) = MEMORY[0x1E0DEA968];
  *(_QWORD *)&v129 = v52;
  *((_QWORD *)&v129 + 1) = v54;
  sub_1BCB0537C(&v129, &v127);
  v56 = swift_isUniquelyReferenced_nonNull_native();
  v126 = v131;
  v131 = 0x8000000000000000;
  sub_1BCB0FD0C(&v127, 0x6E616E65766F7270, 0xEA00000000006563, v56);
  v131 = v126;
  swift_bridgeObjectRelease();
  v57 = (id)HKStringFromMedicationListOnboardingStepType();
  v58 = sub_1BCB6413C();
  v60 = v59;

  *((_QWORD *)&v130 + 1) = v55;
  *(_QWORD *)&v129 = v58;
  *((_QWORD *)&v129 + 1) = v60;
  sub_1BCB0537C(&v129, &v127);
  v61 = swift_isUniquelyReferenced_nonNull_native();
  v126 = v131;
  v131 = 0x8000000000000000;
  sub_1BCB0FD0C(&v127, 1885697139, 0xE400000000000000, v61);
  v131 = v126;
  swift_bridgeObjectRelease();
  v62 = *((_BYTE *)v32 + 41);
  v63 = MEMORY[0x1E0DEAFA0];
  *((_QWORD *)&v130 + 1) = MEMORY[0x1E0DEAFA0];
  LOBYTE(v129) = v62;
  sub_1BCB0537C(&v129, &v127);
  v64 = swift_isUniquelyReferenced_nonNull_native();
  v126 = v131;
  v131 = 0x8000000000000000;
  sub_1BCB0FD0C(&v127, 0xD000000000000010, 0x80000001BCB6B6B0, v64);
  v131 = v126;
  swift_bridgeObjectRelease();
  objc_msgSend(v38, sel_isOntologySupportedRegion);
  v65 = sub_1BCB64364();
  v66 = sub_1BCAFC2E0(0, (unint64_t *)&qword_1EDA139E0);
  *((_QWORD *)&v130 + 1) = v66;
  *(_QWORD *)&v129 = v65;
  sub_1BCB0537C(&v129, &v127);
  v67 = swift_isUniquelyReferenced_nonNull_native();
  v126 = v131;
  v131 = 0x8000000000000000;
  sub_1BCB0FD0C(&v127, 0xD000000000000019, 0x80000001BCB6B800, v67);
  v131 = v126;
  swift_bridgeObjectRelease();
  if (*((_BYTE *)v32 + 57) == 2)
  {
    sub_1BCB2EC40(0xD00000000000001FLL, 0x80000001BCB6B6F0, &v129);
    sub_1BCB2F77C((uint64_t)&v129);
  }
  else
  {
    v68 = sub_1BCB64364();
    *((_QWORD *)&v130 + 1) = v66;
    *(_QWORD *)&v129 = v68;
    sub_1BCB0537C(&v129, &v127);
    v69 = swift_isUniquelyReferenced_nonNull_native();
    v126 = v131;
    v131 = 0x8000000000000000;
    sub_1BCB0FD0C(&v127, 0xD00000000000001FLL, 0x80000001BCB6B6F0, v69);
    v131 = v126;
    swift_bridgeObjectRelease();
  }
  v70 = MEMORY[0x1E0DEB418];
  if ((v32[9] & 1) != 0)
  {
    sub_1BCB2EC40(0xD000000000000013, 0x80000001BCB6B820, &v129);
    sub_1BCB2F77C((uint64_t)&v129);
    if ((v32[11] & 1) == 0)
    {
LABEL_19:
      v71 = v32[10];
      *((_QWORD *)&v130 + 1) = v70;
      *(_QWORD *)&v129 = v71;
      sub_1BCB0537C(&v129, &v127);
      v72 = swift_isUniquelyReferenced_nonNull_native();
      v126 = v131;
      v131 = 0x8000000000000000;
      sub_1BCB0FD0C(&v127, 0xD00000000000001DLL, 0x80000001BCB6B840, v72);
      v131 = v126;
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
  }
  else
  {
    v73 = v32[8];
    *((_QWORD *)&v130 + 1) = MEMORY[0x1E0DEB418];
    *(_QWORD *)&v129 = v73;
    sub_1BCB0537C(&v129, &v127);
    v74 = swift_isUniquelyReferenced_nonNull_native();
    v126 = v131;
    v131 = 0x8000000000000000;
    sub_1BCB0FD0C(&v127, 0xD000000000000013, 0x80000001BCB6B820, v74);
    v131 = v126;
    swift_bridgeObjectRelease();
    if ((v32[11] & 1) == 0)
      goto LABEL_19;
  }
  sub_1BCB2EC40(0xD00000000000001DLL, 0x80000001BCB6B840, &v129);
  sub_1BCB2F77C((uint64_t)&v129);
LABEL_22:
  if (*((_BYTE *)v32 + 105) == 2)
  {
    sub_1BCB2EC40(0xD000000000000018, 0x80000001BCB6B750, &v129);
    sub_1BCB2F77C((uint64_t)&v129);
  }
  else
  {
    v75 = sub_1BCB64364();
    *((_QWORD *)&v130 + 1) = v66;
    *(_QWORD *)&v129 = v75;
    sub_1BCB0537C(&v129, &v127);
    v76 = swift_isUniquelyReferenced_nonNull_native();
    v126 = v131;
    v131 = 0x8000000000000000;
    sub_1BCB0FD0C(&v127, 0xD000000000000018, 0x80000001BCB6B750, v76);
    v131 = v126;
    swift_bridgeObjectRelease();
  }
  if (*((_BYTE *)v32 + 120) == 1)
  {
    *((_QWORD *)&v130 + 1) = MEMORY[0x1E0DEA968];
  }
  else
  {
    v77 = (id)HKStringFromHKMedicationListOnboardingAlgorithmType();
    v78 = sub_1BCB6413C();
    v80 = v79;

    *((_QWORD *)&v130 + 1) = MEMORY[0x1E0DEA968];
    if (v80)
      goto LABEL_29;
  }
  v78 = sub_1BCB6413C();
  v80 = v81;
LABEL_29:
  *(_QWORD *)&v129 = v78;
  *((_QWORD *)&v129 + 1) = v80;
  sub_1BCB0537C(&v129, &v127);
  v82 = swift_isUniquelyReferenced_nonNull_native();
  v126 = v131;
  v131 = 0x8000000000000000;
  sub_1BCB0FD0C(&v127, 0x687469726F676C61, 0xED0000657079546DLL, v82);
  v131 = v126;
  swift_bridgeObjectRelease();
  if ((v32[13] & 1) != 0)
  {
    sub_1BCB2EC40(0xD00000000000001CLL, 0x80000001BCB6B730, &v129);
    sub_1BCB2F77C((uint64_t)&v129);
  }
  else
  {
    v83 = v32[12];
    *((_QWORD *)&v130 + 1) = v70;
    *(_QWORD *)&v129 = v83;
    sub_1BCB0537C(&v129, &v127);
    v84 = swift_isUniquelyReferenced_nonNull_native();
    v126 = v131;
    v131 = 0x8000000000000000;
    sub_1BCB0FD0C(&v127, 0xD00000000000001CLL, 0x80000001BCB6B730, v84);
    v131 = v126;
    swift_bridgeObjectRelease();
  }
  v85 = MEMORY[0x1E0DEA968];
  if (*((_BYTE *)v32 + 56) == 1)
  {
    *((_QWORD *)&v130 + 1) = MEMORY[0x1E0DEA968];
  }
  else
  {
    v86 = (id)HKStringFromMedicationListOnboardingDetailsEntryType();
    v87 = sub_1BCB6413C();
    v89 = v88;

    *((_QWORD *)&v130 + 1) = v85;
    if (v89)
      goto LABEL_36;
  }
  v87 = sub_1BCB6413C();
  v89 = v90;
LABEL_36:
  *(_QWORD *)&v129 = v87;
  *((_QWORD *)&v129 + 1) = v89;
  sub_1BCB0537C(&v129, &v127);
  v91 = swift_isUniquelyReferenced_nonNull_native();
  v126 = v131;
  v131 = 0x8000000000000000;
  sub_1BCB0FD0C(&v127, 0xD000000000000015, 0x80000001BCB6B6D0, v91);
  v131 = v126;
  swift_bridgeObjectRelease();
  if (*((_BYTE *)v32 + 40) == 1)
  {
    *((_QWORD *)&v130 + 1) = v85;
  }
  else
  {
    v92 = (id)HKStringFromMedicationListOnboardingActionType();
    v93 = sub_1BCB6413C();
    v95 = v94;

    *((_QWORD *)&v130 + 1) = v85;
    if (v95)
      goto LABEL_40;
  }
  v93 = sub_1BCB6413C();
  v95 = v96;
LABEL_40:
  *(_QWORD *)&v129 = v93;
  *((_QWORD *)&v129 + 1) = v95;
  sub_1BCB0537C(&v129, &v127);
  v97 = swift_isUniquelyReferenced_nonNull_native();
  v126 = v131;
  v131 = 0x8000000000000000;
  sub_1BCB0FD0C(&v127, 0x6E6F69746361, 0xE600000000000000, v97);
  v131 = v126;
  swift_bridgeObjectRelease();
  v98 = *((_BYTE *)v32 + 121);
  *((_QWORD *)&v130 + 1) = v63;
  LOBYTE(v129) = v98;
  sub_1BCB0537C(&v129, &v127);
  v99 = swift_isUniquelyReferenced_nonNull_native();
  v126 = v131;
  v131 = 0x8000000000000000;
  sub_1BCB0FD0C(&v127, 0xD000000000000016, 0x80000001BCB6B780, v99);
  v131 = v126;
  swift_bridgeObjectRelease();
  if (*((_BYTE *)v32 + 136) == 1)
  {
    v129 = 0u;
    v130 = 0u;
    v100 = v125;
LABEL_44:
    sub_1BCB2F77C((uint64_t)&v129);
    sub_1BCB2EC40(0x656C756465686373, 0xEC00000065707954, &v127);
    sub_1BCB2F77C((uint64_t)&v127);
    goto LABEL_45;
  }
  v101 = (id)HKStringFromMedicationScheduleType();
  v102 = sub_1BCB6413C();
  v104 = v103;

  v128 = v85;
  *(_QWORD *)&v127 = v102;
  *((_QWORD *)&v127 + 1) = v104;
  sub_1BCB0537C(&v127, &v129);
  v100 = v125;
  if (!*((_QWORD *)&v130 + 1))
    goto LABEL_44;
  sub_1BCB0537C(&v129, &v127);
  v105 = swift_isUniquelyReferenced_nonNull_native();
  v126 = v131;
  v131 = 0x8000000000000000;
  sub_1BCB0FD0C(&v127, 0x656C756465686373, 0xEC00000065707954, v105);
  v131 = v126;
  swift_bridgeObjectRelease();
LABEL_45:
  v106 = sub_1BCB64364();
  *((_QWORD *)&v130 + 1) = v66;
  *(_QWORD *)&v129 = v106;
  sub_1BCB0537C(&v129, &v127);
  v107 = swift_isUniquelyReferenced_nonNull_native();
  v126 = v131;
  v131 = 0x8000000000000000;
  sub_1BCB0FD0C(&v127, 0xD000000000000013, 0x80000001BCB6B7B0, v107);
  v131 = v126;
  swift_bridgeObjectRelease();
  if (qword_1EDA14510 != -1)
    swift_once();
  __swift_project_value_buffer(v100, (uint64_t)qword_1EDA14518);
  v108 = sub_1BCB63DD0();
  v109 = sub_1BCB64514();
  if (os_log_type_enabled(v108, v109))
  {
    v110 = swift_slowAlloc();
    v111 = swift_slowAlloc();
    *(_QWORD *)&v129 = v111;
    *(_DWORD *)v110 = 136315394;
    v112 = sub_1BCB64B14();
    *(_QWORD *)&v127 = sub_1BCB010C8(v112, v113, (uint64_t *)&v129);
    sub_1BCB64640();
    swift_bridgeObjectRelease();
    *(_WORD *)(v110 + 12) = 2080;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v114 = sub_1BCB640C4();
    v116 = v115;
    swift_bridgeObjectRelease();
    v126 = sub_1BCB010C8(v114, v116, (uint64_t *)&v129);
    sub_1BCB64640();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BCAF3000, v108, v109, "%s IHA gated event payload: %s", (uint8_t *)v110, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BCCFD928](v111, -1, -1);
    MEMORY[0x1BCCFD928](v110, -1, -1);
    swift_unknownObjectRelease();

  }
  else
  {

    swift_unknownObjectRelease();
  }
  swift_beginAccess();
  return v131;
}

uint64_t sub_1BCB3A148()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MedicationListOnboardingEvent()
{
  return objc_opt_self();
}

unint64_t sub_1BCB3A178()
{
  unint64_t result;

  result = qword_1EF4880D0;
  if (!qword_1EF4880D0)
  {
    result = MEMORY[0x1BCCFD874](&unk_1BCB67E84, &type metadata for MedicationListOnboardingEvent.AnalyticsEventPayloadError);
    atomic_store(result, (unint64_t *)&qword_1EF4880D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicationListOnboardingEvent.AnalyticsEventPayloadError()
{
  return &type metadata for MedicationListOnboardingEvent.AnalyticsEventPayloadError;
}

uint64_t sub_1BCB3A1D0()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_1BCB3A1D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1BCB3A204(uint64_t a1)
{
  uint64_t *v1;

  return sub_1BCB3A93C(a1, *v1);
}

uint64_t static ListConceptManager.activeMedicationsListManager(using:changeProvider:)(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;

  v3 = a1;
  v4 = (id)HKStringFromListUserDomainType();
  sub_1BCB6413C();

  sub_1BCB3A2C0();
  sub_1BCB63D88();
  swift_allocObject();
  v5 = a2;
  return sub_1BCB63D70();
}

unint64_t sub_1BCB3A2C0()
{
  unint64_t result;

  result = qword_1EDA14050;
  if (!qword_1EDA14050)
  {
    result = MEMORY[0x1BCCFD874](&unk_1BCB67EEC, &type metadata for MedicationsListDataProvider);
    atomic_store(result, (unint64_t *)&qword_1EDA14050);
  }
  return result;
}

uint64_t ListConceptManager.contains(concept:)(void *a1)
{
  unint64_t v2;
  id v3;
  char v4;
  char v5;
  unint64_t v6;
  id v7;

  v2 = sub_1BCB63D7C();
  v3 = a1;
  v4 = sub_1BCB3A60C(v2, v3);
  swift_bridgeObjectRelease();

  if ((v4 & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    v6 = sub_1BCB63D64();
    v7 = v3;
    v5 = sub_1BCB3A60C(v6, v7);
    swift_bridgeObjectRelease();

  }
  return v5 & 1;
}

uint64_t ListConceptManager.isActive(concept:)(void *a1)
{
  return sub_1BCB3A3BC(a1, MEMORY[0x1E0D2EF80]);
}

uint64_t ListConceptManager.isArchived(concept:)(void *a1)
{
  return sub_1BCB3A3BC(a1, MEMORY[0x1E0D2EF60]);
}

uint64_t sub_1BCB3A3BC(void *a1, uint64_t (*a2)(void))
{
  unint64_t v3;
  id v4;
  void *v5;
  uint64_t result;

  v3 = a2();
  v4 = a1;
  v5 = sub_1BCB3A440(v3, v4);
  swift_bridgeObjectRelease();

  if (v5)
  {
    objc_opt_self();
    result = swift_dynamicCastObjCClass();
    if (result)
      return result;

  }
  return 0;
}

void *sub_1BCB3A440(unint64_t a1, void *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  char v15;
  unint64_t v17;
  unint64_t v18;

  v3 = a1;
  if (a1 >> 62)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    v4 = sub_1BCB648D4();
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      v17 = v3;
      v18 = v3 & 0xC000000000000001;
      v5 = 4;
      while (1)
      {
        if (v18)
          v7 = (id)MEMORY[0x1BCCFCF20](v5 - 4, v3);
        else
          v7 = *(id *)(v3 + 8 * v5);
        v6 = v7;
        v8 = v5 - 3;
        if (__OFADD__(v5 - 4, 1))
        {
          __break(1u);
          goto LABEL_19;
        }
        v9 = objc_msgSend(v7, sel_firstConceptIdentifier);
        v10 = objc_msgSend(a2, sel_identifier);
        v11 = v10;
        if (!v9)
          break;
        if (!v10)
        {
          v11 = v9;
LABEL_5:

          v6 = v11;
          goto LABEL_6;
        }
        sub_1BCAFC2E0(0, &qword_1EF487998);
        v12 = v4;
        v13 = a2;
        v14 = v9;
        v15 = sub_1BCB645F8();

        a2 = v13;
        v4 = v12;
        v3 = v17;

        if ((v15 & 1) != 0)
        {
LABEL_17:
          swift_bridgeObjectRelease();
          return v6;
        }
LABEL_6:

        ++v5;
        if (v8 == v4)
          goto LABEL_20;
      }
      if (!v10)
        goto LABEL_17;
      goto LABEL_5;
    }
  }
LABEL_20:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1BCB3A60C(unint64_t a1, void *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  char v15;
  unint64_t v17;
  unint64_t v18;

  v3 = a1;
  if (a1 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    v4 = sub_1BCB648D4();
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      v17 = v3;
      v18 = v3 & 0xC000000000000001;
      v5 = 4;
      while (1)
      {
        if (v18)
          v6 = (id)MEMORY[0x1BCCFCF20](v5 - 4, v3);
        else
          v6 = *(id *)(v3 + 8 * v5);
        v7 = v6;
        v8 = v5 - 3;
        if (__OFADD__(v5 - 4, 1))
        {
          __break(1u);
          goto LABEL_20;
        }
        v9 = objc_msgSend(v6, sel_firstConceptIdentifier);
        v10 = objc_msgSend(a2, sel_identifier);
        v11 = v10;
        if (!v9)
          break;
        if (!v10)
        {
          v11 = v9;
LABEL_5:

          goto LABEL_6;
        }
        sub_1BCAFC2E0(0, &qword_1EF487998);
        v12 = v4;
        v13 = a2;
        v14 = v9;
        v15 = sub_1BCB645F8();

        a2 = v13;
        v4 = v12;
        v3 = v17;

        if ((v15 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
LABEL_6:
        ++v5;
        if (v8 == v4)
          goto LABEL_21;
      }
      if (!v10)
      {
        swift_bridgeObjectRelease();

        return 1;
      }
      goto LABEL_5;
    }
  }
LABEL_21:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t initializeBufferWithCopyOfBuffer for MedicationsListDataProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for MedicationsListDataProvider()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for MedicationsListDataProvider(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MedicationsListDataProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicationsListDataProvider(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicationsListDataProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicationsListDataProvider()
{
  return &type metadata for MedicationsListDataProvider;
}

uint64_t sub_1BCB3A93C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_1BCB3ABA0();
  v4 = v3;
  v16 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCAFC2E0(0, &qword_1EDA141A0);
  sub_1BCAFC2E0(0, &qword_1EDA14538);
  v7 = (void *)objc_opt_self();
  v8 = objc_msgSend((id)objc_opt_self(), sel_medicationUserDomainConceptTypeIdentifier);
  v9 = objc_msgSend(v7, sel_predicateForUserDomainConceptsWithTypeIdentifier_, v8);

  v10 = sub_1BCB644E4();
  sub_1BCAFC2E0(0, (unint64_t *)&unk_1EDA14270);
  v11 = objc_msgSend(v7, sel_predicateForListUserDomainConceptWithListType_, a2);
  v12 = sub_1BCB644E4();

  v17 = v12;
  v18 = v10;
  sub_1BCB3AC68(0, &qword_1EDA14168, &qword_1EDA14190, &qword_1EDA14538);
  sub_1BCB3AC68(0, &qword_1EDA14178, &qword_1EDA14198, (unint64_t *)&unk_1EDA14270);
  sub_1BCB3ACE0();
  sub_1BCB3AD48();
  swift_retain();
  swift_retain();
  sub_1BCB63E0C();
  sub_1BCB3ADB0();
  v13 = sub_1BCB63F68();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v4);
  return v13;
}

void sub_1BCB3ABA0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EDA14158)
  {
    sub_1BCB3AC68(255, &qword_1EDA14168, &qword_1EDA14190, &qword_1EDA14538);
    sub_1BCB3AC68(255, &qword_1EDA14178, &qword_1EDA14198, (unint64_t *)&unk_1EDA14270);
    sub_1BCB3ACE0();
    sub_1BCB3AD48();
    v0 = sub_1BCB63E00();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EDA14158);
  }
}

void sub_1BCB3AC68(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_1BCB051D8(255, a3, a4);
    sub_1BCB052CC();
    v5 = sub_1BCB63E48();
    if (!v6)
      atomic_store(v5, a2);
  }
}

unint64_t sub_1BCB3ACE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDA14160;
  if (!qword_1EDA14160)
  {
    sub_1BCB3AC68(255, &qword_1EDA14168, &qword_1EDA14190, &qword_1EDA14538);
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0C95D90], v1);
    atomic_store(result, (unint64_t *)&qword_1EDA14160);
  }
  return result;
}

unint64_t sub_1BCB3AD48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDA14170;
  if (!qword_1EDA14170)
  {
    sub_1BCB3AC68(255, &qword_1EDA14178, &qword_1EDA14198, (unint64_t *)&unk_1EDA14270);
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0C95D90], v1);
    atomic_store(result, (unint64_t *)&qword_1EDA14170);
  }
  return result;
}

unint64_t sub_1BCB3ADB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EDA14150;
  if (!qword_1EDA14150)
  {
    sub_1BCB3ABA0();
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0C95698], v1);
    atomic_store(result, (unint64_t *)&qword_1EDA14150);
  }
  return result;
}

unint64_t sub_1BCB3ADFC(uint64_t a1)
{
  unint64_t result;

  result = 0;
  switch(a1)
  {
    case 1:
      result = 0xD00000000000002ELL;
      break;
    case 2:
      result = 0xD000000000000032;
      break;
    case 3:
      result = 0xD00000000000002DLL;
      break;
    case 4:
      result = 0xD00000000000002BLL;
      break;
    case 5:
      result = 0xD000000000000031;
      break;
    case 6:
      result = 0xD000000000000030;
      break;
    case 7:
      result = 0xD000000000000032;
      break;
    case 8:
    case 9:
    case 10:
      result = 0xD00000000000002CLL;
      break;
    case 12:
      result = 0xD00000000000002BLL;
      break;
    case 13:
      result = 0xD00000000000002DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1BCB3AF48(char a1, uint64_t a2)
{
  uint64_t v2;
  id v3;

  v2 = 0;
  switch(a2)
  {
    case 1:
      if ((a1 & 1) != 0)
      {
        if (qword_1EDA14148 != -1)
          swift_once();
      }
      else if (qword_1EDA14148 != -1)
      {
        swift_once();
      }
      goto LABEL_85;
    case 2:
      if ((a1 & 1) != 0)
      {
        if (qword_1EDA14148 != -1)
          swift_once();
      }
      else if (qword_1EDA14148 != -1)
      {
        swift_once();
      }
      goto LABEL_85;
    case 3:
      if ((a1 & 1) != 0)
      {
        if (qword_1EDA14148 != -1)
          swift_once();
      }
      else if (qword_1EDA14148 != -1)
      {
        swift_once();
      }
      goto LABEL_85;
    case 4:
      if ((a1 & 1) != 0)
      {
        if (qword_1EDA14148 != -1)
          swift_once();
      }
      else if (qword_1EDA14148 != -1)
      {
        swift_once();
      }
      goto LABEL_85;
    case 5:
      if ((a1 & 1) != 0)
      {
        if (qword_1EDA14148 != -1)
          swift_once();
      }
      else if (qword_1EDA14148 != -1)
      {
        swift_once();
      }
      goto LABEL_85;
    case 6:
      if ((a1 & 1) != 0)
      {
        if (qword_1EDA14148 != -1)
          swift_once();
      }
      else if (qword_1EDA14148 != -1)
      {
        swift_once();
      }
      goto LABEL_85;
    case 7:
      if ((a1 & 1) != 0)
      {
        if (qword_1EDA14148 != -1)
          swift_once();
      }
      else if (qword_1EDA14148 != -1)
      {
        swift_once();
      }
      goto LABEL_85;
    case 8:
      if ((a1 & 1) != 0)
      {
        if (qword_1EDA14148 != -1)
          swift_once();
      }
      else if (qword_1EDA14148 != -1)
      {
        swift_once();
      }
      goto LABEL_85;
    case 9:
      if ((a1 & 1) != 0)
      {
        if (qword_1EDA14148 != -1)
          swift_once();
      }
      else if (qword_1EDA14148 != -1)
      {
        swift_once();
      }
      goto LABEL_85;
    case 10:
      if ((a1 & 1) != 0)
      {
        if (qword_1EDA14148 != -1)
          swift_once();
      }
      else if (qword_1EDA14148 != -1)
      {
        swift_once();
      }
      goto LABEL_85;
    case 12:
      if ((a1 & 1) != 0)
      {
        if (qword_1EDA14148 != -1)
          swift_once();
      }
      else if (qword_1EDA14148 != -1)
      {
        swift_once();
      }
      goto LABEL_85;
    case 13:
      if ((a1 & 1) != 0)
      {
        if (qword_1EDA14148 != -1)
          swift_once();
      }
      else if (qword_1EDA14148 != -1)
      {
        swift_once();
      }
LABEL_85:
      v3 = (id)qword_1EDA14130;
      swift_bridgeObjectRetain();
      v2 = sub_1BCB63A34();
      swift_bridgeObjectRelease();

      break;
    default:
      return v2;
  }
  return v2;
}

uint64_t Date.startOfDay()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = sub_1BCB63C38();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCB63C20();
  sub_1BCB63B9C();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t Date.endOfDay()@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;

  v61 = a1;
  v59 = sub_1BCB63BD8();
  v57 = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59);
  v56 = (char *)&v45 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_1BCB63BF0();
  v52 = *(_QWORD *)(v2 - 8);
  v53 = v2;
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1BCB63BB4();
  v6 = *(_QWORD *)(v5 - 8);
  v46 = v5;
  v47 = v6;
  v7 = v6;
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_1BCB63B3C();
  v10 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  v55 = *(_QWORD *)(v54 - 8);
  v11 = MEMORY[0x1E0C80A78](v54);
  v60 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v58 = (char *)&v45 - v14;
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v45 - v15;
  v17 = sub_1BCB63C38();
  v18 = *(_QWORD *)(v17 - 8);
  v50 = v17;
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v45 - v22;
  sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, v10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v25 = MEMORY[0x1E0C80A78](v24);
  v51 = (char *)&v45 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v48 = (uint64_t)&v45 - v27;
  sub_1BCB63C20();
  sub_1BCB63C20();
  sub_1BCB63B9C();
  v49 = *(void (**)(char *, uint64_t))(v18 + 8);
  v49(v21, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0CB0F90], v5);
  v29 = v52;
  v28 = v53;
  v30 = v4;
  (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v4, *MEMORY[0x1E0CB1010], v53);
  v31 = v56;
  v32 = v57;
  v33 = v59;
  (*(void (**)(char *, _QWORD, uint64_t))(v57 + 104))(v56, *MEMORY[0x1E0CB0FD8], v59);
  sub_1BCB63BFC();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v33);
  v34 = v54;
  (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v28);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v9, v46);
  v35 = v55;
  v36 = *(void (**)(char *, uint64_t))(v55 + 8);
  v36(v16, v34);
  v38 = v49;
  v37 = v50;
  v49(v23, v50);
  sub_1BCB63C20();
  sub_1BCB63B9C();
  v38(v23, v37);
  v39 = v58;
  sub_1BCB63AF4();
  v40 = v60;
  v41 = v16;
  v42 = (uint64_t)v51;
  v36(v41, v34);
  sub_1BCB02534(v48, v42);
  v43 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
  v43(v40, v39, v34);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v42, 1, v34) == 1)
  {
    v43(v61, v40, v34);
    return sub_1BCB09944(v42);
  }
  else
  {
    v36(v40, v34);
    return ((uint64_t (*)(char *, uint64_t, uint64_t))v43)(v61, v42, v34);
  }
}

uint64_t Date.localizedRelative.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(unint64_t, _QWORD, uint64_t);
  char *v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v0 = sub_1BCB63B3C();
  v41 = *(_QWORD *)(v0 - 8);
  v42 = v0;
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v38 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_1BCB63C38();
  v3 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40);
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1BCB639EC();
  v38 = *(_QWORD *)(v6 - 8);
  v39 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCAFC448(0, &qword_1EF4874E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v9 = sub_1BCB63C2C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1BCB65FF0;
  v14 = v13 + v12;
  v15 = *(void (**)(unint64_t, _QWORD, uint64_t))(v10 + 104);
  v15(v14, *MEMORY[0x1E0CB1140], v9);
  v15(v14 + v11, *MEMORY[0x1E0CB1178], v9);
  v16 = v8;
  v15(v14 + 2 * v11, *MEMORY[0x1E0CB1130], v9);
  sub_1BCB3C488(v13);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1BCB63C20();
  sub_1BCB63B30();
  sub_1BCB63BC0();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v2, v42);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v40);
  result = sub_1BCB639C8();
  if ((v18 & 1) != 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  v19 = result;
  result = sub_1BCB639D4();
  if ((v20 & 1) != 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v21 = result;
  result = sub_1BCB639E0();
  if ((v22 & 1) != 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  if (v19 < 1)
  {
    if (v21 < 1)
    {
      v31 = result;
      if (qword_1EDA14148 != -1)
        swift_once();
      v32 = (id)qword_1EDA14130;
      swift_bridgeObjectRetain();
      sub_1BCB63A34();
      swift_bridgeObjectRelease();

      sub_1BCAFC448(0, (unint64_t *)&qword_1EDA13A08, (uint64_t (*)(uint64_t))sub_1BCB0C1E4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v33 = swift_allocObject();
      v34 = MEMORY[0x1E0DEB418];
      v35 = MEMORY[0x1E0DEB490];
      *(_OWORD *)(v33 + 16) = xmmword_1BCB66020;
      *(_QWORD *)(v33 + 56) = v34;
      *(_QWORD *)(v33 + 64) = v35;
      if (v31 <= 1)
        v36 = 1;
      else
        v36 = v31;
      *(_QWORD *)(v33 + 32) = v36;
    }
    else
    {
      if (qword_1EDA14148 != -1)
        swift_once();
      v27 = (id)qword_1EDA14130;
      swift_bridgeObjectRetain();
      sub_1BCB63A34();
      swift_bridgeObjectRelease();

      sub_1BCAFC448(0, (unint64_t *)&qword_1EDA13A08, (uint64_t (*)(uint64_t))sub_1BCB0C1E4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v28 = swift_allocObject();
      v29 = MEMORY[0x1E0DEB418];
      *(_OWORD *)(v28 + 16) = xmmword_1BCB66020;
      v30 = MEMORY[0x1E0DEB490];
      *(_QWORD *)(v28 + 56) = v29;
      *(_QWORD *)(v28 + 64) = v30;
      *(_QWORD *)(v28 + 32) = v21;
    }
  }
  else
  {
    if (qword_1EDA14148 != -1)
      swift_once();
    v23 = (id)qword_1EDA14130;
    swift_bridgeObjectRetain();
    sub_1BCB63A34();
    swift_bridgeObjectRelease();

    sub_1BCAFC448(0, (unint64_t *)&qword_1EDA13A08, (uint64_t (*)(uint64_t))sub_1BCB0C1E4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v24 = swift_allocObject();
    v25 = MEMORY[0x1E0DEB418];
    *(_OWORD *)(v24 + 16) = xmmword_1BCB66020;
    v26 = MEMORY[0x1E0DEB490];
    *(_QWORD *)(v24 + 56) = v25;
    *(_QWORD *)(v24 + 64) = v26;
    *(_QWORD *)(v24 + 32) = v19;
  }
  v37 = sub_1BCB64118();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v16, v39);
  return v37;
}

uint64_t sub_1BCB3C328(unint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void **v7;
  void *v8;
  id v9;
  uint64_t v10;

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1BCB648D4();
    swift_bridgeObjectRelease();
  }
  sub_1BCB3C644();
  sub_1BCAF7D24(&qword_1EF487BF0, (uint64_t (*)(uint64_t))sub_1BCB3C644, MEMORY[0x1E0DEFCF8]);
  result = sub_1BCB6440C();
  v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v4 = sub_1BCB648D4();
    result = swift_bridgeObjectRelease();
    if (!v4)
      return v10;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      return v10;
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = (void *)MEMORY[0x1BCCFCF20](i, a1);
        sub_1BCB45E20(&v9, v6);

      }
    }
    else
    {
      v7 = (void **)(a1 + 32);
      do
      {
        v8 = *v7++;
        sub_1BCB45E20(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BCB3C488(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  v2 = sub_1BCB63C2C();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v15 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  sub_1BCAF7D24(&qword_1EF487790, v10, MEMORY[0x1E0CB11D0]);
  result = sub_1BCB6440C();
  v16 = result;
  if (v9)
  {
    v12 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v13 = *(_QWORD *)(v3 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v14(v6, v12, v2);
      sub_1BCB4612C((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v12 += v13;
      --v9;
    }
    while (v9);
    return v16;
  }
  return result;
}

uint64_t sub_1BCB3C5B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_1BCB6440C();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1BCB45C50(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

unint64_t sub_1BCB3C644()
{
  unint64_t result;

  result = qword_1EDA144A8;
  if (!qword_1EDA144A8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EDA144A8);
  }
  return result;
}

uint64_t MedicationsSettingsManager.__allocating_init(healthStore:keyValueDomain:userDefaults:)(void *a1, void *a2, void *a3)
{
  uint64_t v6;

  swift_allocObject();
  v6 = sub_1BCB3DEA0(a1, a2, a3);

  return v6;
}

uint64_t MedicationsSettingsManager.showMinorDrugInteractions.getter()
{
  return sub_1BCB3C728(&qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__showMinorDrugInteractions, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D2D630]);
}

uint64_t MedicationsSettingsManager.isAlcoholDrugInteractionFactorEnabled.getter()
{
  return sub_1BCB3C728(&qword_1EDA130E8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D29FA8], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isAlcoholDrugInteractionFactorEnabled, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D29F98]);
}

uint64_t sub_1BCB3C728(unint64_t *a1, uint64_t (*a2)(_QWORD, uint64_t), _QWORD *a3, void (*a4)(_BYTE *__return_ptr, uint64_t))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE v14[15];

  sub_1BCAF84F0(0, a1, MEMORY[0x1E0DEAFA0], a2);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v11 = &v14[-v10];
  v12 = v4 + *a3;
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  a4(&v14[7], v8);
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  return v14[7];
}

uint64_t MedicationsSettingsManager.isTobaccoDrugInteractionFactorEnabled.getter()
{
  return sub_1BCB3C728(&qword_1EDA130E8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D29FA8], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isTobaccoDrugInteractionFactorEnabled, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D29F98]);
}

uint64_t MedicationsSettingsManager.isMarijuanaDrugInteractionFactorEnabled.getter()
{
  return sub_1BCB3C728(&qword_1EDA130E8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D29FA8], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isMarijuanaDrugInteractionFactorEnabled, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D29F98]);
}

id MedicationsSettingsManager.keyValueDomain.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

id MedicationsSettingsManager.userDefaults.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 24);
}

uint64_t MedicationsSettingsManager.init(healthStore:keyValueDomain:userDefaults:)(void *a1, void *a2, void *a3)
{
  uint64_t v5;

  v5 = sub_1BCB3DEA0(a1, a2, a3);

  return v5;
}

uint64_t MedicationsSettingsManager.isAlcoholDrugInteractionFactorEnabled.setter(char a1)
{
  return sub_1BCB3CAD8(a1, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isAlcoholDrugInteractionFactorEnabled, &qword_1EDA130E8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D29FA8], (void (*)(char *, uint64_t))MEMORY[0x1E0D29FA0]);
}

void (*MedicationsSettingsManager.isAlcoholDrugInteractionFactorEnabled.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  swift_beginAccess();
  sub_1BCAF84F0(0, &qword_1EDA130E8, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D29FA8]);
  v2[7] = sub_1BCB63D04();
  return sub_1BCB3C93C;
}

uint64_t sub_1BCB3C940@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X3>, uint64_t (*a3)(_QWORD, uint64_t)@<X4>, _QWORD *a4@<X5>, void (*a5)(_BYTE *__return_ptr, uint64_t)@<X6>, _BYTE *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[15];

  sub_1BCAF84F0(0, a2, MEMORY[0x1E0DEAFA0], a3);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v14 = &v17[-v13];
  v15 = *a1 + *a4;
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v14, v15, v11);
  a5(&v17[7], v11);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v11);
  *a6 = v17[7];
  return result;
}

uint64_t sub_1BCB3CA28(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, uint64_t (*a7)(_QWORD, uint64_t), void (*a8)(char *, uint64_t))
{
  uint64_t v11;
  char v13;

  v13 = *a1;
  swift_beginAccess();
  sub_1BCAF84F0(0, a6, MEMORY[0x1E0DEAFA0], a7);
  a8(&v13, v11);
  return swift_endAccess();
}

uint64_t MedicationsSettingsManager.isMarijuanaDrugInteractionFactorEnabled.setter(char a1)
{
  return sub_1BCB3CAD8(a1, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isMarijuanaDrugInteractionFactorEnabled, &qword_1EDA130E8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D29FA8], (void (*)(char *, uint64_t))MEMORY[0x1E0D29FA0]);
}

uint64_t sub_1BCB3CAD8(char a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(_QWORD, uint64_t), void (*a5)(char *, uint64_t))
{
  uint64_t v8;
  char v10;

  v10 = a1;
  swift_beginAccess();
  sub_1BCAF84F0(0, a3, MEMORY[0x1E0DEAFA0], a4);
  a5(&v10, v8);
  return swift_endAccess();
}

void (*MedicationsSettingsManager.isMarijuanaDrugInteractionFactorEnabled.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  swift_beginAccess();
  sub_1BCAF84F0(0, &qword_1EDA130E8, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D29FA8]);
  v2[7] = sub_1BCB63D04();
  return sub_1BCB3C93C;
}

uint64_t MedicationsSettingsManager.isTobaccoDrugInteractionFactorEnabled.setter(char a1)
{
  return sub_1BCB3CAD8(a1, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isTobaccoDrugInteractionFactorEnabled, &qword_1EDA130E8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D29FA8], (void (*)(char *, uint64_t))MEMORY[0x1E0D29FA0]);
}

void (*MedicationsSettingsManager.isTobaccoDrugInteractionFactorEnabled.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  swift_beginAccess();
  sub_1BCAF84F0(0, &qword_1EDA130E8, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D29FA8]);
  v2[7] = sub_1BCB63D04();
  return sub_1BCB3C93C;
}

uint64_t MedicationsSettingsManager.areDoseRemindersEnabled.getter()
{
  return sub_1BCB3C728(&qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__areDoseRemindersEnabled, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D2D630]);
}

uint64_t MedicationsSettingsManager.areDoseRemindersEnabled.setter(char a1)
{
  return sub_1BCB3CAD8(a1, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__areDoseRemindersEnabled, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], (void (*)(char *, uint64_t))MEMORY[0x1E0D2D638]);
}

void (*MedicationsSettingsManager.areDoseRemindersEnabled.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  swift_beginAccess();
  sub_1BCAF84F0(0, &qword_1EDA13060, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650]);
  v2[7] = sub_1BCB63C80();
  return sub_1BCB3C93C;
}

uint64_t MedicationsSettingsManager.areFollowUpNotificationsEnabled.getter()
{
  return sub_1BCB3C728(&qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__areFollowUpNotificationsEnabled, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D2D630]);
}

uint64_t MedicationsSettingsManager.areFollowUpNotificationsEnabled.setter(char a1)
{
  return sub_1BCB3CAD8(a1, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__areFollowUpNotificationsEnabled, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], (void (*)(char *, uint64_t))MEMORY[0x1E0D2D638]);
}

void (*MedicationsSettingsManager.areFollowUpNotificationsEnabled.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  swift_beginAccess();
  sub_1BCAF84F0(0, &qword_1EDA13060, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650]);
  v2[7] = sub_1BCB63C80();
  return sub_1BCB3C93C;
}

uint64_t MedicationsSettingsManager.didShowLifeStyleFactorsSelectionPage.getter()
{
  return sub_1BCB3C728(&qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__didShowLifeStyleFactorsSelectionPage, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D2D630]);
}

uint64_t MedicationsSettingsManager.didShowLifeStyleFactorsSelectionPage.setter(char a1)
{
  return sub_1BCB3CAD8(a1, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__didShowLifeStyleFactorsSelectionPage, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], (void (*)(char *, uint64_t))MEMORY[0x1E0D2D638]);
}

void (*MedicationsSettingsManager.didShowLifeStyleFactorsSelectionPage.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  swift_beginAccess();
  sub_1BCAF84F0(0, &qword_1EDA13060, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650]);
  v2[7] = sub_1BCB63C80();
  return sub_1BCB3C93C;
}

uint64_t MedicationsSettingsManager.didDismissCHRAddAccountTileInCategoryRoom.getter()
{
  return sub_1BCB3C728(&qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__didDismissCHRAddAccountTileInCategoryRoom, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D2D630]);
}

uint64_t MedicationsSettingsManager.didDismissCHRAddAccountTileInCategoryRoom.setter(char a1)
{
  return sub_1BCB3CAD8(a1, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__didDismissCHRAddAccountTileInCategoryRoom, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], (void (*)(char *, uint64_t))MEMORY[0x1E0D2D638]);
}

void (*MedicationsSettingsManager.didDismissCHRAddAccountTileInCategoryRoom.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  swift_beginAccess();
  sub_1BCAF84F0(0, &qword_1EDA13060, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650]);
  v2[7] = sub_1BCB63C80();
  return sub_1BCB3C93C;
}

uint64_t MedicationsSettingsManager.didDismissFollowUpTip.getter()
{
  return sub_1BCB3C728(&qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__didDismissFollowUpTip, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D2D630]);
}

uint64_t MedicationsSettingsManager.didDismissFollowUpTip.setter(char a1)
{
  return sub_1BCB3CAD8(a1, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__didDismissFollowUpTip, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], (void (*)(char *, uint64_t))MEMORY[0x1E0D2D638]);
}

void (*MedicationsSettingsManager.didDismissFollowUpTip.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  swift_beginAccess();
  sub_1BCAF84F0(0, &qword_1EDA13060, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650]);
  v2[7] = sub_1BCB63C80();
  return sub_1BCB3C93C;
}

uint64_t MedicationsSettingsManager.scheduleCompatibilityTileDismissalDate.getter()
{
  return sub_1BCB3D83C(&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__scheduleCompatibilityTileDismissalDate);
}

uint64_t MedicationsSettingsManager.scheduleCompatibilityTileDismissalDate.setter(uint64_t a1)
{
  return sub_1BCB3DAFC(a1);
}

void (*MedicationsSettingsManager.scheduleCompatibilityTileDismissalDate.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  swift_beginAccess();
  sub_1BCAFC448(0, &qword_1EDA13070, (uint64_t (*)(uint64_t))sub_1BCB06664, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0D2D650]);
  v2[7] = sub_1BCB63C80();
  return sub_1BCB3C93C;
}

uint64_t MedicationsSettingsManager.scheduleCompatibilityLearnMoreOverrideURL.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD v8[2];

  sub_1BCB3E9C8();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v0
     + OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__scheduleCompatibilityLearnMoreOverrideURL;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  sub_1BCB63C8C();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v8[1];
}

double sub_1BCB3D214@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double result;
  double v11[3];

  sub_1BCB3E9C8();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1
     + OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__scheduleCompatibilityLearnMoreOverrideURL;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  sub_1BCB63C8C();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = v11[0];
  *a2 = *(_OWORD *)v11;
  return result;
}

uint64_t sub_1BCB3D2E0()
{
  swift_beginAccess();
  sub_1BCB3E9C8();
  swift_bridgeObjectRetain();
  sub_1BCB63C98();
  return swift_endAccess();
}

uint64_t MedicationsSettingsManager.scheduleCompatibilityLearnMoreOverrideURL.setter()
{
  swift_beginAccess();
  sub_1BCB3E9C8();
  sub_1BCB63C98();
  return swift_endAccess();
}

void (*MedicationsSettingsManager.scheduleCompatibilityLearnMoreOverrideURL.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  swift_beginAccess();
  sub_1BCB3E9C8();
  v2[7] = sub_1BCB63C80();
  return sub_1BCB3C93C;
}

uint64_t MedicationsSettingsManager.isShardCheckOverrideEnabled.getter()
{
  return sub_1BCB3C728(&qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isShardCheckOverrideEnabled, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D2D630]);
}

uint64_t MedicationsSettingsManager.isShardCheckOverrideEnabled.setter(char a1)
{
  return sub_1BCB3CAD8(a1, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isShardCheckOverrideEnabled, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], (void (*)(char *, uint64_t))MEMORY[0x1E0D2D638]);
}

void (*MedicationsSettingsManager.isShardCheckOverrideEnabled.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  swift_beginAccess();
  sub_1BCAF84F0(0, &qword_1EDA13060, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650]);
  v2[7] = sub_1BCB63C80();
  return sub_1BCB3C93C;
}

uint64_t MedicationsSettingsManager.allowEndDatesInPast.getter()
{
  return sub_1BCB3C728(&qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__allowEndDatesInPast, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D2D630]);
}

uint64_t MedicationsSettingsManager.allowEndDatesInPast.setter(char a1)
{
  return sub_1BCB3CAD8(a1, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__allowEndDatesInPast, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], (void (*)(char *, uint64_t))MEMORY[0x1E0D2D638]);
}

void (*MedicationsSettingsManager.allowEndDatesInPast.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  swift_beginAccess();
  sub_1BCAF84F0(0, &qword_1EDA13060, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650]);
  v2[7] = sub_1BCB63C80();
  return sub_1BCB3C93C;
}

uint64_t MedicationsSettingsManager.alwaysShowLifeStyleFactorsSelectionPage.getter()
{
  return sub_1BCB3C728(&qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__alwaysShowLifeStyleFactorsSelectionPage, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D2D630]);
}

uint64_t MedicationsSettingsManager.alwaysShowLifeStyleFactorsSelectionPage.setter(char a1)
{
  return sub_1BCB3CAD8(a1, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__alwaysShowLifeStyleFactorsSelectionPage, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], (void (*)(char *, uint64_t))MEMORY[0x1E0D2D638]);
}

void (*MedicationsSettingsManager.alwaysShowLifeStyleFactorsSelectionPage.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  swift_beginAccess();
  sub_1BCAF84F0(0, &qword_1EDA13060, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650]);
  v2[7] = sub_1BCB63C80();
  return sub_1BCB3C93C;
}

uint64_t MedicationsSettingsManager.showMinorDrugInteractions.setter(char a1)
{
  return sub_1BCB3CAD8(a1, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__showMinorDrugInteractions, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], (void (*)(char *, uint64_t))MEMORY[0x1E0D2D638]);
}

void (*MedicationsSettingsManager.showMinorDrugInteractions.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  swift_beginAccess();
  sub_1BCAF84F0(0, &qword_1EDA13060, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650]);
  v2[7] = sub_1BCB63C80();
  return sub_1BCB3C93C;
}

uint64_t MedicationsSettingsManager.timeZoneExperienceEnabled.getter()
{
  return sub_1BCB3C728(&qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__timeZoneExperienceEnabled, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D2D630]);
}

uint64_t MedicationsSettingsManager.timeZoneExperienceEnabled.setter(char a1)
{
  return sub_1BCB3CAD8(a1, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__timeZoneExperienceEnabled, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], (void (*)(char *, uint64_t))MEMORY[0x1E0D2D638]);
}

void (*MedicationsSettingsManager.timeZoneExperienceEnabled.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  swift_beginAccess();
  sub_1BCAF84F0(0, &qword_1EDA13060, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650]);
  v2[7] = sub_1BCB63C80();
  return sub_1BCB3C93C;
}

uint64_t MedicationsSettingsManager.medicationsCategoryRoomLastEnteredDate.getter()
{
  return sub_1BCB3D83C(&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__medicationsCategoryRoomLastEnteredDate);
}

uint64_t sub_1BCB3D83C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  sub_1BCAFC448(0, &qword_1EDA13070, (uint64_t (*)(uint64_t))sub_1BCB06664, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0D2D650]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v10 - v6;
  v8 = v1 + *a1;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  sub_1BCB63C8C();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1BCB3D910(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  sub_1BCAFC448(0, &qword_1EDA13070, (uint64_t (*)(uint64_t))sub_1BCB06664, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0D2D650]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v13 - v9;
  v11 = *a1 + *a4;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  sub_1BCB63C8C();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1BCB3D9EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1BCB06664();
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v9 - v6;
  sub_1BCB05320(a1, (uint64_t)&v9 - v6);
  sub_1BCB05320((uint64_t)v7, (uint64_t)v5);
  swift_beginAccess();
  sub_1BCAFC448(0, &qword_1EDA13070, (uint64_t (*)(uint64_t))sub_1BCB06664, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0D2D650]);
  sub_1BCB63C98();
  swift_endAccess();
  return sub_1BCB09944((uint64_t)v7);
}

uint64_t MedicationsSettingsManager.medicationsCategoryRoomLastEnteredDate.setter(uint64_t a1)
{
  return sub_1BCB3DAFC(a1);
}

uint64_t sub_1BCB3DAFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  sub_1BCB06664();
  MEMORY[0x1E0C80A78](v2);
  sub_1BCB05320(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  sub_1BCAFC448(0, &qword_1EDA13070, (uint64_t (*)(uint64_t))sub_1BCB06664, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0D2D650]);
  sub_1BCB63C98();
  swift_endAccess();
  return sub_1BCB09944(a1);
}

void (*MedicationsSettingsManager.medicationsCategoryRoomLastEnteredDate.modify(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  swift_beginAccess();
  sub_1BCAFC448(0, &qword_1EDA13070, (uint64_t (*)(uint64_t))sub_1BCB06664, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0D2D650]);
  v2[7] = sub_1BCB63C80();
  return sub_1BCB3C93C;
}

uint64_t MedicationsSettingsManager.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  v1 = v0
     + OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isAlcoholDrugInteractionFactorEnabled;
  v2 = MEMORY[0x1E0DEAFA0];
  sub_1BCAF84F0(0, &qword_1EDA130E8, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D29FA8]);
  v4 = v3;
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v5(v1, v3);
  v5(v0+ OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isMarijuanaDrugInteractionFactorEnabled, v4);
  v5(v0+ OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isTobaccoDrugInteractionFactorEnabled, v4);
  v6 = v0 + OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__areDoseRemindersEnabled;
  v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0D2D650];
  sub_1BCAF84F0(0, &qword_1EDA13060, v2, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650]);
  v9 = v8;
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v10(v6, v8);
  v10(v0 + OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__areFollowUpNotificationsEnabled, v9);
  v10(v0 + OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__didShowLifeStyleFactorsSelectionPage, v9);
  v10(v0+ OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__didDismissCHRAddAccountTileInCategoryRoom, v9);
  v10(v0 + OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__didDismissFollowUpTip, v9);
  v11 = v0
      + OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__scheduleCompatibilityTileDismissalDate;
  sub_1BCAFC448(0, &qword_1EDA13070, (uint64_t (*)(uint64_t))sub_1BCB06664, v7);
  v13 = v12;
  v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v14(v11, v12);
  v15 = v0
      + OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__scheduleCompatibilityLearnMoreOverrideURL;
  sub_1BCB3E9C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v10(v0 + OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isShardCheckOverrideEnabled, v9);
  v10(v0 + OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__allowEndDatesInPast, v9);
  v10(v0+ OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__alwaysShowLifeStyleFactorsSelectionPage, v9);
  v10(v0 + OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__showMinorDrugInteractions, v9);
  v10(v0 + OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__timeZoneExperienceEnabled, v9);
  v14(v0+ OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__medicationsCategoryRoomLastEnteredDate, v13);
  return v0;
}

uint64_t MedicationsSettingsManager.__deallocating_deinit()
{
  MedicationsSettingsManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1BCB3DEA0(void *a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  void (*v33)(uint64_t, char *, uint64_t);
  uint64_t v34;
  id v35;
  uint64_t v36;
  id v37;
  id v38;
  void (*v39)(uint64_t, char *, uint64_t);
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t, uint64_t);
  id v50;
  char *v51;
  void (*v52)(uint64_t, char *, uint64_t);
  id v53;
  char *v54;
  id v55;
  char *v56;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void (*v62)(uint64_t, char *, uint64_t);
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v61 = a1;
  sub_1BCB3E9C8();
  v65 = *(_QWORD *)(v6 - 8);
  v66 = v6;
  MEMORY[0x1E0C80A78](v6);
  v64 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCB06664();
  v71 = v8;
  MEMORY[0x1E0C80A78](v8);
  v70 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0D2D650];
  sub_1BCAFC448(0, &qword_1EDA13070, v11, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0D2D650]);
  v69 = v12;
  v63 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v68 = (char *)&v58 - v13;
  v14 = MEMORY[0x1E0DEAFA0];
  sub_1BCAF84F0(0, &qword_1EDA13060, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))v10);
  v16 = v15;
  v62 = *(void (**)(uint64_t, char *, uint64_t))(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v58 - v17;
  sub_1BCAF84F0(0, &qword_1EDA130E8, v14, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D29FA8]);
  v20 = v19;
  v21 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v58 - v22;
  v67 = v16;
  if (a2)
  {
    v24 = a2;
  }
  else
  {
    v25 = v61;
    v60 = a3;
    v59 = *MEMORY[0x1E0D2C2D0];
    if (qword_1EDA13280 != -1)
      swift_once();
    v26 = objc_allocWithZone(MEMORY[0x1E0CB67F0]);
    swift_bridgeObjectRetain();
    v27 = v25;
    v28 = (void *)sub_1BCB6410C();
    swift_bridgeObjectRelease();
    v24 = objc_msgSend(v26, sel_initWithCategory_domainName_healthStore_, v59, v28, v27);

    v16 = v67;
    a3 = v60;
  }
  *(_QWORD *)(v3 + 16) = v24;
  *(_QWORD *)(v3 + 24) = a3;
  v29 = qword_1EDA13298;
  v30 = a2;
  v31 = a3;
  v32 = v24;
  if (v29 != -1)
    swift_once();
  LOBYTE(v72) = 0;
  swift_bridgeObjectRetain();
  sub_1BCB63CF8();
  v33 = *(void (**)(uint64_t, char *, uint64_t))(v21 + 32);
  v33(v3+ OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isAlcoholDrugInteractionFactorEnabled, v23, v20);
  v34 = qword_1EDA132D0;
  v35 = *(id *)(v3 + 16);
  if (v34 != -1)
    swift_once();
  LOBYTE(v72) = 0;
  swift_bridgeObjectRetain();
  sub_1BCB63CF8();
  v33(v3+ OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isMarijuanaDrugInteractionFactorEnabled, v23, v20);
  v36 = qword_1EDA132B8;
  v37 = *(id *)(v3 + 16);
  if (v36 != -1)
    swift_once();
  LOBYTE(v72) = 0;
  swift_bridgeObjectRetain();
  sub_1BCB63CF8();
  v33(v3+ OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isTobaccoDrugInteractionFactorEnabled, v23, v20);
  if (qword_1EDA14218 != -1)
    swift_once();
  LOBYTE(v72) = 1;
  v38 = v31;
  swift_bridgeObjectRetain();
  sub_1BCB63CA4();
  v39 = (void (*)(uint64_t, char *, uint64_t))*((_QWORD *)v62 + 4);
  v39(v3 + OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__areDoseRemindersEnabled, v18, v16);
  if (qword_1EDA14230 != -1)
    swift_once();
  LOBYTE(v72) = 0;
  v40 = v38;
  swift_bridgeObjectRetain();
  sub_1BCB63CA4();
  v39(v3 + OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__areFollowUpNotificationsEnabled, v18, v16);
  if (qword_1EDA14248 != -1)
    swift_once();
  LOBYTE(v72) = 0;
  v41 = v40;
  swift_bridgeObjectRetain();
  sub_1BCB63CA4();
  v39(v3 + OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__didShowLifeStyleFactorsSelectionPage, v18, v16);
  if (qword_1EDA14268 != -1)
    swift_once();
  LOBYTE(v72) = 0;
  v42 = v41;
  swift_bridgeObjectRetain();
  sub_1BCB63CA4();
  v39(v3+ OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__didDismissCHRAddAccountTileInCategoryRoom, v18, v16);
  if (qword_1EDA14200 != -1)
    swift_once();
  LOBYTE(v72) = 0;
  v43 = v42;
  swift_bridgeObjectRetain();
  sub_1BCB63CA4();
  v39(v3 + OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isShardCheckOverrideEnabled, v18, v16);
  if (qword_1EDA13248 != -1)
    swift_once();
  LOBYTE(v72) = 0;
  v44 = v43;
  swift_bridgeObjectRetain();
  sub_1BCB63CA4();
  v39(v3+ OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__alwaysShowLifeStyleFactorsSelectionPage, v18, v16);
  if (qword_1EDA131F0 != -1)
    swift_once();
  LOBYTE(v72) = 0;
  v45 = v44;
  swift_bridgeObjectRetain();
  sub_1BCB63CA4();
  v39(v3 + OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__showMinorDrugInteractions, v18, v16);
  if (qword_1EDA141D0 != -1)
    swift_once();
  LOBYTE(v72) = 1;
  v46 = v45;
  swift_bridgeObjectRetain();
  sub_1BCB63CA4();
  v39(v3 + OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__timeZoneExperienceEnabled, v18, v16);
  if (qword_1EDA131D0 != -1)
    swift_once();
  LOBYTE(v72) = 0;
  v47 = v46;
  swift_bridgeObjectRetain();
  sub_1BCB63CA4();
  v62 = v39;
  v39(v3 + OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__didDismissFollowUpTip, v18, v16);
  if (qword_1EDA13228 != -1)
    swift_once();
  v48 = sub_1BCB63B3C();
  v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56);
  v49(v70, 1, 1, v48);
  v50 = v47;
  swift_bridgeObjectRetain();
  v51 = v68;
  sub_1BCB63CA4();
  v52 = *(void (**)(uint64_t, char *, uint64_t))(v63 + 32);
  v52(v3+ OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__scheduleCompatibilityTileDismissalDate, v51, v69);
  if (qword_1EDA13260 != -1)
    swift_once();
  v72 = 0;
  v73 = 0;
  sub_1BCAF84F0(0, (unint64_t *)&qword_1EDA131B0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v53 = v50;
  swift_bridgeObjectRetain();
  v54 = v64;
  sub_1BCB63CA4();
  (*(void (**)(uint64_t, char *, uint64_t))(v65 + 32))(v3+ OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__scheduleCompatibilityLearnMoreOverrideURL, v54, v66);
  if (qword_1EDA13208 != -1)
    swift_once();
  v49(v70, 1, 1, v48);
  v55 = v53;
  swift_bridgeObjectRetain();
  v56 = v68;
  sub_1BCB63CA4();
  v52(v3+ OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__medicationsCategoryRoomLastEnteredDate, v56, v69);
  LOBYTE(v72) = 0;
  sub_1BCB63CA4();
  v62(v3 + OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__allowEndDatesInPast, v18, v67);
  return v3;
}

void sub_1BCB3E9C8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EDA13078)
  {
    sub_1BCAF84F0(255, (unint64_t *)&qword_1EDA131B0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = sub_1BCB63CB0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EDA13078);
  }
}

uint64_t sub_1BCB3EA34@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1BCB3C940(a1, &qword_1EDA130E8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D29FA8], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isAlcoholDrugInteractionFactorEnabled, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D29F98], a2);
}

uint64_t sub_1BCB3EA68(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BCB3CA28(a1, a2, a3, a4, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isAlcoholDrugInteractionFactorEnabled, &qword_1EDA130E8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D29FA8], (void (*)(char *, uint64_t))MEMORY[0x1E0D29FA0]);
}

uint64_t sub_1BCB3EA9C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1BCB3C940(a1, &qword_1EDA130E8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D29FA8], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isMarijuanaDrugInteractionFactorEnabled, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D29F98], a2);
}

uint64_t sub_1BCB3EAD0(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BCB3CA28(a1, a2, a3, a4, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isMarijuanaDrugInteractionFactorEnabled, &qword_1EDA130E8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D29FA8], (void (*)(char *, uint64_t))MEMORY[0x1E0D29FA0]);
}

uint64_t sub_1BCB3EB04@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1BCB3C940(a1, &qword_1EDA130E8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D29FA8], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isTobaccoDrugInteractionFactorEnabled, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D29F98], a2);
}

uint64_t sub_1BCB3EB38(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BCB3CA28(a1, a2, a3, a4, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isTobaccoDrugInteractionFactorEnabled, &qword_1EDA130E8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D29FA8], (void (*)(char *, uint64_t))MEMORY[0x1E0D29FA0]);
}

uint64_t sub_1BCB3EB6C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1BCB3C940(a1, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__areDoseRemindersEnabled, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D2D630], a2);
}

uint64_t sub_1BCB3EBA0(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BCB3CA28(a1, a2, a3, a4, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__areDoseRemindersEnabled, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], (void (*)(char *, uint64_t))MEMORY[0x1E0D2D638]);
}

uint64_t sub_1BCB3EBD4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1BCB3C940(a1, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__areFollowUpNotificationsEnabled, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D2D630], a2);
}

uint64_t sub_1BCB3EC08(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BCB3CA28(a1, a2, a3, a4, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__areFollowUpNotificationsEnabled, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], (void (*)(char *, uint64_t))MEMORY[0x1E0D2D638]);
}

uint64_t sub_1BCB3EC3C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1BCB3C940(a1, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__didShowLifeStyleFactorsSelectionPage, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D2D630], a2);
}

uint64_t sub_1BCB3EC70(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BCB3CA28(a1, a2, a3, a4, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__didShowLifeStyleFactorsSelectionPage, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], (void (*)(char *, uint64_t))MEMORY[0x1E0D2D638]);
}

uint64_t sub_1BCB3ECA4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1BCB3C940(a1, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__didDismissCHRAddAccountTileInCategoryRoom, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D2D630], a2);
}

uint64_t sub_1BCB3ECD8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BCB3CA28(a1, a2, a3, a4, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__didDismissCHRAddAccountTileInCategoryRoom, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], (void (*)(char *, uint64_t))MEMORY[0x1E0D2D638]);
}

uint64_t sub_1BCB3ED0C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1BCB3C940(a1, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__didDismissFollowUpTip, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D2D630], a2);
}

uint64_t sub_1BCB3ED40(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BCB3CA28(a1, a2, a3, a4, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__didDismissFollowUpTip, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], (void (*)(char *, uint64_t))MEMORY[0x1E0D2D638]);
}

uint64_t sub_1BCB3ED74(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BCB3D910(a1, a2, a3, &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__scheduleCompatibilityTileDismissalDate);
}

uint64_t sub_1BCB3ED90(uint64_t a1)
{
  return sub_1BCB3D9EC(a1);
}

uint64_t sub_1BCB3EDB4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1BCB3C940(a1, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isShardCheckOverrideEnabled, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D2D630], a2);
}

uint64_t sub_1BCB3EDE8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BCB3CA28(a1, a2, a3, a4, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__isShardCheckOverrideEnabled, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], (void (*)(char *, uint64_t))MEMORY[0x1E0D2D638]);
}

uint64_t sub_1BCB3EE1C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1BCB3C940(a1, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__allowEndDatesInPast, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D2D630], a2);
}

uint64_t sub_1BCB3EE50(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BCB3CA28(a1, a2, a3, a4, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__allowEndDatesInPast, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], (void (*)(char *, uint64_t))MEMORY[0x1E0D2D638]);
}

uint64_t sub_1BCB3EE84@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1BCB3C940(a1, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__alwaysShowLifeStyleFactorsSelectionPage, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D2D630], a2);
}

uint64_t sub_1BCB3EEB8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BCB3CA28(a1, a2, a3, a4, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__alwaysShowLifeStyleFactorsSelectionPage, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], (void (*)(char *, uint64_t))MEMORY[0x1E0D2D638]);
}

uint64_t sub_1BCB3EEEC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1BCB3C940(a1, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__showMinorDrugInteractions, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D2D630], a2);
}

uint64_t sub_1BCB3EF20(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BCB3CA28(a1, a2, a3, a4, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__showMinorDrugInteractions, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], (void (*)(char *, uint64_t))MEMORY[0x1E0D2D638]);
}

uint64_t sub_1BCB3EF54@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1BCB3C940(a1, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__timeZoneExperienceEnabled, (void (*)(_BYTE *__return_ptr, uint64_t))MEMORY[0x1E0D2D630], a2);
}

uint64_t sub_1BCB3EF88(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BCB3CA28(a1, a2, a3, a4, (uint64_t)&OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__timeZoneExperienceEnabled, &qword_1EDA13060, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650], (void (*)(char *, uint64_t))MEMORY[0x1E0D2D638]);
}

uint64_t sub_1BCB3EFBC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BCB3D910(a1, a2, a3, &OBJC_IVAR____TtC27HealthMedicationsExperience26MedicationsSettingsManager__medicationsCategoryRoomLastEnteredDate);
}

uint64_t sub_1BCB3EFD8(uint64_t a1)
{
  return sub_1BCB3D9EC(a1);
}

uint64_t sub_1BCB3EFF4()
{
  return type metadata accessor for MedicationsSettingsManager();
}

uint64_t type metadata accessor for MedicationsSettingsManager()
{
  uint64_t result;

  result = qword_1EDA13F18;
  if (!qword_1EDA13F18)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1BCB3F038()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  sub_1BCAF84F0(319, &qword_1EDA130E8, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D29FA8]);
  if (v0 <= 0x3F)
  {
    sub_1BCAF84F0(319, &qword_1EDA13060, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0D2D650]);
    if (v1 <= 0x3F)
    {
      sub_1BCAFC448(319, &qword_1EDA13070, (uint64_t (*)(uint64_t))sub_1BCB06664, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0D2D650]);
      if (v2 <= 0x3F)
      {
        sub_1BCB3E9C8();
        if (v3 <= 0x3F)
          swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t method lookup function for MedicationsSettingsManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MedicationsSettingsManager.__allocating_init(healthStore:keyValueDomain:userDefaults:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t sub_1BCB3F180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1BCB643B8();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1BCB643AC();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1BCAFC62C(a1, (unint64_t *)&unk_1EDA14470, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750]);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1BCB64370();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t Publisher<>.filtered(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];

  v15[2] = a3;
  v15[1] = a2;
  v4 = sub_1BCB63B3C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  sub_1BCAFC448(255, &qword_1EF4880D8, (uint64_t (*)(uint64_t))type metadata accessor for MedicationDoseEvent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  v7 = sub_1BCB63E18();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v15 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v11 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v12 + v11, (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  sub_1BCB63F74();
  swift_release();
  MEMORY[0x1BCCFD874](MEMORY[0x1E0C95708], v7);
  v13 = sub_1BCB63F68();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v13;
}

uint64_t sub_1BCB3F470@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  char v27;
  unint64_t *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v32 = a2;
  v5 = sub_1BCB63C38();
  v30 = *(_QWORD *)(v5 - 8);
  v31 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCAFC448(0, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v28 - v9;
  v11 = sub_1BCB63B3C();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v13);
  v29 = (char *)&v28 - v17;
  v18 = *a1;
  if (*a1)
  {
    v33 = *(_QWORD *)(v18 + 16);
    if (v33)
    {
      v28 = a3;
      swift_bridgeObjectRetain();
      v19 = 0;
      while (1)
      {
        v20 = *(_QWORD *)(v18 + 8 * v19 + 32);
        if (v20 >> 62)
        {
          swift_bridgeObjectRetain_n();
          result = sub_1BCB648D4();
          if (!result)
          {
LABEL_4:
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
            goto LABEL_5;
          }
        }
        else
        {
          v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
          result = swift_bridgeObjectRetain_n();
          if (!v21)
            goto LABEL_4;
        }
        if ((v20 & 0xC000000000000001) != 0)
        {
          v22 = MEMORY[0x1BCCFCF20](0, v20);
        }
        else
        {
          if (!*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return result;
          }
          v22 = *(_QWORD *)(v20 + 32);
          swift_retain();
        }
        swift_bridgeObjectRelease();
        v23 = *(id *)(v22 + 16);
        swift_release();
        v24 = objc_msgSend(v23, sel_startDate);

        sub_1BCB63B18();
        v25 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
        v25(v10, v15, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
        {
          v26 = v29;
          v25(v29, v10, v11);
          sub_1BCB63C20();
          v27 = sub_1BCB63C14();
          (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v31);
          (*(void (**)(char *, uint64_t))(v12 + 8))(v26, v11);
          if ((v27 & 1) != 0)
            goto LABEL_20;
          goto LABEL_6;
        }
LABEL_5:
        sub_1BCAFC62C((uint64_t)v10, (unint64_t *)&qword_1EDA14530, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
LABEL_6:
        ++v19;
        swift_bridgeObjectRelease();
        if (v33 == v19)
        {
          v20 = MEMORY[0x1E0DEE9D8];
LABEL_20:
          result = swift_bridgeObjectRelease();
          a3 = v28;
          goto LABEL_21;
        }
      }
    }
  }
  v20 = MEMORY[0x1E0DEE9D8];
LABEL_21:
  *a3 = v20;
  return result;
}

uint64_t sub_1BCB3F7A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1BCB63B3C();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_1BCB3F804@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_1BCB63B3C() - 8) + 80);
  return sub_1BCB3F470(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t Publisher<>.unavailableMedicationsSchedulesPublisher(scheduleControl:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  v22 = a3;
  v23 = a1;
  v5 = *(_QWORD *)(a2 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCAFC448(0, (unint64_t *)&unk_1EDA14470, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v21 - v9;
  sub_1BCB409B0(0, &qword_1EF4880E0, &qword_1EF4880E8, (uint64_t (*)(uint64_t))sub_1BCB3FA54);
  swift_allocObject();
  v11 = sub_1BCB63E9C();
  v12 = sub_1BCB643B8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v10, 1, 1, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v3, a2);
  v13 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v14 = (v6 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = 0;
  *((_QWORD *)v15 + 3) = 0;
  v16 = v22;
  *((_QWORD *)v15 + 4) = a2;
  *((_QWORD *)v15 + 5) = v16;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v15[v13], v7, a2);
  *(_QWORD *)&v15[v14] = v11;
  v17 = v23;
  *(_QWORD *)&v15[(v14 + 15) & 0xFFFFFFFFFFFFFFF8] = v23;
  swift_retain();
  v18 = v17;
  sub_1BCB3F180((uint64_t)v10, (uint64_t)&unk_1EF488100, (uint64_t)v15);
  swift_release();
  v24 = v11;
  sub_1BCB41A44(&qword_1EF488108, &qword_1EF4880E0, &qword_1EF4880E8, (uint64_t (*)(uint64_t))sub_1BCB3FA54);
  v19 = sub_1BCB63F68();
  swift_release();
  return v19;
}

void sub_1BCB3FA54()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  unint64_t TupleTypeMetadata2;
  uint64_t v2;

  if (!qword_1EF4880F0)
  {
    v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8];
    sub_1BCB066B8(255, &qword_1EDA14468, (unint64_t *)&qword_1EDA144A8, 0x1E0D2C4D8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BCB066B8(255, &qword_1EDA13950, (unint64_t *)&qword_1EDA14480, 0x1E0D2C480, v0);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v2)
      atomic_store(TupleTypeMetadata2, &qword_1EF4880F0);
  }
}

uint64_t sub_1BCB3FB0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v8[30] = a7;
  v8[31] = a8;
  v8[28] = a5;
  v8[29] = a6;
  v8[27] = a4;
  v9 = sub_1BCB63E6C();
  v8[32] = v9;
  v8[33] = *(_QWORD *)(v9 - 8);
  v8[34] = swift_task_alloc();
  v10 = sub_1BCB63E60();
  v8[35] = v10;
  v8[36] = *(_QWORD *)(v10 - 8);
  v8[37] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BCB3FBB4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[33];
  v1 = v0[34];
  v3 = v0[32];
  MEMORY[0x1BCCFC704](v0[30], v0[31]);
  sub_1BCB63E54();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = v0[35];
  v5 = (_QWORD *)swift_task_alloc();
  v0[38] = v5;
  MEMORY[0x1BCCFD874](MEMORY[0x1E0C95E78], v4);
  *v5 = v0;
  v5[1] = sub_1BCB3FC7C;
  return sub_1BCB643A0();
}

uint64_t sub_1BCB3FC7C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1BCB3FCD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 208);
  *(_QWORD *)(v0 + 312) = v1;
  if (!v1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 288) + 8))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 280));
    goto LABEL_5;
  }
  if ((sub_1BCB643DC() & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 288) + 8))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 280));
    swift_bridgeObjectRelease();
LABEL_5:
    *(_BYTE *)(v0 + 328) = 1;
    sub_1BCB63E84();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_QWORD *)(v0 + 184) = v1;
  sub_1BCB066B8(0, &qword_1EDA14468, (unint64_t *)&qword_1EDA144A8, 0x1E0D2C4D8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  MEMORY[0x1BCCFD874](MEMORY[0x1E0DEAF50], v3);
  if ((sub_1BCB644A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 128) = 0;
    *(_QWORD *)(v0 + 120) = 0;
    sub_1BCB63E90();
    v4 = *(_QWORD *)(v0 + 280);
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 304) = v5;
    MEMORY[0x1BCCFD874](MEMORY[0x1E0C95E78], v4);
    *v5 = v0;
    v5[1] = sub_1BCB3FC7C;
    return sub_1BCB643A0();
  }
  else
  {
    v6 = *(void **)(v0 + 232);
    *(_QWORD *)(v0 + 56) = v0 + 192;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_1BCB3FECC;
    v7 = swift_continuation_init();
    *(_QWORD *)(v0 + 80) = MEMORY[0x1E0C809B0];
    v8 = (_QWORD *)(v0 + 80);
    v8[1] = 0x40000000;
    v8[2] = sub_1BCB40394;
    v8[3] = &block_descriptor_33;
    v8[4] = v7;
    objc_msgSend(v6, sel_fetchAllSchedulesWithCompletion_, v8);
    return swift_continuation_await();
  }
}

uint64_t sub_1BCB3FECC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 320) = v1;
  if (v1)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

void sub_1BCB3FF34()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t i;
  id v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(v0 + 192);
  if (!v1)
  {
    v8 = *(_QWORD *)(v0 + 288);
    v7 = *(_QWORD *)(v0 + 296);
    v9 = *(_QWORD *)(v0 + 280);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 144) = 0;
    *(_QWORD *)(v0 + 136) = 0;
    sub_1BCB63E90();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    *(_BYTE *)(v0 + 328) = 1;
    sub_1BCB63E84();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  *(_QWORD *)(v0 + 200) = MEMORY[0x1E0DEE9D8];
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2)
      goto LABEL_4;
LABEL_16:
    swift_bridgeObjectRelease();
    v6 = MEMORY[0x1E0DEE9D8];
LABEL_17:
    v10 = sub_1BCB40468(v6, *(_QWORD *)(v0 + 312));
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 152) = v10;
    *(_QWORD *)(v0 + 160) = v6;
    sub_1BCB63E90();
    swift_bridgeObjectRelease();
    swift_release();
    v11 = *(_QWORD *)(v0 + 280);
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 304) = v12;
    MEMORY[0x1BCCFD874](MEMORY[0x1E0C95E78], v11);
    *v12 = v0;
    v12[1] = sub_1BCB3FC7C;
    sub_1BCB643A0();
    return;
  }
  swift_bridgeObjectRetain();
  v2 = sub_1BCB648D4();
  swift_bridgeObjectRelease();
  if (!v2)
    goto LABEL_16;
LABEL_4:
  if (v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
        v4 = (id)MEMORY[0x1BCCFCF20](i, v1);
      else
        v4 = *(id *)(v1 + 8 * i + 32);
      v5 = v4;
      if (objc_msgSend(v4, sel_isUnavailable))
      {
        sub_1BCB64820();
        sub_1BCB64850();
        sub_1BCB6485C();
        sub_1BCB6482C();
      }
      else
      {

      }
    }
    swift_bridgeObjectRelease();
    v6 = *(_QWORD *)(v0 + 200);
    goto LABEL_17;
  }
  __break(1u);
}

uint64_t sub_1BCB40188()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (void *)v0[40];
  swift_willThrow();
  v0[22] = 0;
  v0[21] = 0;
  sub_1BCB63E90();

  v2 = v0[35];
  v3 = (_QWORD *)swift_task_alloc();
  v0[38] = v3;
  MEMORY[0x1BCCFD874](MEMORY[0x1E0C95E78], v2);
  *v3 = v0;
  v3[1] = sub_1BCB3FC7C;
  return sub_1BCB643A0();
}

uint64_t sub_1BCB4023C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1BCB402D4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = v1[4];
  v5 = v1[5];
  v6 = *(_QWORD *)(v4 - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = v1[2];
  v10 = v1[3];
  v11 = (uint64_t)v1 + v7;
  v12 = *(_QWORD *)((char *)v1 + v8);
  v13 = *(_QWORD *)((char *)v1 + ((v8 + 15) & 0xFFFFFFFFFFFFF8));
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_1BCB092B8;
  return sub_1BCB3FB0C(a1, v9, v10, v11, v12, v13, v4, v5);
}

uint64_t sub_1BCB40394(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v10;
  uint64_t v11;

  sub_1BCB429F8();
  v6 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    sub_1BCB052CC();
    swift_allocError();
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    if (a2)
    {
      sub_1BCAFC2E0(0, (unint64_t *)&qword_1EDA14480);
      v10 = sub_1BCB642D4();
    }
    else
    {
      v10 = 0;
    }
    v11 = v10;
    sub_1BCB33788((uint64_t)&v11, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 40));
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1BCB40468(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t i;
  uint64_t j;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  if (!(a1 >> 62))
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_3;
    return MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain();
  v2 = sub_1BCB648D4();
  swift_bridgeObjectRelease();
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v5 = sub_1BCB648D4();
  swift_bridgeObjectRelease();
  if (!v5)
  {
    v2 = MEMORY[0x1E0DEE9D8];
    goto LABEL_15;
  }
LABEL_3:
  v24 = MEMORY[0x1E0DEE9D8];
  sub_1BCB24858(0, v5 & ~(v5 >> 63), 0);
  if (v5 < 0)
  {
    __break(1u);
    goto LABEL_34;
  }
  v23 = a2;
  v6 = 0;
  v2 = v24;
  do
  {
    if ((a1 & 0xC000000000000001) != 0)
      v7 = (id)MEMORY[0x1BCCFCF20](v6, a1);
    else
      v7 = *(id *)(a1 + 8 * v6 + 32);
    v8 = v7;
    v9 = objc_msgSend(v7, sel_medicationIdentifier);
    if (v9)
    {
      v10 = v9;
      v11 = sub_1BCB6413C();
      v13 = v12;

    }
    else
    {

      v11 = 0;
      v13 = 0;
    }
    v15 = *(_QWORD *)(v24 + 16);
    v14 = *(_QWORD *)(v24 + 24);
    if (v15 >= v14 >> 1)
      sub_1BCB24858(v14 > 1, v15 + 1, 1);
    ++v6;
    *(_QWORD *)(v24 + 16) = v15 + 1;
    v16 = v24 + 16 * v15;
    *(_QWORD *)(v16 + 32) = v11;
    *(_QWORD *)(v16 + 40) = v13;
  }
  while (v5 != v6);
  a2 = v23;
LABEL_15:
  v24 = MEMORY[0x1E0DEE9D8];
  if (!(a2 >> 62))
  {
    v17 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v17)
      goto LABEL_17;
LABEL_35:
    swift_bridgeObjectRelease();
    v22 = sub_1BCB574C0(v24, v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v22;
  }
LABEL_34:
  swift_bridgeObjectRetain();
  result = sub_1BCB648D4();
  v17 = result;
  if (!result)
    goto LABEL_35;
LABEL_17:
  if (v17 >= 1)
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v17; ++i)
      {
        MEMORY[0x1BCCFCF20](i, a2);
        MEMORY[0x1BCCFCA1C]();
        if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1BCB64304();
        sub_1BCB64334();
        sub_1BCB642EC();
      }
    }
    else
    {
      for (j = 0; j != v17; ++j)
      {
        v21 = *(id *)(a2 + 8 * j + 32);
        MEMORY[0x1BCCFCA1C]();
        if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1BCB64304();
        sub_1BCB64334();
        sub_1BCB642EC();
      }
    }
    goto LABEL_35;
  }
  __break(1u);
  return result;
}

uint64_t Publisher<>.remoteUnavailableMedicationsSchedulesPublisher(medicationControl:scheduleControl:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;

  v27 = a4;
  v28 = a2;
  v29 = a1;
  v6 = *(_QWORD *)(a3 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCAFC448(0, (unint64_t *)&unk_1EDA14470, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v25 - v10;
  v26 = (uint64_t)&v25 - v10;
  sub_1BCB409B0(0, &qword_1EF488110, &qword_1EF488118, (uint64_t (*)(uint64_t))sub_1BCB40A20);
  swift_allocObject();
  v12 = sub_1BCB63E9C();
  v13 = sub_1BCB643B8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v11, 1, 1, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v4, a3);
  v14 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v15 = (v7 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = (char *)swift_allocObject();
  *((_QWORD *)v17 + 2) = 0;
  *((_QWORD *)v17 + 3) = 0;
  v18 = v27;
  *((_QWORD *)v17 + 4) = a3;
  *((_QWORD *)v17 + 5) = v18;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v17[v14], v8, a3);
  *(_QWORD *)&v17[v15] = v12;
  v20 = v28;
  v19 = v29;
  *(_QWORD *)&v17[v16] = v28;
  *(_QWORD *)&v17[(v16 + 15) & 0xFFFFFFFFFFFFFFF8] = v19;
  swift_retain();
  v21 = v20;
  v22 = v19;
  sub_1BCB3F180(v26, (uint64_t)&unk_1EF488138, (uint64_t)v17);
  swift_release();
  v30 = v12;
  sub_1BCB41A44(&qword_1EF488140, &qword_1EF488110, &qword_1EF488118, (uint64_t (*)(uint64_t))sub_1BCB40A20);
  v23 = sub_1BCB63F68();
  swift_release();
  return v23;
}

void sub_1BCB409B0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_1BCAFC448(255, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v5 = sub_1BCB63EA8();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_1BCB40A20()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  unint64_t TupleTypeMetadata3;
  uint64_t v2;

  if (!qword_1EF488120)
  {
    v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8];
    sub_1BCB066B8(255, &qword_1EDA14468, (unint64_t *)&qword_1EDA144A8, 0x1E0D2C4D8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BCB066B8(255, &qword_1EDA13950, (unint64_t *)&qword_1EDA14480, 0x1E0D2C480, v0);
    sub_1BCB066B8(255, &qword_1EF488128, &qword_1EF487BD8, 0x1E0D2C500, v0);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v2)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1EF488120);
  }
}

uint64_t sub_1BCB40B04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v8[54] = a8;
  v8[55] = v12;
  v8[52] = a6;
  v8[53] = a7;
  v8[50] = a4;
  v8[51] = a5;
  v9 = sub_1BCB63E6C();
  v8[56] = v9;
  v8[57] = *(_QWORD *)(v9 - 8);
  v8[58] = swift_task_alloc();
  v10 = sub_1BCB63E60();
  v8[59] = v10;
  v8[60] = *(_QWORD *)(v10 - 8);
  v8[61] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BCB40BB0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[57];
  v1 = v0[58];
  v3 = v0[56];
  MEMORY[0x1BCCFC704](v0[54], v0[55]);
  sub_1BCB63E54();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = v0[59];
  v5 = (_QWORD *)swift_task_alloc();
  v0[62] = v5;
  MEMORY[0x1BCCFD874](MEMORY[0x1E0C95E78], v4);
  *v5 = v0;
  v5[1] = sub_1BCB40C78;
  return sub_1BCB643A0();
}

uint64_t sub_1BCB40C78()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1BCB40CCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 360);
  *(_QWORD *)(v0 + 504) = v1;
  if (!v1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 480) + 8))(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 472));
    goto LABEL_5;
  }
  if ((sub_1BCB643DC() & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 480) + 8))(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 472));
    swift_bridgeObjectRelease();
LABEL_5:
    *(_BYTE *)(v0 + 536) = 1;
    sub_1BCB63E84();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_QWORD *)(v0 + 344) = v1;
  sub_1BCB066B8(0, &qword_1EDA14468, (unint64_t *)&qword_1EDA144A8, 0x1E0D2C4D8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  MEMORY[0x1BCCFD874](MEMORY[0x1E0DEAF50], v3);
  if ((sub_1BCB644A8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 232) = 0;
    *(_QWORD *)(v0 + 240) = 0;
    *(_QWORD *)(v0 + 224) = 0;
    sub_1BCB63E90();
    v4 = *(_QWORD *)(v0 + 472);
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 496) = v5;
    MEMORY[0x1BCCFD874](MEMORY[0x1E0C95E78], v4);
    *v5 = v0;
    v5[1] = sub_1BCB40C78;
    return sub_1BCB643A0();
  }
  else
  {
    v6 = *(void **)(v0 + 416);
    *(_QWORD *)(v0 + 120) = v0 + 352;
    *(_QWORD *)(v0 + 80) = v0;
    *(_QWORD *)(v0 + 88) = sub_1BCB40EC8;
    v7 = swift_continuation_init();
    *(_QWORD *)(v0 + 184) = MEMORY[0x1E0C809B0];
    v8 = (_QWORD *)(v0 + 184);
    v8[1] = 0x40000000;
    v8[2] = sub_1BCB40394;
    v8[3] = &block_descriptor_25_0;
    v8[4] = v7;
    objc_msgSend(v6, sel_fetchAllSchedulesWithCompletion_, v8);
    return swift_continuation_await();
  }
}

uint64_t sub_1BCB40EC8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  *(_QWORD *)(*(_QWORD *)v0 + 512) = v1;
  if (v1)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_1BCB40F30()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (void *)v0[53];
  v0[65] = v0[44];
  v0[7] = v0 + 49;
  v0[2] = v0;
  v0[3] = sub_1BCB40FD0;
  v2 = swift_continuation_init();
  v0[18] = MEMORY[0x1E0C809B0];
  v3 = v0 + 18;
  v3[1] = 0x40000000;
  v3[2] = sub_1BCB41A84;
  v3[3] = &block_descriptor_26;
  v3[4] = v2;
  objc_msgSend(v1, sel_accountDevicesInfoTriggeringUpdate_completion_, 1, v3);
  return swift_continuation_await();
}

uint64_t sub_1BCB40FD0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 528) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

uint64_t sub_1BCB41044()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  BOOL v11;
  unint64_t v12;
  void *v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  id v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  id v71[2];

  v1 = *(void **)(v0 + 392);
  if (!*(_QWORD *)(v0 + 520))
  {
    v38 = *(void **)(v0 + 392);
    v39 = *(_QWORD *)(v0 + 480);
    v40 = *(_QWORD *)(v0 + 488);
    v41 = *(_QWORD *)(v0 + 472);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 320) = 0;
    *(_QWORD *)(v0 + 328) = 0;
    *(_QWORD *)(v0 + 336) = 0;
LABEL_54:
    sub_1BCB63E90();

    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v41);
    *(_BYTE *)(v0 + 536) = 1;
    sub_1BCB63E84();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (!v1)
  {
    v38 = 0;
LABEL_53:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v39 = *(_QWORD *)(v0 + 480);
    v40 = *(_QWORD *)(v0 + 488);
    v41 = *(_QWORD *)(v0 + 472);
    *(_QWORD *)(v0 + 256) = 0;
    *(_QWORD *)(v0 + 264) = 0;
    *(_QWORD *)(v0 + 248) = 0;
    goto LABEL_54;
  }
  v54 = *(void **)(v0 + 392);
  v2 = objc_msgSend(v1, sel_remoteDevices);
  if (!v2)
  {
    v38 = v54;
    goto LABEL_53;
  }
  v3 = v2;
  sub_1BCAFC2E0(0, &qword_1EF487BD8);
  v4 = sub_1BCB642D4();

  v5 = v4;
  v6 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v0 + 368) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v0 + 376) = v6;
  *(_QWORD *)(v0 + 384) = v6;
  v58 = v4;
  if (v4 >> 62)
    goto LABEL_61;
  v7 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = *(_QWORD *)(v0 + 504);
  while (v7)
  {
    v59 = v5 & 0xC000000000000001;
    v53 = v5 & 0xFFFFFFFFFFFFFF8;
    v52 = v5 + 32;
    v55 = v8 & 0xFFFFFFFFFFFFFF8;
    v69 = v8 & 0xC000000000000001;
    v68 = v8 + 32;
    v56 = v8 >> 62;
    v57 = v7;
    v9 = 0;
    while (1)
    {
      if (v59)
      {
        v10 = (id)MEMORY[0x1BCCFCF20](v9, v5);
      }
      else
      {
        if (v9 >= *(_QWORD *)(v53 + 16))
          goto LABEL_60;
        v10 = *(id *)(v52 + 8 * v9);
      }
      v61 = v10;
      v11 = __OFADD__(v9, 1);
      v12 = v9 + 1;
      if (v11)
        break;
      v60 = v12;
      sub_1BCAFC2E0(0, (unint64_t *)&qword_1EDA14480);
      v13 = (void *)sub_1BCB642C8();
      v14 = objc_msgSend(v61, sel_filterOutCompatibleSchedules_, v13);

      v15 = sub_1BCB642D4();
      if (!(v15 >> 62))
      {
        v66 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v66)
          goto LABEL_16;
LABEL_48:

        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
      swift_bridgeObjectRetain();
      v36 = sub_1BCB648D4();
      swift_bridgeObjectRelease();
      if (v36 < 1)
        goto LABEL_48;
      swift_bridgeObjectRetain();
      v37 = sub_1BCB648D4();
      swift_bridgeObjectRelease();
      v66 = v37;
      if (v37)
      {
LABEL_16:
        if (v56)
        {
          swift_bridgeObjectRetain();
          v70 = sub_1BCB648D4();
          swift_bridgeObjectRelease();
        }
        else
        {
          v70 = *(_QWORD *)(v55 + 16);
        }
        v16 = 0;
        v65 = v15 & 0xC000000000000001;
        v62 = v15 + 32;
        v63 = v15 & 0xFFFFFFFFFFFFFF8;
        v64 = v15;
        while (1)
        {
          if (v65)
          {
            v17 = (id)MEMORY[0x1BCCFCF20](v16, v15);
          }
          else
          {
            if (v16 >= *(_QWORD *)(v63 + 16))
              goto LABEL_58;
            v17 = *(id *)(v62 + 8 * v16);
          }
          v18 = v17;
          v11 = __OFADD__(v16++, 1);
          if (v11)
          {
            __break(1u);
LABEL_58:
            __break(1u);
            goto LABEL_59;
          }
          if (v70)
            break;

LABEL_20:
          if (v16 == v66)
            goto LABEL_7;
        }
        v67 = v16;
        swift_bridgeObjectRetain();
        v19 = 0;
        while (1)
        {
          v20 = v69 ? (id)MEMORY[0x1BCCFCF20](v19, *(_QWORD *)(v0 + 504)) : *(id *)(v68 + 8 * v19);
          v21 = v20;
          v22 = v19 + 1;
          if (__OFADD__(v19, 1))
            break;
          v23 = objc_msgSend(v20, sel_semanticIdentifier);
          v24 = objc_msgSend(v23, sel_stringValue);

          v25 = sub_1BCB6413C();
          v27 = v26;

          v28 = objc_msgSend(v18, sel_medicationIdentifier);
          if (v28)
          {
            v29 = v28;
            v30 = sub_1BCB6413C();
            v32 = v31;

            if (v25 == v30 && v27 == v32)
            {
              swift_bridgeObjectRelease_n();
LABEL_43:
              swift_bridgeObjectRelease();
              v35 = v21;
              sub_1BCB45E20(v71, v35);

              sub_1BCB46388(v71, v18);
LABEL_44:
              v15 = v64;
              v16 = v67;
              goto LABEL_20;
            }
            v34 = sub_1BCB649F4();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v34 & 1) != 0)
              goto LABEL_43;
          }
          else
          {
            swift_bridgeObjectRelease();
          }

          ++v19;
          if (v22 == v70)
          {

            swift_bridgeObjectRelease();
            goto LABEL_44;
          }
        }
        __break(1u);
LABEL_56:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v44 = *(_QWORD *)(v0 + 368);
        v43 = *(_QWORD *)(v0 + 376);
        v45 = *(_QWORD *)(v0 + 384);
        goto LABEL_63;
      }
LABEL_7:
      swift_bridgeObjectRelease();
      sub_1BCB463AC(v71, v61);

LABEL_8:
      v5 = v58;
      v9 = v60;
      if (v60 == v57)
        goto LABEL_56;
    }
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    swift_bridgeObjectRetain();
    v46 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
    v7 = v46;
    v5 = v58;
    v8 = *(_QWORD *)(v0 + 504);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v45 = MEMORY[0x1E0DEE9E8];
  v43 = MEMORY[0x1E0DEE9E8];
  v44 = MEMORY[0x1E0DEE9E8];
LABEL_63:
  swift_bridgeObjectRelease();
  v47 = sub_1BCB2470C(v44);
  swift_bridgeObjectRelease();
  v48 = sub_1BCB245B8(v43);
  swift_bridgeObjectRelease();
  v49 = sub_1BCB2459C(v45);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 296) = v47;
  *(_QWORD *)(v0 + 304) = v48;
  *(_QWORD *)(v0 + 312) = v49;
  sub_1BCB63E90();

  swift_release();
  swift_release();
  swift_release();
  v50 = *(_QWORD *)(v0 + 472);
  v51 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 496) = v51;
  MEMORY[0x1BCCFD874](MEMORY[0x1E0C95E78], v50);
  *v51 = v0;
  v51[1] = sub_1BCB40C78;
  return sub_1BCB643A0();
}

uint64_t sub_1BCB4174C()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  swift_willThrow();
  v1 = (void *)v0[64];
  v0[35] = 0;
  v0[36] = 0;
  v0[34] = 0;
  sub_1BCB63E90();

  v2 = v0[59];
  v3 = (_QWORD *)swift_task_alloc();
  v0[62] = v3;
  MEMORY[0x1BCCFD874](MEMORY[0x1E0C95E78], v2);
  *v3 = v0;
  v3[1] = sub_1BCB40C78;
  return sub_1BCB643A0();
}

uint64_t sub_1BCB41804()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  swift_willThrow();
  v1 = (void *)v0[66];
  v0[35] = 0;
  v0[36] = 0;
  v0[34] = 0;
  sub_1BCB63E90();

  v2 = v0[59];
  v3 = (_QWORD *)swift_task_alloc();
  v0[62] = v3;
  MEMORY[0x1BCCFD874](MEMORY[0x1E0C95E78], v2);
  *v3 = v0;
  v3[1] = sub_1BCB40C78;
  return sub_1BCB643A0();
}

uint64_t sub_1BCB418BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1BCB4196C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = v1[4];
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = v1[2];
  v10 = v1[3];
  v11 = (uint64_t)v1 + v6;
  v12 = *(_QWORD *)((char *)v1 + v7);
  v13 = *(_QWORD *)((char *)v1 + v8);
  v14 = *(_QWORD *)((char *)v1 + ((v8 + 15) & 0xFFFFFFFFFFFFF8));
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v15;
  *v15 = v2;
  v15[1] = sub_1BCB09BF0;
  return sub_1BCB40B04(a1, v9, v10, v11, v12, v13, v14, v4);
}

uint64_t sub_1BCB41A44(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    sub_1BCB409B0(255, a2, a3, a4);
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0C95F48], v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BCB41A84(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v10;
  id v11;
  void *v12;

  sub_1BCB429F8();
  v6 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    sub_1BCB052CC();
    swift_allocError();
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    v12 = a2;
    v10 = *(_QWORD *)(*(_QWORD *)(v6 + 64) + 40);
    v11 = a2;
    sub_1BCB42A70((uint64_t)&v12, v10);
    return swift_continuation_throwingResume();
  }
}

uint64_t Publisher<>.medicationsWithActiveSchedules(scheduleControl:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v4 = v3;
  v21 = a3;
  v7 = *(_QWORD *)(a2 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](a1);
  sub_1BCB41CC8();
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a2);
  v14 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v15 = (char *)swift_allocObject();
  v16 = v21;
  *((_QWORD *)v15 + 2) = a2;
  *((_QWORD *)v15 + 3) = v16;
  *((_QWORD *)v15 + 4) = a1;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v15[v14], (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  sub_1BCB41D40();
  sub_1BCAF7D24(&qword_1EF488158, (uint64_t (*)(uint64_t))sub_1BCB41D40, MEMORY[0x1E0C96108]);
  v17 = a1;
  sub_1BCB63F14();
  sub_1BCAF7D24(&qword_1EF488160, (uint64_t (*)(uint64_t))sub_1BCB41CC8, MEMORY[0x1E0C96148]);
  v18 = sub_1BCB63F68();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v18;
}

void sub_1BCB41CC8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF488148)
  {
    sub_1BCB41D40();
    sub_1BCAF7D24(&qword_1EF488158, (uint64_t (*)(uint64_t))sub_1BCB41D40, MEMORY[0x1E0C96108]);
    v0 = sub_1BCB63F20();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF488148);
  }
}

void sub_1BCB41D40()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF488150)
  {
    sub_1BCB066B8(255, &qword_1EDA14468, (unint64_t *)&qword_1EDA144A8, 0x1E0D2C4D8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = sub_1BCB63EF0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF488150);
  }
}

uint64_t sub_1BCB41DC4@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  id v12;
  uint64_t result;
  uint64_t v14;

  v8 = *(_QWORD *)(a2 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *))(v8 + 16))((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = (char *)swift_allocObject();
  *((_QWORD *)v11 + 2) = a2;
  *((_QWORD *)v11 + 3) = a3;
  *((_QWORD *)v11 + 4) = a1;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v11[v10], (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  sub_1BCB41D40();
  swift_allocObject();
  v12 = a1;
  result = sub_1BCB63EFC();
  *a4 = result;
  return result;
}

uint64_t sub_1BCB41EB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1BCB41DC4(*(void **)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1BCB41ED8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  id v22;
  uint64_t v24;
  uint64_t v25;

  v25 = a6;
  v11 = *(_QWORD *)(a5 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCAFC448(0, (unint64_t *)&unk_1EDA14470, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v24 - v15;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a1;
  *(_QWORD *)(v17 + 24) = a2;
  v18 = sub_1BCB643B8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v16, 1, 1, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a4, a5);
  v19 = (*(unsigned __int8 *)(v11 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v20 = (char *)swift_allocObject();
  *((_QWORD *)v20 + 2) = 0;
  *((_QWORD *)v20 + 3) = 0;
  v21 = v25;
  *((_QWORD *)v20 + 4) = a5;
  *((_QWORD *)v20 + 5) = v21;
  *((_QWORD *)v20 + 6) = a3;
  *((_QWORD *)v20 + 7) = sub_1BCB33328;
  *((_QWORD *)v20 + 8) = v17;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v20[v19], v13, a5);
  swift_retain();
  v22 = a3;
  sub_1BCB4280C((uint64_t)v16, (uint64_t)&unk_1EF488170, (uint64_t)v20);
  return swift_release();
}

uint64_t objectdestroy_10Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1BCB420E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  return sub_1BCB41ED8(a1, a2, *(void **)(v2 + 32), v2 + ((v4 + 40) & ~v4), v3, *(_QWORD *)(v2 + 24));
}

uint64_t sub_1BCB42100()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BCB42124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v8[21] = a8;
  v8[22] = v12;
  v8[19] = a6;
  v8[20] = a7;
  v8[17] = a4;
  v8[18] = a5;
  v9 = sub_1BCB63E6C();
  v8[23] = v9;
  v8[24] = *(_QWORD *)(v9 - 8);
  v8[25] = swift_task_alloc();
  v10 = sub_1BCB63E60();
  v8[26] = v10;
  v8[27] = *(_QWORD *)(v10 - 8);
  v8[28] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BCB421D0()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (void *)v0[17];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1BCB42264;
  v2 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_1BCB40394;
  v3[3] = &block_descriptor_7;
  v3[4] = v2;
  objc_msgSend(v1, sel_fetchAllSchedulesWithCompletion_, v3);
  return swift_continuation_await();
}

uint64_t sub_1BCB42264()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 232) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

void sub_1BCB422C4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t i;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 120);
  if (!v1)
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 144))(MEMORY[0x1E0DEE9D8], 0);
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v12 = MEMORY[0x1E0DEE9D8];
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2)
      goto LABEL_4;
LABEL_16:
    swift_bridgeObjectRelease();
    v6 = MEMORY[0x1E0DEE9D8];
LABEL_17:
    *(_QWORD *)(v0 + 240) = v6;
    v8 = *(_QWORD *)(v0 + 192);
    v7 = *(_QWORD *)(v0 + 200);
    v9 = *(_QWORD *)(v0 + 184);
    MEMORY[0x1BCCFC704](*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
    sub_1BCB63E54();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    v10 = *(_QWORD *)(v0 + 208);
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 248) = v11;
    MEMORY[0x1BCCFD874](MEMORY[0x1E0C95E78], v10);
    *v11 = v0;
    v11[1] = sub_1BCB424F4;
    sub_1BCB643A0();
    return;
  }
  swift_bridgeObjectRetain();
  v2 = sub_1BCB648D4();
  swift_bridgeObjectRelease();
  if (!v2)
    goto LABEL_16;
LABEL_4:
  if (v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
        v4 = (id)MEMORY[0x1BCCFCF20](i, v1);
      else
        v4 = *(id *)(v1 + 8 * i + 32);
      v5 = v4;
      if ((objc_msgSend(v4, sel_isUnavailable) & 1) != 0)
      {

      }
      else
      {
        sub_1BCB64820();
        sub_1BCB64850();
        sub_1BCB6485C();
        sub_1BCB6482C();
      }
    }
    swift_bridgeObjectRelease();
    v6 = v12;
    goto LABEL_17;
  }
  __break(1u);
}

uint64_t sub_1BCB424F4()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1BCB42548()
{
  uint64_t v0;
  unint64_t v1;
  void (*v3)(uint64_t, _QWORD);
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 128);
  if (!v1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
    swift_release();
    goto LABEL_5;
  }
  if ((sub_1BCB643DC() & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
    swift_release();
    swift_bridgeObjectRelease();
LABEL_5:
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = *(void (**)(uint64_t, _QWORD))(v0 + 144);
  v4 = sub_1BCB40468(*(_QWORD *)(v0 + 240), v1);
  swift_bridgeObjectRelease();
  v3(v4, 0);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v0 + 208);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 248) = v6;
  MEMORY[0x1BCCFD874](MEMORY[0x1E0C95E78], v5);
  *v6 = v0;
  v6[1] = sub_1BCB424F4;
  return sub_1BCB643A0();
}

uint64_t sub_1BCB4268C()
{
  uint64_t v0;

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCB426DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();

  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1BCB42758(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = v1[4];
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (uint64_t)v1 + ((v5 + 72) & ~v5);
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_1BCB092B8;
  return sub_1BCB42124(a1, v6, v7, v8, v9, v10, v11, v4);
}

uint64_t sub_1BCB4280C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_1BCB643B8();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_1BCB643AC();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_1BCAFC62C(a1, (unint64_t *)&unk_1EDA14470, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0750]);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1BCB64370();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_1BCB42948(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1BCB429AC;
  return v6(a1);
}

uint64_t sub_1BCB429AC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

unint64_t sub_1BCB429F8()
{
  unint64_t result;

  result = qword_1EF488178;
  if (!qword_1EF488178)
  {
    sub_1BCB066B8(255, &qword_1EDA14468, (unint64_t *)&qword_1EDA144A8, 0x1E0D2C4D8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = swift_getExtendedExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF488178);
  }
  return result;
}

uint64_t sub_1BCB42A70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BCB066B8(0, &qword_1EF488180, &qword_1EF488188, 0x1E0D2C4E8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1BCB42AD8()
{
  id v0;
  _QWORD *v1;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB6780]), sel_init);
  type metadata accessor for MedicationDetailProvider();
  swift_allocObject();
  v1 = sub_1BCB48C64(v0);

  qword_1EDA13CA8 = (uint64_t)v1;
}

uint64_t static MedicationDetailProvider.shared.getter()
{
  if (qword_1EDA13CB0 != -1)
    swift_once();
  swift_beginAccess();
  return swift_retain();
}

uint64_t static MedicationDetailProvider.shared.setter(uint64_t a1)
{
  if (qword_1EDA13CB0 != -1)
    swift_once();
  swift_beginAccess();
  qword_1EDA13CA8 = a1;
  return swift_release();
}

uint64_t (*static MedicationDetailProvider.shared.modify())()
{
  if (qword_1EDA13CB0 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

void sub_1BCB42C84(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  id v16;
  uint64_t v17;
  id v18;
  unint64_t v19;
  char v20;
  id v21;
  _QWORD *v22;
  void *v23;
  id v24;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = sub_1BCB63FF8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (_QWORD *)((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = (void *)v3[9];
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0DEF740], v6);
  v11 = v10;
  LOBYTE(v10) = sub_1BCB64010();
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    return;
  }
  v12 = (os_unfair_lock_s *)(v3[8] + 16);
  os_unfair_lock_lock(v12);
  swift_beginAccess();
  v13 = v3[5];
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = sub_1BCB0E7B0(a1, a2);
  if ((v15 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_9:
    os_unfair_lock_unlock(v12);
    return;
  }
  v16 = *(id *)(*(_QWORD *)(v13 + 56) + 8 * v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v12);
  if (v16)
  {
    swift_beginAccess();
    v17 = v3[6];
    if (*(_QWORD *)(v17 + 16))
    {
      swift_bridgeObjectRetain();
      v18 = v16;
      swift_bridgeObjectRetain();
      v19 = sub_1BCB0E7B0(a1, a2);
      if ((v20 & 1) != 0)
      {
        v21 = *(id *)(*(_QWORD *)(v17 + 56) + 8 * v19);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v22 = (_QWORD *)swift_allocObject();
        v22[2] = v18;
        v22[3] = a1;
        v22[4] = a2;
        aBlock[4] = sub_1BCB48C08;
        aBlock[5] = v22;
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1BCB42F18;
        aBlock[3] = &block_descriptor_39;
        v23 = _Block_copy(aBlock);
        swift_bridgeObjectRetain();
        v24 = v18;
        swift_release();
        objc_msgSend(v21, sel_notifyObservers_, v23);

        _Block_release(v23);
      }
      else
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    else
    {

    }
  }
}

uint64_t sub_1BCB42F18(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1BCB42F60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  v4 = sub_1BCB63FBC();
  v3[18] = v4;
  v3[19] = *(_QWORD *)(v4 - 8);
  v3[20] = swift_task_alloc();
  v5 = sub_1BCB63FD4();
  v3[21] = v5;
  v3[22] = *(_QWORD *)(v5 - 8);
  v3[23] = swift_task_alloc();
  sub_1BCB066B8(0, &qword_1EDA13C78, &qword_1EDA14538, 0x1E0CB6CE8, MEMORY[0x1E0D2BF68]);
  v3[24] = v6;
  v3[25] = *(_QWORD *)(v6 - 8);
  v3[26] = swift_task_alloc();
  sub_1BCB066B8(0, &qword_1EDA13C70, &qword_1EDA14538, 0x1E0CB6CE8, MEMORY[0x1E0D2BF58]);
  v3[27] = v7;
  v3[28] = *(_QWORD *)(v7 - 8);
  v3[29] = swift_task_alloc();
  sub_1BCB066B8(0, &qword_1EDA13C80, &qword_1EDA14538, 0x1E0CB6CE8, MEMORY[0x1E0D2BF80]);
  v3[30] = v8;
  v3[31] = *(_QWORD *)(v8 - 8);
  v3[32] = swift_task_alloc();
  v9 = sub_1BCB63FF8();
  v3[33] = v9;
  v3[34] = *(_QWORD *)(v9 - 8);
  v3[35] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BCB430E4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t result;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;

  v2 = *(_QWORD *)(v0 + 272);
  v1 = *(_QWORD **)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 264);
  v4 = *(void **)(*(_QWORD *)(v0 + 136) + 72);
  *(_QWORD *)(v0 + 288) = v4;
  *v1 = v4;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v1, *MEMORY[0x1E0DEF738], v3);
  v5 = v4;
  LOBYTE(v4) = sub_1BCB64010();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v1, v3);
  if ((v4 & 1) != 0)
  {
    v7 = *(_QWORD *)(v0 + 136);
    v8 = (os_unfair_lock_s *)(*(_QWORD *)(v7 + 64) + 16);
    os_unfair_lock_lock(v8);
    swift_beginAccess();
    v9 = *(_QWORD *)(v7 + 40);
    if (*(_QWORD *)(v9 + 16))
    {
      v11 = *(_QWORD *)(v0 + 120);
      v10 = *(_QWORD *)(v0 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12 = sub_1BCB0E7B0(v11, v10);
      if ((v13 & 1) != 0)
      {
        v14 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v12);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(v8);
        if (v14)
        {
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          return (*(uint64_t (**)(id))(v0 + 8))(v14);
        }
        goto LABEL_8;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    os_unfair_lock_unlock(v8);
LABEL_8:
    v15 = *(_QWORD *)(v0 + 208);
    v30 = *(_QWORD *)(v0 + 200);
    v16 = *(_QWORD *)(v0 + 192);
    v17 = (void *)objc_opt_self();
    sub_1BCAFC2E0(0, (unint64_t *)&qword_1EDA144A8);
    v18 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__typeIdentifier);
    v19 = objc_msgSend(v17, sel_predicateForUserDomainConceptsWithTypeIdentifier_, v18);
    *(_QWORD *)(v0 + 296) = v19;

    v20 = (void *)sub_1BCB6410C();
    v21 = objc_msgSend(v17, sel_predicateForUserDomainConceptsWithSemanticIdentifier_, v20);
    *(_QWORD *)(v0 + 304) = v21;

    sub_1BCAFBDDC();
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_1BCB665A0;
    *(_QWORD *)(v22 + 32) = v19;
    *(_QWORD *)(v22 + 40) = v21;
    sub_1BCB642EC();
    sub_1BCAFC2E0(0, &qword_1EDA14540);
    v23 = v19;
    v24 = v21;
    v25 = (void *)sub_1BCB642C8();
    swift_bridgeObjectRelease();
    v26 = objc_msgSend((id)objc_opt_self(), sel_andPredicateWithSubpredicates_, v25);
    *(_QWORD *)(v0 + 312) = v26;

    sub_1BCAFC2E0(0, &qword_1EDA14538);
    v27 = v26;
    v28 = MEMORY[0x1E0DEE9D8];
    sub_1BCB63D58();
    *(_QWORD *)(v0 + 88) = v28;
    sub_1BCB63D4C();
    sub_1BCB63D40();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v15, v16);
    *(_QWORD *)(v0 + 320) = sub_1BCB0E834();
    v29 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 328) = v29;
    *v29 = v0;
    v29[1] = sub_1BCB434D0;
    return sub_1BCB64394();
  }
  __break(1u);
  return result;
}

uint64_t sub_1BCB434D0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 344) = v0;
  return swift_task_switch();
}

uint64_t sub_1BCB43534()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 336) = *(_QWORD *)(v0 + 96);
  return swift_task_switch();
}

uint64_t sub_1BCB43550()
{
  _QWORD *v0;
  void *v1;
  id v2;
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = (void *)v0[42];
  if (!v1)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(v0[28] + 8))(v0[29], v0[27]);
    v5 = v0[11];
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      v26 = sub_1BCB648D4();
      result = swift_bridgeObjectRelease();
      if (v26)
        goto LABEL_7;
    }
    else if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_7:
      if ((v5 & 0xC000000000000001) != 0)
      {
        v6 = (id)MEMORY[0x1BCCFCF20](0, v5);
      }
      else
      {
        if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return result;
        }
        v6 = *(id *)(v5 + 32);
      }
      v7 = v6;
      swift_bridgeObjectRelease();
      v8 = objc_msgSend(v7, sel_userConcept);
      objc_opt_self();
      v9 = swift_dynamicCastObjCClass();
      v11 = (void *)v0[38];
      v10 = (void *)v0[39];
      v12 = (void *)v0[37];
      if (v9)
      {
        v13 = v9;
        v40 = (void *)v0[39];
        v43 = v0[32];
        v41 = v0[31];
        v42 = v0[30];
        v14 = v0[23];
        v38 = v0[22];
        v39 = v0[21];
        v33 = v0[20];
        v36 = (void *)v0[38];
        v37 = v0[19];
        v35 = v7;
        v15 = v0[18];
        v17 = v0[15];
        v16 = v0[16];
        v34 = (void *)v0[37];
        v18 = swift_allocObject();
        swift_weakInit();
        v19 = (_QWORD *)swift_allocObject();
        v19[2] = v18;
        v19[3] = v13;
        v19[4] = v17;
        v19[5] = v16;
        v0[6] = sub_1BCB48BD0;
        v0[7] = v19;
        v0[2] = MEMORY[0x1E0C809B0];
        v0[3] = 1107296256;
        v0[4] = sub_1BCB1AB00;
        v0[5] = &block_descriptor_33_0;
        v20 = _Block_copy(v0 + 2);
        swift_bridgeObjectRetain();
        swift_retain();
        v21 = v8;
        sub_1BCB63FC8();
        v0[14] = MEMORY[0x1E0DEE9D8];
        v22 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
        sub_1BCAF7D24((unint64_t *)&qword_1EDA13D20, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
        sub_1BCAFC448(0, &qword_1EDA13D28, v22, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
        sub_1BCB48F80((unint64_t *)&qword_1EDA13D30, &qword_1EDA13D28, v22);
        sub_1BCB646C4();
        MEMORY[0x1BCCFCCEC](0, v14, v33, v20);

        _Block_release(v20);
        (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v33, v15);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v14, v39);
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v43, v42);
        swift_release();
        swift_release();
LABEL_16:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        return ((uint64_t (*)(uint64_t))v0[1])(v13);
      }
      v24 = v0[31];
      v23 = v0[32];
      v25 = v0[30];

      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
LABEL_15:
      v13 = 0;
      goto LABEL_16;
    }
    v28 = (void *)v0[38];
    v27 = (void *)v0[39];
    v29 = (void *)v0[37];
    v31 = v0[31];
    v30 = v0[32];
    v32 = v0[30];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);

    goto LABEL_15;
  }
  v2 = v1;
  MEMORY[0x1BCCFCA1C]();
  if (*(_QWORD *)((v0[11] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v0[11] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1BCB64304();
  sub_1BCB64334();
  sub_1BCB642EC();

  v3 = (_QWORD *)swift_task_alloc();
  v0[44] = v3;
  *v3 = v0;
  v3[1] = sub_1BCB43B1C;
  return sub_1BCB64394();
}

uint64_t sub_1BCB439E4()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 104) = *(_QWORD *)(v0 + 344);
  sub_1BCB052CC();
  swift_willThrowTypedImpl();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_1BCB43A48()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void **)(v0 + 304);
  v2 = *(void **)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 224);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCB43B1C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 344) = v0;
  return swift_task_switch();
}

uint64_t sub_1BCB43B80(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  os_unfair_lock_s *v9;
  id v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v8 = result;
    v9 = (os_unfair_lock_s *)(*(_QWORD *)(result + 64) + 16);
    os_unfair_lock_lock(v9);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v10 = a2;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *(_QWORD *)(v8 + 40);
    *(_QWORD *)(v8 + 40) = 0x8000000000000000;
    sub_1BCB0F898((uint64_t)v10, a3, a4, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v8 + 40) = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    os_unfair_lock_unlock(v9);
    return swift_release();
  }
  return result;
}

uint64_t sub_1BCB43C7C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = *v2;
  v7 = sub_1BCB63FBC();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v20 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1BCB63FD4();
  v11 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v3[9];
  v14 = swift_allocObject();
  swift_weakInit();
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v14;
  v15[3] = a1;
  v15[4] = a2;
  v15[5] = v6;
  aBlock[4] = sub_1BCB48A90;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BCB1AB00;
  aBlock[3] = &block_descriptor_10;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1BCB63FC8();
  v21 = MEMORY[0x1E0DEE9D8];
  sub_1BCAF7D24((unint64_t *)&qword_1EDA13D20, v8, MEMORY[0x1E0DEF510]);
  sub_1BCAFC448(0, &qword_1EDA13D28, v8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BCB48F80((unint64_t *)&qword_1EDA13D30, &qword_1EDA13D28, v8);
  sub_1BCB646C4();
  MEMORY[0x1BCCFCCEC](0, v13, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v19);
  swift_release();
  return swift_release();
}

uint64_t sub_1BCB43EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  _QWORD aBlock[6];
  uint64_t v34;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v8 = result;
    swift_beginAccess();
    v9 = *(_QWORD *)(v8 + 56);
    swift_bridgeObjectRetain();
    v10 = sub_1BCB442F8(a2, a3, v9);
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {
      swift_beginAccess();
      swift_bridgeObjectRetain();
      sub_1BCB45C50(&v34, a2, a3);
      swift_endAccess();
      swift_bridgeObjectRelease();
      v11 = (void *)objc_opt_self();
      sub_1BCAFC2E0(0, (unint64_t *)&qword_1EDA144A8);
      v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__typeIdentifier);
      v13 = objc_msgSend(v11, sel_predicateForUserDomainConceptsWithTypeIdentifier_, v12);

      v14 = (void *)sub_1BCB6410C();
      v15 = objc_msgSend(v11, sel_predicateForUserDomainConceptsWithSemanticIdentifier_, v14);

      sub_1BCAFBDDC();
      v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_1BCB665A0;
      *(_QWORD *)(v16 + 32) = v13;
      *(_QWORD *)(v16 + 40) = v15;
      sub_1BCB642EC();
      sub_1BCAFC2E0(0, &qword_1EDA14540);
      v32 = v13;
      v31 = v15;
      v17 = (void *)sub_1BCB642C8();
      swift_bridgeObjectRelease();
      v18 = objc_msgSend((id)objc_opt_self(), sel_andPredicateWithSubpredicates_, v17);

      v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = xmmword_1BCB66010;
      sub_1BCB6413C();
      v20 = a4;
      v21 = objc_allocWithZone(MEMORY[0x1E0CB3928]);
      v22 = v18;
      v23 = (void *)sub_1BCB6410C();
      swift_bridgeObjectRelease();
      v24 = objc_msgSend(v21, sel_initWithKey_ascending_, v23, 1);

      *(_QWORD *)(v19 + 32) = v24;
      sub_1BCB642EC();
      v25 = swift_allocObject();
      swift_weakInit();
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = v25;
      v26[3] = a2;
      v26[4] = a3;
      v26[5] = v20;
      v27 = objc_allocWithZone(MEMORY[0x1E0CB6D28]);
      sub_1BCAFC2E0(0, &qword_1EDA14548);
      swift_bridgeObjectRetain();
      swift_retain();
      v28 = (void *)sub_1BCB642C8();
      swift_bridgeObjectRelease();
      aBlock[4] = sub_1BCB48ACC;
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1BCB45B9C;
      aBlock[3] = &block_descriptor_17;
      v29 = _Block_copy(aBlock);
      v30 = objc_msgSend(v27, sel_initWithPredicate_anchor_limit_sortDescriptors_resultsHandler_, v22, 0, 1, v28, v29);

      _Block_release(v29);
      swift_release();
      swift_release();
      objc_msgSend(*(id *)(v8 + 16), sel_executeQuery_, v30);

    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1BCB442F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_1BCB64A90();
    sub_1BCB641CC();
    v6 = sub_1BCB64AC0();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_1BCB649F4() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_1BCB649F4() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1BCB4442C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  uint64_t (*v26)(uint64_t);
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[6];

  v31 = a7;
  v12 = sub_1BCB63FBC();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1BCB63FD4();
  v32 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v30 = v13;
    v28 = *(id *)(result + 72);
    swift_release();
    v20 = swift_allocObject();
    v29 = v16;
    swift_beginAccess();
    swift_weakLoadStrong();
    swift_weakInit();
    swift_release();
    v21 = (_QWORD *)swift_allocObject();
    v22 = v31;
    v21[2] = v20;
    v21[3] = v22;
    v21[4] = a8;
    v21[5] = a2;
    v21[6] = a5;
    v21[7] = a9;
    aBlock[4] = sub_1BCB48B30;
    aBlock[5] = v21;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1BCB1AB00;
    aBlock[3] = &block_descriptor_24;
    v23 = _Block_copy(aBlock);
    swift_retain();
    swift_bridgeObjectRetain();
    v24 = a2;
    v25 = a5;
    sub_1BCB63FC8();
    v33 = MEMORY[0x1E0DEE9D8];
    v26 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
    sub_1BCAF7D24((unint64_t *)&qword_1EDA13D20, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1BCAFC448(0, &qword_1EDA13D28, v26, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BCB48F80((unint64_t *)&qword_1EDA13D30, &qword_1EDA13D28, v26);
    sub_1BCB646C4();
    v27 = v28;
    MEMORY[0x1BCCFCCEC](0, v18, v15, v23);
    _Block_release(v23);

    (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v12);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v18, v29);
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_1BCB446FC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t Strong;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  id v14;
  id v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  id v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v10 = Strong;
    swift_beginAccess();
    sub_1BCB4820C(a2, a3);
    swift_endAccess();
    swift_bridgeObjectRelease();
    if (a4 && (objc_opt_self(), (v11 = swift_dynamicCastObjCClass()) != 0))
    {
      v12 = v11;
      v13 = (os_unfair_lock_s *)(*(_QWORD *)(v10 + 64) + 16);
      v14 = a4;
      os_unfair_lock_lock(v13);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v15 = v14;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v33 = *(_QWORD *)(v10 + 40);
      *(_QWORD *)(v10 + 40) = 0x8000000000000000;
      sub_1BCB0F898(v12, a2, a3, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)(v10 + 40) = v33;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      os_unfair_lock_unlock(v13);
      sub_1BCB42C84(a2, a3);
      swift_release();

    }
    else
    {
      if (qword_1EDA14510 != -1)
        swift_once();
      v17 = sub_1BCB63DDC();
      __swift_project_value_buffer(v17, (uint64_t)qword_1EDA14518);
      swift_bridgeObjectRetain();
      v18 = a5;
      swift_bridgeObjectRetain();
      v19 = a5;
      v20 = sub_1BCB63DD0();
      v21 = sub_1BCB644FC();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = swift_slowAlloc();
        v23 = swift_slowAlloc();
        v33 = v23;
        *(_DWORD *)v22 = 136315650;
        v24 = sub_1BCB64B14();
        sub_1BCB010C8(v24, v25, &v33);
        sub_1BCB64640();
        swift_bridgeObjectRelease();
        *(_WORD *)(v22 + 12) = 2080;
        v26 = (void *)sub_1BCB6410C();
        v27 = (id)HKSensitiveLogItem();

        sub_1BCB646A0();
        swift_unknownObjectRelease();
        v28 = sub_1BCB6419C();
        sub_1BCB010C8(v28, v29, &v33);
        sub_1BCB64640();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v22 + 22) = 2080;
        v30 = a5;
        sub_1BCAFC448(0, &qword_1EF487B78, (uint64_t (*)(uint64_t))sub_1BCB052CC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        v31 = sub_1BCB64190();
        sub_1BCB010C8(v31, v32, &v33);
        sub_1BCB64640();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1BCAF3000, v20, v21, "[%s] Could not fetch medication detail for identifier: %s error: %s", (uint8_t *)v22, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1BCCFD928](v23, -1, -1);
        MEMORY[0x1BCCFD928](v22, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();

      }
      swift_release();
    }
  }
}

uint64_t sub_1BCB44B18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1BCB4855C(a1, a2, a3, v3);
}

uint64_t sub_1BCB44B20(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  char v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  char isUniquelyReferenced_nonNull_native;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  id v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  id v26;
  void *v27;
  uint64_t v28;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v8 = (_QWORD *)result;
    v9 = result + 48;
    swift_beginAccess();
    if (!*(_QWORD *)(v8[6] + 16)
      || (swift_bridgeObjectRetain(),
          swift_bridgeObjectRetain(),
          sub_1BCB0E7B0(a2, a3),
          v11 = v10,
          swift_bridgeObjectRelease(),
          swift_bridgeObjectRelease(),
          (v11 & 1) == 0))
    {
      sub_1BCAFC2E0(0, &qword_1EDA13D98);
      swift_bridgeObjectRetain();
      v12 = (void *)sub_1BCB6461C();
      v13 = objc_allocWithZone(MEMORY[0x1E0CB6988]);
      v14 = (void *)sub_1BCB6410C();
      v15 = objc_msgSend(v13, sel_initWithName_loggingCategory_, v14, v12);

      swift_beginAccess();
      if (v15)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v28 = *(_QWORD *)v9;
        *(_QWORD *)v9 = 0x8000000000000000;
        sub_1BCB0FE3C((uint64_t)v15, a2, a3, isUniquelyReferenced_nonNull_native);
        *(_QWORD *)v9 = v28;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v17 = (void *)sub_1BCB2ED30(a2, a3);
        swift_bridgeObjectRelease();

      }
      swift_endAccess();
    }
    v18 = *(_QWORD *)v9;
    if (*(_QWORD *)(*(_QWORD *)v9 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19 = sub_1BCB0E7B0(a2, a3);
      if ((v20 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_14:
        v22 = (os_unfair_lock_s *)(v8[8] + 16);
        os_unfair_lock_lock(v22);
        swift_beginAccess();
        v23 = v8[5];
        if (*(_QWORD *)(v23 + 16))
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v24 = sub_1BCB0E7B0(a2, a3);
          if ((v25 & 1) != 0)
          {
            v26 = *(id *)(*(_QWORD *)(v23 + 56) + 8 * v24);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            os_unfair_lock_unlock(v22);
            if (v26)
            {
              v27 = (void *)sub_1BCB6410C();
              objc_msgSend(a4, sel_medicationDetailDidUpdate_for_, v26, v27);

              return swift_release();
            }
LABEL_20:
            sub_1BCB43C7C(a2, a3);
            return swift_release();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        os_unfair_lock_unlock(v22);
        goto LABEL_20;
      }
      v21 = *(id *)(*(_QWORD *)(v18 + 56) + 8 * v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v21 = 0;
    }
    objc_msgSend(v21, sel_registerObserver_, a4, v28);

    goto LABEL_14;
  }
  return result;
}

uint64_t sub_1BCB44E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v7 = sub_1BCB63FBC();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v20 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1BCB63FD4();
  v11 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v3 + 72);
  v14 = swift_allocObject();
  swift_weakInit();
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v14;
  v15[3] = a2;
  v15[4] = a3;
  v15[5] = a1;
  aBlock[4] = sub_1BCB487D0;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BCB1AB00;
  aBlock[3] = &block_descriptor_8;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  sub_1BCB63FC8();
  v21 = MEMORY[0x1E0DEE9D8];
  sub_1BCAF7D24((unint64_t *)&qword_1EDA13D20, v8, MEMORY[0x1E0DEF510]);
  sub_1BCAFC448(0, &qword_1EDA13D28, v8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BCB48F80((unint64_t *)&qword_1EDA13D30, &qword_1EDA13D28, v8);
  sub_1BCB646C4();
  MEMORY[0x1BCCFCCEC](0, v13, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v19);
  swift_release();
  return swift_release();
}

uint64_t sub_1BCB4509C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  id v12;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v8 = result;
    swift_beginAccess();
    v9 = *(_QWORD *)(v8 + 48);
    if (!*(_QWORD *)(v9 + 16))
    {
      v12 = 0;
      goto LABEL_6;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = sub_1BCB0E7B0(a2, a3);
    if ((v11 & 1) != 0)
    {
      v12 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_6:
      objc_msgSend(v12, sel_unregisterObserver_, a4);

      return swift_release();
    }
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1BCB451A4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;

  sub_1BCAFC448(0, &qword_1EDA13D60, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF868], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v14 - v1;
  sub_1BCB48868();
  v4 = v3;
  v14 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCB48984();
  v8 = v7;
  v15 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1BCB63DA0();
  sub_1BCAFC2E0(0, (unint64_t *)&unk_1EDA13D78);
  v16 = (id)sub_1BCB64580();
  v11 = sub_1BCB64568();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v2, 1, 1, v11);
  sub_1BCB10E30();
  sub_1BCAF7D24(&qword_1EF4879C8, (uint64_t (*)(uint64_t))sub_1BCB10E30, MEMORY[0x1E0C95FB8]);
  sub_1BCB48944((unint64_t *)&unk_1EDA13D68, (unint64_t *)&unk_1EDA13D78, 0x1E0C80610, MEMORY[0x1E0DEF7F8]);
  sub_1BCB63F8C();
  sub_1BCB48A38((uint64_t)v2);

  swift_release();
  sub_1BCB066B8(0, &qword_1EDA14468, (unint64_t *)&qword_1EDA144A8, 0x1E0D2C4D8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BCAF7D24(&qword_1EF488338, (uint64_t (*)(uint64_t))sub_1BCB48868, MEMORY[0x1E0C95CB8]);
  sub_1BCB63F80();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v4);
  sub_1BCAF7D24(&qword_1EF488340, (uint64_t (*)(uint64_t))sub_1BCB48984, MEMORY[0x1E0C95950]);
  v12 = sub_1BCB63F68();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v8);
  return v12;
}

uint64_t sub_1BCB45450@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t i;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_1BCB63D94();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (unint64_t *)((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(unint64_t *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  if ((*(unsigned int (**)(unint64_t *, uint64_t))(v5 + 88))(v7, v4) != *MEMORY[0x1E0D2EFF8])
  {
    *a2 = MEMORY[0x1E0DEE9D8];
    return (*(uint64_t (**)(unint64_t *, uint64_t))(v5 + 8))(v7, v4);
  }
  (*(void (**)(unint64_t *, uint64_t))(v5 + 96))(v7, v4);
  v8 = *v7;
  v16 = MEMORY[0x1E0DEE9D8];
  if (!(v8 >> 62))
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_4;
LABEL_18:
    swift_bridgeObjectRelease();
    v14 = MEMORY[0x1E0DEE9D8];
LABEL_19:
    result = swift_bridgeObjectRelease();
    *a2 = v14;
    return result;
  }
  swift_bridgeObjectRetain();
  result = sub_1BCB648D4();
  v9 = result;
  if (!result)
    goto LABEL_18;
LABEL_4:
  if (v9 >= 1)
  {
    for (i = 0; i != v9; ++i)
    {
      if ((v8 & 0xC000000000000001) != 0)
        v12 = (id)MEMORY[0x1BCCFCF20](i, v8);
      else
        v12 = *(id *)(v8 + 8 * i + 32);
      v13 = v12;
      objc_opt_self();
      if (swift_dynamicCastObjCClass())
      {
        MEMORY[0x1BCCFCA1C]();
        if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1BCB64304();
        sub_1BCB64334();
        sub_1BCB642EC();
      }
      else
      {

      }
    }
    swift_bridgeObjectRelease();
    v14 = v16;
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BCB45668(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[6];

  v28 = a2;
  v24 = sub_1BCB63FBC();
  v27 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1BCB63FD4();
  v25 = *(_QWORD *)(v5 - 8);
  v26 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  if (!((unint64_t)*a1 >> 62))
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  result = sub_1BCB648D4();
  v9 = result;
  if (!result)
    return swift_bridgeObjectRelease();
LABEL_3:
  if (v9 >= 1)
  {
    v11 = 0;
    v20 = *(_QWORD *)(v28 + 72);
    v21 = v8 & 0xC000000000000001;
    v22 = v9;
    v23 = v8;
    v12 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
    do
    {
      if (v21)
        v13 = (id)MEMORY[0x1BCCFCF20](v11, v8);
      else
        v13 = *(id *)(v8 + 8 * v11 + 32);
      v14 = v13;
      ++v11;
      v15 = swift_allocObject();
      swift_weakInit();
      v16 = swift_allocObject();
      *(_QWORD *)(v16 + 16) = v14;
      *(_QWORD *)(v16 + 24) = v15;
      aBlock[4] = sub_1BCB49080;
      aBlock[5] = v16;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1BCB1AB00;
      aBlock[3] = &block_descriptor_53;
      v17 = _Block_copy(aBlock);
      v18 = v14;
      swift_retain();
      sub_1BCB63FC8();
      v29 = MEMORY[0x1E0DEE9D8];
      sub_1BCAF7D24((unint64_t *)&qword_1EDA13D20, v12, MEMORY[0x1E0DEF510]);
      sub_1BCAFC448(0, &qword_1EDA13D28, v12, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
      sub_1BCB48F80((unint64_t *)&qword_1EDA13D30, &qword_1EDA13D28, v12);
      v19 = v24;
      sub_1BCB646C4();
      MEMORY[0x1BCCFCCEC](0, v7, v4, v17);
      _Block_release(v17);

      (*(void (**)(char *, uint64_t))(v27 + 8))(v4, v19);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v26);
      swift_release();
      swift_release();
      v8 = v23;
    }
    while (v22 != v11);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1BCB45980(void *a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  os_unfair_lock_s *v9;
  id v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  v2 = objc_msgSend(a1, sel_semanticIdentifier);
  v3 = objc_msgSend(v2, sel_stringValue);

  v4 = sub_1BCB6413C();
  v6 = v5;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v8 = Strong;
    v9 = (os_unfair_lock_s *)(*(_QWORD *)(Strong + 64) + 16);
    os_unfair_lock_lock(v9);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v10 = a1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *(_QWORD *)(v8 + 40);
    *(_QWORD *)(v8 + 40) = 0x8000000000000000;
    sub_1BCB0F898((uint64_t)v10, v4, v6, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v8 + 40) = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    os_unfair_lock_unlock(v9);
    swift_release();
  }
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_1BCB42C84(v4, v6);
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

id *MedicationDetailProvider.deinit()
{
  id *v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return v0;
}

uint64_t MedicationDetailProvider.__deallocating_deinit()
{
  MedicationDetailProvider.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1BCB45B7C()
{
  MedicationDetailProvider.deinit();
  return swift_deallocClassInstance();
}

void sub_1BCB45B9C(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  void (*v11)(id, void *, void *, uint64_t, void *);
  id v12;
  id v13;
  id v14;
  id v15;

  v11 = *(void (**)(id, void *, void *, uint64_t, void *))(a1 + 32);
  swift_retain();
  v15 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a6;
  v11(v15, a3, a4, a5, a6);
  swift_release();

}

uint64_t sub_1BCB45C50(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_1BCB64A90();
  swift_bridgeObjectRetain();
  sub_1BCB641CC();
  v8 = sub_1BCB64AC0();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_1BCB649F4() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_1BCB649F4() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1BCB46F34(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1BCB45DFC(_QWORD *a1, void *a2)
{
  return sub_1BCB45E44(a1, a2, &qword_1EF487720, 0x1E0CB37E8, (unint64_t *)&qword_1EF487718, (unint64_t *)&qword_1EF487728);
}

uint64_t sub_1BCB45E20(_QWORD *a1, void *a2)
{
  return sub_1BCB45E44(a1, a2, (unint64_t *)&qword_1EDA144A8, 0x1E0D2C4D8, &qword_1EF488358, &qword_1EF487BF0);
}

uint64_t sub_1BCB45E44(_QWORD *a1, void *a2, unint64_t *a3, uint64_t a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t *v6;
  uint64_t *v11;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  id v25;
  char v26;
  void *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  char isUniquelyReferenced_nonNull_native;
  id v34;
  unint64_t *v35;
  uint64_t v36;
  id v37;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v11 = v6;
  v14 = *v6;
  if ((*v6 & 0xC000000000000001) != 0)
  {
    if (v14 < 0)
      v15 = *v6;
    else
      v15 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v16 = a2;
    v17 = sub_1BCB64730();

    if (v17)
    {
      swift_bridgeObjectRelease();

      sub_1BCAFC2E0(0, a3);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v42;
      swift_unknownObjectRelease();
      return 0;
    }
    result = sub_1BCB64724();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v29 = sub_1BCB463D0(v15, result + 1, a5, a3, a4, a6);
    v43 = v29;
    v30 = *(_QWORD *)(v29 + 16);
    if (*(_QWORD *)(v29 + 24) <= v30)
    {
      v35 = a5;
      v36 = v30 + 1;
      v37 = v16;
      sub_1BCB468B4(v36, v35, a3, a4, a6);
      v31 = v43;
    }
    else
    {
      v31 = v29;
      v32 = v16;
    }
    sub_1BCB46EB4((uint64_t)v16, v31);
    *v11 = v31;
    swift_bridgeObjectRelease();
    *a1 = v16;
  }
  else
  {
    swift_bridgeObjectRetain();
    v19 = sub_1BCB645EC();
    v20 = -1 << *(_BYTE *)(v14 + 32);
    v21 = v19 & ~v20;
    v40 = a4;
    if (((*(_QWORD *)(v14 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
    {
      sub_1BCAFC2E0(0, a3);
      v22 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * v21);
      v23 = sub_1BCB645F8();

      if ((v23 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v27 = *(void **)(*(_QWORD *)(*v6 + 48) + 8 * v21);
        *a1 = v27;
        v28 = v27;
        return 0;
      }
      v24 = ~v20;
      while (1)
      {
        v21 = (v21 + 1) & v24;
        if (((*(_QWORD *)(v14 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          break;
        v25 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * v21);
        v26 = sub_1BCB645F8();

        if ((v26 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v44 = *v6;
    *v6 = 0x8000000000000000;
    v34 = a2;
    sub_1BCB472D0((uint64_t)v34, v21, isUniquelyReferenced_nonNull_native, a5, a3, v40, a6);
    *v6 = v44;
    swift_bridgeObjectRelease();
    *a1 = v34;
  }
  return 1;
}

uint64_t sub_1BCB4612C(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = sub_1BCB63C2C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  sub_1BCAF7D24(&qword_1EF487790, v11, MEMORY[0x1E0CB11D0]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = sub_1BCB640D0();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      sub_1BCAF7D24(&qword_1EF487798, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], MEMORY[0x1E0CB11D8]);
      v21 = sub_1BCB64100();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    sub_1BCB470CC((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_1BCB46388(_QWORD *a1, void *a2)
{
  return sub_1BCB45E44(a1, a2, (unint64_t *)&qword_1EDA14480, 0x1E0D2C480, &qword_1EF488350, &qword_1EF487BE8);
}

uint64_t sub_1BCB463AC(_QWORD *a1, void *a2)
{
  return sub_1BCB45E44(a1, a2, &qword_1EF487BD8, 0x1E0D2C500, &qword_1EF488360, &qword_1EF487BE0);
}

uint64_t sub_1BCB463D0(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5, unint64_t *a6)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    sub_1BCB49088(0, a3, a4, a5, a6);
    v10 = sub_1BCB64778();
    v23 = v10;
    sub_1BCB646F4();
    if (sub_1BCB64748())
    {
      sub_1BCAFC2E0(0, a4);
      do
      {
        swift_dynamicCast();
        v10 = v23;
        v17 = *(_QWORD *)(v23 + 16);
        if (*(_QWORD *)(v23 + 24) <= v17)
        {
          sub_1BCB468B4(v17 + 1, a3, a4, a5, a6);
          v10 = v23;
        }
        result = sub_1BCB645EC();
        v12 = v10 + 56;
        v13 = -1 << *(_BYTE *)(v10 + 32);
        v14 = result & ~v13;
        v15 = v14 >> 6;
        if (((-1 << v14) & ~*(_QWORD *)(v10 + 56 + 8 * (v14 >> 6))) != 0)
        {
          v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v10 + 56 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v18 = 0;
          v19 = (unint64_t)(63 - v13) >> 6;
          do
          {
            if (++v15 == v19 && (v18 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v20 = v15 == v19;
            if (v15 == v19)
              v15 = 0;
            v18 |= v20;
            v21 = *(_QWORD *)(v12 + 8 * v15);
          }
          while (v21 == -1);
          v16 = __clz(__rbit64(~v21)) + (v15 << 6);
        }
        *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
        *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v16) = v22;
        ++*(_QWORD *)(v10 + 16);
      }
      while (sub_1BCB64748());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v10;
}

uint64_t sub_1BCB465F4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  _QWORD *v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  v1 = v0;
  v2 = *v0;
  sub_1BCB48B40();
  v3 = sub_1BCB6476C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_37;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v31 = v0;
  v32 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v7)
    {
      v14 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_22;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      return result;
    }
    if (v16 >= v8)
      break;
    v17 = (_QWORD *)(v2 + 56);
    v18 = *(_QWORD *)(v32 + 8 * v16);
    ++v11;
    if (!v18)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v8)
        goto LABEL_31;
      v18 = *(_QWORD *)(v32 + 8 * v11);
      if (!v18)
      {
        v19 = v16 + 2;
        if (v19 >= v8)
        {
LABEL_31:
          swift_release();
          v1 = v31;
          goto LABEL_33;
        }
        v18 = *(_QWORD *)(v32 + 8 * v19);
        if (!v18)
        {
          while (1)
          {
            v11 = v19 + 1;
            if (__OFADD__(v19, 1))
              goto LABEL_39;
            if (v11 >= v8)
              goto LABEL_31;
            v18 = *(_QWORD *)(v32 + 8 * v11);
            ++v19;
            if (v18)
              goto LABEL_21;
          }
        }
        v11 = v19;
      }
    }
LABEL_21:
    v7 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v11 << 6);
LABEL_22:
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v21 = *v20;
    v22 = v20[1];
    sub_1BCB64A90();
    sub_1BCB641CC();
    result = sub_1BCB64AC0();
    v23 = -1 << *(_BYTE *)(v4 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v9 + 8 * (v24 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v9 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v9 + 8 * v25);
      }
      while (v29 == -1);
      v12 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v21;
    v13[1] = v22;
    ++*(_QWORD *)(v4 + 16);
  }
  swift_release();
  v1 = v31;
  v17 = (_QWORD *)(v2 + 56);
LABEL_33:
  v30 = 1 << *(_BYTE *)(v2 + 32);
  if (v30 > 63)
    bzero(v17, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v17 = -1 << v30;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_37:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1BCB468B4(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;

  v6 = v5;
  v7 = *v5;
  sub_1BCB49088(0, a2, a3, a4, a5);
  v8 = sub_1BCB6476C();
  v9 = v8;
  if (*(_QWORD *)(v7 + 16))
  {
    v33 = v5;
    v10 = 1 << *(_BYTE *)(v7 + 32);
    v11 = (_QWORD *)(v7 + 56);
    if (v10 < 64)
      v12 = ~(-1 << v10);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v7 + 56);
    v14 = (unint64_t)(v10 + 63) >> 6;
    v15 = v8 + 56;
    result = swift_retain();
    v17 = 0;
    while (1)
    {
      if (v13)
      {
        v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v20 = v19 | (v17 << 6);
      }
      else
      {
        v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v21 >= v14)
          goto LABEL_33;
        v22 = v11[v21];
        ++v17;
        if (!v22)
        {
          v17 = v21 + 1;
          if (v21 + 1 >= v14)
            goto LABEL_33;
          v22 = v11[v17];
          if (!v22)
          {
            v17 = v21 + 2;
            if (v21 + 2 >= v14)
              goto LABEL_33;
            v22 = v11[v17];
            if (!v22)
            {
              v23 = v21 + 3;
              if (v23 >= v14)
              {
LABEL_33:
                swift_release();
                v6 = v33;
                v32 = 1 << *(_BYTE *)(v7 + 32);
                if (v32 > 63)
                  bzero((void *)(v7 + 56), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v11 = -1 << v32;
                *(_QWORD *)(v7 + 16) = 0;
                break;
              }
              v22 = v11[v23];
              if (!v22)
              {
                while (1)
                {
                  v17 = v23 + 1;
                  if (__OFADD__(v23, 1))
                    goto LABEL_39;
                  if (v17 >= v14)
                    goto LABEL_33;
                  v22 = v11[v17];
                  ++v23;
                  if (v22)
                    goto LABEL_23;
                }
              }
              v17 = v23;
            }
          }
        }
LABEL_23:
        v13 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      v24 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v20);
      result = sub_1BCB645EC();
      v25 = -1 << *(_BYTE *)(v9 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v15 + 8 * v27);
        }
        while (v31 == -1);
        v18 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v18) = v24;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release();
  *v6 = v9;
  return result;
}

uint64_t sub_1BCB46B4C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = v0;
  v2 = sub_1BCB63C2C();
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  sub_1BCB0546C();
  v6 = sub_1BCB6476C();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v35 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v33 = v0;
    v34 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v34)
          goto LABEL_33;
        v19 = v35[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v34)
            goto LABEL_33;
          v19 = v35[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v34)
              goto LABEL_33;
            v19 = v35[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v34)
              {
LABEL_33:
                swift_release();
                v1 = v33;
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v35[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v34)
                    goto LABEL_33;
                  v19 = v35[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = v5;
      v22 = *(_QWORD *)(v5 + 48);
      v23 = *(_QWORD *)(v36 + 72);
      v24 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 32);
      v24(v4, v22 + v23 * v17, v2);
      sub_1BCAF7D24(&qword_1EF487790, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], MEMORY[0x1E0CB11D0]);
      result = sub_1BCB640D0();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v24)(*(_QWORD *)(v7 + 48) + v15 * v23, v4, v2);
      ++*(_QWORD *)(v7 + 16);
      v5 = v21;
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

unint64_t sub_1BCB46EB4(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  sub_1BCB645EC();
  result = sub_1BCB646DC();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_1BCB46F34(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_1BCB465F4();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_1BCB47484();
      goto LABEL_22;
    }
    sub_1BCB479F0();
  }
  v11 = *v4;
  sub_1BCB64A90();
  sub_1BCB641CC();
  result = sub_1BCB64AC0();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_1BCB649F4(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_1BCB64A30();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_1BCB649F4();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t sub_1BCB470CC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v26 = a1;
  v6 = sub_1BCB63C2C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v25 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_1BCB46B4C();
  }
  else
  {
    if (v11 > v10)
    {
      sub_1BCB477D0();
      goto LABEL_12;
    }
    sub_1BCB47EE8();
  }
  v12 = *v3;
  sub_1BCAF7D24(&qword_1EF487790, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], MEMORY[0x1E0CB11D0]);
  v13 = sub_1BCB640D0();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v16 = *(_QWORD *)(v7 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v17(v9, *(_QWORD *)(v12 + 48) + v16 * a2, v6);
      sub_1BCAF7D24(&qword_1EF487798, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], MEMORY[0x1E0CB11D8]);
      v18 = sub_1BCB64100();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v18 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v19 = v26;
  v20 = *v25;
  *(_QWORD *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v20 + 48) + *(_QWORD *)(v7 + 72) * a2, v19, v6);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_1BCB64A30();
  __break(1u);
  return result;
}

void sub_1BCB472D0(uint64_t a1, unint64_t a2, char a3, unint64_t *a4, unint64_t *a5, uint64_t a6, unint64_t *a7)
{
  uint64_t *v7;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v11 = *(_QWORD *)(*v7 + 16);
  v12 = *(_QWORD *)(*v7 + 24);
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_14;
  v13 = v11 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1BCB468B4(v13, a4, a5, a6, a7);
  }
  else
  {
    if (v12 > v11)
    {
      sub_1BCB4761C(a4, a5, a6, a7);
      goto LABEL_14;
    }
    sub_1BCB47C74(v13, a4, a5, a6, a7);
  }
  v14 = *v7;
  v15 = sub_1BCB645EC();
  v16 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    sub_1BCAFC2E0(0, a5);
    v17 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * a2);
    v18 = sub_1BCB645F8();

    if ((v18 & 1) != 0)
    {
LABEL_13:
      sub_1BCB64A30();
      __break(1u);
    }
    else
    {
      v19 = ~v16;
      while (1)
      {
        a2 = (a2 + 1) & v19;
        if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v20 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * a2);
        v21 = sub_1BCB645F8();

        if ((v21 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v22 = *v7;
  *(_QWORD *)(*v7 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v22 + 48) + 8 * a2) = a1;
  v23 = *(_QWORD *)(v22 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (v24)
    __break(1u);
  else
    *(_QWORD *)(v22 + 16) = v25;
}

void *sub_1BCB47484()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_1BCB48B40();
  v2 = *v0;
  v3 = sub_1BCB64760();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1BCB4761C(unint64_t *a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v5 = v4;
  sub_1BCB49088(0, a1, a2, a3, a4);
  v6 = *v4;
  v7 = sub_1BCB64760();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v5 = v8;
    return result;
  }
  result = (id)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v17)
      goto LABEL_28;
    v23 = *(_QWORD *)(v10 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v17)
        goto LABEL_28;
      v23 = *(_QWORD *)(v10 + 8 * v13);
      if (!v23)
      {
        v13 = v22 + 2;
        if (v22 + 2 >= v17)
          goto LABEL_28;
        v23 = *(_QWORD *)(v10 + 8 * v13);
        if (!v23)
          break;
      }
    }
LABEL_27:
    v16 = (v23 - 1) & v23;
    v19 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v20 = 8 * v19;
    v21 = *(void **)(*(_QWORD *)(v6 + 48) + v20);
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v21;
    result = v21;
  }
  v24 = v22 + 3;
  if (v24 >= v17)
    goto LABEL_28;
  v23 = *(_QWORD *)(v10 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v23 = *(_QWORD *)(v10 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BCB477D0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = sub_1BCB63C2C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCB0546C();
  v6 = *v0;
  v7 = sub_1BCB64760();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1BCB479F0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  sub_1BCB48B40();
  v3 = sub_1BCB6476C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_32:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain_n();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_21;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (v16 >= v29)
      goto LABEL_30;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_30;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v18 = v16 + 2;
        if (v18 >= v29)
        {
LABEL_30:
          result = swift_release_n();
          v1 = v0;
          goto LABEL_32;
        }
        v17 = *(_QWORD *)(v6 + 8 * v18);
        v11 = v18;
        if (!v17)
          break;
      }
    }
LABEL_20:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_21:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_1BCB64A90();
    swift_bridgeObjectRetain();
    sub_1BCB641CC();
    result = sub_1BCB64AC0();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_33;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_30;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_20;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_1BCB47C74(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;

  v6 = v5;
  v7 = *v5;
  sub_1BCB49088(0, a2, a3, a4, a5);
  v8 = sub_1BCB6476C();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release();
LABEL_35:
    *v6 = v9;
    return result;
  }
  v32 = v5;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = v7 + 56;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & *(_QWORD *)(v7 + 56);
  v14 = (unint64_t)(v10 + 63) >> 6;
  v15 = v8 + 56;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v13)
    {
      v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_24;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v21 >= v14)
      goto LABEL_33;
    v22 = *(_QWORD *)(v11 + 8 * v21);
    ++v17;
    if (!v22)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_33;
      v22 = *(_QWORD *)(v11 + 8 * v17);
      if (!v22)
      {
        v17 = v21 + 2;
        if (v21 + 2 >= v14)
          goto LABEL_33;
        v22 = *(_QWORD *)(v11 + 8 * v17);
        if (!v22)
          break;
      }
    }
LABEL_23:
    v13 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_24:
    v24 = *(id *)(*(_QWORD *)(v7 + 48) + 8 * v20);
    result = sub_1BCB645EC();
    v25 = -1 << *(_BYTE *)(v9 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v15 + 8 * v27);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v18) = v24;
    ++*(_QWORD *)(v9 + 16);
  }
  v23 = v21 + 3;
  if (v23 >= v14)
  {
LABEL_33:
    result = swift_release_n();
    v6 = v32;
    goto LABEL_35;
  }
  v22 = *(_QWORD *)(v11 + 8 * v23);
  if (v22)
  {
    v17 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    v17 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v22 = *(_QWORD *)(v11 + 8 * v17);
    ++v23;
    if (v22)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1BCB47EE8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;

  v1 = v0;
  v2 = sub_1BCB63C2C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  sub_1BCB0546C();
  v7 = sub_1BCB6476C();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v31 = v0;
  v32 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v33 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v33)
        goto LABEL_33;
      v20 = *(_QWORD *)(v32 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v33)
          goto LABEL_33;
        v20 = *(_QWORD *)(v32 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    v22 = *(_QWORD *)(v3 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v22 * v18, v2);
    sub_1BCAF7D24(&qword_1EF487790, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], MEMORY[0x1E0CB11D0]);
    result = sub_1BCB640D0();
    v23 = -1 << *(_BYTE *)(v8 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v16 * v22, v5, v2);
    ++*(_QWORD *)(v8 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v31;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(v32 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1BCB4820C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v19;

  v5 = *v2;
  sub_1BCB64A90();
  swift_bridgeObjectRetain();
  sub_1BCB641CC();
  v6 = sub_1BCB64AC0();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (sub_1BCB649F4() & 1) == 0)
  {
    v15 = ~v7;
    do
    {
      v8 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v16 = (_QWORD *)(v9 + 16 * v8);
      v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (sub_1BCB649F4() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13 = *v2;
  v19 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1BCB47484();
    v13 = v19;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 16 * v8);
  sub_1BCB48398(v8);
  *v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

unint64_t sub_1BCB48398(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = sub_1BCB646D0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        sub_1BCB64A90();
        swift_bridgeObjectRetain();
        sub_1BCB641CC();
        v10 = sub_1BCB64AC0();
        swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9)
            goto LABEL_5;
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(v3 + 48);
          v13 = (_OWORD *)(v12 + 16 * v2);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1BCB4855C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];

  v8 = sub_1BCB63FBC();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v21 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1BCB63FD4();
  v12 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(a4 + 72);
  v15 = swift_allocObject();
  swift_weakInit();
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v15;
  v16[3] = a2;
  v16[4] = a3;
  v16[5] = a1;
  aBlock[4] = sub_1BCB1869C;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BCB1AB00;
  aBlock[3] = &block_descriptor_46;
  v17 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  sub_1BCB63FC8();
  v22 = MEMORY[0x1E0DEE9D8];
  sub_1BCAF7D24((unint64_t *)&qword_1EDA13D20, v9, MEMORY[0x1E0DEF510]);
  sub_1BCAFC448(0, &qword_1EDA13D28, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BCB48F80((unint64_t *)&qword_1EDA13D30, &qword_1EDA13D28, v9);
  sub_1BCB646C4();
  MEMORY[0x1BCCFCCEC](0, v14, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v20);
  swift_release();
  return swift_release();
}

uint64_t sub_1BCB487A8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BCB487D0()
{
  uint64_t *v0;

  return sub_1BCB4509C(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t dispatch thunk of MedicationDetailObserving.addObserver(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of MedicationDetailObserving.removeObserver(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t type metadata accessor for MedicationDetailProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for MedicationDetailProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MedicationDetailProvider.addObserver(_:for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of MedicationDetailProvider.removeObserver(_:for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t type metadata accessor for TestMedicationDetailProvider()
{
  return objc_opt_self();
}

void sub_1BCB48868()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF488328)
  {
    sub_1BCB10E30();
    sub_1BCAFC2E0(255, (unint64_t *)&unk_1EDA13D78);
    sub_1BCAF7D24(&qword_1EF4879C8, (uint64_t (*)(uint64_t))sub_1BCB10E30, MEMORY[0x1E0C95FB8]);
    sub_1BCB48944((unint64_t *)&unk_1EDA13D68, (unint64_t *)&unk_1EDA13D78, 0x1E0C80610, MEMORY[0x1E0DEF7F8]);
    v0 = sub_1BCB63E3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF488328);
  }
}

uint64_t sub_1BCB48944(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_1BCAFC2E0(255, a2);
    result = MEMORY[0x1BCCFD874](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1BCB48984()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF488330)
  {
    sub_1BCB48868();
    sub_1BCB066B8(255, &qword_1EDA14468, (unint64_t *)&qword_1EDA144A8, 0x1E0D2C4D8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BCAF7D24(&qword_1EF488338, (uint64_t (*)(uint64_t))sub_1BCB48868, MEMORY[0x1E0C95CB8]);
    v0 = sub_1BCB63E30();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF488330);
  }
}

uint64_t sub_1BCB48A38(uint64_t a1)
{
  uint64_t v2;

  sub_1BCAFC448(0, &qword_1EDA13D60, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF868], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BCB48A90()
{
  uint64_t *v0;

  return sub_1BCB43EC0(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t objectdestroy_6Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BCB48ACC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t *v5;

  return sub_1BCB4442C(a1, a2, a3, a4, a5, v5[2], v5[3], v5[4], v5[5]);
}

uint64_t sub_1BCB48AF4()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void sub_1BCB48B30()
{
  uint64_t v0;

  sub_1BCB446FC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40), *(void **)(v0 + 48));
}

void sub_1BCB48B40()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF488348)
  {
    v0 = sub_1BCB64790();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF488348);
  }
}

uint64_t sub_1BCB48B9C()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BCB48BD0()
{
  uint64_t v0;

  return sub_1BCB43B80(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1BCB48BDC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1BCB48C08(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = (id)sub_1BCB6410C();
  objc_msgSend(a1, sel_medicationDetailDidUpdate_for_, v3, v4);

}

_QWORD *sub_1BCB48C64(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;

  v2 = v1;
  v18 = a1;
  v3 = sub_1BCB64574();
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1BCB6455C();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v6);
  v8 = sub_1BCB63FD4();
  MEMORY[0x1E0C80A78](v8);
  v9 = MEMORY[0x1E0DEE9E0];
  v1[4] = 0;
  v1[5] = v9;
  v10 = MEMORY[0x1E0DEE9E8];
  v1[6] = v9;
  v1[7] = v10;
  sub_1BCB48F20();
  v11 = swift_allocObject();
  *(_DWORD *)(v11 + 16) = 0;
  v1[8] = v11;
  sub_1BCAFC2E0(0, (unint64_t *)&unk_1EDA13D78);
  sub_1BCB63FC8();
  v19 = MEMORY[0x1E0DEE9D8];
  sub_1BCAF7D24(&qword_1EDA13D58, v7, MEMORY[0x1E0DEF828]);
  sub_1BCAFC448(0, &qword_1EDA13D38, v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BCB48F80(&qword_1EDA13D40, &qword_1EDA13D38, v7);
  sub_1BCB646C4();
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v5, *MEMORY[0x1E0DEF8D0], v17);
  v1[9] = sub_1BCB64598();
  v12 = v18;
  v1[2] = v18;
  sub_1BCB63DB8();
  v13 = v12;
  v1[3] = sub_1BCB63DAC();
  v19 = sub_1BCB451A4();
  sub_1BCB48FD0();
  sub_1BCAF7D24(&qword_1EDA13CF8, (uint64_t (*)(uint64_t))sub_1BCB48FD0, MEMORY[0x1E0C95D90]);
  swift_retain();
  v14 = sub_1BCB63F98();
  swift_release();
  swift_release();
  v2[4] = v14;
  swift_release();
  return v2;
}

void sub_1BCB48F20()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EDA13DA0)
  {
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_1BCB647FC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EDA13DA0);
  }
}

uint64_t sub_1BCB48F80(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1BCAFC448(255, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0DEAF38], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BCB48FC8(uint64_t *a1)
{
  uint64_t v1;

  return sub_1BCB45668(a1, v1);
}

void sub_1BCB48FD0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EDA13D00)
  {
    sub_1BCB066B8(255, &qword_1EDA14468, (unint64_t *)&qword_1EDA144A8, 0x1E0D2C4D8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = sub_1BCB63E48();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EDA13D00);
  }
}

uint64_t sub_1BCB49054()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BCB49080()
{
  uint64_t v0;

  return sub_1BCB45980(*(void **)(v0 + 16));
}

void sub_1BCB49088(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_1BCAFC2E0(255, a3);
    sub_1BCB48944(a5, a3, a4, MEMORY[0x1E0DEFCF8]);
    v9 = sub_1BCB64790();
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t MedicationDose.__allocating_init(_:medicationDetailProvider:medication:)(char **a1, uint64_t a2, void *a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  MedicationDose.init(_:medicationDetailProvider:medication:)(a1, a2, a3);
  return v6;
}

uint64_t MedicationDose.medication.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1BCB63F50();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1BCB4921C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1BCB63F50();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1BCB49298(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  v2 = v1;
  swift_retain();
  return sub_1BCB63F5C();
}

uint64_t MedicationDose.$medication.getter()
{
  swift_beginAccess();
  sub_1BCB4A620(0, (unint64_t *)&unk_1EDA13D10, MEMORY[0x1E0C96198]);
  sub_1BCB63F38();
  return swift_endAccess();
}

uint64_t sub_1BCB49378()
{
  swift_beginAccess();
  sub_1BCB4A620(0, (unint64_t *)&unk_1EDA13D10, MEMORY[0x1E0C96198]);
  sub_1BCB63F38();
  return swift_endAccess();
}

uint64_t sub_1BCB493E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t, uint64_t);
  uint64_t v12;

  sub_1BCB4A620(0, &qword_1EF488368, MEMORY[0x1E0C96180]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v12 - v8;
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v10((char *)&v12 - v8, a1, v3);
  v10(v7, (uint64_t)v9, v3);
  swift_beginAccess();
  sub_1BCB4A620(0, (unint64_t *)&unk_1EDA13D10, MEMORY[0x1E0C96198]);
  sub_1BCB63F44();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
}

uint64_t MedicationDose.init(_:medicationDetailProvider:medication:)(char **a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  char *v6;
  char *v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v15;

  v6 = *a1;
  v7 = a1[1];
  v8 = *((_BYTE *)a1 + 16);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationDose_medicationDetailProvider) = 0;
  *(_QWORD *)(v3 + 16) = v6;
  *(_QWORD *)(v3 + 24) = v7;
  *(_BYTE *)(v3 + 32) = v8;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationDose_medicationDetailProvider) = a2;
  sub_1BCB4A1E4(v6, v7, v8);
  swift_retain();
  swift_release();
  swift_beginAccess();
  v15 = a3;
  sub_1BCAFC2E0(0, (unint64_t *)&qword_1EDA144A8);
  v9 = a3;
  sub_1BCB63F2C();
  swift_endAccess();
  if (a2)
  {
    if ((v8 & 1) != 0)
    {
      v11 = *(_QWORD *)&v6[OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_medicationIdentifier];
      v10 = *(_QWORD *)&v6[OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_medicationIdentifier + 8];
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      sub_1BCB4A1E4(v6, v7, 0);
      swift_retain();
      swift_retain();
      v12 = objc_msgSend(v6, sel_medicationIdentifier, v15);
      v11 = sub_1BCB6413C();
      v10 = v13;

      sub_1BCB4A210(v6, v7, 0);
    }
    sub_1BCB4A210(v6, v7, v8);
    sub_1BCB1819C(v3, v11, v10, a2);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release_n();

  }
  else
  {

    sub_1BCB4A210(v6, v7, v8);
  }
  return v3;
}

uint64_t MedicationDose.medicationDetailDidUpdate(_:for:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  char v14;
  uint64_t result;
  id v16;

  v7 = *(char **)(v3 + 16);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0)
  {
    v9 = *(_QWORD *)&v7[OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_medicationIdentifier];
    v8 = *(_QWORD *)&v7[OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_medicationIdentifier + 8];
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *(void **)(v3 + 24);
    v11 = objc_msgSend(v7, sel_medicationIdentifier);
    v9 = sub_1BCB6413C();
    v8 = v12;

    sub_1BCB4A210(v7, v10, 0);
    sub_1BCB4A210(v7, v10, 0);
  }
  if (v9 == a2 && v8 == a3)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v14 = sub_1BCB649F4();
  result = swift_bridgeObjectRelease();
  if ((v14 & 1) != 0)
  {
LABEL_11:
    swift_getKeyPath();
    swift_getKeyPath();
    v16 = a1;
    swift_retain();
    return sub_1BCB63F5C();
  }
  return result;
}

unint64_t MedicationDose.description.getter()
{
  uint64_t v0;
  id v1;
  id v3;

  sub_1BCB6479C();
  swift_bridgeObjectRelease();
  v3 = *(id *)(v0 + 16);
  sub_1BCB4A1E4(v3, *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
  sub_1BCB64190();
  sub_1BCB641F0();
  swift_bridgeObjectRelease();
  sub_1BCB641F0();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1BCB63F50();
  swift_release();
  swift_release();
  v1 = objc_msgSend(v3, sel_description);
  sub_1BCB6413C();

  sub_1BCB641F0();
  swift_bridgeObjectRelease();
  return 0xD000000000000014;
}

void *MedicationDose.medicationDoseEvent.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    v1 = *(void **)(v0 + 24);
    if (!v1)
      return v1;
  }
  else
  {
    v1 = *(void **)(v0 + 16);
  }
  v2 = v1;
  return v1;
}

uint64_t MedicationDose.scheduleItem.getter()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 32) == 1)
    return swift_retain();
  else
    return 0;
}

uint64_t MedicationDose.scheduleIdentifier.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;

  v1 = *(_QWORD **)(v0 + 16);
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    v2 = v1[2];
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = *(void **)(v0 + 24);
    v4 = objc_msgSend(v1, sel_scheduleItemIdentifier);
    if (v4)
    {
      v5 = v4;
      v2 = sub_1BCB6413C();

      sub_1BCB4A210(v1, v3, 0);
    }
    else
    {
      sub_1BCB4A210(v1, v3, 0);
      return 0;
    }
  }
  return v2;
}

void MedicationDose.date.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char *v3;
  char *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = *(char **)(v1 + 16);
  if ((*(_BYTE *)(v1 + 32) & 1) != 0)
  {
    v4 = &v3[OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_date];
    v5 = sub_1BCB63B3C();
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, v4, v5);
  }
  else
  {
    v6 = *(void **)(v1 + 24);
    v7 = objc_msgSend(v3, sel_startDate);
    sub_1BCB63B18();

    sub_1BCB4A210(v3, v6, 0);
  }
}

uint64_t MedicationDose.status.getter()
{
  uint64_t v0;
  void *v1;

  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    v1 = *(void **)(v0 + 24);
    if (!v1)
      return 1;
  }
  else
  {
    v1 = *(void **)(v0 + 16);
  }
  return (uint64_t)objc_msgSend(v1, sel_status);
}

uint64_t MedicationDose.doseAmount.getter()
{
  uint64_t v0;
  char *v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;
  id v11;
  void *v12;
  uint64_t v13;

  v1 = *(char **)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    if (v2)
    {
      sub_1BCB4A1E4(*(void **)(v0 + 16), *(void **)(v0 + 24), 1);
      swift_retain();
      v3 = v2;
      v4 = objc_msgSend(v3, sel_doseQuantity);
      if (v4)
      {
        v5 = v4;
        objc_msgSend(v4, sel_doubleValue);
        v7 = v6;

        swift_release();
        v8 = v1;
        v9 = v2;
        v10 = 1;
LABEL_7:
        sub_1BCB4A210(v8, v9, v10);
        return v7;
      }
      swift_release();

      sub_1BCB4A210(v1, v2, 1);
      return 0;
    }
    else
    {
      return *(_QWORD *)&v1[OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_doseAmount];
    }
  }
  else
  {
    v11 = objc_msgSend(v1, sel_doseQuantity);
    if (v11)
    {
      v12 = v11;
      objc_msgSend(v11, sel_doubleValue);
      v7 = v13;

      v8 = v1;
      v9 = v2;
      v10 = 0;
      goto LABEL_7;
    }
    sub_1BCB4A210(v1, v2, 0);
    return 0;
  }
}

uint64_t MedicationDose.medicationIdentifier.getter()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v1 = *(char **)(v0 + 16);
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    v2 = *(_QWORD *)&v1[OBJC_IVAR____TtC27HealthMedicationsExperience12ScheduleItem_medicationIdentifier];
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = *(void **)(v0 + 24);
    v4 = objc_msgSend(v1, sel_medicationIdentifier);
    v2 = sub_1BCB6413C();

    sub_1BCB4A210(v1, v3, 0);
    sub_1BCB4A210(v1, v3, 0);
  }
  return v2;
}

uint64_t MedicationDose.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1BCB4A210(*(void **)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
  v1 = v0 + OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationDose__medication;
  sub_1BCB4A620(0, (unint64_t *)&unk_1EDA13D10, MEMORY[0x1E0C96198]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return v0;
}

uint64_t MedicationDose.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1BCB4A210(*(void **)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
  v1 = v0 + OBJC_IVAR____TtC27HealthMedicationsExperience14MedicationDose__medication;
  sub_1BCB4A620(0, (unint64_t *)&unk_1EDA13D10, MEMORY[0x1E0C96198]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return swift_deallocClassInstance();
}

unint64_t sub_1BCB49EDC()
{
  return MedicationDose.description.getter();
}

uint64_t sub_1BCB49EFC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1BCB63E78();
  *a1 = result;
  return result;
}

uint64_t sub_1BCB49F24(uint64_t *a1, uint64_t *a2)
{
  return _s27HealthMedicationsExperience14MedicationDoseC2eeoiySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t _s27HealthMedicationsExperience18MedicationDoseTypeO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  char v4;
  void *v5;
  void *v6;
  char v7;
  id v8;
  id v9;
  id v10;
  id v11;
  char v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char v16;
  char v17;

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(void **)a2;
  v6 = *(void **)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  if ((v4 & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0)
    {
      sub_1BCAFC2E0(0, (unint64_t *)&qword_1EDA139E0);
      sub_1BCB4A1E4(v5, v6, 0);
      sub_1BCB4A1E4(v2, v3, 0);
      v17 = sub_1BCB645F8();
      sub_1BCB4A210(v2, v3, 0);
      sub_1BCB4A210(v5, v6, 0);
      return v17 & 1;
    }
    goto LABEL_9;
  }
  if ((*(_BYTE *)(a2 + 16) & 1) == 0)
  {
LABEL_9:
    sub_1BCB4A1E4(*(void **)a2, *(void **)(a2 + 8), v7);
    sub_1BCB4A1E4(v2, v3, v4);
    sub_1BCB4A210(v2, v3, v4);
    v14 = v5;
    v15 = v6;
    v16 = v7;
LABEL_12:
    sub_1BCB4A210(v14, v15, v16);
    return 0;
  }
  sub_1BCB4A1E4(*(void **)a2, *(void **)(a2 + 8), 1);
  sub_1BCB4A1E4(v2, v3, 1);
  v8 = v6;
  swift_retain();
  swift_retain();
  v9 = v3;
  if ((_s27HealthMedicationsExperience12ScheduleItemC2eeoiySbAC_ACtFZ_0((uint64_t)v2, (uint64_t)v5) & 1) == 0)
  {
    swift_release();
    swift_release();

    sub_1BCB4A210(v2, v3, 1);
    v14 = v5;
    v15 = v6;
    v16 = 1;
    goto LABEL_12;
  }
  if (v3)
  {
    if (v6)
    {
      sub_1BCAFC2E0(0, &qword_1EDA142A0);
      v10 = v9;
      v11 = v8;
      v12 = sub_1BCB645F8();
      swift_release();
      swift_release();

      v13 = 1;
      sub_1BCB4A210(v2, v3, 1);
      sub_1BCB4A210(v5, v6, 1);

      if ((v12 & 1) != 0)
        return v13;
      return 0;
    }
    v8 = v9;
    swift_release();
    swift_release();
    sub_1BCB4A210(v2, v3, 1);
    sub_1BCB4A210(v5, 0, 1);

  }
  else
  {
    swift_release();
    swift_release();
    v13 = 1;
    sub_1BCB4A210(v2, 0, 1);
    sub_1BCB4A210(v5, v6, 1);
    if (!v6)
      return v13;
  }

  return 0;
}

id sub_1BCB4A1E4(void *a1, void *a2, char a3)
{
  id v3;

  if ((a3 & 1) == 0)
    return a1;
  v3 = a2;
  return (id)swift_retain();
}

void sub_1BCB4A210(void *a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
  {
    swift_release();
    a1 = a2;
  }

}

uint64_t _s27HealthMedicationsExperience14MedicationDoseC2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  void *v4;
  void *v5;
  char v6;
  __int128 v8;
  char v9;
  __int128 v10;
  char v11;

  v2 = *(_BYTE *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 16);
  v11 = v2;
  v3 = *(_BYTE *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 16);
  v9 = v3;
  if ((_s27HealthMedicationsExperience18MedicationDoseTypeO2eeoiySbAC_ACtFZ_0((uint64_t)&v10, (uint64_t)&v8) & 1) != 0)
  {
    sub_1BCAFC2E0(0, (unint64_t *)&qword_1EDA139E0);
    swift_getKeyPath();
    swift_getKeyPath();
    sub_1BCB63F50();
    swift_release();
    swift_release();
    v4 = (void *)v10;
    swift_getKeyPath();
    swift_getKeyPath();
    sub_1BCB63F50();
    swift_release();
    swift_release();
    v5 = (void *)v10;
    v6 = sub_1BCB645F8();

  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

void destroy for MedicationDoseType(uint64_t a1)
{
  sub_1BCB4A210(*(void **)a1, *(void **)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s27HealthMedicationsExperience18MedicationDoseTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  char v5;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1BCB4A1E4(*(void **)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for MedicationDoseType(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1BCB4A1E4(*(void **)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1BCB4A210(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for MedicationDoseType(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  void *v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(void **)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1BCB4A210(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicationDoseType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicationDoseType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1BCB4A514(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1BCB4A51C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for MedicationDoseType()
{
  return &type metadata for MedicationDoseType;
}

uint64_t sub_1BCB4A538()
{
  return type metadata accessor for MedicationDose();
}

uint64_t type metadata accessor for MedicationDose()
{
  uint64_t result;

  result = qword_1EDA13C98;
  if (!qword_1EDA13C98)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1BCB4A57C()
{
  unint64_t v0;

  sub_1BCB4A620(319, (unint64_t *)&unk_1EDA13D10, MEMORY[0x1E0C96198]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for MedicationDose()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MedicationDose.__allocating_init(_:medicationDetailProvider:medication:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

void sub_1BCB4A620(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BCAFC2E0(255, (unint64_t *)&qword_1EDA144A8);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t static MedicationOntologyContentProviderError.== infix(_:_:)()
{
  return 1;
}

uint64_t MedicationOntologyContentProviderError.hash(into:)()
{
  return sub_1BCB64A9C();
}

uint64_t MedicationOntologyContentProviderError.hashValue.getter()
{
  sub_1BCB64A90();
  sub_1BCB64A9C();
  return sub_1BCB64AC0();
}

uint64_t sub_1BCB4A6F4()
{
  sub_1BCB64A90();
  sub_1BCB64A9C();
  return sub_1BCB64AC0();
}

uint64_t sub_1BCB4A734()
{
  return sub_1BCB64A9C();
}

uint64_t sub_1BCB4A758()
{
  sub_1BCB64A90();
  sub_1BCB64A9C();
  return sub_1BCB64AC0();
}

id MedicationOntologyContentProvider.healthStore.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t MedicationOntologyContentProvider.__allocating_init(with:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t MedicationOntologyContentProvider.init(with:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t sub_1BCB4A7D8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v13;

  v2 = v1;
  sub_1BCB4A908();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = v2;
  sub_1BCB4A980();
  sub_1BCAF7D24(&qword_1EF488388, (uint64_t (*)(uint64_t))sub_1BCB4A980, MEMORY[0x1E0C96108]);
  v10 = a1;
  swift_retain();
  sub_1BCB63F14();
  sub_1BCAF7D24(&qword_1EF488390, (uint64_t (*)(uint64_t))sub_1BCB4A908, MEMORY[0x1E0C96148]);
  v11 = sub_1BCB63F68();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v11;
}

void sub_1BCB4A908()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF488370)
  {
    sub_1BCB4A980();
    sub_1BCAF7D24(&qword_1EF488388, (uint64_t (*)(uint64_t))sub_1BCB4A980, MEMORY[0x1E0C96108]);
    v0 = sub_1BCB63F20();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF488370);
  }
}

void sub_1BCB4A980()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF488378)
  {
    sub_1BCB4A9EC();
    sub_1BCB052CC();
    v0 = sub_1BCB63EF0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF488378);
  }
}

void sub_1BCB4A9EC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF488380)
  {
    sub_1BCAFC2E0(255, (unint64_t *)&qword_1EF487748);
    v0 = sub_1BCB64628();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF488380);
  }
}

uint64_t sub_1BCB4AA50@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  id v7;
  uint64_t result;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  sub_1BCB4A980();
  swift_allocObject();
  v7 = a1;
  swift_retain();
  result = sub_1BCB63EFC();
  *a3 = result;
  return result;
}

uint64_t sub_1BCB4AAE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1BCB4AA50(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void sub_1BCB4AAE8(void (*a1)(uint64_t *), uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  _QWORD *v37;
  id v38;
  void *v39;
  id v40;
  unsigned __int8 *v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  uint64_t aBlock;
  uint64_t v46;
  void (*v47)(uint64_t, void *, void *, uint64_t, void *);
  void *v48;
  void (*v49)(uint64_t, uint64_t, uint64_t, void *);
  _QWORD *v50;

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  swift_retain();
  v9 = objc_msgSend(a3, sel_firstOntologyCoding);
  if (!v9 || (v10 = v9, v11 = objc_msgSend(v9, sel_code), v10, !v11))
  {
LABEL_48:
    swift_release();
LABEL_49:
    aBlock = 0;
    LOBYTE(v46) = 0;
    a1(&aBlock);
    return;
  }
  v12 = sub_1BCB6413C();
  v14 = v13;

  v15 = HIBYTE(v14) & 0xF;
  v16 = v12 & 0xFFFFFFFFFFFFLL;
  if ((v14 & 0x2000000000000000) != 0)
    v17 = HIBYTE(v14) & 0xF;
  else
    v17 = v12 & 0xFFFFFFFFFFFFLL;
  if (!v17)
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
  if ((v14 & 0x1000000000000000) != 0)
  {
    v19 = (uint64_t)sub_1BCB4BB14(v12, v14, 10);
    LOBYTE(v12) = v44;
    goto LABEL_46;
  }
  if ((v14 & 0x2000000000000000) == 0)
  {
    if ((v12 & 0x1000000000000000) != 0)
      v18 = (unsigned __int8 *)((v14 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v18 = (unsigned __int8 *)sub_1BCB64808();
    v19 = (uint64_t)sub_1BCB4BC48(v18, v16, 10);
    LOBYTE(v12) = v20 & 1;
LABEL_46:
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      v30 = (void *)objc_opt_self();
      sub_1BCB4BEC4(0, (unint64_t *)&qword_1EDA14550);
      v31 = swift_allocObject();
      *(_OWORD *)(v31 + 16) = xmmword_1BCB66010;
      v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v19);
      v33 = objc_msgSend((id)objc_opt_self(), sel_identifierWithNumber_, v32);

      v34 = objc_msgSend(v30, sel_selectionForNodeWithIdentifier_, v33);
      *(_QWORD *)(v31 + 32) = v34;
      aBlock = v31;
      sub_1BCB642EC();
      sub_1BCAFC2E0(0, &qword_1EF4883A0);
      v35 = (void *)sub_1BCB642C8();
      swift_bridgeObjectRelease();
      v36 = objc_msgSend(v30, sel_andSelectionWithSubselections_, v35);

      v37 = (_QWORD *)swift_allocObject();
      v37[2] = sub_1BCB33328;
      v37[3] = v8;
      v37[4] = a4;
      v38 = objc_allocWithZone(MEMORY[0x1E0CB64B8]);
      v49 = sub_1BCB4BC24;
      v50 = v37;
      aBlock = MEMORY[0x1E0C809B0];
      v46 = 1107296256;
      v47 = sub_1BCB4B4B4;
      v48 = &block_descriptor_9;
      v39 = _Block_copy(&aBlock);
      swift_retain();
      v40 = objc_msgSend(v38, sel_initWithConceptSelection_resultsHandler_, v36, v39);
      _Block_release(v39);
      swift_release();
      objc_msgSend(*(id *)(a4 + 16), sel_executeQuery_, v40);

      return;
    }
    goto LABEL_48;
  }
  aBlock = v12;
  v46 = v14 & 0xFFFFFFFFFFFFFFLL;
  if (v12 == 43)
  {
    if (!v15)
      goto LABEL_60;
    if (v15 == 1 || (BYTE1(v12) - 48) > 9u)
      goto LABEL_33;
    v19 = (BYTE1(v12) - 48);
    if (v15 != 2)
    {
      if ((BYTE2(v12) - 48) > 9u)
        goto LABEL_33;
      v19 = 10 * (BYTE1(v12) - 48) + (BYTE2(v12) - 48);
      v21 = v15 - 3;
      if (v21)
      {
        v22 = (unsigned __int8 *)&aBlock + 3;
        while (1)
        {
          v23 = *v22 - 48;
          if (v23 > 9)
            goto LABEL_33;
          v24 = 10 * v19;
          if ((unsigned __int128)(v19 * (__int128)10) >> 64 != (10 * v19) >> 63)
            goto LABEL_33;
          v19 = v24 + v23;
          if (__OFADD__(v24, v23))
            goto LABEL_33;
          LOBYTE(v12) = 0;
          ++v22;
          if (!--v21)
            goto LABEL_46;
        }
      }
    }
LABEL_45:
    LOBYTE(v12) = 0;
    goto LABEL_46;
  }
  if (v12 != 45)
  {
    if (!v15 || (v12 - 48) > 9u)
      goto LABEL_33;
    v19 = (v12 - 48);
    if (v15 != 1)
    {
      if ((BYTE1(v12) - 48) > 9u)
        goto LABEL_33;
      v19 = 10 * (v12 - 48) + (BYTE1(v12) - 48);
      v25 = v15 - 2;
      if (v25)
      {
        v26 = (unsigned __int8 *)&aBlock + 2;
        while (1)
        {
          v27 = *v26 - 48;
          if (v27 > 9)
            goto LABEL_33;
          v28 = 10 * v19;
          if ((unsigned __int128)(v19 * (__int128)10) >> 64 != (10 * v19) >> 63)
            goto LABEL_33;
          v19 = v28 + v27;
          if (__OFADD__(v28, v27))
            goto LABEL_33;
          LOBYTE(v12) = 0;
          ++v26;
          if (!--v25)
            goto LABEL_46;
        }
      }
    }
    goto LABEL_45;
  }
  if (v15)
  {
    if (v15 != 1 && (BYTE1(v12) - 48) <= 9u)
    {
      if (v15 == 2)
      {
        LOBYTE(v12) = 0;
        v19 = -(uint64_t)(BYTE1(v12) - 48);
        goto LABEL_46;
      }
      if ((BYTE2(v12) - 48) <= 9u)
      {
        v19 = -10 * (BYTE1(v12) - 48) - (BYTE2(v12) - 48);
        v29 = v15 - 3;
        if (!v29)
          goto LABEL_45;
        v41 = (unsigned __int8 *)&aBlock + 3;
        while (1)
        {
          v42 = *v41 - 48;
          if (v42 > 9)
            break;
          v43 = 10 * v19;
          if ((unsigned __int128)(v19 * (__int128)10) >> 64 != (10 * v19) >> 63)
            break;
          v19 = v43 - v42;
          if (__OFSUB__(v43, v42))
            break;
          LOBYTE(v12) = 0;
          ++v41;
          if (!--v29)
            goto LABEL_46;
        }
      }
    }
LABEL_33:
    v19 = 0;
    LOBYTE(v12) = 1;
    goto LABEL_46;
  }
  __break(1u);
LABEL_60:
  __break(1u);
}

void sub_1BCB4B050(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(_QWORD, _QWORD), uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  id v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  _QWORD v29[3];
  void (*v30)(_QWORD, _QWORD);
  uint64_t v31;
  uint64_t v32;

  v13 = sub_1BCB63DDC();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    v17 = a4;
    sub_1BCB63DC4();
    v18 = a4;
    v19 = a4;
    v20 = sub_1BCB63DD0();
    v21 = sub_1BCB644FC();
    if (os_log_type_enabled(v20, v21))
    {
      v30 = a5;
      v22 = (uint8_t *)swift_slowAlloc();
      v23 = swift_slowAlloc();
      v29[2] = a6;
      v24 = v23;
      v31 = (uint64_t)a4;
      v32 = v23;
      *(_DWORD *)v22 = 136446210;
      v29[1] = v22 + 4;
      v25 = a4;
      sub_1BCB052CC();
      v26 = sub_1BCB64190();
      v31 = sub_1BCB010C8(v26, v27, &v32);
      sub_1BCB64640();
      a5 = v30;
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1BCAF3000, v20, v21, "Failed to query for hk concept using user domain concept: %{public}s", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCFD928](v24, -1, -1);
      MEMORY[0x1BCCFD928](v22, -1, -1);
    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    v28 = a4;
    a5(a4, 1);

  }
  else
  {
    a5(a2, 0);
    objc_msgSend(*(id *)(a7 + 16), sel_stopQuery_, a1);
  }
}

uint64_t MedicationOntologyContentProvider.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t MedicationOntologyContentProvider.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

unint64_t sub_1BCB4B300()
{
  unint64_t result;

  result = qword_1EF488398;
  if (!qword_1EF488398)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for MedicationOntologyContentProviderError, &type metadata for MedicationOntologyContentProviderError);
    atomic_store(result, (unint64_t *)&qword_1EF488398);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MedicationVisualizationConfigVersion(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for MedicationOntologyContentProviderError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BCB4B3D8 + 4 * byte_1BCB68230[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BCB4B3F8 + 4 * byte_1BCB68235[v4]))();
}

_BYTE *sub_1BCB4B3D8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BCB4B3F8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BCB4B400(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BCB4B408(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BCB4B410(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BCB4B418(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1BCB4B424()
{
  return 0;
}

ValueMetadata *type metadata accessor for MedicationOntologyContentProviderError()
{
  return &type metadata for MedicationOntologyContentProviderError;
}

uint64_t type metadata accessor for MedicationOntologyContentProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for MedicationOntologyContentProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MedicationOntologyContentProvider.__allocating_init(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of MedicationOntologyContentProvider.hkConceptPublisher(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t objectdestroyTm_2()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void sub_1BCB4B4AC(void (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t v2;

  sub_1BCB4AAE8(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

void sub_1BCB4B4B4(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  void (*v9)(id, void *, uint64_t, void *);
  id v10;
  id v11;
  id v12;

  v9 = *(void (**)(id, void *, uint64_t, void *))(a1 + 32);
  swift_retain();
  v12 = a2;
  v10 = a3;
  v11 = a5;
  v9(v12, a3, a4, a5);
  swift_release();

}

_QWORD *sub_1BCB4B54C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1BCB4BEC4(0, &qword_1EF487778);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1BCB4B5BC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_1BCB64238();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x1BCCFC974](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

uint64_t sub_1BCB4B634()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_1BCB64268();
  v4 = sub_1BCB4B6B0(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1BCB4B6B0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_1BCB4B7F4(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_1BCB4B54C(v9, 0);
      v12 = sub_1BCB4B8E0((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    v13 = MEMORY[0x1BCCFC920](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x1BCCFC920);
LABEL_9:
      sub_1BCB64808();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1BCCFC920]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_1BCB4B7F4(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_1BCB4B5BC(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_1BCB4B5BC(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return sub_1BCB64220();
  }
  __break(1u);
  return result;
}

unint64_t sub_1BCB4B8E0(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_1BCB4B5BC(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = sub_1BCB6422C();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = sub_1BCB64808();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_1BCB4B5BC(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = sub_1BCB64208();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1BCB4BAF0()
{
  swift_release();
  return swift_deallocObject();
}

unsigned __int8 *sub_1BCB4BB14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = sub_1BCB6425C();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = sub_1BCB4B634();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)sub_1BCB64808();
  }
LABEL_7:
  v11 = sub_1BCB4BC48(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1BCB4BBF8()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_1BCB4BC24(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;

  sub_1BCB4B050(a1, a2, a3, a4, *(void (**)(_QWORD, _QWORD))(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32));
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

unsigned __int8 *sub_1BCB4BC48(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

void sub_1BCB4BEC4(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_1BCB649DC();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t localized(_:locale:source:value:comment:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  uint64_t v10;

  result = sub_1BCB63A34();
  if (*(_QWORD *)(a9 + 16))
  {
    v10 = sub_1BCB64160();
    swift_bridgeObjectRelease();
    return v10;
  }
  return result;
}

uint64_t LocalizationSource.stringsTable(forLanguageCode:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id *v3;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;

  v7 = *v3;
  v8 = objc_msgSend(*v3, sel_localizations);
  if (!v8)
  {
    sub_1BCB642D4();
    v8 = (id)sub_1BCB642C8();
    swift_bridgeObjectRelease();
  }
  v9 = (void *)objc_opt_self();
  sub_1BCB4C364();
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1BCB66020;
  *(_QWORD *)(v10 + 32) = a1;
  *(_QWORD *)(v10 + 40) = a2;
  swift_bridgeObjectRetain();
  v11 = (void *)sub_1BCB642C8();
  swift_bridgeObjectRelease();
  v12 = objc_msgSend(v9, sel_preferredLocalizationsFromArray_forPreferences_, v8, v11);

  v13 = sub_1BCB642D4();
  if (*(_QWORD *)(v13 + 16))
  {
    v14 = *(_QWORD *)(v13 + 40);
    swift_bridgeObjectRetain();
  }
  else
  {
    v14 = 0;
  }
  swift_bridgeObjectRelease();
  v15 = (void *)sub_1BCB6410C();
  v16 = (void *)sub_1BCB6410C();
  if (v14)
  {
    v17 = (void *)sub_1BCB6410C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v17 = 0;
  }
  v18 = objc_msgSend(v7, sel_URLForResource_withExtension_subdirectory_localization_, v15, v16, 0, v17);

  if (v18)
  {
    sub_1BCB63AB8();

    v19 = sub_1BCB63AC4();
    v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
    v21 = a3;
    v22 = 0;
  }
  else
  {
    v19 = sub_1BCB63AC4();
    v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
    v21 = a3;
    v22 = 1;
  }
  return v20(v21, v22, 1, v19);
}

id LocalizationSource.bundle.getter()
{
  id *v0;

  return *v0;
}

uint64_t LocalizationSource.table.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

HealthMedicationsExperience::LocalizationSource __swiftcall LocalizationSource.init(bundle:table:)(NSBundle bundle, Swift::String table)
{
  uint64_t v2;
  HealthMedicationsExperience::LocalizationSource result;

  *(NSBundle *)v2 = bundle;
  *(Swift::String *)(v2 + 8) = table;
  result.table = table;
  result.bundle = bundle;
  return result;
}

id sub_1BCB4C20C()
{
  if (qword_1EDA13DB8 != -1)
    swift_once();
  qword_1EDA14130 = qword_1EDA13DD0;
  *(_QWORD *)algn_1EDA14138 = 0xD000000000000027;
  qword_1EDA14140 = 0x80000001BCB6C4E0;
  return (id)qword_1EDA13DD0;
}

uint64_t static LocalizationSource.healthMedicationsExperience.getter@<X0>(_QWORD *a1@<X8>)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  if (qword_1EDA14148 != -1)
    swift_once();
  v2 = (void *)qword_1EDA14130;
  v3 = *(_QWORD *)algn_1EDA14138;
  v4 = qword_1EDA14140;
  *a1 = qword_1EDA14130;
  a1[1] = v3;
  a1[2] = v4;
  v5 = v2;
  return swift_bridgeObjectRetain();
}

uint64_t localized(_:locale:source:value:comment:arguments:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  uint64_t v10;

  result = sub_1BCB63A34();
  if (*(_QWORD *)(a9 + 16))
  {
    v10 = sub_1BCB64160();
    swift_bridgeObjectRelease();
    return v10;
  }
  return result;
}

void sub_1BCB4C364()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EDA14280)
  {
    v0 = sub_1BCB649DC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EDA14280);
  }
}

uint64_t String.localized(source:locale:value:comment:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1BCB63A34();
  if (*(_QWORD *)(a7 + 16))
  {
    v9 = sub_1BCB64160();
    swift_bridgeObjectRelease();
    return v9;
  }
  return result;
}

uint64_t LocalizationSource.localized(_:locale:value:comment:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;

  result = sub_1BCB63A34();
  if (*(_QWORD *)(a8 + 16))
  {
    v10 = sub_1BCB64160();
    swift_bridgeObjectRelease();
    return v10;
  }
  return result;
}

uint64_t destroy for LocalizationSource(id *a1)
{

  return swift_bridgeObjectRelease();
}

_QWORD *_s27HealthMedicationsExperience18LocalizationSourceVwCP_0(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  a1[2] = *(_QWORD *)(a2 + 16);
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LocalizationSource(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for LocalizationSource(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v5 = a2[2];
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for LocalizationSource()
{
  return &type metadata for LocalizationSource;
}

uint64_t MedmojiColor.accessibilityLabel.getter()
{
  id v0;
  uint64_t v1;

  if (qword_1EDA14148 != -1)
    swift_once();
  v0 = (id)qword_1EDA14130;
  swift_bridgeObjectRetain();
  v1 = sub_1BCB63A34();
  swift_bridgeObjectRelease();

  return v1;
}

id MedmojiColor.color.getter()
{
  id *v0;

  return *v0;
}

uint64_t MedmojiColor.localizationKey.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

id sub_1BCB4C6F0()
{
  uint64_t v0;
  id result;

  sub_1BCB4BEC4(0, &qword_1EDA139F0);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1BCB683A0;
  *(_QWORD *)(v0 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 0.133333333, 0.443137255, 0.611764706, 1.0);
  *(_QWORD *)(v0 + 40) = 0xD000000000000022;
  *(_QWORD *)(v0 + 48) = 0x80000001BCB6C6B0;
  *(_QWORD *)(v0 + 56) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 0.368627451, 0.364705882, 0.376470588, 1.0);
  *(_QWORD *)(v0 + 64) = 0xD00000000000001DLL;
  *(_QWORD *)(v0 + 72) = 0x80000001BCB6C6E0;
  *(_QWORD *)(v0 + 80) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 1.0, 0.8, 0.0, 1.0);
  *(_QWORD *)(v0 + 88) = 0xD00000000000001FLL;
  *(_QWORD *)(v0 + 96) = 0x80000001BCB6C700;
  *(_QWORD *)(v0 + 104) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 1.0, 0.509803922, 0.384313725, 1.0);
  *(_QWORD *)(v0 + 112) = 0xD00000000000001ELL;
  *(_QWORD *)(v0 + 120) = 0x80000001BCB6C720;
  *(_QWORD *)(v0 + 128) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 0.670588235, 0.749019608, 0.345098039, 1.0);
  *(_QWORD *)(v0 + 136) = 0xD000000000000023;
  *(_QWORD *)(v0 + 144) = 0x80000001BCB6C740;
  *(_QWORD *)(v0 + 152) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 0.0, 0.847058824, 0.556862745, 1.0);
  *(_QWORD *)(v0 + 160) = 0xD000000000000023;
  *(_QWORD *)(v0 + 168) = 0x80000001BCB6C770;
  *(_QWORD *)(v0 + 176) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 0.0, 0.670588235, 0.905882353, 1.0);
  *(_QWORD *)(v0 + 184) = 0xD000000000000023;
  *(_QWORD *)(v0 + 192) = 0x80000001BCB6C7A0;
  *(_QWORD *)(v0 + 200) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 0.639215686, 0.419607843, 0.905882353, 1.0);
  *(_QWORD *)(v0 + 208) = 0xD000000000000025;
  *(_QWORD *)(v0 + 216) = 0x80000001BCB6C7D0;
  *(_QWORD *)(v0 + 224) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 0.650980392, 0.533333333, 0.705882353, 1.0);
  *(_QWORD *)(v0 + 232) = 0xD000000000000024;
  *(_QWORD *)(v0 + 240) = 0x80000001BCB6C800;
  *(_QWORD *)(v0 + 248) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 1.0, 0.474509804, 0.670588235, 1.0);
  *(_QWORD *)(v0 + 256) = 0xD00000000000001DLL;
  *(_QWORD *)(v0 + 264) = 0x80000001BCB6C830;
  *(_QWORD *)(v0 + 272) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 0.839215686, 0.235294118, 0.2, 1.0);
  *(_QWORD *)(v0 + 280) = 0xD00000000000001CLL;
  *(_QWORD *)(v0 + 288) = 0x80000001BCB6C850;
  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 0.792156863, 0.580392157, 0.317647059, 1.0);
  *(_QWORD *)(v0 + 296) = result;
  *(_QWORD *)(v0 + 304) = 0xD00000000000001FLL;
  *(_QWORD *)(v0 + 312) = 0x80000001BCB6C870;
  off_1EDA138B0 = (_UNKNOWN *)v0;
  return result;
}

uint64_t static MedmojiColor.backgroundColors.getter()
{
  return sub_1BCB4CF54(&qword_1EDA138C0);
}

uint64_t static MedmojiColor.backgroundColors.setter(uint64_t a1)
{
  return sub_1BCB4CFC8(a1, &qword_1EDA138C0, &off_1EDA138B0);
}

uint64_t (*static MedmojiColor.backgroundColors.modify())()
{
  if (qword_1EDA138C0 != -1)
    swift_once();
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_1BCB4CB50()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id result;

  sub_1BCB4BEC4(0, &qword_1EDA139F0);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1BCB683A0;
  if (qword_1EDA139D8 != -1)
    swift_once();
  swift_beginAccess();
  v1 = (void *)qword_1EDA139C8;
  *(_QWORD *)(v0 + 32) = qword_1EDA139C8;
  *(_QWORD *)(v0 + 40) = 0xD00000000000001CLL;
  *(_QWORD *)(v0 + 48) = 0x80000001BCB6C510;
  v2 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  v3 = v1;
  *(_QWORD *)(v0 + 56) = objc_msgSend(v2, sel_initWithRed_green_blue_alpha_, 0.819607843, 0.819607843, 0.839215686, 1.0);
  *(_QWORD *)(v0 + 64) = 0xD00000000000001BLL;
  *(_QWORD *)(v0 + 72) = 0x80000001BCB6C530;
  *(_QWORD *)(v0 + 80) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 0.976470588, 0.91372549, 0.717647059, 1.0);
  *(_QWORD *)(v0 + 88) = 0xD00000000000001CLL;
  *(_QWORD *)(v0 + 96) = 0x80000001BCB6C550;
  *(_QWORD *)(v0 + 104) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 0.964705882, 0.768627451, 0.705882353, 1.0);
  *(_QWORD *)(v0 + 112) = 0xD00000000000001CLL;
  *(_QWORD *)(v0 + 120) = 0x80000001BCB6C570;
  *(_QWORD *)(v0 + 128) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 0.88627451, 0.941176471, 0.494117647, 1.0);
  *(_QWORD *)(v0 + 136) = 0xD00000000000001BLL;
  *(_QWORD *)(v0 + 144) = 0x80000001BCB6C590;
  *(_QWORD *)(v0 + 152) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 0.643137255, 0.890196078, 0.721568627, 1.0);
  *(_QWORD *)(v0 + 160) = 0xD000000000000021;
  *(_QWORD *)(v0 + 168) = 0x80000001BCB6C5B0;
  *(_QWORD *)(v0 + 176) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 0.588235294, 0.862745098, 1.0, 1.0);
  *(_QWORD *)(v0 + 184) = 0xD00000000000001FLL;
  *(_QWORD *)(v0 + 192) = 0x80000001BCB6C5E0;
  *(_QWORD *)(v0 + 200) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 0.529411765, 0.588235294, 1.0, 1.0);
  *(_QWORD *)(v0 + 208) = 0xD000000000000020;
  *(_QWORD *)(v0 + 216) = 0x80000001BCB6C600;
  *(_QWORD *)(v0 + 224) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 0.784313725, 0.662745098, 0.988235294, 1.0);
  *(_QWORD *)(v0 + 232) = 0xD00000000000001DLL;
  *(_QWORD *)(v0 + 240) = 0x80000001BCB6C630;
  *(_QWORD *)(v0 + 248) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 0.960784314, 0.701960784, 0.854901961, 1.0);
  *(_QWORD *)(v0 + 256) = 0xD00000000000001BLL;
  *(_QWORD *)(v0 + 264) = 0x80000001BCB6C650;
  *(_QWORD *)(v0 + 272) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 1.0, 0.345098039, 0.309803922, 1.0);
  *(_QWORD *)(v0 + 280) = 0xD00000000000001ALL;
  *(_QWORD *)(v0 + 288) = 0x80000001BCB6C670;
  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 1.0, 0.584313725, 0.0, 1.0);
  *(_QWORD *)(v0 + 296) = result;
  *(_QWORD *)(v0 + 304) = 0xD00000000000001DLL;
  *(_QWORD *)(v0 + 312) = 0x80000001BCB6C690;
  off_1EDA138A0 = (_UNKNOWN *)v0;
  return result;
}

uint64_t static MedmojiColor.fragmentColors.getter()
{
  return sub_1BCB4CF54(&qword_1EDA138A8);
}

uint64_t sub_1BCB4CF54(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static MedmojiColor.fragmentColors.setter(uint64_t a1)
{
  return sub_1BCB4CFC8(a1, &qword_1EDA138A8, &off_1EDA138A0);
}

uint64_t sub_1BCB4CFC8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*a2 != -1)
    swift_once();
  swift_beginAccess();
  *a3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static MedmojiColor.fragmentColors.modify())()
{
  if (qword_1EDA138A8 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t MedmojiColor.hash(into:)()
{
  id *v0;
  id v1;

  v1 = *v0;
  sub_1BCB64604();

  swift_bridgeObjectRetain();
  sub_1BCB641CC();
  return swift_bridgeObjectRelease();
}

uint64_t static MedmojiColor.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  sub_1BCB06068();
  if ((sub_1BCB645F8() & 1) == 0)
    return 0;
  if (v2 == v4 && v3 == v5)
    return 1;
  else
    return sub_1BCB649F4();
}

uint64_t MedmojiColor.hashValue.getter()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  sub_1BCB64A90();
  v2 = v1;
  sub_1BCB64604();

  swift_bridgeObjectRetain();
  sub_1BCB641CC();
  swift_bridgeObjectRelease();
  return sub_1BCB64AC0();
}

uint64_t sub_1BCB4D204()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  sub_1BCB64A90();
  v2 = v1;
  sub_1BCB64604();

  swift_bridgeObjectRetain();
  sub_1BCB641CC();
  swift_bridgeObjectRelease();
  return sub_1BCB64AC0();
}

uint64_t sub_1BCB4D27C()
{
  id *v0;
  id v1;

  v1 = *v0;
  sub_1BCB64604();

  swift_bridgeObjectRetain();
  sub_1BCB641CC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BCB4D2D8()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  sub_1BCB64A90();
  v2 = v1;
  sub_1BCB64604();

  swift_bridgeObjectRetain();
  sub_1BCB641CC();
  swift_bridgeObjectRelease();
  return sub_1BCB64AC0();
}

uint64_t sub_1BCB4D34C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  sub_1BCB06068();
  if ((sub_1BCB645F8() & 1) == 0)
    return 0;
  if (v2 == v4 && v3 == v5)
    return 1;
  else
    return sub_1BCB649F4();
}

id sub_1BCB4D3E4()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 0.0, 0.670588235, 0.905882353, 1.0);
  qword_1EF4883A8 = (uint64_t)result;
  return result;
}

id static UIColor.defaultMedmojiBlue.getter()
{
  return sub_1BCB4D52C(&qword_1EF487080, (id *)&qword_1EF4883A8);
}

void static UIColor.defaultMedmojiBlue.setter(void *a1)
{
  sub_1BCB4D59C(a1, &qword_1EF487080, (void **)&qword_1EF4883A8);
}

uint64_t (*static UIColor.defaultMedmojiBlue.modify())()
{
  if (qword_1EF487080 != -1)
    swift_once();
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_1BCB4D4D0()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 1.0, 1.0, 1.0, 1.0);
  qword_1EDA139C8 = (uint64_t)result;
  return result;
}

id static UIColor.medmojiFragmentWhite.getter()
{
  return sub_1BCB4D52C(&qword_1EDA139D8, (id *)&qword_1EDA139C8);
}

id sub_1BCB4D52C(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  swift_beginAccess();
  return *a2;
}

void static UIColor.medmojiFragmentWhite.setter(void *a1)
{
  sub_1BCB4D59C(a1, &qword_1EDA139D8, (void **)&qword_1EDA139C8);
}

void sub_1BCB4D59C(void *a1, _QWORD *a2, void **a3)
{
  void *v5;

  if (*a2 != -1)
    swift_once();
  swift_beginAccess();
  v5 = *a3;
  *a3 = a1;

}

uint64_t (*static UIColor.medmojiFragmentWhite.modify())()
{
  if (qword_1EDA139D8 != -1)
    swift_once();
  swift_beginAccess();
  return j_j__swift_endAccess;
}

double UIColor.luminance.getter()
{
  void *v0;
  id v1;
  double v2;
  double v3;

  v1 = objc_msgSend(v0, sel_CGColor);
  sub_1BCB4D6B8();
  v3 = v2;

  return v3;
}

void sub_1BCB4D6B8()
{
  CGColor *v0;
  CGColorSpace *v1;
  CGColorSpace *v2;
  CGColorRef CopyByMatchingToColorSpace;
  uint64_t v4;

  v1 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA00]);
  if (v1)
  {
    v2 = v1;
    CopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace(v1, kCGRenderingIntentDefault, v0, 0);

    if (CopyByMatchingToColorSpace)
    {
      v4 = sub_1BCB644CC();
      if (v4)
      {
        if (*(_QWORD *)(v4 + 16) == 4)
        {
          swift_bridgeObjectRelease();

        }
        else
        {

          swift_bridgeObjectRelease();
        }
      }
      else
      {

      }
    }
  }
  else
  {
    __break(1u);
  }
}

id UIColor.onWhite.getter()
{
  void *v0;
  id v1;
  CGColorSpace *v2;
  id v3;

  v1 = objc_msgSend(v0, sel_CGColor);
  v2 = sub_1BCB4D7FC();

  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v2);
  return v3;
}

CGColorSpace *sub_1BCB4D7FC()
{
  CGColor *v0;
  CGColorSpace *result;
  CGColorSpace *v2;
  CGColorRef CopyByMatchingToColorSpace;
  float64x2_t v4;
  double v5;
  CGColorRef v6;
  uint64_t v7;
  double v8;
  CGColorSpace *v9;
  double v10;
  float64x2_t v11;
  float64x2_t v12;
  double v13;
  uint64_t v14;

  result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
  if (!result)
  {
    __break(1u);
    goto LABEL_13;
  }
  v2 = result;
  CopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace(result, kCGRenderingIntentDefault, v0, 0);
  v4 = 0uLL;
  v5 = 0.0;
  if (CopyByMatchingToColorSpace)
  {
    v6 = CopyByMatchingToColorSpace;
    v7 = sub_1BCB644CC();
    if (v7)
    {
      if (*(_QWORD *)(v7 + 16) == 4)
      {
        v8 = *(double *)(v7 + 48);
        v10 = *(double *)(v7 + 56);
        v11 = *(float64x2_t *)(v7 + 32);
        swift_bridgeObjectRelease();

        v5 = v10;
        v4 = v11;
        goto LABEL_10;
      }

      swift_bridgeObjectRelease();
    }
    else
    {

    }
    v8 = 0.0;
    v4 = 0uLL;
    v5 = 0.0;
  }
  else
  {
    v8 = 0.0;
  }
LABEL_10:
  v12 = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0 - v5), 0), vmulq_n_f64(v4, v5));
  v13 = 1.0 - v5 + v5 * v8;
  v14 = 0x3FF0000000000000;
  result = CGColorCreate(v2, v12.f64);
  if (result)
  {
    v9 = result;

    return v9;
  }
LABEL_13:
  __break(1u);
  return result;
}

id UIColor.lightVariant.getter()
{
  void *v0;
  id v1;
  id v2;

  v1 = objc_msgSend((id)objc_opt_self(), sel_traitCollectionWithUserInterfaceStyle_, 1);
  v2 = objc_msgSend(v0, sel_resolvedColorWithTraitCollection_, v1);

  return v2;
}

double UIColor.rgbaComponents.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  double result;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v8[0] = 0;
  v6 = 0.0;
  v7 = 0;
  v5 = 0;
  objc_msgSend(v0, sel_getRed_green_blue_alpha_, v8, &v7, &v6, &v5);
  sub_1BCB4BEC4(0, &qword_1EF4883B0);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1BCB683B0;
  v2 = v7;
  *(_QWORD *)(v1 + 32) = v8[0];
  *(_QWORD *)(v1 + 40) = v2;
  v4 = v5;
  result = v6;
  *(double *)(v1 + 48) = v6;
  *(_QWORD *)(v1 + 56) = v4;
  return result;
}

void UIColor.redComponent.getter()
{
  uint64_t v0;

  UIColor.rgbaComponents.getter();
  if (v0)
  {
    if (*(_QWORD *)(v0 + 16))
      swift_bridgeObjectRelease();
    else
      __break(1u);
  }
}

void UIColor.greenComponent.getter()
{
  uint64_t v0;

  UIColor.rgbaComponents.getter();
  if (v0)
  {
    if (*(_QWORD *)(v0 + 16) < 2uLL)
      __break(1u);
    else
      swift_bridgeObjectRelease();
  }
}

void UIColor.blueComponent.getter()
{
  uint64_t v0;

  UIColor.rgbaComponents.getter();
  if (v0)
  {
    if (*(_QWORD *)(v0 + 16) < 3uLL)
      __break(1u);
    else
      swift_bridgeObjectRelease();
  }
}

void UIColor.alphaComponent.getter()
{
  uint64_t v0;

  UIColor.rgbaComponents.getter();
  if (v0)
  {
    if (*(_QWORD *)(v0 + 16) < 4uLL)
      __break(1u);
    else
      swift_bridgeObjectRelease();
  }
}

id static UIColor.medicationScheduleGroupedCellBackground.getter()
{
  return objc_msgSend((id)objc_opt_self(), sel_secondarySystemBackgroundColor);
}

unint64_t sub_1BCB4DBB0()
{
  unint64_t result;

  result = qword_1EF4883B8;
  if (!qword_1EF4883B8)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for MedmojiColor, &type metadata for MedmojiColor);
    atomic_store(result, (unint64_t *)&qword_1EF4883B8);
  }
  return result;
}

ValueMetadata *type metadata accessor for MedmojiColor()
{
  return &type metadata for MedmojiColor;
}

uint64_t sub_1BCB4DC04(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE v12[24];

  sub_1BCB10C0C(0, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v5);
  v9 = &v12[-v8];
  sub_1BCB4F718(a1, (uint64_t)&v12[-v8], &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
  v10 = *a2 + OBJC_IVAR____TtC27HealthMedicationsExperience19MedicationShapeView_config;
  swift_beginAccess();
  sub_1BCB4F718(v10, (uint64_t)v7, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
  swift_beginAccess();
  sub_1BCAF9450((uint64_t)v9, v10);
  swift_endAccess();
  sub_1BCB4DD40((uint64_t)v7);
  sub_1BCB4F7B0((uint64_t)v9, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
  return sub_1BCB4F7B0((uint64_t)v7, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
}

uint64_t sub_1BCB4DD40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;

  v3 = type metadata accessor for MedicationVisualizationConfig(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCB10C0C(0, &qword_1EF487308, v7);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v26 - v9;
  sub_1BCB4F7EC();
  v12 = v11;
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = v1;
  v15 = v1 + OBJC_IVAR____TtC27HealthMedicationsExperience19MedicationShapeView_config;
  swift_beginAccess();
  v16 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_1BCB4F718(a1, (uint64_t)v14, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
  sub_1BCB4F718(v15, v16, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v17((uint64_t)v14, 1, v3) == 1)
  {
    if (v17(v16, 1, v3) == 1)
      return sub_1BCB4F7B0((uint64_t)v14, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
    goto LABEL_6;
  }
  sub_1BCB4F718((uint64_t)v14, (uint64_t)v10, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
  if (v17(v16, 1, v3) == 1)
  {
    sub_1BCAFC40C((uint64_t)v10, type metadata accessor for MedicationVisualizationConfig);
LABEL_6:
    sub_1BCAFC40C((uint64_t)v14, (uint64_t (*)(_QWORD))sub_1BCB4F7EC);
    return sub_1BCB4EC2C();
  }
  sub_1BCB4E76C(v16, (uint64_t)v6);
  v19 = *v6;
  v29 = *v10;
  v28 = v19;
  v20 = MedicationShape.rawValue.getter();
  v22 = v21;
  if (v20 == MedicationShape.rawValue.getter() && v22 == v23)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v24 = sub_1BCB649F4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v24 & 1) == 0)
    {
LABEL_14:
      sub_1BCAFC40C((uint64_t)v6, type metadata accessor for MedicationVisualizationConfig);
      sub_1BCAFC40C((uint64_t)v10, type metadata accessor for MedicationVisualizationConfig);
      sub_1BCB4F7B0((uint64_t)v14, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
      return sub_1BCB4EC2C();
    }
  }
  if ((sub_1BCB58080(*((_QWORD *)v10 + 1), *((_QWORD *)v6 + 1)) & 1) == 0)
    goto LABEL_14;
  sub_1BCAFC2E0(0, &qword_1EDA13F10);
  sub_1BCB4F85C();
  v25 = sub_1BCB64040();
  sub_1BCAFC40C((uint64_t)v6, type metadata accessor for MedicationVisualizationConfig);
  sub_1BCAFC40C((uint64_t)v10, type metadata accessor for MedicationVisualizationConfig);
  result = sub_1BCB4F7B0((uint64_t)v14, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
  if ((v25 & 1) == 0)
    return sub_1BCB4EC2C();
  return result;
}

uint64_t sub_1BCB4E090@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC27HealthMedicationsExperience19MedicationShapeView_config;
  swift_beginAccess();
  return sub_1BCB4F718(v3, a1, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
}

uint64_t sub_1BCB4E0F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE v8[24];

  sub_1BCB10C0C(0, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v8[-v4];
  v6 = v1 + OBJC_IVAR____TtC27HealthMedicationsExperience19MedicationShapeView_config;
  swift_beginAccess();
  sub_1BCB4F718(v6, (uint64_t)v5, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
  swift_beginAccess();
  sub_1BCAF9450(a1, v6);
  swift_endAccess();
  sub_1BCB4DD40((uint64_t)v5);
  sub_1BCB4F7B0(a1, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
  return sub_1BCB4F7B0((uint64_t)v5, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
}

void (*sub_1BCB4E1F0(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[9] = v1;
  sub_1BCB10C0C(0, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v3[10] = malloc(v5);
  v3[11] = malloc(v5);
  v6 = malloc(v5);
  v7 = OBJC_IVAR____TtC27HealthMedicationsExperience19MedicationShapeView_config;
  v3[12] = v6;
  v3[13] = v7;
  v8 = v1 + v7;
  swift_beginAccess();
  sub_1BCB4F718(v8, (uint64_t)v6, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
  return sub_1BCB4E2C0;
}

void sub_1BCB4E2C0(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void **)a1;
  v4 = *(void **)(*(_QWORD *)a1 + 96);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 104);
  v5 = *(void **)(*(_QWORD *)a1 + 80);
  v6 = *(void **)(*(_QWORD *)a1 + 88);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 72) + v3;
  if ((a2 & 1) != 0)
  {
    sub_1BCB4F718(*(_QWORD *)(*(_QWORD *)a1 + 96), (uint64_t)v6, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
    sub_1BCB4F718(v7, (uint64_t)v5, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
    swift_beginAccess();
    sub_1BCAF9450((uint64_t)v6, v7);
    swift_endAccess();
    sub_1BCB4DD40((uint64_t)v5);
    sub_1BCB4F7B0((uint64_t)v6, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
    v8 = (uint64_t)v5;
    v9 = (uint64_t)v4;
  }
  else
  {
    sub_1BCB4F718(*(_QWORD *)(*(_QWORD *)a1 + 72) + v3, (uint64_t)v6, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
    swift_beginAccess();
    sub_1BCAF9450((uint64_t)v4, v7);
    swift_endAccess();
    sub_1BCB4DD40((uint64_t)v6);
    v8 = (uint64_t)v4;
    v9 = (uint64_t)v6;
  }
  sub_1BCB4F7B0(v8, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
  sub_1BCB4F7B0(v9, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
  free(v4);
  free(v6);
  free(v5);
  free(v2);
}

id MedicationShapeView.__allocating_init(config:)(uint64_t a1)
{
  objc_class *v1;
  objc_class *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t, uint64_t);
  id v11;
  uint64_t v12;
  uint64_t v14;
  objc_super v15;

  v2 = v1;
  sub_1BCB10C0C(0, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v14 - v5;
  v7 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v7[OBJC_IVAR____TtC27HealthMedicationsExperience19MedicationShapeView_shadowLayer] = 0;
  v8 = &v7[OBJC_IVAR____TtC27HealthMedicationsExperience19MedicationShapeView_config];
  v9 = type metadata accessor for MedicationVisualizationConfig(0);
  v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v10(v8, 1, 1, v9);
  v15.receiver = v7;
  v15.super_class = v2;
  v11 = objc_msgSendSuper2(&v15, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  sub_1BCB4E76C(a1, (uint64_t)v6);
  v10(v6, 0, 1, v9);
  v12 = (uint64_t)v11 + OBJC_IVAR____TtC27HealthMedicationsExperience19MedicationShapeView_config;
  swift_beginAccess();
  sub_1BCB4E7B0((uint64_t)v6, v12);
  swift_endAccess();
  return v11;
}

id MedicationShapeView.init(config:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t, uint64_t, uint64_t);
  objc_class *v9;
  id v10;
  uint64_t v11;
  uint64_t v13;
  objc_super v14;

  sub_1BCB10C0C(0, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v13 - v4;
  *(_QWORD *)&v1[OBJC_IVAR____TtC27HealthMedicationsExperience19MedicationShapeView_shadowLayer] = 0;
  v6 = &v1[OBJC_IVAR____TtC27HealthMedicationsExperience19MedicationShapeView_config];
  v7 = type metadata accessor for MedicationVisualizationConfig(0);
  v8 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
  v8(v6, 1, 1, v7);
  v9 = (objc_class *)type metadata accessor for MedicationShapeView();
  v14.receiver = v1;
  v14.super_class = v9;
  v10 = objc_msgSendSuper2(&v14, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  sub_1BCB4E76C(a1, (uint64_t)v5);
  v8(v5, 0, 1, v7);
  v11 = (uint64_t)v10 + OBJC_IVAR____TtC27HealthMedicationsExperience19MedicationShapeView_config;
  swift_beginAccess();
  sub_1BCB4E7B0((uint64_t)v5, v11);
  swift_endAccess();
  return v10;
}

uint64_t sub_1BCB4E76C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MedicationVisualizationConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BCB4E7B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BCB10C0C(0, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for MedicationShapeView()
{
  uint64_t result;

  result = qword_1EF4883C8;
  if (!qword_1EF4883C8)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1BCB4E8EC()
{
  char *v0;
  void *v1;
  id v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double Width;
  double Height;
  CGFloat v13;
  double v14;
  double v15;
  double v16;
  id v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  objc_super v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;

  v24.receiver = v0;
  v24.super_class = (Class)type metadata accessor for MedicationShapeView();
  objc_msgSendSuper2(&v24, sel_layoutSubviews);
  v1 = *(void **)&v0[OBJC_IVAR____TtC27HealthMedicationsExperience19MedicationShapeView_shadowLayer];
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v2, sel_frame);
    v4 = v3;
    v6 = v5;
    v8 = v7;
    v10 = v9;
    objc_msgSend(v0, sel_bounds);
    Width = CGRectGetWidth(v25);
    objc_msgSend(v0, sel_bounds);
    Height = CGRectGetHeight(v26);
    if (Height < Width)
      Width = Height;
    objc_msgSend(v0, sel_bounds);
    v13 = round((CGRectGetWidth(v27) - Width) * 0.5);
    objc_msgSend(v0, sel_bounds);
    v36.origin.y = round((CGRectGetHeight(v28) - Width) * 0.5);
    v29.origin.x = v4;
    v29.origin.y = v6;
    v29.size.width = v8;
    v29.size.height = v10;
    v36.origin.x = v13;
    v36.size.width = Width;
    v36.size.height = Width;
    if (CGRectEqualToRect(v29, v36))
      goto LABEL_18;
    objc_msgSend(v0, sel_bounds);
    v14 = CGRectGetWidth(v30);
    objc_msgSend(v0, sel_bounds);
    v15 = CGRectGetHeight(v31);
    if (v15 < v14)
      v14 = v15;
    objc_msgSend(v0, sel_bounds);
    v16 = round((CGRectGetWidth(v32) - v14) * 0.5);
    objc_msgSend(v0, sel_bounds);
    objc_msgSend(v2, sel_setFrame_, v16, round((CGRectGetHeight(v33) - v14) * 0.5), v14, v14);
    objc_msgSend(v2, sel_bounds);
    objc_msgSend(v2, sel_setShadowRadius_, CGRectGetHeight(v34) * 0.066666667);
    objc_msgSend(v2, sel_bounds);
    objc_msgSend(v2, sel_setShadowOffset_, 0.0, CGRectGetHeight(v35) * 0.066666667);
    v17 = objc_msgSend(v2, sel_sublayers);
    if (!v17)
      goto LABEL_18;
    v18 = v17;
    sub_1BCAFC2E0(0, &qword_1EDA139C0);
    v19 = sub_1BCB642D4();

    if (v19 >> 62)
    {
      swift_bridgeObjectRetain();
      v20 = sub_1BCB648D4();
      if (v20)
        goto LABEL_10;
    }
    else
    {
      v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v20)
      {
LABEL_10:
        if (v20 < 1)
        {
          __break(1u);
          return;
        }
        v21 = 0;
        do
        {
          if ((v19 & 0xC000000000000001) != 0)
            v22 = (id)MEMORY[0x1BCCFCF20](v21, v19);
          else
            v22 = *(id *)(v19 + 8 * v21 + 32);
          v23 = v22;
          ++v21;
          objc_msgSend(v2, sel_bounds);
          objc_msgSend(v23, sel_setFrame_);

        }
        while (v20 != v21);
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_18:

  }
}

uint64_t sub_1BCB4EC2C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t result;
  id v22;
  double v23;
  void *v24;
  id v25;
  double v26;
  double v27;
  id v28;
  double v29;
  double v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  objc_class *v55;
  char *v56;
  char *v57;
  id v58;
  id v59;
  id v60;
  double v61;
  double v62;
  char *v63;
  id v64;
  double v65;
  double v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void **v79;
  void *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  id v87;
  id v88;
  uint64_t v89;
  int64_t v90;
  uint64_t v91;
  uint64_t v92;
  int64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  id v97;
  char *v98;
  _QWORD *v99;
  char *v100;
  id v101;
  uint64_t v102;
  int64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  objc_super v108;

  sub_1BCB10C0C(0, (unint64_t *)&qword_1EF487390, (void (*)(uint64_t))sub_1BCAFC27C);
  v95 = *(_QWORD *)(v1 - 8);
  v2 = MEMORY[0x1E0C80A78](v1);
  v102 = (uint64_t)&v89 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v107 = (uint64_t)&v89 - v4;
  sub_1BCB10C0C(0, (unint64_t *)&qword_1EF4883D8, (void (*)(uint64_t))sub_1BCAFC4A0);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (uint64_t *)((char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v6);
  v10 = (uint64_t *)((char *)&v89 - v9);
  sub_1BCB10C0C(0, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v89 - v12;
  v14 = type metadata accessor for MedicationVisualizationConfig(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = OBJC_IVAR____TtC27HealthMedicationsExperience19MedicationShapeView_shadowLayer;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC27HealthMedicationsExperience19MedicationShapeView_shadowLayer], sel_removeFromSuperlayer);
  v19 = *(void **)&v0[v18];
  v91 = v18;
  *(_QWORD *)&v0[v18] = 0;

  v20 = (uint64_t)&v0[OBJC_IVAR____TtC27HealthMedicationsExperience19MedicationShapeView_config];
  swift_beginAccess();
  sub_1BCB4F718(v20, (uint64_t)v13, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
    return sub_1BCB4F7B0((uint64_t)v13, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
  sub_1BCB4E76C((uint64_t)v13, (uint64_t)v17);
  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD27A8]), sel_init);
  LODWORD(v23) = 1045220557;
  objc_msgSend(v22, sel_setShadowOpacity_, v23);
  objc_msgSend(v22, sel_setShouldRasterize_, 1);
  v24 = (void *)objc_opt_self();
  v25 = objc_msgSend(v24, sel_mainScreen);
  objc_msgSend(v25, sel_scale);
  v27 = v26;

  objc_msgSend(v22, sel_setRasterizationScale_, v27);
  v97 = v24;
  v28 = objc_msgSend(v24, sel_mainScreen);
  objc_msgSend(v28, sel_scale);
  v30 = v29;

  objc_msgSend(v22, sel_setContentsScale_, v30);
  v31 = objc_msgSend(v0, sel_layer);
  v101 = v22;
  objc_msgSend(v31, sel_addSublayer_, v22);

  v32 = *((_QWORD *)v17 + 1);
  v33 = *(_QWORD *)(v32 + 64);
  v92 = v32 + 64;
  v34 = 1 << *(_BYTE *)(v32 + 32);
  v35 = -1;
  if (v34 < 64)
    v35 = ~(-1 << v34);
  v36 = v35 & v33;
  v93 = (unint64_t)(v34 + 63) >> 6;
  v90 = v93 - 1;
  v94 = v32;
  result = swift_bridgeObjectRetain();
  v103 = 0;
  v37 = (uint64_t)v17;
  v99 = v8;
  v100 = v0;
  v98 = v17;
  v96 = v10;
  while (1)
  {
    if (v36)
    {
      v106 = (v36 - 1) & v36;
      v38 = __clz(__rbit64(v36)) | (v103 << 6);
LABEL_9:
      v39 = *(_QWORD *)(v94 + 56);
      v40 = (_QWORD *)(*(_QWORD *)(v94 + 48) + 32 * v38);
      v41 = v40[1];
      v42 = v40[2];
      v43 = v40[3];
      *v8 = *v40;
      v8[1] = v41;
      v8[2] = v42;
      v8[3] = v43;
      v44 = v39 + *(_QWORD *)(v95 + 72) * v38;
      sub_1BCAFC4A0();
      v46 = v45;
      sub_1BCB4F718(v44, (uint64_t)v8 + *(int *)(v45 + 48), (unint64_t *)&qword_1EF487390, (void (*)(uint64_t))sub_1BCAFC27C);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v8, 0, 1, v46);
      swift_bridgeObjectRetain();
      sub_1BCAFC5BC(v42, v43);
      goto LABEL_28;
    }
    v47 = v103 + 1;
    if (__OFADD__(v103, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v47 < v93)
    {
      v48 = *(_QWORD *)(v92 + 8 * v47);
      if (v48)
        goto LABEL_13;
      v49 = v103 + 2;
      ++v103;
      if (v47 + 1 < v93)
      {
        v48 = *(_QWORD *)(v92 + 8 * v49);
        if (v48)
          goto LABEL_16;
        v103 = v47 + 1;
        if (v47 + 2 < v93)
        {
          v48 = *(_QWORD *)(v92 + 8 * (v47 + 2));
          if (v48)
          {
            v47 += 2;
            goto LABEL_13;
          }
          v49 = v47 + 3;
          v103 = v47 + 2;
          if (v47 + 3 < v93)
            break;
        }
      }
    }
LABEL_27:
    sub_1BCAFC4A0();
    v46 = v50;
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v8, 1, 1, v50);
    v106 = 0;
LABEL_28:
    sub_1BCB4F764((uint64_t)v8, (uint64_t)v10, (unint64_t *)&qword_1EF4883D8, (void (*)(uint64_t))sub_1BCAFC4A0);
    sub_1BCAFC4A0();
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v10, 1, v46) == 1)
    {
      swift_release();
      v86 = *(void **)&v0[v91];
      v87 = v101;
      *(_QWORD *)&v0[v91] = v101;
      v88 = v87;

      objc_msgSend(v0, sel_setNeedsLayout);
      return sub_1BCAFC40C(v37, type metadata accessor for MedicationVisualizationConfig);
    }
    v51 = v10[1];
    v52 = v10[2];
    v104 = *v10;
    v105 = v51;
    v53 = v10[3];
    v54 = v107;
    sub_1BCB4F764((uint64_t)v10 + *(int *)(v46 + 48), v107, (unint64_t *)&qword_1EF487390, (void (*)(uint64_t))sub_1BCAFC27C);
    v55 = (objc_class *)type metadata accessor for MedicationFragmentLayer();
    v56 = (char *)objc_allocWithZone(v55);
    v57 = &v56[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment];
    *(_OWORD *)v57 = 0u;
    *((_OWORD *)v57 + 1) = 0u;
    *(_QWORD *)&v56[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_color] = 0;
    v108.receiver = v56;
    v108.super_class = v55;
    v58 = objc_msgSendSuper2(&v108, sel_init);
    v59 = v97;
    v60 = objc_msgSend(v97, sel_mainScreen);
    objc_msgSend(v60, sel_scale);
    v62 = v61;

    objc_msgSend(v58, sel_setContentsScale_, v62);
    v63 = (char *)v58;
    v64 = objc_msgSend(v59, sel_mainScreen);
    objc_msgSend(v64, sel_scale);
    v66 = v65;

    objc_msgSend(v63, sel_setRasterizationScale_, v66);
    objc_msgSend(v63, sel_setNeedsDisplayOnBoundsChange_, 1);

    v67 = (uint64_t *)&v63[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment];
    v68 = *(_QWORD *)&v63[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment];
    v69 = *(_QWORD *)&v63[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment + 8];
    v70 = *(_QWORD *)&v63[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment + 16];
    v71 = *(_QWORD *)&v63[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_fragment + 24];
    v72 = v105;
    *v67 = v104;
    v67[1] = v72;
    v67[2] = v52;
    v67[3] = v53;
    sub_1BCB1925C(v68, v69, v70, v71);
    v73 = v54;
    v74 = v102;
    sub_1BCB4F718(v73, v102, (unint64_t *)&qword_1EF487390, (void (*)(uint64_t))sub_1BCAFC27C);
    sub_1BCAFC27C();
    v76 = v75;
    v77 = *(_QWORD *)(v75 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48))(v74, 1, v75) == 1)
    {
      sub_1BCB4F7B0(v74, (unint64_t *)&qword_1EF487390, (void (*)(uint64_t))sub_1BCAFC27C);
      v78 = 0;
    }
    else
    {
      v78 = (void *)sub_1BCB64034();
      (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v74, v76);
    }
    v79 = (void **)&v63[OBJC_IVAR____TtC27HealthMedicationsExperience23MedicationFragmentLayer_color];
    swift_beginAccess();
    v80 = *v79;
    *v79 = v78;
    v81 = v78;

    v82 = v67[1];
    v10 = v96;
    if (v82)
    {
      v84 = v67[2];
      v83 = v67[3];
      v85 = *v67;
      sub_1BCAFC5BC(v84, v83);
      sub_1BCB19224(v85, v82, v84, v83);
      sub_1BCB1925C(v85, v82, v84, v83);
      if (v83 != 1)
      {
        objc_msgSend(v63, sel_setNeedsDisplay);
        sub_1BCB10A44(v84, v83);
      }
    }

    objc_msgSend(v101, sel_addSublayer_, v63);
    result = sub_1BCB4F7B0(v107, (unint64_t *)&qword_1EF487390, (void (*)(uint64_t))sub_1BCAFC27C);
    v8 = v99;
    v0 = v100;
    v37 = (uint64_t)v98;
    v36 = v106;
  }
  v48 = *(_QWORD *)(v92 + 8 * v49);
  if (v48)
  {
LABEL_16:
    v47 = v49;
LABEL_13:
    v106 = (v48 - 1) & v48;
    v38 = __clz(__rbit64(v48)) + (v47 << 6);
    v103 = v47;
    goto LABEL_9;
  }
  while (1)
  {
    v47 = v49 + 1;
    if (__OFADD__(v49, 1))
      break;
    if (v47 >= v93)
    {
      v103 = v90;
      goto LABEL_27;
    }
    v48 = *(_QWORD *)(v92 + 8 * v47);
    ++v49;
    if (v48)
      goto LABEL_13;
  }
LABEL_37:
  __break(1u);
  return result;
}

id MedicationShapeView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MedicationShapeView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1BCB4F56C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + OBJC_IVAR____TtC27HealthMedicationsExperience19MedicationShapeView_config;
  swift_beginAccess();
  return sub_1BCB4F718(v3, a2, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
}

uint64_t sub_1BCB4F620()
{
  return type metadata accessor for MedicationShapeView();
}

void sub_1BCB4F628()
{
  unint64_t v0;

  sub_1BCB10C0C(319, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for MedicationShapeView()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MedicationShapeView.config.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of MedicationShapeView.config.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of MedicationShapeView.config.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of MedicationShapeView.__allocating_init(config:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t sub_1BCB4F718(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_1BCB10C0C(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_1BCB4F764(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_1BCB10C0C(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_1BCB4F7B0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  sub_1BCB10C0C(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void sub_1BCB4F7EC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF4883E0)
  {
    sub_1BCB10C0C(255, &qword_1EF487308, (void (*)(uint64_t))type metadata accessor for MedicationVisualizationConfig);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF4883E0);
  }
}

unint64_t sub_1BCB4F85C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF4883E8;
  if (!qword_1EF4883E8)
  {
    v1 = sub_1BCAFC2E0(255, &qword_1EDA13F10);
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0DEFD00], v1);
    atomic_store(result, (unint64_t *)&qword_1EF4883E8);
  }
  return result;
}

void HealthStoreTimeZoneProvider.init(healthStore:)(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  void *v5;
  id v6;

  sub_1BCB6413C();
  v4 = objc_allocWithZone(MEMORY[0x1E0CB67F0]);
  v5 = (void *)sub_1BCB6410C();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel_initWithCategory_domainName_healthStore_, 1, v5, a1);

  *a2 = v6;
}

Swift::Bool __swiftcall HealthStoreTimeZoneProvider.shouldDisplayTimeZoneTip()()
{
  unsigned __int8 v0;
  void *v1;

  sub_1BCB6413C();
  v1 = (void *)sub_1BCB64538();
  swift_bridgeObjectRelease();
  if (!v1)
    return 0;
  v0 = objc_msgSend(v1, sel_BOOLValue);

  return v0;
}

uint64_t HealthStoreTimeZoneProvider.getSecondsAheadOf(timeZone:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  uint64_t result;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = a1;
  v20 = sub_1BCB63B3C();
  v1 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCB10C0C(0, (unint64_t *)&unk_1EF4883F0, (void (*)(uint64_t))MEMORY[0x1E0CB1470]);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v19 - v5;
  v7 = sub_1BCB63C68();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCB6413C();
  sub_1BCB64544();
  v12 = v11;
  v19 = v1;
  swift_bridgeObjectRelease();
  if ((v12 & 1) != 0)
    return 0;
  sub_1BCB63C50();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1BCB4F7B0((uint64_t)v6, (unint64_t *)&unk_1EF4883F0, (void (*)(uint64_t))MEMORY[0x1E0CB1470]);
    return 0;
  }
  v14 = v10;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  sub_1BCB63B30();
  v15 = sub_1BCB63C44();
  v16 = v20;
  v17 = *(void (**)(char *, uint64_t))(v19 + 8);
  v17(v3, v20);
  sub_1BCB63B30();
  v18 = sub_1BCB63C44();
  v17(v3, v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  result = v15 - v18;
  if (__OFSUB__(v15, v18))
    __break(1u);
  return result;
}

uint64_t HealthStoreTimeZoneProvider.getEndOfDayForLastTimeZoneChange()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  _QWORD v15[2];

  v15[0] = a1;
  v1 = sub_1BCB63C38();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCB10C0C(0, (unint64_t *)&qword_1EDA14530, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v15 - v6;
  v8 = sub_1BCB63B3C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCB6413C();
  sub_1BCB6452C();
  swift_bridgeObjectRelease();
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  v13 = v15[0];
  if (v12 == 1)
  {
    sub_1BCB4F7B0((uint64_t)v7, (unint64_t *)&qword_1EDA14530, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v13, 1, 1, v8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    sub_1BCB63C20();
    sub_1BCB63BE4();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HealthStoreTimeZoneProvider.set(offset:)(Swift::Int offset)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  unsigned __int8 v10;
  id v11;
  void *v12;
  id v13[2];

  v13[1] = *(id *)MEMORY[0x1E0C80C00];
  v3 = sub_1BCB63B3C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  sub_1BCB6413C();
  sub_1BCB64520();
  if (v2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1BCB63B30();
    v8 = (void *)sub_1BCB63B00();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = *MEMORY[0x1E0D2C370];
    v13[0] = 0;
    v10 = objc_msgSend(v7, sel_setDate_forKey_error_, v8, v9, v13);

    v11 = v13[0];
    if ((v10 & 1) == 0)
    {
      v12 = v11;
      sub_1BCB63AA0();

      swift_willThrow();
    }
  }
}

void HealthStoreTimeZoneProvider.set(timeZone:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  Swift::Int v5;
  _QWORD v6[2];

  v1 = sub_1BCB63B3C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[1] = *v0;
  sub_1BCB63B30();
  v5 = sub_1BCB63C44();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  HealthStoreTimeZoneProvider.set(offset:)(v5);
}

id sub_1BCB50020()
{
  id v0;
  void *v1;

  sub_1BCB6413C();
  v1 = (void *)sub_1BCB64538();
  swift_bridgeObjectRelease();
  if (!v1)
    return 0;
  v0 = objc_msgSend(v1, sel_BOOLValue);

  return v0;
}

uint64_t sub_1BCB500B0(uint64_t a1)
{
  return HealthStoreTimeZoneProvider.getSecondsAheadOf(timeZone:)(a1);
}

uint64_t dispatch thunk of TimeZoneProvider.currentTimeZone.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of TimeZoneProvider.shouldDisplayTimeZoneTip()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of TimeZoneProvider.getSecondsAheadOf(timeZone:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of TimeZoneProvider.getEndOfDayForLastTimeZoneChange()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ValueMetadata *type metadata accessor for HealthStoreTimeZoneProvider()
{
  return &type metadata for HealthStoreTimeZoneProvider;
}

uint64_t sub_1BCB5011C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t MedicationScheduleControlObserver.ObserverOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

HealthMedicationsExperience::MedicationScheduleControlObserver::ObserverOptions __swiftcall MedicationScheduleControlObserver.ObserverOptions.init(rawValue:)(HealthMedicationsExperience::MedicationScheduleControlObserver::ObserverOptions rawValue)
{
  HealthMedicationsExperience::MedicationScheduleControlObserver::ObserverOptions *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static MedicationScheduleControlObserver.ObserverOptions.rescheduleItems.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static MedicationScheduleControlObserver.ObserverOptions.addOrModifySchedules.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void sub_1BCB50198()
{
  qword_1EF488400 = 3;
}

uint64_t static MedicationScheduleControlObserver.ObserverOptions.all.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  if (qword_1EF487090 != -1)
    result = swift_once();
  *a1 = qword_1EF488400;
  return result;
}

uint64_t sub_1BCB5020C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1BCB5011C(a1, a2);
}

void MedicationScheduleControlObserver.observerOptions.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + OBJC_IVAR____TtC27HealthMedicationsExperience33MedicationScheduleControlObserver_observerOptions);
}

uint64_t MedicationScheduleControlObserver.scheduleChangedSubject.getter()
{
  return swift_retain();
}

id MedicationScheduleControlObserver.__allocating_init(options:)(uint64_t *a1)
{
  objc_class *v1;
  objc_class *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  objc_super v9;

  v2 = v1;
  v4 = (char *)objc_allocWithZone(v2);
  v5 = *a1;
  v6 = OBJC_IVAR____TtC27HealthMedicationsExperience33MedicationScheduleControlObserver_scheduleChangedSubject;
  sub_1BCB50370();
  swift_allocObject();
  v7 = v4;
  *(_QWORD *)&v4[v6] = sub_1BCB63EC0();
  *(_QWORD *)&v7[OBJC_IVAR____TtC27HealthMedicationsExperience33MedicationScheduleControlObserver_observerOptions] = v5;

  v9.receiver = v7;
  v9.super_class = v2;
  return objc_msgSendSuper2(&v9, sel_init);
}

id MedicationScheduleControlObserver.init(options:)(uint64_t *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  objc_super v6;

  v2 = *a1;
  v3 = OBJC_IVAR____TtC27HealthMedicationsExperience33MedicationScheduleControlObserver_scheduleChangedSubject;
  sub_1BCB50370();
  swift_allocObject();
  v4 = v1;
  *(_QWORD *)&v1[v3] = sub_1BCB63EC0();
  *(_QWORD *)&v4[OBJC_IVAR____TtC27HealthMedicationsExperience33MedicationScheduleControlObserver_observerOptions] = v2;

  v6.receiver = v4;
  v6.super_class = (Class)type metadata accessor for MedicationScheduleControlObserver();
  return objc_msgSendSuper2(&v6, sel_init);
}

void sub_1BCB50370()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF488418)
  {
    v0 = sub_1BCB63EB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF488418);
  }
}

uint64_t type metadata accessor for MedicationScheduleControlObserver()
{
  return objc_opt_self();
}

uint64_t sub_1BCB503F8()
{
  uint64_t v0;
  uint64_t result;

  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC27HealthMedicationsExperience33MedicationScheduleControlObserver_observerOptions) & 1) != 0)
  {
    sub_1BCB50370();
    sub_1BCB50448();
    return sub_1BCB63F08();
  }
  return result;
}

unint64_t sub_1BCB50448()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF488420;
  if (!qword_1EF488420)
  {
    sub_1BCB50370();
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0C95FB0], v1);
    atomic_store(result, (unint64_t *)&qword_1EF488420);
  }
  return result;
}

uint64_t sub_1BCB50518()
{
  uint64_t v0;
  uint64_t result;

  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC27HealthMedicationsExperience33MedicationScheduleControlObserver_observerOptions) & 2) != 0)
  {
    sub_1BCB50370();
    sub_1BCB50448();
    return sub_1BCB63F08();
  }
  return result;
}

id MedicationScheduleControlObserver.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void MedicationScheduleControlObserver.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id MedicationScheduleControlObserver.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MedicationScheduleControlObserver();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_1BCB506B8()
{
  unint64_t result;

  result = qword_1EF488428;
  if (!qword_1EF488428)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for MedicationScheduleControlObserver.ObserverOptions, &type metadata for MedicationScheduleControlObserver.ObserverOptions);
    atomic_store(result, (unint64_t *)&qword_1EF488428);
  }
  return result;
}

unint64_t sub_1BCB50700()
{
  unint64_t result;

  result = qword_1EF488430;
  if (!qword_1EF488430)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for MedicationScheduleControlObserver.ObserverOptions, &type metadata for MedicationScheduleControlObserver.ObserverOptions);
    atomic_store(result, (unint64_t *)&qword_1EF488430);
  }
  return result;
}

unint64_t sub_1BCB50748()
{
  unint64_t result;

  result = qword_1EF488438;
  if (!qword_1EF488438)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for MedicationScheduleControlObserver.ObserverOptions, &type metadata for MedicationScheduleControlObserver.ObserverOptions);
    atomic_store(result, (unint64_t *)&qword_1EF488438);
  }
  return result;
}

unint64_t sub_1BCB50790()
{
  unint64_t result;

  result = qword_1EF488440;
  if (!qword_1EF488440)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for MedicationScheduleControlObserver.ObserverOptions, &type metadata for MedicationScheduleControlObserver.ObserverOptions);
    atomic_store(result, (unint64_t *)&qword_1EF488440);
  }
  return result;
}

uint64_t method lookup function for MedicationScheduleControlObserver()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MedicationScheduleControlObserver.__allocating_init(options:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of MedicationScheduleControlObserver.scheduleControlDidRescheduleItems()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of MedicationScheduleControlObserver.scheduleControl(_:didAddOrModify:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

ValueMetadata *type metadata accessor for MedicationScheduleControlObserver.ObserverOptions()
{
  return &type metadata for MedicationScheduleControlObserver.ObserverOptions;
}

void sub_1BCB50840()
{
  uint64_t v1;

  sub_1BCB06664();
  MEMORY[0x1E0C80A78](v1);
  __asm { BR              X10 }
}

id sub_1BCB508B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  if (!*(_QWORD *)(v1 + 16))
  {
    __break(1u);
    JUMPOUT(0x1BCB50C28);
  }
  v4 = *(_QWORD *)(v1 + 8);
  v5 = objc_allocWithZone(MEMORY[0x1E0D2C438]);
  sub_1BCAFC2E0(0, &qword_1EF487720);
  swift_bridgeObjectRetain();
  swift_retain();
  v6 = (void *)sub_1BCB642C8();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 - 96) = v2;
  *(_QWORD *)(v3 - 88) = v0;
  *(_QWORD *)(v3 - 128) = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v3 - 120) = 1107296256;
  *(_QWORD *)(v3 - 112) = sub_1BCB51D58;
  *(_QWORD *)(v3 - 104) = &block_descriptor_12;
  v7 = _Block_copy((const void *)(v3 - 128));
  v8 = objc_msgSend(v5, sel_initWithScanResult_limit_resultsHandler_, v6, v4, v7);

  _Block_release(v7);
  swift_release();
  return v8;
}

uint64_t HKMedicationClusterQueryDescriptor.init(textSearchTokens:limit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_BYTE *)(a3 + 48) = 1;
  *(_QWORD *)(a3 + 64) = 0;
  v6 = a3 + *(int *)(type metadata accessor for HKMedicationClusterQueryDescriptor() + 44);
  v7 = sub_1BCB63B3C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  result = sub_1BCB64064();
  *(_BYTE *)a3 = 2;
  *(_QWORD *)(a3 + 56) = a1;
  *(_QWORD *)(a3 + 8) = a2;
  return result;
}

uint64_t type metadata accessor for HKMedicationClusterQueryDescriptor()
{
  uint64_t result;

  result = qword_1EF4884D8;
  if (!qword_1EF4884D8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t HKMedicationClusterQueryDescriptor.limit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t HKMedicationClusterQueryDescriptor.scanResult.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HKMedicationClusterQueryDescriptor.machineReadableCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HKMedicationClusterQueryDescriptor.codeAttributeType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t HKMedicationClusterQueryDescriptor.textSearchTokens.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HKMedicationClusterQueryDescriptor.existingMedications.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HKMedicationClusterQueryDescriptor.sinceDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Descriptor;

  Descriptor = type metadata accessor for HKMedicationClusterQueryDescriptor();
  return sub_1BCAFCD6C(v1 + *(int *)(Descriptor + 44), a1, (uint64_t (*)(_QWORD))sub_1BCB06664);
}

uint64_t HKMedicationClusterQueryDescriptor.queryAttributes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for HKMedicationClusterQueryDescriptor() + 48);
  v4 = sub_1BCB64070();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t HKMedicationClusterQueryDescriptor.queryAttributes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for HKMedicationClusterQueryDescriptor() + 48);
  v4 = sub_1BCB64070();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*HKMedicationClusterQueryDescriptor.queryAttributes.modify())()
{
  type metadata accessor for HKMedicationClusterQueryDescriptor();
  return nullsub_1;
}

uint64_t HKMedicationClusterQueryDescriptor.init(scanResult:limit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t Descriptor;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 48) = 1;
  Descriptor = type metadata accessor for HKMedicationClusterQueryDescriptor();
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  v7 = a3 + *(int *)(Descriptor + 44);
  v8 = sub_1BCB63B3C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  result = sub_1BCB64064();
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = a1;
  return result;
}

uint64_t HKMedicationClusterQueryDescriptor.init(machineReadableCode:codeAttributeType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t Descriptor;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  *(_QWORD *)(a4 + 16) = 0;
  Descriptor = type metadata accessor for HKMedicationClusterQueryDescriptor();
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 64) = 0;
  v9 = a4 + *(int *)(Descriptor + 44);
  v10 = sub_1BCB63B3C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  result = sub_1BCB64064();
  *(_BYTE *)a4 = 1;
  *(_QWORD *)(a4 + 24) = a1;
  *(_QWORD *)(a4 + 32) = a2;
  *(_QWORD *)(a4 + 40) = a3;
  *(_BYTE *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 8) = 1;
  return result;
}

uint64_t HKMedicationClusterQueryDescriptor.init(existingMedications:sinceDate:limit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_BYTE *)(a4 + 48) = 1;
  *(_QWORD *)(a4 + 56) = 0;
  v8 = a4 + *(int *)(type metadata accessor for HKMedicationClusterQueryDescriptor() + 44);
  v9 = sub_1BCB63B3C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v11(v8, 1, 1, v9);
  sub_1BCB64064();
  *(_BYTE *)a4 = 3;
  *(_QWORD *)(a4 + 64) = a1;
  sub_1BCB09944(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v8, a2, v9);
  result = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v11)(v8, 0, 1, v9);
  *(_QWORD *)(a4 + 8) = a3;
  return result;
}

uint64_t HKMedicationClusterQueryDescriptor.result(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 88) = a1;
  *(_QWORD *)(v2 + 96) = v1;
  return swift_task_switch();
}

uint64_t sub_1BCB510D4()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;

  v1 = (void *)v0[11];
  v0[7] = v0 + 10;
  v0[2] = v0;
  v0[3] = sub_1BCB31440;
  v2 = swift_continuation_init();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = v1;
  sub_1BCB50840();
  v6 = v5;
  type metadata accessor for HKMedicationClusterQueryDescriptor();
  sub_1BCB645E0();
  objc_msgSend(v4, sel_executeQuery_, v6);

  swift_release();
  return swift_continuation_await();
}

uint64_t sub_1BCB511A0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1BCB511C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  *(_QWORD *)(v3 + 16) = a1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v5;
  *v5 = v3;
  v5[1] = sub_1BCB31ACC;
  v5[11] = a2;
  v5[12] = v2;
  return swift_task_switch();
}

_QWORD *initializeBufferWithCopyOfBuffer for HKMedicationClusterQueryDescriptor(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  void *__dst;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v7;
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v9 = a2[8];
    v10 = *(int *)(a3 + 44);
    __dst = (void *)(a1 + v10);
    v11 = (char *)a2 + v10;
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v9;
    v12 = sub_1BCB63B3C();
    v13 = *(_QWORD *)(v12 - 8);
    v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v21(v11, 1, v12))
    {
      sub_1BCB06664();
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    v16 = *(int *)(a3 + 48);
    v17 = (char *)v4 + v16;
    v18 = (uint64_t)a2 + v16;
    v19 = sub_1BCB64070();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return v4;
}

uint64_t destroy for HKMedicationClusterQueryDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 44);
  v5 = sub_1BCB63B3C();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v7 = a1 + *(int *)(a2 + 48);
  v8 = sub_1BCB64070();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for HKMedicationClusterQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__dst;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(int *)(a3 + 44);
  __dst = (void *)(a1 + v8);
  v9 = (const void *)(a2 + v8);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  v10 = sub_1BCB63B3C();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    sub_1BCB06664();
    memcpy(__dst, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(__dst, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
  }
  v14 = *(int *)(a3 + 48);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = sub_1BCB64070();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  return a1;
}

uint64_t assignWithCopy for HKMedicationClusterQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 44);
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = sub_1BCB63B3C();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    sub_1BCB06664();
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  v16 = *(int *)(a3 + 48);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = sub_1BCB64070();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  return a1;
}

uint64_t initializeWithTake for HKMedicationClusterQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(int *)(a3 + 44);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v10 = sub_1BCB63B3C();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    sub_1BCB06664();
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = *(int *)(a3 + 48);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_1BCB64070();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  return a1;
}

uint64_t assignWithTake for HKMedicationClusterQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 44);
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = sub_1BCB63B3C();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    sub_1BCB06664();
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = *(int *)(a3 + 48);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = sub_1BCB64070();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for HKMedicationClusterQueryDescriptor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCB51A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    sub_1BCB06664();
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = *(int *)(a3 + 44);
    }
    else
    {
      v11 = sub_1BCB64070();
      v10 = *(_QWORD *)(v11 - 8);
      v12 = *(int *)(a3 + 48);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for HKMedicationClusterQueryDescriptor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCB51AE8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 16) = a2;
  }
  else
  {
    sub_1BCB06664();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 44);
    }
    else
    {
      v10 = sub_1BCB64070();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 48);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_1BCB51B84()
{
  unint64_t v0;
  unint64_t v1;

  sub_1BCB06664();
  if (v0 <= 0x3F)
  {
    sub_1BCB64070();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t storeEnumTagSinglePayload for HKMedicationClusterQueryDescriptor.HKMedicationClusterQueryType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BCB51C90 + 4 * byte_1BCB68875[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BCB51CC4 + 4 * asc_1BCB68870[v4]))();
}

uint64_t sub_1BCB51CC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCB51CCC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCB51CD4);
  return result;
}

uint64_t sub_1BCB51CE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCB51CE8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BCB51CEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCB51CF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HKMedicationClusterQueryDescriptor.HKMedicationClusterQueryType()
{
  return &type metadata for HKMedicationClusterQueryDescriptor.HKMedicationClusterQueryType;
}

unint64_t sub_1BCB51D14()
{
  unint64_t result;

  result = qword_1EF488530;
  if (!qword_1EF488530)
  {
    result = MEMORY[0x1BCCFD874](&unk_1BCB689D0, &type metadata for HKMedicationClusterQueryDescriptor.HKMedicationClusterQueryType);
    atomic_store(result, (unint64_t *)&qword_1EF488530);
  }
  return result;
}

uint64_t sub_1BCB51D58(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v7)(id, uint64_t, void *);
  id v8;
  id v9;

  v5 = a3;
  v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_1BCAFC2E0(0, (unint64_t *)&qword_1EF4874E0);
    v5 = sub_1BCB642D4();
  }
  swift_retain();
  v8 = a2;
  v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

unint64_t sub_1BCB51E10(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1BCB31140();
  v2 = sub_1BCB648F8();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1BCAFCD6C(v6, (uint64_t)&v15, (uint64_t (*)(_QWORD))sub_1BCB311A8);
    v7 = v15;
    v8 = v16;
    result = sub_1BCB51F40(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_1BCB0537C(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1BCB51F40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BCB64A90();
  sub_1BCB641CC();
  v4 = sub_1BCB64AC0();
  return sub_1BCB51FA4(a1, a2, v4);
}

unint64_t sub_1BCB51FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v15;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (sub_1BCB649F4() & 1) == 0)
    {
      v12 = ~v5;
      i = (i + 1) & v12;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v13 = (_QWORD *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (sub_1BCB649F4() & 1) == 0)
        {
          for (i = (i + 1) & v12; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v12)
          {
            v15 = (_QWORD *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2)
              break;
            if ((sub_1BCB649F4() & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_1BCB52100(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v12;

  v1 = a1;
  v12 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_18;
  sub_1BCB64844();
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (i = 0; ; ++i)
      {
        MEMORY[0x1BCCFCF20](i, v1);
        v4 = i + 1;
        if (__OFADD__(i, 1))
          break;
        objc_opt_self();
        if (!swift_dynamicCastObjCClass())
        {
          swift_unknownObjectRelease();
          goto LABEL_15;
        }
        sub_1BCB64820();
        sub_1BCB64850();
        sub_1BCB6485C();
        sub_1BCB6482C();
        if (v4 == v2)
          return v12;
      }
      __break(1u);
    }
    else
    {
      v5 = 0;
      v6 = v1 + 32;
      while (1)
      {
        v7 = v5 + 1;
        if (__OFADD__(v5, 1))
          break;
        v8 = *(void **)(v6 + 8 * v5);
        objc_opt_self();
        v9 = swift_dynamicCastObjCClass();
        if (!v9)
        {
LABEL_15:
          swift_release();
          return 0;
        }
        v1 = v9;
        v10 = v8;
        sub_1BCB64820();
        sub_1BCB64850();
        sub_1BCB6485C();
        sub_1BCB6482C();
        ++v5;
        if (v7 == v2)
          return v12;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    sub_1BCB648D4();
    swift_bridgeObjectRelease();
    sub_1BCB64844();
    swift_bridgeObjectRetain();
    v2 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
  }
  return v12;
}

uint64_t sub_1BCB522E4(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v9;
  _BYTE v10[32];
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  v11 = MEMORY[0x1E0DEE9D8];
  sub_1BCB24858(0, v2, 0);
  if (!v2)
    return v11;
  v3 = a1 + 32;
  v4 = MEMORY[0x1E0DEB940];
  while (1)
  {
    sub_1BCB053D0(v3, (uint64_t)v10);
    sub_1BCB0ADA0(0, (unint64_t *)&qword_1EDA131B0, (uint64_t (*)(_QWORD, _QWORD))v4);
    if (!swift_dynamicCast())
      break;
    v5 = v11;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1BCB24858(0, *(_QWORD *)(v5 + 16) + 1, 1);
      v5 = v11;
    }
    v7 = *(_QWORD *)(v5 + 16);
    v6 = *(_QWORD *)(v5 + 24);
    if (v7 >= v6 >> 1)
    {
      sub_1BCB24858(v6 > 1, v7 + 1, 1);
      v5 = v11;
    }
    *(_QWORD *)(v5 + 16) = v7 + 1;
    *(_OWORD *)(v5 + 16 * v7 + 32) = v9;
    v3 += 32;
    if (!--v2)
      return v5;
  }
  swift_release();
  sub_1BCB10A44(0, 1);
  return 0;
}

uint64_t sub_1BCB52450(uint64_t a1)
{
  int64_t v2;
  uint64_t i;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  _BYTE v9[32];
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  v10 = MEMORY[0x1E0DEE9D8];
  sub_1BCB24874(0, v2, 0);
  if (!v2)
    return v10;
  for (i = a1 + 32; ; i += 32)
  {
    sub_1BCB053D0(i, (uint64_t)v9);
    sub_1BCB550A4();
    if (!swift_dynamicCast())
      break;
    v4 = v10;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1BCB24874(0, *(_QWORD *)(v4 + 16) + 1, 1);
      v4 = v10;
    }
    v6 = *(_QWORD *)(v4 + 16);
    v5 = *(_QWORD *)(v4 + 24);
    if (v6 >= v5 >> 1)
    {
      sub_1BCB24874(v5 > 1, v6 + 1, 1);
      v4 = v10;
    }
    *(_QWORD *)(v4 + 16) = v6 + 1;
    *(_QWORD *)(v4 + 8 * v6 + 32) = v8;
    if (!--v2)
      return v4;
  }
  swift_release();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1BCB52594(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[32];
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x1E0DEE9D8];
  sub_1BCB2483C(0, v2, 0);
  v3 = v12;
  if (v2)
  {
    for (i = a1 + 32; ; i += 32)
    {
      sub_1BCB053D0(i, (uint64_t)v11);
      if (!swift_dynamicCast())
        break;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1BCB2483C(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v12;
      }
      v6 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v3 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_1BCB2483C(v5 > 1, v6 + 1, 1);
        v3 = v12;
      }
      *(_QWORD *)(v3 + 16) = v6 + 1;
      v7 = v3 + 16 * v6;
      *(_QWORD *)(v7 + 32) = v9;
      *(_QWORD *)(v7 + 40) = v10;
      if (!--v2)
        return v3;
    }
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

uint64_t sub_1BCB526D8(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x1E0DEE9D8];
    if (!v2)
      return v3;
    v18 = MEMORY[0x1E0DEE9D8];
    result = sub_1BCB2483C(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v18;
    v17 = v1 & 0xC000000000000001;
    v6 = v1;
    while (v2 != v5)
    {
      if (v17)
        v7 = (id)MEMORY[0x1BCCFCF20](v5, v1);
      else
        v7 = *(id *)(v1 + 8 * v5 + 32);
      v8 = v7;
      v9 = objc_msgSend(v8, sel_semanticIdentifier);
      v10 = objc_msgSend(v9, sel_stringValue);
      v11 = sub_1BCB6413C();
      v13 = v12;

      v15 = *(_QWORD *)(v18 + 16);
      v14 = *(_QWORD *)(v18 + 24);
      if (v15 >= v14 >> 1)
        sub_1BCB2483C(v14 > 1, v15 + 1, 1);
      ++v5;
      *(_QWORD *)(v18 + 16) = v15 + 1;
      v16 = v18 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v11;
      *(_QWORD *)(v16 + 40) = v13;
      v1 = v6;
      if (v2 == v5)
        return v3;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1BCB52880()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t sub_1BCB528B0(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 32) = a1;
  return result;
}

uint64_t (*sub_1BCB528EC())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1BCB52928()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t ScheduleUnavailableAlertDeterminer.__allocating_init(medications:userDefaults:)(unint64_t a1, void *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unsigned int v6;
  unsigned int v7;

  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 33) = 2;
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  swift_bridgeObjectRetain();
  v5 = a2;
  v6 = sub_1BCB54638(a1, v5);
  v7 = v6 >> 8;
  *(_BYTE *)(v4 + 32) = v6 & 1;
  swift_beginAccess();
  *(_BYTE *)(v4 + 33) = v7;
  swift_bridgeObjectRelease();

  return v4;
}

uint64_t ScheduleUnavailableAlertDeterminer.init(medications:userDefaults:)(unint64_t a1, void *a2)
{
  uint64_t v2;
  unint64_t *v5;
  unsigned int v6;
  unsigned int v7;

  *(_BYTE *)(v2 + 33) = 2;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  swift_bridgeObjectRetain();
  v5 = a2;
  v6 = sub_1BCB54638(a1, v5);
  v7 = v6 >> 8;
  *(_BYTE *)(v2 + 32) = v6 & 1;
  swift_beginAccess();
  *(_BYTE *)(v2 + 33) = v7;
  swift_bridgeObjectRelease();

  return v2;
}

void sub_1BCB52A98()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  _BYTE *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[3];

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 16);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v26 = sub_1BCB648D4();
    swift_bridgeObjectRelease();
    if (v26)
      goto LABEL_3;
  }
  else if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    v3 = swift_bridgeObjectRetain();
    sub_1BCB526D8(v3);
    swift_bridgeObjectRelease();
    if (qword_1EDA14510 != -1)
      swift_once();
    v4 = sub_1BCB63DDC();
    __swift_project_value_buffer(v4, (uint64_t)qword_1EDA14518);
    swift_bridgeObjectRetain_n();
    v5 = sub_1BCB63DD0();
    v6 = sub_1BCB64514();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = swift_slowAlloc();
      v36 = swift_slowAlloc();
      v38[0] = v36;
      *(_DWORD *)v7 = 136315394;
      v8 = sub_1BCB64B14();
      sub_1BCB010C8(v8, v9, v38);
      sub_1BCB64640();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2080;
      v10 = swift_bridgeObjectRetain();
      v11 = MEMORY[0x1BCCFCA40](v10, MEMORY[0x1E0DEA968]);
      v13 = v12;
      swift_bridgeObjectRelease();
      v37 = sub_1BCB010C8(v11, v13, v38);
      sub_1BCB64640();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1BCAF3000, v5, v6, "[%s] Saving unavailable schedule medication identifiers: %s to UserDefaults", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BCCFD928](v36, -1, -1);
      MEMORY[0x1BCCFD928](v7, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v14 = *(void **)(v1 + 24);
    v15 = (void *)sub_1BCB642C8();
    swift_bridgeObjectRelease();
    if (qword_1EF487070 != -1)
      swift_once();
    v16 = (void *)sub_1BCB6410C();
    objc_msgSend(v14, sel_setObject_forKey_, v15, v16);

    v17 = (_BYTE *)(v1 + 33);
    swift_beginAccess();
    *(_BYTE *)(v1 + 33) = 1;
    v18 = sub_1BCB63DD0();
    v19 = sub_1BCB64514();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = swift_slowAlloc();
      v37 = v21;
      *(_DWORD *)v20 = 136315138;
      v22 = sub_1BCB64B14();
      sub_1BCB010C8(v22, v23, &v37);
      sub_1BCB64640();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1BCAF3000, v18, v19, "[%s] Saving 'hasShownFirstAppearance': true to UserDefaults", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCFD928](v21, -1, -1);
      MEMORY[0x1BCCFD928](v20, -1, -1);
    }

    if (*v17 == 2)
      v24 = 0;
    else
      v24 = sub_1BCB64364();
    if (qword_1EF487068 != -1)
      swift_once();
    v25 = (void *)sub_1BCB6410C();
    objc_msgSend(v14, sel_setValue_forKey_, v24, v25);
    swift_unknownObjectRelease();
    goto LABEL_28;
  }
  if (qword_1EDA14510 != -1)
    swift_once();
  v27 = sub_1BCB63DDC();
  __swift_project_value_buffer(v27, (uint64_t)qword_1EDA14518);
  v28 = sub_1BCB63DD0();
  v29 = sub_1BCB64514();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v38[0] = v31;
    *(_DWORD *)v30 = 136315138;
    v32 = sub_1BCB64B14();
    v37 = sub_1BCB010C8(v32, v33, v38);
    sub_1BCB64640();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BCAF3000, v28, v29, "[%s] Attempting to save identifiers with no medications, removing values from UserDefaults", v30, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCFD928](v31, -1, -1);
    MEMORY[0x1BCCFD928](v30, -1, -1);
  }

  swift_beginAccess();
  *(_BYTE *)(v1 + 33) = 2;
  v34 = *(void **)(v1 + 24);
  if (qword_1EF487068 != -1)
    swift_once();
  v35 = (void *)sub_1BCB6410C();
  objc_msgSend(v34, sel_removeObjectForKey_, v35);

  if (qword_1EF487070 != -1)
    swift_once();
  v25 = (void *)sub_1BCB6410C();
  objc_msgSend(v34, sel_removeObjectForKey_, v25);
LABEL_28:

}

_QWORD *sub_1BCB5311C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  void *v54;
  void *v56;
  _QWORD *v57;
  uint64_t v58;

  v1 = v0;
  if (qword_1EDA14510 != -1)
    swift_once();
  v2 = sub_1BCB63DDC();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EDA14518);
  v3 = sub_1BCB63DD0();
  v4 = sub_1BCB64514();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v58 = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = sub_1BCB64B14();
    sub_1BCB010C8(v7, v8, &v58);
    sub_1BCB64640();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BCAF3000, v3, v4, "[%s] Checking for stale unavailable schedule medication identifiers", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCFD928](v6, -1, -1);
    MEMORY[0x1BCCFD928](v5, -1, -1);
  }

  v9 = *(void **)(v1 + 24);
  if (qword_1EF487070 != -1)
    swift_once();
  v10 = (void *)sub_1BCB6410C();
  v11 = objc_msgSend(v9, sel_arrayForKey_, v10);

  if (v11)
  {
    v12 = sub_1BCB642D4();

    v13 = sub_1BCB52594(v12);
    swift_bridgeObjectRelease();
    if (v13)
    {
      if (*(_QWORD *)(v13 + 16))
      {
        v14 = sub_1BCB3C5B0(v13);
        swift_bridgeObjectRelease();
        v15 = swift_bridgeObjectRetain();
        v16 = sub_1BCB526D8(v15);
        swift_bridgeObjectRelease();
        v17 = sub_1BCB3C5B0(v16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v18 = sub_1BCB53F7C(v17, v14);
        swift_retain();
        v19 = sub_1BCB54D5C(v14, v18);
        swift_release();
        v20 = sub_1BCB24728(v19);
        swift_release();
        swift_retain();
        v21 = sub_1BCB54D5C(v17, v18);
        swift_release();
        sub_1BCB24728(v21);
        swift_release();
        v57 = sub_1BCB24728(v18);
        swift_release();
        swift_retain();
        v22 = sub_1BCB63DD0();
        v23 = sub_1BCB64514();
        v56 = v9;
        if (os_log_type_enabled(v22, v23))
        {
          v24 = swift_slowAlloc();
          v25 = swift_slowAlloc();
          v58 = v25;
          *(_DWORD *)v24 = 136315394;
          v26 = sub_1BCB64B14();
          sub_1BCB010C8(v26, v27, &v58);
          sub_1BCB64640();
          swift_bridgeObjectRelease();
          *(_WORD *)(v24 + 12) = 2080;
          sub_1BCB0ADA0(0, (unint64_t *)&qword_1EDA14180, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
          sub_1BCB0AA88();
          v28 = sub_1BCB640F4();
          sub_1BCB010C8(v28, v29, &v58);
          sub_1BCB64640();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1BCAF3000, v22, v23, "[%s] New schedule medication identifiers (not previously seen): %s", (uint8_t *)v24, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1BCCFD928](v25, -1, -1);
          MEMORY[0x1BCCFD928](v24, -1, -1);

        }
        else
        {

          swift_release_n();
        }
        swift_retain_n();
        v36 = sub_1BCB63DD0();
        v37 = sub_1BCB64514();
        if (os_log_type_enabled(v36, v37))
        {
          v38 = swift_slowAlloc();
          v39 = swift_slowAlloc();
          v58 = v39;
          *(_DWORD *)v38 = 136315394;
          v40 = sub_1BCB64B14();
          sub_1BCB010C8(v40, v41, &v58);
          sub_1BCB64640();
          swift_bridgeObjectRelease();
          *(_WORD *)(v38 + 12) = 2080;
          sub_1BCB0ADA0(0, (unint64_t *)&qword_1EDA14180, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
          sub_1BCB0AA88();
          v42 = sub_1BCB640F4();
          sub_1BCB010C8(v42, v43, &v58);
          sub_1BCB64640();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1BCAF3000, v36, v37, "[%s] Unavailable schedule medication identifiers to be removed: %s", (uint8_t *)v38, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1BCCFD928](v39, -1, -1);
          MEMORY[0x1BCCFD928](v38, -1, -1);

        }
        else
        {

          swift_release_n();
        }
        swift_retain_n();
        v44 = sub_1BCB63DD0();
        v45 = sub_1BCB64514();
        if (os_log_type_enabled(v44, v45))
        {
          v46 = swift_slowAlloc();
          v47 = swift_slowAlloc();
          v58 = v47;
          *(_DWORD *)v46 = 136315394;
          v48 = sub_1BCB64B14();
          sub_1BCB010C8(v48, v49, &v58);
          sub_1BCB64640();
          swift_bridgeObjectRelease();
          *(_WORD *)(v46 + 12) = 2080;
          swift_retain();
          v50 = MEMORY[0x1BCCFCA40](v57, MEMORY[0x1E0DEA968]);
          v52 = v51;
          swift_release();
          sub_1BCB010C8(v50, v52, &v58);
          sub_1BCB64640();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1BCAF3000, v44, v45, "[%s] Updating schedule unavailable acknowledged medication identifiers: %s", (uint8_t *)v46, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1BCCFD928](v47, -1, -1);
          MEMORY[0x1BCCFD928](v46, -1, -1);

        }
        else
        {

          swift_release_n();
        }
        v53 = (void *)sub_1BCB642C8();
        swift_release();
        v54 = (void *)sub_1BCB6410C();
        objc_msgSend(v56, sel_setValue_forKey_, v53, v54);

        return v20;
      }
      swift_bridgeObjectRelease();
    }
  }
  v30 = sub_1BCB63DD0();
  v31 = sub_1BCB64514();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc();
    v33 = swift_slowAlloc();
    v58 = v33;
    *(_DWORD *)v32 = 136315138;
    v34 = sub_1BCB64B14();
    sub_1BCB010C8(v34, v35, &v58);
    sub_1BCB64640();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BCAF3000, v30, v31, "[%s] No stale unavailable schedule medication identifiers to remove", v32, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCFD928](v33, -1, -1);
    MEMORY[0x1BCCFD928](v32, -1, -1);
  }

  return 0;
}

void static ScheduleUnavailableAlertDeterminer.removeAllIdentifiers(userDefaults:)(void *a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  if (qword_1EDA14510 != -1)
    swift_once();
  v2 = sub_1BCB63DDC();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EDA14518);
  v3 = sub_1BCB63DD0();
  v4 = sub_1BCB64514();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v11 = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = sub_1BCB64B14();
    sub_1BCB010C8(v7, v8, &v11);
    sub_1BCB64640();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BCAF3000, v3, v4, "[%s] Removing all identifiers from UserDefaults", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCFD928](v6, -1, -1);
    MEMORY[0x1BCCFD928](v5, -1, -1);
  }

  if (qword_1EF487070 != -1)
    swift_once();
  v9 = (void *)sub_1BCB6410C();
  objc_msgSend(a1, sel_removeObjectForKey_, v9);

  if (qword_1EF487068 != -1)
    swift_once();
  v10 = (void *)sub_1BCB6410C();
  objc_msgSend(a1, sel_removeObjectForKey_, v10);

}

uint64_t ScheduleUnavailableAlertDeterminer.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return v0;
}

uint64_t ScheduleUnavailableAlertDeterminer.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1BCB53CB4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for ScheduleUnavailableAlertDeterminer();
  result = sub_1BCB63E78();
  *a1 = result;
  return result;
}

uint64_t sub_1BCB53CEC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;

  v4 = a4;
  if (!a3)
  {
    v8 = MEMORY[0x1E0DEE9E8];
LABEL_36:
    swift_release();
    return v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_1BCB48B40();
  result = sub_1BCB64784();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    sub_1BCB64A90();
    swift_bridgeObjectRetain();
    sub_1BCB641CC();
    result = sub_1BCB64AC0();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1BCB53F7C(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[2];

  v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE *)(a2 + 32);
  v5 = (unint64_t)((1 << v4) + 63) >> 6;
  v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    bzero((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    v7 = sub_1BCB540FC((uint64_t)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v5, a2, v3);
    swift_release();
  }
  else
  {
    v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    v7 = sub_1BCB540FC((uint64_t)v8, v5, a2, v3);
    swift_release();
    MEMORY[0x1BCCFD928](v8, -1, -1);
  }
  return v7;
}

uint64_t sub_1BCB540FC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  unint64_t i;
  unint64_t v30;
  _QWORD *v31;
  BOOL v32;
  BOOL v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  BOOL v52;
  uint64_t v53;
  _QWORD *v54;
  BOOL v55;
  unint64_t *v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  int64_t v63;

  v4 = a4;
  v5 = a3;
  v57 = (unint64_t *)result;
  if (*(_QWORD *)(a4 + 16) < *(_QWORD *)(a3 + 16))
  {
    v6 = 0;
    v58 = a4 + 56;
    v7 = 1 << *(_BYTE *)(a4 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(a4 + 56);
    v59 = (unint64_t)(v7 + 63) >> 6;
    v61 = 0;
    v10 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v9)
        {
          v11 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          v62 = v6;
          v12 = v11 | (v6 << 6);
        }
        else
        {
          v13 = v6 + 1;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
            goto LABEL_81;
          }
          if (v13 >= v59)
            goto LABEL_79;
          v14 = *(_QWORD *)(v58 + 8 * v13);
          v15 = v6 + 1;
          if (!v14)
          {
            v15 = v6 + 2;
            if (v6 + 2 >= v59)
              goto LABEL_79;
            v14 = *(_QWORD *)(v58 + 8 * v15);
            if (!v14)
            {
              v15 = v6 + 3;
              if (v6 + 3 >= v59)
                goto LABEL_79;
              v14 = *(_QWORD *)(v58 + 8 * v15);
              if (!v14)
              {
                v16 = v6 + 4;
                if (v6 + 4 >= v59)
                  goto LABEL_79;
                v14 = *(_QWORD *)(v58 + 8 * v16);
                if (!v14)
                {
                  while (1)
                  {
                    v15 = v16 + 1;
                    if (__OFADD__(v16, 1))
                      goto LABEL_83;
                    if (v15 >= v59)
                      goto LABEL_79;
                    v14 = *(_QWORD *)(v58 + 8 * v15);
                    ++v16;
                    if (v14)
                      goto LABEL_22;
                  }
                }
                v15 = v6 + 4;
              }
            }
          }
LABEL_22:
          v9 = (v14 - 1) & v14;
          v62 = v15;
          v12 = __clz(__rbit64(v14)) + (v15 << 6);
        }
        v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v12);
        v19 = *v17;
        v18 = v17[1];
        sub_1BCB64A90();
        swift_bridgeObjectRetain();
        sub_1BCB641CC();
        v20 = sub_1BCB64AC0();
        v21 = -1 << *(_BYTE *)(v5 + 32);
        v22 = v20 & ~v21;
        v23 = v22 >> 6;
        v24 = 1 << v22;
        if (((1 << v22) & *(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
          break;
LABEL_6:
        result = swift_bridgeObjectRelease();
        v6 = v62;
        v5 = a3;
        v4 = a4;
      }
      v25 = *(_QWORD *)(a3 + 48);
      v26 = (_QWORD *)(v25 + 16 * v22);
      v27 = *v26 == v19 && v26[1] == v18;
      if (!v27 && (sub_1BCB649F4() & 1) == 0)
      {
        v28 = ~v21;
        for (i = v22 + 1; ; i = v30 + 1)
        {
          v30 = i & v28;
          if (((*(_QWORD *)(v10 + (((i & v28) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v28)) & 1) == 0)
            break;
          v31 = (_QWORD *)(v25 + 16 * v30);
          v32 = *v31 == v19 && v31[1] == v18;
          if (v32 || (sub_1BCB649F4() & 1) != 0)
          {
            result = swift_bridgeObjectRelease();
            v23 = v30 >> 6;
            v24 = 1 << v30;
            goto LABEL_38;
          }
        }
        goto LABEL_6;
      }
      result = swift_bridgeObjectRelease();
LABEL_38:
      v6 = v62;
      v5 = a3;
      v57[v23] |= v24;
      v33 = __OFADD__(v61++, 1);
      v4 = a4;
      if (v33)
        goto LABEL_82;
    }
  }
  v34 = 0;
  v60 = a3 + 56;
  v61 = 0;
  v35 = 1 << *(_BYTE *)(a3 + 32);
  if (v35 < 64)
    v36 = ~(-1 << v35);
  else
    v36 = -1;
  v37 = v36 & *(_QWORD *)(a3 + 56);
  v63 = (unint64_t)(v35 + 63) >> 6;
  v38 = a4 + 56;
  while (1)
  {
    if (v37)
    {
      v39 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      v40 = v39 | (v34 << 6);
      goto LABEL_63;
    }
    v41 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    if (v41 >= v63)
      goto LABEL_79;
    v42 = *(_QWORD *)(v60 + 8 * v41);
    ++v34;
    if (!v42)
    {
      v34 = v41 + 1;
      if (v41 + 1 >= v63)
        goto LABEL_79;
      v42 = *(_QWORD *)(v60 + 8 * v34);
      if (!v42)
      {
        v34 = v41 + 2;
        if (v41 + 2 >= v63)
          goto LABEL_79;
        v42 = *(_QWORD *)(v60 + 8 * v34);
        if (!v42)
          break;
      }
    }
LABEL_62:
    v37 = (v42 - 1) & v42;
    v40 = __clz(__rbit64(v42)) + (v34 << 6);
LABEL_63:
    v44 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v40);
    v46 = *v44;
    v45 = v44[1];
    sub_1BCB64A90();
    swift_bridgeObjectRetain();
    sub_1BCB641CC();
    v47 = sub_1BCB64AC0();
    v48 = -1 << *(_BYTE *)(v4 + 32);
    v49 = v47 & ~v48;
    if (((*(_QWORD *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) == 0)
      goto LABEL_46;
    v50 = *(_QWORD *)(a4 + 48);
    v51 = (_QWORD *)(v50 + 16 * v49);
    v52 = *v51 == v46 && v51[1] == v45;
    if (v52 || (sub_1BCB649F4() & 1) != 0)
    {
LABEL_76:
      result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v57 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
      v33 = __OFADD__(v61++, 1);
      v5 = a3;
      v4 = a4;
      if (v33)
      {
        __break(1u);
LABEL_79:
        swift_retain();
        return sub_1BCB53CEC(v57, a2, v61, v5);
      }
    }
    else
    {
      v53 = ~v48;
      while (1)
      {
        v49 = (v49 + 1) & v53;
        if (((*(_QWORD *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) == 0)
          break;
        v54 = (_QWORD *)(v50 + 16 * v49);
        v55 = *v54 == v46 && v54[1] == v45;
        if (v55 || (sub_1BCB649F4() & 1) != 0)
          goto LABEL_76;
      }
LABEL_46:
      result = swift_bridgeObjectRelease();
      v5 = a3;
      v4 = a4;
    }
  }
  v43 = v41 + 3;
  if (v43 >= v63)
    goto LABEL_79;
  v42 = *(_QWORD *)(v60 + 8 * v43);
  if (v42)
  {
    v34 = v43;
    goto LABEL_62;
  }
  while (1)
  {
    v34 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v34 >= v63)
      goto LABEL_79;
    v42 = *(_QWORD *)(v60 + 8 * v34);
    ++v43;
    if (v42)
      goto LABEL_62;
  }
LABEL_84:
  __break(1u);
  return result;
}

uint64_t sub_1BCB54638(unint64_t a1, unint64_t *a2)
{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  int v26;
  void *v27;
  unsigned int v28;
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;

  if (qword_1EF487068 != -1)
LABEL_49:
    swift_once();
  v4 = (void *)sub_1BCB6410C();
  LODWORD(v5) = objc_msgSend(a2, sel_BOOLForKey_, v4);

  v6 = a1;
  if (!(a1 >> 62))
  {
    a1 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v31 = a1;
    if (a1)
      goto LABEL_4;
LABEL_51:
    v27 = (void *)sub_1BCB6410C();
    v28 = objc_msgSend(a2, sel_hk_keyExists_, v27);

    v26 = 0;
    if (v28)
      v24 = v5;
    else
      v24 = 2;
    return v26 | (v24 << 8);
  }
  swift_bridgeObjectRetain();
  v6 = a1;
  a1 = sub_1BCB648D4();
  swift_bridgeObjectRelease();
  v31 = a1;
  if (!a1)
    goto LABEL_51;
LABEL_4:
  if (qword_1EF487070 != -1)
    goto LABEL_56;
  while (1)
  {
    v7 = (void *)sub_1BCB6410C();
    a2 = (unint64_t *)objc_msgSend(a2, sel_arrayForKey_, v7);

    v8 = v31;
    if (!a2)
      break;
    v9 = sub_1BCB642D4();

    v10 = (_QWORD *)sub_1BCB52594(v9);
    swift_bridgeObjectRelease();
    if (!v10)
      break;
    v30 = v5;
    v11 = v10[2];
    v34 = v6 & 0xC000000000000001;
    v35 = MEMORY[0x1E0DEE9D8];
    v32 = v6 + 32;
    v33 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v12 = 0;
    while (1)
    {
      if (v34)
      {
        v13 = (unint64_t *)MEMORY[0x1BCCFCF20](v12, v6);
      }
      else
      {
        if (v12 >= *(_QWORD *)(v33 + 16))
          goto LABEL_48;
        v13 = (unint64_t *)*(id *)(v32 + 8 * v12);
      }
      a2 = v13;
      if (__OFADD__(v12++, 1))
      {
        __break(1u);
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      v15 = objc_msgSend(v13, sel_semanticIdentifier);
      v16 = objc_msgSend(v15, sel_stringValue);

      v17 = sub_1BCB6413C();
      v5 = v18;

      if (!v11)
        goto LABEL_22;
      v19 = v10[4] == v17 && v10[5] == v5;
      if (!v19 && (sub_1BCB649F4() & 1) == 0)
      {
        if (v11 == 1)
          goto LABEL_22;
        if ((v10[6] != v17 || v10[7] != v5) && (sub_1BCB649F4() & 1) == 0)
          break;
      }

      swift_bridgeObjectRelease();
LABEL_9:
      if (v12 == v8)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v35 >> 62)
        {
          swift_bridgeObjectRetain();
          v25 = sub_1BCB648D4();
          swift_bridgeObjectRelease();
        }
        else
        {
          v25 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        if (v25)
          v24 = 0;
        else
          v24 = v30;
        goto LABEL_46;
      }
    }
    if (v11 == 2)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      v20 = a2;
      MEMORY[0x1BCCFCA1C]();
      if (*(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1BCB64304();
      sub_1BCB64334();
      a2 = &v35;
      sub_1BCB642EC();

      goto LABEL_9;
    }
    v21 = v10 + 9;
    a1 = 2;
    while (1)
    {
      v22 = v6;
      v6 = a1 + 1;
      if (__OFADD__(a1, 1))
        break;
      v23 = *(v21 - 1) == v17 && *v21 == v5;
      if (v23 || (sub_1BCB649F4() & 1) != 0)
      {

        swift_bridgeObjectRelease();
        v6 = v22;
        v8 = v31;
        goto LABEL_9;
      }
      v21 += 2;
      ++a1;
      v19 = v6 == v11;
      v6 = v22;
      v8 = v31;
      if (v19)
        goto LABEL_22;
    }
    __break(1u);
LABEL_56:
    swift_once();
  }
  v24 = 0;
LABEL_46:
  v26 = v24 ^ 1;
  return v26 | (v24 << 8);
}

uint64_t sub_1BCB54A94(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  BOOL v29;
  BOOL v30;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;

  v4 = a4;
  v32 = (unint64_t *)result;
  v33 = 0;
  v5 = 0;
  v8 = *(_QWORD *)(a3 + 56);
  v6 = a3 + 56;
  v7 = v8;
  v9 = 1 << *(_BYTE *)(v6 - 24);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & v7;
  v35 = v6;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v37 = a4 + 56;
  while (1)
  {
    while (v11)
    {
      v12 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v13 = v12 | (v5 << 6);
      if (*(_QWORD *)(v4 + 16))
        goto LABEL_23;
    }
    v14 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v14 >= v36)
      goto LABEL_39;
    v15 = *(_QWORD *)(v35 + 8 * v14);
    ++v5;
    if (!v15)
    {
      v5 = v14 + 1;
      if (v14 + 1 >= v36)
        goto LABEL_39;
      v15 = *(_QWORD *)(v35 + 8 * v5);
      if (!v15)
      {
        v5 = v14 + 2;
        if (v14 + 2 >= v36)
          goto LABEL_39;
        v15 = *(_QWORD *)(v35 + 8 * v5);
        if (!v15)
          break;
      }
    }
LABEL_22:
    v11 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v5 << 6);
    if (*(_QWORD *)(v4 + 16))
    {
LABEL_23:
      v17 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v13);
      v19 = *v17;
      v18 = v17[1];
      sub_1BCB64A90();
      swift_bridgeObjectRetain();
      sub_1BCB641CC();
      v20 = sub_1BCB64AC0();
      v21 = v4;
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = v20 & ~v22;
      if (((*(_QWORD *)(v37 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
        goto LABEL_5;
      v24 = *(_QWORD *)(v21 + 48);
      v25 = (_QWORD *)(v24 + 16 * v23);
      v26 = *v25 == v19 && v25[1] == v18;
      if (v26 || (sub_1BCB649F4() & 1) != 0)
      {
LABEL_36:
        result = swift_bridgeObjectRelease();
        *(unint64_t *)((char *)v32 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
        v30 = __OFADD__(v33++, 1);
        v4 = v21;
        if (v30)
        {
          __break(1u);
LABEL_39:
          swift_retain();
          return sub_1BCB53CEC(v32, a2, v33, a3);
        }
      }
      else
      {
        v27 = ~v22;
        while (1)
        {
          v23 = (v23 + 1) & v27;
          if (((*(_QWORD *)(v37 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
            break;
          v28 = (_QWORD *)(v24 + 16 * v23);
          v29 = *v28 == v19 && v28[1] == v18;
          if (v29 || (sub_1BCB649F4() & 1) != 0)
            goto LABEL_36;
        }
LABEL_5:
        result = swift_bridgeObjectRelease();
        v4 = v21;
      }
    }
  }
  v16 = v14 + 3;
  if (v16 >= v36)
    goto LABEL_39;
  v15 = *(_QWORD *)(v35 + 8 * v16);
  if (v15)
  {
    v5 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v5 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v5 >= v36)
      goto LABEL_39;
    v15 = *(_QWORD *)(v35 + 8 * v5);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1BCB54D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  void *v11;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    bzero((char *)v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    v10 = sub_1BCB54A94((uint64_t)v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a1, a2);
    swift_release();
    swift_bridgeObjectRelease();
    if (v2)
      swift_willThrow();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v11 = (void *)swift_slowAlloc();
    bzero(v11, v8);
    swift_bridgeObjectRetain();
    v10 = sub_1BCB54A94((uint64_t)v11, v7, a1, a2);
    swift_release();
    swift_bridgeObjectRelease();
    MEMORY[0x1BCCFD928](v11, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v10;
}

uint64_t sub_1BCB54F20@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 32);
  return result;
}

uint64_t sub_1BCB54F64(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 32) = v2;
  return result;
}

uint64_t sub_1BCB54FA4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 33);
  return result;
}

uint64_t sub_1BCB54FE8(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 33) = v2;
  return result;
}

uint64_t type metadata accessor for ScheduleUnavailableAlertDeterminer()
{
  return objc_opt_self();
}

uint64_t method lookup function for ScheduleUnavailableAlertDeterminer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ScheduleUnavailableAlertDeterminer.shouldShowNewScheduleUnavailableView.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of ScheduleUnavailableAlertDeterminer.shouldShowNewScheduleUnavailableView.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of ScheduleUnavailableAlertDeterminer.shouldShowNewScheduleUnavailableView.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of ScheduleUnavailableAlertDeterminer.hasShownFirstAppearance.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of ScheduleUnavailableAlertDeterminer.__allocating_init(medications:userDefaults:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of ScheduleUnavailableAlertDeterminer.saveIdentifiers()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of ScheduleUnavailableAlertDeterminer.removeStaleIdentifiers()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

void sub_1BCB550A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF487750)
  {
    sub_1BCB34290();
    v0 = sub_1BCB64358();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF487750);
  }
}

unint64_t sub_1BCB550F8()
{
  return 0xD000000000000020;
}

uint64_t MedicationListOnboardingMetric.__allocating_init(step:action:hasSuggestionsFromHealthRecords:context:itemRank:timeSinceUserLastScannedAMed:didLastScanFallBackToOCR:itemLevelRankOfMatchInOCRList:algorithmType:dataSource:hasScheduledEndDate:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16)
{
  char v16;
  char v17;
  uint64_t v18;

  v16 = a3 & 1;
  v17 = a7 & 1;
  v18 = swift_allocObject();
  MedicationListOnboardingMetric.init(step:action:hasSuggestionsFromHealthRecords:context:itemRank:timeSinceUserLastScannedAMed:didLastScanFallBackToOCR:itemLevelRankOfMatchInOCRList:algorithmType:dataSource:hasScheduledEndDate:)(a1, a2, v16, a4, a5, a6, v17, a8, a9 & 1, a10, a11, a12 & 1, a13, a14 & 1, a15, a16);
  return v18;
}

uint64_t MedicationListOnboardingMetric.init(step:action:hasSuggestionsFromHealthRecords:context:itemRank:timeSinceUserLastScannedAMed:didLastScanFallBackToOCR:itemLevelRankOfMatchInOCRList:algorithmType:dataSource:hasScheduledEndDate:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  unsigned __int8 v55;
  char v56;
  char v60;
  uint64_t v61;

  v17 = v16;
  *(_QWORD *)(v17 + 104) = 0;
  *(_QWORD *)(v17 + 48) = 0;
  *(_QWORD *)(v17 + 56) = 0;
  *(_BYTE *)(v17 + 112) = 1;
  *(_QWORD *)(v17 + 120) = 0;
  *(_BYTE *)(v17 + 128) = 1;
  *(_QWORD *)(v17 + 144) = 0;
  *(_QWORD *)(v17 + 152) = 0;
  *(_BYTE *)(v17 + 160) = 2;
  *(_QWORD *)(v17 + 168) = 0;
  *(_BYTE *)(v17 + 176) = 1;
  *(_QWORD *)(v17 + 184) = 0;
  *(_BYTE *)(v17 + 192) = 1;
  *(_QWORD *)(v17 + 200) = 0;
  *(_WORD *)(v17 + 208) = 513;
  *(_QWORD *)(v17 + 224) = 0;
  *(_QWORD *)(v17 + 232) = 0;
  *(_QWORD *)(v17 + 216) = 0;
  *(_BYTE *)(v17 + 240) = 1;
  swift_beginAccess();
  v24 = (id)HKStringFromMedicationListOnboardingProvenanceType();
  v25 = sub_1BCB6413C();
  v27 = v26;

  *(_QWORD *)(v17 + 16) = v25;
  *(_QWORD *)(v17 + 24) = v27;
  v28 = (id)HKStringFromMedicationListOnboardingStepType();
  v29 = sub_1BCB6413C();
  v31 = v30;

  *(_QWORD *)(v17 + 32) = v29;
  *(_QWORD *)(v17 + 40) = v31;
  v60 = a3;
  if ((a3 & 1) == 0)
  {
    v32 = (id)HKStringFromMedicationListOnboardingActionType();
    v33 = sub_1BCB6413C();
    v35 = v34;

    *(_QWORD *)(v17 + 48) = v33;
    *(_QWORD *)(v17 + 56) = v35;
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v17 + 168) = a6;
  *(_BYTE *)(v17 + 176) = a7 & 1;
  swift_beginAccess();
  *(_BYTE *)(v17 + 64) = *(_BYTE *)(a5 + 24);
  swift_beginAccess();
  v36 = 0;
  v37 = 0;
  if ((*(_BYTE *)(a5 + 48) & 1) == 0)
  {
    v38 = (id)HKStringFromMedicationListOnboardingDetailsEntryType();
    v36 = sub_1BCB6413C();
    v37 = v39;

  }
  v40 = a15;
  *(_QWORD *)(v17 + 144) = v36;
  *(_QWORD *)(v17 + 152) = v37;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v17 + 160) = a4;
  swift_beginAccess();
  v41 = *(_QWORD *)(a5 + 32);
  v61 = a2;
  if (*(_QWORD *)(v41 + 16) && (v42 = sub_1BCB0EB40(a1), (v43 & 1) != 0))
    v44 = *(_BYTE *)(*(_QWORD *)(v41 + 56) + v42);
  else
    v44 = 1;
  v45 = a16;
  v46 = a13;
  v47 = a11;
  *(_BYTE *)(v17 + 66) = v44;
  swift_beginAccess();
  v48 = *(_BYTE *)(a5 + 64);
  *(_QWORD *)(v17 + 232) = *(_QWORD *)(a5 + 56);
  *(_BYTE *)(v17 + 240) = v48;
  if ((a14 & 1) == 0)
  {
    v49 = (id)HKStringFromHKMedicationListOnboardingAlgorithmType();
    v50 = sub_1BCB6413C();
    v52 = v51;

    *(_QWORD *)(v17 + 216) = v50;
    *(_QWORD *)(v17 + 224) = v52;
    v45 = a16;
    v47 = a11;
    v40 = a15;
    v46 = a13;
    swift_bridgeObjectRelease();
  }
  v53 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D2C430]), sel_initWithDataSource_, v40);
  *(_QWORD *)(v17 + 248) = v53;
  v54 = v53;
  v55 = objc_msgSend(v54, sel_isOntologySupportedRegion);

  swift_unknownObjectRelease();
  *(_BYTE *)(v17 + 65) = v55;
  *(_QWORD *)(v17 + 184) = a8;
  *(_BYTE *)(v17 + 192) = a9 & 1;
  *(_BYTE *)(v17 + 209) = a10;
  *(_QWORD *)(v17 + 200) = v47;
  *(_BYTE *)(v17 + 208) = a12 & 1;
  *(_BYTE *)(v17 + 96) = v60 & 1;
  *(_QWORD *)(v17 + 120) = v46;
  *(_BYTE *)(v17 + 128) = a14 & 1;
  *(_QWORD *)(v17 + 80) = a1;
  *(_QWORD *)(v17 + 88) = v61;
  v56 = *(_BYTE *)(a5 + 48);
  *(_QWORD *)(v17 + 104) = *(_QWORD *)(a5 + 40);
  *(_BYTE *)(v17 + 112) = v56;
  *(_QWORD *)(v17 + 72) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(v17 + 136) = a5;
  *(_BYTE *)(v17 + 241) = v45 & 1;
  return v17;
}

id sub_1BCB55574()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  id result;
  uint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;

  v1 = v0;
  v2 = sub_1BCB63B3C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(*(id *)(v1 + 248), sel_biologicalSex);
  if (v6)
  {
    v7 = v6;
    sub_1BCB6413C();

  }
  v8 = *(void **)(v1 + 248);
  v9 = (void *)objc_opt_self();
  v10 = v8;
  v11 = objc_msgSend(v9, sel_now);
  sub_1BCB63B18();

  v12 = (void *)sub_1BCB63B00();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v13 = objc_msgSend(v10, sel_bucketedUserAgeForCurrentDate_, v12);

  v14 = objc_msgSend(*(id *)(v1 + 248), sel_activePairedWatchProductType);
  if (v14)
  {
    v15 = v14;
    sub_1BCB6413C();

  }
  sub_1BCB55DBC();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BCB68AA0;
  *(_QWORD *)(inited + 32) = 0x6E616E65766F7270;
  *(_QWORD *)(inited + 40) = 0xEA00000000006563;
  swift_bridgeObjectRetain();
  v17 = sub_1BCB6410C();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 48) = v17;
  *(_QWORD *)(inited + 56) = 1885697139;
  *(_QWORD *)(inited + 64) = 0xE400000000000000;
  swift_bridgeObjectRetain();
  v18 = sub_1BCB6410C();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 72) = v18;
  *(_QWORD *)(inited + 80) = 0xD000000000000010;
  *(_QWORD *)(inited + 88) = 0x80000001BCB6B6B0;
  *(_QWORD *)(inited + 96) = sub_1BCB64364();
  *(_QWORD *)(inited + 104) = 0xD000000000000019;
  *(_QWORD *)(inited + 112) = 0x80000001BCB6B800;
  *(_QWORD *)(inited + 120) = sub_1BCB64364();
  strcpy((char *)(inited + 128), "biologicalSex");
  *(_WORD *)(inited + 142) = -4864;
  v19 = sub_1BCB6410C();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 144) = v19;
  *(_QWORD *)(inited + 152) = 6645601;
  *(_QWORD *)(inited + 160) = 0xE300000000000000;
  *(_QWORD *)(inited + 168) = v13;
  *(_QWORD *)(inited + 176) = 0xD000000000000016;
  *(_QWORD *)(inited + 184) = 0x80000001BCB6CB30;
  v20 = v13;
  v21 = sub_1BCB6410C();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 192) = v21;
  *(_QWORD *)(inited + 200) = 0xD000000000000016;
  *(_QWORD *)(inited + 208) = 0x80000001BCB6B780;
  *(_QWORD *)(inited + 216) = sub_1BCB64364();
  *(_QWORD *)(inited + 224) = 0xD000000000000013;
  *(_QWORD *)(inited + 232) = 0x80000001BCB6B7B0;
  *(_QWORD *)(inited + 240) = sub_1BCB64364();
  v22 = sub_1BCB2C364(inited);
  if (*(_QWORD *)(v1 + 152))
  {
    swift_bridgeObjectRetain();
    v23 = sub_1BCB6410C();
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v43 = v22;
    sub_1BCB0FB50(v23, 0xD000000000000015, 0x80000001BCB6B6D0, isUniquelyReferenced_nonNull_native);
    v22 = v43;
    swift_bridgeObjectRelease();
  }
  if (*(_BYTE *)(v1 + 160) != 2)
  {
    v25 = sub_1BCB64364();
    v26 = swift_isUniquelyReferenced_nonNull_native();
    v43 = v22;
    sub_1BCB0FB50(v25, 0xD00000000000001FLL, 0x80000001BCB6B6F0, v26);
    v22 = v43;
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v1 + 56))
  {
    swift_bridgeObjectRetain();
    v27 = sub_1BCB6410C();
    swift_bridgeObjectRelease();
    v28 = swift_isUniquelyReferenced_nonNull_native();
    v43 = v22;
    sub_1BCB0FB50(v27, 0x6E6F69746361, 0xE600000000000000, v28);
    v22 = v43;
    swift_bridgeObjectRelease();
  }
  if ((*(_BYTE *)(v1 + 176) & 1) == 0)
  {
    v29 = sub_1BCB64454();
    v30 = swift_isUniquelyReferenced_nonNull_native();
    v43 = v22;
    sub_1BCB0FB50(v29, 0xD000000000000013, 0x80000001BCB6B820, v30);
    v22 = v43;
    swift_bridgeObjectRelease();
  }
  if ((*(_BYTE *)(v1 + 192) & 1) == 0)
  {
    v31 = sub_1BCB64454();
    v32 = swift_isUniquelyReferenced_nonNull_native();
    v43 = v22;
    sub_1BCB0FB50(v31, 0xD00000000000001CLL, 0x80000001BCB6B730, v32);
    v22 = v43;
    swift_bridgeObjectRelease();
  }
  if (*(_BYTE *)(v1 + 209) == 2)
  {
    if ((*(_BYTE *)(v1 + 208) & 1) != 0)
      goto LABEL_17;
  }
  else
  {
    v35 = sub_1BCB64364();
    v36 = swift_isUniquelyReferenced_nonNull_native();
    v43 = v22;
    sub_1BCB0FB50(v35, 0xD000000000000018, 0x80000001BCB6B750, v36);
    v22 = v43;
    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(v1 + 208) & 1) != 0)
    {
LABEL_17:
      if (!*(_QWORD *)(v1 + 224))
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  v37 = sub_1BCB64454();
  v38 = swift_isUniquelyReferenced_nonNull_native();
  v43 = v22;
  sub_1BCB0FB50(v37, 0xD00000000000001DLL, 0x80000001BCB6B840, v38);
  v22 = v43;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v1 + 224))
  {
LABEL_18:
    swift_bridgeObjectRetain();
    v33 = sub_1BCB6410C();
    swift_bridgeObjectRelease();
    v34 = swift_isUniquelyReferenced_nonNull_native();
    v43 = v22;
    sub_1BCB0FB50(v33, 0x687469726F676C61, 0xED0000657079546DLL, v34);
    v22 = v43;
    swift_bridgeObjectRelease();
  }
LABEL_19:
  if (*(_BYTE *)(v1 + 240) == 1)
  {

    return (id)v22;
  }
  result = (id)HKStringFromMedicationScheduleType();
  if (result)
  {
    v40 = (uint64_t)result;
    v41 = swift_isUniquelyReferenced_nonNull_native();
    v43 = v22;
    sub_1BCB0FB50(v40, 0x656C756465686373, 0xEC00000065707954, v41);
    v22 = v43;

    swift_bridgeObjectRelease();
    return (id)v22;
  }
  __break(1u);
  return result;
}

unint64_t sub_1BCB55C40()
{
  uint64_t v0;

  sub_1BCB6479C();
  v0 = swift_bridgeObjectRelease();
  sub_1BCB55C40(v0);
  sub_1BCB641F0();
  swift_bridgeObjectRelease();
  sub_1BCB641F0();
  sub_1BCB55574();
  sub_1BCB06068();
  sub_1BCB640C4();
  sub_1BCB641F0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000021;
}

uint64_t MedicationListOnboardingMetric.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t MedicationListOnboardingMetric.__deallocating_deinit()
{
  MedicationListOnboardingMetric.deinit();
  return swift_deallocClassInstance();
}

unint64_t sub_1BCB55D9C()
{
  return sub_1BCB55C40();
}

void sub_1BCB55DBC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF488630)
  {
    sub_1BCB55E10();
    v0 = sub_1BCB649DC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF488630);
  }
}

void sub_1BCB55E10()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF488638)
  {
    sub_1BCB06068();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF488638);
  }
}

uint64_t type metadata accessor for MedicationListOnboardingMetric()
{
  return objc_opt_self();
}

uint64_t method lookup function for MedicationListOnboardingMetric()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static MedicationListOnboardingMetric.eventName.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 712))();
}

uint64_t dispatch thunk of MedicationListOnboardingMetric.__allocating_init(step:action:hasSuggestionsFromHealthRecords:context:itemRank:timeSinceUserLastScannedAMed:didLastScanFallBackToOCR:itemLevelRankOfMatchInOCRList:algorithmType:dataSource:hasScheduledEndDate:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(v7 + 720))(a1, a2, a3 & 1, a4, a5, a6, a7 & 1);
}

uint64_t dispatch thunk of MedicationListOnboardingMetric.eventPayload()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 728))();
}

uint64_t dispatch thunk of MedicationListOnboardingMetric.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 736))();
}

uint64_t sub_1BCB55F28(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char *v21;
  void (*v22)(char *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38[32];
  uint64_t v39;

  v27 = a5;
  v28 = a8;
  v33 = a1;
  v34 = a2;
  v26 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v35 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v31 = (char *)&v24 - v13;
  v36 = a4;
  MEMORY[0x1E0C80A78](v12);
  v30 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v24 - v16;
  v18 = sub_1BCB6446C();
  if (!v18)
    return sub_1BCB64310();
  v19 = v18;
  v25 = v15;
  v39 = sub_1BCB64874();
  v32 = sub_1BCB64880();
  sub_1BCB64838();
  v36 = v17;
  result = sub_1BCB64460();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    v21 = v31;
    while (1)
    {
      v22 = (void (*)(char *, _QWORD))sub_1BCB644B4();
      (*(void (**)(char *))(v11 + 16))(v21);
      v22(v38, 0);
      v23 = v37;
      v33(v21, v35);
      if (v23)
        break;
      v37 = 0;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
      sub_1BCB64868();
      sub_1BCB64490();
      if (!--v19)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
        return v39;
      }
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v28, v35, v27);
  }
  return result;
}

uint64_t Array.uniqueSortedValues<A>(using:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  v24 = a1;
  v3 = *(_QWORD *)(*a1 + *MEMORY[0x1E0DEE2A8] + 8);
  v23 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v22 - v5;
  v8 = *v7;
  v9 = *(_QWORD *)(*v7 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v4);
  v12 = (char *)&v22 - v11;
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E10]), sel_init);
  v14 = swift_bridgeObjectRetain();
  if (MEMORY[0x1BCCFCAAC](v14, v8))
  {
    v22 = v10;
    v15 = 0;
    do
    {
      v16 = sub_1BCB64328();
      sub_1BCB642F8();
      if ((v16 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v12, a2+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v15, v8);
        v17 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_10;
      }
      else
      {
        result = sub_1BCB647B4();
        if (v22 != 8)
        {
          __break(1u);
          return result;
        }
        v25 = result;
        (*(void (**)(char *, uint64_t *, uint64_t))(v9 + 16))(v12, &v25, v8);
        swift_unknownObjectRelease();
        v17 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_10:
          __break(1u);
          break;
        }
      }
      swift_getAtKeyPath();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      v18 = sub_1BCB649E8();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v3);
      objc_msgSend(v13, sel_addObject_, v18);
      swift_unknownObjectRelease();
      ++v15;
    }
    while (v17 != MEMORY[0x1BCCFCAAC](a2, v8));
  }
  swift_bridgeObjectRelease();
  v20 = objc_msgSend(v13, sel_array);
  sub_1BCB642D4();

  v21 = sub_1BCB64928();
  swift_bridgeObjectRelease();
  if (!v21)
    v21 = sub_1BCB64310();

  return v21;
}

uint64_t Array.unique<A>(using:)()
{
  uint64_t v0;
  uint64_t v1;

  sub_1BCB640A0();
  v0 = sub_1BCB64358();
  swift_bridgeObjectRetain();
  MEMORY[0x1BCCFD874](MEMORY[0x1E0DEAF60], v0);
  v1 = sub_1BCB64814();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t Array<A>.filtered(with:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (!(a1 >> 62))
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_3;
    return MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain();
  v24 = sub_1BCB648D4();
  swift_bridgeObjectRelease();
  if (!v24)
    return MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v6 = sub_1BCB648D4();
  v17 = swift_bridgeObjectRelease();
  if (!v6)
  {
    v9 = MEMORY[0x1E0DEE9D8];
LABEL_14:
    MEMORY[0x1E0C80A78](v17);
    v21 = sub_1BCB64358();
    sub_1BCB3C644();
    MEMORY[0x1BCCFD874](MEMORY[0x1E0DEAF38], v21);
    v22 = sub_1BCB6428C();
    v23 = sub_1BCB574C0(v22, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v23;
  }
LABEL_3:
  v27 = MEMORY[0x1E0DEE9D8];
  result = sub_1BCB24858(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    v25 = a2;
    v26 = a3;
    v8 = 0;
    v9 = v27;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v10 = (id)MEMORY[0x1BCCFCF20](v8, a1);
      else
        v10 = *(id *)(a1 + 8 * v8 + 32);
      v11 = v10;
      v12 = objc_msgSend(v10, sel_medicationIdentifier, v25, v26);
      if (v12)
      {
        v13 = v12;
        v14 = sub_1BCB6413C();
        v16 = v15;

      }
      else
      {

        v14 = 0;
        v16 = 0;
      }
      v19 = *(_QWORD *)(v27 + 16);
      v18 = *(_QWORD *)(v27 + 24);
      if (v19 >= v18 >> 1)
        v17 = sub_1BCB24858(v18 > 1, v19 + 1, 1);
      ++v8;
      *(_QWORD *)(v27 + 16) = v19 + 1;
      v20 = v27 + 16 * v19;
      *(_QWORD *)(v20 + 32) = v14;
      *(_QWORD *)(v20 + 40) = v16;
    }
    while (v6 != v8);
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t HKMedicationsDeviceInfo.displayString.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, sel_name);
  v2 = sub_1BCB6413C();

  return v2;
}

uint64_t sub_1BCB567FC()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*v0, sel_name);
  v2 = sub_1BCB6413C();

  return v2;
}

uint64_t HKMedicationUserDomainConcept.displayString.getter()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v1 = v0;
  v2 = objc_msgSend(v1, sel_userSpecifiedName);
  if (!v2)
    goto LABEL_6;
  v3 = v2;
  v4 = sub_1BCB6413C();
  v6 = v5;

  v7 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v7 = v4 & 0xFFFFFFFFFFFFLL;
  if (!v7)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    v4 = sub_1BCB572B8();
  }

  return v4;
}

uint64_t sub_1BCB568D8()
{
  return HKMedicationUserDomainConcept.displayString.getter();
}

uint64_t Array.numericallySorted(by:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t result;
  uint64_t v7;
  _QWORD v8[6];

  v2 = sub_1BCB642C8();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = sub_1BCB576A8;
  *(_QWORD *)(v3 + 24) = a1;
  v8[4] = sub_1BCB576C0;
  v8[5] = v3;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1107296256;
  v8[2] = sub_1BCB56C68;
  v8[3] = &block_descriptor_11;
  v4 = _Block_copy(v8);
  swift_retain();
  swift_retain();
  swift_release();
  v5 = objc_msgSend((id)v2, sel_sortedArrayUsingComparator_, v4);

  _Block_release(v4);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v2 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_1BCB642D4();

    v7 = sub_1BCB6488C();
    swift_release();
    swift_bridgeObjectRelease();
    return v7;
  }
  return result;
}

uint64_t sub_1BCB56A7C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];

  v5 = *a3;
  sub_1BCAFC448(0, &qword_1EDA13898, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v22 - v8;
  v10 = *(_QWORD *)(v5 + *MEMORY[0x1E0DEE2A8]);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v7);
  v13 = (char *)&v22 - v12;
  sub_1BCB053D0(a1, (uint64_t)v24);
  swift_dynamicCast();
  swift_getAtKeyPath();
  v15 = v22;
  v14 = v23;
  v16 = *(void (**)(char *, uint64_t))(v11 + 8);
  v16(v13, v10);
  sub_1BCB053D0(a2, (uint64_t)v24);
  swift_dynamicCast();
  swift_getAtKeyPath();
  v17 = v22;
  v18 = v23;
  v16(v13, v10);
  v24[0] = v15;
  v24[1] = v14;
  v22 = v17;
  v23 = v18;
  v19 = sub_1BCB63B90();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v9, 1, 1, v19);
  sub_1BCAF6098();
  v20 = sub_1BCB6467C();
  sub_1BCB0C238((uint64_t)v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t sub_1BCB56C68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_QWORD *, _QWORD *);
  uint64_t v6;
  _QWORD v8[4];
  _QWORD v9[4];

  v5 = *(uint64_t (**)(_QWORD *, _QWORD *))(a1 + 32);
  v9[3] = swift_getObjectType();
  v9[0] = a2;
  v8[3] = swift_getObjectType();
  v8[0] = a3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v6 = v5(v9, v8);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v8);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
  return v6;
}

uint64_t sub_1BCB56CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  _QWORD v21[2];

  v7 = *(_QWORD *)(a6 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)v21 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)v21 - v15;
  v17(v14);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v16, a6);
  sub_1BCB64448();
  v18 = sub_1BCB64430();
  v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  v19(v13, a6);
  v19(v16, a6);
  return v18 & 1;
}

uint64_t Array<A>.bulletedNames()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;

  v9 = a1;
  v8[2] = a2;
  v8[3] = a3;
  v3 = sub_1BCB64358();
  v4 = MEMORY[0x1BCCFD874](MEMORY[0x1E0DEAF50], v3);
  v9 = sub_1BCB55F28((void (*)(char *, char *))sub_1BCB576F8, (uint64_t)v8, v3, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  sub_1BCB57714();
  sub_1BCB0AA88();
  v6 = sub_1BCB640F4();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1BCB56ED8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;

  v22 = a3;
  sub_1BCAFC448(0, &qword_1EDA13898, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v21 - v6;
  v8 = sub_1BCB63B90();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  if (qword_1EDA14148 != -1)
    swift_once();
  v9 = (void *)qword_1EDA14130;
  sub_1BCAFC448(0, (unint64_t *)&qword_1EDA13A08, (uint64_t (*)(uint64_t))sub_1BCB0C1E4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1BCB66020;
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  v12 = v9;
  swift_bridgeObjectRetain();
  v13 = v11(a1, a2);
  v15 = v14;
  *(_QWORD *)(v10 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v10 + 64) = sub_1BCAFC3C8();
  *(_QWORD *)(v10 + 32) = v13;
  *(_QWORD *)(v10 + 40) = v15;
  sub_1BCB63A34();
  v16 = sub_1BCB64160();
  v18 = v17;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = sub_1BCB0C238((uint64_t)v7);
  v20 = v22;
  *v22 = v16;
  v20[1] = v18;
  return result;
}

uint64_t Array<A>.formattedNames()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];

  v6 = sub_1BCB64628();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v18 - v9;
  v11 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v8);
  v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = a1;
  v14 = sub_1BCB64358();
  MEMORY[0x1BCCFD874](MEMORY[0x1E0DEAF50], v14);
  sub_1BCB6449C();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, a2);
    if (MEMORY[0x1BCCFCAA0](a1, a2) < 2)
      v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
    else
      v16 = Array<A>.bulletedNames()(a1, a2, a3);
    v15 = v16;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a2);
  }
  return v15;
}

id sub_1BCB57260@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  id result;
  id v5;

  v3 = *a1;
  objc_opt_self();
  result = (id)swift_dynamicCastObjCClass();
  v5 = result;
  if (result)
    result = v3;
  *a2 = v5;
  return result;
}

uint64_t sub_1BCB572B8()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;

  v1 = objc_msgSend(v0, sel_freeTextMedicationName);
  if (v1)
  {
    v2 = v1;
    v3 = sub_1BCB6413C();
  }
  else
  {
    KeyPath = swift_getKeyPath();
    v3 = sub_1BCB1FCE0(KeyPath, 0x53555F6E65, 0xE500000000000000);
    v6 = v5;
    swift_release();
    if (v6)
      return v3;
    v7 = swift_getKeyPath();
    v8 = v0;
    v3 = sub_1BCB1FCE0(v7, 0x53555F6E65, 0xE500000000000000);
    v10 = v9;
    swift_release();
    if (v10)
    {

      return v3;
    }
    v11 = swift_getKeyPath();
    v12 = v8;
    v3 = sub_1BCB1FCE0(v11, 0x53555F6E65, 0xE500000000000000);
    v14 = v13;

    swift_release();
    if (v14)
      return v3;
    if (qword_1EDA14148 != -1)
      swift_once();
    v2 = (id)qword_1EDA14130;
    swift_bridgeObjectRetain();
    v3 = sub_1BCB63A34();
    swift_bridgeObjectRelease();
  }

  return v3;
}

uint64_t sub_1BCB57484(uint64_t a1)
{
  uint64_t *v1;

  return sub_1BCB56CF0(a1, v1[5], v1[6], v1[7], v1[2], v1[3]) & 1;
}

id sub_1BCB574A8@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1BCB57260(a1, a2);
}

uint64_t sub_1BCB574C0(unint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  void *v8;
  id v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;

  v2 = a1;
  v21 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_24;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      v18 = v2;
      v4 = 0;
      v5 = v2 & 0xFFFFFFFFFFFFFF8;
      v6 = (_QWORD *)(v2 + 32);
      v19 = v2 & 0xC000000000000001;
      while (v19)
      {
        v7 = (id)MEMORY[0x1BCCFCF20](v4, v18);
LABEL_9:
        v8 = v7;
        if (__OFADD__(v4++, 1))
          goto LABEL_23;
        v10 = objc_msgSend(v7, sel_semanticIdentifier);
        v11 = objc_msgSend(v10, sel_stringValue);

        v12 = sub_1BCB6413C();
        v2 = (unint64_t)v13;

        v14 = *(_QWORD *)(a2 + 16);
        if (v14)
        {
          v15 = (_QWORD *)(a2 + 40);
          while (1)
          {
            if (*v15)
            {
              v16 = *(v15 - 1) == v12 && *v15 == v2;
              if (v16 || (sub_1BCB649F4() & 1) != 0)
                break;
            }
            v15 += 2;
            if (!--v14)
              goto LABEL_4;
          }
          swift_bridgeObjectRelease();
          sub_1BCB64820();
          sub_1BCB64850();
          sub_1BCB6485C();
          v2 = (unint64_t)&v21;
          sub_1BCB6482C();
        }
        else
        {
LABEL_4:

          swift_bridgeObjectRelease();
        }
        if (v4 == v3)
          return v21;
      }
      if (v4 < *(_QWORD *)(v5 + 16))
        break;
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      v3 = sub_1BCB648D4();
      if (!v3)
        return MEMORY[0x1E0DEE9D8];
    }
    v7 = (id)v6[v4];
    goto LABEL_9;
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1BCB576A8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1BCB56A7C(a1, a2, v2);
}

uint64_t sub_1BCB576B0()
{
  return swift_deallocObject();
}

uint64_t sub_1BCB576C0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t sub_1BCB576F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1BCB56ED8(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void sub_1BCB57714()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EDA14180)
  {
    v0 = sub_1BCB64358();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EDA14180);
  }
}

uint64_t dispatch thunk of BulletedItem.displayString.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t MedicationVisualizationConfig.backgroundColorValue.getter()
{
  type metadata accessor for MedicationVisualizationConfig(0);
  sub_1BCB066B8(0, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
  return sub_1BCB64034();
}

uint64_t type metadata accessor for MedicationVisualizationConfig(uint64_t a1)
{
  return sub_1BCAFBE48(a1, (uint64_t *)&unk_1EDA13EF8);
}

uint64_t MedicationVisualizationConfigVersion.init(rawValue:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 1;
  return result;
}

uint64_t MedicationVisualizationConfigVersion.rawValue.getter()
{
  return 1;
}

uint64_t sub_1BCB577FC()
{
  sub_1BCB64A90();
  sub_1BCB64A9C();
  return sub_1BCB64AC0();
}

uint64_t sub_1BCB5783C()
{
  return sub_1BCB64A9C();
}

uint64_t sub_1BCB57860()
{
  sub_1BCB64A90();
  sub_1BCB64A9C();
  return sub_1BCB64AC0();
}

_QWORD *sub_1BCB5789C@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 1;
  return result;
}

void sub_1BCB578B0(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void MedicationVisualizationConfig.shapeName.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t MedicationVisualizationConfig.fragmentsColors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MedicationVisualizationConfig.backgroundColor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MedicationVisualizationConfig(0) + 24);
  sub_1BCB066B8(0, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t MedicationVisualizationConfig.init(shapeName:fragmentsColors:backgroundColor:currentVersion:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a4 = *a1;
  *(_QWORD *)(a4 + 8) = a2;
  v5 = a4 + *(int *)(type metadata accessor for MedicationVisualizationConfig(0) + 24);
  sub_1BCB066B8(0, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, a3, v6);
}

uint64_t MedicationVisualizationConfig.init(shapeName:fragmentsColors:backgroundColor:currentVersion:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = *a1;
  if (*(_QWORD *)(a2 + 16))
  {
    sub_1BCB5A278(0, (unint64_t *)&qword_1EF487980, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))MEMORY[0x1E0DECD58]);
    v7 = sub_1BCB648F8();
  }
  else
  {
    v7 = MEMORY[0x1E0DEE9E0];
  }
  v13 = v7;
  v8 = swift_bridgeObjectRetain();
  sub_1BCB59614(v8, 1, &v13);
  swift_bridgeObjectRelease();
  v9 = v13;
  *(_BYTE *)a4 = v6;
  *(_QWORD *)(a4 + 8) = v9;
  v10 = a4 + *(int *)(type metadata accessor for MedicationVisualizationConfig(0) + 24);
  sub_1BCB066B8(0, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a3, v11);
}

void MedicationVisualizationConfig.init(shapeName:fragmentsColors:backgroundColor:currentVersion:)(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_1BCB066B8(0, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v19 - v11;
  v13 = *a1;
  sub_1BCAFC2E0(0, &qword_1EDA13F10);
  v14 = a3;
  sub_1BCB64058();
  if (*(_QWORD *)(a2 + 16))
  {
    sub_1BCB5A278(0, (unint64_t *)&qword_1EF487980, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))MEMORY[0x1E0DECD58]);
    v15 = sub_1BCB648F8();
  }
  else
  {
    v15 = MEMORY[0x1E0DEE9E0];
  }
  v20 = v15;
  v16 = swift_bridgeObjectRetain();
  sub_1BCB59614(v16, 1, &v20);
  swift_bridgeObjectRelease();
  v17 = v20;
  *(_BYTE *)a4 = v13;
  *(_QWORD *)(a4 + 8) = v17;
  v18 = type metadata accessor for MedicationVisualizationConfig(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a4 + *(int *)(v18 + 24), v12, v9);

}

uint64_t MedicationVisualizationConfig.init(jsonString:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = a1;
  v1 = type metadata accessor for MedicationVisualizationConfig(0);
  v15 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1BCB64184();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCB63914();
  swift_allocObject();
  sub_1BCB63908();
  sub_1BCB64178();
  v8 = sub_1BCB64148();
  v10 = v9;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v10 >> 60 == 15)
    v11 = 0;
  else
    v11 = v8;
  if (v10 >> 60 == 15)
    v10 = 0xC000000000000000;
  sub_1BCB5A42C(&qword_1EDA14330, (uint64_t)&protocol conformance descriptor for MedicationVisualizationConfig);
  v12 = v17;
  sub_1BCB638FC();
  sub_1BCB37234(v11, v10);
  result = swift_release();
  if (!v12)
  {
    v14 = v16;
    sub_1BCAFC578((uint64_t)v3, v16, type metadata accessor for MedicationVisualizationConfig);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v14, 0, 1, v1);
  }
  return result;
}

uint64_t MedicationVisualizationConfig.jsonDataString.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v0 = sub_1BCB64184();
  MEMORY[0x1E0C80A78](v0);
  v1 = sub_1BCB6392C();
  MEMORY[0x1E0C80A78](v1);
  sub_1BCB6395C();
  swift_allocObject();
  sub_1BCB63950();
  sub_1BCB63920();
  sub_1BCB63938();
  type metadata accessor for MedicationVisualizationConfig(0);
  sub_1BCB5A42C(&qword_1EF488968, (uint64_t)&protocol conformance descriptor for MedicationVisualizationConfig);
  v2 = sub_1BCB63944();
  v4 = v3;
  sub_1BCB64178();
  v5 = sub_1BCB64154();
  swift_release();
  sub_1BCB37234(v2, v4);
  return v5;
}

uint64_t MedicationVisualizationConfig.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  MedicationShape.rawValue.getter();
  sub_1BCB641CC();
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v1 + 8);
  swift_bridgeObjectRetain();
  sub_1BCB59B2C(a1, v3);
  swift_bridgeObjectRelease();
  type metadata accessor for MedicationVisualizationConfig(0);
  sub_1BCB066B8(0, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
  sub_1BCB5B150(&qword_1EF488970, &qword_1EF488978, MEMORY[0x1E0DEFCF8], MEMORY[0x1E0CB4360]);
  sub_1BCB640DC();
  return sub_1BCB64A9C();
}

uint64_t sub_1BCB58080(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t result;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t, uint64_t);
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  char *v63;
  char v64;
  void (*v65)(char *, uint64_t);
  int64_t v66;
  uint64_t v67;
  int64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  int64_t v74;
  _BOOL4 v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;

  sub_1BCB066B8(0, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
  v5 = v4;
  v78 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v70 = (char *)&v66 - v6;
  sub_1BCB5B09C();
  v73 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCB10A58();
  v81 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v66 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v66 - v17;
  sub_1BCB5B0FC();
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (int64_t *)((char *)&v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = MEMORY[0x1E0C80A78](v20);
  v25 = (int64_t *)((char *)&v66 - v24);
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v74 = 0;
  v71 = a1;
  v72 = v22;
  v28 = *(_QWORD *)(a1 + 64);
  v27 = a1 + 64;
  v26 = v28;
  v29 = 1 << *(_BYTE *)(v27 - 32);
  v30 = -1;
  if (v29 < 64)
    v30 = ~(-1 << v29);
  v31 = v30 & v26;
  v67 = v27;
  v68 = (unint64_t)(v29 + 63) >> 6;
  v66 = v68 - 1;
  v76 = v9;
  v77 = v18;
  v79 = (int64_t *)((char *)&v66 - v24);
  v69 = v13;
  while (v31)
  {
    v80 = (v31 - 1) & v31;
    v32 = __clz(__rbit64(v31)) | (v74 << 6);
LABEL_8:
    v33 = *(_QWORD *)(v71 + 56);
    v34 = (_QWORD *)(*(_QWORD *)(v71 + 48) + 32 * v32);
    v35 = v34[1];
    v36 = v34[2];
    v37 = v34[3];
    *v22 = *v34;
    v22[1] = v35;
    v22[2] = v36;
    v22[3] = v37;
    v38 = v33 + *(_QWORD *)(v81 + 72) * v32;
    sub_1BCAFC4A0();
    v40 = v39;
    sub_1BCAFCD6C(v38, (uint64_t)v22 + *(int *)(v39 + 48), (uint64_t (*)(_QWORD))sub_1BCB10A58);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v22, 0, 1, v40);
    swift_bridgeObjectRetain();
    sub_1BCAFC5BC(v36, v37);
    v25 = v79;
LABEL_30:
    sub_1BCAFC578((uint64_t)v22, (uint64_t)v25, (uint64_t (*)(_QWORD))sub_1BCB5B0FC);
    sub_1BCAFC4A0();
    v45 = (*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 48))(v25, 1, v40) == 1;
    result = v45;
    if (v45)
      return result;
    v75 = v45;
    v46 = (uint64_t)v16;
    v47 = v5;
    v48 = (uint64_t)v25 + *(int *)(v40 + 48);
    v49 = *v25;
    v50 = v25[1];
    v52 = v25[2];
    v51 = v25[3];
    v53 = (uint64_t)v77;
    sub_1BCAFC578(v48, (uint64_t)v77, (uint64_t (*)(_QWORD))sub_1BCB10A58);
    v54 = sub_1BCB0E6BC(v49, v50, v52, v51);
    LOBYTE(v49) = v55;
    swift_bridgeObjectRelease();
    sub_1BCB10A44(v52, v51);
    if ((v49 & 1) == 0)
      goto LABEL_41;
    v16 = (char *)v46;
    sub_1BCAFCD6C(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v81 + 72) * v54, v46, (uint64_t (*)(_QWORD))sub_1BCB10A58);
    v56 = (uint64_t)v76;
    v57 = (uint64_t)&v76[*(int *)(v73 + 48)];
    sub_1BCAFCD6C(v46, (uint64_t)v76, (uint64_t (*)(_QWORD))sub_1BCB10A58);
    sub_1BCAFCD6C(v53, v57, (uint64_t (*)(_QWORD))sub_1BCB10A58);
    v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
    v5 = v47;
    if (v58(v56, 1, v47) == 1)
    {
      v59 = v58(v57, 1, v47);
      v22 = v72;
      if (v59 != 1)
        goto LABEL_40;
      sub_1BCAFC40C(v56, (uint64_t (*)(_QWORD))sub_1BCB10A58);
      sub_1BCAFC40C(v46, (uint64_t (*)(_QWORD))sub_1BCB10A58);
      result = sub_1BCAFC40C(v53, (uint64_t (*)(_QWORD))sub_1BCB10A58);
      v25 = v79;
      v31 = v80;
    }
    else
    {
      v60 = (uint64_t)v69;
      sub_1BCAFCD6C(v56, (uint64_t)v69, (uint64_t (*)(_QWORD))sub_1BCB10A58);
      v61 = v58(v57, 1, v47);
      v22 = v72;
      if (v61 == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v60, v5);
LABEL_40:
        sub_1BCAFC40C(v56, (uint64_t (*)(_QWORD))sub_1BCB5B09C);
        sub_1BCAFC40C((uint64_t)v16, (uint64_t (*)(_QWORD))sub_1BCB10A58);
LABEL_41:
        sub_1BCAFC40C(v53, (uint64_t (*)(_QWORD))sub_1BCB10A58);
        return 0;
      }
      v62 = v78;
      v63 = v70;
      (*(void (**)(char *, uint64_t, uint64_t))(v78 + 32))(v70, v57, v5);
      sub_1BCB5B150(&qword_1EF488A80, (unint64_t *)&qword_1EF4883E8, MEMORY[0x1E0DEFD00], MEMORY[0x1E0CB4368]);
      v64 = sub_1BCB64100();
      v65 = *(void (**)(char *, uint64_t))(v62 + 8);
      v65(v63, v5);
      v65((char *)v60, v5);
      sub_1BCAFC40C((uint64_t)v76, (uint64_t (*)(_QWORD))sub_1BCB10A58);
      sub_1BCAFC40C((uint64_t)v16, (uint64_t (*)(_QWORD))sub_1BCB10A58);
      sub_1BCAFC40C((uint64_t)v77, (uint64_t (*)(_QWORD))sub_1BCB10A58);
      v25 = v79;
      v31 = v80;
      result = v75;
      if ((v64 & 1) == 0)
        return result;
    }
  }
  v41 = v74 + 1;
  if (__OFADD__(v74, 1))
  {
    __break(1u);
    goto LABEL_45;
  }
  if (v41 >= v68)
  {
LABEL_29:
    sub_1BCAFC4A0();
    v40 = v44;
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v22, 1, 1, v44);
    v80 = 0;
    goto LABEL_30;
  }
  v42 = *(_QWORD *)(v67 + 8 * v41);
  if (v42)
  {
LABEL_12:
    v80 = (v42 - 1) & v42;
    v32 = __clz(__rbit64(v42)) + (v41 << 6);
    v74 = v41;
    goto LABEL_8;
  }
  v43 = v74 + 2;
  ++v74;
  if (v41 + 1 >= v68)
    goto LABEL_29;
  v42 = *(_QWORD *)(v67 + 8 * v43);
  if (v42)
    goto LABEL_15;
  v74 = v41 + 1;
  if (v41 + 2 >= v68)
    goto LABEL_29;
  v42 = *(_QWORD *)(v67 + 8 * (v41 + 2));
  if (v42)
  {
    v41 += 2;
    goto LABEL_12;
  }
  v74 = v41 + 2;
  if (v41 + 3 >= v68)
    goto LABEL_29;
  v42 = *(_QWORD *)(v67 + 8 * (v41 + 3));
  if (v42)
  {
    v41 += 3;
    goto LABEL_12;
  }
  v43 = v41 + 4;
  v74 = v41 + 3;
  if (v41 + 4 >= v68)
    goto LABEL_29;
  v42 = *(_QWORD *)(v67 + 8 * v43);
  if (v42)
  {
LABEL_15:
    v41 = v43;
    goto LABEL_12;
  }
  while (1)
  {
    v41 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v41 >= v68)
    {
      v74 = v66;
      goto LABEL_29;
    }
    v42 = *(_QWORD *)(v67 + 8 * v41);
    ++v43;
    if (v42)
      goto LABEL_12;
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t MedicationVisualizationConfig.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v3[4];

  sub_1BCB64A90();
  MedicationShape.rawValue.getter();
  sub_1BCB641CC();
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  sub_1BCB59B2C(v3, v1);
  swift_bridgeObjectRelease();
  type metadata accessor for MedicationVisualizationConfig(0);
  sub_1BCB066B8(0, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
  sub_1BCB5B150(&qword_1EF488970, &qword_1EF488978, MEMORY[0x1E0DEFCF8], MEMORY[0x1E0CB4360]);
  sub_1BCB640DC();
  sub_1BCB64A9C();
  return sub_1BCB64AC0();
}

uint64_t sub_1BCB58808(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  MedicationShape.rawValue.getter();
  sub_1BCB641CC();
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v1 + 8);
  swift_bridgeObjectRetain();
  sub_1BCB59B2C(a1, v3);
  swift_bridgeObjectRelease();
  sub_1BCB066B8(0, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
  sub_1BCB5B150(&qword_1EF488970, &qword_1EF488978, MEMORY[0x1E0DEFCF8], MEMORY[0x1E0CB4360]);
  sub_1BCB640DC();
  return sub_1BCB64A9C();
}

uint64_t sub_1BCB58900()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v3[4];

  sub_1BCB64A90();
  MedicationShape.rawValue.getter();
  sub_1BCB641CC();
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  sub_1BCB59B2C(v3, v1);
  swift_bridgeObjectRelease();
  sub_1BCB066B8(0, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
  sub_1BCB5B150(&qword_1EF488970, &qword_1EF488978, MEMORY[0x1E0DEFCF8], MEMORY[0x1E0CB4360]);
  sub_1BCB640DC();
  sub_1BCB64A9C();
  return sub_1BCB64AC0();
}

uint64_t sub_1BCB58A08()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCB58A3C + 4 * byte_1BCB68D40[*v0]))(0x6D614E6570616873, 0xE900000000000065);
}

uint64_t sub_1BCB58A3C()
{
  return 0x746E656D67617266;
}

uint64_t sub_1BCB58A60()
{
  return 0x756F72676B636162;
}

uint64_t sub_1BCB58A84()
{
  return 0x56746E6572727563;
}

uint64_t sub_1BCB58AA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCB5AC5C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCB58ACC()
{
  return 0;
}

void sub_1BCB58AD8(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1BCB58AE4()
{
  sub_1BCB5A234();
  return sub_1BCB64AF0();
}

uint64_t sub_1BCB58B0C()
{
  sub_1BCB5A234();
  return sub_1BCB64AFC();
}

uint64_t sub_1BCB58B34(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[16];
  uint64_t v12;
  char v13;
  char v14;
  char v15;

  v3 = v1;
  sub_1BCB5AE8C(0, &qword_1EF488980, MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = &v11[-v8];
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_1BCB5A234();
  sub_1BCB64AE4();
  v15 = 3;
  sub_1BCB649A0();
  if (!v2)
  {
    v14 = *v3;
    MedicationShape.rawValue.getter();
    v13 = 0;
    sub_1BCB64994();
    swift_bridgeObjectRelease();
    v12 = *((_QWORD *)v3 + 1);
    v11[15] = 1;
    sub_1BCB5A278(0, &qword_1EF488990, MEMORY[0x1E0DEA048]);
    sub_1BCB5A2E4();
    sub_1BCB649AC();
    type metadata accessor for MedicationVisualizationConfig.MedicationVisualizationConfigV1(0);
    v11[14] = 2;
    sub_1BCB066B8(0, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    sub_1BCB5AEE8(&qword_1EF488988, MEMORY[0x1E0CB4358]);
    sub_1BCB649AC();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1BCB58D60@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  Swift::String v13;
  char v14;
  void (*v15)(void);
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;

  v18 = a2;
  sub_1BCB066B8(0, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
  v21 = v3;
  v19 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v20 = (char *)&v17 - v4;
  sub_1BCB5AE8C(0, &qword_1EDA144C0, MEMORY[0x1E0DED048]);
  v22 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v17 - v7;
  v9 = type metadata accessor for MedicationVisualizationConfig.MedicationVisualizationConfigV1(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_1BCB5A234();
  v12 = (uint64_t)v23;
  sub_1BCB64AD8();
  if (v12)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v17 = (char *)v9;
  v23 = a1;
  v27 = 0;
  v13._countAndFlagsBits = sub_1BCB64958();
  MedicationShape.init(rawValue:)(v13);
  v14 = v28;
  if (v28 == 48)
    v14 = 0;
  *v11 = v14;
  v26 = 2;
  sub_1BCB5AEE8(&qword_1EF488A60, MEMORY[0x1E0CB4370]);
  sub_1BCB64964();
  v15 = *(void (**)(void))(v19 + 32);
  v17 = &v11[*((int *)v17 + 6)];
  v15();
  sub_1BCB5A278(0, &qword_1EF488990, MEMORY[0x1E0DEA048]);
  v25 = 1;
  sub_1BCB5AF48();
  sub_1BCB64964();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v22);
  *((_QWORD *)v11 + 1) = v24;
  sub_1BCAFCD6C((uint64_t)v11, v18, type metadata accessor for MedicationVisualizationConfig.MedicationVisualizationConfigV1);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v23);
  return sub_1BCAFC40C((uint64_t)v11, type metadata accessor for MedicationVisualizationConfig.MedicationVisualizationConfigV1);
}

uint64_t sub_1BCB59068@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BCB58D60(a1, a2);
}

uint64_t sub_1BCB5907C(_QWORD *a1)
{
  return sub_1BCB58B34(a1);
}

uint64_t MedicationVisualizationConfig.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25[5];
  uint64_t v26;

  v5 = type metadata accessor for MedicationVisualizationConfig.MedicationVisualizationConfigV1(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v25[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCB5A1F0(a1, (uint64_t)v25);
  sub_1BCB58D60(v25, (uint64_t)v7);
  if (v2)
  {
    if (qword_1EDA14510 != -1)
      swift_once();
    v8 = sub_1BCB63DDC();
    __swift_project_value_buffer(v8, (uint64_t)qword_1EDA14518);
    v9 = v2;
    v10 = v2;
    v11 = sub_1BCB63DD0();
    v12 = sub_1BCB644FC();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc();
      v14 = (_QWORD *)swift_slowAlloc();
      v24 = swift_slowAlloc();
      v25[0] = v24;
      *(_DWORD *)v13 = 136315394;
      v26 = sub_1BCB010C8(0xD00000000000001DLL, 0x80000001BCB68D40, v25);
      sub_1BCB64640();
      *(_WORD *)(v13 + 12) = 2112;
      v15 = v2;
      v16 = _swift_stdlib_bridgeErrorToNSError();
      v26 = v16;
      sub_1BCB64640();
      *v14 = v16;

      _os_log_impl(&dword_1BCAF3000, v11, v12, "[%s] Unable to decode MedicationVisualizationConfig with error: '%@'\nThis might be a newer config that we don't know how to decode.'", (uint8_t *)v13, 0x16u);
      sub_1BCB066B8(0, (unint64_t *)&qword_1EF4878A0, (unint64_t *)&qword_1EDA139E0, 0x1E0DE7910, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      swift_arrayDestroy();
      MEMORY[0x1BCCFD928](v14, -1, -1);
      v17 = v24;
      swift_arrayDestroy();
      MEMORY[0x1BCCFD928](v17, -1, -1);
      MEMORY[0x1BCCFD928](v13, -1, -1);
    }
    else
    {

    }
    swift_willThrow();
    return __swift_destroy_boxed_opaque_existential_0(a1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    v18 = *v7;
    v19 = *((_QWORD *)v7 + 1);
    v20 = &v7[*(int *)(v5 + 24)];
    v21 = a2 + *(int *)(type metadata accessor for MedicationVisualizationConfig(0) + 24);
    sub_1BCB066B8(0, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21, v20, v22);
    *(_BYTE *)a2 = v18;
    *(_QWORD *)(a2 + 8) = v19;
  }
  return result;
}

uint64_t MedicationVisualizationConfig.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[16];
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;

  v3 = v1;
  sub_1BCB5AE8C(0, &qword_1EF488980, MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = &v11[-v8];
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_1BCB5A234();
  sub_1BCB64AE4();
  v16 = 3;
  sub_1BCB649A0();
  if (!v2)
  {
    v15 = *v3;
    MedicationShape.rawValue.getter();
    v14 = 0;
    sub_1BCB64994();
    swift_bridgeObjectRelease();
    type metadata accessor for MedicationVisualizationConfig(0);
    v13 = 2;
    sub_1BCB066B8(0, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    sub_1BCB5AEE8(&qword_1EF488988, MEMORY[0x1E0CB4358]);
    sub_1BCB649AC();
    v12 = *((_QWORD *)v3 + 1);
    v11[15] = 1;
    sub_1BCB5A278(0, &qword_1EF488990, MEMORY[0x1E0DEA048]);
    sub_1BCB5A2E4();
    sub_1BCB649AC();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1BCB595EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return MedicationVisualizationConfig.init(from:)(a1, a2);
}

uint64_t sub_1BCB59600(_QWORD *a1)
{
  return MedicationVisualizationConfig.encode(to:)(a1);
}

void sub_1BCB59614(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)();
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)();
  _QWORD *v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  char v58;
  char v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[2];
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;

  sub_1BCB10A58();
  v70 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCB5B1E8();
  v11 = MEMORY[0x1E0C80A78](v10);
  v14 = (_QWORD *)((char *)v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v65 = a2;
  v16 = (uint64_t)v14 + *(int *)(v11 + 48);
  v64[0] = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v64[1] = v3;
  v17 = a1 + v64[0];
  v68 = *(_QWORD *)(v12 + 72);
  v66 = a1;
  swift_bridgeObjectRetain();
  sub_1BCAFCD6C(v17, (uint64_t)v14, (uint64_t (*)(_QWORD))sub_1BCB5B1E8);
  v18 = *v14;
  v19 = v14[1];
  v69 = v14;
  v20 = v14[2];
  v21 = v14[3];
  v75 = v18;
  v76 = v19;
  v77 = v20;
  v78 = v21;
  v67 = v16;
  v71 = v9;
  sub_1BCAFC578(v16, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_1BCB10A58);
  v72 = a3;
  v22 = *a3;
  v24 = sub_1BCB0E6BC(v18, v19, v20, v21);
  v25 = *(_QWORD *)(v22 + 16);
  v26 = (v23 & 1) == 0;
  v27 = v25 + v26;
  if (__OFADD__(v25, v26))
    goto LABEL_23;
  v28 = v23;
  if (*(_QWORD *)(v22 + 24) >= v27)
  {
    if ((v65 & 1) != 0)
    {
      if ((v23 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1BCB105DC();
      if ((v28 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v35 = (_QWORD *)*v72;
    *(_QWORD *)(*v72 + 8 * (v24 >> 6) + 64) |= 1 << v24;
    v36 = (uint64_t *)(v35[6] + 32 * v24);
    *v36 = v18;
    v36[1] = v19;
    v36[2] = v20;
    v36[3] = v21;
    v37 = v35[7] + *(_QWORD *)(v70 + 72) * v24;
    v38 = (uint64_t)v71;
    sub_1BCAFC578((uint64_t)v71, v37, (uint64_t (*)(_QWORD))sub_1BCB10A58);
    v39 = v35[2];
    v40 = __OFADD__(v39, 1);
    v41 = v39 + 1;
    v42 = v69;
    if (v40)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v35[2] = v41;
    v43 = v15 - 1;
    if (v15 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v44 = v66 + v68 + v64[0];
    v45 = sub_1BCB10A58;
    while (1)
    {
      sub_1BCAFCD6C(v44, (uint64_t)v42, (uint64_t (*)(_QWORD))sub_1BCB5B1E8);
      v47 = v42[1];
      v48 = v38;
      v50 = v42[2];
      v49 = v42[3];
      v75 = *v42;
      v46 = v75;
      v76 = v47;
      v77 = v50;
      v78 = v49;
      v51 = v45;
      sub_1BCAFC578(v67, v48, (uint64_t (*)(_QWORD))v45);
      v52 = (_QWORD *)*v72;
      v53 = sub_1BCB0E6BC(v46, v47, v50, v49);
      v55 = v52[2];
      v56 = (v54 & 1) == 0;
      v40 = __OFADD__(v55, v56);
      v57 = v55 + v56;
      if (v40)
        break;
      v58 = v54;
      if (v52[3] < v57)
      {
        sub_1BCB2A368(v57, 1);
        v53 = sub_1BCB0E6BC(v46, v47, v50, v49);
        if ((v58 & 1) != (v59 & 1))
          goto LABEL_25;
      }
      if ((v58 & 1) != 0)
        goto LABEL_10;
      v60 = (_QWORD *)*v72;
      *(_QWORD *)(*v72 + 8 * (v53 >> 6) + 64) |= 1 << v53;
      v61 = (uint64_t *)(v60[6] + 32 * v53);
      *v61 = v46;
      v61[1] = v47;
      v61[2] = v50;
      v61[3] = v49;
      v38 = (uint64_t)v71;
      v45 = v51;
      sub_1BCAFC578((uint64_t)v71, v60[7] + *(_QWORD *)(v70 + 72) * v53, (uint64_t (*)(_QWORD))v51);
      v62 = v60[2];
      v40 = __OFADD__(v62, 1);
      v63 = v62 + 1;
      v42 = v69;
      if (v40)
        goto LABEL_24;
      v60[2] = v63;
      v44 += v68;
      if (!--v43)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1BCB2A368(v27, v65 & 1);
  v29 = sub_1BCB0E6BC(v18, v19, v20, v21);
  if ((v28 & 1) == (v30 & 1))
  {
    v24 = v29;
    if ((v28 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v31 = (void *)swift_allocError();
    swift_willThrow();
    v79 = v31;
    v32 = v31;
    sub_1BCB052CC();
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      sub_1BCAFC40C((uint64_t)v71, (uint64_t (*)(_QWORD))sub_1BCB10A58);
      v33 = v77;
      v34 = v78;
      swift_bridgeObjectRelease();
      sub_1BCB10A44(v33, v34);
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_1BCB64A3C();
  __break(1u);
LABEL_26:
  v73 = 0;
  v74 = 0xE000000000000000;
  sub_1BCB6479C();
  sub_1BCB641F0();
  sub_1BCB64898();
  sub_1BCB641F0();
  sub_1BCB648B0();
  __break(1u);
}

uint64_t sub_1BCB59B2C(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  char *v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  sub_1BCB066B8(0, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v50 = (char *)&v48 - v7;
  sub_1BCB10A58();
  v52 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v56 = (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v59 = (uint64_t)&v48 - v11;
  sub_1BCB5B0FC();
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (int64_t *)((char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v48 - v16;
  v18 = *(_QWORD *)(a2 + 64);
  v49 = a2 + 64;
  v19 = 1 << *(_BYTE *)(a2 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v51 = (unint64_t)(v19 + 63) >> 6;
  v48 = v51 - 1;
  v55 = a2;
  result = swift_bridgeObjectRetain();
  v23 = 0;
  v57 = 0;
  v53 = v6;
  v54 = v5;
  while (1)
  {
    v58 = v23;
    if (v21)
    {
      v25 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v26 = v25 | (v57 << 6);
      goto LABEL_8;
    }
    v35 = v57 + 1;
    if (__OFADD__(v57, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v35 < v51)
    {
      v36 = *(_QWORD *)(v49 + 8 * v35);
      if (v36)
        goto LABEL_12;
      v37 = v57 + 2;
      ++v57;
      if (v35 + 1 < v51)
      {
        v36 = *(_QWORD *)(v49 + 8 * v37);
        if (v36)
        {
          ++v35;
          goto LABEL_12;
        }
        v38 = v35 + 2;
        v57 = v35 + 1;
        if (v35 + 2 < v51)
          break;
      }
    }
LABEL_24:
    sub_1BCAFC4A0();
    v34 = v39;
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v15, 1, 1, v39);
    v21 = 0;
LABEL_25:
    sub_1BCAFC578((uint64_t)v15, (uint64_t)v17, (uint64_t (*)(_QWORD))sub_1BCB5B0FC);
    sub_1BCAFC4A0();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v17, 1, v34) == 1)
    {
      swift_release();
      return sub_1BCB64A9C();
    }
    v40 = *((_QWORD *)v17 + 2);
    v41 = *((_QWORD *)v17 + 3);
    sub_1BCAFC578((uint64_t)&v17[*(int *)(v34 + 48)], v59, (uint64_t (*)(_QWORD))sub_1BCB10A58);
    v42 = *((_QWORD *)a1 + 8);
    v43 = a1[1];
    v60 = *a1;
    v61 = v43;
    v44 = a1[3];
    v62 = a1[2];
    v63 = v44;
    v64 = v42;
    swift_bridgeObjectRetain();
    sub_1BCB641CC();
    swift_bridgeObjectRelease();
    if (v41 == 1)
    {
      sub_1BCB64A9C();
    }
    else
    {
      sub_1BCB64A9C();
      sub_1BCB64AA8();
      if (v41)
      {
        swift_bridgeObjectRetain();
        sub_1BCB641CC();
        v45 = v40;
        v46 = v41;
      }
      else
      {
        v45 = v40;
        v46 = 0;
      }
      sub_1BCB10A44(v45, v46);
    }
    swift_bridgeObjectRelease();
    sub_1BCB10A44(v40, v41);
    v47 = v56;
    sub_1BCAFCD6C(v59, v56, (uint64_t (*)(_QWORD))sub_1BCB10A58);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v47, 1, v5) == 1)
    {
      sub_1BCB64AA8();
    }
    else
    {
      v24 = v50;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v50, v47, v5);
      sub_1BCB64AA8();
      sub_1BCB5B150(&qword_1EF488970, &qword_1EF488978, MEMORY[0x1E0DEFCF8], MEMORY[0x1E0CB4360]);
      sub_1BCB640DC();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v24, v5);
    }
    sub_1BCAFC40C(v59, (uint64_t (*)(_QWORD))sub_1BCB10A58);
    result = sub_1BCB64AC0();
    v23 = result ^ v58;
  }
  v36 = *(_QWORD *)(v49 + 8 * v38);
  if (v36)
  {
    v35 += 2;
LABEL_12:
    v21 = (v36 - 1) & v36;
    v26 = __clz(__rbit64(v36)) + (v35 << 6);
    v57 = v35;
LABEL_8:
    v27 = (uint64_t *)(*(_QWORD *)(v55 + 48) + 32 * v26);
    v29 = *v27;
    v28 = v27[1];
    v30 = v27[2];
    v31 = v27[3];
    v32 = *(_QWORD *)(v55 + 56) + *(_QWORD *)(v52 + 72) * v26;
    sub_1BCAFC4A0();
    v34 = v33;
    sub_1BCAFCD6C(v32, (uint64_t)v15 + *(int *)(v33 + 48), (uint64_t (*)(_QWORD))sub_1BCB10A58);
    *v15 = v29;
    v15[1] = v28;
    v15[2] = v30;
    v15[3] = v31;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v15, 0, 1, v34);
    swift_bridgeObjectRetain();
    sub_1BCAFC5BC(v30, v31);
    v6 = v53;
    v5 = v54;
    goto LABEL_25;
  }
  while (1)
  {
    v35 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v35 >= v51)
    {
      v57 = v48;
      goto LABEL_24;
    }
    v36 = *(_QWORD *)(v49 + 8 * v35);
    ++v38;
    if (v36)
      goto LABEL_12;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1BCB5A05C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1BCAFC2E0(255, &qword_1EDA13F10);
    result = MEMORY[0x1BCCFD874](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s27HealthMedicationsExperience29MedicationVisualizationConfigV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v4 = MedicationShape.rawValue.getter();
  v6 = v5;
  if (v4 == MedicationShape.rawValue.getter() && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v9 = sub_1BCB649F4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0)
      return 0;
  }
  if ((sub_1BCB58080(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)) & 1) != 0)
  {
    type metadata accessor for MedicationVisualizationConfig(0);
    sub_1BCAFC2E0(0, &qword_1EDA13F10);
    sub_1BCB5A05C((unint64_t *)&qword_1EF4883E8, MEMORY[0x1E0DEFD00]);
    return sub_1BCB64040();
  }
  return 0;
}

uint64_t type metadata accessor for MedicationVisualizationConfig.MedicationVisualizationConfigV1(uint64_t a1)
{
  return sub_1BCAFBE48(a1, qword_1EF488A18);
}

uint64_t sub_1BCB5A1F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_1BCB5A234()
{
  unint64_t result;

  result = qword_1EDA14318;
  if (!qword_1EDA14318)
  {
    result = MEMORY[0x1BCCFD874](&unk_1BCB69078, &type metadata for MedicationVisualizationConfig.MedicationVisualizationConfigV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDA14318);
  }
  return result;
}

void sub_1BCB5A278(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, uint64_t, unint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_1BCB10A58();
    v7 = v6;
    v8 = sub_1BCB10B34();
    v9 = a3(a1, &type metadata for MedicationVisualizationFragment, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t sub_1BCB5A2E4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EF488998;
  if (!qword_1EF488998)
  {
    sub_1BCB5A278(255, &qword_1EF488990, MEMORY[0x1E0DEA048]);
    v2 = v1;
    v3[0] = sub_1BCB5A37C();
    v3[1] = sub_1BCB5B024(&qword_1EF4889A8, &qword_1EF488988, MEMORY[0x1E0CB4358], MEMORY[0x1E0DEE988]);
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0DEA0B8], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EF488998);
  }
  return result;
}

unint64_t sub_1BCB5A37C()
{
  unint64_t result;

  result = qword_1EF4889A0;
  if (!qword_1EF4889A0)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for MedicationVisualizationFragment, &type metadata for MedicationVisualizationFragment);
    atomic_store(result, (unint64_t *)&qword_1EF4889A0);
  }
  return result;
}

unint64_t sub_1BCB5A3C4()
{
  unint64_t result;

  result = qword_1EF4889B0;
  if (!qword_1EF4889B0)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for MedicationVisualizationConfigVersion, &type metadata for MedicationVisualizationConfigVersion);
    atomic_store(result, (unint64_t *)&qword_1EF4889B0);
  }
  return result;
}

uint64_t sub_1BCB5A408()
{
  return sub_1BCB5A42C(qword_1EF4889B8, (uint64_t)&protocol conformance descriptor for MedicationVisualizationConfig);
}

uint64_t sub_1BCB5A42C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for MedicationVisualizationConfig(255);
    result = MEMORY[0x1BCCFD874](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MedicationVisualizationConfigVersion(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BCB5A4AC + 4 * byte_1BCB68D44[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BCB5A4CC + 4 * byte_1BCB68D49[v4]))();
}

_BYTE *sub_1BCB5A4AC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BCB5A4CC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BCB5A4D4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BCB5A4DC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BCB5A4E4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BCB5A4EC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MedicationVisualizationConfigVersion()
{
  return &type metadata for MedicationVisualizationConfigVersion;
}

uint64_t getEnumTagSinglePayload for MedicationVisualizationConfig()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for MedicationVisualizationConfig()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for MedicationVisualizationConfig.MedicationVisualizationConfigV1.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BCB5A590 + 4 * byte_1BCB68D53[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BCB5A5C4 + 4 * byte_1BCB68D4E[v4]))();
}

uint64_t sub_1BCB5A5C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCB5A5CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCB5A5D4);
  return result;
}

uint64_t sub_1BCB5A5E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCB5A5E8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BCB5A5EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCB5A5F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MedicationVisualizationConfig.MedicationVisualizationConfigV1.CodingKeys()
{
  return &type metadata for MedicationVisualizationConfig.MedicationVisualizationConfigV1.CodingKeys;
}

uint64_t *_s27HealthMedicationsExperience29MedicationVisualizationConfigVwCP_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    a1[1] = a2[1];
    v5 = *(int *)(a3 + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    sub_1BCB066B8(0, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    v9 = v8;
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v6, v7, v9);
  }
  return v3;
}

uint64_t _s27HealthMedicationsExperience29MedicationVisualizationConfigVwxx_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  sub_1BCB066B8(0, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t _s27HealthMedicationsExperience29MedicationVisualizationConfigVwcp_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  sub_1BCB066B8(0, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
  v8 = v7;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v5, v6, v8);
  return a1;
}

uint64_t _s27HealthMedicationsExperience29MedicationVisualizationConfigVwca_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  sub_1BCB066B8(0, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t _s27HealthMedicationsExperience29MedicationVisualizationConfigVwtk_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  sub_1BCB066B8(0, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t _s27HealthMedicationsExperience29MedicationVisualizationConfigVwta_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  sub_1BCB066B8(0, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_1BCB5A988()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_1BCB066B8(0, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1BCB5AA34()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_1BCB066B8(0, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void sub_1BCB5AAD8()
{
  unint64_t v0;

  sub_1BCB066B8(319, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

unint64_t sub_1BCB5AB88()
{
  unint64_t result;

  result = qword_1EF488A58;
  if (!qword_1EF488A58)
  {
    result = MEMORY[0x1BCCFD874](&unk_1BCB69050, &type metadata for MedicationVisualizationConfig.MedicationVisualizationConfigV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF488A58);
  }
  return result;
}

unint64_t sub_1BCB5ABD0()
{
  unint64_t result;

  result = qword_1EDA14328;
  if (!qword_1EDA14328)
  {
    result = MEMORY[0x1BCCFD874](&unk_1BCB68FC0, &type metadata for MedicationVisualizationConfig.MedicationVisualizationConfigV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDA14328);
  }
  return result;
}

unint64_t sub_1BCB5AC18()
{
  unint64_t result;

  result = qword_1EDA14320;
  if (!qword_1EDA14320)
  {
    result = MEMORY[0x1BCCFD874](&unk_1BCB68FE8, &type metadata for MedicationVisualizationConfig.MedicationVisualizationConfigV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDA14320);
  }
  return result;
}

uint64_t sub_1BCB5AC5C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6D614E6570616873 && a2 == 0xE900000000000065;
  if (v2 || (sub_1BCB649F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E656D67617266 && a2 == 0xEF73726F6C6F4373 || (sub_1BCB649F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x756F72676B636162 && a2 == 0xEF726F6C6F43646ELL || (sub_1BCB649F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x56746E6572727563 && a2 == 0xEE006E6F69737265)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1BCB649F4();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

void sub_1BCB5AE8C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BCB5A234();
    v7 = a3(a1, &type metadata for MedicationVisualizationConfig.MedicationVisualizationConfigV1.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1BCB5AEE8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1BCB066B8(255, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    result = MEMORY[0x1BCCFD874](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BCB5AF48()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EF488A68;
  if (!qword_1EF488A68)
  {
    sub_1BCB5A278(255, &qword_1EF488990, MEMORY[0x1E0DEA048]);
    v2 = v1;
    v3[0] = sub_1BCB5AFE0();
    v3[1] = sub_1BCB5B024(&qword_1EF488A70, &qword_1EF488A60, MEMORY[0x1E0CB4370], MEMORY[0x1E0DEE9A0]);
    result = MEMORY[0x1BCCFD874](MEMORY[0x1E0DEA0D8], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EF488A68);
  }
  return result;
}

unint64_t sub_1BCB5AFE0()
{
  unint64_t result;

  result = qword_1EDA143B0[0];
  if (!qword_1EDA143B0[0])
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for MedicationVisualizationFragment, &type metadata for MedicationVisualizationFragment);
    atomic_store(result, qword_1EDA143B0);
  }
  return result;
}

uint64_t sub_1BCB5B024(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_1BCB10A58();
    v10 = v9;
    v11 = sub_1BCB5AEE8(a2, a3);
    result = MEMORY[0x1BCCFD874](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1BCB5B09C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF488A78)
  {
    sub_1BCB10A58();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF488A78);
  }
}

void sub_1BCB5B0FC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF4883D8)
  {
    sub_1BCAFC4A0();
    v0 = sub_1BCB64628();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF4883D8);
  }
}

uint64_t sub_1BCB5B150(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_1BCB066B8(255, (unint64_t *)&qword_1EDA13F08, &qword_1EDA13F10, 0x1E0DC3658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CB4340]);
    v10 = v9;
    v11 = sub_1BCB5A05C(a2, a3);
    result = MEMORY[0x1BCCFD874](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1BCB5B1E8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF488A88)
  {
    sub_1BCB10A58();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF488A88);
  }
}

uint64_t MedicationsExperienceStore.listManager.getter()
{
  return sub_1BCB5B4F0((unint64_t *)&qword_1EDA132E8, (void (*)(uint64_t))MEMORY[0x1E0D2EFB0]);
}

uint64_t type metadata accessor for MedicationsExperienceStore()
{
  return objc_opt_self();
}

uint64_t static MedicationsExperienceStore.shared.getter()
{
  if (qword_1EDA13DC8 != -1)
    swift_once();
  return swift_retain();
}

id MedicationsExperienceStore.healthStore.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t MedicationsExperienceStore.__allocating_init(healthStore:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  MedicationsExperienceStore.init(healthStore:)(a1);
  return v2;
}

_QWORD *MedicationsExperienceStore.init(healthStore:)(uint64_t a1)
{
  _QWORD *v1;

  sub_1BCB5BD0C(0, &qword_1EDA132E0, (void (*)(uint64_t))MEMORY[0x1E0D2F018]);
  swift_allocObject();
  v1[3] = sub_1BCB63CEC();
  sub_1BCB5BD70(0, &qword_1EDA132F8, &qword_1EDA13328);
  swift_allocObject();
  v1[4] = sub_1BCB63CEC();
  sub_1BCB5BD70(0, &qword_1EDA132F0, &qword_1EDA13318);
  swift_allocObject();
  v1[5] = sub_1BCB63CEC();
  sub_1BCB5BD0C(0, (unint64_t *)&qword_1EDA132E8, (void (*)(uint64_t))MEMORY[0x1E0D2EFB0]);
  swift_allocObject();
  v1[6] = sub_1BCB63CEC();
  sub_1BCB5BD70(0, &qword_1EDA13300, &qword_1EDA13320);
  swift_allocObject();
  v1[7] = sub_1BCB63CEC();
  sub_1BCB5BD70(0, &qword_1EDA13308, qword_1EDA13330);
  swift_allocObject();
  v1[8] = sub_1BCB63CEC();
  v1[2] = a1;
  return v1;
}

uint64_t sub_1BCB5B4CC()
{
  return sub_1BCB5B4F0(&qword_1EDA132E0, (void (*)(uint64_t))MEMORY[0x1E0D2F018]);
}

uint64_t sub_1BCB5B4F0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t v3;

  sub_1BCB5BD0C(0, a1, a2);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_1BCB63CC8();
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

_QWORD *sub_1BCB5B58C()
{
  id v0;
  void *v1;
  _QWORD *result;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB6780]), sel_init);
  type metadata accessor for MedicationsExperienceStore();
  v1 = (void *)swift_allocObject();
  result = MedicationsExperienceStore.init(healthStore:)((uint64_t)v0);
  off_1EDA14058 = v1;
  return result;
}

uint64_t sub_1BCB5B5E4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  id v4;
  uint64_t result;

  v3 = *a1;
  sub_1BCB63DB8();
  v4 = *(id *)(v3 + 16);
  result = sub_1BCB63DAC();
  *a2 = result;
  return result;
}

uint64_t MedicationsExperienceStore.userDomainConceptStore.getter()
{
  uint64_t v1;

  sub_1BCB5BD70(0, &qword_1EDA132F8, &qword_1EDA13328);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_1BCB63CC8();
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1BCB5B6D4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  sub_1BCB5BD70(0, &qword_1EDA132F8, &qword_1EDA13328);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_1BCB63CC8();
  swift_release();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1BCB5B790(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  sub_1BCB5BD70(0, &qword_1EDA132F8, &qword_1EDA13328);
  swift_getKeyPath();
  swift_getKeyPath();
  v2 = v1;
  swift_retain();
  return sub_1BCB63CD4();
}

uint64_t MedicationsExperienceStore.userDomainConceptStore.setter()
{
  sub_1BCB5BD70(0, &qword_1EDA132F8, &qword_1EDA13328);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return sub_1BCB63CD4();
}

uint64_t (*MedicationsExperienceStore.userDomainConceptStore.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  sub_1BCB5BD70(0, &qword_1EDA132F8, &qword_1EDA13328);
  v3[5] = swift_getKeyPath();
  v3[6] = swift_getKeyPath();
  v3[4] = v1;
  swift_retain();
  v3[7] = sub_1BCB63CBC();
  return sub_1BCB5B988;
}

id sub_1BCB5B98C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1BCB5C798(a1, (Class *)0x1E0CB6D40, a2);
}

uint64_t MedicationsExperienceStore.ontologyStore.getter()
{
  uint64_t v1;

  sub_1BCB5BD70(0, &qword_1EDA132F0, &qword_1EDA13318);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_1BCB63CC8();
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1BCB5BA44@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  sub_1BCB5BD70(0, &qword_1EDA132F0, &qword_1EDA13318);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_1BCB63CC8();
  swift_release();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1BCB5BB00(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  sub_1BCB5BD70(0, &qword_1EDA132F0, &qword_1EDA13318);
  swift_getKeyPath();
  swift_getKeyPath();
  v2 = v1;
  swift_retain();
  return sub_1BCB63CD4();
}

uint64_t MedicationsExperienceStore.ontologyStore.setter()
{
  sub_1BCB5BD70(0, &qword_1EDA132F0, &qword_1EDA13318);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return sub_1BCB63CD4();
}

uint64_t (*MedicationsExperienceStore.ontologyStore.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  sub_1BCB5BD70(0, &qword_1EDA132F0, &qword_1EDA13318);
  v3[5] = swift_getKeyPath();
  v3[6] = swift_getKeyPath();
  v3[4] = v1;
  swift_retain();
  v3[7] = sub_1BCB63CBC();
  return sub_1BCB5B988;
}

id sub_1BCB5BCF8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1BCB5C798(a1, (Class *)0x1E0CB69B8, a2);
}

void sub_1BCB5BD0C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for MedicationsExperienceStore();
    a3(255);
    v5 = sub_1BCB63CE0();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_1BCB5BD70(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for MedicationsExperienceStore();
    sub_1BCAFC2E0(255, a3);
    v5 = sub_1BCB63CE0();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t MedicationsExperienceStore.listManager.setter()
{
  sub_1BCB5BD0C(0, (unint64_t *)&qword_1EDA132E8, (void (*)(uint64_t))MEMORY[0x1E0D2EFB0]);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return sub_1BCB63CD4();
}

uint64_t (*MedicationsExperienceStore.listManager.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  sub_1BCB5BD0C(0, (unint64_t *)&qword_1EDA132E8, (void (*)(uint64_t))MEMORY[0x1E0D2EFB0]);
  v3[5] = swift_getKeyPath();
  v3[6] = swift_getKeyPath();
  v3[4] = v1;
  swift_retain();
  v3[7] = sub_1BCB63CBC();
  return sub_1BCB5B988;
}

uint64_t sub_1BCB5BF30@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  id v4;
  id v5;
  uint64_t result;

  v3 = *(void **)(*(_QWORD *)a1 + 16);
  sub_1BCB5BD0C(0, &qword_1EDA132E0, (void (*)(uint64_t))MEMORY[0x1E0D2F018]);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_1BCB63CC8();
  swift_release();
  swift_release();
  swift_release();
  v4 = v3;
  v5 = (id)HKStringFromListUserDomainType();
  sub_1BCB6413C();

  sub_1BCB3A2C0();
  sub_1BCB63D88();
  swift_allocObject();
  result = sub_1BCB63D70();
  *a2 = result;
  return result;
}

uint64_t MedicationsExperienceStore.medicationControl.getter()
{
  uint64_t v1;

  sub_1BCB5BD70(0, &qword_1EDA13300, &qword_1EDA13320);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_1BCB63CC8();
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1BCB5C118@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  sub_1BCB5BD70(0, &qword_1EDA13300, &qword_1EDA13320);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_1BCB63CC8();
  swift_release();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1BCB5C1D4(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  sub_1BCB5BD70(0, &qword_1EDA13300, &qword_1EDA13320);
  swift_getKeyPath();
  swift_getKeyPath();
  v2 = v1;
  swift_retain();
  return sub_1BCB63CD4();
}

uint64_t MedicationsExperienceStore.medicationControl.setter()
{
  sub_1BCB5BD70(0, &qword_1EDA13300, &qword_1EDA13320);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return sub_1BCB63CD4();
}

uint64_t (*MedicationsExperienceStore.medicationControl.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  sub_1BCB5BD70(0, &qword_1EDA13300, &qword_1EDA13320);
  v3[5] = swift_getKeyPath();
  v3[6] = swift_getKeyPath();
  v3[4] = v1;
  swift_retain();
  v3[7] = sub_1BCB63CBC();
  return sub_1BCB5B988;
}

id sub_1BCB5C3CC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1BCB5C798(a1, (Class *)0x1E0D2C440, a2);
}

uint64_t MedicationsExperienceStore.scheduleControl.getter()
{
  uint64_t v1;

  sub_1BCB5BD70(0, &qword_1EDA13308, qword_1EDA13330);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_1BCB63CC8();
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1BCB5C484@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  sub_1BCB5BD70(0, &qword_1EDA13308, qword_1EDA13330);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_1BCB63CC8();
  swift_release();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1BCB5C540(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  sub_1BCB5BD70(0, &qword_1EDA13308, qword_1EDA13330);
  swift_getKeyPath();
  swift_getKeyPath();
  v2 = v1;
  swift_retain();
  return sub_1BCB63CD4();
}

uint64_t MedicationsExperienceStore.scheduleControl.setter()
{
  sub_1BCB5BD70(0, &qword_1EDA13308, qword_1EDA13330);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return sub_1BCB63CD4();
}

uint64_t (*MedicationsExperienceStore.scheduleControl.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  sub_1BCB5BD70(0, &qword_1EDA13308, qword_1EDA13330);
  v3[5] = swift_getKeyPath();
  v3[6] = swift_getKeyPath();
  v3[4] = v1;
  swift_retain();
  v3[7] = sub_1BCB63CBC();
  return sub_1BCB5B988;
}

void sub_1BCB5C738(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 56))(*a1, 0);
  swift_release();
  swift_release();
  swift_release();
  free(v1);
}

id sub_1BCB5C78C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1BCB5C798(a1, (Class *)0x1E0D2C490, a2);
}

id sub_1BCB5C798@<X0>(uint64_t a1@<X0>, Class *a2@<X1>, _QWORD *a3@<X8>)
{
  id result;

  result = objc_msgSend(objc_allocWithZone(*a2), sel_initWithHealthStore_, *(_QWORD *)(*(_QWORD *)a1 + 16));
  *a3 = result;
  return result;
}

uint64_t MedicationsExperienceStore.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t MedicationsExperienceStore.__deallocating_deinit()
{
  MedicationsExperienceStore.deinit();
  return swift_deallocClassInstance();
}

uint64_t method lookup function for MedicationsExperienceStore()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MedicationsExperienceStore.__allocating_init(healthStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t sub_1BCB5C880@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  sub_1BCB5BD0C(0, &qword_1EDA132E0, (void (*)(uint64_t))MEMORY[0x1E0D2F018]);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_1BCB63CC8();
  swift_release();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1BCB5C938(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  sub_1BCB5BD0C(0, &qword_1EDA132E0, (void (*)(uint64_t))MEMORY[0x1E0D2F018]);
  swift_getKeyPath();
  swift_getKeyPath();
  v2 = v1;
  swift_retain();
  return sub_1BCB63CD4();
}

void sub_1BCB5CA74(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  void *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  objc_class *v13;
  CGContext *v14;
  CGContext *v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  CGColorSpace *DeviceRGB;
  const __CFArray *v22;
  CGGradient *v23;
  _QWORD v24[2];
  objc_super v25;
  CGPoint v26;
  CGPoint v27;
  CGRect v28;

  v9 = sub_1BCB63C74();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (objc_class *)type metadata accessor for MedicationGradientBackground();
  v25.receiver = v4;
  v25.super_class = v13;
  objc_msgSendSuper2(&v25, sel_drawRect_, a1, a2, a3, a4);
  v14 = UIGraphicsGetCurrentContext();
  if (v14)
  {
    v15 = v14;
    sub_1BCAFBDDC();
    v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_1BCB665A0;
    v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithWhite_alpha_, 0.6, 1.0);
    v18 = objc_msgSend(v17, sel_CGColor);

    *(_QWORD *)(v16 + 32) = v18;
    v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithWhite_alpha_, 0.4, 1.0);
    v20 = objc_msgSend(v19, sel_CGColor);

    *(_QWORD *)(v16 + 40) = v20;
    v24[1] = v16;
    sub_1BCB642EC();
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    type metadata accessor for CGColor(0);
    v22 = (const __CFArray *)sub_1BCB642C8();
    swift_bridgeObjectRelease();
    v23 = CGGradientCreateWithColors(DeviceRGB, v22, dbl_1E7557490);

    if (v23)
    {
      CGContextSetBlendMode(v15, kCGBlendModeOverlay);
      (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0C9B8A0], v9);
      sub_1BCB644D8();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v28.origin.x = a1;
      v28.origin.y = a2;
      v28.size.width = a3;
      v28.size.height = a4;
      v27.y = CGRectGetHeight(v28);
      v26.x = 0.0;
      v26.y = 0.0;
      v27.x = 0.0;
      CGContextDrawLinearGradient(v15, v23, v26, v27, 3u);
      CGContextRestoreGState(v15);

    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t type metadata accessor for MedicationGradientBackground()
{
  return objc_opt_self();
}

id MedicationGradientBackground.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MedicationGradientBackground();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1BCB5CDE8(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  void *v8;
  _QWORD aBlock[6];
  uint64_t v11;

  v2 = (id)HKLogMedication();
  if (qword_1EDA13DC8 != -1)
    swift_once();
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB62B8]), sel_initWithLoggingCategory_healthDataSource_, v2, *((_QWORD *)off_1EDA14058 + 2));

  v4 = sub_1BCB5D414(a1);
  v5 = *(_QWORD *)(a1 + 136);
  v6 = *(_QWORD *)(a1 + 80);
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v5 + 32) = 0x8000000000000000;
  sub_1BCB0FE60(0, v6, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v5 + 32) = v11;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  aBlock[4] = sub_1BCB5D54C;
  aBlock[5] = a1;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BCB05DCC;
  aBlock[3] = &block_descriptor_12;
  v8 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_submitEvent_completion_, v4, v8);
  _Block_release(v8);

  return swift_release_n();
}

void sub_1BCB5CF94(char a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  id v13;
  id v14;
  os_log_type_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  NSObject *oslog;
  uint64_t v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  if ((a1 & 1) != 0)
  {
    if (qword_1EDA14510 != -1)
      swift_once();
    v4 = sub_1BCB63DDC();
    __swift_project_value_buffer(v4, (uint64_t)qword_1EDA14518);
    swift_retain();
    v5 = sub_1BCB63DD0();
    v6 = sub_1BCB64514();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v24[0] = v8;
      *(_DWORD *)v7 = 136315138;
      v9 = *(_QWORD *)(a3 + 32);
      v10 = *(_QWORD *)(a3 + 40);
      swift_bridgeObjectRetain();
      sub_1BCB010C8(v9, v10, v24);
      sub_1BCB64640();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1BCAF3000, v5, v6, "[MedicationListOnboardingAnalytics] Successfully submitted analytics for step: %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCFD928](v8, -1, -1);
      MEMORY[0x1BCCFD928](v7, -1, -1);

    }
    else
    {

      swift_release();
    }
  }
  else
  {
    if (qword_1EDA14510 != -1)
      swift_once();
    v12 = sub_1BCB63DDC();
    __swift_project_value_buffer(v12, (uint64_t)qword_1EDA14518);
    swift_retain();
    v13 = a2;
    swift_retain();
    v14 = a2;
    oslog = sub_1BCB63DD0();
    v15 = sub_1BCB644FC();
    if (os_log_type_enabled(oslog, v15))
    {
      v16 = swift_slowAlloc();
      v17 = (_QWORD *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v24[0] = v18;
      *(_DWORD *)v16 = 136315394;
      v19 = *(_QWORD *)(a3 + 32);
      v20 = *(_QWORD *)(a3 + 40);
      swift_bridgeObjectRetain();
      sub_1BCB010C8(v19, v20, v24);
      sub_1BCB64640();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2112;
      if (a2)
      {
        v21 = a2;
        v22 = _swift_stdlib_bridgeErrorToNSError();
        sub_1BCB64640();
      }
      else
      {
        sub_1BCB64640();
        v22 = 0;
      }
      *v17 = v22;

      _os_log_impl(&dword_1BCAF3000, oslog, v15, "[MedicationListOnboardingAnalytics] Failed to submit analytics for step: %s with error: %@.", (uint8_t *)v16, 0x16u);
      sub_1BCB06014();
      swift_arrayDestroy();
      MEMORY[0x1BCCFD928](v17, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1BCCFD928](v18, -1, -1);
      MEMORY[0x1BCCFD928](v16, -1, -1);

    }
    else
    {
      swift_release_n();

    }
  }
}

uint64_t MedicationListOnboardingAnalytics.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t MedicationListOnboardingAnalytics.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1BCB5D414(uint64_t a1)
{
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v21 = *(_QWORD *)(a1 + 80);
  v22 = *(_QWORD *)(a1 + 72);
  v20 = *(_QWORD *)(a1 + 88);
  v19 = *(_BYTE *)(a1 + 96);
  v18 = *(_BYTE *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 104);
  v16 = *(_BYTE *)(a1 + 112);
  v15 = *(_QWORD *)(a1 + 168);
  v14 = *(_BYTE *)(a1 + 176);
  v13 = *(_QWORD *)(a1 + 200);
  v1 = *(_BYTE *)(a1 + 208);
  v2 = *(_QWORD *)(a1 + 184);
  v3 = *(_BYTE *)(a1 + 192);
  v4 = *(_BYTE *)(a1 + 209);
  v5 = *(_QWORD *)(a1 + 120);
  v6 = *(_BYTE *)(a1 + 128);
  v7 = *(_BYTE *)(a1 + 66);
  v8 = *(_QWORD *)(a1 + 232);
  v9 = *(_BYTE *)(a1 + 240);
  v10 = *(_BYTE *)(a1 + 241);
  v12 = *(_BYTE *)(a1 + 160);
  type metadata accessor for MedicationListOnboardingEvent();
  swift_allocObject();
  return sub_1BCB38F04(v22, v21, v20, v19, v18, v17, v16, v12, v15, v14, v13, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
}

void sub_1BCB5D54C(char a1, void *a2)
{
  uint64_t v2;

  sub_1BCB5CF94(a1, a2, v2);
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t type metadata accessor for MedicationListOnboardingAnalytics()
{
  return objc_opt_self();
}

uint64_t method lookup function for MedicationListOnboardingAnalytics()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static MedicationListOnboardingAnalytics.submitListOnboardingMetric(metric:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t sub_1BCB5D5A0()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1BCB6413C();
  qword_1EDA13268 = result;
  *(_QWORD *)algn_1EDA13270 = v1;
  return result;
}

uint64_t static HKKeyValueDomain.medicationsDomainName.getter()
{
  return sub_1BCB17700(&qword_1EDA13280, &qword_1EDA13268);
}

id sub_1BCB5D5EC(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v2 = *MEMORY[0x1E0D2C2D0];
  if (qword_1EDA13280 != -1)
    swift_once();
  v3 = objc_allocWithZone(MEMORY[0x1E0CB67F0]);
  swift_bridgeObjectRetain();
  v4 = a1;
  v5 = (void *)sub_1BCB6410C();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v3, sel_initWithCategory_domainName_healthStore_, v2, v5, v4);

  return v6;
}

id (*static HKKeyValueDomain.medications.getter())(void *a1)
{
  return sub_1BCB5D5EC;
}

uint64_t sub_1BCB5D6CC()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1BCB6413C();
  qword_1EDA13288 = result;
  unk_1EDA13290 = v1;
  return result;
}

uint64_t static HKKeyValueDomain.alcoholDrugInteractionFactorEnableKey.getter()
{
  return sub_1BCB17700(&qword_1EDA13298, &qword_1EDA13288);
}

uint64_t sub_1BCB5D718()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1BCB6413C();
  qword_1EDA132C0 = result;
  *(_QWORD *)algn_1EDA132C8 = v1;
  return result;
}

uint64_t static HKKeyValueDomain.marijuanaDrugInteractionFactorEnableKey.getter()
{
  return sub_1BCB17700(&qword_1EDA132D0, &qword_1EDA132C0);
}

uint64_t sub_1BCB5D764()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1BCB6413C();
  qword_1EDA132A0 = result;
  unk_1EDA132A8 = v1;
  return result;
}

uint64_t static HKKeyValueDomain.tobaccoDrugInteractionFactorEnableKey.getter()
{
  return sub_1BCB17700(&qword_1EDA132B8, &qword_1EDA132A0);
}

uint64_t sub_1BCB5D7B0()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1BCB6413C();
  qword_1EF488B38 = result;
  unk_1EF488B40 = v1;
  return result;
}

uint64_t static HKKeyValueDomain.incompatibilityCacheKey.getter()
{
  return sub_1BCB17700(&qword_1EF4870A0, &qword_1EF488B38);
}

id MedicationScheduleItemDose.scheduleItemDose.getter()
{
  id *v0;

  return *v0;
}

uint64_t MedicationScheduleItemDose.scheduleItemIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

id MedicationScheduleItemDose.medication.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 24);
}

uint64_t MedicationScheduleItemDose.init(_:scheduleItemIdentifier:medication:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

id MedicationScheduleItem.scheduleItem.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t MedicationScheduleItem.scheduleItemDoses.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MedicationScheduleItem.__allocating_init(_:scheduleItemDoses:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t MedicationScheduleItem.init(_:scheduleItemDoses:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t MedicationScheduleItem.description.getter()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  _QWORD v5[2];

  sub_1BCB6479C();
  swift_bridgeObjectRelease();
  strcpy((char *)v5, "scheduleItem: ");
  HIBYTE(v5[1]) = -18;
  v1 = *(id *)(v0 + 16);
  v2 = objc_msgSend(v1, sel_description);
  sub_1BCB6413C();

  sub_1BCB641F0();
  swift_bridgeObjectRelease();
  sub_1BCB641F0();
  v3 = swift_bridgeObjectRetain();
  MEMORY[0x1BCCFCA40](v3, &type metadata for MedicationScheduleItemDose);
  swift_bridgeObjectRelease();
  sub_1BCB641F0();
  swift_bridgeObjectRelease();
  return v5[0];
}

uint64_t MedicationScheduleItem.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MedicationScheduleItem.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1BCB5DA1C()
{
  return MedicationScheduleItem.description.getter();
}

uint64_t static MedicationScheduleItem.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_1BCB06068();
  if ((sub_1BCB645F8() & 1) != 0)
    return sub_1BCB21A1C(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  else
    return 0;
}

uint64_t sub_1BCB5DA9C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  sub_1BCB06068();
  if ((sub_1BCB645F8() & 1) != 0)
    return sub_1BCB21A1C(*(_QWORD *)(v2 + 24), *(_QWORD *)(v3 + 24));
  else
    return 0;
}

uint64_t _s27HealthMedicationsExperience26MedicationScheduleItemDoseV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  BOOL v8;
  id v9;
  id v10;
  char v11;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (void *)a1[3];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (void *)a2[3];
  sub_1BCB06068();
  if ((sub_1BCB645F8() & 1) == 0)
    return 0;
  v8 = v2 == v5 && v3 == v6;
  if (!v8 && (sub_1BCB649F4() & 1) == 0)
    return 0;
  v9 = v4;
  v10 = v7;
  v11 = sub_1BCB645F8();

  return v11 & 1;
}

uint64_t initializeBufferWithCopyOfBuffer for MedicationVisualizationFragment(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

void destroy for MedicationScheduleItemDose(id *a1)
{

  swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for MedicationScheduleItemDose(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(void **)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v5;
  v6 = v3;
  swift_bridgeObjectRetain();
  v7 = v5;
  return a1;
}

uint64_t assignWithCopy for MedicationScheduleItemDose(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(void **)(a2 + 24);
  v8 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  v9 = v7;

  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for MedicationScheduleItemDose(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  return a1;
}

uint64_t getEnumTagSinglePayload for MedicationScheduleItemDose(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicationScheduleItemDose(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicationScheduleItemDose()
{
  return &type metadata for MedicationScheduleItemDose;
}

uint64_t type metadata accessor for MedicationScheduleItem()
{
  return objc_opt_self();
}

uint64_t method lookup function for MedicationScheduleItem()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MedicationScheduleItem.__allocating_init(_:scheduleItemDoses:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t MedicationVisualizationFragment.FragmentModification.hash(into:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0[1];
  if (v1 == 1)
    return sub_1BCB64A9C();
  v3 = *v0;
  sub_1BCB64A9C();
  if (!v1)
    return sub_1BCB64AA8();
  sub_1BCB64AA8();
  swift_bridgeObjectRetain();
  sub_1BCB641CC();
  return sub_1BCB10A44(v3, v1);
}

BOOL sub_1BCB5DE98(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1BCB5DEB8()
{
  _BYTE *v0;

  if (*v0)
    return 1701736302;
  else
    return 0x726F6C6F63;
}

uint64_t sub_1BCB5DEE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCB600F4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1BCB5DF0C(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1BCB5DF18()
{
  sub_1BCB5F2A4();
  return sub_1BCB64AF0();
}

uint64_t sub_1BCB5DF40()
{
  sub_1BCB5F2A4();
  return sub_1BCB64AFC();
}

uint64_t sub_1BCB5DF68()
{
  return 0x4E79616C70736964;
}

uint64_t sub_1BCB5DF88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1BCB649F4();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void sub_1BCB5E034(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1BCB5E040()
{
  sub_1BCB5F260();
  return sub_1BCB64AF0();
}

uint64_t sub_1BCB5E068()
{
  sub_1BCB5F260();
  return sub_1BCB64AFC();
}

uint64_t sub_1BCB5E090()
{
  return 0;
}

uint64_t sub_1BCB5E09C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_1BCB5E0C8()
{
  sub_1BCB5F21C();
  return sub_1BCB64AF0();
}

uint64_t sub_1BCB5E0F0()
{
  sub_1BCB5F21C();
  return sub_1BCB64AFC();
}

uint64_t MedicationVisualizationFragment.FragmentModification.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;

  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170];
  sub_1BCB5F48C(0, &qword_1EF488B48, (uint64_t (*)(void))sub_1BCB5F21C, (uint64_t)&type metadata for MedicationVisualizationFragment.FragmentModification.NoneCodingKeys, MEMORY[0x1E0DED170]);
  v24 = v4;
  v22 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v20 = (char *)&v19 - v5;
  sub_1BCB5F48C(0, &qword_1EF488B50, (uint64_t (*)(void))sub_1BCB5F260, (uint64_t)&type metadata for MedicationVisualizationFragment.FragmentModification.ColorCodingKeys, v3);
  v23 = v6;
  v21 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v19 - v7;
  sub_1BCB5F48C(0, &qword_1EF488B58, (uint64_t (*)(void))sub_1BCB5F2A4, (uint64_t)&type metadata for MedicationVisualizationFragment.FragmentModification.CodingKeys, v3);
  v25 = v9;
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v19 - v11;
  v13 = v1[1];
  v19 = *v1;
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_1BCB5F2A4();
  sub_1BCB64AE4();
  if (v13 == 1)
  {
    v27 = 1;
    sub_1BCB5F21C();
    v14 = v20;
    v15 = v25;
    sub_1BCB6497C();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v14, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v15);
  }
  else
  {
    v26 = 0;
    sub_1BCB5F260();
    v17 = v25;
    sub_1BCB6497C();
    v18 = v23;
    sub_1BCB64988();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v18);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v17);
  }
}

uint64_t MedicationVisualizationFragment.FragmentModification.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  v1 = v0[1];
  sub_1BCB64A90();
  if (v1 == 1)
  {
    sub_1BCB64A9C();
  }
  else
  {
    sub_1BCB64A9C();
    sub_1BCB64AA8();
    if (v1)
    {
      swift_bridgeObjectRetain();
      sub_1BCB641CC();
      sub_1BCB10A44(v2, v1);
    }
  }
  return sub_1BCB64AC0();
}

uint64_t MedicationVisualizationFragment.FragmentModification.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  _QWORD *v40;
  char v41;
  char v42;

  v37 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048];
  sub_1BCB5F48C(0, &qword_1EDA144D0, (uint64_t (*)(void))sub_1BCB5F21C, (uint64_t)&type metadata for MedicationVisualizationFragment.FragmentModification.NoneCodingKeys, MEMORY[0x1E0DED048]);
  v35 = v4;
  v39 = *(char **)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v38 = (char *)&v33 - v5;
  sub_1BCB5F48C(0, &qword_1EDA144D8, (uint64_t (*)(void))sub_1BCB5F260, (uint64_t)&type metadata for MedicationVisualizationFragment.FragmentModification.ColorCodingKeys, v3);
  v34 = v6;
  v36 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v33 - v7;
  sub_1BCB5F48C(0, &qword_1EDA144C8, (uint64_t (*)(void))sub_1BCB5F2A4, (uint64_t)&type metadata for MedicationVisualizationFragment.FragmentModification.CodingKeys, v3);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v33 - v12;
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_1BCB5F2A4();
  v14 = v40;
  sub_1BCB64AD8();
  if (v14)
    goto LABEL_9;
  v15 = v38;
  v16 = v39;
  v33 = v11;
  v40 = a1;
  v17 = v13;
  v18 = sub_1BCB64970();
  v19 = v10;
  if (*(_QWORD *)(v18 + 16) != 1)
  {
    v22 = sub_1BCB647F0();
    swift_allocError();
    v24 = v23;
    sub_1BCB5F2E8();
    *v24 = &type metadata for MedicationVisualizationFragment.FragmentModification;
    sub_1BCB64940();
    sub_1BCB647D8();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, *MEMORY[0x1E0DEC450], v22);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v17, v10);
    a1 = v40;
LABEL_9:
    v26 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_0(v26);
  }
  if ((*(_BYTE *)(v18 + 32) & 1) != 0)
  {
    v42 = 1;
    sub_1BCB5F21C();
    sub_1BCB64934();
    (*((void (**)(char *, uint64_t))v16 + 1))(v15, v35);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v10);
    v20 = 0;
    v21 = 1;
  }
  else
  {
    v41 = 0;
    sub_1BCB5F260();
    v25 = v8;
    sub_1BCB64934();
    v39 = v13;
    v28 = v34;
    v29 = sub_1BCB6494C();
    v30 = v33;
    v20 = v29;
    v21 = v31;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v25, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v39, v19);
  }
  v32 = v37;
  *v37 = v20;
  v32[1] = v21;
  v26 = (uint64_t)v40;
  return __swift_destroy_boxed_opaque_existential_0(v26);
}

uint64_t sub_1BCB5E7F8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0[1];
  if (v1 == 1)
    return sub_1BCB64A9C();
  v3 = *v0;
  sub_1BCB64A9C();
  if (!v1)
    return sub_1BCB64AA8();
  sub_1BCB64AA8();
  swift_bridgeObjectRetain();
  sub_1BCB641CC();
  return sub_1BCB10A44(v3, v1);
}

uint64_t sub_1BCB5E888()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  v1 = v0[1];
  sub_1BCB64A90();
  if (v1 == 1)
  {
    sub_1BCB64A9C();
  }
  else
  {
    sub_1BCB64A9C();
    sub_1BCB64AA8();
    if (v1)
    {
      swift_bridgeObjectRetain();
      sub_1BCB641CC();
      sub_1BCB10A44(v2, v1);
    }
  }
  return sub_1BCB64AC0();
}

uint64_t sub_1BCB5E924@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return MedicationVisualizationFragment.FragmentModification.init(from:)(a1, a2);
}

uint64_t sub_1BCB5E938(_QWORD *a1)
{
  return MedicationVisualizationFragment.FragmentModification.encode(to:)(a1);
}

uint64_t MedicationVisualizationFragment.assetName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MedicationVisualizationFragment.modification.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  *a1 = v2;
  a1[1] = v3;
  return sub_1BCAFC5BC(v2, v3);
}

BOOL MedicationVisualizationFragment.isColorable.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24) != 1;
}

uint64_t MedicationVisualizationFragment.displayName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 == 1)
    v2 = 0;
  else
    v2 = *(_QWORD *)(v0 + 16);
  sub_1BCAFC5BC(*(_QWORD *)(v0 + 16), v1);
  return v2;
}

uint64_t MedicationVisualizationFragment.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  sub_1BCB641CC();
  swift_bridgeObjectRelease();
  if (v2 == 1)
    return sub_1BCB64A9C();
  sub_1BCB64A9C();
  sub_1BCB64AA8();
  if (v2)
  {
    swift_bridgeObjectRetain();
    sub_1BCB641CC();
    v4 = v1;
    v5 = v2;
  }
  else
  {
    v4 = v1;
    v5 = 0;
  }
  return sub_1BCB10A44(v4, v5);
}

uint64_t sub_1BCB5EA9C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6163696669646F6DLL;
  else
    return 0x6D614E7465737361;
}

uint64_t sub_1BCB5EAE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCB601CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCB5EB08()
{
  sub_1BCB5F404();
  return sub_1BCB64AF0();
}

uint64_t sub_1BCB5EB30()
{
  sub_1BCB5F404();
  return sub_1BCB64AFC();
}

uint64_t MedicationVisualizationFragment.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  sub_1BCB5F48C(0, &qword_1EF488B70, (uint64_t (*)(void))sub_1BCB5F404, (uint64_t)&type metadata for MedicationVisualizationFragment.CodingKeys, MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v11 - v6;
  v8 = *(_QWORD *)(v1 + 16);
  v12 = *(_QWORD *)(v1 + 24);
  v13 = v8;
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_1BCB5F404();
  sub_1BCB64AE4();
  LOBYTE(v15) = 0;
  v9 = v14;
  sub_1BCB64994();
  if (!v9)
  {
    v15 = v13;
    v16 = v12;
    v17 = 1;
    sub_1BCB5F448();
    sub_1BCB649AC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t MedicationVisualizationFragment.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  sub_1BCB64A90();
  swift_bridgeObjectRetain();
  sub_1BCB641CC();
  swift_bridgeObjectRelease();
  if (v2 == 1)
  {
    sub_1BCB64A9C();
  }
  else
  {
    sub_1BCB64A9C();
    sub_1BCB64AA8();
    if (v2)
    {
      swift_bridgeObjectRetain();
      sub_1BCB641CC();
      v3 = v1;
      v4 = v2;
    }
    else
    {
      v3 = v1;
      v4 = 0;
    }
    sub_1BCB10A44(v3, v4);
  }
  return sub_1BCB64AC0();
}

uint64_t MedicationVisualizationFragment.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v17 = a2;
  sub_1BCB5F48C(0, &qword_1EDA144E0, (uint64_t (*)(void))sub_1BCB5F404, (uint64_t)&type metadata for MedicationVisualizationFragment.CodingKeys, MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v16 - v7;
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_1BCB5F404();
  sub_1BCB64AD8();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v9 = v17;
  LOBYTE(v18) = 0;
  v10 = sub_1BCB64958();
  v12 = v11;
  v20 = 1;
  sub_1BCB5F4E8();
  swift_bridgeObjectRetain();
  sub_1BCB64964();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v13 = v18;
  v14 = v19;
  swift_bridgeObjectRetain();
  sub_1BCAFC5BC(v13, v14);
  swift_bridgeObjectRelease();
  *v9 = v10;
  v9[1] = v12;
  v9[2] = v13;
  v9[3] = v14;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  return sub_1BCB10A44(v13, v14);
}

uint64_t sub_1BCB5EF90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  sub_1BCB64A90();
  swift_bridgeObjectRetain();
  sub_1BCB641CC();
  swift_bridgeObjectRelease();
  if (v2 == 1)
  {
    sub_1BCB64A9C();
  }
  else
  {
    sub_1BCB64A9C();
    sub_1BCB64AA8();
    if (v2)
    {
      swift_bridgeObjectRetain();
      sub_1BCB641CC();
      v3 = v1;
      v4 = v2;
    }
    else
    {
      v3 = v1;
      v4 = 0;
    }
    sub_1BCB10A44(v3, v4);
  }
  return sub_1BCB64AC0();
}

uint64_t sub_1BCB5F060@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return MedicationVisualizationFragment.init(from:)(a1, a2);
}

uint64_t sub_1BCB5F074(_QWORD *a1)
{
  return MedicationVisualizationFragment.encode(to:)(a1);
}

uint64_t _s27HealthMedicationsExperience31MedicationVisualizationFragmentV0F12ModificationO2eeoiySbAE_AEtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  if (v3 != 1)
  {
    if (v5 != 1)
    {
      if (v3)
      {
        if (!v5)
        {
          v6 = *a2;
          v7 = 0;
          goto LABEL_6;
        }
        if (v2 == v4 && v3 == v5)
        {
          sub_1BCAFC5BC(*a1, v3);
          sub_1BCAFC5BC(v2, v3);
          sub_1BCB10A44(v2, v3);
          sub_1BCB10A44(v2, v3);
          return 1;
        }
        v9 = sub_1BCB649F4();
        sub_1BCAFC5BC(v4, v5);
        sub_1BCAFC5BC(v2, v3);
        sub_1BCB10A44(v2, v3);
        sub_1BCB10A44(v4, v5);
        if ((v9 & 1) == 0)
          return 0;
      }
      else
      {
        swift_bridgeObjectRetain();
        sub_1BCAFC5BC(v4, v5);
        sub_1BCAFC5BC(v2, 0);
        sub_1BCB10A44(v2, 0);
        sub_1BCB10A44(v4, v5);
        if (v5)
          goto LABEL_7;
      }
      return 1;
    }
LABEL_5:
    v6 = *a2;
    v7 = a2[1];
LABEL_6:
    sub_1BCAFC5BC(v6, v7);
    sub_1BCAFC5BC(v2, v3);
LABEL_7:
    sub_1BCB10A44(v2, v3);
    sub_1BCB10A44(v4, v5);
    return 0;
  }
  if (v5 != 1)
    goto LABEL_5;
  sub_1BCB10A44(*a1, 1);
  sub_1BCB10A44(v4, 1);
  return v5;
}

unint64_t sub_1BCB5F21C()
{
  unint64_t result;

  result = qword_1EDA14350;
  if (!qword_1EDA14350)
  {
    result = MEMORY[0x1BCCFD874](&unk_1BCB699F4, &type metadata for MedicationVisualizationFragment.FragmentModification.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDA14350);
  }
  return result;
}

unint64_t sub_1BCB5F260()
{
  unint64_t result;

  result = qword_1EDA14368;
  if (!qword_1EDA14368)
  {
    result = MEMORY[0x1BCCFD874](&unk_1BCB699A4, &type metadata for MedicationVisualizationFragment.FragmentModification.ColorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDA14368);
  }
  return result;
}

unint64_t sub_1BCB5F2A4()
{
  unint64_t result;

  result = qword_1EDA14338;
  if (!qword_1EDA14338)
  {
    result = MEMORY[0x1BCCFD874](&unk_1BCB69954, &type metadata for MedicationVisualizationFragment.FragmentModification.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDA14338);
  }
  return result;
}

void sub_1BCB5F2E8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF488B60)
  {
    sub_1BCB5F354();
    sub_1BCB647E4();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF488B60);
  }
}

unint64_t sub_1BCB5F354()
{
  unint64_t result;

  result = qword_1EF488B68;
  if (!qword_1EF488B68)
  {
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF488B68);
  }
  return result;
}

uint64_t _s27HealthMedicationsExperience31MedicationVisualizationFragmentV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  BOOL v4;
  char v5;
  char v6;
  char v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = *(_OWORD *)(a1 + 16);
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v4
    || (v9 = *(_OWORD *)(a2 + 16),
        v10 = *(_OWORD *)(a1 + 16),
        v5 = sub_1BCB649F4(),
        v3 = v9,
        v2 = v10,
        v6 = v5,
        v7 = 0,
        (v6 & 1) != 0))
  {
    v12 = v2;
    v11 = v3;
    v7 = _s27HealthMedicationsExperience31MedicationVisualizationFragmentV0F12ModificationO2eeoiySbAE_AEtFZ_0((uint64_t *)&v12, (uint64_t *)&v11);
  }
  return v7 & 1;
}

unint64_t sub_1BCB5F404()
{
  unint64_t result;

  result = qword_1EDA14388;
  if (!qword_1EDA14388)
  {
    result = MEMORY[0x1BCCFD874](&unk_1BCB69904, &type metadata for MedicationVisualizationFragment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDA14388);
  }
  return result;
}

unint64_t sub_1BCB5F448()
{
  unint64_t result;

  result = qword_1EF488B78;
  if (!qword_1EF488B78)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for MedicationVisualizationFragment.FragmentModification, &type metadata for MedicationVisualizationFragment.FragmentModification);
    atomic_store(result, (unint64_t *)&qword_1EF488B78);
  }
  return result;
}

void sub_1BCB5F48C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3();
    v10 = a5(a1, a4, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

unint64_t sub_1BCB5F4E8()
{
  unint64_t result;

  result = qword_1EDA14380;
  if (!qword_1EDA14380)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for MedicationVisualizationFragment.FragmentModification, &type metadata for MedicationVisualizationFragment.FragmentModification);
    atomic_store(result, (unint64_t *)&qword_1EDA14380);
  }
  return result;
}

unint64_t sub_1BCB5F530()
{
  unint64_t result;

  result = qword_1EF488B80;
  if (!qword_1EF488B80)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for MedicationVisualizationFragment.FragmentModification, &type metadata for MedicationVisualizationFragment.FragmentModification);
    atomic_store(result, (unint64_t *)&qword_1EF488B80);
  }
  return result;
}

unint64_t sub_1BCB5F578()
{
  unint64_t result;

  result = qword_1EDA143A8;
  if (!qword_1EDA143A8)
  {
    result = MEMORY[0x1BCCFD874](&protocol conformance descriptor for MedicationVisualizationFragment, &type metadata for MedicationVisualizationFragment);
    atomic_store(result, (unint64_t *)&qword_1EDA143A8);
  }
  return result;
}

uint64_t destroy for MedicationVisualizationFragment(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 24);
  if (result != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for MedicationVisualizationFragment(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a2 + 2;
  v5 = a2[3];
  swift_bridgeObjectRetain();
  if (v5 == 1)
  {
    *(_OWORD *)(a1 + 16) = *v4;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)v4;
    *(_QWORD *)(a1 + 24) = v5;
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for MedicationVisualizationFragment(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[3];
  if (a1[3] != 1)
  {
    if (v4 != 1)
    {
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1BCB5F720((uint64_t)(a1 + 2));
    goto LABEL_6;
  }
  if (v4 == 1)
  {
LABEL_6:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1BCB5F720(uint64_t a1)
{
  uint64_t v2;

  sub_1BCB5F75C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1BCB5F75C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF488B88)
  {
    sub_1BCB5F7A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF488B88);
  }
}

void sub_1BCB5F7A8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EDA131B0)
  {
    v0 = sub_1BCB64628();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EDA131B0);
  }
}

_QWORD *assignWithTake for MedicationVisualizationFragment(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2 + 2;
  if (a1[3] != 1)
  {
    v6 = a2[3];
    if (v6 != 1)
    {
      a1[2] = *v5;
      a1[3] = v6;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1BCB5F720((uint64_t)(a1 + 2));
  }
  *((_OWORD *)a1 + 1) = *(_OWORD *)v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicationVisualizationFragment(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MedicationVisualizationFragment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicationVisualizationFragment()
{
  return &type metadata for MedicationVisualizationFragment;
}

unint64_t destroy for MedicationVisualizationFragment.FragmentModification(uint64_t a1)
{
  unint64_t result;
  int v2;

  result = *(_QWORD *)(a1 + 8);
  v2 = -1;
  if (result < 0xFFFFFFFF)
    v2 = result;
  if (v2 - 1 < 0)
    return swift_bridgeObjectRelease();
  return result;
}

_QWORD *_s27HealthMedicationsExperience31MedicationVisualizationFragmentV20FragmentModificationOwCP_0(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = a2[1];
  if ((int)v4 - 1 < 0)
  {
    *a1 = *a2;
    a1[1] = v3;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

_QWORD *assignWithCopy for MedicationVisualizationFragment.FragmentModification(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  LODWORD(v4) = -1;
  if (a1[1] >= 0xFFFFFFFFuLL)
    LODWORD(v5) = -1;
  else
    v5 = a1[1];
  v6 = v5 - 1;
  if (a2[1] < 0xFFFFFFFFuLL)
    v4 = a2[1];
  v7 = v4 - 1;
  if (v6 < 0)
  {
    if (v7 < 0)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  if ((v7 & 0x80000000) == 0)
  {
LABEL_11:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithTake for MedicationVisualizationFragment.FragmentModification(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = -1;
  if (v4 < 0xFFFFFFFF)
    v5 = v4;
  if (v5 - 1 < 0)
  {
    v6 = a2[1];
    LODWORD(v7) = -1;
    if (v6 < 0xFFFFFFFF)
      v7 = a2[1];
    if ((int)v7 - 1 < 0)
    {
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRelease();
      return a1;
    }
    swift_bridgeObjectRelease();
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for MedicationVisualizationFragment.FragmentModification(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  if ((v4 + 1) >= 2)
    return v4;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MedicationVisualizationFragment.FragmentModification(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t sub_1BCB5FB50(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

_QWORD *sub_1BCB5FB74(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *result = a2 - 0x7FFFFFFF;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicationVisualizationFragment.FragmentModification()
{
  return &type metadata for MedicationVisualizationFragment.FragmentModification;
}

ValueMetadata *type metadata accessor for MedicationVisualizationFragment.CodingKeys()
{
  return &type metadata for MedicationVisualizationFragment.CodingKeys;
}

uint64_t _s27HealthMedicationsExperience31MedicationVisualizationFragmentV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s27HealthMedicationsExperience31MedicationVisualizationFragmentV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BCB5FCA4 + 4 * byte_1BCB69495[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BCB5FCD8 + 4 * byte_1BCB69490[v4]))();
}

uint64_t sub_1BCB5FCD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCB5FCE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCB5FCE8);
  return result;
}

uint64_t sub_1BCB5FCF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCB5FCFCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BCB5FD00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCB5FD08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1BCB5FD14(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for MedicationVisualizationFragment.FragmentModification.CodingKeys()
{
  return &type metadata for MedicationVisualizationFragment.FragmentModification.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for MedicationVisualizationFragment.FragmentModification.ColorCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BCB5FD70 + 4 * byte_1BCB6949A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BCB5FD90 + 4 * byte_1BCB6949F[v4]))();
}

_BYTE *sub_1BCB5FD70(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BCB5FD90(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BCB5FD98(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BCB5FDA0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BCB5FDA8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BCB5FDB0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MedicationVisualizationFragment.FragmentModification.ColorCodingKeys()
{
  return &type metadata for MedicationVisualizationFragment.FragmentModification.ColorCodingKeys;
}

ValueMetadata *type metadata accessor for MedicationVisualizationFragment.FragmentModification.NoneCodingKeys()
{
  return &type metadata for MedicationVisualizationFragment.FragmentModification.NoneCodingKeys;
}

unint64_t sub_1BCB5FDE0()
{
  unint64_t result;

  result = qword_1EF488B90;
  if (!qword_1EF488B90)
  {
    result = MEMORY[0x1BCCFD874](&unk_1BCB6976C, &type metadata for MedicationVisualizationFragment.FragmentModification.ColorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF488B90);
  }
  return result;
}

unint64_t sub_1BCB5FE28()
{
  unint64_t result;

  result = qword_1EF488B98;
  if (!qword_1EF488B98)
  {
    result = MEMORY[0x1BCCFD874](&unk_1BCB69824, &type metadata for MedicationVisualizationFragment.FragmentModification.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF488B98);
  }
  return result;
}

unint64_t sub_1BCB5FE70()
{
  unint64_t result;

  result = qword_1EF488BA0;
  if (!qword_1EF488BA0)
  {
    result = MEMORY[0x1BCCFD874](&unk_1BCB698DC, &type metadata for MedicationVisualizationFragment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF488BA0);
  }
  return result;
}

unint64_t sub_1BCB5FEB8()
{
  unint64_t result;

  result = qword_1EDA14398;
  if (!qword_1EDA14398)
  {
    result = MEMORY[0x1BCCFD874](&unk_1BCB6984C, &type metadata for MedicationVisualizationFragment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDA14398);
  }
  return result;
}

unint64_t sub_1BCB5FF00()
{
  unint64_t result;

  result = qword_1EDA14390;
  if (!qword_1EDA14390)
  {
    result = MEMORY[0x1BCCFD874](&unk_1BCB69874, &type metadata for MedicationVisualizationFragment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDA14390);
  }
  return result;
}

unint64_t sub_1BCB5FF48()
{
  unint64_t result;

  result = qword_1EDA14348;
  if (!qword_1EDA14348)
  {
    result = MEMORY[0x1BCCFD874](&unk_1BCB69794, &type metadata for MedicationVisualizationFragment.FragmentModification.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDA14348);
  }
  return result;
}

unint64_t sub_1BCB5FF90()
{
  unint64_t result;

  result = qword_1EDA14340;
  if (!qword_1EDA14340)
  {
    result = MEMORY[0x1BCCFD874](&unk_1BCB697BC, &type metadata for MedicationVisualizationFragment.FragmentModification.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDA14340);
  }
  return result;
}

unint64_t sub_1BCB5FFD8()
{
  unint64_t result;

  result = qword_1EDA14378;
  if (!qword_1EDA14378)
  {
    result = MEMORY[0x1BCCFD874](&unk_1BCB696DC, &type metadata for MedicationVisualizationFragment.FragmentModification.ColorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDA14378);
  }
  return result;
}

unint64_t sub_1BCB60020()
{
  unint64_t result;

  result = qword_1EDA14370;
  if (!qword_1EDA14370)
  {
    result = MEMORY[0x1BCCFD874](&unk_1BCB69704, &type metadata for MedicationVisualizationFragment.FragmentModification.ColorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDA14370);
  }
  return result;
}

unint64_t sub_1BCB60068()
{
  unint64_t result;

  result = qword_1EDA14360;
  if (!qword_1EDA14360)
  {
    result = MEMORY[0x1BCCFD874](&unk_1BCB6968C, &type metadata for MedicationVisualizationFragment.FragmentModification.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDA14360);
  }
  return result;
}

unint64_t sub_1BCB600B0()
{
  unint64_t result;

  result = qword_1EDA14358;
  if (!qword_1EDA14358)
  {
    result = MEMORY[0x1BCCFD874](&unk_1BCB696B4, &type metadata for MedicationVisualizationFragment.FragmentModification.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EDA14358);
  }
  return result;
}

uint64_t sub_1BCB600F4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x726F6C6F63 && a2 == 0xE500000000000000;
  if (v2 || (sub_1BCB649F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701736302 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1BCB649F4();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1BCB601CC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6D614E7465737361 && a2 == 0xE900000000000065;
  if (v2 || (sub_1BCB649F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6163696669646F6DLL && a2 == 0xEC0000006E6F6974)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1BCB649F4();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void MedicationShape.accessibilityLabel.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_1BCB60320()
{
  id v0;
  uint64_t v1;

  if (qword_1EDA14148 != -1)
    swift_once();
  v0 = (id)qword_1EDA14130;
  swift_bridgeObjectRetain();
  v1 = sub_1BCB63A34();
  swift_bridgeObjectRelease();

  return v1;
}

UIColor __swiftcall UIColor.init(hex:)(Swift::Int hex)
{
  return (UIColor)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithRed_green_blue_alpha_, (double)BYTE2(hex) / 255.0, (double)BYTE1(hex) / 255.0, (double)hex / 255.0, 1.0);
}

CGColorRef __swiftcall UIColor.cgColor(with:)(UITraitCollection with)
{
  void *v1;
  id v2;
  CGColor *v3;

  v2 = objc_msgSend(v1, sel_resolvedColorWithTraitCollection_, with.super.isa);
  v3 = (CGColor *)objc_msgSend(v2, sel_CGColor);

  return v3;
}

uint64_t MedicationUserFacingTitleProviding.userFacingTitle.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(void))(a2 + 72))();
  if (!v5)
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v6 = result & 0xFFFFFFFFFFFFLL;
  if (!v6)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  }
  return result;
}

uint64_t MedicationUserFacingTitleProviding.expandedTitle.getter(uint64_t a1, uint64_t (**a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v24;

  sub_1BCAFC448(0, &qword_1EDA13898, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v24 - v5;
  v7 = a2[9](a1, a2);
  if (!v8)
    return a2[2](a1, a2);
  v9 = v7;
  v10 = v8;
  v11 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0)
    v11 = v7 & 0xFFFFFFFFFFFFLL;
  if (!v11 || (v12 = a2[5](a1, a2), !v13))
  {
    swift_bridgeObjectRelease();
    return a2[2](a1, a2);
  }
  v14 = v12;
  v15 = v13;
  v16 = sub_1BCB63B90();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v6, 1, 1, v16);
  if (qword_1EDA14148 != -1)
    swift_once();
  v17 = (void *)qword_1EDA14130;
  sub_1BCAFC448(0, (unint64_t *)&qword_1EDA13A08, (uint64_t (*)(uint64_t))sub_1BCB0C1E4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1BCB66000;
  v19 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v18 + 56) = MEMORY[0x1E0DEA968];
  v20 = sub_1BCAFC3C8();
  *(_QWORD *)(v18 + 32) = v9;
  *(_QWORD *)(v18 + 40) = v10;
  *(_QWORD *)(v18 + 96) = v19;
  *(_QWORD *)(v18 + 104) = v20;
  *(_QWORD *)(v18 + 64) = v20;
  *(_QWORD *)(v18 + 72) = v14;
  *(_QWORD *)(v18 + 80) = v15;
  v21 = v17;
  swift_bridgeObjectRetain();
  sub_1BCB63A34();
  v22 = sub_1BCB64160();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BCAFC62C((uint64_t)v6, &qword_1EDA13898, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38]);
  return v22;
}

uint64_t MedicationUserFacingTitleProviding.nonUserSpecifiedName.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v9;

  v4 = (*(uint64_t (**)(void))(a2 + 128))();
  if (v5)
    return v4;
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (v6)
    return v4;
  if (qword_1EDA14148 != -1)
    swift_once();
  v9 = (id)qword_1EDA14130;
  swift_bridgeObjectRetain();
  v7 = sub_1BCB63A34();
  swift_bridgeObjectRelease();

  return v7;
}

uint64_t MedicationUserFacingTitleProviding.userFacingSubtitle.getter(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  if (qword_1EDA14148 != -1)
    swift_once();
  v4 = (id)qword_1EDA14130;
  swift_bridgeObjectRetain();
  sub_1BCB63A34();
  swift_bridgeObjectRelease();

  sub_1BCB2BB90();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BCB66000;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  v8 = v7;
  *(_QWORD *)(inited + 32) = v6;
  *(_QWORD *)(inited + 40) = v7;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
  v11 = v9;
  *(_QWORD *)(inited + 48) = v10;
  *(_QWORD *)(inited + 56) = v9;
  if (!v8)
  {
    v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (!v9)
      goto LABEL_14;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  v12 = sub_1BCAF6A40(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v14 = v12[2];
  v13 = v12[3];
  if (v14 >= v13 >> 1)
    v12 = sub_1BCAF6A40((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
  v12[2] = v14 + 1;
  v15 = &v12[2 * v14];
  v15[4] = v6;
  v15[5] = v8;
  if (v11)
  {
LABEL_9:
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_1BCAF6A40(0, v12[2] + 1, 1, v12);
    v17 = v12[2];
    v16 = v12[3];
    if (v17 >= v16 >> 1)
      v12 = sub_1BCAF6A40((_QWORD *)(v16 > 1), v17 + 1, 1, v12);
    v12[2] = v17 + 1;
    v18 = &v12[2 * v17];
    v18[4] = v10;
    v18[5] = v11;
  }
LABEL_14:
  swift_release();
  sub_1BCB0ADA0(0, (unint64_t *)&qword_1EDA14180, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
  sub_1BCB0AA88();
  v19 = sub_1BCB640F4();
  v21 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000) == 0)
    v22 = v19 & 0xFFFFFFFFFFFFLL;
  if (!v22)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v19;
}

uint64_t MedicationUserFacingTitleProviding.brandOrGenericOrPreferred.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v21 - v10;
  v13 = (*(uint64_t (**)(uint64_t))(v12 + 88))(v9);
  v15 = v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v16(v11, v2, a1);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, a1);
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 96))(a1, a2);
    v18 = v17;
    v16(v8, (uint64_t)v11, a1);
    if (!v18)
      v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 80))(a1, a2);
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, a1);
    v19(v11, a1);
  }
  return v13;
}

uint64_t MedicationUserFacingTitleProviding.manufacturedOrBasicDoseForm.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(uint64_t (**)(uint64_t))(v9 + 104))(v6);
  v12 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a1);
  if (!v12)
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 112))(a1, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
  return v10;
}

uint64_t MedicationUserFacingTitleProviding.doseForm.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(uint64_t (**)(uint64_t))(v9 + 136))(v6);
  if ((v11 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a1);
LABEL_7:
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
    goto LABEL_8;
  }
  HKMedicationFreeTextFormTypeCode.localizationKey.getter(v10);
  if (qword_1EDA14148 != -1)
    swift_once();
  v12 = (id)qword_1EDA14130;
  swift_bridgeObjectRetain();
  v13 = sub_1BCB63A34();
  v15 = v14;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a1);
  if (!v15)
    goto LABEL_7;
LABEL_8:
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
  return v13;
}

uint64_t MedicationUserFacingTitleProviding.unitStrength.getter(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  char v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;

  v4 = objc_msgSend((id)objc_opt_self(), sel_medicationDoseEventTypeForIdentifier_, *MEMORY[0x1E0CB5418]);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 144))(a1, a2);
  if (v6)
  {
    v7 = v6;
    v8 = objc_msgSend(v6, sel__unit);
    sub_1BCB34EC8();
    v9 = objc_msgSend((id)objc_opt_self(), sel_percentUnit);
    v10 = sub_1BCB645F8();

    v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D2F820]), sel_init);
    v12 = v11;
    if ((v10 & 1) != 0)
      objc_msgSend(v11, sel_setHasSpaceBetweenValueAndUnit_, 0);

    v13 = objc_msgSend(v7, sel_localizedStringForType_parameters_, v5, v12);
    v14 = sub_1BCB6413C();

  }
  else
  {
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 120))(a1, a2);

  }
  return v14;
}

uint64_t HKMedicationUserDomainConcept.__userSpecifiedName.getter()
{
  return sub_1BCB623D4((SEL *)&selRef_userSpecifiedName);
}

uint64_t HKMedicationUserDomainConcept.__preferredName.getter()
{
  return sub_1BCB62368();
}

uint64_t HKMedicationUserDomainConcept.__brandName.getter()
{
  return sub_1BCB62368();
}

uint64_t HKMedicationUserDomainConcept.__genericName.getter()
{
  return sub_1BCB62368();
}

uint64_t HKMedicationUserDomainConcept.__manufacturedDoseForm.getter()
{
  return sub_1BCB62368();
}

uint64_t HKMedicationUserDomainConcept.__basicDoseForm.getter()
{
  return sub_1BCB62368();
}

uint64_t sub_1BCB62368()
{
  uint64_t KeyPath;
  uint64_t v1;

  KeyPath = swift_getKeyPath();
  v1 = sub_1BCB1FCE0(KeyPath, 0x53555F6E65, 0xE500000000000000);
  swift_release();
  return v1;
}

uint64_t HKMedicationUserDomainConcept.__baseUnitStrength.getter()
{
  return sub_1BCB623D4((SEL *)&selRef_unlocalizedQuantifiedUnitStrengthPreferredDisplayString);
}

uint64_t HKMedicationUserDomainConcept.__freeTextMedicationName.getter()
{
  return sub_1BCB623D4((SEL *)&selRef_freeTextMedicationName);
}

uint64_t sub_1BCB623D4(SEL *a1)
{
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;

  v2 = objc_msgSend(v1, *a1);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = sub_1BCB6413C();

  return v4;
}

id HKMedicationUserDomainConcept.__freeTextMedicationForm.getter()
{
  void *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(v0, sel_freeTextMedicationFormCode);
  v2 = v1;
  if (!v1)
    return 0;
  v3 = objc_msgSend(v1, sel_longLongValue);

  return v3;
}

id HKMedicationUserDomainConcept.__freeTextMedicationStrengthQuantity.getter()
{
  void *v0;

  return objc_msgSend(v0, sel_freeTextMedicationStrengthQuantity);
}

uint64_t sub_1BCB624BC(uint64_t a1, uint64_t a2)
{
  return sub_1BCB62578(a1, a2, (SEL *)&selRef_userSpecifiedName);
}

uint64_t sub_1BCB624C8()
{
  return sub_1BCB62504();
}

uint64_t sub_1BCB624D4()
{
  return sub_1BCB62504();
}

uint64_t sub_1BCB624E0()
{
  return sub_1BCB62504();
}

uint64_t sub_1BCB624EC()
{
  return sub_1BCB62504();
}

uint64_t sub_1BCB624F8()
{
  return sub_1BCB62504();
}

uint64_t sub_1BCB62504()
{
  uint64_t KeyPath;
  uint64_t v1;

  KeyPath = swift_getKeyPath();
  v1 = sub_1BCB1FCE0(KeyPath, 0x53555F6E65, 0xE500000000000000);
  swift_release();
  return v1;
}

uint64_t sub_1BCB62560(uint64_t a1, uint64_t a2)
{
  return sub_1BCB62578(a1, a2, (SEL *)&selRef_unlocalizedQuantifiedUnitStrengthPreferredDisplayString);
}

uint64_t sub_1BCB6256C(uint64_t a1, uint64_t a2)
{
  return sub_1BCB62578(a1, a2, (SEL *)&selRef_freeTextMedicationName);
}

uint64_t sub_1BCB62578(uint64_t a1, uint64_t a2, SEL *a3)
{
  id *v3;
  id v4;
  void *v5;
  uint64_t v6;

  v4 = objc_msgSend(*v3, *a3);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = sub_1BCB6413C();

  return v6;
}

id sub_1BCB625D8()
{
  id *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(*v0, sel_freeTextMedicationFormCode);
  v2 = v1;
  if (!v1)
    return 0;
  v3 = objc_msgSend(v1, sel_longLongValue);

  return v3;
}

id sub_1BCB6263C()
{
  id *v0;

  return objc_msgSend(*v0, sel_freeTextMedicationStrengthQuantity);
}

uint64_t HKMedicationUserDomainConcept.medmojiConfig.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = v1;
  sub_1BCAFC448(0, &qword_1EF487308, type metadata accessor for MedicationVisualizationConfig, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v13 - v5;
  v7 = objc_msgSend(v2, sel_userVisualizationConfigJSONString);
  if (v7)
  {
    v8 = v7;
    sub_1BCB6413C();

    MedicationVisualizationConfig.init(jsonString:)((uint64_t)v6);
    v9 = type metadata accessor for MedicationVisualizationConfig(0);
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) != 1)
    {
      sub_1BCB4E76C((uint64_t)v6, a1);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
    }
    sub_1BCAFC62C((uint64_t)v6, &qword_1EF487308, type metadata accessor for MedicationVisualizationConfig);
  }
  v11 = type metadata accessor for MedicationVisualizationConfig(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 1, 1, v11);
}

uint64_t HKMedicationUserDomainConcept.resolvedMedicationName.getter()
{
  void *v0;
  uint64_t KeyPath;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;

  KeyPath = swift_getKeyPath();
  v2 = v0;
  v3 = sub_1BCB1FCE0(KeyPath, 0x53555F6E65, 0xE500000000000000);
  v5 = v4;
  swift_release();
  if (v5)
    goto LABEL_4;
  v6 = swift_getKeyPath();
  v7 = v2;
  v3 = sub_1BCB1FCE0(v6, 0x53555F6E65, 0xE500000000000000);
  v9 = v8;
  swift_release();
  if (!v9)
  {
    v11 = swift_getKeyPath();
    v12 = v7;
    v3 = sub_1BCB1FCE0(v11, 0x53555F6E65, 0xE500000000000000);
    v14 = v13;

    swift_release();
    if (v14)
      return v3;
    v15 = objc_msgSend(v12, sel_freeTextMedicationName);
    if (v15)
    {
      v16 = v15;
      v3 = sub_1BCB6413C();
    }
    else
    {
      v17 = objc_msgSend(v12, sel_userSpecifiedName);
      if (v17)
      {
        v2 = v17;
        v3 = sub_1BCB6413C();
        goto LABEL_4;
      }
      if (qword_1EDA14148 != -1)
        swift_once();
      v16 = (id)qword_1EDA14130;
      swift_bridgeObjectRetain();
      v3 = sub_1BCB63A34();
      swift_bridgeObjectRelease();
    }

    return v3;
  }

LABEL_4:
  return v3;
}

uint64_t sub_1BCB62A04(char a1)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;

  v2 = v1;
  v4 = objc_msgSend(v1, sel_userSpecifiedName);
  if (v4)
  {
    v5 = v4;
    v6 = sub_1BCB6413C();
    v8 = v7;

    swift_bridgeObjectRelease();
    v9 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0)
      v9 = v6 & 0xFFFFFFFFFFFFLL;
    if (v9)
    {
      KeyPath = swift_getKeyPath();
      v11 = v2;
      v12 = sub_1BCB1FCE0(KeyPath, 0x53555F6E65, 0xE500000000000000);
      v14 = v13;
      swift_release();
      if (v14)
      {
LABEL_8:

        goto LABEL_9;
      }
      v15 = swift_getKeyPath();
      v16 = v11;
      v12 = sub_1BCB1FCE0(v15, 0x53555F6E65, 0xE500000000000000);
      v14 = v17;
      swift_release();
      if (v14)
      {

        goto LABEL_8;
      }
      v30 = swift_getKeyPath();
      v31 = v16;
      v12 = sub_1BCB1FCE0(v30, 0x53555F6E65, 0xE500000000000000);
      v14 = v32;

      swift_release();
      if (v14)
      {
LABEL_9:
        v18 = sub_1BCAF6A40(0, 1, 1, MEMORY[0x1E0DEE9D8]);
        v20 = v18[2];
        v19 = v18[3];
        if (v20 >= v19 >> 1)
          v18 = sub_1BCAF6A40((_QWORD *)(v19 > 1), v20 + 1, 1, v18);
        v18[2] = v20 + 1;
        v21 = &v18[2 * v20];
        v21[4] = v12;
        v21[5] = v14;
        if ((a1 & 1) == 0)
          goto LABEL_12;
        goto LABEL_20;
      }
    }
  }
  v18 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if ((a1 & 1) == 0)
  {
LABEL_12:
    v22 = HKMedicationUserDomainConcept.localizedResolvedForm.getter();
    if (!v23)
      goto LABEL_29;
    v24 = v22;
    v25 = v23;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v18 = sub_1BCAF6A40(0, v18[2] + 1, 1, v18);
    v27 = v18[2];
    v26 = v18[3];
    if (v27 >= v26 >> 1)
      v18 = sub_1BCAF6A40((_QWORD *)(v26 > 1), v27 + 1, 1, v18);
    v18[2] = v27 + 1;
    v28 = &v18[2 * v27];
    v28[4] = v24;
    v29 = v28 + 4;
    goto LABEL_28;
  }
LABEL_20:
  v33 = swift_getKeyPath();
  v34 = sub_1BCB1FCE0(v33, 0x53555F6E65, 0xE500000000000000);
  v25 = v35;
  swift_release();
  if (!v25)
  {
    v36 = HKMedicationUserDomainConcept.localizedResolvedForm.getter();
    if (!v37)
      goto LABEL_29;
    v34 = v36;
    v25 = v37;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v18 = sub_1BCAF6A40(0, v18[2] + 1, 1, v18);
  v39 = v18[2];
  v38 = v18[3];
  if (v39 >= v38 >> 1)
    v18 = sub_1BCAF6A40((_QWORD *)(v38 > 1), v39 + 1, 1, v18);
  v18[2] = v39 + 1;
  v40 = &v18[2 * v39];
  v40[4] = v34;
  v29 = v40 + 4;
LABEL_28:
  v29[1] = v25;
LABEL_29:
  if (v18[2])
  {
    sub_1BCB0ADA0(0, (unint64_t *)&qword_1EDA14180, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
    sub_1BCB0AA88();
    v41 = sub_1BCB640F4();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v41;
}

uint64_t HKMedicationUserDomainConcept.caption.getter()
{
  return sub_1BCB62A04(0);
}

uint64_t HKMedicationUserDomainConcept.medicationDetailCardCaption.getter()
{
  return sub_1BCB62A04(1);
}

uint64_t dispatch thunk of MedicationUserFacingTitleProviding.expandedTitle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of MedicationUserFacingTitleProviding.userFacingTitle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of MedicationUserFacingTitleProviding.nonUserSpecifiedName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of MedicationUserFacingTitleProviding.userFacingSubtitle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of MedicationUserFacingTitleProviding.brandOrGenericOrPreferred.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of MedicationUserFacingTitleProviding.manufacturedOrBasicDoseForm.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of MedicationUserFacingTitleProviding.doseForm.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of MedicationUserFacingTitleProviding.unitStrength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of MedicationUserFacingTitleProviding.__userSpecifiedName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of MedicationUserFacingTitleProviding.__preferredName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of MedicationUserFacingTitleProviding.__brandName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of MedicationUserFacingTitleProviding.__genericName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of MedicationUserFacingTitleProviding.__manufacturedDoseForm.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of MedicationUserFacingTitleProviding.__basicDoseForm.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of MedicationUserFacingTitleProviding.__baseUnitStrength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of MedicationUserFacingTitleProviding.__freeTextMedicationName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of MedicationUserFacingTitleProviding.__freeTextMedicationForm.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of MedicationUserFacingTitleProviding.__freeTextMedicationStrengthQuantity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t sub_1BCB62E68()
{
  id v0;
  uint64_t v1;

  swift_beginAccess();
  v0 = (id)HKStringFromMedicationListOnboardingProvenanceType();
  v1 = sub_1BCB6413C();

  return v1;
}

uint64_t sub_1BCB62ED0()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1BCB62F00(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*sub_1BCB62F3C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1BCB62F78(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 32) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BCB62FD4()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BCB63008(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1BCB6304C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1BCB63088()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 40);
}

uint64_t sub_1BCB630BC(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v2 + 40) = a1;
  *(_BYTE *)(v2 + 48) = a2 & 1;
  return result;
}

uint64_t (*sub_1BCB6310C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1BCB63148()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t sub_1BCB63178(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 49) = a1;
  return result;
}

uint64_t (*sub_1BCB631B4())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1BCB631F0()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 56);
}

uint64_t sub_1BCB63224(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v2 + 56) = a1;
  *(_BYTE *)(v2 + 64) = a2 & 1;
  return result;
}

uint64_t (*sub_1BCB63274())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t MedicationListOnboardingContext.__allocating_init(provenance:firstTimeMedFlow:medsDetailsEntryPoint:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  char v7;
  uint64_t v8;

  v7 = a4 & 1;
  v8 = swift_allocObject();
  MedicationListOnboardingContext.init(provenance:firstTimeMedFlow:medsDetailsEntryPoint:)(a1, a2, a3, v7);
  return v8;
}

uint64_t MedicationListOnboardingContext.init(provenance:firstTimeMedFlow:medsDetailsEntryPoint:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = 0;
  *(_WORD *)(v4 + 48) = 513;
  *(_QWORD *)(v4 + 56) = 0;
  *(_BYTE *)(v4 + 64) = 1;
  *(_QWORD *)(v4 + 16) = a1;
  *(_BYTE *)(v4 + 24) = a2;
  swift_beginAccess();
  *(_QWORD *)(v4 + 40) = a3;
  *(_BYTE *)(v4 + 48) = a4 & 1;
  *(_QWORD *)(v4 + 32) = sub_1BCB2FA2C((uint64_t)&unk_1E75574A0);
  return v4;
}

uint64_t sub_1BCB6339C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  swift_beginAccess();
  v1 = 0;
  if ((*(_BYTE *)(v0 + 48) & 1) == 0)
  {
    v2 = (id)HKStringFromMedicationListOnboardingDetailsEntryType();
    v1 = sub_1BCB6413C();

  }
  return v1;
}

uint64_t MedicationListOnboardingContext.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MedicationListOnboardingContext.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1BCB63458@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 16);
  return result;
}

uint64_t sub_1BCB6349C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_QWORD *)(v3 + 16) = v2;
  return result;
}

uint64_t sub_1BCB634DC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 24);
  return result;
}

uint64_t sub_1BCB63520(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 24) = v2;
  return result;
}

uint64_t sub_1BCB63560@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 32);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BCB635AC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *a1;
  result = swift_beginAccess();
  v5 = *(_BYTE *)(v3 + 48);
  *(_QWORD *)a2 = *(_QWORD *)(v3 + 40);
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_1BCB635F8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = *a2;
  result = swift_beginAccess();
  *(_QWORD *)(v4 + 40) = v2;
  *(_BYTE *)(v4 + 48) = v3;
  return result;
}

uint64_t sub_1BCB63648@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 49);
  return result;
}

uint64_t sub_1BCB6368C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 49) = v2;
  return result;
}

uint64_t sub_1BCB636CC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *a1;
  result = swift_beginAccess();
  v5 = *(_BYTE *)(v3 + 64);
  *(_QWORD *)a2 = *(_QWORD *)(v3 + 56);
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_1BCB63718(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = *a2;
  result = swift_beginAccess();
  *(_QWORD *)(v4 + 56) = v2;
  *(_BYTE *)(v4 + 64) = v3;
  return result;
}

uint64_t type metadata accessor for MedicationListOnboardingContext()
{
  return objc_opt_self();
}

uint64_t method lookup function for MedicationListOnboardingContext()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MedicationListOnboardingContext.provenance.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of MedicationListOnboardingContext._provenance.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of MedicationListOnboardingContext._provenance.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of MedicationListOnboardingContext._provenance.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of MedicationListOnboardingContext.firstTimeMedFlow.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of MedicationListOnboardingContext.firstTimeMedFlow.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of MedicationListOnboardingContext.firstTimeMedFlow.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of MedicationListOnboardingContext.firstTimeStepCompleted.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of MedicationListOnboardingContext.firstTimeStepCompleted.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of MedicationListOnboardingContext.firstTimeStepCompleted.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of MedicationListOnboardingContext.medsDetailsEntryPoint.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of MedicationListOnboardingContext.medsDetailsEntryPoint.setter(uint64_t a1, char a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 216))(a1, a2 & 1);
}

uint64_t dispatch thunk of MedicationListOnboardingContext.medsDetailsEntryPoint.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of MedicationListOnboardingContext.suggestionsFromHealthRecords.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of MedicationListOnboardingContext.suggestionsFromHealthRecords.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of MedicationListOnboardingContext.suggestionsFromHealthRecords.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of MedicationListOnboardingContext.scheduleType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of MedicationListOnboardingContext.scheduleType.setter(uint64_t a1, char a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 264))(a1, a2 & 1);
}

uint64_t dispatch thunk of MedicationListOnboardingContext.scheduleType.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of MedicationListOnboardingContext.__allocating_init(provenance:firstTimeMedFlow:medsDetailsEntryPoint:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v4 + 280))(a1, a2, a3, a4 & 1);
}

uint64_t dispatch thunk of MedicationListOnboardingContext.medsDetailsEntryPointString()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self();
}

uint64_t sub_1BCB638F0()
{
  return MEMORY[0x1E0CADFC0]();
}

uint64_t sub_1BCB638FC()
{
  return MEMORY[0x1E0CAE070]();
}

uint64_t sub_1BCB63908()
{
  return MEMORY[0x1E0CAE0A8]();
}

uint64_t sub_1BCB63914()
{
  return MEMORY[0x1E0CAE0B8]();
}

uint64_t sub_1BCB63920()
{
  return MEMORY[0x1E0CAE0C8]();
}

uint64_t sub_1BCB6392C()
{
  return MEMORY[0x1E0CAE0E0]();
}

uint64_t sub_1BCB63938()
{
  return MEMORY[0x1E0CAE108]();
}

uint64_t sub_1BCB63944()
{
  return MEMORY[0x1E0CAE1A0]();
}

uint64_t sub_1BCB63950()
{
  return MEMORY[0x1E0CAE1D8]();
}

uint64_t sub_1BCB6395C()
{
  return MEMORY[0x1E0CAE1E8]();
}

uint64_t sub_1BCB63968()
{
  return MEMORY[0x1E0CAE370]();
}

uint64_t sub_1BCB63974()
{
  return MEMORY[0x1E0CAE3A0]();
}

uint64_t sub_1BCB63980()
{
  return MEMORY[0x1E0CAE3B8]();
}

uint64_t sub_1BCB6398C()
{
  return MEMORY[0x1E0CAE430]();
}

uint64_t sub_1BCB63998()
{
  return MEMORY[0x1E0CAE440]();
}

uint64_t sub_1BCB639A4()
{
  return MEMORY[0x1E0CAE4B8]();
}

uint64_t sub_1BCB639B0()
{
  return MEMORY[0x1E0CAE580]();
}

uint64_t sub_1BCB639BC()
{
  return MEMORY[0x1E0CAE5A0]();
}

uint64_t sub_1BCB639C8()
{
  return MEMORY[0x1E0CAE9C8]();
}

uint64_t sub_1BCB639D4()
{
  return MEMORY[0x1E0CAE9F8]();
}

uint64_t sub_1BCB639E0()
{
  return MEMORY[0x1E0CAEA38]();
}

uint64_t sub_1BCB639EC()
{
  return MEMORY[0x1E0CAEAB0]();
}

uint64_t sub_1BCB639F8()
{
  return MEMORY[0x1E0CAEB20]();
}

uint64_t sub_1BCB63A04()
{
  return MEMORY[0x1E0CAEB38]();
}

uint64_t sub_1BCB63A10()
{
  return MEMORY[0x1E0CAEB50]();
}

uint64_t sub_1BCB63A1C()
{
  return MEMORY[0x1E0CAEB88]();
}

uint64_t sub_1BCB63A28()
{
  return MEMORY[0x1E0CAEBA8]();
}

uint64_t sub_1BCB63A34()
{
  return MEMORY[0x1E0CAF328]();
}

uint64_t sub_1BCB63A40()
{
  return MEMORY[0x1E0CAF8D8]();
}

uint64_t sub_1BCB63A4C()
{
  return MEMORY[0x1E0CAF8E8]();
}

uint64_t sub_1BCB63A58()
{
  return MEMORY[0x1E0CAF8F8]();
}

uint64_t sub_1BCB63A64()
{
  return MEMORY[0x1E0CAF900]();
}

uint64_t sub_1BCB63A70()
{
  return MEMORY[0x1E0CAF920]();
}

uint64_t sub_1BCB63A7C()
{
  return MEMORY[0x1E0CAF930]();
}

uint64_t sub_1BCB63A88()
{
  return MEMORY[0x1E0CAF940]();
}

uint64_t sub_1BCB63A94()
{
  return MEMORY[0x1E0CAF980]();
}

uint64_t sub_1BCB63AA0()
{
  return MEMORY[0x1E0CAF990]();
}

uint64_t sub_1BCB63AAC()
{
  return MEMORY[0x1E0CAFE38]();
}

uint64_t sub_1BCB63AB8()
{
  return MEMORY[0x1E0CAFF00]();
}

uint64_t sub_1BCB63AC4()
{
  return MEMORY[0x1E0CAFFF8]();
}

uint64_t sub_1BCB63AD0()
{
  return MEMORY[0x1E0CB01F0]();
}

uint64_t sub_1BCB63ADC()
{
  return MEMORY[0x1E0CB0228]();
}

uint64_t sub_1BCB63AE8()
{
  return MEMORY[0x1E0CB05D8]();
}

uint64_t sub_1BCB63AF4()
{
  return MEMORY[0x1E0CB0680]();
}

uint64_t sub_1BCB63B00()
{
  return MEMORY[0x1E0CB06B8]();
}

uint64_t sub_1BCB63B0C()
{
  return MEMORY[0x1E0CB07C8]();
}

uint64_t sub_1BCB63B18()
{
  return MEMORY[0x1E0CB07E8]();
}

uint64_t sub_1BCB63B24()
{
  return MEMORY[0x1E0CB07F8]();
}

uint64_t sub_1BCB63B30()
{
  return MEMORY[0x1E0CB0860]();
}

uint64_t sub_1BCB63B3C()
{
  return MEMORY[0x1E0CB0870]();
}

uint64_t sub_1BCB63B48()
{
  return MEMORY[0x1E0CB0958]();
}

uint64_t sub_1BCB63B54()
{
  return MEMORY[0x1E0CB0998]();
}

uint64_t sub_1BCB63B60()
{
  return MEMORY[0x1E0CB0A80]();
}

uint64_t sub_1BCB63B6C()
{
  return MEMORY[0x1E0CB0BD8]();
}

uint64_t sub_1BCB63B78()
{
  return MEMORY[0x1E0CB0BE0]();
}

uint64_t sub_1BCB63B84()
{
  return MEMORY[0x1E0CB0CC8]();
}

uint64_t sub_1BCB63B90()
{
  return MEMORY[0x1E0CB0E38]();
}

uint64_t sub_1BCB63B9C()
{
  return MEMORY[0x1E0CB0F38]();
}

uint64_t sub_1BCB63BA8()
{
  return MEMORY[0x1E0CB0F60]();
}

uint64_t sub_1BCB63BB4()
{
  return MEMORY[0x1E0CB0F98]();
}

uint64_t sub_1BCB63BC0()
{
  return MEMORY[0x1E0CB0FB0]();
}

uint64_t sub_1BCB63BCC()
{
  return MEMORY[0x1E0CB0FB8]();
}

uint64_t sub_1BCB63BD8()
{
  return MEMORY[0x1E0CB0FE8]();
}

uint64_t sub_1BCB63BE4()
{
  return MEMORY[0x1E0D2BCC8]();
}

uint64_t sub_1BCB63BF0()
{
  return MEMORY[0x1E0CB1018]();
}

uint64_t sub_1BCB63BFC()
{
  return MEMORY[0x1E0CB1058]();
}

uint64_t sub_1BCB63C08()
{
  return MEMORY[0x1E0CB1060]();
}

uint64_t sub_1BCB63C14()
{
  return MEMORY[0x1E0CB1098]();
}

uint64_t sub_1BCB63C20()
{
  return MEMORY[0x1E0CB10C8]();
}

uint64_t sub_1BCB63C2C()
{
  return MEMORY[0x1E0CB11B8]();
}

uint64_t sub_1BCB63C38()
{
  return MEMORY[0x1E0CB11F0]();
}

uint64_t sub_1BCB63C44()
{
  return MEMORY[0x1E0CB1430]();
}

uint64_t sub_1BCB63C50()
{
  return MEMORY[0x1E0CB1438]();
}

uint64_t _s27HealthMedicationsExperience0A21StoreTimeZoneProviderV07currenteF010Foundation0eF0Vvg_0()
{
  return MEMORY[0x1E0CB1460]();
}

uint64_t sub_1BCB63C68()
{
  return MEMORY[0x1E0CB1470]();
}

uint64_t sub_1BCB63C74()
{
  return MEMORY[0x1E0C9B8A8]();
}

uint64_t sub_1BCB63C80()
{
  return MEMORY[0x1E0D2D628]();
}

uint64_t sub_1BCB63C8C()
{
  return MEMORY[0x1E0D2D630]();
}

uint64_t sub_1BCB63C98()
{
  return MEMORY[0x1E0D2D638]();
}

uint64_t sub_1BCB63CA4()
{
  return MEMORY[0x1E0D2D640]();
}

uint64_t sub_1BCB63CB0()
{
  return MEMORY[0x1E0D2D650]();
}

uint64_t sub_1BCB63CBC()
{
  return MEMORY[0x1E0D29AE0]();
}

uint64_t sub_1BCB63CC8()
{
  return MEMORY[0x1E0D29AE8]();
}

uint64_t sub_1BCB63CD4()
{
  return MEMORY[0x1E0D29AF0]();
}

uint64_t sub_1BCB63CE0()
{
  return MEMORY[0x1E0D29AF8]();
}

uint64_t sub_1BCB63CEC()
{
  return MEMORY[0x1E0D29B08]();
}

uint64_t sub_1BCB63CF8()
{
  return MEMORY[0x1E0D29F88]();
}

uint64_t sub_1BCB63D04()
{
  return MEMORY[0x1E0D29F90]();
}

uint64_t sub_1BCB63D10()
{
  return MEMORY[0x1E0D29F98]();
}

uint64_t sub_1BCB63D1C()
{
  return MEMORY[0x1E0D29FA0]();
}

uint64_t sub_1BCB63D28()
{
  return MEMORY[0x1E0D29FA8]();
}

uint64_t sub_1BCB63D34()
{
  return MEMORY[0x1E0D2BD98]();
}

uint64_t sub_1BCB63D40()
{
  return MEMORY[0x1E0D2BF50]();
}

uint64_t sub_1BCB63D4C()
{
  return MEMORY[0x1E0D2BF70]();
}

uint64_t sub_1BCB63D58()
{
  return MEMORY[0x1E0D2BF78]();
}

uint64_t sub_1BCB63D64()
{
  return MEMORY[0x1E0D2EF60]();
}

uint64_t sub_1BCB63D70()
{
  return MEMORY[0x1E0D2EF70]();
}

uint64_t sub_1BCB63D7C()
{
  return MEMORY[0x1E0D2EF80]();
}

uint64_t sub_1BCB63D88()
{
  return MEMORY[0x1E0D2EFB0]();
}

uint64_t sub_1BCB63D94()
{
  return MEMORY[0x1E0D2F000]();
}

uint64_t sub_1BCB63DA0()
{
  return MEMORY[0x1E0D2F008]();
}

uint64_t sub_1BCB63DAC()
{
  return MEMORY[0x1E0D2F010]();
}

uint64_t sub_1BCB63DB8()
{
  return MEMORY[0x1E0D2F018]();
}

uint64_t sub_1BCB63DC4()
{
  return MEMORY[0x1E0D2E750]();
}

uint64_t sub_1BCB63DD0()
{
  return MEMORY[0x1E0DF2240]();
}

uint64_t sub_1BCB63DDC()
{
  return MEMORY[0x1E0DF2258]();
}

uint64_t sub_1BCB63DE8()
{
  return MEMORY[0x1E0DF2268]();
}

uint64_t sub_1BCB63DF4()
{
  return MEMORY[0x1E0DC29B8]();
}

uint64_t sub_1BCB63E00()
{
  return MEMORY[0x1E0C95680]();
}

uint64_t sub_1BCB63E0C()
{
  return MEMORY[0x1E0C95690]();
}

uint64_t sub_1BCB63E18()
{
  return MEMORY[0x1E0C956F8]();
}

uint64_t sub_1BCB63E24()
{
  return MEMORY[0x1E0C95930]();
}

uint64_t sub_1BCB63E30()
{
  return MEMORY[0x1E0C95940]();
}

uint64_t sub_1BCB63E3C()
{
  return MEMORY[0x1E0C95CA8]();
}

uint64_t sub_1BCB63E48()
{
  return MEMORY[0x1E0C95D78]();
}

uint64_t sub_1BCB63E54()
{
  return MEMORY[0x1E0C95E50]();
}

uint64_t sub_1BCB63E60()
{
  return MEMORY[0x1E0C95E68]();
}

uint64_t sub_1BCB63E6C()
{
  return MEMORY[0x1E0C95E80]();
}

uint64_t sub_1BCB63E78()
{
  return MEMORY[0x1E0C95ED8]();
}

uint64_t sub_1BCB63E84()
{
  return MEMORY[0x1E0C95F00]();
}

uint64_t sub_1BCB63E90()
{
  return MEMORY[0x1E0C95F08]();
}

uint64_t sub_1BCB63E9C()
{
  return MEMORY[0x1E0C95F20]();
}

uint64_t sub_1BCB63EA8()
{
  return MEMORY[0x1E0C95F28]();
}

uint64_t sub_1BCB63EB4()
{
  return MEMORY[0x1E0C95F88]();
}

uint64_t sub_1BCB63EC0()
{
  return MEMORY[0x1E0C95FA8]();
}

uint64_t sub_1BCB63ECC()
{
  return MEMORY[0x1E0C96078]();
}

uint64_t sub_1BCB63ED8()
{
  return MEMORY[0x1E0C96098]();
}

uint64_t sub_1BCB63EE4()
{
  return MEMORY[0x1E0C960A8]();
}

uint64_t sub_1BCB63EF0()
{
  return MEMORY[0x1E0C960D8]();
}

uint64_t sub_1BCB63EFC()
{
  return MEMORY[0x1E0C96100]();
}

uint64_t sub_1BCB63F08()
{
  return MEMORY[0x1E0C96128]();
}

uint64_t sub_1BCB63F14()
{
  return MEMORY[0x1E0C96130]();
}

uint64_t sub_1BCB63F20()
{
  return MEMORY[0x1E0C96138]();
}

uint64_t sub_1BCB63F2C()
{
  return MEMORY[0x1E0C96150]();
}

uint64_t sub_1BCB63F38()
{
  return MEMORY[0x1E0C96158]();
}

uint64_t sub_1BCB63F44()
{
  return MEMORY[0x1E0C96160]();
}

uint64_t sub_1BCB63F50()
{
  return MEMORY[0x1E0C96170]();
}

uint64_t sub_1BCB63F5C()
{
  return MEMORY[0x1E0C96178]();
}

uint64_t sub_1BCB63F68()
{
  return MEMORY[0x1E0C961D0]();
}

uint64_t sub_1BCB63F74()
{
  return MEMORY[0x1E0C961D8]();
}

uint64_t sub_1BCB63F80()
{
  return MEMORY[0x1E0C96248]();
}

uint64_t sub_1BCB63F8C()
{
  return MEMORY[0x1E0C96378]();
}

uint64_t sub_1BCB63F98()
{
  return MEMORY[0x1E0C96410]();
}

uint64_t sub_1BCB63FA4()
{
  return MEMORY[0x1E0C96428]();
}

uint64_t sub_1BCB63FB0()
{
  return MEMORY[0x1E0DEF4B8]();
}

uint64_t sub_1BCB63FBC()
{
  return MEMORY[0x1E0DEF4F8]();
}

uint64_t sub_1BCB63FC8()
{
  return MEMORY[0x1E0DEF578]();
}

uint64_t sub_1BCB63FD4()
{
  return MEMORY[0x1E0DEF5B0]();
}

uint64_t sub_1BCB63FE0()
{
  return MEMORY[0x1E0DEF698]();
}

uint64_t sub_1BCB63FEC()
{
  return MEMORY[0x1E0DEF6B8]();
}

uint64_t sub_1BCB63FF8()
{
  return MEMORY[0x1E0DEF748]();
}

uint64_t sub_1BCB64004()
{
  return MEMORY[0x1E0DEF758]();
}

uint64_t sub_1BCB64010()
{
  return MEMORY[0x1E0DEF778]();
}

uint64_t sub_1BCB6401C()
{
  return MEMORY[0x1E0D2F318]();
}

uint64_t sub_1BCB64028()
{
  return MEMORY[0x1E0D2F320]();
}

uint64_t sub_1BCB64034()
{
  return MEMORY[0x1E0CB4328]();
}

uint64_t sub_1BCB64040()
{
  return MEMORY[0x1E0CB4338]();
}

uint64_t sub_1BCB6404C()
{
  return MEMORY[0x1E0CB4340]();
}

uint64_t sub_1BCB64058()
{
  return MEMORY[0x1E0CB4350]();
}

uint64_t sub_1BCB64064()
{
  return MEMORY[0x1E0CB4378]();
}

uint64_t sub_1BCB64070()
{
  return MEMORY[0x1E0CB4380]();
}

uint64_t sub_1BCB6407C()
{
  return MEMORY[0x1E0CB4390]();
}

uint64_t sub_1BCB64088()
{
  return MEMORY[0x1E0CB43A8]();
}

uint64_t sub_1BCB64094()
{
  return MEMORY[0x1E0CB43B0]();
}

uint64_t sub_1BCB640A0()
{
  return MEMORY[0x1E0DE9D78]();
}

uint64_t sub_1BCB640AC()
{
  return MEMORY[0x1E0CB17D8]();
}

uint64_t sub_1BCB640B8()
{
  return MEMORY[0x1E0CB1808]();
}

uint64_t sub_1BCB640C4()
{
  return MEMORY[0x1E0DE9E38]();
}

uint64_t sub_1BCB640D0()
{
  return MEMORY[0x1E0DEA1B8]();
}

uint64_t sub_1BCB640DC()
{
  return MEMORY[0x1E0DEA1C0]();
}

uint64_t sub_1BCB640E8()
{
  return MEMORY[0x1E0DEA3A0]();
}

uint64_t sub_1BCB640F4()
{
  return MEMORY[0x1E0DEA3B0]();
}

uint64_t sub_1BCB64100()
{
  return MEMORY[0x1E0DEA568]();
}

uint64_t sub_1BCB6410C()
{
  return MEMORY[0x1E0CB1940]();
}

uint64_t sub_1BCB64118()
{
  return MEMORY[0x1E0CB1950]();
}

uint64_t sub_1BCB64124()
{
  return MEMORY[0x1E0CB1960]();
}

uint64_t sub_1BCB64130()
{
  return MEMORY[0x1E0CB1970]();
}

uint64_t sub_1BCB6413C()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t sub_1BCB64148()
{
  return MEMORY[0x1E0CB1988]();
}

uint64_t sub_1BCB64154()
{
  return MEMORY[0x1E0CB1990]();
}

uint64_t sub_1BCB64160()
{
  return MEMORY[0x1E0CB19A0]();
}

uint64_t sub_1BCB6416C()
{
  return MEMORY[0x1E0CB19C0]();
}

uint64_t sub_1BCB64178()
{
  return MEMORY[0x1E0CB19E8]();
}

uint64_t sub_1BCB64184()
{
  return MEMORY[0x1E0CB1A18]();
}

uint64_t sub_1BCB64190()
{
  return MEMORY[0x1E0DEA5F8]();
}

uint64_t sub_1BCB6419C()
{
  return MEMORY[0x1E0DEA618]();
}

uint64_t sub_1BCB641A8()
{
  return MEMORY[0x1E0D2E8B0]();
}

uint64_t sub_1BCB641B4()
{
  return MEMORY[0x1E0DEA658]();
}

uint64_t sub_1BCB641C0()
{
  return MEMORY[0x1E0DEA6F8]();
}

uint64_t sub_1BCB641CC()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t sub_1BCB641D8()
{
  return MEMORY[0x1E0DEA7B8]();
}

uint64_t sub_1BCB641E4()
{
  return MEMORY[0x1E0DEA7C0]();
}

uint64_t sub_1BCB641F0()
{
  return MEMORY[0x1E0DEA800]();
}

uint64_t sub_1BCB641FC()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t sub_1BCB64208()
{
  return MEMORY[0x1E0DEA858]();
}

uint64_t sub_1BCB64214()
{
  return MEMORY[0x1E0DEA870]();
}

uint64_t sub_1BCB64220()
{
  return MEMORY[0x1E0DEA878]();
}

uint64_t sub_1BCB6422C()
{
  return MEMORY[0x1E0DEA880]();
}

uint64_t sub_1BCB64238()
{
  return MEMORY[0x1E0DEA908]();
}

uint64_t sub_1BCB64244()
{
  return MEMORY[0x1E0DEA940]();
}

uint64_t sub_1BCB64250()
{
  return MEMORY[0x1E0DEAA08]();
}

uint64_t sub_1BCB6425C()
{
  return MEMORY[0x1E0DEAA40]();
}

uint64_t sub_1BCB64268()
{
  return MEMORY[0x1E0DEAA50]();
}

uint64_t sub_1BCB64274()
{
  return MEMORY[0x1E0CB1A90]();
}

uint64_t sub_1BCB64280()
{
  return MEMORY[0x1E0DEAA58]();
}

uint64_t sub_1BCB6428C()
{
  return MEMORY[0x1E0DEAAA8]();
}

uint64_t sub_1BCB64298()
{
  return MEMORY[0x1E0DEAAD8]();
}

uint64_t sub_1BCB642A4()
{
  return MEMORY[0x1E0DEACB8]();
}

uint64_t sub_1BCB642B0()
{
  return MEMORY[0x1E0DEAD30]();
}

uint64_t sub_1BCB642BC()
{
  return MEMORY[0x1E0DEADA0]();
}

uint64_t sub_1BCB642C8()
{
  return MEMORY[0x1E0CB1AC0]();
}

uint64_t sub_1BCB642D4()
{
  return MEMORY[0x1E0CB1AE8]();
}

uint64_t sub_1BCB642E0()
{
  return MEMORY[0x1E0DEADB0]();
}

uint64_t sub_1BCB642EC()
{
  return MEMORY[0x1E0DEADB8]();
}

uint64_t sub_1BCB642F8()
{
  return MEMORY[0x1E0DEADC8]();
}

uint64_t sub_1BCB64304()
{
  return MEMORY[0x1E0DEADE8]();
}

uint64_t sub_1BCB64310()
{
  return MEMORY[0x1E0DEAE10]();
}

uint64_t sub_1BCB6431C()
{
  return MEMORY[0x1E0DEAE28]();
}

uint64_t sub_1BCB64328()
{
  return MEMORY[0x1E0DEAE38]();
}

uint64_t sub_1BCB64334()
{
  return MEMORY[0x1E0DEAE58]();
}

uint64_t sub_1BCB64340()
{
  return MEMORY[0x1E0DEAE60]();
}

uint64_t sub_1BCB6434C()
{
  return MEMORY[0x1E0DEAE98]();
}

uint64_t sub_1BCB64358()
{
  return MEMORY[0x1E0DEAEC8]();
}

uint64_t sub_1BCB64364()
{
  return MEMORY[0x1E0CB1B28]();
}

uint64_t sub_1BCB64370()
{
  return MEMORY[0x1E0DF05B8]();
}

uint64_t sub_1BCB6437C()
{
  return MEMORY[0x1E0DF05C8]();
}

uint64_t sub_1BCB64388()
{
  return MEMORY[0x1E0DF05D0]();
}

uint64_t sub_1BCB64394()
{
  return MEMORY[0x1E0DF0688]();
}

uint64_t sub_1BCB643A0()
{
  return MEMORY[0x1E0DF06B8]();
}

uint64_t sub_1BCB643AC()
{
  return MEMORY[0x1E0DF0748]();
}

uint64_t sub_1BCB643B8()
{
  return MEMORY[0x1E0DF0750]();
}

uint64_t sub_1BCB643C4()
{
  return MEMORY[0x1E0DF07D8]();
}

uint64_t sub_1BCB643D0()
{
  return MEMORY[0x1E0DF0840]();
}

uint64_t sub_1BCB643DC()
{
  return MEMORY[0x1E0DF08B8]();
}

uint64_t sub_1BCB643E8()
{
  return MEMORY[0x1E0CB1B48]();
}

uint64_t sub_1BCB643F4()
{
  return MEMORY[0x1E0CB1BB0]();
}

uint64_t sub_1BCB64400()
{
  return MEMORY[0x1E0CB1BD8]();
}

uint64_t sub_1BCB6440C()
{
  return MEMORY[0x1E0DEB258]();
}

uint64_t sub_1BCB64418()
{
  return MEMORY[0x1E0DEB2A8]();
}

uint64_t sub_1BCB64424()
{
  return MEMORY[0x1E0DEB2B0]();
}

uint64_t sub_1BCB64430()
{
  return MEMORY[0x1E0DEB2E8]();
}

uint64_t sub_1BCB6443C()
{
  return MEMORY[0x1E0DEB310]();
}

uint64_t sub_1BCB64448()
{
  return MEMORY[0x1E0DEB388]();
}

uint64_t sub_1BCB64454()
{
  return MEMORY[0x1E0CB1C10]();
}

uint64_t sub_1BCB64460()
{
  return MEMORY[0x1E0DEB528]();
}

uint64_t sub_1BCB6446C()
{
  return MEMORY[0x1E0DEB560]();
}

uint64_t sub_1BCB64478()
{
  return MEMORY[0x1E0DEB5A0]();
}

uint64_t sub_1BCB64484()
{
  return MEMORY[0x1E0DEB5A8]();
}

uint64_t sub_1BCB64490()
{
  return MEMORY[0x1E0DEB5B0]();
}

uint64_t sub_1BCB6449C()
{
  return MEMORY[0x1E0DEB620]();
}

uint64_t sub_1BCB644A8()
{
  return MEMORY[0x1E0DEB660]();
}

uint64_t sub_1BCB644B4()
{
  return MEMORY[0x1E0DEB6D0]();
}

uint64_t sub_1BCB644C0()
{
  return MEMORY[0x1E0DEB848]();
}

uint64_t sub_1BCB644CC()
{
  return MEMORY[0x1E0C9B8C8]();
}

uint64_t sub_1BCB644D8()
{
  return MEMORY[0x1E0C9B8F8]();
}

uint64_t sub_1BCB644E4()
{
  return MEMORY[0x1E0D2F028]();
}

uint64_t sub_1BCB644F0()
{
  return MEMORY[0x1E0DF2270]();
}

uint64_t sub_1BCB644FC()
{
  return MEMORY[0x1E0DF2280]();
}

uint64_t sub_1BCB64508()
{
  return MEMORY[0x1E0DF2288]();
}

uint64_t sub_1BCB64514()
{
  return MEMORY[0x1E0DF2290]();
}

uint64_t sub_1BCB64520()
{
  return MEMORY[0x1E0CB4570]();
}

uint64_t sub_1BCB6452C()
{
  return MEMORY[0x1E0CB4588]();
}

uint64_t sub_1BCB64538()
{
  return MEMORY[0x1E0CB4590]();
}

uint64_t sub_1BCB64544()
{
  return MEMORY[0x1E0CB45A0]();
}

uint64_t sub_1BCB64550()
{
  return MEMORY[0x1E0CB1E48]();
}

uint64_t sub_1BCB6455C()
{
  return MEMORY[0x1E0DEF810]();
}

uint64_t sub_1BCB64568()
{
  return MEMORY[0x1E0DEF868]();
}

uint64_t sub_1BCB64574()
{
  return MEMORY[0x1E0DEF8E0]();
}

uint64_t sub_1BCB64580()
{
  return MEMORY[0x1E0DEF8E8]();
}

uint64_t sub_1BCB6458C()
{
  return MEMORY[0x1E0DEF900]();
}

uint64_t sub_1BCB64598()
{
  return MEMORY[0x1E0DEF910]();
}

uint64_t sub_1BCB645A4()
{
  return MEMORY[0x1E0DEFA60]();
}

uint64_t sub_1BCB645B0()
{
  return MEMORY[0x1E0DEFA70]();
}

uint64_t sub_1BCB645BC()
{
  return MEMORY[0x1E0DC2D58]();
}

uint64_t sub_1BCB645C8()
{
  return MEMORY[0x1E0D2BC38]();
}

uint64_t sub_1BCB645D4()
{
  return MEMORY[0x1E0DC2FC0]();
}

uint64_t sub_1BCB645E0()
{
  return MEMORY[0x1E0CB45F8]();
}

uint64_t sub_1BCB645EC()
{
  return MEMORY[0x1E0DEFCD8]();
}

uint64_t sub_1BCB645F8()
{
  return MEMORY[0x1E0DEFCE0]();
}

uint64_t sub_1BCB64604()
{
  return MEMORY[0x1E0DEFCE8]();
}

uint64_t sub_1BCB64610()
{
  return MEMORY[0x1E0DEFCF0]();
}

uint64_t sub_1BCB6461C()
{
  return MEMORY[0x1E0DF22B8]();
}

uint64_t sub_1BCB64628()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t sub_1BCB64634()
{
  return MEMORY[0x1E0DEBB68]();
}

uint64_t sub_1BCB64640()
{
  return MEMORY[0x1E0DEBC20]();
}

uint64_t sub_1BCB6464C()
{
  return MEMORY[0x1E0DEBC90]();
}

uint64_t sub_1BCB64658()
{
  return MEMORY[0x1E0CB2400]();
}

uint64_t sub_1BCB64664()
{
  return MEMORY[0x1E0CB2498]();
}

uint64_t sub_1BCB64670()
{
  return MEMORY[0x1E0CB24B8]();
}

uint64_t sub_1BCB6467C()
{
  return MEMORY[0x1E0CB2568]();
}

uint64_t sub_1BCB64688()
{
  return MEMORY[0x1E0CB2588]();
}

uint64_t sub_1BCB64694()
{
  return MEMORY[0x1E0DEFF58]();
}

uint64_t sub_1BCB646A0()
{
  return MEMORY[0x1E0DEBE50]();
}

uint64_t sub_1BCB646AC()
{
  return MEMORY[0x1E0DEBFC8]();
}

uint64_t sub_1BCB646B8()
{
  return MEMORY[0x1E0DEC050]();
}

uint64_t sub_1BCB646C4()
{
  return MEMORY[0x1E0DEC060]();
}

uint64_t sub_1BCB646D0()
{
  return MEMORY[0x1E0DEC068]();
}

uint64_t sub_1BCB646DC()
{
  return MEMORY[0x1E0DEC078]();
}

uint64_t sub_1BCB646E8()
{
  return MEMORY[0x1E0DEC0A8]();
}

uint64_t sub_1BCB646F4()
{
  return MEMORY[0x1E0DEC0B0]();
}

uint64_t sub_1BCB64700()
{
  return MEMORY[0x1E0DEC0B8]();
}

uint64_t sub_1BCB6470C()
{
  return MEMORY[0x1E0DEC0D0]();
}

uint64_t sub_1BCB64718()
{
  return MEMORY[0x1E0DEC0D8]();
}

uint64_t sub_1BCB64724()
{
  return MEMORY[0x1E0DEC0E0]();
}

uint64_t sub_1BCB64730()
{
  return MEMORY[0x1E0DEC0F8]();
}

uint64_t sub_1BCB6473C()
{
  return MEMORY[0x1E0DEC100]();
}

uint64_t sub_1BCB64748()
{
  return MEMORY[0x1E0DEC110]();
}

uint64_t sub_1BCB64754()
{
  return MEMORY[0x1E0DEC128]();
}

uint64_t sub_1BCB64760()
{
  return MEMORY[0x1E0DEC248]();
}

uint64_t sub_1BCB6476C()
{
  return MEMORY[0x1E0DEC250]();
}

uint64_t sub_1BCB64778()
{
  return MEMORY[0x1E0DEC258]();
}

uint64_t sub_1BCB64784()
{
  return MEMORY[0x1E0DEC260]();
}

uint64_t sub_1BCB64790()
{
  return MEMORY[0x1E0DEC268]();
}

uint64_t sub_1BCB6479C()
{
  return MEMORY[0x1E0DEC2A8]();
}

uint64_t sub_1BCB647A8()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t sub_1BCB647B4()
{
  return MEMORY[0x1E0DEC3D8]();
}

uint64_t sub_1BCB647C0()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t sub_1BCB647CC()
{
  return MEMORY[0x1E0DEC3E8]();
}

uint64_t sub_1BCB647D8()
{
  return MEMORY[0x1E0DEC470]();
}

uint64_t sub_1BCB647E4()
{
  return MEMORY[0x1E0DEC488]();
}

uint64_t sub_1BCB647F0()
{
  return MEMORY[0x1E0DEC498]();
}

uint64_t sub_1BCB647FC()
{
  return MEMORY[0x1E0DEC518]();
}

uint64_t sub_1BCB64808()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t sub_1BCB64814()
{
  return MEMORY[0x1E0DEC5F8]();
}

uint64_t sub_1BCB64820()
{
  return MEMORY[0x1E0DEC660]();
}

uint64_t sub_1BCB6482C()
{
  return MEMORY[0x1E0DEC670]();
}

uint64_t sub_1BCB64838()
{
  return MEMORY[0x1E0DEC680]();
}

uint64_t sub_1BCB64844()
{
  return MEMORY[0x1E0DEC688]();
}

uint64_t sub_1BCB64850()
{
  return MEMORY[0x1E0DEC6C0]();
}

uint64_t sub_1BCB6485C()
{
  return MEMORY[0x1E0DEC6C8]();
}

uint64_t sub_1BCB64868()
{
  return MEMORY[0x1E0DEC6E0]();
}

uint64_t sub_1BCB64874()
{
  return MEMORY[0x1E0DEC700]();
}

uint64_t sub_1BCB64880()
{
  return MEMORY[0x1E0DEC708]();
}

uint64_t sub_1BCB6488C()
{
  return MEMORY[0x1E0DEC8D8]();
}

uint64_t sub_1BCB64898()
{
  return MEMORY[0x1E0DEC8E0]();
}

uint64_t sub_1BCB648A4()
{
  return MEMORY[0x1E0DECBE0]();
}

uint64_t sub_1BCB648B0()
{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t sub_1BCB648BC()
{
  return MEMORY[0x1E0DECBF8]();
}

uint64_t sub_1BCB648C8()
{
  return MEMORY[0x1E0DECCE0]();
}

uint64_t sub_1BCB648D4()
{
  return MEMORY[0x1E0DECD18]();
}

uint64_t sub_1BCB648E0()
{
  return MEMORY[0x1E0DECD38]();
}

uint64_t sub_1BCB648EC()
{
  return MEMORY[0x1E0DECD40]();
}

uint64_t sub_1BCB648F8()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t sub_1BCB64904()
{
  return MEMORY[0x1E0DECD58]();
}

uint64_t sub_1BCB64910()
{
  return MEMORY[0x1E0DECD70]();
}

uint64_t sub_1BCB6491C()
{
  return MEMORY[0x1E0DECE70]();
}

uint64_t sub_1BCB64928()
{
  return MEMORY[0x1E0DECF18]();
}

uint64_t sub_1BCB64934()
{
  return MEMORY[0x1E0DECF38]();
}

uint64_t sub_1BCB64940()
{
  return MEMORY[0x1E0DECF40]();
}

uint64_t sub_1BCB6494C()
{
  return MEMORY[0x1E0DECF58]();
}

uint64_t sub_1BCB64958()
{
  return MEMORY[0x1E0DECFC0]();
}

uint64_t sub_1BCB64964()
{
  return MEMORY[0x1E0DECFF0]();
}

uint64_t sub_1BCB64970()
{
  return MEMORY[0x1E0DED038]();
}

uint64_t sub_1BCB6497C()
{
  return MEMORY[0x1E0DED070]();
}

uint64_t sub_1BCB64988()
{
  return MEMORY[0x1E0DED090]();
}

uint64_t sub_1BCB64994()
{
  return MEMORY[0x1E0DED0F0]();
}

uint64_t sub_1BCB649A0()
{
  return MEMORY[0x1E0DED110]();
}

uint64_t sub_1BCB649AC()
{
  return MEMORY[0x1E0DED120]();
}

uint64_t sub_1BCB649B8()
{
  return MEMORY[0x1E0DED1A0]();
}

uint64_t sub_1BCB649C4()
{
  return MEMORY[0x1E0DED1B0]();
}

uint64_t sub_1BCB649D0()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t sub_1BCB649DC()
{
  return MEMORY[0x1E0DED1E8]();
}

uint64_t sub_1BCB649E8()
{
  return MEMORY[0x1E0DED5F0]();
}

uint64_t sub_1BCB649F4()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t sub_1BCB64A00()
{
  return MEMORY[0x1E0DED768]();
}

uint64_t sub_1BCB64A0C()
{
  return MEMORY[0x1E0DED998]();
}

uint64_t sub_1BCB64A18()
{
  return MEMORY[0x1E0DF0EC0]();
}

uint64_t sub_1BCB64A24()
{
  return MEMORY[0x1E0DED9F8]();
}

uint64_t sub_1BCB64A30()
{
  return MEMORY[0x1E0DEDAE0]();
}

uint64_t sub_1BCB64A3C()
{
  return MEMORY[0x1E0DEDAE8]();
}

uint64_t sub_1BCB64A48()
{
  return MEMORY[0x1E0CB2628]();
}

uint64_t sub_1BCB64A54()
{
  return MEMORY[0x1E0CB2640]();
}

uint64_t sub_1BCB64A60()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t sub_1BCB64A6C()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t sub_1BCB64A78()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t sub_1BCB64A84()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t sub_1BCB64A90()
{
  return MEMORY[0x1E0DEDEF8]();
}

uint64_t sub_1BCB64A9C()
{
  return MEMORY[0x1E0DEDF10]();
}

uint64_t sub_1BCB64AA8()
{
  return MEMORY[0x1E0DEDF18]();
}

uint64_t sub_1BCB64AB4()
{
  return MEMORY[0x1E0DEDF30]();
}

uint64_t sub_1BCB64AC0()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t sub_1BCB64ACC()
{
  return MEMORY[0x1E0C964B8]();
}

uint64_t sub_1BCB64AD8()
{
  return MEMORY[0x1E0DEE240]();
}

uint64_t sub_1BCB64AE4()
{
  return MEMORY[0x1E0DEE270]();
}

uint64_t sub_1BCB64AF0()
{
  return MEMORY[0x1E0DEE8E0]();
}

uint64_t sub_1BCB64AFC()
{
  return MEMORY[0x1E0DEE8E8]();
}

uint64_t sub_1BCB64B08()
{
  return MEMORY[0x1E0D2F3E0]();
}

uint64_t sub_1BCB64B14()
{
  return MEMORY[0x1E0DEE978]();
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1E0C9BC78](space, components);
}

CGColorRef CGColorCreateCopyByMatchingToColorSpace(CGColorSpaceRef a1, CGColorRenderingIntent intent, CGColorRef color, CFDictionaryRef options)
{
  return (CGColorRef)MEMORY[0x1E0C9BC88](a1, *(_QWORD *)&intent, color, options);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDF0]();
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE50](name);
}

void CGContextDrawLinearGradient(CGContextRef c, CGGradientRef gradient, CGPoint startPoint, CGPoint endPoint, CGGradientDrawingOptions options)
{
  MEMORY[0x1E0C9C198](c, gradient, *(_QWORD *)&options, (__n128)startPoint, *(__n128 *)&startPoint.y, (__n128)endPoint, *(__n128 *)&endPoint.y);
}

void CGContextRestoreGState(CGContextRef c)
{
  MEMORY[0x1E0C9C370](c);
}

void CGContextSetBlendMode(CGContextRef c, CGBlendMode mode)
{
  MEMORY[0x1E0C9C3C8](c, *(_QWORD *)&mode);
}

CGGradientRef CGGradientCreateWithColors(CGColorSpaceRef space, CFArrayRef colors, const CGFloat *locations)
{
  return (CGGradientRef)MEMORY[0x1E0C9CA90](space, colors, locations);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D570]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D580]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

uint64_t HKLogMedication()
{
  return MEMORY[0x1E0CB5308]();
}

uint64_t HKMedicationAnalyticsWeeksBetweenDates()
{
  return MEMORY[0x1E0D2C248]();
}

uint64_t HKSensitiveLogItem()
{
  return MEMORY[0x1E0CB5E90]();
}

uint64_t HKStringFromHKMedicationListOnboardingAlgorithmType()
{
  return MEMORY[0x1E0D2C3B0]();
}

uint64_t HKStringFromListUserDomainType()
{
  return MEMORY[0x1E0CB5FD8]();
}

uint64_t HKStringFromMedicationListOnboardingActionType()
{
  return MEMORY[0x1E0D2C3B8]();
}

uint64_t HKStringFromMedicationListOnboardingDetailsEntryType()
{
  return MEMORY[0x1E0D2C3C0]();
}

uint64_t HKStringFromMedicationListOnboardingProvenanceType()
{
  return MEMORY[0x1E0D2C3C8]();
}

uint64_t HKStringFromMedicationListOnboardingStepType()
{
  return MEMORY[0x1E0D2C3D0]();
}

uint64_t HKStringFromMedicationRoomAnalyticsAction()
{
  return MEMORY[0x1E0D2C3D8]();
}

uint64_t HKStringFromMedicationRoomProvenance()
{
  return MEMORY[0x1E0D2C3E0]();
}

uint64_t HKStringFromMedicationRoomType()
{
  return MEMORY[0x1E0D2C3E8]();
}

uint64_t HKStringFromMedicationScheduleType()
{
  return MEMORY[0x1E0D2C3F0]();
}

CGContextRef UIGraphicsGetCurrentContext(void)
{
  return (CGContextRef)MEMORY[0x1E0DC4BE8]();
}

void UIGraphicsPopContext(void)
{
  MEMORY[0x1E0DC4C00]();
}

void UIGraphicsPushContext(CGContextRef context)
{
  MEMORY[0x1E0DC4C08](context);
}

void UIRectFillUsingBlendMode(CGRect rect, CGBlendMode blendMode)
{
  MEMORY[0x1E0DC52A0](*(_QWORD *)&blendMode, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1E0DEEA28]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

float log2f(float a1)
{
  float result;

  MEMORY[0x1E0C83BF0](a1);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x1E0DEEAC0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1E0DEEAE8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1E0DEEAF0]();
}

uint64_t swift_asyncLet_begin()
{
  return MEMORY[0x1E0DF0F68]();
}

uint64_t swift_asyncLet_finish()
{
  return MEMORY[0x1E0DF0F70]();
}

uint64_t swift_asyncLet_get_throwing()
{
  return MEMORY[0x1E0DF0F80]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x1E0DF0F88]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1E0DF0F90]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x1E0DF0FA0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x1E0DF0FA8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_defaultActor_deallocate()
{
  return MEMORY[0x1E0DF0FB0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x1E0DF0FB8]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x1E0DF0FC0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1E0DEEBA8]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1E0DEEBE0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1E0DEEC08]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x1E0DEEC18]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1E0DEEC40]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEC48]();
}

uint64_t swift_getExistentialMetatypeMetadata()
{
  return MEMORY[0x1E0DEEC58]();
}

uint64_t swift_getExistentialTypeMetadata()
{
  return MEMORY[0x1E0DEEC60]();
}

uint64_t swift_getExtendedExistentialTypeMetadata()
{
  return MEMORY[0x1E0DEEC68]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1E0DEECB0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1E0DEECB8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1E0DEECC8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTupleTypeLayout()
{
  return MEMORY[0x1E0DEED00]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x1E0DEED18]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1E0DEED20]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x1E0DEED28]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1E0DEED60]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1E0DEED98]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1E0DEEDC8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x1E0DEEDE0]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1E0DEEE70]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1E0DEEE88]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1E0DEEE98]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEEA0]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1E0DF1000]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1E0DF1008]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1E0DF1010]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x1E0DF1050]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1E0DEEEB8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1E0DEEF38]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1E0DEEF40]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1E0DEEF48]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1E0DEEF78]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1E0DEEF98]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1E0DEEFA0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1E0DEEFA8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

