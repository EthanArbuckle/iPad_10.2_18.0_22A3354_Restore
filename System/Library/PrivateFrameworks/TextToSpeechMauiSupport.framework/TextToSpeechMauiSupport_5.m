uint64_t DoSpell(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  uint64_t v16;
  unsigned __int16 i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  char *v23;
  char *v24;
  unsigned __int16 v25;
  _OWORD v29[21];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!a5)
    return 0;
  v16 = 0;
  for (i = 0; i < a5; v16 = i)
  {
    memset(v29, 0, sizeof(v29));
    v21 = wordm_sysdct_CharLookup_Chinese(a3, (unsigned __int8 *)(a4 + i), (unsigned __int16)(a5 - i), (uint64_t)v29, a12, a11, "normal");
    if ((v21 & 0x80000000) != 0)
      break;
    if ((LODWORD(v29[0]) - 2) > 3)
    {
      log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] (utoi position %d len %d not in dict", v18, v19, v20, v16);
    }
    else
    {
      v22 = (unsigned __int16)(cstdlib_strlen((const char *)&v29[4] + 12) + 3);
      v23 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), v22);
      if (!v23)
        return 2350915594;
      v24 = v23;
      cstdlib_memset(v23, 0, v22);
      if (i)
      {
        cstdlib_strcpy(v24, (const char *)&v29[4] + 12);
      }
      else
      {
        cstdlib_strcpy(v24, " ");
        cstdlib_strcat(v24, (const char *)&v29[4] + 12);
      }
      cstdlib_strcat(v24, " ");
      v25 = cstdlib_strlen(v24);
      v21 = bed_Insert(a6, v24, v25);
      if ((v21 & 0x80000000) != 0)
      {
        heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v24);
        return v21;
      }
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v24);
    }
    if (WORD3(v29[4]))
      i += WORD3(v29[4]);
    else
      i = a5;
  }
  return v21;
}

uint64_t DoLatin(uint64_t a1, _QWORD *a2, const char *a3, unsigned int a4, char **a5)
{
  uint64_t v10;
  _QWORD *v11;
  int v12;
  char *v13;
  unsigned __int16 v15;
  char __b[257];
  char __dst[64];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v15 = 256;
  cstdlib_memset(__b, 0, 0x101uLL);
  cstdlib_strncpy(__dst, a3, a4);
  __dst[a4] = 0;
  v10 = sysdct_char_LookUp_Chinese(a2, (unsigned __int8 *)__dst, __b, &v15, 0, 0, "normal");
  if ((v10 & 0x80000000) == 0)
  {
    if (v15)
    {
      v11 = *(_QWORD **)(a1 + 8);
      v12 = cstdlib_strlen(__b);
      v13 = (char *)heap_Calloc(v11, 1, (v12 + 1));
      *a5 = v13;
      if (v13)
        cstdlib_strcpy(v13, __b);
      else
        return 2350915594;
    }
    else
    {
      *a5 = 0;
    }
  }
  return v10;
}

uint64_t wordm_sysdct_Lookup_Chinese(_QWORD *a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, unsigned int a5, const char *a6)
{
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned __int16 v17;
  int v18;
  int v19;
  size_t v20;
  int v21;
  unsigned __int16 v22;
  uint64_t v23;
  char v24;
  unsigned __int16 v25;
  unsigned int v26;
  char __b[257];
  char __dst[65];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  result = 2370838535;
  if (a1 && a2 && a4)
  {
    v26 = 0;
    cstdlib_memset(__b, 0, 0x101uLL);
    *(_DWORD *)a4 = 0;
    cstdlib_memset((void *)(a4 + 4), 0, 0x41uLL);
    *(_WORD *)(a4 + 70) = 0;
    *(_DWORD *)(a4 + 72) = 0;
    cstdlib_memset((void *)(a4 + 76), 0, 0x101uLL);
    *(_WORD *)(a4 + 334) = 0;
    if (a3 >= 0x40)
      v13 = 64;
    else
      v13 = a3;
    if (v13 && a5)
    {
      v14 = 0;
      v15 = 0;
      do
      {
        v15 += utf8_determineUTF8CharLength(a2[(unsigned __int16)v15]);
        ++v14;
      }
      while (v13 > (unsigned __int16)v15 && v14 < a5);
      cstdlib_memmove(__dst, a2, (unsigned __int16)v15);
      __dst[(unsigned __int16)v15] = 0;
      if ((_WORD)v15)
      {
        *(_DWORD *)a4 = 2;
        v25 = 256;
        v17 = v15;
        while (1)
        {
          result = sysdct_word_LookUp_Chinese(a1, __dst, v17, __b, &v25, a6);
          v18 = v25;
          if ((_DWORD)result || v25 != 256)
            break;
          v26 = (unsigned __int16)(v17 - 1);
          utf8_GetPreviousValidUtf8Offset((uint64_t)__dst, &v26);
          v17 = v26;
          v18 = 256;
          v25 = 256;
          if ((unsigned __int16)(v26 - 1) >= (unsigned __int16)v15)
            goto LABEL_28;
        }
        if ((result & 0x80000000) != 0)
          return result;
LABEL_28:
        if ((unsigned __int16)(v17 - 1) < (unsigned __int16)v15)
        {
          __b[v18] = 0;
          cstdlib_strcpy((char *)(a4 + 76), __b);
          *(_DWORD *)(a4 + 72) = 16;
          *(_WORD *)(a4 + 334) = v25;
          __dst[v17] = 0;
          cstdlib_strcpy((char *)(a4 + 4), __dst);
          result = 0;
          *(_WORD *)(a4 + 70) = v17;
          return result;
        }
        v22 = utf8_determineUTF8CharLength(*a2);
        cstdlib_memmove((void *)(a4 + 4), __dst, v22);
        *(_BYTE *)(a4 + v22 + 4) = 0;
        *(_WORD *)(a4 + 70) = v22;
        v25 = 256;
        if (sysdct_char_LookUp_Chinese(a1, (unsigned __int8 *)__dst, (void *)(a4 + 76), &v25, 0, 0, a6)
          || (v23 = v25, *(_BYTE *)(a4 + v25 + 76) = 0, *(_WORD *)(a4 + 334) = v23, !v23))
        {
          result = 0;
          *(_DWORD *)a4 = 0;
          return result;
        }
        if (*(_BYTE *)(a4 + 76) == 35 && *(_BYTE *)(a4 + 77))
        {
          v24 = cstdlib_atoi((unsigned __int8 *)(a4 + 77));
          result = 0;
          *(_BYTE *)(a4 + 76) = v24;
          *(_BYTE *)(a4 + 77) = 0;
          *(_WORD *)(a4 + 334) = 1;
          return result;
        }
        return 0;
      }
    }
    else
    {
      cstdlib_memmove(__dst, a2, 0);
      __dst[0] = 0;
    }
    v19 = 0;
    do
    {
      v20 = (unsigned __int16)v19;
      v21 = a2[(unsigned __int16)v19++];
    }
    while (v21 == 32);
    cstdlib_memmove((void *)(a4 + 4), a2, v20);
    return 0;
  }
  return result;
}

uint64_t wparserDctMaxWords_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2350915585;
  result = 0;
  *a2 = &IWparserImplMaxWords;
  return result;
}

uint64_t wparser_impl_maxwords_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t MaxWordLen;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  MaxWordLen = 2350915591;
  v19 = 0;
  if (a5)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v19);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(_QWORD *)(v19 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjOpen: Begin", v10, v11, v12, v18);
      v13 = (_QWORD *)heap_Calloc(*(_QWORD **)(v19 + 8), 1, 56);
      if (v13)
      {
        *v13 = a3;
        v13[1] = a4;
        v13[2] = v19;
        v13[3] = "WPARSER_IMPL";
        *(_QWORD *)a5 = v13;
        *(_DWORD *)(a5 + 8) = 87652;
        MaxWordLen = wparser_impl_maxwords_loc_GetMaxWordLen((uint64_t)v13);
        log_OutText(*(_QWORD *)(v19 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjOpen: End (%x)", v14, v15, v16, MaxWordLen);
      }
      else
      {
        return 2350915594;
      }
    }
  }
  return MaxWordLen;
}

uint64_t wparser_impl_maxwords_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((v6 & 0x80000000) == 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : Begin", v3, v4, v5, v12);
    heap_Free(*(_QWORD **)(v7 + 8), a1);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : End (%x)", v8, v9, v10, v6);
  }
  return v6;
}

uint64_t wparser_impl_maxwords_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t MaxWordLen;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((v3 & 0x80000000) != 0)
    return v3;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjReopen : Begin", v4, v5, v6, v12);
  MaxWordLen = wparser_impl_maxwords_loc_GetMaxWordLen(a1);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjReopen : End (%x)", v8, v9, v10, MaxWordLen);
  return MaxWordLen;
}

uint64_t wparser_impl_maxwords_Init(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t result;
  int v10;

  v10 = 7549556;
  result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, int *, uint64_t))(*a3 + 72))(a3[1], a3[2], &v10, a1 + 44);
    if ((result & 0x80000000) == 0)
    {
      *(_QWORD *)(a1 + 32) = a3;
      *(_DWORD *)(a1 + 40) = a6;
    }
  }
  return result;
}

uint64_t wparser_impl_maxwords_Normalize(uint64_t a1, int a2, char *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 a11, _WORD *a12, int a13, uint64_t a14, uint64_t a15)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    a3[a5] = 0;
    if (*(_DWORD *)(a1 + 44) != 1)
      return DoMaxWords(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), a3, a5, a6, a7, a8, a9, a10, a11, a12, a13, a15, *(_DWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
    result = wordm_mapt2s(*(_QWORD **)(a1 + 32), (uint64_t)a3, a5);
    if ((result & 0x80000000) == 0)
      return DoMaxWords(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), a3, a5, a6, a7, a8, a9, a10, a11, a12, a13, a15, *(_DWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  }
  return result;
}

uint64_t wparser_impl_maxwords_Spell(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, uint64_t a10, int a11)
{
  uint64_t result;
  uint64_t v18;

  result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    LOWORD(v18) = a9;
    return DoSpell(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD **)(a1 + 32), a3, a5, a6, a7, a8, v18, a10, a11, *(_BYTE *)(a1 + 48));
  }
  return result;
}

uint64_t wparser_impl_maxwords_Latin(uint64_t a1, int a2, const char *a3, unsigned int a4, char **a5)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
    return DoLatin(*(_QWORD *)(a1 + 16), *(_QWORD **)(a1 + 32), a3, a4, a5);
  return result;
}

uint64_t wparser_impl_maxwords_End(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 56);
}

uint64_t wparser_impl_maxwords_ProcessStart(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 56);
}

uint64_t wparser_impl_maxwords_ProcessEnd(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 56);
}

uint64_t wparser_impl_maxwords_loc_GetMaxWordLen(uint64_t a1)
{
  uint64_t Str;
  uint64_t v3;
  int v4;
  unsigned __int8 *v6;

  v6 = 0;
  Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"maxdctwordlen", &v6);
  if ((Str & 0x80000000) != 0)
  {
    v3 = 0;
    LOBYTE(v4) = 7;
    goto LABEL_5;
  }
  v3 = Str;
  v4 = cstdlib_atoi(v6);
  if ((v4 - 1) <= 0xFE)
  {
LABEL_5:
    *(_BYTE *)(a1 + 48) = v4;
    return v3;
  }
  return 15;
}

uint64_t DoDag(_QWORD *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 a11, _WORD *a12, int a13, uint64_t a14, int a15, unsigned __int8 a16)
{
  _QWORD *v21;
  uint64_t v22;
  unsigned int LogLevel;
  _BOOL4 v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned __int16 v37;
  void *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char *v44;
  unsigned __int16 v45;
  int v46;
  unsigned __int16 v47;
  unsigned __int8 *v48;
  int v49;
  unsigned int v50;
  __int16 v51;
  uint64_t v52;
  unsigned __int16 v53;
  uint64_t v54;
  char *v55;
  void *v56;
  uint64_t v57;
  unsigned __int16 v58;
  unsigned __int16 v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *i;
  unsigned int v75;
  int v76;
  uint64_t v77;
  int *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int16 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  void *v98;
  unsigned __int16 *v99;
  int v100;
  const char *v101;
  int v102;
  unsigned __int16 v103;
  int v104;
  int v105;
  unsigned __int16 v106;
  int v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  unsigned int v116;
  BOOL v117;
  int v118;
  unsigned __int16 v120;
  unsigned int v121;
  char *v122;
  size_t v123;
  char *v124;
  char *v125;
  unsigned __int16 v126;
  unsigned __int16 v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  _WORD *v131;
  _WORD *v132;
  _WORD *v133;
  unsigned int v134;
  uint64_t v135;
  unsigned int v136;
  unsigned int v137;
  __int16 v138;
  unsigned int v139;
  _BYTE *v140;
  unsigned int NextUtf8Offset;
  unsigned int WCharFromUtf8;
  unsigned int v143;
  int v144;
  unsigned int v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  int v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unsigned int v161;
  unsigned __int16 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int *v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  uint64_t v181;
  _WORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  unsigned int v190;
  int __s1;
  char *__s1a;
  int __s1b;
  unsigned int v194;
  _WORD *v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  int v201;
  int v202;
  unsigned __int16 v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  int v210;
  uint64_t v211;
  __int16 v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unsigned __int16 v216;
  unsigned __int16 v217;
  unsigned int v218;
  char __s[16];
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  char v235;
  uint64_t v236;

  v21 = a1;
  v22 = a14;
  v236 = *MEMORY[0x24BDAC8D0];
  v216 = 0;
  v214 = 0;
  v215 = 0;
  v213 = 0;
  v212 = 0;
  *(_WORD *)(a14 + 8) = 0;
  *(_QWORD *)(v22 + 12) = 0x100000001;
  LogLevel = log_GetLogLevel(a1[4]);
  v24 = LogLevel > 4;
  result = bed_GetpElem(a7, 0xFFFFu, &v215);
  if ((result & 0x80000000) != 0)
    return result;
  v199 = a8;
  v29 = a16;
  v30 = a15;
  if ((_DWORD)a5 && (_DWORD)a5 != (unsigned __int16)*(_DWORD *)(v215 + 36))
    *(_DWORD *)(v22 + 16) = 0;
  log_OutText(v21[4], a2, 5, 0, (uint64_t)"[UTOI] (normalizing %d bytes - region length %d %s)", v26, v27, v28, a5);
  UTOITrace(v24, (uint64_t)v21, a6, a7, (uint64_t)"START of normalization");
  if (v30 == 1)
  {
    result = getDomainSegmentations((uint64_t)v21, (_QWORD *)a3, (uint64_t)a4, a5, a7, a10, &v213, &v212, 0, v29);
    if ((result & 0x80000000) != 0)
      return result;
  }
  v190 = LogLevel;
  v194 = -1711267830;
  log_OutText(v21[4], a2, 5, 0, (uint64_t)"[DAG]: Entering", v31, v32, v33, v174);
  v34 = heap_Calloc((_QWORD *)v21[1], 1, 16);
  if (!v34)
    return 2583699466;
  v35 = v34;
  __s1 = v29;
  v188 = v24;
  if ((_DWORD)a5)
  {
    v36 = 0;
    v37 = 0;
    do
    {
      ++v37;
      v36 = (unsigned __int16)(utf8_determineUTF8CharLength(a4[v36]) + v36);
    }
    while (v36 < a5);
  }
  else
  {
    v37 = 0;
  }
  *(_DWORD *)(v35 + 8) = v37;
  *(_DWORD *)(v35 + 12) = 13285840;
  v38 = (void *)heap_Calloc((_QWORD *)v21[1], v37 + 1, 24);
  *(_QWORD *)v35 = v38;
  if (!v38)
    return 2583699466;
  if (((v37 + 1) & 0xFFFE) != 0)
    v39 = (unsigned __int16)(v37 + 1);
  else
    v39 = 1;
  bzero(v38, 24 * v39);
  v189 = v22;
  v211 = a2;
  if (!(_DWORD)a5)
  {
LABEL_50:
    log_OutText(v21[4], a2, 5, 0, (uint64_t)"[DAG]: searching the heaviest edge from all possible paths", v40, v41, v42, v175);
    v65 = *(_QWORD *)v35;
    if (!*(_QWORD *)v35)
    {
      dag_free(v21, v35);
      log_OutText(v21[4], a2, 5, 0, (uint64_t)"[DAG]: Failed search the path, some error", v168, v169, v170, v176);
      return 2583699462;
    }
    v198 = a5;
    v184 = a6;
    v186 = a7;
    v66 = *(unsigned int *)(v35 + 8);
    if ((v66 & 0x80000000) == 0)
    {
      v67 = v66 + 1;
      v68 = (_QWORD *)(v65 + 16);
      do
      {
        *v68 = -2147483647;
        v68 += 3;
        --v67;
      }
      while (v67);
    }
    *(_QWORD *)(v65 + 16) = 0xFFFFFFFF00000000;
    log_OutText(v21[4], a2, 5, 0, (uint64_t)"[DAG]: All possible path, <vertex_from: vertex_to>: weight, accumulated weight", v62, v63, v64, v176);
    if ((int)v66 >= 1)
    {
      v72 = 0;
      v73 = *(_QWORD *)v35;
      do
      {
        for (i = *(uint64_t **)(v73 + 24 * v72); i; i = (uint64_t *)*i)
        {
          v75 = *((_DWORD *)i + 3);
          v76 = *((_DWORD *)i + 4) + *(_DWORD *)(v73 + 24 * v72 + 16);
          log_OutText(v21[4], v211, 5, 0, (uint64_t)"<%d: %d>: %d, %d", v69, v70, v71, v72);
          v73 = *(_QWORD *)v35;
          v77 = *(_QWORD *)v35 + 24 * v75;
          v79 = *(_DWORD *)(v77 + 16);
          v78 = (int *)(v77 + 16);
          if (v76 > v79)
          {
            *v78 = v76;
            v80 = v73 + 24 * v75;
            *(_DWORD *)(v80 + 20) = v72;
            *(_QWORD *)(v80 + 8) = i[3];
          }
        }
        ++v72;
      }
      while (v72 != v66);
    }
    v81 = heap_Calloc((_QWORD *)v21[1], 1, 24);
    if (v81)
    {
      v82 = v81;
      v83 = heap_Calloc((_QWORD *)v21[1], (v66 + 2), 4);
      *(_QWORD *)v82 = v83;
      if (v83)
      {
        v84 = heap_Calloc((_QWORD *)v21[1], (v66 + 2), 8);
        *(_QWORD *)(v82 + 8) = v84;
        v88 = *(_DWORD **)v82;
        v89 = v211;
        if (v84)
        {
          *(_WORD *)(v82 + 16) = 0;
          *v88 = v66;
          v90 = v189;
          if ((v66 & 0x80000000) == 0)
          {
            v91 = 0;
            do
            {
              ++v91;
              v92 = *(_QWORD *)v35 + 24 * v66;
              v93 = *(_QWORD *)(v92 + 8);
              LODWORD(v66) = *(_DWORD *)(v92 + 20);
              v88[v91] = v66;
              *(_QWORD *)(*(_QWORD *)(v82 + 8) + 8 * v91) = v93;
            }
            while ((v66 & 0x80000000) == 0);
            *(_WORD *)(v82 + 16) = v91;
          }
          log_OutText(v21[4], v211, 5, 0, (uint64_t)"[DAG]: Leaving", v85, v86, v87, v177);
          v94 = (unsigned __int16)(*(_WORD *)(v82 + 16) - 1);
          v204 = heap_Calloc((_QWORD *)v21[1], v94, 336);
          v187 = v94;
          if (v204)
          {
            if ((_DWORD)v94)
            {
              v95 = 0;
              v96 = 0;
              v206 = v21;
              v181 = v82;
              do
              {
                v97 = v204 + 336 * v95;
                *(_DWORD *)v97 = 2;
                v98 = (void *)(v97 + 4);
                cstdlib_memset((void *)(v97 + 4), 0, 0x41uLL);
                *(_WORD *)(v97 + 70) = 0;
                v99 = (unsigned __int16 *)(v97 + 70);
                *(_DWORD *)(v99 + 1) = 16;
                __s1a = (char *)(v99 + 3);
                cstdlib_memset(v99 + 3, 0, 0x101uLL);
                v195 = v99 + 132;
                v99[132] = 0;
                v100 = *(_DWORD *)(*(_QWORD *)v82 + 4 * (v94 - v95 - 1))
                     - *(_DWORD *)(*(_QWORD *)v82 + 4 * (v94 - v95));
                v201 = v96;
                v101 = &a4[(unsigned __int16)v96];
                v102 = cstdlib_strlen(v101);
                v103 = 0;
                v104 = 0;
                while (1)
                {
                  v105 = v103;
                  if (v103 >= (unsigned __int16)v102)
                    break;
                  v106 = utf8_determineUTF8CharLength(v101[v103]);
                  v103 = v105 + v106;
                  if (v100 == (unsigned __int16)++v104)
                  {
                    v107 = v105 + v106;
                    if ((_WORD)v105 + v106)
                      goto LABEL_76;
                    break;
                  }
                }
                v107 = v102;
LABEL_76:
                *v99 = v107;
                cstdlib_memcpy(v98, v101, (unsigned __int16)v107);
                *(_BYTE *)(*v99 + v204 + 336 * v95 + 5) = 0;
                v82 = v181;
                v94 = v187;
                v108 = (v187 - v95);
                v109 = *(const char **)(*(_QWORD *)(v181 + 8) + 8 * v108);
                if (v109)
                {
                  cstdlib_strcat(__s1a, v109);
                  *v195 = cstdlib_strlen(__s1a) + 1;
                  v21 = v206;
                  heap_Free((_QWORD *)v206[1], *(_QWORD *)(*(_QWORD *)(v181 + 8) + 8 * v108));
                }
                else
                {
                  cstdlib_strcpy(__s1a, (const char *)v98);
                  *v195 = *v99 + 1;
                  v21 = v206;
                }
                v90 = v189;
                v89 = v211;
                v96 = v107 + v201;
                ++v95;
              }
              while (v95 != v187);
            }
            v194 = 0;
          }
          heap_Free((_QWORD *)v21[1], *(_QWORD *)v82);
          heap_Free((_QWORD *)v21[1], *(_QWORD *)(v82 + 8));
          heap_Free((_QWORD *)v21[1], v82);
          dag_free(v21, v35);
          result = v194;
          if (!v204)
            return result;
          if ((_DWORD)v94)
          {
            v113 = 0;
            v114 = 0;
            v180 = 0;
            v115 = 0;
            v182 = a12;
            v179 = a11;
            v202 = a13;
            v207 = v21;
            do
            {
              v196 = -1944051702;
              v116 = *(_DWORD *)(v204 + 336 * v113);
              v117 = v116 > 5;
              v118 = (1 << v116) & 0x34;
              if (v117 || v118 == 0)
              {
                log_OutText(v21[4], v89, 5, 0, (uint64_t)"[UTOI] position %d (word.cbOrth=%d) not in dict", v110, v111, v112, v114);
                v180 = 1;
              }
              else
              {
                if (v202)
                {
                  v120 = cstdlib_strlen(szWORD_BEG_2);
                  v121 = bed_Insert(v199, szWORD_BEG_2, v120);
                  if ((v121 & 0x80000000) != 0)
                    goto LABEL_150;
                  *v182 += cstdlib_strlen(szWORD_BEG_2);
                }
                v122 = (char *)(v204 + 336 * v113 + 76);
                v123 = (unsigned __int16)(cstdlib_strlen(v122) + 1);
                v124 = (char *)heap_Alloc(v21[1], v123);
                if (!v124)
                  return 2350915594;
                v125 = v124;
                cstdlib_memset(v124, 0, v123);
                cstdlib_strcpy(v125, v122);
                v126 = cstdlib_strlen(v122);
                v121 = bed_Insert(v199, v125, v126);
                if ((v121 & 0x80000000) != 0)
                  goto LABEL_151;
                *v182 += cstdlib_strlen(v122);
                heap_Free((_QWORD *)v21[1], (uint64_t)v125);
                if (v202)
                {
                  v127 = cstdlib_strlen(szWORD_END_2);
                  v121 = bed_Insert(v199, szWORD_END_2, v127);
                  if ((v121 & 0x80000000) != 0)
                    goto LABEL_150;
                  *v182 += cstdlib_strlen(szWORD_END_2);
                }
                v121 = bed_GetcElem(v199, &v216);
                if ((v121 & 0x80000000) != 0)
                {
LABEL_150:
                  v125 = 0;
LABEL_151:
                  v196 = v121;
                  goto LABEL_166;
                }
                v128 = *(_DWORD *)(a3 + 32);
                v129 = a10;
                v130 = v204 + 336 * v113;
                v131 = (_WORD *)(v130 + 70);
                v132 = (_WORD *)(v130 + 334);
                if (v128)
                  v133 = (_WORD *)(v130 + 334);
                else
                  v133 = (_WORD *)(v130 + 70);
                __s1b = v115;
                if (*(unsigned __int16 *)(a10 + 18) < (unsigned __int16)(*(_WORD *)(a10 + 16)
                                                                                      + 4 * *v133
                                                                                      + 5))
                {
                  v134 = datac_RequestBlock(a9, v179, (unsigned __int16)(*(_WORD *)(a10 + 16) + 4 * *v133 + 5), &a10);
                  if ((v134 & 0x80000000) != 0)
                  {
                    v125 = 0;
                    v196 = v134;
                    v21 = v207;
                    goto LABEL_166;
                  }
                  v129 = a10;
                  v128 = *(_DWORD *)(a3 + 32);
                }
                v135 = *(_QWORD *)(v129 + 8);
                v136 = *(unsigned __int16 *)(v129 + 16);
                v137 = *(unsigned __int16 *)(v129 + 2);
                v138 = v135 + v137 * v136;
                __s[4] = 0;
                *(_DWORD *)__s = 0;
                if (v128)
                {
                  v139 = (unsigned __int16)*v132;
                  v140 = (_BYTE *)(v135 + v137 * (unint64_t)v136);
                  if (*v132)
                  {
                    NextUtf8Offset = 0;
                    v140 = (_BYTE *)(v135 + v137 * (unint64_t)v136);
                    do
                    {
                      if (!*(_BYTE *)(v204 + 336 * v113 + NextUtf8Offset + 76))
                        break;
                      WCharFromUtf8 = utf8_GetWCharFromUtf8(v122, NextUtf8Offset, v139);
                      LH_itoa(WCharFromUtf8, __s, 0x10u);
                      cstdlib_memcpy(v140, &__s[2], 2uLL);
                      cstdlib_memcpy(v140 + 2, __s, 2uLL);
                      v140 += 4;
                      NextUtf8Offset = (unsigned __int16)utf8_GetNextUtf8Offset(v122, NextUtf8Offset);
                      v139 = (unsigned __int16)*v132;
                    }
                    while (v139 > NextUtf8Offset);
                  }
                }
                else
                {
                  v140 = (_BYTE *)(v135 + v137 * (unint64_t)v136);
                  if (*v131)
                  {
                    v143 = 0;
                    v140 = (_BYTE *)(v135 + v137 * (unint64_t)v136);
                    do
                    {
                      v144 = v143 + v114;
                      if (v143 + v114 >= v198)
                        break;
                      v145 = utf8_GetWCharFromUtf8(a4, v143 + v114, v198);
                      LH_itoa(v145, __s, 0x10u);
                      cstdlib_memcpy(v140, &__s[2], 2uLL);
                      cstdlib_memcpy(v140 + 2, __s, 2uLL);
                      v140 += 4;
                      v143 = (unsigned __int16)(utf8_GetNextUtf8Offset(a4, v144) - v114);
                    }
                    while (v143 < (unsigned __int16)*v131);
                  }
                }
                *v140 = 0;
                *(_WORD *)(a10 + 16) += (_WORD)v140 - v138 + 1;
                v21 = v207;
                v90 = v189;
                v89 = v211;
                v94 = v187;
                v115 = __s1b;
              }
              if (*(_DWORD *)(v90 + 16) == 1)
              {
                v146 = *(unsigned __int16 *)(v90 + 8);
                v147 = *(_QWORD *)v90;
                if (v146 >= *(unsigned __int16 *)(v90 + 10))
                {
                  v148 = heap_Realloc((uint64_t *)v21[1], v147, 12 * *(unsigned __int16 *)(v90 + 10) + 121);
                  if (!v148)
                    goto LABEL_165;
                  v147 = v148;
                  *(_QWORD *)v90 = v148;
                  *(_WORD *)(v90 + 10) += 10;
                  v146 = *(unsigned __int16 *)(v90 + 8);
                }
                v149 = v146;
                v150 = v147 + 12 * v146;
                *(_WORD *)v150 = v115;
                *(_QWORD *)(v150 + 2) = 0;
                v151 = *(unsigned __int16 *)(v204 + 336 * v113 + 70);
                if (v180 == 1)
                  *(_DWORD *)(v147 + 12 * v149 + 4) = 1;
                v115 += v151;
                *(_WORD *)(v90 + 8) = v149 + 1;
              }
              v114 = ++v113;
            }
            while (v113 != v94);
          }
          v152 = v188;
          if (!(_DWORD)v198)
            goto LABEL_163;
          v153 = bed_GetcElem(v199, &v216);
          if ((v153 & 0x80000000) != 0)
            goto LABEL_152;
          if (v216)
          {
            UTOISubTrace(v188, (uint64_t)v21, v199, (uint64_t)"replacement string");
            if (*(_DWORD *)(v189 + 16) == 1)
            {
              v153 = bed_GetpElem(v199, 0, &v214);
              if ((v153 & 0x80000000) == 0)
              {
                if (v216)
                {
                  v160 = 0;
                  v161 = 0;
                  v162 = 1;
                  v163 = v214;
                  do
                  {
                    if (*(_BYTE *)(v163 + v160) == 16)
                    {
                      v164 = *(unsigned __int16 *)(v189 + 8);
                      if (v161 >= v164)
                      {
LABEL_156:
                        log_OutText(v21[4], v211, 5, 0, (uint64_t)"[UTOI] cant find non-deleted word to align new word number %d with", v157, v158, v159, v162);
                        v210 = 0;
                        goto LABEL_157;
                      }
                      v165 = v161;
                      v166 = (int *)(*(_QWORD *)v189 + 12 * v161 + 4);
                      while (1)
                      {
                        v167 = *v166;
                        v166 += 3;
                        if (v167 != 1)
                          break;
                        if (v164 == ++v165)
                          goto LABEL_156;
                      }
                      *(_WORD *)(*(_QWORD *)v189 + 12 * (unsigned __int16)v165 + 8) = v160;
                      ++v162;
                      v161 = (unsigned __int16)v165 + 1;
                    }
                    ++v160;
                  }
                  while (v160 < v216);
                }
                v210 = 1;
LABEL_157:
                if (v190 >= 5 && *(_WORD *)(v189 + 8))
                {
                  v172 = 0;
                  v173 = 0;
                  do
                  {
                    log_OutText(v21[4], v211, 5, 0, (uint64_t)"[UTOI] [%d] origWordPos=%d, newPos=%d, bDeleted=%d", v157, v158, v159, v173++);
                    v172 += 12;
                  }
                  while (v173 < *(unsigned __int16 *)(v189 + 8));
                }
                v152 = v188;
                if (v210)
                  *(_DWORD *)(v189 + 12) = 0;
                goto LABEL_163;
              }
LABEL_152:
              v196 = v153;
              goto LABEL_165;
            }
          }
          else
          {
            log_OutText(v21[4], v211, 5, 0, (uint64_t)"[UTOI] deleting region, no replacement text found", v154, v155, v156, v178);
          }
LABEL_163:
          v196 = utoin_IncrReplaceCurrentRegion(v184, v186, v199, v198, (uint64_t *)v189);
          if ((v196 & 0x80000000) == 0)
            UTOITrace(v152, (uint64_t)v21, v184, v186, (uint64_t)"END of normalization");
LABEL_165:
          v125 = 0;
LABEL_166:
          if (v212)
          {
            heap_Free((_QWORD *)v21[1], v213);
            v213 = 0;
          }
          if (v125)
            heap_Free((_QWORD *)v21[1], (uint64_t)v125);
          heap_Free((_QWORD *)v21[1], v204);
          return v196;
        }
        if (v88)
        {
          heap_Free((_QWORD *)v21[1], (uint64_t)v88);
          *(_QWORD *)v82 = 0;
        }
      }
      v171 = *(_QWORD *)(v82 + 8);
      if (v171)
      {
        heap_Free((_QWORD *)v21[1], v171);
        *(_QWORD *)(v82 + 8) = 0;
      }
      heap_Free((_QWORD *)v21[1], v82);
    }
    return 2583699466;
  }
  v183 = a6;
  v185 = a7;
  v203 = 0;
  v43 = 0;
  v44 = a4;
  v205 = (uint64_t)v21;
  v197 = a5;
  while (1)
  {
    v45 = 0;
    v46 = a5;
    v47 = 0;
    v48 = (unsigned __int8 *)&v44[(unsigned __int16)v43];
    v200 = v43;
    v49 = v46 - (unsigned __int16)v43;
    v50 = (unsigned __int16)(v46 - v43);
    while (v45 < v50)
    {
      v45 += utf8_determineUTF8CharLength(v48[v45]);
      if (v29 == ++v47)
      {
        v47 = v29;
        if (v45)
          goto LABEL_24;
        break;
      }
    }
    v45 = v49;
LABEL_24:
    v218 = 0;
    v235 = 0;
    v233 = 0u;
    v234 = 0u;
    v231 = 0u;
    v232 = 0u;
    v229 = 0u;
    v230 = 0u;
    v227 = 0u;
    v228 = 0u;
    v225 = 0u;
    v226 = 0u;
    v223 = 0u;
    v224 = 0u;
    v221 = 0u;
    v222 = 0u;
    *(_OWORD *)__s = 0u;
    v220 = 0u;
    v217 = 256;
    if (v45)
    {
      if (v49 >= v45)
        break;
    }
LABEL_39:
    v54 = sysdct_char_LookUp_Chinese((_QWORD *)a3, v48, __s, &v217, 0, 0, "normal");
    if (!(_DWORD)v54)
    {
      v56 = (void *)heap_Calloc((_QWORD *)v21[1], 1, v217 + 1);
      if (!v56)
      {
        v54 = 2583699466;
LABEL_147:
        heap_Free((_QWORD *)v21[1], v35);
        return v54;
      }
      v57 = (uint64_t)v56;
      v58 = v217;
      if (v217)
      {
        v59 = v217 - 1;
        v60 = v211;
        if (v217 == 1)
        {
LABEL_45:
          v58 = 1;
        }
        else
        {
          while (__s[v59] == 92)
          {
            v217 = --v58;
            if (!--v59)
              goto LABEL_45;
          }
        }
      }
      else
      {
        v60 = v211;
      }
      cstdlib_memcpy(v56, __s, v58);
      *(_BYTE *)(v57 + v217) = 0;
      dag_insert_edge_0((uint64_t)v21, v60, (uint64_t *)v35, v203, v203 + 1, 1, v57);
      v54 = 0;
    }
LABEL_48:
    v61 = utf8_determineUTF8CharLength(*v48);
    v43 = v200 + v61;
    ++v203;
    a5 = v197;
    if (v197 <= (unsigned __int16)(v200 + v61))
    {
      a6 = v183;
      a7 = v185;
      a2 = v211;
      if ((v54 & 0x80000000) == 0)
        goto LABEL_50;
      goto LABEL_147;
    }
  }
  v51 = 0;
  v52 = 1;
  v53 = v45;
  while (1)
  {
    v54 = sysdct_word_LookUp_Chinese((_QWORD *)a3, v48, v53, __s, &v217, "");
    if ((v54 & 0x80000000) != 0)
      return v54;
    if (v217 != 256)
    {
      v55 = cstdlib_strrchr(__s, 92);
      if (v55)
        v52 = cstdlib_atoi((unsigned __int8 *)v55 + 1) + 1;
      if (v47)
      {
        dag_insert_edge_0(v205, v211, (uint64_t *)v35, v203, v203 + v47, v52, 0);
        ++v51;
      }
    }
    v218 = (unsigned __int16)(v53 - 1);
    utf8_GetPreviousValidUtf8Offset((uint64_t)v48, &v218);
    v217 = 256;
    if (v47)
      --v47;
    else
      v47 = 0;
    if (v49 >= (unsigned __int16)v218)
    {
      v53 = v218;
      if ((unsigned __int16)(v218 - 1) < v45)
        continue;
    }
    v21 = (_QWORD *)v205;
    v44 = a4;
    v29 = __s1;
    if (v51)
      goto LABEL_48;
    goto LABEL_39;
  }
}

_QWORD *dag_free(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  if (a2)
  {
    v3 = result;
    v4 = *(_QWORD *)a2;
    if (v4)
    {
      v5 = *(_DWORD *)(a2 + 8);
      v6 = (v5 + 1);
      if (v5 != -1)
      {
        v7 = 0;
        do
        {
          v8 = *(_QWORD **)(v4 + 24 * v7);
          if (v8)
          {
            do
            {
              v9 = (_QWORD *)*v8;
              heap_Free((_QWORD *)v3[1], (uint64_t)v8);
              v8 = v9;
            }
            while (v9);
            v4 = *(_QWORD *)a2;
          }
          *(_QWORD *)(v4 + 24 * v7++) = 0;
        }
        while (v7 != v6);
      }
    }
    heap_Free((_QWORD *)v3[1], v4);
    return heap_Free((_QWORD *)v3[1], a2);
  }
  return result;
}

uint64_t dag_insert_edge_0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 32);
  if (result)
  {
    v15 = result;
    *(_DWORD *)(result + 8) = a4;
    *(_DWORD *)(result + 12) = a5;
    *(_QWORD *)(result + 24) = a7;
    v16 = uint32_log2(a6);
    *(_DWORD *)(v15 + 16) = v16 - uint32_log2(*((unsigned int *)a3 + 3));
    v17 = *a3;
    v18 = 24 * a4;
    *(_QWORD *)v15 = *(_QWORD *)(*a3 + v18);
    *(_QWORD *)(v17 + v18) = v15;
    return log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"[DAG]: insert edge (vertex, Chinese Character Positions and weight): %d %d %d %d", v19, v20, v21, a4);
  }
  return result;
}

uint64_t wparserDag_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2350915585;
  result = 0;
  *a2 = &IWparserImplDag;
  return result;
}

uint64_t wparser_impl_dag_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t MaxWordLen;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  MaxWordLen = 2350915591;
  v20 = 0;
  if (a5)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v20);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(_QWORD *)(v20 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL DAG ObjOpen: Begin", v10, v11, v12, v19);
      v13 = (_QWORD *)heap_Calloc(*(_QWORD **)(v20 + 8), 1, 56);
      if (v13)
      {
        v14 = v13;
        *v13 = a3;
        v13[1] = a4;
        v13[2] = v20;
        v13[3] = "WPARSER_IMPL";
        MaxWordLen = wparser_impl_maxwords_loc_GetMaxWordLen((uint64_t)v13);
        *(_QWORD *)a5 = v14;
        *(_DWORD *)(a5 + 8) = 87652;
        log_OutText(*(_QWORD *)(v20 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL DAG ObjOpen: End (%x)", v15, v16, v17, MaxWordLen);
      }
      else
      {
        return 2350915594;
      }
    }
  }
  return MaxWordLen;
}

uint64_t wparser_impl_dag_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((v6 & 0x80000000) == 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL DAG ObjClose : Begin", v3, v4, v5, v12);
    heap_Free(*(_QWORD **)(v7 + 8), a1);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL DAG ObjClose : End (%x)", v8, v9, v10, v6);
  }
  return v6;
}

uint64_t wparser_impl_dag_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t MaxWordLen;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((v3 & 0x80000000) != 0)
    return v3;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL DAG ObjReopen : Begin", v4, v5, v6, v12);
  MaxWordLen = wparser_impl_maxwords_loc_GetMaxWordLen(a1);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL DAG ObjReopen : End (%x)", v8, v9, v10, MaxWordLen);
  return MaxWordLen;
}

uint64_t wparser_impl_dag_Init(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t result;
  int v10;

  v10 = 7549556;
  result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, int *, uint64_t))(*a3 + 72))(a3[1], a3[2], &v10, a1 + 44);
    if ((result & 0x80000000) == 0)
    {
      *(_QWORD *)(a1 + 32) = a3;
      *(_DWORD *)(a1 + 40) = a6;
    }
  }
  return result;
}

uint64_t wparser_impl_dag_Normalize(uint64_t a1, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 a11, _WORD *a12, int a13, uint64_t a14, uint64_t a15)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    a3[a5] = 0;
    if (*(_DWORD *)(a1 + 44) != 1)
      return DoDag(*(_QWORD **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), a3, a5, a6, a7, a8, a9, a10, a11, a12, a13, a15, *(_DWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
    result = wordm_mapt2s(*(_QWORD **)(a1 + 32), (uint64_t)a3, a5);
    if ((result & 0x80000000) == 0)
      return DoDag(*(_QWORD **)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), a3, a5, a6, a7, a8, a9, a10, a11, a12, a13, a15, *(_DWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  }
  return result;
}

uint64_t wparser_impl_dag_Spell(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, uint64_t a10, int a11)
{
  uint64_t result;
  uint64_t v18;

  result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    LOWORD(v18) = a9;
    return DoSpell(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD **)(a1 + 32), a3, a5, a6, a7, a8, v18, a10, a11, *(_BYTE *)(a1 + 48));
  }
  return result;
}

uint64_t wparser_impl_dag_Latin(uint64_t a1, int a2, const char *a3, unsigned int a4, char **a5)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
    return DoLatin(*(_QWORD *)(a1 + 16), *(_QWORD **)(a1 + 32), a3, a4, a5);
  return result;
}

uint64_t wparser_impl_dag_End(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 56);
}

uint64_t wparser_impl_dag_ProcessStart(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 56);
}

uint64_t wparser_impl_dag_ProcessEnd(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 56);
}

uint64_t wparserDctPlusRules_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2350915585;
  result = 0;
  *a2 = &IWparserImplDctPlusRules;
  return result;
}

uint64_t wparser_impl_plusrules_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v19 = 0;
  if (!a5)
    return 2350915591;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v19);
  if ((inited & 0x80000000) == 0)
  {
    log_OutText(*(_QWORD *)(v19 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjOpen: Begin", v8, v9, v10, v18);
    v12 = (_QWORD *)heap_Calloc(*(_QWORD **)(v19 + 8), 1, 88);
    if (v12)
    {
      *v12 = a3;
      v12[1] = a4;
      v16 = v19;
      v12[2] = v19;
      v12[3] = 0;
      v12[4] = "WPARSER_IMPL";
      *(_QWORD *)a5 = v12;
      *(_DWORD *)(a5 + 8) = 87652;
      log_OutText(*(_QWORD *)(v16 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjOpen: End (%x)", v13, v14, v15, inited);
    }
    else
    {
      return 2350915594;
    }
  }
  return inited;
}

uint64_t wparser_impl_plusrules_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v6 & 0x80000000) == 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : Begin", v3, v4, v5, v12);
    heap_Free(*(_QWORD **)(v7 + 8), a1);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : End (%x)", v8, v9, v10, v6);
  }
  return v6;
}

uint64_t wparser_impl_plusrules_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v6 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v6 & 0x80000000) == 0)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : Begin", v3, v4, v5, v11);
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : End (%x)", v7, v8, v9, v6);
  }
  return v6;
}

uint64_t wparser_impl_plusrules_Init(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5, int a6, _BYTE *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v28;

  v12 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v12 & 0x80000000) != 0)
    return v12;
  *(_QWORD *)(a1 + 40) = a3;
  if (cstdlib_strcmp(a5, "win874"))
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), *(_QWORD *)(a1 + 32), 1802, (uint64_t)"%s%s", v13, v14, v15, v16, a5);
    return 2350915591;
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = xcode_Utf16leToWin874;
    *(_QWORD *)(a1 + 56) = 0;
    if (*a7
      && (v18 = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE *, uint64_t))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16), a7, a1 + 64), (v18 & 0x80000000) != 0))
    {
      v17 = v18;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), *(_QWORD *)(a1 + 32), 1819, 0, v19, v20, v21, v22, v28);
    }
    else
    {
      *(_QWORD *)(a1 + 48) = 0;
      v17 = o2t_ObjOpen(*(_WORD **)a1, *(_QWORD *)(a1 + 8), (_QWORD *)(a1 + 48));
      if ((v17 & 0x80000000) != 0)
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), *(_QWORD *)(a1 + 32), 52002, (uint64_t)"%s%s", v23, v24, v25, v26, a5);
      else
        *(_DWORD *)(a1 + 80) = a6;
    }
  }
  return v17;
}

uint64_t wparser_impl_plusrules_Normalize(uint64_t a1, int a2, const char *a3, unsigned int a4, __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 a11, _WORD *a12, int a13, uint64_t a14, uint64_t a15)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v39;
  _WORD v40[5];

  v40[0] = a5;
  v39 = 0;
  v21 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v21 & 0x80000000) != 0)
    return v21;
  v25 = 2350915594;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF8: %s", v22, v23, v24, (uint64_t)a3);
  v26 = Utf8_Utf8NbrOfSymbols(a3);
  v27 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 2 * (v26 + 1));
  if (v27)
  {
    v28 = v27;
    v29 = utf8_Utf8ToUtf16((uint64_t)a3, a4, 0, v27, 2 * v26, &v39, 0);
    if ((v29 & 0x80000000) != 0)
    {
      v34 = 0;
    }
    else
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF16: %s", v30, v31, v32, v28);
      v33 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 2 * (v39 + 1));
      if (!v33)
        return v25;
      v34 = v33;
      v29 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, _WORD *, _QWORD))(a1 + 72))(*(_QWORD *)(a1 + 56), v28, (unsigned __int16)v39, v33, v40, *(_QWORD *)(a1 + 64));
      if ((v29 & 0x80000000) == 0)
      {
        *(_BYTE *)(v34 + v40[0]) = 0;
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL WIN874: %s", v35, v36, v37, v34);
        v29 = DoDctPlusRules(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), *(_QWORD **)(a1 + 40), *(_BYTE **)(a1 + 48), v34, v40[0], a6, a7, a8, a9, a10, a11, a12, a13, a15, *(_DWORD *)(a1 + 80), (uint64_t)a3, v28);
      }
    }
    v25 = v29;
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v28);
    if (v34)
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v34);
  }
  return v25;
}

uint64_t wparser_impl_plusrules_Spell(uint64_t a1, int a2, const char *a3, unsigned int a4, unsigned __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, uint64_t a10, int a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  int v36;
  unsigned __int16 v37;

  v37 = a5;
  v36 = 0;
  v17 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v17 & 0x80000000) != 0)
    return v17;
  v21 = 2350915594;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF8: %s", v18, v19, v20, (uint64_t)a3);
  v22 = Utf8_Utf8NbrOfSymbols(a3);
  v23 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 2 * (v22 + 1));
  if (v23)
  {
    v24 = v23;
    v25 = utf8_Utf8ToUtf16((uint64_t)a3, a4, 0, v23, 2 * v22, &v36, 0);
    if ((v25 & 0x80000000) != 0)
    {
      v30 = 0;
    }
    else
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF16: %s", v26, v27, v28, v24);
      v29 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 2 * (v36 + 1));
      if (!v29)
        return v21;
      v30 = v29;
      v25 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, unsigned __int16 *, _QWORD))(a1 + 72))(*(_QWORD *)(a1 + 56), v24, (unsigned __int16)v36, v29, &v37, *(_QWORD *)(a1 + 64));
      if ((v25 & 0x80000000) == 0)
      {
        *(_BYTE *)(v30 + v37) = 0;
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL WIN874: %s", v31, v32, v33, v30);
        LOWORD(v35) = a9;
        v25 = DoDctPlusRulesSpell(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32), *(_QWORD **)(a1 + 40), v30, v37, a6, a7, a8, v35, a10, a11);
      }
    }
    v21 = v25;
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v24);
    if (v30)
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v30);
  }
  return v21;
}

uint64_t wparser_impl_plusrules_Latin(uint64_t a1, int a2, char *a3, unsigned int a4, char **a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v27;
  unsigned __int16 v28;

  v28 = a4;
  v27 = 0;
  v9 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v9 & 0x80000000) != 0)
    return v9;
  v13 = 2350915594;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF8: %s", v10, v11, v12, (uint64_t)a3);
  v14 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 2 * a4 + 2);
  if (v14)
  {
    v15 = v14;
    v16 = utf8_Utf8ToUtf16((uint64_t)a3, a4, 0, v14, 2 * a4, &v27, 0);
    if ((v16 & 0x80000000) != 0)
    {
      v21 = 0;
    }
    else
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF16: %s", v17, v18, v19, v15);
      v20 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 2 * (v27 + 1));
      if (!v20)
        return v13;
      v21 = (unsigned __int8 *)v20;
      v16 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, unsigned __int16 *, _QWORD))(a1 + 72))(*(_QWORD *)(a1 + 56), v15, (unsigned __int16)v27, v20, &v28, *(_QWORD *)(a1 + 64));
      if ((v16 & 0x80000000) == 0)
      {
        v21[v28] = 0;
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL WIN874: %s", v22, v23, v24, (uint64_t)v21);
        v13 = DoTHTLatin(*(_QWORD *)(a1 + 16), *(_QWORD **)(a1 + 40), v21, v28, a5);
        if (a5)
        {
          v25 = *a3;
          if ((v25 & 0x80000000) == 0)
            *(_WORD *)*a5 = v25;
        }
        goto LABEL_12;
      }
    }
    v13 = v16;
LABEL_12:
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v15);
    if (v21)
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v21);
  }
  return v13;
}

uint64_t wparser_impl_plusrules_End(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v5;

  result = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((result & 0x80000000) == 0)
  {
    v5 = *(_QWORD *)(a1 + 48);
    if (!v5)
      return safeh_HandleCheck(a1, a2, 87652, 88);
    result = o2t_ObjClose(v5);
    if ((result & 0x80000000) == 0)
      return safeh_HandleCheck(a1, a2, 87652, 88);
  }
  return result;
}

uint64_t wparser_impl_plusrules_ProcessStart(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wparser_impl_plusrules_ProcessEnd(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wordm_sysdct_Lookup_Thai(_QWORD *a1, const char *a2, uint64_t a3, int a4, const char *a5)
{
  uint64_t result;
  uint64_t v10;
  unsigned __int16 v11;
  size_t v12;
  unsigned __int16 v13;
  uint64_t v14;
  unsigned __int16 v15;
  _BOOL4 v16;
  int v17;
  __int16 v18;
  int v19;
  int v20;
  size_t v21;
  int v22;
  unsigned __int16 v23;
  char __src[257];
  char __dst[65];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v23 = 0;
  result = 2370838535;
  if (a1 && a2 && a3)
  {
    LODWORD(v10) = a4;
    *(_DWORD *)a3 = 0;
    cstdlib_memset((void *)(a3 + 4), 0, 0x41uLL);
    *(_WORD *)(a3 + 70) = 0;
    *(_DWORD *)(a3 + 72) = 0;
    cstdlib_memset((void *)(a3 + 76), 0, 0x101uLL);
    *(_WORD *)(a3 + 334) = 0;
    v11 = cstdlib_strlen(a2);
    if ((v11 & 0xFFC0) != 0)
      v12 = 64;
    else
      v12 = v11;
    cstdlib_memmove(__dst, a2, v12);
    __dst[v12] = 0;
    if ((_DWORD)v12)
    {
      *(_DWORD *)a3 = 2;
      v13 = 0;
      if (v12 <= v10)
        v10 = v12;
      else
        v10 = v10;
      if ((_DWORD)v10)
      {
        v14 = v10;
        v15 = v10;
        do
        {
          if ((__dst[v14] + 49) >= 0xCu)
          {
            v16 = 0;
            v17 = __dst[v14];
            if ((v17 - 231) >= 7 && v17 != 229)
            {
              v16 = 0;
              v19 = __dst[(v14 - 1)];
              if ((v19 - 224) >= 5 && v19 != 230)
              {
                v23 = 256;
                result = sysdct_word_LookUp_Thai(a1, __dst, v15, __src, &v23, a5);
                if ((result & 0x80000000) != 0)
                  return result;
                v13 = v23;
                v16 = v23 != 256;
              }
            }
          }
          else
          {
            v16 = 0;
          }
          v18 = v15 + v16;
          v15 = v15 + v16 - 1;
          v14 = v15;
        }
        while (v10 > (unsigned __int16)(v18 - 2) && !v16);
      }
      else
      {
        v15 = 0;
        v14 = 0;
      }
      if (v10 <= (unsigned __int16)(v15 - 1))
      {
        cstdlib_memmove((void *)(a3 + 4), __dst, 1uLL);
        result = 0;
        *(_BYTE *)(a3 + 5) = 0;
        *(_WORD *)(a3 + 70) = 1;
        *(_DWORD *)a3 = 0;
      }
      else
      {
        __src[v13] = 0;
        cstdlib_strcpy((char *)(a3 + 76), __src);
        *(_DWORD *)(a3 + 72) = 16;
        *(_WORD *)(a3 + 334) = v23;
        if (__dst[v14] == 230)
        {
          cstdlib_strcat((char *)(a3 + 76), __src);
          *(_WORD *)(a3 + 334) += v23;
          ++v15;
        }
        __dst[v15] = 0;
        cstdlib_strcpy((char *)(a3 + 4), __dst);
        result = 0;
        *(_WORD *)(a3 + 70) = v15;
      }
    }
    else
    {
      v20 = 0;
      do
      {
        v21 = (unsigned __int16)v20;
        v22 = a2[(unsigned __int16)v20++];
      }
      while (v22 == 32);
      cstdlib_memmove((void *)(a3 + 4), a2, v21);
      return 0;
    }
  }
  return result;
}

uint64_t DoDctPlusRules(uint64_t a1, uint64_t a2, _QWORD *a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int16 a12, _WORD *a13, int a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18)
{
  unsigned int LogLevel;
  uint64_t DomainSegmentations;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int16 v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  unsigned __int16 *v33;
  unsigned int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned __int16 v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  int v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  void *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  _BOOL4 v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  __int16 v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int16 v87;
  uint64_t v88;
  __int16 v89;
  _OWORD v90[4];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int16 v119;
  _WORD __b[296];
  _DWORD __dst[16];
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;

  v139 = *MEMORY[0x24BDAC8D0];
  v89 = -1;
  v138 = 0u;
  v137 = 0u;
  v136 = 0u;
  v135 = 0u;
  v134 = 0u;
  v133 = 0u;
  v132 = 0u;
  v131 = 0u;
  v130 = 0u;
  v129 = 0u;
  v128 = 0u;
  v127 = 0u;
  v126 = 0u;
  v125 = 0u;
  v124 = 0u;
  v123 = 0u;
  v122 = 0u;
  memset(__dst, 0, sizeof(__dst));
  memset(__b, 0, 512);
  v117 = 0u;
  v118 = 0u;
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  v107 = 0u;
  v108 = 0u;
  v105 = 0u;
  v106 = 0u;
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  v99 = 0u;
  v100 = 0u;
  v97 = 0u;
  v98 = 0u;
  v95 = 0u;
  v96 = 0u;
  v93 = 0u;
  v94 = 0u;
  v91 = 0u;
  v92 = 0u;
  memset(v90, 0, sizeof(v90));
  v88 = 0;
  v87 = 0;
  v85 = 0;
  v86 = 0;
  v84 = 0;
  v83 = 0;
  cstdlib_memset(__b, 0, 0x40uLL);
  __b[32] = 0;
  cstdlib_memset(&__b[33], 0, 0x200uLL);
  __b[289] = 0;
  LOWORD(v91) = 0;
  BYTE2(v91) = 0;
  v119 = 0;
  *(_WORD *)(a15 + 8) = 0;
  *(_QWORD *)(a15 + 12) = 0x100000001;
  LogLevel = log_GetLogLevel(*(_QWORD *)(a1 + 32));
  v76 = LogLevel > 4;
  DomainSegmentations = bed_GetpElem(a8, 0xFFFFu, &v88);
  if ((DomainSegmentations & 0x80000000) != 0)
    return DomainSegmentations;
  v73 = LogLevel;
  if (!(_DWORD)a6 && (unsigned __int16)*(_DWORD *)(v88 + 36))
    *(_DWORD *)(a15 + 16) = 0;
  log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] (normalizing %d bytes - region length %d %s)", v25, v26, v27, a6);
  UTOITrace(v76, a1, a7, a8, (uint64_t)"START of normalization");
  if (a16 == 1)
  {
    DomainSegmentations = getDomainSegmentations(a1, a3, a5, a6, a8, a11, &v85, (__int16 *)&v84 + 1, 1, 0);
    if ((DomainSegmentations & 0x80000000) != 0)
      return DomainSegmentations;
  }
  v79 = a2;
  v81 = a1;
  v74 = a8;
  v89 = -1;
  v78 = a6;
  v75 = a7;
  if ((_DWORD)a6)
  {
    v28 = 0;
    LOWORD(v29) = 0;
    v30 = 0;
    v31 = 0;
    while (1)
    {
      if (a16 == 1 && HIWORD(v84) > (unsigned __int16)v29)
      {
        v32 = 0;
        v29 = (unsigned __int16)v29;
        v33 = (unsigned __int16 *)(v85 + 340 * (unsigned __int16)v29);
        while (1)
        {
          v34 = *v33;
          if (v34 > v31)
            break;
          v33 += 170;
          if (v34 == v31)
            v32 = v29;
          ++v29;
          if (v34 == v31 || v29 >= HIWORD(v84))
          {
            if (v34 != v31)
              break;
            cstdlib_memcpy(__dst, (const void *)(v85 + 340 * v32 + 4), 0x150uLL);
            goto LABEL_23;
          }
        }
      }
      v39 = wordm_sysdct_Lookup_Thai(a3, (const char *)(a5 + v31), (uint64_t)__dst, 22, "normal");
      if ((v39 & 0x80000000) != 0)
      {
        v50 = v39;
        v41 = a1;
        goto LABEL_77;
      }
LABEL_23:
      if (__dst[0] == 5 || __dst[0] == 2)
      {
        v41 = a1;
        v42 = handleWordMatch(a1, v79, a4, a5, v31, (unsigned __int16 *)__dst, &v89, (uint64_t)__b, (char *)v90, a9, a14, a13, a10, a11, a12, a17, a18, &v84, &v83);
        if ((v42 & 0x80000000) != 0)
          goto LABEL_63;
        v42 = bed_GetcElem(a9, &v87);
        if ((v42 & 0x80000000) != 0)
          goto LABEL_63;
        v43 = 0;
      }
      else
      {
        log_OutText(*(_QWORD *)(a1 + 32), v79, 5, 0, (uint64_t)"[UTOI] position %d (word.cbOrth=%d) not in dict", v36, v37, v38, v28);
        if (v89 == -1)
          v89 = v31;
        v43 = 1;
        v41 = a1;
      }
      if (*(_DWORD *)(a15 + 16) == 1)
      {
        v44 = *(unsigned __int16 *)(a15 + 8);
        v45 = *(_QWORD *)a15;
        if (v44 >= *(unsigned __int16 *)(a15 + 10))
        {
          v46 = heap_Realloc(*(uint64_t **)(v41 + 8), v45, 12 * *(unsigned __int16 *)(a15 + 10) + 121);
          if (!v46)
          {
            v50 = 2350915594;
            goto LABEL_77;
          }
          v45 = v46;
          *(_QWORD *)a15 = v46;
          *(_WORD *)(a15 + 10) += 10;
          v44 = *(unsigned __int16 *)(a15 + 8);
        }
        v47 = v44;
        v48 = v45 + 12 * v44;
        *(_WORD *)v48 = v30;
        *(_QWORD *)(v48 + 2) = 0;
        v49 = WORD3(v122);
        if (v43)
          *(_DWORD *)(v45 + 12 * v47 + 4) = 1;
        v30 += 3 * v49;
        *(_WORD *)(a15 + 8) = v47 + 1;
      }
      else
      {
        v49 = WORD3(v122);
      }
      v31 += v49;
      v28 = v31;
      if (v31 >= v78)
        goto LABEL_46;
    }
  }
  v31 = 0;
LABEL_46:
  LOBYTE(__dst[1]) = 0;
  WORD3(v122) = 0;
  BYTE12(v122) = 0;
  HIWORD(v138) = 0;
  v51 = a9;
  v41 = a1;
  v42 = handleWordMatch(a1, v79, a4, a5, v31, (unsigned __int16 *)__dst, &v89, (uint64_t)__b, (char *)v90, a9, a14, a13, a10, a11, a12, a17, a18, &v84, &v83);
  if ((v42 & 0x80000000) == 0)
  {
    v52 = v74;
    if (!(_DWORD)v78)
      goto LABEL_75;
    v42 = bed_GetcElem(a9, &v87);
    if ((v42 & 0x80000000) == 0)
    {
      if (!v87)
      {
        log_OutText(*(_QWORD *)(a1 + 32), v79, 5, 0, (uint64_t)"[UTOI] deleting region, no replacement text found", v53, v54, v55, (uint64_t)v72);
        goto LABEL_75;
      }
      UTOISubTrace(v76, a1, a9, (uint64_t)"replacement string");
      if (*(_DWORD *)(a15 + 16) != 1)
      {
LABEL_75:
        v50 = utoin_IncrReplaceCurrentRegion(v75, v52, v51, v78, (uint64_t *)a15);
        if ((v50 & 0x80000000) == 0)
          UTOITrace(v76, v81, v75, v52, (uint64_t)"END of normalization");
        goto LABEL_77;
      }
      v42 = bed_GetpElem(a9, 0, &v86);
      if ((v42 & 0x80000000) == 0)
      {
        if (!v87)
        {
          v68 = 1;
          v63 = v73;
          goto LABEL_69;
        }
        v59 = 0;
        v60 = 0;
        v61 = 1;
        v62 = v86;
        v63 = v73;
        while (1)
        {
          if (*(_BYTE *)(v62 + v59) == 16)
          {
            v64 = *(unsigned __int16 *)(a15 + 8);
            if (v60 >= v64)
            {
LABEL_67:
              log_OutText(*(_QWORD *)(v81 + 32), v79, 5, 0, (uint64_t)"[UTOI] cant find non-deleted word to align new word number %d with", v56, v57, v58, v61);
              v68 = 0;
LABEL_69:
              if (v63 >= 5 && *(_WORD *)(a15 + 8))
              {
                v69 = 0;
                v70 = 0;
                do
                {
                  log_OutText(*(_QWORD *)(v81 + 32), v79, 5, 0, (uint64_t)"[UTOI] [%d] origWordPos=%d, newPos=%d, bDeleted=%d", v56, v57, v58, v70++);
                  v69 += 12;
                }
                while (v70 < *(unsigned __int16 *)(a15 + 8));
              }
              v52 = v74;
              v51 = a9;
              if (v68)
                *(_DWORD *)(a15 + 12) = 0;
              goto LABEL_75;
            }
            v65 = v60;
            v66 = (int *)(*(_QWORD *)a15 + 12 * v60 + 4);
            while (1)
            {
              v67 = *v66;
              v66 += 3;
              if (v67 != 1)
                break;
              if (v64 == ++v65)
                goto LABEL_67;
            }
            *(_WORD *)(*(_QWORD *)a15 + 12 * (unsigned __int16)v65 + 8) = v59;
            ++v61;
            v60 = (unsigned __int16)v65 + 1;
          }
          if (++v59 >= (unint64_t)v87)
          {
            v68 = 1;
            goto LABEL_69;
          }
        }
      }
    }
  }
LABEL_63:
  v50 = v42;
LABEL_77:
  if (HIWORD(v84))
    heap_Free(*(_QWORD **)(v41 + 8), v85);
  return v50;
}

uint64_t handleWordMatch(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, __int16 a5, unsigned __int16 *a6, _WORD *a7, uint64_t a8, char *__dst, uint64_t a10, int a11, _WORD *a12, uint64_t a13, uint64_t a14, unsigned __int16 a15, uint64_t a16, uint64_t a17, _WORD *a18, _WORD *a19)
{
  uint64_t HexArg;
  char v27;
  _WORD *v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  __int16 v36;
  unsigned __int16 v37;
  uint64_t v38;
  size_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unsigned __int16 v43;
  unsigned __int16 v44;
  unsigned __int16 v45;
  size_t v46;
  char *v47;
  unsigned __int16 v48;
  unsigned __int16 *p_n;
  uint64_t v50;
  unsigned __int16 v51;
  uint64_t v53;
  uint64_t v54;
  _WORD *v55;
  _WORD *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  char v62;
  unsigned __int16 __n;
  char __n_2[512];
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  HexArg = 2350915591;
  if (!a4 || !a6 || !a7 || !a8 || !__dst || !a10)
    return HexArg;
  v62 = 0;
  __n = 0;
  if ((__int16)*a7 == -1)
  {
    v27 = 0;
    HexArg = 0;
  }
  else
  {
    cstdlib_memmove(__dst, a6 + 2, a6[35]);
    *((_WORD *)__dst + 32) = a6[35];
    cstdlib_memmove(__dst + 66, a6 + 38, a6[167]);
    *((_WORD *)__dst + 289) = a6[167];
    __n = 512;
    cstdlib_memset(__n_2, 0, 0x200uLL);
    HexArg = o2t_Transcribe(a3, (_BYTE *)(a4 + (unsigned __int16)*a7), (unsigned __int16)(a5 - *a7), (_WORD *)a8, __dst, __n_2, &__n, &v62);
    if ((HexArg & 0x80000000) != 0)
      return HexArg;
    v27 = v62;
  }
  v29 = a18;
  v28 = a19;
  v30 = a16;
  v31 = a17;
  v32 = a15;
  v34 = a13;
  v33 = a14;
  v35 = a11;
  v36 = *(_WORD *)(a8 + 578);
  if (v36 && (v27 & 1) == 0)
  {
    if (a11)
    {
      v37 = cstdlib_strlen(szWORD_BEG_3);
      v38 = bed_Insert(a10, szWORD_BEG_3, v37);
      if ((v38 & 0x80000000) != 0)
        return v38;
      *a12 += cstdlib_strlen(szWORD_BEG_3);
      v36 = *(_WORD *)(a8 + 578);
    }
    v39 = (unsigned __int16)(v36 + 1);
    v40 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), v39);
    if (!v40)
      return 2350915594;
    v41 = v40;
    cstdlib_memset(v40, 0, v39);
    cstdlib_strncpy(v41, (const char *)(a8 + 66), *(unsigned __int16 *)(a8 + 578));
    v41[*(unsigned __int16 *)(a8 + 578)] = 0;
    v42 = bed_Insert(a10, v41, *(unsigned __int16 *)(a8 + 578));
    if ((v42 & 0x80000000) != 0)
    {
LABEL_42:
      HexArg = v42;
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v41);
      return HexArg;
    }
    *a12 += *(_WORD *)(a8 + 578);
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v41);
    if (a11)
    {
      v43 = cstdlib_strlen(szWORD_END_3);
      v38 = bed_Insert(a10, szWORD_END_3, v43);
      if ((v38 & 0x80000000) != 0)
        return v38;
      *a12 += cstdlib_strlen(szWORD_END_3);
    }
    v31 = a17;
    HexArg = getHexArg(a1, a2, *(unsigned __int16 *)(a8 + 64), a13, a15, a14, a16, a17, a18, a19);
    if ((HexArg & 0x80000000) != 0)
      return HexArg;
    v27 = v62;
    v30 = a16;
    v32 = a15;
    v28 = a19;
    v33 = a14;
    v34 = a13;
    v29 = a18;
    v35 = a11;
  }
  v44 = __n;
  if (__n && ((v27 & 2) == 0 || !*((_WORD *)__dst + 32)))
  {
    v54 = v34;
    v55 = v29;
    v56 = v28;
    v57 = v33;
    v58 = v32;
    v59 = v30;
    v53 = v31;
    v60 = v35;
    if (v35)
    {
      v45 = cstdlib_strlen(szWORD_BEG_3);
      v38 = bed_Insert(a10, szWORD_BEG_3, v45);
      if ((v38 & 0x80000000) != 0)
        return v38;
      *a12 += cstdlib_strlen(szWORD_BEG_3);
      v44 = __n;
    }
    v46 = (unsigned __int16)(v44 + 1);
    v47 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), v46);
    HexArg = 2350915594;
    if (!v47)
      return HexArg;
    v41 = v47;
    cstdlib_memset(v47, 0, v46);
    cstdlib_strncpy(v41, __n_2, __n);
    v41[__n] = 0;
    v42 = bed_Insert(a10, v41, __n);
    if ((v42 & 0x80000000) == 0)
    {
      *a12 += __n;
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v41);
      if (!v60)
      {
LABEL_34:
        HexArg = getHexArg(a1, a2, (unsigned __int16)(a5 - *a7), v54, v58, v57, v59, v53, v55, v56);
        if ((HexArg & 0x80000000) != 0)
          return HexArg;
        v27 = v62;
        goto LABEL_36;
      }
      v48 = cstdlib_strlen(szWORD_END_3);
      v38 = bed_Insert(a10, szWORD_END_3, v48);
      if ((v38 & 0x80000000) == 0)
      {
        *a12 += cstdlib_strlen(szWORD_END_3);
        goto LABEL_34;
      }
      return v38;
    }
    goto LABEL_42;
  }
LABEL_36:
  if ((v27 & 2) != 0)
  {
    v50 = (unsigned __int16)*a7;
    v51 = a5 - v50;
    cstdlib_memmove((void *)a8, (const void *)(a4 + v50), v51);
    cstdlib_memmove((void *)(a8 + v51), a6 + 2, a6[35]);
    *(_WORD *)(a8 + 64) = a6[35] + v51;
    cstdlib_memmove((void *)(a8 + 66), __n_2, __n);
    p_n = &__n;
  }
  else
  {
    cstdlib_memmove((void *)a8, a6 + 2, a6[35]);
    *(_WORD *)(a8 + 64) = a6[35];
    p_n = a6 + 167;
    cstdlib_memmove((void *)(a8 + 66), a6 + 38, a6[167]);
  }
  *(_WORD *)(a8 + 578) = *p_n;
  *a7 = -1;
  return HexArg;
}

uint64_t DoDctPlusRulesSpell(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v15;
  unsigned __int16 i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  char *v22;
  char *v23;
  unsigned __int16 v24;
  __int16 v25;
  _OWORD v29[21];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!a5)
    return 0;
  v15 = 0;
  for (i = 0; i < a5; v15 = i)
  {
    memset(v29, 0, sizeof(v29));
    v20 = wordm_sysdct_CharLookup_Thai(a3, (unsigned __int8 *)(a4 + i), (unsigned __int16)(a5 - i), (uint64_t)v29, 0x16u, a11, "normal");
    if ((v20 & 0x80000000) != 0)
      break;
    if ((LODWORD(v29[0]) - 2) > 3)
    {
      log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] (utoi position %d len %d not in dict", v17, v18, v19, v15);
    }
    else
    {
      v21 = (unsigned __int16)(cstdlib_strlen((const char *)&v29[4] + 12) + 3);
      v22 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), v21);
      if (!v22)
        return 2350915594;
      v23 = v22;
      cstdlib_memset(v22, 0, v21);
      if (i)
      {
        cstdlib_strcpy(v23, (const char *)&v29[4] + 12);
      }
      else
      {
        cstdlib_strcpy(v23, " ");
        cstdlib_strcat(v23, (const char *)&v29[4] + 12);
      }
      cstdlib_strcat(v23, " ");
      v24 = cstdlib_strlen(v23);
      v20 = bed_Insert(a6, v23, v24);
      if ((v20 & 0x80000000) != 0)
      {
        heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v23);
        return v20;
      }
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v23);
    }
    v25 = cstdlib_strlen((const char *)v29 + 4);
    if (v25)
      i += v25;
    else
      i = a5;
  }
  return v20;
}

uint64_t getHexArg(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, _WORD *a9, _WORD *a10)
{
  uint64_t v14;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned __int16 v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46[3];
  uint64_t v47;

  v47 = a6;
  if (a3)
  {
    v14 = a6;
    v18 = 2350915584;
    v19 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 2 * a3 + 2);
    if (v19)
    {
      v20 = v19;
      v44 = a4;
      v45 = a5;
      v21 = (unsigned __int16)*a9 + a3;
      if (LH_wcslen(a8) >= v21)
      {
        v23 = (unsigned __int16 *)(a8 + 2 * (unsigned __int16)*a9);
        v22 = a3;
        LH_wcsncpy(v20, v23, a3);
      }
      else
      {
        v22 = 0;
      }
      *(_WORD *)(v20 + 2 * v22) = 0;
      v24 = utf8_16BitNbrOfUtf8Chars(v20);
      v28 = v24 - 1;
      if (v24 == 1)
      {
        log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] converted utf8 word length is 0, cant get hex args", v25, v26, v27, v43);
        v37 = *(_QWORD **)(a1 + 8);
        v38 = v20;
LABEL_20:
        heap_Free(v37, v38);
        return v18;
      }
      v29 = (unsigned __int16)(v24 - 1);
      v30 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), 1, v29 + 1);
      if (v30)
      {
        v31 = v30;
        cstdlib_strncpy(v30, (const char *)(a7 + (unsigned __int16)*a10), v28);
        v31[v29] = 0;
        log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] get hex args from UTF16Word(%s,pos=%d) UTF8Word(%s,pos=%d)", v32, v33, v34, v20);
        v35 = *(unsigned __int16 *)(v14 + 16);
        v36 = v35 + 2 * v28 + 1;
        if (*(unsigned __int16 *)(v14 + 18) >= v36)
        {
          v18 = 0;
        }
        else
        {
          v18 = datac_RequestBlock(v44, v45, (unsigned __int16)(v35 + 2 * v28 + 1), &v47);
          if ((v18 & 0x80000000) != 0)
          {
LABEL_19:
            heap_Free(*(_QWORD **)(a1 + 8), v20);
            v37 = *(_QWORD **)(a1 + 8);
            v38 = (uint64_t)v31;
            goto LABEL_20;
          }
          v14 = v47;
          v35 = *(unsigned __int16 *)(v47 + 16);
        }
        v39 = 0;
        v40 = (_BYTE *)(*(_QWORD *)(v14 + 8) + *(unsigned __int16 *)(v14 + 2) * (unint64_t)v35);
        *(_WORD *)(v14 + 16) = v36;
        do
        {
          v41 = v40;
          LH_itoa(v31[v39], v46, 0x10u);
          v46[2] = 0;
          *v41 = v46[0];
          v40 = v41 + 2;
          v41[1] = v46[1];
          ++v39;
        }
        while (v29 != v39);
        *v40 = 0;
        *a9 += a3;
        *a10 += v28;
        goto LABEL_19;
      }
      heap_Free(*(_QWORD **)(a1 + 8), v20);
      return 2350915594;
    }
    else
    {
      return 2350915594;
    }
  }
  else
  {
    v18 = 2350915584;
    log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] that parser : word length is 0, cant get hex args", a6, a7, a8, v43);
  }
  return v18;
}

uint64_t xcode_Utf16leToWin874(uint64_t a1, _WORD *a2, unsigned int a3, uint64_t a4, _WORD *a5)
{
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;

  result = 2370838535;
  if (a2 && a4 && a5)
  {
    v6 = 0;
    if (a3)
    {
      v7 = a3;
      while (v6 < (unsigned __int16)*a5)
      {
        v8 = (unsigned __int16)*a2;
        if (v8 > 0xFF)
        {
          switch(*a2)
          {
            case 0x2013:
              LOBYTE(v8) = -106;
              break;
            case 0x2014:
              LOBYTE(v8) = -105;
              break;
            case 0x2015:
            case 0x2016:
            case 0x2017:
            case 0x201A:
            case 0x201B:
            case 0x201E:
            case 0x201F:
            case 0x2020:
            case 0x2021:
            case 0x2023:
            case 0x2024:
            case 0x2025:
              goto LABEL_15;
            case 0x2018:
              LOBYTE(v8) = -111;
              break;
            case 0x2019:
              LOBYTE(v8) = -110;
              break;
            case 0x201C:
              LOBYTE(v8) = -109;
              break;
            case 0x201D:
              LOBYTE(v8) = -108;
              break;
            case 0x2022:
              LOBYTE(v8) = -107;
              break;
            case 0x2026:
              LOBYTE(v8) = -123;
              break;
            default:
              if (v8 == 8364)
              {
                LOBYTE(v8) = 0x80;
                break;
              }
LABEL_15:
              v9 = 0;
              if ((~v8 & 0xE00) != 0 || v8 - 3585 > 0x5A)
                goto LABEL_9;
              LOBYTE(v8) = v8 - 96;
              break;
          }
        }
        *(_BYTE *)(a4 + v6) = v8;
        v9 = 1;
LABEL_9:
        v6 += v9;
        ++a2;
        if (!--v7)
          goto LABEL_25;
      }
      return 2370838537;
    }
    else
    {
LABEL_25:
      result = 0;
      *a5 = v6;
    }
  }
  return result;
}

uint64_t mDictFind(char *__s2)
{
  const char *v2;
  uint64_t v3;

  v2 = (const char *)&pMorp_Dct;
  v3 = 3677;
  while (cstdlib_strcmp(v2, __s2))
  {
    v2 += 11;
    if (!--v3)
      return 82;
  }
  return v2[10];
}

void *swapMRT(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  void *v5;
  void *v6;
  int __dst;

  __dst = 0;
  v4 = a1 + 89;
  v5 = (void *)(a1 + 89 + 4 * a2);
  cstdlib_memcpy(&__dst, v5, 4uLL);
  v6 = (void *)(v4 + 4 * a3);
  cstdlib_memcpy(v5, v6, 4uLL);
  return cstdlib_memcpy(v6, &__dst, 4uLL);
}

void *swapMST(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  void *v5;
  void *v6;
  _BYTE v8[71];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  memset(v8, 0, sizeof(v8));
  v4 = a1 + 346;
  v5 = (void *)(a1 + 346 + 71 * a2);
  cstdlib_memcpy(v8, v5, 0x47uLL);
  v6 = (void *)(v4 + 71 * a3);
  cstdlib_memcpy(v5, v6, 0x47uLL);
  return cstdlib_memcpy(v6, v8, 0x47uLL);
}

uint64_t o2t_ObjOpen(_WORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v10;

  v3 = 2370838535;
  v10 = 0;
  if (a3 && (InitRsrcFunction(a1, a2, &v10) & 0x80000000) == 0)
  {
    *a3 = 0;
    v7 = (_QWORD *)heap_Alloc(*(_QWORD *)(v10 + 8), 9440);
    if (v7)
    {
      v8 = v7;
      cstdlib_memset(v7, 0, 0x24E0uLL);
      v3 = 0;
      *v8 = a1;
      v8[1] = a2;
      v8[2] = v10;
      *a3 = v8;
    }
    else
    {
      return 2370838538;
    }
  }
  return v3;
}

uint64_t o2t_ObjClose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;

  v1 = 2370838535;
  v4 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v4) & 0x80000000) == 0)
  {
    heap_Free(*(_QWORD **)(v4 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t o2t_Transcribe(_BYTE *a1, _BYTE *a2, unsigned int a3, _WORD *a4, _WORD *a5, char *__dst, unsigned __int16 *a7, char *a8)
{
  uint64_t v8;
  unsigned __int16 v16;
  uint64_t v17;
  unsigned __int16 v18;
  int v19;
  char v20;
  size_t v21;
  char v22;
  char v23;
  size_t v24;
  size_t v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  char v28;
  unsigned __int16 v29;
  unsigned __int16 v31;
  unsigned __int16 v32;
  int v34;
  char v35;
  char __dsta[512];
  _BYTE v37[64];
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v8 = 2370838535;
  v35 = 0;
  if (!a1 || !a2 || (unsigned __int16)(a3 - 64) < 0xFFC1u)
    return v8;
  v16 = *a7;
  v34 = 0;
  __dsta[0] = 0;
  if (a3 < 2)
  {
    ReadThaiChar((char *)*a2, __dst);
    if (a4[32] || a5[32])
    {
      v31 = cstdlib_strlen(__dst);
      cstdlib_memcpy(__dsta, __dst, v31);
      __dsta[v31] = 0;
      goto LABEL_15;
    }
LABEL_46:
    v29 = cstdlib_strlen(__dst);
    v28 = 0;
    *a7 = v29;
    goto LABEL_48;
  }
  if (SParser(a1, a2, a3) != 255)
  {
    v17 = WParser((uint64_t)a1, __dst, a7, &v35, &v34);
    if ((v17 & 0x80000000) != 0)
      return v17;
    if (v34 != 255)
    {
      if (v35 && (a4[32] || a5[32]))
      {
        cstdlib_strcpy(__dsta, __dst);
        v31 = *a7;
LABEL_15:
        v18 = 0;
        v19 = a4[32] != 0;
        if (a5[32])
          v19 |= 2u;
        if (v19 == 3)
          v20 = 7;
        else
          v20 = v19;
        v32 = v16;
        while (1)
        {
          if ((v20 & 1) != 0)
          {
            v21 = (unsigned __int16)a4[32];
            if (v21 + a3 <= 0x3F)
              break;
          }
          if ((v20 & 2) != 0)
          {
            v24 = (unsigned __int16)a5[32];
            if (v24 + a3 <= 0x3F)
            {
              if (*a2 == 224 && *(unsigned __int8 *)a5 == 224)
              {
                cstdlib_memcpy(v37, a5, v24);
                v37[0] = -31;
                v18 = a5[32];
              }
              else
              {
                cstdlib_memcpy(v37, a2, a3);
                cstdlib_memcpy(&v37[a3], a5, (unsigned __int16)a5[32]);
                v18 = a5[32] + a3;
              }
              v22 = -3;
              v23 = 2;
              goto LABEL_34;
            }
          }
          if ((v20 & 4) != 0)
          {
            v25 = (unsigned __int16)a4[32];
            if (v25 + a3 + (unsigned __int16)a5[32] <= 0x3F)
            {
              cstdlib_memcpy(v37, a4, v25);
              cstdlib_memcpy(&v37[(unsigned __int16)a4[32]], a2, a3);
              v26 = a4[32] + a3;
              cstdlib_memcpy(&v37[v26], a5, (unsigned __int16)a5[32]);
              v18 = a5[32] + v26;
              v22 = -5;
              v23 = 3;
              goto LABEL_34;
            }
          }
LABEL_35:
          if (SParser(a1, v37, v18) == 255)
            return 2370838535;
          *a7 = v16;
          v17 = WParser((uint64_t)a1, __dst, a7, &v35, &v34);
          if ((v17 & 0x80000000) != 0)
            return v17;
          if (v34 == 255)
            return 2370838535;
          if (!v20 || !v35)
          {
            if (!v35)
              return 0;
            if (a3 == 1 && (*a2 + 32) <= 4u)
            {
              cstdlib_strcpy(__dst, __dsta);
              cstdlib_memcpy(&__dst[v31], a5 + 33, (unsigned __int16)a5[289]);
              v27 = a5[289] + v31;
              *a7 = v27;
              __dst[v27] = 0;
              v28 = 2;
            }
            else
            {
              cstdlib_strcpy(__dst, __dsta);
              v28 = 0;
              *a7 = v31;
            }
LABEL_48:
            v8 = 0;
            *a8 = v28;
            return v8;
          }
        }
        cstdlib_memcpy(v37, a4, v21);
        cstdlib_memcpy(&v37[(unsigned __int16)a4[32]], a2, a3);
        v18 = a4[32] + a3;
        v22 = -2;
        v23 = 1;
LABEL_34:
        v37[v18] = 0;
        *a8 = v23;
        v20 &= v22;
        v16 = v32;
        goto LABEL_35;
      }
      goto LABEL_46;
    }
  }
  return v8;
}

uint64_t SParser(_BYTE *a1, const void *a2, unsigned int a3)
{
  _BYTE *v6;
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  unsigned int v27;
  _BYTE *v28;
  unsigned __int8 v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  int v42;
  BOOL v43;
  int v44;
  int v45;
  uint64_t v46;
  int v48;
  int v50;
  unsigned __int8 v52;
  unsigned int v54;
  char *v56;
  unsigned __int8 *v57;
  int v58;
  int v59;
  unsigned __int8 *v60;
  int v61;
  int v62;
  unsigned __int8 *v63;
  int v64;
  int v65;
  unsigned __int8 *v66;
  int v67;
  int v68;
  char *v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  char *v74;
  int v75;
  int v76;
  unsigned __int8 *v77;
  int v78;
  int v79;
  unsigned __int8 *v80;
  int v81;
  int v82;
  unsigned __int8 *v83;
  int v84;
  int v85;
  char v86;
  unsigned int v88;
  int v89;
  char v91;
  unsigned __int8 v93;
  unint64_t v94;
  unsigned int v95;
  _BYTE *v96;
  char v97;
  char v98;
  unsigned __int8 *v99;
  uint64_t v100;
  _BYTE *v101;
  _BYTE *v102;
  int v103;
  unsigned __int8 *v104;
  char v105;
  char v106;
  _BYTE *v107;
  char *v108;
  _BYTE *v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  _BYTE *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  _BYTE *v118;
  unsigned __int8 *v119;
  _BYTE *v120;
  const char *v121;
  char v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  int v126;
  char v127;
  unint64_t v128;
  _BYTE *v129;
  int v130;
  int v131;
  uint64_t v132;
  _BYTE *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unsigned __int8 *v141;
  uint64_t v142;
  unsigned __int8 v143;
  int v144;
  _BYTE *v145;
  unsigned __int8 *v146;
  unsigned __int8 *v147;
  unsigned __int8 *v148;
  unint64_t v149;
  unsigned int v150;
  unsigned int v151;
  int v152;
  uint64_t v153;
  _BYTE *v154;
  uint64_t v155;
  _BYTE *v156;
  _BYTE *v157;
  unsigned int v158;
  _BYTE *v159;
  _BYTE *v160;
  char v161;
  uint64_t v162;
  unsigned __int8 v163;
  int v164;
  __int16 v165;
  uint64_t v166;
  int v167;
  int v168;
  char *v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  _BYTE *v176;
  uint64_t v177;
  unsigned __int8 v178;
  unsigned __int8 v179;
  _BYTE *v180;
  unsigned __int8 v181;
  _BYTE *v182;
  _BYTE *v183;
  int v184;
  __int16 v185;
  uint64_t v186;
  __int16 v187;
  __int16 v188;
  _BYTE *v189;
  __int16 v190;
  _BOOL4 v191;
  uint64_t v192;
  _BYTE *v193;
  __int16 v194;
  _BYTE *v195;
  int v196;
  int v197;
  _BYTE *v198;
  uint64_t v199;
  uint64_t v200;
  _BYTE *v201;
  uint64_t v202;
  uint64_t v203;
  _BYTE *v204;
  _BYTE *v205;
  int v206;
  _BYTE *v207;
  uint64_t v208;
  unsigned __int8 v209;
  _BYTE *v210;
  __int16 v211;
  uint64_t v212;
  __int16 v213;
  __int16 v214;
  __int16 v215;
  __int16 v216;
  int v217;
  unint64_t v218;
  unsigned __int8 v219;
  uint64_t v220;
  uint64_t v221;
  unsigned __int8 v222;
  uint64_t v223;
  _BYTE *v224;
  uint64_t v225;
  char v226;
  int v227;
  unsigned int v229;
  _BOOL4 v230;
  _BYTE *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t result;
  uint64_t v235;
  int v236;
  uint64_t v237;
  _BYTE *v238;
  char *v239;
  unsigned int v240;
  char v241;
  unsigned __int8 v242;
  int v243;
  unsigned __int8 *v244;
  int v245;
  _BYTE *v246;
  char v247;
  __int16 v248;
  unsigned int v249;
  __int16 v250;
  unsigned __int8 *v251;
  __int16 v252;
  _BOOL4 v253;
  _BOOL4 v254;
  char *__src;
  __int16 __srca;
  __int16 __srcb;
  char v258;
  __int16 v259;
  __int16 v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  _BYTE *v264;
  char *v265;
  unsigned __int8 *v266;
  _BYTE *v267;
  uint64_t v268;
  char *v269;
  _BYTE *v270;
  uint64_t v271;
  char *v272;
  __int16 v273;
  __int16 v274;
  uint64_t v275;
  __int128 v276;
  _BYTE *v277;
  char v278[31];
  char v279;
  char __dst[32];
  uint64_t v281;

  v281 = *MEMORY[0x24BDAC8D0];
  v251 = a1 + 89;
  cstdlib_memset(a1 + 89, 0, 0x100uLL);
  cstdlib_memset(a1 + 346, 0, 0x2380uLL);
  v6 = a1 + 24;
  cstdlib_memcpy(a1 + 24, a2, a3);
  v7 = 0;
  v8 = 0;
  a1[a3 + 24] = 0;
  v272 = a1 + 9434;
  a1[9434] = 0;
  a1[345] = 0;
  v9 = 0xFFFFFFFFLL;
  a1[88] = 0;
  v249 = a3;
  do
  {
    if ((v9 & 0x80000000) != 0)
    {
      v9 = 0;
      v11 = a1[88];
    }
    else
    {
      v10 = &a1[71 * v9++];
      v11 = v10[347];
      a1[88] = v11;
    }
    if (v11 >= a3)
      continue;
    if (v8)
    {
      v12 = v8;
      v13 = 78;
      v14 = v251;
      v15 = v251;
      do
      {
        v16 = *v15;
        v15 += 4;
        if (v16 == v11)
        {
          if (v14[1] == 1 && a1[71 * v14[3] + 349] == 69)
            a1[71 * (v9 - 1) + 349] = 78;
          v13 = 89;
        }
        v14 = v15;
        --v12;
      }
      while (v12);
      if (v13 != 78)
        continue;
    }
    v261 = v9;
    v17 = v11;
    __src = &v6[v11];
    if ((*__src + 95) >= 0x2Eu)
      v18 = csrulesc;
    else
      v18 = 0;
    if ((*__src + 95) >= 0x2Eu)
      v19 = csrulesv;
    else
      v19 = csrulesc;
    v268 = v19;
    if (v18 >= v19)
      goto LABEL_231;
    v258 = 0;
    LODWORD(v20) = 0;
    HIDWORD(v20) = v11;
    v263 = v20;
    do
    {
      v21 = (char *)&psrules + 61 * v18;
      v22 = v21 + 30;
      v23 = *v21;
      v24 = cstdlib_strchr(v21 + 30, 43);
      v26 = v11;
      v27 = v11;
      if (v23)
      {
        v28 = (char *)&psrules + 61 * v18 + 60;
        v29 = v23;
        *(_QWORD *)&v25 = v263;
        do
        {
          switch(v29)
          {
            case 'A':
              v30 = v6[BYTE4(v25)];
              if (v30 == 195)
                goto LABEL_136;
              goto LABEL_83;
            case 'B':
              v30 = v6[BYTE4(v25)];
              if (v30 == 199)
                goto LABEL_136;
              goto LABEL_83;
            case 'C':
              v37 = v6[BYTE4(v25)] - 161 > 0x29;
              v38 = 1 << (v6[BYTE4(v25)] + 95);
              v39 = 0x2802C50040BLL;
              goto LABEL_86;
            case 'D':
              v35 = v6[BYTE4(v25)];
              v40 = (v35 - 164) > 0x13;
              v41 = 1 << (v35 + 92);
              v42 = 655425;
              goto LABEL_101;
            case 'E':
              v30 = v6[BYTE4(v25)];
              if (v30 == 205)
                goto LABEL_136;
              goto LABEL_83;
            case 'F':
              v35 = v6[BYTE4(v25)];
              v40 = (v35 - 164) > 0x12;
              v41 = 1 << (v35 + 92);
              v42 = 425985;
              goto LABEL_101;
            case 'G':
              v37 = v6[BYTE4(v25)] - 170 > 0x23;
              v38 = 1 << (v6[BYTE4(v25)] + 86);
              v39 = 0x94840A001;
              goto LABEL_86;
            case 'H':
              v30 = v6[BYTE4(v25)];
              if (v30 == 203)
                goto LABEL_136;
LABEL_83:
              if ((v30 + 49) < 0xD2u)
                goto LABEL_136;
              goto LABEL_117;
            case 'J':
              if ((v6[BYTE4(v25)] + 49) < 0xD2u)
                goto LABEL_136;
              v33 = v6[BYTE4(v25)];
              if (v33 == 199 || v33 == 205)
                goto LABEL_136;
              goto LABEL_117;
            case 'K':
              v37 = v6[BYTE4(v25)] - 164 > 0x26;
              v38 = 1 << (v6[BYTE4(v25)] + 92);
              v39 = 0x4020000001;
              goto LABEL_86;
            case 'L':
              v34 = v6[BYTE4(v25)];
              if (v34 != 197 && v34 != 195)
                goto LABEL_136;
              goto LABEL_117;
            case 'M':
              v37 = v6[BYTE4(v25)] - 161 > 0x2A;
              v38 = 1 << (v6[BYTE4(v25)] + 95);
              v39 = 0x40681041401;
              goto LABEL_86;
            case 'N':
              v37 = v6[BYTE4(v25)] - 162 > 0x28;
              v38 = 1 << (v6[BYTE4(v25)] + 94);
              v39 = 0x1A8006F81C5;
LABEL_86:
              v46 = v38 & v39;
              if (!v37 && v46 != 0)
                goto LABEL_117;
              goto LABEL_136;
            case 'O':
              LOBYTE(v35) = v6[BYTE4(v25)];
              if ((v35 + 49) < 0xD2u)
                goto LABEL_136;
              if (v6[BYTE4(v25)] - 194 <= 5 && ((1 << (v35 + 62)) & 0x23) != 0)
                goto LABEL_136;
              goto LABEL_111;
            case 'P':
              v43 = v6[BYTE4(v25)] - 184 > 0x13;
              v44 = 1 << (v6[BYTE4(v25)] + 72);
              v45 = 796673;
              goto LABEL_94;
            case 'Q':
              v43 = v6[BYTE4(v25)] - 166 > 7;
              v44 = 1 << (v6[BYTE4(v25)] + 90);
              v45 = 145;
              goto LABEL_94;
            case 'R':
              v43 = v6[BYTE4(v25)] - 195 > 4;
              v44 = 1 << (v6[BYTE4(v25)] + 61);
              v45 = 21;
LABEL_94:
              v48 = v44 & v45;
              if (!v43 && v48 != 0)
                goto LABEL_117;
              goto LABEL_136;
            case 'S':
              v35 = v6[BYTE4(v25)];
              v40 = (v35 - 174) > 0x1B;
              v41 = 1 << (v35 + 82);
              v42 = 134217731;
LABEL_101:
              v50 = v41 & v42;
              if (!v40 && v50 != 0)
                goto LABEL_111;
              goto LABEL_136;
            case 'T':
              if ((v6[BYTE4(v25)] & 0xFC) == 0xE8)
                goto LABEL_117;
              if (*v28 == 78)
                v31 = -2;
              else
                v31 = -1;
              v32 = v25;
              if (*v28 == 78)
                v32 = v25 + 1;
              LODWORD(v25) = v32;
              break;
            case 'U':
              LOBYTE(v35) = v6[BYTE4(v25)];
              if ((v35 + 49) < 0xD2u || (v35 | 4) == 0xC7)
                goto LABEL_136;
              goto LABEL_111;
            case 'W':
              v35 = v6[BYTE4(v25)];
              if (v35 == 194)
                goto LABEL_136;
              goto LABEL_110;
            case 'X':
              if ((v6[BYTE4(v25)] + 95) > 0x2Du)
                goto LABEL_136;
              goto LABEL_117;
            case 'Y':
              LOBYTE(v35) = v6[BYTE4(v25)];
              if ((v35 + 95) > 0x2Du)
                goto LABEL_136;
              goto LABEL_111;
            case 'Z':
              v35 = v6[BYTE4(v25)];
              if (v35 == 199)
                goto LABEL_136;
LABEL_110:
              if ((v35 + 49) < 0xD2u)
                goto LABEL_136;
LABEL_111:
              *(int32x2_t *)&v25 = vadd_s32(*(int32x2_t *)&v25, (int32x2_t)0x100000001);
              v276 = v25;
              contable((char)v35, 1, v278);
              v25 = v276;
              if (v278[0] == 45)
                v31 = -1;
              else
                v31 = -2;
              break;
            case 'a':
              if (v6[BYTE4(v25)] != 209)
                goto LABEL_136;
              goto LABEL_117;
            case 'b':
              if (v6[BYTE4(v25)] != 212)
                goto LABEL_136;
              goto LABEL_117;
            case 'c':
              if (v6[BYTE4(v25)] != 213)
                goto LABEL_136;
              goto LABEL_117;
            case 'd':
              if (v6[BYTE4(v25)] != 214)
                goto LABEL_136;
              goto LABEL_117;
            case 'e':
              if (v6[BYTE4(v25)] != 215)
                goto LABEL_136;
              goto LABEL_117;
            case 'f':
              if (v6[BYTE4(v25)] != 216)
                goto LABEL_136;
              goto LABEL_117;
            case 'g':
              if (v6[BYTE4(v25)] != 217)
                goto LABEL_136;
              goto LABEL_117;
            case 'h':
              if (v6[BYTE4(v25)] != 211)
                goto LABEL_136;
              goto LABEL_117;
            case 'i':
              if (v6[BYTE4(v25)] != 231)
                goto LABEL_136;
              goto LABEL_117;
            case 'j':
              if (v6[BYTE4(v25)] != 236)
                goto LABEL_136;
              goto LABEL_117;
            default:
              if (v6[BYTE4(v25)] != v29)
                goto LABEL_136;
LABEL_117:
              *(int32x2_t *)&v25 = vadd_s32(*(int32x2_t *)&v25, (int32x2_t)0x100000001);
              v31 = -2;
              break;
          }
          if (v31 != -2)
            break;
          v29 = v21[v25];
        }
        while (v29);
        if (v31 != -2)
          goto LABEL_136;
        v27 = BYTE4(v25);
        v26 = BYTE4(v25);
      }
      v52 = v6[v26];
      if ((v52 & 0xFC) == 0xE8)
        goto LABEL_136;
      if (v52 - 208 <= 9 && v52 != 211)
        goto LABEL_136;
      v54 = v27 - v11;
      if (v52 == 236 || v54 == -1)
        goto LABEL_136;
      cstdlib_strncpy(__dst, __src, (int)v54);
      __dst[v54] = 0;
      if (!v24)
        goto LABEL_196;
      v56 = cstdlib_strchr(v24, 39);
      v57 = (unsigned __int8 *)&v279;
      if (v56)
      {
        while (1)
        {
          v59 = *++v57;
          v58 = v59;
          if (v59 == 88)
            break;
          if (!v58)
          {
            if (patt_check(v57, "X\xE4\x58X\xE2\x58X\xE0\x58X\xE1\x58\xE0\x58\x52") != 255)
              goto LABEL_192;
            break;
          }
        }
        v60 = (unsigned __int8 *)&v279;
        while (1)
        {
          v62 = *++v60;
          v61 = v62;
          if (v62 == 88)
            break;
          if (!v61)
          {
            if (patt_check(v60, "X\xE2\x58X\xE0\x58X\xE1\x58\xE0\x58\x52") != 255)
              goto LABEL_192;
            break;
          }
        }
        v63 = (unsigned __int8 *)&v279;
        while (1)
        {
          v65 = *++v63;
          v64 = v65;
          if (v65 == 88)
            break;
          if (!v64)
          {
            if (patt_check(v63, "X\xE0\x58X\xE1\x58\xE0\x58\x52") != 255)
              goto LABEL_192;
            break;
          }
        }
        v66 = (unsigned __int8 *)&v279;
        while (1)
        {
          v68 = *++v66;
          v67 = v68;
          if (v68 == 88)
            break;
          if (!v67)
          {
            if (patt_check(v66, "X\xE1\x58\xE0\x58\x52") != 255)
              goto LABEL_192;
            break;
          }
        }
        v69 = __dst;
        do
        {
          v71 = *v69++;
          v70 = v71;
        }
        while ((v71 + 49) < 0xD2u);
        v72 = *v69;
        switch(v72)
        {
          case 199:
            if (v70 == 164)
              goto LABEL_136;
            break;
          case 197:
            v88 = v70 - 161;
            v37 = v88 > 0x1D;
            v89 = (1 << v88) & 0x2C000001;
            if (!v37 && v89 != 0)
              goto LABEL_136;
            break;
          case 195:
            v73 = v70 - 161;
            if (v73 <= 0x29 && ((1 << v73) & 0x2802C500403) != 0)
              goto LABEL_136;
            break;
        }
LABEL_192:
        if (patt_check((unsigned __int8 *)__dst, "\xE0\x58\x52") == 1
          || patt_check((unsigned __int8 *)__dst, "\xE1\x58\x52") == 1
          || patt_check((unsigned __int8 *)__dst, "\xE2\x58\x52") == 1)
        {
          goto LABEL_136;
        }
LABEL_196:
        if (v23 == 33)
        {
          v91 = a1[88];
          if (!v91)
            goto LABEL_136;
          if (patt_check((unsigned __int8 *)__dst, "X\xEC\x58XX\xEC\xECPQS") != 1)
          {
            if (patt_check((unsigned __int8 *)__dst, "XX\xEC\xECPQS") == 1
              && v91 != 1
              && (v6[(v91 - 1)] + 49) < 0xD2u)
            {
              goto LABEL_136;
            }
            goto LABEL_213;
          }
          if (v91 == 1)
          {
            v93 = -1;
          }
          else
          {
            if (v6[(v91 - 1)] - 205 <= 7
              && ((1 << (v6[(v91 - 1)] + 51)) & 0xA1) != 0)
            {
              goto LABEL_213;
            }
            v93 = v91 - 2;
            if (v91 == 2)
              goto LABEL_136;
          }
          if (v6[v93] != 226)
            goto LABEL_136;
        }
LABEL_213:
        v94 = a1[345];
        if (v94 > 0x40)
          return 255;
        v95 = *v272;
        if (v95 > 0x80)
          return 255;
        if (v258)
        {
          v96 = &a1[4 * v94];
          v97 = v96[90] + 1;
          v98 = v96[91] + 1;
          v99 = a1 + 9434;
        }
        else
        {
          cstdlib_memset(&a1[4 * v94 + 89], 0, 4uLL);
          v94 = a1[345];
          v100 = (uint64_t)&a1[4 * v94 + 89];
          *(_BYTE *)v100 = a1[88];
          *(_WORD *)(v100 + 1) = 0;
          v99 = a1 + 9434;
          v95 = *v272;
          *(_BYTE *)(v100 + 3) = v95;
          v98 = 1;
          v97 = 1;
        }
        v101 = &a1[4 * v94];
        v101[90] = v97;
        v101[91] = v98;
        cstdlib_memset(&a1[71 * v95 + 346], 0, 0x47uLL);
        v102 = &a1[71 * *v99 + 346];
        *v102 = a1[88];
        v102[1] = v11 + v54;
        v102[2] = 32;
        v102[5] = v18;
        cstdlib_strcpy(v102 + 6, __dst);
        a1[71 * *v99 + 384] = 0;
        v103 = mDictFind(__dst);
        v104 = &a1[71 * *v99 + 346];
        v104[4] = v103;
        if (v104[1] == v249)
          v105 = 76;
        else
          v105 = 70;
        v104[3] = v105;
        if (v103 == 82 && cstdlib_strchr(v22, 33))
        {
          v106 = *v272;
          v107 = &a1[71 * *v272];
          v107[350] = 86;
          v107[416] = 0;
        }
        else
        {
          v108 = cstdlib_strchr(v22, 39);
          v106 = *v272;
          v109 = &a1[71 * *v272 + 416];
          if (v108)
            *v109 = 2;
          else
            *v109 = 1;
        }
        ++v258;
        *v272 = v106 + 1;
        goto LABEL_136;
      }
      v74 = __dst;
      do
      {
        v76 = *v74++;
        v75 = v76;
      }
      while ((v76 + 49) < 0xD2u);
      if (v75 != 187 || *v74 != 197)
      {
        v77 = (unsigned __int8 *)&v279;
        do
        {
          v79 = *++v77;
          v78 = v79;
          if (v79 == 224)
            goto LABEL_171;
        }
        while (v78);
        if (patt_check(v77, "\xE0\x43\x52") != 1)
        {
LABEL_171:
          v80 = (unsigned __int8 *)&v279;
          while (1)
          {
            v82 = *++v80;
            v81 = v82;
            if (v82 == 225)
              break;
            if (!v81)
            {
              if (patt_check(v80, "\xE1\x43\x52") == 1)
                goto LABEL_179;
              break;
            }
          }
          v83 = (unsigned __int8 *)&v279;
          while (1)
          {
            v85 = *++v83;
            v84 = v85;
            if (v85 == 226)
              goto LABEL_196;
            if (!v84)
            {
              if (patt_check(v83, "\xE2\x43\x52") != 1)
                goto LABEL_196;
              break;
            }
          }
        }
LABEL_179:
        v86 = cstdlib_strlen(__dst);
        if (__dst[(v86 - 1)] - 195 > 4
          || ((1 << (__dst[(v86 - 1)] + 61)) & 0x15) == 0)
        {
          goto LABEL_196;
        }
      }
LABEL_136:
      ++v18;
    }
    while (v18 != v268);
    v8 = a1[345];
    if (v258)
    {
      a1[345] = ++v8;
      v7 = *v272;
      a3 = v249;
      v9 = v261;
      continue;
    }
    LOBYTE(v7) = *v272;
    a3 = v249;
    v17 = v11;
LABEL_231:
    v110 = &a1[4 * v8];
    v110[89] = v11;
    *((_WORD *)v110 + 45) = 257;
    v110[92] = v7;
    LODWORD(v110) = v7;
    v111 = (uint64_t)&a1[71 * v7 + 346];
    *(_BYTE *)v111 = v11;
    *(_BYTE *)(v111 + 1) = v11 + 1;
    *(_WORD *)(v111 + 2) = 20000;
    *(_BYTE *)(v111 + 4) = 85;
    *(_BYTE *)(v111 + 6) = a1[v17 + 24];
    *(_BYTE *)(v111 + 7) = 0;
    *(_BYTE *)(v111 + 38) = 0;
    *(_BYTE *)(v111 + 70) = 1;
    a1[345] = ++v8;
    v7 = ((_DWORD)v110 + 1);
    *v272 = (_BYTE)v110 + 1;
    v112 = ((_BYTE)v110 + 1);
    *(_WORD *)&a1[71 * v112 + 278] = 21573;
    if ((v7 & 0x100) != 0)
    {
      v7 = 0;
      v9 = v261;
    }
    else
    {
      v113 = a1[88];
      v114 = a1 + 349;
      v9 = v261;
      do
      {
        if (*(v114 - 2) == v113 && *v114 != 69)
          *v114 = 78;
        v114 += 71;
        --v112;
      }
      while (v112);
    }
  }
  while ((int)v9 < v7);
  if ((_BYTE)v7)
  {
    v115 = 0;
    v116 = v7;
    v117 = v7;
    do
    {
      v118 = &a1[71 * v115];
      if (v118[350] == 86)
      {
        v119 = v118 + 346;
        if (v115 >= v117)
        {
          v123 = v116;
        }
        else
        {
          v120 = &a1[71 * v115];
          v121 = v120 + 352;
          v265 = v120 + 349;
          v269 = v120 + 347;
          v122 = 1;
          v123 = v116;
          v124 = v115;
LABEL_244:
          v125 = &a1[71 * v124 + 352];
          do
          {
            if (*(v125 - 5) == *v119)
            {
              cstdlib_strcpy(__dst, v125);
              cstdlib_strcat(__dst, v121);
              v126 = mDictFind(__dst);
              if (v126 != 82)
              {
                v127 = v126;
                cstdlib_strcat(v125, v121);
                v122 = 0;
                *(v125 - 5) = *v269;
                *(v125 - 3) = *v265;
                *(v125 - 2) = v127;
                ++v124;
                v116 = *v272;
                v123 = v116;
                v128 = v116;
                if (v124 < v116)
                  goto LABEL_244;
                goto LABEL_265;
              }
              v123 = *v272;
            }
            ++v124;
            v125 += 71;
          }
          while (v124 < v123);
          v117 = v123;
          v116 = v123;
          v128 = v123;
          if ((v122 & 1) == 0)
            goto LABEL_265;
        }
        v129 = &a1[71 * v115];
        v129[349] = 69;
        v130 = patt_check(v129 + 352, "X\xECPQS");
        v116 = v123;
        v128 = v117;
        if (v130 == 1)
        {
          cstdlib_strcpy(&a1[71 * v115 + 384], "!");
          v116 = *v272;
          v128 = v116;
        }
        v118[350] = 84;
        if ((_BYTE)v128)
        {
          v131 = *v119;
          v132 = v128;
          v133 = a1 + 349;
          do
          {
            if (*(v133 - 2) == v131 && *v133 != 69)
              *v133 = 78;
            v133 += 71;
            --v132;
          }
          while (v132);
        }
        else
        {
          v128 = 0;
        }
      }
      else
      {
        v128 = v117;
      }
LABEL_265:
      ++v115;
      v117 = v128;
    }
    while (v115 < v128);
    v8 = a1[345];
  }
  else
  {
    LOBYTE(v116) = 0;
  }
  if (v8 >= 2u)
  {
    v134 = 0;
    v135 = 1;
    v136 = 93;
    do
    {
      v137 = v134 + 1;
      if (v134 + 1 < (unint64_t)v8)
      {
        v138 = v136;
        v139 = v135;
        do
        {
          if (a1[4 * v134 + 89] > a1[v138])
          {
            swapMRT((uint64_t)a1, v134, v139);
            v8 = a1[345];
          }
          ++v139;
          v138 += 4;
        }
        while (v139 < v8);
      }
      ++v135;
      v136 += 4;
      ++v134;
    }
    while (v8 - 1 > v137);
    LOBYTE(v116) = *v272;
  }
  if (v116 >= 2u)
  {
    v140 = 0;
    v141 = a1 + 418;
    v142 = 1;
    v143 = v116;
    do
    {
      v144 = v140 + 1;
      if (v140 + 1 < (unint64_t)v143)
      {
        v145 = &a1[71 * v140];
        v146 = v145 + 346;
        v147 = v145 + 347;
        v148 = v141;
        v149 = v142;
        do
        {
          v150 = *v146;
          v151 = *(v148 - 1);
          if (v150 > v151 || v150 == v151 && *v147 < *v148)
          {
            swapMST((uint64_t)a1, v140, v149);
            LOBYTE(v116) = *v272;
          }
          ++v149;
          v148 += 71;
          v143 = v116;
        }
        while (v149 < v116);
      }
      ++v142;
      v141 += 71;
      ++v140;
    }
    while (v143 - 1 > v144);
    v8 = a1[345];
  }
  if (v8 >= 2u)
  {
    v152 = a1[92];
    v153 = v8 - 1;
    v154 = a1 + 96;
    do
    {
      v152 += *(v154 - 6);
      *v154 = v152;
      v154 += 4;
      --v153;
    }
    while (v153);
  }
  if (!v8)
    return 1;
  v155 = v8;
  v156 = a1 + 350;
  v264 = a1 + 348;
  while (2)
  {
    v157 = &a1[4 * --v155];
    v158 = v157[91];
    v277 = v157 + 91;
    if (v158 >= 2)
    {
      v159 = &a1[4 * v155];
      v161 = v159[90];
      v160 = v159 + 90;
      v162 = v160[2];
      v163 = v161 + v162;
      if (v162 >= (v161 + v162))
      {
        v168 = -1;
        v165 = -1;
        LOWORD(v167) = -1;
        v170 = -1;
      }
      else
      {
        v164 = -1;
        v165 = -1;
        v166 = v160[2];
        v167 = 0xFFFF;
        v168 = -1;
        v169 = &v156[71 * v166];
        v170 = -1;
        do
        {
          if (*(v169 - 2) != 89)
          {
            v171 = *(v169 - 1);
            if (v171 == 76)
              v172 = v166;
            else
              v172 = v168;
            if (v171 == 78)
            {
              v172 = v168;
              v173 = v166;
            }
            else
            {
              v173 = v164;
            }
            if (v171 == 70)
            {
              v170 = v166;
            }
            else
            {
              v168 = v172;
              v164 = v173;
            }
            v174 = *v169;
            if (v174 == 88)
              v175 = v166;
            else
              v175 = v167;
            if (v174 == 89)
              v165 = v166;
            else
              v167 = v175;
          }
          v169 += 71;
          ++v166;
        }
        while (v163 != v166);
        if ((v164 & 0x80000000) == 0 && ((v168 & 0x80000000) == 0 || (v170 & 0x80000000) == 0))
        {
          v176 = &v264[71 * v160[2]];
          v177 = v163 - v162;
          do
          {
            if (v176[1] == 78 && *v176 != 89)
            {
              *v277 = --v158;
              *v176 = 89;
            }
            v176 += 71;
            --v177;
          }
          while (v177);
        }
      }
      if (v168 < 0 && v170 < 0 && (v162 + 1) < v163)
      {
        v178 = a1[71 * v162 + 347];
        v179 = v162 + 1;
        v180 = &v264[71 * (v162 + 1)];
        v181 = v162;
        while (*(v180 - 1) > v178)
        {
          v182 = &a1[71 * v181];
          if (v182[348] != 89)
          {
            v183 = v182 + 348;
            v181 = v179;
            v178 = *(v180 - 1);
LABEL_333:
            *v277 = --v158;
            *v183 = 89;
            goto LABEL_334;
          }
          v181 = v179;
          v178 = *(v180 - 1);
LABEL_334:
          ++v179;
          v180 += 71;
          if (v163 == v179)
            goto LABEL_335;
        }
        v183 = v180;
        if (*v180 == 89)
          goto LABEL_334;
        goto LABEL_333;
      }
LABEL_335:
      if (v158 >= 2u)
      {
        if (v162 >= v163)
        {
          v191 = 0;
          v185 = -1;
          __srca = -1;
          v259 = -1;
          v273 = -1;
        }
        else
        {
          v184 = -1;
          v185 = -1;
          v186 = v162;
          v187 = -1;
          v188 = -1;
          v189 = &v156[71 * v162];
          v190 = -1;
          do
          {
            if (*(v189 - 2) != 89)
            {
              if (*(v189 - 1) == 76)
                v184 = v186;
              switch(*v189)
              {
                case 'P':
                  v188 = v186;
                  break;
                case 'Q':
                  v187 = v186;
                  break;
                case 'R':
                  v190 = v186;
                  break;
                case 'S':
                  v185 = v186;
                  break;
                case 'X':
                  LOWORD(v167) = v186;
                  break;
                case 'Y':
                  v165 = v186;
                  break;
                default:
                  break;
              }
            }
            v189 += 71;
            ++v186;
          }
          while (v163 != v186);
          v259 = v188;
          __srca = v187;
          v273 = v190;
          v191 = v184 >= 0;
          if ((v184 & 0x80000000) == 0 && (v167 & 0x8000) != 0 && v165 < 0)
          {
            v192 = v163 - v162;
            v193 = &v264[71 * v162];
            do
            {
              if (v193[1] != 76 && *v193 != 89)
              {
                *v277 = --v158;
                *v193 = 89;
              }
              v193 += 71;
              --v192;
            }
            while (v192);
            v191 = 1;
          }
        }
        v266 = v160 + 2;
        v270 = v160;
        v253 = v191;
        if ((v167 & 0x8000) != 0 && v165 < 0)
        {
LABEL_362:
          v194 = v273;
          if ((v167 & 0x8000) != 0)
            goto LABEL_363;
LABEL_375:
          if ((v259 & 0x8000) == 0 || (__srca & 0x8000) == 0 || (v194 & 0x8000) == 0 || (v185 & 0x8000) == 0)
          {
            if (v162 >= v163)
            {
              if (!v253)
                goto LABEL_432;
            }
            else
            {
              v274 = v194;
              v197 = 0;
              v198 = &v264[71 * v162];
              v199 = v163 - v162;
              v200 = v162;
              do
              {
                if ((a1[71 * v200 + 350] & 0xFE) == 0x58 && a1[71 * v200 + 348] != 89)
                {
                  if (a1[71 * v200 + 349] != 76
                    && findCfollow((uint64_t)a1, v200, 0x58u) == 255)
                  {
                    if ((v274 & 0x8000) == 0
                      && (findCfollow((uint64_t)a1, v200, 0x51u) != 255
                       || findCfollow((uint64_t)a1, v200, 0x53u) != 255
                       || findCfollow((uint64_t)a1, v200, 0x50u) != 255))
                    {
                      v203 = v163 - v162;
                      v204 = &v264[71 * v162];
                      do
                      {
                        if (v204[2] == 82)
                        {
                          if (*v204 != 89)
                          {
                            --*v277;
                            *v204 = 89;
                          }
                          v197 = 9;
                        }
                        v204 += 71;
                        --v203;
                      }
                      while (v203);
                    }
                  }
                  else
                  {
                    v201 = &v264[71 * v162];
                    v202 = v163 - v162;
                    do
                    {
                      if ((v201[2] & 0xFE) != 0x58)
                      {
                        if (*v201 != 89)
                        {
                          --*v277;
                          *v201 = 89;
                        }
                        v197 = 9;
                      }
                      v201 += 71;
                      --v202;
                    }
                    while (v202);
                  }
                }
                ++v200;
              }
              while (v200 != v163);
              if (v197 != 9 && (v274 & 0x8000) == 0)
              {
                v207 = &v264[71 * v162];
                do
                {
                  if (v207[2] == 82
                    && (allCfollow((uint64_t)a1, v162, 0x52u)
                     || allCfollow((uint64_t)a1, v162, 0x54u))
                    && *v207 != 89)
                  {
                    --*v277;
                    *v207 = 89;
                  }
                  LOBYTE(v162) = v162 + 1;
                  v207 += 71;
                }
                while (v163 != v162);
              }
              v156 = a1 + 350;
              if (v197 == 9)
                goto LABEL_433;
              if (v253)
              {
                do
                {
                  if (v198[1] != 76 && *v198 != 89)
                  {
                    --*v277;
                    *v198 = 89;
                  }
                  v198 += 71;
                  --v199;
                }
                while (v199);
                goto LABEL_433;
              }
LABEL_432:
              keepLongest((uint64_t)a1, v155);
            }
          }
        }
        else
        {
          if ((v167 & 0x8000) != 0)
          {
            if (v162 < v163 && (v165 & 0x8000) == 0)
            {
              v205 = &v156[71 * v162];
              v206 = v162;
              do
              {
                if (v206 != v165
                  && (*v205 & 0xFE) == 0x58
                  && *(v205 - 2) != 89
                  && compareXX((uint64_t)a1, v155, v206, v165))
                {
                  v165 = v206;
                }
                ++v206;
                v205 += 71;
              }
              while (v163 != v206);
              v156 = a1 + 350;
            }
            goto LABEL_362;
          }
          v194 = v273;
          if (v162 >= v163)
            goto LABEL_375;
          v195 = &v156[71 * v162];
          v196 = v162;
          do
          {
            if (v196 != (__int16)v167
              && (*v195 & 0xFE) == 0x58
              && *(v195 - 2) != 89
              && compareXX((uint64_t)a1, v155, v196, v167))
            {
              LOWORD(v167) = v196;
            }
            ++v196;
            v195 += 71;
          }
          while (v163 != v196);
          v156 = a1 + 350;
          if ((v167 & 0x8000) == 0)
            goto LABEL_375;
LABEL_363:
          if ((v165 & 0x8000) == 0)
            goto LABEL_375;
        }
LABEL_433:
        if (*v277 >= 2u)
        {
          v208 = *v266;
          v209 = *v270 + v208;
          if (v208 >= v209)
          {
            v211 = -1;
            v216 = -1;
            v215 = -1;
            __srcb = -1;
            v214 = -1;
            v213 = -1;
            v260 = -1;
          }
          else
          {
            v210 = &v156[71 * *v266];
            v211 = -1;
            v260 = -1;
            v212 = *v266;
            v213 = -1;
            v214 = -1;
            __srcb = -1;
            v215 = -1;
            v216 = -1;
            do
            {
              if (*(v210 - 2) != 89)
              {
                switch(*v210)
                {
                  case 'P':
                    __srcb = v212;
                    break;
                  case 'Q':
                    v214 = v212;
                    break;
                  case 'R':
                    v215 = v212;
                    break;
                  case 'S':
                    v213 = v212;
                    break;
                  case 'T':
                    v260 = v212;
                    break;
                  case 'X':
                    v211 = v212;
                    break;
                  case 'Y':
                    v216 = v212;
                    break;
                  default:
                    break;
                }
              }
              ++v212;
              v210 += 71;
            }
            while ((*v270 + v208) != v212);
          }
          v254 = (v211 & v216 & 0x8000u) != 0;
          if (((unsigned __int16)v211 & (unsigned __int16)v216 & 0x8000) != 0)
          {
            v248 = v214;
            v250 = v213;
            v252 = v215;
            v217 = *v277;
            v218 = 0;
            v267 = &v264[71 * *v266];
            v271 = 71 * v208 + 350;
            v262 = v155;
            v275 = v208;
            do
            {
              if (v208 >= v209)
              {
                LOBYTE(v221) = v208;
              }
              else
              {
                v219 = v208;
                v220 = v271;
                v221 = v208;
                while (1)
                {
                  if (a1[v220] != 82)
                  {
                    v222 = aX_5[v218 + 11];
                    if (findCfollow((uint64_t)a1, v221, v222) != 255)
                      break;
                  }
                  ++v221;
                  v220 += 71;
                  ++v219;
                  if (v209 == v221)
                  {
                    LOBYTE(v221) = v209;
                    goto LABEL_465;
                  }
                }
                v223 = v219;
                v224 = v267;
                v225 = v275;
                do
                {
                  if (v223 != v225
                    && (findCfollow((uint64_t)a1, v225, v222) == 255 || v224[2] == 82)
                    && *v224 != 89)
                  {
                    *v277 = --v217;
                    *v224 = 89;
                  }
                  ++v225;
                  v224 += 71;
                }
                while (v209 != v225);
                v155 = v262;
LABEL_465:
                v208 = v275;
              }
              v226 = v218 + 1;
              v227 = v221;
              if (v221 != v209)
                break;
            }
            while (v218++ < 3);
            v156 = a1 + 350;
            v213 = v250;
            v215 = v252;
            v214 = v248;
            if (v227 == v209 && v226 == 4)
              keepLongest((uint64_t)a1, v155);
          }
          if ((v260 & 0x8000) == 0)
          {
            v229 = *v277;
            if (v229 >= 2)
            {
              v230 = v254;
              if (__srcb >= 0)
                v230 = 0;
              if (v230 && v214 < 0 && v215 < 0 && v213 < 0)
              {
                keepLongest((uint64_t)a1, v155);
              }
              else if (v208 < v209)
              {
                v231 = &v264[71 * v208];
                v232 = v209 - v208;
                do
                {
                  if (v231[2] == 84 && *v231 != 89)
                  {
                    *v277 = --v229;
                    *v231 = 89;
                  }
                  v231 += 71;
                  --v232;
                }
                while (v232);
              }
            }
          }
        }
      }
    }
    if ((_BYTE)v155)
      continue;
    break;
  }
  v233 = a1[345];
  result = 1;
  if (!a1[345])
    return result;
  v235 = 0;
  v236 = 0;
  v237 = 0;
  while (2)
  {
    v238 = &a1[4 * v235];
    v239 = v238 + 91;
    if (v238[91] != 2)
      goto LABEL_506;
    v240 = v238[92];
    v241 = v238[90];
    v242 = v241 + v240;
    if (v240 >= (v241 + v240))
      goto LABEL_506;
    v243 = 0;
    v244 = &a1[71 * v240 + 347];
    while (2)
    {
      if (v244[1] == 89)
      {
LABEL_496:
        LOBYTE(v240) = v240 + 1;
        v244 += 71;
        if (v242 == v240)
          goto LABEL_506;
        continue;
      }
      break;
    }
    if (!v243)
    {
      v236 = v244[69];
      v237 = v240;
      v243 = *v244;
      goto LABEL_496;
    }
    if (v243 == *v244)
    {
      v245 = v244[69];
      if (v236 <= v245 || (v246 = &a1[71 * v237], v246[348] == 89))
      {
        v247 = 1;
      }
      else
      {
        v247 = 0;
        *v239 = 1;
        v246[348] = 89;
      }
      if (v236 < v245 && v244[1] != 89)
      {
        *v239 = v247;
        v244[1] = 89;
      }
    }
LABEL_506:
    if (++v235 != v233)
      continue;
    return 1;
  }
}

uint64_t WParser(uint64_t a1, char *a2, _WORD *a3, _BYTE *a4, int *a5)
{
  uint64_t v9;
  _BYTE *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  int v16;
  int v17;
  char v18;
  int v19;
  uint64_t result;
  int v21;
  unint64_t i;
  unint64_t v23;
  char v24;
  _BYTE *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned __int8 *v28;
  char v29;
  int v30;
  int v31;
  char v32;
  _QWORD *v33;
  int v34;
  char *v35;
  const char *v36;
  char *v37;
  size_t v38;
  int v39;
  __int16 v40;
  int *v41;

  *a4 = 0;
  *a2 = 0;
  v9 = *(unsigned __int8 *)(a1 + 345);
  if (*(_BYTE *)(a1 + 345))
  {
    v10 = (_BYTE *)(a1 + 90);
    do
    {
      *v10 = 0;
      v10 += 4;
      --v9;
    }
    while (v9);
  }
  v11 = *(unsigned __int8 *)(a1 + 90);
  if (v11 < *(unsigned __int8 *)(a1 + 91))
  {
    LOBYTE(v11) = v11 + 1;
    *(_BYTE *)(a1 + 90) = v11;
  }
  v12 = *(unsigned __int8 *)(a1 + 92);
  v13 = *(unsigned __int8 *)(a1 + 9434);
  if (v12 < v13)
  {
    v14 = (unsigned __int8 *)(a1 + 71 * *(unsigned __int8 *)(a1 + 92) + 348);
    v15 = 1;
    do
    {
      v16 = *v14;
      v14 += 71;
      if (v16 != 89)
      {
        if (v15 == v11)
          goto LABEL_13;
        ++v15;
      }
      LOBYTE(v12) = v12 + 1;
    }
    while (v13 != v12);
  }
  LOBYTE(v12) = -1;
LABEL_13:
  v17 = rule2phone(a1, v12);
  if (v17 < 0)
  {
    v41 = a5;
    v19 = 0;
  }
  else
  {
    v18 = v17;
    v19 = cstdlib_strlen((const char *)(a1 + 71 * v12 + 384));
    if ((unsigned __int16)*a3 < (unsigned __int16)v19)
    {
      result = 0;
      v21 = 255;
      goto LABEL_48;
    }
    v41 = a5;
    cstdlib_strcpy(a2, (const char *)(a1 + 71 * v12 + 384));
    *a4 = v18;
  }
  if (*(unsigned __int8 *)(a1 + 345) >= 2u)
  {
    for (i = 1; i < *(unsigned __int8 *)(a1 + 345); ++i)
    {
      v23 = a1 + 4 * i;
      if (*(unsigned __int8 *)(v23 + 89) == *(unsigned __int8 *)(a1 + 71 * v12 + 347))
      {
        v26 = *(unsigned __int8 *)(v23 + 90);
        v25 = (_BYTE *)(v23 + 90);
        v24 = v26;
        if (v26 < v25[1])
          *v25 = ++v24;
        v12 = *(unsigned __int8 *)(a1 + 4 * i + 92);
        v27 = *(unsigned __int8 *)(a1 + 9434);
        if (v12 < v27)
        {
          v28 = (unsigned __int8 *)(a1 + 348 + 71 * *(unsigned __int8 *)(a1 + 4 * i + 92));
          v29 = 1;
          do
          {
            v30 = *v28;
            v28 += 71;
            if (v30 != 89)
            {
              if (v29 == v24)
                goto LABEL_30;
              ++v29;
            }
            LOBYTE(v12) = v12 + 1;
          }
          while (v27 != v12);
        }
        LOBYTE(v12) = -1;
LABEL_30:
        v31 = rule2phone(a1, v12);
        if ((v31 & 0x80000000) == 0)
        {
          v32 = v31;
          v19 += cstdlib_strlen((const char *)(a1 + 71 * v12 + 384));
          if ((unsigned __int16)*a3 < (unsigned __int16)v19)
          {
            result = 0;
LABEL_46:
            v21 = 255;
            goto LABEL_47;
          }
          cstdlib_strcat(a2, (const char *)(a1 + 71 * v12 + 384));
          *a4 |= v32;
        }
      }
    }
  }
  v33 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
  v34 = cstdlib_strlen(a2);
  v35 = (char *)heap_Calloc(v33, 1, (v34 + 1));
  if (!v35)
  {
    result = 2370838538;
    goto LABEL_46;
  }
  v36 = v35;
  cstdlib_strcpy(v35, a2);
  v37 = (char *)v36;
  if (cstdlib_strlen(a2))
  {
    v38 = 0;
    v37 = (char *)v36;
    do
    {
      v39 = a2[v38];
      if (v39 != 39)
        *v37++ = v39;
      ++v38;
    }
    while (v38 < cstdlib_strlen(a2));
  }
  *v37 = 0;
  cstdlib_strcpy(a2, v36);
  heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v36);
  v40 = cstdlib_strlen(a2);
  result = 0;
  *a3 = v40;
  v21 = 1;
LABEL_47:
  a5 = v41;
LABEL_48:
  *a5 = v21;
  return result;
}

char *ReadThaiChar(char *result, char *__dst)
{
  uint64_t v2;
  const char *i;

  v2 = cchar_dct;
  if (cchar_dct)
  {
    for (i = (const char *)&unk_214F04DD9; *((unsigned __int8 *)i - 1) != (_DWORD)result; i += 51)
    {
      if (!--v2)
        return result;
    }
    return cstdlib_strcpy(__dst, i);
  }
  return result;
}

char *contable(int a1, int a2, char *__dst)
{
  char **v3;
  const char *v4;

  if ((a1 + 95) > 0x2D)
  {
    v4 = "";
  }
  else
  {
    v3 = off_24D28A250;
    if (!a2)
      v3 = off_24D28A0E0;
    v4 = v3[(char)(a1 + 95)];
  }
  return cstdlib_strcpy(__dst, v4);
}

uint64_t patt_check(unsigned __int8 *a1, _BYTE *a2)
{
  unsigned __int8 v2;
  int v3;
  int v4;
  unsigned __int8 v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;

  v2 = *a1;
  if (*a1)
  {
    while (1)
    {
      v3 = (char)*a2;
      if (!*a2)
        return -1;
      if (v3 <= 83)
        break;
      if (v3 != 84)
      {
        if (v3 == 88)
        {
          if ((v2 + 95) >= 0x2Eu)
            return -1;
          goto LABEL_18;
        }
LABEL_17:
        if (*a2 != v2)
          return -1;
        goto LABEL_18;
      }
      v9 = (v2 & 0xFC) == 232;
LABEL_19:
      a1 += v9;
      ++a2;
      v2 = *a1;
      if (!*a1)
        goto LABEL_20;
    }
    if (v3 == 67)
    {
      v7 = v2;
      v5 = -1;
      v8 = v7 - 161;
      if (v8 > 0x29 || ((1 << v8) & 0x2802C50040BLL) == 0)
        return v5;
    }
    else
    {
      if (v3 != 82)
        goto LABEL_17;
      v4 = v2;
      v5 = -1;
      v6 = v4 - 195;
      if (v6 > 4 || ((1 << v6) & 0x15) == 0)
        return v5;
    }
LABEL_18:
    v9 = 1;
    goto LABEL_19;
  }
LABEL_20:
  if (*a2)
    return -1;
  else
    return 1;
}

uint64_t compareXX(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v8 = allCfollow(a1, a3, 0x52u);
  result = allCfollow(a1, a4, 0x52u);
  if (!v8 && (_DWORD)result)
    goto LABEL_3;
  if (!v8)
  {
    v12 = allNfollow(a1, a3);
    result = allNfollow(a1, a4);
    if (!v12 && (_DWORD)result)
    {
LABEL_3:
      v10 = a1 + 71 * a4;
LABEL_4:
      v11 = *(unsigned __int8 *)(v10 + 348);
      result = 1;
      goto LABEL_10;
    }
    if (!v12)
      return 0;
  }
  if ((_DWORD)result)
  {
    if (*(unsigned __int8 *)(a1 + 346 + 71 * a3 + 1) >= *(unsigned __int8 *)(a1 + 346 + 71 * a4 + 1))
    {
      v10 = a1 + 71 * a4;
      goto LABEL_4;
    }
    result = 0;
  }
  v10 = a1 + 71 * a3;
  v11 = *(unsigned __int8 *)(v10 + 348);
LABEL_10:
  if (v11 != 89)
  {
    --*(_BYTE *)(a1 + 4 * a2 + 91);
    *(_BYTE *)(v10 + 348) = 89;
  }
  return result;
}

uint64_t findCfollow(uint64_t a1, unsigned int a2, unsigned __int8 a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned __int8 v6;
  unsigned __int8 *v7;
  int v8;

  if (*(_BYTE *)(a1 + 71 * a2 + 348) != 89 && *(_BYTE *)(a1 + 345))
  {
    v3 = 0;
    do
    {
      v4 = (unsigned __int8 *)(a1 + 4 * v3);
      if (v4[89] == *(unsigned __int8 *)(a1 + 71 * a2 + 347))
      {
        v5 = v4[92];
        v6 = v4[90] + v5;
        if (v5 < v6)
        {
          v7 = (unsigned __int8 *)(a1 + 350 + 71 * v5);
          do
          {
            v8 = *v7;
            if (a3 == 88)
            {
              if ((v8 & 0xFE) == 0x58 && *(v7 - 1) != 78 && *(v7 - 2) != 89)
                return v5;
            }
            else if (v8 == a3 && *(v7 - 2) != 89 && *(v7 - 1) != 78)
            {
              return v5;
            }
            LOBYTE(v5) = v5 + 1;
            v7 += 71;
          }
          while (v6 != v5);
        }
      }
      ++v3;
    }
    while (v3 != *(unsigned __int8 *)(a1 + 345));
  }
  LOBYTE(v5) = -1;
  return v5;
}

uint64_t allCfollow(uint64_t a1, unsigned int a2, unsigned __int8 a3)
{
  uint64_t v3;
  unsigned __int8 *i;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  int v12;
  BOOL v13;

  v3 = *(unsigned __int8 *)(a1 + 345);
  if (!*(_BYTE *)(a1 + 345))
    return 0;
  for (i = (unsigned __int8 *)(a1 + 92); *(i - 3) != *(unsigned __int8 *)(a1 + 71 * a2 + 347); i += 4)
  {
    if (!--v3)
      return 0;
  }
  v6 = *i;
  v7 = *(i - 2);
  if (v6 < (v7 + v6))
  {
    v8 = a1 + 71 * *i + 350;
    v9 = v6 + 1;
    v10 = (v7 + v6);
    v11 = (char *)v8;
    while (1)
    {
      v12 = *v11;
      v11 += 71;
      if (v12 != a3 && *(_BYTE *)(v8 - 2) != 89)
        break;
      v13 = v10 == v9++;
      v8 = (uint64_t)v11;
      if (v13)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t keepLongest(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 *v6;
  int v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 *v10;
  _BYTE *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  v2 = result + 4 * a2;
  v3 = *(unsigned __int8 *)(v2 + 92);
  v4 = *(_BYTE *)(v2 + 90) + v3;
  v5 = v3;
  if (v3 < v4)
  {
    v6 = (unsigned __int8 *)(result + 71 * v3 + 348);
    while (1)
    {
      v7 = *v6;
      v6 += 71;
      if (v7 != 89)
        break;
      LOBYTE(v3) = v3 + 1;
      if (v4 == v3)
      {
        v5 = v4;
        goto LABEL_7;
      }
    }
    v5 = v3;
  }
LABEL_7:
  if ((v5 + 1) < v4)
  {
    v8 = *(unsigned __int8 *)(result + 71 * v5 + 347);
    v9 = v5 + 1;
    v10 = (unsigned __int8 *)(result + 71 * (v5 + 1) + 347);
    do
    {
      v11 = v10 + 1;
      if (v10[1] != 89)
      {
        v12 = *v10;
        if (v12 >= v8)
        {
          if (v12 == v8)
          {
            if (v10[69] < *(unsigned __int8 *)(result + 71 * v5 + 416))
            {
              v13 = result + 71 * v5;
              if (*(_BYTE *)(v13 + 348) == 89)
              {
                v5 = v9;
                goto LABEL_12;
              }
              v11 = (_BYTE *)(v13 + 348);
              v5 = v9;
            }
          }
          else
          {
            v14 = result + 71 * v5;
            if (*(_BYTE *)(v14 + 348) == 89)
            {
              v5 = v9;
              v8 = *v10;
              goto LABEL_12;
            }
            v11 = (_BYTE *)(v14 + 348);
            v5 = v9;
            v8 = *v10;
          }
        }
        --*(_BYTE *)(result + 4 * a2 + 91);
        *v11 = 89;
      }
LABEL_12:
      ++v9;
      v10 += 71;
    }
    while (v4 != v9);
  }
  return result;
}

uint64_t allNfollow(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unsigned __int8 *i;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  BOOL v11;

  v2 = *(unsigned __int8 *)(a1 + 345);
  if (!*(_BYTE *)(a1 + 345))
    return 0;
  for (i = (unsigned __int8 *)(a1 + 92); *(i - 3) != *(unsigned __int8 *)(a1 + 71 * a2 + 347); i += 4)
  {
    if (!--v2)
      return 0;
  }
  v5 = *i;
  v6 = *(i - 2) + v5;
  if (v5 < v6)
  {
    v7 = a1 + 71 * v5 + 349;
    v8 = v5 + 1;
    v9 = (unsigned __int8 *)v7;
    while (1)
    {
      v10 = *v9;
      v9 += 71;
      if (v10 != 78 && *(_BYTE *)(v7 - 1) != 89)
        break;
      v11 = v6 == v8++;
      v7 = (uint64_t)v9;
      if (v11)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t rule2phone(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int v9;
  uint64_t v10;
  int8x8_t v11;
  int8x8_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 *v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  int v24;
  int v25;
  int v27;
  int v29;
  char v30;
  int v31;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  char v39;
  int v41;
  int v43;
  int v45;
  unsigned __int8 v47;
  int v48;
  char v49;
  char v50;
  int v51;
  int32x2_t v52;
  int v53;
  int v54;
  size_t v55;
  size_t v56;
  uint64_t j;
  const char *v58;
  uint64_t v59;
  char v60;
  char *v61;
  unsigned __int8 *v62;
  char v63;
  char v64;
  unsigned __int8 v65;
  const char *v66;
  int v67;
  int v68;
  char *v69;
  char *v70;
  char *v71;
  char *i;
  int v73;
  char *v75;
  unsigned int v76;
  int v77;
  char *v79;
  char *v80;
  char *v81;
  size_t v82;
  char *v83;
  char *v84;
  char v85;
  unsigned __int8 v86;
  int v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  char *v95;
  char *v96;
  char *v97;
  unsigned int v98;
  char *v99;
  int v100;
  char *v101;
  char *v102;
  char *v103;
  const char *v104;
  size_t v105;
  char *v106;
  int v107;
  const char *v108;
  unsigned int v109;
  const char *v110;
  char *v111;
  char *v112;
  char *v113;
  const char *v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  int v119;
  int v120;
  BOOL v121;
  BOOL v122;
  char v123;
  __int128 v124;
  char v125;
  char v126;
  _BYTE v127[5];
  _BYTE v128[5];
  char __s2[5];
  unsigned __int8 v130;
  char v131[32];
  char __dst[32];
  char __s1[20];
  uint64_t v134;

  v134 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 71 * a2 + 348) == 89)
    return 0xFFFFFFFFLL;
  v5 = a1 + 71 * a2;
  if (*(_BYTE *)(v5 + 384))
  {
    if (*(_BYTE *)(v5 + 384) == 33)
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
  v6 = a1 + 71 * a2;
  if (!*(_BYTE *)(v6 + 352))
    return 4294967294;
  v7 = (char *)(v5 + 384);
  v8 = (char *)(v6 + 352);
  v9 = *(unsigned __int8 *)(a1 + 71 * a2 + 350);
  if (v9 != 84)
  {
    result = 0;
    if (v9 == 85 || *(_BYTE *)(a1 + 71 * a2 + 349) == 69)
      return result;
    v10 = a1 + 71 * a2;
    cstdlib_strcpy(__dst, &psrules[61 * *(unsigned __int8 *)(v10 + 351) + 30]);
    v13 = *(unsigned __int8 *)(v10 + 351);
    v14 = psrules[61 * v13];
    if (v14)
    {
      v15 = (unsigned __int8 *)(v10 + 351);
      v16 = 0uLL;
      do
      {
        switch(v14)
        {
          case 'A':
            v17 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if (v17 != 195 && (v17 + 49) >= 0xD2u)
            {
              *(int32x2_t *)&v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
              v124 = v16;
              contable((char)v17, 0, v131);
              v18 = 65;
              goto LABEL_112;
            }
            break;
          case 'B':
            v19 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if (v19 != 199 && (v19 + 49) >= 0xD2u)
            {
              *(int32x2_t *)&v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
              v124 = v16;
              contable((char)v19, 0, v131);
              v18 = 66;
              goto LABEL_112;
            }
            break;
          case 'C':
            v20 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            v21 = (v20 - 161) > 0x29 || ((1 << (v20 + 95)) & 0x2802C50040BLL) == 0;
            if (!v21)
            {
              *(int32x2_t *)&v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
              v124 = v16;
              contable((char)v20, 0, v131);
              v18 = 67;
              goto LABEL_112;
            }
            break;
          case 'D':
            v22 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if ((v22 - 164) <= 0x13 && ((1 << (v22 + 92)) & 0xA0041) != 0)
            {
              *(int32x2_t *)&v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
              v124 = v16;
              contable((char)v22, 1, v131);
              v18 = 68;
              goto LABEL_112;
            }
            break;
          case 'E':
            v24 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if (v24 != 205 && (v24 + 49) >= 0xD2u)
            {
              *(int32x2_t *)&v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
              v124 = v16;
              contable((char)v24, 0, v131);
              v18 = 69;
              goto LABEL_112;
            }
            break;
          case 'F':
            v25 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if ((v25 - 164) <= 0x12 && ((1 << (v25 + 92)) & 0x68001) != 0)
            {
              *(int32x2_t *)&v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
              v124 = v16;
              contable((char)v25, 1, v131);
              v18 = 70;
              goto LABEL_112;
            }
            break;
          case 'G':
            v27 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if ((v27 - 170) <= 0x23 && ((1 << (v27 + 86)) & 0x94840A001) != 0)
            {
              *(int32x2_t *)&v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
              v124 = v16;
              contable((char)v27, 0, v131);
              v18 = 71;
              goto LABEL_112;
            }
            break;
          case 'H':
            v29 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if (v29 != 203 && (v29 + 49) >= 0xD2u)
            {
              *(int32x2_t *)&v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
              v124 = v16;
              contable((char)v29, 0, v131);
              v18 = 72;
              goto LABEL_112;
            }
            break;
          case 'J':
            v30 = *(_BYTE *)(a1 + 71 * a2 + v16 + 352);
            if ((v30 + 49) >= 0xD2u
              && *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352) != 199
              && *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352) != 205)
            {
              *(int32x2_t *)&v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
              v124 = v16;
              contable(v30, 0, v131);
              v18 = 74;
              goto LABEL_112;
            }
            break;
          case 'K':
            v31 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if ((v31 - 164) <= 0x26 && ((1 << (v31 + 92)) & 0x4020000001) != 0)
            {
              *(int32x2_t *)&v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
              v124 = v16;
              contable((char)v31, 0, v131);
              v18 = 75;
              goto LABEL_112;
            }
            break;
          case 'L':
            v33 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if (v33 == 197 || v33 == 195)
            {
              *(int32x2_t *)&v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
              v124 = v16;
              contable((char)v33, 0, v131);
              v18 = 76;
              goto LABEL_112;
            }
            break;
          case 'M':
            v34 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352) - 161 > 0x2A;
            v35 = 1 << (*(_BYTE *)(a1 + 71 * a2 + v16 + 352) + 95);
            v36 = 0x40681041401;
            goto LABEL_66;
          case 'N':
            v34 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352) - 162 > 0x28;
            v35 = 1 << (*(_BYTE *)(a1 + 71 * a2 + v16 + 352) + 94);
            v36 = 0x1A8006F81C5;
LABEL_66:
            v37 = v35 & v36;
            v38 = v34 || v37 == 0;
            goto LABEL_79;
          case 'O':
            v39 = *(_BYTE *)(a1 + 71 * a2 + v16 + 352);
            if ((v39 + 49) < 0xD2u)
              break;
            if (*(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352) - 194 <= 5
              && ((1 << (v39 + 62)) & 0x23) != 0)
            {
              break;
            }
            *(int32x2_t *)&v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
            v124 = v16;
            contable(v39, 1, v131);
            v18 = 79;
            goto LABEL_112;
          case 'P':
            v38 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352) - 184 > 0x13
               || ((1 << (*(_BYTE *)(a1 + 71 * a2 + v16 + 352) + 72)) & 0xC2801) == 0;
LABEL_79:
            v11 = (int8x8_t)vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
            if (!v38)
              *(double *)&v16 = *(double *)&v11;
            break;
          case 'Q':
            v41 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if ((v41 - 166) > 7 || ((1 << (v41 + 90)) & 0x91) == 0)
              break;
            *(int32x2_t *)&v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
            v124 = v16;
            contable((char)v41, 0, v131);
            v18 = 81;
            goto LABEL_112;
          case 'R':
            v43 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if ((v43 - 195) > 4 || ((1 << (v43 + 61)) & 0x15) == 0)
              break;
            *(int32x2_t *)&v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
            v124 = v16;
            contable((char)v43, 0, v131);
            v18 = 82;
            goto LABEL_112;
          case 'S':
            v45 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if ((v45 - 174) > 0x1B || ((1 << (v45 + 82)) & 0x8000003) == 0)
              break;
            *(int32x2_t *)&v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
            v124 = v16;
            contable((char)v45, 1, v131);
            v18 = 83;
            goto LABEL_112;
          case 'T':
            if ((*(_BYTE *)(a1 + 71 * a2 + v16 + 352) & 0xFC) == 0xE8)
            {
              v11 = (int8x8_t)0x100000001;
              *(int32x2_t *)&v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
            }
            else
            {
              v21 = psrules[61 * v13 + 60] == 78;
              v54 = DWORD1(v16);
              if (v21)
                v54 = DWORD1(v16) + 1;
              DWORD1(v16) = v54;
            }
            break;
          case 'U':
            v47 = *(_BYTE *)(a1 + 71 * a2 + v16 + 352);
            if ((v47 + 49) < 0xD2u || (v47 | 4) == 0xC7)
              break;
            *(int32x2_t *)&v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
            v124 = v16;
            contable((char)v47, 1, v131);
            v18 = 85;
            goto LABEL_112;
          case 'W':
            v48 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if (v48 == 194 || (v48 + 49) < 0xD2u)
              break;
            *(int32x2_t *)&v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
            v124 = v16;
            contable((char)v48, 1, v131);
            v18 = 87;
            goto LABEL_112;
          case 'X':
            v49 = *(_BYTE *)(a1 + 71 * a2 + v16 + 352);
            if ((v49 + 95) > 0x2Du)
              break;
            *(int32x2_t *)&v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
            v124 = v16;
            contable(v49, 0, v131);
            v18 = 88;
            goto LABEL_112;
          case 'Y':
            v50 = *(_BYTE *)(a1 + 71 * a2 + v16 + 352);
            if ((v50 + 95) > 0x2Du)
              break;
            *(int32x2_t *)&v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
            v124 = v16;
            contable(v50, 1, v131);
            v18 = 89;
            goto LABEL_112;
          case 'Z':
            v51 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if (v51 == 199 || (v51 + 49) < 0xD2u)
              break;
            *(int32x2_t *)&v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
            v124 = v16;
            contable((char)v51, 1, v131);
            v18 = 90;
LABEL_112:
            replace((char *)v18, v131, __dst);
            v16 = v124;
            break;
          case 'a':
            v11.i8[0] = *(_BYTE *)(a1 + 71 * a2 + v16 + 352);
            v52 = (int32x2_t)vand_s8(v11, (int8x8_t)0xFF000000FFLL);
            v53 = 209;
            goto LABEL_123;
          case 'b':
            v11.i8[0] = *(_BYTE *)(a1 + 71 * a2 + v16 + 352);
            v52 = (int32x2_t)vand_s8(v11, (int8x8_t)0xFF000000FFLL);
            v53 = 212;
            goto LABEL_123;
          case 'c':
            v11.i8[0] = *(_BYTE *)(a1 + 71 * a2 + v16 + 352);
            v52 = (int32x2_t)vand_s8(v11, (int8x8_t)0xFF000000FFLL);
            v53 = 213;
            goto LABEL_123;
          case 'd':
            v11.i8[0] = *(_BYTE *)(a1 + 71 * a2 + v16 + 352);
            v52 = (int32x2_t)vand_s8(v11, (int8x8_t)0xFF000000FFLL);
            v53 = 214;
            goto LABEL_123;
          case 'e':
            v11.i8[0] = *(_BYTE *)(a1 + 71 * a2 + v16 + 352);
            v52 = (int32x2_t)vand_s8(v11, (int8x8_t)0xFF000000FFLL);
            v53 = 215;
            goto LABEL_123;
          case 'f':
            v11.i8[0] = *(_BYTE *)(a1 + 71 * a2 + v16 + 352);
            v52 = (int32x2_t)vand_s8(v11, (int8x8_t)0xFF000000FFLL);
            v53 = 216;
            goto LABEL_123;
          case 'g':
            v11.i8[0] = *(_BYTE *)(a1 + 71 * a2 + v16 + 352);
            v52 = (int32x2_t)vand_s8(v11, (int8x8_t)0xFF000000FFLL);
            v53 = 217;
            goto LABEL_123;
          case 'h':
            v11.i8[0] = *(_BYTE *)(a1 + 71 * a2 + v16 + 352);
            v52 = (int32x2_t)vand_s8(v11, (int8x8_t)0xFF000000FFLL);
            v53 = 211;
            goto LABEL_123;
          case 'i':
            v11.i8[0] = *(_BYTE *)(a1 + 71 * a2 + v16 + 352);
            v52 = (int32x2_t)vand_s8(v11, (int8x8_t)0xFF000000FFLL);
            v53 = 231;
            goto LABEL_123;
          case 'j':
            v11.i8[0] = *(_BYTE *)(a1 + 71 * a2 + v16 + 352);
            v52 = (int32x2_t)vand_s8(v11, (int8x8_t)0xFF000000FFLL);
            v53 = 236;
LABEL_123:
            v12.i32[0] = v53;
            v11 = (int8x8_t)vdup_lane_s32(vceq_s32(v52, (int32x2_t)vand_s8(v12, (int8x8_t)0xFF000000FFLL)), 0);
            *(int8x8_t *)&v16 = vbsl_s8(v11, (int8x8_t)vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001), *(int8x8_t *)&v16);
            break;
          default:
            if (*(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352) != v14)
              return 0xFFFFFFFFLL;
            *(int32x2_t *)&v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
            break;
        }
        v13 = *v15;
        v14 = psrules[61 * v13 + BYTE4(v16)];
      }
      while (v14);
    }
    v130 = 0;
    if (__dst[0] == 33)
      goto LABEL_141;
    v61 = __dst;
    if (cstdlib_strchr(__dst, 39))
    {
      if (cstdlib_strchr(v8, 234) || cstdlib_strchr(v8, 235))
        goto LABEL_223;
      v62 = (unsigned __int8 *)v8;
      do
      {
        v64 = *v62++;
        v63 = v64;
      }
      while ((v64 + 49) < 0xD2u);
      v65 = v63 + 95;
      if (v65 > 0x2Cu)
      {
        v67 = 76;
        v66 = "3";
      }
      else
      {
        v66 = off_24D28A3C0[(char)v65];
        v67 = byte_214F0FDF6[(char)v65];
      }
      v61 = __dst;
      replace((char *)0x2B, v66, __dst);
      do
        v119 = *v61++;
      while (v119 != 39);
    }
    else
    {
      v67 = 76;
      v62 = (unsigned __int8 *)v8;
    }
    v68 = 0;
    v69 = &v125;
    v70 = __s2;
    v71 = __s1;
    for (i = v61; ; ++i)
    {
      v73 = *i;
      if ((v73 - 64) <= 0x38 && ((1 << (v73 - 64)) & 0x162822200000001) != 0)
      {
        v75 = v69++;
        v68 = 1;
        goto LABEL_156;
      }
      if (!*i || v73 == 43)
        break;
      if (v68)
        v75 = v70;
      else
        v75 = v71;
      if (v68)
        ++v70;
      else
        ++v71;
      if (!v68)
        v68 = 0;
LABEL_156:
      *v75 = v73;
    }
    *v71 = 0;
    *v70 = 0;
    *v69 = 0;
    v76 = __s2[0] - 106;
    v34 = v76 > 0xD;
    v77 = (1 << v76) & 0x2019;
    if (v34 || v77 == 0)
    {
      v85 = 1;
      if (__s2[0] || v125 != v126)
      {
LABEL_185:
        v130 = 32;
        v86 = *v62;
        if (*v62)
        {
          v87 = 0;
          v88 = v62 + 1;
          v89 = v128;
          v90 = v127;
          while ((v86 + 95) > 0x2Du)
          {
            if ((v86 & 0xFC) == 0xE8)
            {
              v91 = &v130;
LABEL_198:
              *v91 = v86;
            }
            v92 = *v88++;
            v86 = v92;
            if (!v92)
              goto LABEL_202;
          }
          if (v87)
            v91 = v90;
          else
            v91 = v89;
          if (v87)
            ++v90;
          else
            ++v89;
          if (!v87)
            v87 = 1;
          goto LABEL_198;
        }
        v90 = v127;
        v89 = v128;
LABEL_202:
        *v90 = 0;
        *v89 = 0;
        if (__s1[1] != 104)
        {
          if ((v93 = __s1[0] - 98, v93 <= 0x12) && ((1 << v93) & 0x44207) != 0 || __s1[0] == 35)
          {
            if ((v85 & 1) != 0)
            {
              v60 = 50;
              switch(v130)
              {
                case 0xE8u:
                case 0xEAu:
                case 0xEBu:
                  goto LABEL_223;
                case 0xE9u:
                  goto LABEL_224;
                default:
                  if (v130 == 32)
                    goto LABEL_286;
                  goto LABEL_141;
              }
            }
            else
            {
              v60 = 49;
              switch(v130)
              {
                case 0xE8u:
                  goto LABEL_224;
                case 0xE9u:
                  goto LABEL_220;
                case 0xEAu:
                  goto LABEL_223;
                case 0xEBu:
                  goto LABEL_284;
                default:
                  goto LABEL_141;
              }
            }
            goto LABEL_224;
          }
        }
        if (v128[0] - 162 <= 0x29 && ((1 << (v128[0] + 94)) & 0x3C00C104081) != 0)
        {
          if ((v85 & 1) != 0)
          {
            if (v130 <= 0xE9u)
            {
              if (v130 != 32)
              {
                if (v130 == 232)
                  goto LABEL_223;
                goto LABEL_217;
              }
              goto LABEL_286;
            }
          }
          else if (v130 <= 0xE9u)
          {
            if (v130 == 32)
            {
LABEL_284:
              v60 = 52;
              goto LABEL_224;
            }
            if (v130 != 232)
            {
LABEL_217:
              if (v130 == 233)
              {
LABEL_220:
                v60 = 50;
                goto LABEL_224;
              }
              goto LABEL_141;
            }
LABEL_286:
            v60 = 49;
            goto LABEL_224;
          }
          v94 = v130 - 234;
          goto LABEL_222;
        }
        if ((v85 & 1) != 0)
        {
          v120 = v130;
          if (v125 == v126)
          {
            if (v130 <= 0xE9u)
            {
              if (v130 != 32)
              {
                if (v130 == 232 || v130 == 233)
                  goto LABEL_223;
LABEL_141:
                v60 = 48;
                goto LABEL_224;
              }
LABEL_304:
              v121 = v67 == 77 || v67 == 72;
LABEL_307:
              v60 = 49;
LABEL_308:
              if (!v121)
                ++v60;
              goto LABEL_224;
            }
LABEL_299:
            v94 = v120 - 234;
LABEL_222:
            if (v94 >= 2)
              goto LABEL_141;
LABEL_223:
            v60 = 51;
            goto LABEL_224;
          }
          if (v130 - 233 < 3)
            goto LABEL_223;
          if (v130 != 32)
          {
            if (v130 != 232)
              goto LABEL_141;
            v121 = v67 == 77;
            goto LABEL_307;
          }
          v122 = v67 == 77 || v67 == 72;
          v60 = 51;
          v123 = 49;
        }
        else
        {
          v120 = v130;
          if (v130 > 0xE9u)
            goto LABEL_299;
          if (v130 != 32)
          {
            if (v130 != 232)
            {
              if (v130 != 233)
                goto LABEL_141;
              v121 = v67 == 72;
              v60 = 50;
              goto LABEL_308;
            }
            goto LABEL_304;
          }
          v122 = v67 == 72;
          v60 = 48;
          v123 = 52;
        }
        if (v122)
          v60 = v123;
LABEL_224:
        __s2[0] = v60;
        __s2[1] = 0;
        cstdlib_strcat(__dst, __s2);
        if (!cstdlib_strcmp(__dst, "!0"))
          __dst[0] = 0;
        cstdlib_strcpy(v7, __dst);
        if (*v8 == 205 && v8[1] == 194 && (v95 = cstdlib_strchr(v7, 39)) != 0
          || (v96 = cstdlib_strchr(v7, 104)) != 0
          && ((v97 = v96, v98 = *(v96 - 1) - 99, v98 > 0x11) || ((1 << v98) & 0x22101) == 0)
          && (v95 = cstdlib_strchr(v7, 39), v95 > v97))
        {
          v104 = v95 + 1;
        }
        else
        {
          v99 = cstdlib_strchr(v8, 195);
          if (v99)
          {
            v100 = *(v99 - 1);
            if ((v100 == 202 || v100 == 171) && !cstdlib_strchr(v7, 39))
            {
              v111 = cstdlib_strchr(v7, 114);
              if (v111)
              {
                v112 = v111;
                v113 = v111 + 1;
                v105 = cstdlib_strlen(v111 + 1) + 1;
                v106 = v112;
                v114 = v113;
LABEL_255:
                cstdlib_memmove(v106, v114, v105);
                return 0;
              }
            }
          }
          v101 = cstdlib_strchr(v8, 195);
          if (!v101
            || *(v101 - 1) != 183
            || cstdlib_strchr(v7, 39)
            || patt_check((unsigned __int8 *)v8, "\xB7\xC3\xC7\xB4") != 1
            && patt_check((unsigned __int8 *)v8, "\xB7\xC3\xC7\xA7") != 1
            && patt_check((unsigned __int8 *)v8, "\xB7ç") != 1
            && patt_check((unsigned __int8 *)v8, "\xB7\xC3\xD2\xBA") != 1
            && patt_check((unsigned __int8 *)v8, "\xB7\xC3\xD2\xC1\xB7\xC3\xD2\xC2\xE2\xB7\xC3\xC1\xB7\xC3\xD8\xB4") != 1&& patt_check((unsigned __int8 *)v8, "\xB7\xC3\xD2\xC2\xE2\xB7\xC3\xC1\xB7\xC3\xD8\xB4") != 1&& patt_check((unsigned __int8 *)v8, "\xE2\xB7\xC3\xC1\xB7\xC3\xD8\xB4") != 1&& patt_check((unsigned __int8 *)v8, "\xB7\xC3\xD8\xB4") != 1&& patt_check((unsigned __int8 *)v8, "\xB7\xC3\xD5") != 1|| (v115 = cstdlib_strchr(v7, 114)) == 0)
          {
            v102 = cstdlib_strchr(v7, 43);
            if (!v102 || (v103 = v102 + 1, v102[1] != 39))
            {
              v107 = *v7;
              if (v107 == 116)
              {
                v108 = v7 + 1;
                if (v7[1] == 119)
                {
                  v110 = "ta1";
                }
                else
                {
                  v108 = v7 + 2;
                  if (v7[2] != 119)
                    return 0;
                  v110 = "tha1";
                }
              }
              else
              {
                if (v107 != 115)
                  return 0;
                v108 = v7 + 1;
                v109 = v7[1] - 108;
                if (v109 > 0xB || ((1 << v109) & 0x841) == 0)
                  return 0;
                v110 = "sa1";
              }
              cstdlib_strcpy(__s1, v110);
              cstdlib_strcat(__s1, v108);
              cstdlib_strcpy(v7, __s1);
              return 0;
            }
            *v102 = 49;
            v104 = v102 + 2;
            v105 = cstdlib_strlen(v102 + 2) + 1;
            v106 = v103;
            goto LABEL_254;
          }
          v104 = v115;
          *v115 = 115;
          v7 = v115 - 2;
        }
        v105 = cstdlib_strlen(v104) + 1;
        v106 = v7;
LABEL_254:
        v114 = v104;
        goto LABEL_255;
      }
    }
    if ((patt_check(v62, "\xE0\x58\x54X") == 1 || patt_check(v62, "\xE0\x58\x58TX") == 1)
      && (cstdlib_strchr((char *)v62, 232) || cstdlib_strchr((char *)v62, 233))
      && (v79 = cstdlib_strchr(v61, 101)) != 0
      || (patt_check(v62, "\xE0\x58\xD4\xE8\x58\xE0\x58\x58\xD4\xE8X") == 1
       || patt_check(v62, "\xE0\x58\x58\xD4\xE8X") == 1)
      && (v79 = cstdlib_strchr(v61, 113)) != 0
      || (patt_check(v62, "\xE1\x58\xE8X") == 1
       || patt_check(v62, "\xE1\x58\x58\xE8\x58X\xE8\xCD\x58") == 1)
      && (v79 = cstdlib_strchr(v61, 120)) != 0)
    {
      v80 = v79;
      v81 = v79 + 1;
      v82 = cstdlib_strlen(v79 + 1) + 1;
      v83 = v80;
      v84 = v81;
    }
    else
    {
      if (patt_check(v62, "X\xE8\xCD\x58") != 1 && patt_check(v62, "XX\xE8\xCD\x58") != 1)
        goto LABEL_184;
      v116 = cstdlib_strchr(v61, 64);
      if (!v116)
        goto LABEL_184;
      v117 = v116;
      v118 = v116 + 1;
      v82 = cstdlib_strlen(v116 + 1) + 1;
      v83 = v117;
      v84 = v118;
    }
    cstdlib_memmove(v83, v84, v82);
LABEL_184:
    v85 = 0;
    goto LABEL_185;
  }
  if (cstdlib_strlen((const char *)(v6 + 352)) == 1)
  {
    ReadThaiChar((char *)*v8, v7);
    return 1;
  }
  v55 = cstdlib_strlen(v8);
  *v7 = 0;
  if (!v55)
    return 1;
  v56 = v55;
  for (j = 0; j != v56; ++j)
  {
    if (cchar_dct)
    {
      v58 = (const char *)&unk_214F04DD9;
      v59 = cchar_dct;
      while (*((unsigned __int8 *)v58 - 1) != v8[j])
      {
        v58 += 51;
        if (!--v59)
          goto LABEL_137;
      }
      cstdlib_strcat(v7, v58);
    }
LABEL_137:
    result = 1;
  }
  return result;
}

char *replace(char *result, const char *a2, char *a3)
{
  uint64_t v5;
  unsigned __int8 v6;
  char *v7;
  char __dst[128];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (*a3)
  {
    if (*a3 == result)
    {
      v5 = 0;
LABEL_7:
      v7 = &a3[v5];
      cstdlib_strcpy(__dst, &a3[v5 + 1]);
      cstdlib_strcpy(v7, a2);
      return cstdlib_strcat(a3, __dst);
    }
    else
    {
      v6 = 0;
      while (1)
      {
        v5 = ++v6;
        if (!a3[v6])
          break;
        if (a3[v6] == result)
          goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t wparserCrf_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2350915585;
  result = 0;
  *a2 = &IWparserImplCrf;
  return result;
}

uint64_t wparser_impl_crf_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  v7 = 0;
  if (!a3)
    return 2350915591;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t wparser_impl_crf_ClassClose()
{
  return 0;
}

uint64_t wparser_impl_crf_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t MaxWordLen;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v22 = 0;
  MaxWordLen = 2350915591;
  if (a5)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v22);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(_QWORD *)(v22 + 32), (uint64_t)"WPARSER_IMPL_CRF", 4, 0, (uint64_t)"WPARSER_IMPL CRF ObjOpen: Begin", v12, v13, v14, v21);
      v15 = (_QWORD *)heap_Calloc(*(_QWORD **)(v22 + 8), 1, 88);
      if (v15)
      {
        v16 = v15;
        *v15 = a3;
        v15[1] = a4;
        v15[2] = v22;
        v15[3] = a1;
        v15[4] = a2;
        v15[5] = a1;
        v15[6] = "WPARSER_IMPL_CRF";
        MaxWordLen = wparser_impl_crf_loc_GetMaxWordLen((uint64_t)v15);
        *(_QWORD *)a5 = v16;
        *(_DWORD *)(a5 + 8) = 87652;
        log_OutText(*(_QWORD *)(v22 + 32), (uint64_t)"WPARSER_IMPL_CRF", 4, 0, (uint64_t)"WPARSER_IMPL CRF ObjOpen: End (%x)", v17, v18, v19, MaxWordLen);
      }
      else
      {
        return 2350915594;
      }
    }
  }
  return MaxWordLen;
}

uint64_t wparser_impl_crf_ObjClose(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Only_DereferenceCnt;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  Only_DereferenceCnt = safeh_HandleCheck((uint64_t)a1, a2, 87652, 88);
  if ((Only_DereferenceCnt & 0x80000000) == 0)
  {
    v7 = a1[2];
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"WPARSER_IMPL_CRF", 4, 0, (uint64_t)"WPARSER_IMPL CRF ObjClose : Begin", v3, v4, v5, v13);
    v8 = a1[10];
    if (!v8)
    {
LABEL_5:
      heap_Free(*(_QWORD **)(v7 + 8), (uint64_t)a1);
      log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"WPARSER_IMPL_CRF", 4, 0, (uint64_t)"WPARSER_IMPL CRF ObjClose : End (%x)", v9, v10, v11, Only_DereferenceCnt);
      return Only_DereferenceCnt;
    }
    Only_DereferenceCnt = crf_Deinit_ReadOnly_DereferenceCnt(a1[2], a1[5], v8);
    if ((Only_DereferenceCnt & 0x80000000) == 0)
    {
      a1[10] = 0;
      goto LABEL_5;
    }
  }
  return Only_DereferenceCnt;
}

uint64_t wparser_impl_crf_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t MaxWordLen;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v3 & 0x80000000) != 0)
    return v3;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL_CRF", 4, 0, (uint64_t)"WPARSER_IMPL CRF ObjReopen : Begin", v4, v5, v6, v12);
  MaxWordLen = wparser_impl_crf_loc_GetMaxWordLen(a1);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL_CRF", 4, 0, (uint64_t)"WPARSER_IMPL CRF ObjReopen : End (%x)", v8, v9, v10, MaxWordLen);
  return MaxWordLen;
}

uint64_t wparser_impl_crf_Init(_WORD **a1, int a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t inited;
  uint64_t v10;
  int Str;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Only_ReferenceCnt;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26[2];
  _OWORD v27[8];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v24 = 7549556;
  memset(v27, 0, sizeof(v27));
  v23 = 0;
  inited = safeh_HandleCheck((uint64_t)a1, a2, 87652, 88);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = (*(uint64_t (**)(_QWORD, _QWORD, int *, uint64_t))(*a3 + 72))(a3[1], a3[2], &v24, (uint64_t)a1 + 68);
  if ((inited & 0x80000000) != 0)
    return inited;
  a1[7] = a3;
  *((_DWORD *)a1 + 16) = a6;
  inited = InitRsrcFunction(*a1, (int)a1[1], &v23);
  if ((inited & 0x80000000) != 0)
    return inited;
  v10 = v23;
  v25 = 0;
  *(_QWORD *)v26 = 0;
  Str = paramc_ParamGetStr(*(_QWORD *)(v23 + 40), (uint64_t)"langcode", v26);
  if (Str < 0
    || (Str = paramc_ParamGetStr(*(_QWORD *)(v10 + 40), (uint64_t)"fecfg", &v25), Str < 0)
    || (Str = brokeraux_ComposeBrokerString(v10, "wpcrf", 1, 1, *(char **)v26, 0, 0, (char *)v27, 0x80uLL), Str < 0))
  {
    v21 = Str;
    log_OutText(*(_QWORD *)(v23 + 32), (uint64_t)"WPARSER_IMPL_CRF", 0, 0, (uint64_t)"Could not assemble broker string for WPCRF model", v12, v13, v14, v22);
    return v21 | 0x8C202000;
  }
  else
  {
    log_OutText(*(_QWORD *)(v23 + 32), (uint64_t)"WPARSER_IMPL_CRF", 5, 0, (uint64_t)"looking for WPCRF model at %s", v12, v13, v14, (uint64_t)v27);
    v15 = (uint64_t *)(a1 + 10);
    Only_ReferenceCnt = crf_Init_ReadOnly_ReferenceCnt(*a1, (uint64_t)a1[1], a1[3], (uint64_t)a1[4], a1 + 10, 2, (uint64_t)v27, "CRPH", 12341, 48, 0);
    if ((Only_ReferenceCnt & 0x80000000) != 0)
    {
      log_OutText(*(_QWORD *)(v23 + 32), (uint64_t)"WPARSER_IMPL_CRF", 5, 0, (uint64_t)"no CRF PW model found", v16, v17, v18, (uint64_t)v27);
      if (*v15)
      {
        Only_ReferenceCnt = crf_Deinit_ReadOnly_DereferenceCnt((uint64_t)a1[2], (uint64_t)a1[5], *v15);
        if ((Only_ReferenceCnt & 0x80000000) == 0)
          *v15 = 0;
      }
    }
  }
  return Only_ReferenceCnt;
}

uint64_t wparser_impl_crf_Normalize(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _WORD *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((result & 0x80000000) == 0)
  {
    *(_BYTE *)(a3 + a5) = 0;
    if (*(_DWORD *)(a1 + 68) != 1)
      return DoWPCRF(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48), *(_QWORD **)(a1 + 56), *(_QWORD *)(a1 + 80), a3, a5, a6, a7, a8, a12, a15);
    result = wordm_mapt2s(*(_QWORD **)(a1 + 56), a3, a5);
    if ((result & 0x80000000) == 0)
      return DoWPCRF(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48), *(_QWORD **)(a1 + 56), *(_QWORD *)(a1 + 80), a3, a5, a6, a7, a8, a12, a15);
  }
  return result;
}

uint64_t wparser_impl_crf_Spell(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, uint64_t a10, int a11)
{
  uint64_t result;
  uint64_t v18;

  result = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((result & 0x80000000) == 0)
  {
    LOWORD(v18) = a9;
    return DoSpell(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48), *(_QWORD **)(a1 + 56), a3, a5, a6, a7, a8, v18, a10, a11, *(_BYTE *)(a1 + 72));
  }
  return result;
}

uint64_t wparser_impl_crf_Latin(uint64_t a1, int a2, const char *a3, unsigned int a4, char **a5)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((result & 0x80000000) == 0)
    return DoLatin(*(_QWORD *)(a1 + 16), *(_QWORD **)(a1 + 56), a3, a4, a5);
  return result;
}

uint64_t wparser_impl_crf_End(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wparser_impl_crf_ProcessStart(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wparser_impl_crf_ProcessEnd(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wparser_impl_crf_loc_GetMaxWordLen(uint64_t a1)
{
  uint64_t Str;
  uint64_t v3;
  int v4;
  unsigned __int8 *v6;

  v6 = 0;
  Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"maxdctwordlen", &v6);
  if ((Str & 0x80000000) != 0)
  {
    v3 = 0;
    LOBYTE(v4) = 7;
    goto LABEL_5;
  }
  v3 = Str;
  v4 = cstdlib_atoi(v6);
  if ((v4 - 1) <= 0xFE)
  {
LABEL_5:
    *(_BYTE *)(a1 + 72) = v4;
    return v3;
  }
  return 15;
}

uint64_t DoWPCRF(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _WORD *a10, uint64_t a11)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  size_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  int v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  unsigned int v62;
  unsigned __int16 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BOOL4 v80;
  int v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int LogLevel;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  __int16 v89;
  char __s[16];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  char v94;
  char __src[16];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  char v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  v89 = 0;
  v88 = 0;
  v87 = 0;
  LogLevel = log_GetLogLevel(*(_QWORD *)(a1 + 32));
  *(_QWORD *)__src = 0;
  *(_WORD *)(a11 + 8) = 0;
  *(_DWORD *)(a11 + 16) = 1;
  if ((bed_GetpElem(a8, 0xFFFFu, __src) & 0x80000000) == 0)
  {
    if (!(_DWORD)a6 || (_DWORD)a6 == (unsigned __int16)*(_DWORD *)(*(_QWORD *)__src + 36))
    {
      v21 = *(_QWORD *)(a1 + 32);
    }
    else
    {
      *(_DWORD *)(a11 + 16) = 0;
      v21 = *(_QWORD *)(a1 + 32);
    }
    log_OutText(v21, a2, 5, 0, (uint64_t)"[WPCRF] (length for CRF %d - region length in Marker %d %s)", v18, v19, v20, a6);
  }
  v84 = a2;
  v22 = heap_Calloc(*(_QWORD **)(a1 + 8), a6, 8);
  if (v22)
  {
    v23 = (_QWORD *)v22;
    v80 = LogLevel > 4;
    v24 = heap_Calloc(*(_QWORD **)(a1 + 8), a6, 8);
    if (v24)
    {
      v86 = heap_Calloc(*(_QWORD **)(a1 + 8), a6, 8);
      if (v86)
      {
        v83 = v24;
        v79 = a7;
        if ((_DWORD)a6)
        {
          v25 = 0;
          LODWORD(v26) = 0;
          while (1)
          {
            v27 = a6;
            v99 = 0;
            v97 = 0u;
            v98 = 0u;
            *(_OWORD *)__src = 0u;
            v96 = 0u;
            v94 = 0;
            v92 = 0u;
            v93 = 0u;
            *(_OWORD *)__s = 0u;
            v91 = 0u;
            v28 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(a5 + v25));
            sysdct_wpcrf_LookUp_Chinese(a3, (const void *)(a5 + v25), v28, __src, __s, (_BOOL4 *)(v83 + 8 * v26));
            if (LogLevel >= 5)
              log_OutText(*(_QWORD *)(a1 + 32), v84, 5, 0, (uint64_t)"[WPCRF] Feat: %s", v29, v30, v31, (uint64_t)__src);
            v32 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 65);
            *(_QWORD *)(v86 + 8 * v26) = v32;
            if (!v32)
              goto LABEL_66;
            if (!cstdlib_strlen(__s))
              break;
            if (cstdlib_strcmp(__s, "NULL"))
            {
              cstdlib_strcpy(*(char **)(v86 + 8 * v26), __s);
LABEL_19:
              v33 = *(_QWORD **)(a1 + 8);
              v34 = cstdlib_strlen(__src);
              v35 = (char *)heap_Calloc(v33, 1, v34 + 1);
              v23[v26] = v35;
              if (!v35)
                goto LABEL_66;
              cstdlib_strcpy(v35, __src);
              LODWORD(v26) = v26 + 1;
              goto LABEL_22;
            }
            heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(v86 + 8 * v26));
            *(_QWORD *)(v86 + 8 * v26) = 0;
LABEL_22:
            v25 += v28;
            a6 = v27;
            if (v25 >= v27)
              goto LABEL_30;
          }
          cstdlib_strncpy(*(char **)(v86 + 8 * v26), (const char *)(a5 + v25), v28);
          goto LABEL_19;
        }
        LODWORD(v26) = 0;
LABEL_30:
        v41 = a9;
        crf_Process(a4, v23, v26, &v87, &v88);
        v42 = (uint64_t *)a11;
        v43 = v79;
        if (v88)
        {
          v44 = heap_Calloc(*(_QWORD **)(a1 + 8), 64, v88);
          if (!v44)
          {
LABEL_66:
            v36 = 2350915594;
LABEL_78:
            v37 = v87;
            v38 = v88;
            if ((_DWORD)v26)
            {
              v71 = 0;
              v26 = v26;
              do
              {
                v72 = v23[v71];
                if (v72)
                  heap_Free(*(_QWORD **)(a1 + 8), v72);
                ++v71;
              }
              while (v26 != v71);
              heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v23);
              heap_Free(*(_QWORD **)(a1 + 8), v83);
              v73 = (uint64_t *)v86;
              do
              {
                if (*v73)
                  heap_Free(*(_QWORD **)(a1 + 8), *v73);
                ++v73;
                --v26;
              }
              while (v26);
            }
            else
            {
              heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v23);
              heap_Free(*(_QWORD **)(a1 + 8), v83);
            }
            v39 = *(_QWORD **)(a1 + 8);
            v40 = v86;
LABEL_90:
            heap_Free(v39, v40);
            if (!v37)
              return v36;
            goto LABEL_91;
          }
          v48 = (char *)v44;
          v78 = a6;
          if (v88)
          {
            v49 = 0;
            v50 = (_DWORD *)v83;
            do
            {
              v51 = v87;
              if (LogLevel >= 5)
              {
                log_OutText(*(_QWORD *)(a1 + 32), v84, 5, 0, (uint64_t)"[WPCRF] Predicted Tag: %s", v45, v46, v47, *(_QWORD *)(v87 + 8 * v49));
                v51 = v87;
              }
              v52 = **(unsigned __int8 **)(v51 + 8 * v49);
              if ((v52 == 83 || v52 == 66)
                && cstdlib_strlen(v48)
                && (**(_BYTE **)(v87 + 8 * v49) != 83 || *v50 != 1)
                && (v49 && !*(v50 - 2) || cstdlib_strlen(v48) >= 2))
              {
                hlp_updateWord(a9, v48, a10, a1, a11, &v89);
                cstdlib_memset(v48, 0, v88 << 6);
              }
              v53 = *(const char **)(v86 + 8 * v49);
              if (v53)
                cstdlib_strcat(v48, v53);
              ++v49;
              v50 += 2;
            }
            while (v49 < v88);
          }
          if (cstdlib_strlen(v48))
            hlp_updateWord(a9, v48, a10, a1, a11, &v89);
          heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v48);
          v43 = v79;
          a6 = v78;
          if ((_DWORD)v78)
          {
            *(_QWORD *)__src = 0;
            *(_WORD *)__s = 0;
            if ((bed_GetcElem(a9, __s) & 0x80000000) == 0)
            {
              if (*(_WORD *)__s)
              {
                UTOISubTrace(v80, a1, a9, (uint64_t)"replacement string");
                if (*(_DWORD *)(a11 + 16) == 1 && (bed_GetpElem(a9, 0, __src) & 0x80000000) == 0)
                {
                  v60 = *(unsigned __int16 *)__s;
                  if (*(_WORD *)__s)
                  {
                    v61 = 0;
                    v62 = 0;
                    v63 = 1;
                    v64 = *(_QWORD *)__src;
                    do
                    {
                      if (*(_BYTE *)(v64 + v61) == 16)
                      {
                        v65 = *(unsigned __int16 *)(a11 + 8);
                        if (v62 >= v65)
                        {
LABEL_68:
                          log_OutText(*(_QWORD *)(a1 + 32), v84, 5, 0, (uint64_t)"[WPCRF] cant find non-deleted word to align new word number %d with", v57, v58, v59, v63);
                          v82 = 0;
                          goto LABEL_69;
                        }
                        v66 = v62;
                        v67 = (int *)(*(_QWORD *)a11 + 12 * v62 + 4);
                        while (1)
                        {
                          v68 = *v67;
                          v67 += 3;
                          if (v68 != 1)
                            break;
                          if (v65 == ++v66)
                            goto LABEL_68;
                        }
                        *(_WORD *)(*(_QWORD *)a11 + 12 * (unsigned __int16)v66 + 8) = v61;
                        ++v63;
                        v62 = (unsigned __int16)v66 + 1;
                        v60 = *(unsigned __int16 *)__s;
                      }
                      ++v61;
                    }
                    while (v61 < v60);
                  }
                  v82 = 1;
LABEL_69:
                  if (LogLevel >= 5 && *(_WORD *)(a11 + 8))
                  {
                    v69 = 0;
                    v70 = 0;
                    do
                    {
                      log_OutText(*(_QWORD *)(a1 + 32), v84, 5, 0, (uint64_t)"[WPCRF] [%d] origWordPos=%d, newPos=%d, bDeleted=%d", v57, v58, v59, v70++);
                      v69 += 12;
                    }
                    while (v70 < *(unsigned __int16 *)(a11 + 8));
                  }
                  v43 = v79;
                  a6 = v78;
                  v41 = a9;
                  if (v82)
                    *(_DWORD *)(a11 + 12) = 0;
                }
              }
              else
              {
                log_OutText(*(_QWORD *)(a1 + 32), v84, 5, 0, (uint64_t)"[WPCRF] deleting region, no replacement text found", v54, v55, v56, v77);
              }
            }
            v42 = (uint64_t *)a11;
          }
        }
        v36 = utoin_IncrReplaceCurrentRegion(v43, a8, v41, a6, v42);
        if ((v36 & 0x80000000) == 0)
          UTOITrace(v80, a1, v43, a8, (uint64_t)"END of DOWPCRF");
        goto LABEL_78;
      }
    }
    v36 = 2586845194;
    v37 = v87;
    v38 = v88;
    heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v23);
    if (v24)
    {
      v39 = *(_QWORD **)(a1 + 8);
      v40 = v24;
      goto LABEL_90;
    }
  }
  else
  {
    v36 = 2586845194;
    v37 = v87;
    v38 = v88;
  }
  if (!v37)
    return v36;
LABEL_91:
  if (v38)
  {
    v74 = v38;
    v75 = (uint64_t *)v37;
    do
    {
      if (*v75)
        heap_Free(*(_QWORD **)(a1 + 8), *v75);
      ++v75;
      --v74;
    }
    while (v74);
  }
  heap_Free(*(_QWORD **)(a1 + 8), v37);
  return v36;
}

size_t hlp_updateWord(uint64_t a1, char *a2, _WORD *a3, uint64_t a4, uint64_t a5, __int16 *a6)
{
  unsigned __int16 v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  __int16 v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t result;

  v12 = cstdlib_strlen(szWORD_BEG_4);
  if ((bed_Insert(a1, szWORD_BEG_4, v12) & 0x80000000) == 0)
  {
    *a3 += cstdlib_strlen(szWORD_BEG_4);
    v13 = cstdlib_strlen(a2);
    if ((bed_Insert(a1, a2, v13) & 0x80000000) == 0)
    {
      *a3 += cstdlib_strlen(a2);
      v14 = cstdlib_strlen(szWORD_END_4);
      if ((bed_Insert(a1, szWORD_END_4, v14) & 0x80000000) == 0)
        *a3 += cstdlib_strlen(szWORD_END_4);
    }
  }
  if (*(_DWORD *)(a5 + 16) == 1)
  {
    v15 = *a6;
    v16 = *(unsigned __int16 *)(a5 + 8);
    v17 = *(_QWORD *)a5;
    if (v16 < *(unsigned __int16 *)(a5 + 10))
    {
LABEL_9:
      v19 = v17 + 12 * v16;
      *(_WORD *)v19 = v15;
      *(_QWORD *)(v19 + 2) = 0;
      *(_WORD *)(a5 + 8) = v16 + 1;
      goto LABEL_10;
    }
    v18 = heap_Realloc(*(uint64_t **)(a4 + 8), v17, 12 * *(unsigned __int16 *)(a5 + 10) + 121);
    if (v18)
    {
      v17 = v18;
      *(_QWORD *)a5 = v18;
      *(_WORD *)(a5 + 10) += 10;
      v16 = *(unsigned __int16 *)(a5 + 8);
      goto LABEL_9;
    }
  }
LABEL_10:
  result = cstdlib_strlen(a2);
  *a6 += result;
  return result;
}

uint64_t wparserDummy_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2350915585;
  result = 0;
  *a2 = &IWparserImplDummy;
  return result;
}

uint64_t wparser_impl_dummy_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  v7 = 0;
  if (!a3)
    return 2350915591;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t wparser_impl_dummy_ClassClose()
{
  return 0;
}

uint64_t wparser_impl_dummy_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t MaxWordLen;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v22 = 0;
  MaxWordLen = 2350915591;
  if (a5)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v22);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(_QWORD *)(v22 + 32), (uint64_t)"WPARSER_IMPL_DUMMY", 4, 0, (uint64_t)"WPARSER_IMPL DUMMY ObjOpen: Begin", v12, v13, v14, v21);
      v15 = (_QWORD *)heap_Calloc(*(_QWORD **)(v22 + 8), 1, 80);
      if (v15)
      {
        v16 = v15;
        *v15 = a3;
        v15[1] = a4;
        v15[2] = v22;
        v15[3] = a1;
        v15[4] = a2;
        v15[5] = a1;
        v15[6] = "WPARSER_IMPL_DUMMY";
        MaxWordLen = wparser_impl_crf_loc_GetMaxWordLen((uint64_t)v15);
        *(_QWORD *)a5 = v16;
        *(_DWORD *)(a5 + 8) = 87652;
        log_OutText(*(_QWORD *)(v22 + 32), (uint64_t)"WPARSER_IMPL_DUMMY", 4, 0, (uint64_t)"WPARSER_IMPL DUMMY ObjOpen: End (%x)", v17, v18, v19, MaxWordLen);
      }
      else
      {
        return 2350915594;
      }
    }
  }
  return MaxWordLen;
}

uint64_t wparser_impl_dummy_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = safeh_HandleCheck(a1, a2, 87652, 80);
  if ((v6 & 0x80000000) == 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"WPARSER_IMPL_DUMMY", 4, 0, (uint64_t)"WPARSER_IMPL DUMMY ObjClose : Begin", v3, v4, v5, v12);
    heap_Free(*(_QWORD **)(v7 + 8), a1);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"WPARSER_IMPL_DUMMY", 4, 0, (uint64_t)"WPARSER_IMPL DUMMY ObjClose : End (%x)", v8, v9, v10, v6);
  }
  return v6;
}

uint64_t wparser_impl_dummy_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t MaxWordLen;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = safeh_HandleCheck(a1, a2, 87652, 80);
  if ((v3 & 0x80000000) != 0)
    return v3;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL_DUMMY", 4, 0, (uint64_t)"WPARSER_IMPL DUMMY ObjReopen : Begin", v4, v5, v6, v12);
  MaxWordLen = wparser_impl_crf_loc_GetMaxWordLen(a1);
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL_DUMMY", 4, 0, (uint64_t)"WPARSER_IMPL DUMMY ObjReopen : End (%x)", v8, v9, v10, MaxWordLen);
  return MaxWordLen;
}

uint64_t wparser_impl_dummy_Init(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t result;
  uint64_t v10;
  int v11;

  v11 = 7549556;
  v10 = 0;
  result = safeh_HandleCheck(a1, a2, 87652, 80);
  if ((result & 0x80000000) == 0)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD, int *, uint64_t))(*a3 + 72))(a3[1], a3[2], &v11, a1 + 68);
    if ((result & 0x80000000) == 0)
    {
      *(_QWORD *)(a1 + 56) = a3;
      *(_DWORD *)(a1 + 64) = a6;
      return InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v10);
    }
  }
  return result;
}

uint64_t wparser_impl_dummy_Normalize(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _WORD *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 87652, 80);
  if ((result & 0x80000000) == 0)
  {
    *(_BYTE *)(a3 + a5) = 0;
    if (*(_DWORD *)(a1 + 68) != 1)
      return DoWPDUMMY(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48), *(_QWORD **)(a1 + 56), a3, a5, a6, a7, a8, a12, a15);
    result = wordm_mapt2s(*(_QWORD **)(a1 + 56), a3, a5);
    if ((result & 0x80000000) == 0)
      return DoWPDUMMY(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48), *(_QWORD **)(a1 + 56), a3, a5, a6, a7, a8, a12, a15);
  }
  return result;
}

uint64_t wparser_impl_dummy_Spell(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, uint64_t a10, int a11)
{
  uint64_t result;
  uint64_t v18;

  result = safeh_HandleCheck(a1, a2, 87652, 80);
  if ((result & 0x80000000) == 0)
  {
    LOWORD(v18) = a9;
    return DoSpell(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48), *(_QWORD **)(a1 + 56), a3, a5, a6, a7, a8, v18, a10, a11, *(_BYTE *)(a1 + 72));
  }
  return result;
}

uint64_t wparser_impl_dummy_Latin(uint64_t a1, int a2, const char *a3, unsigned int a4, char **a5)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 87652, 80);
  if ((result & 0x80000000) == 0)
    return DoLatin(*(_QWORD *)(a1 + 16), *(_QWORD **)(a1 + 56), a3, a4, a5);
  return result;
}

uint64_t wparser_impl_dummy_End(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 80);
}

uint64_t wparser_impl_dummy_ProcessStart(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 80);
}

uint64_t wparser_impl_dummy_ProcessEnd(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 80);
}

uint64_t DoWPDUMMY(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _WORD *a9, uint64_t a10)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  size_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  const char **v39;
  const char *v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  unsigned __int16 v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  unsigned int v63;
  unsigned __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL4 v77;
  uint64_t v78;
  unsigned int LogLevel;
  uint64_t v80;
  uint64_t v81;
  char __s[16];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  char v86;
  char __src[16];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  char v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  LogLevel = log_GetLogLevel(*(_QWORD *)(a1 + 32));
  v77 = LogLevel > 4;
  *(_QWORD *)__src = 0;
  *(_WORD *)(a10 + 8) = 0;
  *(_DWORD *)(a10 + 16) = 1;
  if ((bed_GetpElem(a7, 0xFFFFu, __src) & 0x80000000) == 0)
  {
    if (!(_DWORD)a5 || (_DWORD)a5 == (unsigned __int16)*(_DWORD *)(*(_QWORD *)__src + 36))
    {
      v21 = *(_QWORD *)(a1 + 32);
    }
    else
    {
      *(_DWORD *)(a10 + 16) = 0;
      v21 = *(_QWORD *)(a1 + 32);
    }
    log_OutText(v21, a2, 5, 0, (uint64_t)"[WPDUMMY] (length for DUMMY %d - region length in Marker %d %s)", v18, v19, v20, a5);
  }
  v78 = a2;
  v22 = 2591039498;
  v81 = heap_Calloc(*(_QWORD **)(a1 + 8), a5, 8);
  if (!v81)
    return v22;
  v23 = heap_Calloc(*(_QWORD **)(a1 + 8), a5, 8);
  v24 = *(_QWORD **)(a1 + 8);
  v80 = v23;
  if (!v23)
  {
    v47 = v81;
    goto LABEL_53;
  }
  v25 = heap_Calloc(v24, a5, 8);
  if (!v25)
  {
    v27 = 0;
    goto LABEL_46;
  }
  v76 = a8;
  if (!(_DWORD)a5)
  {
    v27 = 0;
    goto LABEL_39;
  }
  v74 = a6;
  v75 = a7;
  v26 = 0;
  v27 = 0;
  do
  {
    v91 = 0;
    v89 = 0u;
    v90 = 0u;
    *(_OWORD *)__src = 0u;
    v88 = 0u;
    v86 = 0;
    v84 = 0u;
    v85 = 0u;
    *(_OWORD *)__s = 0u;
    v83 = 0u;
    v28 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(a4 + v26));
    sysdct_wpdummy_LookUp_Chinese(a3, (const void *)(a4 + v26), v28, __src, __s, (_BOOL4 *)(v80 + 8 * v27));
    if (LogLevel >= 5)
      log_OutText(*(_QWORD *)(a1 + 32), v78, 5, 0, (uint64_t)"[WPCRF] Feat: %s", v29, v30, v31, (uint64_t)__src);
    v32 = heap_Calloc(*(_QWORD **)(a1 + 8), 1, 65);
    *(_QWORD *)(v25 + 8 * v27) = v32;
    if (!v32)
    {
LABEL_37:
      v22 = 2350915594;
      goto LABEL_41;
    }
    if (cstdlib_strlen(__s))
    {
      if (!cstdlib_strcmp(__s, "NULL"))
      {
        heap_Free(*(_QWORD **)(a1 + 8), *(_QWORD *)(v25 + 8 * v27));
        *(_QWORD *)(v25 + 8 * v27) = 0;
        goto LABEL_22;
      }
      cstdlib_strcpy(*(char **)(v25 + 8 * v27), __s);
    }
    else
    {
      cstdlib_strncpy(*(char **)(v25 + 8 * v27), (const char *)(a4 + v26), v28);
    }
    v33 = *(_QWORD **)(a1 + 8);
    v34 = cstdlib_strlen(__src);
    v35 = (char *)heap_Calloc(v33, 1, v34 + 1);
    *(_QWORD *)(v81 + 8 * v27) = v35;
    if (!v35)
      goto LABEL_37;
    cstdlib_strcpy(v35, __src);
    ++v27;
LABEL_22:
    v26 += v28;
  }
  while (v26 < a5);
  if (!v27)
  {
    a6 = v74;
    a7 = v75;
    goto LABEL_39;
  }
  v36 = v27;
  v37 = heap_Calloc(*(_QWORD **)(a1 + 8), 64, v27);
  a6 = v74;
  a7 = v75;
  if (!v37)
  {
    v22 = 2350915594;
    goto LABEL_42;
  }
  v38 = (char *)v37;
  v39 = (const char **)v25;
  do
  {
    v40 = *v39++;
    cstdlib_strcat(v38, v40);
    --v36;
  }
  while (v36);
  if (cstdlib_strlen(v38))
  {
    v41 = cstdlib_strlen(szWORD_BEG_5);
    if ((bed_Insert(v76, szWORD_BEG_5, v41) & 0x80000000) == 0)
    {
      *a9 += cstdlib_strlen(szWORD_BEG_5);
      v42 = cstdlib_strlen(v38);
      if ((bed_Insert(v76, v38, v42) & 0x80000000) == 0)
      {
        *a9 += cstdlib_strlen(v38);
        v43 = cstdlib_strlen(szWORD_END_5);
        if ((bed_Insert(v76, szWORD_END_5, v43) & 0x80000000) == 0)
          *a9 += cstdlib_strlen(szWORD_END_5);
      }
    }
    if (*(_DWORD *)(a10 + 16) == 1)
    {
      v44 = *(unsigned __int16 *)(a10 + 8);
      v45 = *(_QWORD *)a10;
      if (v44 < *(unsigned __int16 *)(a10 + 10))
      {
        v46 = a10;
        goto LABEL_59;
      }
      v53 = heap_Realloc(*(uint64_t **)(a1 + 8), v45, 12 * *(unsigned __int16 *)(a10 + 10) + 121);
      if (v53)
      {
        v45 = v53;
        v46 = a10;
        *(_QWORD *)a10 = v53;
        *(_WORD *)(a10 + 10) += 10;
        v44 = *(unsigned __int16 *)(a10 + 8);
LABEL_59:
        v54 = v45 + 12 * v44;
        *(_WORD *)v54 = 0;
        *(_QWORD *)(v54 + 2) = 0;
        *(_WORD *)(v46 + 8) = v44 + 1;
      }
    }
    cstdlib_strlen(v38);
  }
  heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v38);
  *(_QWORD *)__src = 0;
  *(_WORD *)__s = 0;
  if ((bed_GetcElem(v76, __s) & 0x80000000) == 0)
  {
    if (*(_WORD *)__s)
    {
      UTOISubTrace(v77, a1, v76, (uint64_t)"replacement string");
      if (*(_DWORD *)(a10 + 16) == 1 && (bed_GetpElem(v76, 0, __src) & 0x80000000) == 0)
      {
        v61 = *(unsigned __int16 *)__s;
        if (*(_WORD *)__s)
        {
          v62 = 0;
          v63 = 0;
          v64 = 1;
          v65 = *(_QWORD *)__src;
          do
          {
            if (*(_BYTE *)(v65 + v62) == 16)
            {
              v66 = *(unsigned __int16 *)(a10 + 8);
              if (v63 >= v66)
              {
LABEL_77:
                log_OutText(*(_QWORD *)(a1 + 32), v78, 5, 0, (uint64_t)"[WPDUMMY] cant find non-deleted word to align new word number %d with", v58, v59, v60, v64);
                v73 = 0;
                goto LABEL_78;
              }
              v67 = v63;
              v68 = (int *)(*(_QWORD *)a10 + 12 * v63 + 4);
              while (1)
              {
                v69 = *v68;
                v68 += 3;
                if (v69 != 1)
                  break;
                if (v66 == ++v67)
                  goto LABEL_77;
              }
              *(_WORD *)(*(_QWORD *)a10 + 12 * (unsigned __int16)v67 + 8) = v62;
              ++v64;
              v63 = (unsigned __int16)v67 + 1;
              v61 = *(unsigned __int16 *)__s;
            }
            ++v62;
          }
          while (v62 < v61);
        }
        v73 = 1;
LABEL_78:
        if (LogLevel >= 5 && *(_WORD *)(a10 + 8))
        {
          v70 = 0;
          v71 = 0;
          do
          {
            log_OutText(*(_QWORD *)(a1 + 32), v78, 5, 0, (uint64_t)"[WPDUMMY] [%d] origWordPos=%d, newPos=%d, bDeleted=%d", v58, v59, v60, v71++);
            v70 += 12;
          }
          while (v71 < *(unsigned __int16 *)(a10 + 8));
        }
        if (v73)
          *(_DWORD *)(a10 + 12) = 0;
      }
    }
    else
    {
      log_OutText(*(_QWORD *)(a1 + 32), v78, 5, 0, (uint64_t)"[WPDUMMY] deleting region, no replacement text found", v55, v56, v57, v72);
    }
  }
LABEL_39:
  v22 = utoin_IncrReplaceCurrentRegion(a6, a7, v76, a5, (uint64_t *)a10);
  if ((v22 & 0x80000000) == 0)
    UTOITrace(v77, a1, a6, a7, (uint64_t)"END of DOWPDUMMY");
LABEL_41:
  if (v27)
  {
LABEL_42:
    v48 = v27;
    v49 = (uint64_t *)v81;
    do
    {
      if (*v49)
        heap_Free(*(_QWORD **)(a1 + 8), *v49);
      ++v49;
      --v48;
    }
    while (v48);
  }
LABEL_46:
  heap_Free(*(_QWORD **)(a1 + 8), v81);
  heap_Free(*(_QWORD **)(a1 + 8), v80);
  if (v25)
  {
    if (v27)
    {
      v50 = v27;
      v51 = (uint64_t *)v25;
      do
      {
        if (*v51)
          heap_Free(*(_QWORD **)(a1 + 8), *v51);
        ++v51;
        --v50;
      }
      while (v50);
    }
    v24 = *(_QWORD **)(a1 + 8);
    v47 = v25;
LABEL_53:
    heap_Free(v24, v47);
  }
  return v22;
}

uint64_t char_hash(uint64_t result, int a2)
{
  unsigned int v2;

  v2 = a2 + result;
  if (a2 == 131)
    v2 = 3;
  if ((_DWORD)result == 130)
    v2 = a2 | 0x100;
  if (a2)
    return v2;
  else
    return result;
}

uint64_t get_char_kind_hash(unsigned int a1, int a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  char *v5;

  v2 = a2 + a1;
  if (a2 == 131)
    v2 = 3;
  if (a1 == 130)
    v2 = a2 | 0x100;
  if (!a2)
    v2 = a1;
  v3 = Char_kind_hash_table[v2];
  if (v3 == 0xFFFF)
    return 0xFFFFFFFFLL;
  while (1)
  {
    v4 = (__int16)v3;
    v5 = (&Char_kind)[2 * (__int16)v3];
    if (*v5 == a1 && v5[1] == a2)
      break;
    v3 = *((unsigned __int16 *)&Char_kind + 8 * v4 + 5);
    if (v3 == 0xFFFF)
      return 0xFFFFFFFFLL;
  }
  return SLOWORD((&Char_kind)[2 * v4 + 1]);
}

unsigned __int8 *get_pron_from_grapheme_hash(unsigned __int8 *result, char *a2, int *a3, _DWORD *a4, int a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int i;
  char *v11;
  BOOL v12;
  int v13;
  char *v14;
  char v15;
  unsigned __int8 *v16;
  int v17;

  if (result[1])
    v5 = 2;
  else
    v5 = 1;
  *a3 = v5;
  while (2)
  {
    *a4 = 0;
    v6 = *result;
    v7 = *a3;
    if (*a3 == 2 && (v8 = result[1]) != 0)
    {
      v9 = v8 + v6;
      if (v8 == 131)
        v9 = 3;
      if (v6 == 130)
        v9 = v8 | 0x100;
    }
    else
    {
      v8 = 0;
      v9 = *result;
    }
    for (i = Char_pron_hash_table[v9]; i != 0xFFFF; i = *((unsigned __int16 *)&Char_pron + 12 * (__int16)i + 9))
    {
      v11 = (&Char_pron)[3 * (__int16)i];
      if (*v11 == v6
        && v11[1] == v8
        && SLOWORD((&Char_pron)[3 * (__int16)i + 2]) == a5)
      {
        v14 = (&Char_pron)[3 * (__int16)i + 1];
        v15 = *v14;
        if (*v14)
        {
          v16 = (unsigned __int8 *)(v14 + 1);
          do
          {
            *a2++ = v15;
            ++*a4;
            v17 = *v16++;
            v15 = v17;
          }
          while (v17);
        }
        *a2 = 0;
        return result;
      }
    }
    v12 = __OFSUB__(v7, 1);
    v13 = v7 - 1;
    *a3 = v13;
    if (!((v13 < 0) ^ v12 | (v13 == 0)))
      continue;
    break;
  }
  *a3 = 0;
  *a4 = 0;
  return result;
}

uint64_t get_name_of_symbol(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char v8;

  if (a3 < 0 || a1[2] <= a3)
    return 0;
  virtual_fseek(*a1, a2, a1[1] + 32 * a3, 0);
  v7 = 0;
  while (1)
  {
    v8 = virtual_getc((_QWORD *)*a1, a2);
    *(_BYTE *)(a4 + v7) = v8;
    if (!v8)
      break;
    if (++v7 == 32)
      return 0;
  }
  return a4;
}

uint64_t get_pointer_of_symbol(uint64_t a1, uint64_t a2)
{
  if (a2 < 0 || *(_QWORD *)(a1 + 16) <= a2)
    return 0;
  else
    return **(_QWORD **)a1 + *(_QWORD *)(a1 + 8) + 32 * a2;
}

uint64_t get_number_of_symbol(uint64_t a1, char *__s1)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  int v7;
  const char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  int v15;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = v4 - 1;
  if (v4 < 1)
    v6 = 0;
  else
    v6 = (const char *)(**(_QWORD **)a1 + *(_QWORD *)(a1 + 8));
  v7 = cstdlib_strcmp(__s1, v6);
  if (!v7)
    return 0;
  if (v7 < 0)
    return -1;
  if (v4 >= 1 && *(_QWORD *)(a1 + 16) >= v4)
    v8 = (const char *)(**(_QWORD **)a1 + *(_QWORD *)(a1 + 8) + 32 * v5);
  else
    v8 = 0;
  v10 = cstdlib_strcmp(__s1, v8);
  if (!v10)
    return v4 - 1;
  v9 = -1;
  if (v10 <= 0 && v5 != 1)
  {
    v11 = 0;
    v12 = v5;
    while (1)
    {
      v13 = v5 >= 0 ? v5 : v5 + 1;
      v9 = v11 + (v13 >> 1);
      if (v9 < 0 || *(_QWORD *)(a1 + 16) <= v9)
        v14 = 0;
      else
        v14 = (const char *)(**(_QWORD **)a1 + *(_QWORD *)(a1 + 8) + 32 * v9);
      v15 = cstdlib_strcmp(__s1, v14);
      if (!v15)
        break;
      if (v15 < 0)
        v12 = v9;
      else
        v11 = v9;
      v5 = v12 - v11;
      if (v12 - v11 == 1)
        return -1;
    }
  }
  return v9;
}

uint64_t find_taglist(uint64_t a1, char *__s2)
{
  uint64_t result;

  if (!__s2)
    return 0;
  result = 0;
  if (a1 && *__s2)
  {
    while (cstdlib_strcmp(*(const char **)a1, __s2))
    {
      a1 = *(_QWORD *)(a1 + 8);
      if (!a1)
        return 0;
    }
    return 1;
  }
  return result;
}

uint64_t log_output_cost(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char __s2[16];
  char __dst[64];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  result = ssftstring_AppendCStr(a1, "[");
  if ((result & 0x80000000) == 0)
  {
    cstdlib_strcpy(__dst, "f^=\"");
    LH_itoa(*(_DWORD *)(a2 + 56), __s2, 0xAu);
    cstdlib_strcat(__dst, __s2);
    cstdlib_strcat(__dst, "\",g=\"");
    LH_itoa(*(_DWORD *)(a2 + 64), __s2, 0xAu);
    cstdlib_strcat(__dst, __s2);
    cstdlib_strcat(__dst, "\"");
    result = ssftstring_AppendCStr(a1, __dst);
    if ((result & 0x80000000) == 0)
      return ssftstring_AppendCStr(a1, "]");
  }
  return result;
}

uint64_t log_output_tree(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t *a12)
{
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t appended;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v48[16];
  char __dst[64];
  char __s2[64];
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v19 = ssftstring_Clear(a3);
  if ((v19 & 0x80000000) == 0 && get_name_of_symbol(SF_symbol_file, a12, *(_QWORD *)a4, (uint64_t)__s2))
  {
    v20 = *(_DWORD *)(a4 + 32);
    if (v20)
    {
      if (v20 == 1)
      {
        if (!(_DWORD)a5 || __s2[0] != 95)
        {
          cstdlib_strcpy(__dst, "<");
          cstdlib_strcat(__dst, __s2);
          if ((_DWORD)a5 != 1)
          {
            cstdlib_strcat(__dst, ".");
            LH_itoa(*(_DWORD *)(a4 + 8), v48, 0xAu);
            cstdlib_strcat(__dst, v48);
          }
          cstdlib_strcat(__dst, ">");
          appended = ssftstring_AppendCStr(a3, __dst);
          if ((appended & 0x80000000) != 0)
            return appended;
          if (a11 == 1)
          {
            cstdlib_strcpy(__dst, "(");
            LH_itoa(*(_DWORD *)(a4 + 80), v48, 0xAu);
            cstdlib_strcat(__dst, v48);
            cstdlib_strcat(__dst, ")");
            appended = ssftstring_AppendCStr(a3, __dst);
            if ((appended & 0x80000000) != 0)
              return appended;
          }
          if (a6 == 1)
          {
            appended = log_output_attribute(a3, *(_QWORD *)(a4 + 24));
            if ((appended & 0x80000000) != 0)
              return appended;
          }
          if (a7 == 1)
          {
            appended = log_output_cost(a3, a4);
            if ((appended & 0x80000000) != 0)
              return appended;
          }
        }
        v37 = *(_QWORD *)(a1 + 32);
        v38 = ssftstring_CStr(a3);
        log_OutText(v37, a2, 5, 0, (uint64_t)"[A*] %s", v39, v40, v41, v38);
        appended = ssftstring_Clear(a3);
        if ((appended & 0x80000000) != 0)
          return appended;
        v27 = *(_QWORD *)(a4 + 48);
        v28 = a1;
        v29 = a2;
        v30 = a3;
        v31 = a5;
      }
      else
      {
        if (v20 != 2)
        {
LABEL_58:
          v42 = *(_QWORD *)(a1 + 32);
          v43 = ssftstring_CStr(a3);
          log_OutText(v42, a2, 5, 0, (uint64_t)"[A*] %s", v44, v45, v46, v43);
          return ssftstring_Clear(a3);
        }
        if (!(_DWORD)a5 || __s2[0] != 95)
        {
          cstdlib_strcpy(__dst, "<");
          cstdlib_strcat(__dst, __s2);
          if ((_DWORD)a5 != 1)
          {
            cstdlib_strcat(__dst, ".");
            LH_itoa(*(_DWORD *)(a4 + 8), v48, 0xAu);
            cstdlib_strcat(__dst, v48);
          }
          cstdlib_strcat(__dst, ">");
          appended = ssftstring_AppendCStr(a3, __dst);
          if ((appended & 0x80000000) != 0)
            return appended;
          if (a11 == 1)
          {
            cstdlib_strcpy(__dst, "(");
            LH_itoa(*(_DWORD *)(a4 + 80), v48, 0xAu);
            cstdlib_strcat(__dst, v48);
            cstdlib_strcat(__dst, ")");
            appended = ssftstring_AppendCStr(a3, __dst);
            if ((appended & 0x80000000) != 0)
              return appended;
          }
          if (a6 == 1)
          {
            appended = log_output_attribute(a3, *(_QWORD *)(a4 + 24));
            if ((appended & 0x80000000) != 0)
              return appended;
          }
          if (a7 == 1)
          {
            appended = log_output_cost(a3, a4);
            if ((appended & 0x80000000) != 0)
              return appended;
          }
        }
        v21 = *(_QWORD *)(a1 + 32);
        v22 = ssftstring_CStr(a3);
        log_OutText(v21, a2, 5, 0, (uint64_t)"[A*] %s", v23, v24, v25, v22);
        appended = ssftstring_Clear(a3);
        if ((appended & 0x80000000) != 0)
          return appended;
        appended = log_output_tree(a1, a2, a3, *(_QWORD *)(a4 + 40), a5);
        if ((appended & 0x80000000) != 0)
          return appended;
        v27 = *(_QWORD *)(a4 + 48);
        v28 = a1;
        v29 = a2;
        v30 = a3;
        v31 = a5;
      }
      appended = log_output_tree(v28, v29, v30, v27, v31);
      if ((appended & 0x80000000) == 0)
        goto LABEL_58;
    }
    else
    {
      cstdlib_strcpy(__dst, "<");
      cstdlib_strcat(__dst, __s2);
      if ((_DWORD)a5 != 1)
      {
        cstdlib_strcat(__dst, ".");
        LH_itoa(*(_DWORD *)(a4 + 8), v48, 0xAu);
        cstdlib_strcat(__dst, v48);
      }
      cstdlib_strcat(__dst, ">");
      appended = ssftstring_AppendCStr(a3, __dst);
      if ((appended & 0x80000000) == 0)
      {
        if (a11 != 1
          || (cstdlib_strcpy(__dst, "("),
              LH_itoa(*(_DWORD *)(a4 + 80), v48, 0xAu),
              cstdlib_strcat(__dst, v48),
              cstdlib_strcat(__dst, ")"),
              appended = ssftstring_AppendCStr(a3, __dst),
              (appended & 0x80000000) == 0))
        {
          if (a6 != 1 || (appended = log_output_attribute(a3, *(_QWORD *)(a4 + 24)), (appended & 0x80000000) == 0))
          {
            if (a7 != 1 || (appended = log_output_cost(a3, a4), (appended & 0x80000000) == 0))
            {
              appended = ssftstring_AppendCStr(a3, "(");
              if ((appended & 0x80000000) == 0)
              {
                v32 = *(_QWORD *)(a4 + 48);
                if (v32)
                {
                  v33 = 0;
                  do
                  {
                    if ((v33 & 1) != 0)
                    {
                      appended = ssftstring_AppendCStr(a3, ",");
                      if ((appended & 0x80000000) != 0)
                        return appended;
                    }
                    appended = ssftstring_AppendCStr(a3, *(char **)v32);
                    if ((appended & 0x80000000) != 0)
                      return appended;
                    appended = ssftstring_AppendCStr(a3, ":\"");
                    if ((appended & 0x80000000) != 0)
                      return appended;
                    appended = log_mbs_fput_sjis(a3, *(int **)(v32 + 8));
                    if ((appended & 0x80000000) != 0)
                      return appended;
                    appended = ssftstring_AppendCStr(a3, "\"");
                    if ((appended & 0x80000000) != 0)
                      return appended;
                    v32 = *(_QWORD *)(v32 + 16);
                    v33 = 1;
                  }
                  while (v32);
                }
                appended = ssftstring_AppendCStr(a3, ")");
                if ((appended & 0x80000000) == 0)
                {
                  v34 = *(_QWORD *)(a4 + 48);
                  while (1)
                  {
                    v34 = *(_QWORD *)(v34 + 24);
                    if (!v34)
                      goto LABEL_58;
                    cstdlib_strcpy(__dst, "<");
                    cstdlib_strcat(__dst, __s2);
                    if ((_DWORD)a5 != 1)
                    {
                      cstdlib_strcat(__dst, ".");
                      LH_itoa(*(_DWORD *)(a4 + 8), v48, 0xAu);
                      cstdlib_strcat(__dst, v48);
                    }
                    cstdlib_strcat(__dst, ">");
                    appended = ssftstring_AppendCStr(a3, __dst);
                    if ((appended & 0x80000000) != 0)
                      return appended;
                    if (a11 == 1)
                    {
                      cstdlib_strcpy(__dst, "(");
                      LH_itoa(*(_DWORD *)(a4 + 80), v48, 0xAu);
                      cstdlib_strcat(__dst, v48);
                      cstdlib_strcat(__dst, ")");
                      appended = ssftstring_AppendCStr(a3, __dst);
                      if ((appended & 0x80000000) != 0)
                        return appended;
                    }
                    if (a6 == 1)
                    {
                      appended = log_output_attribute(a3, *(_QWORD *)(a4 + 24));
                      if ((appended & 0x80000000) != 0)
                        return appended;
                    }
                    if (a7 == 1)
                    {
                      appended = log_output_cost(a3, a4);
                      if ((appended & 0x80000000) != 0)
                        return appended;
                    }
                    v35 = *(_QWORD *)(a4 + 48);
                    if (v35)
                    {
                      v36 = 0;
                      do
                      {
                        if ((v36 & 1) != 0)
                        {
                          appended = ssftstring_AppendCStr(a3, ",");
                          if ((appended & 0x80000000) != 0)
                            return appended;
                        }
                        appended = ssftstring_AppendCStr(a3, *(char **)v35);
                        if ((appended & 0x80000000) != 0)
                          return appended;
                        appended = ssftstring_AppendCStr(a3, ":\"");
                        if ((appended & 0x80000000) != 0)
                          return appended;
                        appended = log_mbs_fput_sjis(a3, *(int **)(v35 + 8));
                        if ((appended & 0x80000000) != 0)
                          return appended;
                        appended = ssftstring_AppendCStr(a3, "\"");
                        if ((appended & 0x80000000) != 0)
                          return appended;
                        v35 = *(_QWORD *)(v35 + 16);
                        v36 = 1;
                      }
                      while (v35);
                    }
                    v19 = ssftstring_AppendCStr(a3, ")");
                    if ((v19 & 0x80000000) != 0)
                      return v19;
                  }
                }
              }
            }
          }
        }
      }
    }
    return appended;
  }
  return v19;
}

uint64_t add_unit_product(_QWORD *a1, int a2, _DWORD *a3, int a4, int a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t *a10, _QWORD *a11)
{
  uint64_t leading_tree;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  int v21;
  uint64_t next_grammar_right;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v36;
  int v39;
  uint64_t grammar_right;
  __int128 *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  leading_tree = cyk_hash_get_leading_tree(a1, a4, a5);
  v18 = 1;
  if (leading_tree)
  {
    v19 = (_QWORD *)leading_tree;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v41 = 0;
    if (a4)
      v20 = 0;
    else
      v20 = a2 - 1 == a5;
    v21 = v20;
    v39 = v21;
    while (1)
    {
      *((_QWORD *)&v42 + 1) = -1;
      *(_QWORD *)&v43 = *v19;
      v41 = &v42;
      grammar_right = find_grammar_right((uint64_t *)&v41);
      if (grammar_right != -1)
        break;
LABEL_31:
      v19 = (_QWORD *)v19[11];
      if (!v19)
        return 1;
    }
    next_grammar_right = grammar_right - 1;
    v36 = v19;
    while (1)
    {
      v23 = heap_Alloc((uint64_t)a11, 96);
      if (!v23)
        return 0;
      v24 = (uint64_t *)v23;
      v25 = (uint64_t)v41;
      *(_QWORD *)v23 = *(_QWORD *)v41;
      *(_QWORD *)(v23 + 24) = 0;
      *(_DWORD *)(v23 + 32) = 1;
      *(_QWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = v19;
      *(_QWORD *)(v23 + 88) = 0;
      *(_QWORD *)(v23 + 8) = -1;
      *(_DWORD *)(v23 + 16) = *(_QWORD *)(v25 + 32);
      v26 = *(_QWORD *)(v25 + 72);
      if ((v26 == -1 || *(_DWORD *)(a6 + 44) == 1 || eval_cond(*(_QWORD *)*(&AC_pac + v26), v23) == 1)
        && (*(_DWORD *)(a6 + 32) != 1 || is_internal(*v24) == 1 || *v24 == a8))
      {
        v27 = cyk_hash_get_leading_tree(a1, a4, a5);
        if (v27)
        {
          do
          {
            v28 = v27;
            v27 = *(_QWORD *)(v27 + 88);
          }
          while (v27);
          *(_QWORD *)(v28 + 88) = v24;
        }
        else if ((cyk_hash_add_leading_tree(a1, (uint64_t)v24, a4, a5, (uint64_t)a11) & 0x1FFF) == 0xA)
        {
          return 0;
        }
        v29 = (uint64_t)v41;
        if (v39 && *(_QWORD *)v41 == a8)
        {
          v30 = a8;
          v31 = *a7;
          v32 = tree_duplicate((uint64_t)v24, a6, a10, a11);
          v33 = v31;
          a8 = v30;
          *a7 = tree_append(v33, (uint64_t)v32);
          v19 = v36;
          ++*a3;
          v29 = (uint64_t)v41;
        }
        v34 = *(_QWORD *)(v29 + 72);
        if (v34 != -1
          && !*(_DWORD *)(a6 + 44)
          && !exec_actions(*((_QWORD *)*(&AC_pac + v34) + 1), (uint64_t)v24, (uint64_t)a11))
        {
          return 0;
        }
      }
      else
      {
        heap_Free(a11, (uint64_t)v24);
      }
      next_grammar_right = find_next_grammar_right(&v41, grammar_right, next_grammar_right);
      if (next_grammar_right == -1)
        goto LABEL_31;
    }
  }
  return v18;
}

uint64_t check_left_upper(_QWORD *a1, int a2, uint64_t a3, int a4, uint64_t a5, _DWORD *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t *a10, _QWORD *a11)
{
  int v13;
  uint64_t v14;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t next_grammar_right;
  uint64_t result;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  int v41;
  int v42;
  int v44;
  int v45;
  int v46;
  int v47;
  int v50;
  uint64_t grammar_right;
  _QWORD *leading_tree;
  __int128 *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;

  if ((a3 & 0x80000000) != 0)
    return 0;
  v13 = a4;
  v14 = a3;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v53 = 0;
  v16 = ~a4;
  v45 = a2 - 1;
  v42 = ~a4;
  do
  {
    v17 = v13 + v16;
    if (v13 + v16 >= 0)
    {
      v44 = v14 + 1;
      if ((_DWORD)v14)
        v18 = 0;
      else
        v18 = v13 == v45;
      v19 = v18;
      v50 = v19;
      v47 = v13;
      do
      {
        v46 = v17;
        leading_tree = (_QWORD *)cyk_hash_get_leading_tree(a1, v14, v17);
        if (leading_tree)
        {
          v20 = v44 + v46;
          v21 = v13 + ~v46;
          v41 = v21;
          while (2)
          {
            v22 = cyk_hash_get_leading_tree(a1, v20, v21);
            if (v22)
            {
              v23 = (_QWORD *)v22;
              do
              {
                *((_QWORD *)&v54 + 1) = *leading_tree;
                *(_QWORD *)&v55 = *v23;
                v53 = &v54;
                grammar_right = find_grammar_right((uint64_t *)&v53);
                if (grammar_right != -1)
                {
                  next_grammar_right = grammar_right - 1;
                  do
                  {
                    result = heap_Alloc((uint64_t)a11, 96);
                    if (!result)
                      return result;
                    v26 = (uint64_t *)result;
                    v27 = (uint64_t)v53;
                    *(_QWORD *)result = *(_QWORD *)v53;
                    *(_DWORD *)(result + 8) = -1;
                    *(_QWORD *)(result + 24) = 0;
                    *(_DWORD *)(result + 32) = 2;
                    *(_QWORD *)(result + 40) = leading_tree;
                    *(_QWORD *)(result + 48) = v23;
                    *(_QWORD *)(result + 88) = 0;
                    *(int32x2_t *)(result + 12) = vmovn_s64(*(int64x2_t *)(v27 + 24));
                    v28 = *(_QWORD *)(v27 + 72);
                    if ((v28 == -1 || eval_cond(*(_QWORD *)*(&AC_pac + v28), result) == 1)
                      && (*(_DWORD *)(a5 + 32) != 1 || is_internal(*v26) == 1 || *v26 == a8))
                    {
                      v29 = cyk_hash_get_leading_tree(a1, v14, v13);
                      if (v29)
                      {
                        do
                        {
                          v30 = v29;
                          v29 = *(_QWORD *)(v29 + 88);
                        }
                        while (v29);
                        *(_QWORD *)(v30 + 88) = v26;
                      }
                      else if ((cyk_hash_add_leading_tree(a1, (uint64_t)v26, v14, v13, (uint64_t)a11) & 0x1FFF) == 0xA)
                      {
                        return 0;
                      }
                      v31 = (uint64_t)v53;
                      if (v50 && *(_QWORD *)v53 == a8)
                      {
                        v32 = a1;
                        v33 = v14;
                        v34 = a8;
                        v35 = *a7;
                        v36 = tree_duplicate((uint64_t)v26, a5, a10, a11);
                        v37 = v35;
                        a8 = v34;
                        v14 = v33;
                        a1 = v32;
                        *a7 = tree_append(v37, (uint64_t)v36);
                        v13 = v47;
                        ++*a6;
                        v31 = (uint64_t)v53;
                      }
                      v38 = *(_QWORD *)(v31 + 72);
                      if (v38 != -1)
                      {
                        result = exec_actions(*((_QWORD *)*(&AC_pac + v38) + 1), (uint64_t)v26, (uint64_t)a11);
                        if (!(_DWORD)result)
                          return result;
                      }
                    }
                    else
                    {
                      heap_Free(a11, (uint64_t)v26);
                    }
                    next_grammar_right = find_next_grammar_right(&v53, grammar_right, next_grammar_right);
                  }
                  while (next_grammar_right != -1);
                }
                v23 = (_QWORD *)v23[11];
              }
              while (v23);
              leading_tree = (_QWORD *)leading_tree[11];
              v21 = v41;
              v20 = v44 + v46;
              if (leading_tree)
                continue;
            }
            break;
          }
        }
        v17 = v46 - 1;
      }
      while (v46 > 0);
    }
    result = add_unit_product(a1, a2, a6, v14, v13, a5, a7, a8, v40, a10, a11);
    if (!(_DWORD)result)
      break;
    ++v13;
    result = 1;
    v39 = (int)v14 <= 0;
    v14 = (v14 - 1);
    v16 = v42;
  }
  while (!v39);
  return result;
}

uint64_t fill_up_table(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t *a8, _QWORD *a9)
{
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;

  result = 0;
  v18 = 0;
  if ((int)a2 < a3)
  {
    v16 = a2;
    while (1)
    {
      result = check_left_upper(a1, a3, v16, 0, a4, &v18, a5, a6, v17, a8, a9);
      if (!(_DWORD)result)
        break;
      v16 = (v16 + 1);
      if (a3 == (_DWORD)v16)
        return v18;
    }
  }
  return result;
}

uint64_t parse_cyk(uint64_t a1, _QWORD *a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t *a6, _QWORD *a7)
{
  int v8;
  uint64_t result;
  uint64_t v10;

  v10 = 0;
  v8 = fill_up_table(a2, 0, a3, a1, &v10, a4, (uint64_t)a7, a6, a7);
  result = parser_result_create(1, v10, (uint64_t)a7);
  *(_QWORD *)(result + 16) = v8;
  return result;
}

double partial_tree_create_as_step(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v13;
  double result;
  int v15;

  v13 = heap_Alloc(a7, 96);
  if (v13)
  {
    *(_QWORD *)v13 = a5;
    *(_QWORD *)(v13 + 24) = 0;
    if (a3)
      v15 = 2;
    else
      v15 = 1;
    *(_DWORD *)(v13 + 32) = v15;
    result = NAN;
    *(_QWORD *)(v13 + 8) = -1;
    *(_QWORD *)(v13 + 40) = a3;
    *(_QWORD *)(v13 + 48) = a4;
    *(_QWORD *)(v13 + 88) = 0;
    *(_DWORD *)(v13 + 16) = -1;
    *(_DWORD *)(v13 + 72) = a1;
    *(_DWORD *)(v13 + 76) = a2;
    *(_DWORD *)(v13 + 80) = a6;
    *(_QWORD *)(v13 + 56) = 0;
    *(_QWORD *)(v13 + 64) = 0;
  }
  return result;
}

uint64_t connect_terminals(int *a1, int a2, int a3, _QWORD *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t leading_tree;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  int v35;
  __int16 v36;
  __int16 v38;
  __int16 v40;
  int v41;
  uint64_t v43;

  if (a2 >= a5)
    return 0;
  v15 = 0;
  v43 = a3;
  v16 = a3 - 1;
  v17 = a2;
  v41 = a5;
  do
  {
    v18 = ~v17 + a5;
    if (v18 < 0)
      goto LABEL_28;
    while (1)
    {
      leading_tree = cyk_hash_get_leading_tree(a4, v17, v18);
      if (leading_tree)
        break;
LABEL_15:
      if (v18-- <= 0)
      {
        v18 = -1;
        goto LABEL_24;
      }
    }
    v20 = leading_tree;
    v21 = *(_QWORD *)(a8 + 8 * v43);
    while (1)
    {
      v22 = *(_QWORD *)v20;
      if (*(_QWORD *)v20 == a7 || v22 == v21)
      {
        v33 = v17 + ~a2;
        goto LABEL_32;
      }
      if (!a3)
        break;
      if (*(_QWORD *)(a8 + 8 * v16) == v22)
        goto LABEL_18;
LABEL_14:
      v20 = *(_QWORD *)(v20 + 88);
      if (!v20)
        goto LABEL_15;
    }
    if (*(_DWORD *)(v20 + 32))
      goto LABEL_14;
LABEL_18:
    v25 = *(_QWORD *)(a9 + 8 * v43);
    if (v15)
    {
      v26 = v17 - a2 + 1 + v18;
      partial_tree_create_as_step(a2, v26, v15, v20, v25, a3, (uint64_t)a10);
      if (!v27)
        return 0;
      v15 = v27;
      v28 = add_partial_tree_checking_FI(a4, v27, a2, v26, *(_DWORD *)(a6 + 52), (uint64_t)a10);
      if ((v28 & 0x80000000) == 0)
        goto LABEL_24;
      v38 = v28;
      heap_Free(a10, v15);
      v15 = 0;
      v31 = 0;
      v32 = (v38 & 0x1FFF) == 10;
LABEL_27:
      a5 = v41;
      if (v32)
        return v31;
    }
    else
    {
      partial_tree_create_as_step(a2, v18, 0, v20, v25, a3, (uint64_t)a10);
      if (!v29)
        return 0;
      v15 = v29;
      v30 = add_partial_tree_checking_FI(a4, v29, a2, v18, *(_DWORD *)(a6 + 52), (uint64_t)a10);
      if (v30 < 0)
      {
        v40 = v30;
        heap_Free(a10, v15);
        v15 = 0;
        v31 = 0;
        v32 = (v40 & 0x1FFF) == 10;
        goto LABEL_27;
      }
LABEL_24:
      a5 = v41;
    }
LABEL_28:
    v17 += v18 + 1;
  }
  while (v17 < a5);
  v33 = v17 + ~a2;
  v21 = *(_QWORD *)(a8 + 8 * v43);
LABEL_32:
  partial_tree_create_as_step(a2, v33, 0, v15, v21, a3 + 1, (uint64_t)a10);
  v31 = v34;
  if (v34)
  {
    v35 = add_partial_tree_checking_FI(a4, v34, a2, v33, *(_DWORD *)(a6 + 52), (uint64_t)a10);
    if ((v35 & 0x80000000) == 0 || (v36 = v35, heap_Free(a10, v31), v31 = 0, (v36 & 0x1FFF) != 0xA))
      *a1 = v17;
  }
  return v31;
}

uint64_t max_len_parse(int a1, int a2, _QWORD *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, _QWORD *a12, _QWORD *a13)
{
  _QWORD *v21;
  int v22;
  int v23;
  uint64_t leading_tree;
  uint64_t v25;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;

  v21 = 0;
  v41 = a1;
  v42 = 0;
  *a13 = 0;
  if (a1 == 1)
  {
    v21 = jp_tree_create(*(_QWORD *)(a10 + 8 * a2), (const char *)(a5 + ((uint64_t)a2 << 6) + 976), 0, 0, 0, 0, a12);
    if (!v21)
      return 2350915840;
  }
  v37 = a2;
  v38 = v21;
  v39 = a5;
  if (a4 >= 1)
  {
    v22 = 0;
    v40 = v37 + 1;
    do
    {
      v23 = ~v22 + a4;
      if (v23 < 0)
      {
LABEL_15:
        v28 = connect_terminals(&v42, v22, v37, a3, a4, v39, a7, a8, a9, a12);
        if (!v28)
          goto LABEL_33;
        v29 = v28;
        *(_DWORD *)(v28 + 80) = v40;
        *(_QWORD *)(a6 + 8) = as_list_insert(v28, *(_QWORD **)(a6 + 8), (uint64_t)a12);
        if (v41 == 1)
        {
          v30 = tree_duplicate(v29, v39, a11, a12);
          if (!v30)
            goto LABEL_33;
          v31 = (uint64_t)v30;
          v32 = v38[4];
          if (v32)
          {
            if (!tree_append(v32, v31))
              goto LABEL_33;
          }
          else
          {
            v38[4] = v31;
          }
        }
        v22 = v42;
      }
      else
      {
        while (1)
        {
          leading_tree = cyk_hash_get_leading_tree(a3, v22, v23);
          if (leading_tree)
            break;
LABEL_13:
          if (v23-- <= 0)
            goto LABEL_15;
        }
        v25 = leading_tree;
        while (*(_QWORD *)v25 != a7 && *(_QWORD *)v25 != *(_QWORD *)(a8 + 8 * v37))
        {
          v25 = *(_QWORD *)(v25 + 88);
          if (!v25)
            goto LABEL_13;
        }
        *(_DWORD *)(v25 + 80) = v40;
        *(_QWORD *)(a6 + 8) = as_list_insert(v25, *(_QWORD **)(a6 + 8), (uint64_t)a12);
        if (v41 == 1)
        {
          v33 = tree_duplicate(v25, v39, a11, a12);
          if (!v33 && *(_QWORD *)v25 != a7)
          {
LABEL_33:
            v35 = 2350915840;
            jpe_FreeTree(v38, a12);
            return v35;
          }
          v34 = v38[4];
          if (v34)
          {
            if (!tree_append(v34, (uint64_t)v33))
              goto LABEL_33;
          }
          else
          {
            v38[4] = v33;
          }
        }
        v22 += v23 + 1;
      }
    }
    while (v22 < a4);
  }
  v35 = 0;
  *a13 = v38;
  return v35;
}

uint64_t as_list_delete_min(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  while (a2)
  {
    v4 = a2;
    v5 = a1;
    a2 = (_QWORD *)a2[1];
    a1 = v4;
    if (!a2)
    {
      v6 = *v4;
      v5[1] = v4[2];
      heap_Free(a3, (uint64_t)v4);
      return v6;
    }
  }
  return 0;
}

_QWORD *as_list_create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;

  result = (_QWORD *)heap_Alloc(a4, 24);
  if (result)
  {
    *result = a1;
    result[1] = a2;
    result[2] = a3;
  }
  return result;
}

_QWORD *as_list_insert(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;

  if (a2)
  {
    v4 = a2;
    if (*(_QWORD *)(a1 + 56) <= *(_QWORD *)(*a2 + 56))
      a2[1] = as_list_insert(a1, a2[1]);
    else
      a2[2] = as_list_insert(a1, a2[2]);
  }
  else
  {
    v5 = (_QWORD *)heap_Alloc(a3, 24);
    v4 = v5;
    if (v5)
    {
      v5[1] = 0;
      v5[2] = 0;
      *v5 = a1;
    }
  }
  return v4;
}

uint64_t as_list_get_min(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  while (1)
  {
    result = a2;
    if (!a2)
      break;
    v4 = a1;
    a2 = *(_QWORD *)(a2 + 8);
    a1 = result;
    if (!a2)
    {
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(result + 16);
      return result;
    }
  }
  return result;
}

_QWORD *as_list_delete_one(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
    return 0;
  if (*a1 == a2)
  {
    v4 = a1[1];
    v5 = a1[2];
    if (v5)
    {
      if (v4)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          v7 = a1[2];
          do
          {
            v4 = v6;
            v8 = v7;
            v6 = *(_QWORD *)(v6 + 8);
            v7 = v4;
          }
          while (v6);
          *(_QWORD *)(v8 + 8) = *(_QWORD *)(v4 + 16);
          *(_QWORD *)(v4 + 8) = a1[1];
          *(_QWORD *)(v4 + 16) = v5;
          goto LABEL_12;
        }
        *(_QWORD *)(v5 + 8) = v4;
      }
      heap_Free(a3, (uint64_t)a1);
      return (_QWORD *)v5;
    }
LABEL_12:
    heap_Free(a3, (uint64_t)a1);
    return (_QWORD *)v4;
  }
  if (*(_QWORD *)(a2 + 56) <= *(_QWORD *)(*a1 + 56))
    a1[1] = as_list_delete_one(a1[1]);
  else
    a1[2] = as_list_delete_one(a1[2]);
  return a1;
}

uint64_t get_word_cost(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  if (!a1)
    return -1;
  v3 = a1;
  while (cstdlib_strcmp(*(const char **)v3, "PROB"))
  {
    v3 = *(_QWORD *)(v3 + 16);
    if (!v3)
      return -1;
  }
  v5 = mbs_len_bytes(*(_QWORD *)(v3 + 8)) + 1;
  v6 = heap_Alloc((uint64_t)a2, v5);
  if (v6)
  {
    v7 = (unsigned __int8 *)v6;
    if (mbs2sjis(*(_QWORD *)(v3 + 8), 0, *(_DWORD *)(*(_QWORD *)(v3 + 8) + 8), v6, v5) != -1)
      return (int)cstdlib_atoi(v7);
    heap_Free(a2, (uint64_t)v7);
  }
  return -1;
}

_QWORD *cyk2as_list(_QWORD *a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v8;
  int v9;
  int v10;
  uint64_t leading_tree;
  uint64_t *v12;
  uint64_t word_cost;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  _QWORD *v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;

  v28 = (_QWORD *)heap_Alloc((uint64_t)a4, 24);
  if (!v28)
    return v28;
  *v28 = 0;
  v28[1] = 0;
  v28[2] = 0;
  if (a2 < 1)
    return v28;
  v8 = 0;
  v9 = a2;
  do
  {
    if (v8 < a2)
    {
      v10 = 0;
      do
      {
        leading_tree = cyk_hash_get_leading_tree(a1, v8, v10);
        if (leading_tree)
        {
          v12 = (uint64_t *)leading_tree;
          do
          {
            if (*(_DWORD *)(a3 + 64) == 1)
              word_cost = 0;
            else
              word_cost = get_word_cost(v12[6], a4);
            v12[8] = word_cost;
            v12[7] = v12[8] + get_me_terminal(*v12);
            v28[1] = as_list_insert((uint64_t)v12, (_QWORD *)v28[1], (uint64_t)a4);
            v12 = (uint64_t *)v12[11];
          }
          while (v12);
        }
        ++v10;
      }
      while (v10 != v9);
    }
    ++v8;
    --v9;
  }
  while (v8 != a2);
  v31 = a2 - 2;
  v34 = a2;
  v29 = a2;
  v30 = 1;
  while (2)
  {
    v14 = 0;
    v33 = v34--;
    v32 = 1;
    v35 = v33;
    do
    {
      v15 = cyk_hash_get_leading_tree(a1, v14, v34);
      if (v15)
      {
        v16 = (uint64_t *)v15;
        v36 = v14;
        while (v33 < 2)
        {
LABEL_39:
          v16 = (uint64_t *)v16[11];
          if (!v16)
            goto LABEL_40;
        }
        v17 = v31;
        v18 = v32;
        while (1)
        {
          v19 = v14 <= v18 ? v18 : v14;
          if (v34 - v17 >= 0)
            break;
LABEL_38:
          --v17;
          ++v18;
          v14 = v36;
          if (v18 == v35)
            goto LABEL_39;
        }
        v20 = 100 * (v34 - v17);
        v21 = v36;
        while (1)
        {
          v22 = cyk_hash_get_leading_tree(a1, v21, v17);
          if (v22)
            break;
LABEL_36:
          v26 = v21++ == v19;
          if (v26)
            goto LABEL_38;
        }
        v23 = (uint64_t *)v22;
        while (is_expensive_pos(*v23, *(_QWORD *)(a3 + 56)))
        {
          v24 = v23 + 8;
          if (v23[8] < v20)
          {
            v23[8] = v20;
            v25 = *v23;
LABEL_30:
            *v24 += get_me_terminal(v25);
          }
LABEL_35:
          v23 = (uint64_t *)v23[11];
          if (!v23)
            goto LABEL_36;
        }
        if (is_expensive_pos(*v16, *(_QWORD *)(a3 + 56)))
          goto LABEL_35;
        v25 = *v16;
        if (*v16 != *v23)
          goto LABEL_35;
        v24 = v23 + 8;
        if (v23[8] >= v20)
          goto LABEL_35;
        *v24 = v20;
        goto LABEL_30;
      }
LABEL_40:
      ++v14;
      ++v32;
      ++v35;
    }
    while (v14 != v30);
    --v31;
    v26 = v30++ == v29;
    if (!v26)
      continue;
    return v28;
  }
}

uint64_t is_expensive_pos(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const char *pointer_of_symbol;

  if (!a2)
    return 0;
  v2 = a2;
  while (1)
  {
    pointer_of_symbol = (const char *)get_pointer_of_symbol((uint64_t)SF_symbol_file, a1);
    if (pointer_of_symbol)
    {
      if (!cstdlib_strcmp(pointer_of_symbol, *(const char **)v2))
        break;
    }
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      return 0;
  }
  return 1;
}

_QWORD *as_list_free_all(_QWORD *result, _QWORD *a2)
{
  uint64_t v3;

  if (result)
  {
    v3 = (uint64_t)result;
    as_list_free_all(result[1]);
    as_list_free_all(*(_QWORD *)(v3 + 16));
    return heap_Free(a2, v3);
  }
  return result;
}

uint64_t add_partial_tree_checking_FI(_QWORD *a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t leading_tree;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  leading_tree = cyk_hash_get_leading_tree(a1, a3, a4);
  if (!leading_tree)
    return cyk_hash_add_leading_tree(a1, a2, a3, a4, a6);
  v13 = leading_tree;
  result = 2350907394;
  v15 = *(_QWORD *)(v13 + 88);
  if (v15)
  {
    v16 = 0;
    while (1)
    {
      v17 = v13;
      v13 = v15;
      if (*(_QWORD *)v17 == *(_QWORD *)a2)
      {
        v18 = *(_DWORD *)(v17 + 32);
        if (v18 == *(_DWORD *)(a2 + 32)
          && (v18 == 1 || v18 == 2 && *(_QWORD *)(v17 + 40) == *(_QWORD *)(a2 + 40))
          && *(_QWORD *)(v17 + 48) == *(_QWORD *)(a2 + 48))
        {
          break;
        }
      }
      ++v16;
      v15 = *(_QWORD *)(v13 + 88);
      if (!v15)
        goto LABEL_14;
    }
  }
  else
  {
    v16 = 0;
LABEL_14:
    if (a5 < 1 || v16 < a5 - 1)
    {
      result = 0;
      *(_QWORD *)(v13 + 88) = a2;
    }
  }
  return result;
}

uint64_t estimate_f(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120);
}

uint64_t cyk_as_make_trees(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, _DWORD *a7, _QWORD *a8)
{
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t grammar_right;
  uint64_t v19;
  uint64_t next_grammar_right;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  *a7 = -1;
  if (a3)
  {
    v13 = *(_DWORD *)(a3 + 72);
    v14 = *(_DWORD *)(a3 + 76) + 1;
    if (v14 + v13 != *((_DWORD *)a4 + 18))
      return 1;
    v15 = v14 + *((_DWORD *)a4 + 19);
    v16 = *(_QWORD *)a3;
  }
  else
  {
    v13 = *((_DWORD *)a4 + 18);
    v15 = *((_DWORD *)a4 + 19);
    v16 = -1;
  }
  v17 = *a4;
  *((_QWORD *)&v40 + 1) = v16;
  *(_QWORD *)&v41 = v17;
  v39 = &v40;
  grammar_right = find_grammar_right((uint64_t *)&v39);
  if (grammar_right == -1)
    return 1;
  v19 = grammar_right;
  v35 = a5;
  next_grammar_right = grammar_right - 1;
  while (1)
  {
    result = heap_Alloc((uint64_t)a8, 96);
    if (!result)
      break;
    v22 = result;
    v23 = (uint64_t)v39;
    *(_QWORD *)result = *(_QWORD *)v39;
    v24 = -1;
    *(_DWORD *)(result + 8) = -1;
    *(_QWORD *)(result + 24) = 0;
    if (a3)
    {
      v24 = *(_DWORD *)(v23 + 24);
      v25 = 2;
    }
    else
    {
      v25 = 1;
    }
    *(_DWORD *)(result + 32) = v25;
    *(_DWORD *)(result + 12) = v24;
    *(_QWORD *)(result + 40) = a3;
    *(_QWORD *)(result + 48) = a4;
    *(_QWORD *)(result + 88) = 0;
    *(_DWORD *)(result + 16) = *(_QWORD *)(v23 + 32);
    *(_DWORD *)(result + 72) = v13;
    *(_DWORD *)(result + 76) = v15;
    v26 = *(_QWORD *)(v23 + 72);
    if (v26 == -1 || *(_DWORD *)(a6 + 44) == 1 || eval_cond(*(_QWORD *)*(&AC_pac + v26), result) == 1)
    {
      if (a3)
      {
        v27 = a4[8] + *(_QWORD *)(a3 + 64);
        v28 = (uint64_t)v39;
        v29 = (_QWORD *)v39 + 11;
      }
      else
      {
        v28 = (uint64_t)v39;
        v27 = *((_QWORD *)v39 + 11);
        v29 = a4 + 8;
      }
      v30 = v27 + *v29;
      *(_QWORD *)(v22 + 64) = v30;
      *(_QWORD *)(v22 + 56) = v30 + *(_QWORD *)(v28 + 120);
      v31 = add_partial_tree_checking_FI(a1, v22, v13, v15, *(_DWORD *)(a6 + 52), (uint64_t)a8);
      if (v31 < 0)
      {
        v34 = v31;
        heap_Free(a8, v22);
        if ((v34 & 0x1FFF) == 0xA)
          return 0;
      }
      else
      {
        *(_QWORD *)(a2 + 8) = as_list_insert(v22, *(_QWORD **)(a2 + 8), (uint64_t)a8);
        v32 = *((_QWORD *)v39 + 9);
        if (v32 != -1 && !*(_DWORD *)(a6 + 44))
        {
          result = exec_actions(*((_QWORD *)*(&AC_pac + v32) + 1), v22, (uint64_t)a8);
          if (!(_DWORD)result)
            return result;
        }
        if (!*(_DWORD *)(v22 + 72))
        {
          v33 = *(_DWORD *)(v22 + 76);
          if (v33 > *a7 && *(_QWORD *)v22 == v35)
            *a7 = v33;
        }
      }
    }
    else
    {
      heap_Free(a8, v22);
    }
    next_grammar_right = find_next_grammar_right(&v39, v19, next_grammar_right);
    if (next_grammar_right == -1)
      return 1;
  }
  return result;
}

uint64_t parse_cyk_as(_DWORD *a1, _QWORD *a2, int a3, uint64_t a4, uint64_t a5, uint64_t *a6, _QWORD *a7)
{
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t leading_tree;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  int v39;

  v39 = 0;
  v13 = cyk2as_list(a2, a3, (uint64_t)a1, a7);
  if (v13)
  {
    v14 = v13;
    v15 = 0;
    v16 = 0;
    v38 = 0;
    while (1)
    {
      do
      {
        v17 = (uint64_t *)v14[1];
        v18 = v14;
        do
        {
          if (!v17)
            goto LABEL_38;
          v19 = v17;
          v20 = v18;
          v17 = (uint64_t *)v17[1];
          v18 = v19;
        }
        while (v17);
        v21 = *v19;
        v20[1] = v19[2];
        heap_Free(a7, (uint64_t)v19);
        if (!v21)
        {
LABEL_38:
          as_list_free_all(v14, a7);
          v33 = 1;
          v34 = v16;
          return parser_result_create(v33, v34, (uint64_t)a7);
        }
        v22 = *(_DWORD *)(v21 + 72);
        if (!v22)
        {
          if (*(_DWORD *)(v21 + 76) == a3 - 1 && *(_QWORD *)v21 == a4)
          {
            v23 = tree_duplicate(v21, (uint64_t)a1, a6, a7);
            v16 = tree_append(v16, (uint64_t)v23);
            if (v38 + 1 >= a1[1])
              goto LABEL_38;
            ++v38;
            v22 = *(_DWORD *)(v21 + 72);
          }
          else
          {
            v22 = 0;
          }
        }
        v24 = a1[67];
        if (v24 < 0)
          break;
        v25 = *(_DWORD *)(v21 + 76) + v22;
        if (v25 >= v15 - v24)
          break;
      }
      while (v25 >= a1[66]);
      v36 = a6;
      v37 = v16;
      if (v22 >= 1)
        break;
LABEL_25:
      v29 = v22 + *(_DWORD *)(v21 + 76) + 1;
      if (v29 < a3)
      {
        v30 = 0;
        while (1)
        {
          leading_tree = cyk_hash_get_leading_tree(a2, v29, v30);
          if (leading_tree)
            break;
LABEL_33:
          ++v30;
          v29 = *(_DWORD *)(v21 + 72) + *(_DWORD *)(v21 + 76) + 1;
          if (v30 >= a3 - v29)
            goto LABEL_34;
        }
        v32 = (uint64_t *)leading_tree;
        while (cyk_as_make_trees(a2, (uint64_t)v14, v21, v32, a4, (uint64_t)a1, &v39, a7))
        {
          if (v39 > v15)
            v15 = v39;
          v32 = (uint64_t *)v32[11];
          if (!v32)
            goto LABEL_33;
        }
        goto LABEL_41;
      }
LABEL_34:
      if (!cyk_as_make_trees(a2, (uint64_t)v14, 0, (uint64_t *)v21, a4, (uint64_t)a1, &v39, a7))
        goto LABEL_41;
      if (v39 > v15)
        v15 = v39;
      a6 = v36;
      v16 = v37;
    }
    v26 = 0;
    while (1)
    {
      v27 = cyk_hash_get_leading_tree(a2, v22 + ~v26, v26);
      if (v27)
        break;
LABEL_24:
      ++v26;
      v22 = *(_DWORD *)(v21 + 72);
      if (v26 >= v22)
        goto LABEL_25;
    }
    v28 = v27;
    while (cyk_as_make_trees(a2, (uint64_t)v14, v28, (uint64_t *)v21, a4, (uint64_t)a1, &v39, a7))
    {
      if (v39 > v15)
        v15 = v39;
      v28 = *(_QWORD *)(v28 + 88);
      if (!v28)
        goto LABEL_24;
    }
LABEL_41:
    v33 = 2;
    v34 = v37;
  }
  else
  {
    v33 = 2;
    v34 = 0;
  }
  return parser_result_create(v33, v34, (uint64_t)a7);
}

_QWORD *set_step_partial_tree(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  int v10;

  v9 = result;
  while (1)
  {
    if (*(_QWORD *)a2 == a3 && *(_DWORD *)(a2 + 80) != (_DWORD)a4)
    {
      *(_DWORD *)(a2 + 80) = a4;
      result = as_list_insert(a2, (_QWORD *)v9[1], a5);
      v9[1] = result;
    }
    v10 = *(_DWORD *)(a2 + 32);
    if (v10 != 1)
      break;
LABEL_8:
    a2 = *(_QWORD *)(a2 + 48);
  }
  if (v10 == 2)
  {
    result = (_QWORD *)set_step_partial_tree(v9, *(_QWORD *)(a2 + 40), a3, a4, a5);
    goto LABEL_8;
  }
  return result;
}

uint64_t cyk_as_make_trees_step(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, int a7, _DWORD *a8, _QWORD *a9)
{
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t grammar_right;
  uint64_t v21;
  uint64_t next_grammar_right;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  __int16 v37;
  int v38;
  uint64_t v39;
  int v42;
  uint64_t *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  *a8 = -1;
  if (a3)
  {
    v15 = *(_DWORD *)(a3 + 72);
    v16 = *(_DWORD *)(a3 + 76) + 1;
    if (v16 + v15 != *((_DWORD *)a4 + 18))
      return 1;
    v17 = v16 + *((_DWORD *)a4 + 19);
    v18 = *(_QWORD *)a3;
  }
  else
  {
    v15 = *((_DWORD *)a4 + 18);
    v17 = *((_DWORD *)a4 + 19);
    v18 = -1;
  }
  v19 = *a4;
  *((_QWORD *)&v44 + 1) = v18;
  *(_QWORD *)&v45 = v19;
  v43 = (uint64_t *)&v44;
  grammar_right = find_grammar_right((uint64_t *)&v43);
  if (grammar_right == -1)
    return 1;
  v21 = grammar_right;
  v39 = a5;
  next_grammar_right = grammar_right - 1;
  v42 = v17;
  while (1)
  {
    result = heap_Alloc((uint64_t)a9, 96);
    if (!result)
      break;
    v24 = result;
    v25 = (uint64_t)v43;
    v26 = *v43;
    *(_QWORD *)v24 = *v43;
    v27 = -1;
    *(_DWORD *)(v24 + 8) = -1;
    *(_QWORD *)(v24 + 24) = 0;
    if (a3)
    {
      v27 = *(_DWORD *)(v25 + 24);
      v28 = 2;
    }
    else
    {
      v28 = 1;
    }
    *(_DWORD *)(v24 + 32) = v28;
    *(_DWORD *)(v24 + 12) = v27;
    *(_QWORD *)(v24 + 40) = a3;
    *(_QWORD *)(v24 + 48) = a4;
    *(_QWORD *)(v24 + 88) = 0;
    *(_DWORD *)(v24 + 16) = *(_QWORD *)(v25 + 32);
    *(_DWORD *)(v24 + 72) = v15;
    *(_DWORD *)(v24 + 76) = v17;
    *(_DWORD *)(v24 + 80) = a7;
    v29 = *(_QWORD *)(v25 + 72);
    if ((!a7 && v29 == -1 || v29 != -1 && *((_DWORD *)*(&AC_pac + v29) + 4) == a7)
      && *((_DWORD *)a4 + 20) == a7
      && (!a3 || *(_DWORD *)(a3 + 80) == a7)
      && (v29 == -1
       || *(_DWORD *)(a6 + 44) == 1
       || is_internal(v26) == 1
       || eval_cond(*(_QWORD *)*(&AC_pac + v43[9]), v24) == 1))
    {
      if (a3)
      {
        v30 = a4[8] + *(_QWORD *)(a3 + 64);
        v31 = (uint64_t)v43;
        v32 = v43 + 11;
      }
      else
      {
        v31 = (uint64_t)v43;
        v30 = v43[11];
        v32 = a4 + 8;
      }
      v33 = v30 + *v32;
      *(_QWORD *)(v24 + 64) = v33;
      *(_QWORD *)(v24 + 56) = v33 + *(_QWORD *)(v31 + 120);
      v34 = a6;
      v35 = add_partial_tree_checking_FI(a1, v24, v15, v42, *(_DWORD *)(a6 + 52), (uint64_t)a9);
      if (v35 < 0)
      {
        v37 = v35;
        heap_Free(a9, v24);
        v38 = v37 & 0x1FFF;
        a6 = v34;
        v17 = v42;
        if (v38 == 10)
          return 0;
      }
      else
      {
        *(_QWORD *)(a2 + 8) = as_list_insert(v24, *(_QWORD **)(a2 + 8), (uint64_t)a9);
        if (v43[9] != -1 && !*(_DWORD *)(a6 + 44) && is_internal(*(_QWORD *)v24) != 1)
        {
          result = exec_actions(*((_QWORD *)*(&AC_pac + v43[9]) + 1), v24, (uint64_t)a9);
          if (!(_DWORD)result)
            return result;
        }
        v17 = v42;
        if (!*(_DWORD *)(v24 + 72))
        {
          v36 = *(_DWORD *)(v24 + 76);
          if (v36 > *a8 && *(_QWORD *)v24 == *(_QWORD *)(v39 + 8 * a7))
            *a8 = v36;
        }
      }
    }
    else
    {
      heap_Free(a9, v24);
    }
    next_grammar_right = find_next_grammar_right(&v43, v21, next_grammar_right);
    if (next_grammar_right == -1)
      return 1;
  }
  return result;
}

uint64_t parse_cyk_as_step(uint64_t a1, _QWORD *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, _QWORD *a10)
{
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t leading_tree;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v63;
  int v64;
  _QWORD *v65;

  v65 = 0;
  v64 = 0;
  v63 = 0;
  v15 = 956;
  LODWORD(v16) = *(_DWORD *)(a1 + 956);
  do
  {
    v17 = *(_DWORD *)(a1 + v15);
    if ((int)v16 <= v17)
      v16 = v17;
    else
      v16 = v16;
    v15 += 4;
  }
  while (v15 != 976);
  v18 = heap_Calloc(a10, 8, v16);
  if (!v18)
    return parser_result_create(2, 0, (uint64_t)a10);
  v19 = v18;
  v20 = cyk2as_list(a2, a3, a1, a10);
  if (!v20)
  {
    v49 = parser_result_create(2, 0, (uint64_t)a10);
    v50 = a10;
    v51 = v19;
LABEL_71:
    heap_Free(v50, v51);
    return v49;
  }
  v21 = v20;
  v57 = a6;
  v58 = 0;
  v59 = a5;
  LODWORD(a5) = 0;
  v22 = 0;
  LODWORD(v23) = 0;
  v24 = 0;
  while (1)
  {
    v25 = (uint64_t *)v21[1];
    v26 = v21;
    do
    {
      if (!v25)
        goto LABEL_74;
      v27 = v25;
      v28 = v26;
      v25 = (uint64_t *)v25[1];
      v26 = v27;
    }
    while (v25);
    v60 = v19;
    v29 = a4;
    v30 = v22;
    v31 = *v27;
    v28[1] = v27[2];
    heap_Free(a10, (uint64_t)v27);
    if (!v31)
      break;
    ++v24;
    v55 = (int)v23;
    if ((*(_DWORD *)(a1 + 4 * (int)v23 + 1300) & 0x80000000) != 0 || times_limit_over() != 1)
    {
      if (*(_DWORD *)(v31 + 80) != (_DWORD)v23)
      {
        v22 = v30;
LABEL_29:
        a4 = v29;
        goto LABEL_30;
      }
      v22 = v30;
      if (*(_DWORD *)(v31 + 72))
        goto LABEL_29;
      a4 = v29;
      if (*(_DWORD *)(v31 + 76) != a3 - 1)
        goto LABEL_30;
      v19 = v60;
      if (*(_QWORD *)v31 == *(_QWORD *)(a7 + 8 * (int)v23))
      {
        v34 = (v22 + 1);
        if ((_DWORD)v23 == *(_DWORD *)(a1 + 952) - 1)
        {
          v35 = tree_duplicate(v31, a1, a9, a10);
          v58 = (_QWORD *)tree_append((uint64_t)v58, (uint64_t)v35);
          v65 = v58;
          if ((int)v34 >= *(_DWORD *)(a1 + 4 * (int)v23 + 956))
          {
            LODWORD(v22) = v34;
            goto LABEL_73;
          }
LABEL_62:
          v22 = v34;
        }
        else
        {
          *(_QWORD *)(v60 + 8 * (int)v22) = v31;
          if ((int)v34 < *(_DWORD *)(a1 + 4 * (int)v23 + 956))
            goto LABEL_62;
          if ((v22 & 0x80000000) != 0)
          {
            LODWORD(a5) = 0;
            v22 = 0;
            v24 = 0;
            LODWORD(v23) = v23 + 1;
          }
          else
          {
            v23 = (v23 + 1);
            v46 = (uint64_t *)v60;
            do
            {
              set_step_partial_tree(v21, *v46, *(_QWORD *)(v59 + 8 * v55), v23, (uint64_t)a10);
              v47 = *v46++;
              set_step_partial_tree(v21, v47, a4, v23, (uint64_t)a10);
              --v34;
            }
            while (v34);
            LODWORD(a5) = 0;
            v22 = 0;
            v24 = 0;
          }
        }
LABEL_30:
        v19 = v60;
      }
      if (*(_DWORD *)(v31 + 80) == (_DWORD)v23
        || (int)v23 >= 1 && *(_QWORD *)v31 == *(_QWORD *)(v59 + 8 * (v23 - 1)))
      {
        v36 = *(_DWORD *)(a1 + 4 * (int)v23 + 292);
        v37 = *(_DWORD *)(v31 + 72);
        if (v36 < 0
          || (v38 = *(_DWORD *)(v31 + 76) + v37, v38 >= (int)a5 - v36)
          || v38 < *(_DWORD *)(a1 + 4 * (int)v23 + 272))
        {
          v54 = v24;
          v56 = v22;
          if (v37 >= 1)
          {
            v39 = 0;
            while (1)
            {
              leading_tree = cyk_hash_get_leading_tree(a2, v37 + ~v39, v39);
              if (leading_tree)
                break;
LABEL_45:
              ++v39;
              v37 = *(_DWORD *)(v31 + 72);
              if (v39 >= v37)
                goto LABEL_46;
            }
            v41 = leading_tree;
            while (cyk_as_make_trees_step(a2, (uint64_t)v21, v41, (uint64_t *)v31, a7, a1, v23, &v64, a10))
            {
              if (v64 > (int)a5)
                LODWORD(a5) = v64;
              v41 = *(_QWORD *)(v41 + 88);
              if (!v41)
                goto LABEL_45;
            }
            goto LABEL_70;
          }
LABEL_46:
          v42 = v37 + *(_DWORD *)(v31 + 76) + 1;
          if (v42 < a3)
          {
            v43 = 0;
            while (1)
            {
              v44 = cyk_hash_get_leading_tree(a2, v42, v43);
              if (v44)
                break;
LABEL_54:
              ++v43;
              v42 = *(_DWORD *)(v31 + 72) + *(_DWORD *)(v31 + 76) + 1;
              if (v43 >= a3 - v42)
                goto LABEL_55;
            }
            v45 = (uint64_t *)v44;
            while (cyk_as_make_trees_step(a2, (uint64_t)v21, v31, v45, a7, a1, v23, &v64, a10))
            {
              if (v64 > (int)a5)
                LODWORD(a5) = v64;
              v45 = (uint64_t *)v45[11];
              if (!v45)
                goto LABEL_54;
            }
LABEL_70:
            v49 = parser_result_create(2, (uint64_t)v58, (uint64_t)a10);
            v50 = a10;
            v51 = v60;
            goto LABEL_71;
          }
LABEL_55:
          if (!cyk_as_make_trees_step(a2, (uint64_t)v21, 0, (uint64_t *)v31, a7, a1, v23, &v64, a10))
            goto LABEL_70;
          if (v64 > (int)a5)
            LODWORD(a5) = v64;
          v19 = v60;
          v22 = v56;
          v24 = v54;
        }
      }
    }
    else
    {
      if ((_DWORD)v23 == *(_DWORD *)(a1 + 952) - 1)
        break;
      if (!(_DWORD)v30)
      {
        if ((max_len_parse(0, v23, a2, a3, a1, (uint64_t)v21, v29, v59, v57, a7, a9, a10, &v63) & 0x80000000) == 0)
        {
LABEL_60:
          LODWORD(a5) = 0;
          v22 = 0;
          v24 = 0;
          LODWORD(v23) = v23 + 1;
          a4 = v29;
          v19 = v60;
          continue;
        }
        as_list_free_all(v21, a10);
        heap_Free(a10, v60);
        return 0;
      }
      if ((int)v30 <= 0)
        goto LABEL_60;
      v23 = (v23 + 1);
      a5 = v30;
      v32 = (uint64_t *)v60;
      do
      {
        set_step_partial_tree(v21, *v32, *(_QWORD *)(v59 + 8 * v55), v23, (uint64_t)a10);
        v33 = *v32++;
        set_step_partial_tree(v21, v33, v29, v23, (uint64_t)a10);
        --a5;
      }
      while (a5);
      v22 = 0;
      v24 = 0;
      a4 = v29;
      v19 = v60;
    }
  }
  LODWORD(v22) = v30;
  a4 = v29;
LABEL_73:
  v19 = v60;
LABEL_74:
  if ((_DWORD)v22)
  {
    as_list_free_all(v21, a10);
    heap_Free(a10, v19);
    return parser_result_create(1, (uint64_t)v58, (uint64_t)a10);
  }
  else
  {
    v52 = max_len_parse(1, v23, a2, a3, a1, (uint64_t)v21, a4, v59, v57, a7, a9, a10, &v65);
    as_list_free_all(v21, a10);
    heap_Free(a10, v19);
    if (v52 < 0)
      return 0;
    if (v65)
      v53 = 1;
    else
      v53 = 2;
    v49 = parser_result_create(v53, (uint64_t)v65, (uint64_t)a10);
    if (!v49)
      jpe_FreeTree(v65, a10);
  }
  return v49;
}

uint64_t cyk_one_create(__int16 a1, __int16 a2, uint64_t a3)
{
  uint64_t result;

  result = heap_Alloc(a3, 24);
  if (result)
  {
    *(_QWORD *)result = 0;
    *(_WORD *)(result + 8) = a1;
    *(_WORD *)(result + 10) = a2;
    *(_QWORD *)(result + 16) = 0;
  }
  return result;
}

uint64_t cyk_one_free_all(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  if (*a1)
  {
    do
    {
      v5 = *(_QWORD *)(v4 + 88);
      heap_Free(a2, v4);
      v4 = v5;
    }
    while (v5);
  }
  heap_Free(a2, (uint64_t)a1);
  return 0;
}

uint64_t cyk_hash_get_address(int a1, int a2)
{
  int v2;

  v2 = 20 * (a1 % 200);
  if (((a2 / 20) & 1) != 0)
    return (v2 + 20 * (a2 / 20) - a2 + 19);
  else
    return (v2 + a2 % 20);
}

uint64_t cyk_hash_get_leading_tree(_QWORD *a1, int a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;

  v3 = 20 * (a2 % 200);
  v4 = v3 + a3 % 20;
  if (((a3 / 20) & 1) != 0)
    v4 = v3 + 20 * (a3 / 20) - a3 + 19;
  v5 = *(_QWORD *)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  while (*(__int16 *)(v5 + 10) != a3 || *(__int16 *)(v5 + 8) != a2)
  {
    v5 = *(_QWORD *)(v5 + 16);
    if (!v5)
      return 0;
  }
  return *(_QWORD *)v5;
}

uint64_t cyk_hash_add_leading_tree(_QWORD *a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  __int16 v5;
  __int16 v6;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned __int16 v15;
  uint64_t v16;

  v5 = a4;
  v6 = a3;
  v9 = 20 * (a3 % 200);
  if (((a4 / 20) & 1) != 0)
    v10 = v9 + 20 * (a4 / 20) - a4 + 19;
  else
    v10 = v9 + a4 % 20;
  v11 = *(_QWORD *)(*a1 + 8 * v10);
  if (v11)
  {
    while (1)
    {
      v12 = v11;
      if (*(__int16 *)(v11 + 10) == a4 && *(__int16 *)(v11 + 8) == a3)
        break;
      v11 = *(_QWORD *)(v11 + 16);
      if (!v11)
        goto LABEL_10;
    }
    v15 = 1;
    return v15 | 0x8C200000;
  }
  v12 = 0;
LABEL_10:
  v13 = heap_Alloc(a5, 24);
  if (!v13)
  {
    v15 = 8202;
    return v15 | 0x8C200000;
  }
  *(_WORD *)(v13 + 8) = v6;
  *(_WORD *)(v13 + 10) = v5;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)v13 = a2;
  if (v12)
    v14 = (uint64_t *)(v12 + 16);
  else
    v14 = (uint64_t *)(*a1 + 8 * v10);
  v16 = 0;
  *v14 = v13;
  return v16;
}

uint64_t *cyk_hash_free(_QWORD *a1, _QWORD *a2)
{
  uint64_t i;
  uint64_t *result;
  uint64_t *v6;

  for (i = 0; i != 4000; ++i)
  {
    result = *(uint64_t **)(*a1 + 8 * i);
    if (result)
    {
      do
      {
        v6 = (uint64_t *)result[2];
        cyk_one_free_all(result, a2);
        result = v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t SearchTERMINALTable(char *__s2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;

  v2 = 0;
  v3 = 372;
  while (1)
  {
    v4 = v3 - v2;
    if (v3 < v2)
      ++v4;
    v5 = v2 + (v4 >> 1);
    v6 = cstdlib_strcmp((&TERMINALTable)[2 * v5], __s2);
    if (!v6)
      break;
    if (v6 >= 0)
      v3 = v5 - 1;
    else
      v2 = v5 + 1;
    if (v2 > v3)
      return 0;
  }
  return LOBYTE((&TERMINALTable)[2 * v5 + 1]);
}

uint64_t log_intermediate_tree(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, _QWORD *a5, int a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t leading_tree;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  int v26;
  int v27;
  _QWORD *v28;

  v14 = ssftstring_Clear(a3);
  if ((v14 & 0x80000000) == 0)
  {
    if (a5)
    {
      if (a6 >= 1)
      {
        v28 = a5;
        v15 = 0;
        v16 = a6;
        v26 = a6;
        while ((int)v15 >= a6)
        {
LABEL_12:
          v15 = (v15 + 1);
          --v16;
          a6 = v26;
          if ((_DWORD)v15 == v26)
            return v14;
        }
        v17 = 0;
        v27 = v16;
        while (1)
        {
          leading_tree = cyk_hash_get_leading_tree(v28, v15, v17);
          if (leading_tree)
            break;
LABEL_11:
          ++v17;
          v16 = v27;
          if (v17 == v27)
            goto LABEL_12;
        }
        v22 = leading_tree;
        while (1)
        {
          v23 = v22;
          v22 = *(_QWORD *)(v22 + 88);
          log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"[A*] (%d,%d) == (%d,%d)", v19, v20, v21, v15);
          LODWORD(v25) = 0;
          v14 = log_output_tree(a1, a2, a3, v23, 0, a4[3], a4[9], 1, v25, 0, a4[324], a7);
          if ((v14 & 0x80000000) != 0)
            break;
          if (!v22)
            goto LABEL_11;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v14;
}

uint64_t parser_result_create(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = heap_Alloc(a3, 56);
  if (result)
  {
    *(_DWORD *)result = a1;
    *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t connection_table(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  __int16 *v10;
  __int16 *v11;
  __int16 v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  __int16 *v16;
  int v17;
  uint64_t v18;
  int v19;
  __int16 *v20;

  result = 100000;
  v5 = *(unsigned int *)(a3[6] + 4 * a1 + 4);
  if ((v5 & 0x80000000) != 0)
    return result;
  v6 = *(unsigned int *)(a3[7] + 4 * a2 + 4);
  if ((v6 & 0x80000000) != 0)
    return result;
  LOWORD(v7) = 0;
  v8 = *(__int16 *)(a3[3] + 2 * v5);
  v9 = (v8 + ((unsigned __int16)(v8 & 0x8000) >> 15)) << 16 >> 17;
  v10 = (__int16 *)(*(_QWORD *)(a3[2] + 8 * v5) + 8 * v9);
  while ((int)v6 < *v10)
  {
    if (!(_WORD)v9)
    {
      v20 = (__int16 *)(*(_QWORD *)(a3[4] + 8 * v5) + 2 * v6);
      return *v20;
    }
    if ((int)v6 > *(v10 - 3))
    {
      v18 = *(_QWORD *)(a3[4] + 8 * v5);
      v19 = *(v10 - 2);
      goto LABEL_35;
    }
    v11 = v10 - 4;
    if ((int)v6 >= *(v10 - 4))
    {
      v20 = v10 - 1;
      return *v20;
    }
    if ((_WORD)v7)
      v12 = v7;
    else
      v12 = v9;
    v7 = (__int16)(v12 + ((unsigned __int16)(v12 & 0x8000) >> 15)) >> 1;
    v13 = (unsigned __int16)(v12 + 1);
    v10 -= 4 * v7;
    v14 = v13 >= 3;
    if (v13 >= 3)
      v15 = -v7;
    else
      LOWORD(v15) = -1;
    if (!v14)
      v10 = v11;
LABEL_31:
    LOWORD(v9) = v15 + v9;
  }
  if ((int)v6 <= v10[1])
  {
    v20 = v10 + 3;
    return *v20;
  }
  if (v8 - 1 == (__int16)v9 || (v16 = v10 + 4, (int)v6 < v10[4]))
  {
    v18 = *(_QWORD *)(a3[4] + 8 * v5);
    v19 = v10[2];
LABEL_35:
    v20 = (__int16 *)(v18 + 2 * ((int)v6 - v19));
    return *v20;
  }
  if ((int)v6 > v10[5])
  {
    if ((_WORD)v7)
      v7 = (__int16)v7;
    else
      v7 = v8 - (__int16)v9;
    if (v7 >= 0)
      v17 = v7;
    else
      v17 = v7 + 1;
    v7 = v17 >> 1;
    v10 += 4 * (v17 >> 1);
    v15 = (unsigned __int16)(v17 >> 1);
    if (!v15)
      v10 = v16;
    if (v15 <= 1)
      LOWORD(v15) = 1;
    goto LABEL_31;
  }
  v20 = v10 + 7;
  return *v20;
}

uint64_t JpCreate(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 a6, int a7, uint64_t *a8, uint64_t a9)
{
  uint64_t inited;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v25 = 0;
  inited = InitRsrcFunction(a1, a2, &v25);
  if ((inited & 0x80000000) != 0)
    return inited;
  v18 = (void *)heap_Calloc(*(_QWORD **)(v25 + 8), 1, 72);
  if (!v18)
    return 2350915594;
  v19 = (uint64_t)v18;
  cstdlib_memset(v18, 0, 0x48uLL);
  v20 = jparser_ClassOpen(a1, a2, v19 + 8);
  if ((v20 & 0x80000000) != 0)
  {
    v22 = v20;
LABEL_13:
    heap_Free(*(_QWORD **)(v25 + 8), v19);
    return v22;
  }
  v21 = jparser_ObjOpen(a1, a2, *(_QWORD *)(v19 + 8), *(_QWORD *)(v19 + 16), (uint64_t *)(v19 + 24), a3, a4, a5, a6, a7, a9);
  if ((v21 & 0x80000000) != 0)
  {
    v22 = v21;
LABEL_12:
    jparser_ClassClose(*(_QWORD ***)(v19 + 8), *(_QWORD *)(v19 + 16));
    goto LABEL_13;
  }
  *(_QWORD *)(v19 + 48) = 0;
  v22 = ssftstring_ObjOpen(*(_QWORD **)(v25 + 8), (_QWORD *)(v19 + 48));
  if ((v22 & 0x80000000) != 0)
  {
    jparser_ObjClose((uint64_t *)(v19 + 24));
    goto LABEL_12;
  }
  *(_DWORD *)v19 = 1;
  v23 = v25;
  *(_QWORD *)(v19 + 56) = a1;
  *(_QWORD *)(v19 + 64) = a2;
  *(_QWORD *)(v19 + 32) = v23;
  *(_QWORD *)(v19 + 40) = a9;
  *a8 = v19;
  return v22;
}

uint64_t JpRemove(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD **v5;

  if (a2 && *a2)
  {
    jparser_ObjClose((uint64_t *)(*a2 + 24));
    jparser_ClassClose(*(_QWORD ***)(*a2 + 8), *(_QWORD *)(*a2 + 16));
    v4 = *a2;
    v5 = *(_QWORD ***)(*a2 + 48);
    if (v5)
    {
      ssftstring_ObjClose(v5);
      *(_QWORD *)(*a2 + 48) = 0;
      v4 = *a2;
    }
    heap_Free(a1, v4);
    *a2 = 0;
  }
  return 0;
}

uint64_t JpParse(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9, _WORD *a10, uint64_t *a11, uint64_t a12, int a13, const char *a14, uint64_t a15)
{
  uint64_t v21;
  unsigned int LogLevel;
  _BOOL4 v23;
  unsigned int v24;
  uint64_t v25;
  int *v26;
  unsigned __int16 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int16 v38;
  uint64_t v39;
  int v40;
  size_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned __int16 v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  int v61;
  int v62;
  int v63;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  _BOOL4 v73;
  uint64_t v74;
  unsigned __int16 v77;
  uint64_t v78;
  unsigned __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  int v84;
  int v85;
  _QWORD *v86;
  unsigned int v87[3];

  v21 = 2350915594;
  v87[0] = 0;
  v86 = 0;
  v84 = 0;
  v85 = 0;
  v83 = 0;
  v82 = 0;
  v81 = 0;
  v80 = 0;
  v79 = 0;
  LogLevel = log_GetLogLevel(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
  v23 = LogLevel > 4;
  v78 = 0;
  v77 = 0;
  *(_WORD *)(a12 + 8) = 0;
  *(_QWORD *)(a12 + 12) = 0x100000001;
  if (!*(_DWORD *)a1)
  {
    v21 = 2350915601;
    goto LABEL_55;
  }
  v24 = LogLevel;
  v25 = bed_GetpElem(a5, 0, &v78);
  if ((v25 & 0x80000000) != 0
    || (v25 = bed_GetcElem(a5, &v77), (v25 & 0x80000000) != 0)
    || (v25 = bed_GetpElem(a5, 0xFFFFu, &v82), (v25 & 0x80000000) != 0))
  {
LABEL_54:
    v21 = v25;
LABEL_55:
    if (v86)
    {
      v63 = jparser_FreeTree(*(_QWORD *)(a1 + 24), &v86);
      if (v63 >= 0 || (int)v21 <= -1)
        return v21;
      else
        return v63;
    }
    return v21;
  }
  v74 = a8;
  if (a13 != 1)
    goto LABEL_12;
  if (v77)
  {
    v26 = (int *)(v78 + 20);
    v27 = 1;
    v28 = v77;
    do
    {
      v29 = *v26;
      v26 += 16;
      if (v29 == 21)
        ++v27;
      --v28;
    }
    while (v28);
    if (!v27)
    {
LABEL_12:
      v21 = jparser_Parse(*(_QWORD *)(a1 + 24), a2, a3, &v86, v23, *(_QWORD *)(a1 + 48), v78, v77, v82, a8, a13);
      v87[0] = v21;
      if ((v21 & 0x80000000) != 0)
        return v21;
      goto LABEL_34;
    }
  }
  else
  {
    v27 = 1;
  }
  v33 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), 1, (unint64_t)v27 << 6);
  if (v33)
  {
    v34 = v33;
    v71 = a4;
    v35 = v77;
    if (v77)
    {
      v72 = v24;
      v70 = a6;
      v36 = 0;
      v37 = 0;
      v38 = 0;
      do
      {
        if (!v36 || *(_DWORD *)(v78 + v36 + 20) == 21)
        {
          cstdlib_memcpy((void *)(v34 + ((unint64_t)v38++ << 6)), (const void *)(v78 + v36), 0x40uLL);
          v35 = v77;
        }
        ++v37;
        v36 += 64;
      }
      while (v37 < v35);
      if (v38)
      {
        v69 = a5;
        v39 = 0;
        while (1)
        {
          if (v39)
          {
            v40 = *(_DWORD *)(v78 + 32);
            v41 = (unsigned __int16)(*(_WORD *)(v34 + v39 + 32) - v40);
            if (*(_WORD *)(v34 + v39 + 32) != (_WORD)v40)
            {
              v42 = a3;
              v43 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), (v41 + 1), 1);
              if (!v43)
              {
                heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), v34);
                return v21;
              }
              v44 = (unint64_t)v43;
              cstdlib_strncpy(v43, a14, v41);
              *(_BYTE *)(v44 + v41) = 0;
              *(_DWORD *)(v34 + v39 + 32) = 2 * Utf8_LengthInUtf8chars(v44, v41);
              heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), v44);
              a3 = v42;
            }
          }
          v39 += 64;
          if ((unint64_t)v38 << 6 == v39)
          {
            a5 = v69;
            a6 = v70;
            v24 = v72;
            goto LABEL_33;
          }
        }
      }
      v38 = 0;
      a6 = v70;
      v24 = v72;
    }
    else
    {
      v38 = 0;
    }
LABEL_33:
    v21 = jparser_Parse(*(_QWORD *)(a1 + 24), a2, a3, &v86, v23, *(_QWORD *)(a1 + 48), v34, v38, v82, v74, 1);
    v87[0] = v21;
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), v34);
    a4 = v71;
    if ((v21 & 0x80000000) == 0)
    {
LABEL_34:
      v73 = v23;
      if ((_DWORD)a3 && 3 * (_DWORD)a3 != 2 * (unsigned __int16)*(_DWORD *)(v82 + 36))
        *(_DWORD *)(a12 + 16) = 0;
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(a1 + 40), 5, 0, (uint64_t)"[UTOI] (normalizing %d bytes - region length %d %s)", v30, v31, v32, a3);
      UTOITrace(v23, *(_QWORD *)(a1 + 32), a4, a5, (uint64_t)"START of normalization");
      v81 = 0;
      jparser_extractResult(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v86, (int *)v87, a6, a7, v74, a9, a10, &v83, (_WORD *)&v85 + 1, &v85, (_WORD *)&v84 + 1, *(_QWORD *)(a1 + 48), a11, (unsigned __int16 *)&v84, a12, &v81, (uint64_t)a14,
        a15);
      v21 = v87[0];
      if ((v87[0] & 0x80000000) != 0)
        goto LABEL_55;
      v45 = a6;
      if (!(_DWORD)a3)
        goto LABEL_73;
      v25 = bed_GetcElem(a6, &v79);
      if ((v25 & 0x80000000) == 0)
      {
        v49 = *(_QWORD *)(a1 + 32);
        if (!v79)
        {
          log_OutText(*(_QWORD *)(v49 + 32), *(_QWORD *)(a1 + 40), 5, 0, (uint64_t)"[UTOI] deleting region, no replacement text found", v46, v47, v48, v68);
          goto LABEL_73;
        }
        UTOISubTrace(v23, v49, a6, (uint64_t)"replacement string");
        if (*(_DWORD *)(a12 + 16) != 1)
        {
LABEL_73:
          v21 = utoin_IncrReplaceCurrentRegion(a4, a5, v45, a3 >> 1, (uint64_t *)a12);
          if ((v21 & 0x80000000) == 0)
            UTOITrace(v23, *(_QWORD *)(a1 + 32), a4, a5, (uint64_t)"END of normalization");
          goto LABEL_55;
        }
        v25 = bed_GetpElem(a6, 0, &v80);
        if ((v25 & 0x80000000) == 0)
        {
          if (!v79)
          {
            v62 = 1;
            v57 = v24;
            goto LABEL_67;
          }
          v53 = 0;
          v54 = 0;
          v55 = 1;
          v56 = v80;
          v57 = v24;
          while (1)
          {
            if (*(_BYTE *)(v56 + v53) == 16)
            {
              v58 = *(unsigned __int16 *)(a12 + 8);
              if (v54 >= v58)
              {
LABEL_65:
                log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(a1 + 40), 5, 0, (uint64_t)"[UTOI] cannot find non-deleted word to align new word number %d with", v50, v51, v52, v55);
                v62 = 0;
LABEL_67:
                if (v57 >= 5 && *(_WORD *)(a12 + 8))
                {
                  v66 = 0;
                  v67 = 0;
                  do
                  {
                    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(a1 + 40), 5, 0, (uint64_t)"[UTOI] [%d] origWordPos=%d, newPos=%d, bDeleted=%d", v50, v51, v52, v67++);
                    v66 += 12;
                  }
                  while (v67 < *(unsigned __int16 *)(a12 + 8));
                }
                v23 = v73;
                if (v62)
                  *(_DWORD *)(a12 + 12) = 0;
                goto LABEL_73;
              }
              v59 = v54;
              v60 = (int *)(*(_QWORD *)a12 + 12 * v54 + 4);
              while (1)
              {
                v61 = *v60;
                v60 += 3;
                if (v61 != 1)
                  break;
                if (v58 == ++v59)
                  goto LABEL_65;
              }
              *(_WORD *)(*(_QWORD *)a12 + 12 * (unsigned __int16)v59 + 8) = v53;
              ++v55;
              v54 = (unsigned __int16)v59 + 1;
            }
            if (++v53 >= (unint64_t)v79)
            {
              v62 = 1;
              goto LABEL_67;
            }
          }
        }
      }
      goto LABEL_54;
    }
  }
  return v21;
}

uint64_t jparser_extractResult(uint64_t a1, uint64_t a2, _QWORD *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _WORD *a9, _WORD *a10, _WORD *a11, _WORD *a12, _WORD *a13, uint64_t a14, uint64_t *a15, unsigned __int16 *a16, uint64_t a17, _WORD *a18, uint64_t a19, uint64_t a20)
{
  int v27;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned __int16 v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  unsigned int v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int appended;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned __int16 v61;
  int v62;
  uint64_t v63;
  unsigned __int16 v64;
  uint64_t *v65;
  uint64_t v66;
  _WORD *v67;
  int v68;
  __int16 v69;
  unsigned __int16 v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  size_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unsigned __int16 v89;
  int v90;
  _BYTE *v91;
  size_t v92;
  unsigned __int8 *v93;
  unsigned int v94;
  _BYTE *v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112[3];
  uint64_t v113;

  v113 = a7;
  if (*a4 < 0)
    return 0;
  v27 = ssftstring_Clear(a14);
  *a4 = v27;
  if (v27 < 0)
    return 0;
  if (!a3)
    return 1;
  v29 = a17;
  while (1)
  {
    v30 = a3[4];
    if (v30)
    {
      v31 = jparser_extractResult(a1, a2, v30, a4, a5, a6, v113, a8, a9, a10, a11, a12, a13, a14, a15, a16, v29, a18, a19,
              a20);
      v29 = a17;
      if (v31 != 1)
        return 0;
      goto LABEL_7;
    }
    v32 = a3[5];
    if (v32)
      break;
LABEL_7:
    a3 = (_QWORD *)a3[2];
    if (!a3)
      return 1;
  }
  v110 = a5;
  v111 = a1;
  v108 = a20;
  v109 = a2;
  v106 = a6;
  v107 = a8;
  v33 = 0;
  LOWORD(a8) = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  do
  {
    if (!cstdlib_strcmp(*(const char **)v32, "WORD"))
    {
      v34 = cstdlib_strlen(*(const char **)(v32 + 8));
      v38 = *(_BYTE **)(v32 + 8);
      v39 = *v38;
      if (*v38)
      {
        a8 = 0;
        do
        {
          v40 = v38 + 2;
          if (v39 > 0xFC)
            v41 = v38 + 1;
          else
            v41 = v38 + 2;
          if (v39 > 0xFC)
            v42 = a8;
          else
            v42 = a8 + 1;
          if (v39 <= 0xA0)
            v43 = a8;
          else
            v43 = a8 + 1;
          if (v39 <= 0xDF)
          {
            v41 = v38 + 1;
            v42 = v43;
          }
          if (v39 >= 0x81)
          {
            v44 = a8 + 1;
          }
          else
          {
            v40 = v38 + 1;
            v44 = a8;
          }
          if (v39 <= 0x9F)
          {
            v45 = v44;
          }
          else
          {
            v40 = v41;
            v45 = v42;
          }
          if ((v39 & 0x80) != 0)
            v38 = v40;
          else
            ++v38;
          if ((v39 & 0x80) != 0)
            a8 = v45;
          else
            ++a8;
          v39 = *v38;
        }
        while (*v38);
      }
      else
      {
        LOWORD(a8) = 0;
      }
      appended = ssftstring_AppendCStr(a14, "Word \"");
      *a4 = appended;
      if (appended < 0)
        return 0;
      v47 = ssftstring_AppendCStr(a14, *(char **)(v32 + 8));
      *a4 = v47;
      if (v47 < 0)
        return 0;
      v48 = ssftstring_AppendCStr(a14, "\"");
      *a4 = v48;
      if (v48 < 0)
        return 0;
      v37 = v32;
    }
    if (!cstdlib_strcmp(*(const char **)v32, "POS"))
    {
      cstdlib_strlen(*(const char **)(v32 + 8));
      v49 = ssftstring_AppendCStr(a14, "POS \"");
      *a4 = v49;
      if (v49 < 0)
        return 0;
      v50 = ssftstring_AppendCStr(a14, *(char **)(v32 + 8));
      *a4 = v50;
      if (v50 < 0)
        return 0;
      v51 = ssftstring_AppendCStr(a14, "\"");
      *a4 = v51;
      v35 = v32;
      if (v51 < 0)
        return 0;
    }
    if (!cstdlib_strcmp(*(const char **)v32, "PRON"))
    {
      v33 = cstdlib_strlen(*(const char **)(v32 + 8));
      v52 = ssftstring_AppendCStr(a14, "Pron \"");
      *a4 = v52;
      if (v52 < 0)
        return 0;
      v53 = ssftstring_AppendCStr(a14, *(char **)(v32 + 8));
      *a4 = v53;
      if (v53 < 0)
        return 0;
      v54 = ssftstring_AppendCStr(a14, "\"");
      *a4 = v54;
      v36 = v32;
      if (v54 < 0)
        return 0;
    }
    v32 = *(_QWORD *)(v32 + 16);
  }
  while (v32);
  if (!v37 || !v36 || !v35)
  {
    v101 = -1944051456;
    goto LABEL_88;
  }
  v55 = *(_QWORD *)(v111 + 32);
  v56 = ssftstring_CStr(a14);
  log_OutText(v55, v109, 5, 0, (uint64_t)"[UTOI RES] %s", v57, v58, v59, v56);
  v60 = ssftstring_Clear(a14);
  *a4 = v60;
  if (v60 < 0)
    return 0;
  v61 = cstdlib_strlen(szWORD_BEG_6);
  v62 = bed_Insert(v110, szWORD_BEG_6, v61);
  *a4 = v62;
  if (v62 < 0)
    return 0;
  *a9 += cstdlib_strlen(szWORD_BEG_6);
  v63 = *a15;
  v64 = *a16 + 1;
  *a16 = v64;
  v65 = *(uint64_t **)(v111 + 8);
  v66 = 2 * v64 + 2;
  if (v63)
  {
    v67 = (_WORD *)heap_Realloc(v65, v63, v66);
    if (!v67)
      goto LABEL_85;
    *a15 = (uint64_t)v67;
  }
  else
  {
    v67 = (_WORD *)heap_Calloc(v65, 1, v66);
    *a15 = (uint64_t)v67;
    if (!v67)
      goto LABEL_85;
  }
  *v67 = *a16;
  v68 = SearchTERMINALTable(*(char **)(v35 + 8));
  if (v68)
    v69 = v68;
  else
    v69 = 42;
  *(_WORD *)(*a15 + 2 * *a16) = v69;
  *a4 = bed_Insert(v110, *(void **)(v36 + 8), v33);
  *a9 += v33;
  v70 = cstdlib_strlen(szWORD_END_6);
  v71 = bed_Insert(v110, szWORD_END_6, v70);
  *a4 = v71;
  if (v71 < 0)
    return 0;
  *a9 += cstdlib_strlen(szWORD_END_6);
  if (!v34)
  {
    log_OutText(*(_QWORD *)(v111 + 32), v109, 5, 0, (uint64_t)"[UTOI] jparser word length is 0, cannot get hex args", v72, v73, v74, v104);
    v101 = -1944051712;
    goto LABEL_88;
  }
  v75 = heap_Calloc(*(_QWORD **)(v111 + 8), (unsigned __int16)a8 + 1, 2);
  if (!v75)
    goto LABEL_85;
  v76 = v75;
  LH_wcsncpy(v75, (unsigned __int16 *)(v108 + 2 * (unsigned __int16)*a13), (unsigned __int16)a8);
  *(_WORD *)(v76 + 2 * (unsigned __int16)a8) = 0;
  v77 = utf8_16BitNbrOfUtf8Chars(v76);
  if (!v77)
  {
    log_OutText(*(_QWORD *)(v111 + 32), v109, 5, 0, (uint64_t)"[UTOI] converted utf8 word length is 0, cannot get hex args", v78, v79, v80, v104);
    *a4 = -1944051712;
    v102 = *(_QWORD **)(v111 + 8);
    goto LABEL_91;
  }
  v81 = (unsigned __int16)(v77 - 1);
  v82 = (char *)heap_Calloc(*(_QWORD **)(v111 + 8), v81 + 1, 1);
  if (v82)
  {
    v83 = (uint64_t)v82;
    cstdlib_strncpy(v82, (const char *)(a19 + (unsigned __int16)*a12), v81);
    *(_BYTE *)(v83 + v81) = 0;
    log_OutText(*(_QWORD *)(v111 + 32), v109, 5, 0, (uint64_t)"[UTOI] get hex args from UTF16Word(%s,pos=%d) UTF8Word(%s,pos=%d)", v84, v85, v86, v76);
    v87 = v113;
    v88 = *(unsigned __int16 *)(v113 + 16);
    v89 = v88 + 2 * v81 + 1;
    if (*(unsigned __int16 *)(v113 + 18) < v89)
    {
      v90 = datac_RequestBlock(v106, v107, (unsigned __int16)(v88 + 2 * v81 + 1), &v113);
      *a4 = v90;
      if (v90 < 0)
      {
        heap_Free(*(_QWORD **)(v111 + 8), v76);
        v102 = *(_QWORD **)(v111 + 8);
        v103 = v83;
        goto LABEL_92;
      }
      v87 = v113;
      v88 = *(unsigned __int16 *)(v113 + 16);
    }
    v105 = v76;
    v91 = (_BYTE *)(*(_QWORD *)(v87 + 8) + *(unsigned __int16 *)(v87 + 2) * (unint64_t)v88);
    *(_WORD *)(v87 + 16) = v89;
    if ((_DWORD)v81)
    {
      v92 = v81;
      v93 = (unsigned __int8 *)v83;
      do
      {
        v94 = *v93++;
        LH_itoa(v94, v112, 0x10u);
        v112[2] = 0;
        *v91 = v112[0];
        v95 = v91 + 2;
        v91[1] = v112[1];
        v91 += 2;
        --v92;
      }
      while (v92);
    }
    else
    {
      v95 = v91;
    }
    *v95 = 0;
    *a11 += v34;
    *a12 += v81;
    *a13 += a8;
    a1 = v111;
    heap_Free(*(_QWORD **)(v111 + 8), v105);
    heap_Free(*(_QWORD **)(v111 + 8), v83);
    v29 = a17;
    a2 = v109;
    a5 = v110;
    a8 = v107;
    a6 = v106;
    a20 = v108;
    if (*(_DWORD *)(a17 + 16) != 1)
      goto LABEL_83;
    v96 = *(unsigned __int16 *)(a17 + 8);
    v97 = *(_QWORD *)a17;
    if (v96 < *(unsigned __int16 *)(a17 + 10))
    {
LABEL_82:
      v99 = v97 + 12 * v96;
      *(_WORD *)v99 = *a18;
      *(_QWORD *)(v99 + 2) = 0;
      *a18 += v81;
      ++*(_WORD *)(v29 + 8);
LABEL_83:
      *a10 = *a9;
      goto LABEL_7;
    }
    v98 = heap_Realloc(*(uint64_t **)(v111 + 8), v97, 12 * *(unsigned __int16 *)(a17 + 10) + 121);
    if (v98)
    {
      v97 = v98;
      v29 = a17;
      *(_QWORD *)a17 = v98;
      *(_WORD *)(a17 + 10) += 10;
      v96 = *(unsigned __int16 *)(a17 + 8);
      goto LABEL_82;
    }
LABEL_85:
    v101 = -1944051702;
LABEL_88:
    *a4 = v101;
    return 0;
  }
  *a4 = -1944051702;
  v102 = *(_QWORD **)(v111 + 8);
LABEL_91:
  v103 = v76;
LABEL_92:
  heap_Free(v102, v103);
  return 0;
}

uint64_t wparserJparser_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2350915585;
  result = 0;
  *a2 = &IWparserImplJparser;
  return result;
}

uint64_t wparser_impl_jparser_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v19 = 0;
  if (!a5)
    return 2350915591;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v19);
  if ((inited & 0x80000000) == 0)
  {
    log_OutText(*(_QWORD *)(v19 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjOpen: Begin", v8, v9, v10, v18);
    v12 = (_QWORD *)heap_Calloc(*(_QWORD **)(v19 + 8), 1, 88);
    if (v12)
    {
      *v12 = a3;
      v12[1] = a4;
      v16 = v19;
      v12[2] = v19;
      v12[3] = 0;
      v12[5] = "WPARSER_IMPL";
      *(_QWORD *)a5 = v12;
      *(_DWORD *)(a5 + 8) = 87652;
      log_OutText(*(_QWORD *)(v16 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjOpen: End (%x)", v13, v14, v15, inited);
    }
    else
    {
      return 2350915594;
    }
  }
  return inited;
}

uint64_t wparser_impl_jparser_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v3 & 0x80000000) != 0)
    return v3;
  v7 = *(_QWORD *)(a1 + 16);
  log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : Begin", v4, v5, v6, v13);
  v8 = JpRemove(*(_QWORD **)(v7 + 8), (uint64_t *)(a1 + 32));
  if ((v8 & 0x80000000) == 0)
  {
    heap_Free(*(_QWORD **)(v7 + 8), a1);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : End (%x)", v9, v10, v11, v8);
  }
  return v8;
}

uint64_t wparser_impl_jparser_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v6 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v6 & 0x80000000) == 0)
  {
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjReopen : Begin", v3, v4, v5, v11);
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjReopen : End (%x)", v7, v8, v9, v6);
  }
  return v6;
}

uint64_t wparser_impl_jparser_Init(uint64_t a1, int a2, uint64_t a3, const char *a4, const char *a5, int a6, _BYTE *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  const char *v31;

  v13 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v13 & 0x80000000) != 0)
    return v13;
  *(_QWORD *)(a1 + 48) = a3;
  if (cstdlib_strcmp(a5, "win932"))
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), *(_QWORD *)(a1 + 40), 1802, (uint64_t)"%s%s", v14, v15, v16, v17, a5);
    return 2350915591;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = xcode_Utf16leToWin932;
  if (*a7)
  {
    v19 = (*(uint64_t (**)(_QWORD, _QWORD, _BYTE *, uint64_t))(**(_QWORD **)(a1 + 48) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16), a7, a1 + 64);
    if ((v19 & 0x80000000) != 0)
    {
      v18 = v19;
      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
      v27 = *(_QWORD *)(a1 + 40);
      v28 = 1819;
      v29 = 0;
LABEL_13:
      log_OutPublic(v26, v27, v28, (uint64_t)v29, v20, v21, v22, v23, v31);
      return v18;
    }
  }
  *(_QWORD *)(a1 + 56) = 0;
  if (cstdlib_strcmp(a4, "null"))
  {
    v24 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 48) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16), a4, a1 + 56);
    if ((v24 & 0x80000000) != 0)
    {
      v18 = v24;
      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
      v27 = *(_QWORD *)(a1 + 40);
      v31 = "xlit data : ";
      v29 = "%s%s";
      v28 = 1804;
      goto LABEL_13;
    }
  }
  v25 = *(_QWORD *)(a1 + 48);
  v18 = JpCreate(*(_WORD **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)v25, *(_QWORD *)(v25 + 8), *(_QWORD *)(v25 + 16), *(_WORD *)(v25 + 24), *(_DWORD *)(v25 + 28), (uint64_t *)(a1 + 32), *(_QWORD *)(a1 + 40));
  if ((v18 & 0x80000000) == 0)
    *(_DWORD *)(a1 + 80) = a6;
  return v18;
}

uint64_t wparser_impl_jparser_Normalize(uint64_t a1, int a2, const char *a3, unsigned int a4, unsigned __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 a11, _WORD *a12, uint64_t a13, uint64_t *a14, uint64_t a15)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v39;
  unsigned __int16 v40;
  int v41;
  unsigned __int16 v42;

  v42 = a5;
  v41 = 0;
  v21 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v21 & 0x80000000) != 0)
    return v21;
  v25 = 2350915594;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF8: %s", v22, v23, v24, (uint64_t)a3);
  v26 = Utf8_Utf8NbrOfSymbols(a3);
  v27 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 2 * (v26 + 1));
  if (v27)
  {
    v28 = v27;
    v29 = utf8_Utf8ToUtf16((uint64_t)a3, a4, 0, v27, 2 * v26, &v41, 0);
    if ((v29 & 0x80000000) != 0)
    {
      v34 = 0;
    }
    else
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF16: %s", v30, v31, v32, v28);
      v33 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 2 * (v41 + 1));
      if (!v33)
        return v25;
      v34 = (char *)v33;
      v29 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, unsigned __int16 *, _QWORD))(a1 + 72))(*(_QWORD *)(a1 + 56), v28, (unsigned __int16)v41, v33, &v42, *(_QWORD *)(a1 + 64));
      if ((v29 & 0x80000000) == 0)
      {
        v34[v42] = 0;
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL WIN932: %s", v35, v36, v37, (uint64_t)v34);
        if (v42)
        {
          v29 = JpParse(*(_QWORD *)(a1 + 32), v34, v42, a6, a7, a8, a9, a10, a11, a12, a14, a15, *(_DWORD *)(a1 + 80), a3, v28);
        }
        else
        {
          v40 = 0;
          v29 = bed_GetcElem(a8, &v40);
          if ((v29 & 0x80000000) == 0)
          {
            if (!v40 || (v29 = bed_Remove(a8, 0, v40), (v29 & 0x80000000) == 0))
            {
              v39 = utoin_IncrReplaceCurrentRegion(a6, a7, a8, 0, 0);
              v25 = v39 & (v39 >> 31);
LABEL_11:
              heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v28);
              if (v34)
                heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v34);
              return v25;
            }
          }
        }
      }
    }
    v25 = v29;
    goto LABEL_11;
  }
  return v25;
}

uint64_t wparser_impl_jparser_Spell(uint64_t a1, int a2, const char *a3, unsigned int a4, unsigned __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, uint64_t a10, int a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  int v36;
  unsigned __int16 v37;

  v37 = a5;
  v36 = 0;
  v17 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v17 & 0x80000000) != 0)
    return v17;
  v21 = 2350915594;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF8: %s", v18, v19, v20, (uint64_t)a3);
  v22 = Utf8_Utf8NbrOfSymbols(a3);
  v23 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 2 * (v22 + 1));
  if (v23)
  {
    v24 = v23;
    v25 = utf8_Utf8ToUtf16((uint64_t)a3, a4, 0, v23, 2 * v22, &v36, 0);
    if ((v25 & 0x80000000) != 0)
    {
      v30 = 0;
    }
    else
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF16: %s", v26, v27, v28, v24);
      v29 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 2 * (v36 + 1));
      if (!v29)
        return v21;
      v30 = v29;
      v25 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, unsigned __int16 *, _QWORD))(a1 + 72))(*(_QWORD *)(a1 + 56), v24, (unsigned __int16)v36, v29, &v37, *(_QWORD *)(a1 + 64));
      if ((v25 & 0x80000000) == 0)
      {
        *(_BYTE *)(v30 + v37) = 0;
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL WIN932: %s", v31, v32, v33, v30);
        LOWORD(v35) = a9;
        v25 = DoJPJSpell(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v30, v37, a6, a7, a8, v35, a10, a11);
      }
    }
    v21 = v25;
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v24);
    if (v30)
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v30);
  }
  return v21;
}

uint64_t wparser_impl_jparser_Latin(uint64_t a1, int a2, char *a3, unsigned int a4, char **a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v28;
  unsigned __int16 v29;

  v29 = a4;
  v28 = 0;
  v9 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v9 & 0x80000000) != 0)
    return v9;
  v13 = 2350915594;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF8: %s", v10, v11, v12, (uint64_t)a3);
  v14 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 2 * a4 + 2);
  if (v14)
  {
    v15 = v14;
    v16 = utf8_Utf8ToUtf16((uint64_t)a3, a4, 0, v14, 2 * a4, &v28, 0);
    if ((v16 & 0x80000000) != 0)
    {
      v21 = 0;
      v13 = v16;
    }
    else
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF16: %s", v17, v18, v19, v15);
      v20 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 2 * (v28 + 1));
      if (!v20)
        return v13;
      v21 = (const char *)v20;
      v13 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, unsigned __int16 *, _QWORD))(a1 + 72))(*(_QWORD *)(a1 + 56), v15, (unsigned __int16)v28, v20, &v29, *(_QWORD *)(a1 + 64));
      if ((v13 & 0x80000000) == 0)
      {
        v21[v29] = 0;
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL WIN932: %s", v22, v23, v24, (uint64_t)v21);
        v25 = *(_QWORD *)(a1 + 48);
        if (*(_DWORD *)(v25 + 28) == 1)
        {
          v13 = DoJPJLatin(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 40), v25, v21, a5);
          if (a5)
          {
            if (*a5)
            {
              v26 = *a3;
              if ((v26 & 0x80000000) == 0)
                *(_WORD *)*a5 = v26;
            }
          }
        }
      }
    }
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v15);
    if (v21)
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v21);
  }
  return v13;
}

uint64_t wparser_impl_jparser_End(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wparser_impl_jparser_ProcessStart(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wparser_impl_jparser_ProcessEnd(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t get_a_rule(uint64_t a1)
{
  uint64_t result;

  result = 0;
  if ((a1 & 0x8000000000000000) == 0 && a1 < 1)
    return (uint64_t)*(&pBG_grammar + a1);
  return result;
}

uint64_t find_grammar_right(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 16);
  v3 = Sparse_index[2 * v2];
  if (v3 != -1)
  {
    v4 = 0;
    v5 = Sparse_index[2 * v2 + 1];
    if ((v3 & 0x8000000000000000) == 0 && v3 < 1)
      v4 = *(&pBG_grammar + v3);
    v6 = 3;
    while (1)
    {
      v7 = *(_QWORD *)(v1 + 8 * --v6);
      v8 = v4[v6];
      if (v7 < v8)
        return -1;
      if (v7 > v8)
        break;
      if (v6 < 2)
      {
        v9 = Sparse_index[2 * v2];
LABEL_21:
        *a1 = (uint64_t)v4;
        return v9;
      }
    }
    v4 = 0;
    if ((v5 & 0x8000000000000000) == 0 && v5 < 1)
      v4 = *(&pBG_grammar + v5);
    v10 = 3;
    while (1)
    {
      v11 = *(_QWORD *)(v1 + 8 * --v10);
      v12 = v4[v10];
      if (v11 < v12)
        break;
      if (v11 > v12)
        return -1;
      if (v10 < 2)
      {
        v9 = Sparse_index[2 * v2 + 1];
        goto LABEL_21;
      }
    }
    v13 = v5 - v3;
    if (v5 - v3 == 1)
    {
      v4 = 0;
      v9 = -1;
    }
    else
    {
      do
      {
        v4 = 0;
        if (v13 >= 0)
          v15 = v13;
        else
          v15 = v13 + 1;
        v9 = v3 + (v15 >> 1);
        if (!v9)
          v4 = &BG_grammar;
        v16 = 3;
        while (1)
        {
          v17 = *(_QWORD *)(v1 + 8 * --v16);
          v18 = v4[v16];
          if (v17 < v18)
            break;
          if (v17 > v18)
          {
            v3 = v9;
            goto LABEL_35;
          }
          if (v16 < 2)
            goto LABEL_21;
        }
        v5 = v9;
LABEL_35:
        v4 = 0;
        v13 = v5 - v3;
        v9 = -1;
      }
      while (v5 - v3 != 1);
    }
    goto LABEL_21;
  }
  return -1;
}

uint64_t find_next_grammar_right(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  if (a2 >= a3)
  {
    if ((a3 & 0x8000000000000000) == 0 && a3 < 1)
    {
      v3 = (uint64_t)*(&pBG_grammar + a3);
      if (v3)
      {
        v4 = 3;
        while (1)
        {
          --v4;
          if (*(_QWORD *)(*a1 + 8 * v4) != *(_QWORD *)(v3 + 8 * v4))
            break;
          if (v4 < 2)
          {
            *a1 = v3;
            return a3 - 1;
          }
        }
      }
    }
    a3 = a2 + 1;
  }
  v5 = -1;
  if ((a3 & 0x8000000000000000) == 0 && a3 < 1)
  {
    v6 = (uint64_t)*(&pBG_grammar + a3);
    if (v6)
    {
      v7 = 3;
      while (1)
      {
        --v7;
        if (*(_QWORD *)(*a1 + 8 * v7) != *(_QWORD *)(v6 + 8 * v7))
          break;
        if (v7 < 2)
        {
          *a1 = v6;
          return a3 + 1;
        }
      }
    }
    return -1;
  }
  return v5;
}

uint64_t get_me_terminal(uint64_t a1)
{
  uint64_t v1;
  _UNKNOWN **i;

  v1 = 1;
  for (i = &pBG_terminal_line; *(_QWORD *)*i != a1; ++i)
  {
    if (!--v1)
      return -1;
  }
  return *((_QWORD *)*i + 8);
}

uint64_t mbs_copy(uint64_t a1, _QWORD *a2, int a3, int a4, _QWORD *a5)
{
  uint64_t v7;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;

  v7 = 2350915594;
  if (a4 < 1)
  {
    if (!a4 || *(_QWORD *)a1)
    {
      v13 = (int *)(a1 + 8);
LABEL_11:
      v7 = 0;
      *v13 = a4;
    }
  }
  else
  {
    v10 = 4 * a4;
    v11 = heap_Calloc(a5, 1, (4 * a4));
    *(_QWORD *)a1 = v11;
    if (v11)
    {
      v12 = 0;
      *(_DWORD *)(a1 + 8) = a4;
      v13 = (int *)(a1 + 8);
      if (v10 <= 1)
        v14 = 1;
      else
        v14 = v10;
      do
      {
        *(_BYTE *)(*(_QWORD *)a1 + v12) = *(_BYTE *)(*a2 + 4 * a3 + v12);
        ++v12;
      }
      while (v14 != v12);
      goto LABEL_11;
    }
  }
  return v7;
}

uint64_t mbs_create(uint64_t a1, int a2, const char *a3, _QWORD *a4)
{
  const char *v5;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  BOOL v15;

  v5 = a3;
  v8 = 2350915591;
  if (a3)
  {
    a2 = sjis_len(a3);
    if (a2 == -1)
      return v8;
  }
  if (a2 > 0)
  {
    v9 = heap_Calloc(a4, 1, (4 * a2));
    *(_QWORD *)a1 = v9;
    goto LABEL_6;
  }
  v9 = *(_QWORD *)a1;
  if (a2)
  {
LABEL_6:
    if (!v9)
      return 2350915594;
  }
  *(_DWORD *)(a1 + 8) = a2;
  if (v5)
  {
    v10 = cstdlib_strlen(v5);
    if (v10 >= 1)
    {
      v11 = 0;
      v12 = 1;
      do
      {
        v13 = *v5;
        if (v12 == 1)
        {
          v14 = 4 * v11;
          *(_BYTE *)(*(_QWORD *)a1 + v14) = 1;
          v15 = (v13 + 32) >= 0x1Du && (v13 + 127) >= 0x1Fu;
          *(_BYTE *)(*(_QWORD *)a1 + (int)v14 + 1) = v13;
          ++v11;
          if (v15)
            v12 = 1;
          else
            v12 = 2;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)a1 + 4 * v11 - 4) = 2;
          *(_BYTE *)(*(_QWORD *)a1 + 4 * v11 - 2) = v13;
          v12 = 1;
        }
        ++v5;
        --v10;
      }
      while (v10);
    }
  }
  return 0;
}

uint64_t mbs_compare(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *i;
  int v10;
  int v11;
  char *v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;

  result = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    v4 = *((unsigned int *)a1 + 2);
    v5 = *(_DWORD *)(a2 + 8);
    if ((int)v4 > v5)
      return 1;
    if ((int)v4 >= v5)
    {
      if ((int)v4 >= 1)
      {
        v6 = 0;
        v7 = *a1;
        v8 = *(_QWORD *)a2 + 1;
        for (i = (char *)(v7 + 1); ; i += 4)
        {
          v10 = *(char *)(v7 + 4 * v6);
          v11 = *(char *)(*(_QWORD *)a2 + 4 * v6);
          if (v10 > v11)
            break;
          if (v10 < v11)
            return 0xFFFFFFFFLL;
          v12 = i;
          v13 = (char *)v8;
          if (v10 >= 1)
          {
            do
            {
              v15 = *v12++;
              v14 = v15;
              v16 = *v13++;
              v17 = v14 < v16;
              if (v14 > v16)
                return 1;
              if (v17)
                return 0xFFFFFFFFLL;
            }
            while (--v10);
          }
          result = 0;
          ++v6;
          v8 += 4;
          if (v6 == v4)
            return result;
        }
        return 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t *mbs_free(uint64_t *result, _QWORD *a2)
{
  if (*result)
    return heap_Free(a2, *result);
  return result;
}

uint64_t log_mbs_fput_sjis(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char __s[4];

  if (a2[2] < 1)
    return 0;
  v4 = 0;
  v5 = 1;
  do
  {
    v6 = *(_QWORD *)a2;
    if (*(char *)(*(_QWORD *)a2 + 4 * v4) < 1)
    {
      LODWORD(v7) = 0;
    }
    else
    {
      v7 = 0;
      do
      {
        __s[v7] = *(_BYTE *)(v6 + v5 + v7);
        ++v7;
      }
      while (v7 < *(char *)(v6 + 4 * v4));
    }
    __s[v7] = 0;
    result = ssftstring_AppendCStr(a1, __s);
    if ((result & 0x80000000) != 0)
      break;
    ++v4;
    v5 += 4;
  }
  while (v4 < a2[2]);
  return result;
}

uint64_t sjis_len(const char *a1)
{
  const char *v1;
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;

  v1 = a1;
  v2 = cstdlib_strlen(a1);
  if (v2 < 1)
    return 0;
  v3 = 0;
  v4 = 1;
  do
  {
    if (v4 == 1)
    {
      v5 = (*v1 + 32) >= 0x1Du && (*v1 + 127) >= 0x1Fu;
      v3 = (v3 + 1);
      if (v5)
        v4 = 1;
      else
        v4 = 2;
    }
    else
    {
      v4 = 1;
    }
    ++v1;
    --v2;
  }
  while (v2);
  return v3;
}

unint64_t mbs_len_bytes(unint64_t result)
{
  uint64_t v1;
  char **v2;
  char *v3;
  int v4;

  v1 = *(unsigned int *)(result + 8);
  if ((int)v1 < 1)
    return 0;
  v2 = (char **)result;
  LODWORD(result) = 0;
  v3 = *v2;
  do
  {
    v4 = *v3;
    v3 += 4;
    result = (result + v4);
    --v1;
  }
  while (v1);
  return result;
}

uint64_t mbs_kanji_count(unsigned int *a1)
{
  uint64_t v1;
  uint64_t result;
  unsigned __int8 *i;
  int v5;
  int v6;

  v1 = a1[2];
  if ((int)v1 >= 1)
  {
    result = 0;
    for (i = (unsigned __int8 *)(*(_QWORD *)a1 + 2); ; i += 4)
    {
      if (*(i - 2) != 2)
        goto LABEL_10;
      v5 = *(i - 1);
      if ((v5 + 120) >= 0x18u && (v5 & 0xF0) != 0xE0)
        goto LABEL_10;
      v6 = *i;
      if (v5 == 136 && v6 == 234)
        goto LABEL_10;
      if (v5 == 147 && v6 == 241)
        goto LABEL_10;
      if (v5 != 142)
        break;
      if (v6 != 79 && v6 != 108 && v6 != 181)
        goto LABEL_16;
LABEL_10:
      if (!--v1)
        return result;
    }
    if (v5 == 140 && v6 == 220 || v5 == 152 && v6 == 90 || v5 == 148 && v6 == 170)
      goto LABEL_10;
LABEL_16:
    if (v5 == 139 && v6 == 227)
      result = result;
    else
      result = (result + 1);
    goto LABEL_10;
  }
  return 0;
}

uint64_t mbs_add_str(uint64_t a1, uint64_t a2, int a3, int a4, char a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = 2350915591;
  if (a3 < 0 || *(_DWORD *)(a2 + 8) < a4 + a3)
    return v6;
  v12 = *(int *)(a1 + 8);
  if (!(_DWORD)v12)
  {
    v14 = (4 * a4);
    v13 = heap_Alloc((uint64_t)a6, v14);
    *(_QWORD *)a1 = v13;
    if (v13)
      goto LABEL_7;
    return 2350915594;
  }
  v13 = heap_Realloc(a6, *(_QWORD *)a1, (4 * (v12 + a4)));
  if (!v13)
    return 2350915594;
  *(_QWORD *)a1 = v13;
  v14 = (4 * a4);
LABEL_7:
  cstdlib_memcpy((void *)(v13 + 4 * v12), (const void *)(*(_QWORD *)a2 + 4 * a3), v14);
  if (a4 >= 1)
  {
    v15 = a4;
    v16 = 4 * v12 + 3;
    do
    {
      *(_BYTE *)(*(_QWORD *)a1 + v16) = a5;
      v16 += 4;
      --v15;
    }
    while (v15);
  }
  v6 = 0;
  *(_DWORD *)(a1 + 8) += a4;
  return v6;
}

uint64_t mbs_add_sjis_str(uint64_t a1, char *__s, char a3, uint64_t *a4)
{
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  v8 = cstdlib_strlen(__s);
  result = mbs_create((uint64_t)&v10, v8, __s, a4);
  if ((result & 0x80000000) == 0)
  {
    result = mbs_add_str(a1, (uint64_t)&v10, 0, v11, a3, a4);
    if ((result & 0x80000000) == 0)
    {
      if (v10)
        heap_Free(a4, v10);
      return 0;
    }
  }
  return result;
}

uint64_t mbs_check_flag(_QWORD *a1, int a2, int a3)
{
  uint64_t v3;
  int i;

  if (a3 < 1)
    return 0;
  v3 = a3;
  for (i = 4 * a2; *(_BYTE *)(*a1 + 3 + i) != 1; i += 4)
  {
    if (!--v3)
      return 0;
  }
  return 1;
}

uint64_t mbs_len_as_sjis(uint64_t a1, int a2, int a3)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  int v8;

  if (a2 > a3)
    return 0;
  result = 0;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5 <= a2)
    v5 = a2;
  v6 = v5 - (uint64_t)a2;
  v7 = 4 * a2;
  v8 = a3 - a2 + 1;
  do
  {
    if (!v6)
      break;
    result = (result + *(char *)(*(_QWORD *)a1 + v7));
    --v6;
    v7 += 4;
    --v8;
  }
  while (v8);
  return result;
}

uint64_t mbs2sjis(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  int v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = a3 + a2;
  if (*(_DWORD *)(a1 + 8) < a3 + (int)a2)
    return -1;
  if (a3 >= 1)
  {
    v6 = 0;
    v7 = 4 * (int)a2;
    v8 = (a2 << 34) | 0x100000000;
    while (*(char *)(*(_QWORD *)a1 + v7) < 1)
    {
LABEL_9:
      LODWORD(a2) = a2 + 1;
      v7 += 4;
      v8 += 0x400000000;
      if ((int)a2 >= v5)
        goto LABEL_12;
    }
    v9 = *(unsigned __int8 *)(*(_QWORD *)a1 + v7);
    v10 = v8;
    while (1)
    {
      *(_BYTE *)(a4 + v6++) = *(_BYTE *)(*(_QWORD *)a1 + (v10 >> 32));
      if (a5 < v6)
        return -1;
      v10 += 0x100000000;
      if (!--v9)
        goto LABEL_9;
    }
  }
  v6 = 0;
LABEL_12:
  *(_BYTE *)(a4 + v6) = 0;
  return v6;
}

uint64_t compare_tag(uint64_t a1, int a2, char *__s)
{
  char *v3;
  int v6;
  uint64_t v8;
  unsigned __int8 *i;

  v3 = __s;
  v6 = cstdlib_strlen(__s);
  if (v6 + a2 > *(_DWORD *)(a1 + 8))
    return 0;
  if (v6 >= 1)
  {
    v8 = v6;
    for (i = (unsigned __int8 *)(*(_QWORD *)a1 + 4 * a2 + 1); *(i - 1) == 1 && *i == *v3; i += 4)
    {
      ++v3;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t mbs_one_char(_QWORD *a1, int a2)
{
  return *(char *)(*a1 + 4 * a2 + 1);
}

uint64_t *attribute_copy_one(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  int v5;
  char *v6;
  int v7;
  char *v8;

  if (!a1)
    return 0;
  v4 = (uint64_t *)heap_Alloc((uint64_t)a2, 24);
  if (v4)
  {
    v5 = cstdlib_strlen(*(const char **)a1);
    v6 = (char *)heap_Alloc((uint64_t)a2, (v5 + 1));
    *v4 = (uint64_t)v6;
    if (v6)
    {
      cstdlib_strcpy(v6, *(const char **)a1);
      v7 = cstdlib_strlen(*(const char **)(a1 + 8));
      v8 = (char *)heap_Alloc((uint64_t)a2, (v7 + 1));
      v4[1] = (uint64_t)v8;
      if (v8)
      {
        cstdlib_strcpy(v8, *(const char **)(a1 + 8));
        v4[2] = *(_QWORD *)(a1 + 16);
        return v4;
      }
      heap_Free(a2, *v4);
    }
    heap_Free(a2, (uint64_t)v4);
    return 0;
  }
  return v4;
}

uint64_t *attribute_copy_all(uint64_t *result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  char v6;
  uint64_t *v7;

  if (result)
  {
    v3 = (uint64_t)result;
    v4 = 0;
    v5 = 0;
    v6 = 1;
    while (1)
    {
      result = attribute_copy_one(v3, a2);
      if (!result)
        break;
      v7 = result;
      result[2] = 0;
      if ((v6 & 1) == 0)
      {
        v4[2] = (uint64_t)result;
        result = v5;
      }
      v6 = 0;
      v3 = *(_QWORD *)(v3 + 16);
      v4 = v7;
      v5 = result;
      if (!v3)
        return result;
    }
    attribute_free_all(v5, a2);
    return 0;
  }
  return result;
}

uint64_t *attribute_free_all(uint64_t *result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = (uint64_t)result;
    if (*result)
      heap_Free(a2, *result);
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      heap_Free(a2, v4);
    attribute_free_all(*(_QWORD *)(v3 + 16), a2);
    return heap_Free(a2, v3);
  }
  return result;
}

_QWORD *attribute_name_free(_QWORD *result, _QWORD *a2)
{
  if (result)
    return heap_Free(a2, (uint64_t)result);
  return result;
}

_QWORD *attribute_value_free(_QWORD *result, _QWORD *a2)
{
  if (result)
    return heap_Free(a2, (uint64_t)result);
  return result;
}

_BYTE *is_internal(uint64_t a1)
{
  _BYTE *result;

  result = (_BYTE *)get_pointer_of_symbol((uint64_t)&SF_symbol_file, a1);
  if (result)
    return (_BYTE *)(*result == 95 && result[1] == 73);
  return result;
}

uint64_t exist_symbol(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _BYTE *pointer_of_symbol;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  v10[1] = *(_QWORD *)(a2 + 48);
  if (*(_DWORD *)(a2 + 32) == 2)
  {
    v4 = 0;
    v5 = *(_QWORD *)(a2 + 40);
  }
  else
  {
    v5 = 0;
    v4 = 1;
  }
  v10[0] = v5;
  while (1)
  {
    v6 = v4;
    v7 = (uint64_t *)v10[v4];
    pointer_of_symbol = (_BYTE *)get_pointer_of_symbol((uint64_t)&SF_symbol_file, *v7);
    if (!pointer_of_symbol || *pointer_of_symbol != 95 || pointer_of_symbol[1] != 73)
      break;
    if (exist_symbol(a1, v7))
      return 1;
LABEL_13:
    v4 = 1;
    if (v6)
      return 0;
  }
  if (*(_QWORD *)a1 != *v7 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 4 * v6 + 12))
    goto LABEL_13;
  return 1;
}

uint64_t find_attribute(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _BYTE *pointer_of_symbol;
  uint64_t result;
  uint64_t v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  v13[1] = *(_QWORD *)(a2 + 48);
  if (*(_DWORD *)(a2 + 32) == 2)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a2 + 40);
  }
  else
  {
    v7 = 0;
    v6 = 1;
  }
  v13[0] = v7;
  while (1)
  {
    v8 = v6;
    v9 = (uint64_t *)v13[v6];
    pointer_of_symbol = (_BYTE *)get_pointer_of_symbol((uint64_t)&SF_symbol_file, *v9);
    if (pointer_of_symbol && *pointer_of_symbol == 95 && pointer_of_symbol[1] == 73)
    {
      result = find_attribute(a1, v9, a3);
      if ((_DWORD)result == 1)
        return result;
      goto LABEL_16;
    }
    if (*(_QWORD *)a1 == *v9 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 4 * v8 + 12))
    {
      v12 = v9[3];
      if (v12)
        break;
    }
LABEL_16:
    v6 = 1;
    if (v8)
      return 0;
  }
  while (cstdlib_strcmp(*(const char **)v12, *(const char **)(a1 + 16)))
  {
    v12 = *(_QWORD *)(v12 + 16);
    if (!v12)
      goto LABEL_16;
  }
  *a3 = *(_QWORD *)(v12 + 8);
  return 1;
}

uint64_t get_attribute(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = 0;
  if (find_attribute(a1, a2, &v4) == 1)
    return v4;
  if (cstdlib_strcmp(*(const char **)(a1 + 16), "POS"))
    return 0;
  return get_pointer_of_symbol((uint64_t)&SF_symbol_file, *(_QWORD *)a1);
}

BOOL compare_operand(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *attribute;
  const char *v8;
  BOOL v9;
  int v10;
  _BOOL8 result;
  _BOOL4 v12;

  attribute = *(const char **)(a2 + 8);
  if (!*(_DWORD *)a2)
    attribute = (const char *)get_attribute(*(_QWORD *)(a2 + 8), a4);
  v8 = *(const char **)(a3 + 8);
  if (!*(_DWORD *)a3)
    v8 = (const char *)get_attribute(*(_QWORD *)(a3 + 8), a4);
  if (attribute)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (v9)
    return 0;
  v10 = cstdlib_strcmp(attribute, v8);
  result = v10 == 0;
  if (a1 != 2)
  {
    v12 = v10 != 0;
    return a1 == 3 && v12;
  }
  return result;
}

uint64_t eval_cond(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;

  if (!a1)
    return 1;
  v3 = a1;
  while (1)
  {
    v4 = *(_DWORD *)v3;
    if (*(_DWORD *)v3 != 1)
      break;
    if (!eval_cond(*(_QWORD *)(v3 + 8), a2))
    {
      v3 = *(_QWORD *)(v3 + 16);
      if (v3)
        continue;
    }
    return 1;
  }
  if ((v4 - 2) < 2)
    return compare_operand(v4, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), a2);
  if (v4)
  {
    if (v4 == 4)
      return exist_symbol(*(_QWORD *)(v3 + 8), a2);
    return 0;
  }
  return eval_cond(*(_QWORD *)(v3 + 8), a2) && eval_cond(*(_QWORD *)(v3 + 16), a2);
}

uint64_t assign_attribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t attribute;
  uint64_t v8;
  uint64_t *v9;
  uint64_t result;

  attribute = *(_QWORD *)(a2 + 8);
  if (*(_DWORD *)a2 || (attribute = get_attribute(*(_QWORD *)(a2 + 8), a3)) != 0)
  {
    v8 = *(_QWORD *)(a3 + 24);
    if (v8)
    {
      while (1)
      {
        v9 = (uint64_t *)(v8 + 16);
        if (!*(_QWORD *)(v8 + 16))
          break;
        if (!cstdlib_strcmp(*(const char **)v8, *(const char **)(*(_QWORD *)(a1 + 8) + 16)))
          goto LABEL_12;
        v8 = *v9;
      }
      if (!cstdlib_strcmp(*(const char **)v8, *(const char **)(*(_QWORD *)(a1 + 8) + 16)))
      {
LABEL_12:
        *(_QWORD *)v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
        *(_QWORD *)(v8 + 8) = attribute;
        return 1;
      }
      result = heap_Alloc(a4, 24);
      if (!result)
        return result;
      *(_QWORD *)result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
      *(_QWORD *)(result + 8) = attribute;
      *(_QWORD *)(result + 16) = 0;
      *v9 = result;
    }
    else
    {
      result = heap_Alloc(a4, 24);
      if (!result)
        return result;
      *(_QWORD *)result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
      *(_QWORD *)(result + 8) = attribute;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(a3 + 24) = result;
    }
  }
  return 1;
}

uint64_t exec_actions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;

  if (!a1)
    return 1;
  v5 = a1;
  while (1)
  {
    if (*(_DWORD *)v5 == 1)
    {
      v7 = *(uint64_t **)(v5 + 8);
      if (*v7 && !eval_cond(*v7, a2))
        v8 = v7[2];
      else
        v8 = v7[1];
      result = exec_actions(v8, a2, a3);
      if (!(_DWORD)result)
        return result;
      goto LABEL_12;
    }
    if (*(_DWORD *)v5)
      return 0;
    result = assign_attribute(**(_QWORD **)(v5 + 8), *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8), a2, a3);
    if (!(_DWORD)result)
      return result;
LABEL_12:
    v5 = *(_QWORD *)(v5 + 16);
    if (!v5)
      return 1;
  }
}

BOOL compare_attribute(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2;
  v3 = a1;
  if (!a1 || !a2)
    return (v3 | v2) == 0;
  while (!cstdlib_strcmp(*(const char **)v3, *(const char **)v2)
       && !cstdlib_strcmp(*(const char **)(v3 + 8), *(const char **)(v2 + 8)))
  {
    v3 = *(_QWORD *)(v3 + 16);
    v2 = *(_QWORD *)(v2 + 16);
    if (!v3 || !v2)
      return (v3 | v2) == 0;
  }
  return 0;
}

char *mystrdup2(const char *a1, uint64_t a2)
{
  int v4;
  char *v5;
  char *v6;

  v4 = cstdlib_strlen(a1);
  v5 = (char *)heap_Alloc(a2, (v4 + 1));
  v6 = v5;
  if (v5)
    cstdlib_strcpy(v5, a1);
  return v6;
}

const char *set_attribute(const char *result, uint64_t a2)
{
  const char *i;
  int v3;
  const char *v5;
  _QWORD *v6;
  char v7;
  const char *v8;
  _QWORD *v9;
  const char *v10;
  int v11;

  if (result)
  {
    i = result;
    v3 = *(unsigned __int8 *)result;
    if (*result)
    {
      v5 = 0;
      v6 = 0;
      v7 = 1;
      while (1)
      {
        v8 = i;
        v9 = v6;
        v10 = i + 1;
        if (!v3)
          break;
        while (v3 != 58)
        {
          v11 = *(unsigned __int8 *)v10++;
          v3 = v11;
          if (!v11)
            return 0;
        }
        *((_BYTE *)v10 - 1) = 0;
        for (i = v10; *i; ++i)
        {
          if (*i == 59)
          {
            *i++ = 0;
            break;
          }
        }
        result = (const char *)heap_Alloc(a2, 24);
        if (result)
        {
          v6 = result;
          result = mystrdup2(v8, a2);
          *v6 = result;
          if (result)
          {
            result = mystrdup2(v10, a2);
            v6[1] = result;
            if (result)
            {
              v6[2] = 0;
              result = (const char *)v6;
              if ((v7 & 1) == 0)
              {
                v9[2] = v6;
                result = v5;
              }
              v7 = 0;
              v3 = *(unsigned __int8 *)i;
              v5 = result;
              if (*i)
                continue;
            }
          }
        }
        return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t log_output_attribute(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char i;

  result = ssftstring_AppendCStr(a1, "{");
  if ((result & 0x80000000) == 0)
  {
    if (a2)
    {
      for (i = 0; ; i = 1)
      {
        if ((i & 1) != 0)
        {
          result = ssftstring_AppendCStr(a1, ",");
          if ((result & 0x80000000) != 0)
            break;
        }
        result = ssftstring_AppendCStr(a1, *(char **)a2);
        if ((result & 0x80000000) != 0)
          break;
        result = ssftstring_AppendCStr(a1, "=\"");
        if ((result & 0x80000000) != 0)
          break;
        result = ssftstring_AppendCStr(a1, *(char **)(a2 + 8));
        if ((result & 0x80000000) != 0)
          break;
        result = ssftstring_AppendCStr(a1, "\" ");
        if ((result & 0x80000000) != 0)
          break;
        a2 = *(_QWORD *)(a2 + 16);
        if (!a2)
          return ssftstring_AppendCStr(a1, "}");
      }
    }
    else
    {
      return ssftstring_AppendCStr(a1, "}");
    }
  }
  return result;
}

uint64_t times_limit_over()
{
  return 1;
}

uint64_t box_hash_get_address(int a1, int a2)
{
  int v2;

  v2 = 20 * (a1 % 200);
  if (((a2 / 20) & 1) != 0)
    return (v2 + 20 * (a2 / 20) - a2 + 19);
  else
    return (v2 + a2 % 20);
}

uint64_t box_hash_get_leading_word(_QWORD *a1, int a2, int a3, int a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*a1 + 8 * a4);
  if (!v4)
    return 0;
  while (*(__int16 *)(v4 + 10) != a3 || *(__int16 *)(v4 + 8) != a2)
  {
    v4 = *(_QWORD *)(v4 + 16);
    if (!v4)
      return 0;
  }
  return *(_QWORD *)v4;
}

uint64_t *box_one_free_all(uint64_t *result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v3 = (uint64_t)result;
    v4 = *result;
    if (v4)
    {
      do
      {
        v5 = *(_QWORD *)(v4 + 24);
        word_data_free_all((uint64_t **)v4, a2);
        v4 = v5;
      }
      while (v5);
    }
    return heap_Free(a2, v3);
  }
  return result;
}

uint64_t *box_hash_free(_QWORD *a1, _QWORD *a2)
{
  uint64_t i;
  uint64_t *result;
  uint64_t *v6;

  for (i = 0; i != 4000; ++i)
  {
    result = *(uint64_t **)(*a1 + 8 * i);
    if (result)
    {
      do
      {
        v6 = (uint64_t *)result[2];
        box_one_free_all(result, a2);
        result = v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t box_hash_set_unknown(uint64_t *a1, int a2, char *__b)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 >= 1)
    memset_pattern16(__b, &unk_214F03DF0, 4 * a2);
  v5 = *((_DWORD *)a1 + 2);
  if (v5 >= 1)
  {
    v6 = 0;
    v7 = *a1;
    do
    {
      v8 = *(_QWORD *)(v7 + 8 * v6);
      if (v8)
      {
        do
        {
          if (*(_QWORD *)v8 && (*(__int16 *)(v8 + 10) & 0x80000000) == 0)
            bzero(&__b[4 * *(__int16 *)(v8 + 8)], 4 * *(unsigned __int16 *)(v8 + 10) + 4);
          v8 = *(_QWORD *)(v8 + 16);
        }
        while (v8);
        v5 = *((_DWORD *)a1 + 2);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  return 1;
}

uint64_t box_one_create(__int16 a1, __int16 a2, uint64_t a3)
{
  uint64_t result;

  result = heap_Alloc(a3, 24);
  if (result)
  {
    *(_WORD *)(result + 8) = a1;
    *(_WORD *)(result + 10) = a2;
    *(_WORD *)(result + 12) = 0;
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 16) = 0;
  }
  return result;
}

uint64_t box_one_add_word(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = 0;
  v3 = a1;
  do
  {
    v4 = v2;
    v2 = *v3;
    v3 = (_QWORD *)(*v3 + 24);
  }
  while (v2);
  v5 = (_QWORD *)(v4 + 24);
  if (!v4)
    v5 = a1;
  *v5 = a2;
  return 1;
}

uint64_t box_hash_add_word(_QWORD *a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  __int16 v7;
  __int16 v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;

  v7 = a4;
  v8 = a3;
  v11 = *(_QWORD *)(*a1 + 8 * a5);
  if (v11)
  {
    while (1)
    {
      v12 = v11;
      if (*(__int16 *)(v11 + 10) == a4 && *(__int16 *)(v11 + 8) == a3)
        break;
      v11 = *(_QWORD *)(v11 + 16);
      if (!v11)
        goto LABEL_7;
    }
    result = v11;
    goto LABEL_13;
  }
  v12 = 0;
LABEL_7:
  result = heap_Alloc(a6, 24);
  if (result)
  {
    *(_WORD *)(result + 8) = v8;
    *(_WORD *)(result + 10) = v7;
    *(_WORD *)(result + 12) = 0;
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 16) = 0;
    if (v12)
      v14 = (uint64_t *)(v12 + 16);
    else
      v14 = (uint64_t *)(*a1 + 8 * a5);
    *v14 = result;
LABEL_13:
    v15 = 0;
    v16 = (_QWORD *)result;
    do
    {
      v17 = v15;
      v15 = *v16;
      v16 = (_QWORD *)(*v16 + 24);
    }
    while (v15);
    v18 = (_QWORD *)(v17 + 24);
    if (!v17)
      v18 = (_QWORD *)result;
    *v18 = a2;
    return 1;
  }
  return result;
}

uint64_t UD_lookup()
{
  return 0;
}

uint64_t add_info_to_table(uint64_t a1, int a2, int a3, uint64_t a4, _QWORD *a5, uint64_t *a6, uint64_t a7, _QWORD *a8)
{
  uint64_t number_of_symbol;
  uint64_t v17;
  int address;
  uint64_t leading_word;
  uint64_t *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  char __s1[64];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (mbs2sjis(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 0, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 8), (uint64_t)__s1, 64) == -1)return 0;
  number_of_symbol = get_number_of_symbol(a4, __s1);
  if (number_of_symbol == -1)
  {
    free_information((uint64_t *)a1, a8);
    attribute_free_all(a6, a8);
    return 1;
  }
  v17 = number_of_symbol;
  address = box_hash_get_address(a2, a3);
  if (*(_DWORD *)(a7 + 40) == 1)
  {
    leading_word = box_hash_get_leading_word(a5, a2, a3, address);
    if (leading_word)
    {
      v20 = (uint64_t *)leading_word;
      while (mbs_compare(*(uint64_t **)(a1 + 8), *(_QWORD *)(*v20 + 8))
           || mbs_compare(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(*(_QWORD *)(*v20 + 16) + 8))|| !compare_attribute((uint64_t)a6, v20[2]))
      {
        v20 = (uint64_t *)v20[3];
        if (!v20)
          goto LABEL_10;
      }
      *(_QWORD *)(a1 + 24) = 0;
      v23 = *v20;
      for (i = *(_QWORD *)(*v20 + 24); i; i = *(_QWORD *)(i + 24))
        v23 = i;
      *(_QWORD *)(v23 + 24) = a1;
      return 1;
    }
  }
LABEL_10:
  result = heap_Alloc((uint64_t)a8, 32);
  if (result)
  {
    v22 = result;
    *(_QWORD *)result = a1;
    *(_QWORD *)(result + 8) = v17;
    *(_QWORD *)(result + 16) = a6;
    *(_QWORD *)(result + 24) = 0;
    result = box_hash_add_word(a5, result, a2, a3, address, (uint64_t)a8);
    if ((_DWORD)result != 1)
    {
      heap_Free(a8, v22);
      return 0;
    }
  }
  return result;
}

uint64_t get_char_kind(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[256];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  result = mbs2sjis(a1, a2, 1, (uint64_t)v3, 256);
  if ((_DWORD)result != -1)
    return get_char_kind_hash(v3[0], v3[1]);
  return result;
}

uint64_t *unknown_info_create(const char *a1, const char *a2, const char *a3, const char *a4, _QWORD *a5)
{
  uint64_t *info;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  info = (uint64_t *)create_info(0, a1, a5);
  if (info)
  {
    v10 = create_info(1, a2, a5);
    info[2] = v10;
    if (!v10)
      goto LABEL_6;
    v11 = v10;
    *(_QWORD *)(v10 + 16) = 0;
    v12 = create_info(2, a3, a5);
    *(_QWORD *)(v11 + 16) = v12;
    if (!v12)
      goto LABEL_6;
    v13 = v12;
    *(_QWORD *)(v12 + 16) = 0;
    v14 = create_info(3, a4, a5);
    *(_QWORD *)(v13 + 16) = v14;
    if (v14)
    {
      *(_QWORD *)(v14 + 16) = 0;
    }
    else
    {
LABEL_6:
      free_information(info, a5);
      return 0;
    }
  }
  return info;
}

_BYTE *get_pron_from_grapheme(uint64_t a1, uint64_t a2, int a3, int a4, _QWORD *a5)
{
  int v5;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v25;

  v5 = a3 - a2;
  if (a3 < (int)a2)
    return 0;
  v10 = v5 + 1;
  v11 = heap_Alloc((uint64_t)a5, (2 * (v5 + 1)) | 1u);
  if (!v11)
    return 0;
  v12 = (unsigned __int8 *)v11;
  v13 = 8 * v10;
  if (a4 == 3)
    v14 = v13 | 2u;
  else
    v14 = v13 | 1u;
  v15 = (_BYTE *)heap_Alloc((uint64_t)a5, v14);
  if (v15)
  {
    if (mbs2sjis(a1, a2, v10, (uint64_t)v12, (2 * v10) | 1u) != -1)
    {
      v25 = 0;
      *v15 = 0;
      if (*v12)
      {
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v21 = v12;
        do
        {
          get_pron_from_grapheme_hash(v21, &v15[v19], (int *)&v25 + 1, &v25, a4);
          if (HIDWORD(v25))
          {
            v20 += HIDWORD(v25);
            v19 += v25;
            v16 = v17;
            v17 = v18;
            v18 = v19;
          }
          v21 = &v12[v20];
        }
        while (*v21);
        if (a4 == 3 && v16 >= 1)
        {
          if (v19 >= v16)
          {
            v22 = v19;
            do
              v15[v22 + 1] = v15[v22];
            while (v22-- > v16);
          }
          v15[v16] = 39;
        }
      }
      goto LABEL_20;
    }
    heap_Free(a5, (uint64_t)v15);
    heap_Free(a5, (uint64_t)v12);
    return 0;
  }
LABEL_20:
  heap_Free(a5, (uint64_t)v12);
  return v15;
}

uint64_t non_lookup_tag(uint64_t a1, uint64_t a2, int a3, const char *a4, const char *a5, uint64_t a6, _QWORD *a7, uint64_t a8, _QWORD *a9)
{
  int v9;
  uint64_t result;
  const char *v16;
  uint64_t *v17;
  int v18;

  v9 = a3 - a2;
  if (a3 < (int)a2)
    return 0;
  result = heap_Alloc((uint64_t)a9, (2 * (v9 + 1)) | 1u);
  if (result)
  {
    v16 = (const char *)result;
    if (mbs2sjis(a1, a2, v9 + 1, result, (2 * (v9 + 1)) | 1u) == -1)
    {
      heap_Free(a9, (uint64_t)v16);
    }
    else
    {
      v17 = unknown_info_create(v16, a4, a5, "922", a9);
      heap_Free(a9, (uint64_t)v16);
      if (v17)
      {
        if (*(_BYTE *)(a8 + 68))
          v18 = a2 + 1;
        else
          v18 = a2;
        if (add_info_to_table((uint64_t)v17, v18, v9, a6, a7, 0, a8, a9))
          return 1;
        free_information(v17, a9);
      }
    }
    return 0;
  }
  return result;
}

uint64_t look_up_unknown_word(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  unsigned int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *(_DWORD *)(a1 + 8);
  if (*(_BYTE *)(a2 + 68))
    v10 = v9 + 1;
  else
    v10 = v9;
  v11 = (char *)heap_Calloc(a5, v10, 4);
  if (v11 && box_hash_set_unknown(a4, v10, v11))
  {
    if ((int)v10 >= 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = (v10 - 1);
      do
      {
        if (v12 == v14)
        {
          v15 = *(_DWORD *)&v11[4 * v14];
        }
        else
        {
          v16 = v12 + 1;
          v15 = *(_DWORD *)&v11[4 * v12];
          if (*(_DWORD *)&v11[4 * v12 + 4] == v15)
            goto LABEL_14;
        }
        if (v15 == 1
          && !non_lookup_tag(a1, v13 - (*(_BYTE *)(a2 + 68) != 0), v12 - (*(_BYTE *)(a2 + 68) != 0), (const char *)(a2 + 136), (const char *)(a2 + 200), a3, a4, a2, a5))
        {
          goto LABEL_16;
        }
        v16 = v12 + 1;
        v13 = v12 + 1;
LABEL_14:
        v12 = v16;
      }
      while (v16 != v10);
    }
    v17 = 1;
  }
  else
  {
LABEL_16:
    v17 = 0;
  }
  heap_Free(a5, (uint64_t)v11);
  return v17;
}

uint64_t mbs_normalize(uint64_t result)
{
  _QWORD *v1;
  int v2;
  int v3;
  _BYTE *v4;
  int v5;
  char **v6;
  char **v7;
  int v8;
  _BYTE **v9;
  _BYTE *v10;
  unsigned int v11;
  char **v12;
  char *v13;
  int v14;
  char **v15;
  char *v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 **v19;
  char **i;
  char *v21;
  char *v22;

  if (result)
  {
    v1 = (_QWORD *)result;
    v2 = *(_DWORD *)(result + 8);
    result = 1;
    if (v2 >= 1)
    {
      while (1)
      {
        v3 = v2 - 1;
        v4 = (_BYTE *)(*v1 + 4 * (v2 - 1));
        v5 = v4[1];
        if (*v4 == 1)
        {
          if ((v5 & 0xFE) == 0xDE)
          {
            if (v5 == 222)
              v6 = Norm_in1;
            else
              v6 = (char **)&Norm_in2;
            if (v5 == 222)
              v7 = (char **)&Norm_out1;
            else
              v7 = Norm_out2;
            if (v2 == 1)
              return 1;
            if (*(v4 - 4) == 1)
            {
              v8 = **v6;
              if (**v6)
              {
                v9 = v6 + 1;
                while (v8 != *(v4 - 3))
                {
                  v10 = *v9++;
                  v8 = *v10;
                  ++v7;
                  if (!*v10)
                    goto LABEL_51;
                }
LABEL_48:
                *v4 = 0;
                *(v4 - 4) = 2;
                v21 = *v7;
                *(v4 - 3) = **v7;
                *(v4 - 2) = v21[1];
                v3 = v2 - 2;
              }
            }
          }
          else if ((v5 + 90) <= 0x37u)
          {
            v17 = 0;
            v18 = -79;
            while (v5 != v18)
            {
              v18 = *Norm_in3[++v17];
              if (v17 == 56)
                goto LABEL_51;
            }
            *v4 = 2;
            v22 = Norm_out3[v17];
            v4[1] = *v22;
            v4[2] = v22[1];
          }
        }
        else
        {
          v11 = v4[2];
          if (v5 == 129 && (v11 & 0xFE) == 0x4A)
          {
            if (v11 == 74)
              v12 = Norm_in4;
            else
              v12 = Norm_in5;
            if (v11 == 74)
              v7 = (char **)&Norm_out4;
            else
              v7 = Norm_out5;
            if (v2 == 1)
              return 1;
            if (*(v4 - 4) == 2)
            {
              v13 = *v12;
              v14 = **v12;
              if (**v12)
              {
                v15 = v12 + 1;
                while (v14 != *(v4 - 3) || v13[1] != *(v4 - 2))
                {
                  v16 = *v15++;
                  v13 = v16;
                  v14 = *v16;
                  ++v7;
                  if (!*v16)
                    goto LABEL_51;
                }
                goto LABEL_48;
              }
            }
          }
          else if (v5 == 130 && v11 >= 0x60 && v11 <= 0x9A)
          {
            v19 = (unsigned __int8 **)&Norm_in6;
            for (i = Norm_out6; ; ++i)
            {
              if (**v19 == 130)
              {
                if ((*v19)[1] == v11)
                {
                  *v4 = 1;
                  v4[1] = **i;
                  break;
                }
              }
              else if (!**v19)
              {
                break;
              }
              ++v19;
            }
          }
        }
LABEL_51:
        v2 = v3;
        if (v3 <= 0)
          return 1;
      }
    }
  }
  return result;
}

_QWORD *modify_comma(void *a1, int a2, _QWORD *a3)
{
  size_t v6;
  _QWORD *result;
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  char v20;

  v6 = a2;
  result = (_QWORD *)heap_Alloc((uint64_t)a3, a2);
  if (result)
  {
    v8 = result;
    cstdlib_memcpy(result, a1, v6);
    if (a2 >= 1)
    {
      v9 = 0;
      v10 = -1;
      do
      {
        v11 = v10;
        if (v10 >= 4uLL)
          v11 = 4;
        if (v10 >= 4)
          v12 = 4;
        else
          v12 = v10;
        if (!*((_BYTE *)a1 + v9))
        {
          if (v9)
          {
            v13 = 0;
            v14 = v11 + 1;
            v15 = v12 + 1;
            v16 = v10;
            while (*((_BYTE *)a1 + v16) == 1)
            {
              ++v13;
              --v16;
              if (v14 == v13)
              {
                v17 = v13 + 1;
                goto LABEL_17;
              }
            }
            v17 = v13 + 1;
            v15 = v13;
          }
          else
          {
            v15 = 0;
            v16 = -1;
            v17 = 1;
          }
LABEL_17:
          v18 = 0;
          v19 = 1;
          while (v9 + v19 < v6)
          {
            if (*((_BYTE *)a1 + v9 + v19) != 1)
            {
              v18 = v19 - 1;
              break;
            }
            ++v18;
            if ((_DWORD)++v19 == 6)
            {
              v18 = 5;
              break;
            }
          }
          if (v15 <= 4
            && (v15 > 2
             || v15 && ((v16 & 0x80000000) != 0 || v9 == v17 || *((_BYTE *)a1 + v16) || *((_BYTE *)a1 + v16 - 1) != 1))
            && (v18 - 3) < 2)
          {
            v20 = 1;
          }
          else
          {
            v20 = -1;
          }
          v8[v9] = v20;
        }
        ++v9;
        ++v10;
      }
      while (v9 != v6);
    }
    cstdlib_memcpy(a1, v8, v6);
    return heap_Free(a3, (uint64_t)v8);
  }
  return result;
}

BOOL mycstdlib_isalpha(char a1)
{
  return (a1 & 0xDFu) - 65 < 0x1A;
}

uint64_t mark_tag_state(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  int v14;

  if (!a2)
    return 0;
  if (*(int *)(a1 + 8) < 1)
    return 1;
  v4 = 0;
  v14 = 0;
  LODWORD(v5) = 0;
  v6 = 36;
  do
  {
    v7 = v5;
    if (v6 == 36 || v6 == 33)
    {
      if ((signed int)(v5 + cstdlib_strlen(START_TAG_SAPI_PRN)) <= *(_DWORD *)(a1 + 8)
        && compare_tag(a1, v5, START_TAG_SAPI_PRN) == 1)
      {
        LODWORD(v5) = v5 + cstdlib_strlen(START_TAG_SAPI_PRN);
        v6 = 34;
        *(_BYTE *)(a2 + v7) = 34;
        if ((int)cstdlib_strlen(START_TAG_SAPI_PRN) >= 2)
        {
          v8 = v7 + 1;
          do
            *(_BYTE *)(a2 + v8++) = 35;
          while (v8 < (int)(v7 + cstdlib_strlen(START_TAG_SAPI_PRN)));
          v4 = 1;
          goto LABEL_16;
        }
        v4 = 1;
        goto LABEL_29;
      }
      if (mbs_one_char((_QWORD *)a1, v5) == 30)
      {
        LODWORD(v5) = v5 + cstdlib_strlen(START_TAG);
        v6 = 34;
        *(_BYTE *)(a2 + v7) = 34;
        if ((int)cstdlib_strlen(START_TAG) >= 2)
        {
          v9 = v7 + 1;
          do
            *(_BYTE *)(a2 + v9++) = 35;
          while (v9 < (int)(v7 + cstdlib_strlen(START_TAG)));
LABEL_16:
          v6 = 34;
        }
LABEL_29:
        v14 = v7;
        continue;
      }
      v6 = 33;
      goto LABEL_31;
    }
    if (v4 == 1
      && (signed int)(v5 + cstdlib_strlen(END_TAG_SAPI_PRN)) <= *(_DWORD *)(a1 + 8)
      && compare_tag(a1, v5, END_TAG_SAPI_PRN) == 1)
    {
      v10 = cstdlib_strlen(END_TAG_SAPI_PRN);
      v5 = (int)v5 + (uint64_t)v10;
      v11 = v5 - 1;
      if (v7 < (int)v5 - 1)
      {
        memset((void *)(a2 + v7), 35, (v10 - 2) + 1);
        v11 = v5 - 1;
      }
      v4 = 0;
      v6 = 36;
      *(_BYTE *)(a2 + v11) = 36;
    }
    else
    {
      if (mbs_one_char((_QWORD *)a1, v5) != 31)
      {
        v6 = 35;
LABEL_31:
        *(_BYTE *)(a2 + (int)v5) = v6;
        LODWORD(v5) = v5 + 1;
        continue;
      }
      v12 = cstdlib_strlen(END_TAG);
      v5 = (int)v5 + (uint64_t)v12;
      if (v7 < (int)v5 - 1)
        memset((void *)(a2 + v7), 35, (v12 - 2) + 1);
      v6 = 36;
      *(_BYTE *)(a2 + v5 - 1) = 36;
    }
  }
  while ((int)v5 < *(_DWORD *)(a1 + 8));
  result = 1;
  if ((v6 & 0xFFFFFFFE) == 0x22 && v14 < (int)v5)
  {
    memset((void *)(a2 + v14), 33, (v5 + ~v14) + 1);
    return 1;
  }
  return result;
}

uint64_t make_add_word_to_table(const char *a1, const char *a2, const char *a3, uint64_t *a4, int a5, int a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10, _QWORD *a11)
{
  uint64_t result;
  uint64_t *v16;
  int v17;

  result = (uint64_t)unknown_info_create(a1, a2, a3, "0", a11);
  if (result)
  {
    v16 = (uint64_t *)result;
    if (*(_BYTE *)(a10 + 68))
      v17 = a5 + 1;
    else
      v17 = a5;
    if (add_info_to_table(result, v17, a6 - a5, a8, a9, a4, a10, a11))
    {
      return 1;
    }
    else
    {
      free_information(v16, a11);
      return 0;
    }
  }
  return result;
}

uint64_t add_user_word_table(uint64_t a1, const char *a2, const char *a3, const char *a4, const char *a5, _QWORD *a6, int a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  int v17;
  uint64_t result;
  uint64_t *v19;

  v17 = sjis_len(a2);
  result = (uint64_t)unknown_info_create(a2, a3, a4, a5, a10);
  if (result)
  {
    v19 = (uint64_t *)result;
    if (add_info_to_table(result, a7, v17 - 1, a1, a6, 0, a9, a10))
    {
      return 1;
    }
    else
    {
      free_information(v19, a10);
      return 0;
    }
  }
  return result;
}

_BYTE *tagged2pron(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  int v8;
  int v9;
  uint64_t v10;
  const char *v11;
  int v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  size_t v16;
  uint64_t v17;

  v8 = cstdlib_strlen(START_TAG);
  v9 = a3 - a2 - (cstdlib_strlen(END_TAG) + v8) + 1;
  if (v9 < 4)
    return 0;
  v10 = heap_Alloc((uint64_t)a4, (2 * v9) | 1u);
  if (!v10)
    return 0;
  v11 = (const char *)v10;
  v12 = cstdlib_strlen(START_TAG);
  if (mbs2sjis(a1, (v12 + a2), v9, (uint64_t)v11, (2 * v9) | 1u))
  {
    v13 = cstdlib_strlen(v11);
    v14 = heap_Alloc((uint64_t)a4, (v13 + 3));
    v15 = (_BYTE *)v14;
    if (v14)
    {
      cstdlib_strcpy((char *)(v14 + 1), v11);
      *v15 = 30;
      v16 = cstdlib_strlen(v11);
      v15[(uint64_t)((v16 << 32) + 0x100000000) >> 32] = v15[(int)v16];
      v17 = (uint64_t)((v16 << 32) - 0x100000000) >> 32;
      v15[(int)v16] = v15[v17];
      v15[v17] = 31;
      v15[(uint64_t)((v16 << 32) + 0x200000000) >> 32] = 0;
    }
  }
  else
  {
    v15 = 0;
  }
  heap_Free(a4, (uint64_t)v11);
  return v15;
}

uint64_t make_word_tagged_part(uint64_t a1, uint64_t a2, int a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  unsigned int v13;
  int v14;
  char *v15;
  size_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t add_word_to_table;
  uint64_t v21;
  int v22;
  char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  size_t v28;
  int v29;

  v13 = cstdlib_strlen(START_TAG_SAPI_PRN);
  v14 = a3 - a2 + 1;
  v15 = (char *)heap_Alloc(*(_QWORD *)(a7 + 24), (2 * v14) | 1u);
  if (!v15 || mbs2sjis(a1, a2, a3 - (int)a2 + 1, (uint64_t)v15, (2 * v14) | 1u) == -1)
  {
    v18 = 0;
    goto LABEL_8;
  }
  v16 = cstdlib_strlen(v15);
  if (v16 > cstdlib_strlen(START_TAG_SAPI_PRN) && !cstdlib_strncmp(v15, START_TAG_SAPI_PRN, v13))
  {
    v21 = *(_QWORD *)(a7 + 24);
    v22 = cstdlib_strlen("Xn");
    v23 = (char *)heap_Alloc(v21, (v22 + 1));
    v18 = v23;
    if (v23)
    {
      cstdlib_strcpy(v23, "Xn");
      v24 = *(_QWORD *)(a7 + 24);
      v25 = cstdlib_strlen(v15);
      v26 = heap_Alloc(v24, (v25 + 1));
      if (v26)
      {
        v27 = (char *)v26;
        v28 = cstdlib_strlen(START_TAG_SAPI_PRN);
        cstdlib_strcpy(v27, &v15[v28]);
        v29 = cstdlib_strlen(v27);
        v27[(int)(v29 - cstdlib_strlen(END_TAG_SAPI_PRN))] = 0;
        *v15 = 29;
        goto LABEL_6;
      }
    }
LABEL_8:
    add_word_to_table = 0;
    goto LABEL_9;
  }
  v18 = tagged2pron(a1, a2, a3, *(_QWORD **)(a7 + 24));
  if (!v18)
    goto LABEL_8;
LABEL_6:
  add_word_to_table = make_add_word_to_table(v15, "ROMAN", v18, 0, a2, a3, v17, a4, a5, a6, *(_QWORD **)(a7 + 24));
LABEL_9:
  heap_Free(*(_QWORD **)(a7 + 24), (uint64_t)v15);
  heap_Free(*(_QWORD **)(a7 + 24), (uint64_t)v18);
  return add_word_to_table;
}

uint64_t UD_regist_sapi_prn(uint64_t a1, uint64_t a2, int a3, _WORD *a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  int v14;
  uint64_t v15;

  v10 = cstdlib_strlen(START_TAG_SAPI_PRN);
  v11 = heap_Alloc(*(_QWORD *)(a5 + 24), (2 * a3) | 1u);
  if (!v11)
    return 0;
  v12 = (const char *)v11;
  if (mbs2sjis(a1, a2, a3, v11, (2 * a3) | 1u) == -1)
  {
    v15 = 0;
  }
  else
  {
    if ((int)cstdlib_strlen(v12) > v10 && !cstdlib_strncmp(v12, START_TAG_SAPI_PRN, v10))
    {
      v13 = &v12[v10];
      v14 = cstdlib_strlen(v13);
      v13[(int)(v14 - cstdlib_strlen(END_TAG_SAPI_PRN) + 1)] = 0;
      *a4 = 32;
    }
    v15 = 1;
  }
  heap_Free(*(_QWORD **)(a5 + 24), (uint64_t)v12);
  return v15;
}

uint64_t look_up_dictionary(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int16 a10, uint64_t a11, uint64_t a12, int a13, _DWORD *a14)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *info;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  int char_kind;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  const char *pron_from_grapheme;
  uint64_t v65;
  int v66;
  _QWORD *v67;
  uint64_t v68;
  unsigned int *v69;
  char *v70;
  unsigned int v71;
  _QWORD *v72;
  const char *MarkerArgStr;
  int v74;
  const char *v75;
  int v76;
  int v77;
  uint64_t v78;
  unsigned __int16 v79;
  int v80;
  unsigned int *v81;
  unint64_t v82;
  const char *v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  __int16 v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  _QWORD *v99;
  const char *v100;
  uint64_t v101;
  int v102;
  BOOL v103;
  char v104;
  uint64_t v105;
  uint64_t *v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  size_t v116;
  uint64_t *v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  const char *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  const char *v154;
  _QWORD *v155;
  int v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t *v159;
  uint64_t i;
  int v162;
  const char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  uint64_t v169;
  unsigned __int16 v170;
  unint64_t v171;
  uint64_t v172;
  char v173;
  int v174;
  int v175;
  int v176;
  unsigned __int16 v177;
  uint64_t v178;
  _DWORD *v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  const char *v184;
  char *__s;
  char *__sa;
  uint64_t v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  const char **__dst;
  int __dsta;
  uint64_t v194;
  uint64_t *v195;
  char *__s1;
  char *__s1a;
  char *__s1b;
  int __s1c;
  char *__s1d;
  int __s1e;
  uint64_t v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  unsigned __int8 v210;
  const char *v211;
  uint64_t v212[2];
  _QWORD v213[2];
  char *v214;
  _BYTE v215[936];
  _BYTE v216[80];
  char v217;
  _BYTE v218[79];
  char v219[80];
  uint64_t v220;

  v220 = *MEMORY[0x24BDAC8D0];
  v212[0] = 0;
  v212[1] = 0;
  v211 = 0;
  v210 = 0;
  v208 = 0;
  v209 = 0;
  __s1 = (char *)marker_getMarkerArgStr(1u);
  v206 = *(_QWORD *)(a8 + 184);
  v207 = *(_OWORD *)(a8 + 192);
  LOWORD(v208) = *(_WORD *)(a8 + 208);
  HIDWORD(v208) = *(_DWORD *)(a8 + 212);
  bzero(v213, 0x3C0uLL);
  v18 = heap_Alloc(*(_QWORD *)(a8 + 24), 1024);
  v19 = heap_Alloc(*(_QWORD *)(a8 + 24), 1025);
  v20 = heap_Alloc(*(_QWORD *)(a8 + 24), 1025);
  v21 = v20;
  v22 = 0;
  LODWORD(info) = 0;
  if (!v18 || !v19)
  {
    v24 = 0;
    v25 = 0;
    goto LABEL_36;
  }
  v194 = a1;
  v195 = a6;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  if (!v20)
    goto LABEL_237;
  v27 = 0;
  v28 = a13;
  do
  {
    v29 = heap_Alloc(*(_QWORD *)(a8 + 24), 80);
    v213[v27] = v29;
    if (!v29)
    {
      LODWORD(info) = 0;
      v22 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      goto LABEL_237;
    }
    ++v27;
  }
  while (v27 != 120);
  info = (uint64_t *)heap_Alloc(*(_QWORD *)(a8 + 24), *(unsigned int *)(a2 + 8));
  v24 = heap_Alloc(*(_QWORD *)(a8 + 24), *(unsigned int *)(a2 + 8));
  v30 = heap_Alloc(*(_QWORD *)(a8 + 24), *(unsigned int *)(a2 + 8));
  v25 = (uint64_t)info;
  v22 = v30;
  LODWORD(info) = 0;
  if (!v25 || !v24 || !v30)
  {
LABEL_36:
    v26 = 0;
    goto LABEL_237;
  }
  v188 = v25;
  if (!mark_tag_state(a2, v25))
  {
LABEL_73:
    LODWORD(info) = 0;
    goto LABEL_74;
  }
  v31 = a3;
  v184 = (const char *)(a3 + 68);
  if (*(_BYTE *)(a3 + 68))
  {
    info = (uint64_t *)create_info(0, "", *(_QWORD **)(a8 + 24));
    if (!info)
    {
LABEL_74:
      v26 = 0;
      goto LABEL_236;
    }
    v182 = v24;
    v32 = create_info(1, v184, *(_QWORD **)(a8 + 24));
    info[2] = v32;
    if (!v32)
    {
      free_information(info, *(_QWORD **)(a8 + 24));
      LODWORD(info) = 0;
      v26 = 0;
      goto LABEL_101;
    }
    v33 = v32;
    *(_QWORD *)(v32 + 16) = 0;
    v34 = create_info(2, " ", *(_QWORD **)(a8 + 24));
    v26 = v34;
    *(_QWORD *)(v33 + 16) = v34;
    if (!v34)
    {
      free_information(info, *(_QWORD **)(a8 + 24));
      LODWORD(info) = 0;
      goto LABEL_101;
    }
    *(_QWORD *)(v34 + 16) = 0;
    v35 = create_info(3, "0", *(_QWORD **)(a8 + 24));
    *(_QWORD *)(v26 + 16) = v35;
    v24 = v182;
    if (!v35
      || (*(_QWORD *)(v35 + 16) = 0,
          v36 = add_info_to_table((uint64_t)info, 0, 0, a5, v195, 0, a3, *(_QWORD **)(a8 + 24)),
          v31 = a3,
          v28 = a13,
          !v36))
    {
      free_information(info, *(_QWORD **)(a8 + 24));
      goto LABEL_73;
    }
  }
  LODWORD(v37) = *(_DWORD *)(a2 + 8);
  if ((int)v37 >= 1)
  {
    v38 = 0;
    do
    {
      *(_BYTE *)(v24 + v38) = 0;
      *(_BYTE *)(v22 + v38++) = 0;
      v37 = *(int *)(a2 + 8);
    }
    while (v38 < v37);
  }
  v181 = v28;
  if (*(_DWORD *)(v31 + 132) != 1)
  {
    v47 = 0;
    goto LABEL_38;
  }
  v39 = heap_Alloc(*(_QWORD *)(a8 + 24), v37);
  if (!v39)
    goto LABEL_73;
  v40 = (_BYTE *)v39;
  v41 = a2;
  LODWORD(v42) = *(_DWORD *)(a2 + 8);
  v43 = v188;
  __s = (char *)v39;
  if ((int)v42 >= 1)
  {
    v44 = 0;
    do
    {
      if (*(_BYTE *)(v43 + v44) != 33 || *(_BYTE *)(v24 + v44) == 1 || *(_BYTE *)(v22 + v44) == 1)
      {
        v45 = -2;
      }
      else
      {
        char_kind = get_char_kind(a2, v44);
        v40 = __s;
        v43 = v188;
        if (char_kind == 4)
          v45 = -1;
        else
          v45 = char_kind;
        v41 = a2;
      }
      v40[v44++] = v45;
      v42 = *(int *)(v41 + 8);
    }
    while (v44 < v42);
  }
  modify_comma(v40, v42, *(_QWORD **)(a8 + 24));
  v52 = *(_DWORD *)(a2 + 8);
  if (v52 >= 1)
  {
    v182 = v24;
    v53 = 0;
    v54 = 0;
    v47 = (uint64_t)__s;
    v180 = v21;
    while (1)
    {
      if (v53 == v52 - 1)
      {
        v55 = *(unsigned __int8 *)(v47 + v53);
      }
      else
      {
        v56 = v53 + 1;
        v57 = *(unsigned __int8 *)(v47 + v53 + 1);
        v55 = *(unsigned __int8 *)(v47 + v53);
        if (v57 == v55)
        {
          v58 = v53 - v54;
          if ((v57 != 1 || v58 <= 30) && ((v57 & 0xFE) != 2 || v58 <= 14))
            goto LABEL_62;
LABEL_58:
          v61 = v19;
          v62 = v18;
          v63 = a14;
          pron_from_grapheme = get_pron_from_grapheme(a2, v54, v53, (char)v57, *(_QWORD **)(a8 + 24));
          if (!pron_from_grapheme)
          {
            v93 = *(_QWORD **)(a8 + 24);
            v94 = (uint64_t)__s;
            goto LABEL_100;
          }
          v65 = (uint64_t)pron_from_grapheme;
          v66 = non_lookup_tag(a2, v54, v53, Dtype[__s[v53]], pron_from_grapheme, a5, v195, a3, *(_QWORD **)(a8 + 24));
          v67 = *(_QWORD **)(a8 + 24);
          if (!v66)
          {
            heap_Free(v67, (uint64_t)__s);
            v93 = *(_QWORD **)(a8 + 24);
            v94 = v65;
LABEL_100:
            heap_Free(v93, v94);
            LODWORD(info) = 0;
            v26 = 0;
            a14 = v63;
            v18 = v62;
            v19 = v61;
            v21 = v180;
LABEL_101:
            v24 = v182;
            goto LABEL_236;
          }
          heap_Free(v67, v65);
          v52 = *(_DWORD *)(a2 + 8);
          a14 = v63;
          v18 = v62;
          v19 = v61;
          v21 = v180;
          v47 = (uint64_t)__s;
          goto LABEL_61;
        }
      }
      LOBYTE(v57) = v55;
      if (v55 <= 0xFD)
        goto LABEL_58;
LABEL_61:
      v56 = v53 + 1;
      v54 = v53 + 1;
LABEL_62:
      v53 = v56;
      if (v56 >= v52)
      {
        v24 = v182;
        goto LABEL_38;
      }
    }
  }
  v47 = (uint64_t)__s;
LABEL_38:
  heap_Free(*(_QWORD **)(a8 + 24), v47);
  if ((mbs_copy((uint64_t)v212, (_QWORD *)a2, 0, *(_DWORD *)(a2 + 8), *(_QWORD **)(a8 + 24)) & 0x80000000) != 0)
  {
    LODWORD(info) = 0;
    v26 = 0;
    goto LABEL_235;
  }
  v48 = v181;
  v179 = a14;
  v183 = v24;
  if (v181 == 1)
  {
    if (a10)
    {
      v68 = 0;
      v69 = (unsigned int *)(a9 + 40);
      v70 = __s1;
      while (*(v69 - 2) <= *(_DWORD *)(a11 + 32))
      {
        if (*(v69 - 5) == 21)
          v70 = (char *)(*(_QWORD *)(a12 + 8) + *v69);
        v69 += 16;
        if (a10 == ++v68)
        {
          __s1 = v70;
          v71 = a10;
          goto LABEL_79;
        }
      }
      __s1 = v70;
      v71 = (unsigned __int16)v68;
    }
    else
    {
      v71 = 0;
    }
LABEL_79:
    v72 = *(_QWORD **)(a8 + 24);
    MarkerArgStr = marker_getMarkerArgStr(1u);
    v74 = cstdlib_strlen(MarkerArgStr);
    info = (uint64_t *)heap_Calloc(v72, 1, (v74 + 1));
    if (!info)
    {
      v26 = 2350915594;
      a14 = v179;
      goto LABEL_235;
    }
    v75 = marker_getMarkerArgStr(1u);
    __sa = (char *)info;
    cstdlib_strcpy((char *)info, v75);
    mbs_normalize((uint64_t)v212);
    v76 = *(_DWORD *)(a11 + 32);
    v77 = *(_DWORD *)(a9 + 32);
    v78 = heap_Calloc(*(_QWORD **)(a8 + 24), 1, 264);
    if (!v78)
    {
      LODWORD(info) = 0;
      v26 = 2350915594;
      a14 = v179;
      v24 = v183;
      goto LABEL_232;
    }
    v49 = v78;
    v79 = v76 - v77;
    if (v71 >= a10)
    {
      LODWORD(v50) = 0;
      v51 = a2;
      v90 = *(_DWORD *)(a2 + 8);
      v83 = __s1;
      if (v90 <= 0)
      {
        a14 = v179;
        v24 = v183;
        goto LABEL_118;
      }
      LOWORD(v90) = 2 * v90;
      v92 = v76 - v77;
      a14 = v179;
    }
    else
    {
      v50 = 0;
      v80 = (unsigned __int16)(v76 - v77);
      v81 = (unsigned int *)(a9 + ((unint64_t)v71 << 6) + 40);
      v82 = a10 - (unint64_t)v71;
      v177 = 10;
      v170 = v79;
      LOWORD(v189) = v79;
      v51 = a2;
      v83 = __s1;
      v174 = v79;
      do
      {
        if (v80 + 2 * *(_DWORD *)(v51 + 8) < (unsigned __int16)(*((_WORD *)v81 - 4) - *(_WORD *)(a9 + 32)))
          break;
        if (*(v81 - 5) == 21)
        {
          __s1a = (char *)v50;
          v84 = v49;
          v85 = v83;
          if (cstdlib_strcmp(v83, (const char *)(*(_QWORD *)(a12 + 8) + *v81)))
          {
            v86 = *v81;
            v87 = (int)__s1a;
            v49 = v84;
            if ((unsigned __int16)__s1a >= v177)
            {
              v172 = *v81;
              v190 = v84;
              v88 = heap_Realloc(*(uint64_t **)(a8 + 24), v84, 24 * v177 + 264);
              if (!v88)
              {
                LODWORD(info) = 0;
                v26 = 2350915594;
                goto LABEL_225;
              }
              v177 += 10;
              v49 = v88;
              v87 = (int)__s1a;
              v80 = v174;
              v86 = v172;
            }
            else
            {
              v80 = v174;
            }
            v89 = v49 + 24 * (unsigned __int16)v87;
            *(_QWORD *)v89 = v85;
            v83 = (const char *)(*(_QWORD *)(a12 + 8) + v86);
            *(_QWORD *)(v89 + 8) = v83;
            *(_WORD *)(v89 + 16) = v189;
            v189 = *(v81 - 2) - *(_DWORD *)(a9 + 32);
            *(_WORD *)(v89 + 18) = v189;
            v50 = (v87 + 1);
            v51 = a2;
          }
          else
          {
            v51 = a2;
            v49 = v84;
            v83 = v85;
            v50 = (unint64_t)__s1a;
            v80 = v174;
          }
        }
        v81 += 16;
        --v82;
      }
      while (v82);
      v90 = *(_DWORD *)(v51 + 8);
      v91 = v80 + 2 * v90;
      v92 = v189;
      a14 = v179;
      if (v91 <= (unsigned __int16)v189)
        goto LABEL_105;
      if ((unsigned __int16)v50 >= v177)
      {
        v162 = v50;
        v163 = v83;
        v190 = v49;
        v164 = heap_Realloc(*(uint64_t **)(a8 + 24), v49, 24 * v177 + 264);
        if (!v164)
        {
          LODWORD(info) = 0;
          v26 = 2350915594;
          goto LABEL_226;
        }
        v90 = 2 * *(_DWORD *)(a2 + 8);
        v49 = v164;
        v51 = a2;
        v83 = v163;
        LODWORD(v50) = v162;
        v79 = v170;
        v92 = v189;
      }
      else
      {
        LOWORD(v90) = 2 * v90;
        v79 = v170;
      }
    }
    v95 = v49 + 24 * (unsigned __int16)v50;
    *(_QWORD *)v95 = v83;
    *(_QWORD *)(v95 + 8) = 0;
    *(_WORD *)(v95 + 16) = v92;
    *(_WORD *)(v95 + 18) = v90 + v79;
    v50 = (v50 + 1);
LABEL_105:
    if ((_WORD)v50)
    {
      v96 = 0;
      v97 = (unsigned __int16)v50;
      v191 = v49;
      do
      {
        v98 = v96 + 1;
        if ((int)v98 < v97 && (v99 = (_QWORD *)(v49 + 24 * v98), (v100 = (const char *)v99[1]) != 0))
        {
          __s1b = (char *)v50;
          __dst = (const char **)(v49 + 24 * v96);
          if (cstdlib_strcmp(*__dst, v100))
          {
            ++v96;
            v51 = a2;
            v49 = v191;
            v50 = (unint64_t)__s1b;
          }
          else
          {
            cstdlib_memmove(__dst, v99, (int)(24 * (v97 + (~(_WORD)v96 | 0xFFFF0000))));
            v50 = ((_DWORD)__s1b - 1);
            v51 = a2;
            v49 = v191;
          }
        }
        else
        {
          ++v96;
        }
        v97 = (unsigned __int16)v50;
      }
      while (v96 < (unsigned __int16)v50);
      a14 = v179;
    }
    else
    {
      LOWORD(v50) = 0;
    }
    v24 = v183;
    v48 = 1;
    goto LABEL_117;
  }
  mbs_normalize((uint64_t)v212);
  __sa = 0;
  v49 = 0;
  LOWORD(v50) = 0;
  v51 = a2;
LABEL_117:
  v90 = *(_DWORD *)(v51 + 8);
LABEL_118:
  v190 = v49;
  if (v90 < 1)
  {
    v106 = v195;
    goto LABEL_218;
  }
  v101 = 0;
  v102 = a4;
  if ((_WORD)v50)
    v103 = v48 == 1;
  else
    v103 = 0;
  v104 = !v103;
  v173 = v104;
  v169 = 24 * (unsigned __int16)v50;
  __dsta = 1;
  v105 = v188;
  v106 = v195;
  do
  {
    v217 = 0;
    if (v102 < 1)
      goto LABEL_215;
    v107 = 0;
    v178 = (4 * v101);
    v171 = 2 * v101;
    v108 = 1;
    v187 = v101;
    do
    {
      v109 = v108 + v101;
      if (v108 + (int)v101 > *(_DWORD *)(v51 + 8))
        break;
      v110 = v109 - 1;
      if (*(_BYTE *)(v105 + v110) != 33 || *(_BYTE *)(v24 + v110) == 1 || *(_BYTE *)(v22 + v110) == 1)
        break;
      __s1c = v107;
      v111 = v101;
      if (mbs2sjis(v51, v101, v108, (uint64_t)v219, 80) == -1
        || mbs2sjis((uint64_t)v212, v111, v108, (uint64_t)v216, 80) == -1)
      {
LABEL_227:
        v26 = 0;
LABEL_228:
        LODWORD(info) = 0;
        a14 = v179;
        goto LABEL_230;
      }
      v105 = v188;
      if (!*(_BYTE *)(v212[0] + v178))
      {
        v51 = a2;
        v101 = v187;
        break;
      }
      v175 = v108;
      v112 = __sa;
      if (v181 != 1)
        v112 = "normal";
      if ((v173 & 1) != 0)
      {
        v113 = v112;
      }
      else
      {
        v114 = 0;
        v115 = v190;
        while (v171 < *(unsigned __int16 *)(v190 + v114 + 16) || 2 * v109 > *(unsigned __int16 *)(v190 + v114 + 18))
        {
          v114 += 24;
          if (v169 == v114)
          {
            v24 = v183;
            v113 = __sa;
            goto LABEL_151;
          }
        }
        if (__sa)
        {
          v116 = cstdlib_strlen(__sa);
          if (v116 >= cstdlib_strlen(*(const char **)(v190 + v114)))
          {
            info = (uint64_t *)__sa;
            v115 = v190;
          }
          else
          {
            v117 = *(uint64_t **)(a8 + 24);
            v118 = cstdlib_strlen(*(const char **)(v190 + v114));
            info = (uint64_t *)heap_Realloc(v117, (uint64_t)__sa, (v118 + 1));
            v115 = v190;
            if (!info)
            {
              v26 = 2350915594;
              a14 = v179;
              v24 = v183;
              goto LABEL_231;
            }
          }
        }
        else
        {
          info = 0;
        }
        cstdlib_strcpy((char *)info, *(const char **)(v115 + v114));
        v113 = (const char *)info;
        v24 = v183;
      }
LABEL_151:
      __sa = (char *)v113;
      v119 = lookup_JPARSER((uint64_t)&v206, (uint64_t)v216, &v211, &v210, v113);
      if (v119 == -1)
      {
        v105 = v188;
        v51 = a2;
        if (__s1c)
        {
          v120 = v218[__dsta++];
          v101 = v187;
          if (!v120)
            break;
          v108 = v120 - 48;
          v107 = 1;
          if (v120 - 48 < 0)
            break;
        }
        else
        {
          v107 = 0;
          v108 = v175 + 1;
          v101 = v187;
          if (v175 + 1 < 0)
            break;
        }
        continue;
      }
      CopyOutput_JPARSER(v213, 120, v211, v119, v210);
      if (__s1c)
      {
        if (v218[__dsta])
          v108 = v218[__dsta] - 48;
        else
          v108 = a4 + 1;
        ++__dsta;
        v51 = a2;
        v101 = v187;
      }
      else
      {
        v121 = 0;
        v122 = v213[0];
        v51 = a2;
        v101 = v187;
        while (*(_BYTE *)(v213[0] + v121) && *(_BYTE *)(v213[0] + v121) != 44)
          ++v121;
        v217 = *(_BYTE *)(v213[0] + v121);
        if (!v217)
          goto LABEL_170;
        v123 = 0;
        do
        {
          v124 = *(unsigned __int8 *)(v122 + v121 + 1 + v123);
          v218[v123++] = v124;
        }
        while (v124);
        if ((_DWORD)v123)
        {
          v108 = v218[0] - 48;
          *(_BYTE *)(v122 + v121) = 0;
          __dsta = 1;
        }
        else
        {
LABEL_170:
          __dsta = 1;
          v108 = a4 + 1;
        }
      }
      if (!*(_BYTE *)v213[0])
      {
        v107 = 1;
        v105 = v188;
        if (v108 < 0)
          break;
        continue;
      }
      if (*v184)
        v125 = v101 + 1;
      else
        v125 = v101;
      v168 = v125;
      if (!cstdlib_strlen(v219))
      {
        v26 = 2350915584;
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(v194 + 32) + 32), *(_QWORD *)(v194 + 216), 52003, (uint64_t)"%s%s%s%s", v126, v127, v128, v129, "empty field");
        goto LABEL_228;
      }
      v130 = create_info(0, v219, *(_QWORD **)(a8 + 24));
      if (!v130)
        goto LABEL_227;
      v167 = v108;
      v135 = 0;
      v176 = v175 - 1;
      *(_QWORD *)(v130 + 16) = 0;
      __s1d = (char *)v130;
      v136 = v130;
      do
      {
        v137 = (const char *)v213[v135];
        if (!v137 || !cstdlib_strlen(v137))
        {
          v26 = 2350915584;
          log_OutPublic(*(_QWORD *)(*(_QWORD *)(v194 + 32) + 32), *(_QWORD *)(v194 + 216), 52003, (uint64_t)"%s%s%s%s", v131, v132, v133, v134, "empty field");
LABEL_222:
          v158 = *(_QWORD **)(a8 + 24);
          v159 = (uint64_t *)__s1d;
          goto LABEL_223;
        }
        v138 = create_info((int)v135 + 1, (const char *)v213[v135], *(_QWORD **)(a8 + 24));
        v26 = v138;
        *(_QWORD *)(v136 + 16) = v138;
        if (!v138)
          goto LABEL_222;
        *(_QWORD *)(v138 + 16) = 0;
        ++v135;
        v136 = v138;
      }
      while (v135 != 2);
      if (*v214)
      {
        v143 = (uint64_t *)__s1d;
        if (cstdlib_strlen(v214))
        {
          v144 = create_info(3, v214, *(_QWORD **)(a8 + 24));
          *(_QWORD *)(v26 + 16) = v144;
          if (v144)
          {
            *(_QWORD *)(v144 + 16) = 0;
            v26 = v144;
            goto LABEL_192;
          }
LABEL_241:
          free_information(v143, *(_QWORD **)(a8 + 24));
LABEL_242:
          v26 = 0;
LABEL_224:
          LODWORD(info) = 0;
LABEL_225:
          a14 = v179;
LABEL_226:
          v24 = v183;
          goto LABEL_230;
        }
LABEL_251:
        v26 = 2350915584;
        v165 = *(_QWORD *)(*(_QWORD *)(v194 + 32) + 32);
        v166 = *(_QWORD *)(v194 + 216);
LABEL_246:
        log_OutPublic(v165, v166, 52003, (uint64_t)"%s%s%s%s", v139, v140, v141, v142, "empty field");
        v158 = *(_QWORD **)(a8 + 24);
        v159 = v143;
LABEL_223:
        free_information(v159, v158);
        goto LABEL_224;
      }
      v143 = (uint64_t *)__s1d;
LABEL_192:
      v145 = 0;
      __s1e = 4;
      v146 = 3;
      do
      {
        v147 = *(const char **)&v215[v145];
        if (!*v147 && !**(_BYTE **)&v215[v145 + 8])
          break;
        v148 = 24 * (v146 / 3);
        if ((_DWORD)v148 - 24 == (_DWORD)v145)
        {
          if (!add_info_to_table((uint64_t)v143, v168, v176, a5, v195, 0, a3, *(_QWORD **)(a8 + 24)))
            goto LABEL_241;
          if (!cstdlib_strlen(v219))
          {
            v26 = 2350915584;
            log_OutPublic(*(_QWORD *)(*(_QWORD *)(v194 + 32) + 32), *(_QWORD *)(v194 + 216), 52003, (uint64_t)"%s%s%s%s", v149, v150, v151, v152, "empty field");
            goto LABEL_224;
          }
          v153 = create_info(0, v219, *(_QWORD **)(a8 + 24));
          if (!v153)
            goto LABEL_242;
          v143 = (uint64_t *)v153;
          *(_QWORD *)(v153 + 16) = 0;
          v147 = *(const char **)&v215[v145];
          v26 = (uint64_t)v143;
          if (!v147)
          {
LABEL_245:
            v26 = 2350915584;
            v165 = *(_QWORD *)(*(_QWORD *)(v194 + 32) + 32);
            v166 = *(_QWORD *)(v194 + 216);
            goto LABEL_246;
          }
LABEL_205:
          if (!cstdlib_strlen(v147))
            goto LABEL_245;
          v156 = __s1e - 3 * (v146 / 3);
          v154 = *(const char **)&v215[v145];
          v155 = *(_QWORD **)(a8 + 24);
LABEL_207:
          v157 = create_info(v156, v154, v155);
          *(_QWORD *)(v26 + 16) = v157;
          if (!v157)
            goto LABEL_241;
          *(_QWORD *)(v157 + 16) = 0;
          v26 = v157;
          goto LABEL_209;
        }
        if ((_DWORD)v148 - 8 != (_DWORD)v145)
          goto LABEL_205;
        if (*v147)
        {
          if (!cstdlib_strlen(v147))
            goto LABEL_251;
          v154 = *(const char **)&v215[v145];
          v155 = *(_QWORD **)(a8 + 24);
          v156 = 3;
          goto LABEL_207;
        }
LABEL_209:
        ++v146;
        v145 += 8;
        ++__s1e;
      }
      while (v145 != 928);
      if (!add_info_to_table((uint64_t)v143, v168, v176, a5, v195, 0, a3, *(_QWORD **)(a8 + 24)))
        goto LABEL_241;
      v107 = 1;
      v108 = v167;
      v24 = v183;
      v101 = v187;
      v105 = v188;
      v51 = a2;
      if (v167 < 0)
        break;
    }
    while (v108 <= a4);
    v90 = *(_DWORD *)(v51 + 8);
    a14 = v179;
    v106 = v195;
    v102 = a4;
LABEL_215:
    ++v101;
  }
  while (v101 < v90);
LABEL_218:
  if (*(_BYTE *)(a3 + 136) && !look_up_unknown_word(v51, a3, a5, v106, *(_QWORD **)(a8 + 24)))
  {
    v26 = 0;
    LODWORD(info) = 0;
  }
  else
  {
    v26 = 0;
    LODWORD(info) = 1;
  }
LABEL_230:
  v115 = v190;
  if (v190)
LABEL_231:
    heap_Free(*(_QWORD **)(a8 + 24), v115);
LABEL_232:
  if (v181 == 1 && __sa)
    heap_Free(*(_QWORD **)(a8 + 24), (uint64_t)__sa);
LABEL_235:
  mbs_free(v212, *(_QWORD **)(a8 + 24));
LABEL_236:
  v25 = v188;
LABEL_237:
  heap_Free(*(_QWORD **)(a8 + 24), v25);
  heap_Free(*(_QWORD **)(a8 + 24), v24);
  heap_Free(*(_QWORD **)(a8 + 24), v22);
  heap_Free(*(_QWORD **)(a8 + 24), v18);
  heap_Free(*(_QWORD **)(a8 + 24), v19);
  heap_Free(*(_QWORD **)(a8 + 24), v21);
  for (i = 0; i != 120; ++i)
    heap_Free(*(_QWORD **)(a8 + 24), v213[i]);
  *a14 = (_DWORD)info;
  return v26;
}

uint64_t sapi_prn_tag_conv_replace(uint64_t a1, char *__s, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v24;
  uint64_t v25;
  char __sa[1024];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v24 = 0;
  v25 = 0;
  v6 = cstdlib_strlen(__s);
  v7 = mbs_create((uint64_t)&v24, v6, __s, *(_QWORD **)(a3 + 24));
  if ((v7 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) = 0;
    v8 = heap_Alloc(*(_QWORD *)(a3 + 24), v25);
    if (!v8)
    {
      v7 = 2350915594;
      goto LABEL_49;
    }
    if (!mark_tag_state((uint64_t)&v24, v8))
    {
      v7 = 2350915601;
      goto LABEL_49;
    }
    if ((int)v25 < 1)
      goto LABEL_49;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = mbs_one_char(&v24, v10);
      if (v11 <= 0x20 && ((1 << v11) & 0x100002400) != 0)
      {
        v7 = mbs_add_str(a1, (uint64_t)&v24, v10, 1, 0, *(uint64_t **)(a3 + 24));
        if ((v7 & 0x80000000) == 0)
          goto LABEL_11;
        goto LABEL_49;
      }
      if ((int)v10 + 15 >= (int)v25)
        v13 = v25 - v10;
      else
        v13 = 16;
      if (v13 < 1)
        goto LABEL_42;
      v14 = 0;
      v15 = v13 + 1;
      while (mbs_one_char(&v24, (int)v10 + v14) != 30)
      {
        if (v13 == ++v14)
          goto LABEL_22;
      }
      v15 = v14 + 1;
LABEL_22:
      v16 = v15 - 1;
      if (v15 <= 1)
      {
LABEL_30:
        v17 = v16;
      }
      else
      {
        v17 = 0;
        while (1)
        {
          v18 = mbs_one_char(&v24, (int)v10 + v17);
          if (v18 <= 0x20 && ((1 << v18) & 0x100002400) != 0)
            break;
          if (v16 == ++v17)
            goto LABEL_30;
        }
      }
      if (v17 < 1)
      {
LABEL_42:
        v21 = v9;
LABEL_43:
        v7 = mbs_add_str(a1, (uint64_t)&v24, v10, 1, 0, *(uint64_t **)(a3 + 24));
        v9 = v21;
        if ((v7 & 0x80000000) == 0)
          goto LABEL_11;
        goto LABEL_49;
      }
      while (1)
      {
        if (mbs2sjis((uint64_t)&v24, v10, v17, (uint64_t)__sa, 1000) == -1)
        {
          v7 = 2350915840;
          goto LABEL_49;
        }
        if ((int)cstdlib_strlen(__sa) >= 1)
        {
          v20 = 0;
          while ((__sa[v20] & 0xDFu) - 91 >= 0xFFFFFFE6)
          {
            if (++v20 >= (int)cstdlib_strlen(__sa))
              goto LABEL_45;
          }
          goto LABEL_39;
        }
        if ((_DWORD)v9 == 1)
          break;
LABEL_39:
        LODWORD(v9) = 0;
        v21 = 0;
        if (v17-- < 2)
          goto LABEL_43;
      }
LABEL_45:
      v7 = mbs_add_str(a1, (uint64_t)&v24, v10, v17, 0, *(uint64_t **)(a3 + 24));
      if ((v7 & 0x80000000) != 0)
        goto LABEL_49;
      LODWORD(v10) = v10 - 1 + v17;
      v9 = 1;
LABEL_11:
      v10 = (v10 + 1);
      if ((int)v10 >= (int)v25)
      {
LABEL_49:
        heap_Free(*(_QWORD **)(a3 + 24), v8);
        mbs_free(&v24, *(_QWORD **)(a3 + 24));
        return v7;
      }
    }
  }
  return v7;
}

uint64_t jparser_codeer(uint64_t result, int a2, unsigned __int8 *a3, uint64_t a4)
{
  __int16 v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  int v10;
  char v11;
  int v12;

  v4 = 0;
  v5 = 0;
  LOBYTE(v6) = result;
  do
  {
    v7 = *a3++;
    v8 = v5 + v7;
    v6 = (char)(v6 + result);
    if (v6 < 16)
    {
      v12 = v8 << result;
    }
    else
    {
      v9 = result + 16 - v6;
      v10 = v8 << v9;
      *(_BYTE *)(a4 + v4++) = BYTE1(v10);
      v11 = result - v9;
      v12 = (unsigned __int16)v10 << v11;
      LOBYTE(v6) = v11 + 8;
    }
    v5 = (unsigned __int16)v12;
    --a2;
  }
  while ((_BYTE)a2);
  *(_WORD *)(a4 + v4) = bswap32(v12 << (16 - v6)) >> 16;
  return result;
}

uint64_t jparser_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v7 = 0;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    v5 = heap_Calloc(*(_QWORD **)(v7 + 8), 1, 8);
    if (v5)
    {
      v6 = (_QWORD *)v5;
      result = 0;
      *v6 = *(_QWORD *)(v7 + 8);
      *(_QWORD *)a3 = v6;
      *(_DWORD *)(a3 + 8) = 19024;
    }
    else
    {
      return 2350915594;
    }
  }
  return result;
}

uint64_t jparser_ClassClose(_QWORD **a1, int a2)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 19024, 8) & 0x80000000) != 0)
    return 2350915592;
  if (a1)
    heap_Free(*a1, (uint64_t)a1);
  return 0;
}

uint64_t jparser_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, int a10, uint64_t a11)
{
  uint64_t inited;
  uint64_t v20;
  int v21;
  uint64_t i;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t number_of_symbol;
  uint64_t v28;
  char *j;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;

  v34 = 0;
  inited = InitRsrcFunction(a1, a2, &v34);
  if ((inited & 0x80000000) != 0)
    return inited;
  v20 = 2350915840;
  if ((safeh_HandleCheck(a3, a4, 19024, 8) & 0x80000000) != 0)
    return 2350915592;
  v21 = 0;
  for (i = 0; i != 1; ++i)
  {
    v23 = *(_QWORD *)(get_a_rule(i) + 72);
    if (v23 > v21)
      v21 = v23;
  }
  if (v21)
    return 2350907394;
  v24 = (void *)heap_Alloc(*(_QWORD *)(v34 + 8), 232);
  if (!v24)
    return 2350915594;
  v25 = (uint64_t)v24;
  cstdlib_memset(v24, 0, 0xE8uLL);
  *(_QWORD *)(v25 + 8) = a1;
  *(_QWORD *)(v25 + 16) = a2;
  v26 = v34;
  *(_QWORD *)(v25 + 24) = *(_QWORD *)(v34 + 8);
  *(_QWORD *)(v25 + 32) = v26;
  *(_QWORD *)(v25 + 216) = a11;
  *(_QWORD *)(v25 + 224) = 0;
  *(_QWORD *)(v25 + 184) = a6;
  *(_QWORD *)(v25 + 192) = a7;
  *(_QWORD *)(v25 + 200) = a8;
  *(_WORD *)(v25 + 208) = a9;
  *(_DWORD *)(v25 + 212) = a10;
  *(_QWORD *)(v25 + 48) = get_number_of_symbol((uint64_t)&SF_symbol_file, "SENTENCE");
  number_of_symbol = get_number_of_symbol((uint64_t)&SF_symbol_file, &byte_24D28D71C);
  *(_QWORD *)(v25 + 56) = number_of_symbol;
  if ((number_of_symbol & 0x8000000000000000) == 0)
  {
    v28 = 0;
    for (j = (char *)&unk_24D28DAA8; ; j += 64)
    {
      v30 = get_number_of_symbol((uint64_t)&SF_symbol_file, j - 664);
      *(_QWORD *)(v25 + v28 + 64) = v30;
      if (v30 == -1)
        break;
      v31 = get_number_of_symbol((uint64_t)&SF_symbol_file, j);
      *(_QWORD *)(v25 + v28 + 144) = v31;
      if (v31 == -1)
        break;
      v32 = get_number_of_symbol((uint64_t)&SF_symbol_file, j - 344);
      *(_QWORD *)(v25 + v28 + 104) = v32;
      if (v32 == -1)
        break;
      v28 += 8;
      if (v28 == 24)
      {
        v20 = 0;
        *a5 = v25;
        return v20;
      }
    }
  }
  heap_Free(*(_QWORD **)(v34 + 8), v25);
  return v20;
}

uint64_t jparser_ObjClose(uint64_t *a1)
{
  uint64_t result;

  result = 2350915592;
  if (a1)
  {
    if (*a1)
    {
      heap_Free(*(_QWORD **)(*a1 + 24), *a1);
      result = 0;
      *a1 = 0;
    }
  }
  return result;
}

uint64_t jparser_Parse(uint64_t a1, char *a2, uint64_t a3, _QWORD *a4, int a5, uint64_t a6, uint64_t a7, unsigned __int16 a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v11;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v31[14];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[2];

  v33 = 0;
  v11 = 2350915592;
  if (a1)
  {
    *(_QWORD *)(a1 + 224) = a6;
    v34[0] = 0;
    v34[1] = 0;
    v17 = *(_OWORD *)(a1 + 208);
    v31[12] = *(_OWORD *)(a1 + 192);
    v31[13] = v17;
    v32 = a6;
    v18 = *(_OWORD *)(a1 + 144);
    v31[8] = *(_OWORD *)(a1 + 128);
    v31[9] = v18;
    v19 = *(_OWORD *)(a1 + 176);
    v31[10] = *(_OWORD *)(a1 + 160);
    v31[11] = v19;
    v20 = *(_OWORD *)(a1 + 80);
    v31[4] = *(_OWORD *)(a1 + 64);
    v31[5] = v20;
    v21 = *(_OWORD *)(a1 + 112);
    v31[6] = *(_OWORD *)(a1 + 96);
    v31[7] = v21;
    v22 = *(_OWORD *)(a1 + 16);
    v31[0] = *(_OWORD *)a1;
    v31[1] = v22;
    v23 = *(_OWORD *)(a1 + 48);
    v31[2] = *(_OWORD *)(a1 + 32);
    v31[3] = v23;
    v24 = sapi_prn_tag_conv_replace((uint64_t)v34, a2, (uint64_t)v31);
    if ((v24 & 0x80000000) != 0)
    {
      v28 = v24;
      mbs_free(v34, *(_QWORD **)(a1 + 24));
      return v28;
    }
    else
    {
      v25 = iso_parse_fdp_bas(a1, (uint64_t)&Inifile_global, (uint64_t)v34, CT_connection_table, a5, &v33, a7, a8, a9, a10, a11);
      if ((v25 & 0x80000000) != 0)
      {
        v29 = v25;
        mbs_free(v34, *(_QWORD **)(a1 + 24));
        return v29;
      }
      else
      {
        v26 = v33;
        mbs_free(v34, *(_QWORD **)(a1 + 24));
        if (v26)
        {
          v27 = v33;
          if (*(_DWORD *)v33 == 1)
          {
            *a4 = *(_QWORD *)(v33 + 8);
            heap_Free(*(_QWORD **)(a1 + 24), v27);
            return 0;
          }
          else
          {
            heap_Free(*(_QWORD **)(a1 + 24), v33);
            return 2350915840;
          }
        }
        else
        {
          return 2350915594;
        }
      }
    }
  }
  return v11;
}

uint64_t jparser_FreeTree(uint64_t a1, _QWORD **a2)
{
  if (a1)
    return jpe_FreeTree(*a2, *(_QWORD **)(a1 + 24));
  else
    return 2350915592;
}

uint64_t jpj_sysdct_CharLookup(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, unsigned int a6, int a7)
{
  void *v13;
  unsigned __int16 v14;
  size_t v15;
  __int16 v16;
  int v17;
  size_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  int v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  char *v36;
  unsigned __int16 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int16 v43;
  size_t v44;
  void *v45;
  const char *v46;
  size_t v47;
  char *v48;
  const char *v49;
  char *v50;
  unsigned __int16 v51;
  unsigned int v52;
  const char *v53;
  const char *v54;
  int v56;
  char *__s;
  unsigned __int16 v58;
  uint64_t v59;
  unsigned __int8 __c[17];
  int64x2_t v61;
  _BYTE __dst[65];
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  __c[0] = 0;
  v59 = 0;
  v58 = 0;
  *(_DWORD *)a5 = 0;
  v13 = (void *)(a5 + 4);
  cstdlib_memset((void *)(a5 + 4), 0, 0x41uLL);
  *(_WORD *)(a5 + 70) = 0;
  *(_DWORD *)(a5 + 72) = 0;
  cstdlib_memset((void *)(a5 + 76), 0, 0x101uLL);
  *(_WORD *)(a5 + 334) = 0;
  v14 = cstdlib_strlen(a4);
  if ((v14 & 0xFFC0) != 0)
    v15 = 64;
  else
    v15 = v14;
  cstdlib_memmove(__dst, a4, v15);
  __dst[v15] = 0;
  if (!(_DWORD)v15)
  {
    v17 = 0;
    do
    {
      v18 = (unsigned __int16)v17;
      v19 = a4[(unsigned __int16)v17++];
    }
    while (v19 == 32);
    cstdlib_memmove(v13, a4, v18);
    return 0;
  }
  if (v15 > a6)
    __dst[a6] = 0;
  if (__dst[0] > 0x7Eu)
  {
    v16 = 2;
    *(_DWORD *)a5 = 2;
    cstdlib_memmove(v13, __dst, 2uLL);
    *(_BYTE *)(a5 + 6) = 0;
  }
  else
  {
    *(_DWORD *)a5 = 3;
    v16 = 1;
    cstdlib_memmove(v13, __dst, 1uLL);
    *(_BYTE *)(a5 + 5) = 0;
  }
  *(_WORD *)(a5 + 70) = v16;
  if (!*(_DWORD *)(a3 + 28))
  {
    *(_QWORD *)&__c[1] = 0;
    v28 = lookup_JPARSER(a3, (uint64_t)v13, (const char **)&__c[1], __c, "normal");
    if (v28 != -1)
    {
      v29 = v28;
      cstdlib_memmove((void *)(a5 + 76), *(const void **)&__c[1], v28);
      *(_BYTE *)(a5 + v29 + 76) = 0;
      *(_WORD *)(a5 + 334) = v29;
      v30 = cstdlib_strchr((char *)(a5 + 76), __c[0]);
      if (v30)
      {
        *v30 = 0;
        v35 = v30 + 1;
        v36 = cstdlib_strchr(v30 + 1, __c[0]);
        if (v36)
        {
          *v36 = 0;
          v37 = cstdlib_strlen(v35);
          *(_WORD *)(a5 + 334) = v37;
          cstdlib_memmove((void *)(a5 + 76), v35, v37);
          *(_BYTE *)(a5 + *(unsigned __int16 *)(a5 + 334) + 76) = 0;
LABEL_27:
          v20 = 0;
          goto LABEL_28;
        }
        v39 = 1812;
      }
      else
      {
        v39 = 1813;
      }
      v20 = 2350915584;
      v40 = *(_QWORD *)(a1 + 32);
      v41 = a2;
      goto LABEL_41;
    }
    *(_DWORD *)a5 = 0;
    goto LABEL_27;
  }
  v58 = 0;
  v20 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, void *, uint64_t *, unsigned __int16 *, unsigned __int8 *))(*(_QWORD *)a3 + 96))(*(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16), "char", v13, &v59, &v58, __c);
  if ((v20 & 0x80000000) != 0 || !v58)
    goto LABEL_37;
  __s = 0;
  v56 = 0;
  *(_OWORD *)&__c[1] = 0u;
  v61 = 0u;
  getDictSolutionJPJ(v58, v59, __c[0], (const char **)&__s, (_WORD *)&v56 + 1, "normal", 4, &v56, &__c[1]);
  v25 = *(const char **)&__c[9];
  v54 = (const char *)v61.i64[0];
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)&__c[1]), (int32x4_t)vceqzq_s64(v61)))) & 1) != 0
    || !HIWORD(v56))
  {
    log_OutPublic(*(_QWORD *)(a1 + 32), a2, 1817, 0, v21, v22, v23, v24, v52);
    *(_DWORD *)a5 = 0;
  }
  else
  {
    v27 = 1;
    if (**(_BYTE **)&__c[1])
    {
      v53 = *(const char **)&__c[9];
      v26 = cstdlib_strcmp(*(const char **)&__c[1], "1");
      v25 = v53;
      if (v26)
        v27 = 0;
    }
    if (*v25)
    {
      v38 = cstdlib_strcmp(v25, "1");
      if (a7 == 1)
      {
        if (v38)
          goto LABEL_37;
      }
    }
    if (v27)
    {
      if (*__s == __c[0])
      {
LABEL_37:
        *(_DWORD *)a5 = 0;
        return v20;
      }
      v47 = cstdlib_strlen(__s);
      cstdlib_memmove((void *)(a5 + 76), __s, v47);
      *(_BYTE *)(a5 + v47 + 76) = 0;
      *(_WORD *)(a5 + 334) = v47;
      v48 = cstdlib_strchr((char *)(a5 + 76), __c[0]);
      if (v48)
      {
        *v48 = 0;
        v49 = v48 + 1;
        v50 = cstdlib_strchr(v48 + 1, __c[0]);
        if (v50)
        {
          *v50 = 0;
          v51 = cstdlib_strlen(v49);
          *(_WORD *)(a5 + 334) = v51;
          v44 = v51;
          v45 = (void *)(a5 + 76);
          v46 = v49;
          goto LABEL_48;
        }
        v20 = 2350915584;
        v40 = *(_QWORD *)(a1 + 32);
        v41 = a2;
        v39 = 1812;
      }
      else
      {
        v20 = 2350915584;
        v40 = *(_QWORD *)(a1 + 32);
        v41 = a2;
        v39 = 1813;
      }
LABEL_41:
      log_OutPublic(v40, v41, v39, 0, v31, v32, v33, v34, v52);
      return v20;
    }
    if (*v54)
    {
      v43 = cstdlib_strlen(v54);
      *(_WORD *)(a5 + 334) = v43;
      v44 = v43;
      v45 = (void *)(a5 + 76);
      v46 = v54;
LABEL_48:
      cstdlib_memmove(v45, v46, v44);
      *(_BYTE *)(a5 + *(unsigned __int16 *)(a5 + 334) + 76) = 0;
    }
  }
LABEL_28:
  if (*(_DWORD *)a5 && *(_BYTE *)(a5 + 76) == 35)
  {
    *(_BYTE *)(a5 + 76) = cstdlib_atoi((unsigned __int8 *)(a5 + 77));
    *(_BYTE *)(a5 + 77) = 0;
    *(_WORD *)(a5 + 334) = 1;
  }
  return v20;
}

uint64_t DoJPJSpell(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v16;
  unsigned __int16 i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  char *v23;
  char *v24;
  unsigned __int16 v25;
  __int16 v26;
  _OWORD v29[21];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!a5)
    return 0;
  v16 = 0;
  for (i = 0; i < a5; v16 = i)
  {
    memset(v29, 0, sizeof(v29));
    v21 = jpj_sysdct_CharLookup(a1, a2, a3, (const char *)(a4 + i), (uint64_t)v29, 0x16u, a11);
    if ((v21 & 0x80000000) != 0)
      break;
    if ((LODWORD(v29[0]) - 2) > 3)
    {
      log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] (utoi position %d len %d not in dict", v18, v19, v20, v16);
    }
    else
    {
      v22 = (unsigned __int16)(cstdlib_strlen((const char *)&v29[4] + 12) + 3);
      v23 = (char *)heap_Alloc(*(_QWORD *)(a1 + 8), v22);
      if (!v23)
        return 2350915594;
      v24 = v23;
      cstdlib_memset(v23, 0, v22);
      if (i)
      {
        cstdlib_strcpy(v24, (const char *)&v29[4] + 12);
      }
      else
      {
        cstdlib_strcpy(v24, " ");
        cstdlib_strcat(v24, (const char *)&v29[4] + 12);
      }
      cstdlib_strcat(v24, " ");
      v25 = cstdlib_strlen(v24);
      v21 = bed_Insert(a6, v24, v25);
      if ((v21 & 0x80000000) != 0)
      {
        heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v24);
        return v21;
      }
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v24);
    }
    v26 = cstdlib_strlen((const char *)v29 + 4);
    if (v26)
      i += v26;
    else
      i = a5;
  }
  return v21;
}

uint64_t DoJPJLatin(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, char **a5)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v10;
  _OWORD v12[21];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  memset(v12, 0, sizeof(v12));
  v7 = jpj_sysdct_CharLookup(a1, a2, a3, a4, (uint64_t)v12, 0x16u, 0);
  if (!(_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 8);
    v9 = cstdlib_strlen((const char *)&v12[4] + 12);
    v10 = (char *)heap_Alloc(v8, (v9 + 3));
    *a5 = v10;
    if (v10)
      cstdlib_strcpy(v10, (const char *)&v12[4] + 12);
  }
  return v7;
}

size_t getDictSolutionJPJ(unsigned int a1, uint64_t a2, int a3, const char **a4, _WORD *a5, const char *a6, int a7, _WORD *a8, void *a9)
{
  const char **v10;
  void *v12;
  unint64_t v16;
  __int16 v17;
  char *v18;
  BOOL v19;
  _BOOL4 v20;
  char *v21;
  int v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  char *v25;
  _OWORD *v26;
  unsigned __int16 v27;
  size_t result;
  _WORD *v29;
  __int16 v31;
  unsigned __int16 v32;
  _BOOL4 v33;
  unint64_t v34;
  _OWORD __src[2];
  _OWORD v36[2];
  _OWORD __dst[2];
  uint64_t v38;

  v10 = a4;
  v12 = a9;
  v38 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  memset(v36, 0, sizeof(v36));
  if (!a1)
  {
    LOWORD(v16) = 0;
    v27 = 0;
    v26 = __dst;
    goto LABEL_40;
  }
  v29 = a8;
  v31 = 0;
  v16 = 0;
  v32 = 0;
  v33 = a7 != 0;
  v34 = a1;
  do
  {
    memset(__src, 0, sizeof(__src));
    v17 = cstdlib_strlen(*(const char **)(a2 + 8 * v16));
    *a5 = v17;
    v18 = *(char **)(a2 + 8 * v16);
    if (v17)
      v19 = a7 == 0;
    else
      v19 = 1;
    if (!v19)
    {
      v22 = 0;
      v23 = 0;
      v24 = 0;
      while (1)
      {
        v25 = *(char **)(a2 + 8 * v16);
        if (!*((_QWORD *)__src + v23))
          *((_QWORD *)__src + v23) = &v25[v24];
        if (a7 == 1 && !v24 && *v25 != a3)
          break;
        if (v25[v24] == a3)
        {
          ++v23;
          v25[v24] = 0;
        }
        ++v24;
        if (v22)
          goto LABEL_30;
        if (v23 + 1 == a7)
        {
          v18 = (char *)(*(_QWORD *)(a2 + 8 * v16) + v24);
LABEL_30:
          v22 = 1;
          goto LABEL_31;
        }
        v22 = 0;
LABEL_31:
        v20 = a7 != v23;
        if ((unsigned __int16)*a5 <= v24 || a7 == v23)
          goto LABEL_9;
      }
      v24 = 1;
      goto LABEL_30;
    }
    v24 = 0;
    v20 = v33;
LABEL_9:
    if (v20)
      *a5 = 0;
    if (cstdlib_strlen(v18))
    {
      if (v18)
      {
        do
        {
          v21 = cstdlib_strchr(v18, 44);
          if (!cstdlib_strlen(v18))
            break;
          if (v21)
            *v21 = 0;
          if (!cstdlib_strcmp(v18, a6))
          {
            v26 = v36;
            cstdlib_memcpy(v36, __src, 0x20uLL);
            v27 = v24;
            v12 = a9;
            v10 = a4;
            a8 = v29;
            goto LABEL_40;
          }
          v18 = v21 + 1;
        }
        while (v21);
      }
    }
    else
    {
      cstdlib_memcpy(__dst, __src, 0x20uLL);
      v31 = v16;
      v32 = v24;
    }
    ++v16;
  }
  while (v16 < v34);
  v26 = __dst;
  v12 = a9;
  v10 = a4;
  a8 = v29;
  LOWORD(v16) = v31;
  v27 = v32;
LABEL_40:
  *a8 = v16;
  *v10 = (const char *)(*(_QWORD *)(a2 + 8 * (unsigned __int16)v16) + v27);
  cstdlib_memcpy(v12, v26, 0x20uLL);
  result = cstdlib_strlen(*v10);
  *a5 = result;
  return result;
}

uint64_t lookup_JPARSER(uint64_t a1, uint64_t a2, const char **a3, unsigned __int8 *a4, const char *a5)
{
  int v10;
  uint64_t result;
  int v12;
  __int16 v13;
  unsigned __int16 v14;
  const char **v15;
  unsigned __int16 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v14 = 0;
  if (*(_DWORD *)(a1 + 28))
  {
    v16 = 0;
    if (((*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t, const char ***, unsigned __int16 *, unsigned __int8 *, _QWORD))(*(_QWORD *)a1 + 152))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), "word", a2, &v15, &v16, a4, *(unsigned __int8 *)(a1 + 24)) & 0x80000000) == 0&& v16)
    {
      v17 = 0u;
      v18 = 0u;
      getDictSolutionJPJ(v16, (uint64_t)v15, *a4, a3, &v14, a5, 1, &v13, &v17);
      return v14;
    }
    if (*(_DWORD *)(a1 + 28) == 1)
    {
      v16 = 0;
      v12 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t, const char ***, unsigned __int16 *, unsigned __int8 *))(*(_QWORD *)a1 + 96))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), "char", a2, &v15, &v16, a4);
      result = -1;
      if ((v12 & 0x80000000) == 0 && v16)
      {
        v17 = 0u;
        v18 = 0u;
        getDictSolutionJPJ(v16, (uint64_t)v15, *a4, a3, &v14, a5, 4, &v13, &v17);
        return v14;
      }
    }
    else
    {
      return -1;
    }
  }
  else
  {
    v16 = -1;
    v10 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t, const char ***, unsigned __int16 *, unsigned __int8 *, _QWORD))(*(_QWORD *)a1 + 152))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), "word", a2, &v15, &v16, a4, *(unsigned __int8 *)(a1 + 24));
    result = -1;
    if ((v10 & 0x80000000) == 0 && v16 == 1)
    {
      LOWORD(result) = cstdlib_strlen(*v15);
      *a3 = *v15;
      return (unsigned __int16)result;
    }
  }
  return result;
}

uint64_t FillFields(uint64_t result, unsigned int a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  int v6;
  _BYTE **i;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t j;
  _BYTE *v12;

  if (a2)
  {
    v5 = 0;
    v6 = 0;
    for (i = (_BYTE **)(result + 8); ; ++i)
    {
      v8 = (a4 - v6);
      if (a4 <= v6)
        break;
      v9 = 0;
      while (1)
      {
        v10 = *(unsigned __int8 *)(a3 + v6 + v9);
        if (v10 == a5)
          break;
        *(_BYTE *)(*(_QWORD *)(result + 8 * v5) + v9++) = v10;
        if (v8 == v9)
          goto LABEL_11;
      }
      *(_BYTE *)(*(_QWORD *)(result + 8 * v5) + v9) = 0;
      v6 += v9 + 1;
      if (++v5 == a2)
        return result;
    }
    v8 = 0;
LABEL_11:
    *(_BYTE *)(*(_QWORD *)(result + 8 * (unsigned __int16)v5) + v8) = 0;
    for (j = 1; j != 5; ++j)
    {
      if (v5 + j >= (unint64_t)a2)
        break;
      v12 = *i++;
      *v12 = 0;
    }
  }
  return result;
}

uint64_t virtual_fseek(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t result;

  switch(a4)
  {
    case 0:
      goto LABEL_6;
    case 1:
      a3 += *a2;
      goto LABEL_6;
    case 2:
      a3 = *(_QWORD *)(a1 + 8) + ~a3;
LABEL_6:
      result = 0;
      *a2 = a3;
      return result;
  }
  return 0xFFFFFFFFLL;
}

uint64_t virtual_getc(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *a2;
  if (*a2 < 0 || v2 >= a1[1])
    return 0xFFFFFFFFLL;
  result = *(unsigned __int8 *)(*a1 + v2);
  *a2 = v2 + 1;
  return result;
}

uint64_t xcode_Utf16leToWin932(uint64_t a1, unsigned __int16 *a2, unsigned int a3, uint64_t a4, _WORD *a5, uint64_t a6)
{
  uint64_t v6;
  unsigned __int16 *v10;
  int v12;
  uint64_t v13;
  unsigned int v14;

  v6 = 2370838535;
  if (a2 && a4 && a5)
  {
    if (a3)
    {
      v10 = a2;
      v12 = 0;
      v13 = a3;
      while ((unsigned __int16)*a5 > (unsigned __int16)v12)
      {
        v14 = *v10++;
        v12 += XLIT_chUnicodeWideToSJIS(v14, (char *)(a4 + (unsigned __int16)v12), a1, a6);
        if (!--v13)
          goto LABEL_10;
      }
      return 2370838537;
    }
    else
    {
      LOWORD(v12) = 0;
LABEL_10:
      v6 = 0;
      *a5 = v12;
    }
  }
  return v6;
}

uint64_t mas_list_extract_min(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  while (a2)
  {
    v2 = a2;
    v3 = a1;
    a2 = *(_QWORD *)(a2 + 8);
    a1 = v2;
    if (!a2)
    {
      result = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = *(_QWORD *)(v2 + 16);
      return result;
    }
  }
  return 0;
}

_QWORD *mas_list_insert(_QWORD *result, _QWORD *a2)
{
  if (result)
  {
    if (a2)
    {
      if (result[5] <= a2[5])
        a2[1] = mas_list_insert();
      else
        a2[2] = mas_list_insert();
      return a2;
    }
    else
    {
      result[1] = 0;
      result[2] = 0;
    }
  }
  return result;
}

_QWORD *mas_list_create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *result;

  result = (_QWORD *)heap_Alloc(a7, 48);
  if (result)
  {
    *result = a1;
    result[1] = a2;
    result[2] = a3;
    result[3] = a4;
    result[4] = a6;
    result[5] = a5;
  }
  return result;
}

uint64_t lattice_word_create(uint64_t a1)
{
  uint64_t result;

  result = heap_Alloc(a1, 584);
  if (result)
  {
    *(_DWORD *)(result + 544) = 0;
    *(_QWORD *)(result + 536) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 552) = 0;
    *(_QWORD *)(result + 568) = 0;
    *(_QWORD *)(result + 560) = 0;
  }
  return result;
}

uint64_t lattice_word_print_all(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t appended;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t i;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char __s2[16];
  char __dst[64];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  appended = ssftstring_Reserve(a3, 64);
  if ((appended & 0x80000000) != 0)
    return appended;
  v16 = ssftstring_Clear(a3);
  if ((v16 & 0x80000000) == 0 && a5 >= -1)
  {
    v17 = 0;
    v31 = (a5 + 2);
    v32 = a4;
    v33 = a2;
    while (1)
    {
      log_OutText(*(_QWORD *)(a1 + 32), a2, 5, 0, (uint64_t)"[FDP] x=%d", v13, v14, v15, v17);
      v18 = *(_QWORD *)(a4 + 8 * v17);
      if (v18)
        break;
LABEL_25:
      ++v17;
      a4 = v32;
      a2 = v33;
      if (v17 == v31)
        return v16;
    }
    v19 = 0;
    while (1)
    {
      v20 = 560;
      if (a6 == 1)
        v20 = 552;
      v21 = *(_QWORD *)(v18 + v20);
      __sprintf_chk(__dst, 0, 0x40uLL, "[FDP] (%3d,%3d,%3d)", v17, *(_DWORD *)(v18 + 580), v19);
      appended = ssftstring_AssignCStr(a3, __dst);
      if ((appended & 0x80000000) != 0)
        return appended;
      v22 = *(uint64_t **)v18;
      if (*(_QWORD *)v18)
      {
        for (i = *v22; i; i = *(_QWORD *)(i + 16))
        {
          appended = ssftstring_AppendCStr(a3, *(char **)i);
          if ((appended & 0x80000000) != 0)
            return appended;
          appended = ssftstring_AppendCStr(a3, ":");
          if ((appended & 0x80000000) != 0)
            return appended;
          appended = log_mbs_fput_sjis(a3, *(int **)(i + 8));
          if ((appended & 0x80000000) != 0)
            return appended;
          appended = ssftstring_AppendCStr(a3, " ");
          if ((appended & 0x80000000) != 0)
            return appended;
        }
      }
      else
      {
        if (*(_DWORD *)(v18 + 568) == 1)
          v24 = "<_START>";
        else
          v24 = "<_END>";
        appended = ssftstring_AppendCStr(a3, v24);
        if ((appended & 0x80000000) != 0)
          return appended;
      }
      cstdlib_strcpy(__dst, "cost_h = ");
      LH_itoa(*(_DWORD *)(v18 + 8), __s2, 0xAu);
      cstdlib_strcat(__dst, __s2);
      cstdlib_strcat(__dst, ", word_cost = ");
      LH_itoa(*(_DWORD *)(v18 + 16), __s2, 0xAu);
      cstdlib_strcat(__dst, __s2);
      appended = ssftstring_AppendCStr(a3, __dst);
      if ((appended & 0x80000000) != 0)
        return appended;
      v25 = *(_QWORD *)(a1 + 32);
      v26 = ssftstring_CStr(a3);
      log_OutText(v25, v33, 5, 0, (uint64_t)"%s", v27, v28, v29, v26);
      v16 = ssftstring_Clear(a3);
      if ((v16 & 0x80000000) != 0)
        return v16;
      ++v19;
      v18 = v21;
      if (!v21)
        goto LABEL_25;
    }
  }
  return v16;
}

_QWORD *lattice_word_free_all(_QWORD *result, int a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 >= -1)
  {
    v4 = result;
    v5 = 0;
    v6 = (a2 + 2);
    do
    {
      v7 = v4[v5];
      if (v7)
      {
        do
        {
          v8 = *(_QWORD *)(v7 + 552);
          result = heap_Free(a3, v7);
          v7 = v8;
        }
        while (v8);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return result;
}

uint64_t add_to_lattice(_DWORD *a1, uint64_t a2, uint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, _QWORD *a10)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;

  v10 = a2;
  if (!a2)
  {
    v18 = heap_Alloc((uint64_t)a10, 584);
    v10 = v18;
    if (!v18)
      return v10;
    *(_DWORD *)(v18 + 544) = 0;
    *(_QWORD *)(v18 + 536) = 0;
    *(_QWORD *)(v18 + 8) = 0;
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)(v18 + 552) = 0;
    *(_QWORD *)(v18 + 568) = 0;
    *(_QWORD *)(v18 + 560) = 0;
    *(_QWORD *)v18 = a3;
    if (a3)
    {
      v19 = *a3;
      if (!*a3)
        return 0;
      while (cstdlib_strcmp(*(const char **)v19, "WCOST"))
      {
        v19 = *(_QWORD *)(v19 + 16);
        if (!v19)
          return 0;
      }
      v31 = mbs_len_bytes(*(_QWORD *)(v19 + 8)) + 1;
      v32 = (unsigned __int8 *)heap_Alloc((uint64_t)a10, v31);
      if (!v32)
      {
        heap_Free(a10, v10);
        return 0;
      }
      v33 = v32;
      cstdlib_memset(v32, 0, v31);
      if (mbs2sjis(*(_QWORD *)(v19 + 8), 0, *(_DWORD *)(*(_QWORD *)(v19 + 8) + 8), (uint64_t)v33, v31) == -1)
        return 0;
      *(_QWORD *)(v10 + 16) = (int)cstdlib_atoi(v33);
      heap_Free(a10, (uint64_t)v33);
    }
    else
    {
      *(_DWORD *)(v18 + 572) = 1;
    }
    *(_DWORD *)(v10 + 576) = a4;
    *(_DWORD *)(v10 + 580) = a5;
    v25 = (uint64_t *)(a6 + 8 * (a4 + 1));
    v26 = *v25;
    if (*v25)
    {
      do
      {
        v27 = v26;
        v26 = *(_QWORD *)(v26 + 552);
      }
      while (v26);
      v25 = (uint64_t *)(v27 + 552);
    }
    *v25 = v10;
    v28 = (uint64_t *)(a7 + 8 * (a4 + 1 + a5));
    v29 = *v28;
    if (*v28)
    {
      do
      {
        v30 = v29;
        v29 = *(_QWORD *)(v29 + 560);
      }
      while (v29);
      v28 = (uint64_t *)(v30 + 560);
    }
    *v28 = v10;
  }
  v12 = *(int *)(v10 + 544);
  if ((int)v12 > 31)
    return 0;
  if (a1)
  {
    *(_QWORD *)(v10 + 8 * v12 + 280) = a1;
    if (a1[142] == 1)
      v20 = -1;
    else
      v20 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    if (*(_DWORD *)(v10 + 572) == 1)
      v21 = -1;
    else
      v21 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    v22 = connection_table(v20, v21, a9);
    v23 = *(int *)(v10 + 544);
    *(_QWORD *)(v10 + 8 * v23 + 24) = v22;
    *(_DWORD *)(v10 + 544) = v23 + 1;
  }
  return v10;
}

uint64_t forward_dp(int a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  int address;
  uint64_t leading_word;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;

  if (a1 >= -1)
  {
    v13 = (a1 + 2);
    v14 = a4;
    v15 = a5;
    do
    {
      *v14++ = 0;
      *v15++ = 0;
      --v13;
    }
    while (v13);
  }
  result = heap_Alloc((uint64_t)a7, 584);
  if (result)
  {
    *(_DWORD *)(result + 544) = 0;
    *(_QWORD *)(result + 536) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 568) = 0;
    *(_QWORD *)(result + 552) = 0;
    *(_QWORD *)(result + 560) = 0;
    *(_DWORD *)(result + 568) = 1;
    *(_QWORD *)(result + 576) = 0;
    *a4 = result;
    *a5 = result;
    if (a1 <= 0)
    {
      v19 = a1;
LABEL_22:
      v27 = a5[v19];
      if (v27)
      {
        v28 = 0;
        while (1)
        {
          result = add_to_lattice((_DWORD *)v27, v28, 0, a1, 0, (uint64_t)a4, (uint64_t)a5, v17, a6, a7);
          if (!result)
            break;
          v28 = result;
          v27 = *(_QWORD *)(v27 + 560);
          if (!v27)
            goto LABEL_28;
        }
      }
      else
      {
        result = add_to_lattice(0, 0, 0, a1, 0, (uint64_t)a4, (uint64_t)a5, v17, a6, a7);
        if (result)
        {
LABEL_28:
          v29 = (a1 + 1);
          if ((a1 & 0x80000000) == 0)
          {
            v30 = 0;
            do
            {
              for (i = a4[++v30]; i; i = *(_QWORD *)(i + 552))
              {
                v32 = *(unsigned int *)(i + 544);
                if ((_DWORD)v32)
                {
                  v33 = *(_QWORD *)(i + 280);
                  v34 = *(_QWORD *)(i + 24) + *(_QWORD *)(v33 + 8) + *(_QWORD *)(v33 + 16);
                  *(_QWORD *)(i + 8) = v34;
                  *(_QWORD *)(i + 536) = v33;
                  if ((int)v32 >= 1)
                  {
                    v35 = (uint64_t *)(i + 280);
                    do
                    {
                      v36 = *v35;
                      v37 = *(v35 - 32) + *(_QWORD *)(*v35 + 8) + *(_QWORD *)(*v35 + 16);
                      if (v37 < v34)
                      {
                        *(_QWORD *)(i + 8) = v37;
                        *(_QWORD *)(i + 536) = v36;
                        v34 = v37;
                      }
                      ++v35;
                      --v32;
                    }
                    while (v32);
                  }
                }
                else
                {
                  *(_QWORD *)(i + 8) = 1000000;
                  *(_QWORD *)(i + 536) = 0;
                }
              }
            }
            while (v30 != v29);
          }
          return a5[(int)v29];
        }
      }
    }
    else
    {
      v18 = 0;
      v19 = a1;
      v20 = a1;
      while (v18 >= v19)
      {
LABEL_19:
        ++v18;
        --v20;
        if (v18 == v19)
          goto LABEL_22;
      }
      v21 = 0;
      v38 = v19;
      v39 = a3;
      while (1)
      {
        address = box_hash_get_address(v18, v21);
        leading_word = box_hash_get_leading_word(a3, v18, v21, address);
        if (leading_word)
          break;
LABEL_18:
        ++v21;
        v19 = v38;
        a3 = v39;
        if (v21 == v20)
          goto LABEL_19;
      }
      v24 = (uint64_t *)leading_word;
      while (1)
      {
        v25 = a5[v18];
        if (v25)
          break;
        result = add_to_lattice(0, 0, v24, v18, v21, (uint64_t)a4, (uint64_t)a5, v17, a6, a7);
        if (!result)
          return result;
LABEL_17:
        v24 = (uint64_t *)v24[3];
        if (!v24)
          goto LABEL_18;
      }
      v26 = 0;
      while (1)
      {
        result = add_to_lattice((_DWORD *)v25, v26, v24, v18, v21, (uint64_t)a4, (uint64_t)a5, v17, a6, a7);
        if (!result)
          break;
        v26 = result;
        v25 = *(_QWORD *)(v25 + 560);
        if (!v25)
          goto LABEL_17;
      }
    }
  }
  return result;
}

_QWORD *mas_list_free_recursive(_QWORD *result, _QWORD *a2)
{
  uint64_t v3;

  if (result)
  {
    v3 = (uint64_t)result;
    mas_list_free_recursive(result[1]);
    mas_list_free_recursive(*(_QWORD *)(v3 + 16));
    return heap_Free(a2, v3);
  }
  return result;
}

uint64_t add_lattice_word_to_cyk_table(_QWORD *a1, uint64_t a2, int *a3, _QWORD *a4)
{
  uint64_t leading_tree;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  leading_tree = cyk_hash_get_leading_tree(a1, a3[144], a3[145]);
  if (leading_tree)
  {
    while (*(_DWORD *)(leading_tree + 32) || *(_QWORD *)(leading_tree + 48) != **(_QWORD **)a3)
    {
      leading_tree = *(_QWORD *)(leading_tree + 88);
      if (!leading_tree)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    result = heap_Alloc((uint64_t)a4, 96);
    if (!result)
      return result;
    v9 = result;
    v10 = **(_QWORD **)a3;
    *(_QWORD *)result = *(_QWORD *)(*(_QWORD *)a3 + 8);
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 48) = v10;
    *(_QWORD *)(result + 24) = *(_QWORD *)(*(_QWORD *)a3 + 16);
    *(_QWORD *)(result + 40) = 0;
    v11 = a3[144];
    v12 = a3[145];
    *(_DWORD *)(result + 72) = v11;
    *(_QWORD *)(result + 76) = v12;
    *(_DWORD *)(result + 8) = -1;
    v13 = cyk_hash_get_leading_tree(a1, v11, v12);
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = *(_QWORD *)(v13 + 88);
      }
      while (v13);
      *(_QWORD *)(v14 + 88) = v9;
    }
    else if ((cyk_hash_add_leading_tree(a1, v9, a3[144], a3[145], (uint64_t)a4) & 0x1FFF) == 0xA)
    {
      heap_Free(a4, v9);
      return 0;
    }
  }
  return 1;
}

uint64_t add_word_to_cyk_table(_QWORD *a1, uint64_t a2, int **a3, _QWORD *a4)
{
  int **v5;
  uint64_t result;

  if ((*a3)[142] != 1)
    return 0;
  v5 = a3;
  while (1)
  {
    v5 = (int **)v5[3];
    if (!v5 || (*v5)[143] == 1)
      break;
    result = add_lattice_word_to_cyk_table(a1, a2, *v5, a4);
    if (!(_DWORD)result)
      return result;
  }
  return 1;
}

uint64_t add_unknown_to_cyk_table(uint64_t a1, uint64_t a2, int a3, char *__s1, const char *a5, uint64_t a6, _QWORD *a7, int a8, uint64_t a9, _QWORD *a10)
{
  uint64_t number_of_symbol;
  uint64_t result;
  int v18;
  const char *v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  uint64_t leading_tree;
  uint64_t v24;

  number_of_symbol = get_number_of_symbol(a6, __s1);
  result = 0;
  v18 = a3 - a2;
  if (a3 >= (int)a2 && number_of_symbol != -1)
  {
    result = heap_Alloc((uint64_t)a10, (2 * (v18 + 1)) | 1u);
    if (result)
    {
      v19 = (const char *)result;
      if (mbs2sjis(a1, a2, v18 + 1, result, (2 * (v18 + 1)) | 1u) == -1)
      {
        heap_Free(a10, (uint64_t)v19);
        return 0;
      }
      v20 = unknown_info_create(v19, __s1, a5, "0", a10);
      heap_Free(a10, (uint64_t)v19);
      if (!v20)
        return 0;
      if (*(_BYTE *)(a9 + 68))
        v21 = a2 + 1;
      else
        v21 = a2;
      result = heap_Alloc((uint64_t)a10, 96);
      if (result)
      {
        v22 = result;
        *(_QWORD *)result = number_of_symbol;
        *(_DWORD *)(result + 32) = 0;
        *(_QWORD *)(result + 88) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_QWORD *)(result + 40) = 0;
        *(_QWORD *)(result + 48) = v20;
        *(_DWORD *)(result + 72) = v21;
        *(_DWORD *)(result + 76) = v18;
        *(_DWORD *)(result + 80) = 0;
        *(_DWORD *)(result + 8) = -1;
        leading_tree = cyk_hash_get_leading_tree(a7, v21, v18);
        if (leading_tree)
        {
          do
          {
            v24 = leading_tree;
            leading_tree = *(_QWORD *)(leading_tree + 88);
          }
          while (leading_tree);
          *(_QWORD *)(v24 + 88) = v22;
          return 1;
        }
        return (cyk_hash_add_leading_tree(a7, v22, v21, v18, (uint64_t)a10) & 0x1FFF) != 0xA;
      }
    }
  }
  return result;
}

_QWORD *backward_as(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t a9, _QWORD *a10)
{
  _OWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t i;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  int v58[2];

  v17 = (_OWORD *)heap_Alloc((uint64_t)a10, 48);
  if (!v17)
    return 0;
  v18 = v17;
  v56 = a5;
  v17[1] = 0u;
  v17[2] = 0u;
  *v17 = 0u;
  v19 = *(_QWORD *)(a1 + 8);
  v20 = (_QWORD *)heap_Alloc((uint64_t)a10, 48);
  if (!v20)
  {
    v18[1] = 0;
    goto LABEL_26;
  }
  v51 = a6;
  v52 = a7;
  v22 = 0;
  v23 = a1;
  v24 = 0;
  v25 = 0;
  v49 = v23;
  v50 = 0;
  *v20 = v23;
  v20[1] = 0;
  v20[2] = 0;
  v20[3] = 0;
  v20[4] = 0;
  v20[5] = v19;
  v18[1] = v20;
  v54 = a4;
  v55 = a8;
  v53 = a2;
  while (1)
  {
    ++v22;
    if ((*(_DWORD *)(a4 + 1320) & 0x80000000) == 0)
      break;
LABEL_7:
    v27 = v18;
    while (v20)
    {
      v28 = v20;
      v29 = v27;
      v20 = (_QWORD *)v20[1];
      v27 = v28;
      if (!v20)
      {
        v30 = v29[1];
        v29[1] = v28[2];
        goto LABEL_12;
      }
    }
    v30 = 0;
LABEL_12:
    v31 = *(int **)v30;
    if (*(_DWORD *)(*(_QWORD *)v30 + 568) == 1)
    {
      add_word_to_cyk_table(a8, v21, (int **)v30, a10);
      if (++v24 >= a2)
        goto LABEL_30;
    }
    else
    {
      v57 = v22;
      *(_QWORD *)v58 = v25;
      if (v31[136] >= 1)
      {
        v32 = 0;
        do
        {
          v33 = *(_QWORD *)(v30 + 32);
          v34 = &v31[2 * v32];
          v35 = *((_QWORD *)v34 + 35);
          v36 = *((_QWORD *)v34 + 3);
          v38 = *(_QWORD *)(v35 + 8);
          v37 = *(_QWORD *)(v35 + 16);
          v39 = (_QWORD *)heap_Alloc((uint64_t)a10, 48);
          if (!v39)
            return 0;
          v40 = v37 + v33 + v36;
          *v39 = v35;
          v39[1] = 0;
          v39[2] = 0;
          v39[3] = v30;
          v39[4] = v40;
          v39[5] = v40 + v38;
          v18[1] = mas_list_insert(v39, (_QWORD *)v18[1]);
          ++v32;
          v31 = *(int **)v30;
        }
        while (v32 < *(int *)(*(_QWORD *)v30 + 544));
      }
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v30 + 16) = 0;
      if (*(_QWORD *)v58)
        *(_QWORD *)(*(_QWORD *)v58 + 8) = v30;
      else
        v50 = (_QWORD *)v30;
      v25 = v30;
      a4 = v54;
      a8 = v55;
      a2 = v53;
      v22 = v57;
    }
    v20 = (_QWORD *)v18[1];
    if (!v20)
      goto LABEL_30;
  }
  if (times_limit_over() != 1)
  {
    v20 = (_QWORD *)v18[1];
    goto LABEL_7;
  }
  if (v24)
  {
LABEL_30:
    mas_list_free_recursive(v18, a10);
    mas_list_free_recursive(v50, a10);
    return a8;
  }
  v42 = 0;
  v43 = *(_QWORD *)(v49 + 536);
  for (i = v43; ; v43 = *(_QWORD *)(i + 536))
  {
    v45 = *(_DWORD *)(i + 576);
    v46 = v42;
    while (!v43)
    {
      v47 = v45 - 1;
      v42 = v46;
      if (v45 >= 1)
      {
        v47 = v45;
        while (1)
        {
          v42 = *(_QWORD *)(v56 + 8 * --v47);
          if (v42)
            break;
          if (v47 <= 0)
          {
            v42 = 0;
            v47 = -1;
            break;
          }
        }
      }
      if (*(_BYTE *)(a4 + 68))
        v48 = v45 - 2;
      else
        v48 = v45 - 1;
      if (!add_unknown_to_cyk_table(v51, v47 - (*(_BYTE *)(a4 + 68) != 0), v48, (char *)(a4 + 136), (const char *)(a4 + 200), v52, a8, v26, a4, a10))goto LABEL_49;
      v43 = 0;
      v46 = 0;
      i = v42;
      if (v42)
        goto LABEL_46;
    }
    v42 = v46;
    i = v43;
LABEL_46:
    if (*(_DWORD *)(i + 568) == 1)
      goto LABEL_30;
    if (!add_lattice_word_to_cyk_table(a8, v21, (int *)i, a10))
      break;
  }
LABEL_49:
  cyk_hash_free(a8, a10);
LABEL_26:
  mas_list_free_recursive(v18, a10);
  return 0;
}

uint64_t iso_parse_fdp_bas(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5, uint64_t *a6, uint64_t a7, unsigned __int16 a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  _OWORD v58[14];
  uint64_t v59;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63[3];

  v19 = heap_Alloc(*(_QWORD *)(a1 + 24), 96800);
  if (!v19)
  {
    v26 = 0;
    goto LABEL_7;
  }
  v24 = (uint64_t *)v19;
  v25 = *(_DWORD *)(a3 + 8);
  if (*(_BYTE *)(a2 + 68))
    ++v25;
  if (v25 < 2049)
  {
    v57 = v25;
    v60 = 0;
    v63[1] = 4000;
    v62 = 0;
    v63[0] = v19 + 32800;
    cstdlib_memset((void *)(v19 + 32800), 0, 0x7D00uLL);
    v29 = *(_OWORD *)(a1 + 176);
    v30 = *(_OWORD *)(a1 + 208);
    v58[12] = *(_OWORD *)(a1 + 192);
    v58[13] = v30;
    v31 = *(_OWORD *)(a1 + 112);
    v32 = *(_OWORD *)(a1 + 144);
    v33 = *(_OWORD *)(a1 + 160);
    v58[8] = *(_OWORD *)(a1 + 128);
    v58[9] = v32;
    v58[10] = v33;
    v58[11] = v29;
    v34 = *(_OWORD *)(a1 + 48);
    v35 = *(_OWORD *)(a1 + 80);
    v36 = *(_OWORD *)(a1 + 96);
    v58[4] = *(_OWORD *)(a1 + 64);
    v58[5] = v35;
    v37 = *(_QWORD *)(a1 + 40);
    v59 = *(_QWORD *)(a1 + 224);
    v58[6] = v36;
    v58[7] = v31;
    v38 = *(_OWORD *)(a1 + 16);
    v58[0] = *(_OWORD *)a1;
    v58[1] = v38;
    v58[2] = *(_OWORD *)(a1 + 32);
    v58[3] = v34;
    v27 = look_up_dictionary(a1, a3, a2, 20, (uint64_t)SF_symbol_file, v63, v37, (uint64_t)v58, a7, a8, a9, a10, a11, &v60);
    if ((v27 & 0x80000000) != 0)
      return v27;
    if (v60 == 1)
    {
      v47 = forward_dp(v57, v39, v63, v24 + 2050, v24, a4, *(_QWORD **)(a1 + 24));
      if (a5 == 1)
      {
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(a1 + 216), 5, 0, (uint64_t)"[FDP] Dumping LATTICE (RESULT OF FORWARD DP)", v44, v45, v46, v55);
        v27 = lattice_word_print_all(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 224), (uint64_t)(v24 + 2050), v57, 1);
        if ((v27 & 0x80000000) != 0)
          goto LABEL_22;
      }
      if (v47)
      {
        v61 = v24 + 8100;
        LODWORD(v62) = 4000;
        cstdlib_memset(v24 + 8100, 0, 0x7D00uLL);
        if (backward_as(v47, *(_DWORD *)(a2 + 8), v57, a2, (uint64_t)v24, a3, (uint64_t)SF_symbol_file, &v61, v55, *(_QWORD **)(a1 + 24)))
        {
          if (a5 != 1
            || (log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(a1 + 216), 5, 0, (uint64_t)"[A*] RESULT OF BACKWARD A Star", v48, v49, v50, v56), v27 = log_intermediate_tree(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 224), (int *)a2, &v61, v57, (uint64_t *)a1), (v27 & 0x80000000) == 0))
          {
            lattice_word_free_all(v24 + 2050, v57, *(_QWORD **)(a1 + 24));
            if (*(_DWORD *)(a2 + 48) == 1)
            {
              v51 = *(_QWORD *)(a1 + 24);
              v52 = 1;
LABEL_30:
              v54 = parser_result_create(v52, 0, v51);
              goto LABEL_31;
            }
            v53 = *(_DWORD *)(a2 + 24);
            switch(v53)
            {
              case 3:
                v54 = parse_cyk_as_step(a2, &v61, v57, *(_QWORD *)(a1 + 56), a1 + 64, a1 + 104, a1 + 144, *(_QWORD *)(a1 + 40), (uint64_t *)a1, *(_QWORD **)(a1 + 24));
                break;
              case 2:
                v54 = parse_cyk_as((_DWORD *)a2, &v61, v57, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), (uint64_t *)a1, *(_QWORD **)(a1 + 24));
                break;
              case 1:
                v54 = parse_cyk(a2, &v61, v57, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), (uint64_t *)a1, *(_QWORD **)(a1 + 24));
                break;
              default:
                v51 = *(_QWORD *)(a1 + 24);
                v52 = 2;
                goto LABEL_30;
            }
LABEL_31:
            v26 = v54;
            cyk_hash_free(&v61, *(_QWORD **)(a1 + 24));
            box_hash_free(v63, *(_QWORD **)(a1 + 24));
            goto LABEL_32;
          }
LABEL_22:
          v26 = 0;
          goto LABEL_8;
        }
      }
      box_hash_free(v63, *(_QWORD **)(a1 + 24));
      v26 = parser_result_create(2, 0, *(_QWORD *)(a1 + 24));
      lattice_word_free_all(v24 + 2050, v57, *(_QWORD **)(a1 + 24));
    }
    else
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(a1 + 216), 52001, 0, v40, v41, v42, v43, v55);
      box_hash_free(v63, *(_QWORD **)(a1 + 24));
      v26 = parser_result_create(2, 0, *(_QWORD *)(a1 + 24));
    }
LABEL_32:
    heap_Free(*(_QWORD **)(a1 + 24), (uint64_t)v24);
    goto LABEL_8;
  }
  log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(_QWORD *)(a1 + 216), 52000, (uint64_t)"%s%d", v20, v21, v22, v23, "maxlength");
  v26 = parser_result_create(2, 0, *(_QWORD *)(a1 + 24));
  heap_Free(*(_QWORD **)(a1 + 24), (uint64_t)v24);
LABEL_7:
  v27 = 0;
LABEL_8:
  *a6 = v26;
  return v27;
}

uint64_t tree_append(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (!result)
    return a2;
  v2 = result;
  do
  {
    v3 = v2;
    v2 = *(_QWORD *)(v2 + 16);
  }
  while (v2);
  *(_QWORD *)(v3 + 16) = a2;
  return result;
}

uint64_t *info_copy_sjis(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t *v7;
  char v8;
  char v9;
  uint64_t *v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  if (a1)
  {
    v3 = a1;
    v4 = (uint64_t *)heap_Calloc(a2, 1, 24);
    v5 = v4 == 0;
    if (v4)
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1;
      while (1)
      {
        v10 = v4;
        if ((v9 & 1) != 0)
          v7 = v4;
        v11 = cstdlib_strlen(*(const char **)v3);
        v12 = (char *)heap_Alloc((uint64_t)a2, (v11 + 1));
        *v4 = (uint64_t)v12;
        if (!v12)
          break;
        cstdlib_strcpy(v12, *(const char **)v3);
        v13 = mbs_len_bytes(*(_QWORD *)(v3 + 8)) + 1;
        v14 = heap_Alloc((uint64_t)a2, v13);
        if (!v14
          || mbs2sjis(*(_QWORD *)(v3 + 8), 0, *(_DWORD *)(*(_QWORD *)(v3 + 8) + 8), v14, v13) == -1)
        {
          goto LABEL_23;
        }
        v10[1] = v14;
        if ((v9 & 1) == 0)
          v6[2] = (uint64_t)v10;
        v3 = *(_QWORD *)(v3 + 16);
        if (!v3)
        {
          v10[2] = 0;
          return v7;
        }
        v8 = 1;
        v4 = (uint64_t *)heap_Calloc(a2, 1, 24);
        v9 = 0;
        v5 = v4 == 0;
        v6 = v10;
        if (!v4)
          goto LABEL_15;
      }
      v14 = 0;
LABEL_23:
      v4 = v10;
      if ((v8 & 1) != 0)
        goto LABEL_16;
    }
    else
    {
      v8 = 0;
      v7 = 0;
LABEL_15:
      v14 = 0;
      if ((v8 & 1) != 0)
LABEL_16:
        WordInfo_free(v7, a2);
    }
    if (!v5)
    {
      heap_Free(a2, *v4);
      heap_Free(a2, (uint64_t)v4);
    }
    heap_Free(a2, v14);
  }
  return 0;
}

uint64_t *WordInfo_free(uint64_t *result, _QWORD *a2)
{
  uint64_t v3;

  if (result)
  {
    v3 = (uint64_t)result;
    heap_Free(a2, *result);
    heap_Free(a2, *(_QWORD *)(v3 + 8));
    WordInfo_free(*(_QWORD *)(v3 + 16), a2);
    return heap_Free(a2, v3);
  }
  return result;
}

_QWORD *tree_duplicate(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v8;
  const char *v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;

  v8 = heap_Alloc((uint64_t)a4, 64);
  if (v8)
  {
    v9 = (const char *)v8;
    if (get_name_of_symbol(SF_symbol_file, a3, *(_QWORD *)a1, v8))
    {
      v10 = *(_DWORD *)(a1 + 32);
      switch(v10)
      {
        case 0:
          if (*v9 == 95 && *(_DWORD *)(a2 + 28) == 1)
            break;
          v15 = info_copy_sjis(*(_QWORD *)(a1 + 48), a4);
          if (!v15)
            break;
          v16 = v15;
          v17 = *(uint64_t **)(a1 + 24);
          if (v17 && *(_DWORD *)(a2 + 12) == 1)
          {
            v18 = attribute_copy_all(v17, a4);
            if (!v18)
            {
              WordInfo_free(v16, a4);
              break;
            }
          }
          else
          {
            v18 = 0;
          }
          v12 = jp_tree_create(*(_QWORD *)a1, v9, 0, (uint64_t)v18, 0, (uint64_t)v16, a4);
          if (!v12)
            WordInfo_free(v16, a4);
          goto LABEL_33;
        case 1:
          v19 = tree_duplicate(*(_QWORD *)(a1 + 48), a2, a3, a4);
          if (v19)
          {
            v20 = (_QWORD *)v19;
            if (*v9 != 95 || *(_DWORD *)(a2 + 28) != 1)
            {
              v21 = *(uint64_t **)(a1 + 24);
              if (v21 && *(_DWORD *)(a2 + 12) == 1)
              {
                v22 = attribute_copy_all(v21, a4);
                if (!v22)
                  break;
              }
              else
              {
                v22 = 0;
              }
              v12 = jp_tree_create(*(_QWORD *)a1, v9, 0, (uint64_t)v22, (uint64_t)v20, 0, a4);
              if (!v12)
                jpe_FreeTree(v20, a4);
              goto LABEL_33;
            }
            v12 = (_QWORD *)v19;
            goto LABEL_33;
          }
          break;
        case 2:
          v11 = tree_duplicate(*(_QWORD *)(a1 + 40), a2, a3, a4);
          if (v11)
          {
            v12 = (_QWORD *)v11;
            v13 = v11;
            do
            {
              v14 = v13;
              v13 = *(_QWORD *)(v13 + 16);
            }
            while (v13);
            *(_QWORD *)(v14 + 16) = tree_duplicate(*(_QWORD *)(a1 + 48), a2, a3, a4);
LABEL_27:
            if (*v9 == 95 && *(_DWORD *)(a2 + 28) == 1)
              goto LABEL_33;
            v23 = *(uint64_t **)(a1 + 24);
            if (v23 && *(_DWORD *)(a2 + 12) == 1)
            {
              v24 = attribute_copy_all(v23, a4);
              if (!v24)
                break;
            }
            else
            {
              v24 = 0;
            }
            v12 = jp_tree_create(*(_QWORD *)a1, v9, 0, (uint64_t)v24, (uint64_t)v12, 0, a4);
            goto LABEL_33;
          }
          v12 = (_QWORD *)tree_duplicate(*(_QWORD *)(a1 + 48), a2, a3, a4);
          if (v12)
            goto LABEL_27;
LABEL_33:
          heap_Free(a4, (uint64_t)v9);
          return v12;
      }
    }
    v12 = 0;
    goto LABEL_33;
  }
  return 0;
}

_QWORD *jp_tree_create(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  char *v17;

  v14 = (_QWORD *)heap_Calloc(a7, 1, 48);
  v15 = v14;
  if (v14)
  {
    *v14 = a1;
    v16 = cstdlib_strlen(a2);
    v17 = (char *)heap_Alloc((uint64_t)a7, (v16 + 1));
    v15[1] = v17;
    if (v17)
    {
      cstdlib_strcpy(v17, a2);
      v15[2] = a3;
      v15[3] = a4;
      v15[4] = a5;
      v15[5] = a6;
    }
    else
    {
      heap_Free(a7, (uint64_t)v15);
      return 0;
    }
  }
  return v15;
}

uint64_t jpe_FreeTree(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;

  if (a1)
  {
    v3 = a1;
    do
    {
      v4 = v3[4];
      if (v4)
      {
        jpe_FreeTree(v4, a2);
      }
      else
      {
        v5 = (uint64_t *)v3[5];
        if (v5)
          WordInfo_free(v5, a2);
      }
      v6 = (_QWORD *)v3[2];
      jpe_FreeTreeOne((uint64_t)v3, a2);
      v3 = v6;
    }
    while (v6);
  }
  return 1;
}

uint64_t jpe_FreeTreeOne(uint64_t a1, _QWORD *a2)
{
  if (a1)
  {
    heap_Free(a2, *(_QWORD *)(a1 + 8));
    attribute_free_all(*(uint64_t **)(a1 + 24), a2);
    heap_Free(a2, a1);
  }
  return 1;
}

_QWORD *WordInfo_duplicate(uint64_t a1, size_t a2, _QWORD *a3)
{
  _QWORD *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a1)
    return 0;
  v6 = (_QWORD *)heap_Calloc(a3, 1, 24);
  if (!v6)
    return v6;
  v7 = cstdlib_strlen(*(const char **)a1);
  v8 = (char *)heap_Alloc((uint64_t)a3, (v7 + 1));
  *v6 = v8;
  if (!v8)
    return 0;
  cstdlib_strcpy(v8, *(const char **)a1);
  if ((_DWORD)a2 == -1)
  {
    if (cstdlib_strcmp(*(const char **)a1, "WORD"))
      a2 = 0xFFFFFFFFLL;
    else
      a2 = cstdlib_strlen(*(const char **)(a1 + 8));
  }
  if (cstdlib_strcmp(*(const char **)a1, "MARKER"))
  {
    v9 = cstdlib_strlen(*(const char **)(a1 + 8));
    v10 = (char *)heap_Alloc((uint64_t)a3, (v9 + 1));
    v6[1] = v10;
    if (v10)
    {
      cstdlib_strcpy(v10, *(const char **)(a1 + 8));
      goto LABEL_15;
    }
    return 0;
  }
  v11 = heap_Alloc((uint64_t)a3, a2);
  v6[1] = v11;
  if (!v11)
    return 0;
  if ((int)a2 >= 1)
  {
    v12 = 0;
    do
    {
      *(_BYTE *)(v6[1] + v12) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + v12);
      ++v12;
    }
    while (a2 != v12);
  }
LABEL_15:
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
  {
    v6[2] = 0;
    return v6;
  }
  v14 = WordInfo_duplicate(v13, a2, a3);
  v6[2] = v14;
  if (!v14)
    return 0;
  return v6;
}

uint64_t jp_tree_duplicate_one(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  char *v6;
  const char *v7;

  v4 = heap_Calloc(a2, 1, 48);
  if (v4)
  {
    v5 = cstdlib_strlen(*(const char **)(a1 + 8));
    v6 = (char *)heap_Alloc((uint64_t)a2, (v5 + 1));
    *(_QWORD *)(v4 + 8) = v6;
    if (v6)
    {
      v7 = *(const char **)(a1 + 8);
      *(_QWORD *)v4 = *(_QWORD *)a1;
      cstdlib_strcpy(v6, v7);
      *(_OWORD *)(v4 + 16) = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + 32);
    }
    else
    {
      heap_Free(a2, v4);
      return 0;
    }
  }
  return v4;
}

uint64_t *free_information(uint64_t *result, _QWORD *a2)
{
  uint64_t v3;

  if (result)
  {
    v3 = (uint64_t)result;
    heap_Free(a2, *result);
    mbs_free(*(uint64_t **)(v3 + 8), a2);
    heap_Free(a2, *(_QWORD *)(v3 + 8));
    free_information(*(_QWORD *)(v3 + 16), a2);
    return heap_Free(a2, v3);
  }
  return result;
}

uint64_t info_copy(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  char *v10;
  uint64_t v11;

  if (a1)
  {
    v3 = a1;
    v4 = 0;
    v5 = 0;
    v6 = 1;
    while (1)
    {
      v7 = heap_Calloc(a2, 1, 32);
      if (!v7)
        break;
      v8 = (_QWORD *)v7;
      if ((v6 & 1) != 0)
        v4 = v7;
      v9 = cstdlib_strlen(*(const char **)v3);
      v10 = (char *)heap_Alloc((uint64_t)a2, (v9 + 1));
      *v8 = v10;
      if (!v10)
        break;
      cstdlib_strcpy(v10, *(const char **)v3);
      v11 = heap_Alloc((uint64_t)a2, 16);
      v8[1] = v11;
      if (!v11
        || (mbs_copy(v11, *(_QWORD **)(v3 + 8), 0, *(_DWORD *)(*(_QWORD *)(v3 + 8) + 8), a2) & 0x80000000) != 0)
      {
        break;
      }
      if ((v6 & 1) == 0)
        v5[2] = v8;
      v6 = 0;
      v3 = *(_QWORD *)(v3 + 16);
      v5 = v8;
      if (!v3)
      {
        v8[2] = 0;
        return v4;
      }
    }
  }
  return 0;
}

uint64_t create_info(int a1, const char *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  char *v11;
  char __dst[128];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v6 = heap_Calloc(a3, 1, 32);
  if (v6)
  {
    v7 = heap_Calloc(a3, 1, 16);
    *(_QWORD *)(v6 + 8) = v7;
    if (v7)
    {
      v8 = v7;
      v9 = cstdlib_strlen(a2);
      if ((mbs_create(v8, v9, a2, a3) & 0x80000000) == 0)
      {
        cstdlib_strcpy(__dst, off_24D291F08[a1]);
        v10 = cstdlib_strlen(__dst);
        v11 = (char *)heap_Alloc((uint64_t)a3, (v10 + 1));
        *(_QWORD *)v6 = v11;
        if (v11)
        {
          cstdlib_strcpy(v11, __dst);
          *(_QWORD *)(v6 + 16) = 0;
          *(_QWORD *)(v6 + 24) = 0;
          return v6;
        }
        mbs_free(*(uint64_t **)(v6 + 8), a3);
      }
      heap_Free(a3, *(_QWORD *)(v6 + 8));
    }
    heap_Free(a3, v6);
    return 0;
  }
  return v6;
}

_QWORD *word_data_free_all(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;

  v4 = *a1;
  v5 = (uint64_t *)(*a1)[3];
  if (v5)
  {
    do
    {
      v6 = (uint64_t *)v5[3];
      free_information(v5, a2);
      v5 = v6;
    }
    while (v6);
  }
  free_information(v4, a2);
  attribute_free_all(a1[2], a2);
  return heap_Free(a2, (uint64_t)a1);
}

uint64_t BSCompareUniToTts(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = *a1;
  v3 = *a2;
  v4 = v2 >= v3;
  v5 = v2 > v3;
  if (v4)
    return v5;
  else
    return 0xFFFFFFFFLL;
}

uint64_t XLIT_chUnicodeWideToSJIS(unsigned int a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  char v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  char v15;
  char v16;
  unsigned int v17;
  char v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char *v22;
  int v23;
  unint64_t v25;
  uint64_t v26;
  unsigned __int16 v27;
  __int16 v28;

  v28 = a1;
  if (a1 - 65534 >= 2 && a1 != 65279)
  {
    if (a1 <= 0x7E)
    {
      *a2 = a1;
      return 1;
    }
    if (a1 - 1025 <= 0x50)
    {
      *a2 = -124;
      if (a1 == 1025)
      {
        v8 = 70;
      }
      else
      {
        if (a1 <= 0x415)
          v14 = 48;
        else
          v14 = 49;
        v15 = v14 + a1;
        if (a1 > 0x42F)
          v15 += 15;
        v16 = a1 > 0x435;
        if (a1 > 0x43D)
          ++v16;
        v8 = v16 + v15;
      }
      a2[1] = v8;
      return 2;
    }
    if (a1 - 913 <= 0x38)
    {
      if (a1 > 0x3A1)
        v9 = -32755;
      else
        v9 = -32754;
      v10 = v9 + a1;
      if (a1 > 0x3A9)
        ++v10;
      v11 = v10 - (a1 > 0x3C1);
LABEL_21:
      v12 = bswap32(v11);
LABEL_22:
      v13 = HIWORD(v12);
LABEL_23:
      *(_WORD *)a2 = v13;
      return 2;
    }
    if ((unsigned __int16)(a1 + 159) <= 0x3Eu)
    {
      *a2 = a1 + 64;
      return 1;
    }
    if ((unsigned __int16)(a1 + 255) <= 0x5Du)
    {
      v5 = 0;
      v17 = 33097;
      switch(a1)
      {
        case 0xFF01u:
          goto LABEL_88;
        case 0xFF02u:
        case 0xFF07u:
          return v5;
        case 0xFF03u:
          v17 = 33172;
          goto LABEL_88;
        case 0xFF04u:
          v17 = 33168;
          goto LABEL_88;
        case 0xFF05u:
          v17 = 33171;
          goto LABEL_88;
        case 0xFF06u:
          v17 = 33173;
          goto LABEL_88;
        case 0xFF08u:
          v17 = 33129;
          goto LABEL_88;
        case 0xFF09u:
          v17 = 33130;
          goto LABEL_88;
        case 0xFF0Au:
          v17 = 33174;
          goto LABEL_88;
        case 0xFF0Bu:
          v17 = 33147;
          goto LABEL_88;
        case 0xFF0Cu:
          v17 = 33091;
          goto LABEL_88;
        case 0xFF0Du:
          v17 = 33148;
          goto LABEL_88;
        case 0xFF0Eu:
          v17 = 33092;
          goto LABEL_88;
        case 0xFF0Fu:
          v17 = 33118;
          goto LABEL_88;
        case 0xFF10u:
        case 0xFF11u:
        case 0xFF12u:
        case 0xFF13u:
        case 0xFF14u:
        case 0xFF15u:
        case 0xFF16u:
        case 0xFF17u:
        case 0xFF18u:
        case 0xFF19u:
        case 0xFF21u:
        case 0xFF22u:
        case 0xFF23u:
        case 0xFF24u:
        case 0xFF25u:
        case 0xFF26u:
        case 0xFF27u:
        case 0xFF28u:
        case 0xFF29u:
        case 0xFF2Au:
        case 0xFF2Bu:
        case 0xFF2Cu:
        case 0xFF2Du:
        case 0xFF2Eu:
        case 0xFF2Fu:
        case 0xFF30u:
        case 0xFF31u:
        case 0xFF32u:
        case 0xFF33u:
        case 0xFF34u:
        case 0xFF35u:
        case 0xFF36u:
        case 0xFF37u:
        case 0xFF38u:
        case 0xFF39u:
        case 0xFF3Au:
LABEL_57:
          if (a1 <= 0xFF3A)
            v23 = -31937;
          else
            v23 = -31936;
          v17 = v23 + a1;
          goto LABEL_88;
        case 0xFF1Au:
          v17 = 33094;
          goto LABEL_88;
        case 0xFF1Bu:
          v17 = 33095;
          goto LABEL_88;
        case 0xFF1Cu:
          v17 = 33155;
          goto LABEL_88;
        case 0xFF1Du:
          v17 = 33153;
          goto LABEL_88;
        case 0xFF1Eu:
          v17 = 33156;
          goto LABEL_88;
        case 0xFF1Fu:
          v17 = 33096;
          goto LABEL_88;
        case 0xFF20u:
          v17 = 33175;
          goto LABEL_88;
        case 0xFF3Bu:
          v17 = 33133;
          goto LABEL_88;
        case 0xFF3Cu:
          v17 = 33119;
          goto LABEL_88;
        case 0xFF3Du:
          v17 = 33134;
          goto LABEL_88;
        case 0xFF3Eu:
          v17 = 33103;
          goto LABEL_88;
        case 0xFF3Fu:
          v17 = 33105;
          goto LABEL_88;
        case 0xFF40u:
          v17 = 33101;
          goto LABEL_88;
        default:
          switch(a1)
          {
            case 0xFF5Bu:
              v17 = 33135;
              break;
            case 0xFF5Cu:
              v17 = 33122;
              break;
            case 0xFF5Du:
              v17 = 33136;
              break;
            case 0xFF5Eu:
              v17 = 33120;
              break;
            default:
              goto LABEL_57;
          }
LABEL_88:
          v12 = bswap32(v17);
          break;
      }
      goto LABEL_22;
    }
    if (a1 - 12353 <= 0x52)
    {
      a2[1] = a1 + 94;
      v18 = -126;
LABEL_46:
      *a2 = v18;
      return 2;
    }
    if (a1 - 12449 <= 0x55)
    {
      if (a1 >> 5 <= 0x186)
        v19 = -97;
      else
        v19 = -96;
      a2[1] = v19 + a1;
      v18 = -125;
      goto LABEL_46;
    }
    if ((unsigned __int16)(a1 - 19968) > 0x51A5u)
    {
      switch(a1)
      {
        case 0x2500u:
          v13 = 33951;
          goto LABEL_129;
        case 0x2501u:
          v13 = 33962;
          goto LABEL_129;
        case 0x2502u:
          v13 = 33952;
          goto LABEL_129;
        case 0x2503u:
          v13 = 33963;
          goto LABEL_129;
        case 0x2504u:
        case 0x2505u:
        case 0x2506u:
        case 0x2507u:
        case 0x2508u:
        case 0x2509u:
        case 0x250Au:
        case 0x250Bu:
        case 0x250Du:
        case 0x250Eu:
        case 0x2511u:
        case 0x2512u:
        case 0x2515u:
        case 0x2516u:
        case 0x2519u:
        case 0x251Au:
        case 0x251Eu:
        case 0x251Fu:
        case 0x2521u:
        case 0x2522u:
        case 0x2526u:
        case 0x2527u:
        case 0x2529u:
        case 0x252Au:
        case 0x252Du:
        case 0x252Eu:
        case 0x2531u:
        case 0x2532u:
        case 0x2535u:
        case 0x2536u:
        case 0x2539u:
        case 0x253Au:
        case 0x253Du:
        case 0x253Eu:
        case 0x2540u:
        case 0x2541u:
        case 0x2543u:
        case 0x2544u:
        case 0x2545u:
        case 0x2546u:
        case 0x2547u:
        case 0x2548u:
        case 0x2549u:
        case 0x254Au:
LABEL_93:
          v25 = ssft_bsearch((uint64_t)&v28, (unint64_t)&BSUniToTts, 0x93uLL, 2, (uint64_t (*)(uint64_t, unint64_t))BSCompareUniToTts);
          if (v25)
          {
            v22 = (char *)&BSUniToTts + (((_WORD)v25 - (unsigned __int16)&BSUniToTts) & 0x1FE);
            goto LABEL_51;
          }
          if (!a4 || !*(_WORD *)(a4 + 2))
            return 0;
          if (v28 == *(_WORD *)(a4 + 2))
          {
            v26 = 0;
          }
          else
          {
            v27 = 1;
            do
            {
              v27 += 2;
              if (!*(_WORD *)(a4 + 2 * v27))
                return 0;
            }
            while (v28 != *(_WORD *)(a4 + 2 * v27));
            v26 = v27 - 1;
          }
          v11 = *(unsigned __int16 *)(a4 + 2 * v26);
          break;
        case 0x250Cu:
          v13 = 33953;
          goto LABEL_129;
        case 0x250Fu:
          v13 = 33964;
          goto LABEL_129;
        case 0x2510u:
          v13 = 33954;
          goto LABEL_129;
        case 0x2513u:
          v13 = 33965;
          goto LABEL_129;
        case 0x2514u:
          v13 = 33956;
          goto LABEL_129;
        case 0x2517u:
          v13 = 33967;
          goto LABEL_129;
        case 0x2518u:
          v13 = 33955;
          goto LABEL_129;
        case 0x251Bu:
          v13 = 33966;
          goto LABEL_129;
        case 0x251Cu:
          v13 = 33957;
          goto LABEL_129;
        case 0x251Du:
          v13 = 33978;
          goto LABEL_129;
        case 0x2520u:
          v13 = 33973;
          goto LABEL_129;
        case 0x2523u:
          v13 = 33968;
          goto LABEL_129;
        case 0x2524u:
          v13 = 33959;
          goto LABEL_129;
        case 0x2525u:
          v13 = 33980;
          goto LABEL_129;
        case 0x2528u:
          v13 = 33975;
          goto LABEL_129;
        case 0x252Bu:
          v13 = 33970;
          goto LABEL_129;
        case 0x252Cu:
          v13 = 33958;
          goto LABEL_129;
        case 0x252Fu:
          v13 = 33974;
          goto LABEL_129;
        case 0x2530u:
          v13 = 33979;
          goto LABEL_129;
        case 0x2533u:
          v13 = 33969;
          goto LABEL_129;
        case 0x2534u:
          v13 = 33960;
          goto LABEL_129;
        case 0x2537u:
          v13 = 33976;
          goto LABEL_129;
        case 0x2538u:
          v13 = 33981;
          goto LABEL_129;
        case 0x253Bu:
          v13 = 33971;
          goto LABEL_129;
        case 0x253Cu:
          v13 = 33961;
          goto LABEL_129;
        case 0x253Fu:
          v13 = 33977;
          goto LABEL_129;
        case 0x2542u:
          v13 = 33982;
          goto LABEL_129;
        case 0x254Bu:
          v13 = 33972;
          goto LABEL_129;
        default:
          switch(a1)
          {
            case 0xFFE0u:
              v13 = 33169;
              break;
            case 0xFFE1u:
              v13 = 33170;
              break;
            case 0xFFE2u:
              v13 = 33226;
              break;
            case 0xFFE3u:
            case 0xFFE4u:
              goto LABEL_93;
            case 0xFFE5u:
              v13 = 33167;
              break;
            default:
              if (a1 != 8741)
                goto LABEL_93;
              v13 = 33121;
              break;
          }
LABEL_129:
          LOWORD(v13) = __rev16(v13);
          goto LABEL_23;
      }
      goto LABEL_21;
    }
    v20 = jpj_UniToCTts(a1);
    if (v20 != 0x1FFF)
    {
      LOWORD(v13) = __rev16(jpj_CTtsToTts(v20));
      goto LABEL_23;
    }
    v21 = ssft_bsearch((uint64_t)&v28, (unint64_t)&BSUniToTts, 0x93uLL, 2, (uint64_t (*)(uint64_t, unint64_t))BSCompareUniToTts);
    if (v21)
    {
      v22 = (char *)&BSUniToTts + (((_WORD)v21 - (unsigned __int16)&BSUniToTts) & 0x1FE);
LABEL_51:
      v11 = *((unsigned __int16 *)v22 + 147);
      goto LABEL_21;
    }
  }
  return 0;
}

uint64_t jpj_UniToCTts(__int16 a1)
{
  unsigned __int16 *v1;
  int v2;
  unsigned __int16 v3;

  if ((unsigned __int16)(a1 - 19968) > 0x51A5u)
    return 0x1FFFLL;
  v1 = (unsigned __int16 *)((char *)&CUni2CTts + 2 * CUni2CTtsindex[(unsigned __int16)(a1 - 19968) >> 6]);
  LOWORD(v2) = a1 & 0x3F;
  if ((a1 & 0x3F) == 0)
    return *v1 >> 3;
  do
  {
    v3 = *v1 & 7;
    if ((*v1 & 7) != 0)
    {
      ++v1;
    }
    else
    {
      v3 = v1[1];
      v1 += 2;
    }
    v2 = (__int16)(v2 - v3);
  }
  while (v2 > 0);
  if (v2)
    return 0x1FFFLL;
  else
    return *v1 >> 3;
}

uint64_t jpj_CTtsToTts(unsigned int a1)
{
  __int16 v1;
  unsigned __int16 v2;
  __int16 v3;
  unsigned __int8 v4;
  unsigned int v5;
  unsigned __int8 v6;
  __int16 v7;
  unsigned int v8;
  __int16 v9;

  if (a1)
  {
    v1 = a1 + 43;
    if (a1 <= 0xB95)
      v1 = a1;
    v2 = v1 + 1409;
    v3 = v2 / 0xBCu;
    LOBYTE(v2) = v2 % 0xBCu;
    v4 = v2 + 64;
    v5 = (v2 + 64);
    v6 = v2 + 65;
    if (v5 <= 0x7E)
      v6 = v4;
    v7 = v3 - 127;
    v8 = (v3 - 127);
    v9 = v3 - 63;
    if (v8 <= 0x9F)
      v9 = v7;
    return (unsigned __int16)(v6 | (unsigned __int16)(v9 << 8));
  }
  else
  {
    return (unsigned __int16)-32425;
  }
}

uint64_t XLIT_chSJISToUnicodeWide(char *a1, _WORD *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  unsigned __int16 v12;
  unsigned int v13;
  __int16 v14;
  __int16 v15;

  v3 = *a1;
  if ((*a1 & 0x80000000) == 0)
  {
    v4 = 1;
LABEL_3:
    *a2 = v3;
    return v4;
  }
  if ((v3 + 6) < 3u || v3 < 0xA0 || (v3 & 0xF0) == 0xE0)
  {
    v7 = a1[1] | (v3 << 8);
    v4 = 2;
  }
  else
  {
    v7 = v3 << 8;
    v4 = 1;
  }
  v5 = 0;
  if (v7 != 33663 && (unsigned __int16)(v7 + 32448) <= 0x6964u)
  {
    if ((unsigned __int16)(v7 + 32448) < 0xBDu)
    {
      if (v7 <= 0x817E)
      {
        v8 = 32448;
LABEL_50:
        v12 = v7 + v8;
LABEL_51:
        LOWORD(v3) = jpj_BSTtsToUni[v12];
        goto LABEL_3;
      }
      if (v7 != 33151 && v7 <= 0x81AC)
      {
        v8 = 32447;
        goto LABEL_50;
      }
      if ((v7 & 0xFFF8) == 0x81B8)
      {
        v8 = 32436;
        goto LABEL_50;
      }
      if ((unsigned __int16)(v7 + 32312) <= 6u)
      {
        v8 = 32428;
        goto LABEL_50;
      }
      if ((unsigned __int16)(v7 + 32294) <= 0xEu || (v7 & 0xFFF8) == 0x81F0)
      {
        v8 = 32417;
        goto LABEL_50;
      }
      if (v7 == 33276)
      {
        v12 = 146;
        goto LABEL_51;
      }
      return 0;
    }
    if ((unsigned __int16)(v7 + 32177) <= 0x4Bu)
    {
      if (v7 - 89 <= 0x27 && ((1 << (v7 - 89)) & 0xFE0000007FLL) != 0)
        return 0;
      *a2 = v7 + 31937;
      if (v7 < 0x827A)
        return v4;
      v9 = 31936;
      goto LABEL_62;
    }
    if ((unsigned __int16)(v7 + 31841) <= 0x37u)
    {
      if (v7 - 183 >= 8)
      {
        if (v7 >> 4 <= 0x83A)
          v10 = 32754;
        else
          v10 = 32755;
        v11 = v10 + v7;
        *a2 = v11;
        if (v7 < 0x83BF)
          return v4;
        *a2 = v11 - 1;
        if (v7 >> 4 <= 0x83C)
          LOWORD(v3) = v11 - 1;
        else
          LOWORD(v3) = v11;
        goto LABEL_3;
      }
      return 0;
    }
    if ((unsigned __int16)(v7 + 31680) > 0x51u)
    {
      if ((unsigned __int16)(v7 + 32424) <= 0x746u)
      {
        if ((unsigned __int16)(v7 + 32097) >= 0x53u)
        {
          if ((unsigned __int16)(v7 + 31936) >= 0x57u)
            return 0;
          *a2 = v7 - 21151;
          if (v7 < 0x837F)
            return v4;
          v9 = -21152;
        }
        else
        {
          v9 = -21086;
        }
LABEL_62:
        LOWORD(v3) = v7 + v9;
        goto LABEL_3;
      }
      v5 = 0;
      if ((unsigned __int16)(v7 + 26509) >= 0x2Cu && (unsigned __int16)(v7 + 24576) >= 0x4000u)
      {
        if (v7 < 0x40u)
          return 0;
        v5 = 0;
        if (v7 != 127 && v7 <= 0xFCu)
        {
          v13 = jpj_TtsToCTts(v7);
          if (v13 >> 2 <= 0x634)
          {
            LOWORD(v3) = jpj_CTts2Uni[v13];
            goto LABEL_3;
          }
          return 0;
        }
      }
    }
    else
    {
      v5 = 0;
      if (v7 != 127 && v7 - 97 >= 0xF)
      {
        if (v7 == 33862)
        {
          LOWORD(v3) = 1025;
        }
        else if (v7 == 33910)
        {
          LOWORD(v3) = 1105;
        }
        else
        {
          if (v7 > 0x8445)
            v14 = 32719;
          else
            v14 = 32720;
          v15 = v14 + v7;
          *a2 = v15;
          if (v7 >> 5 < 0x423)
            return v4;
          *a2 = v15 - 15;
          if (v7 < 0x8476)
            return v4;
          *a2 = v15 - 16;
          if (v7 < 0x847E)
            return v4;
          LOWORD(v3) = v15 - 17;
        }
        goto LABEL_3;
      }
    }
  }
  return v5;
}

uint64_t jpj_TtsToCTts(unsigned int a1)
{
  unsigned __int16 v1;
  unsigned int v2;
  char v3;
  __int16 v4;
  unsigned __int16 v5;
  unsigned int v6;

  if (a1 == 33111)
  {
    return 0;
  }
  else
  {
    v2 = a1 >> 8;
    if (a1 >> 13 > 4)
      LOBYTE(v2) = BYTE1(a1) - 64;
    if (a1 <= 0x7Eu)
      v3 = a1;
    else
      v3 = a1 - 1;
    v4 = 188 * (v2 + 127) + (v3 - 64);
    v5 = v4 - 1409;
    v6 = (unsigned __int16)(v4 - 1409);
    v1 = v4 - 1452;
    if (v6 <= 0xB95)
      return v5;
  }
  return v1;
}

const char *marker_getMarkerArgStr(unsigned int a1)
{
  if (a1 > 0xB)
    return "__not_defined__";
  else
    return off_24D291F30[a1];
}

uint64_t marker_string2tag(char *__s1, _DWORD *a2, _DWORD *a3)
{
  int v6;
  char *v7;
  int v8;
  BOOL v9;
  int v10;
  uint64_t result;
  int v12;
  char *v13;

  v6 = 0;
  v7 = "MARKER_PHONEME";
  while (cstdlib_strcmp(__s1, v7))
  {
    v8 = cstdlib_strcmp(__s1, v7 + 7);
    if (v8)
      ++v6;
    v7 = &markerTable[56 * v6];
    if (*v7)
      v9 = v8 == 0;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
      if (v8)
        result = 20;
      else
        result = 0;
      if (v10)
      {
        v12 = 0;
        *a2 = 0;
        goto LABEL_16;
      }
      break;
    }
  }
  result = 0;
  v13 = &markerTable[56 * v6];
  *a2 = *((_DWORD *)v13 + 12);
  v12 = *((_DWORD *)v13 + 13);
LABEL_16:
  *a3 = v12;
  return result;
}

uint64_t marker_tag2string(int a1, const char **a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  char *v6;
  BOOL v7;
  int v8;
  const char *v9;
  uint64_t result;

  v3 = 0;
  v4 = 0;
  do
  {
    v5 = *(_DWORD *)&markerTable[56 * v3 + 48];
    if (v5 == a1)
      v3 = v4;
    else
      v3 = v4 + 1;
    v6 = &markerTable[56 * v3];
    if (*v6)
      v7 = v5 == a1;
    else
      v7 = 1;
    v4 = v3;
  }
  while (!v7);
  if (v5 == a1)
  {
    result = 0;
    v9 = v6 + 7;
    v8 = *(_DWORD *)&markerTable[56 * v3 + 52];
  }
  else
  {
    v8 = 0;
    v9 = "";
    result = 20;
  }
  *a2 = v9;
  *a3 = v8;
  return result;
}

unint64_t marker_hasNonConstCharPtrArg(int a1)
{
  int v1;
  const char *v2;
  int v3;

  v1 = 0;
  v2 = "!";
  while (1)
  {
    v3 = *(_DWORD *)v2;
    v2 += 56;
    if (v3 == a1)
      break;
    if (++v1 == 57)
      return 0;
  }
  return (0x1E7DC3FF9804102uLL >> v1) & 1;
}

uint64_t marker_hasConstCharPtrArg()
{
  return 0;
}

unint64_t marker_hasCharPtrArg(int a1)
{
  int v1;
  const char *v2;
  int v3;

  v1 = 0;
  v2 = "!";
  while (1)
  {
    v3 = *(_DWORD *)v2;
    v2 += 56;
    if (v3 == a1)
      break;
    if (++v1 == 57)
      return 0;
  }
  return (0x1E7DC3FF9804102uLL >> v1) & 1;
}

char *marker_getString(int a1)
{
  char *result;
  uint64_t i;
  uint64_t v4;
  int v5;

  result = "MARKER_PHONEME";
  if (a1 != 33)
  {
    for (i = 0; ; i += 56)
    {
      v4 = i + 56;
      if ((_DWORD)i == 3136)
        break;
      v5 = *(_DWORD *)&markerTable[i + 104];
      if (v5 == a1)
        return &markerTable[v4];
    }
    return "MARKER_UNDEF";
  }
  return result;
}

uint64_t marker_serialize_tostring(void (*a1)(uint64_t, char *), uint64_t a2, uint64_t a3, int a4)
{
  _OWORD *v5;
  int v8;
  char *v9;
  const char *v10;
  unsigned int v11;
  const char *v12;
  _OWORD v14[4];
  int v15;
  char *v16;
  char v17[11];
  uint64_t v18;

  v5 = (_OWORD *)a3;
  v18 = *MEMORY[0x24BDAC8D0];
  v16 = "UNKNOWN";
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  if (a4)
  {
    v8 = *(_DWORD *)(a3 + 20);
  }
  else
  {
    cstdlib_memset(v14, 0, 0x40uLL);
    *(_OWORD *)((char *)&v14[1] + 4) = *v5;
    DWORD1(v14[2]) = *((_DWORD *)v5 + 4);
    *((_QWORD *)&v14[2] + 1) = *((_QWORD *)v5 + 3);
    v8 = DWORD1(v14[1]);
    v5 = v14;
  }
  marker_tag2string(v8, (const char **)&v16, &v15);
  LH_utoa(*((_DWORD *)v5 + 6), v17, 0xAu);
  a1(a2, v17);
  a1(a2, " ");
  LH_utoa(*((_DWORD *)v5 + 7), v17, 0xAu);
  a1(a2, v17);
  if (a4)
  {
    a1(a2, " ");
    v9 = *(_DWORD *)v5 ? "INT" : "EXT";
    a1(a2, v9);
    a1(a2, " ");
    LH_utoa(*((_DWORD *)v5 + 14), v17, 0xAu);
    a1(a2, v17);
    if (*((_DWORD *)v5 + 14))
    {
      v10 = (const char *)*((_QWORD *)v5 + 6);
      a1(a2, " [");
      if (v10)
      {
        v11 = cstdlib_strlen(v10);
        LH_utoa(v11, v17, 0xAu);
        a1(a2, v17);
        a1(a2, " ");
        a1(a2, (char *)v10);
      }
      a1(a2, "]");
    }
  }
  a1(a2, " ");
  a1(a2, v16);
  if ((v15 - 3) <= 1)
  {
    v12 = (const char *)*((_QWORD *)v5 + 5);
    a1(a2, " (");
    if (!v12)
      v12 = "";
    goto LABEL_18;
  }
  if ((v15 - 1) <= 1)
  {
    v12 = v17;
    LH_utoa(*((_DWORD *)v5 + 10), v17, 0xAu);
    a1(a2, " (");
LABEL_18:
    a1(a2, (char *)v12);
    a1(a2, ")");
  }
  a1(a2, " ");
  LH_utoa(*((_DWORD *)v5 + 8), v17, 0xAu);
  a1(a2, v17);
  a1(a2, " ");
  LH_utoa(*((_DWORD *)v5 + 9), v17, 0xAu);
  return ((uint64_t (*)(uint64_t, char *))a1)(a2, v17);
}

uint64_t marker_deserialize_fromstring(uint64_t a1, char *a2, char *__b, int a4)
{
  char *v5;
  char *v8;
  int v9;
  unsigned int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  const char *v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  _OWORD v26[2];
  char *__src;
  char *__s2;
  uint64_t v29;

  v5 = __b;
  __src = 0;
  if (a4)
  {
    cstdlib_memset(__b, 0, 0x40uLL);
    v8 = (char *)v26;
  }
  else
  {
    v8 = __b;
    v5 = 0;
  }
  __s2 = 0;
  v29 = 0;
  memset(v26, 0, sizeof(v26));
  cstdlib_memset(v8, 0, 0x20uLL);
  local_strtok_r(a2, " \t\r\n", (const char **)&__src, &__s2);
  *((_DWORD *)v8 + 1) = cstdlib_atoi((unsigned __int8 *)__s2);
  local_strtok_r(0, " \t\r\n", (const char **)&__src, &__s2);
  *((_DWORD *)v8 + 2) = cstdlib_atoi((unsigned __int8 *)__s2);
  if (a4)
  {
    local_strtok_r(0, " \t\r\n", (const char **)&__src, &__s2);
    *(_DWORD *)v5 = cstdlib_strcmp("INT", __s2) == 0;
    local_strtok_r(0, " \t\r\n", (const char **)&__src, &__s2);
    v9 = cstdlib_atol((unsigned __int8 *)__s2);
    *((_DWORD *)v5 + 14) = v9;
    if (v9)
    {
      local_strtok_r(0, " \t\r\n", (const char **)&__src, &__s2);
      v10 = cstdlib_atol((unsigned __int8 *)__s2 + 1);
      v11 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), v10 + 1, 1);
      *((_QWORD *)v5 + 6) = v11;
      if (!v11)
        return 10;
      v12 = __src;
      cstdlib_strncpy(v11, __src, v10);
      local_strtok_r(&v12[v10], " \t\r\n", (const char **)&__src, &__s2);
    }
  }
  local_strtok_r(0, " \t\r\n", (const char **)&__src, &__s2);
  v13 = marker_string2tag(__s2, (_DWORD *)&v29 + 1, &v29);
  if ((v13 & 0x80000000) != 0)
    return v13;
  *(_DWORD *)v8 = HIDWORD(v29);
  if ((v29 - 1) <= 1)
  {
    local_strtok_r(0, ")", (const char **)&__src, &__s2);
    v14 = __s2;
    if (__s2)
    {
      v15 = *__s2;
      if (*__s2)
      {
        do
        {
          if (!cstdlib_strchr("(", v15))
            break;
          v16 = *++v14;
          v15 = v16;
        }
        while (v16);
        __s2 = v14;
      }
    }
    *((_DWORD *)v8 + 6) = cstdlib_atol((unsigned __int8 *)v14);
    goto LABEL_23;
  }
  if ((v29 - 3) <= 1)
  {
    v18 = cstdlib_strstr(__src, "(");
    if (!v18)
      return 20;
    v19 = v18;
    v20 = v18 + 1;
    v21 = cstdlib_strstr(v18 + 1, ")");
    if (!v21)
      return 20;
    do
    {
      v22 = v21;
      v21 = cstdlib_strstr(v21 + 1, ")");
    }
    while (v21);
    v23 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), ((_DWORD)v22 - (_DWORD)v19), 1);
    *((_QWORD *)v8 + 3) = v23;
    if (v23)
    {
      cstdlib_strncpy(v23, v20, v22 - v19 - 1);
      local_strtok_r(v22, " \t\r\n", (const char **)&__src, &__s2);
      goto LABEL_23;
    }
    return 10;
  }
LABEL_23:
  local_strtok_r(0, " \t\r\n", (const char **)&__src, &__s2);
  *((_DWORD *)v8 + 3) = cstdlib_atoi((unsigned __int8 *)__s2);
  v17 = local_strtok_r(0, " \t\r\n", (const char **)&__src, &__s2);
  v24 = cstdlib_atoi((unsigned __int8 *)__s2);
  *((_DWORD *)v8 + 4) = v24;
  if (a4)
  {
    *(_OWORD *)(v5 + 20) = *(_OWORD *)v8;
    *((_DWORD *)v5 + 9) = v24;
    *((_QWORD *)v5 + 5) = *((_QWORD *)v8 + 3);
  }
  return v17;
}

uint64_t local_strtok_r(char *__s, char *__charset, const char **a3, char **a4)
{
  const char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v7 = __s;
  *a4 = 0;
  if (!__s)
    v7 = *a3;
  v8 = (char *)&v7[cstdlib_strspn(v7, __charset)];
  if (!*v8)
    return 20;
  *a4 = v8;
  v9 = cstdlib_strpbrk(v8, __charset);
  if (v9)
  {
    *v9 = 0;
    v10 = v9 + 1;
  }
  else
  {
    v10 = cstdlib_strchr(*a4, 0);
  }
  v11 = 0;
  *a3 = v10;
  return v11;
}

char *appendString(uint64_t a1, char *__s, unsigned int *a3, const char *a4)
{
  char *v4;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  unsigned int v13;
  int v14;
  char *v15;
  char *v16;

  v4 = __s;
  if (__s)
  {
    v8 = cstdlib_strlen(__s);
    v9 = cstdlib_strlen(a4);
    v10 = *a3;
    if (v9 + v8 >= v10)
    {
      v11 = (v10 + 128);
      *a3 = v11;
      v12 = cstdlib_strlen(v4);
      if (cstdlib_strlen(a4) + v12 >= v11)
      {
        v14 = cstdlib_strlen(v4);
        v13 = v14 + 2 * cstdlib_strlen(a4);
        *a3 = v13;
      }
      else
      {
        v13 = *a3;
      }
      v15 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), v13, 1);
      if (v15)
      {
        v16 = v15;
        cstdlib_strcat(v15, v4);
        cstdlib_strcat(v16, a4);
        heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v4);
        return v16;
      }
    }
    else
    {
      cstdlib_strcat(v4, a4);
    }
  }
  return v4;
}

uint64_t marker_copy(_OWORD *a1, uint64_t a2, _OWORD *a3)
{
  __int128 v3;

  if (!a1 || !a3)
    return 0;
  v3 = a1[1];
  *a3 = *a1;
  a3[1] = v3;
  return marker_copyParts((uint64_t)a1, a2, (uint64_t)a3);
}

uint64_t marker_copyParts(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  const char *v7;
  int v8;
  uint64_t v9;

  result = 1;
  if (a1 && a3)
  {
    if (!marker_hasNonConstCharPtrArg(*(_DWORD *)a1))
      return 1;
    v7 = *(const char **)(a1 + 24);
    if (v7)
      v8 = cstdlib_strlen(v7);
    else
      v8 = 0;
    result = heap_Alloc(a2, (v8 + 1));
    if (result)
    {
      v9 = result;
      if (v8)
        cstdlib_strcpy((char *)result, *(const char **)(a1 + 24));
      else
        *(_BYTE *)result = 0;
      *(_QWORD *)(a3 + 24) = v9;
      return 1;
    }
  }
  return result;
}

int *marker_freeParts(int *result, _QWORD *a2)
{
  int *v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    result = (int *)marker_hasNonConstCharPtrArg(*result);
    if ((_DWORD)result)
    {
      v4 = *((_QWORD *)v3 + 3);
      if (v4)
      {
        result = (int *)heap_Free(a2, v4);
        *((_QWORD *)v3 + 3) = 0;
      }
    }
  }
  return result;
}

uint64_t marker_sort(uint64_t a1, unint64_t a2)
{
  return ssft_qsort(a1, a2, 32, (uint64_t (*)(unint64_t, unint64_t))compare_3);
}

uint64_t compare_3(int *a1, int *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  if (a1 == a2)
    return 0;
  v2 = a1[3];
  v3 = a2[3];
  if (v2 < v3)
    return 0xFFFFFFFFLL;
  if (v2 > v3)
    return 1;
  v6 = *a2;
  if (*a1 == 0x4000)
  {
    if (v6 != 0x4000)
      return 0xFFFFFFFFLL;
    v7 = a1[4];
    v8 = a2[4];
    if (v7 | v8)
      return (v8 - v7);
    v6 = 0x4000;
  }
  else if (v6 == 0x4000)
  {
    return 1;
  }
  v9 = 0;
  v10 = 255;
  v11 = 255;
  do
  {
    v12 = prescribedOrder1[v9];
    if (v12 == *a1)
      v11 = LOWORD(prescribedOrder1[v9 + 1]);
    if (v12 == v6)
      v10 = LOWORD(prescribedOrder1[v9 + 1]);
    v9 += 2;
  }
  while (v9 != 10);
  if (v10 != 255 && v11 != 255)
  {
    v4 = (v11 - v10);
    if (v11 != v10)
      return v4;
  }
  v13 = a1[1];
  v14 = a2[1];
  if (v13 < v14)
    return 0xFFFFFFFFLL;
  if (v13 > v14)
    return 1;
  v15 = a1[2];
  v16 = a2[2];
  if (v15 <= v16)
    return v16 > v15;
  else
    return 0xFFFFFFFFLL;
}

uint64_t marker_logOutText(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  int v15;
  const char *v16;

  v16 = 0;
  v15 = 0;
  if ((marker_tag2string(*(_DWORD *)a5, &v16, &v15) & 0x80000000) != 0 || !v16)
  {
    v13 = "%s MARKER_%d : posCur %d, lenCur %d";
  }
  else if ((v15 - 3) <= 1 && *(_QWORD *)(a5 + 24))
  {
    v13 = "%s MARKER_%s [%s] : posCur %u, lenCur %u";
  }
  else if (v15 == 1)
  {
    v13 = "%s MARKER_%s [%u] : posCur %u, lenCur %u";
  }
  else if (v15 == 2)
  {
    v13 = "%s MARKER_%s [%c] : posCur %u, lenCur %u";
  }
  else
  {
    v13 = "%s MARKER_%s [] : posCur %u, lenCur %u";
  }
  return log_OutText(a1, a2, a3, 0, (uint64_t)v13, v10, v11, v12, a4);
}

char *marker_createTSOInfoString(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  char *v9;
  unsigned int v10;
  char *appended;
  uint64_t v12;
  uint64_t v13;
  char **v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  int v22;
  char *__src;
  unsigned int v24;
  char __dst[128];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v24 = 256;
  v8 = heap_Calloc(*(_QWORD **)(a1 + 8), 256, 1);
  if (!v8)
    return 0;
  v9 = (char *)v8;
  v10 = a4 >> 5;
  __sprintf_chk(__dst, 0, 0x80uLL, "%s, %lu markers:\n", a2, a4 >> 5);
  appended = appendString(a1, v9, &v24, __dst);
  if (a4 >= 0x20)
  {
    v12 = 0;
    if (v10 <= 1)
      v13 = 1;
    else
      v13 = v10;
    v14 = (char **)(a3 + 24);
    do
    {
      __src = "UNKNOWN";
      v22 = 0;
      if (v12)
      {
        v15 = *((unsigned int *)v14 - 3);
        if (*(_DWORD *)(a3 + 32 * (v12 - 1) + 12) > v15)
        {
          __sprintf_chk(__dst, 0, 0x80uLL, "ERROR: TSODataDump - Markers are out of order: posCur %lu -> %lu [OUT OF ORDER!]\n", *(unsigned int *)(a3 + 32 * (v12 - 1) + 12), v15);
          appended = appendString(a1, appended, &v24, __dst);
        }
      }
      __sprintf_chk(__dst, 0, 0x80uLL, "{%lu %lu:", *((unsigned int *)v14 - 5), *((unsigned int *)v14 - 4));
      v16 = appendString(a1, appended, &v24, __dst);
      marker_tag2string(*((_DWORD *)v14 - 6), (const char **)&__src, &v22);
      if ((v22 - 3) > 1)
      {
        if (v22 == 1)
        {
          __sprintf_chk(__dst, 0, 0x80uLL, "%s=%lu");
        }
        else if (v22 == 2)
        {
          __sprintf_chk(__dst, 0, 0x80uLL, "%s=%c %lu");
        }
        else
        {
          cstdlib_strcpy(__dst, __src);
        }
        v18 = __dst;
        v19 = a1;
        v17 = v16;
      }
      else
      {
        __sprintf_chk(__dst, 0, 0x80uLL, "%s=", __src);
        v17 = appendString(a1, v16, &v24, __dst);
        v18 = *v14;
        v19 = a1;
        if (!*v14)
          v18 = "<NULL>";
      }
      v20 = appendString(v19, v17, &v24, v18);
      __sprintf_chk(__dst, 0, 0x80uLL, " dst %lu %lu}\n", *((unsigned int *)v14 - 3), *((unsigned int *)v14 - 2));
      appended = appendString(a1, v20, &v24, __dst);
      ++v12;
      v14 += 4;
    }
    while (v13 != v12);
  }
  return appended;
}

uint64_t ppint_marker_copyParts(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  const char *v7;
  int v8;
  uint64_t v9;
  const char *v10;
  int v11;
  uint64_t v12;

  result = 1;
  if (!a1 || !a3)
    return result;
  if (marker_hasNonConstCharPtrArg(*(_DWORD *)(a1 + 20)))
  {
    v7 = *(const char **)(a1 + 40);
    if (v7)
      v8 = cstdlib_strlen(v7);
    else
      v8 = 0;
    result = heap_Alloc(a2, (v8 + 1));
    if (!result)
      return result;
    v9 = result;
    if (v8)
      cstdlib_strcpy((char *)result, *(const char **)(a1 + 40));
    else
      *(_BYTE *)result = 0;
    *(_QWORD *)(a3 + 40) = v9;
  }
  v10 = *(const char **)(a1 + 48);
  if (v10)
  {
    v11 = cstdlib_strlen(v10);
    result = heap_Alloc(a2, (v11 + 1));
    if (!result)
      return result;
    v12 = result;
    if (v11)
      cstdlib_strcpy((char *)result, *(const char **)(a1 + 48));
    else
      *(_BYTE *)result = 0;
    *(_QWORD *)(a3 + 48) = v12;
  }
  return 1;
}

unint64_t ppint_marker_freeParts(unint64_t result, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v3 = result;
    result = marker_hasNonConstCharPtrArg(*(_DWORD *)(result + 20));
    if ((_DWORD)result)
    {
      v4 = *(_QWORD *)(v3 + 40);
      if (v4)
      {
        result = (unint64_t)heap_Free(a2, v4);
        *(_QWORD *)(v3 + 40) = 0;
      }
    }
    v5 = *(_QWORD *)(v3 + 48);
    if (v5)
    {
      result = (unint64_t)heap_Free(a2, v5);
      *(_QWORD *)(v3 + 48) = 0;
    }
  }
  return result;
}

char *ppint_marker_createTSOInfoString(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  char *v9;
  unsigned int v10;
  char *appended;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v23;
  char *__src;
  unsigned int v25;
  char __dst[128];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v25 = 256;
  v8 = heap_Calloc(*(_QWORD **)(a1 + 8), 256, 1);
  if (!v8)
    return 0;
  v9 = (char *)v8;
  v10 = a4 >> 6;
  __sprintf_chk(__dst, 0, 0x80uLL, "%s, %lu markers:\n", a2, a4 >> 6);
  appended = appendString(a1, v9, &v25, __dst);
  if (a4 >= 0x40)
  {
    v12 = 0;
    if (v10 <= 1)
      v13 = 1;
    else
      v13 = v10;
    v14 = (unsigned int *)(a3 + 28);
    do
    {
      __src = "UNKNOWN";
      v23 = 0;
      if (v12)
      {
        v15 = v14[1];
        if (*(_DWORD *)(a3 + ((unint64_t)(v12 - 1) << 6) + 32) > v15)
        {
          __sprintf_chk(__dst, 0, 0x80uLL, "ERROR: TSODataDump - Markers are out of order: posCur %lu -> %lu  [OUT OF ORDER!]\n", *(unsigned int *)(a3 + ((unint64_t)(v12 - 1) << 6) + 32), v15);
          appended = appendString(a1, appended, &v25, __dst);
        }
      }
      __sprintf_chk(__dst, 0, 0x80uLL, "{%lu %lu:", *(v14 - 1), *v14);
      v16 = appendString(a1, appended, &v25, __dst);
      marker_tag2string(*(v14 - 2), (const char **)&__src, &v23);
      if ((v23 - 3) > 1)
      {
        if (v23 == 1)
        {
          __sprintf_chk(__dst, 0, 0x80uLL, "%s=%lu");
        }
        else if (v23 == 2)
        {
          __sprintf_chk(__dst, 0, 0x80uLL, "%s=%c %lu");
        }
        else
        {
          cstdlib_strcpy(__dst, __src);
        }
        v18 = __dst;
        v19 = a1;
        v17 = v16;
      }
      else
      {
        __sprintf_chk(__dst, 0, 0x80uLL, "%s=", __src);
        v17 = appendString(a1, v16, &v25, __dst);
        v18 = *(char **)(v14 + 3);
        v19 = a1;
      }
      v20 = appendString(v19, v17, &v25, v18);
      if (v14[7] && *(_QWORD *)(v14 + 5))
      {
        cstdlib_strcpy(__dst, " EXT=");
        v21 = appendString(a1, v20, &v25, __dst);
        v20 = appendString(a1, v21, &v25, *(const char **)(v14 + 5));
      }
      __sprintf_chk(__dst, 0, 0x80uLL, " dst %lu %lu}\n", v14[1], v14[2]);
      appended = appendString(a1, v20, &v25, __dst);
      ++v12;
      v14 += 16;
    }
    while (v13 != v12);
  }
  return appended;
}

uint64_t ttteg_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2288001025;
  result = 0;
  *a2 = &ITtteg;
  return result;
}

uint64_t ttteg_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Object;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  unsigned __int16 v17;
  int UInt;
  __int16 v19;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;
  char *__s1;
  uint64_t v25;

  v5 = 2288001031;
  if (a5)
  {
    *a5 = safeh_GetNullHandle();
    a5[1] = v9;
    __s1 = 0;
    v25 = 0;
    v22 = 0;
    v23 = 0;
    if ((InitRsrcFunction(a3, a4, &v25) & 0x80000000) == 0)
    {
      v10 = (_QWORD *)heap_Calloc(*(_QWORD **)(v25 + 8), 1, 136);
      if (v10)
      {
        v11 = (uint64_t)v10;
        *v10 = a3;
        v10[1] = a4;
        v10[15] = safeh_GetNullHandle();
        *(_QWORD *)(v11 + 128) = v12;
        Object = objc_GetObject(*(_QWORD *)(v25 + 48), (uint64_t)"SYNTHSTREAM", &v23);
        if ((Object & 0x80000000) != 0)
          goto LABEL_36;
        *(_QWORD *)(v11 + 40) = *(_QWORD *)(v23 + 8);
        Object = sub_ObjOpen(a3, a4, (_QWORD *)(v11 + 16));
        if ((Object & 0x80000000) != 0)
          goto LABEL_36;
        v14 = *(_QWORD **)(v25 + 8);
        *(_OWORD *)v21 = xmmword_214F42D58;
        *(_QWORD *)&v21[16] = 0;
        if (!vector_ObjOpen(v14, (__int128 *)v21, 1, (uint64_t *)(v11 + 24)))
        {
          v11 = 0;
LABEL_35:
          v5 = 0;
          *a5 = v11;
          *((_DWORD *)a5 + 2) = 269;
          return v5;
        }
        if ((paramc_ParamGetStr(*(_QWORD *)(v25 + 40), (uint64_t)"rulesetsfrommarkup", &__s1) & 0x80000000) != 0)
        {
          *(_DWORD *)(v11 + 32) = 0;
          Object = paramc_ParamSetStr(*(_QWORD *)(v25 + 40), (uint64_t)"rulesetsfrommarkup", "0");
          if ((Object & 0x80000000) != 0)
            goto LABEL_36;
        }
        else
        {
          if (__s1)
          {
            v15 = *__s1;
            if (*__s1)
            {
              if (LH_stricmp(__s1, "true"))
                v15 = cstdlib_strcmp(__s1, "1") == 0;
              else
                v15 = 1;
            }
          }
          else
          {
            v15 = 0;
          }
          *(_DWORD *)(v11 + 32) = v15;
        }
        v16 = *(_QWORD *)(v25 + 40);
        *(_QWORD *)v21 = v11;
        *(_OWORD *)&v21[8] = xmmword_24D292010;
        Object = paramc_ListenerAdd(v16, "rulesetsfrommarkup", v21);
        if ((Object & 0x80000000) != 0)
        {
LABEL_36:
          v5 = Object;
          ttteg_pObjClose(v11);
          return v5;
        }
        *(_DWORD *)(v11 + 112) = 0;
        if ((paramc_ParamGetStr(*(_QWORD *)(v25 + 40), (uint64_t)"clcpppipelinemode", &v22) & 0x80000000) == 0
          && v22
          && *v22)
        {
          *(_DWORD *)(v11 + 112) = 1;
        }
        else if (!*(_DWORD *)(v11 + 112))
        {
          *(_DWORD *)v21 = 0;
          Object = nuance_pcre_ObjOpen(a3, a4, v11 + 120);
          if ((Object & 0x80000000) != 0)
            goto LABEL_36;
          if ((int)paramc_ParamGetUInt(*(_QWORD *)(v25 + 40), (uint64_t)"retttmaxpcreframeblocks", (unsigned int *)v21) < 0)
            v17 = 10;
          else
            v17 = *(_WORD *)v21;
          UInt = paramc_ParamGetUInt(*(_QWORD *)(v25 + 40), (uint64_t)"retttnumframesinblock", (unsigned int *)v21);
          v19 = *(_WORD *)v21;
          if (UInt < 0)
            v19 = 10;
          nuance_pcre_Init(*(_QWORD **)(v11 + 120), *(_QWORD *)(v11 + 128), v17, v19);
          goto LABEL_34;
        }
        Object = esc_seq_init(a3, a4, (uint64_t *)(v11 + 120));
        if ((Object & 0x80000000) != 0)
          goto LABEL_36;
LABEL_34:
        Object = paramc_ParamSetInt(*(_QWORD *)(v25 + 40), (uint64_t)"enablerett", 1u);
        if ((Object & 0x80000000) == 0)
          goto LABEL_35;
        goto LABEL_36;
      }
      return 2288001034;
    }
  }
  return v5;
}

uint64_t ttteg_ObjClose(_QWORD *a1, int a2)
{
  uint64_t result;
  int Size;
  unsigned int v6;
  _WORD **v7;
  uint64_t v8;

  result = safeh_HandleCheck((uint64_t)a1, a2, 269, 136);
  if ((result & 0x80000000) == 0)
  {
    v7 = 0;
    v8 = 0;
    if (a1)
    {
      if ((InitRsrcFunction((_WORD *)*a1, a1[1], &v8) & 0x80000000) == 0)
      {
        Size = vector_GetSize(a1[3]);
        if (Size)
        {
          v6 = Size - 1;
          do
          {
            if (!vector_GetElemAt(a1[3], v6, &v7))
              break;
            ruleset_UnloadRules((uint64_t)v7);
            ruleset_ObjClose(v7);
            vector_Remove(a1[3], v6--);
          }
          while (v6 != -1);
        }
      }
    }
    ttteg_ProcessEnd(a1, a2);
    return ttteg_pObjClose((uint64_t)a1);
  }
  return result;
}

uint64_t ttteg_ResourceTypes(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 269, 136);
  if ((result & 0x80000000) == 0)
  {
    result = 0;
    *a3 = ttteg_ResourceTypes_SZ_RETTT_CONTENT_TYPES;
  }
  return result;
}

uint64_t ttteg_ResourceLoad(_WORD **a1, int a2, char *a3, const char *a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  uint64_t v7;
  BOOL v14;
  uint64_t Str;
  int v16;
  const char *AbsName;
  const char *Name;
  char v19;
  uint64_t Rules;
  int v21;
  uint64_t v22;
  int v24[2];
  _OWORD v25[5];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int v35[2];
  uint64_t v36[129];

  v36[128] = *MEMORY[0x24BDAC8D0];
  v34 = 0;
  *(_QWORD *)v35 = 0;
  v7 = 2288001031;
  v33 = 0;
  v32 = 0;
  if (!a3 || !a7)
    return v7;
  if (a4)
  {
    v14 = a6 != 0;
    if (!a5 && a6)
      return v7;
  }
  else
  {
    if (!a5 || !a6)
      return v7;
    v14 = 1;
  }
  Str = safeh_HandleCheck((uint64_t)a1, a2, 269, 136);
  if ((Str & 0x80000000) != 0)
    return Str;
  v31 = 0;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v26 = 0u;
  memset(v25, 0, sizeof(v25));
  *(_QWORD *)a7 = 0;
  *(_DWORD *)(a7 + 8) = 0;
  if ((InitRsrcFunction(*a1, (int)a1[1], v35) & 0x80000000) != 0)
    return v7;
  if (a4)
  {
    if (*a4)
    {
      v36[0] = 0;
      if (vector_GetElemAt((uint64_t)a1[3], 0, v36))
      {
        v16 = 0;
        while (!*(_DWORD *)(v36[0] + 44))
        {
          if (*(_QWORD *)(v36[0] + 24))
          {
            Name = (const char *)ruleset_GetName(v36[0]);
            if (!cstdlib_strcmp(Name, a4))
              return 2288001048;
            if (*(_QWORD *)(v36[0] + 32))
            {
              AbsName = (const char *)ruleset_GetAbsName(v36[0]);
LABEL_18:
              if (!cstdlib_strcmp(AbsName, a4))
                return 2288001048;
            }
          }
          if (!vector_GetElemAt((uint64_t)a1[3], (unsigned __int16)++v16, v36))
            goto LABEL_25;
        }
        AbsName = (const char *)ruleset_GetName(v36[0]);
        goto LABEL_18;
      }
    }
  }
LABEL_25:
  v19 = !v14;
  if (!a5)
    v19 = 1;
  if ((v19 & 1) == 0)
  {
    v33 = a5;
    v32 = a6;
LABEL_36:
    v22 = ruleset_ObjOpen(*a1, (uint64_t)a1[1], (uint64_t)a1[15], (uint64_t)a1[16], (uint64_t)a1[2], v25);
    if ((v22 & 0x80000000) == 0)
    {
      Rules = ruleset_LoadRules((uint64_t *)v25, a4, 0, a3, v33, v32);
      if ((Rules & 0x80000000) == 0)
      {
        if (vector_Add((uint64_t)a1[3], v25) == 1)
        {
          *(_QWORD *)a7 = v26;
          *(_DWORD *)(a7 + 8) = 300;
          goto LABEL_45;
        }
        Rules = 2288001034;
      }
      ruleset_ObjClose((_WORD **)v25);
      goto LABEL_45;
    }
LABEL_41:
    Rules = v22;
    goto LABEL_45;
  }
  *(_QWORD *)v24 = 0;
  bzero(v36, 0x400uLL);
  Rules = brk_DataOpenEx(*(_QWORD *)(*(_QWORD *)v35 + 24), (uint64_t)a4, 1, (uint64_t)&v34);
  if (cstdlib_strstr(a3, ";loader=broker") && (Rules & 0x80000000) != 0)
  {
    Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)v35 + 40), (uint64_t)"langcode", v24);
    if ((Str & 0x80000000) == 0)
    {
      v21 = brokeraux_ComposeBrokerString(*(uint64_t *)v35, a4, 0, 1, *(char **)v24, 0, 0, (char *)v36, 0x400uLL);
      if (v21 < 0)
      {
        Rules = v21 | 0x88602000;
        goto LABEL_45;
      }
      Rules = brk_DataOpenEx(*(_QWORD *)(*(_QWORD *)v35 + 24), (uint64_t)v36, 0, (uint64_t)&v34);
      goto LABEL_34;
    }
    return Str;
  }
LABEL_34:
  if ((Rules & 0x80000000) == 0)
  {
    v22 = brk_DataMapEx(*(_QWORD *)(*(_QWORD *)v35 + 24), v34, 0, (uint64_t)&v32, (uint64_t)&v33);
    if ((v22 & 0x80000000) != 0)
      goto LABEL_41;
    goto LABEL_36;
  }
LABEL_45:
  if (v33)
  {
    brk_DataUnmap(*(_QWORD *)(*(_QWORD *)v35 + 24), v34, v33);
    v33 = 0;
  }
  if (v34)
    brk_DataClose(*(_QWORD *)(*(_QWORD *)v35 + 24), v34);
  return Rules;
}

uint64_t ttteg_ResourceUnload(uint64_t a1, int a2, _WORD *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _WORD **v11;

  v11 = 0;
  v7 = safeh_HandleCheck(a1, a2, 269, 136);
  if ((v7 & 0x80000000) != 0)
    return v7;
  v7 = safeh_HandleCheck((uint64_t)a3, a4, 300, 8);
  if ((v7 & 0x80000000) != 0)
    return v7;
  v8 = 2288002061;
  if (!vector_GetElemAt(*(_QWORD *)(a1 + 24), 0, &v11))
    return v8;
  v9 = 0;
  while (v11[10] != a3)
  {
    if (!vector_GetElemAt(*(_QWORD *)(a1 + 24), ++v9, &v11))
      return v8;
  }
  v7 = ruleset_UnloadRules((uint64_t)v11);
  if ((v7 & 0x80000000) != 0)
    return v7;
  v8 = ruleset_ObjClose(v11);
  if ((v8 & 0x80000000) == 0)
    vector_Remove(*(_QWORD *)(a1 + 24), v9);
  return v8;
}

uint64_t ttteg_ProcessStart(_WORD **a1, int a2, _WORD *a3, _WORD *a4)
{
  uint64_t Int;
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v14;
  uint64_t v15;

  v15 = 0;
  v14 = 0;
  Int = 2288001031;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 269, 136) & 0x80000000) != 0)
    return 2288001032;
  if ((InitRsrcFunction(*a1, (int)a1[1], &v15) & 0x80000000) == 0)
  {
    v9 = 0;
    a1[10] = a3;
    a1[11] = a4;
    do
    {
      v10 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, char *, _QWORD, _QWORD, _WORD **))a1[5] + 8))(a3, a4, 134, ttteg_ProcessStart_szInput[v9], 0, 0, a1 + 12);
      if ((v10 & 0x80000000) == 0)
        break;
    }
    while (v9++ != 6);
    if (v10 < 0)
      a1[12] = 0;
    Int = paramc_ParamGetInt(*(_QWORD *)(v15 + 40), (uint64_t)"enablerett", &v14);
    if ((Int & 0x80000000) != 0)
      goto LABEL_17;
    if (v14 == 1)
    {
      v12 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, const char *, _QWORD, _QWORD, _WORD **))a1[5] + 8))(a3, a4, 134, "text/plain;charset=utf-8",
              0,
              0,
              a1 + 6);
      if ((v12 & 0x80000000) != 0)
      {
        Int = v12;
LABEL_17:
        ttteg_ProcessEnd(a1, a2);
        return Int;
      }
      Int = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, const char *, _QWORD, uint64_t, _WORD **))a1[5] + 8))(a3, a4, 134, "text/plain;charset=utf-8",
              0,
              1,
              a1 + 8);
      if ((Int & 0x80000000) != 0)
        goto LABEL_17;
    }
    else
    {
      a1[6] = 0;
      a1[8] = 0;
    }
  }
  return Int;
}

uint64_t ttteg_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v7;
  uint64_t Int;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Str;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int Size;
  char *v23;
  unsigned int v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  char *v38;
  size_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v44;
  _WORD **v45;
  size_t __n;
  char *__s;
  void *v48;
  void *__src;
  const char *v50;
  uint64_t v51;

  v51 = 0;
  __src = 0;
  v50 = 0;
  __s = 0;
  v48 = 0;
  v45 = 0;
  __n = 0;
  v44 = 0;
  v7 = safeh_HandleCheck(a1, a2, 269, 136);
  if ((v7 & 0x80000000) != 0)
    return v7;
  if ((InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v51) & 0x80000000) == 0)
  {
    Int = paramc_ParamGetInt(*(_QWORD *)(v51 + 40), (uint64_t)"enablerett", &v44);
    if ((Int & 0x80000000) != 0)
      goto LABEL_45;
    if (!*(_QWORD *)(a1 + 48))
    {
      Str = 0;
LABEL_56:
      v15 = 1;
      goto LABEL_57;
    }
    Str = 0;
    v15 = 1;
    if (!*(_QWORD *)(a1 + 64) || !v44)
      goto LABEL_57;
    *a5 = 0;
    v7 = (*(uint64_t (**)(_QWORD, _QWORD, char *, size_t *))(*(_QWORD *)(a1 + 40) + 144))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), (char *)&__n + 4, &__n);
    if ((v7 & 0x80000000) == 0)
    {
      v15 = *(_DWORD *)(a1 + 112) | __n;
      if (!v15)
      {
        Str = 0;
LABEL_57:
        *a5 = v15;
        return Str;
      }
      v7 = (*(uint64_t (**)(_QWORD, _QWORD, void **, char *))(*(_QWORD *)(a1 + 40) + 88))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), &__src, (char *)&__n + 4);
      if ((v7 & 0x80000000) == 0)
      {
        if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v51 + 32)))
        {
          log_OutTraceTuningData(*(uint64_t ***)(v51 + 32), 4, (uint64_t)"%s%s", v16, v17, v18, v19, v20, "BEG");
          log_OutTraceTuningDataBinary(*(_QWORD *)(v51 + 32), 5, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
            (uint64_t)__src,
            HIDWORD(__n));
        }
        v21 = (char *)heap_Alloc(*(_QWORD *)(v51 + 8), (HIDWORD(__n) + 1));
        __s = v21;
        if (!v21)
          return 2288001034;
        if (__src)
        {
          cstdlib_memcpy(v21, __src, HIDWORD(__n));
          v21 = __s;
        }
        v21[HIDWORD(__n)] = 0;
        Int = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), HIDWORD(__n));
        if ((Int & 0x80000000) == 0)
        {
          __src = 0;
          Str = paramc_ParamGetStr(*(_QWORD *)(v51 + 40), (uint64_t)"langcode", &v50);
          if ((Str & 0x80000000) == 0)
          {
            log_OutTraceTuningData(*(uint64_t ***)(v51 + 32), 7, (uint64_t)"%s%s %s%s %s%s", v9, v10, v11, v12, v13, "BEG");
            Size = vector_GetSize(*(_QWORD *)(a1 + 24));
            v23 = 0;
            if (Size)
            {
              v24 = Size - 1;
              while (1)
              {
                v45 = 0;
                if (vector_GetElemAt(*(_QWORD *)(a1 + 24), v24, &v45))
                {
                  if (*((_DWORD *)v45 + 11))
                  {
                    if (ruleset_GetEnabledForLng((uint64_t)v45, v50) == 1)
                    {
                      v25 = __s;
                      __s = v23;
                      Str = ruleset_Rewrite(v45, v25, (const char **)&__s);
                      v23 = v25;
                      if ((Str & 0x80000000) != 0)
                        break;
                    }
                  }
                }
                if (--v24 == -1)
                  goto LABEL_27;
              }
            }
            else
            {
LABEL_27:
              if (*(_QWORD *)(a1 + 96))
              {
                v9 = cstdlib_strlen(__s);
                if ((_DWORD)v9)
                  (*(void (**)(_QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 40) + 176))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), __s);
              }
              log_OutTraceTuningData(*(uint64_t ***)(v51 + 32), 7, (uint64_t)"%s%s %s%u %s%s", v9, v10, v11, v12, v13, "END");
              log_OutTraceTuningData(*(uint64_t ***)(v51 + 32), 7, (uint64_t)"%s%s %s%s %s%s", v26, v27, v28, v29, v30, "BEG");
              v45 = 0;
              v31 = vector_GetSize(*(_QWORD *)(a1 + 24));
              if (v31)
              {
                v37 = v31 - 1;
                do
                {
                  v45 = 0;
                  if (vector_GetElemAt(*(_QWORD *)(a1 + 24), v37, &v45))
                  {
                    if (!*((_DWORD *)v45 + 11) && ruleset_GetEnabledForLng((uint64_t)v45, v50) == 1)
                    {
                      v38 = __s;
                      __s = v23;
                      Str = ruleset_Rewrite(v45, v38, (const char **)&__s);
                      v23 = v38;
                      if ((Str & 0x80000000) != 0)
                        break;
                    }
                  }
                  --v37;
                }
                while (v37 != -1);
              }
              log_OutTraceTuningData(*(uint64_t ***)(v51 + 32), 7, (uint64_t)"%s%s %s%u %s%s", v32, v33, v34, v35, v36, "END");
              if ((Str & 0x80000000) == 0)
              {
                if (__s)
                {
                  v39 = cstdlib_strlen(__s);
                  if ((_DWORD)v39)
                  {
                    v40 = (*(uint64_t (**)(_QWORD, _QWORD, void **, size_t))(*(_QWORD *)(a1 + 40) + 112))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), &v48, v39);
                    if ((v40 & 0x80000000) == 0)
                    {
                      cstdlib_memcpy(v48, __s, v39);
                      log_OutTraceTuningDataBinary(*(_QWORD *)(v51 + 32), 6, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
                        (uint64_t)v48,
                        v39);
                      v40 = (*(uint64_t (**)(_QWORD, _QWORD, size_t))(*(_QWORD *)(a1 + 40) + 120))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), v39);
                    }
                    Str = v40;
                  }
                }
              }
              v25 = v23;
            }
            goto LABEL_47;
          }
LABEL_46:
          v25 = 0;
LABEL_47:
          log_OutTraceTuningData(*(uint64_t ***)(v51 + 32), 4, (uint64_t)"%s%s %s%u", v9, v10, v11, v12, v13, "END");
          if (v25)
            heap_Free(*(_QWORD **)(v51 + 8), (uint64_t)v25);
          if (__s)
            heap_Free(*(_QWORD **)(v51 + 8), (uint64_t)__s);
          if (!*(_DWORD *)(a1 + 112))
          {
            v41 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
            if (v41 >= 0)
              Str = Str;
            else
              Str = v41;
            *(_QWORD *)(a1 + 64) = safeh_GetNullHandle();
            *(_QWORD *)(a1 + 72) = v42;
          }
          goto LABEL_56;
        }
LABEL_45:
        Str = Int;
        goto LABEL_46;
      }
    }
    return v7;
  }
  return 2288001031;
}

uint64_t ttteg_ProcessEnd(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t NullHandle;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;

  v3 = safeh_HandleCheck((uint64_t)a1, a2, 269, 136);
  if ((v3 & 0x80000000) == 0)
  {
    NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[12], a1[13], NullHandle, v5))
    {
      v6 = (*(uint64_t (**)(_QWORD, _QWORD))(a1[5] + 72))(a1[12], a1[13]);
      if (v6 >= 0)
        v3 = v3;
      else
        v3 = v6;
    }
    a1[12] = safeh_GetNullHandle();
    a1[13] = v7;
    v8 = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[6], a1[7], v8, v9))
    {
      v10 = (*(uint64_t (**)(_QWORD, _QWORD))(a1[5] + 72))(a1[6], a1[7]);
      if (v10 >= 0)
        v3 = v3;
      else
        v3 = v10;
    }
    a1[6] = safeh_GetNullHandle();
    a1[7] = v11;
    v12 = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[8], a1[9], v12, v13))
    {
      v14 = (*(uint64_t (**)(_QWORD, _QWORD))(a1[5] + 72))(a1[8], a1[9]);
      if (v14 >= 0)
        v3 = v3;
      else
        v3 = v14;
    }
    a1[8] = safeh_GetNullHandle();
    a1[9] = v15;
  }
  return v3;
}

uint64_t ttteg_ParamLearnChange(uint64_t a1, char *__s1, char *a3)
{
  int v5;

  if (!cstdlib_strcmp(__s1, "rulesetsfrommarkup"))
  {
    if (a3)
    {
      v5 = *a3;
      if (*a3)
      {
        if (LH_stricmp(a3, "true"))
          v5 = cstdlib_strcmp(a3, "1") == 0;
        else
          v5 = 1;
      }
    }
    else
    {
      v5 = 0;
    }
    *(_DWORD *)(a1 + 32) = v5;
  }
  return 0;
}

uint64_t ttteg_pObjClose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v1 = 2288001031;
  v9 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v9) & 0x80000000) == 0)
  {
    v3 = *(_QWORD *)(v9 + 40);
    v7 = a1;
    v8 = xmmword_24D292010;
    paramc_ListenerRemove(v3, "rulesetsfrommarkup", (__int128 *)&v7);
    if (*(_QWORD *)(a1 + 40))
      objc_ReleaseObject(*(_QWORD *)(v9 + 48), (uint64_t)"SYNTHSTREAM");
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
      sub_ObjClose(v4);
    if (*(_DWORD *)(a1 + 112))
    {
      esc_seq_deinit(*(_WORD **)a1, *(_QWORD *)(a1 + 8), *(_QWORD **)(a1 + 120), *(_QWORD *)(a1 + 128));
    }
    else
    {
      nuance_pcre_DeInit(*(_QWORD **)(a1 + 120), *(_QWORD *)(a1 + 128));
      nuance_pcre_ObjClose(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128));
    }
    v5 = *(_QWORD *)(a1 + 24);
    if (v5)
      vector_ObjClose(v5);
    heap_Free(*(_QWORD **)(v9 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t ruleset_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t NullHandle;
  int v19;
  uint64_t v20;
  _QWORD *i;
  uint64_t v22;
  __int128 v24;
  _QWORD *(*v25)(_QWORD *, _QWORD *);
  unsigned int v26;
  _QWORD *v27;

  v27 = 0;
  v26 = 0;
  v6 = 2288001031;
  if (a5 && a6 && (InitRsrcFunction(a1, a2, &v27) & 0x80000000) == 0)
  {
    cstdlib_memset(a6, 0, 0xA8uLL);
    *a6 = a1;
    a6[1] = a2;
    a6[2] = a5;
    *((_DWORD *)a6 + 10) = 1;
    v13 = (_QWORD *)v27[1];
    v24 = xmmword_24D292078;
    v25 = rule_FreeParts;
    if (vector_ObjOpen(v13, &v24, 8, a6 + 10))
    {
      LODWORD(v24) = PCRE_Adapter_Create(1, (uint64_t)(a6 + 13), a1, a2);
      if ((v24 & 0x80000000) == 0)
      {
        NullHandle = safeh_GetNullHandle();
        if (safeh_HandlesEqual(a3, a4, NullHandle, v19))
        {
          *(_OWORD *)(a6 + 11) = *(_OWORD *)(a6 + 13);
        }
        else
        {
          a6[11] = a3;
          a6[12] = a4;
        }
        paramc_ParamGetUInt(v27[5], (uint64_t)"retttmaxpcreframeblocks", &v26);
        paramc_ParamGetUInt(v27[5], (uint64_t)"retttnumframesinblock", &v26);
        LODWORD(v24) = PCRE_ObjOpen(a6[13], a6[14], 0);
        if ((v24 & 0x80000000) == 0)
        {
          v20 = 0;
          for (i = a6 + 16; ; i += 2)
          {
            *(i - 1) = PCRE_CompilePattern(a6[13], a6[14], (uint64_t)&HARDCODED_RULESET_PATTERN[v20], 0, 0, 0, (int *)&v24);
            *i = v22;
            v6 = v24;
            if ((v24 & 0x80000000) != 0)
              break;
            v20 += 128;
            if (v20 == 384)
              return v6;
          }
        }
      }
      vector_ObjClose(a6[10]);
      a6[10] = 0;
      PCRE_ObjClose(a6[13], a6[14]);
      return v24;
    }
    else
    {
      log_OutPublic(v27[4], (uint64_t)"RETTT", 11002, 0, v14, v15, v16, v17, v24);
      return 2288001034;
    }
  }
  return v6;
}

uint64_t *rule_CopyParts(uint64_t *result, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v7;
  char *v8;
  int v9;

  v9 = 0;
  if (result)
  {
    v3 = result;
    v4 = *result;
    if (!*result)
      return 0;
    result = 0;
    if (a3 && v3[2])
    {
      if ((PCRE_CopyPattern(v4, v3[1], (uint64_t)a3, &v9) & 0x80000000) == 0)
      {
        v7 = cstdlib_strlen((const char *)v3[2]);
        v8 = (char *)heap_Alloc(a2, (v7 + 1));
        a3[2] = (uint64_t)v8;
        if (v8)
        {
          cstdlib_strcpy(v8, (const char *)v3[2]);
          return (uint64_t *)1;
        }
        PCRE_FreePattern(*a3, a3[1]);
      }
      return 0;
    }
  }
  return result;
}

_QWORD *rule_FreeParts(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    result = (_QWORD *)*result;
    if (result)
    {
      result = (_QWORD *)PCRE_FreePattern((uint64_t)result, v3[1]);
      *v3 = 0;
    }
    v4 = v3[2];
    if (v4)
    {
      result = heap_Free(a2, v4);
      v3[2] = 0;
    }
  }
  return result;
}

uint64_t ruleset_ObjClose(_WORD **a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t i;
  uint64_t v6;

  v1 = 2288001031;
  v6 = 0;
  if (a1 && (InitRsrcFunction(*a1, (int)a1[1], &v6) & 0x80000000) == 0)
  {
    if (a1[3])
      ruleset_UnloadRules((uint64_t)a1);
    v3 = (uint64_t)a1[10];
    if (v3)
    {
      vector_ObjClose(v3);
      a1[10] = 0;
    }
    for (i = 0; i != 6; i += 2)
      PCRE_FreePattern((uint64_t)a1[i + 15], (int)a1[i + 16]);
    PCRE_ObjClose((uint64_t)a1[13], (int)a1[14]);
    cstdlib_memset(a1, 0, 0xA8uLL);
    return 0;
  }
  return v1;
}

uint64_t ruleset_UnloadRules(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int Size;
  unsigned int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;

  v1 = 2288001031;
  v28 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v28) & 0x80000000) == 0)
  {
    log_OutTraceTuningData(*(uint64_t ***)(v28 + 32), 3, (uint64_t)"%s%s %s%s", v3, v4, v5, v6, v7, "BEG");
    v29 = 0;
    if (!*(_QWORD *)(a1 + 24) || (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v29) & 0x80000000) != 0)
    {
LABEL_21:
      log_OutTraceTuningData(*(uint64_t ***)(v28 + 32), 3, (uint64_t)"%s%s %s%u", v8, v9, v10, v11, v12, "END");
      return 0;
    }
    Size = (unsigned __int16)vector_GetSize(*(_QWORD *)(a1 + 80));
    if (Size)
    {
      v19 = Size - 1;
      while (vector_Remove(*(_QWORD *)(a1 + 80), v19))
      {
        if (!(unsigned __int16)v19--)
          goto LABEL_9;
      }
      log_OutPublic(*(_QWORD *)(v29 + 32), (uint64_t)"RETTT", 11024, 0, v14, v15, v16, v17, v27);
      goto LABEL_21;
    }
LABEL_9:
    v21 = *(_QWORD *)(a1 + 32);
    if (v21)
    {
      heap_Free(*(_QWORD **)(v28 + 8), v21);
      *(_QWORD *)(a1 + 32) = 0;
    }
    v22 = *(_QWORD *)(a1 + 56);
    if (v22)
    {
      heap_Free(*(_QWORD **)(v28 + 8), v22);
      *(_QWORD *)(a1 + 56) = 0;
    }
    v23 = *(_QWORD *)(a1 + 64);
    if (v23)
    {
      heap_Free(*(_QWORD **)(v28 + 8), v23);
      *(_QWORD *)(a1 + 64) = 0;
    }
    v24 = *(_QWORD *)(a1 + 72);
    if (v24)
    {
      heap_Free(*(_QWORD **)(v28 + 8), v24);
      *(_QWORD *)(a1 + 72) = 0;
    }
    log_OutTraceTuningData(*(uint64_t ***)(v28 + 32), 3, (uint64_t)"%s%s %s%u", v13, v14, v15, v16, v17, "END");
    v25 = *(_QWORD *)(a1 + 24);
    if (!v25)
      return 0;
    heap_Free(*(_QWORD **)(v28 + 8), v25);
    v1 = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  return v1;
}

uint64_t ruleset_GetName(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

uint64_t ruleset_GetAbsName(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 32);
  return result;
}

uint64_t ruleset_SetEnabled(uint64_t result, int a2)
{
  if (result)
    *(_DWORD *)(result + 40) = a2;
  return result;
}

uint64_t ruleset_GetEnabled(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 40);
  return result;
}

uint64_t ruleset_GetEnabledForLng(uint64_t result, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 *v8;
  char v9[8];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v2 = result;
    if (!*(_DWORD *)(result + 40))
      return 0;
    result = 0;
    if (a2 && *(_QWORD *)(v2 + 56))
    {
      cstdlib_strcpy(v9, a2);
      if (!LH_stricmp("*", *(char **)(v2 + 56)))
        return 1;
      if (cstdlib_strlen(*(const char **)(v2 + 56)))
      {
        v3 = 0;
        v4 = 1;
        do
        {
          *(_BYTE *)(*(_QWORD *)(v2 + 56) + v3) = cstdlib_tolower(*(char *)(*(_QWORD *)(v2 + 56) + v3));
          v3 = v4;
          v5 = cstdlib_strlen(*(const char **)(v2 + 56)) > v4++;
        }
        while (v5);
      }
      if (cstdlib_strlen(v9))
      {
        v6 = 0;
        v7 = 1;
        do
        {
          v9[v6] = cstdlib_tolower(v9[v6]);
          v6 = v7;
          v5 = cstdlib_strlen(v9) > v7++;
        }
        while (v5);
      }
      if (cstdlib_strstr(*(char **)(v2 + 56), v9))
        return 1;
      v8 = *(unsigned __int8 **)(v2 + 56);
      if (v9[0] == *v8 && v9[1] == v8[1])
        return v8[2] == 42;
      return 0;
    }
  }
  return result;
}

uint64_t ruleset_LoadRules(uint64_t *a1, const char *a2, const char *a3, const char *a4, uint64_t a5, unsigned int a6)
{
  uint64_t v6;
  const char *v11;
  uint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char *p_s;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *i;
  int v55;
  char *v56;
  uint64_t v57;
  char v58;
  int v59;
  const char *v60;
  size_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t j;
  int v67;
  size_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  char *v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  int v91[2];
  int v92;
  char __s;
  _BYTE v94[1039];

  *(_QWORD *)&v94[1023] = *MEMORY[0x24BDAC8D0];
  v90 = a5;
  v89 = a6;
  v6 = 2288001031;
  v87 = 0;
  v88 = 0;
  if (a1 && a5 && a6)
  {
    if (a1[3])
      return 2288001041;
    v11 = a2;
    a1[4] = 0;
    if (!a2 || !*a2)
      v11 = "in-memory RETT";
    if ((InitRsrcFunction((_WORD *)*a1, a1[1], &v88) & 0x80000000) == 0)
    {
      v12 = *(_QWORD *)(v88 + 8);
      v13 = cstdlib_strlen(v11);
      v14 = (char *)heap_Alloc(v12, (v13 + 1));
      a1[3] = (uint64_t)v14;
      if (v14)
      {
        cstdlib_strcpy(v14, v11);
        if ((paramc_ParamGetStr(*(_QWORD *)(v88 + 40), (uint64_t)"__NUAN_alternative_esc_seq__", &v87) & 0x80000000) == 0
          && v87
          && !cstdlib_strcmp("__NUAN_alternative_esc_seq__", (const char *)a1[3]))
        {
          *((_DWORD *)a1 + 11) = 1;
        }
        if (!a3)
          goto LABEL_19;
        v24 = *(_QWORD *)(v88 + 8);
        v25 = cstdlib_strlen(a3);
        v26 = (char *)heap_Alloc(v24, (v25 + 1));
        a1[4] = (uint64_t)v26;
        if (v26)
        {
          cstdlib_strcpy(v26, a3);
LABEL_19:
          log_OutTraceTuningData(*(uint64_t ***)(v88 + 32), 1, (uint64_t)"%s%s %s%s %s%s", v19, v20, v21, v22, v23, "BEG");
          if (!cstdlib_strcmp(a4, "application/x-vocalizer-rettt+bin")
            || !cstdlib_strcmp(a4, "application/x-vocalizer-rettt+bin;loader=broker"))
          {
            v6 = 2288001025;
            goto LABEL_29;
          }
          v86 = 0;
          *(_QWORD *)v91 = 0;
          if ((InitRsrcFunction((_WORD *)*a1, a1[1], v91) & 0x80000000) != 0)
            goto LABEL_29;
          if ((ruleset_ReadDataLine(a1, *(uint64_t *)v91, &v90, &v89, &v86, &__s, v34, v35) & 0x80000000) != 0)
          {
LABEL_25:
            v41 = 11020;
            goto LABEL_26;
          }
          while (1)
          {
            v36 = ruleset_IsSectionHeader((unsigned __int8 *)&__s, "header");
            v39 = ruleset_ReadDataLine(a1, *(uint64_t *)v91, &v90, &v89, &v86, &__s, v37, v38);
            v40 = v39;
            if (v36)
              break;
            if ((v39 & 0x80000000) != 0)
              goto LABEL_25;
          }
          if ((v39 & 0x80000000) != 0)
            goto LABEL_40;
          if (ruleset_IsSectionHeader((unsigned __int8 *)&__s, 0))
          {
LABEL_34:
            v45 = cstdlib_strlen(&__s);
            if (*(_BYTE *)(v90 - 2) == 13)
              v46 = 2;
            else
              v46 = 1;
            v47 = -2;
            if (*(_BYTE *)(v90 - 2) != 13)
              v47 = -1;
            v90 = v90 + v47 - v45;
            v89 += v45 + v46;
            --v86;
            goto LABEL_40;
          }
          while (1)
          {
            v48 = *(_QWORD *)v91;
            p_s = &__s;
            log_OutText(*(_QWORD *)(*(_QWORD *)v91 + 32), (uint64_t)"RETTT", 4, 0, (uint64_t)"ruleset_ScanHeaderLine: '%s'", v42, v43, v44, (uint64_t)&__s);
            for (i = v94; ; ++i)
            {
              v55 = *p_s;
              if (v55 != 9 && v55 != 32)
                break;
              ++p_s;
            }
            v56 = p_s;
            if (!*p_s)
              break;
            while (1)
            {
              if (!(_BYTE)v55)
                goto LABEL_61;
              if (v55 == 32)
                break;
              if (v55 == 61)
              {
                *v56 = 0;
                v60 = v56 + 1;
                goto LABEL_66;
              }
              v58 = *++v56;
              LOBYTE(v55) = v58;
              ++i;
            }
            *v56 = 0;
            while (1)
            {
              v59 = *(unsigned __int8 *)i;
              if (v59 != 9 && v59 != 32)
                break;
              ++i;
            }
            if (!*i)
            {
LABEL_61:
              v57 = *(_QWORD *)(v48 + 32);
              goto LABEL_70;
            }
            v61 = cstdlib_strlen("=");
            if (cstdlib_strncmp(i, "=", v61))
            {
              log_OutPublic(*(_QWORD *)(v48 + 32), (uint64_t)"RETTT", 11011, (uint64_t)"%s%s", v50, v51, v52, v53, "separator");
              goto LABEL_71;
            }
            v60 = i + 1;
LABEL_66:
            while (1)
            {
              v62 = *(unsigned __int8 *)v60;
              if (v62 != 9 && v62 != 32)
                break;
              ++v60;
            }
            if (!*v60)
            {
              v57 = *(_QWORD *)(v48 + 32);
              goto LABEL_70;
            }
            for (j = cstdlib_strlen(v60); ; v60[j] = 0)
            {
              v67 = v60[--j];
              if (v67 != 32 && v67 != 9)
                break;
            }
            log_OutText(*(_QWORD *)(v48 + 32), (uint64_t)"RETTT", 5, 0, (uint64_t)"ruleset_ScanHeaderLine:  key = '%s'; val = '%s'",
              v63,
              v64,
              v65,
              (uint64_t)p_s);
            if (!LH_stricmp(p_s, "language"))
            {
              v92 = 0;
              v70 = cstdlib_strlen(v60);
              if ((PCRE_Exec(a1[13], a1[14], a1[19], a1[20], (uint64_t)v60, v70, 0, 0, 0, &v92) & 0x80000000) == 0)
              {
                if (a1[7])
                {
                  log_OutPublic(*(_QWORD *)(*(_QWORD *)v91 + 32), (uint64_t)"RETTT", 11021, 0, v71, v72, v73, v74, v85);
LABEL_98:
                  v40 = 2288001031;
LABEL_40:
                  if (a1[7])
                  {
                    v6 = v40;
                    if ((v40 & 0x80000000) == 0)
                    {
                      v6 = ruleset_ReadRules(a1, &v90, &v89, &v86);
                      if ((v6 & 0x80000000) == 0)
                      {
                        log_OutTraceTuningData(*(uint64_t ***)(v88 + 32), 1, (uint64_t)"%s%s %s%s %s%s %s%s %s%u", v31, v32, v33, v34, v35, "END");
                        return 0;
                      }
                    }
LABEL_29:
                    log_OutTraceTuningData(*(uint64_t ***)(v88 + 32), 1, (uint64_t)"%s%s %s%u", v31, v32, v33, v34, v35, "END");
                    ruleset_UnloadRules((uint64_t)a1);
                    return v6;
                  }
                  v41 = 11022;
LABEL_26:
                  log_OutPublic(*(_QWORD *)(*(_QWORD *)v91 + 32), (uint64_t)"RETTT", v41, 0, v32, v33, v34, v35, v85);
                  goto LABEL_29;
                }
                v75 = *(_QWORD *)(*(_QWORD *)v91 + 8);
                v76 = cstdlib_strlen(v60);
                v77 = (char *)heap_Alloc(v75, (v76 + 1));
                a1[7] = (uint64_t)v77;
                if (!v77)
                  goto LABEL_96;
                cstdlib_strcpy(v77, v60);
              }
            }
            if (!LH_stricmp(p_s, "type"))
            {
              if (a1[8])
                goto LABEL_98;
              v78 = cstdlib_strlen(v60);
              v79 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v91 + 8), v78 + 1, 1);
              a1[8] = v79;
              if (!v79)
                goto LABEL_96;
              v80 = v78;
              if (v78)
              {
                v81 = 0;
                do
                {
                  *(_BYTE *)(a1[8] + v81) = ssft_tolower(v60[v81]);
                  ++v81;
                }
                while (v80 != v81);
              }
            }
            if (!LH_stricmp(p_s, "type_out"))
            {
              if (a1[9])
                goto LABEL_98;
              v82 = cstdlib_strlen(v60);
              v83 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)v91 + 8), (v82 + 1), 1);
              a1[9] = (uint64_t)v83;
              if (!v83)
              {
LABEL_96:
                v40 = 2288001034;
                goto LABEL_40;
              }
              cstdlib_strcpy(v83, v60);
            }
LABEL_71:
            v40 = ruleset_ReadDataLine(a1, *(uint64_t *)v91, &v90, &v89, &v86, &__s, v34, v35);
            if ((v40 & 0x80000000) != 0)
              goto LABEL_40;
            if (ruleset_IsSectionHeader((unsigned __int8 *)&__s, 0))
              goto LABEL_34;
          }
          v57 = *(_QWORD *)(v48 + 32);
LABEL_70:
          log_OutPublic(v57, (uint64_t)"RETTT", 11026, (uint64_t)"%s%s", v50, v51, v52, v53, "message");
          goto LABEL_71;
        }
        log_OutPublic(*(_QWORD *)(v88 + 32), (uint64_t)"RETTT", 11002, 0, v27, v28, v29, v30, v84);
        ruleset_UnloadRules((uint64_t)a1);
      }
      else
      {
        log_OutPublic(*(_QWORD *)(v88 + 32), (uint64_t)"RETTT", 11002, 0, v15, v16, v17, v18, v84);
      }
      return 2288001034;
    }
  }
  return v6;
}

uint64_t ruleset_ReadRules(uint64_t *a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *i;
  int v29;
  int v31;
  _BOOL4 v32;
  _BYTE *v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  unsigned __int8 *v37;
  _BYTE *j;
  int v39;
  int v40;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t **v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  size_t v71;
  int v72;
  _BYTE *v73;
  int v74;
  _BOOL4 v75;
  BOOL v76;
  char v77;
  _BYTE *v78;
  int v79;
  int v80;
  BOOL v81;
  uint64_t v82;
  _BYTE *v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  int v95[2];
  _QWORD *__b;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  char __s;
  _BYTE v104[7];
  _BYTE v105[256];
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v100 = 0;
  v101 = 0;
  v8 = 2288001031;
  v102 = 0;
  __b = 0;
  v97 = 0;
  v98 = 0;
  *(_QWORD *)v95 = 0;
  cstdlib_memset(&__b, 0, 0x18uLL);
  if (!a2 || !a3 || (InitRsrcFunction((_WORD *)*a1, a1[1], v95) & 0x80000000) != 0)
    return v8;
  if ((ruleset_ReadDataLine(a1, *(uint64_t *)v95, a2, a3, a4, &__s, v9, v10) & 0x80000000) == 0)
  {
    while (!ruleset_IsSectionHeader((unsigned __int8 *)&__s, "data")
         && (ruleset_ReadDataLine(a1, *(uint64_t *)v95, a2, a3, a4, &__s, v11, v12) & 0x80000000) == 0)
      ;
  }
  v13 = ruleset_ReadDataLine(a1, *(uint64_t *)v95, a2, a3, a4, &__s, v11, v12);
  if ((v13 & 0x80000000) != 0)
  {
    if ((v13 & 0x1FFF) == 0x17)
      return 0;
    else
      return v13;
  }
  LODWORD(v19) = 0;
  do
  {
    v94 = v19;
LABEL_10:
    log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)v95 + 32), 2, (uint64_t)"%s%s %s%s %s%d", v14, v15, v16, v17, v18, "BEG");
    v20 = *(_QWORD *)v95;
    v98 = 0;
    cstdlib_memset(&v100, 0, 0x14uLL);
    log_OutText(*(_QWORD *)(v20 + 32), (uint64_t)"RETTT", 5, 0, (uint64_t)"ruleset_ScanRuleLine: '%s'", v21, v22, v23, (uint64_t)&__s);
    for (i = v104; ; ++i)
    {
      v29 = *(i - 1);
      if (v29 != 9 && v29 != 32)
        break;
    }
    if (!*(i - 1))
    {
      log_OutPublic(*(_QWORD *)(v20 + 32), (uint64_t)"RETTT", 11026, (uint64_t)"%s%s", v24, v25, v26, v27, "message");
LABEL_21:
      i = 0;
      goto LABEL_59;
    }
    if (v29 == 92 || (v29 - 48) <= 9)
    {
      log_OutPublic(*(_QWORD *)(v20 + 32), (uint64_t)"RETTT", 11015, 0, v24, v25, v26, v27, v92);
      goto LABEL_21;
    }
    v31 = *i;
    v32 = *i == 0;
    v33 = i;
    if (*i && v31 != v29)
    {
      v33 = i;
      do
      {
        if (v31 == 92 && v33[1])
          ++v33;
        v34 = *++v33;
        v31 = v34;
        v32 = v34 == 0;
        if (v34)
          v35 = v31 == v29;
        else
          v35 = 1;
      }
      while (!v35);
    }
    if (v32)
      goto LABEL_34;
    v37 = v33 + 1;
    *v33 = 0;
    for (j = v33 + 4; ; ++j)
    {
      v39 = (char)*v37;
      v40 = *v37;
      if (v39 == 45 || v40 == 0)
        break;
      if (v39 > 108)
      {
        switch(v39)
        {
          case 'm':
            HIDWORD(v100) = 1;
            goto LABEL_52;
          case 's':
            LODWORD(v101) = 1;
            goto LABEL_52;
          case 'x':
            HIDWORD(v101) = 1;
            goto LABEL_52;
        }
        goto LABEL_51;
      }
      if (v39 != 9 && v39 != 32)
      {
        if (v39 == 105)
        {
          LODWORD(v100) = 1;
          goto LABEL_52;
        }
LABEL_51:
        log_OutPublic(*(_QWORD *)(v20 + 32), (uint64_t)"RETTT", 11016, (uint64_t)"%s%c", v24, v25, v26, v27, "option");
      }
LABEL_52:
      ++v37;
    }
    while (v40 == 9 || v40 == 32)
    {
      LOBYTE(v40) = *(j - 2);
      ++j;
    }
    if (!(_BYTE)v40)
    {
      v36 = *(_QWORD *)(v20 + 32);
      goto LABEL_58;
    }
    v71 = cstdlib_strlen("-->");
    if (cstdlib_strncmp(j - 3, "-->", v71))
    {
      log_OutPublic(*(_QWORD *)(v20 + 32), (uint64_t)"RETTT", 11011, (uint64_t)"%s%s", v24, v25, v26, v27, "separator");
      goto LABEL_59;
    }
    while (1)
    {
      v72 = *j;
      if (v72 != 9 && v72 != 32)
        break;
      ++j;
    }
    if (!*j)
    {
      v36 = *(_QWORD *)(v20 + 32);
LABEL_58:
      log_OutPublic(v36, (uint64_t)"RETTT", 11026, (uint64_t)"%s%s", v24, v25, v26, v27, "message");
LABEL_59:
      v42 = 1;
      v43 = -2006966265;
      goto LABEL_60;
    }
    if (v72 == 34)
      v73 = j + 1;
    else
      v73 = j;
    if (v72 == 34)
      v74 = 34;
    else
      v74 = 32;
    v98 = v73;
    v75 = *v73 == 0;
    if (*v73)
      v76 = v74 == (char)*v73;
    else
      v76 = 1;
    if (v76)
    {
      v78 = v73;
    }
    else
    {
      v77 = *v73;
      v78 = v73;
      do
      {
        if (v77 == 92 && v78[1])
          ++v78;
        v80 = (char)*++v78;
        v79 = v80;
        v77 = v80;
        v75 = v80 == 0;
        if (v80)
          v81 = v74 == v79;
        else
          v81 = 1;
      }
      while (!v81);
    }
    if (v72 != 34 && v75)
    {
      v82 = *(_QWORD *)(v20 + 32);
      goto LABEL_109;
    }
    if (v75)
    {
LABEL_34:
      v36 = *(_QWORD *)(v20 + 32);
      goto LABEL_58;
    }
    *v78 = 0;
    v83 = v78 + 1;
    while (2)
    {
      v84 = *v83;
      if (v84 <= 0x1F)
      {
        if (v84 != 9)
        {
          if (!*v83)
            goto LABEL_108;
LABEL_106:
          log_OutPublic(*(_QWORD *)(v20 + 32), (uint64_t)"RETTT", 11018, (uint64_t)"%s%s", v24, v25, v26, v27, "trailingString");
          goto LABEL_108;
        }
        goto LABEL_104;
      }
      if (v84 == 32)
      {
LABEL_104:
        ++v83;
        continue;
      }
      break;
    }
    if (v84 != 35)
      goto LABEL_106;
LABEL_108:
    v82 = *(_QWORD *)(v20 + 32);
LABEL_109:
    log_OutText(v82, (uint64_t)"RETTT", 5, 0, (uint64_t)"ruleset_ScanRuleLine:  re = '%s'; tgt = '%s'",
      v25,
      v26,
      v27,
      (uint64_t)i);
    v42 = 0;
    v43 = 0;
LABEL_60:
    PCRE_Adapter2PCREOptions(a1[13], a1[14], (uint64_t)&v100);
    v49 = *(_QWORD *)v95;
    if (v42)
    {
      log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)v95 + 32), 2, (uint64_t)"%s%s %s%s %s%u", v44, v45, v46, v47, v48, "END");
      goto LABEL_112;
    }
    v50 = a1[13];
    v51 = a1[14];
    v99 = 0;
    v102 = 1;
    __b = PCRE_CompilePatternWithOptions(v50, v51, (uint64_t)i, (uint64_t)&v100, (uint64_t)v105, 256, (uint64_t)&v99 + 4, (int *)&v99);
    v97 = v52;
    PCRE_Adapter2PCREOptions(v50, v51, (uint64_t)&v100);
    if (__b)
    {
      v43 = v99;
      if ((v99 & 0x80000000) != 0)
        goto LABEL_112;
      v57 = vector_Add(a1[10], &__b);
      v62 = *(uint64_t ***)(*(_QWORD *)v95 + 32);
      if (!v57)
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)v95 + 32), (uint64_t)"RETTT", 11023, 0, v58, v59, v60, v61, v93);
        PCRE_FreePattern((uint64_t)__b, v97);
        v70 = -2006966266;
        goto LABEL_121;
      }
      vector_GetSize(a1[10]);
      log_OutTraceTuningData(v62, 2, (uint64_t)"%s%s %s%s %s%d %s%s %s%d %s%u", v63, v64, v65, v66, v67, "END");
      if (__b)
        PCRE_FreePattern((uint64_t)__b, v97);
      v70 = ruleset_ReadDataLine(a1, *(uint64_t *)v95, a2, a3, a4, &__s, v68, v69);
      if ((v70 & 0x80000000) != 0)
      {
LABEL_121:
        v19 = v94;
        break;
      }
      goto LABEL_10;
    }
    log_OutPublic(*(_QWORD *)(v49 + 32), (uint64_t)"RETTT", 11006, (uint64_t)"%s%s%s%s%s%d", v53, v54, v55, v56, "regularExpression");
    v43 = -2006966272;
    log_OutTraceTuningData(*(uint64_t ***)(v49 + 32), 2, (uint64_t)"%s%s %s%s %s%d %s%s %s%d %s%s %s%u", v85, v86, v87, v88, v89, "END");
LABEL_112:
    if (v94)
      v19 = v94;
    else
      v19 = v43;
    v70 = ruleset_ReadDataLine(a1, *(uint64_t *)v95, a2, a3, a4, &__s, v55, v56);
  }
  while ((v70 & 0x80000000) == 0);
  if ((v70 & 0x1FFF) == 0x17)
    v90 = 0;
  else
    v90 = v70;
  v8 = v19;
  if (!(_DWORD)v19)
    return v90;
  return v8;
}

uint64_t ruleset_Rewrite(_WORD **a1, const char *a2, const char **a3)
{
  uint64_t v3;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  int IsMatchingEscTn;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  int Size;
  int v29;
  unsigned int v30;
  char *v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int ElemAt;
  uint64_t **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t *v52;
  uint64_t v53;
  char *v54;
  unsigned int v56;
  uint64_t v57;
  char *__s;
  uint64_t v59;
  __int16 v60;
  char *v61;

  v59 = 0;
  v57 = 0;
  v3 = 2288001031;
  if (!a1)
    return v3;
  if (!a2)
    return v3;
  if (!a3)
    return v3;
  inited = InitRsrcFunction(*a1, (int)a1[1], &v59);
  if ((inited & 0x80000000) != 0)
    return v3;
  if (!a1[3])
    return 2288001041;
  v8 = inited;
  v9 = *(_QWORD *)(v59 + 8);
  v10 = cstdlib_strlen(a2);
  v11 = (char *)heap_Alloc(v9, (v10 + 1));
  __s = v11;
  if (!v11)
  {
    log_OutPublic(*(_QWORD *)(v59 + 32), (uint64_t)"RETTT", 11002, 0, v12, v13, v14, v15, v56);
    return 2288001034;
  }
  cstdlib_strcpy(v11, a2);
  v16 = (const char *)a1[8];
  if (v16
    && ((v17 = __s,
         v60 = 0,
         v18 = cstdlib_strlen(__s),
         !esc_seq_tn_strncmp(*a1, (int)a1[1], a1[11], (int)a1[12], __s, v18, &v60))
     || cstdlib_strcmp(v16, "normal")))
  {
    while (1)
    {
      v19 = cstdlib_strlen(v17);
      v61 = esc_seq_tn_seq(*a1, (int)a1[1], a1[11], (int)a1[12], v17, v19);
      if (!v61)
        break;
      IsMatchingEscTn = ruleset_IsMatchingEscTn((uint64_t)a1, v16, &v61);
      v17 = ++v61;
      if (IsMatchingEscTn)
        goto LABEL_12;
    }
    v21 = 0;
  }
  else
  {
LABEL_12:
    v21 = 1;
  }
  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v59 + 32)))
  {
    v27 = *(uint64_t ***)(v59 + 32);
    if (a1[8])
      log_OutTraceTuningData(v27, 8, (uint64_t)"%s%s %s%s %s%s %s%s", v22, v23, v24, v25, v26, "BEG");
    else
      log_OutTraceTuningData(v27, 8, (uint64_t)"%s%s %s%s %s%s", v22, v23, v24, v25, v26, "BEG");
  }
  if (!v21)
    goto LABEL_37;
  Size = vector_GetSize((uint64_t)a1[10]);
  if (!a1[8])
  {
    v34 = vector_GetSize((uint64_t)a1[10]);
    if (v34)
    {
      v35 = v34;
      v36 = 0;
      v33 = 0;
      while (1)
      {
        v37 = v33;
        v33 = __s;
        __s = v37;
        ElemAt = vector_GetElemAt((uint64_t)a1[10], v36, &v57);
        v44 = *(uint64_t ***)(v59 + 32);
        if (!ElemAt)
          break;
        log_OutTraceTuningData(v44, 9, (uint64_t)"%s%s %s%d %s%s", v38, v39, v40, v41, v42, "BEG");
        v8 = sub_GsubCompiledRe((uint64_t)a1[2], *(_QWORD *)v57, *(_QWORD *)(v57 + 8), *(char **)(v57 + 16), v33, (const char **)&__s);
        log_OutTraceTuningData(*(uint64_t ***)(v59 + 32), 9, (uint64_t)"%s%s %s%u %s%s", v45, v46, v47, v48, v49, "END");
        if ((v8 & 0x80000000) != 0)
          goto LABEL_43;
        if (v35 == ++v36)
          goto LABEL_38;
      }
      log_OutPublic((uint64_t)v44, (uint64_t)"RETTT", 11025, 0, v39, v40, v41, v42, v56);
      v3 = 2288001030;
      if (!v33)
        goto LABEL_48;
      goto LABEL_47;
    }
    goto LABEL_37;
  }
  v29 = Size;
  if (Size)
  {
    v30 = 0;
    v31 = 0;
    do
    {
      v32 = __s;
      __s = v31;
      if (v31)
      {
        heap_Free(*(_QWORD **)(v59 + 8), (uint64_t)v31);
        __s = 0;
      }
      ruleset_RewriteTnRegions((uint64_t)a1, v30++, 0, v32, (const char **)&__s);
      v31 = v32;
    }
    while (v29 != v30);
    if (v32)
      heap_Free(*(_QWORD **)(v59 + 8), (uint64_t)v32);
  }
  v33 = __s;
  __s = 0;
  ruleset_RewriteTnRegions((uint64_t)a1, 0, 1, v33, (const char **)&__s);
  if (v33)
  {
    heap_Free(*(_QWORD **)(v59 + 8), (uint64_t)v33);
LABEL_37:
    v33 = 0;
  }
LABEL_38:
  if (__s)
  {
    v51 = *a3;
    v52 = *(uint64_t **)(v59 + 8);
    v53 = cstdlib_strlen(__s) + 1;
    if (v51)
    {
      v54 = (char *)heap_Realloc(v52, (uint64_t)v51, v53);
      if (v54)
        goto LABEL_41;
    }
    else
    {
      v54 = (char *)heap_Alloc((uint64_t)v52, v53);
      if (v54)
      {
LABEL_41:
        *a3 = v54;
        cstdlib_strcpy(v54, __s);
        if (cstdlib_strcmp(a2, *a3))
          log_OutEvent(*(uint64_t ***)(v59 + 32), 29, (uint64_t)"%s%s", v50, v23, v24, v25, v26, "RULSET_NAME");
LABEL_43:
        v3 = v8;
        if (!v33)
          goto LABEL_48;
        goto LABEL_47;
      }
    }
  }
  log_OutPublic(*(_QWORD *)(v59 + 32), (uint64_t)"RETTT", 11002, 0, v23, v24, v25, v26, v56);
  v3 = 2288001034;
  if (v33)
LABEL_47:
    heap_Free(*(_QWORD **)(v59 + 8), (uint64_t)v33);
LABEL_48:
  if (__s)
    heap_Free(*(_QWORD **)(v59 + 8), (uint64_t)__s);
  log_OutTraceTuningData(*(uint64_t ***)(v59 + 32), 8, (uint64_t)"%s%s %s%u %s%s", v50, v23, v24, v25, v26, "END");
  return v3;
}

uint64_t ruleset_RewriteTnRegions(uint64_t result, unsigned int a2, int a3, const char *a4, const char **a5)
{
  _WORD **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t v20;
  int v21;
  const char *v22;
  int64_t v23;
  unsigned int v24;
  const char *v25;
  int v26;
  const char *v27;
  unsigned __int16 v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  const char *v33;
  unsigned __int16 v34;
  int IsMatchingEscTn;
  char *v36;
  char *v37;
  char *v38;
  int v39;
  char v40;
  const char *v41;
  unsigned __int16 v42;
  uint64_t *v43;
  int v44;
  const char *v45;
  void *v46;
  size_t v47;
  char *v48;
  const char *v49;
  size_t v50;
  size_t v51;
  uint64_t *v52;
  int v53;
  char *v54;
  char *v55;
  char *v56;
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t **v63;
  uint64_t v64;
  int v65;
  char *v66;
  char *v67;
  uint64_t v68;
  int v69;
  char *v70;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  int v74;
  char *v75;
  char *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  char *v90;
  unsigned int v91;
  const char *v92;
  unsigned int v93;
  uint64_t v94;
  char *__s;
  uint64_t v96;
  __int16 v97;
  char *v98;

  v96 = 0;
  v94 = 0;
  __s = 0;
  if (a4)
  {
    if (a5)
    {
      if (!*a5)
      {
        v9 = (_WORD **)result;
        result = InitRsrcFunction(*(_WORD **)result, *(_QWORD *)(result + 8), &v96);
        if ((result & 0x80000000) == 0)
        {
          if (v9[3])
          {
            if (a3 || vector_GetElemAt((uint64_t)v9[10], a2, &v94))
            {
              if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v96 + 32)))
              {
                v19 = *(uint64_t ***)(v96 + 32);
                if (a3)
                  log_OutTraceTuningData(v19, 16, (uint64_t)"%s%s %s%s", v14, v15, v16, v17, v18, "BEG");
                else
                  log_OutTraceTuningData(v19, 9, (uint64_t)"%s%s %s%d %s%s", v14, v15, v16, v17, v18, "BEG");
              }
              v20 = *(_QWORD *)(v96 + 8);
              v21 = cstdlib_strlen(a4);
              v22 = (const char *)heap_Alloc(v20, (v21 + 1));
              *a5 = v22;
              if (v22)
              {
                *v22 = 0;
                v23 = cstdlib_strlen(a4);
                if (v23 >= 1)
                {
                  v24 = 0;
                  v25 = &a4[v23];
                  if (a3)
                    v26 = 18;
                  else
                    v26 = 11;
                  v91 = v26;
                  v27 = a4;
                  v92 = &a4[v23];
                  do
                  {
                    v28 = cstdlib_strlen(v27 + 1);
                    v29 = esc_seq_tn_seq(*v9, (int)v9[1], v9[11], (int)v9[12], (char *)v27 + 1, v28);
                    if (v29)
                      v30 = v29;
                    else
                      v30 = (char *)v25;
                    v31 = (char *)heap_Alloc(*(_QWORD *)(v96 + 8), ((_DWORD)v30 - (_DWORD)v27 + 1));
                    if (!v31)
                      break;
                    v32 = v31;
                    cstdlib_memcpy(v31, v27, ((_DWORD)v30 - (_DWORD)v27));
                    v32[(_DWORD)v30 - (_DWORD)v27] = 0;
                    v33 = (const char *)v9[8];
                    v98 = v32;
                    v97 = 0;
                    v34 = cstdlib_strlen(v32);
                    v93 = v24;
                    if (esc_seq_tn_strncmp(*v9, (int)v9[1], v9[11], (int)v9[12], v32, v34, &v97))
                    {
                      IsMatchingEscTn = cstdlib_strcmp(v33, "normal") == 0;
                    }
                    else
                    {
                      IsMatchingEscTn = ruleset_IsMatchingEscTn((uint64_t)v9, v33, &v98);
                      if (a3 && IsMatchingEscTn)
                      {
                        v36 = v98;
                        IsMatchingEscTn = 1;
                        goto LABEL_36;
                      }
                    }
                    v36 = v32;
                    if (!a3 && IsMatchingEscTn)
                    {
                      v37 = ruleset_stristr(v32, (char *)v9[8]);
                      if (v37)
                      {
                        v38 = cstdlib_strstr(v37, "\\");
                        v39 = (_DWORD)v38 + 1 - (_DWORD)v32;
                        if (!v38)
                          v39 = 0;
                        v93 = v39;
                        v40 = 0;
                        if (v38)
                          v36 = v38 + 1;
                        else
                          v36 = v32;
                      }
                      else
                      {
                        v40 = 0;
                        v36 = v32;
                      }
                      goto LABEL_49;
                    }
LABEL_36:
                    v40 = 1;
                    if (a3)
                    {
                      if (IsMatchingEscTn)
                      {
                        v41 = (const char *)v9[9];
                        if (v41)
                        {
                          if (cstdlib_strlen(v41))
                          {
                            LOWORD(v98) = 0;
                            v42 = cstdlib_strlen(v32);
                            if (esc_seq_tn_strncmp(*v9, (int)v9[1], v9[11], (int)v9[12], v32, v42, &v98))
                            {
                              v43 = *(uint64_t **)(v96 + 8);
                              v44 = cstdlib_strlen(v36);
                              v45 = (const char *)heap_Realloc(v43, (uint64_t)v36, (v44 + 13));
                              if (!v45)
                                goto LABEL_76;
                              v36 = (char *)v45;
                              v46 = (void *)(v45 + 12);
                              v47 = cstdlib_strlen(v45);
                              cstdlib_memmove(v46, v36, v47 + 1);
                              cstdlib_memcpy(v36, "\x1B\\tn", 4uLL);
                              v48 = v36 + 4;
                              v49 = "=normal\\";
                              v50 = 8;
LABEL_47:
                              cstdlib_memcpy(v48, v49, v50);
                            }
                            else
                            {
                              v51 = cstdlib_strlen((const char *)v9[9]);
                              v52 = *(uint64_t **)(v96 + 8);
                              v53 = cstdlib_strlen(v32);
                              v54 = (char *)heap_Realloc(v52, (uint64_t)v32, (v51 + v53 + 1));
                              if (!v54)
                                goto LABEL_76;
                              v36 = v54;
                              v90 = ruleset_stristr(v54, (char *)v9[8]);
                              v55 = cstdlib_strstr(v90, "\\");
                              if (v55)
                              {
                                v56 = v55;
                                v57 = cstdlib_strlen(v55);
                                cstdlib_memmove(&v90[v51], v56, v57 + 1);
                                v49 = (const char *)v9[9];
                                v48 = v90;
                                v50 = v51;
                                goto LABEL_47;
                              }
                            }
                            v40 = 1;
                            v32 = v36;
                          }
                        }
                      }
                    }
LABEL_49:
                    if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v96 + 32)))
                    {
                      v63 = *(uint64_t ***)(v96 + 32);
                      if (a3)
                        log_OutTraceTuningData(v63, 18, (uint64_t)"%s%s %s%d %s%d", v58, v59, v60, v61, v62, "FOCUS");
                      else
                        log_OutTraceTuningData(v63, 10, (uint64_t)"%s%s %s%s %s%d %s%d", v58, v59, v60, v61, v62, "BEG");
                    }
                    if ((v40 & 1) != 0)
                    {
                      v64 = *(_QWORD *)(v96 + 8);
                      v65 = cstdlib_strlen(v36);
                      v66 = (char *)heap_Alloc(v64, (v65 + 1));
                      __s = v66;
                      if (!v66)
                        goto LABEL_76;
                      cstdlib_strcpy(v66, v36);
                      v67 = 0;
                    }
                    else
                    {
                      if ((sub_GsubCompiledRe((uint64_t)v9[2], *(_QWORD *)v94, *(_QWORD *)(v94 + 8), *(char **)(v94 + 16), v36, (const char **)&__s) & 0x80000000) != 0|| (v68 = *(_QWORD *)(v96 + 8), v69 = cstdlib_strlen(__s), (v70 = (char *)heap_Alloc(v68, v93 + v69 + 1)) == 0))
                      {
LABEL_76:
                        heap_Free(*(_QWORD **)(v96 + 8), (uint64_t)v32);
                        break;
                      }
                      v67 = v70;
                      cstdlib_strncpy(v70, v27, v93);
                      v67[v93] = 0;
                      cstdlib_strcat(v67, __s);
                    }
                    heap_Free(*(_QWORD **)(v96 + 8), (uint64_t)v32);
                    v71 = *(uint64_t **)(v96 + 8);
                    v72 = (uint64_t)*a5;
                    v73 = cstdlib_strlen(*a5);
                    if (v67)
                    {
                      v74 = cstdlib_strlen(v67);
                      v75 = (char *)heap_Realloc(v71, v72, (v73 + v74 + 1));
                      *a5 = v75;
                      if (!v75)
                        break;
                      v76 = v67;
                    }
                    else
                    {
                      v77 = cstdlib_strlen(__s);
                      v75 = (char *)heap_Realloc(v71, v72, (v73 + v77 + 1));
                      *a5 = v75;
                      if (!v75)
                        break;
                      v76 = __s;
                    }
                    cstdlib_strcat(v75, v76);
                    if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v96 + 32)))
                      log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), v91, (uint64_t)"%s%s", v78, v79, v80, v81, v82, "APPEND");
                    if (__s)
                    {
                      heap_Free(*(_QWORD **)(v96 + 8), (uint64_t)__s);
                      __s = 0;
                    }
                    if (v67)
                      heap_Free(*(_QWORD **)(v96 + 8), (uint64_t)v67);
                    if (!a3)
                      log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 10, (uint64_t)"%s%s %s%s", v78, v79, v80, v81, v82, "END");
                    v27 = v30;
                    v25 = v92;
                    v24 = v93;
                  }
                  while (v30 < v92);
                }
              }
              result = log_HasTraceTuningDataSubscriber(*(_QWORD *)(v96 + 32));
              if ((_DWORD)result)
              {
                if (a3)
                  v88 = 16;
                else
                  v88 = 9;
                return log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), v88, (uint64_t)"%s%s %s%u %s%s", v83, v84, v85, v86, v87, "END");
              }
            }
            else
            {
              return log_OutPublic(*(_QWORD *)(v96 + 32), (uint64_t)"RETTT", 11025, 0, v10, v11, v12, v13, v89);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ruleset_ReadDataLine(uint64_t *a1, uint64_t a2, uint64_t *a3, unsigned int *a4, _DWORD *a5, char *__s, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  size_t v21;
  int v22;
  unsigned int v23;

  ++*a5;
  for (result = ruleset_ReadLine(a2, a3, a4, __s, (uint64_t)a5, (uint64_t)__s, a7, a8);
        (result & 0x80000000) == 0;
        result = ruleset_ReadLine(a2, a3, a4, __s, v16, v17, v18, v19))
  {
    v23 = 0;
    v15 = cstdlib_strlen(__s);
    v20 = PCRE_Exec(a1[13], a1[14], a1[15], a1[16], (uint64_t)__s, v15, 0, 0, 0, &v23);
    result = v23;
    if ((v23 & 0x80000000) != 0)
      break;
    if (v20 < 0)
    {
      v21 = cstdlib_strlen(__s);
      v22 = PCRE_Exec(a1[13], a1[14], a1[17], a1[18], (uint64_t)__s, v21, 0, 0, 0, &v23);
      result = v23;
      if ((v23 & 0x80000000) != 0)
        return result;
      if (v22 < 0)
        return 0;
    }
    ++*a5;
  }
  return result;
}

char *ruleset_IsSectionHeader(unsigned __int8 *a1, const char *a2)
{
  int v3;
  uint64_t v4;
  const char *v5;
  int v6;
  const char *v7;
  int v8;
  size_t v9;
  char v10;
  unsigned __int8 *v11;
  char *result;
  int v13;
  char v14;
  int v15;

  v3 = *a1;
  if (v3 == 239)
  {
    if (a1[1] != 187)
    {
      LOBYTE(v3) = -17;
      goto LABEL_9;
    }
    v4 = 3;
    if (a1[2] != 191)
      v4 = 0;
    a1 += v4;
    v3 = *a1;
  }
  if (!v3)
    return 0;
LABEL_9:
  v5 = (const char *)(a1 + 1);
  while (cstdlib_strchr("\t ", (char)v3))
  {
    v6 = *(unsigned __int8 *)v5++;
    LOBYTE(v3) = v6;
    if (!v6)
      return 0;
  }
  if (*(v5 - 1) != 91)
    return 0;
  do
  {
    v7 = v5;
    v8 = *v5;
    if (!*v5)
      break;
    ++v5;
  }
  while (cstdlib_strchr("\t ", v8));
  if (a2)
  {
    v9 = cstdlib_strlen(a2);
    if (cstdlib_strncmp(a2, v7, v9))
      return 0;
    v7 += cstdlib_strlen(a2);
  }
  else
  {
    v14 = *v7;
    if (!*v7)
      return 0;
    while (1)
    {
      result = cstdlib_strchr("\t ]", v14);
      if (result)
        break;
      v15 = *(unsigned __int8 *)++v7;
      v14 = v15;
      if (!v15)
        return result;
    }
  }
  v10 = *v7;
  if (!*v7)
    return 0;
  v11 = (unsigned __int8 *)(v7 + 1);
  while (cstdlib_strchr("\t ", v10))
  {
    result = 0;
    v13 = *v11++;
    v10 = v13;
    if (!v13)
      return result;
  }
  return (char *)(*(v11 - 1) == 93);
}

uint64_t ruleset_ReadLine(uint64_t a1, uint64_t *a2, unsigned int *a3, char *__s, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v28;

  v11 = 0;
  v12 = *a3;
  v13 = *a2;
  if (*a3 >= 0x3FF)
    v14 = 1023;
  else
    v14 = v12;
  v15 = v12 - v14;
  while (v14 != v11)
  {
    v16 = *(unsigned __int8 *)(v13 + v11);
    v17 = v11 + 1;
    __s[v11++] = v16;
    if (v16 == 10)
    {
      LODWORD(v14) = (unsigned __int16)v17;
      v15 = v12 - v17;
      v18 = v13 + v17;
      goto LABEL_9;
    }
  }
  LODWORD(v14) = (unsigned __int16)v14;
  v18 = v13 + v11;
LABEL_9:
  __s[v14] = 0;
  *a3 = v15;
  *a2 = v18;
  if (__s && (_DWORD)v14)
  {
    v19 = cstdlib_strlen(__s);
    if (!v19)
      return 0;
    v24 = v19 - 1;
    if (*a3 && __s[v24] != 10)
    {
      v26 = 2288001024;
      log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"RETTT", 11008, (uint64_t)"%s%u%s%s", v20, v21, v22, v23, "maximumCharacters");
      return v26;
    }
    if (__s[v24] == 10)
      __s[v24] = 0;
    if (v19 >= 2 && (v25 = v19 - 2, __s[v25] == 13))
    {
      v26 = 0;
      __s[v25] = 0;
    }
    else
    {
      return 0;
    }
  }
  else if (v15)
  {
    log_OutPublic(*(_QWORD *)(a1 + 32), (uint64_t)"RETTT", 11010, 0, a5, a6, a7, a8, v28);
    return 2288001028;
  }
  else
  {
    return 2288001047;
  }
  return v26;
}

uint64_t ruleset_IsMatchingEscTn(uint64_t a1, const char *a2, char **a3)
{
  char *v6;
  unsigned __int16 v7;
  int v8;
  uint64_t result;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  size_t v13;
  unsigned __int16 v14;

  v6 = *a3;
  v14 = 0;
  v7 = cstdlib_strlen(v6);
  v8 = esc_seq_tn_strncmp(*(_WORD **)a1, *(_QWORD *)(a1 + 8), *(_QWORD **)(a1 + 88), *(_QWORD *)(a1 + 96), v6, v7, &v14);
  result = 0;
  if (!v8)
  {
    v10 = &v6[v14];
    if (*v10 == 61
      && (v11 = (uint64_t)(v10 + 1), v12 = cstdlib_strlen(a2), !LH_strnicmp(v11, (uint64_t)a2, v12))
      && (v13 = cstdlib_strlen(a2), *(_BYTE *)(v11 + v13) == 92))
    {
      *a3 = (char *)(v11 + v13 + 1);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

char *ruleset_stristr(char *a1, char *__s)
{
  char *result;
  unsigned int v5;
  char v6;
  char v7;
  int v8;
  int v9;

  result = 0;
  if (a1 && __s)
  {
    if (*a1 && *__s && (v5 = cstdlib_strlen(__s), v6 = cstdlib_tolower(*__s), (v7 = *a1) != 0))
    {
      v8 = v6;
      while (cstdlib_tolower(v7) != v8
           || LH_strnicmp((uint64_t)a1, (uint64_t)__s, v5))
      {
        v9 = *++a1;
        v7 = v9;
        if (!v9)
          return 0;
      }
      return a1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_ObjOpen(_WORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v17;
  unsigned int v18;
  uint64_t *v19;

  v3 = 2147491847;
  v19 = 0;
  v18 = 0;
  if (a3 && (InitRsrcFunction(a1, a2, &v19) & 0x80000000) == 0)
  {
    *a3 = 0;
    v7 = (_QWORD *)heap_Alloc(v19[1], 32);
    if (!v7)
    {
      log_OutPublic(v19[4], (uint64_t)"RETTT", 11002, 0, v8, v9, v10, v11, v17);
      return 2147491850;
    }
    v12 = v7;
    cstdlib_memset(v7, 0, 0x20uLL);
    *v12 = a1;
    v12[1] = a2;
    v13 = PCRE_Adapter_Create(1, (uint64_t)(v12 + 2), a1, a2);
    v14 = v19;
    if ((v13 & 0x80000000) != 0)
    {
      v3 = v13;
    }
    else
    {
      paramc_ParamGetUInt(v19[5], (uint64_t)"retttmaxpcreframeblocks", &v18);
      paramc_ParamGetUInt(v19[5], (uint64_t)"retttnumframesinblock", &v18);
      v15 = PCRE_ObjOpen(v12[2], v12[3], 0);
      if ((v15 & 0x80000000) == 0)
      {
        v3 = 0;
        *a3 = v12;
        return v3;
      }
      v3 = v15;
      v14 = v19;
    }
    heap_Free((_QWORD *)v14[1], (uint64_t)v12);
  }
  return v3;
}

uint64_t sub_ObjClose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v1 = 2147491847;
  v5 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v5) & 0x80000000) == 0)
  {
    v3 = PCRE_ObjClose(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    if ((v3 & 0x80000000) != 0)
    {
      return v3;
    }
    else
    {
      heap_Free(*(_QWORD **)(v5 + 8), a1);
      return 0;
    }
  }
  return v1;
}

uint64_t sub_ObjOpenPCRE1(_WORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned __int16 v15;
  int UInt;
  __int16 v17;
  uint64_t v18;
  unsigned int v20;
  int v21;
  uint64_t *v22;

  v3 = 2147491847;
  v22 = 0;
  v21 = 0;
  if (a3 && (InitRsrcFunction(a1, a2, &v22) & 0x80000000) == 0)
  {
    *a3 = 0;
    v7 = (_QWORD *)heap_Alloc(v22[1], 32);
    if (!v7)
    {
      log_OutPublic(v22[4], (uint64_t)"RETTT", 11002, 0, v8, v9, v10, v11, v20);
      return 2147491850;
    }
    v12 = v7;
    cstdlib_memset(v7, 0, 0x20uLL);
    *v12 = a1;
    v12[1] = a2;
    v13 = nuance_pcre_ObjOpen(a1, a2, (uint64_t)(v12 + 2));
    v14 = v22;
    if ((v13 & 0x80000000) != 0)
    {
      v3 = v13;
    }
    else
    {
      if ((int)paramc_ParamGetUInt(v22[5], (uint64_t)"retttmaxpcreframeblocks", (unsigned int *)&v21) < 0)
        v15 = 10;
      else
        v15 = v21;
      UInt = paramc_ParamGetUInt(v22[5], (uint64_t)"retttnumframesinblock", (unsigned int *)&v21);
      v17 = v21;
      if (UInt < 0)
        v17 = 10;
      v18 = nuance_pcre_Init((_QWORD *)v12[2], v12[3], v15, v17);
      if ((v18 & 0x80000000) == 0)
      {
        v3 = 0;
        *a3 = v12;
        return v3;
      }
      v3 = v18;
      nuance_pcre_ObjClose(v12[2], v12[3]);
      v14 = v22;
    }
    heap_Free((_QWORD *)v14[1], (uint64_t)v12);
  }
  return v3;
}

uint64_t sub_ObjClosePCRE1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v1 = 2147491847;
  v5 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v5) & 0x80000000) == 0)
  {
    v3 = nuance_pcre_DeInit(*(_QWORD **)(a1 + 16), *(_QWORD *)(a1 + 24));
    if ((v3 & 0x80000000) != 0)
      return v3;
    v3 = nuance_pcre_ObjClose(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    if ((v3 & 0x80000000) != 0)
    {
      return v3;
    }
    else
    {
      heap_Free(*(_QWORD **)(v5 + 8), a1);
      return 0;
    }
  }
  return v1;
}

uint64_t sub_SubStringRe(uint64_t a1, uint64_t a2, char *a3, const char *a4, const char **a5)
{
  uint64_t v5;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v20;
  uint64_t v21;
  unsigned int inited;
  _BYTE v23[256];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v5 = 2147491847;
  v21 = 0;
  if (a1)
  {
    if (a2)
    {
      v20 = 0;
      inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v21);
      if ((inited & 0x80000000) == 0)
      {
        v11 = PCRE_CompilePattern(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, (uint64_t)v23, 256, (uint64_t)&v20, (int *)&inited);
        if ((inited & 0x80000000) != 0)
        {
          return inited;
        }
        else
        {
          v17 = (uint64_t)v11;
          if (v11)
          {
            v18 = v12;
            inited = sub_Substitute(a1, (uint64_t)v11, v12, a3, a4, 0, a5);
            PCRE_FreePattern(v17, v18);
            return inited;
          }
          else
          {
            log_OutPublic(*(_QWORD *)(v21 + 32), (uint64_t)"RETTT", 11005, (uint64_t)"%s%s%s%s%s%d", v13, v14, v15, v16, "regularExpression");
          }
        }
      }
    }
  }
  return v5;
}

uint64_t sub_Substitute(uint64_t a1, uint64_t a2, int a3, char *a4, const char *a5, int a6, const char **a7)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 HasTraceTuningDataSubscriber;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t **v76;
  const char *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  unsigned int v83;
  const char *v84;
  const char **v85;
  int v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v92[2];
  const char *v93;
  uint64_t v94;
  size_t __len;
  uint64_t v96;
  unsigned int inited;
  int v98;
  unsigned int v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  v7 = 2147491847;
  v96 = 0;
  if (a1)
  {
    if (a2)
    {
      if (a5)
      {
        if (a7)
        {
          v93 = 0;
          v94 = 0;
          __len = 0;
          inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v96);
          if ((inited & 0x80000000) == 0)
          {
            v17 = cstdlib_strlen(a5);
            if ((v17 & 0x80000000) != 0)
            {
              log_OutPublic(*(_QWORD *)(v96 + 32), (uint64_t)"RETTT", 11004, (uint64_t)"%s%u", v13, v14, v15, v16, "bufferBytes");
              return 2147491849;
            }
            else
            {
              v18 = *(_QWORD *)(v96 + 8);
              v19 = *(_QWORD *)(v96 + 32);
              v92[0] = v18;
              v92[1] = v19;
              v89 = v17;
              v94 = v17;
              if (*a7)
              {
                v87 = a4;
                v88 = a2;
                v86 = a6;
                LODWORD(__len) = cstdlib_strlen(*a7);
                v93 = *a7;
                v85 = a7;
                *a7 = 0;
                goto LABEL_12;
              }
              LODWORD(__len) = 128;
              v25 = (char *)heap_Alloc(v18, 128);
              v93 = v25;
              if (v25)
              {
                v87 = a4;
                v88 = a2;
                v86 = a6;
                v85 = a7;
                cstdlib_memset(v25, 0, __len);
LABEL_12:
                log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 12, (uint64_t)"%s%s", v20, v21, v22, v23, v24, "BEG");
                HasTraceTuningDataSubscriber = log_HasTraceTuningDataSubscriber(*(_QWORD *)(v96 + 32));
                v36 = v89;
                if (!(_DWORD)v89 && HasTraceTuningDataSubscriber)
                {
                  log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 13, (uint64_t)"%s%s %s%d", v31, v32, v33, v34, v35, "BEG");
                  log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 13, (uint64_t)"%s%s %s%s", v37, v38, v39, v40, v41, "RES");
                }
                v42 = 0;
                v43 = -1;
                v44 = -1;
                while (v42 < v36)
                {
                  log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 13, (uint64_t)"%s%s %s%d", v31, v32, v33, v34, v35, "BEG");
                  v45 = PCRE_Exec(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v88, a3, (uint64_t)a5, v36, v42, (uint64_t)&v98, 0x1Eu, &inited);
                  if ((inited & 0x80000000) != 0)
                    goto LABEL_58;
                  v51 = v45;
                  if ((v45 & 0x80000000) != 0)
                  {
                    inited = PCRE_ErrorToLhError(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v45);
                    v76 = *(uint64_t ***)(v96 + 32);
                    v77 = "RES";
LABEL_45:
                    log_OutTraceTuningData(v76, 13, (uint64_t)"%s%s %s%s %s%u", v71, v72, v73, v74, v75, v77);
                    break;
                  }
                  if (v98 == v44 && v99 == v43)
                  {
                    log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 13, (uint64_t)"%s%s %s%s", v46, v47, v48, v49, v50, "RES");
                    log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 13, (uint64_t)"%s%s %s%d", v52, v53, v54, v55, v56, "BEG");
                    v57 = a5[v42];
                    if ((~v57 & 0xC0) != 0)
                      v58 = 0;
                    else
                      v58 = pcre_sub_utf8_table4[v57 & 0x3F];
                    v59 = PCRE_Exec(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v88, a3, (uint64_t)a5, v89, (v58 + v42 + 1), (uint64_t)&v98, 0x1Eu, &inited);
                    if ((inited & 0x80000000) != 0)
                      goto LABEL_58;
                    v51 = v59;
                    if ((v59 & 0x80000000) != 0)
                    {
                      inited = PCRE_ErrorToLhError(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v59);
                      v76 = *(uint64_t ***)(v96 + 32);
                      v77 = "END";
                      goto LABEL_45;
                    }
                  }
                  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v96 + 32)))
                  {
                    if ((_DWORD)v51)
                    {
                      v65 = 0;
                      do
                      {
                        log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 14, (uint64_t)"%s%d %s%d %s%d", v60, v61, v62, v63, v64, "$");
                        v65 += 2;
                      }
                      while (((unsigned __int16)v65 | 1u) < 2 * (int)v51);
                    }
                    else
                    {
                      log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 13, (uint64_t)"%s%d %s%s", v60, v61, v62, v63, v64, "IDXBEG");
                    }
                    log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 13, (uint64_t)"%s%s %s%s %s%d %s%d", v60, v61, v62, v63, v64, "END");
                  }
                  inited = sub_Append((uint64_t)v92, (void *)&a5[v42], (v98 - v42), v60, v61, v62, v63, v64);
                  if ((inited & 0x80000000) != 0)
                    goto LABEL_58;
                  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v96 + 32)))
                    log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 15, (uint64_t)"%s%.*s", v66, v67, v68, v69, v70, "APPEND");
                  inited = sub_AppendSubstitute((uint64_t)v92, v87, (uint64_t)a5, (uint64_t)&v98, v51, v68, v69, v70);
                  if ((inited & 0x80000000) != 0)
                    goto LABEL_58;
                  if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v96 + 32)))
                    log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 15, (uint64_t)"%s%.*s", v31, v32, v33, v34, v35, "APPEND");
                  v36 = v89;
                  v44 = v98;
                  v43 = v99;
                  v42 = v99;
                  if (!v86)
                    goto LABEL_47;
                }
                v43 = v42;
LABEL_47:
                v78 = inited;
                if (inited >> 20 == 2213)
                {
                  if ((inited & 0x1FFF) == 0xA)
                  {
                    v79 = *(_QWORD *)(v96 + 32);
                    v80 = 11002;
                    v81 = 0;
                  }
                  else
                  {
                    if ((inited & 0x1FFF) == 0x14)
                    {
                      inited = 0;
LABEL_55:
                      inited = sub_Append((uint64_t)v92, (void *)&a5[v43], v89 - v43 + 1, v31, v32, v33, v34, v35);
                      if ((inited & 0x80000000) != 0)
                      {
LABEL_58:
                        *v85 = v93;
                        log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 12, (uint64_t)"%s%s %s%u %s%s", v46, v47, v48, v49, v50, "END");
                        return inited;
                      }
LABEL_56:
                      if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v96 + 32)))
                        log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 15, (uint64_t)"%s%.*s", v46, v47, v48, v49, v50, "APPEND");
                      goto LABEL_58;
                    }
                    v79 = *(_QWORD *)(v96 + 32);
                    v84 = "lhError";
                    v81 = "%s%x";
                    v80 = 11027;
                  }
                  log_OutPublic(v79, (uint64_t)"RETTT", v80, (uint64_t)v81, v32, v33, v34, v35, v84);
                  v78 = inited;
                }
                if ((v78 & 0x80000000) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
              log_OutPublic(*(_QWORD *)(v96 + 32), (uint64_t)"RETTT", 11002, 0, v26, v27, v28, v29, v83);
              return 2147491850;
            }
          }
        }
      }
    }
  }
  return v7;
}

uint64_t sub_SubCompiledRe(uint64_t a1, uint64_t a2, int a3, char *a4, const char *a5, const char **a6)
{
  return sub_Substitute(a1, a2, a3, a4, a5, 0, a6);
}

uint64_t sub_GsubStringRe(uint64_t a1, uint64_t a2, char *a3, const char *a4, const char **a5)
{
  uint64_t v5;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v20;
  uint64_t v21;
  unsigned int inited;
  _BYTE v23[256];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v5 = 2147491847;
  v21 = 0;
  if (a1)
  {
    if (a2)
    {
      v20 = 0;
      inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v21);
      if ((inited & 0x80000000) == 0)
      {
        v11 = PCRE_CompilePattern(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, (uint64_t)v23, 256, (uint64_t)&v20, (int *)&inited);
        if ((inited & 0x80000000) != 0)
        {
          return inited;
        }
        else
        {
          v17 = (uint64_t)v11;
          if (v11)
          {
            v18 = v12;
            inited = sub_Substitute(a1, (uint64_t)v11, v12, a3, a4, 1, a5);
            PCRE_FreePattern(v17, v18);
            return inited;
          }
          else
          {
            log_OutPublic(*(_QWORD *)(v21 + 32), (uint64_t)"RETTT", 11005, (uint64_t)"%s%s%s%s%s%d", v13, v14, v15, v16, "regularExpression");
          }
        }
      }
    }
  }
  return v5;
}

uint64_t sub_GsubCompiledRe(uint64_t a1, uint64_t a2, int a3, char *a4, const char *a5, const char **a6)
{
  return sub_Substitute(a1, a2, a3, a4, a5, 1, a6);
}

uint64_t sub_GsubCompiledRePCRE1(uint64_t a1, uint64_t a2, char *a3, const char *a4, const char **a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 HasTraceTuningDataSubscriber;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t appended;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t **v82;
  const char *v83;
  uint64_t v84;
  const char *v85;
  unsigned int v86;
  const char *v87;
  unsigned int v88;
  char *v89;
  _QWORD v90[2];
  const char *v91;
  uint64_t v92;
  size_t __len;
  uint64_t v94;
  int v95;
  unsigned int v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  v5 = 2147491847;
  v94 = 0;
  if (!a1)
    return v5;
  if (!a2)
    return v5;
  if (!a4)
    return v5;
  if (!a5)
    return v5;
  v91 = 0;
  v92 = 0;
  __len = 0;
  if ((InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v94) & 0x80000000) != 0)
    return v5;
  v15 = cstdlib_strlen(a4);
  if ((v15 & 0x80000000) != 0)
  {
    log_OutPublic(*(_QWORD *)(v94 + 32), (uint64_t)"RETTT", 11004, (uint64_t)"%s%u", v11, v12, v13, v14, "bufferBytes");
    return 2147491849;
  }
  v16 = *(_QWORD *)(v94 + 8);
  v17 = *(_QWORD *)(v94 + 32);
  v90[0] = v16;
  v90[1] = v17;
  v92 = v15;
  if (*a5)
  {
    LODWORD(__len) = cstdlib_strlen(*a5);
    v91 = *a5;
    *a5 = 0;
  }
  else
  {
    LODWORD(__len) = 128;
    v23 = (char *)heap_Alloc(v16, 128);
    v91 = v23;
    if (!v23)
    {
      log_OutPublic(*(_QWORD *)(v94 + 32), (uint64_t)"RETTT", 11002, 0, v24, v25, v26, v27, v86);
      return 2147491850;
    }
    cstdlib_memset(v23, 0, __len);
  }
  log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 12, (uint64_t)"%s%s", v18, v19, v20, v21, v22, "BEG");
  HasTraceTuningDataSubscriber = log_HasTraceTuningDataSubscriber(*(_QWORD *)(v94 + 32));
  v89 = (char *)a4;
  if (!v15 && HasTraceTuningDataSubscriber)
  {
    log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 13, (uint64_t)"%s%s %s%d", v29, v30, v31, v32, v33, "BEG");
    log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 13, (uint64_t)"%s%s %s%s", v34, v35, v36, v37, v38, "RES");
LABEL_41:
    v39 = 0;
    goto LABEL_42;
  }
  if (!v15)
    goto LABEL_41;
  v88 = v15;
  v39 = 0;
  v40 = -1;
  v41 = -1;
  while (1)
  {
    log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 13, (uint64_t)"%s%s %s%d", v29, v30, v31, v32, v33, "BEG");
    v42 = nuance_pcre_exec(*(_QWORD **)(a1 + 16), *(_QWORD *)(a1 + 24), a2, 0, v89, v15, v39, 0, &v95, 30);
    v48 = v42;
    if ((v42 & 0x80000000) != 0)
    {
      v5 = nuance_pcre_ErrorToLhError(v42);
      v82 = *(uint64_t ***)(v94 + 32);
      v83 = "RES";
      goto LABEL_52;
    }
    if (v95 != v40)
    {
      v50 = (uint64_t)v89;
      goto LABEL_26;
    }
    v49 = v96 == v41;
    v50 = (uint64_t)v89;
    if (v49)
    {
      log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 13, (uint64_t)"%s%s %s%s", v43, v44, v45, v46, v47, "RES");
      log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 13, (uint64_t)"%s%s %s%d", v51, v52, v53, v54, v55, "BEG");
      v56 = v89[v39];
      v57 = (~v56 & 0xC0) != 0 ? 0 : pcre_sub_utf8_table4[v56 & 0x3F];
      v58 = nuance_pcre_exec(*(_QWORD **)(a1 + 16), *(_QWORD *)(a1 + 24), a2, 0, v89, v88, v57 + v39 + 1, 0, &v95, 30);
      v48 = v58;
      if ((v58 & 0x80000000) != 0)
        break;
    }
LABEL_26:
    if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v94 + 32)))
    {
      if ((_DWORD)v48)
      {
        v64 = 0;
        do
        {
          log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 14, (uint64_t)"%s%d %s%d %s%d", v59, v60, v61, v62, v63, "$");
          v64 += 2;
        }
        while (((unsigned __int16)v64 | 1u) < 2 * (int)v48);
      }
      else
      {
        log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 13, (uint64_t)"%s%d %s%s", v59, v60, v61, v62, v63, "IDXBEG");
      }
      log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 13, (uint64_t)"%s%s %s%s %s%d %s%d", v59, v60, v61, v62, v63, "END");
      v50 = (uint64_t)v89;
    }
    appended = sub_Append((uint64_t)v90, (void *)(v50 + v39), v95 - v39, v59, v60, v61, v62, v63);
    if ((appended & 0x80000000) != 0)
      goto LABEL_46;
    if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v94 + 32)))
      log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 15, (uint64_t)"%s%.*s", v71, v72, v73, v74, v75, "APPEND");
    appended = sub_AppendSubstitute((uint64_t)v90, a3, v50, (uint64_t)&v95, v48, v73, v74, v75);
    if ((appended & 0x80000000) != 0)
      goto LABEL_46;
    if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v94 + 32)))
      log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 15, (uint64_t)"%s%.*s", v29, v30, v31, v32, v33, "APPEND");
    v15 = v88;
    v40 = v95;
    v39 = v96;
    v41 = v96;
    if (v96 >= v88)
      goto LABEL_42;
  }
  v5 = nuance_pcre_ErrorToLhError(v58);
  v82 = *(uint64_t ***)(v94 + 32);
  v83 = "END";
LABEL_52:
  log_OutTraceTuningData(v82, 13, (uint64_t)"%s%s %s%s %s%u", v77, v78, v79, v80, v81, v83);
  v15 = v88;
  if (v5 >> 20 == 2213)
  {
    if ((v5 & 0x1FFF) != 0x14)
    {
      if ((v5 & 0x1FFF) == 0xA)
      {
        v84 = 11002;
        v85 = 0;
      }
      else
      {
        v87 = "lhError";
        v85 = "%s%x";
        v84 = 11027;
      }
      log_OutPublic(*(_QWORD *)(v94 + 32), (uint64_t)"RETTT", v84, (uint64_t)v85, v30, v31, v32, v33, v87);
LABEL_44:
      if (log_HasTraceTuningDataSubscriber(*(_QWORD *)(v94 + 32)))
        log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 15, (uint64_t)"%s%.*s", v66, v67, v68, v69, v70, "APPEND");
      goto LABEL_47;
    }
  }
  else if ((v5 & 0x80000000) != 0)
  {
    goto LABEL_44;
  }
LABEL_42:
  appended = sub_Append((uint64_t)v90, &v89[v39], v15 - v39 + 1, v29, v30, v31, v32, v33);
  if ((appended & 0x80000000) == 0)
  {
    v5 = 0;
    goto LABEL_44;
  }
LABEL_46:
  v5 = appended;
LABEL_47:
  *a5 = v91;
  log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 12, (uint64_t)"%s%s %s%u %s%s", v66, v67, v68, v69, v70, "END");
  return v5;
}

uint64_t sub_Append(uint64_t a1, void *__src, size_t __n, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;

  if (a1 && __src)
  {
    v10 = __n;
    if (!(_DWORD)__n)
      return 0;
    v11 = *(_DWORD *)(a1 + 28);
    v12 = v11 + __n;
    if (v11 > (__n ^ 0x7FFFFFFF) || v12 >= 0xF4240 && v12 > 2 * *(_DWORD *)(a1 + 24))
    {
      log_OutPublic(*(_QWORD *)(a1 + 8), (uint64_t)"RETTT", 11001, (uint64_t)"%s%u", a5, a6, a7, a8, "bufferLimitBytes");
      return 2147491849;
    }
    if (*(_DWORD *)(a1 + 32) >= v12)
    {
      v22 = *(_QWORD *)(a1 + 16);
LABEL_21:
      cstdlib_memcpy((void *)(v22 + v11), __src, v10);
      v13 = 0;
      *(_DWORD *)(a1 + 28) += v10;
      return v13;
    }
    if (v12 <= 0x7FFFFF7F)
      v14 = (v12 & 0xFFFFFF80) + 128;
    else
      v14 = 0x7FFFFFFFLL;
    v15 = *(_QWORD *)(a1 + 16);
    v16 = *(uint64_t **)a1;
    if (v15)
    {
      v17 = heap_Realloc(v16, v15, v14);
      if (v17)
      {
        v22 = v17;
        cstdlib_memset((void *)(v17 + *(unsigned int *)(a1 + 32) + 1), 0, (v14 + ~*(_DWORD *)(a1 + 32)));
LABEL_20:
        *(_QWORD *)(a1 + 16) = v22;
        *(_DWORD *)(a1 + 32) = v14;
        v11 = *(_DWORD *)(a1 + 28);
        goto LABEL_21;
      }
    }
    else
    {
      v22 = heap_Calloc(v16, v14, 1);
      if (v22)
        goto LABEL_20;
    }
    log_OutPublic(*(_QWORD *)(a1 + 8), (uint64_t)"RETTT", 11002, 0, v18, v19, v20, v21, v24);
    return 2147491850;
  }
  v13 = 2147491847;
  if (a1)
    log_OutPublic(*(_QWORD *)(a1 + 8), (uint64_t)"RETTT", 11000, 0, a5, a6, a7, a8, v24);
  return v13;
}

uint64_t sub_AppendSubstitute(uint64_t a1, char *__s, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  int v21;
  char v22;
  char *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  size_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  char v35;
  int v37;
  char v38;
  char v39;
  int v40;
  char v41;
  uint64_t v42;
  unsigned int v44;
  __int16 __src;

  if (a1 && __s && a4)
  {
    v11 = a5;
    v18 = cstdlib_strlen(__s);
    if (v18)
    {
      v19 = 0;
      while (1)
      {
        v20 = &__s[v19];
        v21 = *v20;
        if (v21 == 36)
          break;
        if (v21 == 92)
        {
          __src = 0;
          v22 = v20[1];
          if ((v22 - 48) < 8)
          {
            v23 = v20 + 2;
            v22 -= 48;
            v33 = v19 + (_DWORD)__s + 4;
            v34 = 1;
            while (1)
            {
              v35 = *v23;
              if ((*v23 & 0xF8) != 0x30)
                break;
              ++v23;
              v22 = v35 + 8 * v22 - 48;
              if (v34++ >= 2)
              {
LABEL_35:
                LODWORD(v23) = v33;
                break;
              }
            }
          }
          else
          {
            switch(v20[1])
            {
              case 'n':
                LODWORD(v23) = (_DWORD)v20 + 2;
                v22 = 10;
                break;
              case 'o':
              case 'p':
              case 'q':
              case 's':
              case 'u':
              case 'w':
LABEL_55:
                LODWORD(v23) = (_DWORD)v20 + 2;
                break;
              case 'r':
                LODWORD(v23) = (_DWORD)v20 + 2;
                v22 = 13;
                break;
              case 't':
                LODWORD(v23) = (_DWORD)v20 + 2;
                v22 = 9;
                break;
              case 'v':
                LODWORD(v23) = (_DWORD)v20 + 2;
                v22 = 11;
                break;
              case 'x':
                v22 = 0;
                v23 = v20 + 2;
                v33 = v19 + (_DWORD)__s + 4;
                v38 = 1;
                while (1)
                {
                  v39 = v38;
                  v40 = *v23;
                  v41 = v40 - 48;
                  if ((v40 - 48) >= 0xA)
                  {
                    if ((v40 - 97) >= 6)
                    {
                      if ((v40 - 65) > 5)
                        goto LABEL_36;
                      v41 = v40 - 55;
                    }
                    else
                    {
                      v41 = v40 - 87;
                    }
                  }
                  v38 = 0;
                  v22 = v41 + 16 * v22;
                  ++v23;
                  if ((v39 & 1) == 0)
                    goto LABEL_35;
                }
              default:
                switch(v20[1])
                {
                  case 'a':
                    LODWORD(v23) = (_DWORD)v20 + 2;
                    v22 = 7;
                    break;
                  case 'b':
                    LODWORD(v23) = (_DWORD)v20 + 2;
                    v22 = 8;
                    break;
                  case 'e':
                    LODWORD(v23) = (_DWORD)v20 + 2;
                    v22 = 27;
                    break;
                  case 'f':
                    LODWORD(v23) = (_DWORD)v20 + 2;
                    v22 = 12;
                    break;
                  default:
                    goto LABEL_55;
                }
                break;
            }
          }
LABEL_36:
          v37 = (_DWORD)v23 - (_DWORD)__s;
          LOBYTE(__src) = v22;
          v28 = sub_Append(a1, &__src, 1uLL, v13, v14, v15, v16, v17);
          v24 = v37;
          if ((v28 & 0x80000000) != 0)
            return v28;
        }
        else
        {
          v28 = sub_Append(a1, v20, 1uLL, v13, v14, v15, v16, v17);
          if ((v28 & 0x80000000) != 0)
            return v28;
          v24 = v19 + 1;
        }
LABEL_37:
        v19 = v24;
        if (v24 >= v18)
          return 0;
      }
      v24 = v19 + 1;
      v25 = __s[v19 + 1];
      v26 = v25 - 58;
      if ((v25 - 58) <= 0xFFFFFFF5)
      {
        if (v25 != 123)
        {
          v32 = a1;
          v31 = 1;
LABEL_29:
          v28 = sub_Append(v32, v20, v31, v13, v14, v15, v16, v17);
          if ((v28 & 0x80000000) != 0)
            return v28;
          goto LABEL_37;
        }
        v24 = v19 + 2;
        v25 = __s[v19 + 2];
      }
      if ((v25 - 48) > 9)
      {
        v27 = 0;
      }
      else
      {
        v27 = 0;
        do
        {
          v27 = v25 + 10 * v27 - 48;
          v25 = __s[++v24];
        }
        while ((v25 - 48) < 0xA);
      }
      if (v26 <= 0xFFFFFFF5)
      {
        if (v25 != 125)
          goto LABEL_37;
        ++v24;
      }
      if (v27 >= v11)
        goto LABEL_37;
      v29 = *(unsigned int *)(a4 + 8 * v27);
      if ((v29 & 0x80000000) != 0)
        goto LABEL_37;
      v30 = *(_DWORD *)(a4 + ((8 * v27) | 4));
      if (v30 < 0)
        goto LABEL_37;
      v20 = (char *)(a3 + v29);
      v31 = (v30 - v29);
      v32 = a1;
      goto LABEL_29;
    }
    return 0;
  }
  else
  {
    v42 = 2147491847;
    if (a1)
      log_OutPublic(*(_QWORD *)(a1 + 8), (uint64_t)"RETTT", 11003, 0, a5, a6, a7, a8, v44);
  }
  return v42;
}

uint64_t PCRE_V10_Adapter_Init(_QWORD *a1)
{
  a1[2] = PCRE_V10_ObjOpen;
  a1[3] = PCRE_V10_ObjClose;
  a1[4] = PCRE_V10_ErrorToLhError;
  a1[5] = PCRE_V10_CompilePattern;
  a1[6] = PCRE_V10_SerializeAndDecode;
  a1[7] = PCRE_V10_SerializeAndEncode;
  a1[8] = PCRE_V10_SerializeFree;
  a1[9] = PCRE_V10_Exec;
  a1[10] = &PCRE_V10_OPTIONS_MAP;
  return 0;
}

uint64_t PCRE_V10_ObjOpen(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *(__cdecl **v8)(size_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v5 = 2320506890;
  v6 = heap_Alloc(*(_QWORD *)(a3 + 8), 32);
  if (v6)
  {
    v7 = (_QWORD *)v6;
    v8 = pcre2_general_context_create_8((void *(__cdecl *)(size_t))loc_PCRE_V10_private_malloc, (void (__cdecl *)(void *))loc_PCRE_V10_private_free, *(void *(__cdecl **)(size_t))(a3 + 8));
    if (v8)
    {
      v9 = (uint64_t)v8;
      pcre2_compile_context_create_8((uint64_t)v8);
      v11 = v10;
      pcre2_match_context_create_8(v9);
      if (v11)
        v13 = v12 == 0;
      else
        v13 = 1;
      if (!v13)
      {
        v5 = 0;
        *v7 = a3;
        v7[1] = v9;
        v7[2] = v11;
        v7[3] = v12;
        *a1 = v7;
      }
    }
  }
  return v5;
}

uint64_t PCRE_V10_ObjClose(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!a1)
    return 2320506886;
  v2 = a1[3];
  if (v2)
    pcre2_match_context_free_8(v2);
  v3 = a1[2];
  if (v3)
    pcre2_compile_context_free_8(v3);
  v4 = a1[1];
  if (v4)
    pcre2_general_context_free_8(v4);
  heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)a1);
  return 0;
}

uint64_t PCRE_V10_ErrorToLhError(int a1)
{
  uint64_t result;

  if ((a1 & 0x80000000) == 0)
    return 0;
  result = 2320506887;
  switch(a1)
  {
    case -55:
    case -54:
    case -53:
    case -52:
    case -50:
    case -46:
    case -45:
    case -43:
    case -42:
    case -41:
    case -40:
    case -39:
    case -38:
    case -36:
    case -35:
    case -33:
    case -32:
    case -30:
      goto LABEL_7;
    case -51:
      return 2320507149;
    case -49:
      goto LABEL_6;
    case -48:
      return 2320506890;
    case -47:
      return 2320514656;
    case -44:
      return 2320514660;
    case -37:
      return 2320514657;
    case -34:
    case -29:
      return result;
    case -31:
      return 2320514662;
    default:
      if (a1 == -2)
      {
        result = 2320514658;
      }
      else if (a1 == -1)
      {
LABEL_6:
        result = 2320506900;
      }
      else
      {
LABEL_7:
        result = 2320514663;
      }
      break;
  }
  return result;
}

uint64_t PCRE_V10_CompilePattern(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4, int a5, _DWORD *a6)
{
  uint64_t v9;
  int v11;
  uint64_t v12;

  v12 = 0;
  v11 = 0;
  v9 = pcre2_compile_8(a2, 0xFFFFFFFFFFFFFFFFLL, a3, &v11, &v12, *(__int128 **)(a1 + 16));
  if (!v9)
  {
    pcre2_get_error_message_8(v11, a4, a5);
    if (!a6)
      return v9;
    goto LABEL_3;
  }
  if (a6)
LABEL_3:
    *a6 = v12;
  return v9;
}

uint64_t PCRE_V10_Exec(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4, int a5, unsigned int a6, int32x2_t *a7, int a8, int *a9)
{
  _QWORD *v17;
  uint64_t matched;
  uint64_t v19;
  uint64_t v20;
  int64x2_t *ovector_pointer_8;
  int64x2_t v22;
  int v23;

  v17 = pcre2_match_data_create_from_pattern_8(a2, *(__int128 **)(a1 + 8));
  if (v17)
  {
    matched = pcre2_match_8(a2, a3, a4, a5, a6, (uint64_t)v17, *(__int128 **)(a1 + 24));
    v19 = matched;
    if ((matched & 0x80000000) == 0)
    {
      if (a8 / 3 >= (int)matched)
        v20 = matched;
      else
        v20 = (a8 / 3);
      ovector_pointer_8 = (int64x2_t *)pcre2_get_ovector_pointer_8((uint64_t)v17);
      if ((int)v20 >= 1)
      {
        do
        {
          v22 = *ovector_pointer_8++;
          *a7++ = vmovn_s64(v22);
          --v20;
        }
        while (v20);
      }
    }
    v23 = 0;
  }
  else
  {
    v23 = -1974460406;
    *a9 = -1974460406;
    v19 = 0xFFFFFFFFLL;
  }
  pcre2_match_data_free_8((uint64_t)v17);
  *a9 = v23;
  return v19;
}

uint64_t PCRE_V10_SerializeAndEncode(uint64_t a1, size_t *a2, _DWORD *a3, _QWORD *a4)
{
  int v6;
  uint64_t v8;
  uint64_t v9;
  size_t *v10[2];

  v10[1] = *(size_t **)MEMORY[0x24BDAC8D0];
  v8 = 0;
  v9 = 0;
  v10[0] = a2;
  v6 = pcre2_serialize_encode_8(v10, 1, &v9, &v8, *(__int128 **)(a1 + 8));
  if ((v6 & 0x80000000) == 0)
  {
    *a3 = v8;
    *a4 = v9;
  }
  return PCRE_V10_ErrorToLhError(v6);
}

uint64_t PCRE_V10_SerializeAndDecode(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  int v4;
  uint64_t result;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x24BDAC8D0];
  v6[0] = 0;
  v4 = pcre2_serialize_decode_8((uint64_t)v6, 1, a2, *(__int128 **)(a1 + 8));
  result = PCRE_V10_ErrorToLhError(v4);
  *a3 = v6[0];
  return result;
}

uint64_t PCRE_V10_Adapter_Pattern_Init(_QWORD *a1)
{
  a1[2] = PCRE_V10_FreePattern;
  a1[3] = PCRE_V10_GetPatternSize;
  a1[4] = PCRE_V10_CopyPattern;
  return 0;
}

uint64_t PCRE_V10_GetPatternSize(uint64_t a1, uint64_t *a2)
{
  int v2;

  v2 = pcre2_pattern_info_8(a1, 0x16u, a2);
  return PCRE_V10_ErrorToLhError(v2);
}

uint64_t loc_PCRE_V10_private_malloc(uint64_t a1, uint64_t a2)
{
  return heap_Alloc(a2, a1);
}

_QWORD *loc_PCRE_V10_private_free(uint64_t a1, _QWORD *a2)
{
  return heap_Free(a2, a1);
}

uint64_t PCRE_Adapter_Create(int a1, uint64_t a2, _WORD *a3, int a4)
{
  uint64_t inited;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;

  v11 = 0;
  inited = InitRsrcFunction(a3, a4, &v11);
  if ((inited & 0x80000000) != 0)
    return inited;
  v7 = 2320506890;
  v8 = (_QWORD *)heap_Alloc(*(_QWORD *)(v11 + 8), 88);
  if (v8)
  {
    v9 = v8;
    if (a1 == 1)
      v7 = PCRE_V10_Adapter_Init(v8);
    else
      v7 = 2320506898;
    *v9 = v11;
    v9[1] = 0;
    *(_QWORD *)a2 = v9;
    *(_DWORD *)(a2 + 8) = 56664;
  }
  return v7;
}

uint64_t PCRE_ObjOpen(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 56664, 88);
  if ((result & 0x80000000) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1 + 16))(a1 + 8, a3, *(_QWORD *)a1);
  return result;
}

uint64_t PCRE_ObjClose(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;

  result = safeh_HandleCheck(a1, a2, 56664, 88);
  if ((result & 0x80000000) == 0)
  {
    v4 = (*(uint64_t (**)(_QWORD))(a1 + 24))(*(_QWORD *)(a1 + 8));
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), a1);
    return v4;
  }
  return result;
}

uint64_t PCRE_ErrorToLhError(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 56664, 88);
  if ((result & 0x80000000) == 0)
    return (*(uint64_t (**)(uint64_t))(a1 + 32))(a3);
  return result;
}

_QWORD *PCRE_CompilePattern(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  _QWORD v8[2];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = 0;
  v8[1] = 0;
  v9 = 0;
  return PCRE_CompilePatternWithOptions(a1, a2, a3, (uint64_t)v8, a4, a5, a6, a7);
}

_QWORD *PCRE_CompilePatternWithOptions(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v15 = safeh_HandleCheck(a1, a2, 56664, 88);
  if (v15 < 0)
  {
    v20 = 0;
    goto LABEL_13;
  }
  v16 = 0;
  LODWORD(v17) = 0;
  do
  {
    v18 = *(_DWORD *)(a4 + v16);
    if (v18)
      v18 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + v16);
    v17 = v18 | v17;
    v16 += 4;
  }
  while (v16 != 20);
  v19 = (_QWORD *)heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), 40);
  v20 = v19;
  if (!v19)
  {
LABEL_12:
    v15 = -1974460406;
    goto LABEL_13;
  }
  PCRE_V10_Adapter_Pattern_Init(v19);
  v21 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 40))(*(_QWORD *)(a1 + 8), a3, v17, a5, a6, a7);
  if (!v21)
  {
    v20 = 0;
    goto LABEL_12;
  }
  *v20 = *(_QWORD *)a1;
  v20[1] = v21;
LABEL_13:
  *a8 = v15;
  return v20;
}

uint64_t PCRE_SerializeAndEncode(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 56664, 88);
  if ((result & 0x80000000) == 0)
  {
    result = safeh_HandleCheck(a3, a4, 56665, 0);
    if ((result & 0x80000000) == 0)
      return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(a1 + 56))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a3 + 8), a5, a6);
  }
  return result;
}

uint64_t PCRE_SerializeAndDecode(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;

  v7 = safeh_HandleCheck(a1, a2, 56664, 88);
  if ((v7 & 0x80000000) != 0)
    return v7;
  v8 = 2320506890;
  v13 = 0;
  v9 = (_QWORD *)heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), 40);
  if (v9)
  {
    v10 = v9;
    PCRE_V10_Adapter_Pattern_Init(v9);
    v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *))(a1 + 48))(*(_QWORD *)(a1 + 8), a3, &v13);
    if ((v7 & 0x80000000) != 0)
      return v7;
    v11 = v13;
    if (v13)
    {
      *v10 = *(_QWORD *)a1;
      v10[1] = v11;
      *a4 = v10;
      a4[1] = 56665;
      return v7;
    }
  }
  return v8;
}

uint64_t PCRE_SerializeFree(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;

  v5 = safeh_HandleCheck(a1, a2, 56664, 88);
  if ((v5 & 0x80000000) == 0)
    (*(void (**)(uint64_t))(a1 + 64))(a3);
  return v5;
}

uint64_t PCRE_FreePattern(uint64_t a1, int a2)
{
  uint64_t v3;

  v3 = safeh_HandleCheck(a1, a2, 56665, 0);
  if ((v3 & 0x80000000) == 0)
  {
    (*(void (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), a1);
  }
  return v3;
}

uint64_t PCRE_CopyPattern(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v7 = safeh_HandleCheck(a1, a2, 56665, 0);
  if ((v7 & 0x80000000) != 0)
    goto LABEL_5;
  v8 = 2320506890;
  v9 = (_QWORD *)heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), 40);
  if (v9)
  {
    v10 = v9;
    PCRE_V10_Adapter_Pattern_Init(v9);
    v11 = *(_QWORD *)(a1 + 8);
    *v10 = *(_QWORD *)a1;
    v12 = (*(uint64_t (**)(uint64_t))(a1 + 32))(v11);
    v10[1] = v12;
    if (v12)
    {
      *(_QWORD *)a3 = v10;
      *(_DWORD *)(a3 + 8) = 56665;
LABEL_5:
      v8 = v7;
    }
  }
  *a4 = v8;
  return v8;
}

uint64_t PCRE_GetPatternSize(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 56665, 0);
  if ((result & 0x80000000) == 0)
    return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 24))(*(_QWORD *)(a1 + 8), a3);
  return result;
}

uint64_t PCRE_Exec(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, _DWORD *a10)
{
  _QWORD v11[2];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v11[0] = 0;
  v11[1] = 0;
  v12 = 0;
  return PCRE_ExecWithOptions(a1, a2, a3, a4, a5, a6, a7, (uint64_t)v11, a8, a9, a10);
}

uint64_t PCRE_ExecWithOptions(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, _DWORD *a11)
{
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v18 = safeh_HandleCheck(a1, a2, 56664, 88);
  if (v18 < 0 || (v18 = safeh_HandleCheck(a3, a4, 56665, 0), v18 < 0))
  {
    *a11 = v18;
    return 0xFFFFFFFFLL;
  }
  else
  {
    v19 = 0;
    LODWORD(v20) = 0;
    do
    {
      v21 = *(_DWORD *)(a8 + v19);
      if (v21)
        v21 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + v19);
      v20 = v21 | v20;
      v19 += 4;
    }
    while (v19 != 20);
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _DWORD *))(a1 + 72))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a3 + 8), a5, a6, a7, v20, a9, a10, a11);
  }
}

uint64_t PCRE_Adapter2PCREOptions(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  int v7;

  if ((safeh_HandleCheck(a1, a2, 56664, 88) & 0x80000000) != 0)
    return 0;
  v5 = 0;
  LODWORD(result) = 0;
  do
  {
    v7 = *(_DWORD *)(a3 + v5);
    if (v7)
      v7 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + v5);
    result = v7 | result;
    v5 += 4;
  }
  while (v5 != 20);
  return result;
}

uint64_t _pcre2_auto_possessify_8(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t result;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 *chr_property_list;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v21 = 1000;
  v3 = *a1;
  if (v3 <= 0xA4)
  {
    v7 = a1;
    while ((v3 - 33) > 0x40u)
    {
      if (v3 - 110 < 2)
      {
        v9 = 33;
        goto LABEL_14;
      }
      if (v3 == 112)
      {
        v9 = __rev16(*(unsigned __int16 *)(v7 + 1));
LABEL_14:
        v10 = v7[v9];
        if ((v10 - 98) <= 7u)
        {
          chr_property_list = get_chr_property_list(v7, a2, *(_QWORD *)(a3 + 16), (uint64_t)&v22);
          v23 = (v10 & 1) == 0;
          if (compare_opcodes(chr_property_list, a2, a3, &v22, chr_property_list, &v21))
          {
            if ((v10 - 98) <= 7u)
              v7[v9] = 0x6D6D6C6C6B6B6A6AuLL >> (8 * (v10 - 98));
          }
        }
LABEL_35:
        LOBYTE(v3) = *v7;
      }
      result = v3;
      switch((char)v3)
      {
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case '^':
        case '_':
          v15 = v7[1];
          goto LABEL_42;
        case '[':
        case '\\':
        case ']':
        case 'a':
          v15 = v7[3];
LABEL_42:
          v16 = 2 * ((v15 - 15) < 2);
          goto LABEL_43;
        case 'b':
        case 'c':
        case 'd':
        case 'e':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'n':
        case 'o':
        case 'q':
        case 'r':
        case 's':
        case 't':
        case 'u':
        case 'v':
          goto LABEL_51;
        case 'p':
          v19 = *(unsigned __int16 *)(v7 + 1);
          goto LABEL_49;
        case 'w':
          v19 = *(unsigned __int16 *)(v7 + 5);
LABEL_49:
          v16 = __rev16(v19);
          goto LABEL_43;
        default:
          if (v3 - 150 <= 8 && ((1 << (v3 + 106)) & 0x155) != 0)
          {
            v16 = v7[1];
LABEL_43:
            v17 = _pcre2_OP_lengths_8;
            goto LABEL_44;
          }
          if (!(_BYTE)v3)
            return result;
LABEL_51:
          v16 = _pcre2_OP_lengths_8[v3];
          v18 = &v7[v16];
          if ((_DWORD)a2)
          {
            if ((v3 - 29) <= 0x37u)
            {
              v20 = *(v18 - 1);
              if (v20 >= 0xC0)
              {
                LOBYTE(v3) = v20 & 0x3F;
                v17 = _pcre2_utf8_table4;
LABEL_44:
                v18 = &v7[v16 + v17[v3]];
              }
            }
          }
          v3 = *v18;
          v7 = v18;
          if (v3 >= 0xA5)
            return 0xFFFFFFFFLL;
          break;
      }
    }
    if (v3 <= 0x54u)
    {
      if (v3 <= 0x47u)
      {
        if (v3 >= 0x2Eu)
          v12 = -46;
        else
          v12 = -33;
        if (v3 <= 0x3Au)
          v8 = v12;
        else
          v8 = 197;
      }
      else
      {
        v8 = 184;
      }
    }
    else
    {
      v8 = 171;
    }
    if ((v3 + v8 + 33) >= 0x29u)
    {
      v23 = ((v8 + v3) & 0xF9) == 0;
    }
    else
    {
      v13 = get_chr_property_list(v7, a2, *(_QWORD *)(a3 + 16), (uint64_t)&v22);
      v23 = ((v8 + v3) & 0xF9) == 0;
      if (v13 && compare_opcodes(v13, a2, a3, &v22, v13, &v21))
      {
        switch((_BYTE)v3 + (_BYTE)v8)
        {
          case 0:
            v14 = *v7 + 9;
            goto LABEL_34;
          case 1:
          case 2:
            v14 = *v7 + 8;
            goto LABEL_34;
          case 3:
          case 4:
            v14 = *v7 + 7;
            goto LABEL_34;
          case 5:
          case 6:
            v14 = *v7 + 6;
            goto LABEL_34;
          case 7:
            v14 = *v7 + 5;
LABEL_34:
            *v7 = v14;
            break;
          default:
            goto LABEL_35;
        }
      }
    }
    goto LABEL_35;
  }
  return 0xFFFFFFFFLL;
}

unsigned __int8 *get_chr_property_list(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *result;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned int v20;
  _BYTE *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  char *v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  BOOL v38;
  char v39;
  unsigned int v40;

  v7 = *a1;
  result = a1 + 1;
  v6 = v7;
  *(_QWORD *)a4 = v7;
  if (v7 - 33 <= 0x40)
  {
    if (v6 >= 0x2E)
      v8 = 46;
    else
      v8 = 33;
    if (v6 <= 0x3A)
      v9 = v8;
    else
      v9 = 59;
    if (v6 <= 0x47)
      v10 = v9;
    else
      v10 = 72;
    if (v6 <= 0x54)
      v11 = v10;
    else
      v11 = 85;
    v12 = (v6 - v11 + 33) > 0x2Du
       || ((1 << (v6 - v11 + 33)) & 0x238000000000) == 0;
    v13 = a1 + 3;
    if (!v12)
      result = v13;
    if ((v6 - v11 - 2) > 8u)
      v14 = 1;
    else
      v14 = dword_214F43360[(char)(v6 - v11 - 2)];
    *(_DWORD *)(a4 + 4) = v14;
    if (v11 <= 58)
    {
      if (v11 == 33)
      {
        v15 = 29;
LABEL_38:
        *(_DWORD *)a4 = v15;
LABEL_39:
        v21 = result + 1;
        v20 = *result;
        if (a2 && v20 >= 0xC0)
        {
          if ((v20 & 0x20) != 0)
          {
            v24 = *v21 & 0x3F;
            if ((v20 & 0x10) != 0)
            {
              if ((v20 & 8) != 0)
              {
                v35 = result[2] & 0x3F;
                v36 = result[3] & 0x3F;
                v37 = result[4] & 0x3F;
                if ((v20 & 4) != 0)
                {
                  v20 = ((v20 & 1) << 30) | (v24 << 24) | (v35 << 18) | (v36 << 12) | (v37 << 6) | result[5] & 0x3F;
                  v21 = result + 6;
                }
                else
                {
                  v20 = ((v20 & 3) << 24) | (v24 << 18) | (v35 << 12) | (v36 << 6) | v37;
                  v21 = result + 5;
                }
              }
              else
              {
                v20 = ((v20 & 7) << 18) | (v24 << 12) | ((result[2] & 0x3F) << 6) | result[3] & 0x3F;
                v21 = result + 4;
              }
            }
            else
            {
              v20 = ((v20 & 0xF) << 12) | (v24 << 6) | result[2] & 0x3F;
              v21 = result + 3;
            }
          }
          else
          {
            v21 = result + 2;
            v20 = result[1] & 0x3F | ((v20 & 0x1F) << 6);
          }
        }
        *(_DWORD *)(a4 + 8) = v20;
        *(_DWORD *)(a4 + 12) = -1;
        return v21;
      }
LABEL_30:
      v17 = 29;
LABEL_32:
      *(_DWORD *)a4 = v17;
      v18 = *result;
      if (a2 && v18 >= 0xC0)
      {
        if ((v18 & 0x20) != 0)
        {
          v23 = result[1] & 0x3F;
          if ((v18 & 0x10) != 0)
          {
            if ((v18 & 8) != 0)
            {
              v32 = result[2] & 0x3F;
              v33 = result[3] & 0x3F;
              v34 = result[4] & 0x3F;
              if ((v18 & 4) != 0)
              {
                v18 = ((v18 & 1) << 30) | (v23 << 24) | (v32 << 18) | (v33 << 12) | (v34 << 6) | result[5] & 0x3F;
                result += 6;
              }
              else
              {
                v18 = ((v18 & 3) << 24) | (v23 << 18) | (v32 << 12) | (v33 << 6) | v34;
                result += 5;
              }
            }
            else
            {
              v18 = ((v18 & 7) << 18) | (v23 << 12) | ((result[2] & 0x3F) << 6) | result[3] & 0x3F;
              result += 4;
            }
          }
          else
          {
            v18 = ((v18 & 0xF) << 12) | (v23 << 6) | result[2] & 0x3F;
            result += 3;
          }
        }
        else
        {
          v19 = result[1];
          result += 2;
          v18 = v19 & 0x3F | ((v18 & 0x1F) << 6);
        }
      }
      else
      {
        ++result;
      }
      *(_DWORD *)(a4 + 8) = v18;
      if (a2)
        v38 = 1;
      else
        v38 = v18 > 0xFF;
      v39 = v38;
      if (v18 >= 0x80 && (v39 & 1) != 0)
        v40 = _pcre2_ucd_records_8[2 * _pcre2_ucd_stage2_8[v18 & 0x7F | (_pcre2_ucd_stage1_8[v18 >> 7] << 7)] + 1] + v18;
      else
        v40 = *(unsigned __int8 *)(a3 + v18);
      *(_DWORD *)(a4 + 12) = v40;
      if (v18 == v40)
        *(_DWORD *)(a4 + 12) = -1;
      else
        *(_DWORD *)(a4 + 16) = -1;
      return result;
    }
    if (v11 != 85)
    {
      if (v11 != 72)
      {
        v15 = 31;
        goto LABEL_38;
      }
      v17 = 31;
      goto LABEL_32;
    }
    v16 = *result++;
    v6 = v16;
    *(_DWORD *)a4 = v16;
  }
  v17 = 31;
  switch(v6)
  {
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
      return result;
    case 0xEu:
    case 0x1Bu:
    case 0x1Cu:
      return 0;
    case 0xFu:
    case 0x10u:
      v25 = *result;
      if (v25 != 9)
      {
        *(_DWORD *)(a4 + 8) = v25;
        *(_DWORD *)(a4 + 12) = result[1];
        result += 2;
        return result;
      }
      v26 = 0;
      v27 = (char *)&_pcre2_ucd_caseless_sets_8 + 4 * result[1];
      v22 = result + 2;
      do
      {
        if (v26 == 24)
        {
          *(_DWORD *)(a4 + 8) = result[2];
          *(_DWORD *)(a4 + 12) = result[3];
          return v22;
        }
        v28 = *(_DWORD *)&v27[v26];
        *(_DWORD *)(a4 + v26 + 8) = v28;
        v26 += 4;
      }
      while (v28 != -1);
      if (v6 == 16)
        v29 = 29;
      else
        v29 = 31;
      *(_DWORD *)a4 = v29;
      return v22;
    case 0x1Du:
    case 0x1Fu:
      goto LABEL_39;
    case 0x1Eu:
      goto LABEL_30;
    case 0x20u:
      goto LABEL_32;
    default:
      if (v6 - 110 >= 2)
      {
        if (v6 != 112)
          return 0;
        v22 = &result[__rev16(*(unsigned __int16 *)result) - 1];
      }
      else
      {
        v22 = result + 32;
      }
      v30 = *v22 - 98;
      if (v30 > 0xB)
        goto LABEL_71;
      v31 = 1 << v30;
      if ((v31 & 0x533) != 0)
      {
        *(_DWORD *)(a4 + 4) = 1;
LABEL_64:
        ++v22;
        goto LABEL_71;
      }
      if ((v31 & 0x20C) != 0)
        goto LABEL_64;
      *(_DWORD *)(a4 + 4) = __rev16(*(unsigned __int16 *)(v22 + 1)) == 0;
      v22 += 5;
LABEL_71:
      *(_DWORD *)(a4 + 8) = (_DWORD)v22 - (_DWORD)result;
      return v22;
  }
}

uint64_t compare_opcodes(unsigned __int8 *a1, uint64_t a2, uint64_t a3, int *a4, unsigned __int8 *a5, _DWORD *a6)
{
  int v6;
  uint64_t result;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  int *v19;
  int *v20;
  unsigned __int8 *v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  int v32;
  int v33;
  int v34;
  int *v35;
  int v36;
  int v37;
  int *v38;
  int v39;
  int v40;
  BOOL v42;
  _BOOL4 v43;
  BOOL v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned __int8 *v51;
  unsigned int v52;
  int v53;
  BOOL v54;
  BOOL v55;
  int v56;
  int *v57;
  unsigned __int8 *v58;
  int v59;
  int *v60;
  unsigned __int8 *v61;
  uint64_t v62;
  unsigned int v63;
  unsigned __int8 *v64;
  int *v65;
  unsigned __int8 *v66;
  int *v67;
  unsigned __int8 *v68;
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t i;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  uint64_t v74;
  int v75;
  unsigned __int8 *v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned int v81;
  uint64_t v83;
  int *v84;
  int *v85;
  int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  v6 = (*a6)--;
  if (v6 >= 2)
  {
    v14 = 0;
    v85 = a4 + 2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v15 = *a1;
          if (v15 != 118)
            break;
          a1 += 6;
        }
        if (v15 != 119)
          break;
        a1 += __rev16(*(unsigned __int16 *)(a1 + 5));
      }
      while (v15 == 120)
      {
        a1 += __rev16(*(unsigned __int16 *)(a1 + 1));
        v15 = *a1;
      }
      if ((v15 - 121) > 0x1B)
        goto LABEL_14;
      v16 = 1 << (v15 - 121);
      if ((v16 & 0x1600) != 0)
      {
        v21 = &a1[__rev16(*(unsigned __int16 *)(a1 + 1))];
        a1 += _pcre2_OP_lengths_8[v15];
        v14 = 1;
        if (*v21 == 120)
        {
          do
          {
            result = compare_opcodes(a1, a2, a3, a4, a5, a6);
            if (!(_DWORD)result)
              return result;
            a1 = v21 + 3;
            v21 += __rev16(*(unsigned __int16 *)(v21 + 1));
          }
          while (*v21 == 120);
          v14 = 1;
        }
      }
      else if ((v16 & 9) != 0)
      {
        if (!a4[1])
          return 0;
        v22 = a1[-__rev16(*(unsigned __int16 *)(a1 + 1))] - 126;
        if (v22 <= 0xD)
        {
          v23 = 1 << v22;
          if ((v23 & 0x3180) != 0)
          {
            if (*(_DWORD *)(a3 + 292))
              return 0;
          }
          else if ((v23 & 0x1F) != 0)
          {
            return v14 ^ 1;
          }
        }
        a1 += _pcre2_OP_lengths_8[v15];
      }
      else if ((v16 & 0xC000000) != 0)
      {
        v80 = a1 + 1;
        v81 = a1[1] - 130;
        if (v81 > 3 || v81 == 2)
          return 0;
        do
          v80 += __rev16(*(unsigned __int16 *)(v80 + 1));
        while (*v80 == 120);
        result = compare_opcodes(v80 + 3, a2, a3, a4, a5, a6);
        if (!(_DWORD)result)
          return result;
        a1 += _pcre2_OP_lengths_8[v15];
      }
      else
      {
LABEL_14:
        if (!v15)
          return a4[1] != 0;
        result = (uint64_t)get_chr_property_list(a1, a2, *(_QWORD *)(a3 + 16), (uint64_t)&v86);
        if (!result)
          return result;
        a1 = (unsigned __int8 *)result;
        v18 = *a4;
        if (*a4 == 29)
        {
          v19 = &v86;
          v20 = v85;
LABEL_27:
          v24 = *v20;
          if (v19 == &v86)
            v25 = result;
          else
            v25 = (uint64_t)a5;
          v26 = v25 + 2;
          v27 = v19 + 3;
          while (2)
          {
            result = 0;
            v28 = *v19;
            if (*v19 <= 109)
            {
              switch(v28)
              {
                case 6:
                  if (v24 > 0xFF || (*(_BYTE *)(*(_QWORD *)(a3 + 32) + v24) & 4) == 0)
                    return 0;
                  goto LABEL_149;
                case 7:
                  if (v24 <= 0xFF && (*(_BYTE *)(*(_QWORD *)(a3 + 32) + v24) & 4) != 0)
                    return 0;
                  goto LABEL_149;
                case 8:
                  if (v24 > 0xFF || (*(_BYTE *)(*(_QWORD *)(a3 + 32) + v24) & 1) == 0)
                    return 0;
                  goto LABEL_149;
                case 9:
                  if (v24 <= 0xFF && (*(_BYTE *)(*(_QWORD *)(a3 + 32) + v24) & 1) != 0)
                    return 0;
                  goto LABEL_149;
                case 10:
                  if (v24 > 0xFF || (*(_BYTE *)(*(_QWORD *)(a3 + 32) + v24) & 0x10) == 0)
                    return 0;
                  goto LABEL_149;
                case 11:
                  if (v24 <= 0xFE && (*(_BYTE *)(*(_QWORD *)(a3 + 32) + v24) & 0x10) != 0)
                    return 0;
                  goto LABEL_149;
                case 15:
                case 16:
                  v32 = v28 == 15;
                  v33 = v19[3];
                  v17 = _pcre2_ucd_stage2_8[(int)(v24 - (v17 & 0xFFFFFF80) + (_pcre2_ucd_stage1_8[v24 / 128] << 7))];
                  switch(v19[2])
                  {
                    case 1:
                      v40 = BYTE1(_pcre2_ucd_records_8[2 * v17]);
                      if (v40 == 5 || v40 == 9)
                        goto LABEL_119;
                      v42 = v40 == 8;
                      goto LABEL_144;
                    case 2:
                      v43 = v28 == 15;
                      v44 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v17])] == v33;
                      goto LABEL_114;
                    case 3:
                      v43 = v28 == 15;
                      v45 = BYTE1(_pcre2_ucd_records_8[2 * v17]);
                      goto LABEL_112;
                    case 4:
                      v43 = v28 == 15;
                      v45 = LOBYTE(_pcre2_ucd_records_8[2 * v17]);
LABEL_112:
                      v44 = v33 == v45;
                      goto LABEL_114;
                    case 5:
                      v43 = v28 == 15;
                      v44 = (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v17])] & 0xFFFFFFFD) == 1;
                      goto LABEL_114;
                    case 6:
                    case 7:
                      if (v24 < 0x2000)
                      {
                        if (v24 > 132)
                        {
                          if (v24 > 5759)
                          {
                            if (v24 == 5760 || v24 == 6158)
                              goto LABEL_148;
                          }
                          else if (v24 == 133 || v24 == 160)
                          {
                            goto LABEL_148;
                          }
                        }
                        else if (v24 <= 0x20 && ((1 << v24) & 0x100003E00) != 0)
                        {
                          goto LABEL_148;
                        }
                      }
                      else if ((v24 - 0x2000) < 0xB
                             || (v24 - 8232) <= 0x37
                             && ((1 << (v24 - 40)) & 0x80000000000083) != 0
                             || v24 == 12288)
                      {
                        goto LABEL_148;
                      }
                      v43 = v28 == 15;
                      v44 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v17])] == 6;
LABEL_114:
                      v46 = !v44;
                      v32 = v43 ^ v46;
                      goto LABEL_148;
                    case 8:
                      if ((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v17])] | 2) == 3)
                      {
LABEL_119:
                        v47 = 1;
                      }
                      else
                      {
                        v42 = v24 == 95;
LABEL_144:
                        v47 = v42;
                      }
                      v32 = v47 == v32;
                      goto LABEL_148;
                    case 9:
                      v17 = (unint64_t)&_pcre2_ucd_caseless_sets_8 + 4 * HIBYTE(_pcre2_ucd_records_8[2 * v17]);
                      break;
                    default:
                      return 0;
                  }
                  while (1)
                  {
                    v48 = *(_DWORD *)v17;
                    if (*(_DWORD *)v17 > v24)
                      break;
                    v17 += 4;
                    if (v48 == v24)
                      goto LABEL_148;
                  }
                  v32 = v28 != 15;
LABEL_148:
                  if (v32)
                    goto LABEL_149;
                  return 0;
                case 17:
                case 21:
                case 23:
                case 25:
                  result = 0;
                  if ((v24 - 10) >= 4 && (v24 - 8232) >= 2 && v24 != 133)
                    goto LABEL_149;
                  return result;
                case 18:
                  result = 0;
                  if (v24 < 0x2000)
                  {
                    if (v24 <= 159)
                    {
                      if (v24 != 9 && v24 != 32)
                        return result;
                    }
                    else if (v24 != 160 && v24 != 5760 && v24 != 6158)
                    {
                      return result;
                    }
                  }
                  else if (v24 > 8238)
                  {
                    if (v24 != 8239 && v24 != 8287 && v24 != 12288)
                      return result;
                  }
                  else if ((v24 - 0x2000) >= 0xB)
                  {
                    return result;
                  }
                  goto LABEL_149;
                case 19:
                  result = 0;
                  if (v24 < 0x2000)
                  {
                    if (v24 <= 159)
                    {
                      if (v24 == 9 || v24 == 32)
                        return result;
                    }
                    else if (v24 == 160 || v24 == 5760 || v24 == 6158)
                    {
                      return result;
                    }
                  }
                  else if (v24 > 8238)
                  {
                    if (v24 == 8239 || v24 == 8287 || v24 == 12288)
                      return result;
                  }
                  else if ((v24 - 0x2000) < 0xB)
                  {
                    return result;
                  }
                  break;
                case 20:
                  if ((v24 - 10) >= 4 && (v24 - 8232) >= 2 && v24 != 133)
                    return 0;
                  goto LABEL_149;
                case 24:
                  goto LABEL_149;
                case 29:
                  v34 = v19[2];
                  v35 = v27;
                  while (v24 != v34)
                  {
                    v36 = *v35++;
                    v34 = v36;
                    if (v36 == -1)
                      goto LABEL_149;
                  }
                  return 0;
                case 31:
                  v37 = v19[2];
                  v38 = v27;
                  while (v24 != v37)
                  {
                    v39 = *v38++;
                    v37 = v39;
                    if (v39 == -1)
                      return 0;
                  }
                  if (v24 == -1)
                    return 0;
                  goto LABEL_149;
                default:
                  return result;
              }
              goto LABEL_149;
            }
            switch(v28)
            {
              case 'n':
                if (v24 <= 0xFF)
                  goto LABEL_90;
                break;
              case 'o':
                if (v24 > 0xFF)
                  return 0;
LABEL_90:
                if (((*(unsigned __int8 *)(v25 - v19[2] + ((unint64_t)v24 >> 3)) >> (v24 & 7)) & 1) != 0)
                  return 0;
                break;
              case 'p':
                v83 = v26;
                v84 = v19;
                v29 = v14;
                v30 = v25;
                v31 = _pcre2_xclass_8(v24, (_BYTE *)(v26 - v19[2]));
                v26 = v83;
                v19 = v84;
                v25 = v30;
                v14 = v29;
                if (v31)
                  return 0;
                break;
              default:
                return result;
            }
LABEL_149:
            v49 = v20[1];
            ++v20;
            v24 = v49;
            if (v49 == -1)
              goto LABEL_201;
            continue;
          }
        }
        v20 = (int *)&v88;
        v19 = a4;
        if (v86 == 29)
          goto LABEL_27;
        if (v18 == 110 || v86 == 110 || !(_DWORD)a2 && (v18 == 111 || v86 == 111))
        {
          result = 0;
          if ((_DWORD)a2)
            v54 = 0;
          else
            v54 = v18 == 111;
          v55 = v54 || v18 == 110;
          v56 = v55;
          if (v55)
            v57 = a4;
          else
            v57 = &v86;
          if (v55)
            v58 = a5;
          else
            v58 = a1;
          if (v55)
            v59 = v86;
          else
            v59 = *a4;
          if (v55)
            v60 = &v86;
          else
            v60 = a4;
          v61 = &v58[-v57[2]];
          switch(v59)
          {
            case 6:
              LODWORD(result) = 1;
              goto LABEL_197;
            case 7:
LABEL_197:
              v62 = *(_QWORD *)(a3 + 24) + 64;
              goto LABEL_226;
            case 8:
              LODWORD(result) = 1;
              goto LABEL_223;
            case 9:
LABEL_223:
              v62 = *(_QWORD *)(a3 + 24);
              goto LABEL_226;
            case 10:
              LODWORD(result) = 1;
              goto LABEL_225;
            case 11:
LABEL_225:
              v62 = *(_QWORD *)(a3 + 24) + 160;
LABEL_226:
              if (!(_DWORD)result)
                goto LABEL_232;
              v70 = 0;
              while ((v61[v70] & ~*(unsigned __int8 *)(v62 + v70)) == 0)
              {
                if (++v70 == 32)
                  goto LABEL_235;
              }
              return 0;
            default:
              if ((v59 - 110) >= 2)
              {
                if (v59 != 112)
                  return result;
                if (v60 == &v86)
                  v66 = a1;
                else
                  v66 = a5;
                if (v56)
                  v67 = &v86;
                else
                  v67 = a4;
                v68 = &v66[-v67[2]];
                v69 = v68[2];
                if ((v69 & 4) != 0)
                  return 0;
                if ((v68[2] & 2) != 0)
                {
                  v62 = (uint64_t)(v68 + 3);
                  goto LABEL_232;
                }
                if (!v87)
                  return (v69 & 1) == 0;
              }
              else
              {
                if (v60 == &v86)
                  v64 = a1;
                else
                  v64 = a5;
                if (v56)
                  v65 = &v86;
                else
                  v65 = a4;
                v62 = (uint64_t)&v64[-v65[2]];
LABEL_232:
                for (i = 0; i != 32; ++i)
                {
                  if ((*(_BYTE *)(v62 + i) & v61[i]) != 0)
                    return 0;
                }
LABEL_235:
                if (!v87)
                  return 1;
              }
              break;
          }
        }
        else
        {
          if ((v18 - 15) > 1)
          {
            result = 0;
            v63 = v18 - 6;
            if (v63 > 0x10 || (v86 - 6) > 0x14)
              return result;
            if (!autoposstab[21 * v63 + v86 - 6])
              return 0;
          }
          else if (v86 != 24)
          {
            if ((v86 - 15) > 1)
              return 0;
            v50 = propposstab[11 * *v85 + v88];
            switch(propposstab[11 * *v85 + v88])
            {
              case 1u:
                result = 0;
                if (v18 != 16 || v86 != 16)
                  return result;
                break;
              case 2u:
                if ((v18 == v86) == (a4[3] == v89))
                  return 0;
                break;
              case 3u:
                if (v18 == v86)
                  return 0;
                break;
              case 4u:
                if (v86 != 16)
                  return 0;
                v77 = v18 == 16;
                v78 = a4[3];
                v79 = v89;
                goto LABEL_271;
              case 5u:
                if (v18 != 16)
                  return 0;
                v77 = v86 == 16;
                v78 = v89;
                v79 = a4[3];
LABEL_271:
                if (catposstab[30 * v78 + v79] != v77)
                  return 0;
                break;
              case 6u:
              case 7u:
              case 8u:
                if (v86 != 16)
                  return 0;
                v51 = (unsigned __int8 *)&posspropstab + 4 * (v50 - 6);
                v52 = v89;
                if (v89 == *v51 || v89 == v51[1])
                  goto LABEL_249;
                result = 0;
                if (v18 != 16)
                  return result;
                v53 = v51[2];
                goto LABEL_242;
              case 9u:
              case 0xAu:
              case 0xBu:
                if (v18 != 16)
                  return 0;
                v72 = (unsigned __int8 *)&posspropstab + 4 * (v50 - 9);
                v52 = a4[3];
                if (v52 == *v72 || v52 == v72[1])
                  goto LABEL_258;
                result = 0;
                if (v86 != 16)
                  return result;
                v53 = v72[2];
LABEL_242:
                if (v52 == v53)
                  return result;
                break;
              case 0xCu:
              case 0xDu:
              case 0xEu:
                if (v86 != 16)
                  return 0;
                v73 = (unsigned __int8 *)&posspropstab + 4 * (v50 - 12);
                LODWORD(v74) = v89;
                if (catposstab[30 * *v73 + v89] && catposstab[30 * v73[1] + v89])
                {
                  result = 0;
                  if (v18 != 16)
                    return result;
                  v75 = v73[3];
                  goto LABEL_256;
                }
LABEL_249:
                if (v18 == 16)
                  return 0;
                break;
              case 0xFu:
              case 0x10u:
              case 0x11u:
                if (v18 != 16)
                  return 0;
                v76 = (unsigned __int8 *)&posspropstab + 4 * (v50 - 15);
                v74 = a4[3];
                if (catposstab[30 * *v76 + v74] && catposstab[30 * v76[1] + v74])
                {
                  result = 0;
                  if (v86 != 16)
                    return result;
                  v75 = v76[3];
LABEL_256:
                  if ((_DWORD)v74 == v75)
                    return result;
                }
                else
                {
LABEL_258:
                  if (v86 == 16)
                    return 0;
                }
                break;
              default:
                return 0;
            }
          }
LABEL_201:
          if (!v87)
            return 1;
        }
      }
    }
  }
  return 0;
}

_QWORD *pcre2_code_copy_8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  if (!a1)
    return 0;
  v2 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))a1)(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 16));
  v3 = v2;
  if (v2)
  {
    cstdlib_memcpy(v2, (const void *)a1, *(_QWORD *)(a1 + 72));
    v3[4] = 0;
    if ((*(_BYTE *)(a1 + 98) & 4) != 0)
      ++*(_QWORD *)(*(_QWORD *)(a1 + 24) + 1088);
  }
  return v3;
}

_QWORD *pcre2_code_copy_with_tables_8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  if (!a1)
    return 0;
  v2 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))a1)(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 16));
  v3 = v2;
  if (v2)
  {
    cstdlib_memcpy(v2, (const void *)a1, *(_QWORD *)(a1 + 72));
    v3[4] = 0;
    v4 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))a1)(1096, *(_QWORD *)(a1 + 16));
    if (v4)
    {
      v5 = v4;
      cstdlib_memcpy(v4, *(const void **)(a1 + 24), 0x440uLL);
      v5[136] = 1;
      v3[3] = v5;
      *((_DWORD *)v3 + 24) |= 0x40000u;
      return v3;
    }
    (*(void (**)(_QWORD *, _QWORD))(a1 + 8))(v3, *(_QWORD *)(a1 + 16));
    return 0;
  }
  return v3;
}

uint64_t pcre2_code_free_8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 32);
    if (v2)
      _pcre2_jit_free_8(v2, v1);
    if ((*(_BYTE *)(v1 + 98) & 4) != 0)
    {
      v3 = *(_QWORD *)(v1 + 24);
      v4 = *(_QWORD *)(v3 + 1088);
      if (v4)
      {
        v5 = v4 - 1;
        *(_QWORD *)(v3 + 1088) = v5;
        if (!v5)
          (*(void (**)(void))(v1 + 8))();
      }
    }
    return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v1, *(_QWORD *)(v1 + 16));
  }
  return result;
}

uint64_t _pcre2_check_escape_8(unsigned __int8 **a1, unint64_t a2, int *a3, int *a4, unsigned int a5, int a6, _DWORD *a7)
{
  unsigned __int8 *v8;
  int v12;
  unsigned __int8 *v13;
  uint64_t result;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned __int8 *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned __int8 *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  unint64_t v45;
  int v46;
  unsigned __int8 *v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  _BOOL4 v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  int v55;
  int v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;

  v8 = *a1;
  if ((unint64_t)*a1 >= a2)
  {
    result = 0;
    v15 = 101;
    goto LABEL_7;
  }
  v13 = v8 + 1;
  v12 = *v8;
  v58 = v8 + 1;
  if ((a5 & 0x80000) != 0 && v12 >= 0xC0)
  {
    if ((v12 & 0x20) != 0)
    {
      v16 = *v13 & 0x3F;
      if ((v12 & 0x10) != 0)
      {
        if ((v12 & 8) != 0)
        {
          v17 = v8[2] & 0x3F;
          v18 = v8[3] & 0x3F;
          v19 = v8[4] & 0x3F;
          if ((v12 & 4) != 0)
          {
            v12 = ((v12 & 1) << 30) | (v16 << 24) | (v17 << 18) | (v18 << 12) | (v19 << 6) | v8[5] & 0x3F;
            v13 = v8 + 6;
          }
          else
          {
            v12 = ((v12 & 3) << 24) | (v16 << 18) | (v17 << 12) | (v18 << 6) | v19;
            v13 = v8 + 5;
          }
        }
        else
        {
          v12 = ((v12 & 7) << 18) | (v16 << 12) | ((v8[2] & 0x3F) << 6) | v8[3] & 0x3F;
          v13 = v8 + 4;
        }
      }
      else
      {
        v12 = ((v12 & 0xF) << 12) | (v16 << 6) | v8[2] & 0x3F;
        v13 = v8 + 3;
      }
      v58 = v13;
    }
    else
    {
      v13 = v8 + 2;
      v58 = v8 + 2;
      v12 = v8[1] & 0x3F | ((v12 & 0x1F) << 6);
    }
  }
  *a4 = 0;
  if ((v12 - 123) < 0xFFFFFFB5)
    goto LABEL_17;
  v20 = *(__int16 *)&escapes[2 * (v12 - 48)];
  if (*(_WORD *)&escapes[2 * (v12 - 48)])
  {
    if (v20 > 0)
    {
      result = 0;
      v12 = *(__int16 *)&escapes[2 * (v12 - 48)];
      goto LABEL_21;
    }
    result = -v20;
    if (a7)
    {
      if (v12 > 87)
      {
        if (v12 != 112 && v12 != 88)
          goto LABEL_21;
LABEL_60:
        a7[52] |= 0x100000u;
        goto LABEL_21;
      }
      if (v12 != 78)
      {
        if (v12 != 80)
          goto LABEL_21;
        goto LABEL_60;
      }
    }
    else if (v12 != 78)
    {
      goto LABEL_21;
    }
    if ((unint64_t)v13 >= a2 || *v13 != 123)
    {
LABEL_103:
      result = 12;
      v12 = 78;
      goto LABEL_21;
    }
    v57 = v13 + 1;
    if ((uint64_t)(a2 - (_QWORD)(v13 + 1)) < 2 || v13[1] != 85 || (v26 = v13[2], v13 += 2, v26 != 43))
    {
      if (read_repeat_counts(&v57, a2, 0, 0, a4) || *a4)
        goto LABEL_103;
      v27 = 137;
      goto LABEL_102;
    }
    if ((a5 & 0x80000) == 0)
    {
      v27 = 193;
LABEL_102:
      *a4 = v27;
      goto LABEL_103;
    }
    goto LABEL_90;
  }
  v56 = 0;
  if (!a7)
  {
    if (v12 > 116)
    {
      if (v12 == 120)
      {
LABEL_87:
        if ((a5 & 2) == 0)
        {
          if ((unint64_t)v13 >= a2)
            goto LABEL_136;
          v33 = *v13;
          if (v33 == 123)
          {
LABEL_90:
            v58 = ++v13;
            if ((unint64_t)v13 < a2 && *v13 != 125)
            {
              v12 = 0;
              v48 = a2 - (_QWORD)v13;
              do
              {
                v49 = *v13;
                v50 = xdigitab[v49];
                if (v50 == 255)
                  goto LABEL_179;
                if (v12 || (_DWORD)v49 != 48)
                {
                  v12 = v50 | (16 * v12);
                  v52 = (a5 & 0x80000) == 0 && v12 > 0xFF;
                  if (((v12 > 0x10FFFF) & (a5 >> 19)) != 0 || v52)
                  {
                    v54 = v13 + 1;
                    v58 = v54;
                    if ((unint64_t)v54 < a2)
                    {
                      while (xdigitab[*v54] != 255)
                      {
                        if ((unint64_t)++v54 >= a2)
                          goto LABEL_202;
                      }
                    }
                    goto LABEL_203;
                  }
                }
                else
                {
                  v12 = 0;
                }
                ++v13;
                --v48;
              }
              while (v48);
              v13 = (unsigned __int8 *)a2;
LABEL_179:
              if ((unint64_t)v13 >= a2)
              {
                v53 = v13;
              }
              else
              {
                v53 = v13 + 1;
                v58 = v13 + 1;
                if (*v13 == 125)
                {
                  result = 0;
                  if ((a5 & 0x80000) == 0 || v12 >> 11 < 0x1B || v12 >> 13 > 6)
                    goto LABEL_21;
                  goto LABEL_184;
                }
              }
              result = 0;
              v58 = v53 - 1;
              v32 = 167;
              goto LABEL_108;
            }
            result = 0;
            v32 = 178;
            goto LABEL_108;
          }
          v12 = xdigitab[v33];
          if (v12 == 255)
          {
LABEL_136:
            v12 = 0;
          }
          else
          {
            v58 = v13 + 1;
            if ((unint64_t)(v13 + 1) < a2)
            {
              v42 = xdigitab[v13[1]];
              if (v42 != 255)
              {
                result = 0;
                v58 = v13 + 2;
                v12 = v42 | (16 * v12);
                goto LABEL_21;
              }
            }
          }
          goto LABEL_17;
        }
        if ((uint64_t)(a2 - (_QWORD)v13) < 2
          || (v34 = xdigitab[*v13], v34 == 255)
          || (v35 = xdigitab[v13[1]], v35 == 255))
        {
          result = 0;
          v12 = 120;
          goto LABEL_21;
        }
        result = 0;
        v12 = v35 | (16 * v34);
        v36 = v13 + 2;
LABEL_116:
        v58 = v36;
        goto LABEL_21;
      }
      if (v12 == 117 && (a5 & 2) == 0)
        goto LABEL_113;
    }
    else
    {
      if (v12 == 99)
        goto LABEL_77;
      if (v12 == 111)
        goto LABEL_45;
    }
    result = 0;
    v15 = 103;
LABEL_7:
    *a4 = v15;
    return result;
  }
  if (v12 <= 84)
  {
    switch(v12)
    {
      case '0':
        goto LABEL_27;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (a6)
          goto LABEL_26;
        v28 = v13 - 1;
        v58 = v13 - 1;
        *a4 = 0;
        if ((unint64_t)(v13 - 1) >= a2)
          goto LABEL_17;
        v29 = *v28;
        if (v29 - 48 > 9)
          goto LABEL_17;
        v30 = 0;
        break;
      case 'F':
      case 'L':
        goto LABEL_82;
      default:
        goto LABEL_114;
    }
    while ((unint64_t)v28 < a2)
    {
      v31 = *v28;
      if ((v31 - 48) > 9)
        break;
      ++v28;
      v30 = v31 + 10 * v30 - 48;
      if (v30 >= 0xCCCCCCC)
      {
        result = 0;
        *a4 = 161;
        v58 = v28;
        goto LABEL_21;
      }
    }
    v58 = v28;
    if (v30 >= 0xA)
    {
      if (v29 <= 0x37 && (signed int)v30 > a7[53])
      {
        v58 = v13;
LABEL_26:
        if (v12 <= 0x37)
        {
LABEL_27:
          v21 = 0;
          v12 -= 48;
          v22 = v13;
          while ((unint64_t)&v13[v21] < a2)
          {
            v23 = v13[v21];
            if ((v23 & 0xF8) != 0x30)
            {
              v22 = &v13[v21];
              break;
            }
            ++v22;
            v12 = v23 + 8 * v12 - 48;
            if ((_DWORD)++v21 == 2)
            {
              v22 = v13 + 2;
              break;
            }
          }
          result = 0;
          v58 = v22;
          if ((a5 & 0x80000) == 0 && v12 >= 0x100)
          {
            result = 0;
            v32 = 151;
            goto LABEL_108;
          }
          goto LABEL_21;
        }
LABEL_17:
        result = 0;
        goto LABEL_21;
      }
      if (v30 >= 0x10000)
      {
        result = 0;
        v32 = 161;
        goto LABEL_108;
      }
    }
    result = -v30;
    goto LABEL_21;
  }
  if (v12 <= 107)
  {
    if (v12 == 85)
    {
      result = 0;
      if ((a5 & 2) == 0)
        *a4 = 137;
      v12 = 85;
      goto LABEL_21;
    }
    if (v12 != 99)
    {
      if (v12 != 103)
        goto LABEL_114;
      if (a6)
        goto LABEL_76;
      if ((unint64_t)v13 >= a2)
        goto LABEL_210;
      v43 = *v13;
      result = 27;
      v12 = 103;
      if (v43 != 39 && v43 != 60)
      {
        if (v43 == 123)
        {
          v57 = v13 + 1;
          if (!read_number(&v57, a2, a7[53], 0xFFFFu, 161, &v56, a4))
          {
            if (*a4)
              result = 0;
            else
              result = 28;
            goto LABEL_212;
          }
          if ((unint64_t)v57 < a2 && *v57 == 125)
          {
            v58 = v57 + 1;
LABEL_193:
            if (v56 > 0)
            {
              result = -v56;
              goto LABEL_212;
            }
            result = 0;
            v55 = 115;
LABEL_211:
            *a4 = v55;
            goto LABEL_212;
          }
        }
        else
        {
          if (read_number(&v58, a2, a7[53], 0xFFFFu, 161, &v56, a4))
            goto LABEL_193;
          if (*a4)
          {
LABEL_76:
            result = 0;
LABEL_212:
            v12 = 103;
            goto LABEL_21;
          }
        }
LABEL_210:
        result = 0;
        v55 = 157;
        goto LABEL_211;
      }
LABEL_21:
      *a1 = v58;
      *a3 = v12;
      return result;
    }
LABEL_77:
    if ((unint64_t)v13 >= a2)
    {
      result = 0;
      *a4 = 102;
      v12 = 99;
      goto LABEL_21;
    }
    v12 = *v13;
    if ((v12 - 97) < 0x1A)
      v12 -= 32;
    if ((v12 - 127) <= 0xFFFFFFA0)
    {
      result = 0;
      v32 = 168;
      goto LABEL_108;
    }
    result = 0;
    v12 ^= 0x40u;
    v36 = v13 + 1;
    goto LABEL_116;
  }
  if (v12 > 116)
  {
    if (v12 != 117)
    {
      if (v12 != 120)
        goto LABEL_114;
      goto LABEL_87;
    }
    if ((a5 & 2) != 0)
    {
      if ((uint64_t)(a2 - (_QWORD)v13) >= 4)
      {
        v37 = xdigitab[*v13];
        if (v37 != 255)
        {
          v38 = xdigitab[v13[1]];
          if (v38 != 255)
          {
            v39 = xdigitab[v13[2]];
            if (v39 != 255)
            {
              v40 = xdigitab[v13[3]];
              if (v40 != 255)
              {
                v41 = (16 * v38) | (v37 << 8) | v39;
                v12 = v40 | (16 * v41);
                v58 = v13 + 4;
                if ((a5 & 0x80000) != 0)
                {
                  if ((v41 & 0xFF80) == 0xD80 && (*(_BYTE *)(*(_QWORD *)a7 + 64) & 1) == 0)
                  {
                    result = 0;
                    goto LABEL_187;
                  }
                }
                else if (v12 >= 0x100)
                {
                  result = 0;
                  v32 = 177;
                  goto LABEL_108;
                }
                goto LABEL_17;
              }
            }
          }
        }
      }
      result = 0;
LABEL_131:
      v12 = 117;
      goto LABEL_21;
    }
LABEL_113:
    result = 0;
    *a4 = 137;
    goto LABEL_131;
  }
  if (v12 == 108)
  {
LABEL_82:
    result = 0;
    v32 = 137;
    goto LABEL_108;
  }
  if (v12 == 111)
  {
LABEL_45:
    if ((unint64_t)v13 < a2 && (v24 = *v13, ++v13, v58 = v13, v24 == 123))
    {
      if ((unint64_t)v13 < a2 && *v13 != 125)
      {
        v12 = 0;
        if ((a5 & 0x80000) != 0)
          v44 = 1114111;
        else
          v44 = 255;
        v45 = a2 - (_QWORD)v13;
        do
        {
          v46 = *v13;
          if ((v46 & 0xF8) != 0x30)
            goto LABEL_159;
          if (v12 || v46 != 48)
          {
            v12 = v46 + 8 * v12 - 48;
            if (v12 > v44)
            {
              v54 = v13 + 1;
              v58 = v54;
              if ((unint64_t)v54 >= a2)
                goto LABEL_203;
              do
              {
                if ((*v54 & 0xF8) != 0x30)
                  goto LABEL_203;
                ++v54;
              }
              while ((unint64_t)v54 < a2);
LABEL_202:
              v54 = (unsigned __int8 *)a2;
LABEL_203:
              result = 0;
              v58 = v54;
              v32 = 134;
              goto LABEL_108;
            }
          }
          else
          {
            v12 = 0;
          }
          ++v13;
          --v45;
        }
        while (v45);
        v13 = (unsigned __int8 *)a2;
LABEL_159:
        if ((unint64_t)v13 >= a2)
        {
          v47 = v13;
        }
        else
        {
          v47 = v13 + 1;
          v58 = v13 + 1;
          if (*v13 == 125)
          {
            result = 0;
            if ((a5 & 0x80000) == 0 || (v12 & 0xFFFFF800) != 0xD800)
              goto LABEL_21;
LABEL_184:
            if (!a7 || (*(_BYTE *)(*(_QWORD *)a7 + 64) & 1) == 0)
            {
              result = 0;
              v58 = v13;
LABEL_187:
              v32 = 173;
LABEL_108:
              *a4 = v32;
              goto LABEL_21;
            }
            goto LABEL_17;
          }
        }
        result = 0;
        v58 = v47 - 1;
        v32 = 164;
        goto LABEL_108;
      }
      result = 0;
      v25 = 178;
    }
    else
    {
      result = 0;
      v58 = v13 - 1;
      v25 = 155;
    }
    *a4 = v25;
    v12 = 111;
    goto LABEL_21;
  }
LABEL_114:
  result = 0;
  *a4 = 103;
  *a1 = v13 - 1;
  return result;
}

uint64_t read_repeat_counts(unsigned __int8 **a1, unint64_t a2, unsigned int *a3, unsigned int *a4, int *a5)
{
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  int v13;
  int v14;
  int v15;

  v5 = 0;
  v6 = *a1;
  *a5 = 0;
  if ((unint64_t)v6 < a2)
  {
    if (*v6 - 48 <= 9)
    {
      v7 = 0;
      v8 = v6 + 1;
      while (1)
      {
        v9 = v8 - 1;
        if ((unint64_t)(v8 - 1) >= a2)
          return 0;
        v10 = *v9;
        if ((v10 - 48) > 9)
          break;
        v7 = v10 + 10 * v7 - 48;
        ++v8;
        if (v7 >= 0x10000)
        {
          v5 = 0;
          *a5 = 105;
          --v8;
LABEL_21:
          *a1 = v8;
          return v5;
        }
      }
      v11 = v7;
      if (v10 == 125)
      {
LABEL_16:
        v8 = v9 + 1;
        if (a3)
          *a3 = v7;
        if (a4)
          *a4 = v11;
        v5 = 1;
        goto LABEL_21;
      }
      if (v10 == 44 && (unint64_t)v8 < a2)
      {
        v13 = *v8;
        if (v13 == 125)
        {
          v11 = 0x10000;
LABEL_15:
          v9 = v8;
          goto LABEL_16;
        }
        if ((v13 - 48) <= 9)
        {
          v11 = 0;
          while ((unint64_t)v8 < a2)
          {
            v14 = *v8;
            if ((v14 - 48) > 9)
              goto LABEL_29;
            ++v8;
            v11 = v14 + 10 * v11 - 48;
            if (v11 >= 0x10000)
            {
              v5 = 0;
              v15 = 105;
LABEL_33:
              *a5 = v15;
              goto LABEL_21;
            }
          }
          v8 = (unsigned __int8 *)a2;
LABEL_29:
          if ((unint64_t)v8 < a2 && *v8 == 125)
          {
            if (v11 >= v7)
              goto LABEL_15;
            v5 = 0;
            v15 = 104;
            goto LABEL_33;
          }
        }
      }
    }
    return 0;
  }
  return v5;
}

uint64_t read_number(unsigned __int8 **a1, unint64_t a2, int a3, unsigned int a4, int a5, int *a6, int *a7)
{
  BOOL v7;
  unsigned __int8 *v8;
  int v9;
  unsigned int v10;
  _BOOL4 v11;
  unsigned __int8 *v12;
  BOOL v13;
  _BOOL4 v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;

  v7 = 0;
  v8 = *a1;
  *a7 = 0;
  if (a3 < 0 || (unint64_t)v8 >= a2)
  {
    v14 = 0;
  }
  else
  {
    v9 = *v8;
    v10 = a4 - a3;
    if (v9 != 43)
      v10 = a4;
    v11 = v9 == 43;
    if (v9 == 43)
      v12 = v8 + 1;
    else
      v12 = v8;
    v13 = v9 == 45;
    if (v9 == 45)
    {
      v7 = 1;
    }
    else
    {
      a4 = v10;
      v7 = v9 == 43;
    }
    v14 = !v13 && v11;
    if (v13)
      ++v8;
    else
      v8 = v12;
  }
  if ((unint64_t)v8 < a2 && *v8 - 48 <= 9)
  {
    v15 = 0;
    while ((unint64_t)v8 < a2)
    {
      v16 = *v8;
      if ((v16 - 48) > 9)
        break;
      ++v8;
      v15 = v16 + 10 * v15 - 48;
      if (v15 > a4)
      {
        v17 = 0;
        *a7 = a5;
        goto LABEL_38;
      }
    }
    v18 = !v7;
    if (a3 < 0)
      v18 = 1;
    if ((v18 & 1) != 0)
      goto LABEL_37;
    if (v15)
    {
      if (v14)
      {
        v15 += a3;
LABEL_37:
        v17 = 1;
        goto LABEL_38;
      }
      if (v15 <= a3)
      {
        v15 = a3 - v15 + 1;
        goto LABEL_37;
      }
      v17 = 0;
      v19 = 115;
    }
    else
    {
      v17 = 0;
      v19 = 126;
    }
    *a7 = v19;
LABEL_38:
    *a6 = v15;
    *a1 = v8;
    return v17;
  }
  return 0;
}

uint64_t pcre2_compile_8(unsigned __int8 *a1, unint64_t a2, int a3, int *a4, _QWORD *a5, __int128 *a6)
{
  uint64_t v6;
  __int128 *v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  char *v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned __int8 *recurse;
  __int128 *v43;
  char v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  void *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  char *v58;
  unsigned int v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  BOOL v63;
  unint64_t v64;
  unsigned __int8 *v65;
  unsigned int v66;
  int v67;
  int v68;
  unsigned __int8 *v69;
  unsigned int v70;
  int v71;
  _DWORD *v72;
  int v73;
  uint64_t v74;
  unsigned __int8 *bracket_8;
  _DWORD *v76;
  int v77;
  int v78;
  char v79;
  unsigned int firstassertedcu;
  int v81;
  BOOL v82;
  int v83;
  int v84;
  char v85;
  uint64_t v86;
  int v87;
  BOOL v88;
  _BOOL4 v89;
  unsigned int v90;
  unsigned int v91;
  char *v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  __int16 v101;
  int v102;
  int v103;
  __int16 v104;
  unsigned int v105;
  __int128 *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unsigned int *v111;
  char *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  _QWORD v118[12];
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  _DWORD v127[33];
  _BYTE v128[12000];
  uint64_t v129;
  _BYTE v130[4096];
  _QWORD v131[131];

  v6 = 0;
  v131[128] = *MEMORY[0x24BDAC8D0];
  v110 = 1;
  v111 = 0;
  v127[0] = 0;
  v112 = 0;
  v108 = 0;
  v109 = 0;
  if (!a4 || !a5)
    return v6;
  *a4 = 100;
  *a5 = 0;
  if (!a1)
  {
    v6 = 0;
    v14 = 116;
    goto LABEL_14;
  }
  if (a6)
    v11 = a6;
  else
    v11 = &_pcre2_default_compile_context_8;
  if ((a3 & 0x1C000000) != 0 || (v12 = *((_DWORD *)v11 + 16), v12 >= 0x10))
  {
    v6 = 0;
    v14 = 117;
    goto LABEL_14;
  }
  v13 = a2;
  if ((a3 & 0x2000000) != 0 && v12 & 0xFFFFFFF3 | a3 & 0x1D76FEF3)
  {
    v6 = 0;
    v14 = 192;
LABEL_14:
    *a4 = v14;
    return v6;
  }
  if (a2 == -1)
    v13 = _pcre2_strlen_8(a1);
  if (v13 > *((_QWORD *)v11 + 6))
  {
    v6 = 0;
    v14 = 188;
    goto LABEL_14;
  }
  v125 = 0u;
  v126 = 0u;
  v123 = 0u;
  v124 = 0u;
  v121 = 0u;
  v122 = 0u;
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  memset(v118, 0, sizeof(v118));
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  if (*((_QWORD *)v11 + 5))
    v16 = (char *)*((_QWORD *)v11 + 5);
  else
    v16 = (char *)&_pcre2_default_tables_8;
  *(_QWORD *)&v114 = v16 + 256;
  *((_QWORD *)&v114 + 1) = v16 + 512;
  *(_QWORD *)&v113 = v11;
  *((_QWORD *)&v113 + 1) = v16;
  *(_QWORD *)&v123 = v131;
  *(_QWORD *)((char *)&v126 + 4) = 0;
  *(_QWORD *)&v120 = &v129;
  HIDWORD(v120) = a3;
  DWORD2(v120) = 20;
  *(_QWORD *)&v122 = v130;
  v118[11] = 0;
  *(_QWORD *)&v121 = 0;
  DWORD2(v121) = 0;
  v117 = (unint64_t)&a1[v13];
  v119 = 0uLL;
  *(_QWORD *)((char *)&v125 + 4) = 0;
  *(_QWORD *)&v116 = v128;
  *((_QWORD *)&v116 + 1) = a1;
  *(_QWORD *)&v115 = v16 + 832;
  *((_QWORD *)&v115 + 1) = v128;
  v118[0] = 6000;
  *((_QWORD *)&v123 + 1) = 0;
  *(_QWORD *)&v17 = -1;
  *((_QWORD *)&v17 + 1) = -1;
  *(_OWORD *)&v118[1] = v17;
  *(_OWORD *)&v118[3] = v17;
  *(_OWORD *)&v118[5] = v17;
  *(_OWORD *)&v118[7] = v17;
  *(_OWORD *)&v118[9] = v17;
  v106 = v11;
  v92 = v16;
  if ((a3 & 0x2000000) != 0 || (v18 = v13 - 2, v13 < 2))
  {
    v23 = 0;
    LODWORD(v38) = 0;
    v21 = 0;
    v20 = 0;
    v93 = -1;
    v94 = -1;
    v95 = -1;
    goto LABEL_62;
  }
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = a1 + 2;
  v94 = -1;
  v95 = -1;
  v93 = -1;
  while (2)
  {
    if (a1[v19] != 40 || a1[v22 + 1] != 42)
    {
      LODWORD(v38) = v22;
LABEL_62:
      v39 = &a1[v38];
      v40 = HIDWORD(v120);
      if ((HIDWORD(v120) & 0x80000) != 0)
      {
        if ((a3 & 0x1000) != 0)
        {
          v6 = 0;
          LODWORD(recurse) = 174;
LABEL_72:
          v107 = (int)recurse;
          goto LABEL_73;
        }
        v41 = HIDWORD(v120);
        if ((a3 & 0x40000000) == 0)
        {
          v97 = v23;
          v100 = v20;
          v103 = v21;
          LODWORD(recurse) = _pcre2_valid_utf_8(a1, v13, a5);
          v107 = (int)recurse;
          if ((_DWORD)recurse)
          {
            v6 = 0;
            v43 = v106;
            goto LABEL_155;
          }
          v41 = HIDWORD(v120);
          v20 = v100;
          v21 = v103;
          v23 = v97;
        }
      }
      else
      {
        v41 = HIDWORD(v120);
      }
      if ((~v41 & 0x20800) == 0)
      {
        v6 = 0;
        LODWORD(recurse) = 175;
        goto LABEL_72;
      }
      if (!v20)
        LOWORD(v20) = *((_WORD *)v106 + 28);
      if (!v21)
        v21 = *((unsigned __int16 *)v106 + 29);
      LODWORD(v124) = 0;
      switch(v21)
      {
        case 1:
          DWORD1(v124) = 1;
          v44 = 13;
          goto LABEL_82;
        case 2:
          DWORD1(v124) = 1;
          v44 = 10;
LABEL_82:
          LOBYTE(v125) = v44;
          break;
        case 3:
          DWORD1(v124) = 2;
          LOWORD(v125) = 2573;
          break;
        case 4:
          v45 = 1;
          goto LABEL_86;
        case 5:
          v45 = 2;
LABEL_86:
          LODWORD(v124) = v45;
          break;
        case 6:
          DWORD1(v124) = 1;
          LOBYTE(v125) = 0;
          break;
        default:
          v6 = 0;
          LODWORD(recurse) = 156;
          goto LABEL_72;
      }
      v98 = v23;
      v101 = v20;
      v104 = v21;
      v46 = v13 - v38;
      if ((v106[4] & 0xC) != 0)
        v46 += 4;
      if ((a3 & 4) != 0)
        v47 = 5 * v46 + 5;
      else
        v47 = v46;
      if (v47 <= 0x3FF)
      {
        v48 = v122;
      }
      else
      {
        v48 = (*(uint64_t (**)(unint64_t, _QWORD))v106)(4 * v47 + 4, *((_QWORD *)v106 + 2));
        if (!v48)
        {
          v6 = 0;
          *a4 = 121;
          v43 = v106;
          goto LABEL_156;
        }
        *(_QWORD *)&v122 = v48;
        v41 = HIDWORD(v120);
      }
      *((_QWORD *)&v122 + 1) = v48 + 4 * v47 + 4;
      LODWORD(recurse) = parse_regex(v39, v41, v127, (int *)&v113);
      v107 = (int)recurse;
      if ((_DWORD)recurse)
      {
        v6 = 0;
        v43 = v106;
LABEL_153:
        v39 = &a1[v118[11]];
        goto LABEL_154;
      }
      v49 = DWORD1(v121);
      v43 = v106;
      if (DWORD1(v121) <= 0xFF)
      {
        v50 = (void *)v123;
      }
      else
      {
        v50 = (void *)(*(uint64_t (**)(uint64_t, _QWORD))v106)(4 * (DWORD1(v121) + 1), *((_QWORD *)v106 + 2));
        *(_QWORD *)&v123 = v50;
        if (!v50)
        {
          v6 = 0;
          LODWORD(recurse) = 121;
          v107 = 121;
          v118[11] = 0;
          goto LABEL_153;
        }
        v49 = DWORD1(v121);
      }
      cstdlib_memset(v50, 0, 4 * (v49 + 1));
      if (v127[0])
      {
        LODWORD(recurse) = check_lookbehinds((uint64_t)&v113);
        v107 = (int)recurse;
        if ((_DWORD)recurse)
          goto LABEL_107;
      }
      v118[11] = v13;
      v111 = (unsigned int *)v122;
      v112 = v128;
      v128[0] = -125;
      compile_regex(HIDWORD(v120), &v112, &v111, &v107, 0, (_DWORD *)&v108 + 1, (int *)&v109 + 1, &v108, (int *)&v109, 0, (uint64_t)&v113, &v110);
      LODWORD(recurse) = v107;
      if (v107)
      {
LABEL_107:
        v6 = 0;
        goto LABEL_153;
      }
      if (v110 > 0x10000)
      {
        v6 = 0;
        LODWORD(recurse) = 120;
        v107 = 120;
        goto LABEL_153;
      }
      v91 = v40;
      v51 = v110 + WORD1(v119) * (unint64_t)(unsigned __int16)v119 + 136;
      v52 = (*(uint64_t (**)(unint64_t, _QWORD))v106)(v51, *((_QWORD *)v106 + 2));
      v6 = v52;
      if (!v52)
      {
        LODWORD(recurse) = 121;
        v107 = 121;
        goto LABEL_153;
      }
      v53 = v52 + 136;
      cstdlib_memset((void *)(v52 + 128), 0, 8uLL);
      v54 = *((_QWORD *)v106 + 2);
      *(_OWORD *)v6 = *v106;
      *(_QWORD *)(v6 + 16) = v54;
      *(_QWORD *)(v6 + 24) = v92;
      *(_QWORD *)(v6 + 32) = 0;
      cstdlib_memset((void *)(v6 + 40), 0, 0x20uLL);
      *(_QWORD *)(v6 + 72) = v51;
      *(_DWORD *)(v6 + 80) = 1346589253;
      *(_DWORD *)(v6 + 84) = a3;
      v55 = HIDWORD(v120);
      *(_DWORD *)(v6 + 88) = HIDWORD(v120);
      *(_DWORD *)(v6 + 92) = *((_DWORD *)v106 + 16);
      *(_DWORD *)(v6 + 96) = v98 | v121 | 1;
      *(_DWORD *)(v6 + 100) = v94;
      *(_DWORD *)(v6 + 104) = v93;
      *(_DWORD *)(v6 + 108) = v95;
      *(_QWORD *)(v6 + 112) = 0;
      *(_WORD *)(v6 + 120) = v101;
      *(_WORD *)(v6 + 122) = v104;
      *(_QWORD *)(v6 + 124) = 0;
      v56 = WORD1(v119);
      *(_WORD *)(v6 + 132) = WORD1(v119);
      v57 = (unsigned __int16)v119;
      *(_WORD *)(v6 + 134) = v119;
      v58 = (char *)(v53 + v57 * (unint64_t)v56);
      DWORD1(v119) = 0;
      DWORD2(v121) = 0;
      *((_QWORD *)&v117 + 1) = v6 + 136;
      *(_QWORD *)&v116 = v58;
      *((_QWORD *)&v125 + 1) = 0;
      LODWORD(v126) = 0;
      *((_QWORD *)&v119 + 1) = 0;
      if (v57)
      {
        v59 = 0;
        v60 = v120;
        do
        {
          add_name_to_table((uint64_t)&v113, *(void **)v60, *(unsigned __int16 *)(v60 + 12), *(_DWORD *)(v60 + 8), v59++);
          v60 += 16;
        }
        while (v59 < (unsigned __int16)v119);
        v55 = *(_DWORD *)(v6 + 88);
      }
      v111 = (unsigned int *)v122;
      v112 = v58;
      *v58 = -125;
      if ((compile_regex(v55, &v112, &v111, &v107, 0, (_DWORD *)&v108 + 1, (int *)&v109 + 1, &v108, (int *)&v109, 0, (uint64_t)&v113, 0) & 0x80000000) != 0)*(_DWORD *)(v6 + 96) |= 0x2000u;
      *(_WORD *)(v6 + 128) = WORD2(v121);
      *(_WORD *)(v6 + 130) = WORD4(v123);
      *(_WORD *)(v6 + 124) = WORD2(v125);
      if (HIDWORD(v125))
      {
        LODWORD(v108) = 0;
        LODWORD(v109) = -1;
      }
      v61 = v112;
      *v112 = 0;
      v112 = v61 + 1;
      v62 = v61 + 1 - v58;
      v63 = v62 > v110;
      v64 = v62 - v110;
      if (v63)
      {
        LODWORD(recurse) = 123;
LABEL_125:
        v107 = (int)recurse;
LABEL_152:
        v43 = v106;
        goto LABEL_153;
      }
      v105 = (v91 >> 19) & 1;
      *(_QWORD *)(v6 + 72) += v64;
      LODWORD(recurse) = v107;
      if (!v107)
      {
        if (DWORD1(v126))
        {
          recurse = find_recurse((unsigned __int8 *)v58, v105);
          if (recurse)
          {
            v65 = recurse;
            v66 = 0;
            v67 = 8;
            while (1)
            {
              v68 = __rev16(*(unsigned __int16 *)(v65 + 1));
              if (v68)
              {
                v69 = (unsigned __int8 *)v58;
                if (!v66)
                  goto LABEL_141;
                v70 = v66;
                v69 = (unsigned __int8 *)v58;
                v71 = v67;
                while (1)
                {
                  v72 = &v127[4 * v71 + 1];
                  v73 = v72[2];
                  if (v68 == v73)
                    break;
                  if (v68 > v73)
                    v69 = *(unsigned __int8 **)v72;
                  v71 = ((_BYTE)v71 + 1) & 7;
                  if (!--v70)
                    goto LABEL_141;
                }
                v74 = *(_QWORD *)v72;
                if (!*(_QWORD *)v72)
                {
LABEL_141:
                  bracket_8 = _pcre2_find_bracket_8(v69, v105, v68);
                  if (!bracket_8)
                  {
                    LODWORD(recurse) = 153;
                    v107 = 153;
                    break;
                  }
                  LODWORD(v74) = (_DWORD)bracket_8;
                  if (v67 >= 1)
                    --v67;
                  else
                    v67 = 7;
                  v76 = &v127[4 * v67 + 1];
                  v76[2] = v68;
                  *(_QWORD *)v76 = bracket_8;
                  if (v66 < 8)
                    ++v66;
                }
              }
              else
              {
                LODWORD(v74) = (_DWORD)v58;
              }
              *(_WORD *)(v65 + 1) = bswap32(v74 - (_DWORD)v58) >> 16;
              v65 = find_recurse(v65 + 3, v105);
              if (!v65)
              {
                LODWORD(recurse) = v107;
                break;
              }
            }
          }
        }
      }
      if ((_DWORD)recurse)
        goto LABEL_152;
      v77 = *(_DWORD *)(v6 + 88);
      if ((v77 & 0x4000) == 0)
      {
        if (_pcre2_auto_possessify_8((unsigned __int8 *)v58, v105, (uint64_t)&v113))
        {
          LODWORD(recurse) = 180;
          goto LABEL_125;
        }
        v77 = *(_DWORD *)(v6 + 88);
      }
      if ((v77 & 0x80000000) == 0 && is_anchored((unsigned __int8 *)v58, 0, (uint64_t)&v113, 0, 0))
      {
        v77 |= 0x80000000;
        *(_DWORD *)(v6 + 88) = v77;
      }
      if ((v77 & 0x10000) != 0)
      {
LABEL_204:
        v43 = v106;
        goto LABEL_156;
      }
      v78 = v91 & 0x80000;
      v79 = BYTE4(v109);
      if (v109 < 0)
      {
        firstassertedcu = find_firstassertedcu(v58, (int *)&v109 + 1, 0);
        HIDWORD(v108) = firstassertedcu;
        v79 = BYTE4(v109);
        if (v109 < 0)
        {
          if ((*(_DWORD *)(v6 + 88) & 0x80000000) != 0
            || !is_startline((unsigned __int8 *)v58, 0, (uint64_t)&v113, 0, 0))
          {
            goto LABEL_188;
          }
          v84 = *(_DWORD *)(v6 + 96) | 0x200;
          goto LABEL_187;
        }
      }
      else
      {
        firstassertedcu = HIDWORD(v108);
      }
      *(_DWORD *)(v6 + 112) = firstassertedcu;
      v81 = *(_DWORD *)(v6 + 96);
      *(_DWORD *)(v6 + 96) = v81 | 0x10;
      if ((v79 & 1) == 0
        || (!v78 ? (v82 = firstassertedcu >= 0xFF) : (v82 = 1),
            v82 ? (v83 = 0) : (v83 = 1),
            firstassertedcu >= 0x80 && !v83 || firstassertedcu == *(unsigned __int8 *)(v114 + firstassertedcu)))
      {
LABEL_188:
        v85 = v109;
        if ((v109 & 0x80000000) == 0 && ((v109 & 2) != 0 || (*(_DWORD *)(v6 + 88) & 0x80000000) == 0))
        {
          v86 = v108;
          *(_DWORD *)(v6 + 116) = v108;
          v87 = *(_DWORD *)(v6 + 96);
          *(_DWORD *)(v6 + 96) = v87 | 0x80;
          if ((v85 & 1) != 0)
          {
            v88 = v78 || v86 >= 0xFF;
            v89 = !v88;
            if ((v86 < 0x80 || v89) && (_DWORD)v86 != *(unsigned __int8 *)(v114 + v86))
              *(_DWORD *)(v6 + 96) = v87 | 0x180;
          }
        }
        if (_pcre2_study_8(v6))
        {
          LODWORD(recurse) = 131;
          goto LABEL_125;
        }
        goto LABEL_204;
      }
      v84 = v81 | 0x30;
LABEL_187:
      *(_DWORD *)(v6 + 96) = v84;
      goto LABEL_188;
    }
    v96 = v23;
    v99 = v20;
    v102 = v21;
    v25 = 0;
    v26 = v18 - v22;
    v90 = v22;
    v27 = &v24[v22];
    while (1)
    {
      v28 = LOWORD((&pso_list)[v25 + 1]);
      if (v26 >= v28
        && !_pcre2_strncmp_c8_8(v27, (unsigned __int8 *)(&pso_list)[v25], LOWORD((&pso_list)[v25 + 1])))
      {
        break;
      }
      v25 += 2;
      if (v25 == 42)
      {
        LODWORD(v38) = v90;
        v20 = v99;
        v21 = v102;
        v23 = v96;
        goto LABEL_62;
      }
    }
    v38 = v90 + v28 + 2;
    v29 = *((unsigned __int16 *)&pso_list + 4 * v25 + 5);
    v20 = v99;
    v21 = v102;
    v23 = v96;
    switch(*((_WORD *)&pso_list + 4 * v25 + 5))
    {
      case 0:
        HIDWORD(v120) |= *((_DWORD *)&pso_list + 2 * v25 + 3);
        goto LABEL_58;
      case 1:
        v23 = *((_DWORD *)&pso_list + 2 * v25 + 3) | v96;
        goto LABEL_58;
      case 2:
        v21 = *((_DWORD *)&pso_list + 2 * v25 + 3);
        v23 = v96 | 0x8000;
        goto LABEL_58;
      case 3:
        v20 = *((_DWORD *)&pso_list + 2 * v25 + 3);
        v23 = v96 | 0x4000;
        goto LABEL_58;
      case 4:
      case 5:
      case 6:
        v30 = a1[v38];
        if (v30 - 48 > 9)
        {
          v6 = 0;
          v39 = &a1[v38];
          LODWORD(recurse) = 160;
          goto LABEL_72;
        }
        v31 = 0;
        LODWORD(v38) = v90 + v28 + 3;
        v24 = a1 + 2;
        v18 = v13 - 2;
        do
        {
          if (v30 > 0x39 || v31 > 0x19999998)
            goto LABEL_109;
          v31 = v30 + 10 * v31 - 48;
          v30 = a1[v38];
          LODWORD(v38) = v38 + 1;
        }
        while (v30 > 0x2F);
        if (v30 == 41)
        {
          v33 = v94;
          v32 = v95;
          if (v29 == 4)
            v34 = v31;
          else
            v34 = v94;
          if (v29 == 4)
            v35 = v95;
          else
            v35 = v31;
          v36 = v29 == 5;
          if (v29 != 5)
            v33 = v34;
          v37 = v93;
          if (v36)
            v37 = v31;
          v93 = v37;
          v94 = v33;
          if (!v36)
            v32 = v35;
          v95 = v32;
LABEL_59:
          v19 = v38;
          v22 = v38;
          if (v13 - v38 <= 1)
            goto LABEL_62;
          continue;
        }
LABEL_109:
        v6 = 0;
        LODWORD(recurse) = 160;
        v107 = 160;
        v39 = &a1[v38];
LABEL_73:
        v43 = v106;
LABEL_154:
        *a5 = v39 - a1;
LABEL_155:
        *a4 = (int)recurse;
        pcre2_code_free_8(v6);
        v6 = 0;
LABEL_156:
        if ((_BYTE *)v122 != v130)
          (*((void (**)(_QWORD, _QWORD))v43 + 1))(v122, *((_QWORD *)v43 + 2));
        if (DWORD2(v120) >= 0x15)
          (*((void (**)(_QWORD, _QWORD))v43 + 1))(v120, *((_QWORD *)v43 + 2));
        if ((_QWORD *)v123 != v131)
          (*((void (**)(_QWORD, _QWORD))v43 + 1))(v123, *((_QWORD *)v43 + 2));
        return v6;
      default:
        v20 = v99;
        v21 = v102;
        v23 = v96;
LABEL_58:
        v24 = a1 + 2;
        v18 = v13 - 2;
        goto LABEL_59;
    }
  }
}

uint64_t parse_regex(unsigned __int8 *a1, unsigned int a2, _DWORD *a3, int *a4)
{
  int *v4;
  unsigned __int8 *v5;
  unsigned int *v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  _BOOL4 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned __int8 *v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int is_newline_8;
  uint64_t v80;
  unsigned __int8 *v81;
  int64_t v82;
  unsigned __int8 *v83;
  int v84;
  unsigned __int8 *v85;
  unsigned __int8 v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  unsigned __int8 *v94;
  unsigned int v95;
  unsigned __int16 *v96;
  int v97;
  unsigned __int16 v98;
  unsigned int v99;
  int v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unsigned __int8 *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unsigned int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  int v132;
  int *v133;
  unsigned int v134;
  uint64_t v135;
  unsigned __int8 *v137;
  uint64_t v138;
  uint64_t v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  int v142;
  unsigned __int8 *v143;
  int v144;
  int v145;
  unsigned __int8 *v147;
  uint64_t v148;
  int v149;
  int v150;
  unsigned int v151;
  int v152;
  int v153;
  int v154;
  unsigned int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  unsigned __int8 *v162;
  int v163;
  int v164;
  int v165;
  unsigned __int8 *v166;
  unsigned int v167;
  int v168;
  unsigned __int8 *v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int *v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int *v183;
  unsigned __int8 *v184;
  _DWORD *v185;
  int v186;
  int v187;
  uint64_t v188;
  unsigned __int8 *v189;
  unint64_t v190;
  int *v191;
  unsigned __int8 *v192;
  int v193;
  int v194;
  unsigned int v195;
  unsigned __int8 *v196;
  unsigned __int8 *v197;
  unsigned __int8 *v199;
  int v200;
  int v201;
  int v202;
  unsigned __int16 *v203;
  int v204;
  int v205;
  uint64_t v206;
  unsigned __int8 *v207;
  unsigned __int16 *v208;
  unsigned int *v209;
  int v210;
  uint64_t v211;
  int v212;
  int v213;
  int v214;
  unsigned int v215;
  int v216;
  uint64_t v217;
  __int16 v218;
  unsigned int v219;
  unsigned __int8 *v220;
  uint64_t v221;
  int v222;
  int v223;
  unsigned int v224;
  uint64_t v225;
  __int16 v226;
  void *v227;
  unsigned __int16 v228;
  int v229;
  int v230;
  unsigned __int8 *v231;
  unsigned __int8 *v232;
  unsigned __int8 *v233;
  unsigned __int8 *v234;
  int v235;
  int v236;
  unsigned __int8 *v237;
  uint64_t v238;
  int *v239;
  int v240;
  int v241;
  int *v242;
  int v243;
  char v244;
  unsigned __int8 *v245;
  unsigned int v246;
  int v247;
  int v248;
  int v249;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  unsigned __int8 *v258;
  unsigned __int8 *v259;
  unsigned __int8 *v260;
  int v261;
  int v262;
  int v263;
  unsigned __int8 *v264;
  unsigned __int8 v265;
  uint64_t v266;
  unsigned __int8 *v267;
  uint64_t v268;
  int v269;
  int v270;
  uint64_t v271;
  BOOL v272;
  int v273;
  unsigned __int8 *v274;
  unsigned int v275;
  unsigned __int8 *v276;
  int v277;
  int v278;
  int v279;
  unsigned int v280;
  int v281;
  unsigned __int8 *v282;
  int v283;
  int v284;
  int v285;
  int v286;
  unsigned __int8 *v287;
  int *v288;
  unsigned __int8 **v289;
  uint64_t v290;
  int v291;
  int v292;
  unsigned int v293;
  int v294;
  int v295;
  int v296;
  int v297;
  _BOOL4 v298;
  int v299;
  int v300;
  int v301;
  int v303;
  int v304;
  unsigned __int8 *v305;
  unsigned int v306;
  int v307;
  int v308;
  int v309;
  int v310;
  __int16 v311;
  _DWORD *v312;
  int v313;
  int v314;
  int v315;
  unsigned __int8 *v317;
  int v318;
  int v319;
  int v320;
  unsigned int v321;
  unsigned int v322;
  unsigned __int8 *v323;
  unsigned __int8 *v324;
  unsigned __int8 *v325;
  unsigned __int8 *v326;
  unsigned int v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  unsigned int v333;
  unsigned int v334;
  _BOOL4 v335;
  unsigned int v336;
  _BOOL4 v337;
  unsigned int v338;
  unsigned int v339;
  unsigned int v340;
  unint64_t v341;
  int v343;
  unsigned __int8 *v344;
  int *v345;
  unsigned __int16 *v346;
  char *v347;
  unsigned int v348;
  int v349;
  uint64_t v350;
  int v351;
  unint64_t v352;
  unsigned __int8 *v353;
  int v354;
  unsigned __int8 *v355;
  unsigned __int8 *v356;
  uint64_t v357;
  uint64_t v358;
  unsigned __int8 *v359;
  uint64_t v360;
  unsigned int *v361;
  unsigned int v362;
  int v363;
  unsigned __int8 *v364[2];

  v4 = a4;
  v5 = a1;
  v364[0] = a1;
  v362 = 0;
  v360 = 0;
  v361 = 0;
  v6 = (unsigned int *)*((_QWORD *)a4 + 28);
  v352 = *((_QWORD *)a4 + 29);
  v351 = a2 & 0x80000;
  v7 = (a2 >> 2) & 1;
  v359 = 0;
  v8 = (unsigned __int8 *)*((_QWORD *)a4 + 8);
  v9 = *(_DWORD *)(*(_QWORD *)a4 + 64);
  v10 = -2146893824;
  if ((v9 & 8) == 0)
  {
    if ((v9 & 4) == 0)
      goto LABEL_5;
    v10 = -2145910779;
  }
  *v6 = v10;
  v6[1] = -2145779712;
  v6 += 2;
LABEL_5:
  v363 = 0;
  if ((a2 & 0x2000000) != 0)
  {
    if (v8 <= a1)
      goto LABEL_756;
    v304 = a2 & 4;
    while (1)
    {
      if ((unint64_t)v6 >= v352)
        goto LABEL_765;
      v305 = v5 + 1;
      v364[0] = v5 + 1;
      v306 = *v5;
      v363 = v306;
      if (!v351 || v306 < 0xC0)
        goto LABEL_744;
      if ((v306 & 0x20) == 0)
        break;
      v307 = *v305 & 0x3F;
      if ((v306 & 0x10) != 0)
      {
        if ((v306 & 8) != 0)
        {
          v308 = v5[2] & 0x3F;
          v309 = v5[3] & 0x3F;
          v310 = v5[4] & 0x3F;
          if ((v306 & 4) != 0)
          {
            v306 = ((v306 & 1) << 30) | (v307 << 24) | (v308 << 18) | (v309 << 12) | (v310 << 6) | v5[5] & 0x3F;
            v363 = v306;
            v305 = v5 + 6;
          }
          else
          {
            v305 = v5 + 5;
            v306 = ((v306 & 3) << 24) | (v307 << 18) | (v308 << 12) | (v309 << 6) | v310;
            v363 = v306;
          }
        }
        else
        {
          v306 = ((v306 & 7) << 18) | (v307 << 12) | ((v5[2] & 0x3F) << 6) | v5[3] & 0x3F;
          v363 = v306;
          v305 = v5 + 4;
        }
      }
      else
      {
        v306 = ((v306 & 0xF) << 12) | (v307 << 6) | v5[2] & 0x3F;
        v363 = v306;
        v305 = v5 + 3;
      }
      v364[0] = v305;
      if (v304)
      {
LABEL_754:
        v6 = manage_callouts((int)v5, &v361, v7, v6, (uint64_t)v4);
        v306 = v363;
        v5 = v364[0];
        goto LABEL_755;
      }
LABEL_745:
      v5 = v305;
LABEL_755:
      *v6++ = v306;
      if (v5 >= v8)
        goto LABEL_756;
    }
    v305 = v5 + 2;
    v364[0] = v5 + 2;
    v363 = v5[1] & 0x3F | ((v306 & 0x1F) << 6);
    v306 = v363;
LABEL_744:
    if (v304)
      goto LABEL_754;
    goto LABEL_745;
  }
  if (v8 <= a1)
  {
LABEL_756:
    LOWORD(v17) = 0;
    goto LABEL_757;
  }
  v348 = 0;
  v349 = (a2 >> 2) & 1;
  v346 = 0;
  v347 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v343 = (a2 >> 19) & 1;
  v341 = *((_QWORD *)v4 + 5) + 12 * (*((_QWORD *)v4 + 10) / 0xCuLL);
  v19 = (a2 >> 17) & 0x80 | a2;
  v344 = v8 - 1;
  v345 = v4 + 65;
  v350 = (uint64_t)v4;
LABEL_8:
  v357 = 0;
  v358 = 0;
  v355 = 0;
  v356 = 0;
  if ((unint64_t)v6 >= v352)
  {
    v319 = 163;
    goto LABEL_775;
  }
  if (*(_DWORD *)(*(_QWORD *)v4 + 60) < (unsigned __int16)v17)
  {
    v319 = 119;
    goto LABEL_775;
  }
  v20 = v5 + 1;
  v364[0] = v5 + 1;
  v21 = *v5;
  v363 = v21;
  if (!v351 || v21 < 0xC0)
    goto LABEL_14;
  if ((v21 & 0x20) == 0)
  {
    v20 = v5 + 2;
    v364[0] = v5 + 2;
    v363 = v5[1] & 0x3F | ((v21 & 0x1F) << 6);
    v21 = v363;
LABEL_14:
    if (v14)
      goto LABEL_15;
    goto LABEL_38;
  }
  v24 = *v20 & 0x3F;
  if ((v21 & 0x10) != 0)
  {
    if ((v21 & 8) != 0)
    {
      v32 = v5[2] & 0x3F;
      v33 = v5[3] & 0x3F;
      v34 = v5[4] & 0x3F;
      if ((v21 & 4) != 0)
      {
        v21 = ((v21 & 1) << 30) | (v24 << 24) | (v32 << 18) | (v33 << 12) | (v34 << 6) | v5[5] & 0x3F;
        v363 = v21;
        v20 = v5 + 6;
      }
      else
      {
        v20 = v5 + 5;
        v21 = ((v21 & 3) << 24) | (v24 << 18) | (v32 << 12) | (v33 << 6) | v34;
        v363 = v21;
      }
    }
    else
    {
      v21 = ((v21 & 7) << 18) | (v24 << 12) | ((v5[2] & 0x3F) << 6) | v5[3] & 0x3F;
      v363 = v21;
      v20 = v5 + 4;
    }
  }
  else
  {
    v21 = ((v21 & 0xF) << 12) | (v24 << 6) | v5[2] & 0x3F;
    v363 = v21;
    v20 = v5 + 3;
  }
  v364[0] = v20;
  if (v14)
  {
LABEL_15:
    if (v21 != 92 || v20 >= v8 || *v20 != 69)
    {
      if ((int)v15 < 1)
      {
        if ((_DWORD)v13)
        {
          v23 = v16;
        }
        else
        {
          v23 = (v16 - 1);
          if ((int)v16 <= 0)
          {
            v25 = (int)v5;
            v26 = v11;
            v27 = v15;
            v28 = v19;
            v29 = v13;
            v30 = v17;
            v31 = manage_callouts(v25, &v361, v349, v6, (uint64_t)v4);
            v11 = v26;
            v15 = v27;
            v19 = v28;
            v17 = v30;
            v13 = v29;
            v6 = v31;
            v21 = v363;
          }
        }
        v18 = 0;
        *v6++ = v21;
        v14 = 1;
        v16 = v23;
        goto LABEL_29;
      }
      v317 = v20 - 1;
LABEL_774:
      v364[0] = v317;
      v319 = 128;
      goto LABEL_775;
    }
    v14 = 0;
    goto LABEL_19;
  }
LABEL_38:
  if (!(_DWORD)v13)
  {
LABEL_51:
    if (v21 != 92)
      goto LABEL_57;
    if (v20 >= v8 || (v35 = *v20, v35 != 81) && v35 != 69)
    {
      v21 = 92;
      goto LABEL_57;
    }
    v14 = v35 == 81;
LABEL_19:
    v22 = v20 + 1;
    goto LABEL_20;
  }
  if ((~(_DWORD)v19 & 0x400080) != 0)
    goto LABEL_47;
  if (v21 < 0x100)
  {
    if (v21 == 35)
      goto LABEL_57;
    if (v21 != 133 && (*(_BYTE *)(*((_QWORD *)v4 + 4) + v21) & 1) == 0)
    {
LABEL_47:
      if (v21 == 41)
      {
        if ((uint64_t)&v20[~(unint64_t)v11] >= 256)
        {
          v364[0] = v20 - 1;
          v319 = 176;
          goto LABEL_775;
        }
        *(_DWORD *)v347 = ((unint64_t)((char *)v6 - v347) >> 2) - 1;
        if (v348)
        {
          v14 = 0;
          v13 = 0;
          v12 = 0;
          *v6++ = v348;
          v348 = 0;
          goto LABEL_30;
        }
        v348 = 0;
        v14 = 0;
        v13 = 0;
        goto LABEL_94;
      }
      if (v21 != 92)
        goto LABEL_117;
      if ((v19 & 0x400000) == 0)
      {
        v21 = 92;
LABEL_117:
        v14 = 0;
        *v6++ = v21;
        v13 = 1;
        goto LABEL_29;
      }
      v61 = v15;
      v62 = v11;
      v63 = v19;
      v64 = v17;
      v65 = _pcre2_check_escape_8(v364, (unint64_t)v8, &v363, (int *)&v360 + 1, v19, 0, v4);
      if (HIDWORD(v360))
        goto LABEL_776;
      v17 = v64;
      if (v65 == 26)
      {
        v14 = 1;
        v19 = v63;
        v11 = v62;
        v4 = (int *)v350;
        v15 = v61;
      }
      else
      {
        v19 = v63;
        v11 = v62;
        v4 = (int *)v350;
        v15 = v61;
        if (v65 != 25)
        {
          if (v65)
          {
            v319 = 140;
            goto LABEL_775;
          }
          v21 = v363;
          goto LABEL_117;
        }
        v14 = 0;
      }
      v13 = 1;
      goto LABEL_30;
    }
    goto LABEL_51;
  }
  if ((v21 | 1) != 0x200F && (v21 | 1) != 0x2029)
    goto LABEL_47;
LABEL_57:
  if ((v19 & 0x80) == 0)
  {
    if ((int)v21 <= 62)
    {
      if (v21 - 42 < 2)
        goto LABEL_81;
      goto LABEL_60;
    }
LABEL_75:
    if (v21 == 63)
      goto LABEL_81;
    if (v21 == 123)
    {
      v356 = v20;
      v335 = v12;
      v37 = v18;
      v18 = v16;
      v38 = v13;
      v39 = v11;
      v40 = v19;
      v41 = v15;
      v42 = v17;
      v43 = read_repeat_counts(&v356, (unint64_t)v8, 0, 0, (int *)&v360 + 1);
      LODWORD(v15) = v41;
      v19 = v40;
      v11 = v39;
      v13 = v38;
      v16 = v18;
      LODWORD(v18) = v37;
      v12 = v335;
      v4 = (int *)v350;
      v17 = v42;
      if (v43)
        goto LABEL_81;
    }
    goto LABEL_78;
  }
  if (v21 <= 0xFF)
  {
    v14 = 0;
    if (v21 == 133 || (*(_BYTE *)(*((_QWORD *)v4 + 4) + v21) & 1) != 0)
      goto LABEL_30;
  }
  v14 = 0;
  if ((v21 | 1) == 0x200F || (v21 | 1) == 0x2029)
    goto LABEL_30;
  if ((int)v21 > 41)
  {
    if (v21 - 42 < 2)
      goto LABEL_81;
    goto LABEL_75;
  }
  if (v21 == 35)
  {
    if (v20 >= v8)
    {
LABEL_153:
      v14 = 0;
      goto LABEL_30;
    }
    v337 = v12;
    while (1)
    {
      v71 = v4[64];
      v72 = *((_QWORD *)v4 + 8);
      if (v71)
      {
        if ((unint64_t)v20 < v72)
        {
          v73 = v18;
          v74 = v16;
          v75 = v11;
          v76 = v15;
          v77 = v19;
          v78 = v17;
          is_newline_8 = _pcre2_is_newline_8(v20, v71, v72, v345, v343);
          v20 = v364[0];
          if (is_newline_8)
          {
            v80 = *v345;
            v17 = v78;
            v19 = v77;
            v15 = v76;
            v11 = v75;
            v16 = v74;
            v18 = v73;
            v12 = v337;
            goto LABEL_491;
          }
          v17 = v78;
          v19 = v77;
          v15 = v76;
          v11 = v75;
          v16 = v74;
          v18 = v73;
          v12 = v337;
        }
      }
      else
      {
        v80 = *v345;
        if ((unint64_t)v20 <= v72 - v80 && *v20 == *((unsigned __int8 *)v4 + 272))
        {
          if ((_DWORD)v80 == 1)
          {
            v80 = 1;
LABEL_491:
            v14 = 0;
            v22 = &v20[v80];
LABEL_20:
            v364[0] = v22;
            goto LABEL_30;
          }
          if (v20[1] == *((unsigned __int8 *)v4 + 273))
            goto LABEL_491;
        }
      }
      v81 = v20 + 1;
      v364[0] = v20 + 1;
      if (v351 && v81 < v8)
      {
        v82 = v344 - v20;
        do
        {
          if ((*v81 & 0xC0) != 0x80)
            goto LABEL_152;
          v364[0] = ++v81;
          --v82;
        }
        while (v82);
        v81 = v8;
      }
LABEL_152:
      v20 = v81;
      if (v81 >= v8)
        goto LABEL_153;
    }
  }
LABEL_60:
  if (v21 == 40 && v8 - v20 >= 2 && *v20 == 63 && v20[1] == 35)
  {
    v22 = v20 + 1;
    while (1)
    {
      v364[0] = v22;
      if (v22 >= v8)
        break;
      v36 = *v22++;
      if (v36 == 41)
      {
        v14 = 0;
        goto LABEL_20;
      }
    }
    v319 = 118;
    goto LABEL_775;
  }
LABEL_78:
  v44 = (v16 - 1);
  if ((int)v16 <= 0)
  {
    v45 = (int)v5;
    v46 = v13;
    v47 = v18;
    v48 = v15;
    v49 = v11;
    v50 = v6;
    v51 = v19;
    v52 = v17;
    v53 = manage_callouts(v45, &v361, v349, v50, (uint64_t)v4);
    v11 = v49;
    LODWORD(v15) = v48;
    LODWORD(v18) = v47;
    v13 = v46;
    v19 = v51;
    v17 = v52;
    v6 = v53;
  }
  v16 = v44;
LABEL_81:
  if ((int)v15 < 1)
    goto LABEL_98;
  if (v363 != 40 || v8 - v364[0] < 3 || *v364[0] != 63)
  {
LABEL_773:
    v317 = v364[0] - 1;
    goto LABEL_774;
  }
  v54 = v364[0][1];
  if (v54 > 0x3C)
  {
    if (v54 != 61 && (v54 != 67 || (_DWORD)v15 != 2))
      goto LABEL_773;
  }
  else if (v54 != 33)
  {
    if (v54 != 60)
      goto LABEL_773;
    v55 = v364[0][2];
    if (v55 != 33 && v55 != 61)
      goto LABEL_773;
  }
LABEL_98:
  if ((_DWORD)v18)
  {
    if (v363 <= 62)
    {
      v56 = 2150694912;
      switch(v363)
      {
        case '$':
          goto LABEL_103;
        case '(':
          goto LABEL_154;
        case ')':
          goto LABEL_164;
        case '*':
          goto LABEL_229;
        case '+':
          goto LABEL_106;
        case '.':
          goto LABEL_172;
        default:
          goto LABEL_184;
      }
    }
    if (v363 <= 93)
    {
      if (v363 == 63)
      {
LABEL_106:
        v15 = 0;
        v14 = 0;
        v12 = 0;
        if (v363 == 63)
          v58 = 0x20000;
        else
          v58 = 0x10000;
        v59 = v58 + v18;
        v60 = 0x3FFFFFFFFFFFFFFFLL;
        if ((_DWORD)v18 == -2143682560)
          v60 = 0x3FFFFFFFFFFFFFFDLL;
        v6[v60] = v59;
        v18 = 0;
        goto LABEL_30;
      }
      goto LABEL_120;
    }
LABEL_124:
    if (v363 == 94)
    {
      v18 = 0;
      v15 = 0;
      v14 = 0;
      v12 = 0;
      v57 = -2146893824;
      goto LABEL_188;
    }
    if (v363 != 123)
    {
      if (v363 != 124)
      {
LABEL_184:
        v18 = 0;
        v15 = 0;
        v14 = 0;
        *v6++ = v363;
        goto LABEL_29;
      }
      if (v346 && *v346 == (unsigned __int16)v17 && (v346[3] & 1) != 0)
      {
        v70 = v4[53];
        if (v70 > v346[2])
          v346[2] = v70;
        v4[53] = v346[1];
      }
      v18 = 0;
      v15 = 0;
      v14 = 0;
      v12 = 0;
      v57 = -2147418112;
LABEL_188:
      *v6++ = v57;
      goto LABEL_30;
    }
    v107 = v11;
    v108 = v19;
    v109 = v17;
    if (read_repeat_counts(v364, (unint64_t)v8, (unsigned int *)&v358 + 1, (unsigned int *)&v358, (int *)&v360 + 1))
    {
      v56 = 2151284736;
      v17 = v109;
      v19 = v108;
      v11 = v107;
LABEL_229:
      if (v12)
      {
        *v6 = v56;
        v15 = 0;
        v14 = 0;
        v12 = 0;
        if (v363 == 123)
        {
          v128 = v358;
          v6[1] = HIDWORD(v358);
          v6[2] = v128;
          v6 += 3;
        }
        else
        {
          ++v6;
        }
        v18 = v56;
        goto LABEL_30;
      }
      v318 = 109;
      goto LABEL_785;
    }
    v14 = HIDWORD(v360);
    if (HIDWORD(v360))
      goto LABEL_776;
    v17 = v109;
    v18 = 0;
    v15 = 0;
    *v6++ = 123;
    goto LABEL_237;
  }
  if (v363 <= 62)
  {
    v56 = 2150694912;
    switch(v363)
    {
      case '$':
LABEL_103:
        v18 = 0;
        v15 = 0;
        v14 = 0;
        v12 = 0;
        v57 = -2146041856;
        goto LABEL_188;
      case '(':
LABEL_154:
        v83 = v364[0];
        if (v364[0] >= v8)
          goto LABEL_764;
        v84 = *v364[0];
        if (v84 == 42)
        {
          if (v8 - v364[0] < 2 || v364[0][1] == 41)
            goto LABEL_388;
          v322 = v16;
          v329 = v13;
          v333 = v17;
          v325 = v11;
          v338 = v19;
          if (!read_name(v364, v8, 0, &v355, &v359, &v362, (int *)&v360 + 1, (uint64_t)v4))
            goto LABEL_776;
          if (v364[0] >= v8 || (v187 = *v364[0], v187 != 41) && v187 != 58)
          {
LABEL_782:
            v319 = 160;
            goto LABEL_775;
          }
          v188 = v362;
          v189 = v359;
          v190 = -2;
          v191 = &dword_214F43C70;
          v192 = (unsigned __int8 *)&verbnames;
          v4 = (int *)v350;
          while (1)
          {
            v193 = *(v191 - 1);
            if ((_DWORD)v188 == v193)
            {
              v194 = _pcre2_strncmp_c8_8(v189, v192, v188);
              v17 = v333;
              v19 = v338;
              if (!v194)
                break;
            }
            v192 += (v193 + 1);
            v191 += 3;
            if (++v190 == 7)
              goto LABEL_782;
          }
          v195 = v190 + 2;
          LODWORD(v360) = v190 + 2;
          v196 = v364[0];
          v197 = v364[0] + 1;
          if (*v364[0] != 58 || v197 >= v8)
          {
            v11 = v325;
            v13 = v329;
            v16 = v322;
          }
          else
          {
            v11 = v325;
            v13 = v329;
            v16 = v322;
            if (*v197 == 41)
            {
              ++v364[0];
              ++v196;
            }
          }
          if (v195 <= 1 && *v196 != 58)
          {
            v319 = 166;
            goto LABEL_775;
          }
          v199 = v196 + 1;
          v364[0] = v196 + 1;
          if (*v196 == 58)
          {
            v18 = 0;
            v15 = 0;
            v14 = 0;
            v12 = 0;
            v200 = *v191 + ((v195 > 1) << 16);
            if (v190 < 3)
              v200 = -2144993280;
            v201 = v348;
            if (v190 < 3)
              v201 = *v191;
            v348 = v201;
            v347 = (char *)(v6 + 1);
            *v6 = v200;
            v6 += 2;
            v13 = 1;
            v11 = v199;
            goto LABEL_30;
          }
          v18 = 0;
          v15 = 0;
          v14 = 0;
          v12 = 0;
          v57 = *v191;
          goto LABEL_188;
        }
        if (v84 != 63)
        {
          v17 = (v17 + 1);
          v18 = 0;
          v15 = 0;
          v14 = 0;
          v12 = 0;
          if ((v19 & 0x2000) != 0)
          {
            v57 = -2145779712;
          }
          else
          {
            v182 = v4[53] + 1;
            v4[53] = v182;
            v57 = v182 | 0x80080000;
          }
          goto LABEL_188;
        }
        v85 = ++v364[0];
        if (v83 + 1 >= v8)
        {
LABEL_764:
          v315 = 114;
          goto LABEL_766;
        }
        break;
      case ')':
LABEL_164:
        v96 = v346;
        if (v346 && *v346 == (unsigned __int16)v17)
        {
          v97 = *((_DWORD *)v346 + 2);
          v98 = v346[3];
          if ((v98 & 1) != 0)
          {
            v99 = v346[2];
            if (v4[53] < v99)
              v4[53] = v99;
          }
          v19 = v97 | v19 & 0xFEFBDB17;
          v12 = (v98 & 2) == 0;
          if (v346 == *((unsigned __int16 **)v4 + 5))
            v96 = 0;
          else
            v96 = v346 - 6;
        }
        else
        {
          v12 = 1;
        }
        if (!(_WORD)v17)
        {
          v318 = 122;
          goto LABEL_785;
        }
        v346 = v96;
        v18 = 0;
        v15 = 0;
        v14 = 0;
        v17 = (v17 - 1);
        v57 = -2145845248;
        goto LABEL_188;
      case '*':
        goto LABEL_229;
      case '+':
        v56 = 2150891520;
        goto LABEL_229;
      case '.':
LABEL_172:
        v18 = 0;
        v15 = 0;
        v14 = 0;
        v100 = -2145976320;
        goto LABEL_173;
      default:
        goto LABEL_184;
    }
    v86 = *v85;
    v87 = -1;
    switch(*v85)
    {
      case '!':
        v202 = -2145189888;
        goto LABEL_451;
      case '&':
        goto LABEL_468;
      case '\'':
        goto LABEL_475;
      case '(':
        v364[0] = v83 + 2;
        if (v83 + 2 >= v8)
          goto LABEL_764;
        v17 = (v17 + 1);
        if (v83[2] == 63)
        {
          v18 = 0;
          v14 = 0;
          v12 = 0;
          *v6++ = -2146500608;
          v364[0] = v83 + 1;
          v15 = 2;
          goto LABEL_30;
        }
        v231 = v11;
        v334 = v17;
        v340 = v19;
        if (read_number(v364, (unint64_t)v8, v4[53], 0xFFFFu, 161, (int *)&v360, (int *)&v360 + 1))
        {
          if ((int)v360 <= 0)
          {
            v319 = 115;
            goto LABEL_775;
          }
          v232 = v8;
          *v6 = -2146304000;
          v233 = v364[0];
          v234 = &v364[0][-*(_QWORD *)(v350 + 56) - 2];
          v355 = v234;
          v6[1] = HIDWORD(v234);
          v6[2] = v234;
          v6[3] = v360;
LABEL_625:
          v6 += 4;
          goto LABEL_626;
        }
        if (HIDWORD(v360))
          goto LABEL_776;
        v260 = v364[0];
        v232 = v8;
        if (v8 - v364[0] >= 10)
        {
          v261 = _pcre2_strncmp_c8_8(v364[0], "VERSION", 7);
          v260 = v364[0];
          if (!v261 && v364[0][7] != 41)
          {
            v364[0] += 7;
            v269 = v260[7];
            if (v269 == 62)
            {
              v269 = v260[8];
              v364[0] = v260 + 8;
              v270 = 1;
              v271 = 8;
            }
            else
            {
              v270 = 0;
              v271 = 7;
            }
            if (v269 != 61)
              goto LABEL_814;
            v274 = &v260[v271 + 1];
            v364[0] = v274;
            if (*v274 - 48 > 9)
              goto LABEL_814;
            HIDWORD(v360) = 0;
            if (v274 >= v8)
              goto LABEL_776;
            v275 = 0;
            v276 = &v260[v271 + 2];
            while (1)
            {
              v233 = v276 - 1;
              if (v276 - 1 >= v8)
                break;
              v277 = *v233;
              if ((v277 - 48) > 9)
              {
                v364[0] = v276 - 1;
                if (*(v276 - 1) != 46)
                {
                  v279 = 0;
                  goto LABEL_647;
                }
                v364[0] = v276;
                if (v276 < v8 && *v276 - 48 <= 9)
                {
                  v233 = v276 + 1;
                  v364[0] = v276 + 1;
                  v278 = 10 * *v276;
                  if (v276[1] - 48 > 9)
                  {
                    v279 = v278 - 480;
                  }
                  else
                  {
                    v233 = v276 + 2;
                    v364[0] = v276 + 2;
                    v279 = v278 + v276[1] - 528;
                  }
                  if (v233 < v8 && *v233 == 41)
                  {
LABEL_647:
                    *v6 = -2146107392;
                    v6[1] = v270;
                    v6[2] = v275;
                    v6[3] = v279;
                    goto LABEL_625;
                  }
                }
LABEL_814:
                v319 = 179;
                goto LABEL_775;
              }
              v275 = v277 + 10 * v275 - 48;
              ++v276;
              if (v275 >= 0x3E9)
              {
                HIDWORD(v360) = 179;
                v364[0] = v276 - 1;
                goto LABEL_776;
              }
            }
            v364[0] = v276 - 1;
            goto LABEL_814;
          }
        }
        v262 = *v260;
        if (v262 == 82 && v8 - v260 >= 2)
        {
          if (v260[1] == 38)
          {
            v364[0] = v260 + 1;
            if (!read_name(v364, v8, 0x29u, &v355, &v359, &v362, (int *)&v360 + 1, v350))
              goto LABEL_776;
            v263 = -2146238464;
            goto LABEL_623;
          }
LABEL_601:
          v364[0] = v260 - 1;
          if (!read_name(v364, v8, 0x29u, &v355, &v359, &v362, (int *)&v360 + 1, v350))
            goto LABEL_776;
          v266 = v362;
          v267 = v359;
          if (v362 == 6)
          {
            if (!_pcre2_strncmp_c8_8(v359, "DEFINE", 6))
            {
              *v6 = -2146435072;
              v233 = --v364[0];
              *(_QWORD *)(v6 + 1) = __ROR8__(v355, 32);
              v6 += 3;
LABEL_626:
              if (v233 >= v232 || *v233 != 41)
              {
                v319 = 124;
                goto LABEL_775;
              }
              v8 = v232;
              v15 = 0;
              v14 = 0;
              v364[0] = v233 + 1;
              v17 = v334;
              v19 = v340;
              v11 = v231;
              v18 = 0;
              v12 = 0;
LABEL_238:
              v4 = (int *)v350;
              goto LABEL_30;
            }
          }
          else if ((int)v362 < 2)
          {
            LODWORD(v268) = 1;
LABEL_616:
            LODWORD(v360) = v268;
            v272 = *v267 != 82 || (int)v268 < (int)v266;
            if (v272)
              v273 = -458752;
            else
              v273 = -262144;
            v263 = v273 - 2145910784;
LABEL_623:
            *v6 = v263;
            v233 = --v364[0];
LABEL_624:
            v6[1] = v362;
            *((_QWORD *)v6 + 1) = __ROR8__(v355, 32);
            goto LABEL_625;
          }
          v268 = 1;
          do
          {
            if (v267[v268] - 48 > 9)
              goto LABEL_616;
            ++v268;
          }
          while (v266 != v268);
          LODWORD(v268) = v266;
          goto LABEL_616;
        }
        if (v262 == 60)
        {
          v265 = 62;
        }
        else
        {
          if (v262 != 39)
            goto LABEL_601;
          v265 = 39;
        }
        if (!read_name(v364, v8, v265, &v355, &v359, &v362, (int *)&v360 + 1, v350))
          goto LABEL_776;
        *v6 = -2146369536;
        v233 = v364[0];
        goto LABEL_624;
      case '+':
        if (v8 - v85 >= 2 && v83[2] - 48 < 0xA)
          goto LABEL_439;
        v319 = 129;
        goto LABEL_775;
      case '-':
        if (v8 - v85 < 2 || v83[2] - 48 >= 0xA)
          goto LABEL_440;
LABEL_439:
        v87 = v4[53];
LABEL_159:
        v88 = v16;
        v89 = v13;
        v90 = v11;
        v91 = v19;
        v92 = v17;
        if (!read_number(v364, (unint64_t)v8, v87, 0xFFFFu, 161, (int *)&v360, (int *)&v360 + 1))
          goto LABEL_776;
        v93 = v360;
        if ((v360 & 0x80000000) != 0)
        {
          HIDWORD(v360) = 115;
          v4 = (int *)v350;
          goto LABEL_786;
        }
        v94 = v364[0];
        v4 = (int *)v350;
        if (v364[0] >= v8)
          goto LABEL_764;
        v17 = v92;
        v19 = v91;
        v11 = v90;
        v13 = v89;
        v16 = v88;
        if (*v364[0] != 41)
          goto LABEL_764;
LABEL_163:
        v18 = 0;
        v15 = 0;
        v14 = 0;
        *v6 = v93 | 0x80200000;
        v355 = &v94[-*((_QWORD *)v4 + 7)];
        v95 = v355;
        v364[0] = v94 + 1;
        v6[1] = HIDWORD(v355);
        v6[2] = v95;
        goto LABEL_676;
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        goto LABEL_159;
      case '<':
        if (v8 - v85 < 2)
          goto LABEL_474;
        v204 = v83[2];
        if (v204 != 61 && v204 != 33)
          goto LABEL_474;
        if (v204 == 61)
          v205 = -2145124352;
        else
          v205 = -2145058816;
        *v6 = v205;
        *a3 = 1;
        v206 = (uint64_t)&v85[-*((_QWORD *)v4 + 7) - 2];
        v355 = (unsigned __int8 *)v206;
        v6[1] = HIDWORD(v206);
        v6[2] = v206;
        v6 += 3;
        v207 = v83 + 3;
LABEL_452:
        v364[0] = v207;
        v17 = (v17 + 1);
        if ((int)v15 < 1)
          goto LABEL_388;
        if (v346)
        {
          v208 = v346 + 6;
          if ((unint64_t)(v346 + 6) >= v341)
            goto LABEL_799;
        }
        else
        {
          v208 = (unsigned __int16 *)*((_QWORD *)v4 + 5);
        }
        v18 = 0;
        v15 = 0;
        v14 = 0;
        v12 = 0;
        *v208 = v17;
        v208[3] = 2;
        v346 = v208;
        *((_DWORD *)v208 + 2) = v19 & 0x10424E8;
        goto LABEL_30;
      case '=':
        v202 = -2145255424;
LABEL_451:
        *v6++ = v202;
        v207 = v83 + 2;
        goto LABEL_452;
      case '>':
        v18 = 0;
        v15 = 0;
        v14 = 0;
        v12 = 0;
        *v6++ = -2147352576;
        v17 = (v17 + 1);
        v22 = v83 + 2;
        goto LABEL_20;
      case 'C':
        v85 = v83 + 2;
        v364[0] = v83 + 2;
        if (v83 + 2 >= v8)
          goto LABEL_764;
        if (v361 && (v19 & 4) != 0 && v361 == v6 - 4)
        {
          if (*(v6 - 1) == 255)
            v209 = v361;
          else
            v209 = v6;
        }
        else
        {
          v209 = v6;
        }
        v361 = v209;
        v235 = *v85;
        if (v235 == 41 || (v235 - 48) < 0xA)
        {
          v237 = v11;
          v240 = 0;
          *v209 = -2147090432;
          while (v85 < v8 && *v85 - 48 <= 9)
          {
            v364[0] = v85 + 1;
            v241 = *v85 + 10 * v240;
            v240 = v241 - 48;
            ++v85;
            if (v241 > 303)
            {
              v319 = 138;
              goto LABEL_775;
            }
          }
          v6 = v209 + 4;
          v209[3] = v240;
          goto LABEL_594;
        }
        v236 = 96;
        v237 = v11;
        v238 = 0;
        while (v236 != v235)
        {
          v239 = &_pcre2_callout_start_delims_8[v238++];
          v236 = v239[1];
          if (!v236)
            goto LABEL_796;
        }
        LODWORD(v360) = v238;
        v257 = _pcre2_callout_end_delims_8[v238];
        if (!v257)
        {
LABEL_796:
          v319 = 182;
          goto LABEL_775;
        }
        *v209 = -2147024896;
        v258 = v83 + 3;
        v364[0] = v83 + 3;
        v259 = v83 + 2;
        while (v258 < v8)
        {
          if (v257 == *v258)
          {
            v258 = v259 + 2;
            v364[0] = v259 + 2;
            if (v259 + 2 >= v8 || v257 != *v258)
            {
              if ((unint64_t)(v258 - v85) >> 32)
              {
                v319 = 172;
                goto LABEL_775;
              }
              v209[3] = (_DWORD)v258 - (_DWORD)v85;
              v264 = &v85[-*(_QWORD *)(v350 + 56)];
              v355 = v264;
              v6 = v209 + 6;
              v209[4] = HIDWORD(v264);
              v209[5] = v264;
              v85 = v259 + 2;
LABEL_594:
              if (v85 >= v8 || *v85 != 41)
              {
                v319 = 139;
                goto LABEL_775;
              }
              v14 = 0;
              v364[0] = v85 + 1;
              v4 = (int *)v350;
              *(_QWORD *)(v209 + 1) = ((_DWORD)v85 + 1 - *(_DWORD *)(v350 + 56));
              v16 = 1;
              v15 = (v15 - 1);
              v11 = v237;
              v18 = 0;
LABEL_94:
              v12 = 0;
              goto LABEL_30;
            }
          }
          v259 = v258++;
          v364[0] = v258;
        }
        v320 = 181;
        goto LABEL_805;
      case 'P':
        v364[0] = v83 + 2;
        if (v83 + 2 >= v8)
          goto LABEL_764;
        v210 = v83[2];
        if (v210 != 60)
        {
          if (v210 == 61)
          {
            v107 = v11;
            v108 = v19;
            v256 = v17;
            if (!read_name(v364, v8, 0x29u, &v355, &v359, &v362, (int *)&v360 + 1, (uint64_t)v4))
              goto LABEL_776;
            v17 = v256;
            v18 = 0;
            v15 = 0;
            v14 = 0;
            v212 = -2147221504;
          }
          else
          {
            if (v210 != 62)
            {
              v319 = 141;
              goto LABEL_775;
            }
LABEL_468:
            v107 = v11;
            v108 = v19;
            v211 = v17;
            if (!read_name(v364, v8, 0x29u, &v355, &v359, &v362, (int *)&v360 + 1, (uint64_t)v4))
              goto LABEL_776;
            v17 = v211;
            v18 = 0;
            v15 = 0;
            v14 = 0;
            v212 = -2145320960;
          }
          *v6 = v212;
          v6[1] = v362;
          *((_QWORD *)v6 + 1) = __ROR8__(v355, 32);
          v6 += 4;
LABEL_237:
          v12 = 1;
          v19 = v108;
          v11 = v107;
          goto LABEL_238;
        }
LABEL_474:
        v86 = 62;
LABEL_475:
        v321 = v16;
        v330 = v13;
        v326 = v11;
        v339 = v19;
        v213 = v17;
        if (!read_name(v364, v8, v86, &v355, &v359, &v362, (int *)&v360 + 1, (uint64_t)v4))
          goto LABEL_776;
        v4 = (int *)v350;
        v214 = *(_DWORD *)(v350 + 212) + 1;
        *(_DWORD *)(v350 + 212) = v214;
        *v6++ = v214 | 0x80080000;
        v215 = *(unsigned __int16 *)(v350 + 176);
        if (v215 >> 4 >= 0x271)
        {
          v319 = 149;
          goto LABEL_775;
        }
        v216 = v213;
        v217 = v362;
        v19 = v339;
        if (v362 + 3 > *(unsigned __int16 *)(v350 + 178))
          *(_WORD *)(v350 + 178) = v362 + 3;
        if (!v215)
        {
          v224 = 0;
          v219 = 0;
          v218 = 0;
          goto LABEL_494;
        }
        v218 = 0;
        v219 = 0;
        v220 = v359;
        v221 = *(_QWORD *)(v350 + 192) + 8;
        while ((_DWORD)v217 == *(unsigned __int16 *)(v221 + 4))
        {
          v222 = _pcre2_strncmp_8(v220, *(unsigned __int8 **)(v221 - 8), v217);
          v19 = v339;
          v216 = v213;
          v223 = *(_DWORD *)(v350 + 212);
          if (v222)
            goto LABEL_487;
          if (*(_DWORD *)v221 == v223)
          {
            v224 = *(unsigned __int16 *)(v350 + 176);
LABEL_494:
            v17 = (v216 + 1);
            LODWORD(v360) = v219;
            v11 = v326;
            v13 = v330;
            if ((int)v219 < (int)v224)
            {
              v18 = 0;
              v15 = 0;
              v14 = 0;
              v12 = 0;
              goto LABEL_396;
            }
            v225 = *(unsigned int *)(v350 + 200);
            v226 = v218;
            if (v225 <= v224)
            {
              v252 = v17;
              v253 = (void *)(**(uint64_t (***)(uint64_t, _QWORD))v350)(32 * v225, *(_QWORD *)(*(_QWORD *)v350 + 16));
              if (!v253)
              {
                v319 = 121;
                goto LABEL_775;
              }
              v254 = v253;
              cstdlib_memcpy(v253, *(const void **)(v350 + 192), 16 * *(unsigned int *)(v350 + 200));
              if (*(_DWORD *)(v350 + 200) >= 0x15u)
                (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v350 + 8))(*(_QWORD *)(v350 + 192), *(_QWORD *)(*(_QWORD *)v350 + 16));
              v227 = v254;
              *(_QWORD *)(v350 + 192) = v254;
              *(_DWORD *)(v350 + 200) = 2 * v225;
              v224 = *(unsigned __int16 *)(v350 + 176);
              v17 = v252;
              v19 = v339;
              v11 = v326;
              v13 = v330;
            }
            else
            {
              v227 = *(void **)(v350 + 192);
            }
            v16 = v321;
            v18 = 0;
            v15 = 0;
            v14 = 0;
            v12 = 0;
            v255 = (uint64_t)v227 + 16 * v224;
            *(_QWORD *)v255 = v359;
            *(_WORD *)(v255 + 12) = v217;
            *(_DWORD *)(v255 + 8) = *(_DWORD *)(v350 + 212);
            *(_WORD *)(v255 + 14) = v226;
            *(_WORD *)(v350 + 176) = v224 + 1;
            goto LABEL_30;
          }
          if ((v339 & 0x40) == 0)
          {
            v319 = 143;
            goto LABEL_775;
          }
          v218 = 1;
          *(_WORD *)(v221 + 6) = 1;
          *(_DWORD *)(v350 + 296) = 1;
LABEL_488:
          v221 += 16;
          ++v219;
          v224 = *(unsigned __int16 *)(v350 + 176);
          if (v219 >= v224)
            goto LABEL_494;
        }
        v223 = *(_DWORD *)(v350 + 212);
LABEL_487:
        if (*(_DWORD *)v221 == v223)
        {
          v319 = 165;
          goto LABEL_775;
        }
        goto LABEL_488;
      case 'R':
        LODWORD(v360) = 0;
        v94 = v83 + 2;
        v364[0] = v83 + 2;
        if (v83 + 2 < v8 && *v94 == 41)
        {
          v93 = 0;
          goto LABEL_163;
        }
        v319 = 158;
        goto LABEL_775;
      default:
LABEL_440:
        if (v346)
        {
          v203 = v346 + 6;
          if ((unint64_t)(v346 + 6) >= v341)
          {
LABEL_799:
            v319 = 184;
            goto LABEL_775;
          }
        }
        else
        {
          v203 = (unsigned __int16 *)*((_QWORD *)v4 + 5);
        }
        *v203 = v17 + 1;
        v203[3] = 0;
        *((_DWORD *)v203 + 2) = v19 & 0x10424E8;
        v346 = v203;
        if (*v85 == 124)
        {
          v18 = 0;
          v15 = 0;
          v14 = 0;
          v12 = 0;
          v228 = *((_WORD *)v4 + 106);
          v203[1] = v228;
          v203[2] = v228;
          v203[3] = 1;
          v4[52] |= 0x200000u;
          *v6++ = -2145779712;
          v364[0] = v83 + 2;
          v17 = (v17 + 1);
          goto LABEL_30;
        }
        *(_DWORD *)(v203 + 1) = 0;
        v357 = 0;
        if (*v85 == 94)
        {
          v229 = 0;
          v230 = v19 & 0xFEFFDB57;
          v85 = v83 + 2;
          v364[0] = v83 + 2;
        }
        else
        {
          v229 = 1;
          v230 = v19;
        }
        if (v85 >= v8)
          goto LABEL_764;
        v242 = (int *)&v357 + 1;
        break;
    }
    while (1)
    {
      v243 = *v85;
      v244 = 1;
      if (v243 == 41 || v243 == 58)
        goto LABEL_554;
      v245 = v85 + 1;
      v364[0] = v85 + 1;
      v246 = *v85;
      if (v246 <= 0x6C)
        break;
      if (*v85 <= 0x72u)
      {
        if (v246 == 109)
        {
          v247 = *v242 | 0x400;
        }
        else
        {
          if (v246 != 110)
            goto LABEL_803;
          v247 = *v242 | 0x2000;
        }
        goto LABEL_550;
      }
      if (v246 == 115)
      {
        v247 = *v242 | 0x20;
        goto LABEL_550;
      }
      if (v246 != 120)
      {
LABEL_803:
        v320 = 111;
LABEL_805:
        HIDWORD(v360) = v320;
        v364[0] = v85;
        goto LABEL_776;
      }
      v248 = *v242;
      *v242 |= 0x80u;
      if (v245 >= v8 || *v245 != 120)
        goto LABEL_551;
      *v242 = v248 | 0x1000080;
      v85 += 2;
      v364[0] = v85;
LABEL_552:
      if (v85 >= v8)
      {
        v244 = 0;
LABEL_554:
        v249 = v357;
        if ((HIDWORD(v357) & 0x1000080) == 0x80 || (v357 & 0x80) != 0)
        {
          v249 = v357 | 0x1000000;
          LODWORD(v357) = v357 | 0x1000000;
        }
        if ((v244 & 1) == 0)
          goto LABEL_764;
        v251 = (HIDWORD(v357) | v230) & ~v249;
        v364[0] = v85 + 1;
        if (*v85 == 41)
        {
          if ((unint64_t)v346 > *((_QWORD *)v4 + 5) && *(v346 - 6) == (unsigned __int16)v17)
            v346 -= 6;
          else
            *v346 = v17;
        }
        else
        {
          *v6++ = -2145779712;
          v17 = (v17 + 1);
        }
        if ((_DWORD)v251 != (_DWORD)v19)
        {
          v18 = 0;
          v15 = 0;
          v14 = 0;
          v12 = 0;
          *v6 = -2145714176;
          v6[1] = v251;
          v6 += 2;
          v19 = v251;
          goto LABEL_30;
        }
LABEL_388:
        v18 = 0;
        v15 = 0;
        v14 = 0;
        goto LABEL_94;
      }
    }
    if (*v85 > 0x54u)
    {
      if (v246 == 85)
      {
        v247 = *v242 | 0x40000;
      }
      else
      {
        if (v246 != 105)
          goto LABEL_803;
        v247 = *v242 | 8;
      }
LABEL_550:
      *v242 = v247;
    }
    else if (v246 == 45)
    {
      if (!v229)
      {
        v320 = 194;
        goto LABEL_805;
      }
      v229 = 0;
      v242 = (int *)&v357;
    }
    else
    {
      if (v246 != 74)
        goto LABEL_803;
      *v242 |= 0x40u;
      v4[52] |= 0x400u;
    }
LABEL_551:
    v85 = v245;
    goto LABEL_552;
  }
  if (v363 > 93)
    goto LABEL_124;
  if (v363 == 63)
  {
    v56 = 2151088128;
    goto LABEL_229;
  }
LABEL_120:
  if (v363 == 91)
  {
    v101 = v364[0];
    if (v8 - v364[0] >= 6)
    {
      v102 = v11;
      v103 = v16;
      v104 = v13;
      v105 = v19;
      v106 = v17;
      if (!_pcre2_strncmp_c8_8(v364[0], "[:<:]]", 6)
        || !_pcre2_strncmp_c8_8(v364[0], "[:>:]]", 6))
      {
        *v6 = -2145910779;
        v183 = (int *)(v6 + 2);
        v184 = v364[0];
        if (v364[0][2] == 60)
        {
          v6[1] = -2145255424;
        }
        else
        {
          v6[1] = -2145124352;
          *a3 = 1;
          v183 = (int *)(v6 + 4);
          *((_QWORD *)v6 + 1) = 0;
        }
        v17 = v106;
        v19 = v105;
        v11 = v102;
        v13 = v104;
        if ((v19 & 0x20000) != 0)
        {
          v185 = v183 + 2;
          v183[1] = 0x80000;
          v186 = -2145910768;
        }
        else
        {
          v185 = v183 + 1;
          v186 = -2145910773;
        }
        v16 = v103;
        v18 = 0;
        v15 = 0;
        v14 = 0;
        *v183 = v186;
        *v185 = -2145845248;
        v6 = v185 + 1;
        v364[0] = v184 + 6;
        goto LABEL_29;
      }
      v101 = v364[0];
      v17 = v106;
      v19 = v105;
      v13 = v104;
      v16 = v103;
      v11 = v102;
    }
    if (v101 < v8)
    {
      v110 = *v101;
      if (v110 <= 0x3D && ((1 << v110) & 0x2400400000000000) != 0)
      {
        v111 = v11;
        v112 = v16;
        v113 = v13;
        v114 = v19;
        v115 = v17;
        v116 = check_posix_syntax(v101, (uint64_t)v8, &v356);
        v101 = v364[0];
        if (v116)
        {
          --v364[0];
          if (*v101 == 58)
            v319 = 112;
          else
            v319 = 113;
          goto LABEL_775;
        }
        v17 = v115;
        v19 = v114;
        v13 = v113;
        v16 = v112;
        v11 = v111;
      }
    }
    if (v101 < v8)
    {
      v117 = 0;
      while (1)
      {
        v364[0] = v101 + 1;
        v118 = *v101;
        if (v351 && v118 >= 0xC0)
        {
          if ((v118 & 0x20) != 0)
          {
            v120 = v101[1] & 0x3F;
            if ((v118 & 0x10) != 0)
            {
              if ((v118 & 8) != 0)
              {
                v121 = v101[2] & 0x3F;
                v122 = v101[3] & 0x3F;
                v123 = v101[4] & 0x3F;
                if ((v118 & 4) != 0)
                {
                  v118 = ((v118 & 1) << 30) | (v120 << 24) | (v121 << 18) | (v122 << 12) | (v123 << 6) | v101[5] & 0x3F;
                  v101 += 6;
                }
                else
                {
                  v118 = ((v118 & 3) << 24) | (v120 << 18) | (v121 << 12) | (v122 << 6) | v123;
                  v101 += 5;
                }
              }
              else
              {
                v118 = ((v118 & 7) << 18) | (v120 << 12) | ((v101[2] & 0x3F) << 6) | v101[3] & 0x3F;
                v101 += 4;
              }
            }
            else
            {
              v118 = ((v118 & 0xF) << 12) | (v120 << 6) | v101[2] & 0x3F;
              v101 += 3;
            }
            v364[0] = v101;
          }
          else
          {
            v364[0] = v101 + 2;
            v119 = v101[1] & 0x3F | ((v118 & 0x1F) << 6);
            v101 += 2;
            v118 = v119;
          }
        }
        else
        {
          ++v101;
        }
        if (v118 == 92)
        {
          v363 = 92;
          if (v101 < v8 && *v101 == 69)
          {
            v364[0] = ++v101;
            v118 = 92;
          }
          else
          {
            if (v8 - v101 < 3)
              goto LABEL_243;
            v323 = v11;
            v125 = v13;
            v126 = v19;
            v127 = v17;
            if (_pcre2_strncmp_c8_8(v101, "Q\\E", 3))
            {
              v118 = v363;
              v17 = v127;
              v19 = v126;
              v13 = v125;
              v11 = v323;
              goto LABEL_241;
            }
            v101 = v364[0] + 3;
            v364[0] += 3;
            v118 = 92;
            v17 = v127;
            v19 = v126;
            v13 = v125;
            v11 = v323;
          }
        }
        else if ((v19 & 0x1000000) == 0 || (v118 != 32 ? (v124 = v118 == 9) : (v124 = 1), !v124))
        {
          v363 = v118;
          if (v117 || v118 != 94)
            goto LABEL_241;
          v117 = 1;
        }
        if (v101 >= v8)
          goto LABEL_240;
      }
    }
    v117 = 0;
    v118 = 91;
LABEL_240:
    v363 = v118;
LABEL_241:
    if (v118 == 93 && (v4[51] & 1) != 0)
    {
      v18 = 0;
      v15 = 0;
      v14 = 0;
      if (v117)
        v100 = -2146697216;
      else
        v100 = -2146762752;
LABEL_173:
      *v6++ = v100;
      goto LABEL_29;
    }
LABEL_243:
    v321 = v16;
    v328 = v13;
    v130 = 0;
    v131 = 0;
    if (v117)
      v132 = -2146566144;
    else
      v132 = -2146828288;
    *v6 = v132;
    v133 = (int *)(v6 + 1);
LABEL_247:
    if (v131)
    {
      if (v363 == 92 && v364[0] < v8 && *v364[0] == 69)
      {
        v131 = 0;
        ++v364[0];
        goto LABEL_335;
      }
      goto LABEL_290;
    }
    if ((v19 & 0x1000000) != 0 && (v363 == 9 || v363 == 32))
    {
      v131 = 0;
      goto LABEL_335;
    }
    if (v363 == 91)
    {
      if (v8 - v364[0] >= 3)
      {
        v134 = *v364[0];
        v272 = v134 > 0x3D;
        v135 = (1 << v134) & 0x2400400000000000;
        if (!v272 && v135 != 0)
        {
          v137 = v11;
          v138 = v19;
          v139 = v17;
          if (!check_posix_syntax(v364[0], (uint64_t)v8, &v356))
          {
            v152 = 0;
            v153 = 3;
            v17 = v139;
            v19 = v138;
            v11 = v137;
            goto LABEL_291;
          }
          if (v130 == 1)
            goto LABEL_788;
          v140 = v364[0];
          if (*v364[0] == 58)
          {
            v141 = ++v364[0];
            v142 = v140[1];
            if (v142 == 94)
            {
              v141 = v140 + 2;
              v364[0] = v140 + 2;
            }
            v143 = v356;
            v144 = check_posix_name(v141, (int)v356 - (int)v141);
            if (v144 < 0)
            {
              v315 = 130;
            }
            else
            {
              v364[0] = v143 + 2;
              v17 = v139;
              v19 = v138;
              if (v143 + 2 >= v344 || v143[2] != 45 || v143[3] == 93)
              {
                v11 = v137;
                if ((v138 & 0x20000) != 0)
                {
                  if (((0xBFFFAFFuLL >> (2 * v144)) & 1) != 0)
                  {
                    v130 = 0;
                    v131 = 0;
                    v158 = posix_substitutes[(2 * v144) | 1];
                    v159 = posix_substitutes[2 * v144];
                    if (v142 == 94)
                      v160 = -2145910769;
                    else
                      v160 = -2145910768;
                    *v133 = v160;
                    v133[1] = v158 | (v159 << 16);
                    v133 += 2;
                    goto LABEL_335;
                  }
                  if (((0xAAA2280uLL >> ((2 * v144) | 1u)) & 1) == 0)
                  {
                    v130 = 0;
                    v131 = 0;
                    if (v142 == 94)
                      v145 = -2145910766;
                    else
                      v145 = -2145910765;
                    *v133++ = v145;
                    goto LABEL_335;
                  }
                }
                v130 = 0;
                v131 = 0;
                if (v142 == 94)
                  v157 = -2145583104;
                else
                  v157 = -2145648640;
                *v133 = v157;
                v133[1] = v144;
                v133 += 2;
                goto LABEL_335;
              }
LABEL_788:
              v315 = 150;
            }
LABEL_766:
            HIDWORD(v360) = v315;
LABEL_777:
            *((_QWORD *)v4 + 21) = &v364[0][-*((_QWORD *)v4 + 7)];
            return HIDWORD(v360);
          }
          v318 = 113;
LABEL_785:
          HIDWORD(v360) = v318;
LABEL_786:
          --v364[0];
          goto LABEL_777;
        }
      }
LABEL_290:
      v152 = 0;
      v153 = 3;
      goto LABEL_291;
    }
    if (v363 == 45 && v130 >= 2)
    {
      v131 = 0;
      if (v130 == 3)
        v156 = -2145452032;
      else
        v156 = -2145517568;
      *v133++ = v156;
      v130 = 1;
      goto LABEL_335;
    }
    if (v363 != 92)
      goto LABEL_290;
    v324 = v11;
    v332 = v17;
    v147 = v364[0];
    v356 = v364[0];
    v148 = v19;
    v149 = _pcre2_check_escape_8(v364, (unint64_t)v8, &v363, (int *)&v360 + 1, v19, 1, v4);
    if (HIDWORD(v360))
    {
      v17 = v332;
      goto LABEL_284;
    }
    v150 = v149;
    v17 = v332;
    v19 = v148;
    while (1)
    {
      v152 = 1;
      if (v150 > 24)
      {
        if (v150 == 25)
        {
          v131 = 0;
          goto LABEL_334;
        }
        if (v150 == 26)
        {
          v131 = 1;
LABEL_334:
          v11 = v324;
          goto LABEL_335;
        }
      }
      else
      {
        if (!v150)
          goto LABEL_329;
        if (v150 == 5)
        {
          v363 = 8;
          v152 = 1;
LABEL_329:
          v153 = 2;
          v11 = v324;
LABEL_291:
          v154 = v363;
          if (v130 != 1)
          {
            *v133++ = v363;
            v130 = v153;
            goto LABEL_335;
          }
          v155 = *(v133 - 2);
          if (v363 == v155)
          {
            v130 = 0;
            --v133;
            goto LABEL_335;
          }
          if (v155 > v363)
          {
            v318 = 108;
            goto LABEL_785;
          }
          if (v152 && *(v133 - 1) == -2145452032)
          {
            *(v133 - 1) = -2145517568;
            v154 = v363;
          }
          v130 = 0;
          *v133++ = v154;
LABEL_335:
          v166 = v364[0];
          if (v364[0] >= v8)
          {
            v319 = 106;
            goto LABEL_775;
          }
          ++v364[0];
          v167 = *v166;
          v363 = v167;
          if (v351 && v167 >= 0xC0)
          {
            v4 = (int *)v350;
            if ((v167 & 0x20) == 0)
            {
              v364[0] = v166 + 2;
              v363 = v166[1] & 0x3F | ((v167 & 0x1F) << 6);
              v167 = v363;
              if (v131)
                goto LABEL_247;
LABEL_351:
              if (v167 != 93)
                goto LABEL_247;
              if (v130 == 1)
                *(v133 - 1) = 45;
              v18 = 0;
              v15 = 0;
              v14 = 0;
              *v133 = -2146631680;
              v6 = (unsigned int *)(v133 + 1);
              v12 = 1;
              v13 = v328;
LABEL_396:
              v16 = v321;
              goto LABEL_30;
            }
            v168 = v166[1] & 0x3F;
            if ((v167 & 0x10) != 0)
            {
              if ((v167 & 8) != 0)
              {
                v170 = v166[2] & 0x3F;
                v171 = v166[3] & 0x3F;
                v172 = v166[4] & 0x3F;
                if ((v167 & 4) != 0)
                {
                  v167 = ((v167 & 1) << 30) | (v168 << 24) | (v170 << 18) | (v171 << 12) | (v172 << 6) | v166[5] & 0x3F;
                  v363 = v167;
                  v169 = v166 + 6;
                }
                else
                {
                  v169 = v166 + 5;
                  v167 = ((v167 & 3) << 24) | (v168 << 18) | (v170 << 12) | (v171 << 6) | v172;
                  v363 = v167;
                }
              }
              else
              {
                v167 = ((v167 & 7) << 18) | (v168 << 12) | ((v166[2] & 0x3F) << 6) | v166[3] & 0x3F;
                v363 = v167;
                v169 = v166 + 4;
              }
            }
            else
            {
              v167 = ((v167 & 0xF) << 12) | (v168 << 6) | v166[2] & 0x3F;
              v363 = v167;
              v169 = v166 + 3;
            }
            v364[0] = v169;
            if (!v131)
              goto LABEL_351;
          }
          else
          {
            v4 = (int *)v350;
            if (!v131)
              goto LABEL_351;
          }
          goto LABEL_247;
        }
      }
      if (v130 != 1)
      {
        switch(v150)
        {
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
            if ((v19 & 0x20000) == 0)
              goto LABEL_358;
            if ((v150 - 7) > 4)
              v175 = -2145910769;
            else
              v175 = dword_214F43EC8[v150 - 7];
            *v133 = v175;
            v174 = v133 + 1;
            if (v150 > 0xB)
              goto LABEL_380;
            v180 = 1 << v150;
            if (((1 << v150) & 0xC0) != 0)
            {
              v174 = v133 + 2;
              v181 = 196621;
            }
            else
            {
              if ((v180 & 0x300) == 0)
              {
                v17 = v332;
                v19 = v148;
                v11 = v324;
                if ((v180 & 0xC00) != 0)
                {
                  v174 = v133 + 2;
                  v133[1] = 0x80000;
                }
                goto LABEL_382;
              }
              v174 = v133 + 2;
              v181 = 393216;
            }
            v133[1] = v181;
LABEL_380:
            v17 = v332;
            v19 = v148;
LABEL_381:
            v11 = v324;
LABEL_382:
            if (v364[0] >= v344 || *v364[0] != 45 || v364[0][1] == 93)
            {
              v130 = 0;
              v131 = 0;
              v133 = v174;
              goto LABEL_335;
            }
            v319 = 150;
            break;
          case 12:
            v130 = 0;
            v173 = 171;
            goto LABEL_355;
          case 15:
          case 16:
            LODWORD(v353) = 0;
            v354 = 0;
            if (!get_ucp((unint64_t *)v364, &v353, (_WORD *)&v354 + 1, &v354, (_DWORD *)&v360 + 1, (uint64_t)v4))goto LABEL_776;
            if (v150 == 15)
              v176 = 16;
            else
              v176 = 15;
            if ((_DWORD)v353)
              v177 = v176;
            else
              v177 = v150;
            v178 = v177 - 2145910784;
            v179 = (unsigned __int16)v354 | (HIWORD(v354) << 16);
            v174 = v133 + 2;
            *v133 = v178;
            v133[1] = v179;
            goto LABEL_380;
          case 18:
          case 19:
          case 20:
          case 21:
LABEL_358:
            *v133 = v150 - 2145910784;
            v174 = v133 + 1;
            goto LABEL_381;
          default:
            v130 = 0;
            HIDWORD(v360) = 107;
            --v364[0];
            goto LABEL_284;
        }
LABEL_775:
        HIDWORD(v360) = v319;
LABEL_776:
        v4 = (int *)v350;
        goto LABEL_777;
      }
      v173 = 150;
LABEL_355:
      HIDWORD(v360) = v173;
LABEL_284:
      if ((*(_BYTE *)(*(_QWORD *)v4 + 64) & 2) == 0)
        goto LABEL_776;
      v364[0] = v147;
      if (v147 >= v8)
        break;
      v150 = 0;
      v364[0] = v147 + 1;
      v151 = *v147;
      v363 = v151;
      v19 = v148;
      if (v351 && v151 >= 0xC0)
      {
        v4 = (int *)v350;
        if ((v151 & 0x20) != 0)
        {
          v161 = v147[1] & 0x3F;
          if ((v151 & 0x10) == 0)
          {
            v150 = 0;
            v363 = ((v151 & 0xF) << 12) | (v161 << 6) | v147[2] & 0x3F;
            v162 = v147 + 3;
            goto LABEL_324;
          }
          if ((v151 & 8) == 0)
          {
            v150 = 0;
            v363 = ((v151 & 7) << 18) | (v161 << 12) | ((v147[2] & 0x3F) << 6) | v147[3] & 0x3F;
            v162 = v147 + 4;
            goto LABEL_324;
          }
          v163 = v147[2] & 0x3F;
          v164 = v147[3] & 0x3F;
          v165 = v147[4] & 0x3F;
          v150 = 0;
          if ((v151 & 4) != 0)
          {
            v363 = ((v151 & 1) << 30) | (v161 << 24) | (v163 << 18) | (v164 << 12) | (v165 << 6) | v147[5] & 0x3F;
            v162 = v147 + 6;
LABEL_324:
            v364[0] = v162;
          }
          else
          {
            v363 = ((v151 & 3) << 24) | (v161 << 18) | (v163 << 12) | (v164 << 6) | v165;
            v364[0] = v147 + 5;
          }
        }
        else
        {
          v150 = 0;
          v364[0] = v147 + 2;
          v363 = v147[1] & 0x3F | ((v151 & 0x1F) << 6);
        }
      }
      else
      {
LABEL_311:
        v4 = (int *)v350;
      }
    }
    v150 = 0;
    v363 = 92;
    v19 = v148;
    goto LABEL_311;
  }
  if (v363 != 92)
    goto LABEL_184;
  v66 = v16;
  v67 = v11;
  v327 = v13;
  v331 = v17;
  v68 = v364[0];
  v356 = v364[0];
  v336 = v19;
  v69 = _pcre2_check_escape_8(v364, (unint64_t)v8, &v363, (int *)&v360 + 1, v19, 0, v4);
  if (HIDWORD(v360))
    goto LABEL_123;
  v129 = v69;
  v17 = v331;
  v19 = v336;
  v11 = v67;
  v16 = v66;
  while (2)
  {
    if (!v129)
    {
      v18 = 0;
      v15 = 0;
      v14 = 0;
      v286 = v363;
      goto LABEL_670;
    }
    if ((v129 & 0x80000000) != 0)
    {
      v287 = &v364[0][~*((_QWORD *)v4 + 7)];
      *v6 = -v129 | 0x80030000;
      v13 = v327;
      if (v129 >= 0xFFFFFFF7)
      {
        v288 = &v4[-2 * v129];
        v290 = *((_QWORD *)v288 + 11);
        v289 = (unsigned __int8 **)(v288 + 22);
        v18 = 0;
        v15 = 0;
        v14 = 0;
        if (v290 == -1)
          *v289 = v287;
        v12 = 1;
        ++v6;
        goto LABEL_30;
      }
      v18 = 0;
      v15 = 0;
      v14 = 0;
      *(_QWORD *)(v6 + 1) = __ROR8__(v287, 32);
LABEL_676:
      v6 += 3;
LABEL_29:
      v12 = 1;
      goto LABEL_30;
    }
    switch(v129)
    {
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
        if ((v19 & 0x20000) == 0)
          goto LABEL_668;
        v13 = v327;
        if (v129 - 7 > 4)
          v291 = -2145910769;
        else
          v291 = dword_214F43EC8[v129 - 7];
        v18 = 0;
        *v6 = v291;
        v12 = 1;
        if (v129 > 0xB)
          goto LABEL_726;
        v299 = 1 << v129;
        if (((1 << v129) & 0xC0) != 0)
        {
          v18 = 0;
          v15 = 0;
          v14 = 0;
          v300 = 196621;
        }
        else if ((v299 & 0x300) != 0)
        {
          v18 = 0;
          v15 = 0;
          v14 = 0;
          v300 = 393216;
        }
        else
        {
          if ((v299 & 0xC00) == 0)
          {
LABEL_726:
            ++v6;
            v15 = 0;
            v14 = 0;
            goto LABEL_30;
          }
          v18 = 0;
          v15 = 0;
          v14 = 0;
          v300 = 0x80000;
        }
        v6[1] = v300;
        v6 += 2;
        goto LABEL_30;
      case 0xCu:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
LABEL_668:
        v18 = 0;
        v15 = 0;
        v14 = 0;
        v286 = v129 - 2145910784;
        goto LABEL_670;
      case 0xEu:
        if ((v19 & 0x100000) == 0)
        {
          v18 = 0;
          v15 = 0;
          v14 = 0;
          v286 = -2145910770;
LABEL_670:
          *v6++ = v286;
          v12 = 1;
LABEL_671:
          v13 = v327;
          goto LABEL_30;
        }
        v66 = v16;
        v301 = 183;
        goto LABEL_725;
      case 0xFu:
      case 0x10u:
        v66 = v16;
        v67 = v11;
        LODWORD(v353) = 0;
        v354 = 0;
        if (!get_ucp((unint64_t *)v364, &v353, (_WORD *)&v354 + 1, &v354, (_DWORD *)&v360 + 1, (uint64_t)v4))goto LABEL_123;
        v18 = 0;
        v15 = 0;
        v14 = 0;
        if (v129 == 15)
          v292 = 16;
        else
          v292 = 15;
        if ((_DWORD)v353)
          v293 = v292;
        else
          v293 = v129;
        v294 = (unsigned __int16)v354 | (HIWORD(v354) << 16);
        *v6 = v293 - 2145910784;
        v6[1] = v294;
        v6 += 2;
        goto LABEL_689;
      case 0x1Bu:
      case 0x1Cu:
        v66 = v16;
        if (v364[0] >= v8 || (v295 = *v364[0], v295 != 39) && v295 != 60 && v295 != 123)
        {
          if (v129 == 27)
            v301 = 157;
          else
            v301 = 169;
LABEL_725:
          HIDWORD(v360) = v301;
LABEL_648:
          v17 = v331;
          if ((*(_BYTE *)(*(_QWORD *)v4 + 64) & 2) == 0)
            goto LABEL_776;
          v16 = v66;
          v364[0] = v68;
          if (v68 >= v8)
          {
            v129 = 0;
            v363 = 92;
            v19 = v336;
            v4 = (int *)v350;
          }
          else
          {
            v129 = 0;
            v364[0] = v68 + 1;
            v280 = *v68;
            v363 = v280;
            v19 = v336;
            v4 = (int *)v350;
            if (v351 && v280 >= 0xC0)
            {
              if ((v280 & 0x20) != 0)
              {
                v281 = v68[1] & 0x3F;
                if ((v280 & 0x10) == 0)
                {
                  v129 = 0;
                  v363 = ((v280 & 0xF) << 12) | (v281 << 6) | v68[2] & 0x3F;
                  v282 = v68 + 3;
                  goto LABEL_663;
                }
                if ((v280 & 8) == 0)
                {
                  v129 = 0;
                  v363 = ((v280 & 7) << 18) | (v281 << 12) | ((v68[2] & 0x3F) << 6) | v68[3] & 0x3F;
                  v282 = v68 + 4;
                  goto LABEL_663;
                }
                v283 = v68[2] & 0x3F;
                v284 = v68[3] & 0x3F;
                v285 = v68[4] & 0x3F;
                v129 = 0;
                if ((v280 & 4) != 0)
                {
                  v363 = ((v280 & 1) << 30) | (v281 << 24) | (v283 << 18) | (v284 << 12) | (v285 << 6) | v68[5] & 0x3F;
                  v282 = v68 + 6;
LABEL_663:
                  v364[0] = v282;
                }
                else
                {
                  v363 = ((v280 & 3) << 24) | (v281 << 18) | (v283 << 12) | (v284 << 6) | v285;
                  v364[0] = v68 + 5;
                }
              }
              else
              {
                v129 = 0;
                v364[0] = v68 + 2;
                v363 = v68[1] & 0x3F | ((v280 & 0x1F) << 6);
              }
            }
          }
          continue;
        }
        v67 = v11;
        if (v295 == 39)
          v296 = 39;
        else
          v296 = 125;
        if (v295 == 60)
          v297 = 62;
        else
          v297 = v296;
        v298 = v295 == 39 || v295 == 60;
        if (v129 == 27 && v298)
        {
          v353 = v364[0] + 1;
          if (read_number(&v353, (unint64_t)v8, v4[53], 0xFFFFu, 161, (int *)&v360, (int *)&v360 + 1))
          {
            v94 = v353;
            if (v353 < v8 && v297 == *v353)
            {
              v93 = v360;
              v17 = v331;
              v19 = v336;
              v13 = v327;
              v11 = v67;
              v16 = v66;
              goto LABEL_163;
            }
            HIDWORD(v360) = 157;
LABEL_123:
            v11 = v67;
            goto LABEL_648;
          }
          if (HIDWORD(v360))
            goto LABEL_123;
        }
        if (!read_name(v364, v8, v297, &v355, &v359, &v362, (int *)&v360 + 1, (uint64_t)v4))
          goto LABEL_123;
        v18 = 0;
        v15 = 0;
        v14 = 0;
        if (v297 == 125 || v129 == 28)
          v303 = -2147221504;
        else
          v303 = -2145320960;
        *v6 = v303;
        v6[1] = v362;
        *((_QWORD *)v6 + 1) = __ROR8__(v355, 32);
        v6 += 4;
LABEL_689:
        v12 = 1;
        v17 = v331;
        v19 = v336;
        v13 = v327;
        v11 = v67;
        v16 = v66;
LABEL_30:
        v5 = v364[0];
        if (v364[0] < v8)
          goto LABEL_8;
        v7 = v349;
        if ((_DWORD)v13)
        {
          v315 = 160;
          goto LABEL_766;
        }
LABEL_757:
        v311 = v17;
        v312 = manage_callouts((int)v5, &v361, v7, v6, (uint64_t)v4);
        v313 = *(_DWORD *)(*(_QWORD *)v4 + 64);
        if ((v313 & 8) != 0)
        {
          v314 = -2146041856;
LABEL_761:
          *v312 = -2145845248;
          v312[1] = v314;
          v312 += 2;
        }
        else if ((v313 & 4) != 0)
        {
          v314 = -2145910779;
          goto LABEL_761;
        }
        if ((unint64_t)v312 >= v352)
        {
LABEL_765:
          v315 = 163;
          goto LABEL_766;
        }
        *v312 = 0x80000000;
        if (v311)
          goto LABEL_764;
        return 0;
      default:
        v18 = 0;
        v15 = 0;
        v14 = 0;
        v12 = 0;
        *v6++ = v129 - 2145910784;
        goto LABEL_671;
    }
  }
}

uint64_t check_lookbehinds(uint64_t a1)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;

  result = 0;
  *(_QWORD *)(a1 + 168) = -1;
  v3 = *(unsigned int **)(a1 + 224);
  v7 = 0;
  v8 = v3;
  v4 = *v3;
  if (*v3 != 0x80000000)
  {
    while (1)
    {
      if ((v4 & 0x80000000) != 0)
      {
        switch(((v4 & 0xFFFF0000) + 2147418112) >> 16)
        {
          case 0u:
          case 1u:
          case 2u:
          case 7u:
          case 8u:
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0xDu:
          case 0xEu:
          case 0x15u:
          case 0x16u:
          case 0x18u:
          case 0x19u:
          case 0x1Du:
          case 0x1Eu:
          case 0x21u:
          case 0x22u:
          case 0x26u:
          case 0x27u:
          case 0x28u:
          case 0x2Au:
          case 0x2Cu:
          case 0x2Eu:
          case 0x30u:
          case 0x31u:
          case 0x32u:
          case 0x33u:
          case 0x34u:
          case 0x35u:
          case 0x36u:
          case 0x37u:
          case 0x38u:
            break;
          case 3u:
          case 5u:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x20u:
            v3 += 3;
            break;
          case 4u:
          case 0x1Au:
          case 0x1Bu:
          case 0x1Cu:
            ++v3;
            break;
          case 6u:
            v3 += 5;
            break;
          case 0x17u:
            v5 = v4 + 2145910769 < 2;
            goto LABEL_6;
          case 0x1Fu:
          case 0x39u:
          case 0x3Au:
          case 0x3Bu:
            v3 += 2;
            break;
          case 0x23u:
          case 0x24u:
            if (!set_lookbehind_lengths(&v8, (int *)&v7 + 1, &v7, 0, a1))
              return HIDWORD(v7);
            v3 = v8;
            break;
          case 0x25u:
          case 0x29u:
          case 0x2Bu:
          case 0x2Du:
          case 0x2Fu:
            v5 = v3[1] + 1;
LABEL_6:
            v3 += v5;
            break;
          default:
            return 170;
        }
      }
      v6 = v3[1];
      ++v3;
      v4 = v6;
      v8 = v3;
      if (v6 == 0x80000000)
        return 0;
    }
  }
  return result;
}

uint64_t compile_regex(unsigned int a1, char **a2, unsigned int **a3, int *a4, unsigned int a5, _DWORD *a6, int *a7, _DWORD *a8, int *a9, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  unsigned int *v15;
  unsigned int (*v16)(_QWORD, _QWORD);
  uint64_t v17;
  int v18;
  _QWORD *v19;
  unint64_t v20;
  int v21;
  unsigned int v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  unsigned int v26;
  unsigned int v27;
  char *v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  char *v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  unsigned __int16 v56;
  unsigned int v57;
  uint64_t v58;
  _QWORD *v59;
  unsigned int *v60;
  unsigned int v61;
  BOOL v62;
  _BOOL4 v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  int v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int v76;
  unsigned int *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  unsigned __int8 *v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  int v88;
  char v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  unsigned int *v93;
  char v94;
  int v95;
  int v96;
  unsigned int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  unsigned int v102;
  char v103;
  int v104;
  uint64_t v105;
  int v106;
  size_t v107;
  char v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  int v113;
  int v114;
  BOOL v115;
  int v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int *v121;
  unsigned int v122;
  unint64_t v123;
  unsigned int v124;
  char v125;
  char v126;
  char v127;
  unsigned int v128;
  unsigned int v129;
  char v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int v133;
  int v134;
  uint64_t *v135;
  int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned __int8 *v139;
  char *v140;
  int v141;
  int v142;
  unsigned __int8 v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  unsigned int *v149;
  uint64_t v150;
  int v151;
  unsigned int *v152;
  char v153;
  char *v154;
  char v155;
  char v156;
  char *v157;
  char *v158;
  uint64_t v160;
  unsigned int v161;
  unsigned int v162;
  uint64_t v163;
  int v164;
  unsigned int v165;
  _BOOL4 v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  unsigned int v174;
  unsigned int v175;
  char v176;
  char *v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  char v183;
  _BYTE *v184;
  uint64_t jj;
  uint64_t kk;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  _DWORD *v193;
  unsigned int *v194;
  char v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  char v200;
  char v201;
  char *v202;
  _BOOL4 v204;
  char v205;
  unsigned __int8 v206;
  int v207;
  unsigned int *v208;
  unsigned int v209;
  int v210;
  BOOL v211;
  int v212;
  char v213;
  int v214;
  unsigned int v215;
  uint64_t v216;
  int v217;
  BOOL v218;
  char v220;
  uint64_t v221;
  unint64_t v222;
  unsigned __int8 *v223;
  int v224;
  _BYTE *v225;
  __int16 v226;
  unsigned int v227;
  unsigned __int8 *v228;
  int v229;
  int v230;
  int v231;
  char v232;
  int v233;
  char *v234;
  int v235;
  BOOL v236;
  int v237;
  _BOOL4 v238;
  BOOL v239;
  char v240;
  int v241;
  char *v242;
  int v243;
  char v244;
  _BOOL4 v245;
  int v246;
  unsigned int v247;
  char v248;
  char v249;
  unsigned int v250;
  char v251;
  _BYTE *v252;
  unsigned int v253;
  char *v254;
  char *v255;
  char *v256;
  unsigned __int8 v257;
  __int16 v258;
  __int16 v259;
  _BOOL4 v260;
  char v261;
  int v262;
  char *v263;
  unsigned int v264;
  int v265;
  unint64_t v266;
  unsigned __int8 v267;
  int v268;
  _BOOL4 v269;
  char v270;
  unsigned int v271;
  int v272;
  char v273;
  char *v274;
  unsigned int v275;
  unsigned int v276;
  uint64_t v277;
  char v278;
  char *v279;
  char *v280;
  unint64_t v281;
  int v282;
  int v283;
  size_t v284;
  unsigned int v285;
  char *v286;
  char *v287;
  int v288;
  char v289;
  uint64_t v290;
  unint64_t v291;
  BOOL v292;
  unsigned int v293;
  char v294;
  char *v295;
  __int16 v296;
  __int16 v297;
  int v298;
  char v299;
  char *v300;
  uint64_t v301;
  unsigned int v302;
  BOOL v303;
  int v304;
  _BOOL4 v305;
  char v306;
  __int16 v307;
  unsigned __int8 *v308;
  uint64_t v309;
  unsigned int v311;
  uint64_t v312;
  int v313;
  unint64_t v314;
  int v315;
  int v316;
  _BOOL4 v317;
  _BYTE *v318;
  char *v319;
  int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  BOOL v326;
  BOOL v327;
  int v328;
  unsigned int v329;
  int v330;
  unsigned int v332;
  uint64_t v333;
  char *v334;
  _QWORD *v335;
  __int16 v336;
  int v337;
  unsigned int v338;
  int v339;
  int v340;
  int v341;
  int v342;
  char v343;
  unsigned int v344;
  char v345;
  char v346;
  char v347;
  _BOOL4 v348;
  _BOOL4 v349;
  _BOOL4 v350;
  int v351;
  int *v352;
  _DWORD *v353;
  unint64_t v354;
  int v355;
  int v356;
  uint64_t v357;
  int v358;
  char *v359;
  unsigned int v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  BOOL v367;
  int v368;
  _BOOL4 v369;
  char *v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t *v374;
  int v375;
  int v376;
  int v377;
  unint64_t v378;
  uint64_t v379;
  char *v380;
  int __src;
  unint64_t __srca;
  unsigned int v385;
  int v386;
  char *v387;
  unsigned int v388;
  char v389;
  char v390;
  char v391;
  char v392;
  int v393;
  char *v394;
  int v395;
  unsigned int v396;
  unsigned int v397;
  int v398;
  unsigned int v399;
  unint64_t v400;
  uint64_t v401;
  char *v402;
  uint64_t v403;
  uint64_t v404;
  unsigned int v405;
  uint64_t v406;
  uint64_t v407;
  char *v408;
  unsigned __int8 *v409;
  uint64_t v410;
  unsigned int *v411;
  int v412[2];
  _BYTE v413[5];
  char __dst[8];
  int8x16_t __b;
  int8x16_t v416;
  uint64_t v417;

  v417 = *MEMORY[0x24BDAC8D0];
  v370 = *a2;
  v15 = *a3;
  v16 = *(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)a11 + 24);
  if (v16 && v16(*(unsigned __int16 *)(a11 + 180), *(_QWORD *)(*(_QWORD *)a11 + 32)))
  {
    v17 = 0;
    v18 = 133;
LABEL_4:
    *a4 = v18;
    return v17;
  }
  v19 = a12;
  v403 = 0;
  v404 = 0;
  v401 = a10;
  v402 = v370;
  v20 = a5 + 6;
  v21 = *v370;
  if (v21 > -127)
  {
    v22 = 0;
    if (v21 == -123)
    {
      v351 = __rev16(*(unsigned __int16 *)(v370 + 3));
      LODWORD(v404) = (unsigned __int16)v351;
      v403 = *(_QWORD *)(a11 + 184);
      WORD2(v404) = *(_WORD *)(a11 + 182);
      *(_QWORD *)(a11 + 184) = &v403;
    }
    else
    {
      v351 = 0;
    }
  }
  else
  {
    v351 = 0;
    v22 = *((unsigned __int16 *)v15 - 2);
    v15 += 2;
  }
  v354 = 0;
  *(_WORD *)(v370 + 1) = 0;
  v23 = &v370[a5 + 3];
  v371 = a11 + 184;
  v24 = &v410;
  if (!a12)
    v24 = 0;
  v374 = v24;
  v357 = a5;
  v355 = -2;
  v356 = -2;
  LODWORD(v17) = 1;
  v25 = v370;
  v352 = a7;
  v353 = a8;
  v358 = v21;
  while (2)
  {
    v360 = v17;
    v359 = v25;
    if (v21 <= -127 && v22)
    {
      *v23 = 125;
      v23[1] = BYTE1(v22);
      v23[2] = v22;
      v23 += 3;
      v20 += 3;
    }
    v26 = 0;
    v27 = 0;
    v378 = 0;
    v28 = 0;
    v29 = 0;
    v375 = 0;
    v410 = 0;
    v411 = v15;
    v408 = 0;
    v409 = 0;
    v30 = *(_QWORD *)(a11 + 24);
    v363 = (a1 >> 18) & 1;
    v367 = (a1 & 0x40000) == 0;
    v368 = (a1 >> 3) & 1;
    v369 = 0;
    v372 = 0;
    v373 = v30;
    v361 = v30 + 64;
    v362 = v30 + 160;
    v31 = -1;
    v386 = -2;
    v385 = a1;
    v32 = -2;
    v376 = -2;
    __src = -2;
    v33 = v23;
    v380 = v23;
    v387 = v23;
LABEL_17:
    v406 = 0;
    v407 = 0;
    LODWORD(v34) = *v15;
    v35 = *v15 & 0xFFFF0000;
    if (v19)
    {
      v36 = *(_QWORD *)(a11 + 40) + *(_QWORD *)(a11 + 80);
      if ((unint64_t)v33 > v36 - 100)
      {
        if ((unint64_t)v33 >= v36)
          v330 = 152;
        else
          v330 = 186;
        goto LABEL_780;
      }
      if (v33 < v387)
        v33 = v387;
      v37 = v35 + 2143551487;
      if (v35 + 2143551487 > 0xFFF4FFFE)
      {
        v387 = v33;
      }
      else
      {
        if (2147483627 - v20 < v33 - v380)
          goto LABEL_776;
        v20 += v33 - v380;
        v33 = v380;
        v387 = v380;
        if (v20 > 0x10000)
          goto LABEL_776;
      }
    }
    else
    {
      v37 = v35 + 2143551487;
    }
    v388 = *v15 & 0xFFFF0000;
    v399 = v26;
    v396 = v27;
    v398 = v32;
    v400 = v20;
    if (v29)
      v38 = 1;
    else
      v38 = v31;
    if (v37 < 0xFFF4FFFF)
      v28 = v33;
    v394 = v28;
    if (v37 < 0xFFF4FFFF)
      v31 = v38;
    v393 = v31;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = (unsigned __int16)*v15;
    v44 = 0x10000;
    v45 = 135;
    v46 = 1;
    v47 = 1;
    switch(WORD1(v34) ^ 0x8000)
    {
      case 0:
      case 1:
      case 0x19:
        if (v393 < 0)
          v17 = 0xFFFFFFFFLL;
        else
          v17 = v360;
        v19 = a12;
        v20 = v400;
        if (a12)
        {
          v22 = *v15;
          v318 = v370;
          v21 = v358;
          v25 = v359;
          if ((*v15 & 0xFFFF0000) == 0x80010000)
          {
            v23 = &(*a2)[v357 + 3];
            v20 = v400 + 3;
LABEL_775:
            v22 = (unsigned __int16)v22;
            ++v15;
            a1 = v385;
            continue;
          }
        }
        else
        {
          v319 = v359;
          v318 = v370;
          v21 = v358;
          if (*v359 == 120)
          {
            v320 = v356;
            if (v356 == v386 && (_DWORD)v354 == v399)
            {
              v321 = v355;
            }
            else
            {
              v321 = v355;
              v324 = HIDWORD(v354);
              if (v356 >= 0 && v355 < 0)
                v324 = v354;
              HIDWORD(v354) = v324;
              if (v356 >= 0 && v355 < 0)
                v321 = v356;
              v320 = -1;
            }
            v322 = v320;
            v326 = v320 < 0 && v386 >= 0;
            v327 = v326 && v398 < 0;
            if (v327)
              v328 = v386;
            else
              v328 = v398;
            if (((v328 ^ v321) & 0xFFFFFFFD) != 0)
            {
              v323 = -1;
            }
            else
            {
              v62 = !v327;
              v329 = v27;
              if (!v62)
                v329 = v399;
              v323 = v328 | v321;
              if (HIDWORD(v354) != v329)
                v323 = -1;
            }
          }
          else
          {
            v354 = __PAIR64__(v27, v399);
            v322 = v386;
            v323 = v398;
          }
          v355 = v323;
          v356 = v322;
          if (*((unsigned __int16 *)v15 + 1) << 16 == -2147418112)
          {
            *v33 = 120;
            v33[1] = (unsigned __int16)((_WORD)v33 - (_WORD)v359) >> 8;
            v33[2] = (_BYTE)v33 - (_BYTE)v359;
            v402 = v33;
            v23 = v33 + 3;
            LOWORD(v22) = *(_WORD *)v15;
            v25 = v33;
            goto LABEL_775;
          }
          v332 = (_DWORD)v33 - (_DWORD)v359;
          do
          {
            v333 = __rev16(*(unsigned __int16 *)(v319 + 1));
            *(_WORD *)(v319 + 1) = bswap32(v332) >> 16;
            v319 -= v333;
            v332 = v333;
          }
          while ((_DWORD)v333);
        }
        *v33 = 121;
        v33[1] = (unsigned __int16)((_WORD)v33 - (_WORD)v318) >> 8;
        v33[2] = (_BYTE)v33 - (_BYTE)v318;
        v334 = v33 + 3;
        if (v351 >= 1)
        {
          v335 = *(_QWORD **)v371;
          if (*(_WORD *)(*(_QWORD *)v371 + 10))
          {
            cstdlib_memmove(v318 + 3, v318, v334 - v318);
            *v318 = -126;
            v336 = (_WORD)v33 + 6 - (_WORD)v318;
            v318[1] = HIBYTE(v336);
            v318[2] = v336;
            v33[6] = 121;
            v33[7] = HIBYTE(v336);
            v33[8] = v336;
            v334 = v33 + 9;
            v20 = v400 + 6;
            v335 = *(_QWORD **)v371;
          }
          *(_QWORD *)v371 = *v335;
        }
        *a2 = v334;
        *a3 = v15;
        *a6 = v354;
        *v352 = v356;
        *v353 = HIDWORD(v354);
        *a9 = v355;
        if (!a12)
          return v17;
        if (2147483627 - *a12 >= v20)
        {
          *a12 += v20;
          return v17;
        }
        v17 = 0;
        v18 = 120;
        goto LABEL_4;
      case 2:
        v39 = 0;
        v41 = 0;
        v47 = 0;
        v45 = 130;
        goto LABEL_191;
      case 3:
        if (v43 > 9)
        {
          v209 = v15[2];
          v208 = v15 + 2;
          v372 = v209 | ((unint64_t)*(v208 - 1) << 32);
          v411 = v208;
          v81 = a11;
        }
        else
        {
          v81 = a11;
          v372 = *(_QWORD *)(a11 + 8 * v43 + 88);
        }
        if (v43 > *(_DWORD *)(v81 + 212))
          goto LABEL_787;
        v19 = a12;
        goto LABEL_396;
      case 4:
      case 0x21:
        v78 = v15[3];
        v77 = v15 + 3;
        v79 = *(_QWORD *)(a11 + 192);
        v80 = *(v77 - 2);
        v372 = v78 | ((unint64_t)*(v77 - 1) << 32);
        v411 = v77;
        v81 = a11;
        v19 = a12;
        if (!*(_WORD *)(a11 + 176))
          goto LABEL_785;
        v82 = 0;
        LODWORD(v43) = 0;
        v83 = 0;
        v84 = (unsigned __int8 *)(*(_QWORD *)(a11 + 56) + v372);
        do
        {
          if ((_DWORD)v80 == *(unsigned __int16 *)(v79 + 12)
            && !_pcre2_strncmp_8(v84, *(unsigned __int8 **)v79, v80))
          {
            LODWORD(v43) = *(_DWORD *)(v79 + 8);
            if (v388 == -2145320960)
              goto LABEL_195;
            v82 = *(unsigned __int16 *)(v79 + 14);
            v85 = 1 << v43;
            if (v43 >= 0x20)
              v85 = 1;
            v86 = *(_DWORD *)(a11 + 248);
            *(_DWORD *)(a11 + 252) |= v85;
            if (v43 > v86)
              *(_DWORD *)(a11 + 248) = v43;
            v87 = a11 + 184;
            while (1)
            {
              v87 = *(_QWORD *)v87;
              if (!v87)
                break;
              if ((_DWORD)v43 == *(unsigned __int16 *)(v87 + 8))
              {
                *(_WORD *)(v87 + 10) = 1;
                break;
              }
            }
          }
          ++v83;
          v79 += 16;
        }
        while (v83 < *(unsigned __int16 *)(a11 + 176));
        if (!(_DWORD)v43)
        {
LABEL_785:
          *a4 = 115;
          *(_QWORD *)(a11 + 168) = v372;
          return 0;
        }
        if (!v82)
        {
LABEL_396:
          v28 = v394;
          v210 = v386;
          v211 = v386 == -2;
          if (v386 == -2)
            v210 = -1;
          v386 = v210;
          v212 = __src;
          if (v211)
            v212 = -1;
          __src = v212;
          if ((v385 & 8) != 0)
            v213 = 114;
          else
            v213 = 113;
          *v33 = v213;
          v33[1] = BYTE1(v43);
          v33[2] = v43;
          v214 = 1 << v43;
          if (v43 >= 0x20)
            v214 = 1;
          v215 = *(_DWORD *)(v81 + 248);
          *(_DWORD *)(v81 + 252) |= v214;
          v236 = v43 > v215;
          v20 = v400;
          v31 = v393;
          v92 = v398;
          if (v236)
            *(_DWORD *)(v81 + 248) = v43;
          v33 += 3;
          v216 = a11 + 184;
          while (1)
          {
            v216 = *(_QWORD *)v216;
            if (!v216)
              break;
            if ((_DWORD)v43 == *(unsigned __int16 *)(v216 + 8))
            {
              v29 = 0;
              *(_WORD *)(v216 + 10) = 1;
              goto LABEL_414;
            }
          }
          v29 = 0;
LABEL_414:
          v90 = v399;
          v91 = v396;
          goto LABEL_702;
        }
        v412[0] = 0;
        v405 = 0;
        v28 = v394;
        if (!a12 && !find_dupname_details(v84, v80, &v405, v412, a4, a11))
          return 0;
        v29 = 0;
        v88 = v386;
        if (v386 == -2)
          v88 = -1;
        v386 = v88;
        if ((v385 & 8) != 0)
          v89 = 116;
        else
          v89 = 115;
        *v33 = v89;
        v33[1] = BYTE1(v405);
        v33[2] = v405;
        v33[3] = BYTE1(v412[0]);
        v33[4] = v412[0];
        v33 += 5;
        v90 = v399;
        v91 = v396;
        v92 = v398;
        goto LABEL_105;
      case 5:
        LODWORD(v34) = v15[1];
        v411 = v15 + 1;
        goto LABEL_140;
      case 6:
        v29 = 0;
        *v33 = 118;
        v33[1] = BYTE1(v411[1]);
        v33[2] = v411[1];
        v33[3] = BYTE1(v411[2]);
        v33[4] = v411[2];
        v33[5] = v411[3];
        v411 += 3;
        v33 += 6;
        goto LABEL_119;
      case 7:
        v111 = v15[3];
        v19 = a12;
        if (a12)
        {
          v29 = 0;
          v20 = v400 + v111 + 9;
          v411 = v15 + 5;
          v90 = v26;
          v91 = v27;
          v92 = v32;
          goto LABEL_182;
        }
        *v33 = 119;
        v33[1] = BYTE1(v411[1]);
        v33[2] = v411[1];
        v33[3] = BYTE1(v411[2]);
        v33[4] = v411[2];
        v221 = v411[5];
        v222 = v221 | ((unint64_t)v411[4] << 32);
        v411 += 5;
        v372 = v222;
        v223 = (unsigned __int8 *)(*(_QWORD *)(a11 + 56) + v222);
        v224 = *v223;
        v225 = v33 + 10;
        v33[9] = v224;
        if (v224 == 123)
          v224 = 125;
        v226 = v221 + 1;
        v33[7] = HIBYTE(v226);
        v33[8] = v226;
        v227 = v111 - 1;
        v20 = v400;
        if (v111 - 1 < 2)
        {
          v31 = v393;
          v28 = v394;
        }
        else
        {
          v228 = v223 + 1;
          v31 = v393;
          v28 = v394;
          do
          {
            v229 = *v228;
            if (v229 == v224 && v228[1] == v224)
            {
              *v225 = v224;
              v228 += 2;
              v227 = v111 - 2;
            }
            else
            {
              ++v228;
              *v225 = v229;
            }
            v111 = v227;
            ++v225;
            --v227;
          }
          while (v227 > 1);
        }
        v29 = 0;
        *v225 = 0;
        v256 = v225 + 1;
        v33[5] = (unsigned __int16)((_WORD)v256 - (_WORD)v33) >> 8;
        v33[6] = (_BYTE)v256 - (_BYTE)v33;
        v90 = v26;
        v91 = v27;
        v92 = v398;
        v33 = v256;
        goto LABEL_702;
      case 8:
        v41 = 0;
        v47 = 0;
        *(_WORD *)(v33 + 3) = bswap32(v34) >> 16;
        *(_DWORD *)(a11 + 216) = v43;
        v45 = 133;
        v39 = 2;
        goto LABEL_191;
      case 9:
        if ((v385 & 0x400) != 0)
        {
          v29 = 0;
          v217 = v386;
          v218 = v386 == -2;
          if (v386 == -2)
            v217 = -1;
          v386 = v217;
          v96 = __src;
          if (v218)
            v96 = -1;
          __src = v96;
          LOBYTE(v96) = 28;
        }
        else
        {
          v29 = 0;
          LOBYTE(v96) = 27;
        }
        goto LABEL_118;
      case 0xA:
      case 0xE:
        v93 = v15 + 1;
        v34 = v15[1];
        if ((v34 & 0x80000000) == 0 && v15[2] == -2146631680)
        {
          v411 = v15 + 2;
          if (v35 == -2146828288)
          {
LABEL_140:
            v110 = a1;
LABEL_148:
            if ((v110 & 0x80000) != 0 && (v385 & 8) != 0)
            {
              v112 = HIBYTE(_pcre2_ucd_records_8[2
                                               * _pcre2_ucd_stage2_8[(int)(v34
                                                                         - (v110 & 0xFFFFFF80)
                                                                         + (_pcre2_ucd_stage1_8[(int)v34 / 128] << 7))]]);
              v20 = v400;
              v28 = v394;
              v113 = v32;
              if (v112)
              {
                *(_WORD *)v33 = 2320;
                v33[2] = v112;
                v33 += 3;
                v114 = v386;
                v115 = v386 == -2;
                if (v386 == -2)
                  v114 = -1;
                v386 = v114;
                v116 = __src;
                if (v115)
                  v116 = -1;
                __src = v116;
                v29 = 1;
                v90 = v26;
                v91 = v27;
                v92 = v32;
LABEL_434:
                v19 = a12;
                goto LABEL_516;
              }
LABEL_158:
              v117 = _pcre2_ord2utf_8(v34, (uint64_t)__dst);
            }
            else
            {
              v20 = v400;
              v28 = v394;
              v113 = v32;
              if ((v110 & 0x80000) != 0)
                goto LABEL_158;
              __dst[0] = v34;
              v117 = 1;
            }
            v19 = a12;
            v31 = v393;
            if ((v385 & 8) != 0)
              v201 = 30;
            else
              v201 = 29;
            *v33 = v201;
            v202 = v33 + 1;
            cstdlib_memcpy(v202, __dst, v117);
            v90 = __dst[0];
            if (__dst[0] == 13 || __dst[0] == 10)
              *(_DWORD *)(a11 + 208) |= 0x800u;
            v33 = &v202[v117];
            v204 = v117 == 1 || v368 == 0;
            if (v386 == -2)
            {
              if (v204)
              {
                if (v117 == 1)
                {
                  v29 = 1;
                  __src = -1;
                  v91 = v396;
                  v376 = v113;
                  LODWORD(v378) = v396;
                  v386 = v368;
                  v92 = v113;
                }
                else
                {
                  v91 = *(v33 - 1);
                  v29 = 1;
                  v92 = *(_DWORD *)(a11 + 280);
                  __src = -1;
                  v376 = v113;
                  LODWORD(v378) = v396;
                  v386 = v368;
                }
                goto LABEL_702;
              }
              v368 = 1;
              v386 = -1;
              v90 = v399;
              v91 = v396;
              v376 = v113;
              LODWORD(v378) = v396;
              v92 = -1;
              v207 = -1;
            }
            else
            {
              if (v204)
              {
                v92 = *(_DWORD *)(a11 + 280) | v368;
                v29 = 1;
                v90 = v399;
                v91 = *(v33 - 1);
                v376 = v113;
                v378 = __PAIR64__(v399, v396);
                goto LABEL_556;
              }
              v368 = 1;
              v90 = v399;
              v91 = v396;
              v376 = v113;
              v378 = __PAIR64__(v399, v396);
              v92 = v113;
              v207 = v386;
            }
            __src = v207;
            v29 = 1;
            goto LABEL_702;
          }
          v243 = v386;
          if (v386 == -2)
            v243 = -1;
          v28 = v394;
          v386 = v243;
          if ((a1 & 0x80000) == 0
            || (v385 & 8) == 0
            || (v244 = HIBYTE(_pcre2_ucd_records_8[2
                                                 * _pcre2_ucd_stage2_8[v34 & 0x7F | (*(unsigned __int16 *)((char *)_pcre2_ucd_stage1_8 + ((v34 >> 6) & 0x3FFFFFE)) << 7)]])) == 0)
          {
            if ((v385 & 8) != 0)
              v251 = 32;
            else
              v251 = 31;
            *v33 = v251;
            v252 = v33 + 1;
            v20 = v400;
            if ((a1 & 0x80000) != 0 && v34 >= 0x80)
            {
              v253 = _pcre2_ord2utf_8(v34, (uint64_t)v252);
            }
            else
            {
              *v252 = v34;
              v253 = 1;
            }
            v19 = a12;
            v31 = v393;
            v29 = 1;
            v90 = v399;
            v91 = v396;
            v376 = v398;
            v378 = __PAIR64__(v399, v396);
            v92 = v398;
            __src = v386;
            v33 = &v252[v253];
            goto LABEL_702;
          }
          *(_WORD *)v33 = 2319;
          v33[2] = v244;
          v33 += 3;
          v29 = 1;
          v90 = v26;
          v91 = v27;
          v378 = __PAIR64__(v26, v27);
          v92 = v32;
          v376 = v32;
          __src = v243;
          v19 = a12;
LABEL_105:
          v20 = v400;
LABEL_516:
          v31 = v393;
          goto LABEL_702;
        }
        v377 = v35 == -2146566144;
        __srca = (unint64_t)(v33 + 4);
        v408 = v33 + 4;
        cstdlib_memset(&__b, 0, 0x20uLL);
        v97 = *v93;
        if (*v93 == -2146631680)
        {
          v98 = 0;
          v411 = v15 + 1;
          v99 = v386;
          if (v386 == -2)
            v99 = -1;
          v386 = v99;
          v19 = a12;
          v20 = v400;
          v31 = v393;
          v100 = v398;
          goto LABEL_547;
        }
        v147 = 0;
        v379 = 0;
        v98 = 0;
        v148 = 0;
        v344 = v385 & 0xFFFFFFF7;
        v19 = a12;
        while (1)
        {
          v149 = v15;
          v150 = v147;
          if (v97 == -2147155968)
          {
            v97 = v15[2];
            v15 += 2;
LABEL_250:
            if (v97 == 13 || v97 == 10)
              *(_DWORD *)(a11 + 208) |= 0x800u;
            v160 = v15[1] | 0x10000;
            if ((_DWORD)v160 == -2145452032)
            {
              v160 = (uint64_t)(v15 + 2);
              v161 = v15[2];
              if (v161 == -2147155968)
              {
                v162 = v15[3];
                v15 += 3;
                v161 = v162;
              }
              else
              {
                v15 += 2;
              }
              if (v161 == 13 || v161 == 10)
              {
                v160 = *(_DWORD *)(a11 + 208) | 0x800u;
                *(_DWORD *)(a11 + 208) = v160;
              }
              v163 = a11;
              *(_DWORD *)(a11 + 264) = v97;
              *(_DWORD *)(a11 + 268) = v161;
              v164 = v385;
              v165 = v97;
            }
            else
            {
              v163 = a11;
              *(_DWORD *)(a11 + 264) = v97;
              *(_DWORD *)(a11 + 268) = v97;
              v164 = v385;
              v165 = v97;
              v161 = v97;
            }
            v147 = add_to_class_internal((uint64_t)&__b, &v408, v164, v163, v165, v161, v160)
                 + v147;
            goto LABEL_299;
          }
          if (v97 != -2145583104 && v97 != -2145648640)
          {
            v15 = v93;
            if ((v97 & 0x80000000) != 0)
            {
              if ((v97 & 0xFFFF0000) != 0x80180000)
              {
LABEL_786:
                v330 = 189;
                goto LABEL_780;
              }
              v147 = (v147 + 1);
              switch((__int16)v97)
              {
                case 6:
                  for (i = 0; i != 32; ++i)
                  {
                    __b.i8[i] |= ~*(_BYTE *)(v361 + i);
                    v98 = 1;
                  }
                  goto LABEL_299;
                case 7:
                  for (j = 0; j != 32; ++j)
                    __b.i8[j] |= *(_BYTE *)(v361 + j);
                  goto LABEL_299;
                case 8:
                  for (k = 0; k != 32; ++k)
                  {
                    __b.i8[k] |= ~*(_BYTE *)(v373 + k);
                    v98 = 1;
                  }
                  goto LABEL_299;
                case 9:
                  for (m = 0; m != 32; ++m)
                    __b.i8[m] |= *(_BYTE *)(v373 + m);
                  goto LABEL_299;
                case 10:
                  for (n = 0; n != 32; ++n)
                  {
                    __b.i8[n] |= ~*(_BYTE *)(v362 + n);
                    v98 = 1;
                  }
                  goto LABEL_299;
                case 11:
                  for (ii = 0; ii != 32; ++ii)
                    __b.i8[ii] |= *(_BYTE *)(v362 + ii);
                  goto LABEL_299;
                case 15:
                case 16:
                  v174 = v149[2];
                  v152 = v149 + 2;
                  v173 = v174;
                  v175 = HIWORD(v174);
                  if ((unsigned __int16)v97 == 16)
                    v176 = 3;
                  else
                    v176 = 4;
                  v177 = v408++;
                  *v177 = v176;
                  v178 = v408++;
                  *v178 = v175;
                  v179 = v408++;
                  *v179 = v173;
                  goto LABEL_247;
                case 18:
                  v193 = &_pcre2_hspace_list_8;
                  goto LABEL_327;
                case 19:
                  v194 = (unsigned int *)&_pcre2_hspace_list_8;
                  goto LABEL_329;
                case 20:
                  v193 = &_pcre2_vspace_list_8;
LABEL_327:
                  add_not_list_to_class((uint64_t)&__b, &v408, v344, a11, v193);
                  break;
                case 21:
                  v194 = (unsigned int *)&_pcre2_vspace_list_8;
LABEL_329:
                  add_list_to_class((uint64_t)&__b, &v408, v344, a11, v194);
                  break;
                default:
                  goto LABEL_299;
              }
              goto LABEL_299;
            }
            goto LABEL_250;
          }
          v98 = v97 == -2145583104;
          v152 = v15 + 2;
          v151 = v15[2];
          if (((v151 < 3) & (v385 >> 3)) != 0)
            v151 = 0;
          if ((v385 & 0x20000) != 0)
          {
            if ((v151 - 8) <= 2)
            {
              if (v97 == -2145583104)
                v153 = 4;
              else
                v153 = 3;
              v154 = v408++;
              *v154 = v153;
              if (v151 == 9)
                v155 = 12;
              else
                v155 = 13;
              if (v151 == 8)
                v156 = 11;
              else
                v156 = v155;
              v157 = v408++;
              *v157 = v156;
              v158 = v408++;
              *v158 = 0;
LABEL_247:
              LODWORD(v379) = 1;
              goto LABEL_298;
            }
            v166 = (a1 & 0x80000) != 0 && v97 == -2145583104;
            HIDWORD(v379) |= v166;
          }
          v167 = 3 * v151;
          cstdlib_memcpy(v412, (const void *)(v373 + posix_class_maps[3 * v151]), 0x20uLL);
          v168 = v167 + 1;
          v169 = v167 + 2;
          if (((0x2DB6DB6FB6BuLL >> v168) & 1) != 0)
          {
            v170 = posix_class_maps[v168];
            if (((0x2DB6DB6FB6BuLL >> v169) & 1) != 0)
            {
              v180 = 0;
              v181 = v373 + v170;
              do
              {
                *((_BYTE *)v412 + v180) |= *(_BYTE *)(v181 + v180);
                ++v180;
              }
              while (v180 != 32);
            }
            else
            {
              v171 = 0;
              v172 = v373 + v170;
              do
              {
                *((_BYTE *)v412 + v171) &= ~*(_BYTE *)(v172 + v171);
                ++v171;
              }
              while (v171 != 32);
            }
          }
          v182 = ((0x12492490494uLL >> v169) & 1) != 0 ? -posix_class_maps[v169] : posix_class_maps[v169];
          if (v182 == 1)
            break;
          if (v182 == 2)
          {
            v183 = 127;
            v184 = v413;
LABEL_290:
            *v184 &= v183;
          }
          if (v97 == -2145583104)
          {
            for (jj = 0; jj != 8; jj += 4)
              *(int8x16_t *)((char *)&__b + jj * 4) = vornq_s8(*(int8x16_t *)((char *)&__b + jj * 4), *(int8x16_t *)&v412[jj]);
          }
          else
          {
            for (kk = 0; kk != 8; kk += 4)
              *(int8x16_t *)((char *)&__b + kk * 4) = vorrq_s8(*(int8x16_t *)((char *)&__b + kk * 4), *(int8x16_t *)&v412[kk]);
          }
          v150 = 1;
LABEL_298:
          v15 = v152;
          v147 = v150;
LABEL_299:
          if ((unint64_t)v408 > __srca)
            v148 = 1;
          if (a12 && (unint64_t)v408 > __srca)
          {
            v400 += (unint64_t)&v408[-__srca];
            v408 = v33 + 4;
            v148 = 1;
          }
          v93 = v15 + 1;
          v97 = v15[1];
          if (v97 == -2146631680)
          {
            v411 = v15 + 1;
            v199 = v386;
            if (v386 == -2)
              v199 = -1;
            v386 = v199;
            if (!v148)
            {
              v20 = v400;
              v31 = v393;
              v100 = v398;
LABEL_547:
              if (v98 == v377)
                v249 = 110;
              else
                v249 = 111;
              *v33 = v249;
              v28 = v394;
              v250 = v396;
              if (!v19)
              {
                if (v388 == -2146566144)
                {
                  __b = vmvnq_s8(__b);
                  v416 = vmvnq_s8(v416);
                }
                cstdlib_memcpy(v33 + 1, &__b, 0x20uLL);
              }
              v33 += 33;
              goto LABEL_555;
            }
            v20 = v400;
            v100 = v398;
            if ((v385 & 0x20000) == 0 && !(_DWORD)v379 && v98)
            {
              v31 = v393;
              goto LABEL_547;
            }
            v31 = v393;
            if (HIDWORD(v379))
            {
              v254 = v408++;
              *v254 = 2;
              v28 = v394;
              if ((a1 & 0x80000) == 0)
              {
                v255 = v408;
                goto LABEL_605;
              }
LABEL_601:
              v271 = _pcre2_ord2utf_8(0x100u, (uint64_t)v408);
              v408 += v271;
              v272 = _pcre2_ord2utf_8(0x10FFFFu, (uint64_t)v408);
              v255 = &v408[v272];
            }
            else
            {
              v255 = v408;
              if ((v385 & 0x20000) == 0 && (a1 & 0x80000) != 0 && v98 && v388 != -2146566144)
              {
                ++v408;
                *v255 = 2;
                v28 = v394;
                goto LABEL_601;
              }
              v28 = v394;
            }
LABEL_605:
            v408 = v255 + 1;
            *v255 = 0;
            *v33 = 112;
            v273 = (v388 == -2146566144) | 4;
            if (!(_DWORD)v379)
              v273 = v388 == -2146566144;
            v33[3] = v273;
            if ((int)v147 < 1)
            {
              v33 = v408;
              v250 = v396;
            }
            else
            {
              v33[3] = v273 | 2;
              cstdlib_memmove(v33 + 36, (const void *)__srca, (size_t)&v408[-__srca]);
              v250 = v396;
              if (v388 == -2146566144 && !(_DWORD)v379)
              {
                __b = vmvnq_s8(__b);
                v416 = vmvnq_s8(v416);
              }
              cstdlib_memcpy((void *)__srca, &__b, 0x20uLL);
              v33 = v408 + 32;
            }
            *(_WORD *)(v28 + 1) = bswap32((_DWORD)v33 - (_DWORD)v28) >> 16;
LABEL_555:
            v29 = 1;
            v90 = v399;
            v91 = v250;
            v376 = v100;
            v378 = __PAIR64__(v399, v250);
            v92 = v100;
LABEL_556:
            __src = v386;
LABEL_702:
            v15 = ++v411;
            v26 = v90;
            v27 = v91;
            v32 = v92;
            goto LABEL_17;
          }
        }
        v183 = -61;
        v184 = (char *)v412 + 1;
        goto LABEL_290;
      case 0xB:
      case 0xC:
        if (v35 == -2146697216)
          v94 = 13;
        else
          v94 = -97;
        *v33++ = v94;
        v95 = v386;
        if (v386 == -2)
          v95 = -1;
        v29 = 1;
        v90 = v26;
        v91 = v27;
        HIDWORD(v378) = v26;
        v92 = v32;
        goto LABEL_178;
      case 0xF:
        goto LABEL_452;
      case 0x10:
        v46 = 0;
        v40 = 0;
        v41 = 0;
        v119 = v15[2];
        v118 = v15 + 2;
        v372 = v119 | ((unint64_t)*(v118 - 1) << 32);
        v411 = v118;
        v33[3] = -92;
        goto LABEL_451;
      case 0x11:
      case 0x13:
      case 0x14:
        v48 = *(_QWORD *)(a11 + 192);
        v51 = v15[3];
        v50 = v15 + 3;
        v49 = v51;
        v53 = *(v50 - 2);
        v52 = *(v50 - 1);
        v411 = v50;
        v54 = *(_QWORD *)(a11 + 56);
        v372 = v51 | ((unint64_t)v52 << 32);
        v55 = (unsigned __int8 *)(v54 + v372);
        v56 = *(_WORD *)(a11 + 176);
        if (!v56)
        {
          v57 = 0;
          v59 = a12;
          goto LABEL_337;
        }
        v57 = 0;
        v58 = v48 + 8;
        v59 = a12;
        while (2)
        {
          if ((_DWORD)v53 != *(unsigned __int16 *)(v58 + 4))
            goto LABEL_40;
          if (_pcre2_strncmp_8(v55, *(unsigned __int8 **)(v58 - 8), v53))
          {
            v56 = *(_WORD *)(a11 + 176);
LABEL_40:
            ++v57;
            v58 += 16;
            if (v57 >= v56)
              goto LABEL_337;
            continue;
          }
          break;
        }
        if (!*(_WORD *)(v58 + 6))
        {
          if (v388 == -2146238464)
            v248 = -113;
          else
            v248 = -115;
          v33[3] = v248;
          v33[4] = BYTE1(*(_DWORD *)v58);
          v33[5] = *(_DWORD *)v58;
          if (*(_DWORD *)v58 > *(_DWORD *)(a11 + 248))
            *(_DWORD *)(a11 + 248) = *(_DWORD *)v58;
          goto LABEL_353;
        }
        v56 = *(_WORD *)(a11 + 176);
LABEL_337:
        if (v57 < v56)
        {
          if (v388 == -2146238464)
            v195 = -113;
          else
            v195 = -115;
          v33[3] = v195;
          v412[0] = 0;
          v405 = 0;
          if (v59 || find_dupname_details(v55, v53, &v405, v412, a4, a11))
          {
            ++v33[3];
            *((_WORD *)v33 + 2) = bswap32((unsigned __int16)v405) >> 16;
            *((_WORD *)v33 + 3) = bswap32(LOWORD(v412[0])) >> 16;
            v39 = 5;
            goto LABEL_354;
          }
          return 0;
        }
        if (v388 != -2146172928)
          goto LABEL_788;
        if ((int)v53 < 2)
          goto LABEL_351;
        v196 = 0;
        v197 = (v52 << 32) + v49 + 1;
        v198 = v53 - 1;
        do
        {
          v196 = 10 * v196 + *(unsigned __int8 *)(v54 + v197) - 48;
          if (v196 >= 0x10000)
          {
            *a4 = 161;
LABEL_784:
            *(_QWORD *)(a11 + 168) = v197;
            return 0;
          }
          ++v197;
          --v198;
        }
        while (v198);
        if (v196 > *(_DWORD *)(a11 + 212))
        {
LABEL_788:
          *a4 = 115;
          v197 = v372;
          goto LABEL_784;
        }
        if (!v196)
LABEL_351:
          LOWORD(v196) = -1;
        v33[3] = -113;
        v33[4] = BYTE1(v196);
        v33[5] = v196;
LABEL_353:
        v39 = 3;
LABEL_354:
        v40 = 0;
        v41 = 0;
        v45 = 135;
        v46 = 1;
        v47 = 1;
LABEL_452:
        ++*(_WORD *)(a11 + 180);
        *v33 = v45;
        v410 = 0;
        ++v411;
        v409 = (unsigned __int8 *)v33;
        v230 = *(_DWORD *)(a11 + 280);
        v231 = compile_regex(v385, &v409, &v411, a4, v39, &v407, &v406, (char *)&v407 + 4, (char *)&v406 + 4, &v401, a11, v374);
        if (!v231)
          return 0;
        --*(_WORD *)(a11 + 180);
        if (v231 > 0)
          v29 = v46 & v40;
        else
          v29 = 0;
        v375 = v231;
        if (v41)
        {
          --*(_WORD *)(a11 + 182);
          v19 = a12;
          v20 = v400;
          v28 = v394;
          goto LABEL_466;
        }
        v19 = a12;
        v232 = v47 ^ 1;
        if (a12)
          v232 = 1;
        v20 = v400;
        v28 = v394;
        if ((v232 & 1) != 0)
        {
LABEL_466:
          v136 = v398;
          v137 = v396;
          v138 = v399;
          if (!v19)
          {
LABEL_474:
            v33 = (char *)v409;
            if (v45 < 0x82)
            {
              v369 = 0;
              v236 = v45 != 126 || v406 < 0;
              v237 = !v236;
              v238 = (int)v406 >= 0;
              v239 = (v237 & v238) == 0;
              if ((v237 & v238) != 0)
                v91 = HIDWORD(v407);
              else
                v91 = v137;
              if (v239)
                v92 = v136;
              else
                v92 = HIDWORD(v406);
              v90 = v138;
              v376 = v136;
              v378 = __PAIR64__(v138, v137);
              __src = v386;
            }
            else
            {
              if (v386 != -2 || (_DWORD)v406 == -2)
              {
                v92 = HIDWORD(v406);
                if ((v406 & 0x80000000) != 0 || (v406 & 0x8000000000000000) == 0)
                {
                  v369 = 0;
                }
                else
                {
                  v369 = 0;
                  HIDWORD(v407) = v407;
                  v92 = v406 | v230;
                  HIDWORD(v406) = v406 | v230;
                }
                v90 = v138;
                __src = v386;
              }
              else
              {
                if ((int)v406 < 0)
                  v90 = v138;
                else
                  v90 = v407;
                if ((int)v406 < 0)
                  v235 = -1;
                else
                  v235 = v406;
                v386 = v235;
                v369 = (int)v406 >= 0;
                __src = -1;
                v92 = HIDWORD(v406);
              }
              if (v92 < 0)
                v91 = v137;
              else
                v91 = HIDWORD(v407);
              if (v92 < 0)
                v92 = v136;
              v376 = v136;
              v378 = __PAIR64__(v138, v137);
            }
            goto LABEL_516;
          }
          goto LABEL_467;
        }
        v233 = 1;
        v234 = v33;
        v136 = v398;
        v137 = v396;
        v138 = v399;
        do
        {
          v234 += __rev16(*(unsigned __int16 *)(v234 + 1));
          --v233;
        }
        while (*v234 != 121);
        if (v33[3] != 164)
        {
          if (-v233 >= 2)
          {
            *(_QWORD *)(a11 + 168) = v372;
            v330 = 127;
            goto LABEL_780;
          }
          if (v233)
            v29 = v231 > 0;
          else
            v406 = -1;
          v45 = 135;
          if (!a12)
            goto LABEL_474;
LABEL_467:
          v31 = v393;
          if (2147483627 - v20 >= v410 - 6)
          {
            v20 += v410 - 6;
            *(_DWORD *)(v33 + 1) = 7930624;
            v33[5] = 3;
            v33 += 6;
            v90 = v138;
            v91 = v137;
            v92 = v136;
            goto LABEL_702;
          }
          goto LABEL_776;
        }
        if (!v233)
        {
          v33[3] = -111;
          v33 = (char *)v409;
LABEL_515:
          v90 = v138;
          v91 = v137;
          v92 = v136;
          goto LABEL_516;
        }
        *(_QWORD *)(a11 + 168) = v372;
        v330 = 154;
LABEL_780:
        *a4 = v330;
        return 0;
      case 0x12:
        v122 = v15[3];
        v121 = v15 + 3;
        v120 = v122;
        v123 = *(v121 - 1) | ((unint64_t)*(v121 - 2) << 32);
        v411 = v121;
        if (v122 <= *(_DWORD *)(a11 + 212))
        {
          if (v120 > *(_DWORD *)(a11 + 248))
            *(_DWORD *)(a11 + 248) = v120;
          v40 = 0;
          v41 = 0;
          v372 = v123 - 2;
          v33[3] = -115;
          v33[4] = BYTE1(v120);
          v33[5] = v120;
          v39 = 3;
          goto LABEL_452;
        }
        *a4 = 115;
        *(_QWORD *)(a11 + 168) = v123;
        return 0;
      case 0x15:
        v124 = v15[2];
        if (v15[1])
        {
          if (v124 < 0xA || v124 == 10 && v15[3] <= 0x20)
          {
            v125 = -110;
            goto LABEL_450;
          }
        }
        else if (v124 == 10)
        {
          if (v15[3] == 32)
            v125 = -110;
          else
            v125 = -111;
LABEL_450:
          v40 = 0;
          v41 = 0;
          v33[3] = v125;
          v411 += 3;
LABEL_451:
          v39 = 1;
          goto LABEL_452;
        }
        v125 = -111;
        goto LABEL_450;
      case 0x16:
        v29 = 0;
        if ((v385 & 0x400) != 0)
          LOBYTE(v96) = 26;
        else
          LOBYTE(v96) = 25;
        goto LABEL_118;
      case 0x17:
        v95 = v386;
        if (v386 == -2)
          v95 = -1;
        if ((v385 & 0x20) != 0)
          v126 = 13;
        else
          v126 = 12;
        *v33++ = v126;
        v29 = 1;
        v90 = v26;
        v91 = v27;
        v378 = __PAIR64__(v26, v27);
        v92 = v32;
        v376 = v32;
LABEL_178:
        v386 = v95;
        goto LABEL_179;
      case 0x18:
        v29 = (v43 - 6) < 0x11;
        v95 = v386;
        if ((v29 & (v386 == -2)) != 0)
          v95 = -1;
        v386 = v95;
        if ((v43 - 15) > 1)
        {
          if ((_DWORD)v43 == 14)
            *(_DWORD *)(a11 + 208) |= 0x400000u;
          v20 = v400;
          v28 = v394;
          if (((v34 & 0xFFFE) == 4 || (_DWORD)v43 == 1) && !*(_DWORD *)(a11 + 276))
            *(_DWORD *)(a11 + 276) = 1;
          if ((_DWORD)v43 == 14 && (a1 & 0x80000) == 0)
            v220 = 13;
          else
            v220 = v34;
          *v33++ = v220;
          v90 = v26;
          v91 = v27;
          v376 = v32;
          v378 = __PAIR64__(v26, v27);
          v92 = v32;
          __src = v95;
          goto LABEL_434;
        }
        v128 = v15[1];
        v127 = v128;
        v411 = v15 + 1;
        v129 = HIWORD(v128);
        if ((_DWORD)v43 == 16)
          v130 = 16;
        else
          v130 = 15;
        *v33 = v130;
        v33[1] = v129;
        v33[2] = v127;
        v33 += 3;
        v90 = v26;
        v91 = v27;
        v378 = __PAIR64__(v26, v27);
        v92 = v32;
        v376 = v32;
LABEL_179:
        __src = v95;
        goto LABEL_180;
      case 0x1A:
        v39 = 0;
        v41 = 0;
        v47 = 0;
        v45 = 131;
LABEL_191:
        v40 = 1;
        goto LABEL_452;
      case 0x1B:
        v29 = 0;
        v131 = v15[1];
        v363 = (v131 >> 18) & 1;
        v411 = v15 + 1;
        v385 = v131;
        v367 = (v131 & 0x40000) == 0;
        v368 = (v131 >> 3) & 1;
        goto LABEL_119;
      case 0x20:
        v133 = v15[2];
        v132 = v15 + 2;
        v372 = v133 | ((unint64_t)*(v132 - 1) << 32);
        v411 = v132;
        v81 = a11;
        if (v43 <= *(_DWORD *)(a11 + 212))
        {
          v19 = a12;
LABEL_195:
          v369 = 0;
          v29 = 0;
          *v33 = 117;
          v33[1] = BYTE1(v43);
          v33[2] = v43;
          *(_DWORD *)(v81 + 292) = 1;
          v33 += 3;
          v134 = v386;
          if (v386 == -2)
            v134 = -1;
          v386 = v134;
          v90 = v399;
          v91 = v396;
          v92 = v398;
LABEL_181:
          v20 = v400;
LABEL_182:
          v31 = v393;
          v28 = v394;
          goto LABEL_702;
        }
LABEL_787:
        *(_QWORD *)(v81 + 168) = v372;
        v330 = 115;
        goto LABEL_780;
      case 0x22:
        v46 = 0;
        v39 = 0;
        v47 = 0;
        ++*(_WORD *)(a11 + 182);
        v45 = 126;
        goto LABEL_227;
      case 0x23:
        if (v15[1] != -2145845248 || v15[2] + 2143551487 > 0xFFF4FFFE)
        {
          v46 = 0;
          v39 = 0;
          v47 = 0;
          ++*(_WORD *)(a11 + 182);
          v45 = 127;
LABEL_227:
          v40 = 1;
          v41 = 1;
          goto LABEL_452;
        }
        v29 = 0;
        *v33++ = -97;
        ++v411;
LABEL_119:
        v90 = v26;
        v91 = v27;
        v92 = v32;
LABEL_180:
        v19 = a12;
        goto LABEL_181;
      case 0x24:
        v46 = 0;
        v39 = 0;
        v47 = 0;
        ++*(_WORD *)(a11 + 182);
        v45 = 128;
        goto LABEL_227;
      case 0x25:
        v46 = 0;
        v39 = 0;
        v47 = 0;
        ++*(_WORD *)(a11 + 182);
        v45 = 129;
        goto LABEL_227;
      case 0x26:
      case 0x2A:
        goto LABEL_214;
      case 0x27:
        *(_DWORD *)(a11 + 284) = 1;
        v135 = *(uint64_t **)(a11 + 184);
        if (v135)
        {
          v19 = a12;
          v20 = v400;
          v28 = v394;
          v136 = v32;
          v137 = v27;
          v138 = v26;
          do
          {
            if (*((unsigned __int16 *)v135 + 6) < *(unsigned __int16 *)(a11 + 182))
              break;
            if (a12)
            {
              v20 += 3;
            }
            else
            {
              *v33 = -94;
              v33[1] = *((_BYTE *)v135 + 9);
              v33[2] = *((_BYTE *)v135 + 8);
              v33 += 3;
            }
            v135 = (uint64_t *)*v135;
          }
          while (v135);
        }
        else
        {
          v19 = a12;
          v20 = v400;
          v28 = v394;
          v136 = v32;
          v137 = v27;
          v138 = v26;
        }
        v29 = 0;
        if (*(_WORD *)(a11 + 182))
          v240 = -95;
        else
          v240 = -96;
        *v33++ = v240;
        v241 = v386;
        if (v386 == -2)
          v241 = -1;
        v386 = v241;
        goto LABEL_515;
      case 0x28:
      case 0x29:
        goto LABEL_117;
      case 0x2B:
      case 0x2D:
        *(_DWORD *)(a11 + 288) = 1;
LABEL_117:
        v29 = 0;
        v96 = verbops[(v34 + 2144993280) >> 16];
        goto LABEL_118;
      case 0x2C:
      case 0x2E:
        *(_DWORD *)(a11 + 288) = 1;
        goto LABEL_214;
      case 0x2F:
        v29 = 0;
        *(_DWORD *)(a11 + 208) |= 0x1000u;
        LOBYTE(v96) = -101;
LABEL_118:
        *v33++ = v96;
        goto LABEL_119;
      case 0x30:
        *(_DWORD *)(a11 + 208) |= 0x1000u;
LABEL_214:
        v139 = (unsigned __int8 *)(v33 + 1);
        *v33 = verbops[(v34 + 2144993280) >> 16];
        v140 = v33 + 2;
        v142 = v411[1];
        v141 = v142;
        ++v411;
        v409 = v139;
        if (v142 < 1)
        {
          v143 = 0;
          v19 = a12;
          v20 = v400;
        }
        else
        {
          v143 = 0;
          v19 = a12;
          v20 = v400;
          do
          {
            v144 = v411[1];
            ++v411;
            if ((a1 & 0x80000) != 0)
            {
              v145 = _pcre2_ord2utf_8(v144, (uint64_t)__dst);
            }
            else
            {
              __dst[0] = v144;
              v145 = 1;
            }
            v146 = v145;
            if (a12)
            {
              v20 += v145;
            }
            else
            {
              cstdlib_memcpy(v140, __dst, v145);
              v140 += v146;
              v143 += v146;
            }
            --v141;
          }
          while (v141);
          v139 = v409;
        }
        v28 = v394;
        v29 = 0;
        *v139 = v143;
        *v140 = 0;
        v33 = v140 + 1;
        v90 = v399;
        v91 = v396;
        v92 = v398;
        goto LABEL_516;
      case 0x31:
      case 0x32:
      case 0x33:
        goto LABEL_45;
      case 0x34:
      case 0x35:
      case 0x36:
        v42 = 1;
        goto LABEL_45;
      case 0x37:
      case 0x38:
      case 0x39:
        v42 = 0;
        v44 = 1;
        goto LABEL_45;
      case 0x3A:
      case 0x3B:
      case 0x3C:
        v61 = v15[2];
        v60 = v15 + 2;
        v44 = v61;
        v42 = *(v60 - 1);
        v411 = v60;
LABEL_45:
        if (v29)
          v62 = v42 == 0;
        else
          v62 = 1;
        v29 = !v62;
        v63 = v44 != v42;
        if (v44 == 1 && v42 == 1)
        {
          v19 = a12;
          v20 = v400;
LABEL_54:
          v28 = v394;
          v64 = a11;
LABEL_55:
          v31 = v393;
          goto LABEL_56;
        }
        v67 = v26;
        if (!v42)
          v67 = HIDWORD(v378);
        v399 = v67;
        if (v42)
          v66 = v27;
        else
          v66 = v378;
        v68 = v386;
        if (v42)
        {
          v65 = v398;
        }
        else
        {
          v68 = __src;
          v65 = v376;
        }
        v69 = (v35 + 2144206848) >> 16;
        v28 = v394;
        v386 = v68;
        if (v69 > 0xA)
          goto LABEL_334;
        v70 = 1;
        if (((1 << v69) & 0x249) != 0)
        {
          v71 = 0;
          v72 = 0;
        }
        else if (((1 << v69) & 0x492) != 0)
        {
          v70 = 0;
          v71 = 1;
          v72 = v367;
        }
        else
        {
LABEL_334:
          v70 = 0;
          v71 = 1;
          v72 = v363;
        }
        v409 = (unsigned __int8 *)v394;
        v73 = *v394;
        v74 = (v73 - 117);
        v19 = a12;
        if (v74 > 0x2A)
          goto LABEL_71;
        if (((1 << (v73 - 117)) & 0x57E00) != 0)
        {
          v398 = v65;
          v76 = (_DWORD)v33 - (_DWORD)v394;
          if ((_DWORD)v73 == 135)
          {
            if (v394[3] != 145 || v394[__rev16(*(unsigned __int16 *)(v394 + 1))] == 120)
              goto LABEL_624;
LABEL_135:
            v20 = v400;
            v64 = a11;
            v31 = v393;
LABEL_700:
            v65 = v398;
            goto LABEL_701;
          }
          if (v73 <= 0x81)
          {
            if (!v42)
            {
              v44 = v44 != 0;
              goto LABEL_627;
            }
            goto LABEL_135;
          }
LABEL_624:
          v276 = v66;
          v277 = v42 - 1;
          if (v42 == 1)
          {
            v395 = v76;
LABEL_642:
            v280 = 0;
            v66 = v276;
            if (v44 == 0x10000)
            {
              v75 = v33;
              v31 = v393;
LABEL_651:
              v286 = v75 - 3;
              v287 = &v75[-__rev16(*((unsigned __int16 *)v75 - 1)) - 3];
              v288 = *v287;
              v289 = v70 ^ 1;
              if (v288 != 130)
                v289 = 1;
              if ((v289 & 1) == 0)
              {
                v288 = 131;
                *v287 = -125;
                goto LABEL_658;
              }
              if (v288 != 130)
              {
LABEL_658:
                if (a12)
                  goto LABEL_692;
                if (v375 < 0)
                {
                  LOBYTE(v288) = v288 + 5;
                }
                else
                {
                  if (v288 != 135)
                    goto LABEL_692;
                  if (v287[__rev16(*(unsigned __int16 *)(v287 + 1))] == 120)
                  {
                    LOBYTE(v288) = -121;
                    goto LABEL_692;
                  }
                  LOBYTE(v288) = -116;
                }
                *v287 = v288;
LABEL_692:
                if (!v70)
                {
                  *v286 = v72 + 122;
                  v33 = v75;
                  v20 = v400;
                  v64 = a11;
                  goto LABEL_700;
                }
                if (v288 == 140 || v288 == 135)
                {
                  v304 = v29;
                  v305 = v63;
                  cstdlib_memmove(v287 + 3, v287, (int)v75 - (int)v287);
                  v63 = v305;
                  v29 = v304;
                  if (*v287 == 135)
                    v306 = -124;
                  else
                    v306 = -119;
                  *v287 = v306;
                  v75[3] = 124;
                  v307 = (_WORD)v75 - (_WORD)v287 + 3;
                  v75[4] = HIBYTE(v307);
                  v75[5] = v307;
                  v75 += 6;
                  v287[1] = HIBYTE(v307);
                  v287[2] = v307;
                }
                else
                {
                  *v287 = v288 + 1;
                  *v286 = 124;
                }
                v64 = a11;
                if (v280)
                  *v280 = -107;
                v292 = v42 >= 2;
                v20 = v400;
                if (!v292)
                  goto LABEL_577;
LABEL_717:
                v308 = v409;
                v309 = *v409;
                v396 = v66;
                if (*v409 > 0x5Cu)
                {
                  if ((v309 - 110) < 2)
                  {
                    v308 = v409 + 33;
LABEL_732:
                    v409 = v308;
                    goto LABEL_733;
                  }
                  if ((_DWORD)v309 == 112)
                  {
                    v312 = __rev16(*(unsigned __int16 *)(v409 + 1));
                  }
                  else
                  {
                    if ((_DWORD)v309 != 93)
                    {
LABEL_733:
                      v313 = (_DWORD)v75 - (_DWORD)v308;
                      if ((int)v75 - (int)v308 >= 1)
                      {
                        v314 = *v308;
                        if (v314 > 0x75 || (v315 = opcode_possessify[v314]) == 0)
                        {
                          v316 = v29;
                          v317 = v63;
                          cstdlib_memmove(v308 + 3, v308, ((_DWORD)v75 - (_DWORD)v308));
                          v63 = v317;
                          v29 = v316;
                          *v308 = -126;
                          v75[3] = 121;
                          v75[4] = (unsigned __int16)(v313 + 3) >> 8;
                          v75[5] = v313 + 3;
                          v33 = v75 + 6;
                          *(_WORD *)(v409 + 1) = bswap32(v313 + 3) >> 16;
                          goto LABEL_56;
                        }
                        *v308 = v315;
                      }
                      v33 = v75;
LABEL_56:
                      v65 = v398;
                      v66 = v396;
LABEL_701:
                      *(_DWORD *)(v64 + 280) |= 2 * v63;
                      v90 = v399;
                      v91 = v66;
                      v92 = v65;
                      goto LABEL_702;
                    }
                    v312 = 2 * (v409[3] - 15 < 2) + 4;
                  }
                }
                else
                {
                  if ((v309 - 29) > 0x33
                    || ((1 << (v309 - 29)) & 0x800400200100FLL) == 0)
                  {
                    goto LABEL_733;
                  }
                  v308 = &v409[_pcre2_OP_lengths_8[v309]];
                  v409 = v308;
                  if ((a1 & 0x80000) == 0)
                    goto LABEL_733;
                  v311 = *(v308 - 1);
                  if (v311 < 0xC0)
                    goto LABEL_733;
                  v312 = _pcre2_utf8_table4[v311 & 0x3F];
                }
                v308 += v312;
                goto LABEL_732;
              }
              *v286 = v72 + 122;
              v20 = v400;
              v64 = a11;
              if ((v71 & 1) == 0)
                goto LABEL_717;
LABEL_577:
              v33 = v75;
              goto LABEL_700;
            }
            v285 = v44 - v42;
            v279 = v28;
            v28 = 0;
LABEL_649:
            v31 = v393;
            if (v285 == 0x10000)
            {
              v280 = v28;
              v28 = v279;
              v75 = v33;
              goto LABEL_651;
            }
            if (a12 && v285)
            {
              v290 = (v410 + 7) * v285;
              v291 = v290 - 6;
              v292 = v290 <= 0x7FFFFFFF && 2147483627 - v400 >= v291;
              v64 = a11;
              if (!v292)
                goto LABEL_776;
              v20 = v400 + v291;
            }
            else
            {
              v397 = v66;
              v293 = v285 - 1;
              v64 = a11;
              if ((int)(v285 - 1) < 0)
              {
                v20 = v400;
                v66 = v397;
              }
              else
              {
                v392 = v71;
                v350 = v63;
                v342 = v29;
                v294 = v72 - 109;
                *v33 = v72 - 109;
                v295 = v33 + 1;
                if (v285 != 1)
                {
                  v296 = (_WORD)v33 + 2;
                  do
                  {
                    v297 = v296 - (_WORD)v280;
                    if (!v280)
                      v297 = 0;
                    v295[1] = HIBYTE(v297);
                    v280 = v295 + 1;
                    *v295 = -125;
                    v295[2] = v297;
                    cstdlib_memcpy(v295 + 3, v279, v395);
                    v295 += v395 + 4;
                    *(v295 - 1) = v294;
                    v296 += v395 + 4;
                    --v293;
                  }
                  while (v293);
                  v280 = &v295[-v395 - 3];
                  v19 = a12;
                }
                cstdlib_memcpy(v295, v279, v395);
                v33 = &v295[v395];
                v20 = v400;
                v31 = v393;
                v66 = v397;
                v29 = v342;
                v63 = v350;
                v71 = v392;
              }
            }
            if (v280)
            {
              v298 = (_DWORD)v33 + 1;
              do
              {
                v299 = v298 - (_BYTE)v280;
                v300 = &v33[-(v298 - (int)v280)];
                v301 = __rev16(*(unsigned __int16 *)(v300 + 1));
                *v33 = 121;
                v302 = (v298 - (_DWORD)v280) >> 8;
                v33[1] = (unsigned __int16)(v298 - (_WORD)v280) >> 8;
                v33[2] = v298 - (_BYTE)v280;
                if ((_DWORD)v301)
                  v303 = v280 == 0;
                else
                  v303 = 1;
                v280 -= v301;
                v33 += 3;
                v300[1] = v302;
                v300[2] = v299;
                v298 += 3;
              }
              while (!v303);
            }
            v75 = v33;
            v28 = v279;
            if ((v71 & 1) == 0)
              goto LABEL_717;
            goto LABEL_577;
          }
          if (!v42)
          {
            v66 = v276;
LABEL_627:
            v390 = v71;
            v278 = v72;
            v348 = v63;
            v341 = v29;
            v20 = v400;
            v395 = v76;
            if (v44 < 2 || v44 == 0x10000)
            {
              v279 = v28 + 1;
              cstdlib_memmove(v28 + 1, v28, v76);
              ++v33;
              if (!v44)
              {
                *v28++ = -93;
                v64 = a11;
                v31 = v393;
                v65 = v398;
                v29 = v341;
                v63 = v348;
                goto LABEL_701;
              }
              v280 = 0;
              v72 = v278;
              *v28 = v278 - 109;
            }
            else
            {
              v279 = v28 + 4;
              cstdlib_memmove(v28 + 4, v28, v76);
              v33 += 4;
              v72 = v278;
              *v28 = v278 - 109;
              v280 = v28 + 2;
              *(_WORD *)(v28 + 1) = 131;
              v28[3] = 0;
              v28 = 0;
            }
            v42 = 0;
            v71 = v390;
            if (v44 == 0x10000)
            {
              v280 = v28;
              v28 = v279;
              v75 = v33;
              v31 = v393;
              v29 = v341;
              v63 = v348;
              goto LABEL_651;
            }
            v285 = v44 - 1;
            v29 = v341;
            v63 = v348;
            goto LABEL_649;
          }
          v395 = v76;
          if (!a12)
          {
            v347 = v72;
            v349 = v63;
            v391 = v71;
            v282 = v29;
            v283 = v398;
            if (v369 && v398 < 0)
            {
              v276 = v399;
              v283 = v386;
            }
            v398 = v283;
            v284 = v76;
            do
            {
              cstdlib_memcpy(v33, v28, v284);
              v33 += v284;
              LODWORD(v277) = v277 - 1;
            }
            while ((_DWORD)v277);
            v29 = v282;
            v72 = v347;
            v63 = v349;
            v71 = v391;
            goto LABEL_642;
          }
          v281 = v410 * v277;
          if (v410 * v277 <= 0x7FFFFFFF && 2147483627 - v400 >= v281)
          {
            v400 += v281;
            goto LABEL_642;
          }
LABEL_776:
          v330 = 120;
          goto LABEL_780;
        }
        if ((_DWORD)v73 == 117)
        {
          v398 = v65;
          v389 = v71;
          v345 = v72;
          if (v42)
          {
            if (v44 == 0x10000 && v42 == 1)
            {
              v245 = v44 != v42;
              v246 = v29;
              v44 = 0x10000;
            }
            else
            {
              v264 = v66;
              v265 = v42 - (v44 == v42);
              if (a12)
              {
                if (v265 > 715827882)
                  goto LABEL_776;
                v266 = 3 * v265;
                if (2147483627 - v400 < v266)
                  goto LABEL_776;
                v400 += v266;
              }
              else
              {
                v340 = v29;
                if (v265 >= 1)
                {
                  do
                  {
                    v274 = v33;
                    cstdlib_memcpy(v33, v28, 3uLL);
                    v33 += 3;
                    v28 = v274;
                    --v265;
                  }
                  while (v265);
                  v28 = v33 - 3;
                }
                v29 = v340;
                v63 = v44 != v42;
                v71 = v389;
              }
              v275 = v44 - v42;
              v66 = v264;
              if (v44 == v42)
              {
                v75 = v33;
                v20 = v400;
                v64 = a11;
LABEL_576:
                v31 = v393;
                if ((v71 & 1) == 0)
                  goto LABEL_717;
                goto LABEL_577;
              }
              v245 = v63;
              v246 = v29;
              v42 = 0;
              if (v44 == 0x10000)
                v44 = 0x10000;
              else
                v44 = v275;
            }
          }
          else
          {
            v245 = v44 != v42;
            v246 = v29;
          }
          cstdlib_memmove(v28 + 3, v28, 3uLL);
          *(_WORD *)v28 = 131;
          v28[2] = 6;
          *((_WORD *)v28 + 3) = 121;
          v28[8] = 6;
          v33 += 6;
          v76 = (_DWORD)v33 - (_DWORD)v28;
          v375 = -1;
          v410 = 9;
          v29 = v246;
          v63 = v245;
          v71 = v389;
          v72 = v345;
          goto LABEL_624;
        }
        if (v74 == 42)
        {
          v20 = v400;
          v64 = a11;
          goto LABEL_333;
        }
LABEL_71:
        if ((v73 - 110) < 7)
        {
          v64 = a11;
          if (!v44)
          {
            v33 = v394;
            v20 = v400;
LABEL_333:
            v31 = v393;
            goto LABEL_701;
          }
          v398 = v65;
          if (v44 != 0x10000 || v42)
          {
            v75 = v33 + 1;
            if (v44 == 0x10000 && v42 == 1)
            {
              v200 = v72 + 100;
            }
            else
            {
              if (v44 != 1 || v42)
              {
                *v33 = v72 + 104;
                v33[1] = BYTE1(v42);
                v33[2] = v42;
                if (v44 == 0x10000)
                  v258 = 0;
                else
                  v258 = v44;
                v33[3] = HIBYTE(v258);
                v33[4] = v258;
                v75 = v33 + 5;
                goto LABEL_575;
              }
              v200 = v72 + 102;
            }
            *v33 = v200;
          }
          else
          {
            *v33 = v72 + 98;
            v75 = v33 + 1;
          }
LABEL_575:
          v20 = v400;
          goto LABEL_576;
        }
        v398 = v65;
        v396 = v66;
        if ((v73 - 29) > 3)
        {
          if (v73 >= 0x17)
          {
            v330 = 110;
            goto LABEL_780;
          }
          v107 = 0;
          if ((v73 - 15) > 1)
          {
            v108 = -1;
            v109 = -1;
          }
          else
          {
            v109 = v394[1];
            v108 = v394[2];
          }
          LOBYTE(v101) = 52;
          if (!v44)
            goto LABEL_131;
        }
        else
        {
          v101 = chartypeoffset[v73 - 29];
          v102 = *(v33 - 1);
          if ((a1 & 0x80000) != 0 && (v102 & 0xC0) == 0x80)
          {
            v337 = chartypeoffset[v73 - 29];
            v343 = v72;
            v103 = v71;
            v104 = v29;
            v105 = 0;
            do
              v106 = v33[--v105] & 0xC0;
            while (v106 == 128);
            v107 = -(int)v105;
            cstdlib_memcpy(__dst, &v33[v105], v107);
            v108 = -1;
            v109 = -1;
            v29 = v104;
            v63 = v44 != v42;
            v71 = v103;
            v72 = v343;
            LOBYTE(v101) = v337;
            if (!v44)
            {
LABEL_131:
              v33 = v394;
              v20 = v400;
              v64 = a11;
              goto LABEL_55;
            }
          }
          else
          {
            __dst[0] = *(v33 - 1);
            v108 = -1;
            v109 = -1;
            v107 = 1;
            if (v73 <= 0x1E && v42 >= 2)
            {
              v398 = *(_DWORD *)(a11 + 280) | v368;
              v108 = -1;
              v107 = 1;
              v396 = v102;
            }
            if (!v44)
              goto LABEL_131;
          }
        }
        v205 = v101 + v72;
        if (!v42)
        {
          if (v44 != 0x10000)
          {
            v20 = v400;
            if (v44 == 1)
            {
              v242 = v394 + 1;
              v257 = v205 + 37;
              v28 = v394;
              *v394 = v257;
            }
            else
            {
              v267 = v205 + 39;
              v28 = v394;
              *v394 = v267;
              v394[1] = BYTE1(v44);
              v394[2] = v44;
              v242 = v394 + 3;
            }
LABEL_594:
            v31 = v393;
            if (v107)
            {
LABEL_595:
              v268 = v29;
              v269 = v63;
              v270 = v71;
              cstdlib_memcpy(v242, __dst, v107);
              v71 = v270;
              v63 = v269;
              v29 = v268;
              v75 = &v242[v107];
              goto LABEL_716;
            }
LABEL_714:
            *v242 = v73;
            v75 = v242 + 1;
            if ((v109 & 0x80000000) == 0)
            {
              v242[1] = v109;
              v75 = v242 + 3;
              v242[2] = v108;
            }
LABEL_716:
            v64 = a11;
            v66 = v396;
            if ((v71 & 1) == 0)
              goto LABEL_717;
            goto LABEL_577;
          }
          v206 = v205 + 33;
LABEL_519:
          v28 = v394;
          *v394 = v206;
          v242 = v394 + 1;
          v20 = v400;
          goto LABEL_594;
        }
        if (v42 == 1)
        {
          if (v44 == 0x10000)
          {
            v206 = v205 + 35;
            goto LABEL_519;
          }
          v259 = v44 - 1;
          v20 = v400;
          if (v44 == 1)
            goto LABEL_54;
          *v33 = v205 + 39;
          v33[1] = HIBYTE(v259);
          v33[2] = v259;
          v242 = v33 + 3;
        }
        else
        {
          *v394 = v101 + 41;
          v394[1] = BYTE1(v42);
          v394[2] = v42;
          v242 = v394 + 3;
          v247 = v44 - v42;
          if (v44 == v42)
          {
            v20 = v400;
          }
          else
          {
            v20 = v400;
            if (v107)
            {
              v339 = v29;
              v346 = v108;
              v260 = v63;
              v261 = v71;
              v262 = v109;
              v338 = v247;
              cstdlib_memcpy(v242, __dst, v107);
              v247 = v338;
              v29 = v339;
              v109 = v262;
              v108 = v346;
              v71 = v261;
              v63 = v260;
              v263 = &v242[v107];
            }
            else
            {
              v394[3] = v73;
              if (v109 < 0)
              {
                v263 = v394 + 4;
              }
              else
              {
                v394[4] = v109;
                v263 = v394 + 6;
                v394[5] = v108;
              }
            }
            if (v44 != 0x10000)
            {
              v31 = v393;
              if (v247 == 1)
              {
                *v263 = v205 + 37;
                v242 = v263 + 1;
              }
              else
              {
                *v263 = v205 + 39;
                v263[1] = BYTE1(v247);
                v263[2] = v247;
                v242 = v263 + 3;
              }
LABEL_713:
              v28 = v394;
              if (v107)
                goto LABEL_595;
              goto LABEL_714;
            }
            *v263 = v205 + 33;
            v242 = v263 + 1;
          }
        }
        v31 = v393;
        goto LABEL_713;
      default:
        v110 = a1;
        if ((*v15 & 0x80000000) == 0)
          goto LABEL_148;
        goto LABEL_786;
    }
  }
}

void *add_name_to_table(uint64_t a1, void *__src, size_t __n, unsigned int a4, int a5)
{
  int v6;
  _WORD *v9;
  size_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char *v14;

  v6 = __n;
  v9 = *(_WORD **)(a1 + 72);
  v10 = __n;
  if (a5)
  {
    v11 = a5;
    v12 = __n + 2;
    do
    {
      v13 = cstdlib_memcmp(__src, v9 + 1, v10);
      if (v13)
      {
        if (v13 < 0)
          goto LABEL_9;
      }
      else if (*((_BYTE *)v9 + v12))
      {
LABEL_9:
        cstdlib_memmove((char *)v9 + *(unsigned __int16 *)(a1 + 178), v9, v11 * *(unsigned __int16 *)(a1 + 178));
        break;
      }
      v9 = (_WORD *)((char *)v9 + *(unsigned __int16 *)(a1 + 178));
      --v11;
    }
    while (v11);
  }
  *v9 = bswap32(a4) >> 16;
  v14 = (char *)(v9 + 1);
  cstdlib_memcpy(v14, __src, v10);
  return cstdlib_memset(&v14[v10], 0, *(unsigned __int16 *)(a1 + 178) - v6 - 2);
}

unsigned __int8 *find_recurse(unsigned __int8 *result, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  while (2)
  {
    v2 = *result;
    switch(*result)
    {
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '^':
      case '_':
        v3 = result[1];
        goto LABEL_9;
      case '[':
      case '\\':
      case ']':
      case 'a':
        v3 = result[3];
LABEL_9:
        v5 = 2 * ((v3 - 15) < 2);
        goto LABEL_10;
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'v':
        goto LABEL_15;
      case 'p':
        v6 = *(unsigned __int16 *)(result + 1);
        goto LABEL_13;
      case 'u':
        return result;
      case 'w':
        v6 = *(unsigned __int16 *)(result + 5);
LABEL_13:
        result += __rev16(v6);
        continue;
      default:
        if ((v2 - 150) <= 8 && ((1 << (v2 + 106)) & 0x155) != 0)
        {
          v5 = result[1];
LABEL_10:
          result += v5 + _pcre2_OP_lengths_8[v2];
          continue;
        }
        if (*result)
        {
LABEL_15:
          result += _pcre2_OP_lengths_8[v2];
          if (a2 && (v2 - 29) <= 0x37)
          {
            v7 = *(result - 1);
            if (v7 >= 0xC0)
              result += _pcre2_utf8_table4[v7 & 0x3F];
          }
          continue;
        }
        return 0;
    }
  }
}

uint64_t is_anchored(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t i;
  unsigned __int8 *significant_code;
  uint64_t result;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = a1;
  v10 = (a4 + 1);
  for (i = *a1; ; i = 0x78u)
  {
    significant_code = first_significant_code(&v9[_pcre2_OP_lengths_8[i]], 0);
    result = 0;
    v14 = *significant_code;
    if (v14 > 0x5D)
    {
      switch(*significant_code)
      {
        case 0x7Eu:
          v18 = significant_code;
          v17 = a2;
          v19 = a3;
          v20 = a4;
          v21 = 1;
          goto LABEL_16;
        case 0x7Fu:
        case 0x80u:
        case 0x81u:
          return result;
        case 0x82u:
          v18 = significant_code;
          v17 = a2;
          v19 = a3;
          v20 = v10;
          goto LABEL_15;
        case 0x83u:
        case 0x84u:
        case 0x88u:
        case 0x89u:
          goto LABEL_13;
        case 0x85u:
        case 0x86u:
        case 0x8Au:
        case 0x8Bu:
          v15 = __rev16(*(unsigned __int16 *)(significant_code + 3));
          if (v15 >= 0x20)
            v16 = 1;
          else
            v16 = 1 << v15;
          v17 = v16 | a2;
          v18 = significant_code;
          goto LABEL_14;
        case 0x87u:
        case 0x8Cu:
          if (significant_code[__rev16(*(unsigned __int16 *)(significant_code + 1))] != 120)
            return 0;
LABEL_13:
          v18 = significant_code;
          v17 = a2;
LABEL_14:
          v19 = a3;
          v20 = a4;
LABEL_15:
          v21 = a5;
LABEL_16:
          result = is_anchored(v18, v17, v19, v20, v21);
          if (!(_DWORD)result)
            return result;
          goto LABEL_24;
        default:
          if (v14 == 94)
            goto LABEL_19;
          return result;
      }
    }
    if (v14 - 1 >= 2)
      break;
LABEL_24:
    v9 += __rev16(*(unsigned __int16 *)(v9 + 1));
    if (*v9 != 120)
      return 1;
  }
  if (v14 - 85 >= 2)
  {
    if (v14 != 27)
      return result;
    goto LABEL_24;
  }
LABEL_19:
  if (significant_code[1] == 13)
  {
    result = 0;
    if ((int)a4 > 0 || (*(_DWORD *)(a3 + 252) & a2) != 0)
      return result;
    if (!(*(_DWORD *)(a3 + 288) | a5) && (*(_BYTE *)(a3 + 205) & 0x80) == 0)
      goto LABEL_24;
  }
  return 0;
}

uint64_t find_firstassertedcu(_BYTE *a1, int *a2, int a3)
{
  _BYTE *v5;
  uint64_t v6;
  int v7;
  char i;
  uint64_t v9;
  unsigned __int8 *significant_code;
  unsigned int v11;
  uint64_t firstassertedcu;
  uint64_t v16;

  v5 = a1;
  v6 = 0;
  v7 = -1;
  *a2 = -1;
  for (i = *a1 + 123; ; i = -13)
  {
    v9 = i > 6u ? 0 : qword_214F43EE0[i];
    significant_code = first_significant_code(&v5[v9 + 3], 1);
    v11 = *significant_code;
    if (v11 > 0x35)
      break;
    if (*significant_code > 0x28u)
    {
      if (v11 - 48 >= 2)
      {
        if (v11 == 41)
        {
          significant_code += 2;
        }
        else if (v11 != 43)
        {
          return 0;
        }
LABEL_32:
        if (!a3)
          return 0;
        v16 = significant_code[1];
        if (v7 < 0)
        {
          v7 = 0;
LABEL_41:
          v6 = v16;
          goto LABEL_42;
        }
        goto LABEL_38;
      }
    }
    else
    {
      if (v11 - 35 < 2 || v11 == 29)
        goto LABEL_32;
      if (v11 != 30)
        return 0;
    }
LABEL_36:
    if (!a3)
      return 0;
    v16 = significant_code[1];
    if (v7 < 0)
    {
      v7 = 1;
      goto LABEL_41;
    }
LABEL_38:
    if ((_DWORD)v6 != (_DWORD)v16)
      return 0;
LABEL_42:
    v5 += __rev16(*(unsigned __int16 *)(v5 + 1));
    if (*v5 != 120)
    {
      *a2 = v7;
      return v6;
    }
  }
  if (v11 - 126 > 0xD || ((1 << (v11 - 126)) & 0x31F1) == 0)
  {
    if (v11 == 54)
    {
      significant_code += 2;
    }
    else if (v11 != 56)
    {
      return 0;
    }
    goto LABEL_36;
  }
  firstassertedcu = find_firstassertedcu();
  if (v7 < 0)
  {
    v6 = firstassertedcu;
    v7 = 0;
    goto LABEL_42;
  }
  if ((_DWORD)v6 == (_DWORD)firstassertedcu && v7 == 0)
    goto LABEL_42;
  return 0;
}

uint64_t is_startline(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *significant_code;
  int v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  uint64_t result;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;

  v9 = a1;
  v27 = a4 + 1;
  v10 = *a1;
  while (2)
  {
    significant_code = first_significant_code(&v9[_pcre2_OP_lengths_8[v10]], 0);
    v12 = *significant_code;
    if (v12 != 135)
      goto LABEL_16;
    v14 = significant_code + 3;
    v13 = significant_code[3];
    if (v13 == 119)
    {
      v15 = __rev16(*((unsigned __int16 *)significant_code + 4));
      goto LABEL_7;
    }
    if (v13 == 118)
    {
      v15 = 6;
LABEL_7:
      v14 += v15;
      v13 = *v14;
    }
    v16 = v13 - 141;
    v17 = v16 > 0x12;
    v18 = (1 << v16) & 0x4003F;
    if (!v17 && v18 != 0)
      return 0;
    result = is_startline(v14, a2, a3, a4, 1);
    if (!(_DWORD)result)
      return result;
    do
      v14 += __rev16(*(unsigned __int16 *)(v14 + 1));
    while (*v14 == 120);
    significant_code = first_significant_code(v14 + 3, 0);
    v12 = *significant_code;
LABEL_16:
    switch(v12)
    {
      case 126:
        v21 = a2;
        v24 = a3;
        v25 = a4;
        v26 = 1;
        goto LABEL_24;
      case 127:
      case 128:
      case 129:
      case 135:
        goto LABEL_35;
      case 130:
        v21 = a2;
        v24 = a3;
        v25 = v27;
        goto LABEL_23;
      case 131:
      case 132:
      case 136:
      case 137:
        v21 = a2;
        goto LABEL_22;
      case 133:
      case 134:
      case 138:
      case 139:
        v22 = __rev16(*(unsigned __int16 *)(significant_code + 3));
        if (v22 >= 0x20)
          v23 = 1;
        else
          v23 = 1 << v22;
        v21 = v23 | a2;
LABEL_22:
        v24 = a3;
        v25 = a4;
LABEL_23:
        v26 = a5;
LABEL_24:
        result = is_startline(significant_code, v21, v24, v25, v26);
        if ((_DWORD)result)
          goto LABEL_25;
        return result;
      default:
        if ((v12 - 85) < 2 || v12 == 94)
        {
          if (significant_code[1] != 12)
            return 0;
          result = 0;
          if ((int)a4 > 0 || (*(_DWORD *)(a3 + 252) & a2) != 0)
            return result;
          if (*(_DWORD *)(a3 + 288) | a5 || (*(_BYTE *)(a3 + 205) & 0x80) != 0)
            return 0;
        }
        else
        {
LABEL_35:
          if ((v12 - 29) < 0xFFFFFFFE)
            return 0;
        }
LABEL_25:
        v9 += __rev16(*(unsigned __int16 *)(v9 + 1));
        v10 = 0x78u;
        if (*v9 == 120)
          continue;
        result = 1;
        break;
    }
    return result;
  }
}

_DWORD *manage_callouts(int a1, _QWORD *a2, int a3, _DWORD *a4, uint64_t a5)
{
  _DWORD *v5;
  BOOL v6;
  _DWORD *v7;
  _DWORD *v8;

  v5 = (_DWORD *)*a2;
  if (*a2)
    v5[2] = a1 - *(_DWORD *)(a5 + 56) - v5[1];
  if (a3)
  {
    if (v5)
      v6 = v5 == a4 - 4;
    else
      v6 = 0;
    if (v6 && v5[3] == 255)
    {
      v7 = a4;
      a4 = v5;
    }
    else
    {
      v7 = a4 + 4;
      *a4 = -2147090432;
      *((_QWORD *)a4 + 1) = 0xFF00000000;
    }
    v8 = a4;
    a4[1] = a1 - *(_DWORD *)(a5 + 56);
    a4 = v7;
  }
  else
  {
    v8 = 0;
  }
  *a2 = v8;
  return a4;
}

uint64_t get_ucp(unint64_t *a1, _DWORD *a2, _WORD *a3, _WORD *a4, _DWORD *a5, uint64_t a6)
{
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  char *v24;
  unsigned __int8 v25[32];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v7 = (_BYTE *)*a1;
  v8 = (_BYTE *)*a1;
  v9 = *(_QWORD *)(a6 + 64);
  if (*a1 >= v9)
    goto LABEL_14;
  v13 = *v8++;
  v12 = v13;
  *a2 = 0;
  if (v13 == 123)
  {
    if ((unint64_t)v8 < v9)
    {
      if (*v8 == 94)
      {
        *a2 = 1;
        v8 = v7 + 2;
      }
      if ((unint64_t)v8 < v9)
      {
        v14 = 0;
        while (1)
        {
          v15 = &v8[v14];
          v16 = (unint64_t)&v8[v14 + 1];
          v17 = v8[v14];
          if (!v8[v14])
          {
LABEL_12:
            v8 = v15 + 1;
            goto LABEL_14;
          }
          if (v17 == 125)
            break;
          v25[v14] = v17;
          if (v14 <= 0x1D)
          {
            ++v14;
            if (v16 < v9)
              continue;
          }
          goto LABEL_12;
        }
        v8 += v14 + 1;
        goto LABEL_17;
      }
    }
LABEL_14:
    v18 = 0;
    *a5 = 146;
    *a1 = (unint64_t)v8;
    return v18;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a6 + 32) + v12) & 2) == 0)
    goto LABEL_14;
  v25[0] = v12;
  v14 = 1;
LABEL_17:
  v25[v14] = 0;
  *a1 = (unint64_t)v8;
  v20 = 192;
  v21 = 0;
  while (1)
  {
    v22 = (v20 + v21) >> 1;
    v23 = _pcre2_strcmp_c8_8(v25, (unsigned __int8 *)&_pcre2_utt_names_8[_pcre2_utt_8[3 * v22]]);
    if (!v23)
      break;
    if (v23 <= 0)
      v20 = (v20 + v21) >> 1;
    else
      v21 = v22 + 1;
    if (v21 >= v20)
    {
      v18 = 0;
      *a5 = 147;
      return v18;
    }
  }
  v24 = (char *)&_pcre2_utt_8[3 * v22];
  *a3 = *((_WORD *)v24 + 1);
  *a4 = *((_WORD *)v24 + 2);
  return 1;
}

uint64_t read_name(unsigned __int8 **a1, unsigned __int8 *a2, unsigned __int8 a3, _QWORD *a4, _QWORD *a5, _DWORD *a6, int *a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;

  v8 = (uint64_t)*a1;
  v9 = *a1 + 1;
  v10 = **a1;
  if (v10 == 42)
    v11 = 2;
  else
    v11 = 16;
  if (v9 >= a2)
  {
    v12 = 0;
    if (v10 == 42)
      v13 = 160;
    else
      v13 = 162;
    goto LABEL_10;
  }
  *a5 = v9;
  *a4 = &v9[-*(_QWORD *)(a8 + 56)];
  if (*v9 - 48 >= 0xA)
  {
    v15 = 0;
    v12 = (~(_DWORD)v8 + (_DWORD)a2);
    v16 = (unsigned __int8 *)(v8 + 34);
    while (1)
    {
      v17 = &v9[v15];
      if (&v9[v15] >= a2)
      {
        v9 = a2;
        goto LABEL_19;
      }
      if ((v11 & *(_BYTE *)(*(_QWORD *)(a8 + 32) + *v17)) == 0)
        break;
      if ((_DWORD)++v15 == 33)
      {
        v12 = 0;
        *a7 = 148;
        v9 = v16;
        goto LABEL_11;
      }
    }
    v9 += v15;
    v12 = v15;
LABEL_19:
    if (v10 != 42)
    {
      if (!(_DWORD)v12)
      {
        v13 = 162;
        goto LABEL_10;
      }
      if (v17 >= a2 || *v9 != a3)
      {
        v12 = 0;
        v13 = 142;
        goto LABEL_10;
      }
      ++v9;
    }
    *a6 = v12;
    v12 = 1;
    goto LABEL_11;
  }
  v12 = 0;
  v13 = 144;
LABEL_10:
  *a7 = v13;
LABEL_11:
  *a1 = v9;
  return v12;
}

uint64_t check_posix_syntax(unsigned __int8 *a1, uint64_t a2, unsigned __int8 **a3)
{
  int v3;
  unsigned __int8 *v4;
  int v5;

  v4 = a1 + 1;
  v3 = *a1;
  if (a2 - (uint64_t)(a1 + 1) < 2)
    return 0;
  while (1)
  {
    v5 = a1[1];
    if (v5 == 91)
      break;
    if (v5 != 92)
    {
      if (v5 == 93)
        return 0;
      goto LABEL_10;
    }
    if ((a1[2] & 0xFE) != 0x5C)
      goto LABEL_10;
    v4 = a1 + 2;
LABEL_12:
    a1 = v4++;
    if (a2 - (uint64_t)v4 <= 1)
      return 0;
  }
  if (a1[2] == v3)
    return 0;
LABEL_10:
  if (v5 != v3 || a1[2] != 93)
    goto LABEL_12;
  *a3 = v4;
  return 1;
}

uint64_t check_posix_name(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v4 = 0;
  v5 = a2;
  v6 = "alpha";
  while (1)
  {
    v7 = posix_name_lengths[v4];
    if ((_DWORD)v7 == a2 && !_pcre2_strncmp_c8_8(a1, v6, v5))
      break;
    v6 += v7 + 1;
    if (++v4 == 14)
      return 0xFFFFFFFFLL;
  }
  return v4;
}

uint64_t set_lookbehind_lengths(unsigned int **a1, int *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v10;
  unsigned int *v11;
  unint64_t v12;
  int branchlength;
  uint64_t result;

  v10 = *a1;
  v11 = *a1 + 2;
  v12 = *v11 | ((unint64_t)(*a1)[1] << 32);
  while (1)
  {
    *a1 = v11 + 1;
    branchlength = get_branchlength(a1, a2, a3, a4, a5);
    if (branchlength < 0)
      break;
    *v10 |= branchlength;
    v11 = *a1;
    v10 = *a1;
    if (**a1 != -2147418112)
      return 1;
  }
  if (!*a2)
    *a2 = 125;
  result = 0;
  if (*(_QWORD *)(a5 + 168) == -1)
    *(_QWORD *)(a5 + 168) = v12;
  return result;
}

uint64_t get_branchlength(unsigned int **a1, int *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  unsigned int **v6;
  unsigned int *v7;
  int v8;
  int v9;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int grouplength;
  unsigned int v17;
  int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  unint64_t v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 v35;
  unsigned int v36;
  unsigned __int8 *v37;
  unsigned __int16 *v38;
  int v39;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  _QWORD *v47;
  int v48;
  uint64_t v50;
  unsigned int **v51;
  unsigned int *v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int *v55;

  v6 = a1;
  v7 = *a1;
  v55 = v7;
  v8 = (*a3)++;
  if (v8 > 2000)
  {
    v9 = 135;
    goto LABEL_87;
  }
  v13 = 0;
  v14 = 0;
  v53 = 0;
  v54 = 0;
  while (2)
  {
    v52 = 0;
    v15 = *v7;
    if ((*v7 & 0x80000000) == 0)
    {
LABEL_5:
      grouplength = 1;
      goto LABEL_6;
    }
    v17 = v15 & 0xFFFF0000;
    v18 = 0;
    grouplength = 0;
    switch(((v15 & 0xFFFF0000) + 2147418112) >> 16)
    {
      case 0u:
      case 0x18u:
        goto LABEL_82;
      case 1u:
      case 0x19u:
        goto LABEL_38;
      case 2u:
        if ((*(_BYTE *)(a5 + 205) & 2) != 0 || (*(_BYTE *)(a5 + 210) & 0x20) != 0)
          goto LABEL_86;
        v29 = (unsigned __int16)*v7;
        if ((unsigned __int16)*v7 > 9u)
          goto LABEL_52;
        v30 = *(_QWORD *)(a5 + 8 * v29 + 88);
        goto LABEL_53;
      case 3u:
        if ((*(_BYTE *)(a5 + 205) & 2) == 0)
          goto LABEL_28;
        goto LABEL_86;
      case 4u:
        goto LABEL_49;
      case 5u:
        goto LABEL_73;
      case 6u:
        grouplength = 0;
        v20 = v7 + 5;
        goto LABEL_74;
      case 7u:
        v18 = (unsigned __int16)*v7;
        goto LABEL_38;
      case 8u:
      case 0x15u:
      case 0x28u:
      case 0x2Au:
      case 0x2Cu:
      case 0x2Eu:
        goto LABEL_6;
      case 9u:
      case 0xDu:
        grouplength = 1;
        v55 = parsed_skip(v7, 1);
        if (v55)
          goto LABEL_6;
        goto LABEL_84;
      case 0xBu:
      case 0x16u:
        goto LABEL_5;
      case 0xEu:
        v18 = 0;
LABEL_38:
        v19 = v7 + 1;
        goto LABEL_39;
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
        v18 = 0;
        v19 = v7 + 4;
LABEL_39:
        v55 = v19;
        grouplength = get_grouplength(&v55, 1, (uint64_t)a2, (uint64_t)a3, v18, a4, a5);
        if (grouplength < 0)
          return 0xFFFFFFFFLL;
        goto LABEL_6;
      case 0x17u:
        v39 = (unsigned __int16)*v7;
        if (v39 == 17 || v39 == 22)
          return 0xFFFFFFFFLL;
        if ((v39 - 6) > 0x10)
          goto LABEL_22;
        if (v39 == 14 && (*(_DWORD *)(a5 + 204) & 0x80000) != 0)
        {
          v9 = 136;
          goto LABEL_87;
        }
        if ((v39 - 15) <= 1)
LABEL_49:
          v55 = v7 + 1;
        goto LABEL_5;
      case 0x1Au:
        grouplength = 0;
        v20 = v7 + 1;
        goto LABEL_74;
      case 0x1Fu:
        LODWORD(v29) = (unsigned __int16)*v7;
LABEL_52:
        v42 = v7[2];
        v41 = v7 + 2;
        v30 = v42 | ((unint64_t)*(v41 - 1) << 32);
        v55 = v41;
        goto LABEL_53;
      case 0x20u:
LABEL_28:
        v50 = a4;
        v51 = v6;
        v32 = v7[3];
        v31 = v7 + 3;
        v33 = *(_QWORD *)(a5 + 192);
        v34 = *(v31 - 2);
        v30 = v32 | ((unint64_t)*(v31 - 1) << 32);
        v55 = v31;
        v35 = *(_WORD *)(a5 + 176);
        if (!v35)
          goto LABEL_79;
        v36 = 0;
        v37 = (unsigned __int8 *)(*(_QWORD *)(a5 + 56) + v30);
        v38 = (unsigned __int16 *)(v33 + 14);
        while (2)
        {
          if ((_DWORD)v34 != *(v38 - 1))
            goto LABEL_33;
          if (_pcre2_strncmp_8(v37, *(unsigned __int8 **)(v38 - 7), v34))
          {
            v35 = *(_WORD *)(a5 + 176);
LABEL_33:
            ++v36;
            v38 += 8;
            if (v36 >= v35)
              goto LABEL_79;
            continue;
          }
          break;
        }
        LODWORD(v29) = *(_DWORD *)(v38 - 3);
        if (!(_DWORD)v29)
        {
LABEL_79:
          *a2 = 115;
          *(_QWORD *)(a5 + 168) = v30;
          return 0xFFFFFFFFLL;
        }
        if (v17 == -2145320960)
        {
          a4 = v50;
          v6 = v51;
        }
        else
        {
          v48 = *v38;
          a4 = v50;
          v6 = v51;
          if (v48 || (*(_BYTE *)(a5 + 210) & 0x20) != 0)
            goto LABEL_86;
        }
LABEL_53:
        if (v29 > *(_DWORD *)(a5 + 212))
        {
          *(_QWORD *)(a5 + 168) = v30;
          v9 = 115;
          goto LABEL_87;
        }
        if (!(_DWORD)v29)
          goto LABEL_86;
        v43 = *(unsigned int **)(a5 + 224);
        v44 = *v43;
        if (*v43 != 0x80000000)
        {
          do
          {
            if ((v44 & 0xFFFF0000) == 0x80050000)
            {
              ++v43;
            }
            else if (v44 == (v29 | 0x80080000))
            {
              break;
            }
            v45 = v43[1];
            ++v43;
            v44 = v45;
          }
          while (v45 != 0x80000000);
        }
        v52 = v43;
        v46 = parsed_skip(v43 + 1, 2);
        if (!v46)
        {
LABEL_84:
          v9 = 190;
          goto LABEL_87;
        }
        if (v55 > v43 && v55 < v46)
          goto LABEL_86;
        if (!a4)
        {
LABEL_67:
          v53 = a4;
          v54 = v43;
          v52 = v43 + 1;
          grouplength = get_grouplength(&v52, 0, (uint64_t)a2, (uint64_t)a3, v29, (uint64_t)&v53, a5);
          if (grouplength < 0)
          {
            if (!*a2)
              goto LABEL_86;
            return 0xFFFFFFFFLL;
          }
LABEL_6:
          v13 = (grouplength + v13);
          if ((int)v13 >= 0x10000)
          {
            v9 = 187;
            goto LABEL_87;
          }
          v7 = ++v55;
          v14 = grouplength;
          continue;
        }
        v47 = (_QWORD *)a4;
        while ((unsigned int *)v47[1] != v43)
        {
          v47 = (_QWORD *)*v47;
          if (!v47)
            goto LABEL_67;
        }
LABEL_86:
        v9 = 125;
LABEL_87:
        *a2 = v9;
        return 0xFFFFFFFFLL;
      case 0x21u:
      case 0x22u:
        v7 = parsed_skip(v7 + 1, 2);
        v55 = v7;
        if (!v7)
          goto LABEL_84;
        v20 = v7 + 1;
        HIDWORD(v26) = v7[1];
        LODWORD(v26) = HIDWORD(v26) + 2144272384;
        v25 = v26 >> 16;
        v27 = v25 >= 9;
        v28 = v25 - 9;
        if (v27)
        {
          if (v28 >= 3)
          {
LABEL_22:
            grouplength = 0;
            goto LABEL_6;
          }
LABEL_73:
          grouplength = 0;
          v20 = v7 + 3;
        }
        else
        {
          grouplength = 0;
        }
LABEL_74:
        v55 = v20;
        goto LABEL_6;
      case 0x23u:
      case 0x24u:
        if (!set_lookbehind_lengths(&v55, a2, a3, a4, a5))
          return 0xFFFFFFFFLL;
        goto LABEL_22;
      case 0x25u:
      case 0x29u:
      case 0x2Bu:
      case 0x2Du:
      case 0x2Fu:
        grouplength = 0;
        v20 = &v7[v7[1] + 1];
        goto LABEL_74;
      case 0x26u:
      case 0x27u:
        v7 = parsed_skip(v7, 0);
        if (!v7)
          goto LABEL_84;
LABEL_82:
        *v6 = v7;
        if ((int)v13 > *(_DWORD *)(a5 + 276))
          *(_DWORD *)(a5 + 276) = v13;
        return v13;
      case 0x39u:
      case 0x3Au:
      case 0x3Bu:
        v22 = v7[2];
        v21 = v7 + 2;
        v23 = *(v21 - 1);
        if (v23 != v22)
          goto LABEL_86;
        v24 = (v23 - 1) * v14;
        if (v23)
        {
          v14 = 0;
          grouplength = v24;
        }
        else
        {
          grouplength = 0;
        }
        LODWORD(v13) = v13 - v14;
        v55 = v21;
        goto LABEL_6;
      default:
        goto LABEL_86;
    }
  }
}

unsigned int *parsed_skip(unsigned int *a1, int a2)
{
  int v2;
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;

  v2 = 0;
  while (2)
  {
    v3 = *a1;
    v4 = 0;
    switch(HIWORD(*a1) ^ 0x8000)
    {
      case 0:
        return v4;
      case 1:
        v4 = a1;
        if (v2 | a2)
          goto LABEL_5;
        return v4;
      case 2:
      case 8:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x1A:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
        ++v2;
        goto LABEL_5;
      case 3:
        a1 += 2 * ((*a1 & 0xFFFE) > 9);
        goto LABEL_5;
      case 0xD:
        v4 = a1;
        if (a2 == 1)
          return v4;
        goto LABEL_5;
      case 0x18:
        v6 = a1 + 1;
        if ((unsigned __int16)*a1 - 15 > 1)
          v6 = a1;
        if ((unsigned __int16)*a1 - 27 >= 2)
          a1 = v6;
        else
          a1 += 3;
        goto LABEL_5;
      case 0x19:
        if (!v2)
          return a1;
        --v2;
LABEL_5:
        v5 = (v3 >> 16) & 0x7FFF;
        if (v5 <= 0x3C)
        {
          a1 += meta_extra_lengths[v5];
LABEL_7:
          ++a1;
          continue;
        }
        return 0;
      case 0x26:
      case 0x2A:
      case 0x2C:
      case 0x2E:
      case 0x30:
        a1 += a1[1];
        goto LABEL_5;
      default:
        if ((v3 & 0x80000000) != 0)
          goto LABEL_5;
        goto LABEL_7;
    }
  }
}

uint64_t get_grouplength(unsigned int **a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t branchlength;
  int v15;

  if (a5 < 1 || (*(_BYTE *)(a7 + 210) & 0x20) != 0)
    goto LABEL_5;
  LODWORD(v13) = *(_DWORD *)(*(_QWORD *)(a7 + 240) + 4 * a5);
  if ((v13 & 0x40000000) != 0)
    return 0xFFFFFFFFLL;
  if ((v13 & 0x80000000) == 0)
  {
LABEL_5:
    branchlength = get_branchlength(a1, a3, a4, a6, a7);
    if ((branchlength & 0x80000000) == 0)
    {
      v15 = -1;
      do
      {
        v13 = branchlength;
        if (v15 != -1 && v15 != (_DWORD)branchlength)
          break;
        if (**a1 == -2145845248)
        {
          if (a5 >= 1)
            *(_DWORD *)(*(_QWORD *)(a7 + 240) + 4 * a5) |= branchlength | 0x80000000;
          return v13;
        }
        ++*a1;
        branchlength = get_branchlength(a1, a3, a4, a6, a7);
        v15 = v13;
      }
      while ((branchlength & 0x80000000) == 0);
    }
    if (a5 >= 1)
      *(_DWORD *)(*(_QWORD *)(a7 + 240) + 4 * a5) |= 0x40000000u;
    return 0xFFFFFFFFLL;
  }
  if (a2)
    *a1 = parsed_skip(*a1, 2);
  return (unsigned __int16)v13;
}

uint64_t add_list_to_class(uint64_t result, _BYTE **a2, int a3, uint64_t a4, unsigned int *a5)
{
  unsigned int v5;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;

  v5 = *a5;
  if (*a5 != -1)
  {
    v9 = result;
    do
    {
      v10 = -1;
      do
      {
        v11 = v10 + 2;
        ++v10;
      }
      while (v5 + v10 + 1 == a5[v11]);
      v12 = &a5[v11];
      *(_DWORD *)(a4 + 264) = v5;
      *(_DWORD *)(a4 + 268) = a5[v10];
      result = add_to_class_internal(v9, a2, a3, a4, *a5, a5[v10], *a5);
      v5 = *v12;
      a5 = v12;
    }
    while (*v12 != -1);
  }
  return result;
}

uint64_t add_not_list_to_class(uint64_t a1, _BYTE **a2, int a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v10;
  uint64_t result;
  int v12;
  int *i;
  int v14;
  unsigned int v15;
  unsigned int v16;

  v10 = *a5;
  if (!(_DWORD)v10
    || (*(_DWORD *)(a4 + 264) = 0,
        *(_DWORD *)(a4 + 268) = v10 - 1,
        result = add_to_class_internal(a1, a2, a3, a4, 0, (int)v10 - 1, v10),
        LODWORD(v10) = *a5,
        *a5 != -1))
  {
    if ((a3 & 0x80000) != 0)
      v12 = 1114111;
    else
      v12 = -1;
    for (i = a5 + 1; ; ++i)
    {
      v14 = *i;
      v15 = v10 + 1;
      if (*i != (_DWORD)v10 + 1)
      {
        v16 = v14 == -1 ? v12 : v14 - 1;
        *(_DWORD *)(a4 + 264) = v15;
        *(_DWORD *)(a4 + 268) = v16;
        result = add_to_class_internal(a1, a2, a3, a4, v15, v16, (v14 - 1));
        v14 = *i;
        if (*i == -1)
          break;
      }
      LODWORD(v10) = v14;
    }
  }
  return result;
}

uint64_t find_dupname_details(unsigned __int8 *a1, unsigned int a2, unsigned int *a3, int *a4, _DWORD *a5, uint64_t a6)
{
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t result;

  v12 = *(unsigned __int8 **)(a6 + 72);
  v13 = *(unsigned __int16 *)(a6 + 176);
  if (*(_WORD *)(a6 + 176))
  {
    v14 = 0;
    v15 = a2 + 2;
    while (_pcre2_strncmp_8(a1, v12 + 2, a2) || v12[v15])
    {
      v12 += *(unsigned __int16 *)(a6 + 178);
      ++v14;
      v13 = *(unsigned __int16 *)(a6 + 176);
      if (v14 >= v13)
        goto LABEL_9;
    }
    v13 = *(unsigned __int16 *)(a6 + 176);
  }
  else
  {
    v14 = 0;
  }
LABEL_9:
  if (v14 >= v13)
  {
    result = 0;
    *a5 = 153;
    *(_QWORD *)(a6 + 168) = &a1[-*(_QWORD *)(a6 + 56)];
  }
  else
  {
    *a3 = v14;
    v16 = 1;
    do
    {
      v17 = v16;
      v18 = __rev16(*(unsigned __int16 *)v12);
      v19 = 1 << v18;
      if (v18 >= 0x20)
        v19 = 1;
      v20 = *(_DWORD *)(a6 + 248);
      *(_DWORD *)(a6 + 252) |= v19;
      if (v18 > v20)
        *(_DWORD *)(a6 + 248) = v18;
      if (v14 + v17 >= *(unsigned __int16 *)(a6 + 176))
        break;
      v12 += *(unsigned __int16 *)(a6 + 178);
      if (_pcre2_strncmp_8(a1, v12 + 2, a2))
        break;
      v16 = v17 + 1;
    }
    while (!v12[a2 + 2]);
    *a4 = v17;
    return 1;
  }
  return result;
}

uint64_t add_to_class_internal@<X0>(uint64_t a1@<X0>, _BYTE **a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, unsigned int a6@<W5>, uint64_t a7@<X8>)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  signed int v15;
  _DWORD *v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  _BYTE *v35;
  uint64_t v36;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;

  v7 = a6;
  v8 = a5;
  LODWORD(v10) = a3;
  if (a6 >= 0xFF)
    v12 = 255;
  else
    v12 = a6;
  if ((a3 & 8) == 0)
    goto LABEL_7;
  if ((a3 & 0x80000) != 0)
  {
    v13 = 0;
    v10 = a3 & 0xFFFFFFF7;
    v14 = a5;
LABEL_9:
    v38 = v14 - 1;
    v41 = v14;
LABEL_10:
    v39 = v7 + 1;
    v42 = v7;
    while (v8 <= v7)
    {
      v15 = v8;
      while (1)
      {
        v16 = &_pcre2_ucd_records_8[2
                                  * _pcre2_ucd_stage2_8[(int)(v15
                                                            - (a7 & 0xFFFFFF80)
                                                            + (_pcre2_ucd_stage1_8[v15 / 128] << 7))]];
        a7 = *((unsigned __int8 *)v16 + 3);
        if (*((_BYTE *)v16 + 3))
        {
          v8 = v15 + 1;
          v17 = (int *)((char *)&_pcre2_ucd_caseless_sets_8 + 4 * a7);
          v18 = *v17;
          if (*v17 == -1)
          {
            v19 = 0;
          }
          else
          {
            v40 = v12;
            v19 = 0;
            do
            {
              if (v18 == v15)
              {
                v20 = 0;
                v18 = v17[1];
              }
              else
              {
                v20 = -1;
                do
                {
                  v21 = v17[v20 + 2];
                  ++v20;
                }
                while (v18 + v20 + 1 == v21);
                v19 += add_to_class_internal(a1, a2, v10, a4);
                v18 = v21;
              }
              v17 += (v20 + 1);
            }
            while (v18 != -1);
            v12 = v40;
          }
          goto LABEL_40;
        }
        LODWORD(a7) = v16[1];
        if ((_DWORD)a7)
          break;
        if (++v15 > v7)
          goto LABEL_48;
      }
      v22 = v15 + 1;
      v23 = v15 + a7;
      do
      {
        v24 = v23;
        v8 = v22;
        if (v22 > v7)
          break;
        v25 = v22 + 127;
        if ((v8 & 0x80000000) == 0)
          v25 = v8;
        v26 = &_pcre2_ucd_records_8[2
                                  * _pcre2_ucd_stage2_8[v8 - (v25 & 0xFFFFFF80) + (_pcre2_ucd_stage1_8[v25 >> 7] << 7)]];
        if (*((_BYTE *)v26 + 3))
          break;
        ++v23;
        v27 = v26[1];
        v22 = v8 + 1;
      }
      while (v23 == v27 + v8);
      if ((v15 + a7) < *(_DWORD *)(a4 + 264) || v24 > *(_DWORD *)(a4 + 268))
      {
        if (v15 + (int)a7 < v14 && v24 >= v38)
        {
          v14 = v15 + a7;
          goto LABEL_9;
        }
        if (v24 <= v7 || v15 + (int)a7 > v39)
        {
          v19 = add_to_class_internal(a1, a2, v10, a4);
LABEL_40:
          v13 = (v19 + v13);
          v14 = v41;
          v7 = v42;
          continue;
        }
        if (v24 >= 0xFF)
          LODWORD(a7) = 255;
        else
          LODWORD(a7) = v24;
        if (v24 > v12)
          v12 = a7;
        v7 = v24;
        goto LABEL_10;
      }
    }
LABEL_48:
    v8 = v14;
  }
  else
  {
    if (v12 < a5)
    {
LABEL_7:
      v13 = 0;
      goto LABEL_52;
    }
    v28 = a5;
    v29 = v12 + 1;
    do
    {
      v30 = *(unsigned __int8 *)(*(_QWORD *)(a4 + 16) + v28);
      *(_BYTE *)(a1 + (v30 >> 3)) |= 1 << (v30 & 7);
      ++v28;
    }
    while (v29 != v28);
    v13 = v29 - a5;
  }
LABEL_52:
  if (v7 > 0xFF && (v10 & 0x80000) == 0)
    v32 = 255;
  else
    v32 = v7;
  if (v8 <= *(_DWORD *)(a4 + 264) || v32 >= *(_DWORD *)(a4 + 268))
  {
    if (v8 <= v12)
    {
      v33 = v8;
      do
      {
        *(_BYTE *)(a1 + ((unint64_t)v33 >> 3)) |= 1 << (v33 & 7);
        v13 = (v13 + 1);
        ++v33;
      }
      while (v33 <= v12);
    }
    v34 = v8 <= 0x100 ? 256 : v8;
    if (v32 >= v34)
    {
      v35 = *a2;
      if ((v10 & 0x80000) != 0)
      {
        if (v34 < v7)
        {
          *v35 = 2;
          v36 = (uint64_t)&v35[_pcre2_ord2utf_8(v34, (uint64_t)(v35 + 1)) + 1];
LABEL_72:
          v35 = (_BYTE *)(v36 + _pcre2_ord2utf_8(v7, v36));
          goto LABEL_73;
        }
        if (v34 == v7)
        {
          *v35 = 1;
          v36 = (uint64_t)(v35 + 1);
          goto LABEL_72;
        }
      }
LABEL_73:
      *a2 = v35;
    }
  }
  return v13;
}

unsigned __int8 *first_significant_code(unsigned __int8 *result, int a2)
{
  uint64_t v2;
  unsigned int v3;

  while (2)
  {
    v2 = *result;
    switch(*result)
    {
      case 0x76u:
      case 0x8Du:
      case 0x8Eu:
      case 0x8Fu:
      case 0x90u:
      case 0x91u:
      case 0x92u:
        goto LABEL_7;
      case 0x77u:
        result += __rev16(*(unsigned __int16 *)(result + 5));
        continue;
      case 0x78u:
      case 0x79u:
      case 0x7Au:
      case 0x7Bu:
      case 0x7Cu:
      case 0x7Du:
      case 0x7Eu:
      case 0x82u:
      case 0x83u:
      case 0x84u:
      case 0x85u:
      case 0x86u:
      case 0x88u:
      case 0x89u:
      case 0x8Au:
      case 0x8Bu:
        return result;
      case 0x7Fu:
      case 0x80u:
      case 0x81u:
        if (!a2)
          return result;
        do
        {
          result += __rev16(*(unsigned __int16 *)(result + 1));
          v2 = *result;
        }
        while (v2 == 120);
        goto LABEL_7;
      case 0x87u:
      case 0x8Cu:
        if (result[3] != 145)
          return result;
        v3 = __rev16(*(unsigned __int16 *)(result + 1));
        if (result[v3] != 121)
          return result;
        result += v3 + 3;
        continue;
      default:
        if ((v2 - 4) < 2)
        {
          if (!a2)
            return result;
LABEL_7:
          result += _pcre2_OP_lengths_8[v2];
          continue;
        }
        if ((_DWORD)v2 == 163)
        {
          result += __rev16(*((unsigned __int16 *)result + 1)) + 4;
          continue;
        }
        return result;
    }
  }
}

uint64_t pcre2_config_8(int a1, _BYTE *a2)
{
  char v2;
  char v3;
  uint64_t result;
  int v6;
  char *v7;
  unsigned int v8;
  const char *v9;

  result = 4294967262;
  if (a2)
  {
    switch(a1)
    {
      case 0:
      case 9:
      case 14:
        result = 0;
        v6 = 1;
        goto LABEL_19;
      case 1:
      case 8:
      case 13:
        result = 0;
        *(_DWORD *)a2 = 0;
        return result;
      case 3:
      case 5:
        result = 0;
        v6 = 2;
        goto LABEL_19;
      case 4:
      case 7:
        result = 0;
        v6 = 10000000;
        goto LABEL_19;
      case 6:
        result = 0;
        v6 = 250;
        goto LABEL_19;
      case 10:
        v7 = _pcre2_unicode_version_8;
        goto LABEL_17;
      case 11:
        v7 = "10.32 2018-09-10";
LABEL_17:
        v8 = _pcre2_strcpy_c8_8(a2, v7);
        return v8 + 1;
      case 12:
        result = 0;
        v6 = 20000000;
LABEL_19:
        *(_DWORD *)a2 = v6;
        return result;
      default:
        return result;
    }
  }
  if (!(!v3 & v2))
  {
    if (((1 << a1) & 0x73FB) != 0)
      return 4;
    if (a1 == 10)
    {
      v9 = _pcre2_unicode_version_8;
    }
    else
    {
      if (a1 != 11)
        return result;
      v9 = "10.32 2018-09-10";
    }
    v8 = cstdlib_strlen(v9);
    return v8 + 1;
  }
  return result;
}

_QWORD *_pcre2_memctl_malloc_8(size_t a1, __int128 *a2)
{
  _QWORD *result;
  __int128 v4;

  if (a2)
  {
    result = (_QWORD *)(*(uint64_t (**)(size_t, _QWORD))a2)(a1, *((_QWORD *)a2 + 2));
    if (result)
    {
      v4 = *a2;
      result[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)result = v4;
    }
  }
  else
  {
    result = malloc(a1);
    if (result)
    {
      *result = default_malloc;
      result[1] = default_free;
      result[2] = 0;
    }
  }
  return result;
}

void *(__cdecl **pcre2_general_context_create_8(void *(__cdecl *a1)(size_t __size), void (__cdecl *a2)(void *), void *(__cdecl *a3)(size_t __size)))(size_t __size)
{
  void *(__cdecl *v5)(size_t);
  void *(__cdecl **result)(size_t);
  void (__cdecl *v7)(void *);

  if (a1)
  {
    v5 = a1;
    result = (void *(__cdecl **)(size_t))((uint64_t (*)(uint64_t, void *(__cdecl *)(size_t)))a1)(24, a3);
  }
  else
  {
    v5 = default_malloc;
    result = (void *(__cdecl **)(size_t))((uint64_t (*)(uint64_t, void *(__cdecl *)(size_t)))default_malloc)(24, a3);
  }
  if (result)
  {
    v7 = default_free;
    if (a2)
      v7 = a2;
    *result = v5;
    result[1] = (void *(__cdecl *)(size_t))v7;
    result[2] = a3;
  }
  return result;
}

__n128 pcre2_compile_context_create_8(uint64_t a1)
{
  _QWORD *v2;
  __n128 result;

  v2 = _pcre2_memctl_malloc_8(0x48uLL, (__int128 *)a1);
  if (v2)
  {
    *((_OWORD *)v2 + 2) = xmmword_24D292200;
    *((_OWORD *)v2 + 3) = unk_24D292210;
    v2[8] = 0;
    result.n128_u64[0] = 0;
    *(_OWORD *)v2 = _pcre2_default_compile_context_8;
    *((_OWORD *)v2 + 1) = *(_OWORD *)algn_24D2921F0;
    if (a1)
    {
      result = *(__n128 *)a1;
      v2[2] = *(_QWORD *)(a1 + 16);
      *(__n128 *)v2 = result;
    }
  }
  return result;
}

__n128 pcre2_match_context_create_8(uint64_t a1)
{
  _OWORD *v2;
  __n128 result;

  v2 = _pcre2_memctl_malloc_8(0x40uLL, (__int128 *)a1);
  if (v2)
  {
    *v2 = _pcre2_default_match_context_8;
    v2[1] = unk_24D292238;
    result.n128_u64[0] = 0;
    v2[2] = xmmword_24D292248;
    v2[3] = *(_OWORD *)&dword_24D292258;
    if (a1)
    {
      result = *(__n128 *)a1;
      *((_QWORD *)v2 + 2) = *(_QWORD *)(a1 + 16);
      *v2 = result;
    }
  }
  return result;
}

__n128 pcre2_convert_context_create_8(uint64_t a1)
{
  _OWORD *v2;
  __n128 result;

  v2 = _pcre2_memctl_malloc_8(0x20uLL, (__int128 *)a1);
  if (v2)
  {
    result.n128_u64[0] = _pcre2_default_convert_context_8;
    *v2 = _pcre2_default_convert_context_8;
    v2[1] = *(_OWORD *)algn_24D292278;
    if (a1)
    {
      result = *(__n128 *)a1;
      *((_QWORD *)v2 + 2) = *(_QWORD *)(a1 + 16);
      *v2 = result;
    }
  }
  return result;
}

void *pcre2_general_context_copy_8(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)((uint64_t (*)(uint64_t, _QWORD))*a1)(24, a1[2]);
  v3 = v2;
  if (v2)
    cstdlib_memcpy(v2, a1, 0x18uLL);
  return v3;
}

void *pcre2_compile_context_copy_8(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)((uint64_t (*)(uint64_t, _QWORD))*a1)(72, a1[2]);
  v3 = v2;
  if (v2)
    cstdlib_memcpy(v2, a1, 0x48uLL);
  return v3;
}

void *pcre2_match_context_copy_8(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)((uint64_t (*)(uint64_t, _QWORD))*a1)(64, a1[2]);
  v3 = v2;
  if (v2)
    cstdlib_memcpy(v2, a1, 0x40uLL);
  return v3;
}

void *pcre2_convert_context_copy_8(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)((uint64_t (*)(uint64_t, _QWORD))*a1)(32, a1[2]);
  v3 = v2;
  if (v2)
    cstdlib_memcpy(v2, a1, 0x20uLL);
  return v3;
}

uint64_t pcre2_general_context_free_8(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 8))(result, *(_QWORD *)(result + 16));
  return result;
}

uint64_t pcre2_compile_context_free_8(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 8))(result, *(_QWORD *)(result + 16));
  return result;
}

uint64_t pcre2_match_context_free_8(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 8))(result, *(_QWORD *)(result + 16));
  return result;
}

uint64_t pcre2_convert_context_free_8(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 8))(result, *(_QWORD *)(result + 16));
  return result;
}

uint64_t pcre2_set_character_tables_8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 40) = a2;
  return 0;
}

uint64_t pcre2_set_bsr_8(uint64_t a1, int a2)
{
  uint64_t result;

  if ((a2 - 1) > 1)
    return 4294967267;
  result = 0;
  *(_WORD *)(a1 + 56) = a2;
  return result;
}

uint64_t pcre2_set_max_pattern_length_8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 48) = a2;
  return 0;
}

uint64_t pcre2_set_newline_8(uint64_t a1, int a2)
{
  uint64_t result;

  if ((a2 - 1) > 5)
    return 4294967267;
  result = 0;
  *(_WORD *)(a1 + 58) = a2;
  return result;
}

uint64_t pcre2_set_parens_nest_limit_8(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 60) = a2;
  return 0;
}

uint64_t pcre2_set_compile_extra_options_8(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 64) = a2;
  return 0;
}

uint64_t pcre2_set_compile_recursion_guard_8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  return 0;
}

uint64_t pcre2_set_callout_8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  return 0;
}

uint64_t pcre2_set_heap_limit_8(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 48) = a2;
  return 0;
}

uint64_t pcre2_set_match_limit_8(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 52) = a2;
  return 0;
}

uint64_t pcre2_set_depth_limit_8(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 56) = a2;
  return 0;
}

uint64_t pcre2_set_offset_limit_8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 40) = a2;
  return 0;
}

uint64_t pcre2_set_recursion_limit_8(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 56) = a2;
  return 0;
}

uint64_t pcre2_set_recursion_memory_management_8()
{
  return 0;
}

uint64_t pcre2_set_glob_separator_8(uint64_t a1, int a2)
{
  uint64_t result;

  result = 4294967267;
  if ((a2 - 46) <= 0x2E && ((1 << (a2 - 46)) & 0x400000000003) != 0)
  {
    result = 0;
    *(_DWORD *)(a1 + 24) = a2;
  }
  return result;
}

uint64_t pcre2_set_glob_escape_8(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (a2 > 0xFF)
    return 4294967267;
  if (a2 && !cstdlib_ispunct(a2))
    return 4294967267;
  result = 0;
  *(_DWORD *)(a1 + 28) = a2;
  return result;
}

uint64_t pcre2_pattern_convert_8(unsigned __int8 *a1, int64_t a2, unsigned int a3, _QWORD *a4, uint64_t *a5, __int128 *a6, int8x8_t a7)
{
  uint64_t result;
  uint64_t *v9;
  int v10;
  uint8x8_t v11;
  int64_t v14;
  uint64_t v15;
  __int128 *v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unsigned __int8 *v32;
  int64_t v33;
  char *v34;
  char *v35;
  unsigned int v36;
  int v37;
  size_t v38;
  int v39;
  int v40;
  int v41;
  unsigned __int8 *v42;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  BOOL v52;
  unsigned int v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  int v58;
  _QWORD *v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  char *v63;
  unsigned __int8 *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char v70;
  unsigned __int8 *v71;
  int64_t v72;
  char *v73;
  char *v74;
  char *v75;
  unsigned __int8 *v76;
  size_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  _BYTE *v82;
  uint64_t v83;
  char *v84;
  char v85;
  char v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char v90;
  int v91;
  _BOOL4 v93;
  unsigned __int8 *v94;
  unsigned __int8 *v95;
  int v96;
  _BYTE *v97;
  _BOOL4 v98;
  int v99;
  uint64_t v100;
  _BYTE *v101;
  unsigned __int8 *v102;
  int v103;
  char *v104;
  _BYTE *v105;
  _BYTE *v106;
  _BYTE *v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  _BYTE *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char v116;
  _BYTE *v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char v122;
  unsigned int v123;
  int v124;
  int v125;
  unsigned __int8 *v126;
  unsigned int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  _BYTE *v132;
  int v133;
  int v134;
  BOOL v135;
  int v136;
  int v137;
  const char *v138;
  int v139;
  int v140;
  int v141;
  int v142;
  _BYTE *v143;
  int v144;
  int v145;
  unsigned __int8 *v146;
  char v147;
  char v148;
  _BYTE *v149;
  int v150;
  uint64_t v151;
  int v152;
  int v153;
  int v154;
  _BYTE *v155;
  char v156;
  char v157;
  _BYTE *v158;
  int v159;
  int v160;
  int v161;
  int v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  int v168;
  _BYTE *v170;
  _BYTE *v171;
  unint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  char v176;
  unint64_t v177;
  uint64_t v178;
  _BYTE *v179;
  unint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  char v184;
  _BYTE *v185;
  unint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  char v190;
  unsigned __int8 *v191;
  int v192;
  int v193;
  _BOOL4 v194;
  unsigned __int8 *v195;
  _BYTE *v196;
  unint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  char v201;
  _BYTE *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char v207;
  unint64_t v208;
  uint64_t v209;
  _BYTE *v210;
  char v211;
  _BYTE *v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char v217;
  uint64_t v218;
  _BYTE *v219;
  unint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  char v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  char v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  char v234;
  uint64_t v235;
  unint64_t v236;
  char *v237;
  _QWORD *v238;
  char v239;
  char v240;
  uint64_t v241;
  _BYTE *v242;
  _QWORD *v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t *v246;
  int v247;
  int v248;
  int v249;
  _BOOL4 v250;
  BOOL v251;
  unsigned __int8 *__src;
  int __srca;
  unint64_t v254;
  char *v255;
  unsigned __int8 *v256;
  char *v257;
  unsigned int v258;
  char *v259;
  char v260;
  int v261;
  int64_t v262;
  char v263;
  int v264;
  _BOOL4 v265;
  __int128 *v266;
  _QWORD *v267;
  char v268;
  _QWORD v269[13];
  _BYTE *v270;
  unint64_t v271;
  uint64_t v272;
  _QWORD v273[3];

  v273[1] = *MEMORY[0x24BDAC8D0];
  result = 4294967245;
  if (a1)
  {
    v9 = a5;
    if (a5)
    {
      if (a3 > 0x7F
        || (v10 = a3 & 0x1C, a7.i32[0] = v10, v11 = (uint8x8_t)vcnt_s8(a7), v11.i16[0] = vaddlv_u8(v11), v11.i32[0] != 1))
      {
        *a5 = 0;
        return 4294967262;
      }
      v14 = a2;
      v268 = a3;
      if (a2 == -1)
      {
        v15 = _pcre2_strlen_8(a1);
        LOBYTE(a3) = v268;
        v14 = v15;
      }
      v16 = &_pcre2_default_convert_context_8;
      if (a6)
        v16 = a6;
      v266 = v16;
      if ((a3 & 3) == 1)
      {
        v269[0] = 0;
        result = _pcre2_valid_utf_8(a1, v14, v269);
        if ((_DWORD)result)
        {
          *v9 = v269[0];
          return result;
        }
        LOBYTE(a3) = v268;
      }
      if (a4 && (v17 = (_QWORD *)*a4) != 0)
      {
        v18 = *v9;
      }
      else
      {
        v17 = v269;
        v18 = 100;
      }
      v254 = (unint64_t)&a1[v14];
      v251 = (a3 & 0x60) != 0;
      v19 = 1;
      v262 = v14;
      v261 = v10;
      while (1)
      {
        v263 = v19;
        if (a4)
          v20 = *a4 == 0;
        else
          v20 = 1;
        v267 = v17;
        if (v10 == 4 || v10 == 8)
        {
          v24 = 0;
          v25 = (unint64_t)v17 + v18 - 1;
          *v9 = v14;
          v26 = 40;
          do
          {
            if ((unint64_t)v17 + v24 >= v25)
              return 4294967248;
            *((_BYTE *)v17 + v24) = v26;
            v26 = aNul_0[++v24];
          }
          while (v24 != 6);
          __src = a1;
          v27 = (char *)v17 + 6;
          if (!v14)
          {
            v30 = 0;
            v31 = (char *)v17;
            goto LABEL_158;
          }
          v245 = a4;
          v246 = v9;
          v28 = 0;
          v264 = 0;
          v29 = 0;
          v249 = 0;
          v30 = 0;
          v31 = (char *)v17;
          v32 = __src;
          v33 = v14;
          while (2)
          {
            v34 = v27;
            v35 = v31;
            if ((_DWORD)v20)
              v31 = (char *)v17;
            else
              v31 = v27;
            v36 = *v32;
            if ((a3 & 1) != 0 && v36 >= 0xC0)
            {
              v37 = v32[1] & 0x3F;
              if ((v36 & 0x20) != 0)
              {
                if ((v36 & 0x10) != 0)
                {
                  if ((v36 & 8) != 0)
                  {
                    v39 = v32[2] & 0x3F;
                    v40 = v32[3] & 0x3F;
                    v41 = v32[4] & 0x3F;
                    if ((v36 & 4) != 0)
                    {
                      v36 = ((v36 & 1) << 30) | (v37 << 24) | (v39 << 18) | (v40 << 12) | (v41 << 6) | v32[5] & 0x3F;
                      v38 = 6;
                    }
                    else
                    {
                      v36 = ((v36 & 3) << 24) | (v37 << 18) | (v39 << 12) | (v40 << 6) | v41;
                      v38 = 5;
                    }
                  }
                  else
                  {
                    v36 = ((v36 & 7) << 18) | (v37 << 12) | ((v32[2] & 0x3F) << 6) | v32[3] & 0x3F;
                    v38 = 4;
                  }
                }
                else
                {
                  v36 = ((v36 & 0xF) << 12) | (v37 << 6) | v32[2] & 0x3F;
                  v38 = 3;
                }
              }
              else
              {
                v36 = v32[1] & 0x3F | ((v36 & 0x1F) << 6);
                v38 = 2;
              }
            }
            else
            {
              v38 = 1;
            }
            v27 = v31 + 1;
            v42 = &v32[v38];
            v33 -= v38;
            if (v29 >= 3)
            {
              if (v36 == 93)
              {
                if ((unint64_t)v31 >= v25)
                  return 4294967248;
                v28 = 0;
                *v31 = 93;
                v29 = 2;
                goto LABEL_140;
              }
              switch((_DWORD)v29)
              {
                case 3:
                  goto LABEL_131;
                case 4:
                  v52 = v36 == 58;
                  v53 = 4;
                  break;
                case 5:
                  if (v36 <= 0x7F)
                  {
                    v255 = v31;
                    v45 = &v32[v38];
                    v46 = v33;
                    v47 = v34;
                    v48 = v35;
                    v258 = v20;
                    if (cstdlib_islower(v36))
                    {
                      v29 = 5;
                      v20 = v258;
                      v35 = v48;
                      v34 = v47;
                      v33 = v46;
                      v42 = &v32[v38];
                      v31 = v255;
                      goto LABEL_135;
                    }
                    LOBYTE(a3) = v268;
                    v17 = v267;
                    v20 = v258;
                    v35 = v48;
                    v34 = v47;
                    v33 = v46;
                    v42 = &v32[v38];
                    v31 = v255;
                    if (v36 == 58 && v46 && *v45 == 93)
                    {
                      v69 = 0;
                      v70 = 58;
                      do
                      {
                        if ((unint64_t)&v255[v69] >= v25)
                          return 4294967248;
                        v255[v69] = v70;
                        v70 = asc_214FEF96D[++v69];
                      }
                      while (v69 != 2);
                      v28 = 0;
                      v33 = v46 - 1;
                      v42 = v45 + 1;
                      v27 = v255 + 2;
LABEL_123:
                      v29 = 3;
                      goto LABEL_140;
                    }
                  }
LABEL_131:
                  v52 = v36 == 91;
                  v53 = 3;
                  break;
                default:
                  goto LABEL_135;
              }
              if (v52)
                v29 = v53 + 1;
              else
                v29 = v53;
LABEL_135:
              v71 = v42;
              v72 = v33;
              v73 = v34;
              v74 = v35;
              v75 = v31;
              if (v36 == 92)
              {
                if ((unint64_t)v31 >= v25)
                  return 4294967248;
                *v31 = 92;
                v75 = v27;
              }
              v27 = &v75[v38];
              if ((unint64_t)&v75[v38] > v25)
                return 4294967248;
              v76 = v32;
              v77 = v38;
              v78 = v20;
              v79 = v31;
              v80 = v29;
              cstdlib_memcpy(v75, v76, v77);
              v29 = v80;
              v31 = v79;
              v20 = v78;
              v17 = v267;
              LOBYTE(a3) = v268;
              v28 = 0;
              v35 = v74;
              v34 = v73;
              v33 = v72;
              v42 = v71;
LABEL_140:
              v30 += v34 - v35;
              v32 = v42;
              if (!v33)
              {
                a4 = v245;
                v9 = v246;
                v10 = v261;
                if (v29 > 2)
                  return 106;
LABEL_158:
                result = 0;
                *v9 = (uint64_t)&v27[v30 - (_QWORD)v31];
                *v27 = 0;
                a1 = __src;
                v14 = v262;
                goto LABEL_505;
              }
              continue;
            }
            break;
          }
          if (v28)
            v43 = 0;
          else
            v43 = v36;
          if (v43 <= 90)
          {
            v44 = 2;
            switch(v43)
            {
              case '$':
              case '.':
                goto LABEL_120;
              case '%':
              case '&':
              case '\'':
              case ',':
              case '-':
                goto LABEL_82;
              case '(':
                ++v249;
                goto LABEL_73;
              case ')':
                if ((a3 & 8) == 0 || !v249)
                  goto LABEL_74;
                --v249;
                goto LABEL_119;
              case '*':
                if (v264 == 42)
                {
                  v28 = 0;
                  v264 = 42;
                  goto LABEL_113;
                }
                if ((a3 & 8) != 0)
                  goto LABEL_119;
                if (v29 < 2 || v264 == 40)
                  goto LABEL_74;
                goto LABEL_120;
              case '+':
                goto LABEL_73;
              default:
                if (v43 != 63)
                  goto LABEL_82;
                goto LABEL_73;
            }
          }
          if (v43 > 122)
          {
            if ((v43 - 123) >= 3)
              goto LABEL_82;
LABEL_73:
            if ((a3 & 8) == 0)
            {
LABEL_74:
              v256 = &v32[v38];
              v259 = v35;
              goto LABEL_75;
            }
            v44 = 2;
          }
          else
          {
            if (v43 == 91)
            {
              if ((unint64_t)v31 >= v25)
                return 4294967248;
              *v31 = 91;
              if (!v33)
                return 106;
              v58 = *v42;
              if (v58 == 94)
              {
                if ((unint64_t)v27 >= v25)
                  return 4294967248;
                *v27 = 94;
                if (!--v33)
                  return 106;
                if ((_DWORD)v20)
                  v59 = v17;
                else
                  v59 = v34;
                v27 = (char *)v59 + 2;
                v60 = *++v42;
                v58 = v60;
              }
              if (v58 == 93)
              {
                if ((unint64_t)v27 >= v25)
                  return 4294967248;
                v28 = 0;
                --v33;
                ++v42;
                *v27++ = 93;
              }
              else
              {
                v28 = 0;
              }
              goto LABEL_123;
            }
            if (v43 == 92)
            {
              if (!v33)
                return 101;
              if ((a3 & 8) != 0 || (v61 = *v42, v61 > 0x7E))
              {
                v28 = 1;
LABEL_113:
                v27 = v31;
              }
              else
              {
                v62 = v29;
                v63 = v31;
                v64 = v42;
                v65 = v35;
                v66 = v20;
                if (cstdlib_strchr("(){}123456789", v61))
                {
                  if (cstdlib_isdigit(*v64))
                  {
                    LOBYTE(a3) = v268;
                    v17 = v267;
                    if ((unint64_t)v63 >= v25)
                      return 4294967248;
                    v31 = v63;
                    v20 = v66;
                    if ((_DWORD)v66)
                      v67 = (char *)v267;
                    else
                      v67 = v34;
                    v68 = v27;
                    v27 = v67 + 2;
                    *v63 = 92;
                  }
                  else
                  {
                    v31 = v63;
                    v68 = v63;
                    LOBYTE(a3) = v268;
                    v17 = v267;
                    v20 = v66;
                  }
                  v35 = v65;
                  v29 = v62;
                  if ((unint64_t)v27 > v25)
                    return 4294967248;
                  v28 = 0;
                  v42 = v64 + 1;
                  v264 = *v64;
                  *v68 = v264;
                  --v33;
                }
                else
                {
                  v28 = 1;
                  v31 = v63;
                  v27 = v63;
                  LOBYTE(a3) = v268;
                  v17 = v267;
                  v20 = v66;
                  v35 = v65;
                  v42 = v64;
                  v29 = v62;
                }
              }
              goto LABEL_140;
            }
            if (v43 != 94)
              goto LABEL_82;
            if ((a3 & 8) == 0)
            {
              v44 = 1;
              if (!(_DWORD)v29 || v264 == 40)
                goto LABEL_120;
LABEL_82:
              v256 = &v32[v38];
              v259 = v35;
              if (v36 > 0x7F)
              {
                v49 = v31;
LABEL_77:
                v27 = &v49[v38];
                if ((unint64_t)&v49[v38] > v25)
                  return 4294967248;
                v50 = v20;
                v51 = v31;
                cstdlib_memcpy(v49, v32, v38);
                v31 = v51;
                v20 = v50;
                v17 = v267;
                LOBYTE(a3) = v268;
                v28 = 0;
                v264 = 255;
                v29 = 2;
                v42 = v256;
                v35 = v259;
                goto LABEL_140;
              }
              v54 = v20;
              v55 = v31;
              v56 = cstdlib_strchr("\\?*+|.^${}[]()", v36);
              v31 = v55;
              v20 = v54;
              v57 = v56;
              v49 = v55;
              if (!v57)
                goto LABEL_77;
LABEL_75:
              if ((unint64_t)v31 >= v25)
                return 4294967248;
              *v31 = 92;
              v49 = v27;
              goto LABEL_77;
            }
LABEL_119:
            v44 = v29;
          }
LABEL_120:
          if ((unint64_t)v27 > v25)
            return 4294967248;
          v28 = 0;
          *v31 = v36;
          v29 = v44;
          v264 = v36;
          goto LABEL_140;
        }
        if (v10 != 16)
        {
          *v9 = 0;
          return 4294967252;
        }
        v21 = *((unsigned __int8 *)v266 + 24);
        v22 = *((unsigned __int8 *)v266 + 28);
        if ((a3 & 1) != 0 && ((v21 | v22) & 0x80) != 0)
        {
          v23 = 0;
          result = 4294967232;
          v10 = v261;
          goto LABEL_504;
        }
        v260 = v20;
        v273[0] = 0;
        v81 = cstdlib_strchr("\\?*+|.^${}[]()", v21);
        v82 = v267;
        v270 = v267;
        v271 = (unint64_t)v267 + v18;
        v272 = 0;
        LODWORD(v273[0]) = 695418664;
        v83 = -4;
        v84 = (char *)v273;
        do
        {
          if (v82 < (_BYTE *)v267 + v18)
          {
            v85 = *v84++;
            *v82++ = v85;
          }
          v135 = __CFADD__(v83++, 1);
        }
        while (!v135);
        v257 = v81;
        v265 = v81 != 0;
        v270 = v82;
        v272 = 4;
        v86 = v268;
        if (v14 < 1 || *a1 != 42)
          break;
        if (v251)
        {
          if ((v268 & 0x20) == 0)
            break;
        }
        else if ((unint64_t)v14 < 2 || a1[1] != 42)
        {
          break;
        }
LABEL_167:
        __srca = 0;
        v91 = 0;
        v93 = v21 == 9 || v21 == 32;
        v250 = v93;
        v94 = a1;
        do
        {
          v95 = v94 + 1;
          v96 = *v94;
          if (v96 == 91)
          {
            if ((unint64_t)v95 >= v254)
              goto LABEL_492;
            v99 = *v95;
            if (v99 == 94 || v99 == 33)
            {
              v95 = v94 + 2;
              v14 = v262;
              if ((unint64_t)(v94 + 2) >= v254)
              {
                result = 106;
                goto LABEL_495;
              }
              LOWORD(v273[0]) = 24155;
              if ((v86 & 0x20) != 0)
              {
                v100 = 2;
              }
              else
              {
                if (v257)
                {
                  BYTE2(v273[0]) = 92;
                  v100 = 3;
                }
                else
                {
                  v100 = 2;
                }
                *(_BYTE *)(((unint64_t)&v270 | v100) + 0x18) = v21;
              }
              v110 = v100 + 1;
              v111 = v270;
              v112 = v271;
              v113 = v272;
              v114 = v110;
              v115 = (char *)v273;
              do
              {
                if ((unint64_t)v111 < v112)
                {
                  v116 = *v115++;
                  *v111++ = v116;
                }
                --v114;
              }
              while (v114);
              v109 = 0;
              v270 = v111;
              v272 = v113 + v110;
              v108 = 1;
            }
            else
            {
              ++v272;
              v107 = v270;
              v108 = 0;
              if ((unint64_t)v270 < v271)
              {
                ++v270;
                *v107 = 91;
              }
              v109 = 1;
            }
            if (*v95 == 93)
            {
              LOWORD(v273[0]) = 23900;
              v117 = v270;
              v118 = v271;
              v119 = -2;
              v120 = (char *)v273;
              v121 = v272;
              do
              {
                if ((unint64_t)v117 < v118)
                {
                  v122 = *v120++;
                  *v117++ = v122;
                }
                v135 = __CFADD__(v119++, 1);
              }
              while (!v135);
              v270 = v117;
              v272 = v121 + 2;
              ++v95;
              v123 = 93;
              v124 = 1;
            }
            else
            {
              v124 = 0;
              v123 = 0;
            }
            if ((unint64_t)v95 >= v254)
            {
LABEL_492:
              result = 106;
              goto LABEL_494;
            }
            v125 = 0;
LABEL_234:
            v126 = v95;
            v94 = v95 + 1;
            v127 = *v95;
            if ((v86 & 1) != 0 && v127 >= 0xC0)
            {
              if ((v127 & 0x20) != 0)
              {
                v128 = *v94 & 0x3F;
                if ((v127 & 0x10) != 0)
                {
                  if ((v127 & 8) != 0)
                  {
                    v129 = v95[2] & 0x3F;
                    v130 = v95[3] & 0x3F;
                    v131 = v95[4] & 0x3F;
                    if ((v127 & 4) != 0)
                    {
                      v127 = ((v127 & 1) << 30) | (v128 << 24) | (v129 << 18) | (v130 << 12) | (v131 << 6) | v95[5] & 0x3F;
                      v94 = v95 + 6;
                    }
                    else
                    {
                      v127 = ((v127 & 3) << 24) | (v128 << 18) | (v129 << 12) | (v130 << 6) | v131;
                      v94 = v95 + 5;
                    }
                  }
                  else
                  {
                    v127 = ((v127 & 7) << 18) | (v128 << 12) | ((v95[2] & 0x3F) << 6) | v95[3] & 0x3F;
                    v94 = v95 + 4;
                  }
                }
                else
                {
                  v127 = ((v127 & 0xF) << 12) | (v128 << 6) | v95[2] & 0x3F;
                  v94 = v95 + 3;
                }
              }
              else
              {
                v94 = v95 + 2;
                v127 = v95[1] & 0x3F | ((v127 & 0x1F) << 6);
              }
            }
            if (v127 == 93)
            {
              ++v272;
              v170 = v270;
              if ((unint64_t)v270 < v271)
              {
                ++v270;
                *v170 = 93;
              }
              if (((v108 | ((v86 & 0x20) >> 5)) & 1) == 0 && v125)
              {
                LODWORD(v273[0]) = 557596456;
                v171 = v270;
                v172 = v271;
                v173 = -4;
                v174 = (char *)v273;
                v175 = v272;
                do
                {
                  if ((unint64_t)v171 < v172)
                  {
                    v176 = *v174++;
                    *v171++ = v176;
                  }
                  v135 = __CFADD__(v173++, 1);
                }
                while (!v135);
                v270 = v171;
                v177 = v271;
                if (v257)
                {
                  v178 = v175 + 5;
                  v272 = v178;
                  if ((unint64_t)v171 < v271)
                  {
                    v270 = v171 + 1;
                    *v171 = 92;
                    v177 = v271;
                    v178 = v272;
                    v171 = v270;
                  }
                }
                else
                {
                  v178 = v175 + 4;
                }
                v218 = v178 + 1;
                v272 = v218;
                if ((unint64_t)v171 < v177)
                {
                  v270 = v171 + 1;
                  *v171 = v21;
                  v177 = v271;
                  v218 = v272;
                  v171 = v270;
                }
                v272 = v218 + 1;
                if ((unint64_t)v171 < v177)
                {
                  v270 = v171 + 1;
                  *v171 = 41;
                }
              }
              continue;
            }
            if ((unint64_t)v94 >= v254)
            {
              result = 106;
              v95 = v94;
              goto LABEL_494;
            }
            if (v127 == 91)
            {
              if (*v94 == 58)
              {
                v132 = v94 + 1;
                while ((unint64_t)v132 < v254)
                {
                  v134 = *v132++;
                  v133 = v134;
                  if ((v134 - 123) <= 0xFFFFFFE5)
                  {
                    v135 = v133 != 58 || (unint64_t)v132 >= v254;
                    if (!v135 && *v132 == 93)
                    {
                      v136 = 1;
                      v137 = 97;
                      v138 = "alnum:alpha:ascii:blank:cntrl:digit:graph:lower:print:punct:space:upper:word:xdigit:";
                      while (1)
                      {
                        v95 = v94 + 3;
                        v139 = v94[1];
                        if (v139 == v137)
                          break;
LABEL_261:
                        if (v137 != 58)
                        {
                          do
                            v141 = *(unsigned __int8 *)++v138;
                          while (v141 != 58);
                        }
                        v142 = *(unsigned __int8 *)++v138;
                        v137 = v142;
                        ++v136;
                        v127 = 91;
                        if (!v142)
                          goto LABEL_276;
                      }
                      while (v139 != 58)
                      {
                        v140 = *(unsigned __int8 *)++v138;
                        v137 = v140;
                        v139 = *(v95++ - 1);
                        if (v139 != v140)
                          goto LABEL_261;
                      }
                      v146 = v94 - 1;
                      do
                      {
                        v148 = *v146++;
                        v147 = v148;
                        ++v272;
                        v149 = v270;
                        if ((unint64_t)v270 < v271)
                        {
                          ++v270;
                          *v149 = v147;
                        }
                      }
                      while (v146 < v95);
                      if (v109)
                      {
                        v150 = v250;
                        switch(v136)
                        {
                          case 1:
                            v151 = v108;
                            v247 = v109;
                            v150 = cstdlib_isalnum(v21);
                            goto LABEL_355;
                          case 2:
                            v151 = v108;
                            v247 = v109;
                            v150 = cstdlib_isalpha(v21);
                            goto LABEL_355;
                          case 3:
                            v124 = 0;
                            v123 = 0;
                            v125 = 1;
                            goto LABEL_314;
                          case 4:
                            goto LABEL_356;
                          case 5:
                            v151 = v108;
                            v247 = v109;
                            v150 = cstdlib_iscntrl(v21);
                            goto LABEL_355;
                          case 6:
                            v151 = v108;
                            v247 = v109;
                            v150 = cstdlib_isdigit(v21);
                            goto LABEL_355;
                          case 7:
                            v151 = v108;
                            v247 = v109;
                            v150 = cstdlib_isgraph(v21);
                            goto LABEL_355;
                          case 8:
                            v151 = v108;
                            v247 = v109;
                            v150 = cstdlib_islower(v21);
                            goto LABEL_355;
                          case 9:
                            v151 = v108;
                            v247 = v109;
                            v150 = cstdlib_isprint(v21);
                            goto LABEL_355;
                          case 10:
                            v151 = v108;
                            v247 = v109;
                            v150 = cstdlib_ispunct(v21);
                            goto LABEL_355;
                          case 11:
                            v151 = v108;
                            v247 = v109;
                            v150 = cstdlib_isspace(v21);
                            goto LABEL_355;
                          case 12:
                            v151 = v108;
                            v247 = v109;
                            v150 = cstdlib_isupper(v21);
                            goto LABEL_355;
                          case 13:
                            v167 = v108;
                            v248 = v109;
                            v168 = cstdlib_isalnum(v21);
                            v109 = v248;
                            v108 = v167;
                            v86 = v268;
                            v150 = v21 == 95 || v168 != 0;
                            goto LABEL_356;
                          default:
                            v151 = v108;
                            v247 = v109;
                            v150 = cstdlib_isxdigit(v21);
LABEL_355:
                            v109 = v247;
                            v108 = v151;
                            v86 = v268;
LABEL_356:
                            v124 = 0;
                            v123 = 0;
                            if (v150)
                              v125 = 1;
                            break;
                        }
                      }
                      else
                      {
                        v124 = 0;
                        v123 = 0;
                      }
                      goto LABEL_314;
                    }
                    break;
                  }
                }
                v127 = 91;
LABEL_276:
                v95 = v94;
LABEL_307:
                ++v272;
                v155 = v270;
                if ((unint64_t)v270 < v271)
                {
                  ++v270;
                  *v155 = 92;
                }
                do
                {
LABEL_309:
                  v157 = *v126++;
                  v156 = v157;
                  ++v272;
                  v158 = v270;
                  if ((unint64_t)v270 < v271)
                  {
                    ++v270;
                    *v158 = v156;
                  }
                }
                while (v126 < v95);
                if (v127 == v21)
                  v125 = 1;
LABEL_314:
                if ((unint64_t)v95 >= v254)
                  goto LABEL_492;
                goto LABEL_234;
              }
LABEL_268:
              v124 = 1;
              if (v22 && v127 == v22)
              {
                v95 = v94 + 1;
                v127 = *v94;
                if ((v86 & 1) != 0 && v127 >= 0xC0)
                {
                  if ((v127 & 0x20) != 0)
                  {
                    v144 = *v95 & 0x3F;
                    if ((v127 & 0x10) != 0)
                    {
                      if ((v127 & 8) != 0)
                      {
                        v152 = v94[2] & 0x3F;
                        v153 = v94[3] & 0x3F;
                        v154 = v94[4] & 0x3F;
                        if ((v127 & 4) != 0)
                        {
                          v127 = ((v127 & 1) << 30) | (v144 << 24) | (v152 << 18) | (v153 << 12) | (v154 << 6) | v94[5] & 0x3F;
                          v95 = v94 + 6;
                        }
                        else
                        {
                          v127 = ((v127 & 3) << 24) | (v144 << 18) | (v152 << 12) | (v153 << 6) | v154;
                          v95 = v94 + 5;
                        }
                      }
                      else
                      {
                        v127 = ((v127 & 7) << 18) | (v144 << 12) | ((v94[2] & 0x3F) << 6) | v94[3] & 0x3F;
                        v95 = v94 + 4;
                      }
                    }
                    else
                    {
                      v127 = ((v127 & 0xF) << 12) | (v144 << 6) | v94[2] & 0x3F;
                      v95 = v94 + 3;
                    }
                  }
                  else
                  {
                    v95 = v94 + 2;
                    v127 = v94[1] & 0x3F | ((v127 & 0x1F) << 6);
                  }
                }
                if ((unint64_t)v95 >= v254)
                  goto LABEL_492;
                v124 = 1;
                v126 = v94;
              }
              else
              {
                v95 = v94;
              }
              v123 = v127;
            }
            else
            {
              if (v127 != 45 || !v124 || *v94 == 93)
                goto LABEL_268;
              ++v272;
              v143 = v270;
              if ((unint64_t)v270 < v271)
              {
                ++v270;
                *v143 = 45;
              }
              v126 = v94 + 1;
              v127 = *v94;
              if ((v86 & 1) != 0 && v127 >= 0xC0)
              {
                if ((v127 & 0x20) != 0)
                {
                  v145 = *v126 & 0x3F;
                  if ((v127 & 0x10) != 0)
                  {
                    if ((v127 & 8) != 0)
                    {
                      v159 = v94[2] & 0x3F;
                      v160 = v94[3] & 0x3F;
                      v161 = v94[4] & 0x3F;
                      if ((v127 & 4) != 0)
                      {
                        v127 = ((v127 & 1) << 30) | (v145 << 24) | (v159 << 18) | (v160 << 12) | (v161 << 6) | v94[5] & 0x3F;
                        v126 = v94 + 6;
                      }
                      else
                      {
                        v127 = ((v127 & 3) << 24) | (v145 << 18) | (v159 << 12) | (v160 << 6) | v161;
                        v126 = v94 + 5;
                      }
                    }
                    else
                    {
                      v127 = ((v127 & 7) << 18) | (v145 << 12) | ((v94[2] & 0x3F) << 6) | v94[3] & 0x3F;
                      v126 = v94 + 4;
                    }
                  }
                  else
                  {
                    v127 = ((v127 & 0xF) << 12) | (v145 << 6) | v94[2] & 0x3F;
                    v126 = v94 + 3;
                  }
                }
                else
                {
                  v126 = v94 + 2;
                  v127 = v94[1] & 0x3F | ((v127 & 0x1F) << 6);
                }
              }
              if ((unint64_t)v126 >= v254)
              {
                result = 106;
LABEL_514:
                v95 = v126;
                goto LABEL_494;
              }
              if (v22 && v127 == v22)
              {
                v95 = v126 + 1;
                v127 = *v126;
                if ((v86 & 1) != 0 && v127 >= 0xC0)
                {
                  if ((v127 & 0x20) != 0)
                  {
                    v163 = *v95 & 0x3F;
                    if ((v127 & 0x10) != 0)
                    {
                      if ((v127 & 8) != 0)
                      {
                        v164 = v126[2] & 0x3F;
                        v165 = v126[3] & 0x3F;
                        v166 = v126[4] & 0x3F;
                        if ((v127 & 4) != 0)
                        {
                          v127 = ((v127 & 1) << 30) | (v163 << 24) | (v164 << 18) | (v165 << 12) | (v166 << 6) | v126[5] & 0x3F;
                          v95 = v126 + 6;
                        }
                        else
                        {
                          v127 = ((v127 & 3) << 24) | (v163 << 18) | (v164 << 12) | (v165 << 6) | v166;
                          v95 = v126 + 5;
                        }
                      }
                      else
                      {
                        v127 = ((v127 & 7) << 18) | (v163 << 12) | ((v126[2] & 0x3F) << 6) | v126[3] & 0x3F;
                        v95 = v126 + 4;
                      }
                    }
                    else
                    {
                      v127 = ((v127 & 0xF) << 12) | (v163 << 6) | v126[2] & 0x3F;
                      v95 = v126 + 3;
                    }
                  }
                  else
                  {
                    v95 = v126 + 2;
                    v127 = v126[1] & 0x3F | ((v127 & 0x1F) << 6);
                  }
                }
              }
              else
              {
                if (v127 == 91)
                {
                  if (*v126 == 58)
                  {
                    result = 4294967232;
                    goto LABEL_514;
                  }
                  v127 = 91;
                }
                v95 = v126;
                v126 = v94;
              }
              if (v123 > v127)
                goto LABEL_512;
              v124 = 0;
              if (v127 > v21 && v123 < v21)
                v125 = 1;
              v123 = 0;
            }
            if (v127 - 45 <= 0x30 && ((1 << (v127 - 45)) & 0x1C00000000001) != 0)
              goto LABEL_307;
            goto LABEL_309;
          }
          if (v96 == 63)
          {
            if ((v86 & 0x20) != 0)
            {
              ++v272;
              v101 = v270;
              if ((unint64_t)v270 < v271)
              {
                ++v270;
                *v101 = 46;
              }
            }
            else
            {
              convert_glob_print_wildcard((uint64_t)&v270, v21, v265);
              v86 = v268;
            }
            goto LABEL_441;
          }
          if (v96 != 42)
          {
            if (!v22 || v96 != v22)
            {
              ++v94;
LABEL_206:
              if ((v96 & 0x80) == 0)
              {
                v104 = cstdlib_strchr("\\?*+|.^${}[]()", v96);
                v86 = v268;
                if (v104)
                {
                  ++v272;
                  v105 = v270;
                  if ((unint64_t)v270 < v271)
                  {
                    ++v270;
                    *v105 = 92;
                  }
                }
              }
              ++v272;
              v106 = v270;
              if ((unint64_t)v270 < v271)
              {
                ++v270;
                *v106 = v96;
              }
              continue;
            }
            if ((unint64_t)v95 < v254)
            {
              v96 = v94[1];
              v94 += 2;
              goto LABEL_206;
            }
LABEL_512:
            result = 4294967232;
LABEL_494:
            v14 = v262;
LABEL_495:
            v10 = v261;
LABEL_496:
            v23 = v95 - a1;
            goto LABEL_504;
          }
          if (v91)
          {
            ++v272;
            v97 = v270;
            if ((unint64_t)v270 < v271)
            {
              ++v270;
              *v97 = 41;
            }
          }
          v14 = v262;
          if ((v86 & 0x40) != 0 || (unint64_t)v95 >= v254 || *v95 != 42)
          {
            if ((unint64_t)v95 < v254 && *v95 == 42)
            {
              v102 = v94 + 2;
              while ((unint64_t)v102 < v254)
              {
                v103 = *v102++;
                if (v103 != 42)
                {
                  v95 = v102 - 1;
                  goto LABEL_377;
                }
              }
              v95 = (unsigned __int8 *)v254;
            }
LABEL_377:
            if ((v86 & 0x20) != 0)
            {
              if ((unint64_t)v95 >= v254)
              {
                v94 = v95;
                v10 = v261;
LABEL_498:
                v238 = v267;
                v239 = v260;
                goto LABEL_499;
              }
              if (v94 == a1)
              {
                v91 = 0;
LABEL_441:
                v94 = v95;
                continue;
              }
LABEL_382:
              LOBYTE(v273[0]) = 40;
              if (__srca)
              {
                *(_WORD *)((char *)v273 + 1) = 15935;
                v179 = v270;
                v180 = v271;
                v181 = -3;
                v182 = (char *)v273;
                v183 = v272;
                do
                {
                  if ((unint64_t)v179 < v180)
                  {
                    v184 = *v182++;
                    *v179++ = v184;
                  }
                  v135 = __CFADD__(v181++, 1);
                }
                while (!v135);
                v270 = v179;
                v272 = v183 + 3;
                v91 = 1;
              }
              else
              {
                *(_DWORD *)((char *)v273 + 1) = 1297040170;
                *(_WORD *)((char *)v273 + 5) = 18765;
                HIBYTE(v273[0]) = 84;
                v185 = v270;
                v186 = v271;
                v187 = -8;
                v188 = (char *)v273;
                v189 = v272;
                do
                {
                  if ((unint64_t)v185 < v186)
                  {
                    v190 = *v188++;
                    *v185++ = v190;
                  }
                  v135 = __CFADD__(v187++, 1);
                }
                while (!v135);
                v270 = v185;
                v272 = v189 + 9;
                v91 = 0;
                if ((unint64_t)v185 < v271)
                {
                  v270 = v185 + 1;
                  *v185 = 41;
                }
              }
              if ((v86 & 0x20) != 0)
              {
                ++v272;
                v210 = v270;
                if ((unint64_t)v270 < v271)
                {
                  ++v270;
                  *v210 = 46;
                }
                goto LABEL_432;
              }
            }
            else
            {
              if (v94 != a1)
                goto LABEL_382;
              v91 = 0;
            }
            convert_glob_print_wildcard((uint64_t)&v270, v21, v265);
            v86 = v268;
LABEL_432:
            LOBYTE(v273[0]) = 42;
            if ((unint64_t)v95 >= v254)
              v211 = 43;
            else
              v211 = 63;
            BYTE1(v273[0]) = v211;
            v212 = v270;
            v213 = v271;
            v214 = -2;
            v215 = v272;
            v216 = (char *)v273;
            do
            {
              if ((unint64_t)v212 < v213)
              {
                v217 = *v216++;
                *v212++ = v217;
              }
              v135 = __CFADD__(v214++, 1);
            }
            while (!v135);
            v270 = v212;
            v272 = v215 + 2;
            goto LABEL_441;
          }
          v98 = v94 == a1 || *(v94 - 1) == v21;
          v191 = v94 + 2;
          do
          {
            if ((unint64_t)v191 >= v254)
            {
              v94 = v191;
              v10 = v261;
              goto LABEL_498;
            }
            v193 = *v191++;
            v192 = v193;
          }
          while (v193 == 42);
          if (v22)
            v194 = v98;
          else
            v194 = 0;
          v195 = v191 - 1;
          if (v194 && v192 == v22)
          {
            v192 = v22;
            if ((unint64_t)v191 < v254)
            {
              v192 = *v191;
              if (v192 == v21)
                v195 = v191;
              else
                v192 = v22;
            }
          }
          if (v94 != a1)
          {
            v273[0] = 0x54494D4D4F432A28;
            v196 = v270;
            v197 = v271;
            v198 = -8;
            v199 = (char *)v273;
            v200 = v272;
            do
            {
              if ((unint64_t)v196 < v197)
              {
                v201 = *v199++;
                *v196++ = v201;
              }
              v135 = __CFADD__(v198++, 1);
            }
            while (!v135);
            v270 = v196;
            v272 = v200 + 9;
            if ((unint64_t)v196 < v271)
            {
              v270 = v196 + 1;
              *v196 = 41;
            }
            if (v98)
            {
              v202 = v270;
              v203 = v271;
              v204 = v272;
              if (*v195 == v21)
              {
                qmemcpy(v273, "(?:.*?", 6);
                v205 = -6;
                v206 = (char *)v273;
                do
                {
                  if ((unint64_t)v202 < v203)
                  {
                    v207 = *v206++;
                    *v202++ = v207;
                  }
                  v135 = __CFADD__(v205++, 1);
                }
                while (!v135);
                v270 = v202;
                v208 = v271;
                if (v257)
                {
                  v209 = v204 + 7;
                  v272 = v209;
                  if ((unint64_t)v202 < v271)
                  {
                    v270 = v202 + 1;
                    *v202 = 92;
                    v208 = v271;
                    v209 = v272;
                    v202 = v270;
                  }
                }
                else
                {
                  v209 = v204 + 6;
                }
                v231 = v209 + 1;
                v272 = v231;
                if ((unint64_t)v202 < v208)
                {
                  v270 = v202 + 1;
                  *v202 = v21;
                  v202 = v270;
                  v208 = v271;
                  v231 = v272;
                }
                qmemcpy(v273, ")??", 3);
                v232 = -3;
                v233 = (char *)v273;
                do
                {
                  if ((unint64_t)v202 < v208)
                  {
                    v234 = *v233++;
                    *v202++ = v234;
                  }
                  v135 = __CFADD__(v232++, 1);
                }
                while (!v135);
                v91 = 0;
                v270 = v202;
                v272 = v231 + 3;
                goto LABEL_482;
              }
            }
            else
            {
              v202 = v270;
              v203 = v271;
              v204 = v272;
            }
            qmemcpy(v273, ".*?", 3);
            v227 = -3;
            v228 = (char *)v273;
            do
            {
              if ((unint64_t)v202 < v203)
              {
                v229 = *v228++;
                *v202++ = v229;
              }
              v135 = __CFADD__(v227++, 1);
            }
            while (!v135);
            v91 = 0;
            v270 = v202;
            v272 = v204 + 3;
LABEL_466:
            __srca = 1;
            v94 = v195;
            continue;
          }
          if (v192 != v21)
          {
            v91 = 0;
            goto LABEL_466;
          }
          qmemcpy(v273, "(?:\\A|", 6);
          v219 = v270;
          v220 = v271;
          v221 = -6;
          v222 = (char *)v273;
          v223 = v272;
          do
          {
            if ((unint64_t)v219 < v220)
            {
              v224 = *v222++;
              *v219++ = v224;
            }
            v135 = __CFADD__(v221++, 1);
          }
          while (!v135);
          v270 = v219;
          v225 = v271;
          if (v257)
          {
            v226 = v223 + 7;
            v272 = v226;
            if ((unint64_t)v219 < v271)
            {
              v270 = v219 + 1;
              *v219 = 92;
              v225 = v271;
              v226 = v272;
              v219 = v270;
            }
          }
          else
          {
            v226 = v223 + 6;
          }
          v230 = v226 + 1;
          v272 = v230;
          if ((unint64_t)v219 < v225)
          {
            v270 = v219 + 1;
            *v219 = v21;
            v225 = v271;
            v230 = v272;
            v219 = v270;
          }
          v272 = v230 + 1;
          if ((unint64_t)v219 < v225)
          {
            v270 = v219 + 1;
            *v219 = 41;
          }
          v91 = 0;
LABEL_482:
          v94 = v195 + 1;
          __srca = 1;
        }
        while ((unint64_t)v94 < v254);
        v82 = v270;
        v244 = v272;
        v14 = v262;
LABEL_484:
        LOWORD(v273[0]) = 31324;
        v235 = -2;
        v236 = v271;
        v237 = (char *)v273;
        v10 = v261;
        v238 = v267;
        v239 = v260;
        do
        {
          if ((unint64_t)v82 < v236)
          {
            v240 = *v237++;
            *v82++ = v240;
          }
          v135 = __CFADD__(v235++, 1);
        }
        while (!v135);
        v270 = v82;
        v272 = v244 + 2;
        if (v91)
        {
          v272 = v244 + 3;
          if ((unint64_t)v82 < v271)
          {
            v270 = v82 + 1;
            *v82 = 41;
          }
        }
LABEL_499:
        v241 = ++v272;
        v242 = v270;
        if ((unint64_t)v270 < v271)
        {
          ++v270;
          *v242 = 0;
          v241 = v272;
        }
        if ((v239 & 1) == 0 && v241 != v270 - (_BYTE *)v238)
        {
          result = 4294967248;
          v95 = v94;
          goto LABEL_496;
        }
        result = 0;
        v23 = v241 - 1;
LABEL_504:
        *v9 = v23;
LABEL_505:
        if (!a4 || (_DWORD)result)
          return result;
        if (*a4)
          return 0;
        v243 = _pcre2_memctl_malloc_8(8 * *v9 + 32, v266);
        if (!v243)
          return 4294967248;
        v19 = 0;
        v17 = v243 + 3;
        *a4 = v243 + 3;
        v18 = *v9 + 1;
        result = 4294967252;
        LOBYTE(a3) = v268;
        if ((v263 & 1) == 0)
          return result;
      }
      LOWORD(v273[0]) = 16732;
      v87 = -2;
      v88 = v271;
      v89 = (char *)v273;
      do
      {
        if ((unint64_t)v82 < v88)
        {
          v90 = *v89++;
          *v82++ = v90;
        }
        v135 = __CFADD__(v87++, 1);
      }
      while (!v135);
      v270 = v82;
      v272 = 6;
      if (v14 < 1)
      {
        v91 = 0;
        v244 = 6;
        v94 = a1;
        goto LABEL_484;
      }
      goto LABEL_167;
    }
  }
  return result;
}

uint64_t pcre2_converted_pattern_free_8(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result - 16))(result - 24, *(_QWORD *)(result - 8));
  return result;
}

uint64_t convert_glob_print_separator(uint64_t result, char a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_BYTE **)result;
  if (a3)
  {
    v4 = *(_QWORD *)(result + 8);
    ++*(_QWORD *)(result + 16);
    if ((unint64_t)v3 < v4)
    {
      *(_QWORD *)result = v3 + 1;
      *v3 = 92;
      v3 = *(_BYTE **)result;
    }
  }
  v5 = *(_QWORD *)(result + 8);
  ++*(_QWORD *)(result + 16);
  if ((unint64_t)v3 < v5)
  {
    *(_QWORD *)result = v3 + 1;
    *v3 = a2;
  }
  return result;
}

uint64_t convert_glob_print_wildcard(uint64_t a1, char a2, int a3)
{
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  unint64_t v12;
  _BYTE *v13;

  *(_WORD *)(a1 + 24) = 24155;
  v4 = (char *)(a1 + 24);
  v5 = *(_BYTE **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = -2;
  do
  {
    if ((unint64_t)v5 < v6)
    {
      v9 = *v4++;
      *v5++ = v9;
    }
  }
  while (!__CFADD__(v8++, 1));
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 16) = v7 + 2;
  result = convert_glob_print_separator(a1, a2, a3);
  v12 = *(_QWORD *)(a1 + 8);
  ++*(_QWORD *)(a1 + 16);
  v13 = *(_BYTE **)a1;
  if (*(_QWORD *)a1 < v12)
  {
    *(_QWORD *)a1 = v13 + 1;
    *v13 = 93;
  }
  return result;
}

uint64_t pcre2_dfa_match_8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, int a5, int64x2_t *a6, __int128 *a7, _DWORD *a8, unint64_t a9)
{
  uint64_t v16;
  unsigned int v18;
  unsigned __int8 *v19;
  _BOOL4 v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  int v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t valid;
  __int16 v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  BOOL v43;
  int v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int is_newline_8;
  char v48;
  unsigned __int8 *v49;
  int v50;
  unint64_t v51;
  _BOOL4 v53;
  BOOL v54;
  int v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  char v58;
  unsigned __int8 *v59;
  unint64_t v61;
  unsigned __int8 *v62;
  unint64_t v63;
  BOOL v64;
  BOOL v65;
  unsigned __int8 *v66;
  uint64_t v67;
  int v68;
  int v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  BOOL v72;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  int v76;
  int v77;
  int v78;
  uint64_t v80;
  unint64_t v81;
  int v82;
  int __c;
  int v84;
  char v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned __int8 *v93;
  int64_t v94;
  int v95;
  unsigned __int8 *v96;
  int v97;
  _BOOL4 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  int64x2_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  int8x16_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _QWORD v117[3842];

  v117[3840] = *MEMORY[0x24BDAC8D0];
  v117[0] = 0;
  v117[1] = 0x1DFC00001E00;
  if (a3 == -1)
    a3 = _pcre2_strlen_8(a2);
  if ((a5 & 0x1FFFFF00) != 0)
    return 4294967262;
  v16 = 4294967245;
  if (!a6 || !a1 || !a2 || !a8)
    return v16;
  if (a9 < 0x14)
    return 4294967253;
  if (a3 < (unint64_t)a4)
    return 4294967263;
  if ((a5 & 0x30) != 0 && ((*(_DWORD *)(a1 + 88) | a5) & 0x20000000) != 0)
    return 4294967262;
  if (*(_DWORD *)(a1 + 80) != 1346589253)
    return 4294967265;
  v18 = *(_DWORD *)(a1 + 96);
  if ((v18 & 7) != 1)
    return 4294967264;
  if ((a5 & 0x40) != 0)
  {
    if (*a8 > 1u)
      return 4294967258;
    v23 = a8[1];
    if (v23 < 1 || v23 > (int)((a9 - 2) / 3))
      return 4294967258;
  }
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  v110 = 0u;
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  v102 = 0u;
  v103 = 0u;
  v104 = 0u;
  v105 = 0u;
  v106 = 0u;
  v107 = 0u;
  v108 = 0u;
  v19 = &a2[a3];
  v92 = *(_DWORD *)(a1 + 88);
  v21 = (a5 & 0x80000040) != 0 || *(int *)(a1 + 88) < 0;
  v98 = v21;
  v109 = 0;
  *((_QWORD *)&v107 + 1) = &v110;
  LODWORD(v110) = 2;
  *(_QWORD *)&v112 = a2;
  *((_QWORD *)&v112 + 1) = a3;
  DWORD2(v116) = 0;
  *((_QWORD *)&v110 + 1) = 1;
  *((_QWORD *)&v111 + 1) = 0;
  if (a7)
  {
    v22 = *((_QWORD *)a7 + 5);
    v96 = &a2[a3];
    if (v22 != -1)
    {
      if ((v92 & 0x800000) == 0)
        return 4294967240;
      v96 = &a2[v22];
    }
    v108 = vextq_s8(*(int8x16_t *)((char *)a7 + 24), *(int8x16_t *)((char *)a7 + 24), 8uLL);
    v99 = *a7;
    *(_QWORD *)&v100 = *((_QWORD *)a7 + 2);
    v25 = *((_DWORD *)a7 + 13);
    v24 = *((_DWORD *)a7 + 14);
    *(_QWORD *)&v105 = __PAIR64__(v24, v25);
    v26 = (int *)(a7 + 3);
  }
  else
  {
    v108.i64[1] = 0;
    v99 = *(_OWORD *)a1;
    *(_QWORD *)&v100 = *(_QWORD *)(a1 + 16);
    v25 = 10000000;
    v24 = 10000000;
    *(_QWORD *)&v105 = 42949672970000000;
    v26 = &dword_24D292258;
    v96 = &a2[a3];
  }
  v27 = *v26;
  *(_QWORD *)&v104 = v27;
  v28 = v92;
  if (v25 > *(_DWORD *)(a1 + 104))
    LODWORD(v105) = *(_DWORD *)(a1 + 104);
  if (v24 > *(_DWORD *)(a1 + 108))
    DWORD1(v105) = *(_DWORD *)(a1 + 108);
  if (v27 > *(_DWORD *)(a1 + 100))
    *(_QWORD *)&v104 = *(unsigned int *)(a1 + 100);
  v29 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)&v100 + 1) = a1
                         + *(unsigned __int16 *)(a1 + 132) * (unint64_t)*(unsigned __int16 *)(a1 + 134)
                         + 136;
  *(_QWORD *)&v101 = a2;
  *(_QWORD *)&v103 = v29;
  *((_QWORD *)&v103 + 1) = a4;
  *((_QWORD *)&v101 + 1) = &a2[a3];
  DWORD2(v105) = 0;
  HIDWORD(v105) = (v18 >> 14) & 0xC | a5;
  *((_QWORD *)&v104 + 1) = 0;
  LOWORD(v107) = *(_WORD *)(a1 + 120);
  *(_QWORD *)&v106 = v92;
  v89 = v18;
  v30 = (unint64_t)&a2[a4];
  v97 = v92 & 0x80000;
  switch(*(_WORD *)(a1 + 122))
  {
    case 1:
      DWORD2(v106) = 1;
      v31 = 13;
      goto LABEL_48;
    case 2:
      DWORD2(v106) = 1;
      v31 = 10;
LABEL_48:
      BYTE12(v106) = v31;
      goto LABEL_54;
    case 3:
      DWORD2(v106) = 2;
      WORD6(v106) = 2573;
      goto LABEL_54;
    case 4:
      v32 = 1;
      goto LABEL_52;
    case 5:
      v32 = 2;
LABEL_52:
      DWORD1(v106) = v32;
      goto LABEL_54;
    case 6:
      DWORD2(v106) = 1;
      BYTE12(v106) = 0;
LABEL_54:
      LOWORD(v33) = v18;
      if ((a5 & 0x40000000) != 0)
        goto LABEL_70;
      LOWORD(v33) = v18;
      if (!v97)
        goto LABEL_70;
      v34 = &a2[a4];
      if (!a4)
        goto LABEL_67;
      if (a3 > a4 && (*(_BYTE *)v30 & 0xC0) == 0x80)
        return 4294967260;
      v35 = *(unsigned __int16 *)(a1 + 124);
      v34 = &a2[a4];
      if (!*(_WORD *)(a1 + 124))
        goto LABEL_67;
      v34 = &a2[a4];
      if (a4 < 1)
        goto LABEL_67;
      v36 = &a2[a4];
      break;
    default:
      return 4294967252;
  }
LABEL_63:
  v37 = v36 - 1;
  while (1)
  {
    v34 = v37;
    if (v37 <= a2)
      break;
    --v37;
    if ((*v34 & 0xC0) != 0x80)
    {
      v36 = v34;
      if (--v35)
        goto LABEL_63;
      break;
    }
  }
LABEL_67:
  v93 = &a2[a3];
  v94 = v34 - a2;
  valid = _pcre2_valid_utf_8(v34, a3 - (v34 - a2), (int64x2_t *)a6[4].i64);
  a6[4].i32[3] = valid;
  if ((_DWORD)valid)
  {
    v16 = valid;
    a6[4].i64[0] += v94;
    return v16;
  }
  v33 = *(_DWORD *)(a1 + 96);
  v28 = v92;
  v19 = v93;
LABEL_70:
  v85 = v33;
  if ((v33 & 0x10) != 0)
  {
    v39 = v33;
    __c = *(unsigned __int8 *)(a1 + 112);
    v40 = 0;
    if ((v33 & 0x20) != 0)
    {
      v82 = *(unsigned __int8 *)(v103 + *(unsigned __int8 *)(a1 + 112) + 256);
      v39 = v33;
    }
    else
    {
      v82 = *(unsigned __int8 *)(a1 + 112);
    }
  }
  else
  {
    __c = 0;
    v82 = 0;
    v41 = (v89 >> 9) & 1;
    if ((v33 & 0x40) == 0)
      v41 = 1;
    v43 = v41 == 0;
    v39 = v33;
    if (v43)
      v40 = a1 + 40;
    else
      v40 = 0;
  }
  v90 = (v28 >> 19) & 1;
  v81 = v30 - 1;
  v88 = v39 & 0x10;
  if ((v39 & 0x80) != 0)
  {
    v42 = *(unsigned __int8 *)(a1 + 116);
    if ((v39 & 0x100) != 0)
      v91 = *(unsigned __int8 *)(v103 + v42 + 256);
    else
      v91 = *(unsigned __int8 *)(a1 + 116);
  }
  else
  {
    LODWORD(v42) = 0;
    v91 = 0;
  }
  v86 = v40;
  v87 = v42;
  v95 = a5 & 0x40;
  a6[1].i64[1] = a1;
  a6[2].i64[0] = (uint64_t)a2;
  v43 = (v39 & 0x10) == 0 && v40 == 0;
  a6[2].i64[1] = 0;
  a6[4].i16[4] = 1;
  v44 = !v43;
  v84 = v44;
  v80 = v88 >> 4;
  while (1)
  {
    if (*(_DWORD *)(a1 + 88) & 0x10000 | v95)
      goto LABEL_204;
    if ((v28 & 0x100) == 0)
    {
      v45 = v19;
      goto LABEL_118;
    }
    if (v97)
    {
      v45 = (unsigned __int8 *)v30;
      if (v30 >= (unint64_t)v19)
        goto LABEL_118;
LABEL_96:
      if (DWORD1(v106))
      {
        if ((unint64_t)v45 < *((_QWORD *)&v101 + 1))
        {
          v46 = v19;
          is_newline_8 = _pcre2_is_newline_8(v45, SDWORD1(v106), *((uint64_t *)&v101 + 1), (int *)&v106 + 2, v90);
          v19 = v46;
          if (is_newline_8)
            goto LABEL_118;
        }
      }
      else if ((unint64_t)v45 <= *((_QWORD *)&v101 + 1) - (unint64_t)DWORD2(v106)
             && *v45 == BYTE12(v106)
             && (DWORD2(v106) == 1 || v45[1] == BYTE13(v106)))
      {
        goto LABEL_118;
      }
      ++v45;
      while (v45 < v19)
      {
        v48 = *v45++;
        if ((v48 & 0xC0) != 0x80)
        {
          --v45;
          goto LABEL_96;
        }
      }
    }
    else
    {
      v45 = (unsigned __int8 *)v30;
      if (v30 < (unint64_t)v19)
      {
        do
        {
          if (DWORD1(v106))
          {
            if ((unint64_t)v45 < *((_QWORD *)&v101 + 1))
            {
              v49 = v19;
              v50 = _pcre2_is_newline_8(v45, SDWORD1(v106), *((uint64_t *)&v101 + 1), (int *)&v106 + 2, v90);
              v19 = v49;
              if (v50)
                break;
            }
          }
          else if ((unint64_t)v45 <= *((_QWORD *)&v101 + 1) - (unint64_t)DWORD2(v106)
                 && *v45 == BYTE12(v106)
                 && (DWORD2(v106) == 1 || v45[1] == BYTE13(v106)))
          {
            break;
          }
          ++v45;
        }
        while (v45 < v19);
      }
    }
LABEL_118:
    if (v98)
    {
      if (!v84)
        goto LABEL_202;
      if (v30 >= (unint64_t)v45)
        goto LABEL_254;
      v51 = *(unsigned __int8 *)v30;
      if (v88)
      {
        v53 = (_DWORD)v51 != __c && (_DWORD)v51 != v82;
        v54 = !v53 || v86 == 0;
        v55 = v87;
        if (v54)
        {
          if (v53)
            goto LABEL_254;
          goto LABEL_203;
        }
      }
      else
      {
        v55 = v87;
        if (!v86)
          goto LABEL_254;
      }
      if (((*(unsigned __int8 *)(v86 + (v51 >> 3)) >> (v51 & 7)) & 1) == 0)
        goto LABEL_254;
    }
    else
    {
      if (v88)
      {
        v56 = (unsigned __int8 *)cstdlib_memchr((void *)v30, __c, (size_t)&v45[-v30]);
        v57 = v56;
        if (__c == v82)
        {
          if (v56)
            v30 = (unint64_t)v56;
          else
            v30 = (unint64_t)v45;
        }
        else
        {
          v59 = (unsigned __int8 *)cstdlib_memchr((void *)v30, v82, (size_t)&v45[-v30]);
          if (v57 < v59 || v59 == 0)
            v61 = (unint64_t)v57;
          else
            v61 = (unint64_t)v59;
          if (v59)
            v62 = v59;
          else
            v62 = v45;
          if (v57)
            v30 = v61;
          else
            v30 = (unint64_t)v62;
        }
        LOWORD(v28) = v92;
        v55 = v87;
        if ((BYTE12(v105) & 0x30) == 0 && v30 >= *((_QWORD *)&v101 + 1))
          goto LABEL_254;
        goto LABEL_203;
      }
      if ((v89 & 0x200) != 0)
      {
        if (v30 > (uint64_t)v101 + a4)
        {
          if (v97)
          {
            if (v30 >= (unint64_t)v45)
              goto LABEL_195;
LABEL_144:
            if (DWORD1(v106))
            {
              if (v30 > (unint64_t)v101
                && _pcre2_was_newline_8((_BYTE *)v30, SDWORD1(v106), v101, (int *)&v106 + 2, v90))
              {
                goto LABEL_195;
              }
            }
            else if (v30 >= (unint64_t)v101 + DWORD2(v106)
                   && *(unsigned __int8 *)(v30 - DWORD2(v106)) == BYTE12(v106))
            {
              if (DWORD2(v106) == 1)
              {
                LOWORD(v28) = v92;
                goto LABEL_195;
              }
              LOWORD(v28) = v92;
              if (*(unsigned __int8 *)(v30 - DWORD2(v106) + 1) == BYTE13(v106))
                goto LABEL_195;
            }
            ++v30;
            while (v30 < (unint64_t)v45)
            {
              v58 = *(_BYTE *)v30++;
              if ((v58 & 0xC0) != 0x80)
              {
                --v30;
                goto LABEL_144;
              }
            }
          }
          else
          {
            while (v30 < (unint64_t)v45)
            {
              if (DWORD1(v106))
              {
                if (v30 > (unint64_t)v101
                  && _pcre2_was_newline_8((_BYTE *)v30, SDWORD1(v106), v101, (int *)&v106 + 2, v90))
                {
                  break;
                }
              }
              else if (v30 >= (unint64_t)v101 + DWORD2(v106)
                     && *(unsigned __int8 *)(v30 - DWORD2(v106)) == BYTE12(v106)
                     && (DWORD2(v106) == 1 || *(unsigned __int8 *)(v30 - DWORD2(v106) + 1) == BYTE13(v106)))
              {
                break;
              }
              ++v30;
            }
          }
LABEL_195:
          if (*(_BYTE *)(v30 - 1) == 13)
          {
            v65 = (DWORD1(v106) - 1) > 1 || v30 >= (unint64_t)v45;
            if (!v65 && *(_BYTE *)v30 == 10)
              ++v30;
          }
        }
LABEL_202:
        v55 = v87;
        goto LABEL_203;
      }
      if (!v86)
        goto LABEL_202;
      v63 = v30;
      do
      {
        v30 = v63;
        if (v63 >= (unint64_t)v45)
          break;
        ++v63;
      }
      while (((*(unsigned __int8 *)(v86 + ((unint64_t)*(unsigned __int8 *)v30 >> 3)) >> (*(_BYTE *)v30 & 7)) & 1) == 0);
      v64 = (BYTE12(v105) & 0x30) == 0 && v30 >= *((_QWORD *)&v101 + 1);
      v55 = v87;
      if (v64)
        goto LABEL_254;
    }
LABEL_203:
    v19 = (unsigned __int8 *)*((_QWORD *)&v101 + 1);
    if ((BYTE12(v105) & 0x30) == 0)
    {
      if ((uint64_t)(*((_QWORD *)&v101 + 1) - v30) < *(unsigned __int16 *)(a1 + 126))
        goto LABEL_254;
      if (v85 < 0 && (uint64_t)(*((_QWORD *)&v101 + 1) - v30) <= 1999)
      {
        v74 = (unsigned __int8 *)(v30 + v80);
        if (v30 + v80 > v81)
        {
          if (v91 == v55)
          {
            while ((unint64_t)v74 < *((_QWORD *)&v101 + 1))
            {
              v75 = v74;
              v76 = *v74++;
              if (v76 == v91)
                goto LABEL_253;
            }
          }
          else
          {
            while ((unint64_t)v74 < *((_QWORD *)&v101 + 1))
            {
              v75 = v74;
              v78 = *v74++;
              v77 = v78;
              if (v78 == v55 || v77 == v91)
                goto LABEL_253;
            }
          }
          v75 = v74;
LABEL_253:
          v81 = (unint64_t)v75;
          if ((unint64_t)v75 >= *((_QWORD *)&v101 + 1))
            goto LABEL_254;
        }
      }
    }
LABEL_204:
    if (v30 > (unint64_t)v96)
      goto LABEL_254;
    v66 = v19;
    v102.i64[0] = v30;
    v102.i64[1] = v30;
    v109 = 0;
    v67 = internal_dfa_match((uint64_t)&v99, *((char **)&v100 + 1), (unsigned __int8 *)v30, a4, (int64x2_t *)a6[5].i64, 2 * a6[4].u16[5], a8, a9, 0, (uint64_t)v117);
    v68 = v98;
    if ((_DWORD)v67 != -1)
      v68 = 1;
    if (v68 == 1)
      break;
    v19 = v66;
    if ((v28 & 0x100) != 0)
    {
      if (DWORD1(v106))
      {
        if (v30 < *((_QWORD *)&v101 + 1))
        {
          v69 = _pcre2_is_newline_8((unsigned __int8 *)v30, SDWORD1(v106), *((uint64_t *)&v101 + 1), (int *)&v106 + 2, v90);
          v19 = v66;
          if (v69)
            goto LABEL_254;
        }
      }
      else if (v30 <= *((_QWORD *)&v101 + 1) - (unint64_t)DWORD2(v106)
             && *(unsigned __int8 *)v30 == BYTE12(v106)
             && (DWORD2(v106) == 1 || *(unsigned __int8 *)(v30 + 1) == BYTE13(v106)))
      {
        goto LABEL_254;
      }
    }
    v70 = (unsigned __int8 *)(v30 + 1);
    if (v97 && v70 < v19)
    {
      v71 = &v19[~v30];
      while ((*v70 & 0xC0) == 0x80)
      {
        ++v70;
        if (!--v71)
        {
          v30 = (unint64_t)v19;
          goto LABEL_224;
        }
      }
    }
    v30 = (unint64_t)v70;
LABEL_224:
    if (v30 > (unint64_t)v19)
    {
LABEL_254:
      v16 = 0xFFFFFFFFLL;
      goto LABEL_260;
    }
    v72 = *(_BYTE *)(v30 - 1) != 13 || v30 >= (unint64_t)v19;
    if (!v72
      && *(_BYTE *)v30 == 10
      && (*(_BYTE *)(a1 + 97) & 8) == 0
      && ((DWORD1(v106) - 1) < 2 || DWORD2(v106) == 2))
    {
      ++v30;
    }
  }
  v16 = v67;
  if ((_DWORD)v67 == -2 && a6[4].i16[5])
  {
    a6[5].i64[0] = v30 - (_QWORD)a2;
    a6[5].i64[1] = v66 - a2;
  }
  a6[3] = vsubq_s64(v102, vdupq_n_s64((unint64_t)a2));
  a6[4].i64[0] = v30 - (_QWORD)a2;
  a6[4].i32[3] = v67;
LABEL_260:
  while (v117[0])
  {
    v117[0] = *(_QWORD *)v117[0];
    (*((void (**)(void))&v99 + 1))();
  }
  return v16;
}

uint64_t internal_dfa_match(uint64_t a1, char *a2, unsigned __int8 *a3, uint64_t a4, _QWORD *a5, int a6, _DWORD *a7, int a8, unsigned int a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t result;
  _DWORD *v19;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  int *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  BOOL v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL4 v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  _DWORD *v52;
  unsigned __int8 *v53;
  uint64_t v54;
  unsigned __int8 *v55;
  unsigned int v56;
  int v57;
  int v58;
  BOOL v59;
  int v60;
  BOOL v61;
  int v62;
  int v63;
  int v64;
  int v65;
  unsigned __int16 *v66;
  uint64_t v67;
  _DWORD *v68;
  int v69;
  _DWORD *v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  unsigned int v75;
  _QWORD *v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 *v94;
  uint64_t v95;
  unsigned __int8 *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  _DWORD *v102;
  unsigned __int8 *v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  _DWORD *v109;
  uint64_t v110;
  _DWORD *v111;
  uint64_t v112;
  _DWORD *v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD *v119;
  uint64_t v120;
  _DWORD *v121;
  _BOOL4 v122;
  unsigned __int8 *v123;
  char *v124;
  unsigned int v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  int v139;
  _DWORD *v140;
  unsigned __int8 *v141;
  int i;
  int v143;
  uint64_t v144;
  _DWORD *v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  unsigned __int16 *v149;
  uint64_t v150;
  int v151;
  BOOL v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  int v157;
  unsigned int v158;
  BOOL v159;
  _DWORD *v160;
  BOOL v161;
  _BOOL4 v162;
  int *v163;
  BOOL v164;
  _BOOL4 v165;
  BOOL v166;
  _BOOL4 v167;
  int v168;
  unsigned __int8 *v169;
  uint64_t v170;
  int *v171;
  unsigned int v172;
  int v173;
  int *v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  unint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  int v186;
  BOOL v187;
  int v188;
  int v190;
  int *v191;
  _BOOL4 v192;
  int v194;
  int *v195;
  _DWORD *v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  unint64_t v200;
  unsigned __int8 *v201;
  int *v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  unint64_t v208;
  unsigned __int8 *v209;
  int *v210;
  int v211;
  unint64_t v212;
  uint64_t v213;
  int is_newline_8;
  int v215;
  unint64_t v216;
  uint64_t v217;
  int v218;
  int v219;
  int v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t *v232;
  int v233;
  int v234;
  unsigned __int8 *v235;
  int v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  unint64_t v243;
  uint64_t v244;
  int v245;
  _BOOL4 v247;
  signed int v248;
  _BYTE *v249;
  unint64_t v250;
  int v251;
  int v252;
  unint64_t v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  int v257;
  _DWORD *v258;
  signed int v259;
  _BOOL4 v260;
  _DWORD *v261;
  int v262;
  _BOOL4 v263;
  int v264;
  unint64_t v265;
  uint64_t v266;
  int v267;
  int v268;
  unint64_t v269;
  uint64_t v270;
  int v271;
  int v272;
  unint64_t v273;
  int v274;
  unsigned int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t v281;
  _DWORD *v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  unsigned __int8 *v286;
  int v287;
  char v288;
  int v289;
  uint64_t v290;
  unsigned int v291;
  BOOL v293;
  int v294;
  BOOL v295;
  unsigned int v296;
  uint64_t v297;
  unsigned int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unsigned __int8 *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned __int8 *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  _BOOL4 v312;
  int v314;
  signed int v315;
  signed int v316;
  unsigned int v317;
  int v318;
  int v320;
  BOOL v321;
  int v322;
  int v323;
  int *v324;
  int v325;
  unint64_t v326;
  unsigned __int8 *v327;
  char v328;
  uint64_t v329;
  int v331;
  uint64_t v332;
  uint64_t v333;
  _DWORD *v334;
  uint64_t v335;
  uint64_t v336;
  _DWORD *v337;
  uint64_t v338;
  _DWORD *v339;
  uint64_t v340;
  int v341;
  uint64_t v342;
  unsigned int v343;
  int v344;
  BOOL v346;
  int v347;
  BOOL v348;
  int v349;
  int v351;
  int v352;
  int *v353;
  int v354;
  int v355;
  unint64_t v356;
  uint64_t v357;
  int v358;
  uint64_t v359;
  _BOOL4 v361;
  unsigned int v362;
  int v363;
  char v364;
  unsigned int v365;
  int v367;
  BOOL v368;
  int v369;
  int v370;
  uint64_t v371;
  int v372;
  int v373;
  int v374;
  int v375;
  int v376;
  int v377;
  int v378;
  _BYTE *v379;
  unsigned __int8 *v380;
  signed int v381;
  int v382;
  unsigned int v383;
  unsigned int v384;
  int v385;
  unsigned int v386;
  unint64_t v387;
  unsigned int v388;
  unsigned int v389;
  _BOOL4 v390;
  unsigned int v391;
  int *v392;
  uint64_t v393;
  unsigned int v394;
  unsigned int v395;
  unsigned int v396;
  unsigned int v397;
  _DWORD *v398;
  uint64_t v399;
  int v400;
  char v401;
  unint64_t v402;
  _BOOL4 v403;
  _BOOL4 v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  _DWORD *v412;
  int v413;
  int v414;
  uint64_t v416;
  unsigned int v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  _DWORD *v422;
  int v423;
  uint64_t v424;
  unsigned __int8 *v425;
  int v426;
  unsigned int v427;
  unsigned int v429;
  unsigned __int8 *v430;
  unint64_t v431;
  _DWORD *v432;
  int v433;
  int *v434;
  _DWORD *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  unsigned __int8 *v440;
  uint64_t v441;

  v439 = 0;
  v440 = 0;
  v441 = 0;
  v12 = *(unsigned __int8 **)(a1 + 32);
  v431 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_DWORD *)(a1 + 112);
  v15 = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(a1 + 104) = v15 + 1;
  if (v15 >= *(_DWORD *)(a1 + 96))
    return 4294967249;
  v16 = a1;
  v17 = a9;
  if (*(_DWORD *)(a1 + 100) < a9)
    return 4294967243;
  v19 = a7;
  v22 = a3;
  v23 = (unsigned __int8 *)a2;
  v433 = v14 & 0x80000;
  v24 = (a8 - 2) / 6;
  v420 = *(_QWORD *)(a1 + 64);
  v25 = a7 + 2;
  v26 = (uint64_t)&a7[3 * v24 + 2];
  LODWORD(v27) = *a2;
  v424 = v13;
  v425 = v12;
  v423 = v24;
  if ((int)v27 <= -127)
  {
    v28 = 0;
    v29 = a2;
    do
    {
      v30 = __rev16(*((unsigned __int16 *)v29 + 2));
      if (v30 > v28)
        v28 = v30;
      v29 += __rev16(*(unsigned __int16 *)(v29 + 1));
    }
    while (*v29 == 120);
    if (v433)
    {
      v27 = 0;
      if (v28)
        v31 = v12 >= a3;
      else
        v31 = 1;
      if (!v31)
      {
        v32 = a3;
        do
        {
          v33 = v32 - 1;
          do
          {
            v22 = v33;
            if (v33 <= v12)
            {
              ++v27;
              goto LABEL_37;
            }
            --v33;
          }
          while ((*v22 & 0xC0) == 0x80);
          ++v27;
          v32 = v22;
        }
        while (v27 < v28);
      }
    }
    else
    {
      v27 = a3 - v12;
      if (a3 - v12 >= v28)
        v27 = v28;
      v22 = &a3[-v27];
    }
LABEL_37:
    if ((unint64_t)v22 < *(_QWORD *)(a1 + 48))
      *(_QWORD *)(a1 + 48) = v22;
    v36 = 0;
    v10 = (uint64_t)&a7[3 * v24 + 2];
    while (1)
    {
      LODWORD(v11) = v23[3];
      if ((_DWORD)v11 != 125)
        break;
      v39 = __rev16(*((unsigned __int16 *)v23 + 2));
      if (v39 <= v27)
        goto LABEL_44;
LABEL_49:
      v23 += __rev16(*(unsigned __int16 *)(v23 + 1));
      if (*v23 != 120)
        goto LABEL_50;
    }
    LODWORD(v39) = 0;
LABEL_44:
    if ((int)v36 >= v24)
      return 4294967253;
    v36 = (v36 + 1);
    if ((_DWORD)v11 == 125)
      LODWORD(v11) = -3;
    else
      LODWORD(v11) = 0;
    *(_DWORD *)v10 = v13 - 3 - (_DWORD)v23 + v11;
    *(_DWORD *)(v10 + 4) = 0;
    *(_DWORD *)(v10 + 8) = v27 - v39;
    v10 += 12;
    goto LABEL_49;
  }
  if (a9 || (*(_BYTE *)(a1 + 108) & 0x40) == 0)
  {
    v34 = v27 + 123;
    if (v34 > 6)
      LODWORD(v35) = 3;
    else
      v35 = qword_214F44528[(char)v34];
    LODWORD(v36) = 0;
    LODWORD(v27) = v24 & ~(v24 >> 31);
    v38 = &a7[3 * v24 + 2];
    while ((_DWORD)v27 != (_DWORD)v36)
    {
      v36 = (v36 + 1);
      *v38 = (_DWORD)v23 - v13 + v35;
      v38[1] = 0;
      v38 += 3;
      v23 += __rev16(*(unsigned __int16 *)(v23 + 1));
      LODWORD(v35) = 3;
      if (*v23 != 120)
        goto LABEL_50;
    }
    return 4294967253;
  }
  do
    v23 += __rev16(*(unsigned __int16 *)(v23 + 1));
  while (*v23 == 120);
  v36 = a7[1];
  if (!*a7)
  {
    v436 = a7[1];
    v37 = &a7[3 * v24 + 2];
    cstdlib_memcpy(v37, a7 + 2, 12 * (int)v36);
    v36 = v436;
    v26 = (uint64_t)v37;
    v24 = v423;
    v13 = v424;
    v12 = v425;
  }
LABEL_50:
  v40 = 0;
  v414 = (v14 >> 19) & 1;
  v427 = a9 + 1;
  v399 = v420 + 256;
  *v19 = 0;
  v381 = a6 & 0xFFFFFFFE;
  v382 = v24 - 1;
  v392 = (int *)(v16 + 120);
  v393 = v420 + 832;
  v380 = &v12[a4];
  v379 = (_BYTE *)(v22 - v12);
  v383 = -1;
  v41 = v22;
  v412 = v19;
  v387 = (unint64_t)v22;
LABEL_51:
  if ((unint64_t)v41 > *(_QWORD *)(v16 + 56))
    *(_QWORD *)(v16 + 56) = v41;
  *v19 ^= 1u;
  v19[1] = v36;
  if ((unint64_t)v41 >= v431)
  {
    v43 = 0;
    v42 = -1;
  }
  else
  {
    v42 = *v41;
    v43 = 1;
    if (v433 && v42 >= 0xC0)
    {
      LODWORD(v27) = v41[1] & 0x3F;
      if ((v42 & 0x20) != 0)
      {
        if ((v42 & 0x10) != 0)
        {
          if ((v42 & 8) != 0)
          {
            v373 = v41[2] & 0x3F;
            v374 = v41[3] & 0x3F;
            LODWORD(v10) = v41[4] & 0x3F;
            if ((v42 & 4) != 0)
            {
              v42 = ((v42 & 1) << 30) | ((_DWORD)v27 << 24) | (v373 << 18) | (v374 << 12) | ((_DWORD)v10 << 6) | v41[5] & 0x3F;
              v43 = 6;
            }
            else
            {
              v42 = ((v42 & 3) << 24) | ((_DWORD)v27 << 18) | (v373 << 12) | (v374 << 6) | v10;
              v43 = 5;
            }
          }
          else
          {
            v42 = ((v42 & 7) << 18) | ((_DWORD)v27 << 12) | ((v41[2] & 0x3F) << 6) | v41[3] & 0x3F;
            v43 = 4;
          }
        }
        else
        {
          v42 = ((v42 & 0xF) << 12) | ((_DWORD)v27 << 6) | v41[2] & 0x3F;
          v43 = 3;
        }
      }
      else
      {
        v43 = 2;
        v42 = v41[1] & 0x3F | ((v42 & 0x1F) << 6);
      }
    }
  }
  v430 = v41;
  if ((int)v36 < 1)
  {
    v375 = 0;
    v376 = 0;
    goto LABEL_1427;
  }
  v400 = 0;
  v413 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v435 = (_DWORD *)(v26 + 12 * (int)v36);
  v398 = (_DWORD *)(v26 + 12);
  v416 = v42;
  v402 = (unint64_t)v42 >> 3;
  v401 = v42 & 7;
  v418 = (v42 / 128);
  v417 = v42 - (v27 & 0xFFFFFF80);
  v48 = v42 >> 13 > 6 || (v42 - 160) >> 5 < 0x6BB;
  v403 = v42 == 95;
  v404 = v48;
  v432 = (_DWORD *)(v26 + 4);
  v419 = (uint64_t)v25;
  v434 = v25;
  v422 = (_DWORD *)v26;
  v426 = v42;
  v49 = v43;
  while (2)
  {
    v437 = v36;
    v27 = v26 + 12 * v44;
    v50 = *(_DWORD *)v27;
    if ((*(_DWORD *)v27 & 0x80000000) != 0)
    {
      v58 = *(_DWORD *)(v26 + 12 * v44 + 8);
      v59 = __OFSUB__(v58, 1);
      v60 = v58 - 1;
      if (v60 < 0 == v59)
      {
        if ((int)v46 >= v24)
          return 4294967253;
        v46 = (v46 + 1);
        *v434 = v50;
        v434[1] = *(_DWORD *)(v26 + 12 * v44 + 4);
        v434[2] = v60;
        v434 += 3;
        v61 = (_DWORD)v40 == 0;
LABEL_85:
        if (v61)
          v45 = v45;
        else
          v45 = 1;
        goto LABEL_1345;
      }
      v50 = -v50;
      *(_DWORD *)v27 = v50;
    }
    if (v44 >= 1)
    {
      v51 = v44;
      v52 = v432;
      do
      {
        if (*(v52 - 1) == v50 && *v52 == *(_DWORD *)(v26 + 12 * v44 + 4))
          goto LABEL_1345;
        v52 += 3;
        --v51;
      }
      while (v51);
    }
    v53 = (unsigned __int8 *)(v13 + v50);
    v54 = *v53;
    if (!(_DWORD)v49)
    {
      if (poptable[v54])
        v40 = 1;
      else
        v40 = v40;
    }
    v27 = coptable[v54];
    if (coptable[v54])
    {
      v55 = &v53[v27];
      v56 = v53[v27];
      LODWORD(v27) = 1;
      if (v433 && v56 >= 0xC0)
      {
        v57 = v55[1] & 0x3F;
        if ((v56 & 0x20) != 0)
        {
          if ((v56 & 0x10) != 0)
          {
            if ((v56 & 8) != 0)
            {
              v62 = v55[2] & 0x3F;
              LODWORD(v10) = v55[3] & 0x3F;
              LODWORD(v11) = v55[4] & 0x3F;
              if ((v56 & 4) != 0)
              {
                v56 = ((v56 & 1) << 30) | (v57 << 24) | (v62 << 18) | ((_DWORD)v10 << 12) | ((_DWORD)v11 << 6) | v55[5] & 0x3F;
                LODWORD(v27) = 6;
              }
              else
              {
                v56 = ((v56 & 3) << 24) | (v57 << 18) | (v62 << 12) | ((_DWORD)v10 << 6) | v11;
                LODWORD(v27) = 5;
              }
            }
            else
            {
              v56 = ((v56 & 7) << 18) | (v57 << 12) | ((v55[2] & 0x3F) << 6) | v55[3] & 0x3F;
              LODWORD(v27) = 4;
            }
          }
          else
          {
            v56 = ((v56 & 0xF) << 12) | (v57 << 6) | v55[2] & 0x3F;
            LODWORD(v27) = 3;
          }
        }
        else
        {
          LODWORD(v27) = 2;
          v56 = v55[1] & 0x3F | ((v56 & 0x1F) << 6);
        }
      }
      if (v54 >= 0x55)
      {
        result = 4294967254;
        switch(v56)
        {
          case 0xEu:
            return result;
          case 0xFu:
          case 0x10u:
            LODWORD(v54) = v54 + 300;
            break;
          case 0x11u:
            LODWORD(v54) = v54 + 340;
            v56 = 0x11u;
            break;
          case 0x12u:
          case 0x13u:
            LODWORD(v54) = v54 + 360;
            break;
          case 0x14u:
          case 0x15u:
            LODWORD(v54) = v54 + 380;
            break;
          case 0x16u:
            LODWORD(v54) = v54 + 320;
            v56 = 0x16u;
            break;
          default:
            break;
        }
      }
    }
    else
    {
      v56 = -1;
    }
    result = 0;
    v63 = 1;
    v64 = -2;
    v65 = 4;
    v66 = (unsigned __int16 *)v49;
    switch((int)v54)
    {
      case 1:
        if (v430 != v12)
          goto LABEL_1345;
        if ((int)v437 >= v24)
          return 4294967253;
        v437 = (v437 + 1);
        LODWORD(v27) = v50 + 1;
        v196 = v435;
        goto LABEL_666;
      case 2:
        LODWORD(v27) = (_DWORD)v380;
        if (v430 != v380)
          goto LABEL_1345;
        if ((int)v437 >= v24)
          return 4294967253;
        *v435 = v50 + 1;
        v435[1] = 0;
        v435 += 3;
        v437 = (v437 + 1);
        LODWORD(v27) = (_DWORD)v380;
        v430 = v380;
        goto LABEL_1345;
      case 4:
      case 5:
        if (v430 <= v12)
          goto LABEL_786;
        v123 = v430 - 1;
        if ((unint64_t)(v430 - 1) < *(_QWORD *)(v16 + 48))
          *(_QWORD *)(v16 + 48) = v123;
        if (!v433)
        {
          v125 = *v123;
          goto LABEL_783;
        }
        v124 = (char *)(v430 + 2);
        do
        {
          v125 = *(v124 - 3);
          --v124;
        }
        while ((v125 & 0xC0) == 0x80);
        if (v125 < 0xC0)
          goto LABEL_783;
        v126 = *(v124 - 1) & 0x3F;
        if ((v125 & 0x20) == 0)
        {
          v125 = *(v124 - 1) & 0x3F | ((v125 & 0x1F) << 6);
          goto LABEL_783;
        }
        if ((v125 & 0x10) == 0)
        {
          v363 = ((v125 & 0xF) << 12) | (v126 << 6);
          v364 = *v124;
LABEL_1354:
          v125 = v363 & 0xFFFFFFC0 | v364 & 0x3F;
          goto LABEL_783;
        }
        if ((v125 & 8) == 0)
        {
          v363 = ((v125 & 7) << 18) | (v126 << 12) | ((*v124 & 0x3F) << 6);
          v364 = v124[1];
          goto LABEL_1354;
        }
        LODWORD(v10) = *v124 & 0x3F;
        LODWORD(v11) = v124[1] & 0x3F;
        v372 = v124[2] & 0x3F;
        if ((v125 & 4) != 0)
          v125 = ((v125 & 1) << 30) | (v126 << 24) | ((_DWORD)v10 << 18) | ((_DWORD)v11 << 12) | (v372 << 6) | v124[3] & 0x3F;
        else
          v125 = ((v125 & 3) << 24) | (v126 << 18) | ((_DWORD)v10 << 12) | ((_DWORD)v11 << 6) | v372;
        v49 = (uint64_t)v66;
LABEL_783:
        if ((*(_BYTE *)(v16 + 114) & 2) != 0)
        {
          LODWORD(v27) = v125 == 95
                      || (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                        * _pcre2_ucd_stage2_8[v125 & 0x7F | (_pcre2_ucd_stage1_8[v125 >> 7] << 7)]])] & 0xFFFFFFFD) == 1;
        }
        else if (v125 > 0xFF)
        {
LABEL_786:
          LODWORD(v27) = 0;
        }
        else
        {
          LODWORD(v27) = (*(unsigned __int8 *)(v393 + v125) >> 4) & 1;
        }
        if ((int)v49 < 1)
        {
          v251 = 0;
        }
        else
        {
          if ((unint64_t)v430 >= *(_QWORD *)(v16 + 56))
          {
            v249 = v430 + 1;
            if (v433)
            {
              v250 = *(_QWORD *)(v16 + 40);
              if ((unint64_t)v249 < v250)
              {
                v10 = ~(unint64_t)v430 + v250;
                while ((*v249 & 0xC0) == 0x80)
                {
                  ++v249;
                  if (!--v10)
                  {
                    v249 = *(_BYTE **)(v16 + 40);
                    break;
                  }
                }
              }
            }
            *(_QWORD *)(v16 + 56) = v249;
          }
          if ((*(_BYTE *)(v16 + 114) & 2) != 0)
          {
            v251 = v42 == 95
                || (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                  * _pcre2_ucd_stage2_8[v417
                                                                                      + (_pcre2_ucd_stage1_8[v418] << 7)]])] & 0xFFFFFFFD) == 1;
          }
          else if (v42 > 0xFF)
          {
            v251 = 0;
          }
          else
          {
            v251 = (*(unsigned __int8 *)(v393 + v416) >> 4) & 1;
          }
        }
        if (((_DWORD)v54 == 4) == ((_DWORD)v27 != v251))
          goto LABEL_1345;
        v70 = v435;
        if ((int)v437 >= v24)
          return 4294967253;
        v437 = (v437 + 1);
LABEL_942:
        LODWORD(v27) = v50 + 1;
        goto LABEL_943;
      case 6:
      case 8:
      case 10:
        if ((int)v49 < 1)
          goto LABEL_1345;
        if (v42 > 0xFF)
          goto LABEL_1341;
LABEL_180:
        if ((toptable1[v54] & *(_BYTE *)(v393 + v416)) == toptable2[v54])
          goto LABEL_1345;
        goto LABEL_1341;
      case 7:
      case 9:
      case 11:
        if (v42 <= 0xFF && (int)v49 >= 1)
          goto LABEL_180;
        goto LABEL_1345;
      case 12:
        if ((int)v49 < 1)
          goto LABEL_1345;
        v197 = v46;
        v198 = v40;
        v199 = *(_DWORD *)(v16 + 116);
        v200 = *(_QWORD *)(v16 + 40);
        if (v199)
        {
          v201 = v430;
          v202 = v392;
          if ((unint64_t)v430 >= v200)
            goto LABEL_1044;
          v203 = v45;
          if (!_pcre2_is_newline_8(v430, v199, v200, v392, v414))
          {
            v200 = *(_QWORD *)(v16 + 40);
            v13 = v424;
            v12 = v425;
            v24 = v423;
            v26 = (uint64_t)v422;
            v201 = v430;
            v42 = v426;
            v45 = v203;
            v49 = (uint64_t)v66;
LABEL_1044:
            if ((unint64_t)(v201 + 1) >= v200
              && (*(_BYTE *)(v16 + 108) & 0x20) != 0
              && !*(_DWORD *)(v16 + 116)
              && *v202 == 2
              && v42 == *(unsigned __int8 *)(v16 + 124))
            {
              v400 = 1;
              v40 = 1;
              goto LABEL_1404;
            }
            if ((int)v197 >= v24)
              return 4294967253;
            LODWORD(v46) = v197;
            v40 = v198;
            goto LABEL_1342;
          }
LABEL_1111:
          v13 = v424;
          v12 = v425;
          v24 = v423;
          v26 = (uint64_t)v422;
          v42 = v426;
          v40 = v198;
          v45 = v203;
          v46 = v197;
          goto LABEL_459;
        }
        v202 = v392;
        v27 = *v392;
        v201 = v430;
        if ((unint64_t)v430 > v200 - v27
          || *v430 != *(unsigned __int8 *)(v16 + 124)
          || (_DWORD)v27 != 1 && v430[1] != *(unsigned __int8 *)(v16 + 125))
        {
          goto LABEL_1044;
        }
        goto LABEL_1403;
      case 13:
        if ((int)v49 < 1)
          goto LABEL_1345;
        goto LABEL_1341;
      case 15:
      case 16:
        if ((int)v49 < 1)
          goto LABEL_1345;
        v27 = _pcre2_ucd_stage2_8[v417 + (_pcre2_ucd_stage1_8[v418] << 7)];
        switch(v53[1])
        {
          case 0u:
            goto LABEL_1326;
          case 1u:
            v365 = BYTE1(_pcre2_ucd_records_8[2 * v27]);
            v187 = v365 > 9;
            LODWORD(v27) = (1 << v365) & 0x320;
            if (!v187 && (_DWORD)v27 != 0)
              goto LABEL_1326;
            goto LABEL_1278;
          case 2u:
            v367 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v27])];
            goto LABEL_1283;
          case 3u:
            v367 = BYTE1(_pcre2_ucd_records_8[2 * v27]);
            goto LABEL_1283;
          case 4u:
            v367 = LOBYTE(_pcre2_ucd_records_8[2 * v27]);
LABEL_1283:
            v368 = v367 == v53[2];
            goto LABEL_1285;
          case 5u:
            v368 = (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v27])] & 0xFFFFFFFD) == 1;
            goto LABEL_1285;
          case 6u:
          case 7u:
            if (v42 < 0x2000)
            {
              if (v42 > 132)
              {
                if (v42 > 5759)
                {
                  if (v42 != 5760 && v42 != 6158)
                    goto LABEL_1410;
                }
                else if (v42 != 133 && v42 != 160)
                {
                  goto LABEL_1410;
                }
              }
              else if (v42 > 0x20 || ((1 << v416) & 0x100003E00) == 0)
              {
                goto LABEL_1410;
              }
            }
            else if ((v42 - 0x2000) >= 0xB
                   && ((v42 - 8232) > 0x37
                    || ((1 << (v42 - 40)) & 0x80000000000083) == 0)
                   && v42 != 12288)
            {
LABEL_1410:
              v368 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v27])] == 6;
LABEL_1285:
              LODWORD(v27) = v368;
LABEL_1288:
              if (((_DWORD)v54 != 16) == (_DWORD)v27)
                goto LABEL_1345;
LABEL_1327:
              if ((int)v46 >= v24)
                return 4294967253;
              v46 = (v46 + 1);
              LODWORD(v27) = v50 + 3;
              goto LABEL_1343;
            }
LABEL_1326:
            if ((_DWORD)v54 != 16)
              goto LABEL_1345;
            goto LABEL_1327;
          case 8u:
            v369 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v27])] | 2;
            LODWORD(v27) = v403;
            if (v369 != 3)
              goto LABEL_1288;
            goto LABEL_1326;
          case 9u:
            v27 = (unint64_t)&_pcre2_ucd_caseless_sets_8[v53[2]];
            while (1)
            {
              v370 = *(_DWORD *)v27;
              if (v42 < *(_DWORD *)v27)
                break;
              v27 += 4;
              if (v42 == v370)
                goto LABEL_1326;
            }
LABEL_1278:
            if ((_DWORD)v54 == 16)
              goto LABEL_1345;
            goto LABEL_1327;
          case 0xAu:
            LODWORD(v27) = v404;
            if ((v42 - 36) > 0x3C)
              goto LABEL_1288;
            LODWORD(v27) = v404;
            if (((1 << (v42 - 36)) & 0x1000000010000001) == 0)
              goto LABEL_1288;
            goto LABEL_1326;
          default:
            LODWORD(v27) = v54 != 16;
            goto LABEL_1288;
        }
      case 17:
        if ((int)v49 < 1)
          goto LABEL_1345;
        if (v42 <= 12)
        {
          if ((v42 - 11) >= 2)
          {
            if (v42 != 10)
              goto LABEL_1345;
LABEL_1341:
            if ((int)v46 >= v24)
              return 4294967253;
LABEL_1342:
            v46 = (v46 + 1);
            LODWORD(v27) = v50 + 1;
LABEL_1343:
            v171 = v434;
            *v434 = v27;
            v434[1] = 0;
            goto LABEL_1344;
          }
LABEL_1005:
          if (*(_WORD *)(v16 + 128) == 2)
            goto LABEL_1345;
          goto LABEL_1341;
        }
        if ((v42 - 8232) < 2)
          goto LABEL_1005;
        if (v42 != 13)
        {
          if (v42 != 133)
            goto LABEL_1345;
          goto LABEL_1005;
        }
        if ((unint64_t)(v430 + 1) < v431)
        {
          if (v430[1] != 10)
            goto LABEL_1341;
          if ((int)v46 >= v24)
            return 4294967253;
          v46 = (v46 + 1);
          v171 = v434;
          *v434 = ~v50;
          *(_QWORD *)(v434 + 1) = 0x100000000;
LABEL_1344:
          v434 = v171 + 3;
          goto LABEL_1345;
        }
        if ((int)v46 >= v24)
          return 4294967253;
        v46 = (v46 + 1);
        *v434 = v50 + 1;
        v434[1] = 0;
        v434 += 3;
        v61 = (*(_BYTE *)(v16 + 108) & 0x20) == 0;
        goto LABEL_85;
      case 18:
        if ((int)v49 < 1)
          goto LABEL_1345;
        LODWORD(v27) = v42 - 0x2000;
        if (v42 < 0x2000)
        {
          if (v42 <= 159)
          {
            if (v42 == 9 || v42 == 32)
              goto LABEL_1345;
          }
          else if (v42 == 160 || v42 == 5760 || v42 == 6158)
          {
            goto LABEL_1345;
          }
        }
        else if (v42 > 8238)
        {
          if (v42 == 8239 || v42 == 8287 || v42 == 12288)
            goto LABEL_1345;
        }
        else if (v27 < 0xB)
        {
          goto LABEL_1345;
        }
        goto LABEL_1341;
      case 19:
        if ((int)v49 < 1)
          goto LABEL_1345;
        LODWORD(v27) = v42 - 0x2000;
        if (v42 < 0x2000)
        {
          if (v42 <= 159)
          {
            if (v42 != 9 && v42 != 32)
              goto LABEL_1345;
          }
          else if (v42 != 160 && v42 != 5760 && v42 != 6158)
          {
            goto LABEL_1345;
          }
        }
        else if (v42 > 8238)
        {
          if (v42 != 8239 && v42 != 8287 && v42 != 12288)
            goto LABEL_1345;
        }
        else if (v27 >= 0xB)
        {
          goto LABEL_1345;
        }
        goto LABEL_1341;
      case 20:
        if ((int)v49 < 1 || (v42 - 10) < 4 || (v42 - 8232) < 2 || v42 == 133)
          goto LABEL_1345;
        goto LABEL_1341;
      case 21:
        if ((int)v49 < 1 || (v42 - 10) >= 4 && (v42 - 8232) >= 2 && v42 != 133)
          goto LABEL_1345;
        goto LABEL_1341;
      case 22:
        if ((int)v49 < 1)
          goto LABEL_1345;
        v204 = v46;
        v205 = v45;
        v206 = v40;
        LODWORD(v438) = 0;
        if ((unint64_t)_pcre2_extuni_8(v42, &v430[v49], *(_QWORD *)(v16 + 32), v431, v414, &v438) >= v431)
        {
          if ((*(_BYTE *)(v16 + 108) & 0x20) != 0)
            v45 = 1;
          else
            v45 = v205;
          v24 = v423;
        }
        else
        {
          v24 = v423;
          v45 = v205;
        }
        v13 = v424;
        v12 = v425;
        v26 = (uint64_t)v422;
        v42 = v426;
        if (v204 >= v24)
          return 4294967253;
        v40 = v206;
        v49 = (uint64_t)v66;
        v46 = (v204 + 1);
        v171 = v434;
        *v434 = ~v50;
        v434[1] = 0;
        v434[2] = v438;
        goto LABEL_1344;
      case 23:
        if ((_DWORD)v49)
        {
          v197 = v46;
          v198 = v40;
          v207 = *(_DWORD *)(v16 + 116);
          v208 = *(_QWORD *)(v16 + 40);
          v209 = v430;
          if (v207)
          {
            if ((unint64_t)v430 < v208)
            {
              v203 = v45;
              if (!_pcre2_is_newline_8(v430, v207, v208, v392, v414))
                goto LABEL_1111;
              v27 = *v392;
              v13 = v424;
              v12 = v425;
              v24 = v423;
              v26 = (uint64_t)v422;
              v209 = v430;
              v42 = v426;
              v40 = v198;
              v45 = v203;
              v46 = v197;
              v49 = (uint64_t)v66;
              goto LABEL_638;
            }
          }
          else
          {
            v27 = *v392;
            if ((unint64_t)v430 <= v208 - v27)
            {
              v46 = v197;
              if (*v430 != *(unsigned __int8 *)(v16 + 124) || v27 != 1 && v430[1] != *(unsigned __int8 *)(v16 + 125))
                goto LABEL_1345;
LABEL_638:
              if (v209 != (unsigned __int8 *)(v431 - v27))
                goto LABEL_1345;
              goto LABEL_879;
            }
          }
LABEL_1403:
          v40 = v198;
          goto LABEL_1404;
        }
        if ((*(_BYTE *)(v16 + 108) & 0x20) == 0)
        {
LABEL_879:
          if ((int)v437 >= v24)
            return 4294967253;
          v437 = (v437 + 1);
          LODWORD(v27) = v50 + 1;
LABEL_776:
          v70 = v435;
LABEL_943:
          *v70 = v27;
          v70[1] = 0;
          v435 = v70 + 3;
          goto LABEL_1345;
        }
        goto LABEL_881;
      case 24:
        if ((unint64_t)v430 < v431)
          goto LABEL_1345;
        if ((*(_BYTE *)(v16 + 108) & 0x20) != 0)
          goto LABEL_882;
        v70 = v435;
        if ((int)v437 >= v24)
          return 4294967253;
        v437 = (v437 + 1);
        goto LABEL_942;
      case 25:
        LODWORD(v27) = *(_DWORD *)(v16 + 108);
        if ((v27 & 2) != 0)
          goto LABEL_1345;
        if (!(_DWORD)v49 && (v27 & 0x20) != 0)
          goto LABEL_881;
        v197 = v46;
        v198 = v40;
        v210 = v392;
        if (!(_DWORD)v49)
          goto LABEL_1401;
        if ((*(_BYTE *)(v16 + 112) & 0x10) != 0)
          goto LABEL_1394;
        v211 = *(_DWORD *)(v16 + 116);
        v212 = *(_QWORD *)(v16 + 40);
        if (v211)
        {
          LODWORD(v27) = (_DWORD)v430;
          if ((unint64_t)v430 < v212)
          {
            v213 = v45;
            is_newline_8 = _pcre2_is_newline_8(v430, v211, v212, v392, v414);
            v49 = (uint64_t)v66;
            v45 = v213;
            v42 = v426;
            v26 = (uint64_t)v422;
            v24 = v423;
            v13 = v424;
            v12 = v425;
            if (is_newline_8)
            {
              v27 = *v392;
              goto LABEL_1393;
            }
          }
        }
        else
        {
          v27 = *v392;
          if ((unint64_t)v430 <= v212 - v27
            && *v430 == *(unsigned __int8 *)(v16 + 124)
            && (v27 == 1 || v430[1] == *(unsigned __int8 *)(v16 + 125)))
          {
LABEL_1393:
            if (v430 != (unsigned __int8 *)(v431 - v27))
              goto LABEL_1394;
LABEL_1401:
            LODWORD(v27) = v437;
            if ((int)v437 >= v24)
              return 4294967253;
            *(_QWORD *)v435 = (v50 + 1);
            v435 += 3;
            v437 = (v437 + 1);
            goto LABEL_1403;
          }
        }
        goto LABEL_1394;
      case 26:
        LODWORD(v27) = *(_DWORD *)(v16 + 108);
        if ((v27 & 2) == 0)
        {
          if ((_DWORD)v49 || (v27 & 0x20) == 0)
          {
            v197 = v46;
            v198 = v40;
            v210 = v392;
            if (!(_DWORD)v49)
              goto LABEL_1401;
            if ((*(_BYTE *)(v16 + 112) & 0x10) != 0)
              goto LABEL_1394;
            v215 = *(_DWORD *)(v16 + 116);
            v216 = *(_QWORD *)(v16 + 40);
            if (v215)
            {
              LODWORD(v27) = (_DWORD)v430;
              if ((unint64_t)v430 < v216)
              {
                v217 = v45;
                v218 = _pcre2_is_newline_8(v430, v215, v216, v392, v414);
                v49 = (uint64_t)v66;
                v45 = v217;
                v42 = v426;
                v26 = (uint64_t)v422;
                v24 = v423;
                v13 = v424;
                v12 = v425;
                if (v218)
                  goto LABEL_1401;
              }
            }
            else
            {
              v27 = *v392;
              if ((unint64_t)v430 <= v216 - v27
                && *v430 == *(unsigned __int8 *)(v16 + 124)
                && ((_DWORD)v27 == 1 || v430[1] == *(unsigned __int8 *)(v16 + 125)))
              {
                goto LABEL_1401;
              }
            }
LABEL_1394:
            if ((unint64_t)(v430 + 1) >= *(_QWORD *)(v16 + 40))
            {
              LODWORD(v27) = *(_DWORD *)(v16 + 108);
              v40 = v198;
              v46 = v197;
              if ((v27 & 0x30) == 0 || *(_DWORD *)(v16 + 116) || *v210 != 2 || v42 != *(unsigned __int8 *)(v16 + 124))
                goto LABEL_1345;
              v66 = (unsigned __int16 *)v49;
              if ((v27 & 0x20) != 0)
              {
                if ((int)v197 < v423)
                {
                  v46 = (v197 + 1);
                  *v434 = ~v50;
                  *(_QWORD *)(v434 + 1) = 0x100000000;
                  v434 += 3;
                  v45 = 1;
                  v13 = v424;
                  v12 = v425;
                  v24 = v423;
                  v26 = (uint64_t)v422;
                  v42 = v426;
                  v40 = v198;
                  goto LABEL_459;
                }
                return 4294967253;
              }
              v400 = 1;
              v40 = 1;
              v13 = v424;
              v12 = v425;
              v24 = v423;
              v26 = (uint64_t)v422;
              v42 = v426;
LABEL_1404:
              v46 = v197;
              goto LABEL_1345;
            }
            goto LABEL_1403;
          }
LABEL_881:
          v49 = 0;
LABEL_882:
          v40 = 1;
          goto LABEL_1345;
        }
        v239 = v46;
        v241 = v40;
        v252 = *(_DWORD *)(v16 + 116);
        v253 = *(_QWORD *)(v16 + 40);
        if (v252)
        {
          if ((unint64_t)v430 < v253)
          {
            v254 = v45;
            v255 = _pcre2_is_newline_8(v430, v252, v253, v392, v414);
            v49 = (uint64_t)v66;
            v45 = v254;
            v42 = v426;
            v26 = (uint64_t)v422;
            v24 = v423;
            v13 = v424;
            v12 = v425;
            v40 = v241;
            v46 = v239;
            if (!v255)
              goto LABEL_1345;
            goto LABEL_879;
          }
        }
        else
        {
          v27 = *v392;
          if ((unint64_t)v430 <= v253 - v27)
          {
            v46 = v239;
            if (*v430 != *(unsigned __int8 *)(v16 + 124)
              || (_DWORD)v27 != 1 && v430[1] != *(unsigned __int8 *)(v16 + 125))
            {
              goto LABEL_1345;
            }
            goto LABEL_879;
          }
        }
        goto LABEL_1118;
      case 27:
        if (v430 != v12)
          goto LABEL_1345;
        if ((*(_BYTE *)(v16 + 108) & 1) != 0)
          goto LABEL_667;
        v196 = v435;
        if ((int)v437 >= v24)
          return 4294967253;
        v437 = (v437 + 1);
        LODWORD(v27) = v50 + 1;
LABEL_666:
        *v196 = v27;
        v196[1] = 0;
        v435 = v196 + 3;
LABEL_667:
        v430 = v12;
        goto LABEL_1345;
      case 28:
        if (v430 == v12 && (*(_BYTE *)(v16 + 108) & 1) == 0)
          goto LABEL_753;
        LODWORD(v27) = v431;
        if (v430 == (unsigned __int8 *)v431 && (*(_BYTE *)(v16 + 114) & 0x20) == 0)
        {
          v430 = (unsigned __int8 *)v431;
          goto LABEL_1345;
        }
        v239 = v46;
        v241 = v40;
        v242 = *(_DWORD *)(v16 + 116);
        v243 = *(_QWORD *)(v16 + 32);
        if (v242)
        {
          if ((unint64_t)v430 > v243)
          {
            v244 = v45;
            v245 = _pcre2_was_newline_8(v430, v242, v243, v392, v414);
            v49 = (uint64_t)v66;
            v45 = v244;
            v42 = v426;
            v26 = (uint64_t)v422;
            v24 = v423;
            v13 = v424;
            v12 = v425;
            v40 = v241;
            v46 = v239;
            if (!v245)
              goto LABEL_1345;
LABEL_753:
            LODWORD(v27) = v437;
            if ((int)v437 < v24)
            {
              *(_QWORD *)v435 = (v50 + 1);
              v435 += 3;
              v437 = (v437 + 1);
              goto LABEL_1345;
            }
            return 4294967253;
          }
        }
        else
        {
          v27 = *v392;
          if ((unint64_t)v430 >= v243 + v27)
          {
            v46 = v239;
            if (v430[-v27] != *(unsigned __int8 *)(v16 + 124)
              || (_DWORD)v27 != 1 && v430[-v27 + 1] != *(unsigned __int8 *)(v16 + 125))
            {
              goto LABEL_1345;
            }
            goto LABEL_753;
          }
        }
LABEL_1118:
        v40 = v241;
        goto LABEL_1178;
      case 29:
        if ((int)v49 < 1 || v42 != v56)
          goto LABEL_1345;
        goto LABEL_933;
      case 30:
        if (!(_DWORD)v49)
          goto LABEL_1345;
        if (v433)
        {
          if (v42 != v56)
          {
            v219 = v42 > 0x7F
                 ? _pcre2_ucd_records_8[2 * _pcre2_ucd_stage2_8[v417 + (_pcre2_ucd_stage1_8[v418] << 7)] + 1] + v42
                 : *(unsigned __int8 *)(v399 + v416);
            if (v56 != v219)
              goto LABEL_1345;
          }
LABEL_933:
          if ((int)v46 >= v24)
            return 4294967253;
          v46 = (v46 + 1);
          LODWORD(v27) = v50 + v27 + 1;
        }
        else
        {
          if (*(unsigned __int8 *)(v420 + v416) != *(unsigned __int8 *)(v420 + v56))
            goto LABEL_1345;
          if ((int)v46 >= v24)
            return 4294967253;
          v46 = (v46 + 1);
          LODWORD(v27) = v50 + 2;
        }
        goto LABEL_1343;
      case 31:
        if ((int)v49 < 1 || v42 == v56)
          goto LABEL_1345;
        goto LABEL_933;
      case 32:
        if ((int)v49 >= 1)
        {
          v220 = v433 && v56 >= 0x80
               ? _pcre2_ucd_records_8[2 * _pcre2_ucd_stage2_8[v56 + (_pcre2_ucd_stage1_8[(int)v56 / 128] << 7)] + 1]
               + v56
               : *(unsigned __int8 *)(v399 + v56);
          if (v42 != v56 && v42 != v220)
            goto LABEL_933;
        }
        goto LABEL_1345;
      case 33:
      case 34:
      case 42:
      case 59:
      case 60:
      case 68:
        goto LABEL_106;
      case 35:
      case 36:
      case 43:
      case 61:
      case 62:
      case 69:
        goto LABEL_114;
      case 37:
      case 38:
      case 44:
      case 63:
      case 64:
      case 70:
        goto LABEL_118;
      case 39:
      case 40:
      case 45:
      case 65:
      case 66:
      case 71:
        goto LABEL_123;
      case 41:
      case 67:
        if ((int)v49 <= 0)
          goto LABEL_1345;
        v127 = *(_DWORD *)(v26 + 12 * v44 + 4);
        v128 = -1;
        goto LABEL_756;
      case 46:
      case 47:
      case 55:
      case 72:
      case 73:
      case 81:
        LOBYTE(v63) = 0;
        LODWORD(v54) = v54 - 13;
LABEL_106:
        if ((int)v437 >= v24)
          return 4294967253;
        v67 = (v437 + 1);
        *v435 = v50 + v27 + 1;
        v435[1] = 0;
        v68 = v435 + 3;
        if ((int)v49 >= 1)
        {
          if ((v63 & 1) != 0)
            v69 = -1;
          else
            v69 = v433 && v56 >= 0x80
                ? _pcre2_ucd_records_8[2
                                     * _pcre2_ucd_stage2_8[(int)(v56
                                                               - (v10 & 0xFFFFFF80)
                                                               + (_pcre2_ucd_stage1_8[(int)v56 / 128] << 7))]
                                     + 1]
                + v56
                : *(unsigned __int8 *)(v399 + v56);
          v161 = v42 == v56 || v42 == v69;
          v162 = v161;
          if (v54 > 0x3A != v162)
          {
            if ((_DWORD)v54 == 68 || (_DWORD)v54 == 42)
            {
              v68 = v435;
              v67 = v437;
            }
            if ((int)v46 >= v24)
              return 4294967253;
            v46 = (v46 + 1);
            v163 = v434;
            *v434 = v50;
LABEL_453:
            v163[1] = 0;
            v434 = v163 + 3;
            goto LABEL_454;
          }
        }
        v435 += 3;
        v27 = (v437 + 1);
        goto LABEL_425;
      case 48:
      case 49:
      case 56:
      case 74:
      case 75:
      case 82:
        LOBYTE(v63) = 0;
        LODWORD(v54) = v54 - 13;
LABEL_114:
        v71 = *(_DWORD *)(v26 + 12 * v44 + 4);
        if (v71 < 1)
        {
          v11 = (uint64_t)v435;
          v10 = v437;
        }
        else
        {
          if ((int)v437 >= v24)
            return 4294967253;
          v10 = (v437 + 1);
          *(_QWORD *)v435 = (v50 + v27 + 1);
          v11 = (uint64_t)(v435 + 3);
        }
        v435 = (_DWORD *)v11;
        v437 = v10;
        if ((int)v49 < 1)
          goto LABEL_1345;
        if ((v63 & 1) != 0)
          v82 = -1;
        else
          v82 = v433 && v56 >= 0x80
              ? _pcre2_ucd_records_8[2
                                   * _pcre2_ucd_stage2_8[v56
                                                       - (v63 & 0xFFFFFF80)
                                                       + (_pcre2_ucd_stage1_8[(int)v56 / 128] << 7)]
                                   + 1]
              + v56
              : *(unsigned __int8 *)(v399 + v56);
        v159 = v42 == v56 || v42 == v82;
        LODWORD(v27) = v159;
        if (v54 > 0x3A == (_DWORD)v27)
          goto LABEL_1345;
        if (v71 < 1)
        {
          v160 = (_DWORD *)v11;
          v27 = v10;
        }
        else
        {
          v160 = (_DWORD *)v11;
          v27 = v10;
          if ((_DWORD)v54 == 69 || (_DWORD)v54 == 43)
          {
            v27 = (v10 - 1);
            v160 = (_DWORD *)(v11 - 12);
          }
        }
        if ((int)v46 >= v24)
          return 4294967253;
        v435 = v160;
        v437 = v27;
        v46 = (v46 + 1);
        LODWORD(v27) = v71 + 1;
        goto LABEL_488;
      case 50:
      case 51:
      case 57:
      case 76:
      case 77:
      case 83:
        LOBYTE(v63) = 0;
        LODWORD(v54) = v54 - 13;
LABEL_118:
        if ((int)v437 >= v24)
          return 4294967253;
        v67 = (v437 + 1);
        LODWORD(v10) = v50 + v27 + 1;
        *(_QWORD *)v435 = v10;
        v68 = v435 + 3;
        if ((int)v49 < 1)
          goto LABEL_454;
        if ((v63 & 1) != 0)
          v72 = -1;
        else
          v72 = v433 && v56 >= 0x80
              ? _pcre2_ucd_records_8[2
                                   * _pcre2_ucd_stage2_8[(int)(v56
                                                             - (v11 & 0xFFFFFF80)
                                                             + (_pcre2_ucd_stage1_8[(int)v56 / 128] << 7))]
                                   + 1]
              + v56
              : *(unsigned __int8 *)(v399 + v56);
        v164 = v42 == v56 || v42 == v72;
        v165 = v164;
        if (v54 > 0x3A == v165)
          goto LABEL_454;
        if ((_DWORD)v54 == 70 || (_DWORD)v54 == 44)
        {
          v68 = v435;
          v67 = v437;
        }
        goto LABEL_451;
      case 52:
      case 53:
      case 58:
      case 78:
      case 79:
      case 84:
        LOBYTE(v63) = 0;
        LODWORD(v54) = v54 - 13;
LABEL_123:
        if ((int)v437 >= v24)
          return 4294967253;
        v67 = (v437 + 1);
        LODWORD(v10) = v50 + v27 + 3;
        *(_QWORD *)v435 = v10;
        v68 = v435 + 3;
        if ((int)v49 < 1)
          goto LABEL_454;
        if ((v63 & 1) != 0)
          v73 = -1;
        else
          v73 = v433 && v56 >= 0x80
              ? _pcre2_ucd_records_8[2
                                   * _pcre2_ucd_stage2_8[v56
                                                       - (v63 & 0xFFFFFF80)
                                                       + (_pcre2_ucd_stage1_8[(int)v56 / 128] << 7)]
                                   + 1]
              + v56
              : *(unsigned __int8 *)(v399 + v56);
        v166 = v42 == v56 || v42 == v73;
        v167 = v166;
        if (v54 > 0x3A == v167)
          goto LABEL_454;
        if ((_DWORD)v54 == 71 || (_DWORD)v54 == 45)
        {
          v68 = v435;
          v67 = v437;
        }
        v168 = *(_DWORD *)(v26 + 12 * v44 + 4) + 1;
        if (v168 < (int)(bswap32(*(unsigned __int16 *)(v53 + 1)) >> 16))
        {
          if ((int)v46 >= v24)
            return 4294967253;
          v46 = (v46 + 1);
          *v434 = v50;
          v434[1] = v168;
          v434 += 3;
LABEL_454:
          v435 = v68;
LABEL_455:
          v27 = v67;
LABEL_1039:
          v437 = v27;
          goto LABEL_1345;
        }
LABEL_451:
        if ((int)v46 >= v24)
          return 4294967253;
        v46 = (v46 + 1);
        v163 = v434;
        *v434 = v10;
        goto LABEL_453;
      case 54:
      case 80:
        if ((int)v49 < 1)
          goto LABEL_1345;
        LODWORD(v54) = v54 - 13;
        v127 = *(_DWORD *)(v26 + 12 * v44 + 4);
        if (v433 && v56 >= 0x80)
        {
          LODWORD(v10) = v56 + 127;
          if ((v56 & 0x80000000) == 0)
            LODWORD(v10) = v56;
          v128 = _pcre2_ucd_records_8[2
                                    * _pcre2_ucd_stage2_8[(int)(v56
                                                              - (v10 & 0xFFFFFF80)
                                                              + (_pcre2_ucd_stage1_8[(int)v10 >> 7] << 7))]
                                    + 1]
               + v56;
        }
        else
        {
          v128 = *(unsigned __int8 *)(v399 + v56);
        }
LABEL_756:
        v247 = v42 == v56 || v42 == v128;
        if (v54 > 0x3A == v247)
          goto LABEL_1345;
        v248 = v127 + 1;
        if (v248 >= (int)(bswap32(*(unsigned __int16 *)(v53 + 1)) >> 16))
        {
          if ((int)v46 >= v24)
            return 4294967253;
          v46 = (v46 + 1);
          LODWORD(v27) = v50 + v27 + 3;
          goto LABEL_1343;
        }
        if ((int)v46 >= v24)
          return 4294967253;
        v46 = (v46 + 1);
        v27 = (unint64_t)v434;
        *v434 = v50;
        v434[1] = v248;
        goto LABEL_1190;
      case 85:
      case 86:
      case 94:
        LODWORD(v27) = v437;
        if ((int)v437 >= v24)
          return 4294967253;
        v99 = (v437 + 1);
        *(_QWORD *)v435 = (v50 + 2);
        if ((int)v49 >= 1)
        {
          v395 = v49;
          if (v56 == 12)
          {
            if ((unint64_t)(v430 + 1) >= *(_QWORD *)(v16 + 40)
              && (*(_BYTE *)(v16 + 108) & 0x20) != 0
              && !*(_DWORD *)(v16 + 116)
              && *v392 == 2
              && v42 == *(unsigned __int8 *)(v16 + 124))
            {
              v400 = 1;
              v435 += 3;
LABEL_203:
              v27 = v99;
LABEL_213:
              v437 = v27;
              goto LABEL_882;
            }
            v179 = v46;
            v238 = v40;
            if (v42 > 0xFF)
            {
LABEL_727:
              if (v56 > 0xB || ((1 << v56) & 0xA80) == 0)
                goto LABEL_1149;
              goto LABEL_1148;
            }
            v264 = *(_DWORD *)(v16 + 116);
            v265 = *(_QWORD *)(v16 + 40);
            if (v264)
            {
              LODWORD(v27) = (_DWORD)v430;
              if ((unint64_t)v430 >= v265)
                goto LABEL_1147;
              v409 = v16;
              v266 = v45;
              v267 = _pcre2_is_newline_8(v430, v264, v265, v392, v414);
              v45 = v266;
              v16 = v409;
              v42 = v426;
              v26 = (uint64_t)v422;
              v24 = v423;
              v13 = v424;
              v12 = v425;
              if (!v267)
                goto LABEL_1147;
LABEL_1148:
              v435 += 3;
LABEL_1162:
              v437 = v99;
              v40 = v238;
              v49 = v395;
              goto LABEL_1163;
            }
            v332 = *v392;
            if ((unint64_t)v430 <= v265 - v332
              && *v430 == *(unsigned __int8 *)(v16 + 124)
              && ((_DWORD)v332 == 1 || v430[1] == *(unsigned __int8 *)(v16 + 125)))
            {
              goto LABEL_1148;
            }
          }
          else
          {
            v179 = v46;
            v238 = v40;
            if (v42 >= 0x100)
              goto LABEL_727;
          }
LABEL_1147:
          if ((toptable1[v56] & *(_BYTE *)(v393 + v416)) != toptable2[v56])
          {
LABEL_1149:
            if ((int)v179 >= v24)
              return 4294967253;
            v40 = v238;
            v46 = (v179 + 1);
            if ((_DWORD)v54 == 94)
              v333 = v437;
            else
              v333 = v99;
            v437 = v333;
            v334 = v435;
            if ((_DWORD)v54 != 94)
              v334 = v435 + 3;
            v435 = v334;
            v27 = (unint64_t)v434;
            *v434 = v50;
LABEL_1171:
            *(_DWORD *)(v27 + 4) = 0;
            v434 = (int *)(v27 + 12);
            v49 = v395;
            goto LABEL_1345;
          }
          goto LABEL_1148;
        }
        v435 += 3;
        goto LABEL_586;
      case 87:
      case 88:
      case 95:
        v100 = *(_DWORD *)(v26 + 12 * v44 + 4);
        if (v100 < 1)
        {
          v101 = v437;
        }
        else
        {
          if ((int)v437 >= v24)
            return 4294967253;
          v101 = (v437 + 1);
          *(_QWORD *)v435 = (v50 + 2);
          v435 += 3;
        }
        LODWORD(v27) = (_DWORD)v430;
        v437 = v101;
        if ((int)v49 < 1)
          goto LABEL_1345;
        if (v56 != 12)
        {
          v179 = v46;
          v180 = v40;
          if (v42 < 0x100)
            goto LABEL_1133;
          goto LABEL_717;
        }
        if ((unint64_t)(v430 + 1) < *(_QWORD *)(v16 + 40)
          || (*(_BYTE *)(v16 + 108) & 0x20) == 0
          || *(_DWORD *)(v16 + 116)
          || *v392 != 2
          || v42 != *(unsigned __int8 *)(v16 + 124))
        {
          v179 = v46;
          v180 = v40;
          if (v42 <= 0xFF)
          {
            v181 = *(_DWORD *)(v16 + 116);
            v182 = *(_QWORD *)(v16 + 40);
            if (v181)
            {
              LODWORD(v27) = (_DWORD)v430;
              if ((unint64_t)v430 < v182)
              {
                v408 = v16;
                v183 = v45;
                v184 = _pcre2_is_newline_8(v430, v181, v182, v392, v414);
                v49 = (uint64_t)v66;
                v45 = v183;
                v16 = v408;
                v42 = v426;
                v26 = (uint64_t)v422;
                v24 = v423;
                v13 = v424;
                v12 = v425;
                if (v184)
                  goto LABEL_1134;
              }
            }
            else
            {
              v329 = *v392;
              if ((unint64_t)v430 <= v182 - v329
                && *v430 == *(unsigned __int8 *)(v16 + 124)
                && ((_DWORD)v329 == 1 || v430[1] == *(unsigned __int8 *)(v16 + 125)))
              {
                goto LABEL_1134;
              }
            }
LABEL_1133:
            if ((toptable1[v56] & *(_BYTE *)(v393 + v416)) == toptable2[v56])
            {
LABEL_1134:
              v40 = v180;
LABEL_1163:
              v46 = v179;
              goto LABEL_1345;
            }
            goto LABEL_1135;
          }
LABEL_717:
          if (v56 <= 0xB && ((1 << v56) & 0xA80) != 0)
            goto LABEL_1134;
LABEL_1135:
          if ((int)v179 >= v24)
            return 4294967253;
          v40 = v180;
          v46 = (v179 + 1);
          v331 = (_DWORD)v54 == 95 && v100 > 0;
          v437 = (v437 - v331);
          v435 += 3 * (v331 << 31 >> 31);
          LODWORD(v27) = v100 + 1;
          goto LABEL_488;
        }
        goto LABEL_695;
      case 89:
      case 90:
      case 96:
        if ((int)v437 >= v24)
          return 4294967253;
        v99 = (v437 + 1);
        LODWORD(v27) = (_DWORD)v435;
        *(_QWORD *)v435 = (v50 + 2);
        if ((int)v49 < 1)
        {
          v435 += 3;
LABEL_586:
          v27 = v99;
          goto LABEL_1039;
        }
        v395 = v49;
        if (v56 == 12)
        {
          if ((unint64_t)(v430 + 1) >= *(_QWORD *)(v16 + 40)
            && (*(_BYTE *)(v16 + 108) & 0x20) != 0
            && !*(_DWORD *)(v16 + 116)
            && *v392 == 2
            && v42 == *(unsigned __int8 *)(v16 + 124))
          {
            v400 = 1;
            v435 += 3;
            goto LABEL_203;
          }
          v179 = v46;
          v238 = v40;
          if (v42 > 0xFF)
          {
LABEL_731:
            if (v56 > 0xB || ((1 << v56) & 0xA80) == 0)
              goto LABEL_1164;
            goto LABEL_1161;
          }
          v268 = *(_DWORD *)(v16 + 116);
          v269 = *(_QWORD *)(v16 + 40);
          if (v268)
          {
            LODWORD(v27) = (_DWORD)v430;
            if ((unint64_t)v430 < v269)
            {
              v410 = v16;
              v270 = v45;
              v271 = _pcre2_is_newline_8(v430, v268, v269, v392, v414);
              v45 = v270;
              v16 = v410;
              v42 = v426;
              v26 = (uint64_t)v422;
              v24 = v423;
              v13 = v424;
              v12 = v425;
              if (v271)
                goto LABEL_1161;
            }
          }
          else
          {
            v335 = *v392;
            if ((unint64_t)v430 <= v269 - v335
              && *v430 == *(unsigned __int8 *)(v16 + 124)
              && ((_DWORD)v335 == 1 || v430[1] == *(unsigned __int8 *)(v16 + 125)))
            {
              goto LABEL_1161;
            }
          }
        }
        else
        {
          v179 = v46;
          v238 = v40;
          if (v42 >= 0x100)
            goto LABEL_731;
        }
        if ((toptable1[v56] & *(_BYTE *)(v393 + v416)) != toptable2[v56])
        {
LABEL_1164:
          if ((int)v179 >= v24)
            return 4294967253;
          v40 = v238;
          v46 = (v179 + 1);
          if ((_DWORD)v54 == 96)
            v336 = v437;
          else
            v336 = v99;
          v437 = v336;
          v337 = v435;
          if ((_DWORD)v54 != 96)
            v337 = v435 + 3;
          v435 = v337;
          v27 = (unint64_t)v434;
          *v434 = v50 + 2;
          goto LABEL_1171;
        }
LABEL_1161:
        v435 += 3;
        goto LABEL_1162;
      case 91:
      case 92:
      case 97:
        if ((int)v437 >= v24)
          return 4294967253;
        v11 = (v437 + 1);
        LODWORD(v27) = (_DWORD)v435;
        *(_QWORD *)v435 = (v50 + 4);
        v102 = v435 + 3;
        if ((int)v49 < 1)
        {
          v435 += 3;
          v437 = (v437 + 1);
          goto LABEL_1345;
        }
        LODWORD(v10) = *(_DWORD *)(v26 + 12 * v44 + 4);
        v396 = v49;
        if (v56 == 12)
        {
          if ((unint64_t)(v430 + 1) >= *(_QWORD *)(v16 + 40)
            && (*(_BYTE *)(v16 + 108) & 0x20) != 0
            && !*(_DWORD *)(v16 + 116)
            && *v392 == 2
            && v42 == *(unsigned __int8 *)(v16 + 124))
          {
            v400 = 1;
            v435 += 3;
            v27 = (v437 + 1);
            goto LABEL_213;
          }
          v239 = v46;
          v240 = v40;
          if (v42 > 0xFF)
          {
LABEL_735:
            if (v56 > 0xB || ((1 << v56) & 0xA80) == 0)
              goto LABEL_1179;
            goto LABEL_1177;
          }
          v272 = *(_DWORD *)(v16 + 116);
          v273 = *(_QWORD *)(v16 + 40);
          if (v272)
          {
            LODWORD(v27) = (_DWORD)v430;
            if ((unint64_t)v430 < v273)
            {
              v391 = v45;
              v378 = *(_DWORD *)(v26 + 12 * v44 + 4);
              v274 = _pcre2_is_newline_8(v430, v272, v273, v392, v414);
              LODWORD(v10) = v378;
              v102 = v435 + 3;
              v11 = (v437 + 1);
              v45 = v391;
              v42 = v426;
              v26 = (uint64_t)v422;
              v24 = v423;
              v13 = v424;
              v12 = v425;
              if (v274)
                goto LABEL_1177;
            }
          }
          else
          {
            v338 = *v392;
            if ((unint64_t)v430 <= v273 - v338)
            {
              v102 = v435 + 3;
              if (*v430 == *(unsigned __int8 *)(v16 + 124)
                && ((_DWORD)v338 == 1 || v430[1] == *(unsigned __int8 *)(v16 + 125)))
              {
                goto LABEL_1177;
              }
            }
          }
        }
        else
        {
          v239 = v46;
          v240 = v40;
          if (v42 >= 0x100)
            goto LABEL_735;
        }
        if ((toptable1[v56] & *(_BYTE *)(v393 + v416)) != toptable2[v56])
        {
LABEL_1179:
          v339 = v435;
          if ((_DWORD)v54 != 97)
            v339 = v102;
          v435 = v339;
          if ((_DWORD)v54 == 97)
            v340 = v437;
          else
            v340 = v11;
          LODWORD(v27) = v10 + 1;
          v40 = v240;
          v341 = v239;
          v437 = v340;
          if ((int)v10 + 1 >= (int)(bswap32(*(unsigned __int16 *)(v53 + 1)) >> 16))
          {
            v49 = v396;
            if ((int)v239 >= v24)
              return 4294967253;
            v46 = (v239 + 1);
            v27 = (unint64_t)v434;
            *v434 = v50 + 4;
LABEL_1189:
            *(_DWORD *)(v27 + 4) = 0;
LABEL_1190:
            v434 = (int *)(v27 + 12);
            goto LABEL_1345;
          }
          v49 = v396;
          if ((int)v239 >= v24)
            return 4294967253;
LABEL_1363:
          v46 = (v341 + 1);
LABEL_488:
          v171 = v434;
          *v434 = v50;
          v434[1] = v27;
          goto LABEL_1344;
        }
LABEL_1177:
        v435 = v102;
        v437 = v11;
        v40 = v240;
        v49 = v396;
LABEL_1178:
        v46 = v239;
        goto LABEL_1345;
      case 93:
        if ((int)v49 < 1)
          goto LABEL_1345;
        v221 = *(_DWORD *)(v26 + 12 * v44 + 4);
        if (v56 == 12)
        {
          v222 = v40;
          if ((unint64_t)(v430 + 1) >= *(_QWORD *)(v16 + 40)
            && (*(_BYTE *)(v16 + 108) & 0x20) != 0
            && !*(_DWORD *)(v16 + 116)
            && *v392 == 2
            && v42 == *(unsigned __int8 *)(v16 + 124))
          {
LABEL_695:
            v400 = 1;
            goto LABEL_882;
          }
          v179 = v46;
          if (v42 > 0xFF)
          {
LABEL_955:
            if (v56 > 0xB || ((1 << v56) & 0xA80) == 0)
              goto LABEL_1361;
            goto LABEL_1360;
          }
          v355 = *(_DWORD *)(v16 + 116);
          v356 = *(_QWORD *)(v16 + 40);
          if (v355)
          {
            LODWORD(v27) = (_DWORD)v430;
            if ((unint64_t)v430 < v356)
            {
              v411 = v16;
              v357 = v45;
              v358 = _pcre2_is_newline_8(v430, v355, v356, v392, v414);
              v49 = (uint64_t)v66;
              v45 = v357;
              v16 = v411;
              v42 = v426;
              v26 = (uint64_t)v422;
              v24 = v423;
              v13 = v424;
              v12 = v425;
              if (v358)
                goto LABEL_1360;
            }
          }
          else
          {
            v371 = *v392;
            if ((unint64_t)v430 <= v356 - v371
              && *v430 == *(unsigned __int8 *)(v16 + 124)
              && ((_DWORD)v371 == 1 || v430[1] == *(unsigned __int8 *)(v16 + 125)))
            {
              goto LABEL_1360;
            }
          }
        }
        else
        {
          v179 = v46;
          v222 = v40;
          if (v42 >= 0x100)
            goto LABEL_955;
        }
        if ((toptable1[v56] & *(_BYTE *)(v393 + v416)) != toptable2[v56])
        {
LABEL_1361:
          LODWORD(v27) = v221 + 1;
          v40 = v222;
          v341 = v179;
          if (v221 + 1 >= (int)(bswap32(*(unsigned __int16 *)(v53 + 1)) >> 16))
          {
            if ((int)v179 >= v24)
              return 4294967253;
            v46 = (v179 + 1);
            LODWORD(v27) = v50 + 4;
            goto LABEL_1343;
          }
          if ((int)v179 >= v24)
            return 4294967253;
          goto LABEL_1363;
        }
LABEL_1360:
        v40 = v222;
        goto LABEL_1163;
      case 110:
      case 111:
      case 112:
        if ((_DWORD)v54 == 112)
        {
          v103 = &v53[__rev16(*(unsigned __int16 *)(v53 + 1))];
          if ((int)v49 >= 1)
          {
            v104 = v53 + 3;
            v105 = v40;
            v106 = v46;
            v107 = v45;
            v108 = _pcre2_xclass_8(v42, v104);
            v49 = (uint64_t)v66;
            v46 = v106;
            v45 = v107;
            v40 = v105;
            v42 = v426;
            v26 = (uint64_t)v422;
            v24 = v423;
            v13 = v424;
            v12 = v425;
            goto LABEL_812;
          }
          goto LABEL_582;
        }
        v103 = v53 + 33;
        if ((int)v49 < 1)
        {
LABEL_582:
          v108 = 0;
          goto LABEL_812;
        }
        if (v42 < 0x100)
          v108 = (v53[v402 + 1] >> v401) & 1;
        else
          v108 = v54 == 111;
LABEL_812:
        LODWORD(v27) = (_DWORD)v103 - v13;
        switch(*v103)
        {
          case 'b':
          case 'c':
          case 'j':
            if ((int)v437 >= v24)
              return 4294967253;
            v67 = (v437 + 1);
            v10 = (uint64_t)v435;
            *v435 = v27 + 1;
            v435[1] = 0;
            v68 = v435 + 3;
            if (!v108)
              goto LABEL_454;
            if ((int)v46 >= v24)
              return 4294967253;
            v46 = (v46 + 1);
            if (*v103 == 106)
              v256 = v437;
            else
              v256 = v67;
            if (*v103 != 106)
              v10 = (uint64_t)(v435 + 3);
            v435 = (_DWORD *)v10;
            v437 = v256;
            v27 = (unint64_t)v434;
            *v434 = v50;
            goto LABEL_1189;
          case 'd':
          case 'e':
          case 'k':
            v257 = *(_DWORD *)(v26 + 12 * v44 + 4);
            if (v257 < 1)
            {
              v258 = v435;
              if (!v108)
                goto LABEL_459;
              goto LABEL_1017;
            }
            v258 = v435;
            LODWORD(v11) = v437;
            if ((int)v437 >= v24)
              return 4294967253;
            *v435 = v27 + 1;
            v435[1] = 0;
            if (v108)
            {
              if (*v103 == 107)
              {
                v11 = v437;
              }
              else
              {
                v258 = v435 + 3;
                v11 = (v437 + 1);
              }
              v437 = v11;
LABEL_1017:
              if ((int)v46 >= v24)
                return 4294967253;
              v435 = v258;
              v46 = (v46 + 1);
              LODWORD(v27) = v257 + 1;
              goto LABEL_1201;
            }
            v435 += 3;
            v27 = (v437 + 1);
            break;
          case 'f':
          case 'g':
          case 'l':
            if ((int)v437 >= v24)
              return 4294967253;
            v67 = (v437 + 1);
            LODWORD(v27) = v27 + 1;
            v11 = (uint64_t)v435;
            *(_QWORD *)v435 = v27;
            if (v108)
            {
              if ((int)v46 >= v24)
                return 4294967253;
              v46 = (v46 + 1);
              if (*v103 == 108)
                v10 = v437;
              else
                v10 = v67;
              if (*v103 != 108)
                v11 = (uint64_t)(v435 + 3);
              v435 = (_DWORD *)v11;
              v437 = v10;
              goto LABEL_1343;
            }
            v435 += 3;
            goto LABEL_455;
          case 'h':
          case 'i':
          case 'm':
            v259 = *(_DWORD *)(v26 + 12 * v44 + 4);
            if (v259 >= (int)(bswap32(*(unsigned __int16 *)(v103 + 1)) >> 16))
            {
              if ((int)v437 >= v24)
                return 4294967253;
              v437 = (v437 + 1);
              *(_QWORD *)v435 = (v27 + 5);
              v11 = (uint64_t)(v435 + 3);
            }
            else
            {
              v11 = (uint64_t)v435;
            }
            if (!v108)
            {
              v435 = (_DWORD *)v11;
              goto LABEL_1345;
            }
            if (*v103 == 109)
            {
              v10 = v437;
              if (v259 >= (int)(bswap32(*(unsigned __int16 *)(v103 + 1)) >> 16))
              {
                v10 = (v437 - 1);
                v11 -= 12;
              }
            }
            else
            {
              v10 = v437;
            }
            v315 = __rev16(*(unsigned __int16 *)(v103 + 3));
            v316 = v259 + 1;
            v435 = (_DWORD *)v11;
            v437 = v10;
            if (v316 >= v315 && v315)
            {
              if ((int)v46 >= v24)
                return 4294967253;
              v316 = 0;
              v50 = v27 + 5;
            }
            else if ((int)v46 >= v24)
            {
              return 4294967253;
            }
            v27 = (unint64_t)v434;
            *v434 = v50;
            v434[1] = v316;
            v46 = (v46 + 1);
            goto LABEL_1190;
          default:
            if (!v108)
              goto LABEL_1345;
            if ((int)v46 >= v24)
              return 4294967253;
            v46 = (v46 + 1);
            goto LABEL_1343;
        }
        goto LABEL_425;
      case 117:
        v223 = a10;
        v438 = a10;
        v224 = v13 + __rev16(*(unsigned __int16 *)(v53 + 1));
        v386 = v46;
        v225 = v40;
        if (v224 == *(_QWORD *)(v16 + 24))
          v226 = 0;
        else
          v226 = __rev16(*(unsigned __int16 *)(v224 + 3));
        v275 = *(_DWORD *)(a10 + 12);
        if (v275 > 0xBB7)
          goto LABEL_887;
        v276 = v45;
        result = more_workspace(&v438, 0x7D0u, v16);
        if ((_DWORD)result)
          return result;
        v223 = v438;
        v275 = *(_DWORD *)(v438 + 12);
        v12 = v425;
        v45 = v276;
LABEL_887:
        v277 = *(unsigned int *)(v223 + 8);
        *(_DWORD *)(v223 + 12) = v275 - 3000;
        v278 = *(_QWORD *)(v16 + 160);
        if (!v278)
          goto LABEL_892;
        v279 = *(uint64_t **)(v16 + 160);
        do
        {
          if (v226 == *((_DWORD *)v279 + 4) && v430 == (unsigned __int8 *)v279[1])
            return 4294967244;
          v279 = (uint64_t *)*v279;
        }
        while (v279);
LABEL_892:
        v280 = v45;
        v281 = v223 + 4 * v277 - 4 * v275;
        LODWORD(v441) = v226;
        v439 = v278;
        v440 = v430;
        *(_QWORD *)(v16 + 160) = &v439;
        a10 = v223;
        result = internal_dfa_match(v16, v224, v430, v430 - v12, v281, 1000, v281 + 8000, 1000, v427, v223);
        *(_DWORD *)(v438 + 12) += 3000;
        *(_QWORD *)(v16 + 160) = v439;
        if (!(_DWORD)result)
          return 4294967257;
        v13 = v424;
        if ((int)result < 1)
        {
          v12 = v425;
          v24 = v423;
          v26 = (uint64_t)v422;
          v42 = v426;
          v40 = v225;
          v45 = v280;
          v46 = v386;
          v282 = v435;
          if ((_DWORD)result == -1)
            goto LABEL_1000;
          return result;
        }
        LODWORD(v27) = 2 * result;
        v12 = v425;
        v24 = v423;
        v26 = (uint64_t)v422;
        v40 = v225;
        v46 = v386;
        v282 = v435;
        do
        {
          v283 = *(_QWORD *)(v281 + 8 * (((_DWORD)v27 - 2) | 1u));
          v284 = *(_QWORD *)(v281 + 8 * (v27 - 2));
          v11 = v283 - v284;
          if (v433 && v283 > v284)
          {
            v285 = (unint64_t)&v425[v283];
            v286 = &v425[v284];
            v287 = v437;
            do
            {
              v288 = *v286++;
              v11 -= (v288 & 0xC0) == 128;
            }
            while ((unint64_t)v286 < v285);
          }
          else
          {
            v287 = v437;
          }
          if (v11)
          {
            v42 = v426;
            if ((int)v46 >= v423)
              return 4294967253;
            v45 = v280;
            v46 = (v46 + 1);
            *v434 = -3 - v50;
            v434[1] = 0;
            v434[2] = v11 - 1;
            v434 += 3;
          }
          else
          {
            v42 = v426;
            if (v287 >= v423)
              return 4294967253;
            v45 = v280;
            v437 = (v287 + 1);
            *v282 = v50 + 3;
            v282[1] = 0;
            v282 += 3;
          }
          v187 = (int)v27 <= 3;
          LODWORD(v27) = v27 - 2;
        }
        while (!v187);
LABEL_1000:
        v435 = v282;
LABEL_459:
        v49 = (uint64_t)v66;
LABEL_1345:
        ++v44;
        v36 = v437;
        if (v44 < (int)v437)
          continue;
        if ((int)v46 <= 0)
        {
          v19 = v412;
          v17 = a9;
          v375 = v400;
          v376 = v413;
LABEL_1427:
          result = v383;
          if (!v17)
          {
            if ((_DWORD)v40)
            {
              if (v376 != v19[1])
              {
                v377 = *(_DWORD *)(v16 + 108);
                if (((v377 & 0x20) != 0 || (v377 & 0x10) != 0 && (v383 & 0x80000000) != 0)
                  && (v375 || (unint64_t)v430 >= v431 && (unint64_t)v430 > *(_QWORD *)(v16 + 48)))
                {
                  return 4294967294;
                }
              }
            }
          }
          if ((v383 & 0x80000000) == 0)
          {
            if ((((unint64_t)v430 < v431) & ((*(_DWORD *)(v16 + 112) | *(_DWORD *)(v16 + 108)) >> 29)) != 0)
              return 0xFFFFFFFFLL;
            else
              return v383;
          }
          return result;
        }
        v25 = (int *)v26;
        v26 = v419;
        v36 = v46;
        v40 = v45;
        v41 = &v430[(int)v49];
        v19 = v412;
        v17 = a9;
        goto LABEL_51;
      case 118:
      case 119:
        v129 = v46;
        v130 = v45;
        v131 = v40;
        v438 = 0;
        result = do_callout(v13 + v50, (uint64_t)a5, v387, (uint64_t)v430, (_QWORD *)v16, 0, &v438);
        if ((result & 0x80000000) != 0)
          return result;
        if ((_DWORD)result)
        {
          v13 = v424;
          v12 = v425;
          v24 = v423;
          v26 = (uint64_t)v422;
          v42 = v426;
          v40 = v131;
          v45 = v130;
          v46 = v129;
          goto LABEL_459;
        }
        v24 = v423;
        v13 = v424;
        v12 = v425;
        v26 = (uint64_t)v422;
        v42 = v426;
        if ((int)v437 >= v423)
          return 4294967253;
        v40 = v131;
        v45 = v130;
        v46 = v129;
        v49 = (uint64_t)v66;
        v437 = (v437 + 1);
        LODWORD(v27) = v50 + v438;
        goto LABEL_776;
      case 120:
        do
          v53 += __rev16(*(unsigned __int16 *)(v53 + 1));
        while (*v53 == 120);
        v70 = v435;
        if ((int)v437 >= v24)
          return 4294967253;
        v437 = (v437 + 1);
        LODWORD(v27) = (_DWORD)v53 - v13;
        goto LABEL_943;
      case 121:
      case 122:
      case 123:
      case 124:
        if (v53 != v23)
        {
          if ((int)v437 >= v24)
            return 4294967253;
          v27 = (v437 + 1);
          v10 = (uint64_t)v435;
          *(_QWORD *)v435 = (v50 + 3);
          if ((_DWORD)v54 != 121)
          {
            if ((int)v27 < v24)
            {
              v437 = (v437 + 2);
              LODWORD(v27) = v50 - (bswap32(*(unsigned __int16 *)(v53 + 1)) >> 16);
LABEL_505:
              *(_DWORD *)(v10 + 12) = v27;
              *(_DWORD *)(v10 + 16) = 0;
              v435 = (_DWORD *)(v10 + 24);
              goto LABEL_1345;
            }
            return 4294967253;
          }
          v435 += 3;
          goto LABEL_1039;
        }
        v169 = v430;
        v170 = v383;
        if ((unint64_t)v430 <= v387)
        {
          LODWORD(v27) = *(_DWORD *)(v16 + 108);
          if ((v27 & 4) != 0 || (v27 & 8) != 0 && v387 <= (unint64_t)&v12[*(_QWORD *)(v16 + 72)])
            goto LABEL_1345;
        }
        if ((v383 & 0x80000000) != 0)
        {
          if (v381)
          {
            v170 = 1;
LABEL_1023:
            *a5 = v379;
            a5[1] = v169 - v12;
            goto LABEL_1024;
          }
          v170 = 0;
        }
        else
        {
          if (v383)
          {
            LODWORD(v27) = 2 * (v383 + 1);
            if ((int)v27 <= v381)
              v170 = v383 + 1;
            else
              v170 = 0;
            if ((int)v27 >= v381)
              LODWORD(v27) = v381;
          }
          else
          {
            LODWORD(v27) = v381;
          }
          if ((int)v27 >= 3)
          {
            v309 = v40;
            v310 = v46;
            v311 = v45;
            cstdlib_memmove(a5 + 2, a5, 8 * (v27 - 2));
            v49 = (uint64_t)v66;
            v46 = v310;
            v45 = v311;
            v40 = v309;
            v42 = v426;
            v169 = v430;
            v26 = (uint64_t)v422;
            v24 = v423;
            v13 = v424;
            v12 = v425;
          }
          if (v381)
            goto LABEL_1023;
        }
LABEL_1024:
        v383 = v170;
        result = v170;
        if ((*(_BYTE *)(v16 + 108) & 0x80) == 0)
          goto LABEL_1345;
        return result;
      case 126:
      case 127:
      case 128:
      case 129:
        v83 = *(unsigned __int16 *)(v53 + 1);
        v84 = a10;
        v438 = a10;
        v85 = *(_DWORD *)(a10 + 12);
        if (v85 > 0x3EB)
          goto LABEL_149;
        v86 = v46;
        v87 = v45;
        v88 = v40;
        result = more_workspace(&v438, 4u, v16);
        if ((_DWORD)result)
          return result;
        v84 = v438;
        v85 = *(_DWORD *)(v438 + 12);
        v12 = v425;
        v40 = v88;
        v45 = v87;
        v46 = v86;
LABEL_149:
        v89 = v46;
        v90 = v40;
        v91 = &v53[__rev16(v83)];
        v92 = *(unsigned int *)(v84 + 8);
        *(_DWORD *)(v84 + 12) = v85 - 1004;
        v93 = v45;
        if (*v91 == 120)
        {
          v94 = v430;
          do
            v91 += __rev16(*(unsigned __int16 *)(v91 + 1));
          while (*v91 == 120);
        }
        else
        {
          v94 = v430;
        }
        v155 = v84 + 4 * v92 - 4 * v85;
        a10 = v84;
        result = internal_dfa_match(v16, v53, v94, v94 - v12, v155, 2, v155 + 16, 1000, v427, v84);
        *(_DWORD *)(v438 + 12) += 1004;
        if ((int)result < -1)
          return result;
        LODWORD(v27) = result == -1;
        v157 = (_DWORD)v54 == 126 || (_DWORD)v54 == 128;
        if (v157 == (_DWORD)v27)
        {
          v13 = v424;
          v12 = v425;
          v24 = v423;
          v26 = (uint64_t)v422;
          v42 = v426;
          v40 = v90;
          v45 = v93;
          v46 = v89;
          goto LABEL_459;
        }
        v24 = v423;
        v13 = v424;
        v12 = v425;
        v26 = (uint64_t)v422;
        v42 = v426;
        if ((int)v437 >= v423)
          return 4294967253;
        v40 = v90;
        v45 = v93;
        v46 = v89;
        v49 = (uint64_t)v66;
        v437 = (v437 + 1);
        v158 = (_DWORD)v91 - v424;
        goto LABEL_775;
      case 130:
        v227 = v46;
        v228 = v45;
        v229 = v40;
        v230 = a10;
        v438 = a10;
        v231 = *(_DWORD *)(a10 + 12);
        if (v231 > 0x3EB)
          goto LABEL_701;
        result = more_workspace(&v438, 4u, v16);
        if ((_DWORD)result)
          return result;
        v230 = v438;
        v231 = *(_DWORD *)(v438 + 12);
        v12 = v425;
LABEL_701:
        v232 = (uint64_t *)(v230 + 4 * *(unsigned int *)(v230 + 8) - 4 * v231);
        *(_DWORD *)(v230 + 12) = v231 - 1004;
        a10 = v230;
        result = internal_dfa_match(v16, v53, v430, v430 - v12, v232, 2, v232 + 2, 1000, v427, v230);
        *(_DWORD *)(v438 + 12) += 1004;
        if ((result & 0x80000000) == 0)
        {
          v11 = *v232;
          v10 = v232[1];
          v13 = v424;
          v26 = (uint64_t)v422;
          v46 = v227;
          do
          {
            v53 += __rev16(*(unsigned __int16 *)(v53 + 1));
            v233 = *v53;
          }
          while (v233 == 120);
          v234 = (_DWORD)v53 - v424;
          v12 = v425;
          v24 = v423;
          v40 = v229;
          if ((v233 & 0xFE) == 0x7A)
            LODWORD(v27) = v234 - (bswap32(*(unsigned __int16 *)(v53 + 1)) >> 16);
          else
            LODWORD(v27) = -1;
          v289 = v234 + 3;
          v290 = v10 - v11;
          if (v10 == v11)
          {
            LODWORD(v27) = v437;
            if ((int)v437 < v423)
            {
              *v435 = v289;
              v435[1] = 0;
              v435 += 3;
              v437 = (v437 + 1);
              v42 = v426;
              v45 = v228;
              goto LABEL_459;
            }
            return 4294967253;
          }
          if (v44 + 1 >= (int)v437 && !(_DWORD)v227)
          {
            if (a8 >= 8)
            {
              v45 = v228;
              v430 += v290;
              *v434 = v289;
              v434[1] = 0;
              v434 += 3;
              v42 = v426;
              v49 = 0;
              if ((v27 & 0x80000000) == 0)
              {
                *v422 = v27;
                v422[1] = 0;
                v44 = -1;
                v437 = 1;
                LODWORD(v27) = (_DWORD)v398;
                v435 = v398;
              }
              v46 = 1;
              goto LABEL_1345;
            }
            return 4294967253;
          }
          if (v433)
          {
            v42 = v426;
            v45 = v228;
            if (v10 > v11)
            {
              v326 = (unint64_t)&v425[v10];
              v327 = &v425[v11];
              do
              {
                v328 = *v327++;
                LODWORD(v290) = v290 - ((v328 & 0xC0) == 128);
              }
              while ((unint64_t)v327 < v326);
            }
          }
          else
          {
            v42 = v426;
            v45 = v228;
          }
          if ((int)v227 < v423)
          {
            LODWORD(v10) = v227 + 1;
            LODWORD(v11) = (_DWORD)v434;
            *v434 = -3 - v234;
            v434[1] = 0;
            v434[2] = v290 - 1;
            v49 = (uint64_t)v66;
            if ((v27 & 0x80000000) != 0)
            {
              v434 += 3;
              v46 = (v227 + 1);
              goto LABEL_1345;
            }
            if ((int)v10 < v423)
            {
              v46 = (v227 + 2);
              *(_QWORD *)(v434 + 3) = -(int)v27;
              v434[5] = v290 - 1;
              v195 = v434 + 6;
LABEL_580:
              v434 = v195;
              goto LABEL_1345;
            }
          }
          return 4294967253;
        }
        v13 = v424;
        v12 = v425;
        v24 = v423;
        v26 = (uint64_t)v422;
        v42 = v426;
        v40 = v229;
        v45 = v228;
        v46 = v227;
        v49 = (uint64_t)v66;
        if ((_DWORD)result == -1)
          goto LABEL_1345;
        return result;
      case 131:
      case 136:
        v10 = (uint64_t)v435;
        LODWORD(v132) = v437;
        if ((int)v437 <= v24)
          LODWORD(v27) = v24;
        else
          LODWORD(v27) = v437;
        while ((_DWORD)v27 != (_DWORD)v132)
        {
          v132 = (v132 + 1);
          *(_DWORD *)v10 = (_DWORD)v53 - v13 + 3;
          *(_DWORD *)(v10 + 4) = 0;
          v10 += 12;
          v53 += __rev16(*(unsigned __int16 *)(v53 + 1));
          if (*v53 != 120)
          {
LABEL_314:
            v435 = (_DWORD *)v10;
            v437 = v132;
            goto LABEL_1345;
          }
        }
        return 4294967253;
      case 132:
      case 134:
      case 137:
      case 139:
      case 149:
        v384 = v46;
        v388 = v45;
        v405 = v40;
        v74 = a10;
        v438 = a10;
        v75 = *(_DWORD *)(a10 + 12);
        if (v75 > 0x3EB)
          goto LABEL_130;
        result = more_workspace(&v438, 4u, v16);
        if ((_DWORD)result)
          return result;
        v74 = v438;
        v75 = *(_DWORD *)(v438 + 12);
        v12 = v425;
        LODWORD(v49) = (_DWORD)v66;
LABEL_130:
        v394 = v49;
        v76 = (_QWORD *)(v74 + 4 * *(unsigned int *)(v74 + 8) - 4 * v75);
        *(_DWORD *)(v74 + 12) = v75 - 1004;
        if ((_DWORD)v54 == 149)
          v77 = v53 + 1;
        else
          v77 = v53;
        v78 = v430;
        v79 = (unsigned __int8 *)(v430 - v12);
        a10 = v74;
        v80 = v16;
        result = internal_dfa_match(v16, v77, v430, v430 - v12, v76, 2, v76 + 2, 1000, v427, v74);
        v81 = 0;
        if ((result & 0x80000000) != 0)
          goto LABEL_136;
        do
        {
          v27 = v76[1] - *v76;
          if (!v27)
          {
            v13 = v424;
            v12 = v425;
            v24 = v423;
            v26 = (uint64_t)v422;
            v42 = v426;
            v40 = v405;
            v45 = v388;
            v46 = v384;
            goto LABEL_461;
          }
          v78 += v27;
          ++v81;
          result = internal_dfa_match(v80, v77, v78, v79, v76, 2, v76 + 2, 1000, v427, a10);
        }
        while ((result & 0x80000000) == 0);
LABEL_136:
        v13 = v424;
        v12 = v425;
        v24 = v423;
        v26 = (uint64_t)v422;
        v42 = v426;
        v40 = v405;
        v45 = v388;
        v46 = v384;
        if ((_DWORD)result != -1)
          return result;
LABEL_461:
        *(_DWORD *)(v438 + 12) += 1004;
        if ((_DWORD)v54 == 149 || v81)
        {
          do
            v77 += __rev16(*(unsigned __int16 *)(v77 + 1));
          while (*v77 == 120);
          LODWORD(v27) = (_DWORD)v77 - v13;
          if (v44 + 1 < (int)v437 || (_DWORD)v46)
          {
            v175 = v78 - v430;
            v16 = v80;
            if (v433)
            {
              v176 = v394;
              if (v430 >= v78)
              {
                v177 = (_DWORD)v78 - (_DWORD)v430;
              }
              else
              {
                v10 = (uint64_t)v430;
                v177 = (_DWORD)v78 - (_DWORD)v430;
                do
                {
                  v178 = *(_BYTE *)v10++;
                  v177 -= (v178 & 0xC0) == 128;
                  --v175;
                }
                while (v175);
              }
            }
            else
            {
              v177 = (_DWORD)v78 - (_DWORD)v430;
              v176 = v394;
            }
            if ((int)v46 >= v24)
              return 4294967253;
            v46 = (v46 + 1);
            *v434 = -3 - v27;
            v434[1] = 0;
            v434[2] = v177 - 1;
            v434 += 3;
            v78 = v430;
            v49 = v176;
          }
          else
          {
            if (a8 < 8)
              return 4294967253;
            v16 = v80;
            v49 = 0;
            *(_QWORD *)v434 = (v27 + 3);
            v434 += 3;
            v46 = 1;
          }
        }
        else
        {
          v78 = v430;
          v16 = v80;
          v49 = v394;
        }
        v430 = v78;
        goto LABEL_1345;
      case 133:
      case 138:
        LODWORD(v132) = v437;
        if ((int)v437 >= v24)
          return 4294967253;
        v10 = (uint64_t)v435;
        *v435 = v50 + 5;
        v435[1] = 0;
        v27 = (unint64_t)&v53[__rev16(*(unsigned __int16 *)(v53 + 1))];
        while (2)
        {
          v132 = (v132 + 1);
          v10 += 12;
          if (*(_BYTE *)v27 != 120)
            goto LABEL_314;
          if (v24 != (_DWORD)v132)
          {
            *(_DWORD *)v10 = v27 - v13 + 3;
            *(_DWORD *)(v10 + 4) = 0;
            v27 += __rev16(*(unsigned __int16 *)(v27 + 1));
            continue;
          }
          return 4294967253;
        }
      case 135:
      case 140:
        v133 = *(unsigned __int16 *)(v53 + 1);
        v134 = v53[3];
        if ((v134 & 0xFE) != 0x76)
          goto LABEL_324;
        v135 = v46;
        v136 = v45;
        v137 = v40;
        v438 = 0;
        result = do_callout(v13 + v50, (uint64_t)a5, v387, (uint64_t)v430, (_QWORD *)v16, 3, &v438);
        if ((result & 0x80000000) != 0)
          return result;
        v13 = v424;
        v12 = v425;
        v24 = v423;
        v26 = (uint64_t)v422;
        v42 = v426;
        v40 = v137;
        v45 = v136;
        v46 = v135;
        v49 = (uint64_t)v66;
        if ((_DWORD)result)
          goto LABEL_1345;
        v53 += v438;
        v134 = v53[3];
LABEL_324:
        v138 = __rev16(v133);
        result = 4294967256;
        switch(v134)
        {
          case 141:
          case 142:
          case 144:
            return result;
          case 143:
            if (bswap32(*((unsigned __int16 *)v53 + 2)) >> 16 != 0xFFFF)
              return result;
            v139 = v437;
            if (*(_QWORD *)(v16 + 160))
            {
              v140 = v435;
              if ((int)v437 >= v24)
                return 4294967253;
              LODWORD(v27) = v50 + 6;
            }
            else
            {
              v140 = v435;
              if ((int)v437 >= v24)
                return 4294967253;
              LODWORD(v27) = v50 + v138 + 3;
            }
            goto LABEL_1309;
          case 145:
            goto LABEL_773;
          case 146:
            if ((int)v437 >= v24)
              return 4294967253;
            v437 = (v437 + 1);
            LODWORD(v27) = v50 + 6;
            goto LABEL_776;
          default:
            if (v134 == 159)
            {
LABEL_773:
              if ((int)v437 >= v24)
                return 4294967253;
              v437 = (v437 + 1);
              v158 = v50 + v138;
LABEL_775:
              LODWORD(v27) = v158 + 3;
              goto LABEL_776;
            }
            v397 = v49;
            v296 = *((unsigned __int16 *)v53 + 2);
            v297 = a10;
            v438 = a10;
            v298 = *(_DWORD *)(a10 + 12);
            if (v298 <= 0x3EB)
            {
              v429 = v296;
              v299 = v46;
              v300 = v45;
              v301 = v40;
              result = more_workspace(&v438, 4u, v16);
              if ((_DWORD)result)
                return result;
              v297 = v438;
              v298 = *(_DWORD *)(v438 + 12);
              v12 = v425;
              v40 = v301;
              v45 = v300;
              v46 = v299;
              v296 = v429;
            }
            v302 = v46;
            v303 = v40;
            v304 = v53 + 3;
            v305 = (uint64_t)&v53[__rev16(v296) + 3];
            v306 = *(unsigned int *)(v297 + 8);
            *(_DWORD *)(v297 + 12) = v298 - 1004;
            v307 = v45;
            if (*(_BYTE *)v305 == 120)
            {
              v308 = v430;
              do
                v305 += __rev16(*(unsigned __int16 *)(v305 + 1));
              while (*(_BYTE *)v305 == 120);
            }
            else
            {
              v308 = v430;
            }
            v359 = v297 + 4 * v306 - 4 * v298;
            a10 = v297;
            result = internal_dfa_match(v16, v304, v308, v308 - v12, v359, 2, v359 + 16, 1000, v427, v297);
            *(_DWORD *)(v438 + 12) += 1004;
            if ((int)result >= -1)
            {
              v361 = v134 == 126 || v134 == 128;
              v13 = v424;
              v24 = v423;
              v26 = (uint64_t)v422;
              v42 = v426;
              v40 = v303;
              v45 = v307;
              v46 = v302;
              if (v361 == ((_DWORD)result == -1))
              {
                v139 = v437;
                v12 = v425;
                v49 = v397;
                if ((int)v437 >= v423)
                  return 4294967253;
                v362 = v50 + v138;
              }
              else
              {
                v139 = v437;
                v12 = v425;
                v49 = v397;
                if ((int)v437 >= v423)
                  return 4294967253;
                v362 = v305 - v424;
              }
              LODWORD(v27) = v362 + 3;
              v140 = v435;
LABEL_1309:
              *v140 = v27;
              v140[1] = 0;
              v435 = v140 + 3;
              v437 = (v139 + 1);
              goto LABEL_1345;
            }
            break;
        }
        return result;
      case 147:
      case 148:
        if ((int)v437 >= v24)
          return 4294967253;
        v10 = (uint64_t)v435;
        *v435 = v50 + 1;
        v435[1] = 0;
        v141 = &v53[__rev16(*((unsigned __int16 *)v53 + 1))];
        v143 = v141[1];
        v27 = (unint64_t)(v141 + 1);
        for (i = v143; i == 120; i = *(unsigned __int8 *)v27)
          v27 += __rev16(*(unsigned __int16 *)(v27 + 1));
        if ((int)v437 >= v382)
          return 4294967253;
        v437 = (v437 + 2);
        LODWORD(v27) = v27 - v13 + 3;
        goto LABEL_505;
      case 159:
        ++v413;
        goto LABEL_1345;
      case 163:
        v235 = &v53[__rev16(*((unsigned __int16 *)v53 + 1))];
        v236 = v235[1];
        v27 = (unint64_t)(v235 + 1);
        if (v236 == 120)
        {
          v237 = v437;
          do
            v27 += __rev16(*(unsigned __int16 *)(v27 + 1));
          while (*(_BYTE *)v27 == 120);
        }
        else
        {
          v237 = v437;
        }
        v70 = v435;
        if (v237 >= v24)
          return 4294967253;
        v437 = (v237 + 1);
        LODWORD(v27) = v27 - v13 + 3;
        goto LABEL_943;
      case 165:
      case 166:
        return result;
      case 385:
      case 386:
      case 394:
        v65 = 0;
        goto LABEL_218;
      case 387:
      case 388:
      case 395:
        LODWORD(v27) = *(_DWORD *)(v26 + 12 * v44 + 4);
        if ((int)v27 < 1)
        {
          v111 = v435;
          v95 = v437;
        }
        else
        {
          if ((int)v437 >= v24)
            return 4294967253;
          v95 = (v437 + 1);
          *(_QWORD *)v435 = (v50 + 4);
          v111 = v435 + 3;
        }
        if ((int)v49 < 1)
          goto LABEL_1268;
        v185 = _pcre2_ucd_stage2_8[v417 + (_pcre2_ucd_stage1_8[v418] << 7)];
        switch(v53[2])
        {
          case 0u:
            goto LABEL_1267;
          case 1u:
            v343 = BYTE1(_pcre2_ucd_records_8[2 * v185]);
            v187 = v343 > 9;
            v344 = (1 << v343) & 0x320;
            if (!v187 && v344 != 0)
              goto LABEL_1267;
            goto LABEL_1215;
          case 2u:
            v347 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v185])];
            goto LABEL_1219;
          case 3u:
            v347 = BYTE1(_pcre2_ucd_records_8[2 * v185]);
            goto LABEL_1219;
          case 4u:
            v347 = LOBYTE(_pcre2_ucd_records_8[2 * v185]);
LABEL_1219:
            v348 = v347 == v53[3];
            goto LABEL_1221;
          case 5u:
            v348 = (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v185])] & 0xFFFFFFFD) == 1;
            goto LABEL_1221;
          case 6u:
          case 7u:
            if (v42 < 0x2000)
            {
              if (v42 > 132)
              {
                if (v42 > 5759)
                {
                  if (v42 != 5760 && v42 != 6158)
                    goto LABEL_1407;
                }
                else if (v42 != 133 && v42 != 160)
                {
                  goto LABEL_1407;
                }
              }
              else if (v42 > 0x20 || ((1 << v416) & 0x100003E00) == 0)
              {
                goto LABEL_1407;
              }
            }
            else if ((v42 - 0x2000) >= 0xB
                   && ((v42 - 8232) > 0x37
                    || ((1 << (v42 - 40)) & 0x80000000000083) == 0)
                   && v42 != 12288)
            {
LABEL_1407:
              v348 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v185])] == 6;
LABEL_1221:
              v349 = v348;
LABEL_1224:
              v346 = (v56 != 16) == v349;
LABEL_1225:
              if (!v346)
                goto LABEL_1226;
              goto LABEL_1268;
            }
LABEL_1267:
            if (v56 == 16)
            {
LABEL_1226:
              if ((int)v46 >= v24)
                return 4294967253;
              v46 = (v46 + 1);
              v351 = (_DWORD)v54 == 395 && (int)v27 > 0;
              v435 = &v111[3 * (v351 << 31 >> 31)];
              v437 = (v95 - v351);
              LODWORD(v27) = v27 + 1;
              goto LABEL_488;
            }
LABEL_1268:
            v435 = v111;
LABEL_1269:
            v437 = v95;
            goto LABEL_1345;
          case 8u:
            v352 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v185])] | 2;
            v349 = v403;
            if (v352 != 3)
              goto LABEL_1224;
            goto LABEL_1267;
          case 9u:
            v353 = &_pcre2_ucd_caseless_sets_8[v53[3]];
            while (1)
            {
              v354 = *v353;
              if (v42 < *v353)
                break;
              ++v353;
              if (v42 == v354)
                goto LABEL_1267;
            }
LABEL_1215:
            v346 = v56 == 16;
            goto LABEL_1225;
          case 0xAu:
            v349 = v404;
            if ((v42 - 36) > 0x3C)
              goto LABEL_1224;
            v349 = v404;
            if (((1 << (v42 - 36)) & 0x1000000010000001) == 0)
              goto LABEL_1224;
            goto LABEL_1267;
          default:
            if (v56 != 16)
              goto LABEL_1268;
            goto LABEL_1226;
        }
      case 389:
      case 390:
      case 396:
LABEL_218:
        if ((int)v437 >= v24)
          return 4294967253;
        v27 = (v437 + 1);
        *v435 = v50 + 4;
        v435[1] = 0;
        v109 = v435 + 3;
        if ((int)v49 < 1)
          goto LABEL_1038;
        v110 = v45;
        v49 = (uint64_t)_pcre2_ucd_stage2_8;
        v45 = v417;
        v10 = _pcre2_ucd_stage2_8[v417 + (_pcre2_ucd_stage1_8[v418] << 7)];
        v42 = v426;
        switch(v53[2])
        {
          case 0u:
            goto LABEL_1037;
          case 1u:
            v291 = BYTE1(_pcre2_ucd_records_8[2 * v10]);
            v187 = v291 > 9;
            LODWORD(v10) = (1 << v291) & 0x320;
            if (!v187 && (_DWORD)v10 != 0)
              goto LABEL_1037;
            goto LABEL_965;
          case 2u:
            v294 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v10])];
            goto LABEL_969;
          case 3u:
            v294 = BYTE1(_pcre2_ucd_records_8[2 * v10]);
            goto LABEL_969;
          case 4u:
            v294 = LOBYTE(_pcre2_ucd_records_8[2 * v10]);
LABEL_969:
            v295 = v294 == v53[3];
            goto LABEL_971;
          case 5u:
            v295 = (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v10])] & 0xFFFFFFFD) == 1;
            goto LABEL_971;
          case 6u:
          case 7u:
            LODWORD(v11) = v426 - 0x2000;
            if (v426 < 0x2000)
            {
              if (v426 > 132)
              {
                if (v426 > 5759)
                {
                  if (v426 != 5760 && v426 != 6158)
                    goto LABEL_1372;
                }
                else if (v426 != 133 && v426 != 160)
                {
                  goto LABEL_1372;
                }
              }
              else if (v426 > 0x20 || ((1 << v416) & 0x100003E00) == 0)
              {
                goto LABEL_1372;
              }
            }
            else if (v11 >= 0xB)
            {
              LODWORD(v11) = v426 - 8232;
              if (((v426 - 8232) > 0x37 || ((1 << v11) & 0x80000000000083) == 0) && v426 != 12288)
              {
LABEL_1372:
                v295 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v10])] == 6;
LABEL_971:
                LODWORD(v10) = v295;
LABEL_974:
                v293 = (v56 != 16) == (_DWORD)v10;
LABEL_975:
                v45 = v110;
                v49 = (uint64_t)v66;
                if (!v293)
                  goto LABEL_976;
                goto LABEL_1038;
              }
            }
LABEL_1037:
            v45 = v110;
            v49 = (uint64_t)v66;
            if (v56 == 16)
            {
LABEL_976:
              if ((_DWORD)v54 == 396 || (_DWORD)v54 == 394)
              {
                v109 = v435;
                v27 = v437;
              }
              if ((int)v46 >= v24)
                return 4294967253;
              v46 = (v46 + 1);
              *(_QWORD *)v434 = (v65 + v50);
              v434 += 3;
              v435 = v109;
              goto LABEL_1039;
            }
LABEL_1038:
            v435 += 3;
            goto LABEL_1039;
          case 8u:
            LODWORD(v11) = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v10])] | 2;
            LODWORD(v10) = v403;
            if ((_DWORD)v11 != 3)
              goto LABEL_974;
            goto LABEL_1037;
          case 9u:
            v10 = (uint64_t)&_pcre2_ucd_caseless_sets_8[v53[3]];
            while (1)
            {
              LODWORD(v11) = *(_DWORD *)v10;
              if (v426 < *(_DWORD *)v10)
                break;
              v10 += 4;
              if (v426 == (_DWORD)v11)
                goto LABEL_1037;
            }
LABEL_965:
            v293 = v56 == 16;
            goto LABEL_975;
          case 0xAu:
            LODWORD(v11) = v426 - 36;
            LODWORD(v10) = v404;
            if ((v426 - 36) > 0x3C)
              goto LABEL_974;
            LODWORD(v10) = v404;
            if (((1 << v11) & 0x1000000010000001) == 0)
              goto LABEL_974;
            goto LABEL_1037;
          default:
            if (v56 != 16)
              goto LABEL_1038;
            goto LABEL_976;
        }
      case 391:
      case 392:
      case 393:
      case 397:
        if ((_DWORD)v54 == 393)
        {
          v95 = v437;
        }
        else
        {
          if ((int)v437 >= v24)
            return 4294967253;
          v95 = (v437 + 1);
          *(_QWORD *)v435 = (v50 + 6);
          v435 += 3;
        }
        if ((int)v49 < 1)
          goto LABEL_1269;
        LODWORD(v27) = *(_DWORD *)(v26 + 12 * v44 + 4);
        v144 = _pcre2_ucd_stage2_8[v417 + (_pcre2_ucd_stage1_8[v418] << 7)];
        v145 = v435;
        switch(v53[4])
        {
          case 0u:
            goto LABEL_1194;
          case 1u:
            v317 = BYTE1(_pcre2_ucd_records_8[2 * v144]);
            v187 = v317 > 9;
            v318 = (1 << v317) & 0x320;
            if (!v187 && v318 != 0)
              goto LABEL_1194;
            goto LABEL_1090;
          case 2u:
            v320 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v144])];
            goto LABEL_1095;
          case 3u:
            v320 = BYTE1(_pcre2_ucd_records_8[2 * v144]);
            goto LABEL_1095;
          case 4u:
            v320 = LOBYTE(_pcre2_ucd_records_8[2 * v144]);
LABEL_1095:
            v321 = v320 == v53[5];
            goto LABEL_1097;
          case 5u:
            v321 = (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v144])] & 0xFFFFFFFD) == 1;
            goto LABEL_1097;
          case 6u:
          case 7u:
            if (v42 >= 0x2000)
            {
              if ((v42 - 0x2000) >= 0xB
                && ((v42 - 8232) > 0x37 || ((1 << (v42 - 40)) & 0x80000000000083) == 0)
                && v42 != 12288)
              {
                goto LABEL_1381;
              }
LABEL_1194:
              if (v56 != 16)
              {
LABEL_1101:
                v437 = v95;
                goto LABEL_459;
              }
              goto LABEL_1195;
            }
            if (v42 > 132)
            {
              if (v42 > 5759)
              {
                if (v42 == 5760 || v42 == 6158)
                  goto LABEL_1194;
              }
              else if (v42 == 133 || v42 == 160)
              {
                goto LABEL_1194;
              }
            }
            else if (v42 <= 0x20 && ((1 << v416) & 0x100003E00) != 0)
            {
              goto LABEL_1194;
            }
LABEL_1381:
            v321 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v144])] == 6;
LABEL_1097:
            v322 = v321;
LABEL_1100:
            if ((v56 != 16) == v322)
              goto LABEL_1101;
LABEL_1195:
            if ((_DWORD)v54 == 397)
              v342 = -1;
            else
              v342 = 0;
            LODWORD(v27) = v27 + 1;
            v435 = &v145[3 * v342];
            v437 = v95 - ((_DWORD)v54 == 397);
            if ((int)v27 < (int)(bswap32(*(unsigned __int16 *)(v53 + 1)) >> 16))
            {
              if ((int)v46 >= v24)
                return 4294967253;
              v46 = (v46 + 1);
LABEL_1201:
              v174 = v434;
              *v434 = v50;
              v434[1] = v27;
LABEL_1205:
              v434 = v174 + 3;
              goto LABEL_459;
            }
            if ((int)v46 >= v24)
              return 4294967253;
            v46 = (v46 + 1);
            LODWORD(v27) = v50 + 6;
            v174 = v434;
LABEL_1204:
            *v174 = v27;
            v174[1] = 0;
            goto LABEL_1205;
          case 8u:
            v323 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v144])] | 2;
            v322 = v403;
            if (v323 != 3)
              goto LABEL_1100;
            goto LABEL_1194;
          case 9u:
            v324 = &_pcre2_ucd_caseless_sets_8[v53[5]];
            while (1)
            {
              v325 = *v324;
              if (v42 < *v324)
                break;
              ++v324;
              if (v42 == v325)
                goto LABEL_1194;
            }
LABEL_1090:
            if (v56 != 16)
              goto LABEL_1195;
            goto LABEL_1101;
          case 0xAu:
            v322 = v404;
            if ((v42 - 36) > 0x3C)
              goto LABEL_1100;
            v322 = v404;
            if (((1 << (v42 - 36)) & 0x1000000010000001) == 0)
              goto LABEL_1100;
            goto LABEL_1194;
          default:
            v145 = v435;
            if (v56 == 16)
              goto LABEL_1195;
            goto LABEL_1101;
        }
      case 405:
      case 406:
      case 414:
        v64 = 0;
        goto LABEL_231;
      case 407:
      case 408:
      case 415:
        v115 = *(_DWORD *)(v26 + 12 * v44 + 4);
        if (v115 < 1)
        {
          v116 = v45;
          v117 = v40;
          v27 = (unint64_t)v430;
          v118 = v437;
        }
        else
        {
          if ((int)v437 >= v24)
            return 4294967253;
          v116 = v45;
          v117 = v40;
          v118 = (v437 + 1);
          *v435 = v50 + 2;
          v435[1] = 0;
          v435 += 3;
          v27 = (unint64_t)v430;
        }
        v437 = v118;
        if ((int)v49 < 1)
        {
          v13 = v424;
          v12 = v425;
          v40 = v117;
          v45 = v116;
          goto LABEL_1345;
        }
        LODWORD(v438) = 0;
        v186 = v46;
        _pcre2_extuni_8(v42, (unsigned __int8 *)(v27 + v49), *(_QWORD *)(v16 + 32), v431, v414, &v438);
        v24 = v423;
        if (v186 < v423)
        {
          v46 = (v186 + 1);
          v187 = (_DWORD)v54 != 415 || v115 <= 0;
          LODWORD(v27) = !v187;
          v437 = (v437 - v27);
          *v434 = -v50;
          v434[1] = v115 + 1;
          v434[2] = v438;
          v434 += 3;
          v435 += 3 * ((int)((_DWORD)v27 << 31) >> 31);
          v13 = v424;
          v12 = v425;
          v26 = (uint64_t)v422;
          v42 = v426;
          v40 = v117;
          v45 = v116;
          goto LABEL_459;
        }
        return 4294967253;
      case 409:
      case 410:
      case 416:
LABEL_231:
        if ((int)v437 >= v24)
          return 4294967253;
        v112 = (v437 + 1);
        *(_QWORD *)v435 = (v50 + 2);
        v113 = v435 + 3;
        if ((int)v49 < 1)
        {
          v435 += 3;
          v437 = (v437 + 1);
          goto LABEL_1345;
        }
        v114 = v46;
        v389 = v45;
        v406 = v40;
        LODWORD(v438) = 0;
        if ((_DWORD)v54 == 416 || (_DWORD)v54 == 414)
        {
          v113 = v435;
          v112 = v437;
        }
        _pcre2_extuni_8(v42, &v430[v49], *(_QWORD *)(v16 + 32), v431, v414, &v438);
        v24 = v423;
        if (v114 < v423)
        {
          v46 = (v114 + 1);
          *v434 = v64 - v50;
          v434[1] = 0;
          v434[2] = v438;
          v434 += 3;
          v435 = v113;
          v437 = v112;
          v13 = v424;
          v12 = v425;
          v26 = (uint64_t)v422;
          v42 = v426;
          v40 = v406;
          v45 = v389;
          goto LABEL_459;
        }
        return 4294967253;
      case 411:
      case 412:
      case 413:
      case 417:
        if ((_DWORD)v54 == 413)
        {
          v96 = v430;
          v97 = v437;
        }
        else
        {
          if ((int)v437 >= v24)
            return 4294967253;
          v97 = (v437 + 1);
          *(_QWORD *)v435 = (v50 + 4);
          v435 += 3;
          v96 = v430;
        }
        v437 = v97;
        if ((int)v49 < 1)
        {
          v13 = v424;
          v12 = v425;
          goto LABEL_1345;
        }
        v385 = v46;
        v146 = v45;
        v407 = v40;
        v147 = *(_DWORD *)(v26 + 12 * v44 + 4);
        LODWORD(v438) = 0;
        v390 = v54 == 417;
        if ((_DWORD)v54 == 417)
          v148 = -1;
        else
          v148 = 0;
        v149 = (unsigned __int16 *)v49;
        if ((unint64_t)_pcre2_extuni_8(v42, &v96[v49], *(_QWORD *)(v16 + 32), v431, v414, &v438) >= v431)
        {
          v150 = v16;
          if ((*(_BYTE *)(v16 + 108) & 0x20) != 0)
            v45 = 1;
          else
            v45 = v146;
          v24 = v423;
        }
        else
        {
          v150 = v16;
          v24 = v423;
          v45 = v146;
        }
        v13 = v424;
        v12 = v425;
        v26 = (uint64_t)v422;
        v42 = v426;
        v40 = v407;
        LODWORD(v10) = (_DWORD)v434;
        if (v385 < v24)
        {
          v49 = (uint64_t)v149;
          v435 += 3 * v148;
          v437 = (v437 - v390);
          v172 = bswap32(*(unsigned __int16 *)(v53 + 1));
          if (v147 + 1 < (int)HIWORD(v172))
            LODWORD(v27) = v147 + 1;
          else
            LODWORD(v27) = 0;
          if (v147 + 1 >= (int)HIWORD(v172))
            v173 = -4;
          else
            v173 = 0;
          *v434 = v173 - v50;
          v434[1] = v27;
          v434[2] = v438;
          v46 = (v385 + 1);
          v434 += 3;
          v16 = v150;
          goto LABEL_1345;
        }
        return 4294967253;
      case 425:
      case 426:
      case 434:
        v64 = 0;
        goto LABEL_242;
      case 427:
      case 428:
      case 435:
        LODWORD(v27) = *(_DWORD *)(v26 + 12 * v44 + 4);
        if ((int)v27 < 1)
        {
          v10 = (uint64_t)v435;
          v120 = v437;
        }
        else
        {
          if ((int)v437 >= v24)
            return 4294967253;
          v120 = (v437 + 1);
          *(_QWORD *)v435 = (v50 + 2);
          v10 = (uint64_t)(v435 + 3);
        }
        v435 = (_DWORD *)v10;
        v437 = v120;
        if ((int)v49 < 1)
          goto LABEL_1345;
        if (v42 <= 12)
        {
          if ((v42 - 11) < 2)
            goto LABEL_739;
          if (v42 != 10)
            goto LABEL_1345;
        }
        else
        {
          if ((v42 - 8232) < 2)
            goto LABEL_739;
          if (v42 != 13)
          {
            if (v42 != 133)
              goto LABEL_1345;
LABEL_739:
            if (*(_WORD *)(v16 + 128) == 2)
              goto LABEL_1345;
            goto LABEL_1064;
          }
          if ((unint64_t)(v430 + 1) < v431)
          {
            v312 = v430[1] == 10;
            goto LABEL_1065;
          }
        }
LABEL_1064:
        v312 = 0;
LABEL_1065:
        LODWORD(v11) = v10;
        LODWORD(v10) = v120;
        if ((int)v46 < v24)
        {
          v46 = (v46 + 1);
          v314 = (_DWORD)v54 == 435 && (int)v27 > 0;
          v437 = (v437 - v314);
          *v434 = -v50;
          v434[1] = v27 + 1;
          v434[2] = v312;
          v434 += 3;
          v435 += 3 * (v314 << 31 >> 31);
          goto LABEL_1345;
        }
        return 4294967253;
      case 429:
      case 430:
      case 436:
LABEL_242:
        LODWORD(v11) = v437;
        if ((int)v437 >= v24)
          return 4294967253;
        v27 = (v437 + 1);
        *v435 = v50 + 2;
        v435[1] = 0;
        v119 = v435 + 3;
        if ((int)v49 < 1)
          goto LABEL_458;
        if (v42 <= 12)
        {
          if ((v42 - 11) < 2)
            goto LABEL_457;
          if (v42 != 10)
            goto LABEL_458;
        }
        else
        {
          if ((v42 - 8232) < 2)
            goto LABEL_457;
          if (v42 != 13)
          {
            if (v42 != 133)
              goto LABEL_458;
LABEL_457:
            if (*(_WORD *)(v16 + 128) == 2)
              goto LABEL_458;
            goto LABEL_853;
          }
          if ((unint64_t)(v430 + 1) < v431)
          {
            v263 = v430[1] == 10;
            goto LABEL_854;
          }
        }
LABEL_853:
        v263 = 0;
LABEL_854:
        if ((_DWORD)v54 == 436 || (_DWORD)v54 == 434)
        {
          v119 = v435;
          v27 = v437;
        }
        if ((int)v46 >= v24)
          return 4294967253;
        v46 = (v46 + 1);
        *(_QWORD *)v434 = (v64 - v50);
        v434[2] = v263;
        v434 += 3;
        v435 = v119;
LABEL_425:
        v437 = v27;
        goto LABEL_459;
      case 431:
      case 432:
      case 433:
      case 437:
        if ((_DWORD)v54 == 433)
        {
          v98 = v437;
        }
        else
        {
          if ((int)v437 >= v24)
            return 4294967253;
          v98 = (v437 + 1);
          *(_QWORD *)v435 = (v50 + 4);
          v435 += 3;
        }
        v437 = v98;
        if ((int)v49 < 1)
          goto LABEL_1345;
        LODWORD(v27) = *(_DWORD *)(v26 + 12 * v44 + 4);
        if (v42 <= 12)
        {
          if ((v42 - 11) >= 2)
          {
            if (v42 != 10)
              goto LABEL_1345;
LABEL_841:
            v260 = 0;
            v261 = v435;
            v262 = v437;
            goto LABEL_842;
          }
        }
        else if ((v42 - 8232) >= 2)
        {
          if (v42 == 13)
          {
            v261 = v435;
            v262 = v98;
            v260 = (unint64_t)(v430 + 1) < v431 && v430[1] == 10;
LABEL_842:
            if ((_DWORD)v54 == 437)
              v10 = -1;
            else
              v10 = 0;
            LODWORD(v27) = v27 + 1;
            v435 = &v261[3 * v10];
            v437 = v262 - ((_DWORD)v54 == 437);
            if ((int)v27 < (int)(bswap32(*(unsigned __int16 *)(v53 + 1)) >> 16))
            {
              if ((int)v46 < v24)
              {
                v46 = (v46 + 1);
                *v434 = -v50;
                v434[1] = v27;
                v434[2] = v260;
                v434 += 3;
                goto LABEL_459;
              }
              return 4294967253;
            }
            if ((int)v46 >= v24)
              return 4294967253;
            v46 = (v46 + 1);
            v191 = v434;
            *(_QWORD *)v434 = (-4 - v50);
            v434[2] = v260;
LABEL_850:
            v434 = v191 + 3;
            goto LABEL_459;
          }
          if (v42 != 133)
            goto LABEL_1345;
        }
        if (*(_WORD *)(v16 + 128) == 2)
          goto LABEL_1345;
        goto LABEL_841;
      case 445:
      case 446:
      case 454:
        v64 = 0;
        goto LABEL_253;
      case 447:
      case 448:
      case 455:
        LODWORD(v27) = *(_DWORD *)(v26 + 12 * v44 + 4);
        if ((int)v27 < 1)
        {
          v121 = v435;
          v11 = v437;
        }
        else
        {
          if ((int)v437 >= v24)
            return 4294967253;
          v11 = (v437 + 1);
          *(_QWORD *)v435 = (v50 + 2);
          v121 = v435 + 3;
        }
        if ((int)v66 < 1)
          goto LABEL_565;
        v188 = 1;
        if (v42 < 0x2000)
        {
          if (v42 <= 159)
          {
            if (v42 == 9 || v42 == 32)
              goto LABEL_555;
          }
          else if (v42 == 160 || v42 == 5760 || v42 == 6158)
          {
            goto LABEL_555;
          }
        }
        else if (v42 > 8238)
        {
          if (v42 == 8239 || v42 == 8287 || v42 == 12288)
            goto LABEL_555;
        }
        else if ((v42 - 0x2000) < 0xB)
        {
LABEL_555:
          if (v188 != (v56 == 19))
          {
LABEL_565:
            v435 = v121;
            v437 = v11;
            goto LABEL_459;
          }
          if ((int)v46 >= v24)
            return 4294967253;
          v46 = (v46 + 1);
          v190 = (_DWORD)v54 == 455 && (int)v27 > 0;
          v435 = &v121[3 * (v190 << 31 >> 31)];
          v437 = (v11 - v190);
          LODWORD(v27) = v27 + 1;
LABEL_564:
          v191 = v434;
          *v434 = -v50;
          v434[1] = v27;
          v434[2] = 0;
          goto LABEL_850;
        }
        v188 = 0;
        goto LABEL_555;
      case 449:
      case 450:
      case 456:
LABEL_253:
        if ((int)v437 >= v24)
          return 4294967253;
        v27 = (v437 + 1);
        *v435 = v50 + 2;
        v435[1] = 0;
        v119 = v435 + 3;
        if ((int)v49 < 1)
          goto LABEL_458;
        LODWORD(v10) = v42 - 0x2000;
        if (v42 < 0x2000)
        {
          if (v42 <= 159)
          {
            if (v42 != 9 && v42 != 32)
              goto LABEL_873;
          }
          else if (v42 != 160 && v42 != 5760 && v42 != 6158)
          {
            goto LABEL_873;
          }
        }
        else
        {
          if (v42 <= 8238)
          {
            if (v10 < 0xB)
              goto LABEL_258;
            goto LABEL_873;
          }
          if (v42 != 8239 && v42 != 8287 && v42 != 12288)
LABEL_873:
            v63 = 0;
        }
LABEL_258:
        if (v63 == (v56 == 19))
        {
          if ((_DWORD)v54 == 456 || (_DWORD)v54 == 454)
          {
            v119 = v435;
            v27 = v437;
          }
LABEL_275:
          if ((int)v46 >= v24)
            return 4294967253;
          v46 = (v46 + 1);
          v434[1] = 0;
          v434[2] = 0;
          *v434 = v64 - v50;
          v434 += 3;
          v435 = v119;
          goto LABEL_1039;
        }
LABEL_458:
        v435 = v119;
        v437 = v27;
        goto LABEL_459;
      case 451:
      case 452:
      case 453:
      case 457:
        if ((_DWORD)v54 == 453)
        {
          v11 = v437;
        }
        else
        {
          if ((int)v437 >= v24)
            return 4294967253;
          v11 = (v437 + 1);
          *(_QWORD *)v435 = (v50 + 4);
          v435 += 3;
        }
        if ((int)v49 < 1)
          goto LABEL_384;
        LODWORD(v27) = 1;
        if (v42 < 0x2000)
        {
          if (v42 <= 159)
          {
            if (v42 == 9 || v42 == 32)
              goto LABEL_365;
          }
          else if (v42 == 160 || v42 == 5760 || v42 == 6158)
          {
            goto LABEL_365;
          }
        }
        else if (v42 > 8238)
        {
          if (v42 == 8239 || v42 == 8287 || v42 == 12288)
            goto LABEL_365;
        }
        else if ((v42 - 0x2000) < 0xB)
        {
LABEL_365:
          if ((_DWORD)v27 != (v56 == 19))
          {
LABEL_384:
            v437 = v11;
            goto LABEL_1345;
          }
          v151 = *(_DWORD *)(v26 + 12 * v44 + 4);
          v152 = (_DWORD)v54 == 457;
LABEL_375:
          v153 = v152;
          if (v152)
            v154 = -1;
          else
            v154 = 0;
          LODWORD(v27) = v151 + 1;
          v435 += 3 * v154;
          v437 = (v11 - v153);
          if ((int)v27 >= (int)(bswap32(*(unsigned __int16 *)(v53 + 1)) >> 16))
          {
            if ((int)v46 >= v24)
              return 4294967253;
            v46 = (v46 + 1);
            v174 = v434;
            v434[2] = 0;
            LODWORD(v27) = -4 - v50;
            goto LABEL_1204;
          }
          if ((int)v46 >= v24)
            return 4294967253;
          v46 = (v46 + 1);
          goto LABEL_564;
        }
        LODWORD(v27) = 0;
        goto LABEL_365;
      case 465:
      case 466:
      case 474:
        v64 = 0;
        goto LABEL_266;
      case 467:
      case 468:
      case 475:
        LODWORD(v27) = *(_DWORD *)(v26 + 12 * v44 + 4);
        if ((int)v27 < 1)
        {
          v11 = (uint64_t)v435;
          v10 = v437;
        }
        else
        {
          if ((int)v437 >= v24)
            return 4294967253;
          v10 = (v437 + 1);
          *(_QWORD *)v435 = (v50 + 2);
          v11 = (uint64_t)(v435 + 3);
        }
        if ((int)v49 < 1)
          goto LABEL_581;
        v192 = 1;
        if ((v42 - 10) >= 4 && (v42 - 8232) >= 2)
          v192 = v42 == 133;
        if (v192 != (v56 == 21))
        {
LABEL_581:
          v435 = (_DWORD *)v11;
          v437 = v10;
          goto LABEL_1345;
        }
        if ((int)v46 >= v24)
          return 4294967253;
        v46 = (v46 + 1);
        v194 = (_DWORD)v54 == 475 && (int)v27 > 0;
        v435 = (_DWORD *)(v11 + 12 * (v194 << 31 >> 31));
        v437 = (v10 - v194);
        *v434 = -v50;
        *(_QWORD *)(v434 + 1) = (v27 + 1);
        v195 = v434 + 3;
        goto LABEL_580;
      case 469:
      case 470:
      case 476:
LABEL_266:
        LODWORD(v11) = v437;
        if ((int)v437 >= v24)
          return 4294967253;
        v27 = (v437 + 1);
        *v435 = v50 + 2;
        v435[1] = 0;
        v119 = v435 + 3;
        if ((int)v49 < 1)
          goto LABEL_458;
        v122 = 1;
        if ((v42 - 10) >= 4 && (v42 - 8232) >= 2)
          v122 = v42 == 133;
        if (v122 != (v56 == 21))
          goto LABEL_458;
        if ((_DWORD)v54 == 476 || (_DWORD)v54 == 474)
        {
          v119 = v435;
          v27 = v437;
        }
        goto LABEL_275;
      case 471:
      case 472:
      case 473:
      case 477:
        if ((_DWORD)v54 == 473)
        {
          v11 = v437;
        }
        else
        {
          if ((int)v437 >= v24)
            return 4294967253;
          v11 = (v437 + 1);
          *(_QWORD *)v435 = (v50 + 4);
          v435 += 3;
        }
        if ((int)v49 < 1)
          goto LABEL_384;
        LODWORD(v27) = 1;
        if ((v42 - 10) >= 4 && (v42 - 8232) >= 2)
          LODWORD(v27) = v42 == 133;
        if ((_DWORD)v27 != (v56 == 21))
          goto LABEL_384;
        v151 = *(_DWORD *)(v26 + 12 * v44 + 4);
        v152 = (_DWORD)v54 == 477;
        goto LABEL_375;
      default:
        return 4294967254;
    }
  }
}

uint64_t more_workspace(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v9;
  unsigned int v10;

  v4 = (uint64_t *)*a1;
  v5 = *(_QWORD *)*a1;
  if (v5)
  {
    LODWORD(v6) = *(_DWORD *)(v5 + 8);
  }
  else
  {
    v9 = 2 * *((_DWORD *)v4 + 2);
    v10 = (*(_DWORD *)(a3 + 80) << 8) - *(_DWORD *)(a3 + 88);
    if (v9 >= v10)
      v6 = v10;
    else
      v6 = v9;
    if ((unint64_t)a2 + 1004 > v6)
      return 4294967233;
    v5 = (*(uint64_t (**)(unint64_t, _QWORD))a3)(4 * v6, *(_QWORD *)(a3 + 16));
    if (!v5)
      return 4294967248;
    *(_QWORD *)(a3 + 88) += v6;
    *(_QWORD *)v5 = 0;
    *(_DWORD *)(v5 + 8) = v6;
    *v4 = v5;
  }
  v7 = 0;
  *(_DWORD *)(v5 + 12) = v6 - 4;
  *a1 = v5;
  return v7;
}

uint64_t do_callout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(a1 + a6) == 118)
    v8 = 6;
  else
    v8 = __rev16(*(unsigned __int16 *)(a6 + a1 + 5));
  v9 = a5[17];
  *a7 = v8;
  v10 = (uint64_t (*)(void))a5[19];
  if (!v10)
    return 0;
  *(_QWORD *)(v9 + 16) = a2;
  v11 = a5[4];
  *(_QWORD *)(v9 + 48) = a3 - v11;
  *(_QWORD *)(v9 + 56) = a4 - v11;
  *(_QWORD *)(v9 + 64) = __rev16(*(unsigned __int16 *)(a1 + a6 + 1));
  *(_QWORD *)(v9 + 72) = __rev16(*(unsigned __int16 *)(a1 + a6 + 3));
  if (*(_BYTE *)(a1 + a6) == 118)
  {
    v12 = 0;
    v13 = 0;
    *(_DWORD *)(v9 + 4) = *(unsigned __int8 *)(a6 + a1 + 5);
    *(_QWORD *)(v9 + 80) = 0;
  }
  else
  {
    *(_DWORD *)(v9 + 4) = 0;
    v15 = a6 + a1;
    *(_QWORD *)(v9 + 80) = __rev16(*(unsigned __int16 *)(v15 + 7));
    v12 = v15 + 10;
    v13 = *a7 - 11;
  }
  *(_QWORD *)(v9 + 88) = v13;
  *(_QWORD *)(v9 + 96) = v12;
  return v10();
}

uint64_t pcre2_get_error_message_8(int a1, uint64_t a2, uint64_t a3)
{
  int v3;
  char *v4;
  int v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char *v11;

  if (!a3)
    return 4294967248;
  v3 = a1 - 100;
  if (a1 < 100)
  {
    if ((a1 & 0x80000000) == 0)
    {
      v4 = &byte_214F45EB2;
      v3 = 1;
      goto LABEL_8;
    }
    v3 = -a1;
    v4 = "no error";
  }
  else
  {
    v4 = "no error";
  }
  if (v3 < 1)
  {
    LOBYTE(v6) = *v4;
    if (!*v4)
    {
      result = 0;
LABEL_22:
      *(_BYTE *)(a2 + result) = 0;
      return result;
    }
LABEL_15:
    v9 = 0;
    v10 = a3 - 1;
    v11 = v4 + 1;
    while (v10 != v9)
    {
      *(_BYTE *)(a2 + v9) = v6;
      result = v9 + 1;
      v6 = v11[v9++];
      if (!v6)
        goto LABEL_22;
    }
    *(_BYTE *)(a2 + v10) = 0;
    return 4294967248;
  }
  while (1)
  {
LABEL_8:
    while (*v4++)
      ;
    LOBYTE(v6) = *v4;
    if (!*v4)
      return 4294967267;
    if (v3-- < 2)
      goto LABEL_15;
  }
}

unsigned __int8 *_pcre2_extuni_8(int a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4, int a5, _DWORD *a6)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int8 *v12;
  char v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned __int8 v20;
  int v21;
  int v22;
  int v23;
  int v26;
  int v27;
  int v28;

  if ((unint64_t)a2 >= a4)
    return a2;
  if (a1 >= 0)
    v6 = a1;
  else
    v6 = a1 + 127;
  v7 = BYTE2(_pcre2_ucd_records_8[2 * _pcre2_ucd_stage2_8[a1 - (v6 & 0xFFFFFF80) + (_pcre2_ucd_stage1_8[v6 >> 7] << 7)]]);
  while (1)
  {
    v8 = *a2;
    if (a5 && v8 >= 0xC0)
    {
      v9 = a2[1] & 0x3F;
      if ((v8 & 0x20) != 0)
      {
        if ((v8 & 0x10) != 0)
        {
          if ((v8 & 8) != 0)
          {
            v26 = a2[2] & 0x3F;
            v27 = a2[3] & 0x3F;
            v28 = a2[4] & 0x3F;
            if ((v8 & 4) != 0)
            {
              v8 = ((v8 & 1) << 30) | (v9 << 24) | (v26 << 18) | (v27 << 12) | (v28 << 6) | a2[5] & 0x3F;
              v10 = 6;
            }
            else
            {
              v8 = ((v8 & 3) << 24) | (v9 << 18) | (v26 << 12) | (v27 << 6) | v28;
              v10 = 5;
            }
          }
          else
          {
            v8 = ((v8 & 7) << 18) | (v9 << 12) | ((a2[2] & 0x3F) << 6) | a2[3] & 0x3F;
            v10 = 4;
          }
        }
        else
        {
          v8 = ((v8 & 0xF) << 12) | (v9 << 6) | a2[2] & 0x3F;
          v10 = 3;
        }
      }
      else
      {
        v8 = a2[1] & 0x3F | ((v8 & 0x1F) << 6);
        v10 = 2;
      }
    }
    else
    {
      v10 = 1;
    }
    v11 = BYTE2(_pcre2_ucd_records_8[2 * _pcre2_ucd_stage2_8[v8 & 0x7F | (_pcre2_ucd_stage1_8[v8 >> 7] << 7)]]);
    if (((_pcre2_ucp_gbtable_8[v7] >> v11) & 1) == 0)
      return a2;
    if (v7 == 11 && v11 == 11)
    {
      if (a5)
      {
        v12 = a2;
        do
          v13 = *--v12;
        while ((v13 & 0xC0) == 0x80);
      }
      else
      {
        v12 = a2 - 1;
      }
      if ((unint64_t)v12 > a3)
        break;
    }
LABEL_40:
    if ((v11 == 13 || v11 == 3) && v7 == 14)
      v7 = 14;
    else
      v7 = v11;
    if (a6)
      ++*a6;
    a2 += v10;
    if ((unint64_t)a2 >= a4)
      return a2;
  }
  v14 = 0;
  do
  {
    if (a5)
    {
      do
      {
        v16 = *--v12;
        v15 = v16;
      }
      while ((v16 & 0xC0) == 0x80);
      if (v15 >= 0xC0)
      {
        v17 = v12[1] & 0x3F;
        if ((v15 & 0x20) != 0)
        {
          if ((v15 & 0x10) != 0)
          {
            if ((v15 & 8) != 0)
            {
              v21 = v12[2] & 0x3F;
              v22 = v12[3] & 0x3F;
              v23 = v12[4] & 0x3F;
              if ((v15 & 4) == 0)
              {
                v15 = ((v15 & 3) << 24) | (v17 << 18) | (v21 << 12) | (v22 << 6) | v23;
                goto LABEL_37;
              }
              v19 = ((v15 & 1) << 30) | (v17 << 24) | (v21 << 18) | (v22 << 12) | (v23 << 6);
              v20 = v12[5];
            }
            else
            {
              v19 = ((v15 & 7) << 18) | (v17 << 12) | ((v12[2] & 0x3F) << 6);
              v20 = v12[3];
            }
          }
          else
          {
            v19 = ((v15 & 0xF) << 12) | (v17 << 6);
            v20 = v12[2];
          }
          v15 = v19 & 0xFFFFFFC0 | v20 & 0x3F;
          goto LABEL_37;
        }
        v15 = v12[1] & 0x3F | ((v15 & 0x1F) << 6);
      }
    }
    else
    {
      v18 = *--v12;
      v15 = v18;
    }
LABEL_37:
    if (BYTE2(_pcre2_ucd_records_8[2 * _pcre2_ucd_stage2_8[v15 & 0x7F | (_pcre2_ucd_stage1_8[v15 >> 7] << 7)]]) != 11)
      break;
    ++v14;
  }
  while ((unint64_t)v12 > a3);
  if ((v14 & 1) == 0)
    goto LABEL_40;
  return a2;
}

unsigned __int8 *_pcre2_find_bracket_8(unsigned __int8 *result, int a2, int a3)
{
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  while (2)
  {
    v3 = *result;
    switch(*result)
    {
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '^':
      case '_':
        v4 = result[1];
        goto LABEL_10;
      case '[':
      case '\\':
      case ']':
      case 'a':
        v4 = result[3];
LABEL_10:
        v6 = 2 * ((v4 - 15) < 2);
        goto LABEL_11;
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'u':
      case 'v':
        goto LABEL_19;
      case 'p':
        v7 = *(unsigned __int16 *)(result + 1);
        goto LABEL_17;
      case 'w':
        v7 = *(unsigned __int16 *)(result + 5);
LABEL_17:
        result += __rev16(v7);
        continue;
      default:
        v5 = v3 - 125;
        if ((v3 - 125) > 0x21)
          goto LABEL_18;
        if (((1 << v5) & 0x2AA000000) != 0)
        {
          v6 = result[1];
LABEL_11:
          result += v6 + _pcre2_OP_lengths_8[v3];
          continue;
        }
        if (((1 << v5) & 0x6300) != 0)
        {
          if (a3 == bswap32(*(unsigned __int16 *)(result + 3)) >> 16)
            return result;
          result += _pcre2_OP_lengths_8[v3];
          continue;
        }
        if ((_DWORD)v3 == 125)
        {
          if (a3 < 0)
            return result;
          result += 3;
          continue;
        }
LABEL_18:
        if (*result)
        {
LABEL_19:
          result += _pcre2_OP_lengths_8[v3];
          if (a2 && (v3 - 29) <= 0x37)
          {
            v8 = *(result - 1);
            if (v8 >= 0xC0)
              result += _pcre2_utf8_table4[v8 & 0x3F];
          }
          continue;
        }
        return 0;
    }
  }
}

uint64_t pcre2_jit_compile_8()
{
  return 4294967251;
}

uint64_t pcre2_jit_match_8()
{
  return 4294967251;
}

uint64_t pcre2_jit_stack_create_8()
{
  return 0;
}

const char *_pcre2_jit_get_target_8()
{
  return "JIT is not supported";
}

uint64_t _pcre2_jit_get_size_8()
{
  return 0;
}

_BYTE *pcre2_maketables_8(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char *v6;
  unint64_t v7;
  int i;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  char v12;
  BOOL v13;
  char v14;

  if (a1)
    v1 = (_BYTE *)(*(uint64_t (**)(uint64_t, _QWORD))a1)(1088, *(_QWORD *)(a1 + 16));
  else
    v1 = malloc(0x440uLL);
  v2 = v1;
  if (v1)
  {
    v3 = 0;
    do
    {
      v2[v3] = cstdlib_tolower(v3);
      ++v3;
    }
    while ((_DWORD)v3 != 256);
    v4 = 0;
    do
    {
      if (cstdlib_islower(v4))
        v5 = cstdlib_toupper(v4);
      else
        v5 = cstdlib_tolower(v4);
      v2[v4++ + v3] = v5;
    }
    while ((_DWORD)v4 != 256);
    v6 = &v2[v3];
    cstdlib_memset(&v2[v3 + v4], 0, 0x140uLL);
    v7 = 0;
    for (i = 0; i != 256; ++i)
    {
      v9 = v4 + (v7 >> 3);
      if (cstdlib_isdigit(i))
        v2[v9 + 64 + v3] |= 1 << (i & 7);
      if (cstdlib_isupper(i))
        v2[v9 + 96 + v3] |= 1 << (i & 7);
      if (cstdlib_islower(i))
        v2[v9 + 128 + v3] |= 1 << (i & 7);
      if (cstdlib_isalnum(i))
        v6[v9 + 160] |= 1 << (i & 7);
      if (i == 95)
        v2[v4 + 171 + v3] |= 0x80u;
      if (cstdlib_isspace(i))
        v6[v9] |= 1 << (i & 7);
      if (cstdlib_isxdigit(i))
        v2[v9 + 32 + v3] |= 1 << (i & 7);
      if (cstdlib_isgraph(i))
        v2[v9 + 192 + v3] |= 1 << (i & 7);
      if (cstdlib_isprint(i))
        v2[v9 + 224 + v3] |= 1 << (i & 7);
      if (cstdlib_ispunct(i))
        v2[v9 + 256 + v3] |= 1 << (i & 7);
      if (cstdlib_iscntrl(i))
        v2[v9 + 288 + v3] |= 1 << (i & 7);
      ++v7;
    }
    v10 = 0;
    v11 = &v2[v3 + 320 + v4];
    do
    {
      v12 = cstdlib_isspace(v10) != 0;
      if (cstdlib_isalpha(v10))
        v12 |= 2u;
      if (cstdlib_isdigit(v10))
        v12 |= 4u;
      if (cstdlib_isxdigit(v10))
        v12 |= 8u;
      if (cstdlib_isalnum(v10))
        v13 = 1;
      else
        v13 = v10 == 95;
      v14 = v12 + 16;
      if (!v13)
        v14 = v12;
      *v11++ = v14;
      ++v10;
    }
    while (v10 != 256);
  }
  return v2;
}

uint64_t pcre2_match_8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, __int128 *a7)
{
  uint64_t v11;
  uint64_t v14;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t valid;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  char v32;
  int v33;
  unint64_t v34;
  size_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL4 v49;
  unint64_t v50;
  unsigned __int8 *v51;
  char v52;
  void *v53;
  void *v54;
  unint64_t v55;
  _BOOL4 v57;
  uint64_t v58;
  char v60;
  void *v61;
  int v63;
  BOOL v64;
  char v65;
  uint64_t matched;
  _BOOL4 v67;
  _BOOL4 v68;
  BOOL v69;
  unint64_t v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  BOOL v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unsigned __int8 *v83;
  _BOOL4 v84;
  unsigned int v85;
  uint64_t v86;
  int v87;
  int __c;
  __int16 v89;
  int v90;
  unint64_t v91;
  int v92;
  unsigned __int8 *v93;
  unint64_t v94;
  int v95;
  int64_t v96;
  int v97;
  unsigned __int8 *__s;
  unsigned int v99;
  unint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _OWORD *v104;
  unint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _OWORD v117[3];
  _OWORD v118[2];
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  _OWORD v124[1280];
  uint64_t v125;

  v11 = a3;
  v125 = *MEMORY[0x24BDAC8D0];
  v122 = 0u;
  v123 = 0u;
  v120 = 0u;
  v121 = 0u;
  v119 = 0u;
  memset(v118, 0, sizeof(v118));
  memset(v117, 0, 40);
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  v107 = 0u;
  v108 = 0u;
  v105 = 0;
  v106 = 0u;
  v102 = 0u;
  v103 = 0u;
  v101 = 0u;
  memset(v124, 0, 512);
  v104 = v124;
  if (a3 == -1)
    v11 = _pcre2_strlen_8(a2);
  if ((a5 & 0x1FFFDFC0) != 0)
    return 4294967262;
  v14 = 4294967245;
  if (!a1 || !a2 || !a6)
    return v14;
  if (v11 < (unint64_t)a4)
    return 4294967263;
  if (*(_DWORD *)(a1 + 80) != 1346589253)
    return 4294967265;
  v16 = *(_DWORD *)(a1 + 96);
  if ((v16 & 7) != 1)
    return 4294967264;
  v17 = *(_DWORD *)(a1 + 88);
  v18 = (a5 >> 4) & 1;
  if ((a5 & 0x20) != 0)
    v18 = 2;
  LOWORD(v110) = v18;
  if (v18)
  {
    if (((v17 | a5) & 0x20000000) != 0)
      return 4294967262;
  }
  __s = &a2[a4];
  v99 = v17;
  v95 = v17 & 0x80000;
  if ((a5 & 0x40000000) == 0 && v95)
  {
    v19 = &a2[a4];
    if (a4)
    {
      if (v11 > a4 && (*__s & 0xC0) == 0x80)
        return 4294967260;
      v20 = *(unsigned __int16 *)(a1 + 124);
      v19 = &a2[a4];
      if (*(_WORD *)(a1 + 124))
      {
        v19 = &a2[a4];
        if (a4 >= 1)
        {
          v21 = &a2[a4];
LABEL_28:
          v22 = v21 - 1;
          while (1)
          {
            v19 = v22;
            if (v22 <= a2)
              break;
            --v22;
            if ((*v19 & 0xC0) != 0x80)
            {
              v21 = v19;
              if (--v20)
                goto LABEL_28;
              break;
            }
          }
        }
      }
    }
    v96 = v19 - a2;
    valid = _pcre2_valid_utf_8(v19, v11 - (v19 - a2), (_QWORD *)(a6 + 64));
    *(_DWORD *)(a6 + 76) = valid;
    if ((_DWORD)valid)
    {
      v14 = valid;
      *(_QWORD *)(a6 + 64) += v96;
      return v14;
    }
  }
  if (a7)
  {
    v24 = *((_QWORD *)a7 + 5);
    if (v24 != -1 && (*(_BYTE *)(a1 + 90) & 0x80) == 0)
      return 4294967240;
    v101 = *a7;
    *(_QWORD *)&v102 = *((_QWORD *)a7 + 2);
  }
  else
  {
    v101 = *(_OWORD *)a1;
    *(_QWORD *)&v102 = *(_QWORD *)(a1 + 16);
    a7 = &_pcre2_default_match_context_8;
    v24 = -1;
  }
  v25 = &a2[v11];
  v26 = v16 >> 14;
  LODWORD(v27) = *(_DWORD *)(a1 + 88);
  v28 = *(_DWORD *)(a1 + 96);
  v29 = v26 & 0xC | a5;
  *(_QWORD *)&v117[1] = v118;
  LODWORD(v118[0]) = 2;
  if (v24 == -1)
    v30 = &a2[v11];
  else
    v30 = &a2[v24];
  v94 = (unint64_t)v30;
  *(_QWORD *)&v119 = a2;
  *((_QWORD *)&v119 + 1) = v11;
  DWORD2(v123) = 0;
  *(int8x16_t *)((char *)&v117[1] + 8) = vextq_s8(*(int8x16_t *)((char *)a7 + 24), *(int8x16_t *)((char *)a7 + 24), 8uLL);
  *(_QWORD *)&v109 = a4;
  *((_QWORD *)&v111 + 1) = a2;
  *(_QWORD *)&v112 = &a2[v11];
  v85 = v28;
  *(_QWORD *)((char *)&v116 + 4) = __PAIR64__(v27, v29);
  HIDWORD(v106) = 0;
  LODWORD(v107) = (v28 >> 12) & 1;
  v114 = 0uLL;
  WORD2(v110) = *(_WORD *)(a1 + 134);
  WORD3(v110) = *(_WORD *)(a1 + 132);
  *((_QWORD *)&v110 + 1) = a1 + 136;
  *(_QWORD *)&v111 = a1 + 136 + WORD3(v110) * (unint64_t)WORD2(v110);
  WORD1(v110) = *(_WORD *)(a1 + 120);
  v31 = *(unsigned __int16 *)(a1 + 122) - 1;
  *(_QWORD *)&v117[0] = 0;
  switch(v31)
  {
    case 0:
      DWORD2(v117[0]) = 1;
      v32 = 13;
      goto LABEL_47;
    case 1:
      DWORD2(v117[0]) = 1;
      v32 = 10;
LABEL_47:
      BYTE12(v117[0]) = v32;
      goto LABEL_53;
    case 2:
      DWORD2(v117[0]) = 2;
      WORD6(v117[0]) = 2573;
      goto LABEL_53;
    case 3:
      v33 = 1;
      goto LABEL_51;
    case 4:
      v33 = 2;
LABEL_51:
      DWORD1(v117[0]) = v33;
      goto LABEL_53;
    case 5:
      DWORD2(v117[0]) = 1;
      BYTE12(v117[0]) = 0;
LABEL_53:
      v34 = *(unsigned __int16 *)(a1 + 128);
      v35 = 16 * v34;
      v36 = 16 * v34 + 128;
      LODWORD(v37) = *((_DWORD *)a7 + 12);
      v38 = *(_DWORD *)(a1 + 100);
      if (v37 >= v38)
        v37 = v38;
      else
        v37 = v37;
      v105 = v37;
      *(uint32x2_t *)&v106 = vmin_u32(*(uint32x2_t *)((char *)a7 + 52), *(uint32x2_t *)(a1 + 104));
      if (v34 > 0x78)
      {
        *((_QWORD *)&v102 + 1) = 10 * v36;
        if (v37 < (10 * v36) >> 10)
        {
          if (v36 > v37 << 10)
            return 4294967233;
          *((_QWORD *)&v102 + 1) = (v37 << 10) / v36 * v36;
        }
        v39 = ((uint64_t (*)(void))v101)();
        *(_QWORD *)&v103 = v39;
        if (!v39)
          return 4294967248;
        v40 = *((_QWORD *)&v102 + 1);
        v35 = 16 * *(unsigned __int16 *)(a1 + 128);
      }
      else
      {
        v39 = (uint64_t)v104;
        v40 = 0x5000 / v36 * v36;
        *((_QWORD *)&v102 + 1) = v40;
        *(_QWORD *)&v103 = v104;
      }
      *((_QWORD *)&v103 + 1) = v39 + v40;
      cstdlib_memset((void *)(v39 + 128), 255, v35);
      v41 = *(_QWORD *)(a1 + 24);
      v42 = v41 + 256;
      *((_QWORD *)&v107 + 1) = v41;
      *(_QWORD *)&v108 = v41 + 256;
      *((_QWORD *)&v108 + 1) = v41 + 832;
      v43 = *(_DWORD *)(a1 + 96);
      v91 = v43 & 0x10;
      if ((v43 & 0x10) != 0)
      {
        v44 = *(unsigned __int8 *)(a1 + 112);
        v86 = 0;
        if ((v43 & 0x20) != 0)
          v87 = *(unsigned __int8 *)(v42 + v44);
        else
          v87 = *(unsigned __int8 *)(a1 + 112);
      }
      else
      {
        LODWORD(v44) = 0;
        v87 = 0;
        v45 = (v85 >> 9) & 1;
        if ((v43 & 0x40) == 0)
          v45 = 1;
        if (v45)
          v46 = 0;
        else
          v46 = a1 + 40;
        v86 = v46;
      }
      __c = v44;
      v83 = __s - 1;
      v92 = (v99 >> 19) & 1;
      v90 = *(_DWORD *)(a1 + 96);
      v93 = (unsigned __int8 *)v36;
      if ((v43 & 0x80) != 0)
      {
        v80 = *(unsigned __int8 *)(a1 + 116);
        if ((v43 & 0x100) != 0)
          v81 = *(unsigned __int8 *)(v42 + *(unsigned __int8 *)(a1 + 116));
        else
          v81 = *(unsigned __int8 *)(a1 + 116);
      }
      else
      {
        v80 = 0;
        v81 = 0;
      }
      v47 = 0;
      v100 = 0;
      v97 = v27 | a5;
      v49 = (v43 & 0x10) != 0 || v86 != 0;
      v84 = v49;
      v82 = v91 >> 4;
      v50 = (unint64_t)&a2[a4];
      v89 = v27;
      break;
    default:
      return 4294967252;
  }
  while (1)
  {
    if ((*(_BYTE *)(a1 + 90) & 1) != 0)
      goto LABEL_189;
    if ((v27 & 0x100) == 0)
    {
      v51 = v25;
      goto LABEL_113;
    }
    if (v95)
    {
      v51 = (unsigned __int8 *)v50;
      if (v50 >= (unint64_t)v25)
        goto LABEL_113;
LABEL_91:
      if (DWORD1(v117[0]))
      {
        if ((unint64_t)v51 < (unint64_t)v112
          && _pcre2_is_newline_8(v51, SDWORD1(v117[0]), v112, (int *)v117 + 2, v92))
        {
          goto LABEL_113;
        }
      }
      else if ((unint64_t)v51 <= (unint64_t)v112 - DWORD2(v117[0])
             && *v51 == BYTE12(v117[0])
             && (DWORD2(v117[0]) == 1 || v51[1] == BYTE13(v117[0])))
      {
        goto LABEL_113;
      }
      ++v51;
      while (v51 < v25)
      {
        v52 = *v51++;
        if ((v52 & 0xC0) != 0x80)
        {
          --v51;
          goto LABEL_91;
        }
      }
    }
    else
    {
      v51 = (unsigned __int8 *)v50;
      if (v50 < (unint64_t)v25)
      {
        do
        {
          if (DWORD1(v117[0]))
          {
            if ((unint64_t)v51 < (unint64_t)v112
              && _pcre2_is_newline_8(v51, SDWORD1(v117[0]), v112, (int *)v117 + 2, v92))
            {
              break;
            }
          }
          else if ((unint64_t)v51 <= (unint64_t)v112 - DWORD2(v117[0])
                 && *v51 == BYTE12(v117[0])
                 && (DWORD2(v117[0]) == 1 || v51[1] == BYTE13(v117[0])))
          {
            break;
          }
          ++v51;
        }
        while (v51 < v25);
      }
    }
LABEL_113:
    if (v97 < 0)
      break;
    if (!(_DWORD)v91)
    {
      if ((v85 & 0x200) != 0)
      {
        if (v50 > *((_QWORD *)&v111 + 1) + a4)
        {
          if (v95)
          {
            if (v50 >= (unint64_t)v51)
              goto LABEL_238;
LABEL_139:
            if (DWORD1(v117[0]))
            {
              if (v50 > *((_QWORD *)&v111 + 1)
                && _pcre2_was_newline_8((_BYTE *)v50, SDWORD1(v117[0]), *((unint64_t *)&v111 + 1), (int *)v117 + 2, v92))
              {
                goto LABEL_238;
              }
LABEL_147:
              ++v50;
              while (v50 < (unint64_t)v51)
              {
                v60 = *(_BYTE *)v50++;
                if ((v60 & 0xC0) != 0x80)
                {
                  --v50;
                  goto LABEL_139;
                }
              }
            }
            else if (v50 < *((_QWORD *)&v111 + 1) + (unint64_t)DWORD2(v117[0])
                   || *(unsigned __int8 *)(v50 - DWORD2(v117[0])) != BYTE12(v117[0])
                   || DWORD2(v117[0]) != 1 && *(unsigned __int8 *)(v50 - DWORD2(v117[0]) + 1) != BYTE13(v117[0]))
            {
              goto LABEL_147;
            }
          }
          else
          {
            while (v50 < (unint64_t)v51)
            {
              if (DWORD1(v117[0]))
              {
                if (v50 > *((_QWORD *)&v111 + 1)
                  && _pcre2_was_newline_8((_BYTE *)v50, SDWORD1(v117[0]), *((unint64_t *)&v111 + 1), (int *)v117 + 2, v92))
                {
                  break;
                }
              }
              else if (v50 >= *((_QWORD *)&v111 + 1) + (unint64_t)DWORD2(v117[0])
                     && *(unsigned __int8 *)(v50 - DWORD2(v117[0])) == BYTE12(v117[0])
                     && (DWORD2(v117[0]) == 1 || *(unsigned __int8 *)(v50 - DWORD2(v117[0]) + 1) == BYTE13(v117[0])))
              {
                break;
              }
              ++v50;
            }
          }
LABEL_238:
          if (*(_BYTE *)(v50 - 1) == 13)
          {
            v76 = (DWORD1(v117[0]) - 1) > 1 || v50 >= (unint64_t)v51;
            if (!v76 && *(_BYTE *)v50 == 10)
              ++v50;
          }
        }
LABEL_185:
        v63 = (unsigned __int16)v110;
        v25 = (unsigned __int8 *)v112;
        v27 = v50;
      }
      else
      {
        if (!v86)
          goto LABEL_185;
        do
        {
          v27 = v50;
          if (v50 >= (unint64_t)v51)
            break;
          ++v50;
        }
        while (((*(unsigned __int8 *)(v86 + ((unint64_t)*(unsigned __int8 *)v27 >> 3)) >> (*(_BYTE *)v27 & 7)) & 1) == 0);
        v63 = (unsigned __int16)v110;
        v25 = (unsigned __int8 *)v112;
        if ((_WORD)v110)
          v64 = 0;
        else
          v64 = v27 >= (unint64_t)v112;
        if (v64)
        {
LABEL_252:
          v14 = 0;
          v50 = v27;
          goto LABEL_254;
        }
      }
      v65 = v90;
      goto LABEL_187;
    }
    v53 = cstdlib_memchr((void *)v50, __c, (size_t)&v51[-v50]);
    v54 = v53;
    if (__c == v87)
    {
      if (v53)
        v27 = (unint64_t)v53;
      else
        v27 = (unint64_t)v51;
    }
    else
    {
      v61 = cstdlib_memchr((void *)v50, v87, (size_t)&v51[-v50]);
      if (v54)
      {
        if (v54 < v61 || v61 == 0)
          v27 = (unint64_t)v54;
        else
          v27 = (unint64_t)v61;
      }
      else if (v61)
      {
        v27 = (unint64_t)v61;
      }
      else
      {
        v27 = (unint64_t)v51;
      }
    }
    v65 = v90;
    v63 = (unsigned __int16)v110;
    v25 = (unsigned __int8 *)v112;
    if (!(_WORD)v110 && v27 >= (unint64_t)v112)
      goto LABEL_252;
LABEL_187:
    if (v63)
      goto LABEL_188;
    if ((uint64_t)&v25[-v27] < *(unsigned __int16 *)(a1 + 126))
      goto LABEL_248;
    if ((v65 & 0x80) == 0)
      goto LABEL_188;
    if ((uint64_t)&v25[-v27] > 1999)
      goto LABEL_188;
    v73 = (unsigned __int8 *)(v27 + v82);
    if (v27 + v82 <= (unint64_t)v83)
      goto LABEL_188;
    if (v73 >= v25)
    {
      v74 = (unsigned __int8 *)(v27 + v82);
    }
    else
    {
      v74 = (unsigned __int8 *)cstdlib_memchr((void *)(v27 + v82), v80, v25 - v73);
      if (v80 != v81)
      {
        if (v74)
          goto LABEL_247;
        v74 = (unsigned __int8 *)cstdlib_memchr(v73, v81, v25 - v73);
      }
      if (!v74)
        v74 = v25;
    }
LABEL_247:
    v83 = v74;
    if (v74 >= v25)
    {
LABEL_248:
      v14 = 0;
      v50 = v27;
      goto LABEL_255;
    }
LABEL_188:
    v50 = v27;
    LOWORD(v27) = v89;
LABEL_189:
    if (v50 > v94)
      goto LABEL_249;
    *(_QWORD *)&v120 = v50 - (_QWORD)a2;
    DWORD2(v123) |= 1u;
    *(_QWORD *)&v113 = v50;
    *((_QWORD *)&v113 + 1) = v50;
    DWORD2(v106) = 0;
    *((_QWORD *)&v109 + 1) = 0;
    HIDWORD(v116) = 0;
    matched = match_1((unsigned __int8 *)v50, (unsigned __int8 *)v111, (_QWORD *)(a6 + 80), *(unsigned __int16 *)(a6 + 74), *(unsigned __int16 *)(a1 + 128), v93, (uint64_t)&v101);
    v67 = HIDWORD(v106) != 0;
    v68 = v47 == 0;
    v69 = !v67 || !v68;
    if (v67 && v68)
      v47 = v113;
    v70 = v100;
    if (!v69)
      v70 = v50;
    v100 = v70;
    v14 = 0;
    switch(matched)
    {
      case 0xFFFFFC1B:
        goto LABEL_255;
      case 0xFFFFFC1C:
      case 0xFFFFFC1F:
        goto LABEL_198;
      case 0xFFFFFC1D:
        v71 = (unsigned __int8 *)*((_QWORD *)&v115 + 1);
        if (*((_QWORD *)&v115 + 1) > v50)
          goto LABEL_205;
        goto LABEL_198;
      case 0xFFFFFC1E:
        LODWORD(v117[0]) = HIDWORD(v116);
        v71 = (unsigned __int8 *)v50;
        goto LABEL_205;
      default:
        v14 = matched;
        if ((_DWORD)matched)
          goto LABEL_255;
LABEL_198:
        LODWORD(v117[0]) = 0;
        v71 = (unsigned __int8 *)(v50 + 1);
        if (!v95 || v71 >= v25)
          goto LABEL_205;
        v72 = &v25[~v50];
        break;
    }
    while ((*v71 & 0xC0) == 0x80)
    {
      ++v71;
      if (!--v72)
      {
        v71 = v25;
        break;
      }
    }
LABEL_205:
    if ((v27 & 0x100) != 0)
    {
      if (DWORD1(v117[0]))
      {
        if (v50 < (unint64_t)v112
          && _pcre2_is_newline_8((unsigned __int8 *)v50, SDWORD1(v117[0]), v112, (int *)v117 + 2, v92))
        {
          goto LABEL_249;
        }
      }
      else if (v50 <= (unint64_t)v112 - DWORD2(v117[0])
             && *(unsigned __int8 *)v50 == BYTE12(v117[0])
             && (DWORD2(v117[0]) == 1 || *(unsigned __int8 *)(v50 + 1) == BYTE13(v117[0])))
      {
LABEL_249:
        v14 = 0;
        goto LABEL_255;
      }
    }
    if (v97 < 0 || v71 > v25)
    {
      v14 = 0;
      v50 = (unint64_t)v71;
      goto LABEL_255;
    }
    if (v71 > __s
      && *(v71 - 1) == 13
      && v71 < v25
      && *v71 == 10
      && (*(_BYTE *)(a1 + 97) & 8) == 0
      && ((DWORD1(v117[0]) - 1) < 2 || DWORD2(v117[0]) == 2))
    {
      ++v71;
    }
    *(_QWORD *)&v114 = 0;
    v50 = (unint64_t)v71;
  }
  if (!v84)
    goto LABEL_185;
  if (v50 >= (unint64_t)v51)
    goto LABEL_253;
  v55 = *(unsigned __int8 *)v50;
  if ((_DWORD)v91)
  {
    v57 = (_DWORD)v55 != __c && (_DWORD)v55 != v87;
    v58 = v86;
    if (!v57 || v86 == 0)
    {
      if (v57)
        goto LABEL_253;
      goto LABEL_185;
    }
  }
  else
  {
    v58 = v86;
    if (!v86)
      goto LABEL_253;
  }
  if (((*(unsigned __int8 *)(v58 + (v55 >> 3)) >> (v55 & 7)) & 1) != 0)
    goto LABEL_185;
LABEL_253:
  v14 = 0;
LABEL_254:
  v25 = v51;
LABEL_255:
  if ((_OWORD *)v103 != v104)
    (*((void (**)(_QWORD, _QWORD))&v101 + 1))(v103, v102);
  *(_QWORD *)(a6 + 24) = a1;
  *(_QWORD *)(a6 + 32) = a2;
  *(_QWORD *)(a6 + 40) = v114;
  *(_WORD *)(a6 + 72) = 0;
  if ((_DWORD)v14 == 1)
  {
    if ((SDWORD2(v109) & 0x80000000) == 0)
      v77 = DWORD2(v109);
    else
      v77 = DWORD2(v109) + 1;
    v78 = v77 >> 1;
    if (SDWORD2(v109) < 2 * *(unsigned __int16 *)(a6 + 74))
      v14 = (v78 + 1);
    else
      v14 = 0;
    *(_DWORD *)(a6 + 76) = v14;
    *(_QWORD *)(a6 + 64) = v50 - (_QWORD)a2;
    v79 = *((_QWORD *)&v112 + 1);
    if (*((_QWORD *)&v113 + 1) > *((_QWORD *)&v112 + 1))
      v79 = *((_QWORD *)&v113 + 1);
    *(_QWORD *)(a6 + 48) = v113 - (_QWORD)a2;
    *(_QWORD *)(a6 + 56) = v79 - (_QWORD)a2;
  }
  else
  {
    *(_QWORD *)(a6 + 40) = *((_QWORD *)&v114 + 1);
    if ((_DWORD)v14 == -2 || !(_DWORD)v14)
    {
      if (v100)
      {
        *(_QWORD *)(a6 + 80) = v100 - (_QWORD)a2;
        *(_QWORD *)(a6 + 88) = v25 - a2;
        *(_QWORD *)(a6 + 56) = v25 - a2;
        *(_QWORD *)(a6 + 64) = v100 - (_QWORD)a2;
        *(_QWORD *)(a6 + 48) = v47 - (_QWORD)a2;
        v14 = 4294967294;
      }
      else
      {
        v14 = 0xFFFFFFFFLL;
      }
    }
    *(_DWORD *)(a6 + 76) = v14;
  }
  return v14;
}

uint64_t match_1(unsigned __int8 *a1, unsigned __int8 *a2, _QWORD *a3, unsigned int a4, int a5, unsigned __int8 *a6, uint64_t a7)
{
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unsigned int v17;
  _WORD *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned __int8 *v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned __int8 *v36;
  int v37;
  char *v38;
  unsigned int v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  unsigned __int8 *v51;
  int v52;
  unsigned int v53;
  size_t *v54;
  unsigned int v55;
  int v56;
  _WORD *v57;
  unint64_t *v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  int v66;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  unsigned int v70;
  unint64_t v71;
  int v72;
  uint64_t v74;
  unint64_t v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned int v80;
  unint64_t v81;
  unsigned int v82;
  int v83;
  int v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  _BOOL4 v91;
  unsigned __int8 *v92;
  unsigned int v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  unsigned int v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  BOOL v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned __int8 *v107;
  uint64_t v108;
  int64_t v109;
  unsigned __int8 *v110;
  int v111;
  unsigned int v112;
  int v113;
  int v114;
  int v115;
  unsigned __int8 *v116;
  unsigned __int8 *v117;
  uint64_t v118;
  unsigned __int8 *v119;
  unsigned int v120;
  unint64_t v121;
  unsigned __int8 **v122;
  unsigned __int8 *v123;
  unsigned int v124;
  _WORD *v125;
  unint64_t *v126;
  unsigned __int8 *v127;
  uint64_t v128;
  unsigned int v129;
  int v130;
  unint64_t *v131;
  unsigned __int8 *v132;
  uint64_t v133;
  int v134;
  int v135;
  unsigned __int8 *v136;
  unsigned __int8 *v137;
  unsigned __int8 *v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  int v145;
  unsigned __int8 *v146;
  unint64_t v147;
  unsigned __int8 *v148;
  uint64_t v149;
  unsigned __int8 *v150;
  unsigned __int8 *v151;
  unsigned __int8 *v152;
  unint64_t v153;
  unsigned __int8 *v154;
  int v155;
  int v156;
  int v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  unsigned __int8 *v161;
  unint64_t v162;
  unsigned __int8 *v163;
  unsigned int v164;
  unsigned __int8 *v165;
  uint64_t v166;
  int v167;
  unsigned __int8 *v168;
  uint64_t v169;
  int is_newline_8;
  uint64_t v171;
  unsigned int v172;
  unsigned __int8 *v173;
  unsigned int v174;
  unsigned __int8 *v175;
  uint64_t v176;
  int v177;
  unsigned __int8 *v178;
  uint64_t v179;
  int v180;
  unsigned __int8 *v181;
  unint64_t v182;
  int v183;
  unint64_t v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  unsigned int v190;
  int v191;
  unint64_t v192;
  unsigned int *v193;
  int v194;
  int *v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  unint64_t v199;
  unsigned __int8 *v200;
  int v201;
  int v202;
  int v203;
  int v204;
  uint64_t v205;
  int v206;
  int v207;
  int v208;
  uint64_t v209;
  unsigned __int8 *v210;
  int v211;
  unint64_t v212;
  unsigned __int8 *v213;
  unsigned int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  unsigned int v219;
  unint64_t v220;
  unsigned __int8 *v221;
  unsigned int v222;
  unsigned int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  uint64_t v229;
  unint64_t v230;
  unsigned __int8 *v231;
  unsigned __int8 *v232;
  unsigned int v233;
  unsigned __int8 *v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  uint64_t v239;
  unint64_t v240;
  unsigned __int8 *v241;
  unsigned __int8 *v242;
  char v243;
  unsigned int v244;
  unsigned int v245;
  uint64_t v246;
  uint64_t v247;
  unsigned __int8 *v248;
  int v249;
  int v250;
  int v251;
  unsigned int v252;
  unint64_t v253;
  unsigned __int8 *v254;
  int v255;
  unsigned int v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  uint64_t v262;
  unint64_t v263;
  unsigned __int8 *v264;
  int v265;
  uint64_t v267;
  unint64_t v268;
  unsigned __int8 *v269;
  unsigned __int8 *v270;
  unsigned __int8 *v271;
  unsigned int v272;
  unint64_t v273;
  unsigned int v274;
  int v275;
  uint64_t v276;
  int v277;
  int v278;
  int v279;
  unint64_t v280;
  unsigned __int8 *v281;
  int v282;
  unsigned int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  unsigned __int8 *v290;
  unsigned __int8 *v291;
  unsigned int v292;
  unint64_t v293;
  unsigned int v294;
  int v295;
  uint64_t v296;
  int v297;
  int v298;
  int v299;
  unsigned __int8 *v301;
  unsigned int v302;
  unint64_t v303;
  unsigned __int8 *v304;
  unsigned int v305;
  unint64_t v306;
  int v307;
  unsigned __int8 *v309;
  unsigned __int8 *v310;
  unsigned __int8 *v311;
  uint64_t v312;
  unsigned int v313;
  unint64_t v314;
  uint64_t v315;
  unsigned __int8 *v316;
  unsigned __int8 **v317;
  unsigned __int8 *v318;
  void *v319;
  unsigned __int8 *v320;
  uint64_t v321;
  int v322;
  unsigned int v323;
  unsigned __int8 *v324;
  uint64_t v325;
  int v326;
  unsigned int v327;
  int v328;
  unsigned __int8 *v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  unint64_t v333;
  unsigned __int8 *v334;
  unsigned int v335;
  unsigned __int8 *v336;
  unsigned int v337;
  int v338;
  int v339;
  int v340;
  int v341;
  uint64_t v342;
  unint64_t v343;
  unsigned __int8 *v344;
  unsigned __int8 *v345;
  unsigned int v346;
  unint64_t v347;
  unsigned int v348;
  int v349;
  uint64_t v350;
  int v351;
  int v352;
  int v353;
  uint64_t v354;
  int matched;
  unsigned int v356;
  unsigned __int8 *v357;
  unsigned __int8 *v358;
  int v359;
  unsigned __int8 *v360;
  _WORD *v361;
  uint64_t v362;
  unsigned int v363;
  size_t *v364;
  unsigned __int8 *v365;
  unsigned int v366;
  int v367;
  _QWORD *v368;
  size_t v369;
  unsigned __int8 *v370;
  int v371;
  unsigned int v372;
  _WORD *v373;
  unsigned int v374;
  unsigned __int8 *v375;
  unsigned int v376;
  uint64_t v377;
  unsigned __int8 *v378;
  size_t *v379;
  int v380;
  _QWORD *v381;
  size_t v382;
  unsigned __int8 *v383;
  int v384;
  unsigned int v385;
  unsigned __int8 *v386;
  unsigned __int8 *v387;
  unint64_t v388;
  unsigned __int8 *v389;
  unsigned int v390;
  unsigned __int8 *v391;
  unsigned int v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  int v398;
  unsigned int v399;
  int v400;
  int v401;
  uint64_t v402;
  int v403;
  int v404;
  int v405;
  unsigned int v406;
  int v407;
  unint64_t v409;
  unsigned __int8 *v410;
  unsigned int v411;
  uint64_t v412;
  unsigned int v413;
  int v414;
  int v415;
  int v416;
  int v417;
  int v418;
  unint64_t v419;
  int v420;
  unsigned int v421;
  int v422;
  int v423;
  uint64_t v424;
  int v425;
  int v426;
  int v427;
  unint64_t v428;
  int v429;
  unsigned int v430;
  int v431;
  int v432;
  uint64_t v433;
  int v434;
  int v435;
  int v436;
  unint64_t v437;
  int v438;
  unsigned int v439;
  int v440;
  int v441;
  uint64_t v442;
  int v443;
  int v444;
  int v445;
  unint64_t v446;
  int v447;
  unsigned int v448;
  int v449;
  int v450;
  uint64_t v451;
  int v452;
  int v453;
  int v454;
  _BOOL4 v456;
  unint64_t v457;
  unsigned int *v458;
  int v459;
  unsigned int v460;
  int v461;
  int v462;
  int v463;
  int v464;
  int v465;
  unsigned int *v466;
  unsigned int v467;
  unint64_t v468;
  unsigned __int8 *v469;
  int v470;
  unsigned int v471;
  int v472;
  int v473;
  int v474;
  int v475;
  int v476;
  BOOL v478;
  int v479;
  unsigned __int8 *v480;
  unint64_t v481;
  uint64_t v482;
  unsigned int v483;
  unsigned int v484;
  unsigned int v485;
  unsigned __int8 **v486;
  unsigned __int8 *v487;
  unsigned __int8 *v488;
  unint64_t v489;
  unsigned __int8 *v490;
  uint64_t v491;
  unsigned __int8 *v492;
  unsigned __int8 **v493;
  unsigned __int8 *v494;
  _BYTE *v495;
  _BYTE *v496;
  _BYTE *v497;
  _BYTE *v498;
  unsigned int v499;
  int v500;
  unsigned int v501;
  int v502;
  unsigned int v503;
  unsigned int v504;
  unsigned int v505;
  unsigned int v506;
  int v507;
  unsigned __int8 *v508;
  unsigned int v509;
  unint64_t v510;
  int v511;
  unsigned __int8 *v512;
  unsigned __int8 *v513;
  unsigned __int8 *v514;
  unsigned __int8 *v515;
  int v516;
  unsigned int v517;
  uint64_t v518;
  unsigned int v519;
  int v520;
  unsigned __int8 *v521;
  int v522;
  int v523;
  int v524;
  unsigned int v525;
  unsigned __int8 *v526;
  uint64_t v527;
  unsigned int v528;
  uint64_t v529;
  int v530;
  int v531;
  int v532;
  int v533;
  _BOOL4 v534;
  uint64_t v535;
  unsigned __int8 *v536;
  int v537;
  unsigned __int8 *v538;
  unint64_t v539;
  int v540;
  unsigned int v541;
  int v542;
  int v543;
  unint64_t v544;
  int v545;
  unsigned __int8 v546;
  int v547;
  unsigned __int8 *v548;
  int v549;
  unsigned __int8 *v550;
  int v551;
  unsigned __int8 *v552;
  int v553;
  unsigned __int8 *v554;
  int v555;
  unsigned __int8 *v556;
  int v557;
  unsigned __int8 *v558;
  int v559;
  unsigned __int8 *v560;
  int v561;
  int v562;
  unsigned __int8 *v563;
  int v564;
  unsigned __int8 *v565;
  int v566;
  unsigned __int8 *v567;
  int v568;
  unsigned __int8 *v569;
  int v570;
  int v571;
  unsigned __int8 v572;
  unsigned int v573;
  unsigned __int8 *v574;
  unsigned __int8 *v575;
  unint64_t v576;
  unsigned __int8 *v577;
  uint64_t v578;
  unsigned int v579;
  unsigned __int8 *v580;
  uint64_t v581;
  unint64_t v582;
  unsigned __int8 *v583;
  uint64_t v584;
  unint64_t v585;
  unsigned __int8 *v586;
  uint64_t v587;
  unint64_t v588;
  unsigned __int8 *v589;
  uint64_t v590;
  unint64_t v591;
  unsigned __int8 *v592;
  uint64_t v593;
  unint64_t v594;
  unsigned __int8 *v595;
  unsigned __int8 *v596;
  unsigned int v597;
  uint64_t v598;
  int v599;
  _WORD *v600;
  unint64_t *v601;
  unsigned __int8 *v602;
  uint64_t v603;
  uint64_t v604;
  unsigned int v605;
  unsigned int v606;
  unint64_t v607;
  unsigned __int8 *v608;
  unsigned int v609;
  unsigned __int8 *v610;
  unsigned int v611;
  uint64_t v612;
  unint64_t v613;
  unsigned __int8 *v614;
  int v615;
  uint64_t v616;
  unint64_t v617;
  unsigned __int8 *v618;
  int v619;
  uint64_t v620;
  unint64_t v621;
  unsigned __int8 *v622;
  int v623;
  uint64_t v624;
  unint64_t v625;
  unsigned __int8 *v626;
  int v627;
  uint64_t v628;
  unint64_t v629;
  unsigned __int8 *v630;
  int v631;
  unint64_t v632;
  unsigned __int8 *v633;
  unsigned int v634;
  unsigned __int8 *v635;
  uint64_t v636;
  unint64_t v637;
  unsigned __int8 *v638;
  int v639;
  unint64_t v640;
  unsigned int v641;
  unsigned __int8 *v642;
  uint64_t v643;
  unint64_t v644;
  unsigned __int8 *v645;
  int v646;
  unsigned __int8 *v647;
  unint64_t v648;
  unsigned int v649;
  int v650;
  uint64_t v651;
  unsigned int v652;
  unsigned __int8 *v653;
  unint64_t v654;
  unsigned int v655;
  unsigned __int8 *v656;
  unsigned int v657;
  unsigned int v658;
  unsigned int v659;
  unsigned __int8 *v660;
  unsigned int v661;
  unint64_t v662;
  int v663;
  uint64_t v664;
  int v665;
  int v666;
  int v667;
  int v668;
  int v669;
  uint64_t v670;
  unint64_t v671;
  unsigned __int8 *v672;
  unsigned int v673;
  int v674;
  int v675;
  int v676;
  int v677;
  unsigned int v678;
  uint64_t v679;
  _WORD *v680;
  unint64_t *v681;
  unsigned __int8 *v682;
  unsigned int v683;
  unint64_t v684;
  int v685;
  int v686;
  int v687;
  uint64_t v688;
  int v689;
  int v690;
  int v691;
  int v692;
  uint64_t v693;
  unint64_t *v694;
  unsigned __int8 *v695;
  unsigned __int8 *v696;
  unsigned int v697;
  unsigned int v698;
  unint64_t v699;
  uint64_t v700;
  unsigned int v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  unsigned int v706;
  unint64_t v707;
  unsigned int v708;
  int v709;
  uint64_t v710;
  unsigned int v711;
  int v713;
  int v714;
  int v715;
  unsigned int v716;
  unint64_t v717;
  unsigned int v718;
  uint64_t v719;
  int v720;
  int v721;
  int v722;
  int v723;
  unsigned int v724;
  unint64_t v725;
  unsigned int v726;
  uint64_t v727;
  int v728;
  int v729;
  int v730;
  int v731;
  unsigned int v732;
  unint64_t v733;
  unsigned int v734;
  uint64_t v735;
  int v736;
  int v737;
  int v738;
  int v739;
  unsigned int v740;
  unint64_t v741;
  unsigned int v742;
  uint64_t v743;
  int v744;
  int v745;
  int v746;
  int v747;
  unsigned int v748;
  unint64_t v749;
  unsigned int v750;
  uint64_t v751;
  int v752;
  int v753;
  int v754;
  int v755;
  _BOOL4 v757;
  unint64_t v758;
  unsigned int v759;
  uint64_t v760;
  int v761;
  int v762;
  int v763;
  int v764;
  unsigned int *v765;
  unsigned int v766;
  unsigned int v767;
  unint64_t v768;
  unsigned int v769;
  uint64_t v770;
  int v771;
  int v772;
  int v773;
  int v774;
  _BOOL4 v777;
  unsigned int v778;
  unsigned int v779;
  unsigned __int8 *v780;
  unint64_t v781;
  unsigned int v782;
  unsigned __int8 *v783;
  int v784;
  int v785;
  int v786;
  int v787;
  int v788;
  unint64_t v789;
  unsigned __int8 *v790;
  unsigned int v791;
  int v792;
  int v793;
  int v794;
  int v795;
  int v796;
  int v797;
  unint64_t v798;
  unsigned __int8 *v799;
  unsigned int v800;
  int v801;
  int v802;
  int v803;
  int v804;
  int v805;
  int v806;
  int v807;
  unint64_t v808;
  unsigned int v809;
  unsigned int v810;
  int v811;
  int v812;
  int v813;
  int v814;
  int v815;
  BOOL v816;
  unint64_t v817;
  unsigned int v818;
  unsigned int v819;
  int v820;
  int v821;
  int v822;
  int v823;
  int v824;
  BOOL v825;
  int v826;
  int v827;
  int v828;
  unsigned int v829;
  unint64_t v830;
  int v831;
  unsigned int v832;
  int v833;
  uint64_t v834;
  int v835;
  int v836;
  int v837;
  unsigned int v838;
  _BOOL4 v839;
  unsigned int v840;
  int v842;
  unsigned int v843;
  unsigned int v844;
  unsigned int v845;
  int v846;
  int v847;
  int v848;
  int v849;
  int v850;
  int v851;
  int v852;
  int v853;
  int v854;
  int v855;
  int v856;
  int v857;
  int v858;
  int v859;
  int v860;
  int v861;
  int v862;
  int v863;
  int v864;
  int v865;
  int v866;
  int v867;
  int v868;
  int v869;
  int v870;
  int v871;
  int v872;
  int v873;
  int v874;
  int v875;
  int v876;
  int v877;
  int v878;
  int v879;
  int v880;
  int v881;
  int v882;
  int v883;
  int v884;
  int v885;
  int v886;
  int v887;
  int v888;
  int v889;
  int v890;
  uint64_t v891;
  unsigned int v892;
  int v893;
  int v895;
  int v896;
  BOOL v897;
  _BOOL4 v898;
  BOOL v899;
  _BOOL4 v900;
  BOOL v901;
  int *v902;
  int v903;
  unsigned int v906;
  unint64_t v907;
  unsigned int v908;
  int v909;
  uint64_t v910;
  int v911;
  int v912;
  int v913;
  unsigned int v914;
  unint64_t v915;
  unsigned int v916;
  int v917;
  uint64_t v918;
  int v919;
  int v920;
  int v921;
  unsigned int v922;
  unint64_t v923;
  unsigned int v924;
  int v925;
  uint64_t v926;
  int v927;
  int v928;
  int v929;
  unsigned int v930;
  unint64_t v931;
  unsigned int v932;
  int v933;
  uint64_t v934;
  int v935;
  int v936;
  int v937;
  unsigned int v938;
  unint64_t v939;
  unsigned int v940;
  int v941;
  uint64_t v942;
  int v943;
  int v944;
  int v945;
  unsigned int v946;
  unint64_t v947;
  unsigned int v948;
  int v949;
  uint64_t v950;
  int v951;
  int v952;
  int v953;
  unint64_t v954;
  int v955;
  uint64_t v956;
  unsigned int v957;
  unsigned __int8 *v958;
  unint64_t v959;
  unsigned __int8 *v960;
  unint64_t *v961;
  unsigned __int8 *v962;
  unsigned int v963;
  unsigned int v964;
  unint64_t v965;
  unsigned int v966;
  int v967;
  uint64_t v968;
  uint64_t v969;
  unsigned __int8 *v970;
  int v971;
  int v972;
  int v973;
  unsigned int v974;
  unsigned int v975;
  unint64_t v976;
  unsigned int v977;
  unint64_t v978;
  unsigned int v979;
  unint64_t v980;
  unsigned int v981;
  unint64_t v982;
  unsigned int v983;
  unint64_t v984;
  unsigned int v985;
  unint64_t v986;
  uint64_t v987;
  int v988;
  uint64_t v989;
  unsigned int v990;
  unsigned int v991;
  unint64_t v992;
  int v993;
  unsigned __int8 *v994;
  uint64_t v995;
  unsigned int v996;
  unint64_t v997;
  int v998;
  unsigned int v999;
  unint64_t v1000;
  int v1001;
  unsigned int v1002;
  unint64_t v1003;
  int v1004;
  unsigned int v1005;
  unint64_t v1006;
  int v1007;
  unsigned int v1008;
  unsigned __int8 *v1009;
  unsigned __int8 *v1010;
  unsigned __int8 *v1011;
  int v1012;
  int v1013;
  int v1014;
  unsigned int v1015;
  int v1016;
  unsigned __int8 *v1017;
  int v1018;
  int v1019;
  int v1020;
  BOOL v1023;
  BOOL v1024;
  int v1025;
  BOOL v1027;
  BOOL v1028;
  unsigned __int8 *v1029;
  unsigned int v1030;
  int v1031;
  unint64_t v1032;
  unsigned __int8 *v1033;
  unsigned __int8 *v1034;
  unsigned int v1035;
  int v1036;
  unsigned __int8 *v1037;
  int v1038;
  int v1039;
  int v1040;
  unsigned int v1041;
  unsigned int v1042;
  unsigned int v1043;
  unsigned int v1044;
  unsigned __int8 *v1045;
  unsigned int v1046;
  unsigned __int8 *v1047;
  unsigned __int8 *v1048;
  unsigned __int8 *v1049;
  unsigned __int8 *v1050;
  uint64_t v1051;
  unsigned __int8 *v1052;
  unsigned int v1053;
  unsigned int v1054;
  unsigned __int8 *v1055;
  unsigned int v1056;
  unsigned int v1057;
  int v1058;
  unsigned int v1059;
  unsigned int v1060;
  int v1061;
  unsigned int v1062;
  unsigned int v1063;
  int v1064;
  unsigned int v1065;
  unsigned int v1066;
  int v1067;
  unsigned int v1068;
  unsigned int v1069;
  unsigned __int8 *v1070;
  uint64_t v1071;
  int v1072;
  int v1073;
  int v1074;
  uint64_t v1075;
  unsigned __int8 *v1076;
  unsigned int v1077;
  unsigned int v1078;
  unsigned __int8 *v1079;
  size_t v1080;
  unsigned __int8 *v1081;
  uint64_t v1082;
  int v1083;
  size_t v1084;
  unsigned __int8 *v1085;
  unsigned __int8 *v1086;
  uint64_t v1087;
  int v1088;
  unsigned int v1089;
  unsigned int v1090;
  unsigned int v1091;
  unsigned int v1092;
  unsigned int v1093;
  unsigned int v1094;
  unsigned int v1095;
  unsigned int v1096;
  unsigned int v1097;
  unsigned int v1098;
  uint64_t v1099;
  unsigned int v1100;
  unsigned int v1101;
  unsigned int v1102;
  unsigned int v1103;
  uint64_t v1104;
  unsigned __int8 *v1105;
  unint64_t v1106;
  unsigned int v1107;
  unsigned int v1108;
  uint64_t v1109;
  int v1110;
  unsigned int v1111;
  unsigned int v1112;
  unsigned int v1113;
  unsigned int v1114;
  unsigned __int8 *v1115;
  uint64_t v1116;
  unsigned __int8 *v1117;
  unsigned __int8 *v1118;
  uint64_t v1119;
  unsigned __int8 *v1120;
  int v1121;
  unsigned __int8 *v1122;
  int v1123;
  unsigned __int8 *v1124;
  int v1125;
  unsigned __int8 *v1126;
  uint64_t v1127;
  uint64_t v1128;
  int v1129;
  unsigned __int8 *v1130;
  uint64_t v1131;
  unsigned __int8 *v1132;
  int v1133;
  int v1134;
  int v1135;
  int v1136;
  int v1137;
  int v1138;
  int v1139;
  int v1140;
  int v1141;
  int v1142;
  int v1143;
  int v1144;
  int v1145;
  int v1146;
  int v1147;
  int v1148;
  int v1149;
  BOOL v1150;
  BOOL v1155;
  BOOL v1156;
  unsigned __int8 *v1157;
  uint64_t v1158;
  unsigned int v1159;
  unsigned int v1160;
  unsigned __int8 *v1161;
  uint64_t v1162;
  int v1163;
  unsigned int v1164;
  unsigned int v1165;
  unsigned int v1166;
  unsigned int v1167;
  unsigned int v1168;
  unsigned int v1169;
  unsigned int v1170;
  unsigned int v1171;
  unsigned int v1172;
  unsigned int v1173;
  unsigned int v1174;
  unsigned int v1175;
  unsigned int v1176;
  unsigned int v1177;
  int v1178;
  unsigned int v1179;
  unsigned int v1180;
  unsigned int v1181;
  unsigned int v1182;
  unsigned int v1183;
  unsigned int v1184;
  unsigned int v1185;
  unsigned int v1186;
  unsigned int v1187;
  unsigned __int8 *v1188;
  unsigned int v1189;
  unsigned __int8 *v1190;
  uint64_t v1191;
  uint64_t v1192;
  unsigned __int8 *v1193;
  unsigned __int8 *v1194;
  int v1195;
  unsigned __int8 *v1196;
  char v1197;
  unsigned __int8 *v1198;
  char v1199;
  unsigned __int8 *v1200;
  char v1201;
  unsigned __int8 *v1202;
  unsigned int v1203;
  unsigned __int8 *v1204;
  unsigned int v1205;
  int v1206;
  int v1207;
  int v1208;
  BOOL v1209;
  unsigned __int8 *v1210;
  unsigned __int8 *v1211;
  char v1212;
  unsigned __int8 *v1213;
  uint64_t v1214;
  int v1215;
  unsigned __int8 *v1216;
  int v1217;
  unsigned __int8 *v1218;
  int v1219;
  unsigned __int8 *v1220;
  int v1221;
  unsigned __int8 *v1222;
  int v1223;
  unsigned __int8 *v1224;
  int v1225;
  unsigned __int8 *v1226;
  int v1227;
  unsigned __int8 *v1228;
  int v1229;
  unsigned __int8 *v1230;
  int v1231;
  unsigned __int8 *v1232;
  uint64_t v1233;
  unsigned __int8 *v1234;
  uint64_t v1235;
  unsigned __int8 *v1236;
  BOOL v1237;
  int v1238;
  int v1239;
  int v1240;
  int v1241;
  int v1242;
  int v1243;
  int v1244;
  int v1245;
  int v1246;
  int v1247;
  int v1248;
  int v1249;
  int v1250;
  int v1251;
  int v1252;
  int v1253;
  int v1254;
  int v1255;
  int v1256;
  int v1257;
  int v1258;
  int v1259;
  int v1260;
  int v1261;
  int v1262;
  int v1263;
  int v1264;
  int v1265;
  unsigned __int8 v1266;
  BOOL v1267;
  _BOOL4 v1271;
  unsigned int *v1272;
  unsigned int v1273;
  _BOOL4 v1276;
  unsigned int v1277;
  int v1278;
  int v1280;
  int v1281;
  int v1282;
  char v1283;
  unsigned __int8 *v1284;
  unsigned int v1285;
  unsigned int v1286;
  int v1287;
  int v1288;
  int v1289;
  unsigned __int8 v1290;
  int v1291;
  int v1292;
  int v1293;
  unsigned __int8 *v1294;
  unsigned __int8 *v1295;
  unint64_t *v1296;
  uint64_t v1297;
  size_t v1298;
  unint64_t v1299;
  unint64_t v1300;
  unint64_t v1301;
  unint64_t *v1302;
  char *v1303;
  char *v1304;
  uint64_t v1305;
  uint64_t v1306;
  unsigned __int8 *v1307;
  char v1308;
  uint64_t v1309;
  unsigned __int8 *v1310;
  unsigned int v1311;
  unsigned int v1312;
  char v1313;
  _QWORD *v1314;
  uint64_t v1315;
  unsigned __int8 **v1316;
  unsigned __int8 *v1317;
  unsigned __int8 *v1318;
  unsigned __int8 *v1319;
  int v1320;
  BOOL v1321;
  unsigned int v1322;
  unsigned int v1323;
  int v1324;
  unsigned __int8 *v1325;
  unsigned int v1326;
  int v1327;
  unint64_t *v1328;
  unsigned __int8 *v1329;
  unsigned int v1330;
  unsigned int v1331;
  uint64_t v1332;
  unsigned __int8 *v1333;
  char v1334;
  uint64_t v1335;
  int v1336;
  int v1337;
  int v1338;
  unsigned int v1339;
  unsigned __int8 *v1340;
  unsigned int v1341;
  uint64_t v1343;
  unsigned int v1344;
  int v1345;
  unsigned int v1346;
  unint64_t v1347;
  unsigned int v1348;
  unsigned __int8 *v1349;
  uint64_t v1350;
  _QWORD *v1354;
  int *v1355;
  uint64_t v1356;
  size_t __n;
  unsigned __int8 *v1358;
  unint64_t *v1359;
  _DWORD *v1360;
  int v1361;
  _WORD *v1362;
  int v1363;
  unsigned __int8 *v1364;
  unsigned __int8 *v1365;
  unsigned __int8 *v1366;

  v7 = a7;
  v8 = a6;
  v1354 = 0;
  v10 = 0;
  v1358 = 0;
  v11 = 0;
  v12 = 0;
  v1366 = 0;
  v13 = *(_DWORD *)(a7 + 232);
  v1363 = v13 & 0x80000;
  v1361 = (v13 >> 19) & 1;
  __n = (size_t)(a6 - 80);
  v14 = *(_QWORD *)(a7 + 32);
  *(_DWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 104) = 0xFFFFFFFFLL;
  *(_QWORD *)(v14 + 80) = a1;
  *(_QWORD *)(v14 + 88) = a1;
  *(_QWORD *)(v14 + 96) = 0;
  *(_OWORD *)(v14 + 112) = xmmword_214F46260;
  v15 = (unint64_t *)(a7 + 176);
  v16 = (unint64_t *)(a7 + 160);
  v1362 = (_WORD *)(a7 + 128);
  v1360 = (_DWORD *)(a7 + 76);
  v1355 = (int *)(a7 + 248);
  v1356 = -(uint64_t)a6;
LABEL_2:
  *(_DWORD *)(v14 + 52) = v12;
  *(_QWORD *)v14 = a2;
  *(_QWORD *)(v14 + 32) = v8;
  if (v12)
  {
    *(_QWORD *)(v14 + 112) = v14 - *(_QWORD *)(v7 + 32);
    if ((v12 & 0xFFFF0000) == 0x40000)
      *(_DWORD *)(v14 + 104) = (unsigned __int16)v12;
  }
  v17 = *(_DWORD *)(v7 + 72);
  *(_DWORD *)(v7 + 72) = v17 + 1;
  if (v17 >= *(_DWORD *)(v7 + 64))
    return 4294967249;
  if (v10 >= *(_DWORD *)(v7 + 68))
    return 4294967243;
  v18 = v1362;
  while (2)
  {
    v19 = *a2;
    *(_BYTE *)(v14 + 73) = v19;
    v20 = 4294967252;
    v21 = 0;
    switch(v19)
    {
      case 0u:
      case 0xA0u:
        if (*(_DWORD *)(v14 + 104) != -1)
        {
          v43 = (_QWORD *)v14;
          do
          {
            v44 = v43[14];
            if (v44 == -1)
              return 4294967252;
            v45 = *(_QWORD *)(v7 + 32) + v44;
            v43 = (_QWORD *)(v45 + v1356);
          }
          while (*(unsigned __int16 *)(v45 + 54) << 16 != 0x40000);
          v1358 = (unsigned __int8 *)v45;
          v43[10] = *(_QWORD *)(v14 + 80);
          v43[12] = *(_QWORD *)(v14 + 96);
          *v43 += 3;
          v14 = v45 + v1356;
          goto LABEL_2406;
        }
        v309 = *(unsigned __int8 **)(v14 + 80);
        v310 = *(unsigned __int8 **)(v14 + 88);
        if (v309 == v310)
        {
          v507 = *(_DWORD *)(v7 + 228);
          if ((v507 & 4) != 0
            || (v507 & 8) != 0 && v309 == (unsigned __int8 *)(*(_QWORD *)(v7 + 152) + *(_QWORD *)(v7 + 112)))
          {
            goto LABEL_1163;
          }
        }
        if ((unint64_t)v309 < *v16 && ((*(_DWORD *)(v7 + 232) | *(_DWORD *)(v7 + 228)) & 0x20000000) != 0)
        {
          v21 = 0;
          v20 = 0;
          if (!v19)
            goto LABEL_2412;
        }
        else
        {
          *(_QWORD *)(v7 + 168) = v309;
          *(_QWORD *)(v7 + 120) = *(_QWORD *)(v14 + 120);
          *(_QWORD *)(v7 + 192) = *(_QWORD *)(v14 + 96);
          if ((unint64_t)v309 > *(_QWORD *)(v7 + 184))
            *(_QWORD *)(v7 + 184) = v309;
          v1343 = *(_QWORD *)(v7 + 152);
          *a3 = &v310[-v1343];
          a3[1] = &v309[-v1343];
          if (a5 + 1 < a4)
            v1344 = a5 + 1;
          else
            v1344 = a4;
          v1345 = 2 * v1344;
          v1346 = 2 * v1344 - 2;
          cstdlib_memcpy(a3 + 2, (const void *)(v14 + 128), 8 * v1346);
          v1347 = (v1345 - 1);
          if (*(_QWORD *)(v14 + 120) + 2 <= v1347)
          {
            do
            {
              a3[v1347] = -1;
              v1347 = v1346;
              v102 = *(_QWORD *)(v14 + 120) + 2 > (unint64_t)v1346;
              v20 = 1;
              --v1346;
            }
            while (!v102);
          }
          else
          {
            return 1;
          }
        }
        return v20;
      case 1u:
        v136 = *(unsigned __int8 **)(v14 + 80);
        v137 = *(unsigned __int8 **)(v7 + 152);
        goto LABEL_178;
      case 2u:
        v136 = *(unsigned __int8 **)(v14 + 80);
        v137 = (unsigned __int8 *)(*(_QWORD *)(v7 + 152) + *(_QWORD *)(v7 + 112));
LABEL_178:
        if (v136 == v137)
          goto LABEL_2349;
        goto LABEL_2880;
      case 3u:
        *(_QWORD *)(v14 + 88) = *(_QWORD *)(v14 + 80);
        goto LABEL_2349;
      case 4u:
      case 5u:
        v46 = *(_QWORD *)(v14 + 80);
        if (v46 == *(_QWORD *)(v7 + 152))
          goto LABEL_586;
        if (!v1363)
        {
          v47 = (unsigned __int8 *)(v46 - 1);
          v48 = *(unsigned __int8 *)(v46 - 1);
          goto LABEL_581;
        }
        v47 = *(unsigned __int8 **)(v14 + 80);
        do
        {
          v49 = *--v47;
          v48 = v49;
        }
        while ((v49 & 0xC0) == 0x80);
        if (v48 < 0xC0)
          goto LABEL_581;
        v50 = v47[1] & 0x3F;
        if ((v48 & 0x20) == 0)
        {
          v48 = v47[1] & 0x3F | ((v48 & 0x1F) << 6);
          goto LABEL_581;
        }
        if ((v48 & 0x10) != 0)
        {
          if ((v48 & 8) != 0)
          {
            v846 = v47[2] & 0x3F;
            v847 = v47[3] & 0x3F;
            v848 = v47[4] & 0x3F;
            if ((v48 & 4) == 0)
            {
              v48 = ((v48 & 3) << 24) | (v50 << 18) | (v846 << 12) | (v847 << 6) | v848;
              goto LABEL_581;
            }
            v545 = ((v48 & 1) << 30) | (v50 << 24) | (v846 << 18) | (v847 << 12) | (v848 << 6);
            v546 = v47[5];
          }
          else
          {
            v545 = ((v48 & 7) << 18) | (v50 << 12) | ((v47[2] & 0x3F) << 6);
            v546 = v47[3];
          }
        }
        else
        {
          v545 = ((v48 & 0xF) << 12) | (v50 << 6);
          v546 = v47[2];
        }
        v48 = v545 & 0xFFFFFFC0 | v546 & 0x3F;
LABEL_581:
        if ((unint64_t)v47 < *v15)
          *v15 = (unint64_t)v47;
        if ((*(_BYTE *)(v7 + 234) & 2) != 0)
        {
          v322 = v48 == 95
              || (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                * _pcre2_ucd_stage2_8[v48 & 0x7F | (_pcre2_ucd_stage1_8[v48 >> 7] << 7)]])] & 0xFFFFFFFD) == 1;
        }
        else if (v48 > 0xFF)
        {
LABEL_586:
          v322 = 0;
        }
        else
        {
          v322 = (*(unsigned __int8 *)(*(_QWORD *)(v7 + 104) + v48) >> 4) & 1;
        }
        v495 = (_BYTE *)*v16;
        if (v46 >= *v16)
        {
          v501 = (unsigned __int16)*v18;
          if (*v18)
          {
            if (v46 > *v15)
            {
              *v1360 = 1;
              if (v501 > 1)
                return 4294967294;
            }
          }
          goto LABEL_971;
        }
        v496 = (_BYTE *)(v46 + 1);
        if (v1363)
        {
          v497 = (_BYTE *)(v46 + 1);
          if (v496 < v495)
          {
            v498 = &v495[~v46];
            v497 = (_BYTE *)(v46 + 1);
            while ((*v497 & 0xC0) == 0x80)
            {
              ++v497;
              if (!--v498)
              {
                v497 = (_BYTE *)*v16;
                break;
              }
            }
          }
          v499 = *(unsigned __int8 *)v46;
          if (v499 < 0xC0)
            goto LABEL_966;
          v500 = *v496 & 0x3F;
          if ((v499 & 0x20) != 0)
          {
            if ((v499 & 0x10) != 0)
            {
              if ((v499 & 8) != 0)
              {
                v888 = *(_BYTE *)(v46 + 2) & 0x3F;
                v889 = *(_BYTE *)(v46 + 3) & 0x3F;
                v890 = *(_BYTE *)(v46 + 4) & 0x3F;
                if ((v499 & 4) == 0)
                {
                  v499 = ((v499 & 3) << 24) | (v500 << 18) | (v888 << 12) | (v889 << 6) | v890;
                  goto LABEL_966;
                }
                v571 = ((v499 & 1) << 30) | (v500 << 24) | (v888 << 18) | (v889 << 12) | (v890 << 6);
                v572 = *(_BYTE *)(v46 + 5);
              }
              else
              {
                v571 = ((v499 & 7) << 18) | (v500 << 12) | ((*(_BYTE *)(v46 + 2) & 0x3F) << 6);
                v572 = *(_BYTE *)(v46 + 3);
              }
            }
            else
            {
              v571 = ((v499 & 0xF) << 12) | (v500 << 6);
              v572 = *(_BYTE *)(v46 + 2);
            }
            v499 = v571 & 0xFFFFFFC0 | v572 & 0x3F;
            goto LABEL_966;
          }
          v499 = v500 & 0xFFFFF83F | ((v499 & 0x1F) << 6);
        }
        else
        {
          v499 = *(unsigned __int8 *)v46;
          v497 = (_BYTE *)(v46 + 1);
        }
LABEL_966:
        if ((unint64_t)v497 > *(_QWORD *)(v7 + 184))
          *(_QWORD *)(v7 + 184) = v497;
        if ((*(_BYTE *)(v7 + 234) & 2) != 0)
        {
          v502 = v499 == 95
              || (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                * _pcre2_ucd_stage2_8[v499 & 0x7F | (_pcre2_ucd_stage1_8[v499 >> 7] << 7)]])] & 0xFFFFFFFD) == 1;
LABEL_972:
          *(_QWORD *)v14 = a2 + 1;
          if (*a2 == 5)
          {
            if (v502 != v322)
              goto LABEL_2406;
          }
          else if (v502 == v322)
          {
            goto LABEL_2406;
          }
          goto LABEL_2880;
        }
        if (v499 <= 0xFF)
        {
          v502 = (*(unsigned __int8 *)(*(_QWORD *)(v7 + 104) + v499) >> 4) & 1;
          goto LABEL_972;
        }
LABEL_971:
        v502 = 0;
        goto LABEL_972;
      case 6u:
        v138 = *(unsigned __int8 **)(v14 + 80);
        if ((unint64_t)v138 >= *v16)
          goto LABEL_1160;
        *(_QWORD *)(v14 + 80) = v138 + 1;
        v139 = *v138;
        if (v1363 && v139 >= 0xC0)
        {
          if ((v139 & 0x20) != 0)
          {
            v549 = v138[1] & 0x3F;
            if ((v139 & 0x10) != 0)
            {
              if ((v139 & 8) != 0)
              {
                v852 = v138[2] & 0x3F;
                v853 = v138[3] & 0x3F;
                v854 = v138[4] & 0x3F;
                if ((v139 & 4) != 0)
                {
                  v139 = ((v139 & 1) << 30) | (v549 << 24) | (v852 << 18) | (v853 << 12) | (v854 << 6) | v138[5] & 0x3F;
                  v550 = v138 + 6;
                }
                else
                {
                  v139 = ((v139 & 3) << 24) | (v549 << 18) | (v852 << 12) | (v853 << 6) | v854;
                  v550 = v138 + 5;
                }
              }
              else
              {
                v139 = ((v139 & 7) << 18) | (v549 << 12) | ((v138[2] & 0x3F) << 6) | v138[3] & 0x3F;
                v550 = v138 + 4;
              }
            }
            else
            {
              v139 = ((v139 & 0xF) << 12) | (v549 << 6) | v138[2] & 0x3F;
              v550 = v138 + 3;
            }
            *(_QWORD *)(v14 + 80) = v550;
          }
          else
          {
            *(_QWORD *)(v14 + 80) = v138 + 2;
            v139 = v138[1] & 0x3F | ((v139 & 0x1F) << 6);
          }
          if (v139 > 0xFF)
            goto LABEL_2349;
        }
        if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + v139) & 4) == 0)
          goto LABEL_2349;
        goto LABEL_1163;
      case 7u:
        v138 = *(unsigned __int8 **)(v14 + 80);
        if ((unint64_t)v138 >= *v16)
          goto LABEL_1160;
        *(_QWORD *)(v14 + 80) = v138 + 1;
        v140 = *v138;
        if (!v1363 || v140 < 0xC0)
          goto LABEL_2250;
        if ((v140 & 0x20) != 0)
        {
          v551 = v138[1] & 0x3F;
          if ((v140 & 0x10) != 0)
          {
            if ((v140 & 8) != 0)
            {
              v855 = v138[2] & 0x3F;
              v856 = v138[3] & 0x3F;
              v857 = v138[4] & 0x3F;
              if ((v140 & 4) != 0)
              {
                v140 = ((v140 & 1) << 30) | (v551 << 24) | (v855 << 18) | (v856 << 12) | (v857 << 6) | v138[5] & 0x3F;
                v552 = v138 + 6;
              }
              else
              {
                v140 = ((v140 & 3) << 24) | (v551 << 18) | (v855 << 12) | (v856 << 6) | v857;
                v552 = v138 + 5;
              }
            }
            else
            {
              v140 = ((v140 & 7) << 18) | (v551 << 12) | ((v138[2] & 0x3F) << 6) | v138[3] & 0x3F;
              v552 = v138 + 4;
            }
          }
          else
          {
            v140 = ((v140 & 0xF) << 12) | (v551 << 6) | v138[2] & 0x3F;
            v552 = v138 + 3;
          }
          *(_QWORD *)(v14 + 80) = v552;
        }
        else
        {
          *(_QWORD *)(v14 + 80) = v138 + 2;
          v140 = v138[1] & 0x3F | ((v140 & 0x1F) << 6);
        }
        if (v140 <= 0xFF)
        {
LABEL_2250:
          if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + v140) & 4) != 0)
            goto LABEL_2349;
        }
        goto LABEL_1163;
      case 8u:
        v138 = *(unsigned __int8 **)(v14 + 80);
        if ((unint64_t)v138 >= *v16)
          goto LABEL_1160;
        *(_QWORD *)(v14 + 80) = v138 + 1;
        v141 = *v138;
        if (v1363 && v141 >= 0xC0)
        {
          if ((v141 & 0x20) != 0)
          {
            v553 = v138[1] & 0x3F;
            if ((v141 & 0x10) != 0)
            {
              if ((v141 & 8) != 0)
              {
                v858 = v138[2] & 0x3F;
                v859 = v138[3] & 0x3F;
                v860 = v138[4] & 0x3F;
                if ((v141 & 4) != 0)
                {
                  v141 = ((v141 & 1) << 30) | (v553 << 24) | (v858 << 18) | (v859 << 12) | (v860 << 6) | v138[5] & 0x3F;
                  v554 = v138 + 6;
                }
                else
                {
                  v141 = ((v141 & 3) << 24) | (v553 << 18) | (v858 << 12) | (v859 << 6) | v860;
                  v554 = v138 + 5;
                }
              }
              else
              {
                v141 = ((v141 & 7) << 18) | (v553 << 12) | ((v138[2] & 0x3F) << 6) | v138[3] & 0x3F;
                v554 = v138 + 4;
              }
            }
            else
            {
              v141 = ((v141 & 0xF) << 12) | (v553 << 6) | v138[2] & 0x3F;
              v554 = v138 + 3;
            }
            *(_QWORD *)(v14 + 80) = v554;
          }
          else
          {
            *(_QWORD *)(v14 + 80) = v138 + 2;
            v141 = v138[1] & 0x3F | ((v141 & 0x1F) << 6);
          }
          if (v141 > 0xFF)
            goto LABEL_2349;
        }
        if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + v141) & 1) == 0)
          goto LABEL_2349;
        goto LABEL_1163;
      case 9u:
        v138 = *(unsigned __int8 **)(v14 + 80);
        if ((unint64_t)v138 >= *v16)
          goto LABEL_1160;
        *(_QWORD *)(v14 + 80) = v138 + 1;
        v142 = *v138;
        if (!v1363 || v142 < 0xC0)
          goto LABEL_2260;
        if ((v142 & 0x20) != 0)
        {
          v555 = v138[1] & 0x3F;
          if ((v142 & 0x10) != 0)
          {
            if ((v142 & 8) != 0)
            {
              v861 = v138[2] & 0x3F;
              v862 = v138[3] & 0x3F;
              v863 = v138[4] & 0x3F;
              if ((v142 & 4) != 0)
              {
                v142 = ((v142 & 1) << 30) | (v555 << 24) | (v861 << 18) | (v862 << 12) | (v863 << 6) | v138[5] & 0x3F;
                v556 = v138 + 6;
              }
              else
              {
                v142 = ((v142 & 3) << 24) | (v555 << 18) | (v861 << 12) | (v862 << 6) | v863;
                v556 = v138 + 5;
              }
            }
            else
            {
              v142 = ((v142 & 7) << 18) | (v555 << 12) | ((v138[2] & 0x3F) << 6) | v138[3] & 0x3F;
              v556 = v138 + 4;
            }
          }
          else
          {
            v142 = ((v142 & 0xF) << 12) | (v555 << 6) | v138[2] & 0x3F;
            v556 = v138 + 3;
          }
          *(_QWORD *)(v14 + 80) = v556;
        }
        else
        {
          *(_QWORD *)(v14 + 80) = v138 + 2;
          v142 = v138[1] & 0x3F | ((v142 & 0x1F) << 6);
        }
        if (v142 <= 0xFF)
        {
LABEL_2260:
          if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + v142) & 1) != 0)
            goto LABEL_2349;
        }
        goto LABEL_1163;
      case 0xAu:
        v138 = *(unsigned __int8 **)(v14 + 80);
        if ((unint64_t)v138 >= *v16)
          goto LABEL_1160;
        *(_QWORD *)(v14 + 80) = v138 + 1;
        v143 = *v138;
        if (v1363 && v143 >= 0xC0)
        {
          if ((v143 & 0x20) != 0)
          {
            v557 = v138[1] & 0x3F;
            if ((v143 & 0x10) != 0)
            {
              if ((v143 & 8) != 0)
              {
                v864 = v138[2] & 0x3F;
                v865 = v138[3] & 0x3F;
                v866 = v138[4] & 0x3F;
                if ((v143 & 4) != 0)
                {
                  v143 = ((v143 & 1) << 30) | (v557 << 24) | (v864 << 18) | (v865 << 12) | (v866 << 6) | v138[5] & 0x3F;
                  v558 = v138 + 6;
                }
                else
                {
                  v143 = ((v143 & 3) << 24) | (v557 << 18) | (v864 << 12) | (v865 << 6) | v866;
                  v558 = v138 + 5;
                }
              }
              else
              {
                v143 = ((v143 & 7) << 18) | (v557 << 12) | ((v138[2] & 0x3F) << 6) | v138[3] & 0x3F;
                v558 = v138 + 4;
              }
            }
            else
            {
              v143 = ((v143 & 0xF) << 12) | (v557 << 6) | v138[2] & 0x3F;
              v558 = v138 + 3;
            }
            *(_QWORD *)(v14 + 80) = v558;
          }
          else
          {
            *(_QWORD *)(v14 + 80) = v138 + 2;
            v143 = v138[1] & 0x3F | ((v143 & 0x1F) << 6);
          }
          if (v143 > 0xFF)
            goto LABEL_2349;
        }
        if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + v143) & 0x10) == 0)
          goto LABEL_2349;
        goto LABEL_1163;
      case 0xBu:
        v138 = *(unsigned __int8 **)(v14 + 80);
        if ((unint64_t)v138 >= *v16)
          goto LABEL_1160;
        *(_QWORD *)(v14 + 80) = v138 + 1;
        v144 = *v138;
        if (!v1363 || v144 < 0xC0)
          goto LABEL_2270;
        if ((v144 & 0x20) != 0)
        {
          v559 = v138[1] & 0x3F;
          if ((v144 & 0x10) != 0)
          {
            if ((v144 & 8) != 0)
            {
              v867 = v138[2] & 0x3F;
              v868 = v138[3] & 0x3F;
              v869 = v138[4] & 0x3F;
              if ((v144 & 4) != 0)
              {
                v144 = ((v144 & 1) << 30) | (v559 << 24) | (v867 << 18) | (v868 << 12) | (v869 << 6) | v138[5] & 0x3F;
                v560 = v138 + 6;
              }
              else
              {
                v144 = ((v144 & 3) << 24) | (v559 << 18) | (v867 << 12) | (v868 << 6) | v869;
                v560 = v138 + 5;
              }
            }
            else
            {
              v144 = ((v144 & 7) << 18) | (v559 << 12) | ((v138[2] & 0x3F) << 6) | v138[3] & 0x3F;
              v560 = v138 + 4;
            }
          }
          else
          {
            v144 = ((v144 & 0xF) << 12) | (v559 << 6) | v138[2] & 0x3F;
            v560 = v138 + 3;
          }
          *(_QWORD *)(v14 + 80) = v560;
        }
        else
        {
          *(_QWORD *)(v14 + 80) = v138 + 2;
          v144 = v138[1] & 0x3F | ((v144 & 0x1F) << 6);
        }
        if (v144 <= 0xFF)
        {
LABEL_2270:
          if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + v144) & 0x10) != 0)
            goto LABEL_2349;
        }
        goto LABEL_1163;
      case 0xCu:
        v145 = *(_DWORD *)(v7 + 244);
        v146 = *(unsigned __int8 **)(v14 + 80);
        v147 = *(_QWORD *)(v7 + 160);
        if (v145)
        {
          if ((unint64_t)v146 < v147)
          {
            v148 = v8;
            v149 = v11;
            if (_pcre2_is_newline_8(v146, v145, v147, v1355, v1361))
            {
              v21 = 0;
              v11 = v149;
              v8 = v148;
              goto LABEL_2412;
            }
            v147 = *v16;
            v11 = v149;
            v8 = v148;
          }
        }
        else
        {
          v482 = *v1355;
          if ((unint64_t)v146 <= v147 - v482
            && *v146 == *(unsigned __int8 *)(v7 + 252)
            && ((_DWORD)v482 == 1 || v146[1] == *(unsigned __int8 *)(v7 + 253)))
          {
            goto LABEL_1163;
          }
        }
        v573 = (unsigned __int16)*v18;
        if (*v18)
        {
          v574 = *(unsigned __int8 **)(v14 + 80);
          if (v574 == (unsigned __int8 *)(v147 - 1)
            && !*(_DWORD *)(v7 + 244)
            && *v1355 == 2
            && *v574 == *(unsigned __int8 *)(v7 + 252))
          {
            *v1360 = 1;
            if (v573 > 1)
              return 4294967294;
          }
        }
LABEL_1153:
        v138 = *(unsigned __int8 **)(v14 + 80);
        if ((unint64_t)v138 >= v147)
        {
LABEL_1160:
          v112 = (unsigned __int16)*v18;
          if (!*v18 || (unint64_t)v138 <= *v15)
            goto LABEL_1163;
          goto LABEL_1162;
        }
        v575 = v138 + 1;
        *(_QWORD *)(v14 + 80) = v138 + 1;
        if (v1363 && (unint64_t)v575 < v147)
        {
          v576 = v147 - (_QWORD)v575;
          v577 = v138 + 2;
          do
          {
            if ((*(v577 - 1) & 0xC0) != 0x80)
              break;
            *(_QWORD *)(v14 + 80) = v577++;
            --v576;
          }
          while (v576);
        }
        goto LABEL_1159;
      case 0xDu:
        v147 = *v16;
        goto LABEL_1153;
      case 0xEu:
        v150 = *(unsigned __int8 **)(v14 + 80);
        if ((unint64_t)v150 >= *v16)
          goto LABEL_1046;
        v151 = v150 + 1;
        goto LABEL_218;
      case 0xFu:
      case 0x10u:
        v51 = *(unsigned __int8 **)(v14 + 80);
        if ((unint64_t)v51 >= *v16)
          goto LABEL_143;
        *(_QWORD *)(v14 + 80) = v51 + 1;
        v52 = *v51;
        if (v1363 && v52 >= 0xC0)
        {
          if ((v52 & 0x20) != 0)
          {
            v511 = v51[1] & 0x3F;
            if ((v52 & 0x10) != 0)
            {
              if ((v52 & 8) != 0)
              {
                v826 = v51[2] & 0x3F;
                v827 = v51[3] & 0x3F;
                v828 = v51[4] & 0x3F;
                if ((v52 & 4) != 0)
                {
                  v52 = ((v52 & 1) << 30) | (v511 << 24) | (v826 << 18) | (v827 << 12) | (v828 << 6) | v51[5] & 0x3F;
                  v512 = v51 + 6;
                }
                else
                {
                  v52 = ((v52 & 3) << 24) | (v511 << 18) | (v826 << 12) | (v827 << 6) | v828;
                  v512 = v51 + 5;
                }
              }
              else
              {
                v52 = ((v52 & 7) << 18) | (v511 << 12) | ((v51[2] & 0x3F) << 6) | v51[3] & 0x3F;
                v512 = v51 + 4;
              }
            }
            else
            {
              v52 = ((v52 & 0xF) << 12) | (v511 << 6) | v51[2] & 0x3F;
              v512 = v51 + 3;
            }
            *(_QWORD *)(v14 + 80) = v512;
          }
          else
          {
            *(_QWORD *)(v14 + 80) = v51 + 2;
            v52 = v51[1] & 0x3F | ((v52 & 0x1F) << 6);
          }
        }
        v891 = _pcre2_ucd_stage2_8[v52 & 0x7F | (_pcre2_ucd_stage1_8[v52 >> 7] << 7)];
        switch(a2[1])
        {
          case 0u:
            goto LABEL_1930;
          case 1u:
            v892 = BYTE1(_pcre2_ucd_records_8[2 * v891]);
            v102 = v892 > 9;
            v893 = (1 << v892) & 0x320;
            if (!v102 && v893 != 0)
              goto LABEL_1930;
            if (v19 == 15)
              goto LABEL_2411;
            goto LABEL_1163;
          case 2u:
            v895 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v891])];
            v896 = a2[2];
            goto LABEL_1893;
          case 3u:
            v895 = a2[2];
            v896 = BYTE1(_pcre2_ucd_records_8[2 * v891]);
LABEL_1893:
            v897 = v895 == v896;
            goto LABEL_1895;
          case 4u:
            v897 = a2[2] == LOBYTE(_pcre2_ucd_records_8[2 * v891]);
LABEL_1895:
            v898 = v897;
            v899 = v19 == 16;
            goto LABEL_1899;
          case 5u:
            v901 = (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v891])] & 0xFFFFFFFD) == 1;
            goto LABEL_1905;
          case 6u:
          case 7u:
            if (v52 < 0x2000)
            {
              if (v52 > 132)
              {
                if (v52 > 5759)
                {
                  if (v52 != 5760 && v52 != 6158)
                    goto LABEL_2372;
                }
                else if (v52 != 133 && v52 != 160)
                {
                  goto LABEL_2372;
                }
              }
              else if (v52 > 0x20 || ((1 << v52) & 0x100003E00) == 0)
              {
                goto LABEL_2372;
              }
            }
            else if ((v52 - 0x2000) >= 0xB
                   && ((v52 - 8232) > 0x37
                    || ((1 << (v52 - 40)) & 0x80000000000083) == 0)
                   && v52 != 12288)
            {
LABEL_2372:
              v898 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v891])] != 6;
              v899 = v19 == 15;
LABEL_1899:
              v900 = v899;
LABEL_1909:
              if (((v900 ^ v898) & 1) != 0)
                goto LABEL_1163;
              goto LABEL_2411;
            }
LABEL_1930:
            if (v19 == 15)
              goto LABEL_1163;
            break;
          case 8u:
            if ((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v891])] | 2) == 3)
              goto LABEL_1930;
            v901 = v52 == 95;
LABEL_1905:
            v898 = v901;
            goto LABEL_1908;
          case 9u:
            v902 = &_pcre2_ucd_caseless_sets_8[a2[2]];
            while (1)
            {
              v903 = *v902;
              if (v52 < *v902)
                break;
              ++v902;
              if (v52 == v903)
              {
                if (v19 == 16)
                  goto LABEL_2411;
LABEL_1163:
                v21 = 0;
                goto LABEL_2412;
              }
            }
            if (v19 == 16)
              goto LABEL_1163;
            goto LABEL_2411;
          case 0xAu:
            if ((v52 - 36) <= 0x3C && ((1 << (v52 - 36)) & 0x1000000010000001) != 0)
              goto LABEL_1930;
            v898 = v52 >> 13 > 6 || (v52 - 160) >> 5 < 0x6BB;
LABEL_1908:
            v900 = v19 != 15;
            goto LABEL_1909;
          default:
            return 4294967252;
        }
        goto LABEL_2411;
      case 0x11u:
        v152 = *(unsigned __int8 **)(v14 + 80);
        v153 = *v16;
        if ((unint64_t)v152 >= *v16)
        {
          v112 = (unsigned __int16)*v18;
          if (!*v18 || (unint64_t)v152 <= *v15)
            goto LABEL_1163;
          goto LABEL_1162;
        }
        v154 = v152 + 1;
        *(_QWORD *)(v14 + 80) = v152 + 1;
        v155 = *v152;
        if (v1363 && v155 >= 0xC0)
        {
          if ((v155 & 0x20) != 0)
          {
            v561 = *v154 & 0x3F;
            if ((v155 & 0x10) != 0)
            {
              if ((v155 & 8) != 0)
              {
                v870 = v152[2] & 0x3F;
                v871 = v152[3] & 0x3F;
                v872 = v152[4] & 0x3F;
                if ((v155 & 4) != 0)
                {
                  v155 = ((v155 & 1) << 30) | (v561 << 24) | (v870 << 18) | (v871 << 12) | (v872 << 6) | v152[5] & 0x3F;
                  v154 = v152 + 6;
                }
                else
                {
                  v155 = ((v155 & 3) << 24) | (v561 << 18) | (v870 << 12) | (v871 << 6) | v872;
                  v154 = v152 + 5;
                }
              }
              else
              {
                v155 = ((v155 & 7) << 18) | (v561 << 12) | ((v152[2] & 0x3F) << 6) | v152[3] & 0x3F;
                v154 = v152 + 4;
              }
            }
            else
            {
              v155 = ((v155 & 0xF) << 12) | (v561 << 6) | v152[2] & 0x3F;
              v154 = v152 + 3;
            }
            *(_QWORD *)(v14 + 80) = v154;
          }
          else
          {
            v154 = v152 + 2;
            *(_QWORD *)(v14 + 80) = v152 + 2;
            v155 = v152[1] & 0x3F | ((v155 & 0x1F) << 6);
          }
        }
        v21 = 0;
        if (v155 <= 12)
        {
          if ((v155 - 11) >= 2)
          {
            if (v155 != 10)
              goto LABEL_2412;
            goto LABEL_2349;
          }
        }
        else if ((v155 - 8232) >= 2 && v155 != 133)
        {
          if (v155 != 13)
            goto LABEL_2412;
          if ((unint64_t)v154 < v153)
          {
            if (*v154 == 10)
            {
              v151 = v154 + 1;
LABEL_218:
              *(_QWORD *)(v14 + 80) = v151;
            }
            goto LABEL_2349;
          }
          v174 = (unsigned __int16)*v18;
          if (!*v18 || (unint64_t)v154 <= *v15)
          {
LABEL_2349:
            v247 = (uint64_t)(a2 + 1);
            goto LABEL_2405;
          }
LABEL_609:
          *v1360 = 1;
          if (v174 > 1)
            return 4294967294;
          goto LABEL_2349;
        }
        if (*(_WORD *)(v7 + 130) == 2)
          goto LABEL_1163;
        goto LABEL_2349;
      case 0x12u:
        v138 = *(unsigned __int8 **)(v14 + 80);
        if ((unint64_t)v138 >= *v16)
          goto LABEL_1160;
        *(_QWORD *)(v14 + 80) = v138 + 1;
        v156 = *v138;
        if (v1363 && v156 >= 0xC0)
        {
          if ((v156 & 0x20) != 0)
          {
            v562 = v138[1] & 0x3F;
            if ((v156 & 0x10) != 0)
            {
              if ((v156 & 8) != 0)
              {
                v873 = v138[2] & 0x3F;
                v874 = v138[3] & 0x3F;
                v875 = v138[4] & 0x3F;
                if ((v156 & 4) != 0)
                {
                  v156 = ((v156 & 1) << 30) | (v562 << 24) | (v873 << 18) | (v874 << 12) | (v875 << 6) | v138[5] & 0x3F;
                  v563 = v138 + 6;
                }
                else
                {
                  v156 = ((v156 & 3) << 24) | (v562 << 18) | (v873 << 12) | (v874 << 6) | v875;
                  v563 = v138 + 5;
                }
              }
              else
              {
                v156 = ((v156 & 7) << 18) | (v562 << 12) | ((v138[2] & 0x3F) << 6) | v138[3] & 0x3F;
                v563 = v138 + 4;
              }
            }
            else
            {
              v156 = ((v156 & 0xF) << 12) | (v562 << 6) | v138[2] & 0x3F;
              v563 = v138 + 3;
            }
            *(_QWORD *)(v14 + 80) = v563;
          }
          else
          {
            *(_QWORD *)(v14 + 80) = v138 + 2;
            v156 = v138[1] & 0x3F | ((v156 & 0x1F) << 6);
          }
        }
        v21 = 0;
        if (v156 < 0x2000)
        {
          if (v156 <= 159)
          {
            if (v156 == 9 || v156 == 32)
              goto LABEL_2412;
          }
          else if (v156 == 160 || v156 == 5760 || v156 == 6158)
          {
            goto LABEL_2412;
          }
        }
        else if (v156 > 8238)
        {
          v1023 = v156 == 8239 || v156 == 8287;
          if (v1023 || v156 == 12288)
            goto LABEL_2412;
        }
        else if ((v156 - 0x2000) < 0xB)
        {
          goto LABEL_2412;
        }
        goto LABEL_2349;
      case 0x13u:
        v138 = *(unsigned __int8 **)(v14 + 80);
        if ((unint64_t)v138 >= *v16)
          goto LABEL_1160;
        *(_QWORD *)(v14 + 80) = v138 + 1;
        v157 = *v138;
        if (v1363 && v157 >= 0xC0)
        {
          if ((v157 & 0x20) != 0)
          {
            v564 = v138[1] & 0x3F;
            if ((v157 & 0x10) != 0)
            {
              if ((v157 & 8) != 0)
              {
                v876 = v138[2] & 0x3F;
                v877 = v138[3] & 0x3F;
                v878 = v138[4] & 0x3F;
                if ((v157 & 4) != 0)
                {
                  v157 = ((v157 & 1) << 30) | (v564 << 24) | (v876 << 18) | (v877 << 12) | (v878 << 6) | v138[5] & 0x3F;
                  v565 = v138 + 6;
                }
                else
                {
                  v157 = ((v157 & 3) << 24) | (v564 << 18) | (v876 << 12) | (v877 << 6) | v878;
                  v565 = v138 + 5;
                }
              }
              else
              {
                v157 = ((v157 & 7) << 18) | (v564 << 12) | ((v138[2] & 0x3F) << 6) | v138[3] & 0x3F;
                v565 = v138 + 4;
              }
            }
            else
            {
              v157 = ((v157 & 0xF) << 12) | (v564 << 6) | v138[2] & 0x3F;
              v565 = v138 + 3;
            }
            *(_QWORD *)(v14 + 80) = v565;
          }
          else
          {
            *(_QWORD *)(v14 + 80) = v138 + 2;
            v157 = v138[1] & 0x3F | ((v157 & 0x1F) << 6);
          }
        }
        v21 = 0;
        if (v157 < 0x2000)
        {
          if (v157 <= 159)
          {
            if (v157 != 9 && v157 != 32)
              goto LABEL_2412;
            goto LABEL_2349;
          }
          v1024 = v157 == 160 || v157 == 5760;
          v1025 = 6158;
        }
        else
        {
          if (v157 <= 8238)
          {
            if ((v157 - 0x2000) >= 0xB)
              goto LABEL_2412;
            goto LABEL_2349;
          }
          if (v157 == 8239)
            goto LABEL_2349;
          v1024 = v157 == 12288;
          v1025 = 8287;
        }
        if (!v1024 && v157 != v1025)
          goto LABEL_2412;
        goto LABEL_2349;
      case 0x14u:
        v138 = *(unsigned __int8 **)(v14 + 80);
        if ((unint64_t)v138 >= *v16)
          goto LABEL_1160;
        *(_QWORD *)(v14 + 80) = v138 + 1;
        v158 = *v138;
        if (v1363 && v158 >= 0xC0)
        {
          if ((v158 & 0x20) != 0)
          {
            v566 = v138[1] & 0x3F;
            if ((v158 & 0x10) != 0)
            {
              if ((v158 & 8) != 0)
              {
                v879 = v138[2] & 0x3F;
                v880 = v138[3] & 0x3F;
                v881 = v138[4] & 0x3F;
                if ((v158 & 4) != 0)
                {
                  v158 = ((v158 & 1) << 30) | (v566 << 24) | (v879 << 18) | (v880 << 12) | (v881 << 6) | v138[5] & 0x3F;
                  v567 = v138 + 6;
                }
                else
                {
                  v158 = ((v158 & 3) << 24) | (v566 << 18) | (v879 << 12) | (v880 << 6) | v881;
                  v567 = v138 + 5;
                }
              }
              else
              {
                v158 = ((v158 & 7) << 18) | (v566 << 12) | ((v138[2] & 0x3F) << 6) | v138[3] & 0x3F;
                v567 = v138 + 4;
              }
            }
            else
            {
              v158 = ((v158 & 0xF) << 12) | (v566 << 6) | v138[2] & 0x3F;
              v567 = v138 + 3;
            }
            *(_QWORD *)(v14 + 80) = v567;
          }
          else
          {
            *(_QWORD *)(v14 + 80) = v138 + 2;
            v158 = v138[1] & 0x3F | ((v158 & 0x1F) << 6);
          }
        }
        v21 = 0;
        v1027 = v158 - 10 >= 4 && v158 - 8232 >= 2;
        if (v1027 && v158 != 133)
          goto LABEL_2349;
        goto LABEL_2412;
      case 0x15u:
        v138 = *(unsigned __int8 **)(v14 + 80);
        if ((unint64_t)v138 >= *v16)
          goto LABEL_1160;
        *(_QWORD *)(v14 + 80) = v138 + 1;
        v159 = *v138;
        if (v1363 && v159 >= 0xC0)
        {
          if ((v159 & 0x20) != 0)
          {
            v568 = v138[1] & 0x3F;
            if ((v159 & 0x10) != 0)
            {
              if ((v159 & 8) != 0)
              {
                v882 = v138[2] & 0x3F;
                v883 = v138[3] & 0x3F;
                v884 = v138[4] & 0x3F;
                if ((v159 & 4) != 0)
                {
                  v159 = ((v159 & 1) << 30) | (v568 << 24) | (v882 << 18) | (v883 << 12) | (v884 << 6) | v138[5] & 0x3F;
                  v569 = v138 + 6;
                }
                else
                {
                  v159 = ((v159 & 3) << 24) | (v568 << 18) | (v882 << 12) | (v883 << 6) | v884;
                  v569 = v138 + 5;
                }
              }
              else
              {
                v159 = ((v159 & 7) << 18) | (v568 << 12) | ((v138[2] & 0x3F) << 6) | v138[3] & 0x3F;
                v569 = v138 + 4;
              }
            }
            else
            {
              v159 = ((v159 & 0xF) << 12) | (v568 << 6) | v138[2] & 0x3F;
              v569 = v138 + 3;
            }
            *(_QWORD *)(v14 + 80) = v569;
          }
          else
          {
            *(_QWORD *)(v14 + 80) = v138 + 2;
            v159 = v138[1] & 0x3F | ((v159 & 0x1F) << 6);
          }
        }
        v1028 = v159 - 10 >= 4 && v159 - 8232 >= 2;
        if (!v1028 || v159 == 133)
          goto LABEL_2349;
        goto LABEL_1163;
      case 0x16u:
        v160 = v11;
        v161 = *(unsigned __int8 **)(v14 + 80);
        v162 = *v16;
        if ((unint64_t)v161 >= *v16)
        {
          v327 = (unsigned __int16)*v18;
          if (!*v18)
          {
            v21 = 0;
            v11 = v160;
            goto LABEL_2412;
          }
          v11 = v160;
          if ((unint64_t)v161 <= *v15)
            goto LABEL_1163;
          goto LABEL_2858;
        }
        v163 = v161 + 1;
        *(_QWORD *)(v14 + 80) = v161 + 1;
        v164 = *v161;
        if (v1363 && v164 >= 0xC0)
        {
          if ((v164 & 0x20) != 0)
          {
            v570 = *v163 & 0x3F;
            if ((v164 & 0x10) != 0)
            {
              if ((v164 & 8) != 0)
              {
                v885 = v161[2] & 0x3F;
                v886 = v161[3] & 0x3F;
                v887 = v161[4] & 0x3F;
                if ((v164 & 4) != 0)
                {
                  v164 = ((v164 & 1) << 30) | (v570 << 24) | (v885 << 18) | (v886 << 12) | (v887 << 6) | v161[5] & 0x3F;
                  v163 = v161 + 6;
                }
                else
                {
                  v164 = ((v164 & 3) << 24) | (v570 << 18) | (v885 << 12) | (v886 << 6) | v887;
                  v163 = v161 + 5;
                }
              }
              else
              {
                v164 = ((v164 & 7) << 18) | (v570 << 12) | ((v161[2] & 0x3F) << 6) | v161[3] & 0x3F;
                v163 = v161 + 4;
              }
            }
            else
            {
              v164 = ((v164 & 0xF) << 12) | (v570 << 6) | v161[2] & 0x3F;
              v163 = v161 + 3;
            }
            *(_QWORD *)(v14 + 80) = v163;
          }
          else
          {
            v163 = v161 + 2;
            *(_QWORD *)(v14 + 80) = v161 + 2;
            v164 = v161[1] & 0x3F | ((v164 & 0x1F) << 6);
          }
        }
        v1029 = _pcre2_extuni_8(v164, v163, *(_QWORD *)(v7 + 152), v162, v1361, 0);
        *(_QWORD *)(v14 + 80) = v1029;
        v1030 = *(unsigned __int16 *)(v7 + 128);
        if (!*(_WORD *)(v7 + 128)
          || (unint64_t)v1029 < *v16
          || (unint64_t)v1029 <= *v15
          || (*v1360 = 1, v1030 <= 1))
        {
          ++*(_QWORD *)v14;
          v11 = v160;
          goto LABEL_2406;
        }
        return 4294967294;
      case 0x17u:
        goto LABEL_251;
      case 0x18u:
        goto LABEL_260;
      case 0x19u:
        if ((*(_BYTE *)(v7 + 228) & 2) != 0)
          goto LABEL_2880;
        if ((*(_BYTE *)(v7 + 232) & 0x10) != 0)
        {
LABEL_260:
          v173 = *(unsigned __int8 **)(v14 + 80);
          if ((unint64_t)v173 < *v16)
            goto LABEL_2880;
          v174 = (unsigned __int16)*v18;
          if (!*v18 || (unint64_t)v173 <= *v15)
            goto LABEL_2349;
          goto LABEL_609;
        }
LABEL_251:
        v165 = *(unsigned __int8 **)(v14 + 80);
        v166 = *v16;
        if ((unint64_t)v165 >= *v16)
          goto LABEL_256;
        v167 = *(_DWORD *)(v7 + 244);
        if (v167)
        {
          v168 = v8;
          v169 = v11;
          is_newline_8 = _pcre2_is_newline_8(v165, v167, v166, v1355, v1361);
          v11 = v169;
          v8 = v168;
          if (is_newline_8)
          {
            v165 = *(unsigned __int8 **)(v14 + 80);
            v166 = *v16;
            v171 = *v1355;
            goto LABEL_255;
          }
        }
        else
        {
          v171 = *v1355;
          if ((unint64_t)v165 <= v166 - v171
            && *v165 == *(unsigned __int8 *)(v7 + 252)
            && (v171 == 1 || v165[1] == *(unsigned __int8 *)(v7 + 253)))
          {
LABEL_255:
            if (v165 == (unsigned __int8 *)(v166 - v171))
            {
LABEL_256:
              v172 = (unsigned __int16)*v18;
              if (*v18)
              {
                if ((unint64_t)v165 > *v15)
                {
                  *v1360 = 1;
                  if (v172 > 1)
                    return 4294967294;
                }
              }
LABEL_1159:
              v247 = *(_QWORD *)v14 + 1;
LABEL_2405:
              *(_QWORD *)v14 = v247;
              goto LABEL_2406;
            }
          }
        }
LABEL_1078:
        v356 = (unsigned __int16)*v18;
        if (!*v18)
          goto LABEL_2880;
        v536 = *(unsigned __int8 **)(v14 + 80);
        if ((unint64_t)(v536 + 1) < *v16
          || *(_DWORD *)(v7 + 244)
          || *v1355 != 2
          || *v536 != *(unsigned __int8 *)(v7 + 252))
        {
          goto LABEL_2880;
        }
        goto LABEL_1943;
      case 0x1Au:
        v175 = *(unsigned __int8 **)(v14 + 80);
        v176 = *v16;
        if ((unint64_t)v175 >= *v16)
        {
          if ((*(_BYTE *)(v7 + 228) & 2) != 0)
            goto LABEL_2880;
          v174 = (unsigned __int16)*v18;
          if (!*v18 || (unint64_t)v175 <= *v15)
            goto LABEL_2349;
          goto LABEL_609;
        }
        v177 = *(_DWORD *)(v7 + 244);
        if (v177)
        {
          v178 = v8;
          v179 = v11;
          v180 = _pcre2_is_newline_8(v175, v177, v176, v1355, v1361);
          v11 = v179;
          v8 = v178;
          if (v180)
          {
            a2 = *(unsigned __int8 **)v14;
            goto LABEL_2349;
          }
        }
        else
        {
          v535 = *v1355;
          if ((unint64_t)v175 <= v176 - v535
            && *v175 == *(unsigned __int8 *)(v7 + 252)
            && ((_DWORD)v535 == 1 || v175[1] == *(unsigned __int8 *)(v7 + 253)))
          {
            goto LABEL_2349;
          }
        }
        goto LABEL_1078;
      case 0x1Bu:
        if (*(_QWORD *)(v14 + 80) != *(_QWORD *)(v7 + 152) || (*(_BYTE *)(v7 + 228) & 1) != 0)
          goto LABEL_2880;
        goto LABEL_2349;
      case 0x1Cu:
        v181 = *(unsigned __int8 **)(v14 + 80);
        v182 = *(_QWORD *)(v7 + 152);
        if ((*(_BYTE *)(v7 + 228) & 1) != 0 && v181 == (unsigned __int8 *)v182)
          goto LABEL_2880;
        if (v181 == (unsigned __int8 *)v182)
          goto LABEL_2349;
        if (v181 == (unsigned __int8 *)*v16 && (*(_BYTE *)(v7 + 234) & 0x20) == 0)
          goto LABEL_2880;
        v183 = *(_DWORD *)(v7 + 244);
        if (!v183)
        {
          v578 = *v1355;
          if ((unint64_t)v181 < v182 + v578
            || v181[-v578] != *(unsigned __int8 *)(v7 + 252)
            || (_DWORD)v578 != 1 && v181[-v578 + 1] != *(unsigned __int8 *)(v7 + 253))
          {
            goto LABEL_2880;
          }
          goto LABEL_2349;
        }
        if ((unint64_t)v181 <= v182)
          goto LABEL_2880;
        v107 = v8;
        v108 = v11;
        v21 = _pcre2_was_newline_8(v181, v183, v182, v1355, v1361);
        if (!(_DWORD)v21)
          goto LABEL_141;
        a2 = *(unsigned __int8 **)v14;
        v11 = v108;
        v8 = v107;
        goto LABEL_2349;
      case 0x1Du:
        if (v1363)
        {
          v184 = 1;
          *(_QWORD *)(v14 + 24) = 1;
          *(_QWORD *)v14 = a2 + 1;
          v185 = a2[1];
          if (v185 >= 0xC0)
          {
            v184 = 3;
            v186 = 4;
            v187 = 5;
            if ((v185 & 4) != 0)
              v187 = 6;
            if ((v185 & 8) != 0)
              v186 = v187;
            if ((v185 & 0x10) != 0)
              v184 = v186;
            if ((v185 & 0x20) == 0)
              v184 = 2;
            *(_QWORD *)(v14 + 24) = v184;
          }
          v150 = *(unsigned __int8 **)(v14 + 80);
          if (v184 <= *v16 - (unint64_t)v150)
          {
            v513 = v150 + 1;
            v514 = a2 + 2;
            v515 = (unsigned __int8 *)(v184 - 1);
            do
            {
              *(_QWORD *)v14 = v514;
              v516 = *(v514 - 1);
              *(_QWORD *)(v14 + 80) = v513;
              if (v516 != *(v513 - 1))
                goto LABEL_1163;
              *(_QWORD *)(v14 + 24) = v515;
              ++v513;
              ++v514;
              --v515;
            }
            while (v515 != (unsigned __int8 *)-1);
            goto LABEL_2406;
          }
          v21 = 0;
          if ((unint64_t)v150 < *v16)
            goto LABEL_2412;
          v188 = (unsigned __int16)*v18;
          if (!*v18)
            goto LABEL_2412;
        }
        else
        {
          v150 = *(unsigned __int8 **)(v14 + 80);
          if ((uint64_t)(*v16 - (_QWORD)v150) > 0)
          {
            v328 = a2[1];
            *(_QWORD *)(v14 + 80) = v150 + 1;
            if (v328 != *v150)
              goto LABEL_1163;
LABEL_1018:
            v247 = (uint64_t)(a2 + 2);
            goto LABEL_2405;
          }
LABEL_1046:
          v188 = (unsigned __int16)*v18;
          if (!*v18)
            goto LABEL_1163;
        }
        if ((unint64_t)v150 <= *v15)
          goto LABEL_1163;
        *v1360 = 1;
        if (v188 <= 1)
          goto LABEL_1163;
        return 4294967294;
      case 0x1Eu:
        v150 = *(unsigned __int8 **)(v14 + 80);
        if ((unint64_t)v150 >= *v16)
          goto LABEL_1046;
        if (v1363)
        {
          v189 = 1;
          *(_QWORD *)(v14 + 24) = 1;
          *(_QWORD *)v14 = a2 + 1;
          v190 = a2[1];
          if (v190 >= 0xC0)
          {
            v191 = a2[2] & 0x3F;
            if ((v190 & 0x20) != 0)
            {
              if ((v190 & 0x10) != 0)
              {
                if ((v190 & 8) != 0)
                {
                  v1012 = a2[3] & 0x3F;
                  v1013 = a2[4] & 0x3F;
                  v1014 = a2[5] & 0x3F;
                  if ((v190 & 4) != 0)
                  {
                    v190 = ((v190 & 1) << 30) | (v191 << 24) | (v1012 << 18) | (v1013 << 12) | (v1014 << 6) | a2[6] & 0x3F;
                    v189 = 6;
                  }
                  else
                  {
                    v190 = ((v190 & 3) << 24) | (v191 << 18) | (v1012 << 12) | (v1013 << 6) | v1014;
                    v189 = 5;
                  }
                }
                else
                {
                  v190 = ((v190 & 7) << 18) | (v191 << 12) | ((a2[3] & 0x3F) << 6) | a2[4] & 0x3F;
                  v189 = 4;
                }
              }
              else
              {
                v190 = ((v190 & 0xF) << 12) | (v191 << 6) | a2[3] & 0x3F;
                v189 = 3;
              }
            }
            else
            {
              v189 = 2;
              v190 = a2[2] & 0x3F | ((v190 & 0x1F) << 6);
            }
            *(_QWORD *)(v14 + 24) = v189;
          }
          if (v190 > 0x7F)
          {
            *(_QWORD *)(v14 + 80) = v150 + 1;
            v1035 = *v150;
            if (v1035 >= 0xC0)
            {
              if ((v1035 & 0x20) != 0)
              {
                v1036 = v150[1] & 0x3F;
                if ((v1035 & 0x10) != 0)
                {
                  if ((v1035 & 8) != 0)
                  {
                    v1038 = v150[2] & 0x3F;
                    v1039 = v150[3] & 0x3F;
                    v1040 = v150[4] & 0x3F;
                    if ((v1035 & 4) != 0)
                    {
                      v1035 = ((v1035 & 1) << 30) | (v1036 << 24) | (v1038 << 18) | (v1039 << 12) | (v1040 << 6) | v150[5] & 0x3F;
                      v1037 = v150 + 6;
                    }
                    else
                    {
                      v1035 = ((v1035 & 3) << 24) | (v1036 << 18) | (v1038 << 12) | (v1039 << 6) | v1040;
                      v1037 = v150 + 5;
                    }
                  }
                  else
                  {
                    v1035 = ((v1035 & 7) << 18) | (v1036 << 12) | ((v150[2] & 0x3F) << 6) | v150[3] & 0x3F;
                    v1037 = v150 + 4;
                  }
                }
                else
                {
                  v1035 = ((v1035 & 0xF) << 12) | (v1036 << 6) | v150[2] & 0x3F;
                  v1037 = v150 + 3;
                }
                *(_QWORD *)(v14 + 80) = v1037;
              }
              else
              {
                *(_QWORD *)(v14 + 80) = v150 + 2;
                v1035 = v150[1] & 0x3F | ((v1035 & 0x1F) << 6);
              }
            }
            *(_QWORD *)v14 = &a2[v189 + 1];
            if (v1035 != v190
              && v1035 != _pcre2_ucd_records_8[2
                                             * _pcre2_ucd_stage2_8[v190 & 0x7F | (_pcre2_ucd_stage1_8[v190 >> 7] << 7)]
                                             + 1]
                        + v190)
            {
              goto LABEL_1163;
            }
          }
          else
          {
            if (*(unsigned __int8 *)(*(_QWORD *)(v7 + 88) + v190) != *(unsigned __int8 *)(*(_QWORD *)(v7 + 88) + *v150))
              goto LABEL_1163;
            *(_QWORD *)v14 = a2 + 2;
            *(_QWORD *)(v14 + 80) = v150 + 1;
          }
          goto LABEL_2406;
        }
        if (*(unsigned __int8 *)(*(_QWORD *)(v7 + 88) + a2[1]) != *(unsigned __int8 *)(*(_QWORD *)(v7 + 88) + *v150))
          goto LABEL_1163;
        *(_QWORD *)(v14 + 80) = v150 + 1;
        goto LABEL_1018;
      case 0x1Fu:
      case 0x20u:
        v51 = *(unsigned __int8 **)(v14 + 80);
        if ((unint64_t)v51 >= *v16)
        {
LABEL_143:
          v112 = (unsigned __int16)*v18;
          if (!*v18 || (unint64_t)v51 <= *v15)
            goto LABEL_1163;
          goto LABEL_1162;
        }
        if (v1363)
        {
          *(_QWORD *)v14 = a2 + 2;
          v53 = a2[1];
          if (v53 >= 0xC0)
          {
            if ((v53 & 0x20) != 0)
            {
              v547 = a2[2] & 0x3F;
              if ((v53 & 0x10) != 0)
              {
                if ((v53 & 8) != 0)
                {
                  v849 = a2[3] & 0x3F;
                  v850 = a2[4] & 0x3F;
                  v851 = a2[5] & 0x3F;
                  if ((v53 & 4) != 0)
                  {
                    v53 = ((v53 & 1) << 30) | (v547 << 24) | (v849 << 18) | (v850 << 12) | (v851 << 6) | a2[6] & 0x3F;
                    v548 = a2 + 7;
                  }
                  else
                  {
                    v53 = ((v53 & 3) << 24) | (v547 << 18) | (v849 << 12) | (v850 << 6) | v851;
                    v548 = a2 + 6;
                  }
                }
                else
                {
                  v53 = ((v53 & 7) << 18) | (v547 << 12) | ((a2[3] & 0x3F) << 6) | a2[4] & 0x3F;
                  v548 = a2 + 5;
                }
              }
              else
              {
                v53 = ((v53 & 0xF) << 12) | (v547 << 6) | a2[3] & 0x3F;
                v548 = a2 + 4;
              }
              *(_QWORD *)v14 = v548;
            }
            else
            {
              *(_QWORD *)v14 = a2 + 3;
              v53 = a2[2] & 0x3F | ((v53 & 0x1F) << 6);
            }
          }
          *(_QWORD *)(v14 + 80) = v51 + 1;
          v1015 = *v51;
          if (v1015 >= 0xC0)
          {
            if ((v1015 & 0x20) != 0)
            {
              v1016 = v51[1] & 0x3F;
              if ((v1015 & 0x10) != 0)
              {
                if ((v1015 & 8) != 0)
                {
                  v1018 = v51[2] & 0x3F;
                  v1019 = v51[3] & 0x3F;
                  v1020 = v51[4] & 0x3F;
                  if ((v1015 & 4) != 0)
                  {
                    v1015 = ((v1015 & 1) << 30) | (v1016 << 24) | (v1018 << 18) | (v1019 << 12) | (v1020 << 6) | v51[5] & 0x3F;
                    v1017 = v51 + 6;
                  }
                  else
                  {
                    v1015 = ((v1015 & 3) << 24) | (v1016 << 18) | (v1018 << 12) | (v1019 << 6) | v1020;
                    v1017 = v51 + 5;
                  }
                }
                else
                {
                  v1015 = ((v1015 & 7) << 18) | (v1016 << 12) | ((v51[2] & 0x3F) << 6) | v51[3] & 0x3F;
                  v1017 = v51 + 4;
                }
              }
              else
              {
                v1015 = ((v1015 & 0xF) << 12) | (v1016 << 6) | v51[2] & 0x3F;
                v1017 = v51 + 3;
              }
              *(_QWORD *)(v14 + 80) = v1017;
            }
            else
            {
              *(_QWORD *)(v14 + 80) = v51 + 2;
              v1015 = v51[1] & 0x3F | ((v1015 & 0x1F) << 6);
            }
          }
          if (v53 == v1015)
            goto LABEL_1163;
          if (v19 == 32)
          {
            v1031 = v53 < 0x80
                  ? *(unsigned __int8 *)(*(_QWORD *)(v7 + 96) + v53)
                  : _pcre2_ucd_records_8[2 * _pcre2_ucd_stage2_8[v53 & 0x7F | (_pcre2_ucd_stage1_8[v53 >> 7] << 7)] + 1]
                  + v53;
            if (v1031 == v1015)
              goto LABEL_1163;
          }
          goto LABEL_2406;
        }
        v325 = a2[1];
        *(_QWORD *)(v14 + 80) = v51 + 1;
        v326 = *v51;
        if ((_DWORD)v325 == v326 || v19 == 32 && *(unsigned __int8 *)(*(_QWORD *)(v7 + 96) + v325) == v326)
          goto LABEL_1163;
        goto LABEL_1018;
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x33u:
        v22 = a2 + 1;
        *(_QWORD *)v14 = a2 + 1;
        v23 = *a2;
        if (v19 >= 0x2E)
          v24 = -46;
        else
          v24 = -33;
        v25 = v24 + v23;
        v26 = rep_min[v24 + v23];
        *(_DWORD *)(v14 + 56) = v26;
        v27 = rep_max[v25];
        *(_DWORD *)(v14 + 60) = v27;
        v11 = rep_typ[v25];
        goto LABEL_55;
      case 0x27u:
      case 0x34u:
        v26 = 0;
        *(_DWORD *)(v14 + 56) = 0;
        v27 = __rev16(*(unsigned __int16 *)(a2 + 1));
        *(_DWORD *)(v14 + 60) = v27;
        v22 = a2 + 3;
        *(_QWORD *)v14 = a2 + 3;
        v11 = 1;
        goto LABEL_55;
      case 0x28u:
      case 0x35u:
        v26 = 0;
        v11 = 0;
        *(_DWORD *)(v14 + 56) = 0;
        v27 = __rev16(*(unsigned __int16 *)(a2 + 1));
        *(_DWORD *)(v14 + 60) = v27;
        v22 = a2 + 3;
        *(_QWORD *)v14 = a2 + 3;
        goto LABEL_55;
      case 0x29u:
      case 0x36u:
        v27 = __rev16(*(unsigned __int16 *)(a2 + 1));
        *(_DWORD *)(v14 + 56) = v27;
        *(_DWORD *)(v14 + 60) = v27;
        v22 = a2 + 3;
        *(_QWORD *)v14 = a2 + 3;
        v26 = v27;
        goto LABEL_55;
      case 0x2Au:
      case 0x37u:
        v26 = 0;
        *(_QWORD *)(v14 + 56) = 0xFFFFFFFF00000000;
        v22 = a2 + 1;
        *(_QWORD *)v14 = a2 + 1;
        v11 = 2;
        goto LABEL_52;
      case 0x2Bu:
      case 0x38u:
        *(_QWORD *)(v14 + 56) = 0xFFFFFFFF00000001;
        v22 = a2 + 1;
        *(_QWORD *)v14 = a2 + 1;
        v11 = 2;
        v26 = 1;
LABEL_52:
        v27 = -1;
        goto LABEL_55;
      case 0x2Cu:
      case 0x39u:
        v26 = 0;
        *(_QWORD *)(v14 + 56) = 0x100000000;
        v22 = a2 + 1;
        *(_QWORD *)v14 = a2 + 1;
        v11 = 2;
        v27 = 1;
        goto LABEL_55;
      case 0x2Du:
      case 0x3Au:
        v26 = 0;
        *(_DWORD *)(v14 + 56) = 0;
        v27 = __rev16(*(unsigned __int16 *)(a2 + 1));
        *(_DWORD *)(v14 + 60) = v27;
        v22 = a2 + 3;
        *(_QWORD *)v14 = a2 + 3;
        v11 = 2;
LABEL_55:
        if (!v1363)
        {
          a2 = v22 + 1;
          *(_QWORD *)v14 = v22 + 1;
          v55 = *v22;
LABEL_61:
          *(_DWORD *)(v14 + 64) = v55;
          if (v19 <= 0x2D)
          {
            if (v26)
            {
              v74 = 0;
              v75 = *v16;
              v76 = *(unsigned __int8 **)(v14 + 80);
              do
              {
                v77 = &v76[v74];
                if ((unint64_t)&v76[v74] >= v75)
                  goto LABEL_489;
                *(_QWORD *)(v14 + 80) = v77 + 1;
                if (v55 != *v77)
                  goto LABEL_1163;
              }
              while ((int)++v74 + 1 <= v26);
            }
            if (v27 == v26)
              goto LABEL_2406;
            if (!(_DWORD)v11)
            {
              v12 = 0;
LABEL_3229:
              v1313 = 27;
              goto LABEL_3172;
            }
            v78 = *(unsigned __int8 **)(v14 + 80);
            *(_QWORD *)(v14 + 8) = v78;
            v79 = v78;
            v478 = v27 >= v26;
            v80 = v27 - v26;
            if (v80 != 0 && v478)
            {
              v81 = *v16;
              v79 = v78;
              while ((unint64_t)v79 < v81)
              {
                if (v55 == *v79)
                {
                  *(_QWORD *)(v14 + 80) = ++v79;
                  if (--v80)
                    continue;
                }
                goto LABEL_625;
              }
              v331 = (unsigned __int16)*v18;
              if (*v18)
              {
                if ((unint64_t)v79 > *v15)
                {
                  *v1360 = 1;
                  if (v331 > 1)
                    return 4294967294;
                }
              }
            }
LABEL_625:
            if ((_DWORD)v11 == 2)
              goto LABEL_2406;
LABEL_2883:
            if (v79 > v78)
            {
              v12 = 0;
              a2 = *(unsigned __int8 **)v14;
              v1313 = 28;
              goto LABEL_3172;
            }
          }
          else
          {
            v61 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 96) + v55);
            *(_DWORD *)(v14 + 68) = v61;
            if (v26)
            {
              v62 = 0;
              v63 = *v16;
              v64 = *(unsigned __int8 **)(v14 + 80);
              while (1)
              {
                v65 = &v64[v62];
                if ((unint64_t)&v64[v62] >= v63)
                  break;
                v66 = *v65;
                if (v55 != v66 && v61 != v66)
                  goto LABEL_1163;
                *(_QWORD *)(v14 + 80) = &v64[++v62];
                if ((int)v62 + 1 > v26)
                  goto LABEL_71;
              }
LABEL_486:
              v112 = (unsigned __int16)*v18;
              if (!*v18 || (unint64_t)v65 <= *v15)
                goto LABEL_1163;
              goto LABEL_1162;
            }
LABEL_71:
            if (v27 == v26)
              goto LABEL_2406;
            if (!(_DWORD)v11)
            {
              v12 = 0;
LABEL_3204:
              v1313 = 25;
              goto LABEL_3172;
            }
            v68 = *(unsigned __int8 **)(v14 + 80);
            *(_QWORD *)(v14 + 8) = v68;
            v69 = v68;
            v478 = v27 >= v26;
            v70 = v27 - v26;
            if (v70 != 0 && v478)
            {
              v71 = *v16;
              v69 = v68;
              while ((unint64_t)v69 < v71)
              {
                v72 = *v69;
                if (v55 == v72 || v61 == v72)
                {
                  *(_QWORD *)(v14 + 80) = ++v69;
                  if (--v70)
                    continue;
                }
                goto LABEL_620;
              }
              v330 = (unsigned __int16)*v18;
              if (*v18)
              {
                if ((unint64_t)v69 > *v15)
                {
                  *v1360 = 1;
                  if (v330 > 1)
                    return 4294967294;
                }
              }
            }
LABEL_620:
            if ((_DWORD)v11 == 2)
              goto LABEL_2406;
LABEL_2881:
            if (v69 != v68)
            {
              v12 = 0;
              a2 = *(unsigned __int8 **)v14;
              v1313 = 26;
              goto LABEL_3172;
            }
          }
LABEL_2406:
          a2 = *(unsigned __int8 **)v14;
          continue;
        }
        *(_QWORD *)(v14 + 24) = 1;
        v54 = (size_t *)(v14 + 24);
        *(_QWORD *)(v14 + 16) = v22;
        v55 = *v22;
        if (v55 < 0xC0)
        {
          a2 = v22 + 1;
          *(_QWORD *)v14 = v22 + 1;
          goto LABEL_61;
        }
        v56 = v22[1] & 0x3F;
        v57 = v18;
        if ((v55 & 0x20) != 0)
        {
          if ((v55 & 0x10) != 0)
          {
            if ((v55 & 8) != 0)
            {
              v249 = v22[2] & 0x3F;
              v250 = v22[3] & 0x3F;
              v251 = v22[4] & 0x3F;
              v58 = v16;
              if ((v55 & 4) != 0)
              {
                v59 = ((v55 & 1) << 30) | (v56 << 24) | (v249 << 18) | (v250 << 12) | (v251 << 6) | v22[5] & 0x3F;
                v60 = 6;
              }
              else
              {
                v59 = ((v55 & 3) << 24) | (v56 << 18) | (v249 << 12) | (v250 << 6) | v251;
                v60 = 5;
              }
            }
            else
            {
              v58 = v16;
              v59 = ((v55 & 7) << 18) | (v56 << 12) | ((v22[2] & 0x3F) << 6) | v22[3] & 0x3F;
              v60 = 4;
            }
          }
          else
          {
            v58 = v16;
            v59 = ((v55 & 0xF) << 12) | (v56 << 6) | v22[2] & 0x3F;
            v60 = 3;
          }
        }
        else
        {
          v58 = v16;
          v59 = v22[1] & 0x3F | ((v55 & 0x1F) << 6);
          v60 = 2;
        }
        v358 = v8;
        v1350 = v7;
        *(_QWORD *)(v14 + 24) = v60;
        *(_QWORD *)v14 = &v22[v60];
        if (v19 >= 0x2E
          && (v359 = _pcre2_ucd_records_8[2 * _pcre2_ucd_stage2_8[v59 & 0x7F | (_pcre2_ucd_stage1_8[v59 >> 7] << 7)] + 1]) != 0)
        {
          v360 = v1358;
          v361 = v57;
          v362 = v11;
          v363 = _pcre2_ord2utf_8(v359 + v59, v14 + 74);
          v11 = v362;
          *(_QWORD *)(v14 + 40) = v363;
          v26 = *(_DWORD *)(v14 + 56);
        }
        else
        {
          v360 = v1358;
          v361 = v57;
          *(_QWORD *)(v14 + 40) = 0;
        }
        v1358 = v360;
        if (v26)
        {
          v1348 = v11;
          v1349 = v358;
          v364 = (size_t *)(v14 + 40);
          v365 = *(unsigned __int8 **)(v14 + 80);
          v366 = 1;
          while (1)
          {
            if ((unint64_t)v365 > *v58 - *v54
              || (v367 = cstdlib_memcmp(v365, *(const void **)(v14 + 16), *v54), v368 = (_QWORD *)(v14 + 24), v367))
            {
              v369 = *v364;
              if (!*v364)
                break;
              v370 = *(unsigned __int8 **)(v14 + 80);
              if ((unint64_t)v370 > *v58 - v369)
                break;
              v371 = cstdlib_memcmp(v370, (const void *)(v14 + 74), v369);
              v368 = (_QWORD *)(v14 + 40);
              if (v371)
                break;
            }
            v365 = (unsigned __int8 *)(*(_QWORD *)(v14 + 80) + *v368);
            *(_QWORD *)(v14 + 80) = v365;
            ++v366;
            v372 = *(_DWORD *)(v14 + 56);
            if (v366 > v372)
            {
              v358 = v1349;
              v11 = v1348;
              goto LABEL_709;
            }
          }
          v373 = v361;
          v374 = (unsigned __int16)*v361;
          if (!*v361)
          {
            v21 = 0;
            v8 = v1349;
            v7 = v1350;
            v16 = v58;
            v11 = v1348;
            v18 = v373;
            goto LABEL_2412;
          }
          v375 = *(unsigned __int8 **)(v14 + 80);
          v7 = v1350;
          v11 = v1348;
          if ((unint64_t)v375 < *v58)
          {
            v21 = 0;
            v16 = v58;
            v8 = v1349;
            v18 = v373;
            goto LABEL_2412;
          }
          v16 = v58;
          v8 = v1349;
          if ((unint64_t)v375 <= *v15)
          {
            v21 = 0;
            v18 = v373;
            goto LABEL_2412;
          }
          *v1360 = 1;
          if (v374 <= 1)
          {
            v18 = v373;
            goto LABEL_1163;
          }
          return 4294967294;
        }
        v372 = 0;
LABEL_709:
        v376 = *(_DWORD *)(v14 + 60);
        if (v372 == v376)
        {
          v7 = v1350;
          goto LABEL_730;
        }
        v7 = v1350;
        if (!(_DWORD)v11)
        {
          v8 = v358;
          v16 = v58;
LABEL_3274:
          v12 = 0;
          a2 = *(unsigned __int8 **)v14;
          v1313 = -54;
          goto LABEL_3172;
        }
        v377 = v11;
        v378 = *(unsigned __int8 **)(v14 + 80);
        *(_QWORD *)(v14 + 8) = v378;
        if (v372 < v376)
        {
          v379 = (size_t *)(v14 + 40);
          while (1)
          {
            if ((unint64_t)v378 > *v58 - *v54
              || (v380 = cstdlib_memcmp(v378, *(const void **)(v14 + 16), *v54), v381 = (_QWORD *)(v14 + 24), v380))
            {
              v382 = *v379;
              if (!*v379)
                break;
              v383 = *(unsigned __int8 **)(v14 + 80);
              if ((unint64_t)v383 > *v58 - v382)
                break;
              v384 = cstdlib_memcmp(v383, (const void *)(v14 + 74), v382);
              v381 = (_QWORD *)(v14 + 40);
              if (v384)
                break;
            }
            v378 = (unsigned __int8 *)(*(_QWORD *)(v14 + 80) + *v381);
            *(_QWORD *)(v14 + 80) = v378;
            if (++v372 >= *(_DWORD *)(v14 + 60))
              goto LABEL_729;
          }
          v385 = (unsigned __int16)*v1362;
          if (*v1362)
          {
            v386 = *(unsigned __int8 **)(v14 + 80);
            if ((unint64_t)v386 >= *v58 && (unint64_t)v386 > *v15)
            {
              *v1360 = 1;
              if (v385 > 1)
                return 4294967294;
            }
          }
        }
LABEL_729:
        v11 = v377;
        if ((_DWORD)v377 == 2)
        {
LABEL_730:
          v8 = v358;
          v16 = v58;
          v18 = v1362;
          goto LABEL_2406;
        }
        v387 = *(unsigned __int8 **)(v14 + 80);
        v8 = v358;
        v16 = v58;
        v18 = v1362;
LABEL_2896:
        if ((unint64_t)v387 <= *(_QWORD *)(v14 + 8))
          goto LABEL_2406;
        v12 = 0;
        a2 = *(unsigned __int8 **)v14;
        v1313 = -53;
LABEL_3172:
        *(_BYTE *)(v14 + 72) = v1313;
        v1294 = v8;
        v1295 = &v8[v14];
        if ((unint64_t)v1295 >= *(_QWORD *)(v7 + 40))
        {
          v1299 = *(_QWORD *)(v7 + 24);
          v1300 = 2 * v1299;
          v1301 = *(_QWORD *)(v7 + 56);
          if (v1301 < (2 * v1299) >> 10)
          {
            v1300 = (v1301 << 10) / (unint64_t)v1294 * (_QWORD)v1294;
            if (v1299 >= v1300)
              return 4294967233;
          }
          v1302 = v16;
          v1297 = v11;
          v1303 = (char *)(*(uint64_t (**)(unint64_t, _QWORD))v7)(v1300, *(_QWORD *)(v7 + 16));
          if (!v1303)
            return 4294967248;
          v1304 = v1303;
          v1359 = v1302;
          cstdlib_memcpy(v1303, *(const void **)(v7 + 32), *(_QWORD *)(v7 + 24));
          v1305 = *(_QWORD *)(v7 + 32);
          if (v1305 != *(_QWORD *)(v7 + 48))
            (*(void (**)(_QWORD, _QWORD))(v7 + 8))(*(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 16));
          *(_QWORD *)(v7 + 32) = v1304;
          *(_QWORD *)(v7 + 40) = &v1304[v1300];
          v14 = (uint64_t)&v1304[v14 - v1305];
          v1295 = &v1294[v14];
          *(_QWORD *)(v7 + 24) = v1300;
          v1298 = __n;
          v1296 = v1359;
        }
        else
        {
          v1296 = v16;
          v1297 = v11;
          v1298 = __n;
        }
        v1358 = v1295;
        cstdlib_memcpy(v1295 + 80, (const void *)(v14 + 80), v1298);
        v10 = *(_DWORD *)(v14 + 48) + 1;
        *((_DWORD *)v1295 + 12) = v10;
        v14 = (uint64_t)v1295;
        v11 = v1297;
        v8 = v1294;
        v16 = v1296;
        goto LABEL_2;
      case 0x3Bu:
      case 0x3Cu:
      case 0x3Du:
      case 0x3Eu:
      case 0x3Fu:
      case 0x40u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x4Bu:
      case 0x4Cu:
      case 0x4Du:
        v28 = a2 + 1;
        *(_QWORD *)v14 = a2 + 1;
        if (v19 <= 0x47)
          v29 = -59;
        else
          v29 = -72;
        v30 = v29 + *a2;
        v31 = rep_min[v30];
        *(_DWORD *)(v14 + 56) = v31;
        v32 = rep_max[v30];
        *(_DWORD *)(v14 + 60) = v32;
        v11 = rep_typ[v30];
        goto LABEL_108;
      case 0x41u:
      case 0x4Eu:
        v31 = 0;
        *(_DWORD *)(v14 + 56) = 0;
        v32 = __rev16(*(unsigned __int16 *)(a2 + 1));
        *(_DWORD *)(v14 + 60) = v32;
        v28 = a2 + 3;
        *(_QWORD *)v14 = a2 + 3;
        v11 = 1;
        goto LABEL_108;
      case 0x42u:
      case 0x4Fu:
        v31 = 0;
        v11 = 0;
        *(_DWORD *)(v14 + 56) = 0;
        v32 = __rev16(*(unsigned __int16 *)(a2 + 1));
        *(_DWORD *)(v14 + 60) = v32;
        v28 = a2 + 3;
        *(_QWORD *)v14 = a2 + 3;
        goto LABEL_108;
      case 0x43u:
      case 0x50u:
        v32 = __rev16(*(unsigned __int16 *)(a2 + 1));
        *(_DWORD *)(v14 + 56) = v32;
        *(_DWORD *)(v14 + 60) = v32;
        v28 = a2 + 3;
        *(_QWORD *)v14 = a2 + 3;
        v31 = v32;
        goto LABEL_108;
      case 0x44u:
      case 0x51u:
        v31 = 0;
        *(_QWORD *)(v14 + 56) = 0xFFFFFFFF00000000;
        v28 = a2 + 1;
        *(_QWORD *)v14 = a2 + 1;
        v11 = 2;
        goto LABEL_105;
      case 0x45u:
      case 0x52u:
        *(_QWORD *)(v14 + 56) = 0xFFFFFFFF00000001;
        v28 = a2 + 1;
        *(_QWORD *)v14 = a2 + 1;
        v11 = 2;
        v31 = 1;
LABEL_105:
        v32 = -1;
        goto LABEL_108;
      case 0x46u:
      case 0x53u:
        v31 = 0;
        *(_QWORD *)(v14 + 56) = 0x100000000;
        v28 = a2 + 1;
        *(_QWORD *)v14 = a2 + 1;
        v11 = 2;
        v32 = 1;
        goto LABEL_108;
      case 0x47u:
      case 0x54u:
        v31 = 0;
        *(_DWORD *)(v14 + 56) = 0;
        v32 = __rev16(*(unsigned __int16 *)(a2 + 1));
        *(_DWORD *)(v14 + 60) = v32;
        v28 = a2 + 3;
        *(_QWORD *)v14 = a2 + 3;
        v11 = 2;
LABEL_108:
        a2 = v28 + 1;
        *(_QWORD *)v14 = v28 + 1;
        v82 = *v28;
        *(_DWORD *)(v14 + 64) = v82;
        if (v1363 && v82 >= 0xC0)
        {
          if ((v82 & 0x20) != 0)
          {
            v84 = *a2 & 0x3F;
            if ((v82 & 0x10) != 0)
            {
              if ((v82 & 8) != 0)
              {
                v113 = v28[2] & 0x3F;
                v114 = v28[3] & 0x3F;
                v115 = v28[4] & 0x3F;
                if ((v82 & 4) != 0)
                {
                  v82 = ((v82 & 1) << 30) | (v84 << 24) | (v113 << 18) | (v114 << 12) | (v115 << 6) | v28[5] & 0x3F;
                  *(_DWORD *)(v14 + 64) = v82;
                  a2 = v28 + 6;
                }
                else
                {
                  a2 = v28 + 5;
                  v82 = ((v82 & 3) << 24) | (v84 << 18) | (v113 << 12) | (v114 << 6) | v115;
                  *(_DWORD *)(v14 + 64) = v82;
                }
              }
              else
              {
                v82 = ((v82 & 7) << 18) | (v84 << 12) | ((v28[2] & 0x3F) << 6) | v28[3] & 0x3F;
                *(_DWORD *)(v14 + 64) = v82;
                a2 = v28 + 4;
              }
            }
            else
            {
              v82 = ((v82 & 0xF) << 12) | (v84 << 6) | v28[2] & 0x3F;
              *(_DWORD *)(v14 + 64) = v82;
              a2 = v28 + 3;
            }
            *(_QWORD *)v14 = a2;
          }
          else
          {
            a2 = v28 + 2;
            *(_QWORD *)v14 = v28 + 2;
            v83 = v28[1] & 0x3F | ((v82 & 0x1F) << 6);
            *(_DWORD *)(v14 + 64) = v83;
            v82 = v83;
          }
        }
        if (v19 < 0x48)
        {
          if (v1363)
          {
            if (v31)
            {
              v253 = *v16;
              v254 = *(unsigned __int8 **)(v14 + 80);
              v255 = 1;
              while ((unint64_t)v254 < v253)
              {
                *(_QWORD *)(v14 + 80) = v254 + 1;
                v256 = *v254;
                if (v256 < 0xC0)
                {
                  ++v254;
                }
                else if ((v256 & 0x20) != 0)
                {
                  v258 = v254[1] & 0x3F;
                  if ((v256 & 0x10) != 0)
                  {
                    if ((v256 & 8) != 0)
                    {
                      v259 = v254[2] & 0x3F;
                      v260 = v254[3] & 0x3F;
                      v261 = v254[4] & 0x3F;
                      if ((v256 & 4) != 0)
                      {
                        v256 = ((v256 & 1) << 30) | (v258 << 24) | (v259 << 18) | (v260 << 12) | (v261 << 6) | v254[5] & 0x3F;
                        v254 += 6;
                      }
                      else
                      {
                        v256 = ((v256 & 3) << 24) | (v258 << 18) | (v259 << 12) | (v260 << 6) | v261;
                        v254 += 5;
                      }
                    }
                    else
                    {
                      v256 = ((v256 & 7) << 18) | (v258 << 12) | ((v254[2] & 0x3F) << 6) | v254[3] & 0x3F;
                      v254 += 4;
                    }
                  }
                  else
                  {
                    v256 = ((v256 & 0xF) << 12) | (v258 << 6) | v254[2] & 0x3F;
                    v254 += 3;
                  }
                  *(_QWORD *)(v14 + 80) = v254;
                }
                else
                {
                  *(_QWORD *)(v14 + 80) = v254 + 2;
                  v257 = v254[1] & 0x3F | ((v256 & 0x1F) << 6);
                  v254 += 2;
                  v256 = v257;
                }
                if (v82 == v256)
                  goto LABEL_1163;
                if (++v255 > v31)
                  goto LABEL_465;
              }
              v112 = (unsigned __int16)*v18;
              if (!*v18 || (unint64_t)v254 <= *v15)
                goto LABEL_1163;
              goto LABEL_1162;
            }
          }
          else if (v31)
          {
            v267 = 0;
            v268 = *v16;
            v269 = *(unsigned __int8 **)(v14 + 80);
            while (1)
            {
              v77 = &v269[v267];
              if ((unint64_t)&v269[v267] >= v268)
                break;
              *(_QWORD *)(v14 + 80) = v77 + 1;
              if (v82 == *v77)
                goto LABEL_1163;
              if ((int)++v267 + 1 > v31)
                goto LABEL_465;
            }
LABEL_489:
            v112 = (unsigned __int16)*v18;
            if (!*v18 || (unint64_t)v77 <= *v15)
              goto LABEL_1163;
LABEL_1162:
            *v1360 = 1;
            if (v112 <= 1)
              goto LABEL_1163;
            return 4294967294;
          }
LABEL_465:
          if (v32 == v31)
            goto LABEL_2406;
          if (!(_DWORD)v11)
          {
            if (!v1363)
            {
LABEL_3230:
              v12 = 0;
              v1313 = 31;
              goto LABEL_3172;
            }
            v1313 = -50;
            goto LABEL_3194;
          }
          v270 = *(unsigned __int8 **)(v14 + 80);
          *(_QWORD *)(v14 + 8) = v270;
          if (v1363)
          {
            v271 = v270;
            v478 = v32 >= v31;
            v272 = v32 - v31;
            if (v272 != 0 && v478)
            {
              v273 = *v16;
              v271 = v270;
              while ((unint64_t)v271 < v273)
              {
                v274 = *v271;
                if (v274 < 0xC0)
                {
                  v276 = 1;
                }
                else
                {
                  v275 = v271[1] & 0x3F;
                  if ((v274 & 0x20) != 0)
                  {
                    if ((v274 & 0x10) != 0)
                    {
                      if ((v274 & 8) != 0)
                      {
                        v277 = v271[2] & 0x3F;
                        v278 = v271[3] & 0x3F;
                        v279 = v271[4] & 0x3F;
                        if ((v274 & 4) != 0)
                        {
                          v274 = ((v274 & 1) << 30) | (v275 << 24) | (v277 << 18) | (v278 << 12) | (v279 << 6) | v271[5] & 0x3F;
                          v276 = 6;
                        }
                        else
                        {
                          v274 = ((v274 & 3) << 24) | (v275 << 18) | (v277 << 12) | (v278 << 6) | v279;
                          v276 = 5;
                        }
                      }
                      else
                      {
                        v274 = ((v274 & 7) << 18) | (v275 << 12) | ((v271[2] & 0x3F) << 6) | v271[3] & 0x3F;
                        v276 = 4;
                      }
                    }
                    else
                    {
                      v274 = ((v274 & 0xF) << 12) | (v275 << 6) | v271[2] & 0x3F;
                      v276 = 3;
                    }
                  }
                  else
                  {
                    v276 = 2;
                    v274 = v271[1] & 0x3F | ((v274 & 0x1F) << 6);
                  }
                }
                if (v82 != v274)
                {
                  v271 += v276;
                  *(_QWORD *)(v14 + 80) = v271;
                  if (--v272)
                    continue;
                }
                goto LABEL_982;
              }
              v503 = (unsigned __int16)*v18;
              if (*v18)
              {
                if ((unint64_t)v271 > *v15)
                {
                  *v1360 = 1;
                  if (v503 > 1)
                    return 4294967294;
                }
              }
            }
LABEL_982:
            if ((_DWORD)v11 == 2)
              goto LABEL_2406;
LABEL_2904:
            if (v271 > v270)
            {
              v12 = 0;
              a2 = *(unsigned __int8 **)v14;
              v1313 = -49;
              goto LABEL_3172;
            }
          }
          else
          {
            v301 = v270;
            v478 = v32 >= v31;
            v302 = v32 - v31;
            if (v302 != 0 && v478)
            {
              v303 = *v16;
              v301 = v270;
              while ((unint64_t)v301 < v303)
              {
                if (v82 != *v301)
                {
                  *(_QWORD *)(v14 + 80) = ++v301;
                  if (--v302)
                    continue;
                }
                goto LABEL_992;
              }
              v505 = (unsigned __int16)*v18;
              if (*v18)
              {
                if ((unint64_t)v301 > *v15)
                {
                  *v1360 = 1;
                  if (v505 > 1)
                    return 4294967294;
                }
              }
            }
LABEL_992:
            if ((_DWORD)v11 == 2)
              goto LABEL_2406;
LABEL_2887:
            if (v301 != v270)
            {
              v12 = 0;
              a2 = *(unsigned __int8 **)v14;
              v1313 = 32;
              goto LABEL_3172;
            }
          }
        }
        else
        {
          if (v1363)
          {
            if (v82 <= 0x7F)
              v252 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 96) + v82);
            else
              v252 = _pcre2_ucd_records_8[2 * _pcre2_ucd_stage2_8[v82 & 0x7F | (_pcre2_ucd_stage1_8[v82 >> 7] << 7)] + 1]
                   + v82;
            *(_DWORD *)(v14 + 68) = v252;
            if (v31)
            {
              v280 = *v16;
              v281 = *(unsigned __int8 **)(v14 + 80);
              v282 = 1;
              while ((unint64_t)v281 < v280)
              {
                *(_QWORD *)(v14 + 80) = v281 + 1;
                v283 = *v281;
                if (v283 < 0xC0)
                {
                  ++v281;
                }
                else if ((v283 & 0x20) != 0)
                {
                  v285 = v281[1] & 0x3F;
                  if ((v283 & 0x10) != 0)
                  {
                    if ((v283 & 8) != 0)
                    {
                      v286 = v281[2] & 0x3F;
                      v287 = v281[3] & 0x3F;
                      v288 = v281[4] & 0x3F;
                      if ((v283 & 4) != 0)
                      {
                        v283 = ((v283 & 1) << 30) | (v285 << 24) | (v286 << 18) | (v287 << 12) | (v288 << 6) | v281[5] & 0x3F;
                        v281 += 6;
                      }
                      else
                      {
                        v283 = ((v283 & 3) << 24) | (v285 << 18) | (v286 << 12) | (v287 << 6) | v288;
                        v281 += 5;
                      }
                    }
                    else
                    {
                      v283 = ((v283 & 7) << 18) | (v285 << 12) | ((v281[2] & 0x3F) << 6) | v281[3] & 0x3F;
                      v281 += 4;
                    }
                  }
                  else
                  {
                    v283 = ((v283 & 0xF) << 12) | (v285 << 6) | v281[2] & 0x3F;
                    v281 += 3;
                  }
                  *(_QWORD *)(v14 + 80) = v281;
                }
                else
                {
                  *(_QWORD *)(v14 + 80) = v281 + 2;
                  v284 = v281[1] & 0x3F | ((v283 & 0x1F) << 6);
                  v281 += 2;
                  v283 = v284;
                }
                if (v82 == v283 || v252 == v283)
                  goto LABEL_1163;
                if (++v282 > v31)
                  goto LABEL_513;
              }
              v112 = (unsigned __int16)*v18;
              if (!*v18 || (unint64_t)v281 <= *v15)
                goto LABEL_1163;
              goto LABEL_1162;
            }
          }
          else
          {
            v252 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 96) + v82);
            *(_DWORD *)(v14 + 68) = v252;
            if (v31)
            {
              v262 = 0;
              v263 = *v16;
              v264 = *(unsigned __int8 **)(v14 + 80);
              do
              {
                v65 = &v264[v262];
                if ((unint64_t)&v264[v262] >= v263)
                  goto LABEL_486;
                v265 = *v65;
                if (v82 == v265 || v252 == v265)
                  goto LABEL_1163;
                *(_QWORD *)(v14 + 80) = &v264[++v262];
              }
              while ((int)v262 + 1 <= v31);
            }
          }
LABEL_513:
          if (v32 == v31)
            goto LABEL_2406;
          if (!(_DWORD)v11)
          {
            if (!v1363)
            {
LABEL_3278:
              v12 = 0;
              v1313 = 29;
              goto LABEL_3172;
            }
            v1313 = -52;
LABEL_3194:
            v12 = 0;
            goto LABEL_3172;
          }
          v290 = *(unsigned __int8 **)(v14 + 80);
          *(_QWORD *)(v14 + 8) = v290;
          if (v1363)
          {
            v291 = v290;
            v478 = v32 >= v31;
            v292 = v32 - v31;
            if (v292 != 0 && v478)
            {
              v293 = *v16;
              v291 = v290;
              while ((unint64_t)v291 < v293)
              {
                v294 = *v291;
                if (v294 < 0xC0)
                {
                  v296 = 1;
                }
                else
                {
                  v295 = v291[1] & 0x3F;
                  if ((v294 & 0x20) != 0)
                  {
                    if ((v294 & 0x10) != 0)
                    {
                      if ((v294 & 8) != 0)
                      {
                        v297 = v291[2] & 0x3F;
                        v298 = v291[3] & 0x3F;
                        v299 = v291[4] & 0x3F;
                        if ((v294 & 4) != 0)
                        {
                          v294 = ((v294 & 1) << 30) | (v295 << 24) | (v297 << 18) | (v298 << 12) | (v299 << 6) | v291[5] & 0x3F;
                          v296 = 6;
                        }
                        else
                        {
                          v294 = ((v294 & 3) << 24) | (v295 << 18) | (v297 << 12) | (v298 << 6) | v299;
                          v296 = 5;
                        }
                      }
                      else
                      {
                        v294 = ((v294 & 7) << 18) | (v295 << 12) | ((v291[2] & 0x3F) << 6) | v291[3] & 0x3F;
                        v296 = 4;
                      }
                    }
                    else
                    {
                      v294 = ((v294 & 0xF) << 12) | (v295 << 6) | v291[2] & 0x3F;
                      v296 = 3;
                    }
                  }
                  else
                  {
                    v296 = 2;
                    v294 = v291[1] & 0x3F | ((v294 & 0x1F) << 6);
                  }
                }
                if (v82 != v294 && v252 != v294)
                {
                  v291 += v296;
                  *(_QWORD *)(v14 + 80) = v291;
                  if (--v292)
                    continue;
                }
                goto LABEL_987;
              }
              v504 = (unsigned __int16)*v18;
              if (*v18)
              {
                if ((unint64_t)v291 > *v15)
                {
                  *v1360 = 1;
                  if (v504 > 1)
                    return 4294967294;
                }
              }
            }
LABEL_987:
            if ((_DWORD)v11 == 2)
              goto LABEL_2406;
LABEL_2900:
            if (v291 > v290)
            {
              v12 = 0;
              a2 = *(unsigned __int8 **)v14;
              v1313 = -51;
              goto LABEL_3172;
            }
          }
          else
          {
            v304 = v290;
            v478 = v32 >= v31;
            v305 = v32 - v31;
            if (v305 != 0 && v478)
            {
              v306 = *v16;
              v304 = v290;
              while ((unint64_t)v304 < v306)
              {
                v307 = *v304;
                if (v82 != v307 && v252 != v307)
                {
                  *(_QWORD *)(v14 + 80) = ++v304;
                  if (--v305)
                    continue;
                }
                goto LABEL_997;
              }
              v506 = (unsigned __int16)*v18;
              if (*v18)
              {
                if ((unint64_t)v304 > *v15)
                {
                  *v1360 = 1;
                  if (v506 > 1)
                    return 4294967294;
                }
              }
            }
LABEL_997:
            if ((_DWORD)v11 == 2)
              goto LABEL_2406;
LABEL_2885:
            if (v304 != v290)
            {
              v12 = 0;
              a2 = *(unsigned __int8 **)v14;
              v1313 = 30;
              goto LABEL_3172;
            }
          }
        }
        goto LABEL_2406;
      case 0x55u:
      case 0x56u:
      case 0x57u:
      case 0x58u:
      case 0x59u:
      case 0x5Au:
        v33 = a2 + 1;
        *(_QWORD *)v14 = a2 + 1;
        v34 = *a2 - 85;
        v35 = rep_min[v34];
        *(_DWORD *)(v14 + 56) = v35;
        *(_DWORD *)(v14 + 60) = rep_max[v34];
        v11 = rep_typ[v34];
        goto LABEL_309;
      case 0x5Bu:
      case 0x5Cu:
        v35 = 0;
        *(_DWORD *)(v14 + 56) = 0;
        *(_DWORD *)(v14 + 60) = __rev16(*(unsigned __int16 *)(a2 + 1));
        v11 = *a2 != 92;
        goto LABEL_301;
      case 0x5Du:
        v35 = __rev16(*(unsigned __int16 *)(a2 + 1));
        *(_DWORD *)(v14 + 56) = v35;
        *(_DWORD *)(v14 + 60) = v35;
LABEL_301:
        v33 = a2 + 3;
        *(_QWORD *)v14 = a2 + 3;
        goto LABEL_309;
      case 0x5Eu:
        v35 = 0;
        v192 = 0xFFFFFFFF00000000;
        goto LABEL_306;
      case 0x5Fu:
        *(_QWORD *)(v14 + 56) = 0xFFFFFFFF00000001;
        v193 = (unsigned int *)(v14 + 56);
        *(_QWORD *)v14 = a2 + 2;
        v194 = a2[1];
        *(_DWORD *)(v14 + 64) = v194;
        v195 = (int *)(v14 + 64);
        if ((v194 - 15) <= 1)
        {
          *(_QWORD *)v14 = a2 + 3;
          v196 = a2[2];
          *(_QWORD *)v14 = a2 + 4;
          v197 = a2[3];
          *(_DWORD *)(v14 + 68) = v197;
          v11 = 2;
          v35 = 1;
          goto LABEL_311;
        }
        v11 = 2;
        v35 = 1;
        goto LABEL_350;
      case 0x60u:
        v35 = 0;
        v192 = 0x100000000;
LABEL_306:
        *(_QWORD *)(v14 + 56) = v192;
        v33 = a2 + 1;
        goto LABEL_308;
      case 0x61u:
        v35 = 0;
        *(_DWORD *)(v14 + 56) = 0;
        *(_DWORD *)(v14 + 60) = __rev16(*(unsigned __int16 *)(a2 + 1));
        v33 = a2 + 3;
LABEL_308:
        *(_QWORD *)v14 = v33;
        v11 = 2;
LABEL_309:
        *(_QWORD *)v14 = v33 + 1;
        v194 = *v33;
        *(_DWORD *)(v14 + 64) = v194;
        v195 = (int *)(v14 + 64);
        if ((v194 - 15) < 2)
        {
          *(_QWORD *)v14 = v33 + 2;
          v196 = v33[1];
          *(_QWORD *)v14 = v33 + 3;
          v197 = v33[2];
          *(_DWORD *)(v14 + 68) = v197;
          if (!v35)
            goto LABEL_1334;
LABEL_311:
          v198 = v194;
          switch((int)v196)
          {
            case 0:
              if (v194 == 15)
                goto LABEL_2863;
              v388 = *v16;
              v389 = *(unsigned __int8 **)(v14 + 80);
              v390 = 1;
              while ((unint64_t)v389 < v388)
              {
                v391 = v389 + 1;
                *(_QWORD *)(v14 + 80) = v389 + 1;
                if (v1363)
                {
                  v392 = *v389;
                  if (v392 >= 0xC0)
                  {
                    v393 = 2;
                    v394 = 3;
                    v395 = 4;
                    v396 = 5;
                    if ((v392 & 4) != 0)
                      v396 = 6;
                    if ((v392 & 8) != 0)
                      v395 = v396;
                    if ((v392 & 0x10) != 0)
                      v394 = v395;
                    if ((v392 & 0x20) != 0)
                      v393 = v394;
                    v391 = &v389[v393];
                    *(_QWORD *)(v14 + 80) = v391;
                  }
                }
                ++v390;
                v389 = v391;
                if (v390 > v35)
                  goto LABEL_1334;
              }
              goto LABEL_1070;
            case 1:
              v397 = *v16;
              v200 = *(unsigned __int8 **)(v14 + 80);
              v398 = 1;
              while (2)
              {
                if ((unint64_t)v200 >= v397)
                  goto LABEL_875;
                *(_QWORD *)(v14 + 80) = v200 + 1;
                v399 = *v200;
                if (!v1363 || v399 < 0xC0)
                {
                  ++v200;
                  goto LABEL_765;
                }
                if ((v399 & 0x20) == 0)
                {
                  *(_QWORD *)(v14 + 80) = v200 + 2;
                  v400 = v200[1] & 0x3F | ((v399 & 0x1F) << 6);
                  v200 += 2;
                  v399 = v400;
                  goto LABEL_765;
                }
                v401 = v200[1] & 0x3F;
                if ((v399 & 0x10) != 0)
                {
                  if ((v399 & 8) != 0)
                  {
                    v402 = v11;
                    v403 = v200[2] & 0x3F;
                    v404 = v200[3] & 0x3F;
                    v405 = v200[4] & 0x3F;
                    if ((v399 & 4) != 0)
                    {
                      v399 = ((v399 & 1) << 30) | (v401 << 24) | (v403 << 18) | (v404 << 12) | (v405 << 6) | v200[5] & 0x3F;
                      v200 += 6;
                    }
                    else
                    {
                      v399 = ((v399 & 3) << 24) | (v401 << 18) | (v403 << 12) | (v404 << 6) | v405;
                      v200 += 5;
                    }
                    *(_QWORD *)(v14 + 80) = v200;
                    v11 = v402;
LABEL_765:
                    v406 = BYTE1(_pcre2_ucd_records_8[2
                                                    * _pcre2_ucd_stage2_8[v399 & 0x7F | (_pcre2_ucd_stage1_8[v399 >> 7] << 7)]]);
                    v102 = v406 > 9;
                    v407 = (1 << v406) & 0x320;
                    if (v102 || v407 == 0)
                    {
                      if (v194 != 15)
                        goto LABEL_2863;
                      v198 = 15;
                    }
                    else if (v198 == 15)
                    {
                      goto LABEL_2863;
                    }
                    if (++v398 > v35)
                      goto LABEL_1334;
                    continue;
                  }
                  v399 = ((v399 & 7) << 18) | (v401 << 12) | ((v200[2] & 0x3F) << 6) | v200[3] & 0x3F;
                  v200 += 4;
                }
                else
                {
                  v399 = ((v399 & 0xF) << 12) | (v401 << 6) | v200[2] & 0x3F;
                  v200 += 3;
                }
                break;
              }
              *(_QWORD *)(v14 + 80) = v200;
              goto LABEL_765;
            case 2:
              v409 = *v16;
              v410 = *(unsigned __int8 **)(v14 + 80);
              v411 = 1;
              while ((unint64_t)v410 < v409)
              {
                v412 = v11;
                *(_QWORD *)(v14 + 80) = v410 + 1;
                v413 = *v410;
                if (v1363 && v413 >= 0xC0)
                {
                  if ((v413 & 0x20) != 0)
                  {
                    v415 = v410[1] & 0x3F;
                    if ((v413 & 0x10) != 0)
                    {
                      if ((v413 & 8) != 0)
                      {
                        v416 = v410[2] & 0x3F;
                        v417 = v410[3] & 0x3F;
                        v418 = v410[4] & 0x3F;
                        if ((v413 & 4) != 0)
                        {
                          v413 = ((v413 & 1) << 30) | (v415 << 24) | (v416 << 18) | (v417 << 12) | (v418 << 6) | v410[5] & 0x3F;
                          v410 += 6;
                        }
                        else
                        {
                          v413 = ((v413 & 3) << 24) | (v415 << 18) | (v416 << 12) | (v417 << 6) | v418;
                          v410 += 5;
                        }
                      }
                      else
                      {
                        v413 = ((v413 & 7) << 18) | (v415 << 12) | ((v410[2] & 0x3F) << 6) | v410[3] & 0x3F;
                        v410 += 4;
                      }
                    }
                    else
                    {
                      v413 = ((v413 & 0xF) << 12) | (v415 << 6) | v410[2] & 0x3F;
                      v410 += 3;
                    }
                    *(_QWORD *)(v14 + 80) = v410;
                  }
                  else
                  {
                    *(_QWORD *)(v14 + 80) = v410 + 2;
                    v414 = v410[1] & 0x3F | ((v413 & 0x1F) << 6);
                    v410 += 2;
                    v413 = v414;
                  }
                }
                else
                {
                  ++v410;
                }
                if ((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                    * _pcre2_ucd_stage2_8[v413 & 0x7F | (_pcre2_ucd_stage1_8[v413 >> 7] << 7)]])] != (_DWORD)v197) != (v194 == 15))
                {
                  v21 = 0;
                  v11 = v412;
                  goto LABEL_2412;
                }
                ++v411;
                v11 = v412;
                if (v411 > v35)
                  goto LABEL_1334;
              }
LABEL_2860:
              v233 = (unsigned __int16)*v18;
              if (!*v18 || (unint64_t)v410 <= *v15)
                goto LABEL_2863;
              break;
            case 3:
              v419 = *v16;
              v200 = *(unsigned __int8 **)(v14 + 80);
              v420 = 1;
              while (2)
              {
                if ((unint64_t)v200 >= v419)
                  goto LABEL_875;
                *(_QWORD *)(v14 + 80) = v200 + 1;
                v421 = *v200;
                if (!v1363 || v421 < 0xC0)
                {
                  ++v200;
                  goto LABEL_809;
                }
                if ((v421 & 0x20) == 0)
                {
                  *(_QWORD *)(v14 + 80) = v200 + 2;
                  v422 = v200[1] & 0x3F | ((v421 & 0x1F) << 6);
                  v200 += 2;
                  v421 = v422;
                  goto LABEL_809;
                }
                v423 = v200[1] & 0x3F;
                if ((v421 & 0x10) != 0)
                {
                  if ((v421 & 8) != 0)
                  {
                    v424 = v11;
                    v425 = v200[2] & 0x3F;
                    v426 = v200[3] & 0x3F;
                    v427 = v200[4] & 0x3F;
                    if ((v421 & 4) != 0)
                    {
                      v421 = ((v421 & 1) << 30) | (v423 << 24) | (v425 << 18) | (v426 << 12) | (v427 << 6) | v200[5] & 0x3F;
                      v200 += 6;
                    }
                    else
                    {
                      v421 = ((v421 & 3) << 24) | (v423 << 18) | (v425 << 12) | (v426 << 6) | v427;
                      v200 += 5;
                    }
                    *(_QWORD *)(v14 + 80) = v200;
                    v11 = v424;
LABEL_809:
                    if ((v197 != BYTE1(_pcre2_ucd_records_8[2
                                                           * _pcre2_ucd_stage2_8[v421 & 0x7F | (_pcre2_ucd_stage1_8[v421 >> 7] << 7)]])) != (v194 == 15))
                      goto LABEL_2863;
                    if (++v420 > v35)
                      goto LABEL_1334;
                    continue;
                  }
                  v421 = ((v421 & 7) << 18) | (v423 << 12) | ((v200[2] & 0x3F) << 6) | v200[3] & 0x3F;
                  v200 += 4;
                }
                else
                {
                  v421 = ((v421 & 0xF) << 12) | (v423 << 6) | v200[2] & 0x3F;
                  v200 += 3;
                }
                break;
              }
              *(_QWORD *)(v14 + 80) = v200;
              goto LABEL_809;
            case 4:
              v428 = *v16;
              v200 = *(unsigned __int8 **)(v14 + 80);
              v429 = 1;
              while (2)
              {
                if ((unint64_t)v200 >= v428)
                  goto LABEL_875;
                *(_QWORD *)(v14 + 80) = v200 + 1;
                v430 = *v200;
                if (!v1363 || v430 < 0xC0)
                {
                  ++v200;
                  goto LABEL_828;
                }
                if ((v430 & 0x20) == 0)
                {
                  *(_QWORD *)(v14 + 80) = v200 + 2;
                  v431 = v200[1] & 0x3F | ((v430 & 0x1F) << 6);
                  v200 += 2;
                  v430 = v431;
                  goto LABEL_828;
                }
                v432 = v200[1] & 0x3F;
                if ((v430 & 0x10) != 0)
                {
                  if ((v430 & 8) != 0)
                  {
                    v433 = v11;
                    v434 = v200[2] & 0x3F;
                    v435 = v200[3] & 0x3F;
                    v436 = v200[4] & 0x3F;
                    if ((v430 & 4) != 0)
                    {
                      v430 = ((v430 & 1) << 30) | (v432 << 24) | (v434 << 18) | (v435 << 12) | (v436 << 6) | v200[5] & 0x3F;
                      v200 += 6;
                    }
                    else
                    {
                      v430 = ((v430 & 3) << 24) | (v432 << 18) | (v434 << 12) | (v435 << 6) | v436;
                      v200 += 5;
                    }
                    *(_QWORD *)(v14 + 80) = v200;
                    v11 = v433;
LABEL_828:
                    if ((v197 != LOBYTE(_pcre2_ucd_records_8[2
                                                            * _pcre2_ucd_stage2_8[v430 & 0x7F | (_pcre2_ucd_stage1_8[v430 >> 7] << 7)]])) != (v194 == 15))
                      goto LABEL_2863;
                    if (++v429 > v35)
                      goto LABEL_1334;
                    continue;
                  }
                  v430 = ((v430 & 7) << 18) | (v432 << 12) | ((v200[2] & 0x3F) << 6) | v200[3] & 0x3F;
                  v200 += 4;
                }
                else
                {
                  v430 = ((v430 & 0xF) << 12) | (v432 << 6) | v200[2] & 0x3F;
                  v200 += 3;
                }
                break;
              }
              *(_QWORD *)(v14 + 80) = v200;
              goto LABEL_828;
            case 5:
              v437 = *v16;
              v200 = *(unsigned __int8 **)(v14 + 80);
              v438 = 1;
              while (2)
              {
                if ((unint64_t)v200 >= v437)
                  goto LABEL_875;
                *(_QWORD *)(v14 + 80) = v200 + 1;
                v439 = *v200;
                if (!v1363 || v439 < 0xC0)
                {
                  ++v200;
                  goto LABEL_847;
                }
                if ((v439 & 0x20) == 0)
                {
                  *(_QWORD *)(v14 + 80) = v200 + 2;
                  v440 = v200[1] & 0x3F | ((v439 & 0x1F) << 6);
                  v200 += 2;
                  v439 = v440;
                  goto LABEL_847;
                }
                v441 = v200[1] & 0x3F;
                if ((v439 & 0x10) != 0)
                {
                  if ((v439 & 8) != 0)
                  {
                    v442 = v11;
                    v443 = v200[2] & 0x3F;
                    v444 = v200[3] & 0x3F;
                    v445 = v200[4] & 0x3F;
                    if ((v439 & 4) != 0)
                    {
                      v439 = ((v439 & 1) << 30) | (v441 << 24) | (v443 << 18) | (v444 << 12) | (v445 << 6) | v200[5] & 0x3F;
                      v200 += 6;
                    }
                    else
                    {
                      v439 = ((v439 & 3) << 24) | (v441 << 18) | (v443 << 12) | (v444 << 6) | v445;
                      v200 += 5;
                    }
                    *(_QWORD *)(v14 + 80) = v200;
                    v11 = v442;
LABEL_847:
                    if (((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                         * _pcre2_ucd_stage2_8[v439 & 0x7F | (_pcre2_ucd_stage1_8[v439 >> 7] << 7)]])] & 0xFFFFFFFD) != 1) != (v194 == 15))
                      goto LABEL_2863;
                    if (++v438 > v35)
                      goto LABEL_1334;
                    continue;
                  }
                  v439 = ((v439 & 7) << 18) | (v441 << 12) | ((v200[2] & 0x3F) << 6) | v200[3] & 0x3F;
                  v200 += 4;
                }
                else
                {
                  v439 = ((v439 & 0xF) << 12) | (v441 << 6) | v200[2] & 0x3F;
                  v200 += 3;
                }
                break;
              }
              *(_QWORD *)(v14 + 80) = v200;
              goto LABEL_847;
            case 6:
            case 7:
              v199 = *v16;
              v200 = *(unsigned __int8 **)(v14 + 80);
              v201 = 1;
              while (2)
              {
                if ((unint64_t)v200 >= v199)
                  goto LABEL_875;
                *(_QWORD *)(v14 + 80) = v200 + 1;
                v202 = *v200;
                if (!v1363 || v202 < 0xC0)
                {
                  ++v200;
                  goto LABEL_328;
                }
                if ((v202 & 0x20) == 0)
                {
                  *(_QWORD *)(v14 + 80) = v200 + 2;
                  v203 = v200[1] & 0x3F | ((v202 & 0x1F) << 6);
                  v200 += 2;
                  v202 = v203;
                  goto LABEL_328;
                }
                v204 = v200[1] & 0x3F;
                if ((v202 & 0x10) != 0)
                {
                  if ((v202 & 8) != 0)
                  {
                    v205 = v11;
                    v206 = v200[2] & 0x3F;
                    v207 = v200[3] & 0x3F;
                    v208 = v200[4] & 0x3F;
                    if ((v202 & 4) != 0)
                    {
                      v202 = ((v202 & 1) << 30) | (v204 << 24) | (v206 << 18) | (v207 << 12) | (v208 << 6) | v200[5] & 0x3F;
                      v200 += 6;
                    }
                    else
                    {
                      v202 = ((v202 & 3) << 24) | (v204 << 18) | (v206 << 12) | (v207 << 6) | v208;
                      v200 += 5;
                    }
                    *(_QWORD *)(v14 + 80) = v200;
                    v11 = v205;
LABEL_328:
                    if (v202 < 0x2000)
                    {
                      if (v202 > 132)
                      {
                        if (v202 > 5759)
                        {
                          if (v202 != 5760 && v202 != 6158)
                            goto LABEL_346;
                        }
                        else if (v202 != 133 && v202 != 160)
                        {
                          goto LABEL_346;
                        }
                      }
                      else if (v202 > 0x20 || ((1 << v202) & 0x100003E00) == 0)
                      {
                        goto LABEL_346;
                      }
                    }
                    else if ((v202 - 0x2000) >= 0xB
                           && ((v202 - 8232) > 0x37
                            || ((1 << (v202 - 40)) & 0x80000000000083) == 0)
                           && v202 != 12288)
                    {
LABEL_346:
                      if ((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                          * _pcre2_ucd_stage2_8[v202 & 0x7F | (_pcre2_ucd_stage1_8[v202 >> 7] << 7)]])] != 6) != (v194 == 15))
                        goto LABEL_2863;
LABEL_338:
                      if (++v201 > v35)
                        goto LABEL_1334;
                      continue;
                    }
                    if (v194 == 15)
                      goto LABEL_2863;
                    goto LABEL_338;
                  }
                  v202 = ((v202 & 7) << 18) | (v204 << 12) | ((v200[2] & 0x3F) << 6) | v200[3] & 0x3F;
                  v200 += 4;
                }
                else
                {
                  v202 = ((v202 & 0xF) << 12) | (v204 << 6) | v200[2] & 0x3F;
                  v200 += 3;
                }
                break;
              }
              *(_QWORD *)(v14 + 80) = v200;
              goto LABEL_328;
            case 8:
              v446 = *v16;
              v200 = *(unsigned __int8 **)(v14 + 80);
              v447 = 1;
              while (2)
              {
                if ((unint64_t)v200 < v446)
                {
                  *(_QWORD *)(v14 + 80) = v200 + 1;
                  v448 = *v200;
                  if (!v1363 || v448 < 0xC0)
                  {
                    ++v200;
                    goto LABEL_866;
                  }
                  if ((v448 & 0x20) == 0)
                  {
                    *(_QWORD *)(v14 + 80) = v200 + 2;
                    v449 = v200[1] & 0x3F | ((v448 & 0x1F) << 6);
                    v200 += 2;
                    v448 = v449;
                    goto LABEL_866;
                  }
                  v450 = v200[1] & 0x3F;
                  if ((v448 & 0x10) != 0)
                  {
                    if ((v448 & 8) != 0)
                    {
                      v451 = v11;
                      v452 = v200[2] & 0x3F;
                      v453 = v200[3] & 0x3F;
                      v454 = v200[4] & 0x3F;
                      if ((v448 & 4) != 0)
                      {
                        v448 = ((v448 & 1) << 30) | (v450 << 24) | (v452 << 18) | (v453 << 12) | (v454 << 6) | v200[5] & 0x3F;
                        v200 += 6;
                      }
                      else
                      {
                        v448 = ((v448 & 3) << 24) | (v450 << 18) | (v452 << 12) | (v453 << 6) | v454;
                        v200 += 5;
                      }
                      *(_QWORD *)(v14 + 80) = v200;
                      v11 = v451;
LABEL_866:
                      v456 = v448 == 95
                          || (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                            * _pcre2_ucd_stage2_8[v448 & 0x7F | (_pcre2_ucd_stage1_8[v448 >> 7] << 7)]])] & 0xFFFFFFFD) == 1;
                      if ((((v194 != 15) ^ v456) & 1) != 0)
                        goto LABEL_2863;
                      if (++v447 > v35)
                        goto LABEL_1334;
                      continue;
                    }
                    v448 = ((v448 & 7) << 18) | (v450 << 12) | ((v200[2] & 0x3F) << 6) | v200[3] & 0x3F;
                    v200 += 4;
                  }
                  else
                  {
                    v448 = ((v448 & 0xF) << 12) | (v450 << 6) | v200[2] & 0x3F;
                    v200 += 3;
                  }
                  *(_QWORD *)(v14 + 80) = v200;
                  goto LABEL_866;
                }
                break;
              }
LABEL_875:
              v233 = (unsigned __int16)*v18;
              if (!*v18 || (unint64_t)v200 <= *v15)
                goto LABEL_2863;
              break;
            case 9:
              v457 = *v16;
              v389 = *(unsigned __int8 **)(v14 + 80);
              v458 = &_pcre2_ucd_caseless_sets_8[v197];
              v459 = 1;
              while ((unint64_t)v389 < v457)
              {
                *(_QWORD *)(v14 + 80) = v389 + 1;
                v460 = *v389;
                if (v1363 && v460 >= 0xC0)
                {
                  if ((v460 & 0x20) != 0)
                  {
                    v462 = v389[1] & 0x3F;
                    if ((v460 & 0x10) != 0)
                    {
                      if ((v460 & 8) != 0)
                      {
                        v463 = v389[2] & 0x3F;
                        v464 = v389[3] & 0x3F;
                        v465 = v389[4] & 0x3F;
                        if ((v460 & 4) != 0)
                        {
                          v460 = ((v460 & 1) << 30) | (v462 << 24) | (v463 << 18) | (v464 << 12) | (v465 << 6) | v389[5] & 0x3F;
                          v389 += 6;
                        }
                        else
                        {
                          v460 = ((v460 & 3) << 24) | (v462 << 18) | (v463 << 12) | (v464 << 6) | v465;
                          v389 += 5;
                        }
                      }
                      else
                      {
                        v460 = ((v460 & 7) << 18) | (v462 << 12) | ((v389[2] & 0x3F) << 6) | v389[3] & 0x3F;
                        v389 += 4;
                      }
                    }
                    else
                    {
                      v460 = ((v460 & 0xF) << 12) | (v462 << 6) | v389[2] & 0x3F;
                      v389 += 3;
                    }
                    *(_QWORD *)(v14 + 80) = v389;
                  }
                  else
                  {
                    *(_QWORD *)(v14 + 80) = v389 + 2;
                    v461 = v389[1] & 0x3F | ((v460 & 0x1F) << 6);
                    v389 += 2;
                    v460 = v461;
                  }
                }
                else
                {
                  ++v389;
                }
                v466 = v458;
                do
                {
                  v467 = *v466;
                  if (v460 < *v466)
                  {
                    if (v194 != 15)
                      goto LABEL_2863;
                    v198 = 15;
                    goto LABEL_900;
                  }
                  ++v466;
                }
                while (v460 != v467);
                if (v198 == 15)
                  goto LABEL_2863;
LABEL_900:
                if (++v459 > v35)
                  goto LABEL_1334;
              }
LABEL_1070:
              v233 = (unsigned __int16)*v18;
              if (!*v18 || (unint64_t)v389 <= *v15)
                goto LABEL_2863;
              break;
            case 10:
              v468 = *v16;
              v469 = *(unsigned __int8 **)(v14 + 80);
              v470 = 1;
              while ((unint64_t)v469 < v468)
              {
                *(_QWORD *)(v14 + 80) = v469 + 1;
                v471 = *v469;
                if (v1363 && v471 >= 0xC0)
                {
                  if ((v471 & 0x20) != 0)
                  {
                    v473 = v469[1] & 0x3F;
                    if ((v471 & 0x10) != 0)
                    {
                      if ((v471 & 8) != 0)
                      {
                        v474 = v469[2] & 0x3F;
                        v475 = v469[3] & 0x3F;
                        v476 = v469[4] & 0x3F;
                        if ((v471 & 4) != 0)
                        {
                          v471 = ((v471 & 1) << 30) | (v473 << 24) | (v474 << 18) | (v475 << 12) | (v476 << 6) | v469[5] & 0x3F;
                          v469 += 6;
                        }
                        else
                        {
                          v471 = ((v471 & 3) << 24) | (v473 << 18) | (v474 << 12) | (v475 << 6) | v476;
                          v469 += 5;
                        }
                      }
                      else
                      {
                        v471 = ((v471 & 7) << 18) | (v473 << 12) | ((v469[2] & 0x3F) << 6) | v469[3] & 0x3F;
                        v469 += 4;
                      }
                    }
                    else
                    {
                      v471 = ((v471 & 0xF) << 12) | (v473 << 6) | v469[2] & 0x3F;
                      v469 += 3;
                    }
                    *(_QWORD *)(v14 + 80) = v469;
                  }
                  else
                  {
                    *(_QWORD *)(v14 + 80) = v469 + 2;
                    v472 = v469[1] & 0x3F | ((v471 & 0x1F) << 6);
                    v469 += 2;
                    v471 = v472;
                  }
                }
                else
                {
                  ++v469;
                }
                if (v471 - 36 > 0x3C || ((1 << (v471 - 36)) & 0x1000000010000001) == 0)
                {
                  v478 = v471 >> 13 <= 6 && (v471 - 160) >> 5 >= 0x6BB;
                  v479 = !v478;
                  if (((v479 ^ (v194 != 15)) & 1) != 0)
                    goto LABEL_2863;
                }
                else if (v194 == 15)
                {
                  goto LABEL_2863;
                }
                if (++v470 > v35)
                  goto LABEL_1334;
              }
              v233 = (unsigned __int16)*v18;
              if (!*v18 || (unint64_t)v469 <= *v15)
                goto LABEL_2863;
              break;
            default:
              return 4294967252;
          }
LABEL_2862:
          *v1360 = 1;
          if (v233 <= 1)
            goto LABEL_2863;
          return 4294967294;
        }
        if (v35)
        {
          v193 = (unsigned int *)(v14 + 56);
LABEL_350:
          if (v194 == 22)
          {
            v209 = v11;
            v210 = *(unsigned __int8 **)(v14 + 80);
            v211 = 1;
            while (1)
            {
              v212 = *v16;
              if ((unint64_t)v210 >= *v16)
                break;
              v213 = v210 + 1;
              *(_QWORD *)(v14 + 80) = v210 + 1;
              v214 = *v210;
              if (v1363 && v214 >= 0xC0)
              {
                if ((v214 & 0x20) != 0)
                {
                  v215 = *v213 & 0x3F;
                  if ((v214 & 0x10) != 0)
                  {
                    if ((v214 & 8) != 0)
                    {
                      v216 = v210[2] & 0x3F;
                      v217 = v210[3] & 0x3F;
                      v218 = v210[4] & 0x3F;
                      if ((v214 & 4) != 0)
                      {
                        v214 = ((v214 & 1) << 30) | (v215 << 24) | (v216 << 18) | (v217 << 12) | (v218 << 6) | v210[5] & 0x3F;
                        v213 = v210 + 6;
                      }
                      else
                      {
                        v214 = ((v214 & 3) << 24) | (v215 << 18) | (v216 << 12) | (v217 << 6) | v218;
                        v213 = v210 + 5;
                      }
                    }
                    else
                    {
                      v214 = ((v214 & 7) << 18) | (v215 << 12) | ((v210[2] & 0x3F) << 6) | v210[3] & 0x3F;
                      v213 = v210 + 4;
                    }
                  }
                  else
                  {
                    v214 = ((v214 & 0xF) << 12) | (v215 << 6) | v210[2] & 0x3F;
                    v213 = v210 + 3;
                  }
                  *(_QWORD *)(v14 + 80) = v213;
                }
                else
                {
                  v213 = v210 + 2;
                  *(_QWORD *)(v14 + 80) = v210 + 2;
                  v214 = v210[1] & 0x3F | ((v214 & 0x1F) << 6);
                }
              }
              v210 = _pcre2_extuni_8(v214, v213, *(_QWORD *)(v7 + 152), v212, v1361, 0);
              *(_QWORD *)(v14 + 80) = v210;
              v219 = *(unsigned __int16 *)(v7 + 128);
              if (*(_WORD *)(v7 + 128))
              {
                if ((unint64_t)v210 >= *v16 && (unint64_t)v210 > *v15)
                {
                  *v1360 = 1;
                  if (v219 > 1)
                    return 4294967294;
                }
              }
              if (++v211 > *v193)
              {
                v196 = 0xFFFFFFFFLL;
                v11 = v209;
                goto LABEL_1334;
              }
            }
            v233 = (unsigned __int16)*v18;
            if (!*v18)
            {
              v21 = 0;
              v11 = v209;
              goto LABEL_2412;
            }
            v11 = v209;
            if ((unint64_t)v210 <= *v15)
              goto LABEL_2863;
            goto LABEL_2862;
          }
          if (v1363)
          {
            v20 = 4294967252;
            switch(v194)
            {
              case 6:
                v220 = *v16;
                v221 = *(unsigned __int8 **)(v14 + 80);
                v222 = 1;
                while (2)
                {
                  if ((unint64_t)v221 >= v220)
                    goto LABEL_1759;
                  *(_QWORD *)(v14 + 80) = v221 + 1;
                  v223 = *v221;
                  if (v223 < 0xC0)
                  {
                    ++v221;
                  }
                  else if ((v223 & 0x20) != 0)
                  {
                    v225 = v221[1] & 0x3F;
                    if ((v223 & 0x10) != 0)
                    {
                      if ((v223 & 8) != 0)
                      {
                        v226 = v221[2] & 0x3F;
                        v227 = v221[3] & 0x3F;
                        v228 = v221[4] & 0x3F;
                        if ((v223 & 4) != 0)
                        {
                          v223 = ((v223 & 1) << 30) | (v225 << 24) | (v226 << 18) | (v227 << 12) | (v228 << 6) | v221[5] & 0x3F;
                          v221 += 6;
                        }
                        else
                        {
                          v223 = ((v223 & 3) << 24) | (v225 << 18) | (v226 << 12) | (v227 << 6) | v228;
                          v221 += 5;
                        }
                      }
                      else
                      {
                        v223 = ((v223 & 7) << 18) | (v225 << 12) | ((v221[2] & 0x3F) << 6) | v221[3] & 0x3F;
                        v221 += 4;
                      }
                    }
                    else
                    {
                      v223 = ((v223 & 0xF) << 12) | (v225 << 6) | v221[2] & 0x3F;
                      v221 += 3;
                    }
                    *(_QWORD *)(v14 + 80) = v221;
                  }
                  else
                  {
                    *(_QWORD *)(v14 + 80) = v221 + 2;
                    v224 = v221[1] & 0x3F | ((v223 & 0x1F) << 6);
                    v221 += 2;
                    v223 = v224;
                  }
                  if (v223 > 0x7F || (*(_BYTE *)(*(_QWORD *)(v7 + 104) + v223) & 4) == 0)
                  {
                    ++v222;
                    v196 = 0xFFFFFFFFLL;
                    if (v222 > v35)
                      goto LABEL_1334;
                    continue;
                  }
                  goto LABEL_2880;
                }
              case 7:
                v628 = 0;
                v629 = *v16;
                v630 = *(unsigned __int8 **)(v14 + 80);
                while (2)
                {
                  v232 = &v630[v628];
                  if ((unint64_t)&v630[v628] >= v629)
                    goto LABEL_1218;
                  v631 = (char)*v232;
                  if ((v631 & 0x80000000) == 0 && (*(_BYTE *)(*(_QWORD *)(v7 + 104) + v631) & 4) != 0)
                  {
                    *(_QWORD *)(v14 + 80) = &v630[++v628];
                    v196 = 0xFFFFFFFFLL;
                    if ((int)v628 + 1 > v35)
                      goto LABEL_1334;
                    continue;
                  }
                  goto LABEL_2880;
                }
              case 8:
                v632 = *v16;
                v633 = *(unsigned __int8 **)(v14 + 80);
                v634 = 1;
                while ((unint64_t)v633 < v632)
                {
                  if (((char)*v633 & 0x80000000) == 0 && (*(_BYTE *)(*(_QWORD *)(v7 + 104) + *v633) & 1) != 0)
                    goto LABEL_2880;
                  v635 = v633 + 1;
                  do
                  {
                    v633 = v635;
                    *(_QWORD *)(v14 + 80) = v635;
                    if ((unint64_t)v635 >= v632)
                      break;
                    ++v635;
                  }
                  while ((*v633 & 0xC0) == 0x80);
                  ++v634;
                  v196 = 0xFFFFFFFFLL;
                  if (v634 > v35)
                    goto LABEL_1334;
                }
                goto LABEL_1794;
              case 9:
                v636 = 0;
                v637 = *v16;
                v638 = *(unsigned __int8 **)(v14 + 80);
                while (2)
                {
                  v232 = &v638[v636];
                  if ((unint64_t)&v638[v636] >= v637)
                    goto LABEL_1218;
                  v639 = (char)*v232;
                  if ((v639 & 0x80000000) == 0 && (*(_BYTE *)(*(_QWORD *)(v7 + 104) + v639) & 1) != 0)
                  {
                    *(_QWORD *)(v14 + 80) = &v638[++v636];
                    v196 = 0xFFFFFFFFLL;
                    if ((int)v636 + 1 > v35)
                      goto LABEL_1334;
                    continue;
                  }
                  goto LABEL_2880;
                }
              case 10:
                v640 = *v16;
                v633 = *(unsigned __int8 **)(v14 + 80);
                v641 = 1;
                while ((unint64_t)v633 < v640)
                {
                  if (((char)*v633 & 0x80000000) == 0 && (*(_BYTE *)(*(_QWORD *)(v7 + 104) + *v633) & 0x10) != 0)
                    goto LABEL_2880;
                  v642 = v633 + 1;
                  do
                  {
                    v633 = v642;
                    *(_QWORD *)(v14 + 80) = v642;
                    if ((unint64_t)v642 >= v640)
                      break;
                    ++v642;
                  }
                  while ((*v633 & 0xC0) == 0x80);
                  ++v641;
                  v196 = 0xFFFFFFFFLL;
                  if (v641 > v35)
                    goto LABEL_1334;
                }
LABEL_1794:
                v356 = (unsigned __int16)*v18;
                if (!*v18 || (unint64_t)v633 <= *v15)
                  goto LABEL_2880;
                break;
              case 11:
                v643 = 0;
                v644 = *v16;
                v645 = *(unsigned __int8 **)(v14 + 80);
                while (2)
                {
                  v232 = &v645[v643];
                  if ((unint64_t)&v645[v643] >= v644)
                    goto LABEL_1218;
                  v646 = (char)*v232;
                  if ((v646 & 0x80000000) == 0
                    && (*(_BYTE *)(*(_QWORD *)(v7 + 104) + v646) & 0x10) != 0)
                  {
                    *(_QWORD *)(v14 + 80) = &v645[++v643];
                    v196 = 0xFFFFFFFFLL;
                    if ((int)v643 + 1 > v35)
                      goto LABEL_1334;
                    continue;
                  }
                  goto LABEL_2880;
                }
              case 12:
                v647 = *(unsigned __int8 **)(v14 + 80);
                v648 = *v16;
                v649 = 1;
                while (2)
                {
                  if ((unint64_t)v647 < v648)
                  {
                    v650 = *(_DWORD *)(v7 + 244);
                    if (!v650)
                    {
                      v651 = *v1355;
                      v600 = v18;
                      if ((unint64_t)v647 > v648 - v651 || *v647 != *(unsigned __int8 *)(v7 + 252))
                      {
                        v601 = v16;
                        goto LABEL_1313;
                      }
                      v601 = v16;
                      if ((_DWORD)v651 != 1 && v647[1] != *(unsigned __int8 *)(v7 + 253))
                      {
LABEL_1313:
                        v652 = (unsigned __int16)*v600;
                        v653 = v647 + 1;
                        if (*v600)
                        {
                          if ((unint64_t)v653 >= v648
                            && !*(_DWORD *)(v7 + 244)
                            && *v1355 == 2
                            && *v647 == *(unsigned __int8 *)(v7 + 252))
                          {
                            *v1360 = 1;
                            if (v652 > 1)
                              return 4294967294;
                          }
                        }
                        v16 = v601;
                        do
                        {
                          v647 = v653;
                          *(_QWORD *)(v14 + 80) = v653;
                          if ((unint64_t)v653 >= v648)
                            break;
                          ++v653;
                        }
                        while ((*v647 & 0xC0) == 0x80);
                        ++v649;
                        v196 = 0xFFFFFFFFLL;
                        v18 = v600;
                        if (v649 > *v193)
                          goto LABEL_1334;
                        continue;
                      }
                      v21 = 0;
LABEL_2228:
                      v16 = v601;
                      v18 = v600;
                      goto LABEL_2412;
                    }
                    v600 = v18;
                    v601 = v16;
                    v602 = v8;
                    v603 = v11;
                    if (!_pcre2_is_newline_8(v647, v650, v648, v1355, v1361))
                    {
                      v647 = *(unsigned __int8 **)(v14 + 80);
                      v648 = *v601;
                      v11 = v603;
                      v8 = v602;
                      goto LABEL_1313;
                    }
                    v21 = 0;
LABEL_2227:
                    v11 = v603;
                    v8 = v602;
                    goto LABEL_2228;
                  }
                  break;
                }
                v356 = (unsigned __int16)*v18;
                if (!*v18)
                {
                  v21 = 0;
                  goto LABEL_2412;
                }
                if ((unint64_t)v647 <= *v15)
                  goto LABEL_2880;
                break;
              case 13:
                v654 = *v16;
                v221 = *(unsigned __int8 **)(v14 + 80);
                v655 = 1;
                while ((unint64_t)v221 < v654)
                {
                  v656 = v221 + 1;
                  do
                  {
                    v221 = v656;
                    *(_QWORD *)(v14 + 80) = v656;
                    if ((unint64_t)v656 >= v654)
                      break;
                    ++v656;
                  }
                  while ((*v221 & 0xC0) == 0x80);
                  ++v655;
                  v196 = 0xFFFFFFFFLL;
                  if (v655 > v35)
                    goto LABEL_1334;
                }
                goto LABEL_1759;
              case 14:
                v232 = *(unsigned __int8 **)(v14 + 80);
                if ((unint64_t)v232 <= *v16 - v35)
                  goto LABEL_1332;
                goto LABEL_2880;
              case 17:
                v781 = *v16;
                v608 = *(unsigned __int8 **)(v14 + 80);
                v782 = 1;
                while (2)
                {
                  if ((unint64_t)v608 >= v781)
                    goto LABEL_1797;
                  v783 = v608 + 1;
                  *(_QWORD *)(v14 + 80) = v608 + 1;
                  v784 = *v608;
                  if (v784 >= 0xC0)
                  {
                    if ((v784 & 0x20) != 0)
                    {
                      v785 = *v783 & 0x3F;
                      if ((v784 & 0x10) != 0)
                      {
                        if ((v784 & 8) != 0)
                        {
                          v786 = v608[2] & 0x3F;
                          v787 = v608[3] & 0x3F;
                          v788 = v608[4] & 0x3F;
                          if ((v784 & 4) != 0)
                          {
                            v784 = ((v784 & 1) << 30) | (v785 << 24) | (v786 << 18) | (v787 << 12) | (v788 << 6) | v608[5] & 0x3F;
                            v783 = v608 + 6;
                          }
                          else
                          {
                            v784 = ((v784 & 3) << 24) | (v785 << 18) | (v786 << 12) | (v787 << 6) | v788;
                            v783 = v608 + 5;
                          }
                        }
                        else
                        {
                          v784 = ((v784 & 7) << 18) | (v785 << 12) | ((v608[2] & 0x3F) << 6) | v608[3] & 0x3F;
                          v783 = v608 + 4;
                        }
                      }
                      else
                      {
                        v784 = ((v784 & 0xF) << 12) | (v785 << 6) | v608[2] & 0x3F;
                        v783 = v608 + 3;
                      }
                      *(_QWORD *)(v14 + 80) = v783;
                    }
                    else
                    {
                      v783 = v608 + 2;
                      *(_QWORD *)(v14 + 80) = v608 + 2;
                      v784 = v608[1] & 0x3F | ((v784 & 0x1F) << 6);
                    }
                  }
                  if (v784 <= 12)
                  {
                    if ((v784 - 11) >= 2)
                    {
                      if (v784 != 10)
                        goto LABEL_2880;
LABEL_1649:
                      ++v782;
                      v196 = 0xFFFFFFFFLL;
                      v608 = v783;
                      if (v782 > v35)
                        goto LABEL_1334;
                      continue;
                    }
                  }
                  else if ((v784 - 8232) >= 2 && v784 != 133)
                  {
                    if (v784 != 13)
                      goto LABEL_2880;
                    if ((unint64_t)v783 < v781 && *v783 == 10)
                      *(_QWORD *)(v14 + 80) = ++v783;
                    goto LABEL_1649;
                  }
                  break;
                }
                if (*(_WORD *)(v7 + 130) == 2)
                  goto LABEL_2880;
                goto LABEL_1649;
              case 18:
                v789 = *v16;
                v790 = *(unsigned __int8 **)(v14 + 80);
                v791 = 1;
                while ((unint64_t)v790 < v789)
                {
                  *(_QWORD *)(v14 + 80) = v790 + 1;
                  v792 = *v790;
                  if (v792 < 0xC0)
                  {
                    ++v790;
                  }
                  else if ((v792 & 0x20) != 0)
                  {
                    v794 = v790[1] & 0x3F;
                    if ((v792 & 0x10) != 0)
                    {
                      if ((v792 & 8) != 0)
                      {
                        v795 = v790[2] & 0x3F;
                        v796 = v790[3] & 0x3F;
                        v797 = v790[4] & 0x3F;
                        if ((v792 & 4) != 0)
                        {
                          v792 = ((v792 & 1) << 30) | (v794 << 24) | (v795 << 18) | (v796 << 12) | (v797 << 6) | v790[5] & 0x3F;
                          v790 += 6;
                        }
                        else
                        {
                          v792 = ((v792 & 3) << 24) | (v794 << 18) | (v795 << 12) | (v796 << 6) | v797;
                          v790 += 5;
                        }
                      }
                      else
                      {
                        v792 = ((v792 & 7) << 18) | (v794 << 12) | ((v790[2] & 0x3F) << 6) | v790[3] & 0x3F;
                        v790 += 4;
                      }
                    }
                    else
                    {
                      v792 = ((v792 & 0xF) << 12) | (v794 << 6) | v790[2] & 0x3F;
                      v790 += 3;
                    }
                    *(_QWORD *)(v14 + 80) = v790;
                  }
                  else
                  {
                    *(_QWORD *)(v14 + 80) = v790 + 2;
                    v793 = v790[1] & 0x3F | ((v792 & 0x1F) << 6);
                    v790 += 2;
                    v792 = v793;
                  }
                  if (v792 < 0x2000)
                  {
                    if (v792 <= 159)
                    {
                      if (v792 == 9 || v792 == 32)
                        goto LABEL_1163;
                    }
                    else if (v792 == 160 || v792 == 5760 || v792 == 6158)
                    {
                      goto LABEL_1163;
                    }
                  }
                  else if (v792 > 8238)
                  {
                    if (v792 == 8239 || v792 == 8287 || v792 == 12288)
                      goto LABEL_1163;
                  }
                  else if ((v792 - 0x2000) < 0xB)
                  {
                    goto LABEL_1163;
                  }
                  ++v791;
                  v196 = 0xFFFFFFFFLL;
                  if (v791 > v35)
                    goto LABEL_1334;
                }
                v1041 = (unsigned __int16)*v18;
                if (!*v18 || (unint64_t)v790 <= *v15)
                {
                  v21 = 0;
                  goto LABEL_2412;
                }
                *v1360 = 1;
                if (v1041 <= 1)
                {
                  v21 = 0;
                  goto LABEL_2412;
                }
                return 4294967294;
              case 19:
                v798 = *v16;
                v799 = *(unsigned __int8 **)(v14 + 80);
                v800 = 1;
                while (2)
                {
                  if ((unint64_t)v799 < v798)
                  {
                    *(_QWORD *)(v14 + 80) = v799 + 1;
                    v801 = *v799;
                    if (v801 < 0xC0)
                    {
                      ++v799;
                    }
                    else if ((v801 & 0x20) != 0)
                    {
                      v803 = v799[1] & 0x3F;
                      if ((v801 & 0x10) != 0)
                      {
                        if ((v801 & 8) != 0)
                        {
                          v804 = v799[2] & 0x3F;
                          v805 = v799[3] & 0x3F;
                          v806 = v799[4] & 0x3F;
                          if ((v801 & 4) != 0)
                          {
                            v801 = ((v801 & 1) << 30) | (v803 << 24) | (v804 << 18) | (v805 << 12) | (v806 << 6) | v799[5] & 0x3F;
                            v799 += 6;
                          }
                          else
                          {
                            v801 = ((v801 & 3) << 24) | (v803 << 18) | (v804 << 12) | (v805 << 6) | v806;
                            v799 += 5;
                          }
                        }
                        else
                        {
                          v801 = ((v801 & 7) << 18) | (v803 << 12) | ((v799[2] & 0x3F) << 6) | v799[3] & 0x3F;
                          v799 += 4;
                        }
                      }
                      else
                      {
                        v801 = ((v801 & 0xF) << 12) | (v803 << 6) | v799[2] & 0x3F;
                        v799 += 3;
                      }
                      *(_QWORD *)(v14 + 80) = v799;
                    }
                    else
                    {
                      *(_QWORD *)(v14 + 80) = v799 + 2;
                      v802 = v799[1] & 0x3F | ((v801 & 0x1F) << 6);
                      v799 += 2;
                      v801 = v802;
                    }
                    if (v801 < 0x2000)
                    {
                      if (v801 <= 159)
                      {
                        if (v801 != 9 && v801 != 32)
                          goto LABEL_1163;
                        goto LABEL_1701;
                      }
                      if (v801 == 160 || v801 == 5760)
                        goto LABEL_1701;
                      v807 = 6158;
                    }
                    else
                    {
                      if (v801 <= 8238)
                      {
                        if ((v801 - 0x2000) >= 0xB)
                          goto LABEL_1163;
LABEL_1701:
                        ++v800;
                        v196 = 0xFFFFFFFFLL;
                        if (v800 > v35)
                          goto LABEL_1334;
                        continue;
                      }
                      if (v801 == 8239 || v801 == 12288)
                        goto LABEL_1701;
                      v807 = 8287;
                    }
                    if (v801 != v807)
                      goto LABEL_1163;
                    goto LABEL_1701;
                  }
                  break;
                }
                v356 = (unsigned __int16)*v18;
                if (!*v18 || (unint64_t)v799 <= *v15)
                  goto LABEL_2880;
                break;
              case 20:
                v808 = *v16;
                v221 = *(unsigned __int8 **)(v14 + 80);
                v809 = 1;
                while ((unint64_t)v221 < v808)
                {
                  *(_QWORD *)(v14 + 80) = v221 + 1;
                  v810 = *v221;
                  if (v810 < 0xC0)
                  {
                    ++v221;
                  }
                  else if ((v810 & 0x20) != 0)
                  {
                    v812 = v221[1] & 0x3F;
                    if ((v810 & 0x10) != 0)
                    {
                      if ((v810 & 8) != 0)
                      {
                        v813 = v221[2] & 0x3F;
                        v814 = v221[3] & 0x3F;
                        v815 = v221[4] & 0x3F;
                        if ((v810 & 4) != 0)
                        {
                          v810 = ((v810 & 1) << 30) | (v812 << 24) | (v813 << 18) | (v814 << 12) | (v815 << 6) | v221[5] & 0x3F;
                          v221 += 6;
                        }
                        else
                        {
                          v810 = ((v810 & 3) << 24) | (v812 << 18) | (v813 << 12) | (v814 << 6) | v815;
                          v221 += 5;
                        }
                      }
                      else
                      {
                        v810 = ((v810 & 7) << 18) | (v812 << 12) | ((v221[2] & 0x3F) << 6) | v221[3] & 0x3F;
                        v221 += 4;
                      }
                    }
                    else
                    {
                      v810 = ((v810 & 0xF) << 12) | (v812 << 6) | v221[2] & 0x3F;
                      v221 += 3;
                    }
                    *(_QWORD *)(v14 + 80) = v221;
                  }
                  else
                  {
                    *(_QWORD *)(v14 + 80) = v221 + 2;
                    v811 = v221[1] & 0x3F | ((v810 & 0x1F) << 6);
                    v221 += 2;
                    v810 = v811;
                  }
                  v816 = v810 - 10 >= 4 && v810 - 8232 >= 2;
                  if (!v816 || v810 == 133)
                    goto LABEL_1163;
                  ++v809;
                  v196 = 0xFFFFFFFFLL;
                  if (v809 > v35)
                    goto LABEL_1334;
                }
                goto LABEL_1759;
              case 21:
                v817 = *v16;
                v221 = *(unsigned __int8 **)(v14 + 80);
                v818 = 1;
                while ((unint64_t)v221 < v817)
                {
                  *(_QWORD *)(v14 + 80) = v221 + 1;
                  v819 = *v221;
                  if (v819 < 0xC0)
                  {
                    ++v221;
                  }
                  else if ((v819 & 0x20) != 0)
                  {
                    v821 = v221[1] & 0x3F;
                    if ((v819 & 0x10) != 0)
                    {
                      if ((v819 & 8) != 0)
                      {
                        v822 = v221[2] & 0x3F;
                        v823 = v221[3] & 0x3F;
                        v824 = v221[4] & 0x3F;
                        if ((v819 & 4) != 0)
                        {
                          v819 = ((v819 & 1) << 30) | (v821 << 24) | (v822 << 18) | (v823 << 12) | (v824 << 6) | v221[5] & 0x3F;
                          v221 += 6;
                        }
                        else
                        {
                          v819 = ((v819 & 3) << 24) | (v821 << 18) | (v822 << 12) | (v823 << 6) | v824;
                          v221 += 5;
                        }
                      }
                      else
                      {
                        v819 = ((v819 & 7) << 18) | (v821 << 12) | ((v221[2] & 0x3F) << 6) | v221[3] & 0x3F;
                        v221 += 4;
                      }
                    }
                    else
                    {
                      v819 = ((v819 & 0xF) << 12) | (v821 << 6) | v221[2] & 0x3F;
                      v221 += 3;
                    }
                    *(_QWORD *)(v14 + 80) = v221;
                  }
                  else
                  {
                    *(_QWORD *)(v14 + 80) = v221 + 2;
                    v820 = v221[1] & 0x3F | ((v819 & 0x1F) << 6);
                    v221 += 2;
                    v819 = v820;
                  }
                  v825 = v819 - 10 >= 4 && v819 - 8232 >= 2;
                  if (v825 && v819 != 133)
                    goto LABEL_1163;
                  ++v818;
                  v196 = 0xFFFFFFFFLL;
                  if (v818 > v35)
                    goto LABEL_1334;
                }
LABEL_1759:
                v356 = (unsigned __int16)*v18;
                if (!*v18 || (unint64_t)v221 <= *v15)
                  goto LABEL_2880;
                break;
              default:
                return v20;
            }
LABEL_1943:
            *v1360 = 1;
            if (v356 > 1)
              return 4294967294;
            goto LABEL_2880;
          }
          v20 = 4294967252;
          switch(v194)
          {
            case 6:
              v229 = 0;
              v230 = *v16;
              v231 = *(unsigned __int8 **)(v14 + 80);
              while (1)
              {
                v232 = &v231[v229];
                if ((unint64_t)&v231[v229] >= v230)
                  goto LABEL_1218;
                if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + *v232) & 4) != 0)
                  goto LABEL_2880;
                *(_QWORD *)(v14 + 80) = &v231[++v229];
                v196 = 0xFFFFFFFFLL;
                if ((int)v229 + 1 > v35)
                  goto LABEL_1334;
              }
            case 7:
              v581 = 0;
              v582 = *v16;
              v583 = *(unsigned __int8 **)(v14 + 80);
              while (1)
              {
                v232 = &v583[v581];
                if ((unint64_t)&v583[v581] >= v582)
                  goto LABEL_1218;
                if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + *v232) & 4) == 0)
                  goto LABEL_2880;
                *(_QWORD *)(v14 + 80) = &v583[++v581];
                v196 = 0xFFFFFFFFLL;
                if ((int)v581 + 1 > v35)
                  goto LABEL_1334;
              }
            case 8:
              v584 = 0;
              v585 = *v16;
              v586 = *(unsigned __int8 **)(v14 + 80);
              while (1)
              {
                v232 = &v586[v584];
                if ((unint64_t)&v586[v584] >= v585)
                  goto LABEL_1218;
                if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + *v232) & 1) != 0)
                  goto LABEL_2880;
                *(_QWORD *)(v14 + 80) = &v586[++v584];
                v196 = 0xFFFFFFFFLL;
                if ((int)v584 + 1 > v35)
                  goto LABEL_1334;
              }
            case 9:
              v587 = 0;
              v588 = *v16;
              v589 = *(unsigned __int8 **)(v14 + 80);
              while (1)
              {
                v232 = &v589[v587];
                if ((unint64_t)&v589[v587] >= v588)
                  goto LABEL_1218;
                if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + *v232) & 1) == 0)
                  goto LABEL_2880;
                *(_QWORD *)(v14 + 80) = &v589[++v587];
                v196 = 0xFFFFFFFFLL;
                if ((int)v587 + 1 > v35)
                  goto LABEL_1334;
              }
            case 10:
              v590 = 0;
              v591 = *v16;
              v592 = *(unsigned __int8 **)(v14 + 80);
              while (1)
              {
                v232 = &v592[v590];
                if ((unint64_t)&v592[v590] >= v591)
                  goto LABEL_1218;
                if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + *v232) & 0x10) != 0)
                  goto LABEL_2880;
                *(_QWORD *)(v14 + 80) = &v592[++v590];
                v196 = 0xFFFFFFFFLL;
                if ((int)v590 + 1 > v35)
                  goto LABEL_1334;
              }
            case 11:
              v593 = 0;
              v594 = *v16;
              v595 = *(unsigned __int8 **)(v14 + 80);
              while (1)
              {
                v232 = &v595[v593];
                if ((unint64_t)&v595[v593] >= v594)
                  goto LABEL_1218;
                if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + *v232) & 0x10) == 0)
                  goto LABEL_2880;
                *(_QWORD *)(v14 + 80) = &v595[++v593];
                v196 = 0xFFFFFFFFLL;
                if ((int)v593 + 1 > v35)
                  goto LABEL_1334;
              }
            case 12:
              v596 = *(unsigned __int8 **)(v14 + 80);
              v597 = 1;
              while (2)
              {
                v598 = *v16;
                if ((unint64_t)v596 < *v16)
                {
                  v599 = *(_DWORD *)(v7 + 244);
                  if (v599)
                  {
                    v600 = v18;
                    v601 = v16;
                    v602 = v8;
                    v603 = v11;
                    if (_pcre2_is_newline_8(v596, v599, v598, v1355, v1361))
                    {
                      v21 = 0;
                      goto LABEL_2227;
                    }
                    v596 = *(unsigned __int8 **)(v14 + 80);
                    v11 = v603;
                    v8 = v602;
                    v16 = v601;
                    v18 = v600;
                  }
                  else
                  {
                    v604 = *v1355;
                    if ((unint64_t)v596 <= v598 - v604
                      && *v596 == *(unsigned __int8 *)(v7 + 252)
                      && ((_DWORD)v604 == 1 || v596[1] == *(unsigned __int8 *)(v7 + 253)))
                    {
                      goto LABEL_2880;
                    }
                  }
                  v605 = (unsigned __int16)*v18;
                  if (!*v18
                    || (unint64_t)(v596 + 1) < *v16
                    || *(_DWORD *)(v7 + 244)
                    || *v1355 != 2
                    || *v596 != *(unsigned __int8 *)(v7 + 252)
                    || (*v1360 = 1, v605 <= 1))
                  {
                    *(_QWORD *)(v14 + 80) = ++v596;
                    ++v597;
                    v196 = 0xFFFFFFFFLL;
                    if (v597 > *(_DWORD *)(v14 + 56))
                      goto LABEL_1334;
                    continue;
                  }
                  return 4294967294;
                }
                break;
              }
              v356 = (unsigned __int16)*v18;
              if (!*v18 || (unint64_t)v596 <= *v15)
                goto LABEL_2880;
              goto LABEL_1943;
            case 13:
              v232 = *(unsigned __int8 **)(v14 + 80);
              if ((unint64_t)v232 > *v16 - v35)
                goto LABEL_1218;
LABEL_1332:
              *(_QWORD *)(v14 + 80) = &v232[v35];
              break;
            case 17:
              v607 = *v16;
              v608 = *(unsigned __int8 **)(v14 + 80);
              v609 = 1;
              while (2)
              {
                if ((unint64_t)v608 >= v607)
                {
LABEL_1797:
                  v356 = (unsigned __int16)*v18;
                  if (!*v18 || (unint64_t)v608 <= *v15)
                    goto LABEL_2880;
                  goto LABEL_1943;
                }
                v610 = v608 + 1;
                *(_QWORD *)(v14 + 80) = v608 + 1;
                v611 = *v608;
                if (v611 > 0xC)
                {
                  if (v611 != 133)
                  {
                    if (v611 != 13)
                      goto LABEL_2880;
                    if ((unint64_t)v610 < v607 && *v610 == 10)
                    {
                      v610 = v608 + 2;
                      *(_QWORD *)(v14 + 80) = v608 + 2;
                    }
                    goto LABEL_1234;
                  }
                }
                else if (v611 - 11 >= 2)
                {
                  if (v611 != 10)
                    goto LABEL_2880;
                  goto LABEL_1234;
                }
                if (*(_WORD *)(v7 + 130) == 2)
                  goto LABEL_2880;
LABEL_1234:
                ++v609;
                v196 = 0xFFFFFFFFLL;
                v608 = v610;
                if (v609 > v35)
                  goto LABEL_1334;
                continue;
              }
            case 18:
              v612 = 0;
              v613 = *v16;
              v614 = *(unsigned __int8 **)(v14 + 80);
              while (1)
              {
                v232 = &v614[v612];
                if ((unint64_t)&v614[v612] >= v613)
                  goto LABEL_1218;
                *(_QWORD *)(v14 + 80) = v232 + 1;
                v615 = *v232;
                if (v615 == 9 || v615 == 32 || v615 == 160)
                  goto LABEL_1163;
                ++v612;
                v196 = 0xFFFFFFFFLL;
                if ((int)v612 + 1 > v35)
                  goto LABEL_1334;
              }
            case 19:
              v616 = 0;
              v617 = *v16;
              v618 = *(unsigned __int8 **)(v14 + 80);
              while (1)
              {
                v232 = &v618[v616];
                if ((unint64_t)&v618[v616] >= v617)
                  goto LABEL_1218;
                *(_QWORD *)(v14 + 80) = v232 + 1;
                v619 = *v232;
                if (v619 != 9 && v619 != 160 && v619 != 32)
                  goto LABEL_1163;
                ++v616;
                v196 = 0xFFFFFFFFLL;
                if ((int)v616 + 1 > v35)
                  goto LABEL_1334;
              }
            case 20:
              v620 = 0;
              v621 = *v16;
              v622 = *(unsigned __int8 **)(v14 + 80);
              while (1)
              {
                v232 = &v622[v620];
                if ((unint64_t)&v622[v620] >= v621)
                  goto LABEL_1218;
                *(_QWORD *)(v14 + 80) = v232 + 1;
                v623 = *v232;
                if ((v623 - 10) < 4 || v623 == 133)
                  goto LABEL_1163;
                ++v620;
                v196 = 0xFFFFFFFFLL;
                if ((int)v620 + 1 > v35)
                  goto LABEL_1334;
              }
            case 21:
              v624 = 0;
              v625 = *v16;
              v626 = *(unsigned __int8 **)(v14 + 80);
              while (1)
              {
                v232 = &v626[v624];
                if ((unint64_t)&v626[v624] >= v625)
                  break;
                *(_QWORD *)(v14 + 80) = v232 + 1;
                v627 = *v232;
                if ((v627 - 10) >= 4 && v627 != 133)
                  goto LABEL_1163;
                ++v624;
                v196 = 0xFFFFFFFFLL;
                if ((int)v624 + 1 > v35)
                  goto LABEL_1334;
              }
LABEL_1218:
              v606 = (unsigned __int16)*v18;
              if (*v18)
              {
                if ((unint64_t)v232 > *v15)
                {
                  *v1360 = 1;
                  if (v606 > 1)
                    return 4294967294;
                }
              }
              goto LABEL_2880;
            default:
              return v20;
          }
        }
        v196 = 0xFFFFFFFFLL;
LABEL_1334:
        v658 = *(_DWORD *)(v14 + 56);
        v657 = *(_DWORD *)(v14 + 60);
        v659 = v657 - v658;
        if (v657 == v658)
          goto LABEL_2406;
        if ((_DWORD)v11)
        {
          v660 = *(unsigned __int8 **)(v14 + 80);
          *(_QWORD *)(v14 + 8) = v660;
          if ((v196 & 0x80000000) == 0)
          {
            switch((int)v196)
            {
              case 0:
                v698 = v657 - v658;
                if (v657 <= v658)
                  goto LABEL_1619;
                v699 = *v16;
                while ((unint64_t)v660 < v699)
                {
                  v700 = 1;
                  if (v1363)
                  {
                    v701 = *v660;
                    v702 = 2;
                    v703 = 3;
                    v704 = 4;
                    v705 = 5;
                    if ((v701 & 4) != 0)
                      v705 = 6;
                    if ((v701 & 8) != 0)
                      v704 = v705;
                    if ((v701 & 0x10) != 0)
                      v703 = v704;
                    if ((v701 & 0x20) != 0)
                      v702 = v703;
                    if (v701 >= 0xC0)
                      v700 = v702;
                  }
                  if (*v195 != 15)
                  {
                    v660 += v700;
                    *(_QWORD *)(v14 + 80) = v660;
                    if (--v698)
                      continue;
                  }
                  goto LABEL_1619;
                }
                goto LABEL_1616;
              case 1:
                v706 = v657 - v658;
                if (v657 <= v658)
                  goto LABEL_1619;
                v707 = *v16;
                while ((unint64_t)v660 < v707)
                {
                  v708 = *v660;
                  if (v1363 && v708 >= 0xC0)
                  {
                    v709 = v660[1] & 0x3F;
                    if ((v708 & 0x20) != 0)
                    {
                      if ((v708 & 0x10) != 0)
                      {
                        if ((v708 & 8) != 0)
                        {
                          v713 = v660[2] & 0x3F;
                          v714 = v660[3] & 0x3F;
                          v715 = v660[4] & 0x3F;
                          if ((v708 & 4) != 0)
                          {
                            v708 = ((v708 & 1) << 30) | (v709 << 24) | (v713 << 18) | (v714 << 12) | (v715 << 6) | v660[5] & 0x3F;
                            v710 = 6;
                          }
                          else
                          {
                            v708 = ((v708 & 3) << 24) | (v709 << 18) | (v713 << 12) | (v714 << 6) | v715;
                            v710 = 5;
                          }
                        }
                        else
                        {
                          v708 = ((v708 & 7) << 18) | (v709 << 12) | ((v660[2] & 0x3F) << 6) | v660[3] & 0x3F;
                          v710 = 4;
                        }
                      }
                      else
                      {
                        v708 = ((v708 & 0xF) << 12) | (v709 << 6) | v660[2] & 0x3F;
                        v710 = 3;
                      }
                    }
                    else
                    {
                      v710 = 2;
                      v708 = v660[1] & 0x3F | ((v708 & 0x1F) << 6);
                    }
                  }
                  else
                  {
                    v710 = 1;
                  }
                  v711 = BYTE1(_pcre2_ucd_records_8[2
                                                  * _pcre2_ucd_stage2_8[v708 & 0x7F | (_pcre2_ucd_stage1_8[v708 >> 7] << 7)]]);
                  if (v711 > 9 || ((1 << v711) & 0x320) == 0)
                  {
                    if (*v195 != 15)
                      goto LABEL_1619;
                  }
                  else if (*v195 == 15)
                  {
                    goto LABEL_1619;
                  }
                  v660 += v710;
                  *(_QWORD *)(v14 + 80) = v660;
                  if (!--v706)
                    goto LABEL_1619;
                }
                goto LABEL_1616;
              case 2:
                v716 = v657 - v658;
                if (v657 <= v658)
                  goto LABEL_1619;
                v717 = *v16;
                while ((unint64_t)v660 < v717)
                {
                  v718 = *v660;
                  v719 = 1;
                  if (v1363 && v718 >= 0xC0)
                  {
                    v720 = v660[1] & 0x3F;
                    if ((v718 & 0x20) != 0)
                    {
                      if ((v718 & 0x10) != 0)
                      {
                        if ((v718 & 8) != 0)
                        {
                          v721 = v660[2] & 0x3F;
                          v722 = v660[3] & 0x3F;
                          v723 = v660[4] & 0x3F;
                          if ((v718 & 4) != 0)
                          {
                            v718 = ((v718 & 1) << 30) | (v720 << 24) | (v721 << 18) | (v722 << 12) | (v723 << 6) | v660[5] & 0x3F;
                            v719 = 6;
                          }
                          else
                          {
                            v718 = ((v718 & 3) << 24) | (v720 << 18) | (v721 << 12) | (v722 << 6) | v723;
                            v719 = 5;
                          }
                        }
                        else
                        {
                          v718 = ((v718 & 7) << 18) | (v720 << 12) | ((v660[2] & 0x3F) << 6) | v660[3] & 0x3F;
                          v719 = 4;
                        }
                      }
                      else
                      {
                        v718 = ((v718 & 0xF) << 12) | (v720 << 6) | v660[2] & 0x3F;
                        v719 = 3;
                      }
                    }
                    else
                    {
                      v719 = 2;
                      v718 = v660[1] & 0x3F | ((v718 & 0x1F) << 6);
                    }
                  }
                  if ((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                      * _pcre2_ucd_stage2_8[v718 & 0x7F | (_pcre2_ucd_stage1_8[v718 >> 7] << 7)]])] != *(_DWORD *)(v14 + 68)) == (*(_DWORD *)(v14 + 64) == 15))
                  {
                    v660 += v719;
                    *(_QWORD *)(v14 + 80) = v660;
                    if (--v716)
                      continue;
                  }
                  goto LABEL_1619;
                }
                goto LABEL_1616;
              case 3:
                v724 = v657 - v658;
                if (v657 <= v658)
                  goto LABEL_1619;
                v725 = *v16;
                while ((unint64_t)v660 < v725)
                {
                  v726 = *v660;
                  v727 = 1;
                  if (v1363 && v726 >= 0xC0)
                  {
                    v728 = v660[1] & 0x3F;
                    if ((v726 & 0x20) != 0)
                    {
                      if ((v726 & 0x10) != 0)
                      {
                        if ((v726 & 8) != 0)
                        {
                          v729 = v660[2] & 0x3F;
                          v730 = v660[3] & 0x3F;
                          v731 = v660[4] & 0x3F;
                          if ((v726 & 4) != 0)
                          {
                            v726 = ((v726 & 1) << 30) | (v728 << 24) | (v729 << 18) | (v730 << 12) | (v731 << 6) | v660[5] & 0x3F;
                            v727 = 6;
                          }
                          else
                          {
                            v726 = ((v726 & 3) << 24) | (v728 << 18) | (v729 << 12) | (v730 << 6) | v731;
                            v727 = 5;
                          }
                        }
                        else
                        {
                          v726 = ((v726 & 7) << 18) | (v728 << 12) | ((v660[2] & 0x3F) << 6) | v660[3] & 0x3F;
                          v727 = 4;
                        }
                      }
                      else
                      {
                        v726 = ((v726 & 0xF) << 12) | (v728 << 6) | v660[2] & 0x3F;
                        v727 = 3;
                      }
                    }
                    else
                    {
                      v727 = 2;
                      v726 = v660[1] & 0x3F | ((v726 & 0x1F) << 6);
                    }
                  }
                  if ((*(_DWORD *)(v14 + 68) != BYTE1(_pcre2_ucd_records_8[2
                                                                          * _pcre2_ucd_stage2_8[v726 & 0x7F | (_pcre2_ucd_stage1_8[v726 >> 7] << 7)]])) == (*(_DWORD *)(v14 + 64) == 15))
                  {
                    v660 += v727;
                    *(_QWORD *)(v14 + 80) = v660;
                    if (--v724)
                      continue;
                  }
                  goto LABEL_1619;
                }
                goto LABEL_1616;
              case 4:
                v732 = v657 - v658;
                if (v657 <= v658)
                  goto LABEL_1619;
                v733 = *v16;
                while ((unint64_t)v660 < v733)
                {
                  v734 = *v660;
                  v735 = 1;
                  if (v1363 && v734 >= 0xC0)
                  {
                    v736 = v660[1] & 0x3F;
                    if ((v734 & 0x20) != 0)
                    {
                      if ((v734 & 0x10) != 0)
                      {
                        if ((v734 & 8) != 0)
                        {
                          v737 = v660[2] & 0x3F;
                          v738 = v660[3] & 0x3F;
                          v739 = v660[4] & 0x3F;
                          if ((v734 & 4) != 0)
                          {
                            v734 = ((v734 & 1) << 30) | (v736 << 24) | (v737 << 18) | (v738 << 12) | (v739 << 6) | v660[5] & 0x3F;
                            v735 = 6;
                          }
                          else
                          {
                            v734 = ((v734 & 3) << 24) | (v736 << 18) | (v737 << 12) | (v738 << 6) | v739;
                            v735 = 5;
                          }
                        }
                        else
                        {
                          v734 = ((v734 & 7) << 18) | (v736 << 12) | ((v660[2] & 0x3F) << 6) | v660[3] & 0x3F;
                          v735 = 4;
                        }
                      }
                      else
                      {
                        v734 = ((v734 & 0xF) << 12) | (v736 << 6) | v660[2] & 0x3F;
                        v735 = 3;
                      }
                    }
                    else
                    {
                      v735 = 2;
                      v734 = v660[1] & 0x3F | ((v734 & 0x1F) << 6);
                    }
                  }
                  if ((*(_DWORD *)(v14 + 68) != LOBYTE(_pcre2_ucd_records_8[2
                                                                           * _pcre2_ucd_stage2_8[v734 & 0x7F | (_pcre2_ucd_stage1_8[v734 >> 7] << 7)]])) == (*(_DWORD *)(v14 + 64) == 15))
                  {
                    v660 += v735;
                    *(_QWORD *)(v14 + 80) = v660;
                    if (--v732)
                      continue;
                  }
                  goto LABEL_1619;
                }
                goto LABEL_1616;
              case 5:
                v740 = v657 - v658;
                if (v657 <= v658)
                  goto LABEL_1619;
                v741 = *v16;
                while ((unint64_t)v660 < v741)
                {
                  v742 = *v660;
                  v743 = 1;
                  if (v1363 && v742 >= 0xC0)
                  {
                    v744 = v660[1] & 0x3F;
                    if ((v742 & 0x20) != 0)
                    {
                      if ((v742 & 0x10) != 0)
                      {
                        if ((v742 & 8) != 0)
                        {
                          v745 = v660[2] & 0x3F;
                          v746 = v660[3] & 0x3F;
                          v747 = v660[4] & 0x3F;
                          if ((v742 & 4) != 0)
                          {
                            v742 = ((v742 & 1) << 30) | (v744 << 24) | (v745 << 18) | (v746 << 12) | (v747 << 6) | v660[5] & 0x3F;
                            v743 = 6;
                          }
                          else
                          {
                            v742 = ((v742 & 3) << 24) | (v744 << 18) | (v745 << 12) | (v746 << 6) | v747;
                            v743 = 5;
                          }
                        }
                        else
                        {
                          v742 = ((v742 & 7) << 18) | (v744 << 12) | ((v660[2] & 0x3F) << 6) | v660[3] & 0x3F;
                          v743 = 4;
                        }
                      }
                      else
                      {
                        v742 = ((v742 & 0xF) << 12) | (v744 << 6) | v660[2] & 0x3F;
                        v743 = 3;
                      }
                    }
                    else
                    {
                      v743 = 2;
                      v742 = v660[1] & 0x3F | ((v742 & 0x1F) << 6);
                    }
                  }
                  if (((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                       * _pcre2_ucd_stage2_8[v742 & 0x7F | (_pcre2_ucd_stage1_8[v742 >> 7] << 7)]])] & 0xFFFFFFFD) != 1) == (*v195 == 15))
                  {
                    v660 += v743;
                    *(_QWORD *)(v14 + 80) = v660;
                    if (--v740)
                      continue;
                  }
                  goto LABEL_1619;
                }
                goto LABEL_1616;
              case 6:
              case 7:
                v661 = v657 - v658;
                if (v657 <= v658)
                  goto LABEL_1619;
                v662 = *v16;
                while (2)
                {
                  if ((unint64_t)v660 >= v662)
                    goto LABEL_1616;
                  v663 = *v660;
                  v664 = 1;
                  if (v1363 && v663 >= 0xC0)
                  {
                    v665 = v660[1] & 0x3F;
                    if ((v663 & 0x20) != 0)
                    {
                      if ((v663 & 0x10) != 0)
                      {
                        if ((v663 & 8) != 0)
                        {
                          v666 = v660[2] & 0x3F;
                          v667 = v660[3] & 0x3F;
                          v668 = v660[4] & 0x3F;
                          if ((v663 & 4) != 0)
                          {
                            v663 = ((v663 & 1) << 30) | (v665 << 24) | (v666 << 18) | (v667 << 12) | (v668 << 6) | v660[5] & 0x3F;
                            v664 = 6;
                          }
                          else
                          {
                            v663 = ((v663 & 3) << 24) | (v665 << 18) | (v666 << 12) | (v667 << 6) | v668;
                            v664 = 5;
                          }
                        }
                        else
                        {
                          v663 = ((v663 & 7) << 18) | (v665 << 12) | ((v660[2] & 0x3F) << 6) | v660[3] & 0x3F;
                          v664 = 4;
                        }
                      }
                      else
                      {
                        v663 = ((v663 & 0xF) << 12) | (v665 << 6) | v660[2] & 0x3F;
                        v664 = 3;
                      }
                    }
                    else
                    {
                      v664 = 2;
                      v663 = v660[1] & 0x3F | ((v663 & 0x1F) << 6);
                    }
                  }
                  if (v663 < 0x2000)
                  {
                    if (v663 > 132)
                    {
                      if (v663 > 5759)
                      {
                        if (v663 != 5760 && v663 != 6158)
                          goto LABEL_1370;
                      }
                      else if (v663 != 133 && v663 != 160)
                      {
                        goto LABEL_1370;
                      }
                    }
                    else if (v663 > 0x20 || ((1 << v663) & 0x100003E00) == 0)
                    {
                      goto LABEL_1370;
                    }
                  }
                  else if ((v663 - 0x2000) >= 0xB
                         && ((v663 - 8232) > 0x37
                          || ((1 << (v663 - 40)) & 0x80000000000083) == 0)
                         && v663 != 12288)
                  {
LABEL_1370:
                    if ((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                        * _pcre2_ucd_stage2_8[v663 & 0x7F | (_pcre2_ucd_stage1_8[v663 >> 7] << 7)]])] != 6) != (*v195 == 15))
                      goto LABEL_1619;
LABEL_1362:
                    v660 += v664;
                    *(_QWORD *)(v14 + 80) = v660;
                    if (!--v661)
                      goto LABEL_1619;
                    continue;
                  }
                  break;
                }
                if (*v195 == 15)
                  goto LABEL_1619;
                goto LABEL_1362;
              case 8:
                v748 = v657 - v658;
                if (v657 <= v658)
                  goto LABEL_1619;
                v749 = *v16;
                while ((unint64_t)v660 < v749)
                {
                  v750 = *v660;
                  v751 = 1;
                  if (v1363 && v750 >= 0xC0)
                  {
                    v752 = v660[1] & 0x3F;
                    if ((v750 & 0x20) != 0)
                    {
                      if ((v750 & 0x10) != 0)
                      {
                        if ((v750 & 8) != 0)
                        {
                          v753 = v660[2] & 0x3F;
                          v754 = v660[3] & 0x3F;
                          v755 = v660[4] & 0x3F;
                          if ((v750 & 4) != 0)
                          {
                            v750 = ((v750 & 1) << 30) | (v752 << 24) | (v753 << 18) | (v754 << 12) | (v755 << 6) | v660[5] & 0x3F;
                            v751 = 6;
                          }
                          else
                          {
                            v750 = ((v750 & 3) << 24) | (v752 << 18) | (v753 << 12) | (v754 << 6) | v755;
                            v751 = 5;
                          }
                        }
                        else
                        {
                          v750 = ((v750 & 7) << 18) | (v752 << 12) | ((v660[2] & 0x3F) << 6) | v660[3] & 0x3F;
                          v751 = 4;
                        }
                      }
                      else
                      {
                        v750 = ((v750 & 0xF) << 12) | (v752 << 6) | v660[2] & 0x3F;
                        v751 = 3;
                      }
                    }
                    else
                    {
                      v751 = 2;
                      v750 = v660[1] & 0x3F | ((v750 & 0x1F) << 6);
                    }
                  }
                  v757 = v750 == 95
                      || (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                        * _pcre2_ucd_stage2_8[v750 & 0x7F | (_pcre2_ucd_stage1_8[v750 >> 7] << 7)]])] & 0xFFFFFFFD) == 1;
                  if ((((*v195 != 15) ^ v757) & 1) == 0)
                  {
                    v660 += v751;
                    *(_QWORD *)(v14 + 80) = v660;
                    if (--v748)
                      continue;
                  }
                  goto LABEL_1619;
                }
                goto LABEL_1616;
              case 9:
                if (v657 <= v658)
                  goto LABEL_1619;
                v758 = *v16;
                while ((unint64_t)v660 < v758)
                {
                  v759 = *v660;
                  v760 = 1;
                  if (v1363 && v759 >= 0xC0)
                  {
                    v761 = v660[1] & 0x3F;
                    if ((v759 & 0x20) != 0)
                    {
                      if ((v759 & 0x10) != 0)
                      {
                        if ((v759 & 8) != 0)
                        {
                          v762 = v660[2] & 0x3F;
                          v763 = v660[3] & 0x3F;
                          v764 = v660[4] & 0x3F;
                          if ((v759 & 4) != 0)
                          {
                            v759 = ((v759 & 1) << 30) | (v761 << 24) | (v762 << 18) | (v763 << 12) | (v764 << 6) | v660[5] & 0x3F;
                            v760 = 6;
                          }
                          else
                          {
                            v759 = ((v759 & 3) << 24) | (v761 << 18) | (v762 << 12) | (v763 << 6) | v764;
                            v760 = 5;
                          }
                        }
                        else
                        {
                          v759 = ((v759 & 7) << 18) | (v761 << 12) | ((v660[2] & 0x3F) << 6) | v660[3] & 0x3F;
                          v760 = 4;
                        }
                      }
                      else
                      {
                        v759 = ((v759 & 0xF) << 12) | (v761 << 6) | v660[2] & 0x3F;
                        v760 = 3;
                      }
                    }
                    else
                    {
                      v760 = 2;
                      v759 = v660[1] & 0x3F | ((v759 & 0x1F) << 6);
                    }
                  }
                  v765 = &_pcre2_ucd_caseless_sets_8[*(unsigned int *)(v14 + 68)];
                  do
                  {
                    v766 = *v765;
                    if (v759 < *v765)
                    {
                      if (*v195 != 15)
                        goto LABEL_1619;
                      goto LABEL_1585;
                    }
                    ++v765;
                  }
                  while (v759 != v766);
                  if (*v195 == 15)
                    goto LABEL_1619;
LABEL_1585:
                  v660 += v760;
                  *(_QWORD *)(v14 + 80) = v660;
                  if (++v658 == v657)
                    goto LABEL_1619;
                }
                goto LABEL_1616;
              case 10:
                v767 = v657 - v658;
                if (v657 <= v658)
                  goto LABEL_1619;
                v768 = *v16;
                while (2)
                {
                  if ((unint64_t)v660 >= v768)
                  {
LABEL_1616:
                    v778 = (unsigned __int16)*v18;
                    if (*v18)
                    {
                      if ((unint64_t)v660 > *v15)
                      {
                        *v1360 = 1;
                        if (v778 > 1)
                          return 4294967294;
                      }
                    }
                  }
                  else
                  {
                    v769 = *v660;
                    v770 = 1;
                    if (v1363 && v769 >= 0xC0)
                    {
                      v771 = v660[1] & 0x3F;
                      if ((v769 & 0x20) != 0)
                      {
                        if ((v769 & 0x10) != 0)
                        {
                          if ((v769 & 8) != 0)
                          {
                            v772 = v660[2] & 0x3F;
                            v773 = v660[3] & 0x3F;
                            v774 = v660[4] & 0x3F;
                            if ((v769 & 4) != 0)
                            {
                              v769 = ((v769 & 1) << 30) | (v771 << 24) | (v772 << 18) | (v773 << 12) | (v774 << 6) | v660[5] & 0x3F;
                              v770 = 6;
                            }
                            else
                            {
                              v769 = ((v769 & 3) << 24) | (v771 << 18) | (v772 << 12) | (v773 << 6) | v774;
                              v770 = 5;
                            }
                          }
                          else
                          {
                            v769 = ((v769 & 7) << 18) | (v771 << 12) | ((v660[2] & 0x3F) << 6) | v660[3] & 0x3F;
                            v770 = 4;
                          }
                        }
                        else
                        {
                          v769 = ((v769 & 0xF) << 12) | (v771 << 6) | v660[2] & 0x3F;
                          v770 = 3;
                        }
                      }
                      else
                      {
                        v770 = 2;
                        v769 = v660[1] & 0x3F | ((v769 & 0x1F) << 6);
                      }
                    }
                    if (v769 - 36 <= 0x3C && ((1 << (v769 - 36)) & 0x1000000010000001) != 0)
                    {
                      if (*v195 == 15)
                        break;
LABEL_1614:
                      v660 += v770;
                      *(_QWORD *)(v14 + 80) = v660;
                      if (!--v767)
                        break;
                      continue;
                    }
                    v777 = v769 >> 13 > 6 || (v769 - 160) >> 5 < 0x6BB;
                    if (((v777 ^ (*v195 != 15)) & 1) == 0)
                      goto LABEL_1614;
                  }
                  break;
                }
LABEL_1619:
                if ((_DWORD)v11 != 2)
                {
LABEL_1620:
                  if ((unint64_t)v660 > *(_QWORD *)(v14 + 8))
                  {
                    v12 = 0;
                    a2 = *(unsigned __int8 **)v14;
                    v1313 = -34;
                    goto LABEL_3172;
                  }
                }
                goto LABEL_2406;
              default:
                return 4294967252;
            }
          }
          v669 = *v195;
          if (*v195 == 22)
          {
            v670 = v11;
            if (v657 <= v658)
              goto LABEL_1625;
            while (1)
            {
              v671 = *v16;
              if ((unint64_t)v660 >= *v16)
                break;
              v672 = v660 + 1;
              *(_QWORD *)(v14 + 80) = v660 + 1;
              v673 = *v660;
              if (v1363 && v673 >= 0xC0)
              {
                if ((v673 & 0x20) != 0)
                {
                  v674 = *v672 & 0x3F;
                  if ((v673 & 0x10) != 0)
                  {
                    if ((v673 & 8) != 0)
                    {
                      v675 = v660[2] & 0x3F;
                      v676 = v660[3] & 0x3F;
                      v677 = v660[4] & 0x3F;
                      if ((v673 & 4) != 0)
                      {
                        v673 = ((v673 & 1) << 30) | (v674 << 24) | (v675 << 18) | (v676 << 12) | (v677 << 6) | v660[5] & 0x3F;
                        v672 = v660 + 6;
                      }
                      else
                      {
                        v673 = ((v673 & 3) << 24) | (v674 << 18) | (v675 << 12) | (v676 << 6) | v677;
                        v672 = v660 + 5;
                      }
                    }
                    else
                    {
                      v673 = ((v673 & 7) << 18) | (v674 << 12) | ((v660[2] & 0x3F) << 6) | v660[3] & 0x3F;
                      v672 = v660 + 4;
                    }
                  }
                  else
                  {
                    v673 = ((v673 & 0xF) << 12) | (v674 << 6) | v660[2] & 0x3F;
                    v672 = v660 + 3;
                  }
                  *(_QWORD *)(v14 + 80) = v672;
                }
                else
                {
                  v672 = v660 + 2;
                  *(_QWORD *)(v14 + 80) = v660 + 2;
                  v673 = v660[1] & 0x3F | ((v673 & 0x1F) << 6);
                }
              }
              v660 = _pcre2_extuni_8(v673, v672, *(_QWORD *)(v7 + 152), v671, v1361, 0);
              *(_QWORD *)(v14 + 80) = v660;
              v678 = *(unsigned __int16 *)(v7 + 128);
              if (*(_WORD *)(v7 + 128))
              {
                if ((unint64_t)v660 >= *v16 && (unint64_t)v660 > *v15)
                {
                  *v1360 = 1;
                  if (v678 > 1)
                    return 4294967294;
                }
              }
              if (++v658 >= *(_DWORD *)(v14 + 60))
                goto LABEL_1625;
            }
            v779 = (unsigned __int16)*v18;
            if (!*v18 || (unint64_t)v660 <= *v15 || (*v1360 = 1, v779 <= 1))
            {
LABEL_1625:
              v11 = v670;
              if ((_DWORD)v670 != 2)
              {
                v780 = *(unsigned __int8 **)(v14 + 8);
                goto LABEL_2409;
              }
              goto LABEL_2406;
            }
            return 4294967294;
          }
          if (v1363)
          {
            v20 = 4294967252;
            switch(v669)
            {
              case 6:
                v679 = v11;
                v680 = v18;
                v681 = v16;
                v682 = v8;
                v906 = v657 - v658;
                if (v657 <= v658)
                  goto LABEL_2377;
                v907 = *v681;
                while (2)
                {
                  if ((unint64_t)v660 >= v907)
                    goto LABEL_2113;
                  v908 = *v660;
                  if (v908 < 0xC0)
                  {
                    v910 = 1;
                  }
                  else
                  {
                    v909 = v660[1] & 0x3F;
                    if ((v908 & 0x20) != 0)
                    {
                      if ((v908 & 0x10) != 0)
                      {
                        if ((v908 & 8) != 0)
                        {
                          v911 = v660[2] & 0x3F;
                          v912 = v660[3] & 0x3F;
                          v913 = v660[4] & 0x3F;
                          if ((v908 & 4) != 0)
                          {
                            v908 = ((v908 & 1) << 30) | (v909 << 24) | (v911 << 18) | (v912 << 12) | (v913 << 6) | v660[5] & 0x3F;
                            v910 = 6;
                          }
                          else
                          {
                            v908 = ((v908 & 3) << 24) | (v909 << 18) | (v911 << 12) | (v912 << 6) | v913;
                            v910 = 5;
                          }
                        }
                        else
                        {
                          v908 = ((v908 & 7) << 18) | (v909 << 12) | ((v660[2] & 0x3F) << 6) | v660[3] & 0x3F;
                          v910 = 4;
                        }
                      }
                      else
                      {
                        v908 = ((v908 & 0xF) << 12) | (v909 << 6) | v660[2] & 0x3F;
                        v910 = 3;
                      }
                    }
                    else
                    {
                      v910 = 2;
                      v908 = v660[1] & 0x3F | ((v908 & 0x1F) << 6);
                    }
                    if (v908 > 0xFF)
                      goto LABEL_1961;
                  }
                  if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + v908) & 4) != 0)
                    goto LABEL_2377;
LABEL_1961:
                  v660 += v910;
                  *(_QWORD *)(v14 + 80) = v660;
                  if (!--v906)
                    goto LABEL_2377;
                  continue;
                }
              case 7:
                v679 = v11;
                v680 = v18;
                v681 = v16;
                v682 = v8;
                v914 = v657 - v658;
                if (v657 <= v658)
                  goto LABEL_2377;
                v915 = *v681;
                while (2)
                {
                  if ((unint64_t)v660 >= v915)
                    goto LABEL_2113;
                  v916 = *v660;
                  if (v916 < 0xC0)
                  {
                    v918 = 1;
                    goto LABEL_1978;
                  }
                  v917 = v660[1] & 0x3F;
                  if ((v916 & 0x20) != 0)
                  {
                    if ((v916 & 0x10) != 0)
                    {
                      if ((v916 & 8) != 0)
                      {
                        v919 = v660[2] & 0x3F;
                        v920 = v660[3] & 0x3F;
                        v921 = v660[4] & 0x3F;
                        if ((v916 & 4) != 0)
                        {
                          v916 = ((v916 & 1) << 30) | (v917 << 24) | (v919 << 18) | (v920 << 12) | (v921 << 6) | v660[5] & 0x3F;
                          v918 = 6;
                        }
                        else
                        {
                          v916 = ((v916 & 3) << 24) | (v917 << 18) | (v919 << 12) | (v920 << 6) | v921;
                          v918 = 5;
                        }
                      }
                      else
                      {
                        v916 = ((v916 & 7) << 18) | (v917 << 12) | ((v660[2] & 0x3F) << 6) | v660[3] & 0x3F;
                        v918 = 4;
                      }
                    }
                    else
                    {
                      v916 = ((v916 & 0xF) << 12) | (v917 << 6) | v660[2] & 0x3F;
                      v918 = 3;
                    }
                  }
                  else
                  {
                    v918 = 2;
                    v916 = v660[1] & 0x3F | ((v916 & 0x1F) << 6);
                  }
                  if (v916 <= 0xFF)
                  {
LABEL_1978:
                    if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + v916) & 4) == 0)
                      goto LABEL_2377;
                    v660 += v918;
                    *(_QWORD *)(v14 + 80) = v660;
                    if (!--v914)
                      goto LABEL_2377;
                    continue;
                  }
                  goto LABEL_2377;
                }
              case 8:
                v679 = v11;
                v680 = v18;
                v681 = v16;
                v682 = v8;
                v922 = v657 - v658;
                if (v657 <= v658)
                  goto LABEL_2377;
                v923 = *v681;
                while (2)
                {
                  if ((unint64_t)v660 >= v923)
                    goto LABEL_2113;
                  v924 = *v660;
                  if (v924 < 0xC0)
                  {
                    v926 = 1;
                  }
                  else
                  {
                    v925 = v660[1] & 0x3F;
                    if ((v924 & 0x20) != 0)
                    {
                      if ((v924 & 0x10) != 0)
                      {
                        if ((v924 & 8) != 0)
                        {
                          v927 = v660[2] & 0x3F;
                          v928 = v660[3] & 0x3F;
                          v929 = v660[4] & 0x3F;
                          if ((v924 & 4) != 0)
                          {
                            v924 = ((v924 & 1) << 30) | (v925 << 24) | (v927 << 18) | (v928 << 12) | (v929 << 6) | v660[5] & 0x3F;
                            v926 = 6;
                          }
                          else
                          {
                            v924 = ((v924 & 3) << 24) | (v925 << 18) | (v927 << 12) | (v928 << 6) | v929;
                            v926 = 5;
                          }
                        }
                        else
                        {
                          v924 = ((v924 & 7) << 18) | (v925 << 12) | ((v660[2] & 0x3F) << 6) | v660[3] & 0x3F;
                          v926 = 4;
                        }
                      }
                      else
                      {
                        v924 = ((v924 & 0xF) << 12) | (v925 << 6) | v660[2] & 0x3F;
                        v926 = 3;
                      }
                    }
                    else
                    {
                      v926 = 2;
                      v924 = v660[1] & 0x3F | ((v924 & 0x1F) << 6);
                    }
                    if (v924 > 0xFF)
                      goto LABEL_1997;
                  }
                  if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + v924) & 1) != 0)
                    goto LABEL_2377;
LABEL_1997:
                  v660 += v926;
                  *(_QWORD *)(v14 + 80) = v660;
                  if (!--v922)
                    goto LABEL_2377;
                  continue;
                }
              case 9:
                v679 = v11;
                v680 = v18;
                v681 = v16;
                v682 = v8;
                v930 = v657 - v658;
                if (v657 <= v658)
                  goto LABEL_2377;
                v931 = *v681;
                while (2)
                {
                  if ((unint64_t)v660 >= v931)
                    goto LABEL_2113;
                  v932 = *v660;
                  if (v932 < 0xC0)
                  {
                    v934 = 1;
                    goto LABEL_2014;
                  }
                  v933 = v660[1] & 0x3F;
                  if ((v932 & 0x20) != 0)
                  {
                    if ((v932 & 0x10) != 0)
                    {
                      if ((v932 & 8) != 0)
                      {
                        v935 = v660[2] & 0x3F;
                        v936 = v660[3] & 0x3F;
                        v937 = v660[4] & 0x3F;
                        if ((v932 & 4) != 0)
                        {
                          v932 = ((v932 & 1) << 30) | (v933 << 24) | (v935 << 18) | (v936 << 12) | (v937 << 6) | v660[5] & 0x3F;
                          v934 = 6;
                        }
                        else
                        {
                          v932 = ((v932 & 3) << 24) | (v933 << 18) | (v935 << 12) | (v936 << 6) | v937;
                          v934 = 5;
                        }
                      }
                      else
                      {
                        v932 = ((v932 & 7) << 18) | (v933 << 12) | ((v660[2] & 0x3F) << 6) | v660[3] & 0x3F;
                        v934 = 4;
                      }
                    }
                    else
                    {
                      v932 = ((v932 & 0xF) << 12) | (v933 << 6) | v660[2] & 0x3F;
                      v934 = 3;
                    }
                  }
                  else
                  {
                    v934 = 2;
                    v932 = v660[1] & 0x3F | ((v932 & 0x1F) << 6);
                  }
                  if (v932 <= 0xFF)
                  {
LABEL_2014:
                    if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + v932) & 1) == 0)
                      goto LABEL_2377;
                    v660 += v934;
                    *(_QWORD *)(v14 + 80) = v660;
                    if (!--v930)
                      goto LABEL_2377;
                    continue;
                  }
                  goto LABEL_2377;
                }
              case 10:
                v679 = v11;
                v680 = v18;
                v681 = v16;
                v682 = v8;
                v938 = v657 - v658;
                if (v657 <= v658)
                  goto LABEL_2377;
                v939 = *v681;
                while (2)
                {
                  if ((unint64_t)v660 >= v939)
                    goto LABEL_2113;
                  v940 = *v660;
                  if (v940 < 0xC0)
                  {
                    v942 = 1;
                  }
                  else
                  {
                    v941 = v660[1] & 0x3F;
                    if ((v940 & 0x20) != 0)
                    {
                      if ((v940 & 0x10) != 0)
                      {
                        if ((v940 & 8) != 0)
                        {
                          v943 = v660[2] & 0x3F;
                          v944 = v660[3] & 0x3F;
                          v945 = v660[4] & 0x3F;
                          if ((v940 & 4) != 0)
                          {
                            v940 = ((v940 & 1) << 30) | (v941 << 24) | (v943 << 18) | (v944 << 12) | (v945 << 6) | v660[5] & 0x3F;
                            v942 = 6;
                          }
                          else
                          {
                            v940 = ((v940 & 3) << 24) | (v941 << 18) | (v943 << 12) | (v944 << 6) | v945;
                            v942 = 5;
                          }
                        }
                        else
                        {
                          v940 = ((v940 & 7) << 18) | (v941 << 12) | ((v660[2] & 0x3F) << 6) | v660[3] & 0x3F;
                          v942 = 4;
                        }
                      }
                      else
                      {
                        v940 = ((v940 & 0xF) << 12) | (v941 << 6) | v660[2] & 0x3F;
                        v942 = 3;
                      }
                    }
                    else
                    {
                      v942 = 2;
                      v940 = v660[1] & 0x3F | ((v940 & 0x1F) << 6);
                    }
                    if (v940 > 0xFF)
                      goto LABEL_2033;
                  }
                  if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + v940) & 0x10) != 0)
                    goto LABEL_2377;
LABEL_2033:
                  v660 += v942;
                  *(_QWORD *)(v14 + 80) = v660;
                  if (!--v938)
                    goto LABEL_2377;
                  continue;
                }
              case 11:
                v679 = v11;
                v680 = v18;
                v681 = v16;
                v682 = v8;
                v946 = v657 - v658;
                if (v657 <= v658)
                  goto LABEL_2377;
                v947 = *v681;
                while (2)
                {
                  if ((unint64_t)v660 >= v947)
                    goto LABEL_2113;
                  v948 = *v660;
                  if (v948 < 0xC0)
                  {
                    v950 = 1;
                    goto LABEL_2050;
                  }
                  v949 = v660[1] & 0x3F;
                  if ((v948 & 0x20) != 0)
                  {
                    if ((v948 & 0x10) != 0)
                    {
                      if ((v948 & 8) != 0)
                      {
                        v951 = v660[2] & 0x3F;
                        v952 = v660[3] & 0x3F;
                        v953 = v660[4] & 0x3F;
                        if ((v948 & 4) != 0)
                        {
                          v948 = ((v948 & 1) << 30) | (v949 << 24) | (v951 << 18) | (v952 << 12) | (v953 << 6) | v660[5] & 0x3F;
                          v950 = 6;
                        }
                        else
                        {
                          v948 = ((v948 & 3) << 24) | (v949 << 18) | (v951 << 12) | (v952 << 6) | v953;
                          v950 = 5;
                        }
                      }
                      else
                      {
                        v948 = ((v948 & 7) << 18) | (v949 << 12) | ((v660[2] & 0x3F) << 6) | v660[3] & 0x3F;
                        v950 = 4;
                      }
                    }
                    else
                    {
                      v948 = ((v948 & 0xF) << 12) | (v949 << 6) | v660[2] & 0x3F;
                      v950 = 3;
                    }
                  }
                  else
                  {
                    v950 = 2;
                    v948 = v660[1] & 0x3F | ((v948 & 0x1F) << 6);
                  }
                  if (v948 <= 0xFF)
                  {
LABEL_2050:
                    if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + v948) & 0x10) == 0)
                      goto LABEL_2377;
                    v660 += v950;
                    *(_QWORD *)(v14 + 80) = v660;
                    if (!--v946)
                      goto LABEL_2377;
                    continue;
                  }
                  goto LABEL_2377;
                }
              case 12:
                v679 = v11;
                v680 = v18;
                v681 = v16;
                v682 = v8;
                if (v657 <= v658)
                  goto LABEL_2377;
                v954 = *v681;
                while ((unint64_t)v660 < v954)
                {
                  v955 = *(_DWORD *)(v7 + 244);
                  if (v955)
                  {
                    if (_pcre2_is_newline_8(v660, v955, v954, v1355, v1361))
                      goto LABEL_2377;
                    v660 = *(unsigned __int8 **)(v14 + 80);
                    v954 = *v681;
                  }
                  else
                  {
                    v956 = *v1355;
                    if ((unint64_t)v660 <= v954 - v956
                      && *v660 == *(unsigned __int8 *)(v7 + 252)
                      && ((_DWORD)v956 == 1 || v660[1] == *(unsigned __int8 *)(v7 + 253)))
                    {
                      goto LABEL_2377;
                    }
                  }
                  v957 = (unsigned __int16)*v18;
                  v958 = v660 + 1;
                  if (*v18)
                  {
                    if ((unint64_t)v958 >= v954
                      && !*(_DWORD *)(v7 + 244)
                      && *v1355 == 2
                      && *v660 == *(unsigned __int8 *)(v7 + 252))
                    {
                      *v1360 = 1;
                      if (v957 > 1)
                        return 4294967294;
                    }
                  }
                  do
                  {
                    v660 = v958;
                    *(_QWORD *)(v14 + 80) = v958;
                    if ((unint64_t)v958 >= v954)
                      break;
                    ++v958;
                  }
                  while ((*v660 & 0xC0) == 0x80);
                  if (++v658 >= *(_DWORD *)(v14 + 60))
                    goto LABEL_2377;
                }
                goto LABEL_2113;
              case 13:
                v681 = v16;
                v679 = v11;
                v680 = v18;
                v682 = v8;
                if (v657 == -1)
                {
                  v1032 = *v681;
                  *(_QWORD *)(v14 + 80) = *v681;
                  v974 = (unsigned __int16)*v18;
                  if (!*v18 || v1032 <= *v15)
                    goto LABEL_2377;
                }
                else
                {
                  if (v657 <= v658)
                    goto LABEL_2377;
                  v959 = *v681;
                  while ((unint64_t)v660 < v959)
                  {
                    v960 = v660 + 1;
                    do
                    {
                      v660 = v960;
                      *(_QWORD *)(v14 + 80) = v960;
                      if ((unint64_t)v960 >= v959)
                        break;
                      ++v960;
                    }
                    while ((*v660 & 0xC0) == 0x80);
                    if (++v658 == v657)
                      goto LABEL_2377;
                  }
LABEL_2113:
                  v974 = (unsigned __int16)*v680;
                  if (!*v680 || (unint64_t)v660 <= *v15)
                    goto LABEL_2377;
                }
                *v1360 = 1;
                if (v974 > 1)
                  return 4294967294;
                goto LABEL_2377;
              case 14:
                v679 = v11;
                v680 = v18;
                v961 = v16;
                v682 = v8;
                v681 = v961;
                v962 = (unsigned __int8 *)*v961;
                if (v659 <= (int)v962 - (int)v660)
                {
                  *(_QWORD *)(v14 + 80) = &v660[v659];
                }
                else
                {
                  *(_QWORD *)(v14 + 80) = v962;
                  v963 = (unsigned __int16)*v18;
                  if (*v18)
                  {
                    if ((unint64_t)v962 > *v15)
                    {
                      *v1360 = 1;
                      if (v963 > 1)
                        return 4294967294;
                    }
                  }
                }
                goto LABEL_2377;
              case 17:
                v679 = v11;
                v680 = v18;
                v681 = v16;
                v682 = v8;
                v964 = v657 - v658;
                if (v657 <= v658)
                  goto LABEL_2377;
                v965 = *v681;
                while (2)
                {
                  if ((unint64_t)v660 >= v965)
                    goto LABEL_2113;
                  v966 = *v660;
                  if (v966 < 0xC0)
                  {
                    v969 = 1;
                    v968 = v7;
                  }
                  else
                  {
                    v967 = v660[1] & 0x3F;
                    v968 = v7;
                    if ((v966 & 0x20) != 0)
                    {
                      if ((v966 & 0x10) != 0)
                      {
                        if ((v966 & 8) != 0)
                        {
                          v971 = v660[2] & 0x3F;
                          v972 = v660[3] & 0x3F;
                          v973 = v660[4] & 0x3F;
                          if ((v966 & 4) != 0)
                          {
                            v966 = ((v966 & 1) << 30) | (v967 << 24) | (v971 << 18) | (v972 << 12) | (v973 << 6) | v660[5] & 0x3F;
                            v969 = 6;
                          }
                          else
                          {
                            v966 = ((v966 & 3) << 24) | (v967 << 18) | (v971 << 12) | (v972 << 6) | v973;
                            v969 = 5;
                          }
                        }
                        else
                        {
                          v966 = ((v966 & 7) << 18) | (v967 << 12) | ((v660[2] & 0x3F) << 6) | v660[3] & 0x3F;
                          v969 = 4;
                        }
                      }
                      else
                      {
                        v966 = ((v966 & 0xF) << 12) | (v967 << 6) | v660[2] & 0x3F;
                        v969 = 3;
                      }
                    }
                    else
                    {
                      v969 = 2;
                      v966 = v660[1] & 0x3F | ((v966 & 0x1F) << 6);
                    }
                  }
                  if (v966 == 10)
                    goto LABEL_2103;
                  if (v966 == 13)
                  {
                    v970 = v660 + 1;
                    *(_QWORD *)(v14 + 80) = v660 + 1;
                    if ((unint64_t)(v660 + 1) >= v965)
                      goto LABEL_2377;
                    if (*v970 != 10)
                    {
LABEL_2104:
                      v660 = v970;
                      if (!--v964)
                        goto LABEL_2377;
                      continue;
                    }
                    v969 = 2;
LABEL_2103:
                    v970 = &v660[v969];
                    *(_QWORD *)(v14 + 80) = &v660[v969];
                    goto LABEL_2104;
                  }
                  break;
                }
                if (*(_WORD *)(v968 + 130) != 2 && (v966 - 11 < 2 || v966 - 8232 < 2 || v966 == 133))
                  goto LABEL_2103;
LABEL_2377:
                v11 = v679;
                v1009 = v682;
                if ((_DWORD)v679 != 2)
                {
                  v1033 = *(unsigned __int8 **)(v14 + 80);
                  v16 = v681;
                  v18 = v680;
                  v1034 = v1358;
                  v8 = v1009;
LABEL_2931:
                  if ((unint64_t)v1033 <= *(_QWORD *)(v14 + 8))
                  {
                    v1358 = v1034;
                    goto LABEL_2406;
                  }
                  v12 = 0;
                  a2 = *(unsigned __int8 **)v14;
                  v1313 = -35;
                  goto LABEL_3172;
                }
                goto LABEL_2378;
              case 18:
              case 19:
                v679 = v11;
                v680 = v18;
                v681 = v16;
                v682 = v8;
                v683 = v657 - v658;
                if (v657 <= v658)
                  goto LABEL_2377;
                v684 = *v681;
                v685 = v669 == 18;
                while (2)
                {
                  if ((unint64_t)v660 >= v684)
                    goto LABEL_2113;
                  v686 = *v660;
                  if (v686 < 0xC0)
                  {
                    v688 = 1;
                  }
                  else
                  {
                    v687 = v660[1] & 0x3F;
                    if ((v686 & 0x20) != 0)
                    {
                      if ((v686 & 0x10) != 0)
                      {
                        if ((v686 & 8) != 0)
                        {
                          v689 = v660[2] & 0x3F;
                          v690 = v660[3] & 0x3F;
                          v691 = v660[4] & 0x3F;
                          if ((v686 & 4) != 0)
                          {
                            v686 = ((v686 & 1) << 30) | (v687 << 24) | (v689 << 18) | (v690 << 12) | (v691 << 6) | v660[5] & 0x3F;
                            v688 = 6;
                          }
                          else
                          {
                            v686 = ((v686 & 3) << 24) | (v687 << 18) | (v689 << 12) | (v690 << 6) | v691;
                            v688 = 5;
                          }
                        }
                        else
                        {
                          v686 = ((v686 & 7) << 18) | (v687 << 12) | ((v660[2] & 0x3F) << 6) | v660[3] & 0x3F;
                          v688 = 4;
                        }
                      }
                      else
                      {
                        v686 = ((v686 & 0xF) << 12) | (v687 << 6) | v660[2] & 0x3F;
                        v688 = 3;
                      }
                    }
                    else
                    {
                      v688 = 2;
                      v686 = v660[1] & 0x3F | ((v686 & 0x1F) << 6);
                    }
                  }
                  v692 = 1;
                  if (v686 < 0x2000)
                  {
                    if (v686 <= 159)
                    {
                      if (v686 != 9 && v686 != 32)
                        goto LABEL_1426;
                    }
                    else if (v686 != 160 && v686 != 5760 && v686 != 6158)
                    {
                      goto LABEL_1426;
                    }
                  }
                  else
                  {
                    if (v686 <= 8238)
                    {
                      if ((v686 - 0x2000) < 0xB)
                        goto LABEL_1412;
LABEL_1426:
                      v692 = 0;
                      goto LABEL_1412;
                    }
                    if (v686 != 8239 && v686 != 8287 && v686 != 12288)
                      goto LABEL_1426;
                  }
LABEL_1412:
                  if (v692 == v685)
                    goto LABEL_2377;
                  v660 += v688;
                  *(_QWORD *)(v14 + 80) = v660;
                  if (!--v683)
                    goto LABEL_2377;
                  continue;
                }
              case 20:
              case 21:
                v679 = v11;
                v680 = v18;
                v681 = v16;
                v682 = v8;
                v829 = v657 - v658;
                if (v657 <= v658)
                  goto LABEL_2377;
                v830 = *v681;
                v831 = v669 == 20;
                while ((unint64_t)v660 < v830)
                {
                  v832 = *v660;
                  if (v832 < 0xC0)
                  {
                    v834 = 1;
                  }
                  else
                  {
                    v833 = v660[1] & 0x3F;
                    if ((v832 & 0x20) != 0)
                    {
                      if ((v832 & 0x10) != 0)
                      {
                        if ((v832 & 8) != 0)
                        {
                          v835 = v660[2] & 0x3F;
                          v836 = v660[3] & 0x3F;
                          v837 = v660[4] & 0x3F;
                          if ((v832 & 4) != 0)
                          {
                            v832 = ((v832 & 1) << 30) | (v833 << 24) | (v835 << 18) | (v836 << 12) | (v837 << 6) | v660[5] & 0x3F;
                            v834 = 6;
                          }
                          else
                          {
                            v832 = ((v832 & 3) << 24) | (v833 << 18) | (v835 << 12) | (v836 << 6) | v837;
                            v834 = 5;
                          }
                        }
                        else
                        {
                          v832 = ((v832 & 7) << 18) | (v833 << 12) | ((v660[2] & 0x3F) << 6) | v660[3] & 0x3F;
                          v834 = 4;
                        }
                      }
                      else
                      {
                        v832 = ((v832 & 0xF) << 12) | (v833 << 6) | v660[2] & 0x3F;
                        v834 = 3;
                      }
                    }
                    else
                    {
                      v834 = 2;
                      v832 = v660[1] & 0x3F | ((v832 & 0x1F) << 6);
                    }
                  }
                  v838 = v832 - 10;
                  v839 = v832 == 133;
                  v840 = v832 - 8232;
                  v842 = v838 < 4 || v840 < 2 || v839;
                  if (v842 != v831)
                  {
                    v660 += v834;
                    *(_QWORD *)(v14 + 80) = v660;
                    if (--v829)
                      continue;
                  }
                  goto LABEL_2377;
                }
                goto LABEL_2113;
              default:
                return v20;
            }
          }
          v20 = 4294967252;
          switch(v669)
          {
            case 6:
              v693 = v11;
              v680 = v18;
              v681 = v16;
              v695 = v8;
              v975 = v657 - v658;
              if (v657 <= v658)
                goto LABEL_2221;
              v976 = *v681;
              while ((unint64_t)v660 < v976)
              {
                if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + *v660) & 4) == 0)
                {
                  *(_QWORD *)(v14 + 80) = ++v660;
                  if (--v975)
                    continue;
                }
                goto LABEL_2221;
              }
              goto LABEL_2216;
            case 7:
              v693 = v11;
              v680 = v18;
              v681 = v16;
              v695 = v8;
              v977 = v657 - v658;
              if (v657 <= v658)
                goto LABEL_2221;
              v978 = *v681;
              while ((unint64_t)v660 < v978)
              {
                if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + *v660) & 4) != 0)
                {
                  *(_QWORD *)(v14 + 80) = ++v660;
                  if (--v977)
                    continue;
                }
                goto LABEL_2221;
              }
              goto LABEL_2216;
            case 8:
              v693 = v11;
              v680 = v18;
              v681 = v16;
              v695 = v8;
              v979 = v657 - v658;
              if (v657 <= v658)
                goto LABEL_2221;
              v980 = *v681;
              while ((unint64_t)v660 < v980)
              {
                if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + *v660) & 1) == 0)
                {
                  *(_QWORD *)(v14 + 80) = ++v660;
                  if (--v979)
                    continue;
                }
                goto LABEL_2221;
              }
              goto LABEL_2216;
            case 9:
              v693 = v11;
              v680 = v18;
              v681 = v16;
              v695 = v8;
              v981 = v657 - v658;
              if (v657 <= v658)
                goto LABEL_2221;
              v982 = *v681;
              while ((unint64_t)v660 < v982)
              {
                if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + *v660) & 1) != 0)
                {
                  *(_QWORD *)(v14 + 80) = ++v660;
                  if (--v981)
                    continue;
                }
                goto LABEL_2221;
              }
              goto LABEL_2216;
            case 10:
              v693 = v11;
              v680 = v18;
              v681 = v16;
              v695 = v8;
              v983 = v657 - v658;
              if (v657 <= v658)
                goto LABEL_2221;
              v984 = *v681;
              while ((unint64_t)v660 < v984)
              {
                if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + *v660) & 0x10) == 0)
                {
                  *(_QWORD *)(v14 + 80) = ++v660;
                  if (--v983)
                    continue;
                }
                goto LABEL_2221;
              }
              goto LABEL_2216;
            case 11:
              v693 = v11;
              v680 = v18;
              v681 = v16;
              v695 = v8;
              v985 = v657 - v658;
              if (v657 <= v658)
                goto LABEL_2221;
              v986 = *v681;
              while ((unint64_t)v660 < v986)
              {
                if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + *v660) & 0x10) != 0)
                {
                  *(_QWORD *)(v14 + 80) = ++v660;
                  if (--v985)
                    continue;
                }
                goto LABEL_2221;
              }
              goto LABEL_2216;
            case 12:
              v693 = v11;
              v680 = v18;
              v681 = v16;
              v695 = v8;
              if (v657 <= v658)
                goto LABEL_2221;
              while (2)
              {
                v987 = *v681;
                if ((unint64_t)v660 >= *v681)
                  goto LABEL_2216;
                v988 = *(_DWORD *)(v7 + 244);
                if (v988)
                {
                  if (_pcre2_is_newline_8(v660, v988, v987, v1355, v1361))
                    goto LABEL_2221;
                  v660 = *(unsigned __int8 **)(v14 + 80);
LABEL_2162:
                  v990 = (unsigned __int16)*v18;
                  if (!*v18
                    || (unint64_t)(v660 + 1) < *v681
                    || *(_DWORD *)(v7 + 244)
                    || *v1355 != 2
                    || *v660 != *(unsigned __int8 *)(v7 + 252)
                    || (*v1360 = 1, v990 <= 1))
                  {
                    *(_QWORD *)(v14 + 80) = ++v660;
                    if (++v658 >= *(_DWORD *)(v14 + 60))
                      goto LABEL_2221;
                    continue;
                  }
                  return 4294967294;
                }
                break;
              }
              v989 = *v1355;
              if ((unint64_t)v660 > v987 - v989
                || *v660 != *(unsigned __int8 *)(v7 + 252)
                || (_DWORD)v989 != 1 && v660[1] != *(unsigned __int8 *)(v7 + 253))
              {
                goto LABEL_2162;
              }
              goto LABEL_2221;
            case 13:
            case 14:
              v693 = v11;
              v680 = v18;
              v694 = v16;
              v695 = v8;
              v681 = v694;
              v696 = (unsigned __int8 *)*v694;
              if (v659 <= (int)v696 - (int)v660)
              {
                *(_QWORD *)(v14 + 80) = &v660[v659];
              }
              else
              {
                *(_QWORD *)(v14 + 80) = v696;
                v697 = (unsigned __int16)*v18;
                if (*v18)
                {
                  if ((unint64_t)v696 > *v15)
                  {
                    *v1360 = 1;
                    if (v697 > 1)
                      return 4294967294;
                  }
                }
              }
              goto LABEL_2221;
            case 17:
              v693 = v11;
              v680 = v18;
              v681 = v16;
              v695 = v8;
              v991 = v657 - v658;
              if (v657 <= v658)
                goto LABEL_2221;
              v992 = *v681;
              while (2)
              {
                if ((unint64_t)v660 >= v992)
                  goto LABEL_2216;
                v993 = *v660;
                if (v993 == 10)
                {
                  v995 = 1;
                }
                else if (v993 == 13)
                {
                  v994 = v660 + 1;
                  *(_QWORD *)(v14 + 80) = v660 + 1;
                  if ((unint64_t)(v660 + 1) >= v992)
                    goto LABEL_2221;
                  if (*v994 != 10)
                  {
LABEL_2183:
                    v660 = v994;
                    if (!--v991)
                      goto LABEL_2221;
                    continue;
                  }
                  v995 = 2;
                }
                else if (*(_WORD *)(v7 + 130) == 2 || (v995 = 1, (v993 - 11) >= 2) && v993 != 133)
                {
LABEL_2221:
                  v11 = v693;
                  v1009 = v695;
                  if ((_DWORD)v693 != 2)
                  {
                    v1010 = *(unsigned __int8 **)(v14 + 80);
                    v16 = v681;
                    v18 = v680;
                    v1011 = v1358;
                    v8 = v1009;
LABEL_2961:
                    if (v1010 == *(unsigned __int8 **)(v14 + 8))
                    {
                      v1358 = v1011;
                      goto LABEL_2406;
                    }
                    v12 = 0;
                    a2 = *(unsigned __int8 **)v14;
                    v1313 = 34;
                    goto LABEL_3172;
                  }
LABEL_2378:
                  v16 = v681;
                  v18 = v680;
                  v8 = v1009;
                  goto LABEL_2406;
                }
                break;
              }
              v994 = &v660[v995];
              *(_QWORD *)(v14 + 80) = v994;
              goto LABEL_2183;
            case 18:
              v693 = v11;
              v680 = v18;
              v681 = v16;
              v695 = v8;
              v996 = v657 - v658;
              if (v657 <= v658)
                goto LABEL_2221;
              v997 = *v681;
              while ((unint64_t)v660 < v997)
              {
                v998 = *v660;
                if (v998 != 9 && v998 != 32 && v998 != 160)
                {
                  *(_QWORD *)(v14 + 80) = ++v660;
                  if (--v996)
                    continue;
                }
                goto LABEL_2221;
              }
              goto LABEL_2216;
            case 19:
              v693 = v11;
              v680 = v18;
              v681 = v16;
              v695 = v8;
              v999 = v657 - v658;
              if (v657 <= v658)
                goto LABEL_2221;
              v1000 = *v681;
              while ((unint64_t)v660 < v1000)
              {
                v1001 = *v660;
                if (v1001 == 9 || v1001 == 160 || v1001 == 32)
                {
                  *(_QWORD *)(v14 + 80) = ++v660;
                  if (--v999)
                    continue;
                }
                goto LABEL_2221;
              }
              goto LABEL_2216;
            case 20:
              v693 = v11;
              v680 = v18;
              v681 = v16;
              v695 = v8;
              v1002 = v657 - v658;
              if (v657 <= v658)
                goto LABEL_2221;
              v1003 = *v681;
              while ((unint64_t)v660 < v1003)
              {
                v1004 = *v660;
                if ((v1004 - 10) >= 4 && v1004 != 133)
                {
                  *(_QWORD *)(v14 + 80) = ++v660;
                  if (--v1002)
                    continue;
                }
                goto LABEL_2221;
              }
              goto LABEL_2216;
            case 21:
              v693 = v11;
              v680 = v18;
              v681 = v16;
              v695 = v8;
              v1005 = v657 - v658;
              if (v657 <= v658)
                goto LABEL_2221;
              v1006 = *v681;
              while ((unint64_t)v660 < v1006)
              {
                v1007 = *v660;
                if ((v1007 - 10) < 4 || v1007 == 133)
                {
                  *(_QWORD *)(v14 + 80) = ++v660;
                  if (--v1005)
                    continue;
                }
                goto LABEL_2221;
              }
LABEL_2216:
              v1008 = (unsigned __int16)*v680;
              if (*v680)
              {
                if ((unint64_t)v660 > *v15)
                {
                  *v1360 = 1;
                  if (v1008 > 1)
                    return 4294967294;
                }
              }
              goto LABEL_2221;
            default:
              return v20;
          }
        }
        if ((v196 & 0x80000000) == 0)
        {
          v11 = 0;
          switch((int)v196)
          {
            case 0:
LABEL_3232:
              v12 = 0;
              a2 = *(unsigned __int8 **)v14;
              v1313 = -48;
              v11 = v196;
              goto LABEL_3172;
            case 1:
              goto LABEL_3216;
            case 2:
LABEL_3217:
              v12 = 0;
              a2 = *(unsigned __int8 **)v14;
              v1313 = -46;
              goto LABEL_3172;
            case 3:
LABEL_3218:
              v12 = 0;
              a2 = *(unsigned __int8 **)v14;
              v1313 = -45;
              goto LABEL_3172;
            case 4:
LABEL_3219:
              v12 = 0;
              a2 = *(unsigned __int8 **)v14;
              v1313 = -44;
              goto LABEL_3172;
            case 5:
LABEL_3220:
              v12 = 0;
              a2 = *(unsigned __int8 **)v14;
              v1313 = -43;
              goto LABEL_3172;
            case 6:
            case 7:
              goto LABEL_3189;
            case 8:
LABEL_3221:
              v12 = 0;
              a2 = *(unsigned __int8 **)v14;
              v1313 = -41;
              goto LABEL_3172;
            case 9:
              goto LABEL_3222;
            case 10:
              goto LABEL_3223;
            default:
              return 4294967252;
          }
        }
        if (*v195 == 22)
        {
          v11 = 0;
LABEL_3331:
          v12 = 0;
          a2 = *(unsigned __int8 **)v14;
          v1313 = -38;
          goto LABEL_3172;
        }
        v11 = 0;
        if (v1363)
          goto LABEL_3277;
        goto LABEL_3340;
      case 0x6Eu:
      case 0x6Fu:
        v85 = a2 + 1;
        *(_QWORD *)(v14 + 16) = a2 + 1;
        v86 = a2 + 33;
        *(_QWORD *)v14 = a2 + 33;
        v87 = a2[33] - 98;
        if (v87 > 0xB)
        {
          *(_QWORD *)(v14 + 56) = 0x100000001;
          v90 = 1;
          v89 = 1;
          if (v1363)
          {
LABEL_633:
            v333 = *v16;
            v334 = *(unsigned __int8 **)(v14 + 80);
            v335 = 1;
            while ((unint64_t)v334 < v333)
            {
              v336 = v334 + 1;
              *(_QWORD *)(v14 + 80) = v334 + 1;
              v337 = *v334;
              if (v337 < 0xC0)
                goto LABEL_649;
              if ((v337 & 0x20) != 0)
              {
                v338 = *v336 & 0x3F;
                if ((v337 & 0x10) != 0)
                {
                  if ((v337 & 8) != 0)
                  {
                    v339 = v334[2] & 0x3F;
                    v340 = v334[3] & 0x3F;
                    v341 = v334[4] & 0x3F;
                    if ((v337 & 4) != 0)
                    {
                      v337 = ((v337 & 1) << 30) | (v338 << 24) | (v339 << 18) | (v340 << 12) | (v341 << 6) | v334[5] & 0x3F;
                      v336 = v334 + 6;
                    }
                    else
                    {
                      v337 = ((v337 & 3) << 24) | (v338 << 18) | (v339 << 12) | (v340 << 6) | v341;
                      v336 = v334 + 5;
                    }
                  }
                  else
                  {
                    v337 = ((v337 & 7) << 18) | (v338 << 12) | ((v334[2] & 0x3F) << 6) | v334[3] & 0x3F;
                    v336 = v334 + 4;
                  }
                }
                else
                {
                  v337 = ((v337 & 0xF) << 12) | (v338 << 6) | v334[2] & 0x3F;
                  v336 = v334 + 3;
                }
                *(_QWORD *)(v14 + 80) = v336;
              }
              else
              {
                v336 = v334 + 2;
                *(_QWORD *)(v14 + 80) = v334 + 2;
                v337 = v334[1] & 0x3F | ((v337 & 0x1F) << 6);
              }
              if (v337 < 0x100)
              {
LABEL_649:
                if (((v85[(unint64_t)v337 >> 3] >> (v337 & 7)) & 1) == 0)
                  goto LABEL_1163;
              }
              else if (v19 == 110)
              {
                goto LABEL_1163;
              }
              ++v335;
              v334 = v336;
              if (v335 > v89)
                goto LABEL_657;
            }
LABEL_681:
            v112 = (unsigned __int16)*v18;
            if (!*v18 || (unint64_t)v334 <= *v15)
              goto LABEL_1163;
            goto LABEL_1162;
          }
          goto LABEL_653;
        }
        if (((1 << v87) & 0x73F) != 0)
        {
          v86 = a2 + 34;
          *(_QWORD *)v14 = a2 + 34;
          v88 = a2[33] - 98;
          v89 = rep_min[v88];
          *(_DWORD *)(v14 + 56) = v89;
          v90 = rep_max[v88];
          *(_DWORD *)(v14 + 60) = v90;
          v11 = rep_typ[v88];
        }
        else
        {
          v89 = __rev16(*((unsigned __int16 *)a2 + 17));
          *(_DWORD *)(v14 + 56) = v89;
          v332 = __rev16(*((unsigned __int16 *)a2 + 18));
          if (v332)
            v90 = v332;
          else
            v90 = -1;
          *(_DWORD *)(v14 + 60) = v90;
          v11 = rep_typ[a2[33] - 98];
          v86 = a2 + 38;
          *(_QWORD *)v14 = a2 + 38;
        }
        if (!v1363)
        {
          if (!v89)
            goto LABEL_657;
LABEL_653:
          v342 = 0;
          v343 = *v16;
          v344 = *(unsigned __int8 **)(v14 + 80);
          while (1)
          {
            v334 = &v344[v342];
            if ((unint64_t)&v344[v342] >= v343)
              goto LABEL_681;
            *(_QWORD *)(v14 + 80) = v334 + 1;
            if (((v85[(unint64_t)*v334 >> 3] >> (*v334 & 7)) & 1) == 0)
              goto LABEL_1163;
            if ((int)++v342 + 1 > v89)
              goto LABEL_657;
          }
        }
        if (v89)
          goto LABEL_633;
LABEL_657:
        if (v90 == v89)
          goto LABEL_2406;
        if (!(_DWORD)v11)
        {
          if (v1363)
          {
            v1313 = -56;
            v12 = 0;
          }
          else
          {
LABEL_3227:
            v12 = 0;
            v1313 = 23;
          }
          a2 = v86;
          goto LABEL_3172;
        }
        v345 = *(unsigned __int8 **)(v14 + 80);
        *(_QWORD *)(v14 + 8) = v345;
        if (!v1363)
        {
          v508 = v345;
          v478 = v90 >= v89;
          v509 = v90 - v89;
          if (v509 != 0 && v478)
          {
            v510 = *v16;
            v508 = v345;
            while ((unint64_t)v508 < v510)
            {
              if (((v85[(unint64_t)*v508 >> 3] >> (*v508 & 7)) & 1) != 0)
              {
                *(_QWORD *)(v14 + 80) = ++v508;
                if (--v509)
                  continue;
              }
              goto LABEL_1831;
            }
            v844 = (unsigned __int16)*v18;
            if (*v18)
            {
              if ((unint64_t)v508 > *v15)
              {
                *v1360 = 1;
                if (v844 > 1)
                  return 4294967294;
              }
            }
          }
LABEL_1831:
          if ((_DWORD)v11 == 2)
            goto LABEL_2406;
LABEL_2879:
          if (v508 >= v345)
          {
            v12 = 0;
            a2 = *(unsigned __int8 **)v14;
            v1313 = 24;
            goto LABEL_3172;
          }
          goto LABEL_2880;
        }
        v478 = v90 >= v89;
        v346 = v90 - v89;
        if (v346 == 0 || !v478)
          goto LABEL_1826;
        v347 = *v16;
        while ((unint64_t)v345 < v347)
        {
          v348 = *v345;
          if (v348 < 0xC0)
          {
            v350 = 1;
LABEL_678:
            if (((v85[(unint64_t)v348 >> 3] >> (v348 & 7)) & 1) == 0)
              goto LABEL_1826;
            goto LABEL_679;
          }
          v349 = v345[1] & 0x3F;
          if ((v348 & 0x20) != 0)
          {
            if ((v348 & 0x10) != 0)
            {
              if ((v348 & 8) != 0)
              {
                v351 = v345[2] & 0x3F;
                v352 = v345[3] & 0x3F;
                v353 = v345[4] & 0x3F;
                if ((v348 & 4) != 0)
                {
                  v348 = ((v348 & 1) << 30) | (v349 << 24) | (v351 << 18) | (v352 << 12) | (v353 << 6) | v345[5] & 0x3F;
                  v350 = 6;
                }
                else
                {
                  v348 = ((v348 & 3) << 24) | (v349 << 18) | (v351 << 12) | (v352 << 6) | v353;
                  v350 = 5;
                }
              }
              else
              {
                v348 = ((v348 & 7) << 18) | (v349 << 12) | ((v345[2] & 0x3F) << 6) | v345[3] & 0x3F;
                v350 = 4;
              }
            }
            else
            {
              v348 = ((v348 & 0xF) << 12) | (v349 << 6) | v345[2] & 0x3F;
              v350 = 3;
            }
          }
          else
          {
            v350 = 2;
            v348 = v345[1] & 0x3F | ((v348 & 0x1F) << 6);
          }
          if (v348 < 0x100)
            goto LABEL_678;
          if (v19 == 110)
            goto LABEL_1826;
LABEL_679:
          v345 += v350;
          *(_QWORD *)(v14 + 80) = v345;
          if (!--v346)
            goto LABEL_1826;
        }
        v843 = (unsigned __int16)*v18;
        if (!*v18 || (unint64_t)v345 <= *v15 || (*v1360 = 1, v843 <= 1))
        {
LABEL_1826:
          if ((_DWORD)v11 == 2)
            goto LABEL_2406;
LABEL_3304:
          v12 = 0;
          a2 = *(unsigned __int8 **)v14;
          v1313 = -55;
          goto LABEL_3172;
        }
        return 4294967294;
      case 0x70u:
        *(_QWORD *)(v14 + 16) = a2 + 3;
        v234 = &a2[__rev16(*(unsigned __int16 *)(a2 + 1))];
        *(_QWORD *)v14 = v234;
        v235 = *v234 - 98;
        if (v235 > 0xB)
        {
          *(_QWORD *)(v14 + 56) = 0x100000001;
        }
        else
        {
          if (((1 << v235) & 0x73F) != 0)
          {
            *(_QWORD *)v14 = v234 + 1;
            v236 = *v234 - 98;
            v237 = rep_min[v236];
            *(_DWORD *)(v14 + 56) = v237;
            v238 = rep_max[v236];
            *(_DWORD *)(v14 + 60) = v238;
            v11 = rep_typ[v236];
          }
          else
          {
            v237 = __rev16(*(unsigned __int16 *)(v234 + 1));
            *(_DWORD *)(v14 + 56) = v237;
            v238 = __rev16(*(unsigned __int16 *)(v234 + 3));
            if (!v238)
              v238 = -1;
            *(_DWORD *)(v14 + 60) = v238;
            v11 = rep_typ[*v234 - 98];
            *(_QWORD *)v14 = v234 + 5;
          }
          if (!v237)
          {
            v525 = 0;
            goto LABEL_1051;
          }
        }
        v517 = 1;
        v518 = v11;
        do
        {
          v150 = *(unsigned __int8 **)(v14 + 80);
          if ((unint64_t)v150 >= *v16)
            goto LABEL_1046;
          *(_QWORD *)(v14 + 80) = v150 + 1;
          v519 = *v150;
          if (v1363 && v519 >= 0xC0)
          {
            if ((v519 & 0x20) != 0)
            {
              v520 = v150[1] & 0x3F;
              if ((v519 & 0x10) != 0)
              {
                if ((v519 & 8) != 0)
                {
                  v522 = v150[2] & 0x3F;
                  v523 = v150[3] & 0x3F;
                  v524 = v150[4] & 0x3F;
                  if ((v519 & 4) != 0)
                  {
                    v519 = ((v519 & 1) << 30) | (v520 << 24) | (v522 << 18) | (v523 << 12) | (v524 << 6) | v150[5] & 0x3F;
                    v521 = v150 + 6;
                  }
                  else
                  {
                    v519 = ((v519 & 3) << 24) | (v520 << 18) | (v522 << 12) | (v523 << 6) | v524;
                    v521 = v150 + 5;
                  }
                }
                else
                {
                  v519 = ((v519 & 7) << 18) | (v520 << 12) | ((v150[2] & 0x3F) << 6) | v150[3] & 0x3F;
                  v521 = v150 + 4;
                }
              }
              else
              {
                v519 = ((v519 & 0xF) << 12) | (v520 << 6) | v150[2] & 0x3F;
                v521 = v150 + 3;
              }
              *(_QWORD *)(v14 + 80) = v521;
            }
            else
            {
              *(_QWORD *)(v14 + 80) = v150 + 2;
              v519 = v150[1] & 0x3F | ((v519 & 0x1F) << 6);
            }
          }
          v21 = _pcre2_xclass_8(v519, *(_BYTE **)(v14 + 16));
          if (!(_DWORD)v21)
          {
            v11 = v518;
            goto LABEL_2412;
          }
          ++v517;
          v525 = *(_DWORD *)(v14 + 56);
          v11 = v518;
        }
        while (v517 <= v525);
        v238 = *(_DWORD *)(v14 + 60);
LABEL_1051:
        if (v525 == v238)
          goto LABEL_2406;
        if ((_DWORD)v11)
        {
          v526 = *(unsigned __int8 **)(v14 + 80);
          *(_QWORD *)(v14 + 8) = v526;
          if (v525 < *(_DWORD *)(v14 + 60))
          {
            v527 = v11;
            while ((unint64_t)v526 < *v16)
            {
              v528 = *v526;
              v529 = 1;
              if (v1363 && v528 >= 0xC0)
              {
                v530 = v526[1] & 0x3F;
                if ((v528 & 0x20) != 0)
                {
                  if ((v528 & 0x10) != 0)
                  {
                    if ((v528 & 8) != 0)
                    {
                      v531 = v526[2] & 0x3F;
                      v532 = v526[3] & 0x3F;
                      v533 = v526[4] & 0x3F;
                      if ((v528 & 4) != 0)
                      {
                        v528 = ((v528 & 1) << 30) | (v530 << 24) | (v531 << 18) | (v532 << 12) | (v533 << 6) | v526[5] & 0x3F;
                        v529 = 6;
                      }
                      else
                      {
                        v528 = ((v528 & 3) << 24) | (v530 << 18) | (v531 << 12) | (v532 << 6) | v533;
                        v529 = 5;
                      }
                    }
                    else
                    {
                      v528 = ((v528 & 7) << 18) | (v530 << 12) | ((v526[2] & 0x3F) << 6) | v526[3] & 0x3F;
                      v529 = 4;
                    }
                  }
                  else
                  {
                    v528 = ((v528 & 0xF) << 12) | (v530 << 6) | v526[2] & 0x3F;
                    v529 = 3;
                  }
                }
                else
                {
                  v529 = 2;
                  v528 = v526[1] & 0x3F | ((v528 & 0x1F) << 6);
                }
              }
              v534 = _pcre2_xclass_8(v528, *(_BYTE **)(v14 + 16));
              v11 = v527;
              if (v534)
              {
                v526 = (unsigned __int8 *)(*(_QWORD *)(v14 + 80) + v529);
                *(_QWORD *)(v14 + 80) = v526;
                if (++v525 < *(_DWORD *)(v14 + 60))
                  continue;
              }
              goto LABEL_1836;
            }
            v845 = (unsigned __int16)*v18;
            if (*v18)
            {
              if ((unint64_t)v526 > *v15)
              {
                *v1360 = 1;
                if (v845 > 1)
                  return 4294967294;
              }
            }
          }
LABEL_1836:
          if ((_DWORD)v11 == 2)
            goto LABEL_2406;
LABEL_3186:
          v12 = 0;
          a2 = *(unsigned __int8 **)v14;
          v1313 = 101;
          goto LABEL_3172;
        }
LABEL_3236:
        v12 = 0;
        a2 = *(unsigned __int8 **)v14;
        v1313 = 100;
        goto LABEL_3172;
      case 0x71u:
      case 0x72u:
        v91 = v19 == 114;
        *(_DWORD *)(v14 + 64) = v91;
        *(_QWORD *)(v14 + 40) = ((a2[1] << 9) | (2 * a2[2])) - 2;
        v92 = a2 + 3;
        *(_QWORD *)v14 = a2 + 3;
        goto LABEL_131;
      case 0x73u:
      case 0x74u:
        v91 = v19 == 116;
        *(_DWORD *)(v14 + 64) = v91;
        v93 = __rev16(*(unsigned __int16 *)(a2 + 3));
        v94 = *(_QWORD *)(v7 + 136);
        v95 = a2[1];
        v96 = a2[2];
        v97 = *(unsigned __int16 *)(v7 + 134);
        v92 = a2 + 5;
        *(_QWORD *)v14 = a2 + 5;
        if (!v93)
          goto LABEL_131;
        v98 = v96 | (v95 << 8);
        v99 = *(unsigned __int8 **)(v14 + 120);
        v100 = (unsigned __int8 *)(v94 + v98 * (unint64_t)v97 + 1);
        while (2)
        {
          v101 = (unsigned __int8 *)(((*(v100 - 1) << 9) | (2 * *v100)) - 2);
          *(_QWORD *)(v14 + 40) = v101;
          if (v101 >= v99)
          {
            if (v93 < 2)
              goto LABEL_131;
          }
          else
          {
            v102 = *(_QWORD *)(v14 + 8 * (_QWORD)v101 + 128) == -1 && v93 > 1;
            if (!v102)
            {
LABEL_131:
              v103 = *v92;
              if ((v103 - 98) >= 6)
              {
                if ((v103 - 104) >= 2)
                {
                  v107 = v8;
                  v354 = v11;
                  matched = match_ref(*(_QWORD *)(v14 + 40), v91, v14, v7, &v1366);
                  if (!matched)
                  {
                    *(_QWORD *)(v14 + 80) += v1366;
                    v11 = v354;
LABEL_1107:
                    v8 = v107;
                    goto LABEL_2406;
                  }
                  v11 = v354;
                  if (matched >= 1)
                    *(_QWORD *)(v14 + 80) = *v16;
                  v356 = (unsigned __int16)*v18;
                  v8 = v107;
                  if (!*v18)
                    goto LABEL_2880;
                  v357 = *(unsigned __int8 **)(v14 + 80);
                  if ((unint64_t)v357 < *v16 || (unint64_t)v357 <= *v15)
                    goto LABEL_2880;
                  goto LABEL_1943;
                }
                v105 = __rev16(*(unsigned __int16 *)(v92 + 1));
                *(_DWORD *)(v14 + 56) = v105;
                v106 = __rev16(*(unsigned __int16 *)(v92 + 3));
                *(_DWORD *)(v14 + 60) = v106;
                v120 = *v92;
                v119 = v92 + 5;
                v11 = rep_typ[v120 - 98];
                if (!v106)
                  v106 = -1;
                *(_DWORD *)(v14 + 60) = v106;
                *(_QWORD *)v14 = v119;
              }
              else
              {
                *(_QWORD *)v14 = v92 + 1;
                v104 = *v92 - 98;
                v105 = rep_min[v104];
                *(_DWORD *)(v14 + 56) = v105;
                v106 = rep_max[v104];
                *(_DWORD *)(v14 + 60) = v106;
                v11 = rep_typ[v104];
              }
              v121 = *(_QWORD *)(v14 + 40);
              if (v121 >= *(_QWORD *)(v14 + 120)
                || (v122 = (unsigned __int8 **)(v14 + 8 * v121), v123 = v122[16], v123 == (unsigned __int8 *)-1))
              {
                if (!v105 || (*(_BYTE *)(v7 + 233) & 2) != 0)
                  goto LABEL_2406;
              }
              else
              {
                if (v123 == v122[17])
                  goto LABEL_2406;
                if (!v105)
                {
                  v124 = 0;
LABEL_167:
                  if (v124 == v106)
                    goto LABEL_2406;
                  if (!(_DWORD)v11)
                  {
LABEL_3202:
                    v12 = 0;
                    v1364 = 0;
                    a2 = *(unsigned __int8 **)v14;
                    v1313 = 20;
                    goto LABEL_3172;
                  }
                  *(_QWORD *)(v14 + 8) = *(_QWORD *)(v14 + 80);
                  *(_QWORD *)(v14 + 24) = *(_QWORD *)(v14 + 8 * *(_QWORD *)(v14 + 40) + 136)
                                        - *(_QWORD *)(v14 + 8 * *(_QWORD *)(v14 + 40) + 128);
                  if (v124 < v106)
                  {
                    v131 = v16;
                    v132 = v8;
                    v133 = v11;
                    v134 = 1;
                    while (1)
                    {
                      v1365 = 0;
                      v135 = match_ref(*(_QWORD *)(v14 + 40), *(_DWORD *)(v14 + 64), v14, v7, &v1365);
                      if (v135)
                        break;
                      if (v1365 != *(unsigned __int8 **)(v14 + 24))
                        v134 = 0;
                      *(_QWORD *)(v14 + 80) += v1365;
                      if (++v124 >= *(_DWORD *)(v14 + 60))
                        goto LABEL_1173;
                    }
                    if (v135 >= 1)
                    {
                      v579 = (unsigned __int16)*v1362;
                      if (*v1362)
                      {
                        if (*v131 > *v15)
                        {
                          *v1360 = 1;
                          if (v579 >= 2)
                            return 4294967294;
                        }
                      }
                    }
LABEL_1173:
                    v11 = v133;
                    v8 = v132;
                    v16 = v131;
                    v18 = v1362;
                    if (!v134)
                    {
                      *(_DWORD *)(v14 + 60) = v124;
LABEL_3309:
                      v12 = 0;
                      a2 = *(unsigned __int8 **)v14;
                      v1313 = 22;
                      goto LABEL_3172;
                    }
                  }
                  v580 = *(unsigned __int8 **)(v14 + 80);
LABEL_2877:
                  if ((unint64_t)v580 >= *(_QWORD *)(v14 + 8))
                  {
                    v12 = 0;
                    a2 = *(unsigned __int8 **)v14;
                    v1313 = 21;
                    goto LABEL_3172;
                  }
LABEL_2880:
                  v21 = 0;
                  goto LABEL_2412;
                }
              }
              v125 = v18;
              v126 = v16;
              v127 = v8;
              v128 = v11;
              v129 = 1;
              do
              {
                v1365 = 0;
                v130 = match_ref(*(_QWORD *)(v14 + 40), *(_DWORD *)(v14 + 64), v14, v7, &v1365);
                if (v130)
                {
                  if (v130 >= 1)
                    *(_QWORD *)(v14 + 80) = *v126;
                  v323 = (unsigned __int16)*v125;
                  v11 = v128;
                  if (!*v125
                    || (v324 = *(unsigned __int8 **)(v14 + 80), (unint64_t)v324 < *v126)
                    || (unint64_t)v324 <= *v15
                    || (*v1360 = 1, v323 < 2))
                  {
                    v21 = 0;
                    v8 = v127;
                    v16 = v126;
                    v18 = v125;
                    goto LABEL_2412;
                  }
                  return 4294967294;
                }
                *(_QWORD *)(v14 + 80) += v1365;
                ++v129;
                v124 = *(_DWORD *)(v14 + 56);
              }
              while (v129 <= v124);
              v106 = *(_DWORD *)(v14 + 60);
              v11 = v128;
              v8 = v127;
              v16 = v126;
              v18 = v125;
              goto LABEL_167;
            }
          }
          v100 += v97;
          --v93;
          continue;
        }
      case 0x75u:
        v1315 = __rev16(*(unsigned __int16 *)(a2 + 1));
        v1049 = (unsigned __int8 *)(*(_QWORD *)(v7 + 144) + v1315);
        if ((_DWORD)v1315)
          LODWORD(v1315) = __rev16(*(unsigned __int16 *)(v1049 + 3));
        v12 = v1315 | 0x40000;
        if (*(_DWORD *)(v14 + 104) == -1)
          goto LABEL_3244;
        v1316 = (unsigned __int8 **)v14;
        do
        {
          v1317 = v1316[14];
          if (v1317 == (unsigned __int8 *)-1)
            goto LABEL_3244;
          v1318 = &v1317[*(_QWORD *)(v7 + 32)];
          v1316 = (unsigned __int8 **)&v1318[v1356];
        }
        while (*((_DWORD *)v1318 + 13) != v12);
        if (*(unsigned __int8 **)(v14 + 80) == v1316[10])
          return 4294967244;
LABEL_3244:
        *(_QWORD *)(v14 + 8) = v1049;
        *(_DWORD *)(v14 + 56) = v12;
        v1309 = *v1049;
LABEL_3245:
        a2 = &v1049[_pcre2_OP_lengths_8[v1309]];
        v1313 = 11;
        goto LABEL_3172;
      case 0x76u:
      case 0x77u:
        v107 = v8;
        v108 = v11;
        v21 = do_callout_0(v14, (_QWORD *)v7, (uint64_t *)&v1366);
        if ((int)v21 > 0)
          goto LABEL_140;
        v11 = v108;
        if ((v21 & 0x80000000) != 0)
          goto LABEL_142;
        *(_QWORD *)v14 += v1366;
        goto LABEL_1107;
      case 0x78u:
        do
        {
          a2 += __rev16(*(unsigned __int16 *)(a2 + 1));
          *(_QWORD *)v14 = a2;
        }
        while (*a2 == 120);
        goto LABEL_2406;
      case 0x79u:
      case 0x7Au:
      case 0x7Bu:
      case 0x7Cu:
        v36 = &a2[-__rev16(*(unsigned __int16 *)(a2 + 1))];
        v37 = *v36;
        if ((v37 | 4) == 0x87)
        {
          v38 = 0;
        }
        else
        {
          v116 = (unsigned __int8 *)(*(_QWORD *)(v7 + 32) + *(_QWORD *)(v14 + 112));
          v38 = (char *)&v116[v1356];
          *(_QWORD *)(v14 + 112) = *(_QWORD *)&v116[v1356 + 112];
          v1358 = v116;
          if (*((unsigned __int16 *)v116 + 27) << 16 == 196608)
          {
            v117 = v8;
            v118 = v11;
            cstdlib_memcpy(v38 + 128, (const void *)(v14 + 128), 8 * *(_QWORD *)(v14 + 120));
            v11 = v118;
            v8 = v117;
            *((_QWORD *)v38 + 15) = *(_QWORD *)(v14 + 120);
            *(_QWORD *)(v14 + 32) = v14 - (_QWORD)v38;
            v21 = 1;
            goto LABEL_2412;
          }
          v37 = *v36;
        }
        v21 = 1;
        switch(v37)
        {
          case 126:
          case 128:
            v311 = *(unsigned __int8 **)(v14 + 80);
            if ((unint64_t)v311 > *(_QWORD *)(v7 + 184))
              *(_QWORD *)(v7 + 184) = v311;
            *(_QWORD *)(v14 + 80) = *((_QWORD *)v38 + 10);
            goto LABEL_568;
          case 127:
          case 129:
            goto LABEL_2412;
          case 130:
LABEL_568:
            *(_QWORD *)(v14 + 32) = v14 - (_QWORD)v38;
            v312 = *(_QWORD *)v38 + __rev16(*(unsigned __int16 *)(*(_QWORD *)v38 + 1));
            if (*(_BYTE *)v312 == 120)
            {
              do
              {
                *(_QWORD *)v38 = v312;
                v312 += __rev16(*(unsigned __int16 *)(v312 + 1));
              }
              while (*(_BYTE *)v312 == 120);
              a2 = *(unsigned __int8 **)v14;
            }
            goto LABEL_573;
          case 133:
          case 134:
          case 138:
          case 139:
            v39 = *(unsigned __int16 *)(v36 + 3);
            if (*(_DWORD *)(v14 + 104) == bswap32(v39) >> 16)
            {
              v40 = v8;
              v41 = v11;
              cstdlib_memcpy((void *)(v14 + 128), &v1358[v1356 + 128], 8 * *(_QWORD *)&v1358[v1356 + 120]);
              v11 = v41;
              v8 = v40;
              *(_QWORD *)(v14 + 120) = *(_QWORD *)&v1358[v1356 + 120];
              *(_QWORD *)(v14 + 104) = *(_QWORD *)&v1358[v1356 + 104];
              v42 = *(unsigned __int8 **)&v1358[v1356];
LABEL_2986:
              v247 = (uint64_t)(v42 + 3);
              goto LABEL_2405;
            }
            v313 = __rev16(v39);
            v314 = 2 * v313 - 2;
            *(_DWORD *)(v14 + 108) = v313;
            v315 = *(_QWORD *)(v7 + 152);
            v316 = (unsigned __int8 *)(*((_QWORD *)v38 + 10) - v315);
            v317 = (unsigned __int8 **)(v14 + 8 * v314);
            v318 = (unsigned __int8 *)(*(_QWORD *)(v14 + 80) - v315);
            v317[16] = v316;
            v317[17] = v318;
            if (*(_QWORD *)(v14 + 120) <= v314)
              *(_QWORD *)(v14 + 120) = v314 + 2;
LABEL_573:
            if (*a2 == 124)
            {
              v319 = v38 + 80;
              v320 = v8;
              v321 = v11;
              cstdlib_memcpy(v319, (const void *)(v14 + 80), __n);
              v11 = v321;
              v8 = v320;
              v21 = 4294966298;
              goto LABEL_2412;
            }
            if (v19 != 121 && (!v38 || *(_QWORD *)(v14 + 80) != *((_QWORD *)v38 + 10)))
            {
              v12 = 0;
              v1321 = v19 == 123;
              if (v19 == 123)
                v1313 = 6;
              else
                v1313 = 7;
              if (v1321)
                a2 += 3;
              else
                a2 = v36;
              goto LABEL_3172;
            }
            break;
          default:
            goto LABEL_573;
        }
        goto LABEL_2411;
      case 0x7Du:
        v239 = __rev16(*(unsigned __int16 *)(a2 + 1));
        if (v1363)
        {
          if ((_DWORD)v239)
          {
            v240 = *(_QWORD *)(v7 + 152);
            v241 = *(unsigned __int8 **)(v14 + 80);
            while ((unint64_t)v241 > v240)
            {
              LODWORD(v239) = v239 - 1;
              v242 = v241 - 1;
              do
              {
                *(_QWORD *)(v14 + 80) = v242;
                v243 = *v242--;
              }
              while ((v243 & 0xC0) == 0x80);
              v241 = v242 + 1;
              if (!(_DWORD)v239)
                goto LABEL_1085;
            }
            goto LABEL_2880;
          }
          v241 = *(unsigned __int8 **)(v14 + 80);
        }
        else
        {
          v329 = *(unsigned __int8 **)(v14 + 80);
          if ((uint64_t)&v329[-*(_QWORD *)(v7 + 152)] < v239)
            goto LABEL_2880;
          v241 = &v329[-v239];
          *(_QWORD *)(v14 + 80) = v241;
        }
LABEL_1085:
        if ((unint64_t)v241 < *v15)
          *v15 = (unint64_t)v241;
        goto LABEL_2411;
      case 0x7Eu:
      case 0x80u:
        v12 = v19 | 0x20000;
        *(_DWORD *)(v14 + 56) = v19 | 0x20000;
        v1306 = *a2;
        goto LABEL_3181;
      case 0x7Fu:
      case 0x81u:
        v12 = v19 | 0x20000;
        *(_DWORD *)(v14 + 56) = v19 | 0x20000;
        v1335 = *a2;
        goto LABEL_3207;
      case 0x82u:
      case 0x88u:
        v12 = v19 | 0x20000;
        goto LABEL_3211;
      case 0x83u:
        if (*(_DWORD *)(v7 + 80) || !*(_DWORD *)(v14 + 48))
        {
          v12 = 0;
          *(_DWORD *)(v14 + 56) = 0;
          goto LABEL_3214;
        }
LABEL_2873:
        v1192 = __rev16(*(unsigned __int16 *)(a2 + 1));
        *(_QWORD *)(v14 + 8) = &a2[v1192];
        LODWORD(v1192) = a2[v1192];
        a2 += _pcre2_OP_lengths_8[*a2];
        if ((_DWORD)v1192 != 120)
        {
          *(_QWORD *)v14 = a2;
          goto LABEL_2406;
        }
        v12 = 0;
        v1313 = 1;
        goto LABEL_3172;
      case 0x84u:
      case 0x89u:
        *(_DWORD *)(v14 + 64) = 0;
        v1312 = 0x20000;
        goto LABEL_3254;
      case 0x85u:
      case 0x8Au:
        v12 = (bswap32(*(unsigned __int16 *)(a2 + 3)) >> 16) | 0x10000;
LABEL_3211:
        *(_DWORD *)(v14 + 56) = v12;
        goto LABEL_3214;
      case 0x86u:
      case 0x8Bu:
        *(_DWORD *)(v14 + 64) = 0;
        goto LABEL_3253;
      case 0x87u:
      case 0x8Cu:
        v109 = __rev16(*(unsigned __int16 *)(a2 + 1));
        *(_QWORD *)(v14 + 24) = v109;
        v107 = v8;
        if (a2[v109] != 120)
        {
          v109 -= 3;
          *(_QWORD *)(v14 + 24) = v109;
        }
        v108 = v11;
        v110 = a2 + 3;
        *(_QWORD *)v14 = a2 + 3;
        v111 = a2[3];
        if ((v111 & 0xFE) != 0x76)
          goto LABEL_935;
        v21 = do_callout_0(v14, (_QWORD *)v7, (uint64_t *)&v1366);
        if ((int)v21 <= 0)
        {
          if ((v21 & 0x80000000) == 0)
          {
            v480 = v1366;
            v110 = &v1366[*(_QWORD *)v14];
            *(_QWORD *)v14 = v110;
            v109 = *(_QWORD *)(v14 + 24) - (_QWORD)v480;
            *(_QWORD *)(v14 + 24) = v109;
            v111 = *v110;
LABEL_935:
            if (v111 <= 158)
            {
              v11 = v108;
              v8 = v107;
              switch(v111)
              {
                case 141:
                  v481 = ((v110[1] << 9) | (2 * v110[2])) - 2;
                  if (v481 >= *(_QWORD *)(v14 + 120) || *(_QWORD *)(v14 + 8 * v481 + 128) == -1)
                    goto LABEL_2407;
                  v111 = 0x8Du;
                  goto LABEL_2872;
                case 142:
                  if (!(v110[4] | (v110[3] << 8)))
                    goto LABEL_2407;
                  v537 = (v110[3] << 8) + v110[4] + 1;
                  v538 = (unsigned __int8 *)(*(_QWORD *)(v7 + 136)
                                           + *(unsigned __int16 *)(v7 + 134)
                                           * (unint64_t)__rev16(*(unsigned __int16 *)(v110 + 1))
                                           + 1);
                  while (1)
                  {
                    v539 = ((*(v538 - 1) << 9) | (2 * *v538)) - 2;
                    if (v539 < *(_QWORD *)(v14 + 120) && *(_QWORD *)(v14 + 8 * v539 + 128) != -1)
                      break;
                    v538 += *(unsigned __int16 *)(v7 + 134);
                    if (--v537 <= 1)
                      goto LABEL_2407;
                  }
                  v111 = 0x8Eu;
                  goto LABEL_2872;
                case 143:
                  v540 = *(_DWORD *)(v14 + 104);
                  if (v540 != -1)
                  {
                    v541 = __rev16(*(unsigned __int16 *)(v110 + 1));
                    v111 = 0x8Fu;
                    if (v541 == 0xFFFF || v541 == v540)
                      goto LABEL_2872;
                  }
                  goto LABEL_2407;
                case 144:
                  v542 = *(_DWORD *)(v14 + 104);
                  if (v542 == -1 || !(v110[4] | (v110[3] << 8)))
                    goto LABEL_2407;
                  v543 = (v110[3] << 8) + v110[4] + 1;
                  v544 = *(_QWORD *)(v7 + 136)
                       + *(unsigned __int16 *)(v7 + 134) * (unint64_t)__rev16(*(unsigned __int16 *)(v110 + 1))
                       + 1;
                  break;
                case 145:
                  goto LABEL_2407;
                case 146:
                  goto LABEL_2872;
                default:
                  v8 = v107;
                  if (v111 != 126 && v111 != 128)
                    goto LABEL_3310;
                  v1327 = 1;
                  goto LABEL_3311;
              }
              while (v542 != bswap32(*(unsigned __int16 *)(v544 - 1)) >> 16)
              {
                v544 += *(unsigned __int16 *)(v7 + 134);
                if (--v543 <= 1)
                  goto LABEL_2407;
              }
              v111 = 0x90u;
              goto LABEL_2872;
            }
            v11 = v108;
            v8 = v107;
            if (v111 == 159)
              goto LABEL_2407;
LABEL_3310:
            v1327 = 0;
LABEL_3311:
            *(_DWORD *)(v14 + 56) = v1327;
            *(_QWORD *)(v14 + 8) = v110;
            v1322 = *v110;
            v1323 = v1322;
LABEL_3312:
            v12 = v1322 | 0x30000;
            a2 = &v110[_pcre2_OP_lengths_8[v1323]];
            v1313 = 5;
            goto LABEL_3172;
          }
        }
        else
        {
LABEL_140:
          v21 = 0;
        }
LABEL_141:
        v11 = v108;
LABEL_142:
        v8 = v107;
LABEL_2412:
        while (2)
        {
          v20 = v21;
          if (!*(_DWORD *)(v14 + 48))
            return v20;
          v14 -= *(_QWORD *)(v14 + 32);
          *(_DWORD *)(*(_QWORD *)(v7 + 256) + 104) |= 2u;
          v1042 = *(unsigned __int8 *)(v14 + 72);
          v20 = 4294967252;
          if (v1042 <= 0x63)
          {
            switch(*(_BYTE *)(v14 + 72))
            {
              case 1:
                if ((_DWORD)v21)
                  continue;
                a2 = *(unsigned __int8 **)(v14 + 8);
                *(_QWORD *)v14 = a2;
                goto LABEL_2873;
              case 2:
                if ((_DWORD)v21 != -993)
                {
                  if ((_DWORD)v21)
                    continue;
                  v1115 = *(unsigned __int8 **)v14;
                  v1116 = __rev16(*(unsigned __int16 *)(*(_QWORD *)v14 + 1));
LABEL_2844:
                  a2 = &v1115[v1116];
                  *(_QWORD *)v14 = &v1115[v1116];
                  if (v1115[v1116] != 120)
                    goto LABEL_2863;
                  v12 = *(_DWORD *)(v14 + 56);
LABEL_3214:
                  a2 += _pcre2_OP_lengths_8[*a2];
                  v1313 = 2;
                  goto LABEL_3172;
                }
                v1115 = *(unsigned __int8 **)v14;
                v1116 = __rev16(*(unsigned __int16 *)(*(_QWORD *)v14 + 1));
                v1117 = (unsigned __int8 *)(*(_QWORD *)v14 + v1116);
                if (*(_QWORD *)(v7 + 208) < (unint64_t)v1117 && (*v1115 == 120 || *v1117 == 120))
                  goto LABEL_2844;
                goto LABEL_2638;
              case 3:
                if ((_DWORD)v21 != -993 && (_DWORD)v21)
                {
                  if ((_DWORD)v21 != -999)
                    continue;
                  v1234 = v8;
                  v1235 = v11;
                  cstdlib_memcpy((void *)(v14 + 128), v1354 + 16, 8 * v1354[15]);
                  *(_QWORD *)(v14 + 120) = v1354[15];
                  *(_QWORD *)(v14 + 96) = v1354[12];
                  v1236 = *(unsigned __int8 **)v14;
                  do
                  {
                    v1236 += __rev16(*(unsigned __int16 *)(v1236 + 1));
                    *(_QWORD *)v14 = v1236;
                  }
                  while (*v1236 == 120);
                  *(_QWORD *)v14 = v1236 + 3;
                  v11 = v1235;
                  v8 = v1234;
                  goto LABEL_2406;
                }
                v1157 = *(unsigned __int8 **)v14;
                v1158 = __rev16(*(unsigned __int16 *)(*(_QWORD *)v14 + 1));
                a2 = (unsigned __int8 *)(*(_QWORD *)v14 + v1158);
                *(_QWORD *)v14 = a2;
                if (v1157[v1158] != 120)
                  goto LABEL_2863;
                v12 = *(_DWORD *)(v14 + 56);
                v1306 = 0x78u;
LABEL_3181:
                a2 += _pcre2_OP_lengths_8[v1306];
                v1313 = 3;
                goto LABEL_3172;
              case 4:
                if ((int)v21 > -994)
                {
                  if ((_DWORD)v21 != 1)
                  {
                    if ((_DWORD)v21 != -993 && (_DWORD)v21)
                      continue;
                    a2 = (unsigned __int8 *)(*(_QWORD *)v14 + __rev16(*(unsigned __int16 *)(*(_QWORD *)v14 + 1)));
                    *(_QWORD *)v14 = a2;
                    if (*a2 != 120)
                      goto LABEL_2411;
                    v12 = *(_DWORD *)(v14 + 56);
                    v1335 = 0x78u;
LABEL_3207:
                    a2 += _pcre2_OP_lengths_8[v1335];
                    v1313 = 4;
                    goto LABEL_3172;
                  }
                }
                else if ((_DWORD)v21 != -999)
                {
                  if ((v21 + 997) >= 3)
                    continue;
                  a2 = *(unsigned __int8 **)v14;
                  do
                  {
                    a2 += __rev16(*(unsigned __int16 *)(a2 + 1));
                    *(_QWORD *)v14 = a2;
                  }
                  while (*a2 == 120);
LABEL_2411:
                  v247 = (uint64_t)(a2 + 3);
                  goto LABEL_2405;
                }
                goto LABEL_2712;
              case 5:
                if ((int)v21 <= -994)
                {
                  if ((v21 + 997) >= 3)
                  {
                    if ((_DWORD)v21 != -999)
                      continue;
                    v1213 = v8;
                    v1214 = v11;
                    cstdlib_memcpy((void *)(v14 + 128), v1354 + 16, 8 * v1354[15]);
                    v11 = v1214;
                    v8 = v1213;
                    *(_QWORD *)(v14 + 120) = v1354[15];
                    goto LABEL_2933;
                  }
                  goto LABEL_2869;
                }
                if ((_DWORD)v21 != -993 && (_DWORD)v21)
                {
                  if ((_DWORD)v21 != 1)
                    continue;
LABEL_2933:
                  if (!*(_DWORD *)(v14 + 56))
                    goto LABEL_2934;
LABEL_2870:
                  v110 = *(unsigned __int8 **)v14;
                  do
                  {
                    v110 += __rev16(*(unsigned __int16 *)(v110 + 1));
                    *(_QWORD *)v14 = v110;
                    v111 = *v110;
                  }
                  while (v111 == 120);
LABEL_2872:
                  v109 = _pcre2_OP_lengths_8[v111];
                  goto LABEL_2407;
                }
                v1190 = *(unsigned __int8 **)(v14 + 8);
                v1191 = __rev16(*(unsigned __int16 *)(v1190 + 1));
                v110 = &v1190[v1191];
                *(_QWORD *)(v14 + 8) = &v1190[v1191];
                if (v1190[v1191] != 120)
                {
LABEL_2869:
                  if (*(_DWORD *)(v14 + 56))
                  {
LABEL_2934:
                    v109 = *(_QWORD *)(v14 + 24);
                    v110 = *(unsigned __int8 **)v14;
LABEL_2407:
                    a2 = &v110[v109];
                    *(_QWORD *)v14 = &v110[v109];
                    if (*(unsigned __int8 *)(v14 + 73) == 140)
                    {
                      v12 = 131212;
                      v1313 = 35;
                      goto LABEL_3172;
                    }
                    goto LABEL_2406;
                  }
                  goto LABEL_2870;
                }
                v1322 = **(unsigned __int8 **)v14;
                v1323 = 0x78u;
                goto LABEL_3312;
              case 6:
                if ((_DWORD)v21)
                  continue;
                v247 = *(_QWORD *)v14 - __rev16(*(unsigned __int16 *)(*(_QWORD *)v14 + 1));
                goto LABEL_2405;
              case 7:
                if ((_DWORD)v21)
                  continue;
                a2 = *(unsigned __int8 **)v14;
                goto LABEL_2411;
              case 8:
                if ((_DWORD)v21 == -993)
                {
                  v1118 = *(unsigned __int8 **)v14;
                  v1119 = __rev16(*(unsigned __int16 *)(*(_QWORD *)v14 + 1));
                  v1120 = (unsigned __int8 *)(*(_QWORD *)v14 + v1119);
                  if (*(_QWORD *)(v7 + 208) >= (unint64_t)v1120 || *v1118 != 120 && *v1120 != 120)
                  {
LABEL_2638:
                    v21 = 4294966303;
                    continue;
                  }
                }
                else
                {
                  if ((_DWORD)v21)
                  {
                    if ((_DWORD)v21 != -998)
                      continue;
                    *(_DWORD *)(v14 + 60) = 1;
                    if (*(_QWORD *)(v14 + 80) == *(_QWORD *)(v14 + 8))
                    {
                      v42 = *(unsigned __int8 **)v14;
                      do
                      {
                        v42 += __rev16(*(unsigned __int16 *)(v42 + 1));
                        *(_QWORD *)v14 = v42;
                      }
                      while (*v42 == 120);
                      goto LABEL_2986;
                    }
                    v1188 = *(unsigned __int8 **)(v14 + 16);
                    *(_QWORD *)v14 = v1188;
LABEL_3256:
                    *(_QWORD *)(v14 + 8) = *(_QWORD *)(v14 + 80);
                    v12 = *(_DWORD *)(v14 + 56);
                    a2 = &v1188[_pcre2_OP_lengths_8[*v1188]];
                    v1313 = 8;
                    goto LABEL_3172;
                  }
                  v1118 = *(unsigned __int8 **)v14;
                  v1119 = __rev16(*(unsigned __int16 *)(*(_QWORD *)v14 + 1));
                }
                v1188 = &v1118[v1119];
                *(_QWORD *)v14 = &v1118[v1119];
                if (v1118[v1119] != 120)
                {
                  if (!*(_DWORD *)(v14 + 60) && !*(_DWORD *)(v14 + 64))
                    goto LABEL_2863;
                  v42 = &v1118[v1119];
                  goto LABEL_2986;
                }
                goto LABEL_3256;
              case 9:
                if ((_DWORD)v21)
                  continue;
                v42 = *(unsigned __int8 **)(v14 + 8);
                do
                {
                  v42 += __rev16(*(unsigned __int16 *)(v42 + 1));
                  *(_QWORD *)(v14 + 8) = v42;
                }
                while (*v42 == 120);
                goto LABEL_2986;
              case 0xA:
                if (!(_DWORD)v21)
                  goto LABEL_1159;
                continue;
              case 0xB:
                v1048 = *(unsigned __int8 **)(v14 + 8);
                v1049 = &v1048[__rev16(*(unsigned __int16 *)(v1048 + 1))];
                if ((v21 + 997) >= 5)
                {
                  if ((_DWORD)v21)
                    continue;
                }
                else
                {
                  if (*(_DWORD *)(v7 + 224) != (*(_DWORD *)(v14 + 56) ^ 0x40000))
                    continue;
                  if ((_DWORD)v21 != -993
                    || *(_QWORD *)(v7 + 208) >= (unint64_t)v1049
                    || *v1048 != 120 && *v1049 != 120)
                  {
                    goto LABEL_2863;
                  }
                }
                *(_QWORD *)(v14 + 8) = v1049;
                if (*v1049 != 120)
                  goto LABEL_2863;
                v12 = *(_DWORD *)(v14 + 56);
                v1309 = 0x78u;
                goto LABEL_3245;
              case 0xC:
                if ((_DWORD)v21 != -994)
                  continue;
                v1050 = v8;
                v1051 = v11;
                if (_pcre2_strcmp_8((unsigned __int8 *)(*(_QWORD *)v14 + 2), *(unsigned __int8 **)(v7 + 216)))
                {
                  v21 = 4294966302;
                  goto LABEL_2468;
                }
                *(_QWORD *)(v7 + 216) = *(_QWORD *)(v14 + 80);
                v21 = 4294966301;
                goto LABEL_2716;
              case 0xD:
              case 0x24:
                if (!(_DWORD)v21)
                {
                  *(_DWORD *)(v7 + 224) = *(_DWORD *)(v14 + 104);
                  v21 = 4294966299;
                }
                continue;
              case 0xE:
              case 0xF:
                if (!(_DWORD)v21)
                {
                  *(_DWORD *)(v7 + 224) = *(_DWORD *)(v14 + 104);
                  v21 = 4294966300;
                }
                continue;
              case 0x10:
                if (!(_DWORD)v21)
                {
                  *(_QWORD *)(v7 + 216) = *(_QWORD *)(v14 + 80);
                  *(_DWORD *)(v7 + 224) = *(_DWORD *)(v14 + 104);
                  v21 = 4294966301;
                }
                continue;
              case 0x11:
                if (!(_DWORD)v21)
                {
                  *(_QWORD *)(v7 + 216) = *(_QWORD *)v14 + 2;
                  *(_DWORD *)(v7 + 224) = *(_DWORD *)(v14 + 104);
                  v21 = 4294966302;
                }
                continue;
              case 0x12:
              case 0x13:
                if (!(_DWORD)v21)
                {
                  *(_QWORD *)(v7 + 208) = *(_QWORD *)v14;
                  *(_DWORD *)(v7 + 224) = *(_DWORD *)(v14 + 104);
                  v21 = 4294966303;
                }
                continue;
              case 0x14:
                if ((_DWORD)v21)
                  continue;
                v1159 = *(_DWORD *)(v14 + 56);
                v1160 = *(_DWORD *)(v14 + 60);
                *(_DWORD *)(v14 + 56) = v1159 + 1;
                if (v1159 >= v1160)
                  goto LABEL_2863;
                v1161 = v8;
                v1162 = v11;
                v1163 = match_ref(*(_QWORD *)(v14 + 40), *(_DWORD *)(v14 + 64), v14, v7, &v1364);
                if (v1163)
                {
                  v11 = v1162;
                  if (v1163 >= 1)
                    *(_QWORD *)(v14 + 80) = *v16;
                  v233 = (unsigned __int16)*v18;
                  v8 = v1161;
                  if (!*v18)
                    goto LABEL_2863;
                  v1070 = *(unsigned __int8 **)(v14 + 80);
                  if ((unint64_t)v1070 < *v16)
                    goto LABEL_2863;
LABEL_2841:
                  if ((unint64_t)v1070 <= *v15)
                    goto LABEL_2863;
                  goto LABEL_2862;
                }
                *(_QWORD *)(v14 + 80) += v1364;
                v11 = v1162;
                v8 = v1161;
                goto LABEL_3202;
              case 0x15:
                if ((_DWORD)v21)
                  continue;
                v580 = (unsigned __int8 *)(*(_QWORD *)(v14 + 80) - *(_QWORD *)(v14 + 24));
                *(_QWORD *)(v14 + 80) = v580;
                goto LABEL_2877;
              case 0x16:
                if ((_DWORD)v21)
                  continue;
                v1052 = *(unsigned __int8 **)(v14 + 8);
                if (*(unsigned __int8 **)(v14 + 80) == v1052)
                  continue;
                v1328 = v16;
                v1329 = v8;
                *(_QWORD *)(v14 + 80) = v1052;
                v1330 = *(_DWORD *)(v14 + 56);
                v1331 = *(_DWORD *)(v14 + 60) - 1;
                *(_DWORD *)(v14 + 60) = v1331;
                if (v1330 < v1331)
                {
                  v1332 = v11;
                  do
                  {
                    v1365 = 0;
                    match_ref(*(_QWORD *)(v14 + 40), *(_DWORD *)(v14 + 64), v14, v7, &v1365);
                    *(_QWORD *)(v14 + 80) += v1365;
                    ++v1330;
                  }
                  while (v1330 < *(_DWORD *)(v14 + 60));
                  v11 = v1332;
                }
                v8 = v1329;
                v16 = v1328;
                goto LABEL_3309;
              case 0x17:
                if ((_DWORD)v21)
                  continue;
                v1053 = *(_DWORD *)(v14 + 56);
                v1054 = *(_DWORD *)(v14 + 60);
                *(_DWORD *)(v14 + 56) = v1053 + 1;
                if (v1053 >= v1054)
                  goto LABEL_2712;
                v1055 = *(unsigned __int8 **)(v14 + 80);
                if ((unint64_t)v1055 >= *v16)
                  goto LABEL_2617;
                *(_QWORD *)(v14 + 80) = v1055 + 1;
                if (((*(unsigned __int8 *)(*(_QWORD *)(v14 + 16) + ((unint64_t)*v1055 >> 3)) >> (*v1055 & 7)) & 1) == 0)
                  goto LABEL_2712;
                v86 = *(unsigned __int8 **)v14;
                goto LABEL_3227;
              case 0x18:
                if ((_DWORD)v21)
                  continue;
                v508 = (unsigned __int8 *)(*(_QWORD *)(v14 + 80) - 1);
                *(_QWORD *)(v14 + 80) = v508;
                v345 = *(unsigned __int8 **)(v14 + 8);
                goto LABEL_2879;
              case 0x19:
                if ((_DWORD)v21)
                  continue;
                v1056 = *(_DWORD *)(v14 + 56);
                v1057 = *(_DWORD *)(v14 + 60);
                *(_DWORD *)(v14 + 56) = v1056 + 1;
                if (v1056 >= v1057)
                  goto LABEL_2712;
                v1055 = *(unsigned __int8 **)(v14 + 80);
                if ((unint64_t)v1055 >= *v16)
                  goto LABEL_2617;
                v1058 = *v1055;
                if (*(_DWORD *)(v14 + 64) != v1058 && *(_DWORD *)(v14 + 68) != v1058)
                  goto LABEL_2712;
                v12 = 0;
                *(_QWORD *)(v14 + 80) = v1055 + 1;
                a2 = *(unsigned __int8 **)v14;
                goto LABEL_3204;
              case 0x1A:
                v69 = (unsigned __int8 *)(*(_QWORD *)(v14 + 80) - 1);
                *(_QWORD *)(v14 + 80) = v69;
                if ((_DWORD)v21)
                  continue;
                v68 = *(unsigned __int8 **)(v14 + 8);
                goto LABEL_2881;
              case 0x1B:
                if ((_DWORD)v21)
                  continue;
                v1059 = *(_DWORD *)(v14 + 56);
                v1060 = *(_DWORD *)(v14 + 60);
                *(_DWORD *)(v14 + 56) = v1059 + 1;
                if (v1059 >= v1060)
                  goto LABEL_2712;
                v1055 = *(unsigned __int8 **)(v14 + 80);
                if ((unint64_t)v1055 >= *v16)
                  goto LABEL_2617;
                v1061 = *(_DWORD *)(v14 + 64);
                *(_QWORD *)(v14 + 80) = v1055 + 1;
                if (v1061 != *v1055)
                  goto LABEL_2712;
                v12 = 0;
                a2 = *(unsigned __int8 **)v14;
                goto LABEL_3229;
              case 0x1C:
                v79 = (unsigned __int8 *)(*(_QWORD *)(v14 + 80) - 1);
                *(_QWORD *)(v14 + 80) = v79;
                if ((_DWORD)v21)
                  continue;
                v78 = *(unsigned __int8 **)(v14 + 8);
                goto LABEL_2883;
              case 0x1D:
                if ((_DWORD)v21)
                  continue;
                v1062 = *(_DWORD *)(v14 + 56);
                v1063 = *(_DWORD *)(v14 + 60);
                *(_DWORD *)(v14 + 56) = v1062 + 1;
                if (v1062 >= v1063)
                  goto LABEL_2712;
                v1055 = *(unsigned __int8 **)(v14 + 80);
                if ((unint64_t)v1055 >= *v16)
                  goto LABEL_2617;
                v1064 = *v1055;
                if (*(_DWORD *)(v14 + 64) == v1064 || *(_DWORD *)(v14 + 68) == v1064)
                  goto LABEL_2712;
                *(_QWORD *)(v14 + 80) = v1055 + 1;
                a2 = *(unsigned __int8 **)v14;
                goto LABEL_3278;
              case 0x1E:
                if ((_DWORD)v21)
                  continue;
                v304 = (unsigned __int8 *)(*(_QWORD *)(v14 + 80) - 1);
                *(_QWORD *)(v14 + 80) = v304;
                v290 = *(unsigned __int8 **)(v14 + 8);
                goto LABEL_2885;
              case 0x1F:
                if ((_DWORD)v21)
                  continue;
                v1065 = *(_DWORD *)(v14 + 56);
                v1066 = *(_DWORD *)(v14 + 60);
                *(_DWORD *)(v14 + 56) = v1065 + 1;
                if (v1065 >= v1066)
                  goto LABEL_2712;
                v1055 = *(unsigned __int8 **)(v14 + 80);
                if ((unint64_t)v1055 >= *v16)
                  goto LABEL_2617;
                v1067 = *(_DWORD *)(v14 + 64);
                *(_QWORD *)(v14 + 80) = v1055 + 1;
                if (v1067 == *v1055)
                  goto LABEL_2712;
                a2 = *(unsigned __int8 **)v14;
                goto LABEL_3230;
              case 0x20:
                if ((_DWORD)v21)
                  continue;
                v301 = (unsigned __int8 *)(*(_QWORD *)(v14 + 80) - 1);
                *(_QWORD *)(v14 + 80) = v301;
                v270 = *(unsigned __int8 **)(v14 + 8);
                goto LABEL_2887;
              case 0x21:
                if ((_DWORD)v21)
                  continue;
                v1068 = *(_DWORD *)(v14 + 56);
                v1069 = *(_DWORD *)(v14 + 60);
                *(_DWORD *)(v14 + 56) = v1068 + 1;
                if (v1068 >= v1069)
                  goto LABEL_2863;
                v1070 = *(unsigned __int8 **)(v14 + 80);
                v1071 = *v16;
                if ((unint64_t)v1070 >= *v16)
                  goto LABEL_2840;
                v1072 = *(_DWORD *)(v14 + 64);
                if (v1072 != 12)
                  goto LABEL_2524;
                v1073 = *(_DWORD *)(v7 + 244);
                if (!v1073)
                {
                  v1233 = *v1355;
                  if ((unint64_t)v1070 <= v1071 - v1233
                    && *v1070 == *(unsigned __int8 *)(v7 + 252)
                    && ((_DWORD)v1233 == 1 || v1070[1] == *(unsigned __int8 *)(v7 + 253)))
                  {
                    goto LABEL_2863;
                  }
                  v1325 = v1070 + 1;
                  *(_QWORD *)(v14 + 80) = v1070 + 1;
                  LODWORD(v1075) = *v1070;
LABEL_3284:
                  v1326 = (unsigned __int16)*v18;
                  if (*v18)
                  {
                    if ((unint64_t)v1325 >= *v16
                      && !*(_DWORD *)(v7 + 244)
                      && *v1355 == 2
                      && (_DWORD)v1075 == *(unsigned __int8 *)(v7 + 252))
                    {
                      *v1360 = 1;
                      if (v1326 > 1)
                        return 4294967294;
                    }
                  }
LABEL_3340:
                  v12 = 0;
                  a2 = *(unsigned __int8 **)v14;
                  v1313 = 33;
                  goto LABEL_3172;
                }
                v1050 = v8;
                v1051 = v11;
                if (!_pcre2_is_newline_8(*(unsigned __int8 **)(v14 + 80), v1073, v1071, v1355, v1361))
                {
                  v1072 = *(_DWORD *)(v14 + 64);
                  v1070 = *(unsigned __int8 **)(v14 + 80);
                  v11 = v1051;
                  v8 = v1050;
LABEL_2524:
                  *(_QWORD *)(v14 + 80) = v1070 + 1;
                  v20 = 4294967252;
                  v1074 = v1072 - 6;
                  v1075 = *v1070;
                  switch(v1074)
                  {
                    case 0:
                      if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + v1075) & 4) == 0)
                        goto LABEL_3340;
                      goto LABEL_2863;
                    case 1:
                      if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + v1075) & 4) != 0)
                        goto LABEL_3340;
                      goto LABEL_2863;
                    case 2:
                      if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + v1075) & 1) == 0)
                        goto LABEL_3340;
                      goto LABEL_2863;
                    case 3:
                      if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + v1075) & 1) != 0)
                        goto LABEL_3340;
                      goto LABEL_2863;
                    case 4:
                      if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + v1075) & 0x10) == 0)
                        goto LABEL_3340;
                      goto LABEL_2863;
                    case 5:
                      if ((*(_BYTE *)(*(_QWORD *)(v7 + 104) + v1075) & 0x10) != 0)
                        goto LABEL_3340;
                      goto LABEL_2863;
                    case 6:
                      v1325 = v1070 + 1;
                      goto LABEL_3284;
                    case 7:
                    case 8:
                      goto LABEL_3340;
                    case 11:
                      v21 = 0;
                      if (*v1070 > 0xCu)
                      {
                        if ((_DWORD)v1075 != 133)
                        {
                          if ((_DWORD)v1075 != 13)
                            continue;
                          if ((unint64_t)(v1070 + 1) < *v16 && v1070[1] == 10)
                            *(_QWORD *)(v14 + 80) = v1070 + 2;
                          goto LABEL_3340;
                        }
                      }
                      else if ((v1075 - 11) >= 2)
                      {
                        if ((_DWORD)v1075 != 10)
                          continue;
                        goto LABEL_3340;
                      }
                      if (*(_WORD *)(v7 + 130) == 2)
                        goto LABEL_2863;
                      goto LABEL_3340;
                    case 12:
                      v21 = 0;
                      if ((_DWORD)v1075 != 9 && (_DWORD)v1075 != 32 && (_DWORD)v1075 != 160)
                        goto LABEL_3340;
                      continue;
                    case 13:
                      if ((_DWORD)v1075 == 9 || (_DWORD)v1075 == 32 || (_DWORD)v1075 == 160)
                        goto LABEL_3340;
                      goto LABEL_2863;
                    case 14:
                      v21 = 0;
                      if ((v1075 - 10) >= 4 && (_DWORD)v1075 != 133)
                        goto LABEL_3340;
                      continue;
                    case 15:
                      if ((v1075 - 10) < 4 || (_DWORD)v1075 == 133)
                        goto LABEL_3340;
                      goto LABEL_2863;
                    default:
                      return v20;
                  }
                }
                break;
              case 0x22:
                if ((_DWORD)v21)
                  continue;
                v1193 = *(unsigned __int8 **)(v14 + 80);
                v1010 = v1193 - 1;
                *(_QWORD *)(v14 + 80) = v1193 - 1;
                if (*(_DWORD *)(v14 + 64) == 17)
                {
                  v1011 = v1358;
                  if ((unint64_t)v1010 > *(_QWORD *)(v14 + 8) && *v1010 == 10)
                  {
                    v1195 = *(v1193 - 2);
                    v1194 = v1193 - 2;
                    if (v1195 == 13)
                    {
                      *(_QWORD *)(v14 + 80) = v1194;
                      v1010 = v1194;
                    }
                  }
                }
                else
                {
                  v1011 = v1358;
                }
                goto LABEL_2961;
              case 0x23:
                continue;
              default:
                return v20;
            }
LABEL_2603:
            v21 = 0;
LABEL_2468:
            v11 = v1051;
            v8 = v1050;
            continue;
          }
          break;
        }
        break;
      case 0x93u:
        v12 = 0;
        *(_QWORD *)(v14 + 8) = ++a2;
        v1313 = 9;
        goto LABEL_3172;
      case 0x94u:
        v1319 = a2 + 1;
        *(_QWORD *)(v14 + 8) = a2 + 1;
        do
        {
          v1319 += __rev16(*(unsigned __int16 *)(v1319 + 1));
          *(_QWORD *)(v14 + 8) = v1319;
        }
        while (*v1319 == 120);
        v12 = 0;
        a2 = v1319 + 3;
        v1313 = 10;
        goto LABEL_3172;
      case 0x95u:
        *(_DWORD *)(v14 + 64) = 1;
        v1188 = a2 + 1;
        *(_QWORD *)v14 = a2 + 1;
        v1320 = a2[1];
        if (v1320 == 134 || v1320 == 139)
        {
          ++a2;
LABEL_3253:
          v1312 = (bswap32(*(unsigned __int16 *)(a2 + 3)) >> 16) | 0x10000;
LABEL_3254:
          v1188 = a2;
        }
        else
        {
          v1312 = 0x20000;
        }
        *(_DWORD *)(v14 + 56) = v1312;
        *(_DWORD *)(v14 + 60) = 0;
        *(_QWORD *)(v14 + 16) = v1188;
        goto LABEL_3256;
      case 0x96u:
        v12 = 0;
        *(_QWORD *)(v7 + 200) = a2 + 2;
        *(_QWORD *)(v14 + 96) = a2 + 2;
        a2 += a2[1] + (unint64_t)_pcre2_OP_lengths_8[*a2];
        v1313 = 12;
        goto LABEL_3172;
      case 0x97u:
        v12 = 0;
        a2 += _pcre2_OP_lengths_8[*a2];
        v1313 = 14;
        goto LABEL_3172;
      case 0x98u:
        v12 = 0;
        *(_QWORD *)(v7 + 200) = a2 + 2;
        *(_QWORD *)(v14 + 96) = a2 + 2;
        a2 += a2[1] + (unint64_t)_pcre2_OP_lengths_8[*a2];
        v1313 = 15;
        goto LABEL_3172;
      case 0x99u:
        v12 = 0;
        a2 += _pcre2_OP_lengths_8[*a2];
        v1313 = 16;
        goto LABEL_3172;
      case 0x9Au:
        v244 = *(_DWORD *)(v7 + 240);
        v245 = *(_DWORD *)(v7 + 236) + 1;
        *(_DWORD *)(v7 + 236) = v245;
        v246 = _pcre2_OP_lengths_8[*a2];
        if (v245 > v244)
        {
          v12 = 0;
          a2 += v246 + a2[1];
          v1313 = 17;
          goto LABEL_3172;
        }
        v247 = (uint64_t)&a2[a2[1] + v246];
        goto LABEL_2405;
      case 0x9Bu:
        v12 = 0;
        a2 += _pcre2_OP_lengths_8[*a2];
        v1313 = 18;
        goto LABEL_3172;
      case 0x9Cu:
        v12 = 0;
        *(_QWORD *)(v7 + 200) = a2 + 2;
        *(_QWORD *)(v14 + 96) = a2 + 2;
        a2 += a2[1] + (unint64_t)_pcre2_OP_lengths_8[*a2];
        v1313 = 19;
        goto LABEL_3172;
      case 0x9Du:
        v12 = 0;
        a2 += _pcre2_OP_lengths_8[*a2];
        v1313 = 13;
        goto LABEL_3172;
      case 0x9Eu:
        v12 = 0;
        *(_QWORD *)(v7 + 200) = a2 + 2;
        *(_QWORD *)(v14 + 96) = a2 + 2;
        a2 += a2[1] + (unint64_t)_pcre2_OP_lengths_8[*a2];
        v1313 = 36;
        goto LABEL_3172;
      case 0x9Fu:
        goto LABEL_2412;
      case 0xA1u:
        v248 = *(unsigned __int8 **)(v14 + 80);
        if ((unint64_t)v248 > *(_QWORD *)(v7 + 184))
          *(_QWORD *)(v7 + 184) = v248;
        v21 = 4294966297;
        v1354 = (_QWORD *)v14;
        goto LABEL_2412;
      case 0xA2u:
        if (*(_DWORD *)(v14 + 104) != -1)
          goto LABEL_420;
        v483 = *(unsigned __int16 *)(a2 + 1);
        v484 = __rev16(v483);
        v485 = (bswap32(v483) >> 16) | 0x10000;
        v486 = (unsigned __int8 **)v14;
        do
        {
          v487 = v486[14];
          if (v487 == (unsigned __int8 *)-1)
            return 4294967252;
          v488 = &v487[*(_QWORD *)(v7 + 32)];
          v486 = (unsigned __int8 **)&v488[v1356];
        }
        while (*((_DWORD *)v488 + 13) != v485);
        v1358 = v488;
        v489 = 2 * v484 - 2;
        *(_DWORD *)(v14 + 108) = v484;
        v490 = v486[10];
        v491 = *(_QWORD *)(v7 + 152);
        v492 = &v490[-v491];
        v493 = (unsigned __int8 **)(v14 + 8 * v489);
        v494 = (unsigned __int8 *)(*(_QWORD *)(v14 + 80) - v491);
        v493[16] = v492;
        v493[17] = v494;
        if (*(_QWORD *)(v14 + 120) <= v489)
          *(_QWORD *)(v14 + 120) = v489 + 2;
LABEL_420:
        v247 = (uint64_t)&a2[_pcre2_OP_lengths_8[*a2]];
        goto LABEL_2405;
      case 0xA3u:
        v42 = a2 + 1;
        *(_QWORD *)v14 = a2 + 1;
        do
        {
          v42 += __rev16(*(unsigned __int16 *)(v42 + 1));
          *(_QWORD *)v14 = v42;
        }
        while (*v42 == 120);
        goto LABEL_2986;
      default:
        return v20;
    }
    break;
  }
  switch(*(_BYTE *)(v14 + 72))
  {
    case 0xC8:
      if ((_DWORD)v21)
        goto LABEL_2412;
      v1043 = *(_DWORD *)(v14 + 56);
      v1044 = *(_DWORD *)(v14 + 60);
      *(_DWORD *)(v14 + 56) = v1043 + 1;
      if (v1043 >= v1044)
        goto LABEL_2712;
      v1045 = *(unsigned __int8 **)(v14 + 80);
      if ((unint64_t)v1045 >= *v16)
        goto LABEL_2572;
      *(_QWORD *)(v14 + 80) = v1045 + 1;
      v1046 = *v1045;
      if (v1046 < 0xC0)
        goto LABEL_2702;
      if ((v1046 & 0x20) != 0)
      {
        v1121 = v1045[1] & 0x3F;
        if ((v1046 & 0x10) != 0)
        {
          if ((v1046 & 8) != 0)
          {
            v1135 = v1045[2] & 0x3F;
            v1136 = v1045[3] & 0x3F;
            v1137 = v1045[4] & 0x3F;
            if ((v1046 & 4) != 0)
            {
              v1046 = ((v1046 & 1) << 30) | (v1121 << 24) | (v1135 << 18) | (v1136 << 12) | (v1137 << 6) | v1045[5] & 0x3F;
              v1122 = v1045 + 6;
            }
            else
            {
              v1046 = ((v1046 & 3) << 24) | (v1121 << 18) | (v1135 << 12) | (v1136 << 6) | v1137;
              v1122 = v1045 + 5;
            }
          }
          else
          {
            v1046 = ((v1046 & 7) << 18) | (v1121 << 12) | ((v1045[2] & 0x3F) << 6) | v1045[3] & 0x3F;
            v1122 = v1045 + 4;
          }
        }
        else
        {
          v1046 = ((v1046 & 0xF) << 12) | (v1121 << 6) | v1045[2] & 0x3F;
          v1122 = v1045 + 3;
        }
        *(_QWORD *)(v14 + 80) = v1122;
      }
      else
      {
        *(_QWORD *)(v14 + 80) = v1045 + 2;
        v1046 = v1045[1] & 0x3F | ((v1046 & 0x1F) << 6);
      }
      if (v1046 < 0x100)
      {
LABEL_2702:
        if (((*(unsigned __int8 *)(*(_QWORD *)(v14 + 16) + ((unint64_t)v1046 >> 3)) >> (v1046 & 7)) & 1) != 0)
          goto LABEL_3233;
      }
      else if (*(_BYTE *)(v14 + 73) != 110)
      {
LABEL_3233:
        v12 = 0;
        a2 = *(unsigned __int8 **)v14;
        v1313 = -56;
        goto LABEL_3172;
      }
      goto LABEL_2712;
    case 0xC9:
      if ((_DWORD)v21)
        goto LABEL_2412;
      v1076 = *(unsigned __int8 **)(v14 + 80);
      *(_QWORD *)(v14 + 80) = v1076 - 1;
      if ((unint64_t)v1076 <= *(_QWORD *)(v14 + 8))
        goto LABEL_2412;
      if ((*(v1076 - 1) & 0xC0) == 0x80)
      {
        v1333 = v1076 - 2;
        do
        {
          *(_QWORD *)(v14 + 80) = v1333;
          v1334 = *v1333--;
        }
        while ((v1334 & 0xC0) == 0x80);
      }
      goto LABEL_3304;
    case 0xCA:
      if ((_DWORD)v21)
        goto LABEL_2412;
      v1077 = *(_DWORD *)(v14 + 56);
      v1078 = *(_DWORD *)(v14 + 60);
      *(_DWORD *)(v14 + 56) = v1077 + 1;
      if (v1077 >= v1078)
        goto LABEL_2712;
      v1079 = *(unsigned __int8 **)(v14 + 80);
      v1080 = *(_QWORD *)(v14 + 24);
      if ((unint64_t)v1079 > *v16 - v1080
        || (v1081 = v8,
            v1082 = v11,
            v1083 = cstdlib_memcmp(v1079, *(const void **)(v14 + 16), v1080),
            v11 = v1082,
            v8 = v1081,
            v1083))
      {
        v1084 = *(_QWORD *)(v14 + 40);
        if (!v1084
          || (v1085 = *(unsigned __int8 **)(v14 + 80), (unint64_t)v1085 > *v16 - v1084)
          || (v1086 = v8,
              v1087 = v11,
              v1088 = cstdlib_memcmp(v1085, (const void *)(v14 + 74), v1084),
              v11 = v1087,
              v8 = v1086,
              v1088))
        {
          v1089 = (unsigned __int16)*v18;
          if (*v18)
          {
            v1045 = *(unsigned __int8 **)(v14 + 80);
            if ((unint64_t)v1045 >= *v16)
            {
LABEL_2573:
              if ((unint64_t)v1045 > *v15)
              {
                *v1360 = 1;
                if (v1089 > 1)
                  return 4294967294;
              }
            }
          }
LABEL_2712:
          v21 = 0;
          goto LABEL_2412;
        }
        v1314 = (_QWORD *)(v14 + 40);
      }
      else
      {
        v1314 = (_QWORD *)(v14 + 24);
      }
      *(_QWORD *)(v14 + 80) += *v1314;
      goto LABEL_3274;
    case 0xCB:
      if ((_DWORD)v21)
        goto LABEL_2412;
      v1196 = (unsigned __int8 *)(*(_QWORD *)(v14 + 80) - 1);
      do
      {
        *(_QWORD *)(v14 + 80) = v1196;
        v1197 = *v1196--;
      }
      while ((v1197 & 0xC0) == 0x80);
      v387 = v1196 + 1;
      goto LABEL_2896;
    case 0xCC:
      if ((_DWORD)v21)
        goto LABEL_2412;
      v1090 = *(_DWORD *)(v14 + 56);
      v1091 = *(_DWORD *)(v14 + 60);
      *(_DWORD *)(v14 + 56) = v1090 + 1;
      if (v1090 >= v1091)
        goto LABEL_2712;
      v1045 = *(unsigned __int8 **)(v14 + 80);
      if ((unint64_t)v1045 >= *v16)
        goto LABEL_2572;
      *(_QWORD *)(v14 + 80) = v1045 + 1;
      v1092 = *v1045;
      if (v1092 >= 0xC0)
      {
        if ((v1092 & 0x20) != 0)
        {
          v1123 = v1045[1] & 0x3F;
          if ((v1092 & 0x10) != 0)
          {
            if ((v1092 & 8) != 0)
            {
              v1138 = v1045[2] & 0x3F;
              v1139 = v1045[3] & 0x3F;
              v1140 = v1045[4] & 0x3F;
              if ((v1092 & 4) != 0)
              {
                v1092 = ((v1092 & 1) << 30) | (v1123 << 24) | (v1138 << 18) | (v1139 << 12) | (v1140 << 6) | v1045[5] & 0x3F;
                v1124 = v1045 + 6;
              }
              else
              {
                v1092 = ((v1092 & 3) << 24) | (v1123 << 18) | (v1138 << 12) | (v1139 << 6) | v1140;
                v1124 = v1045 + 5;
              }
            }
            else
            {
              v1092 = ((v1092 & 7) << 18) | (v1123 << 12) | ((v1045[2] & 0x3F) << 6) | v1045[3] & 0x3F;
              v1124 = v1045 + 4;
            }
          }
          else
          {
            v1092 = ((v1092 & 0xF) << 12) | (v1123 << 6) | v1045[2] & 0x3F;
            v1124 = v1045 + 3;
          }
          *(_QWORD *)(v14 + 80) = v1124;
        }
        else
        {
          *(_QWORD *)(v14 + 80) = v1045 + 2;
          v1092 = v1045[1] & 0x3F | ((v1092 & 0x1F) << 6);
        }
      }
      if (*(_DWORD *)(v14 + 64) == v1092 || *(_DWORD *)(v14 + 68) == v1092)
        goto LABEL_2712;
      v12 = 0;
      a2 = *(unsigned __int8 **)v14;
      v1313 = -52;
      goto LABEL_3172;
    case 0xCD:
      if ((_DWORD)v21)
        goto LABEL_2412;
      v1198 = (unsigned __int8 *)(*(_QWORD *)(v14 + 80) - 1);
      do
      {
        *(_QWORD *)(v14 + 80) = v1198;
        v1199 = *v1198--;
      }
      while ((v1199 & 0xC0) == 0x80);
      v290 = *(unsigned __int8 **)(v14 + 8);
      v291 = v1198 + 1;
      goto LABEL_2900;
    case 0xCE:
      if ((_DWORD)v21)
        goto LABEL_2412;
      v1093 = *(_DWORD *)(v14 + 56);
      v1094 = *(_DWORD *)(v14 + 60);
      *(_DWORD *)(v14 + 56) = v1093 + 1;
      if (v1093 >= v1094)
        goto LABEL_2712;
      v1045 = *(unsigned __int8 **)(v14 + 80);
      if ((unint64_t)v1045 >= *v16)
        goto LABEL_2572;
      *(_QWORD *)(v14 + 80) = v1045 + 1;
      v1095 = *v1045;
      if (v1095 >= 0xC0)
      {
        if ((v1095 & 0x20) != 0)
        {
          v1125 = v1045[1] & 0x3F;
          if ((v1095 & 0x10) != 0)
          {
            if ((v1095 & 8) != 0)
            {
              v1141 = v1045[2] & 0x3F;
              v1142 = v1045[3] & 0x3F;
              v1143 = v1045[4] & 0x3F;
              if ((v1095 & 4) != 0)
              {
                v1095 = ((v1095 & 1) << 30) | (v1125 << 24) | (v1141 << 18) | (v1142 << 12) | (v1143 << 6) | v1045[5] & 0x3F;
                v1126 = v1045 + 6;
              }
              else
              {
                v1095 = ((v1095 & 3) << 24) | (v1125 << 18) | (v1141 << 12) | (v1142 << 6) | v1143;
                v1126 = v1045 + 5;
              }
            }
            else
            {
              v1095 = ((v1095 & 7) << 18) | (v1125 << 12) | ((v1045[2] & 0x3F) << 6) | v1045[3] & 0x3F;
              v1126 = v1045 + 4;
            }
          }
          else
          {
            v1095 = ((v1095 & 0xF) << 12) | (v1125 << 6) | v1045[2] & 0x3F;
            v1126 = v1045 + 3;
          }
          *(_QWORD *)(v14 + 80) = v1126;
        }
        else
        {
          *(_QWORD *)(v14 + 80) = v1045 + 2;
          v1095 = v1045[1] & 0x3F | ((v1095 & 0x1F) << 6);
        }
      }
      if (*(_DWORD *)(v14 + 64) == v1095)
        goto LABEL_2712;
      v12 = 0;
      a2 = *(unsigned __int8 **)v14;
      v1313 = -50;
      goto LABEL_3172;
    case 0xCF:
      if ((_DWORD)v21)
        goto LABEL_2412;
      v1200 = (unsigned __int8 *)(*(_QWORD *)(v14 + 80) - 1);
      do
      {
        *(_QWORD *)(v14 + 80) = v1200;
        v1201 = *v1200--;
      }
      while ((v1201 & 0xC0) == 0x80);
      v270 = *(unsigned __int8 **)(v14 + 8);
      v271 = v1200 + 1;
      goto LABEL_2904;
    case 0xD0:
      if ((_DWORD)v21)
        goto LABEL_2412;
      v1096 = *(_DWORD *)(v14 + 56);
      v1097 = *(_DWORD *)(v14 + 60);
      *(_DWORD *)(v14 + 56) = v1096 + 1;
      if (v1096 >= v1097)
        goto LABEL_2712;
      v1055 = *(unsigned __int8 **)(v14 + 80);
      if ((unint64_t)v1055 >= *v16)
        goto LABEL_2617;
      *(_QWORD *)(v14 + 80) = v1055 + 1;
      if (v1363)
      {
        v1098 = *v1055;
        if (v1098 >= 0xC0)
        {
          if ((v1098 & 0x20) != 0)
          {
            v1127 = 4;
            v1128 = 5;
            if ((v1098 & 4) != 0)
              v1128 = 6;
            if ((v1098 & 8) != 0)
              v1127 = v1128;
            if ((v1098 & 0x10) != 0)
              v1099 = v1127;
            else
              v1099 = 3;
          }
          else
          {
            v1099 = 2;
          }
          *(_QWORD *)(v14 + 80) = &v1055[v1099];
        }
      }
      if (*(_DWORD *)(v14 + 64) == 15)
        goto LABEL_2712;
      v196 = v11;
      goto LABEL_3232;
    case 0xD1:
      if ((_DWORD)v21)
        goto LABEL_2412;
      v1100 = *(_DWORD *)(v14 + 56);
      v1101 = *(_DWORD *)(v14 + 60);
      *(_DWORD *)(v14 + 56) = v1100 + 1;
      if (v1100 >= v1101)
        goto LABEL_2712;
      v1045 = *(unsigned __int8 **)(v14 + 80);
      if ((unint64_t)v1045 < *v16)
      {
        *(_QWORD *)(v14 + 80) = v1045 + 1;
        v1189 = *v1045;
        if (v1363 && v1189 >= 0xC0)
        {
          if ((v1189 & 0x20) != 0)
          {
            v1231 = v1045[1] & 0x3F;
            if ((v1189 & 0x10) != 0)
            {
              if ((v1189 & 8) != 0)
              {
                v1262 = v1045[2] & 0x3F;
                v1263 = v1045[3] & 0x3F;
                v1264 = v1045[4] & 0x3F;
                if ((v1189 & 4) != 0)
                {
                  v1189 = ((v1189 & 1) << 30) | (v1231 << 24) | (v1262 << 18) | (v1263 << 12) | (v1264 << 6) | v1045[5] & 0x3F;
                  v1232 = v1045 + 6;
                }
                else
                {
                  v1189 = ((v1189 & 3) << 24) | (v1231 << 18) | (v1262 << 12) | (v1263 << 6) | v1264;
                  v1232 = v1045 + 5;
                }
              }
              else
              {
                v1189 = ((v1189 & 7) << 18) | (v1231 << 12) | ((v1045[2] & 0x3F) << 6) | v1045[3] & 0x3F;
                v1232 = v1045 + 4;
              }
            }
            else
            {
              v1189 = ((v1189 & 0xF) << 12) | (v1231 << 6) | v1045[2] & 0x3F;
              v1232 = v1045 + 3;
            }
            *(_QWORD *)(v14 + 80) = v1232;
          }
          else
          {
            *(_QWORD *)(v14 + 80) = v1045 + 2;
            v1189 = v1045[1] & 0x3F | ((v1189 & 0x1F) << 6);
          }
        }
        v1277 = BYTE1(_pcre2_ucd_records_8[2
                                         * _pcre2_ucd_stage2_8[v1189 & 0x7F | (_pcre2_ucd_stage1_8[v1189 >> 7] << 7)]]);
        v102 = v1277 > 9;
        v1278 = (1 << v1277) & 0x320;
        if (v102 || v1278 == 0)
        {
          if (*(_DWORD *)(v14 + 64) != 15)
            goto LABEL_2863;
        }
        else if (*(_DWORD *)(v14 + 64) == 15)
        {
          goto LABEL_2863;
        }
LABEL_3216:
        v12 = 0;
        a2 = *(unsigned __int8 **)v14;
        v1313 = -47;
        goto LABEL_3172;
      }
LABEL_2572:
      v1089 = (unsigned __int16)*v18;
      if (*v18)
        goto LABEL_2573;
      goto LABEL_2712;
    case 0xD2:
      if ((_DWORD)v21)
        goto LABEL_2412;
      v1164 = *(_DWORD *)(v14 + 56);
      v1165 = *(_DWORD *)(v14 + 60);
      *(_DWORD *)(v14 + 56) = v1164 + 1;
      if (v1164 >= v1165)
        goto LABEL_2863;
      v1070 = *(unsigned __int8 **)(v14 + 80);
      if ((unint64_t)v1070 >= *v16)
        goto LABEL_2840;
      *(_QWORD *)(v14 + 80) = v1070 + 1;
      v1166 = *v1070;
      if (v1363 && v1166 >= 0xC0)
      {
        if ((v1166 & 0x20) != 0)
        {
          v1215 = v1070[1] & 0x3F;
          if ((v1166 & 0x10) != 0)
          {
            if ((v1166 & 8) != 0)
            {
              v1238 = v1070[2] & 0x3F;
              v1239 = v1070[3] & 0x3F;
              v1240 = v1070[4] & 0x3F;
              if ((v1166 & 4) != 0)
              {
                v1166 = ((v1166 & 1) << 30) | (v1215 << 24) | (v1238 << 18) | (v1239 << 12) | (v1240 << 6) | v1070[5] & 0x3F;
                v1216 = v1070 + 6;
              }
              else
              {
                v1166 = ((v1166 & 3) << 24) | (v1215 << 18) | (v1238 << 12) | (v1239 << 6) | v1240;
                v1216 = v1070 + 5;
              }
            }
            else
            {
              v1166 = ((v1166 & 7) << 18) | (v1215 << 12) | ((v1070[2] & 0x3F) << 6) | v1070[3] & 0x3F;
              v1216 = v1070 + 4;
            }
          }
          else
          {
            v1166 = ((v1166 & 0xF) << 12) | (v1215 << 6) | v1070[2] & 0x3F;
            v1216 = v1070 + 3;
          }
          *(_QWORD *)(v14 + 80) = v1216;
        }
        else
        {
          *(_QWORD *)(v14 + 80) = v1070 + 2;
          v1166 = v1070[1] & 0x3F | ((v1166 & 0x1F) << 6);
        }
      }
      if ((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                          * _pcre2_ucd_stage2_8[v1166 & 0x7F | (_pcre2_ucd_stage1_8[v1166 >> 7] << 7)]])] != *(_DWORD *)(v14 + 68)) == (*(_DWORD *)(v14 + 64) == 15))
        goto LABEL_3217;
      goto LABEL_2863;
    case 0xD3:
      if ((_DWORD)v21)
        goto LABEL_2412;
      v1167 = *(_DWORD *)(v14 + 56);
      v1168 = *(_DWORD *)(v14 + 60);
      *(_DWORD *)(v14 + 56) = v1167 + 1;
      if (v1167 >= v1168)
        goto LABEL_2863;
      v1070 = *(unsigned __int8 **)(v14 + 80);
      if ((unint64_t)v1070 >= *v16)
        goto LABEL_2840;
      *(_QWORD *)(v14 + 80) = v1070 + 1;
      v1169 = *v1070;
      if (v1363 && v1169 >= 0xC0)
      {
        if ((v1169 & 0x20) != 0)
        {
          v1217 = v1070[1] & 0x3F;
          if ((v1169 & 0x10) != 0)
          {
            if ((v1169 & 8) != 0)
            {
              v1241 = v1070[2] & 0x3F;
              v1242 = v1070[3] & 0x3F;
              v1243 = v1070[4] & 0x3F;
              if ((v1169 & 4) != 0)
              {
                v1169 = ((v1169 & 1) << 30) | (v1217 << 24) | (v1241 << 18) | (v1242 << 12) | (v1243 << 6) | v1070[5] & 0x3F;
                v1218 = v1070 + 6;
              }
              else
              {
                v1169 = ((v1169 & 3) << 24) | (v1217 << 18) | (v1241 << 12) | (v1242 << 6) | v1243;
                v1218 = v1070 + 5;
              }
            }
            else
            {
              v1169 = ((v1169 & 7) << 18) | (v1217 << 12) | ((v1070[2] & 0x3F) << 6) | v1070[3] & 0x3F;
              v1218 = v1070 + 4;
            }
          }
          else
          {
            v1169 = ((v1169 & 0xF) << 12) | (v1217 << 6) | v1070[2] & 0x3F;
            v1218 = v1070 + 3;
          }
          *(_QWORD *)(v14 + 80) = v1218;
        }
        else
        {
          *(_QWORD *)(v14 + 80) = v1070 + 2;
          v1169 = v1070[1] & 0x3F | ((v1169 & 0x1F) << 6);
        }
      }
      if ((*(_DWORD *)(v14 + 68) != BYTE1(_pcre2_ucd_records_8[2
                                                              * _pcre2_ucd_stage2_8[v1169 & 0x7F | (_pcre2_ucd_stage1_8[v1169 >> 7] << 7)]])) == (*(_DWORD *)(v14 + 64) == 15))
        goto LABEL_3218;
      goto LABEL_2863;
    case 0xD4:
      if ((_DWORD)v21)
        goto LABEL_2412;
      v1170 = *(_DWORD *)(v14 + 56);
      v1171 = *(_DWORD *)(v14 + 60);
      *(_DWORD *)(v14 + 56) = v1170 + 1;
      if (v1170 >= v1171)
        goto LABEL_2863;
      v1070 = *(unsigned __int8 **)(v14 + 80);
      if ((unint64_t)v1070 >= *v16)
        goto LABEL_2840;
      *(_QWORD *)(v14 + 80) = v1070 + 1;
      v1172 = *v1070;
      if (v1363 && v1172 >= 0xC0)
      {
        if ((v1172 & 0x20) != 0)
        {
          v1219 = v1070[1] & 0x3F;
          if ((v1172 & 0x10) != 0)
          {
            if ((v1172 & 8) != 0)
            {
              v1244 = v1070[2] & 0x3F;
              v1245 = v1070[3] & 0x3F;
              v1246 = v1070[4] & 0x3F;
              if ((v1172 & 4) != 0)
              {
                v1172 = ((v1172 & 1) << 30) | (v1219 << 24) | (v1244 << 18) | (v1245 << 12) | (v1246 << 6) | v1070[5] & 0x3F;
                v1220 = v1070 + 6;
              }
              else
              {
                v1172 = ((v1172 & 3) << 24) | (v1219 << 18) | (v1244 << 12) | (v1245 << 6) | v1246;
                v1220 = v1070 + 5;
              }
            }
            else
            {
              v1172 = ((v1172 & 7) << 18) | (v1219 << 12) | ((v1070[2] & 0x3F) << 6) | v1070[3] & 0x3F;
              v1220 = v1070 + 4;
            }
          }
          else
          {
            v1172 = ((v1172 & 0xF) << 12) | (v1219 << 6) | v1070[2] & 0x3F;
            v1220 = v1070 + 3;
          }
          *(_QWORD *)(v14 + 80) = v1220;
        }
        else
        {
          *(_QWORD *)(v14 + 80) = v1070 + 2;
          v1172 = v1070[1] & 0x3F | ((v1172 & 0x1F) << 6);
        }
      }
      if ((*(_DWORD *)(v14 + 68) != LOBYTE(_pcre2_ucd_records_8[2
                                                               * _pcre2_ucd_stage2_8[v1172 & 0x7F | (_pcre2_ucd_stage1_8[v1172 >> 7] << 7)]])) == (*(_DWORD *)(v14 + 64) == 15))
        goto LABEL_3219;
      goto LABEL_2863;
    case 0xD5:
      if ((_DWORD)v21)
        goto LABEL_2412;
      v1173 = *(_DWORD *)(v14 + 56);
      v1174 = *(_DWORD *)(v14 + 60);
      *(_DWORD *)(v14 + 56) = v1173 + 1;
      if (v1173 >= v1174)
        goto LABEL_2863;
      v1070 = *(unsigned __int8 **)(v14 + 80);
      if ((unint64_t)v1070 >= *v16)
        goto LABEL_2840;
      *(_QWORD *)(v14 + 80) = v1070 + 1;
      v1175 = *v1070;
      if (v1363 && v1175 >= 0xC0)
      {
        if ((v1175 & 0x20) != 0)
        {
          v1221 = v1070[1] & 0x3F;
          if ((v1175 & 0x10) != 0)
          {
            if ((v1175 & 8) != 0)
            {
              v1247 = v1070[2] & 0x3F;
              v1248 = v1070[3] & 0x3F;
              v1249 = v1070[4] & 0x3F;
              if ((v1175 & 4) != 0)
              {
                v1175 = ((v1175 & 1) << 30) | (v1221 << 24) | (v1247 << 18) | (v1248 << 12) | (v1249 << 6) | v1070[5] & 0x3F;
                v1222 = v1070 + 6;
              }
              else
              {
                v1175 = ((v1175 & 3) << 24) | (v1221 << 18) | (v1247 << 12) | (v1248 << 6) | v1249;
                v1222 = v1070 + 5;
              }
            }
            else
            {
              v1175 = ((v1175 & 7) << 18) | (v1221 << 12) | ((v1070[2] & 0x3F) << 6) | v1070[3] & 0x3F;
              v1222 = v1070 + 4;
            }
          }
          else
          {
            v1175 = ((v1175 & 0xF) << 12) | (v1221 << 6) | v1070[2] & 0x3F;
            v1222 = v1070 + 3;
          }
          *(_QWORD *)(v14 + 80) = v1222;
        }
        else
        {
          *(_QWORD *)(v14 + 80) = v1070 + 2;
          v1175 = v1070[1] & 0x3F | ((v1175 & 0x1F) << 6);
        }
      }
      if (((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                           * _pcre2_ucd_stage2_8[v1175 & 0x7F | (_pcre2_ucd_stage1_8[v1175 >> 7] << 7)]])] & 0xFFFFFFFD) != 1) == (*(_DWORD *)(v14 + 64) == 15))
        goto LABEL_3220;
      goto LABEL_2863;
    case 0xD6:
      if ((_DWORD)v21)
        goto LABEL_2412;
      v1176 = *(_DWORD *)(v14 + 56);
      v1177 = *(_DWORD *)(v14 + 60);
      *(_DWORD *)(v14 + 56) = v1176 + 1;
      if (v1176 >= v1177)
        goto LABEL_2863;
      v1070 = *(unsigned __int8 **)(v14 + 80);
      if ((unint64_t)v1070 >= *v16)
        goto LABEL_2840;
      *(_QWORD *)(v14 + 80) = v1070 + 1;
      v1178 = *v1070;
      if (v1363 && v1178 >= 0xC0)
      {
        if ((v1178 & 0x20) != 0)
        {
          v1223 = v1070[1] & 0x3F;
          if ((v1178 & 0x10) != 0)
          {
            if ((v1178 & 8) != 0)
            {
              v1250 = v1070[2] & 0x3F;
              v1251 = v1070[3] & 0x3F;
              v1252 = v1070[4] & 0x3F;
              if ((v1178 & 4) != 0)
              {
                v1178 = ((v1178 & 1) << 30) | (v1223 << 24) | (v1250 << 18) | (v1251 << 12) | (v1252 << 6) | v1070[5] & 0x3F;
                v1224 = v1070 + 6;
              }
              else
              {
                v1178 = ((v1178 & 3) << 24) | (v1223 << 18) | (v1250 << 12) | (v1251 << 6) | v1252;
                v1224 = v1070 + 5;
              }
            }
            else
            {
              v1178 = ((v1178 & 7) << 18) | (v1223 << 12) | ((v1070[2] & 0x3F) << 6) | v1070[3] & 0x3F;
              v1224 = v1070 + 4;
            }
          }
          else
          {
            v1178 = ((v1178 & 0xF) << 12) | (v1223 << 6) | v1070[2] & 0x3F;
            v1224 = v1070 + 3;
          }
          *(_QWORD *)(v14 + 80) = v1224;
        }
        else
        {
          *(_QWORD *)(v14 + 80) = v1070 + 2;
          v1178 = v1070[1] & 0x3F | ((v1178 & 0x1F) << 6);
        }
      }
      if (v1178 >= 0x2000)
      {
        if ((v1178 - 0x2000) >= 0xB)
        {
          v1267 = (v1178 - 8232) > 0x37
               || ((1 << (v1178 - 40)) & 0x80000000000083) == 0;
          if (v1267 && v1178 != 12288)
            goto LABEL_3092;
        }
LABEL_3099:
        if (*(_DWORD *)(v14 + 64) == 15)
          goto LABEL_2863;
LABEL_3189:
        v12 = 0;
        a2 = *(unsigned __int8 **)v14;
        v1313 = -42;
        goto LABEL_3172;
      }
      if (v1178 > 132)
      {
        if (v1178 <= 5759)
        {
          if (v1178 != 133 && v1178 != 160)
            goto LABEL_3092;
          goto LABEL_3099;
        }
        if (v1178 == 5760 || v1178 == 6158)
          goto LABEL_3099;
      }
      else if (v1178 <= 0x20 && ((1 << v1178) & 0x100003E00) != 0)
      {
        goto LABEL_3099;
      }
LABEL_3092:
      if ((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                          * _pcre2_ucd_stage2_8[v1178 & 0x7F | (_pcre2_ucd_stage1_8[v1178 >> 7] << 7)]])] != 6) != (*(_DWORD *)(v14 + 64) == 15))
        goto LABEL_2863;
      goto LABEL_3189;
    case 0xD7:
      if ((_DWORD)v21)
        goto LABEL_2412;
      v1179 = *(_DWORD *)(v14 + 56);
      v1180 = *(_DWORD *)(v14 + 60);
      *(_DWORD *)(v14 + 56) = v1179 + 1;
      if (v1179 >= v1180)
        goto LABEL_2863;
      v1070 = *(unsigned __int8 **)(v14 + 80);
      if ((unint64_t)v1070 >= *v16)
        goto LABEL_2840;
      *(_QWORD *)(v14 + 80) = v1070 + 1;
      v1181 = *v1070;
      if (v1363 && v1181 >= 0xC0)
      {
        if ((v1181 & 0x20) != 0)
        {
          v1225 = v1070[1] & 0x3F;
          if ((v1181 & 0x10) != 0)
          {
            if ((v1181 & 8) != 0)
            {
              v1253 = v1070[2] & 0x3F;
              v1254 = v1070[3] & 0x3F;
              v1255 = v1070[4] & 0x3F;
              if ((v1181 & 4) != 0)
              {
                v1181 = ((v1181 & 1) << 30) | (v1225 << 24) | (v1253 << 18) | (v1254 << 12) | (v1255 << 6) | v1070[5] & 0x3F;
                v1226 = v1070 + 6;
              }
              else
              {
                v1181 = ((v1181 & 3) << 24) | (v1225 << 18) | (v1253 << 12) | (v1254 << 6) | v1255;
                v1226 = v1070 + 5;
              }
            }
            else
            {
              v1181 = ((v1181 & 7) << 18) | (v1225 << 12) | ((v1070[2] & 0x3F) << 6) | v1070[3] & 0x3F;
              v1226 = v1070 + 4;
            }
          }
          else
          {
            v1181 = ((v1181 & 0xF) << 12) | (v1225 << 6) | v1070[2] & 0x3F;
            v1226 = v1070 + 3;
          }
          *(_QWORD *)(v14 + 80) = v1226;
        }
        else
        {
          *(_QWORD *)(v14 + 80) = v1070 + 2;
          v1181 = v1070[1] & 0x3F | ((v1181 & 0x1F) << 6);
        }
      }
      v1271 = v1181 == 95
           || (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                             * _pcre2_ucd_stage2_8[v1181 & 0x7F | (_pcre2_ucd_stage1_8[v1181 >> 7] << 7)]])] & 0xFFFFFFFD) == 1;
      if ((((*(_DWORD *)(v14 + 64) != 15) ^ v1271) & 1) == 0)
        goto LABEL_3221;
      goto LABEL_2863;
    case 0xD8:
      if ((_DWORD)v21)
        goto LABEL_2412;
      v1182 = *(_DWORD *)(v14 + 56);
      v1183 = *(_DWORD *)(v14 + 60);
      *(_DWORD *)(v14 + 56) = v1182 + 1;
      if (v1182 >= v1183)
        goto LABEL_2863;
      v1070 = *(unsigned __int8 **)(v14 + 80);
      if ((unint64_t)v1070 >= *v16)
        goto LABEL_2840;
      *(_QWORD *)(v14 + 80) = v1070 + 1;
      v1184 = *v1070;
      if (v1363 && v1184 >= 0xC0)
      {
        if ((v1184 & 0x20) != 0)
        {
          v1227 = v1070[1] & 0x3F;
          if ((v1184 & 0x10) != 0)
          {
            if ((v1184 & 8) != 0)
            {
              v1256 = v1070[2] & 0x3F;
              v1257 = v1070[3] & 0x3F;
              v1258 = v1070[4] & 0x3F;
              if ((v1184 & 4) != 0)
              {
                v1184 = ((v1184 & 1) << 30) | (v1227 << 24) | (v1256 << 18) | (v1257 << 12) | (v1258 << 6) | v1070[5] & 0x3F;
                v1228 = v1070 + 6;
              }
              else
              {
                v1184 = ((v1184 & 3) << 24) | (v1227 << 18) | (v1256 << 12) | (v1257 << 6) | v1258;
                v1228 = v1070 + 5;
              }
            }
            else
            {
              v1184 = ((v1184 & 7) << 18) | (v1227 << 12) | ((v1070[2] & 0x3F) << 6) | v1070[3] & 0x3F;
              v1228 = v1070 + 4;
            }
          }
          else
          {
            v1184 = ((v1184 & 0xF) << 12) | (v1227 << 6) | v1070[2] & 0x3F;
            v1228 = v1070 + 3;
          }
          *(_QWORD *)(v14 + 80) = v1228;
        }
        else
        {
          *(_QWORD *)(v14 + 80) = v1070 + 2;
          v1184 = v1070[1] & 0x3F | ((v1184 & 0x1F) << 6);
        }
      }
      v1272 = &_pcre2_ucd_caseless_sets_8[*(unsigned int *)(v14 + 68)];
      do
      {
        v1273 = *v1272;
        if (v1184 < *v1272)
        {
          if (*(_DWORD *)(v14 + 64) != 15)
            goto LABEL_2863;
LABEL_3222:
          v12 = 0;
          a2 = *(unsigned __int8 **)v14;
          v1313 = -40;
          goto LABEL_3172;
        }
        ++v1272;
      }
      while (v1184 != v1273);
      if (*(_DWORD *)(v14 + 64) != 15)
        goto LABEL_3222;
LABEL_2863:
      v21 = 0;
      goto LABEL_2412;
    case 0xD9:
      if ((_DWORD)v21)
        goto LABEL_2412;
      v1185 = *(_DWORD *)(v14 + 56);
      v1186 = *(_DWORD *)(v14 + 60);
      *(_DWORD *)(v14 + 56) = v1185 + 1;
      if (v1185 >= v1186)
        goto LABEL_2863;
      v1070 = *(unsigned __int8 **)(v14 + 80);
      if ((unint64_t)v1070 < *v16)
      {
        *(_QWORD *)(v14 + 80) = v1070 + 1;
        v1187 = *v1070;
        if (v1363 && v1187 >= 0xC0)
        {
          if ((v1187 & 0x20) != 0)
          {
            v1229 = v1070[1] & 0x3F;
            if ((v1187 & 0x10) != 0)
            {
              if ((v1187 & 8) != 0)
              {
                v1259 = v1070[2] & 0x3F;
                v1260 = v1070[3] & 0x3F;
                v1261 = v1070[4] & 0x3F;
                if ((v1187 & 4) != 0)
                {
                  v1187 = ((v1187 & 1) << 30) | (v1229 << 24) | (v1259 << 18) | (v1260 << 12) | (v1261 << 6) | v1070[5] & 0x3F;
                  v1230 = v1070 + 6;
                }
                else
                {
                  v1187 = ((v1187 & 3) << 24) | (v1229 << 18) | (v1259 << 12) | (v1260 << 6) | v1261;
                  v1230 = v1070 + 5;
                }
              }
              else
              {
                v1187 = ((v1187 & 7) << 18) | (v1229 << 12) | ((v1070[2] & 0x3F) << 6) | v1070[3] & 0x3F;
                v1230 = v1070 + 4;
              }
            }
            else
            {
              v1187 = ((v1187 & 0xF) << 12) | (v1229 << 6) | v1070[2] & 0x3F;
              v1230 = v1070 + 3;
            }
            *(_QWORD *)(v14 + 80) = v1230;
          }
          else
          {
            *(_QWORD *)(v14 + 80) = v1070 + 2;
            v1187 = v1070[1] & 0x3F | ((v1187 & 0x1F) << 6);
          }
        }
        if (v1187 - 36 > 0x3C || ((1 << (v1187 - 36)) & 0x1000000010000001) == 0)
        {
          v1276 = v1187 >> 13 > 6 || (v1187 - 160) >> 5 < 0x6BB;
          if (((v1276 ^ (*(_DWORD *)(v14 + 64) != 15)) & 1) != 0)
            goto LABEL_2863;
        }
        else if (*(_DWORD *)(v14 + 64) == 15)
        {
          goto LABEL_2863;
        }
LABEL_3223:
        v12 = 0;
        a2 = *(unsigned __int8 **)v14;
        v1313 = -39;
        goto LABEL_3172;
      }
LABEL_2840:
      v233 = (unsigned __int16)*v18;
      if (!*v18)
        goto LABEL_2863;
      goto LABEL_2841;
    case 0xDA:
      if ((_DWORD)v21)
        goto LABEL_2412;
      v1102 = *(_DWORD *)(v14 + 56);
      v1103 = *(_DWORD *)(v14 + 60);
      *(_DWORD *)(v14 + 56) = v1102 + 1;
      if (v1102 >= v1103)
        goto LABEL_2863;
      v1104 = v11;
      v1105 = *(unsigned __int8 **)(v14 + 80);
      v1106 = *v16;
      if ((unint64_t)v1105 >= *v16)
      {
        v327 = (unsigned __int16)*v18;
        if (!*v18)
        {
          v21 = 0;
          v11 = v1104;
          goto LABEL_2412;
        }
        v11 = v1104;
        if ((unint64_t)v1105 <= *v15)
          goto LABEL_2863;
LABEL_2858:
        *v1360 = 1;
        if (v327 <= 1)
          goto LABEL_2863;
        return 4294967294;
      }
      v1310 = v1105 + 1;
      *(_QWORD *)(v14 + 80) = v1105 + 1;
      v1311 = *v1105;
      if (v1363 && v1311 >= 0xC0)
      {
        if ((v1311 & 0x20) != 0)
        {
          v1324 = *v1310 & 0x3F;
          if ((v1311 & 0x10) != 0)
          {
            if ((v1311 & 8) != 0)
            {
              v1336 = v1105[2] & 0x3F;
              v1337 = v1105[3] & 0x3F;
              v1338 = v1105[4] & 0x3F;
              if ((v1311 & 4) != 0)
              {
                v1311 = ((v1311 & 1) << 30) | (v1324 << 24) | (v1336 << 18) | (v1337 << 12) | (v1338 << 6) | v1105[5] & 0x3F;
                v1310 = v1105 + 6;
              }
              else
              {
                v1311 = ((v1311 & 3) << 24) | (v1324 << 18) | (v1336 << 12) | (v1337 << 6) | v1338;
                v1310 = v1105 + 5;
              }
            }
            else
            {
              v1311 = ((v1311 & 7) << 18) | (v1324 << 12) | ((v1105[2] & 0x3F) << 6) | v1105[3] & 0x3F;
              v1310 = v1105 + 4;
            }
          }
          else
          {
            v1311 = ((v1311 & 0xF) << 12) | (v1324 << 6) | v1105[2] & 0x3F;
            v1310 = v1105 + 3;
          }
          *(_QWORD *)(v14 + 80) = v1310;
        }
        else
        {
          v1310 = v1105 + 2;
          *(_QWORD *)(v14 + 80) = v1105 + 2;
          v1311 = v1105[1] & 0x3F | ((v1311 & 0x1F) << 6);
        }
      }
      v1340 = _pcre2_extuni_8(v1311, v1310, *(_QWORD *)(v7 + 152), v1106, v1361, 0);
      *(_QWORD *)(v14 + 80) = v1340;
      v1341 = *(unsigned __int16 *)(v7 + 128);
      if (*(_WORD *)(v7 + 128))
      {
        v11 = v1104;
        if ((unint64_t)v1340 >= *v16 && (unint64_t)v1340 > *v15)
        {
          *v1360 = 1;
          if (v1341 > 1)
            return 4294967294;
        }
      }
      else
      {
        v11 = v1104;
      }
      goto LABEL_3331;
    case 0xDB:
      if ((_DWORD)v21)
        goto LABEL_2412;
      v1107 = *(_DWORD *)(v14 + 56);
      v1108 = *(_DWORD *)(v14 + 60);
      *(_DWORD *)(v14 + 56) = v1107 + 1;
      if (v1107 >= v1108)
        goto LABEL_2863;
      v410 = *(unsigned __int8 **)(v14 + 80);
      v1109 = *v16;
      if ((unint64_t)v410 >= *v16)
        goto LABEL_2860;
      if (*(_DWORD *)(v14 + 64) != 12)
        goto LABEL_2673;
      v1110 = *(_DWORD *)(v7 + 244);
      if (v1110)
      {
        v1050 = v8;
        v1051 = v11;
        if (_pcre2_is_newline_8(v410, v1110, v1109, v1355, v1361))
          goto LABEL_2603;
        v410 = *(unsigned __int8 **)(v14 + 80);
        v11 = v1051;
        v8 = v1050;
      }
      else
      {
        v1131 = *v1355;
        if ((unint64_t)v410 <= v1109 - v1131
          && *v410 == *(unsigned __int8 *)(v7 + 252)
          && ((_DWORD)v1131 == 1 || v410[1] == *(unsigned __int8 *)(v7 + 253)))
        {
          goto LABEL_2863;
        }
      }
LABEL_2673:
      v1132 = v410 + 1;
      *(_QWORD *)(v14 + 80) = v410 + 1;
      v1133 = *v410;
      if (v1133 >= 0xC0)
      {
        if ((v1133 & 0x20) != 0)
        {
          v1134 = *v1132 & 0x3F;
          if ((v1133 & 0x10) != 0)
          {
            if ((v1133 & 8) != 0)
            {
              v1147 = v410[2] & 0x3F;
              v1148 = v410[3] & 0x3F;
              v1149 = v410[4] & 0x3F;
              if ((v1133 & 4) != 0)
              {
                v1133 = ((v1133 & 1) << 30) | (v1134 << 24) | (v1147 << 18) | (v1148 << 12) | (v1149 << 6) | v410[5] & 0x3F;
                v1132 = v410 + 6;
              }
              else
              {
                v1133 = ((v1133 & 3) << 24) | (v1134 << 18) | (v1147 << 12) | (v1148 << 6) | v1149;
                v1132 = v410 + 5;
              }
            }
            else
            {
              v1133 = ((v1133 & 7) << 18) | (v1134 << 12) | ((v410[2] & 0x3F) << 6) | v410[3] & 0x3F;
              v1132 = v410 + 4;
            }
          }
          else
          {
            v1133 = ((v1133 & 0xF) << 12) | (v1134 << 6) | v410[2] & 0x3F;
            v1132 = v410 + 3;
          }
          *(_QWORD *)(v14 + 80) = v1132;
        }
        else
        {
          v1132 = v410 + 2;
          *(_QWORD *)(v14 + 80) = v410 + 2;
          v1133 = v410[1] & 0x3F | ((v1133 & 0x1F) << 6);
        }
      }
      v20 = 4294967252;
      switch(*(_DWORD *)(v14 + 64))
      {
        case 6:
          if (v1133 > 0xFF || (*(_BYTE *)(*(_QWORD *)(v7 + 104) + v1133) & 4) == 0)
            goto LABEL_3277;
          goto LABEL_2863;
        case 7:
          if (v1133 <= 0xFF && (*(_BYTE *)(*(_QWORD *)(v7 + 104) + v1133) & 4) != 0)
            goto LABEL_3277;
          goto LABEL_2863;
        case 8:
          if (v1133 > 0xFF || (*(_BYTE *)(*(_QWORD *)(v7 + 104) + v1133) & 1) == 0)
            goto LABEL_3277;
          goto LABEL_2863;
        case 9:
          if (v1133 <= 0xFF && (*(_BYTE *)(*(_QWORD *)(v7 + 104) + v1133) & 1) != 0)
            goto LABEL_3277;
          goto LABEL_2863;
        case 0xA:
          if (v1133 > 0xFF || (*(_BYTE *)(*(_QWORD *)(v7 + 104) + v1133) & 0x10) == 0)
            goto LABEL_3277;
          goto LABEL_2863;
        case 0xB:
          if (v1133 <= 0xFF && (*(_BYTE *)(*(_QWORD *)(v7 + 104) + v1133) & 0x10) != 0)
            goto LABEL_3277;
          goto LABEL_2863;
        case 0xC:
          v1339 = (unsigned __int16)*v18;
          if (*v18)
          {
            if ((unint64_t)v1132 >= *v16
              && !*(_DWORD *)(v7 + 244)
              && *v1355 == 2
              && v1133 == *(unsigned __int8 *)(v7 + 252))
            {
              *v1360 = 1;
              if (v1339 > 1)
                return 4294967294;
            }
          }
          goto LABEL_3277;
        case 0xD:
        case 0xE:
          goto LABEL_3277;
        case 0x11:
          v21 = 0;
          if (v1133 <= 132)
          {
            if ((v1133 - 11) >= 2)
            {
              if (v1133 != 10)
              {
                if (v1133 != 13)
                  goto LABEL_2412;
                if ((unint64_t)v1132 < *v16 && *v1132 == 10)
                  *(_QWORD *)(v14 + 80) = v1132 + 1;
              }
LABEL_3277:
              v12 = 0;
              a2 = *(unsigned __int8 **)v14;
              v1313 = -37;
              goto LABEL_3172;
            }
          }
          else if ((v1133 - 8232) >= 2 && v1133 != 133)
          {
            goto LABEL_2412;
          }
          if (*(_WORD *)(v7 + 130) == 2)
            goto LABEL_2863;
          goto LABEL_3277;
        case 0x12:
          v21 = 0;
          if (v1133 < 0x2000)
          {
            if (v1133 <= 159)
            {
              if (v1133 == 9 || v1133 == 32)
                goto LABEL_2412;
            }
            else if (v1133 == 160 || v1133 == 5760 || v1133 == 6158)
            {
              goto LABEL_2412;
            }
          }
          else if (v1133 > 8238)
          {
            v1156 = v1133 == 8239 || v1133 == 8287;
            if (v1156 || v1133 == 12288)
              goto LABEL_2412;
          }
          else if ((v1133 - 0x2000) < 0xB)
          {
            goto LABEL_2412;
          }
          goto LABEL_3277;
        case 0x13:
          v21 = 0;
          if (v1133 < 0x2000)
          {
            if (v1133 <= 159)
            {
              if (v1133 != 9 && v1133 != 32)
                goto LABEL_2412;
            }
            else if (v1133 != 160 && v1133 != 5760 && v1133 != 6158)
            {
              goto LABEL_2412;
            }
          }
          else if (v1133 > 8238)
          {
            v1155 = v1133 == 8239 || v1133 == 8287;
            if (!v1155 && v1133 != 12288)
              goto LABEL_2412;
          }
          else if ((v1133 - 0x2000) >= 0xB)
          {
            goto LABEL_2412;
          }
          goto LABEL_3277;
        case 0x14:
          v21 = 0;
          v1150 = (v1133 - 10) >= 4 && (v1133 - 8232) >= 2;
          if (v1150 && v1133 != 133)
            goto LABEL_3277;
          goto LABEL_2412;
        case 0x15:
          v1237 = (v1133 - 10) >= 4 && (v1133 - 8232) >= 2;
          if (!v1237 || v1133 == 133)
            goto LABEL_3277;
          goto LABEL_2863;
        default:
          return v20;
      }
    case 0xDC:
      if ((_DWORD)v21)
        goto LABEL_2412;
      v1202 = *(unsigned __int8 **)(v14 + 80);
      v660 = v1202 - 1;
      *(_QWORD *)(v14 + 80) = v1202 - 1;
      v1203 = *(v1202 - 1);
      if (!v1363)
        goto LABEL_3152;
      if ((v1203 & 0xC0) == 0x80)
      {
        v1204 = v1202 - 2;
        do
        {
          *(_QWORD *)(v14 + 80) = v1204;
          v1205 = *v1204--;
          v1203 = v1205;
        }
        while ((v1205 & 0xC0) == 0x80);
        v660 = v1204 + 1;
      }
      if (v1203 < 0xC0)
        goto LABEL_3152;
      v1206 = v660[1] & 0x3F;
      if ((v1203 & 0x20) == 0)
      {
        v1203 = v660[1] & 0x3F | ((v1203 & 0x1F) << 6);
        goto LABEL_3152;
      }
      if ((v1203 & 0x10) != 0)
      {
        if ((v1203 & 8) != 0)
        {
          v1280 = v660[2] & 0x3F;
          v1281 = v660[3] & 0x3F;
          v1282 = v660[4] & 0x3F;
          if ((v1203 & 4) == 0)
          {
            v1203 = ((v1203 & 3) << 24) | (v1206 << 18) | (v1280 << 12) | (v1281 << 6) | v1282;
            goto LABEL_3152;
          }
          v1265 = ((v1203 & 1) << 30) | (v1206 << 24) | (v1280 << 18) | (v1281 << 12) | (v1282 << 6);
          v1266 = v660[5];
        }
        else
        {
          v1265 = ((v1203 & 7) << 18) | (v1206 << 12) | ((v660[2] & 0x3F) << 6);
          v1266 = v660[3];
        }
      }
      else
      {
        v1265 = ((v1203 & 0xF) << 12) | (v1206 << 6);
        v1266 = v660[2];
      }
      v1203 = v1265 & 0xFFFFFFC0 | v1266 & 0x3F;
LABEL_3152:
      v780 = *(unsigned __int8 **)(v14 + 8);
      if (v660 <= v780)
        goto LABEL_2409;
      v1283 = BYTE2(_pcre2_ucd_records_8[2 * _pcre2_ucd_stage2_8[v1203 & 0x7F | (_pcre2_ucd_stage1_8[v1203 >> 7] << 7)]]);
      v1284 = v660;
      break;
    case 0xDD:
      if ((_DWORD)v21)
        goto LABEL_2412;
      v1033 = (unsigned __int8 *)(*(_QWORD *)(v14 + 80) - 1);
      do
      {
        *(_QWORD *)(v14 + 80) = v1033;
        v1208 = *v1033--;
        v1207 = v1208;
      }
      while ((v1208 & 0xC0) == 0x80);
      v1034 = v1358;
      if (*(_DWORD *)(v14 + 64) == 17
        && (v1207 == 10 ? (v1209 = (unint64_t)(v1033 + 1) > *(_QWORD *)(v14 + 8)) : (v1209 = 0),
            v1209 && *v1033 == 13))
      {
        *(_QWORD *)(v14 + 80) = v1033;
      }
      else
      {
        ++v1033;
      }
      goto LABEL_2931;
    case 0xDE:
      if ((_DWORD)v21)
        goto LABEL_2412;
      v1210 = *(unsigned __int8 **)(v14 + 80);
      v660 = v1210 - 1;
      *(_QWORD *)(v14 + 80) = v1210 - 1;
      if (v1363 && (*v660 & 0xC0) == 0x80)
      {
        v1211 = v1210 - 2;
        do
        {
          *(_QWORD *)(v14 + 80) = v1211;
          v1212 = *v1211--;
        }
        while ((v1212 & 0xC0) == 0x80);
        v660 = v1211 + 1;
      }
      goto LABEL_1620;
    default:
      if (v1042 == 100)
      {
        if ((_DWORD)v21)
          goto LABEL_2412;
        v1111 = *(_DWORD *)(v14 + 56);
        v1112 = *(_DWORD *)(v14 + 60);
        *(_DWORD *)(v14 + 56) = v1111 + 1;
        if (v1111 < v1112)
        {
          v1055 = *(unsigned __int8 **)(v14 + 80);
          if ((unint64_t)v1055 < *v16)
          {
            *(_QWORD *)(v14 + 80) = v1055 + 1;
            v1113 = *v1055;
            if (v1363 && v1113 >= 0xC0)
            {
              if ((v1113 & 0x20) != 0)
              {
                v1129 = v1055[1] & 0x3F;
                v1050 = v8;
                if ((v1113 & 0x10) != 0)
                {
                  if ((v1113 & 8) != 0)
                  {
                    v1144 = v1055[2] & 0x3F;
                    v1145 = v1055[3] & 0x3F;
                    v1146 = v1055[4] & 0x3F;
                    v1051 = v11;
                    if ((v1113 & 4) != 0)
                    {
                      v1113 = ((v1113 & 1) << 30) | (v1129 << 24) | (v1144 << 18) | (v1145 << 12) | (v1146 << 6) | v1055[5] & 0x3F;
                      v1130 = v1055 + 6;
                    }
                    else
                    {
                      v1113 = ((v1113 & 3) << 24) | (v1129 << 18) | (v1144 << 12) | (v1145 << 6) | v1146;
                      v1130 = v1055 + 5;
                    }
                  }
                  else
                  {
                    v1051 = v11;
                    v1113 = ((v1113 & 7) << 18) | (v1129 << 12) | ((v1055[2] & 0x3F) << 6) | v1055[3] & 0x3F;
                    v1130 = v1055 + 4;
                  }
                }
                else
                {
                  v1051 = v11;
                  v1113 = ((v1113 & 0xF) << 12) | (v1129 << 6) | v1055[2] & 0x3F;
                  v1130 = v1055 + 3;
                }
                *(_QWORD *)(v14 + 80) = v1130;
              }
              else
              {
                v1050 = v8;
                v1051 = v11;
                *(_QWORD *)(v14 + 80) = v1055 + 2;
                v1113 = v1055[1] & 0x3F | ((v1113 & 0x1F) << 6);
              }
            }
            else
            {
              v1050 = v8;
              v1051 = v11;
            }
            v21 = _pcre2_xclass_8(v1113, *(_BYTE **)(v14 + 16));
            if (!(_DWORD)v21)
            {
LABEL_2716:
              v11 = v1051;
              v8 = v1050;
              goto LABEL_2412;
            }
            v11 = v1051;
            v8 = v1050;
            goto LABEL_3236;
          }
LABEL_2617:
          v1114 = (unsigned __int16)*v18;
          if (*v18)
          {
            if ((unint64_t)v1055 > *v15)
            {
              *v1360 = 1;
              if (v1114 > 1)
                return 4294967294;
            }
          }
        }
      }
      else
      {
        if (v1042 != 101)
          return v20;
        if ((_DWORD)v21)
          goto LABEL_2412;
        v1047 = *(unsigned __int8 **)(v14 + 80);
        *(_QWORD *)(v14 + 80) = v1047 - 1;
        if ((unint64_t)v1047 > *(_QWORD *)(v14 + 8))
        {
          if (v1363 && (*(v1047 - 1) & 0xC0) == 0x80)
          {
            v1307 = v1047 - 2;
            do
            {
              *(_QWORD *)(v14 + 80) = v1307;
              v1308 = *v1307--;
            }
            while ((v1308 & 0xC0) == 0x80);
          }
          goto LABEL_3186;
        }
      }
      goto LABEL_2712;
  }
  while (1)
  {
    if (v1363)
    {
      do
      {
        v1286 = *--v1284;
        v1285 = v1286;
      }
      while ((v1286 & 0xC0) == 0x80);
      if (v1285 < 0xC0)
        goto LABEL_3160;
      v1287 = v1284[1] & 0x3F;
      if ((v1285 & 0x20) != 0)
      {
        if ((v1285 & 0x10) == 0)
        {
          v1289 = ((v1285 & 0xF) << 12) | (v1287 << 6);
          v1290 = v1284[2];
LABEL_3170:
          v1285 = v1289 & 0xFFFFFFC0 | v1290 & 0x3F;
          goto LABEL_3160;
        }
        if ((v1285 & 8) == 0)
        {
          v1289 = ((v1285 & 7) << 18) | (v1287 << 12) | ((v1284[2] & 0x3F) << 6);
          v1290 = v1284[3];
          goto LABEL_3170;
        }
        v1291 = v1284[2] & 0x3F;
        v1292 = v1284[3] & 0x3F;
        v1293 = v1284[4] & 0x3F;
        if ((v1285 & 4) != 0)
        {
          v1289 = ((v1285 & 1) << 30) | (v1287 << 24) | (v1291 << 18) | (v1292 << 12) | (v1293 << 6);
          v1290 = v1284[5];
          goto LABEL_3170;
        }
        v1285 = ((v1285 & 3) << 24) | (v1287 << 18) | (v1291 << 12) | (v1292 << 6) | v1293;
      }
      else
      {
        v1285 = v1284[1] & 0x3F | ((v1285 & 0x1F) << 6);
      }
    }
    else
    {
      v1284 = v660 - 1;
      v1285 = *(v660 - 1);
    }
LABEL_3160:
    v1288 = BYTE2(_pcre2_ucd_records_8[2 * _pcre2_ucd_stage2_8[v1285 & 0x7F | (_pcre2_ucd_stage1_8[v1285 >> 7] << 7)]]);
    if (((_pcre2_ucp_gbtable_8[v1288] >> v1283) & 1) == 0)
      goto LABEL_2409;
    *(_QWORD *)(v14 + 80) = v1284;
    v1283 = v1288;
    v660 = v1284;
    if (v1284 <= v780)
    {
      v660 = v1284;
LABEL_2409:
      if (v660 > v780)
      {
        v12 = 0;
        a2 = *(unsigned __int8 **)v14;
        v1313 = -36;
        goto LABEL_3172;
      }
      goto LABEL_2406;
    }
  }
}

uint64_t match_ref(unint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned __int8 **a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  uint64_t result;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned __int8 v24;
  unsigned int v25;
  unsigned __int8 v26;
  _DWORD *v27;
  unsigned int *v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;

  if (*(_QWORD *)(a3 + 120) <= a1 || (v6 = a3 + 8 * a1, v7 = *(_QWORD *)(v6 + 128), v7 == -1))
  {
    if ((*(_BYTE *)(a4 + 233) & 2) != 0)
    {
      v18 = 0;
LABEL_57:
      result = 0;
      *a5 = v18;
      return result;
    }
    return 0xFFFFFFFFLL;
  }
  v8 = *(_QWORD *)(a3 + 80);
  v9 = *(_QWORD *)(a4 + 152);
  v10 = (unsigned __int8 *)(v9 + v7);
  v11 = *(_QWORD *)(v6 + 136);
  v12 = v11 - v7;
  if (a2)
  {
    if ((*(_BYTE *)(a4 + 234) & 8) != 0)
    {
      if (v7 < v11)
      {
        v21 = v9 + v11;
        v22 = *(_QWORD *)(a4 + 160);
        v13 = *(unsigned __int8 **)(a3 + 80);
        while ((unint64_t)v13 < v22)
        {
          v23 = *v13;
          if (v23 < 0xC0)
          {
            ++v13;
          }
          else if ((v23 & 0x20) != 0)
          {
            v30 = v13[1] & 0x3F;
            if ((v23 & 0x10) != 0)
            {
              if ((v23 & 8) != 0)
              {
                v32 = v13[2] & 0x3F;
                v33 = v13[3] & 0x3F;
                v34 = v13[4] & 0x3F;
                if ((v23 & 4) != 0)
                {
                  v23 = ((v23 & 1) << 30) | (v30 << 24) | (v32 << 18) | (v33 << 12) | (v34 << 6) | v13[5] & 0x3F;
                  v13 += 6;
                }
                else
                {
                  v23 = ((v23 & 3) << 24) | (v30 << 18) | (v32 << 12) | (v33 << 6) | v34;
                  v13 += 5;
                }
              }
              else
              {
                v23 = ((v23 & 7) << 18) | (v30 << 12) | ((v13[2] & 0x3F) << 6) | v13[3] & 0x3F;
                v13 += 4;
              }
            }
            else
            {
              v23 = ((v23 & 0xF) << 12) | (v30 << 6) | v13[2] & 0x3F;
              v13 += 3;
            }
          }
          else
          {
            v24 = v13[1];
            v13 += 2;
            v23 = v24 & 0x3F | ((v23 & 0x1F) << 6);
          }
          v25 = *v10;
          if (v25 < 0xC0)
          {
            ++v10;
          }
          else if ((v25 & 0x20) != 0)
          {
            v31 = v10[1] & 0x3F;
            if ((v25 & 0x10) != 0)
            {
              if ((v25 & 8) != 0)
              {
                v35 = v10[2] & 0x3F;
                v36 = v10[3] & 0x3F;
                v37 = v10[4] & 0x3F;
                if ((v25 & 4) != 0)
                {
                  v25 = ((v25 & 1) << 30) | (v31 << 24) | (v35 << 18) | (v36 << 12) | (v37 << 6) | v10[5] & 0x3F;
                  v10 += 6;
                }
                else
                {
                  v25 = ((v25 & 3) << 24) | (v31 << 18) | (v35 << 12) | (v36 << 6) | v37;
                  v10 += 5;
                }
              }
              else
              {
                v25 = ((v25 & 7) << 18) | (v31 << 12) | ((v10[2] & 0x3F) << 6) | v10[3] & 0x3F;
                v10 += 4;
              }
            }
            else
            {
              v25 = ((v25 & 0xF) << 12) | (v31 << 6) | v10[2] & 0x3F;
              v10 += 3;
            }
          }
          else
          {
            v26 = v10[1];
            v10 += 2;
            v25 = v26 & 0x3F | ((v25 & 0x1F) << 6);
          }
          if (v23 != v25)
          {
            v27 = &_pcre2_ucd_records_8[2 * _pcre2_ucd_stage2_8[v25 & 0x7F | (_pcre2_ucd_stage1_8[v25 >> 7] << 7)]];
            if (v23 != v27[1] + v25)
            {
              v28 = (unsigned int *)((char *)&_pcre2_ucd_caseless_sets_8 + 4 * *((unsigned __int8 *)v27 + 3));
              do
              {
                v29 = *v28;
                if (v23 < *v28)
                  return 0xFFFFFFFFLL;
                ++v28;
              }
              while (v23 != v29);
            }
          }
          if ((unint64_t)v10 >= v21)
            goto LABEL_56;
        }
        return 1;
      }
    }
    else if (v12)
    {
      v13 = (unsigned __int8 *)(v8 + v12);
      v14 = v7 - v11;
      v15 = *(unsigned __int8 **)(a3 + 80);
      while ((unint64_t)v15 < *(_QWORD *)(a4 + 160))
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(a4 + 88) + *v10) != *(unsigned __int8 *)(*(_QWORD *)(a4 + 88) + *v15))
          return 0xFFFFFFFFLL;
        ++v10;
        ++v15;
        v16 = __CFADD__(v14++, 1);
        if (v16)
          goto LABEL_56;
      }
      return 1;
    }
    goto LABEL_55;
  }
  if (*(_WORD *)(a4 + 128))
  {
    if (v12)
    {
      v13 = (unsigned __int8 *)(v8 + v12);
      v19 = v7 - v11;
      v20 = *(unsigned __int8 **)(a3 + 80);
      while ((unint64_t)v20 < *(_QWORD *)(a4 + 160))
      {
        if (*v10 != *v20)
          return 0xFFFFFFFFLL;
        ++v20;
        ++v10;
        v16 = __CFADD__(v19++, 1);
        if (v16)
          goto LABEL_56;
      }
      return 1;
    }
LABEL_55:
    v13 = *(unsigned __int8 **)(a3 + 80);
LABEL_56:
    v18 = &v13[-v8];
    goto LABEL_57;
  }
  if (*(_QWORD *)(a4 + 160) - v8 >= v12)
  {
    if (!cstdlib_memcmp(v10, *(const void **)(a3 + 80), v11 - v7))
    {
      v13 = (unsigned __int8 *)(v8 + v12);
      goto LABEL_56;
    }
    return 0xFFFFFFFFLL;
  }
  return 1;
}

uint64_t do_callout_0(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD);
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_BYTE **)a1;
  if (**(_BYTE **)a1 == 118)
    v5 = 6;
  else
    v5 = __rev16(*(unsigned __int16 *)(v4 + 5));
  *a3 = v5;
  v6 = (uint64_t (*)(uint64_t, _QWORD))a2[34];
  if (!v6)
    return 0;
  v7 = a2[32];
  v8 = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(v7 + 8) = (*(_DWORD *)(a1 + 120) >> 1) + 1;
  *(_DWORD *)(v7 + 12) = v8;
  v9 = a2[25];
  *(_QWORD *)(v7 + 16) = a1 + 112;
  *(_QWORD *)(v7 + 24) = v9;
  *(_QWORD *)(v7 + 56) = *(_QWORD *)(a1 + 80) - a2[19];
  *(_QWORD *)(v7 + 64) = __rev16(*(unsigned __int16 *)(v4 + 1));
  *(_QWORD *)(v7 + 72) = __rev16(*(unsigned __int16 *)(v4 + 3));
  if (*v4 == 118)
  {
    v10 = 0;
    v11 = 0;
    *(_DWORD *)(v7 + 4) = v4[5];
    *(_QWORD *)(v7 + 80) = 0;
  }
  else
  {
    *(_DWORD *)(v7 + 4) = 0;
    *(_QWORD *)(v7 + 80) = __rev16(*(unsigned __int16 *)(v4 + 7));
    v10 = v4 + 10;
    v11 = *a3 - 11;
  }
  *(_QWORD *)(v7 + 88) = v11;
  *(_QWORD *)(v7 + 96) = v10;
  v13 = *(_QWORD *)(a1 + 112);
  v14 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = -1;
  *(_QWORD *)(a1 + 120) = -1;
  result = v6(v7, a2[33]);
  *(_QWORD *)(a1 + 112) = v13;
  *(_QWORD *)(a1 + 120) = v14;
  *(_DWORD *)(v7 + 104) = 0;
  return result;
}

_QWORD *pcre2_match_data_create_8(unsigned int a1, __int128 *a2)
{
  int v2;
  _QWORD *result;

  if (a1 <= 1)
    v2 = 1;
  else
    v2 = a1;
  result = _pcre2_memctl_malloc_8(8 * (2 * v2) + 80, a2);
  if (result)
    *((_WORD *)result + 37) = v2;
  return result;
}

_QWORD *pcre2_match_data_create_from_pattern_8(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  _QWORD *result;

  if (!a2)
    a2 = (__int128 *)a1;
  v2 = *(unsigned __int16 *)(a1 + 128) + 1;
  result = _pcre2_memctl_malloc_8(16 * v2 + 80, a2);
  if (result)
    *((_WORD *)result + 37) = v2;
  return result;
}

uint64_t pcre2_match_data_free_8(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 8))(result, *(_QWORD *)(result + 16));
  return result;
}

uint64_t pcre2_get_mark_8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t pcre2_get_ovector_pointer_8(uint64_t a1)
{
  return a1 + 80;
}

uint64_t pcre2_get_ovector_count_8(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 74);
}

uint64_t pcre2_get_startchar_8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t _pcre2_is_newline_8(unsigned __int8 *a1, int a2, uint64_t a3, int *a4, int a5)
{
  int v5;
  int v6;
  int v7;
  unsigned __int8 v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v5 = *a1;
  if (a5 && v5 >= 0xC0)
  {
    v6 = a1[1] & 0x3F;
    if ((v5 & 0x20) == 0)
    {
      v5 = a1[1] & 0x3F | ((v5 & 0x1F) << 6);
      goto LABEL_13;
    }
    if ((v5 & 0x10) != 0)
    {
      if ((v5 & 8) != 0)
      {
        v9 = a1[2] & 0x3F;
        v10 = a1[3] & 0x3F;
        v11 = a1[4] & 0x3F;
        if ((v5 & 4) == 0)
        {
          v5 = ((v5 & 3) << 24) | (v6 << 18) | (v9 << 12) | (v10 << 6) | v11;
          goto LABEL_13;
        }
        v7 = ((v5 & 1) << 30) | (v6 << 24) | (v9 << 18) | (v10 << 12) | (v11 << 6);
        v8 = a1[5];
      }
      else
      {
        v7 = ((v5 & 7) << 18) | (v6 << 12) | ((a1[2] & 0x3F) << 6);
        v8 = a1[3];
      }
    }
    else
    {
      v7 = ((v5 & 0xF) << 12) | (v6 << 6);
      v8 = a1[2];
    }
    v5 = v7 & 0xFFFFFFC0 | v8 & 0x3F;
  }
LABEL_13:
  if (a2 != 2)
  {
    v12 = 0;
    if (v5 > 132)
    {
      if ((v5 - 8232) >= 2)
      {
        if (v5 != 133)
          return v12;
        if (a5)
          v13 = 2;
        else
          v13 = 1;
      }
      else
      {
        v13 = 3;
      }
LABEL_31:
      *a4 = v13;
      return 1;
    }
    if ((v5 - 10) >= 3)
    {
      if (v5 != 13)
        return v12;
      goto LABEL_23;
    }
LABEL_19:
    v13 = 1;
    goto LABEL_31;
  }
  if (v5 == 10)
    goto LABEL_19;
  if (v5 == 13)
  {
LABEL_23:
    v13 = 1;
    if (a3 - 1 > (unint64_t)a1)
    {
      if (a1[1] == 10)
        v13 = 2;
      else
        v13 = 1;
    }
    goto LABEL_31;
  }
  return 0;
}

uint64_t _pcre2_was_newline_8(_BYTE *a1, int a2, unint64_t a3, int *a4, int a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;

  if (!a5)
  {
    v8 = *--a1;
    v5 = v8;
    goto LABEL_15;
  }
  do
  {
    v6 = *--a1;
    v5 = v6;
  }
  while ((v6 & 0xC0) == 0x80);
  if (v5 >= 0xC0)
  {
    v7 = a1[1] & 0x3F;
    if ((v5 & 0x20) == 0)
    {
      v5 = a1[1] & 0x3F | ((v5 & 0x1F) << 6);
      goto LABEL_15;
    }
    if ((v5 & 0x10) != 0)
    {
      if ((v5 & 8) != 0)
      {
        v11 = a1[2] & 0x3F;
        v12 = a1[3] & 0x3F;
        v13 = a1[4] & 0x3F;
        if ((v5 & 4) == 0)
        {
          v5 = ((v5 & 3) << 24) | (v7 << 18) | (v11 << 12) | (v12 << 6) | v13;
          goto LABEL_15;
        }
        v9 = ((v5 & 1) << 30) | (v7 << 24) | (v11 << 18) | (v12 << 12) | (v13 << 6);
        v10 = a1[5];
      }
      else
      {
        v9 = ((v5 & 7) << 18) | (v7 << 12) | ((a1[2] & 0x3F) << 6);
        v10 = a1[3];
      }
    }
    else
    {
      v9 = ((v5 & 0xF) << 12) | (v7 << 6);
      v10 = a1[2];
    }
    v5 = v9 & 0xFFFFFFC0 | v10 & 0x3F;
  }
LABEL_15:
  if (a2 != 2)
  {
    v14 = 0;
    if (v5 > 132)
    {
      if ((v5 - 8232) >= 2)
      {
        if (v5 != 133)
          return v14;
        if (a5)
          v15 = 2;
        else
          v15 = 1;
      }
      else
      {
        v15 = 3;
      }
LABEL_33:
      *a4 = v15;
      return 1;
    }
    if ((v5 - 11) >= 3)
    {
      if (v5 != 10)
        return v14;
      goto LABEL_25;
    }
LABEL_21:
    v15 = 1;
    goto LABEL_33;
  }
  if (v5 == 13)
    goto LABEL_21;
  if (v5 == 10)
  {
LABEL_25:
    v15 = 1;
    if ((unint64_t)a1 > a3)
    {
      if (*(a1 - 1) == 13)
        v15 = 2;
      else
        v15 = 1;
    }
    goto LABEL_33;
  }
  return 0;
}

uint64_t _pcre2_ord2utf_8(unsigned int a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  unsigned int v4;

  v2 = 0;
  while (_pcre2_utf8_table1[v2] < (signed int)a1)
  {
    if (++v2 == 6)
    {
      LODWORD(v2) = 6;
      break;
    }
  }
  v3 = (_BYTE *)(a2 + v2);
  if ((int)v2 >= 1)
  {
    v4 = v2 + 1;
    do
    {
      *v3-- = a1 & 0x3F | 0x80;
      a1 >>= 6;
      --v4;
    }
    while (v4 > 1);
  }
  *v3 = _pcre2_utf8_table2[4 * v2] | a1;
  return (v2 + 1);
}

uint64_t pcre2_pattern_info_8(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t result;
  unsigned int v4;
  int v5;
  uint64_t v6;
  int v7;

  if (!a3 && a2 < 0x1B)
    return dword_214F462B8[a2];
  if (!a1)
    return 4294967245;
  if (*(_DWORD *)(a1 + 80) != 1346589253)
    return 4294967265;
  v4 = *(_DWORD *)(a1 + 96);
  if ((v4 & 1) == 0)
    return 4294967264;
  switch(a2)
  {
    case 0u:
      v5 = *(_DWORD *)(a1 + 88);
      goto LABEL_49;
    case 1u:
      v5 = *(_DWORD *)(a1 + 84);
      goto LABEL_49;
    case 2u:
      v5 = *(unsigned __int16 *)(a1 + 130);
      goto LABEL_49;
    case 3u:
      v5 = *(unsigned __int16 *)(a1 + 120);
      goto LABEL_49;
    case 4u:
      v5 = *(unsigned __int16 *)(a1 + 128);
      goto LABEL_49;
    case 5u:
      if ((v4 & 0x10) == 0)
        goto LABEL_23;
      v5 = *(_DWORD *)(a1 + 112);
      goto LABEL_49;
    case 6u:
      if ((v4 & 0x10) != 0)
        v5 = 1;
      else
        v5 = (v4 >> 8) & 2;
      goto LABEL_49;
    case 7u:
      if ((v4 & 0x40) != 0)
        v6 = a1 + 40;
      else
        v6 = 0;
      goto LABEL_45;
    case 8u:
      v5 = (v4 >> 11) & 1;
      goto LABEL_49;
    case 9u:
      v5 = (v4 >> 10) & 1;
      goto LABEL_49;
    case 0xAu:
      *a3 = 0;
      goto LABEL_50;
    case 0xBu:
      if ((v4 & 0x80) != 0)
        v5 = *(_DWORD *)(a1 + 116);
      else
LABEL_23:
        v5 = 0;
      goto LABEL_49;
    case 0xCu:
      v5 = (v4 >> 7) & 1;
      goto LABEL_49;
    case 0xDu:
      v5 = (v4 >> 13) & 1;
      goto LABEL_49;
    case 0xEu:
      *(_DWORD *)a3 = *(_DWORD *)(a1 + 104);
      v7 = *(_DWORD *)(a1 + 104);
      goto LABEL_42;
    case 0xFu:
      v5 = *(unsigned __int16 *)(a1 + 124);
      goto LABEL_49;
    case 0x10u:
      v5 = *(unsigned __int16 *)(a1 + 126);
      goto LABEL_49;
    case 0x11u:
      v5 = *(unsigned __int16 *)(a1 + 134);
      goto LABEL_49;
    case 0x12u:
      v5 = *(unsigned __int16 *)(a1 + 132);
      goto LABEL_49;
    case 0x13u:
      v6 = a1 + 136;
      goto LABEL_45;
    case 0x14u:
      v5 = *(unsigned __int16 *)(a1 + 122);
      goto LABEL_49;
    case 0x15u:
      *(_DWORD *)a3 = *(_DWORD *)(a1 + 108);
      v7 = *(_DWORD *)(a1 + 108);
      goto LABEL_42;
    case 0x16u:
      v6 = *(_QWORD *)(a1 + 72);
      goto LABEL_45;
    case 0x17u:
      v5 = (v4 >> 22) & 1;
      goto LABEL_49;
    case 0x18u:
      v6 = 16 * *(unsigned __int16 *)(a1 + 128) + 128;
LABEL_45:
      *a3 = v6;
      goto LABEL_50;
    case 0x19u:
      *(_DWORD *)a3 = *(_DWORD *)(a1 + 100);
      v7 = *(_DWORD *)(a1 + 100);
LABEL_42:
      if (v7 != -1)
        goto LABEL_50;
      result = 4294967241;
      break;
    case 0x1Au:
      v5 = *(_DWORD *)(a1 + 92);
LABEL_49:
      *(_DWORD *)a3 = v5;
LABEL_50:
      result = 0;
      break;
    default:
      result = 4294967262;
      break;
  }
  return result;
}

uint64_t pcre2_callout_enumerate_8(uint64_t a1, uint64_t (*a2)(__int128 *, uint64_t), uint64_t a3)
{
  uint64_t result;
  int v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unsigned __int8 *v16;

  if (!a1)
    return 4294967245;
  if (*(_DWORD *)(a1 + 80) != 1346589253)
    return 4294967265;
  if ((*(_BYTE *)(a1 + 96) & 1) != 0)
  {
    v6 = *(_DWORD *)(a1 + 88);
    v16 = 0;
    v14 = 0u;
    v15 = 0u;
    v13 = 0u;
    v7 = (unsigned __int8 *)(a1
                           + *(unsigned __int16 *)(a1 + 132) * (unint64_t)*(unsigned __int16 *)(a1 + 134)
                           + 136);
    while (1)
    {
      while (1)
      {
        result = *v7;
        if ((result - 29) >= 0x38)
          break;
        v7 += _pcre2_OP_lengths_8[result];
        if ((v6 & 0x80000) != 0)
        {
          v8 = *(v7 - 1);
          if (v8 >= 0xC0)
            v7 += _pcre2_utf8_table4[v8 & 0x3F];
        }
      }
      switch(*v7)
      {
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case '[':
        case '\\':
        case ']':
        case '^':
        case '_':
        case 'a':
          v7 += 2 * (v7[_pcre2_OP_lengths_8[result] - 1] - 15 < 2) + _pcre2_OP_lengths_8[result];
          continue;
        case 'b':
        case 'c':
        case 'd':
        case 'e':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'n':
        case 'o':
        case 'q':
        case 'r':
        case 's':
        case 't':
        case 'u':
          goto LABEL_27;
        case 'p':
          v10 = *(unsigned __int16 *)(v7 + 1);
          goto LABEL_25;
        case 'v':
          v11 = __rev16(*(unsigned __int16 *)(v7 + 3));
          *((_QWORD *)&v13 + 1) = __rev16(*(unsigned __int16 *)(v7 + 1));
          *(_QWORD *)&v14 = v11;
          DWORD2(v14) = v7[5];
          v16 = 0;
          v15 = 0uLL;
          result = a2(&v13, a3);
          if ((_DWORD)result)
            return result;
          v7 += _pcre2_OP_lengths_8[*v7];
          continue;
        case 'w':
          v12 = __rev16(*(unsigned __int16 *)(v7 + 3));
          *((_QWORD *)&v13 + 1) = __rev16(*(unsigned __int16 *)(v7 + 1));
          *(_QWORD *)&v14 = v12;
          DWORD2(v14) = 0;
          LODWORD(v12) = __rev16(*(unsigned __int16 *)(v7 + 5));
          *(_QWORD *)&v15 = __rev16(*(unsigned __int16 *)(v7 + 7));
          *((_QWORD *)&v15 + 1) = (v12 - 11);
          v16 = v7 + 10;
          result = a2(&v13, a3);
          if ((_DWORD)result)
            return result;
          v10 = *(unsigned __int16 *)(v7 + 5);
LABEL_25:
          v7 += __rev16(v10);
          continue;
        default:
          if ((result - 150) > 8 || ((1 << (result + 106)) & 0x155) == 0)
          {
            if (!*v7)
              return result;
LABEL_27:
            v7 += _pcre2_OP_lengths_8[result];
          }
          else
          {
            v7 += v7[1] + (unint64_t)_pcre2_OP_lengths_8[result];
          }
          break;
      }
    }
  }
  return 4294967264;
}

uint64_t pcre2_serialize_encode_8(size_t **a1, uint64_t a2, _QWORD *a3, uint64_t *a4, __int128 *a5)
{
  __int128 *v6;
  uint64_t result;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t **v15;
  size_t *v16;
  char *v17;
  char *v18;
  _DWORD *v19;
  _DWORD *v20;
  size_t *v21;

  if (a5)
    v6 = a5;
  else
    v6 = &_pcre2_default_compile_context_8;
  result = 4294967245;
  if (a1 && a3 && a4)
  {
    if ((int)a2 < 1)
    {
      return 4294967267;
    }
    else
    {
      v11 = 0;
      v12 = a2;
      v13 = 1104;
      v14 = a2;
      v15 = a1;
      do
      {
        v16 = *v15;
        if (!*v15)
          return 4294967245;
        if (*((_DWORD *)v16 + 20) != 1346589253)
          return 4294967265;
        if (v11)
        {
          if (v11 != (const void *)v16[3])
            return 4294967266;
        }
        else
        {
          v11 = (const void *)v16[3];
        }
        v13 += v16[9];
        ++v15;
        --v14;
      }
      while (v14);
      v17 = (char *)(*(uint64_t (**)(uint64_t, _QWORD))v6)(v13 + 24, *((_QWORD *)v6 + 2));
      if (v17)
      {
        v18 = v17;
        cstdlib_memcpy(v17, v6, 0x18uLL);
        *((_QWORD *)v18 + 3) = 0x20000A50523253;
        v19 = v18 + 24;
        v19[2] = 526337;
        v19[3] = a2;
        cstdlib_memcpy(v19 + 4, v11, 0x440uLL);
        v20 = v19 + 276;
        do
        {
          v21 = *a1++;
          cstdlib_memcpy(v20, v21, v21[9]);
          cstdlib_memset(v20, 0, 0x18uLL);
          cstdlib_memset(v20 + 6, 0, 8uLL);
          cstdlib_memset(v20 + 8, 0, 8uLL);
          v20 = (_DWORD *)((char *)v20 + v21[9]);
          --v12;
        }
        while (v12);
        *a3 = v19;
        *a4 = v13;
        return a2;
      }
      else
      {
        return 4294967248;
      }
    }
  }
  return result;
}

uint64_t pcre2_serialize_decode_8(uint64_t a1, int a2, _DWORD *a3, __int128 *a4)
{
  __int128 *v4;
  uint64_t v5;
  int v7;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t i;
  size_t __dst;

  if (a4)
    v4 = a4;
  else
    v4 = &_pcre2_default_compile_context_8;
  v5 = 4294967245;
  if (a1 && a3)
  {
    if (a2 < 1)
    {
      return 4294967267;
    }
    else
    {
      v7 = a3[3];
      if (v7 < 1)
        return 4294967234;
      if (*a3 == 1347564115)
      {
        if (a3[1] == 2097162 && a3[2] == 526337)
        {
          if (v7 >= a2)
            v5 = a2;
          else
            v5 = v7;
          v10 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))v4)(1096, *((_QWORD *)v4 + 2));
          if (!v10)
            return 4294967248;
          v11 = v10;
          cstdlib_memcpy(v10, a3 + 4, 0x440uLL);
          v12 = 0;
          v11[136] = v5;
          v13 = a3 + 276;
          while (1)
          {
            __dst = 0;
            cstdlib_memcpy(&__dst, v13 + 18, 8uLL);
            if (__dst < 0x89)
              break;
            v14 = _pcre2_memctl_malloc_8(__dst, a4);
            if (!v14)
            {
              (*((void (**)(_QWORD *, _QWORD))v4 + 1))(v11, *((_QWORD *)v4 + 2));
              if (v12)
              {
                for (i = 0; i != v12; ++i)
                {
                  (*((void (**)(_QWORD, _QWORD))v4 + 1))(*(_QWORD *)(a1 + 8 * i), *((_QWORD *)v4 + 2));
                  *(_QWORD *)(a1 + 8 * i) = 0;
                }
              }
              return 4294967248;
            }
            v15 = v14;
            cstdlib_memcpy(v14 + 3, v13 + 6, __dst - 24);
            if (*((_DWORD *)v15 + 20) != 1346589253
              || *((unsigned __int16 *)v15 + 66) > 0x23u
              || *((unsigned __int16 *)v15 + 67) >= 0x2711u)
            {
              (*((void (**)(_QWORD *, _QWORD))v4 + 1))(v15, *((_QWORD *)v4 + 2));
              return 4294967234;
            }
            v15[3] = v11;
            v15[4] = 0;
            *((_DWORD *)v15 + 24) |= 0x40000u;
            *(_QWORD *)(a1 + 8 * v12) = v15;
            v13 = (_DWORD *)((char *)v13 + __dst);
            if (v5 == ++v12)
              return v5;
          }
          return 4294967234;
        }
        return 4294967264;
      }
      else
      {
        return 4294967265;
      }
    }
  }
  return v5;
}

uint64_t pcre2_serialize_get_number_of_codes_8(_DWORD *a1)
{
  if (!a1)
    return 4294967245;
  if (*a1 != 1347564115)
    return 4294967265;
  if (a1[1] == 2097162 && a1[2] == 526337)
    return a1[3];
  return 4294967264;
}

uint64_t pcre2_serialize_free_8(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result - 16))(result - 24, *(_QWORD *)(result - 8));
  return result;
}

uint64_t _pcre2_strcmp_8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;

  do
  {
    v2 = *a1;
    v3 = *a2;
    if (!(v2 | v3))
      return 0;
    ++a1;
    ++a2;
  }
  while (v2 == v3);
  if (v2 > v3)
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t _pcre2_strcmp_c8_8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;

  do
  {
    v2 = *a1;
    v3 = *a2;
    if (!(v2 | v3))
      return 0;
    ++a1;
    ++a2;
  }
  while (v2 == v3);
  if (v2 > v3)
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t _pcre2_strncmp_8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;

  if (!a3)
    return 0;
  while (1)
  {
    v3 = *a1;
    v4 = *a2;
    if (v3 != v4)
      break;
    ++a2;
    ++a1;
    if (!--a3)
      return 0;
  }
  if (v3 > v4)
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t _pcre2_strncmp_c8_8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;

  if (!a3)
    return 0;
  while (1)
  {
    v3 = *a1;
    v4 = *a2;
    if (v3 != v4)
      break;
    ++a2;
    ++a1;
    if (!--a3)
      return 0;
  }
  if (v3 > v4)
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t _pcre2_strlen_8(_BYTE *a1)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t result;

  if (!*a1)
    return 0;
  v1 = 0;
  v2 = a1 + 1;
  do
    result = v1 + 1;
  while (v2[v1++]);
  return result;
}

_BYTE *_pcre2_strcpy_c8_8(_BYTE *a1, _BYTE *a2)
{
  char v2;
  _BYTE *v3;
  unsigned __int8 *v4;
  int v5;

  v2 = *a2;
  v3 = a1;
  if (*a2)
  {
    v4 = a2 + 1;
    v3 = a1;
    do
    {
      *v3++ = v2;
      v5 = *v4++;
      v2 = v5;
    }
    while (v5);
  }
  *v3 = 0;
  return (_BYTE *)(v3 - a1);
}

uint64_t _pcre2_study_8(uint64_t a1)
{
  int v2;
  char *v3;
  int v4;
  int minlength;
  int started;
  __int16 v8;
  int v9;
  int v10[129];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v2 = (*(_DWORD *)(a1 + 88) >> 19) & 1;
  v3 = (char *)(a1 + *(unsigned __int16 *)(a1 + 134) * (unint64_t)*(unsigned __int16 *)(a1 + 132) + 136);
  v4 = *(_DWORD *)(a1 + 96);
  if ((v4 & 0x210) == 0)
  {
    started = set_start_bits(a1, (unsigned __int8 *)(a1+ *(unsigned __int16 *)(a1 + 134) * (unint64_t)*(unsigned __int16 *)(a1 + 132)+ 136), (*(_DWORD *)(a1 + 88) >> 19) & 1);
    if (started == 1)
    {
      v4 = *(_DWORD *)(a1 + 96) | 0x40;
      *(_DWORD *)(a1 + 96) = v4;
    }
    else
    {
      if (started == 3)
        return 1;
      v4 = *(_DWORD *)(a1 + 96);
    }
  }
  if ((v4 & 0x2000) == 0 && *(unsigned __int16 *)(a1 + 130) <= 0x80u)
  {
    v10[0] = 0;
    minlength = find_minlength(a1, v3, (unsigned __int8 *)v3, v2, 0, &v9, v10);
    if (minlength != -1)
    {
      if (minlength == -2)
        return 2;
      if (minlength == -3)
        return 3;
      if (minlength >= 0xFFFF)
        v8 = -1;
      else
        v8 = minlength;
      *(_WORD *)(a1 + 126) = v8;
    }
  }
  return 0;
}

uint64_t set_start_bits(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 *v4;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  unsigned __int8 *v14;
  int v15;
  uint64_t result;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  char v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v27;
  int v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned __int8 *v53;
  uint64_t v54;
  int v55;
  void *__b;
  _BYTE v57[6];

  v4 = a2;
  if ((_DWORD)a3)
    v6 = 16;
  else
    v6 = 32;
  v7 = *a2;
  __b = (void *)(a1 + 65);
  v8 = a1 + 40;
  v9 = 1;
LABEL_5:
  v10 = v7 - 133;
  v11 = v10 > 6;
  v12 = (1 << v10) & 0x63;
  if (v11 || v12 == 0)
    v14 = v4 + 3;
  else
    v14 = v4 + 5;
  while (2)
  {
    v15 = *v14;
    result = 3;
    v17 = 0;
    v18 = 2;
    switch(*v14)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x12u:
      case 0x14u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Cu:
      case 0x1Fu:
      case 0x20u:
      case 0x3Bu:
      case 0x3Cu:
      case 0x3Du:
      case 0x3Eu:
      case 0x3Fu:
      case 0x40u:
      case 0x41u:
      case 0x42u:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x4Bu:
      case 0x4Cu:
      case 0x4Du:
      case 0x4Eu:
      case 0x4Fu:
      case 0x50u:
      case 0x51u:
      case 0x52u:
      case 0x53u:
      case 0x54u:
      case 0x71u:
      case 0x72u:
      case 0x73u:
      case 0x74u:
      case 0x75u:
      case 0x7Du:
      case 0x87u:
      case 0x8Cu:
      case 0x8Du:
      case 0x8Eu:
      case 0x8Fu:
      case 0x90u:
      case 0x91u:
      case 0x92u:
      case 0x96u:
      case 0x97u:
      case 0x98u:
      case 0x99u:
      case 0x9Au:
      case 0x9Bu:
      case 0x9Cu:
      case 0x9Du:
      case 0x9Eu:
      case 0x9Fu:
      case 0xA0u:
      case 0xA1u:
      case 0xA2u:
        return 0;
      case 4u:
      case 5u:
      case 0x57u:
      case 0x58u:
      case 0x5Fu:
        ++v14;
        continue;
      case 6u:
        v41 = 0;
        v42 = *(_QWORD *)(a1 + 24);
        do
        {
          *(_BYTE *)(v8 + v41) |= ~*(_BYTE *)(v42 + (v41 + 576));
          ++v41;
        }
        while (v6 != v41);
        goto LABEL_101;
      case 7u:
        v43 = a1;
        v44 = 64;
        goto LABEL_104;
      case 8u:
        v45 = 0;
        v46 = *(_QWORD *)(a1 + 24);
        do
        {
          *(_BYTE *)(v8 + v45) |= ~*(_BYTE *)(v46 + (v45 + 512));
          ++v45;
        }
        while (v6 != v45);
        goto LABEL_101;
      case 9u:
        v43 = a1;
        v44 = 0;
        goto LABEL_104;
      case 0xAu:
        v47 = 0;
        v48 = *(_QWORD *)(a1 + 24);
        do
        {
          *(_BYTE *)(v8 + v47) |= ~*(_BYTE *)(v48 + (v47 + 672));
          ++v47;
        }
        while (v6 != v47);
LABEL_101:
        if ((_DWORD)a3)
          *(_QWORD *)(a1 + 64) = -1;
        goto LABEL_123;
      case 0xBu:
        v43 = a1;
        v44 = 160;
LABEL_104:
        set_type_bits(v43, v44, v6);
        goto LABEL_123;
      case 0x10u:
        if (v14[1] == 9)
        {
          v49 = v14[2];
          v50 = _pcre2_ucd_caseless_sets_8[v49];
          if (v50 != -1)
          {
            v51 = &_pcre2_ucd_caseless_sets_8[v49 + 1];
            while (!(_DWORD)a3)
            {
              if (v50 < 0x100)
                goto LABEL_112;
              *(_BYTE *)(a1 + 71) |= 0x80u;
LABEL_113:
              v52 = *v51++;
              v50 = v52;
              if (v52 == -1)
                goto LABEL_123;
            }
            _pcre2_ord2utf_8(v50, (uint64_t)v57);
            v50 = v57[0];
LABEL_112:
            *(_BYTE *)(a1 + (v50 >> 3) + 40) |= 1 << (v50 & 7);
            goto LABEL_113;
          }
LABEL_123:
          v18 = v9;
LABEL_124:
          v4 += __rev16(*(unsigned __int16 *)(v4 + 1));
          v7 = 120;
          v9 = v18;
          result = v18;
          if (*v4 != 120)
            return result;
          goto LABEL_5;
        }
        return 0;
      case 0x11u:
      case 0x15u:
        *(_BYTE *)(a1 + 41) |= 0x3Cu;
        if ((_DWORD)a3)
        {
          *(_BYTE *)(a1 + 64) |= 4u;
          v40 = *(_BYTE *)(a1 + 68) | 4;
          goto LABEL_117;
        }
        *(_BYTE *)(a1 + 56) |= 0x20u;
        goto LABEL_123;
      case 0x13u:
        *(_BYTE *)(a1 + 41) |= 2u;
        *(_BYTE *)(a1 + 44) |= 1u;
        if ((_DWORD)a3)
        {
          *(_BYTE *)(a1 + 64) |= 4u;
          v40 = *(_BYTE *)(a1 + 68) | 0xE;
LABEL_117:
          *(_BYTE *)(a1 + 68) = v40;
        }
        else
        {
          *(_BYTE *)(a1 + 60) |= 1u;
        }
        goto LABEL_123;
      case 0x1Bu:
        v22 = 1;
        goto LABEL_60;
      case 0x1Du:
      case 0x23u:
      case 0x24u:
      case 0x2Bu:
        goto LABEL_119;
      case 0x1Eu:
      case 0x30u:
      case 0x31u:
      case 0x38u:
        goto LABEL_121;
      case 0x21u:
      case 0x22u:
      case 0x25u:
      case 0x26u:
      case 0x2Au:
      case 0x2Cu:
        v19 = v14 + 1;
        goto LABEL_23;
      case 0x27u:
      case 0x28u:
      case 0x2Du:
        v19 = v14 + 3;
LABEL_23:
        v14 = set_table_bit(a1, v19, 0, a3);
        continue;
      case 0x29u:
        v14 += 2;
LABEL_119:
        v53 = v14 + 1;
        v54 = a1;
        v55 = 0;
        goto LABEL_122;
      case 0x2Eu:
      case 0x2Fu:
      case 0x32u:
      case 0x33u:
      case 0x37u:
      case 0x39u:
        v20 = v14 + 1;
        goto LABEL_25;
      case 0x34u:
      case 0x35u:
      case 0x3Au:
        v20 = v14 + 3;
LABEL_25:
        v14 = set_table_bit(a1, v20, 1, a3);
        continue;
      case 0x36u:
        v14 += 2;
LABEL_121:
        v53 = v14 + 1;
        v54 = a1;
        v55 = 1;
LABEL_122:
        set_table_bit(v54, v53, v55, a3);
        goto LABEL_123;
      case 0x55u:
      case 0x56u:
      case 0x59u:
      case 0x5Au:
      case 0x5Eu:
      case 0x60u:
        goto LABEL_27;
      case 0x5Bu:
      case 0x5Cu:
      case 0x61u:
        v14 += 2;
LABEL_27:
        result = 0;
        switch(v14[1])
        {
          case 6u:
            v30 = 0;
            v31 = *(_QWORD *)(a1 + 24);
            do
            {
              *(_BYTE *)(v8 + v30) |= ~*(_BYTE *)(v31 + (v30 + 576));
              ++v30;
            }
            while (v6 != v30);
            goto LABEL_74;
          case 7u:
            v32 = a1;
            v33 = 64;
            goto LABEL_77;
          case 8u:
            v34 = 0;
            v35 = *(_QWORD *)(a1 + 24);
            do
            {
              *(_BYTE *)(v8 + v34) |= ~*(_BYTE *)(v35 + (v34 + 512));
              ++v34;
            }
            while (v6 != v34);
            goto LABEL_74;
          case 9u:
            v32 = a1;
            v33 = 0;
            goto LABEL_77;
          case 0xAu:
            v36 = 0;
            v37 = *(_QWORD *)(a1 + 24);
            do
            {
              *(_BYTE *)(v8 + v36) |= ~*(_BYTE *)(v37 + (v36 + 672));
              ++v36;
            }
            while (v6 != v36);
LABEL_74:
            if ((_DWORD)a3)
              *(_QWORD *)(a1 + 64) = -1;
            break;
          case 0xBu:
            v32 = a1;
            v33 = 160;
LABEL_77:
            set_type_bits(v32, v33, v6);
            break;
          case 0x11u:
          case 0x15u:
            *(_BYTE *)(a1 + 41) |= 0x3Cu;
            if ((_DWORD)a3)
            {
              *(_BYTE *)(a1 + 64) |= 4u;
              v21 = *(_BYTE *)(a1 + 68) | 4;
              goto LABEL_80;
            }
            *(_BYTE *)(a1 + 56) |= 0x20u;
            break;
          case 0x13u:
            *(_BYTE *)(a1 + 41) |= 2u;
            *(_BYTE *)(a1 + 44) |= 1u;
            if ((_DWORD)a3)
            {
              *(_BYTE *)(a1 + 64) |= 4u;
              v21 = *(_BYTE *)(a1 + 68) | 0xE;
LABEL_80:
              *(_BYTE *)(a1 + 68) = v21;
            }
            else
            {
              *(_BYTE *)(a1 + 60) |= 1u;
            }
            break;
          default:
            return result;
        }
        v14 += 2;
        continue;
      case 0x5Du:
        goto LABEL_33;
      case 0x6Eu:
        goto LABEL_45;
      case 0x6Fu:
        goto LABEL_40;
      case 0x70u:
        result = 0;
        if ((v14[3] & 4) != 0 || (v14[3] & 3) == 1)
          return result;
        if ((v14[3] & 2) != 0)
          v17 = v14 + 4;
        else
          v17 = 0;
LABEL_40:
        if ((_DWORD)a3)
        {
          *(_BYTE *)(a1 + 64) |= 0xF0u;
          cstdlib_memset(__b, 255, 7uLL);
          v15 = *v14;
        }
        if (v15 == 112)
        {
          v23 = &v14[__rev16(*(unsigned __int16 *)(v14 + 1))];
          if (!v17)
            goto LABEL_55;
        }
        else
        {
LABEL_45:
          v17 = v14 + 1;
          v23 = v14 + 33;
        }
        v24 = 0;
        if ((_DWORD)a3)
        {
          do
          {
            *(_BYTE *)(v8 + v24) |= v17[v24];
            ++v24;
          }
          while (v24 != 16);
          v25 = 128;
          do
          {
            if (((v17[(unint64_t)v25 >> 3] >> (v25 & 7)) & 1) != 0)
            {
              *(_BYTE *)(a1 + 64) |= 1 << (v25 >> 6);
              v25 |= 0x3Fu;
            }
          }
          while (v25++ < 0xFF);
        }
        else
        {
          do
          {
            *(_BYTE *)(v8 + v24) |= v17[v24];
            ++v24;
          }
          while (v24 != 32);
        }
LABEL_55:
        v27 = *v23 - 98;
        if (v27 > 0xB)
          goto LABEL_123;
        v28 = 1 << v27;
        if ((v28 & 0x533) != 0)
        {
          v14 = v23 + 1;
        }
        else
        {
          if ((v28 & 0x8C0) == 0)
            goto LABEL_123;
          v38 = __rev16(*(unsigned __int16 *)(v23 + 1)) == 0;
          v39 = 5;
          if (!v38)
            v39 = 0;
          v14 = &v23[v39];
          if (!v38)
            goto LABEL_123;
        }
        continue;
      case 0x76u:
        v22 = 6;
        goto LABEL_60;
      case 0x77u:
        v22 = __rev16(*(unsigned __int16 *)(v14 + 5));
LABEL_60:
        v14 += v22;
        continue;
      case 0x78u:
        goto LABEL_124;
      case 0x79u:
      case 0x7Au:
      case 0x7Bu:
      case 0x7Cu:
        return 2;
      case 0x7Eu:
      case 0x82u:
      case 0x83u:
      case 0x84u:
      case 0x85u:
      case 0x86u:
      case 0x88u:
      case 0x89u:
      case 0x8Au:
      case 0x8Bu:
        result = set_start_bits(a1, v14, a3);
        switch((_DWORD)result)
        {
          case 0:
            return result;
          case 1:
            goto LABEL_123;
          case 3:
            return result;
        }
        do
          v14 += __rev16(*(unsigned __int16 *)(v14 + 1));
        while (*v14 == 120);
LABEL_33:
        v14 += 3;
        continue;
      case 0x7Fu:
      case 0x80u:
      case 0x81u:
        do
          v14 += __rev16(*(unsigned __int16 *)(v14 + 1));
        while (*v14 == 120);
        goto LABEL_33;
      case 0x93u:
      case 0x94u:
      case 0x95u:
        result = set_start_bits(a1, ++v14, a3);
        if (!(_DWORD)result || (_DWORD)result == 3)
          return result;
        do
          v14 += __rev16(*(unsigned __int16 *)(v14 + 1));
        while (*v14 == 120);
        goto LABEL_33;
      case 0xA3u:
        v29 = v14 + 1;
        do
          v29 += __rev16(*(unsigned __int16 *)(v29 + 1));
        while (*v29 == 120);
        v14 = v29 + 3;
        continue;
      default:
        return result;
    }
  }
}

uint64_t find_minlength(uint64_t a1, char *a2, unsigned __int8 *a3, int a4, _QWORD *a5, _DWORD *a6, int *a7)
{
  char v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned __int8 *bracket_8;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  signed int v36;
  unsigned __int8 *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  int v44;
  unsigned __int8 *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v50;
  int v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t minlength;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int *v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v77;
  unsigned __int8 *v78;
  int *v79;

  v7 = *a2;
  if ((*a2 + 120) >= 5u)
  {
    v75 = *(_DWORD *)(a1 + 96);
    v9 = (*a6)++;
    if (v9 > 1000)
      return 0xFFFFFFFFLL;
    v11 = 0;
    v67 = 0;
    v12 = ((v7 + 123) & 0xFE) == 0;
    v13 = 3;
    if (v12)
      v13 = 5;
    v14 = (unsigned __int8 *)&a2[v13];
    v66 = a1 + 136;
    v70 = a7 + 1;
    v68 = -1;
    v69 = 0;
    v71 = -1;
    v72 = 0;
    v73 = -1;
    v74 = 0;
    v78 = a3;
    v79 = a7;
    v77 = a1;
    while (2)
    {
      v15 = *v14;
      v8 = 0xFFFFFFFFLL;
      switch(*v14)
      {
        case 0u:
        case 0x78u:
        case 0x79u:
        case 0x7Au:
        case 0x7Bu:
        case 0x7Cu:
          v8 = v73;
          if (v73 < 0 || !v74 && (int)v11 < v73)
            v8 = v11;
          if ((_DWORD)v15 == 120)
          {
            v73 = v8;
            v74 = 0;
            v11 = 0;
            goto LABEL_33;
          }
          return v8;
        case 1u:
        case 2u:
        case 4u:
        case 5u:
        case 0x17u:
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x76u:
        case 0x7Du:
        case 0x8Du:
        case 0x8Eu:
        case 0x8Fu:
        case 0x90u:
        case 0x91u:
        case 0x92u:
          goto LABEL_12;
        case 3u:
        case 0x97u:
        case 0x99u:
        case 0x9Bu:
        case 0x9Du:
        case 0x9Fu:
        case 0xA2u:
          v18 = _pcre2_OP_lengths_8[v15];
          goto LABEL_94;
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
          goto LABEL_90;
        case 0xEu:
          if (!a4)
            goto LABEL_90;
          return v8;
        case 0xFu:
        case 0x10u:
          v14 += 2;
LABEL_90:
          v11 = (v11 + 1);
          v16 = v14 + 1;
          goto LABEL_95;
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x20u:
        case 0x23u:
        case 0x24u:
        case 0x2Bu:
        case 0x30u:
        case 0x31u:
        case 0x38u:
        case 0x3Du:
        case 0x3Eu:
        case 0x45u:
        case 0x4Au:
        case 0x4Bu:
        case 0x52u:
          v11 = (v11 + 1);
          v16 = v14 + 2;
          if (!a4)
            goto LABEL_95;
          v17 = v14[1];
          goto LABEL_15;
        case 0x21u:
        case 0x22u:
        case 0x25u:
        case 0x26u:
        case 0x27u:
        case 0x28u:
        case 0x2Au:
        case 0x2Cu:
        case 0x2Du:
        case 0x2Eu:
        case 0x2Fu:
        case 0x32u:
        case 0x33u:
        case 0x34u:
        case 0x35u:
        case 0x37u:
        case 0x39u:
        case 0x3Au:
        case 0x3Bu:
        case 0x3Cu:
        case 0x3Fu:
        case 0x40u:
        case 0x41u:
        case 0x42u:
        case 0x44u:
        case 0x46u:
        case 0x47u:
        case 0x48u:
        case 0x49u:
        case 0x4Cu:
        case 0x4Du:
        case 0x4Eu:
        case 0x4Fu:
        case 0x51u:
        case 0x53u:
        case 0x54u:
          v16 = &v14[_pcre2_OP_lengths_8[v15]];
          if (!a4)
            goto LABEL_95;
          v17 = *(v16 - 1);
          goto LABEL_15;
        case 0x29u:
        case 0x36u:
        case 0x43u:
        case 0x50u:
          v11 = v11 + (bswap32(*(unsigned __int16 *)(v14 + 1)) >> 16);
          v16 = v14 + 4;
          if (!a4)
            goto LABEL_95;
          v17 = v14[3];
LABEL_15:
          if (v17 >= 0xC0)
            v16 += _pcre2_utf8_table4[v17 & 0x3F];
          goto LABEL_95;
        case 0x55u:
        case 0x56u:
        case 0x59u:
        case 0x5Au:
        case 0x5Eu:
        case 0x60u:
          v19 = v14[1];
          goto LABEL_39;
        case 0x57u:
        case 0x58u:
        case 0x5Fu:
          v11 = (v11 + 1);
          v26 = v14[1] - 15 >= 2;
          v18 = 2;
          v27 = 4;
          goto LABEL_92;
        case 0x5Bu:
        case 0x5Cu:
        case 0x61u:
          v19 = v14[3];
LABEL_39:
          v21 = &v14[2 * ((v19 - 15) < 2)];
          v20 = _pcre2_OP_lengths_8[v15];
          goto LABEL_40;
        case 0x5Du:
          v11 = v11 + (bswap32(*(unsigned __int16 *)(v14 + 1)) >> 16);
          v26 = v14[3] - 15 >= 2;
          v18 = 4;
          v27 = 6;
LABEL_92:
          if (!v26)
            v18 = v27;
          goto LABEL_94;
        case 0x6Eu:
        case 0x6Fu:
        case 0x70u:
          if ((_DWORD)v15 == 112)
            v28 = __rev16(*(unsigned __int16 *)(v14 + 1));
          else
            v28 = 33;
          v16 = &v14[v28];
          v50 = *v16 - 98;
          if (v50 > 0xB)
          {
            v11 = (v11 + 1);
          }
          else
          {
            v51 = 1 << v50;
            if ((v51 & 0x533) != 0)
              goto LABEL_88;
            if ((v51 & 0x20C) != 0)
            {
              v11 = (v11 + 1);
LABEL_88:
              ++v16;
              goto LABEL_95;
            }
            v11 = v11 + (bswap32(*(unsigned __int16 *)(v16 + 1)) >> 16);
            v16 += 5;
          }
          goto LABEL_95;
        case 0x71u:
        case 0x72u:
          if ((v75 & 0x200000) != 0)
            return v8;
          v29 = v14[1];
          v30 = v14[2];
          v31 = v30 | (v29 << 8);
          if (v31 <= *a7)
          {
            LODWORD(v32) = a7[v31];
            if ((v32 & 0x80000000) == 0)
              goto LABEL_123;
          }
          if ((*(_BYTE *)(a1 + 89) & 2) != 0)
          {
            LODWORD(v32) = 0;
          }
          else
          {
            bracket_8 = _pcre2_find_bracket_8(a3, a4, v14[2] | (v14[1] << 8));
            if (!bracket_8)
              return 4294967294;
            v34 = bracket_8;
            v35 = bracket_8;
            do
              v35 += __rev16(*(unsigned __int16 *)(v35 + 1));
            while (*v35 == 120);
            a3 = v78;
            a7 = v79;
            a1 = v77;
            if (v14 > v34 && v14 < v35)
              goto LABEL_53;
            if (a5)
            {
              v57 = a5;
              while ((unsigned __int8 *)v57[1] != v34)
              {
                v57 = (_QWORD *)*v57;
                if (!v57)
                  goto LABEL_119;
              }
LABEL_53:
              LODWORD(v32) = 0;
              v74 = 1;
              goto LABEL_120;
            }
LABEL_119:
            minlength = find_minlength(v77);
            a3 = v78;
            a7 = v79;
            v32 = minlength;
            a1 = v77;
            v8 = v32;
            if ((v32 & 0x80000000) != 0)
              return v8;
          }
LABEL_120:
          a7[v31] = v32;
          v59 = *a7;
          if ((int)v59 + 1 < v31)
          {
            memset(&v70[v59], 255, 4 * ((v29 << 8) + v30 - v59 - 2) + 4);
            a1 = v77;
            a3 = v78;
            a7 = v79;
          }
          *a7 = v31;
LABEL_123:
          v56 = 3;
LABEL_124:
          v16 = &v14[v56];
          v60 = 1;
          v61 = *v16 - 98;
          if (v61 <= 0xB)
          {
            if (((1 << v61) & 0x533) != 0)
            {
              v60 = 0;
              ++v16;
            }
            else if (((1 << v61) & 0x20C) != 0)
            {
              ++v16;
              v60 = 1;
            }
            else
            {
              v60 = __rev16(*(unsigned __int16 *)(v16 + 1));
              v16 += 5;
            }
          }
          if ((int)v32 >= 1 && 0x7FFFFFFF / v32 < v60)
            return 0xFFFFLL;
          v8 = 0xFFFFLL;
          v62 = v60 * v32;
          if (0xFFFF - (int)v11 < v62)
            return v8;
          v11 = (v62 + v11);
LABEL_95:
          v14 = v16;
          if ((int)v11 > 65534)
            return 0xFFFFLL;
          continue;
        case 0x73u:
        case 0x74u:
          if ((v75 & 0x200000) != 0)
            return v8;
          if ((*(_BYTE *)(a1 + 89) & 2) != 0)
          {
            LODWORD(v32) = 0;
            goto LABEL_114;
          }
          v36 = __rev16(*(unsigned __int16 *)(v14 + 3));
          if (!v36)
          {
            LODWORD(v32) = 0x7FFFFFFF;
            goto LABEL_114;
          }
          v37 = (unsigned __int8 *)(v66
                                  + *(unsigned __int16 *)(a1 + 132)
                                  * (unint64_t)__rev16(*(unsigned __int16 *)(v14 + 1)));
          v38 = *a7;
          LODWORD(v32) = 0x7FFFFFFF;
          break;
        case 0x75u:
          v52 = &a3[__rev16(*(unsigned __int16 *)(v14 + 1))];
          v53 = __rev16(*(unsigned __int16 *)(v52 + 3));
          v54 = (unint64_t)v52;
          if (v53 == v68)
          {
            v11 = (v11 + v67);
            goto LABEL_140;
          }
          do
            v54 += __rev16(*(unsigned __int16 *)(v54 + 1));
          while (*(_BYTE *)v54 == 120);
          if (v14 > v52 && (unint64_t)v14 < v54)
            goto LABEL_102;
          if (a5)
          {
            v63 = a5;
            while ((unsigned __int8 *)v63[1] != v52)
            {
              v63 = (_QWORD *)*v63;
              if (!v63)
                goto LABEL_138;
            }
LABEL_102:
            v74 = 1;
          }
          else
          {
LABEL_138:
            v64 = ((uint64_t (*)(void))find_minlength)();
            if ((v64 & 0x80000000) != 0)
              return v64;
            v67 = v64;
            v68 = v53;
            v11 = (v64 + v11);
            a3 = v78;
            a7 = v79;
            a1 = v77;
          }
LABEL_140:
          v18 = (v69 + 3);
          v69 = 0;
LABEL_94:
          v16 = &v14[v18];
          goto LABEL_95;
        case 0x77u:
          v18 = __rev16(*(unsigned __int16 *)(v14 + 5));
          goto LABEL_94;
        case 0x7Eu:
        case 0x7Fu:
        case 0x80u:
        case 0x81u:
          do
          {
            v14 += __rev16(*(unsigned __int16 *)(v14 + 1));
            LODWORD(v15) = *v14;
          }
          while ((_DWORD)v15 == 120);
LABEL_12:
          v18 = _pcre2_OP_lengths_8[v15];
          goto LABEL_94;
        case 0x82u:
        case 0x84u:
        case 0x88u:
        case 0x89u:
          goto LABEL_107;
        case 0x83u:
          v16 = v14 + 3;
          if (v14[3] != 117 || v14[6] != 121)
            goto LABEL_107;
          v69 = 3;
          goto LABEL_95;
        case 0x85u:
        case 0x86u:
        case 0x8Au:
        case 0x8Bu:
          v22 = __rev16(*(unsigned __int16 *)(v14 + 3));
          if ((v75 & 0x200000) != 0 || v22 != v71)
          {
            v23 = find_minlength(v77);
            a3 = v78;
            a7 = v79;
            v24 = v23;
            a1 = v77;
            v71 = v22;
            v72 = v24;
            v8 = v24;
            if ((v24 & 0x80000000) != 0)
              return v8;
          }
          do
            v14 += __rev16(*(unsigned __int16 *)(v14 + 1));
          while (*v14 == 120);
          v11 = (v72 + v11);
LABEL_33:
          v16 = v14 + 3;
          goto LABEL_95;
        case 0x87u:
        case 0x8Cu:
          v25 = &v14[__rev16(*(unsigned __int16 *)(v14 + 1))];
          if (*v25 != 120)
            goto LABEL_36;
LABEL_107:
          v55 = ((uint64_t (*)(void))find_minlength)();
          v8 = v55;
          if ((v55 & 0x80000000) != 0)
            return v8;
          do
            v14 += __rev16(*(unsigned __int16 *)(v14 + 1));
          while (*v14 == 120);
          v11 = (v55 + v11);
          v16 = v14 + 3;
          a3 = v78;
          a7 = v79;
          a1 = v77;
          goto LABEL_95;
        case 0x93u:
        case 0x94u:
        case 0x95u:
        case 0xA3u:
          v25 = &v14[_pcre2_OP_lengths_8[v15]];
          do
            v25 += __rev16(*(unsigned __int16 *)(v25 + 1));
          while (*v25 == 120);
LABEL_36:
          v16 = v25 + 3;
          goto LABEL_95;
        case 0x96u:
        case 0x98u:
        case 0x9Au:
        case 0x9Cu:
        case 0x9Eu:
          v20 = _pcre2_OP_lengths_8[v15];
          v21 = &v14[v14[1]];
LABEL_40:
          v16 = &v21[v20];
          goto LABEL_95;
        case 0xA0u:
        case 0xA1u:
          return v8;
        default:
          return 4294967293;
      }
      break;
    }
    while (1)
    {
      v39 = *v37;
      v40 = v37[1];
      v41 = v40 | (v39 << 8);
      if ((int)v41 > (int)v38)
        break;
      LODWORD(v8) = a7[v41];
      if ((v8 & 0x80000000) != 0)
        break;
      v41 = v38;
LABEL_75:
      if ((int)v8 < (int)v32)
        LODWORD(v32) = v8;
      if ((int)v32 >= 1)
      {
        v37 += *(unsigned __int16 *)(a1 + 132);
        v38 = v41;
        if (v36-- > 1)
          continue;
      }
LABEL_114:
      v56 = 5;
      goto LABEL_124;
    }
    v42 = _pcre2_find_bracket_8(a3, a4, v37[1] | (*v37 << 8));
    if (!v42)
      return 4294967294;
    v43 = v42;
    v44 = v39 << 8;
    v45 = v42;
    do
      v45 += __rev16(*(unsigned __int16 *)(v45 + 1));
    while (*v45 == 120);
    a3 = v78;
    a7 = v79;
    a1 = v77;
    if (v14 <= v43 || v14 >= v45)
    {
      if (!a5)
      {
LABEL_71:
        v47 = find_minlength(v77);
        a3 = v78;
        a7 = v79;
        v8 = v47;
        a1 = v77;
        if ((v8 & 0x80000000) != 0)
          return v8;
        goto LABEL_72;
      }
      v46 = a5;
      while ((unsigned __int8 *)v46[1] != v43)
      {
        v46 = (_QWORD *)*v46;
        if (!v46)
          goto LABEL_71;
      }
    }
    LODWORD(v8) = 0;
    v74 = 1;
LABEL_72:
    a7[v41] = v8;
    v48 = *a7;
    if ((int)v48 + 1 < (int)v41)
    {
      memset(&v70[v48], 255, 4 * (v44 + v40 - v48 - 2) + 4);
      a1 = v77;
      a3 = v78;
      a7 = v79;
    }
    *a7 = v41;
    goto LABEL_75;
  }
  return 0;
}

unsigned __int8 *set_table_bit(uint64_t a1, unsigned __int8 *a2, int a3, int a4)
{
  unint64_t v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  char v13[6];

  v6 = a2 + 1;
  v5 = *a2;
  *(_BYTE *)(a1 + (v5 >> 3) + 40) |= 1 << (v5 & 7);
  if (a4 && v5 >= 0xC0)
  {
    if ((v5 & 0x20) != 0)
    {
      if ((v5 & 0x10) != 0)
      {
        if ((v5 & 8) != 0)
        {
          v7 = a2[1] & 0x3F;
          v8 = a2[2] & 0x3F;
          v9 = a2[3] & 0x3F;
          v10 = a2[4] & 0x3F;
          if ((v5 & 4) != 0)
          {
            LODWORD(v5) = ((v5 & 1) << 30) | (v7 << 24) | (v8 << 18) | (v9 << 12) | (v10 << 6) | a2[5] & 0x3F;
            v6 = a2 + 6;
          }
          else
          {
            LODWORD(v5) = ((v5 & 3) << 24) | (v7 << 18) | (v8 << 12) | (v9 << 6) | v10;
            v6 = a2 + 5;
          }
        }
        else
        {
          LODWORD(v5) = ((v5 & 7) << 18) | ((a2[1] & 0x3F) << 12) | ((a2[2] & 0x3F) << 6) | a2[3] & 0x3F;
          v6 = a2 + 4;
        }
      }
      else
      {
        LODWORD(v5) = ((v5 & 0xF) << 12) | ((a2[1] & 0x3F) << 6) | a2[2] & 0x3F;
        v6 = a2 + 3;
      }
    }
    else
    {
      v6 = a2 + 2;
      LODWORD(v5) = a2[1] & 0x3F | ((v5 & 0x1F) << 6);
    }
  }
  if (a3)
  {
    if (a4)
    {
      _pcre2_ord2utf_8(_pcre2_ucd_records_8[2 * _pcre2_ucd_stage2_8[v5 & 0x7F | (_pcre2_ucd_stage1_8[v5 >> 7] << 7)] + 1]+ v5, (uint64_t)v13);
      v11 = v13[0];
    }
    else
    {
      v11 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v5 + 256);
    }
    *(_BYTE *)(a1 + (v11 >> 3) + 40) |= 1 << (v11 & 7);
  }
  return v6;
}

uint64_t set_type_bits(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int i;
  _BYTE v7[6];

  v3 = result;
  if (!a3)
    goto LABEL_5;
  v4 = 0;
  v5 = *(_QWORD *)(result + 24);
  do
  {
    *(_BYTE *)(result + 40 + v4) |= *(_BYTE *)(v5 + (a2 + 512 + v4));
    ++v4;
  }
  while (a3 != v4);
  if (a3 != 32)
  {
LABEL_5:
    for (i = 128; i != 256; ++i)
    {
      if (((*(unsigned __int8 *)((i >> 3) + *(_QWORD *)(v3 + 24) + 512) >> (i & 7)) & 1) != 0)
      {
        result = _pcre2_ord2utf_8(i, (uint64_t)v7);
        *(_BYTE *)(v3 + ((unint64_t)v7[0] >> 3) + 40) |= 1 << (v7[0] & 7);
      }
    }
  }
  return result;
}

uint64_t pcre2_substitute_8(uint64_t a1, _BYTE *a2, unint64_t a3, size_t a4, int a5, _QWORD *a6, __int128 *a7, unsigned __int8 *a8, unint64_t a9, char *__dst, unint64_t *a11)
{
  int v11;
  unint64_t v12;
  uint64_t result;
  _QWORD *v20;
  __int128 *v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int valid;
  int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v37;
  int matched;
  unint64_t v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  int v45;
  unsigned int v46;
  unsigned __int8 *v47;
  int v48;
  BOOL v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  int v52;
  unsigned int v53;
  signed int v54;
  unsigned __int8 *v55;
  unint64_t v56;
  unsigned __int8 *v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int v61;
  unsigned __int8 *v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  uint64_t v82;
  unsigned __int8 *v83;
  char v84;
  int v85;
  unsigned __int8 *v86;
  int text_end;
  int v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  int v93;
  uint64_t v94;
  unsigned int v95;
  int v96;
  unsigned __int8 *mark_8;
  size_t v98;
  unsigned __int16 *v100;
  unsigned int v101;
  int v102;
  unsigned __int8 *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  unsigned int v108;
  unsigned __int8 v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t *v128;
  uint64_t v129;
  int v130;
  unsigned int v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  int v135;
  unsigned __int8 *v136;
  unsigned __int8 *v137;
  unsigned __int8 *v138;
  unsigned __int8 *v139;
  unsigned __int8 *v140;
  int v141;
  int v142;
  unint64_t *v143;
  unint64_t v144;
  unsigned __int8 *v145;
  unsigned int ovector_count_8;
  int v147;
  _QWORD *v148;
  int v149;
  int v150;
  char *v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  _BOOL4 v156;
  uint64_t *ovector_pointer_8;
  __int128 *v158;
  uint64_t v159;
  _BYTE *v160;
  size_t v161;
  unint64_t v162;
  int v163;
  int v165;
  unint64_t v167;
  unsigned __int16 *v168;
  unsigned __int16 *v169;
  unint64_t v170;
  unsigned int v171;
  unsigned __int8 *v172;
  _BYTE __src[6];
  int v174[9];
  _OWORD v175[10];
  uint64_t v176;

  v176 = *MEMORY[0x24BDAC8D0];
  v11 = *(_DWORD *)(a1 + 88);
  v12 = *a11;
  *a11 = -1;
  if ((a5 & 0x30) != 0)
    return 4294967262;
  v20 = a6;
  if (!a6)
  {
    v21 = a7 ? a7 : (__int128 *)a1;
    v20 = pcre2_match_data_create_from_pattern_8(a1, v21);
    if (!v20)
      return 4294967248;
  }
  v158 = a7;
  v148 = a6;
  v22 = a9;
  ovector_pointer_8 = (uint64_t *)pcre2_get_ovector_pointer_8((uint64_t)v20);
  ovector_count_8 = pcre2_get_ovector_count_8((uint64_t)v20);
  v23 = a3;
  if (a3 == -1)
    v23 = _pcre2_strlen_8(a2);
  v24 = v11 & 0x80000;
  v162 = v23;
  if (a9 == -1)
  {
    v25 = _pcre2_strlen_8(a8);
    v23 = v162;
    v22 = v25;
  }
  v172 = 0;
  if ((a5 & 0x40000000) == 0)
  {
    if (v24)
    {
      valid = _pcre2_valid_utf_8(a8, v22, v20 + 7);
      v23 = v162;
      if (valid)
      {
        v153 = valid;
        v20[6] = 0;
        goto LABEL_317;
      }
    }
  }
  if (v23 < a4)
  {
    v20[6] = 0;
    v27 = -33;
    goto LABEL_314;
  }
  v167 = v12 - a4;
  if (v12 >= a4)
  {
    v144 = v12;
    v145 = a8;
    v143 = a11;
    v151 = __dst;
    cstdlib_memcpy(__dst, a2, a4);
    v30 = 0;
    v28 = a5;
    v29 = 0;
    v156 = (a5 & 0x1000) == 0;
    v161 = a4;
  }
  else
  {
    if ((a5 & 0x1000) == 0)
      goto LABEL_313;
    v151 = __dst;
    v144 = v12;
    v145 = a8;
    v143 = a11;
    v156 = 0;
    v161 = 0;
    v28 = a5;
    v29 = a4 - v12;
    v30 = 1;
    v167 = v12;
  }
  v31 = 0;
  v165 = 0;
  v163 = 0;
  v32 = 0;
  v33 = (unint64_t)&v145[v22];
  v34 = v28 & 0xFFFFE0FF;
  if ((v28 & 0x800) != 0)
    v35 = -55;
  else
    v35 = -49;
  v142 = v35;
  if ((v28 & 0x400) != 0)
    v36 = 9;
  else
    v36 = 16;
  v141 = v36;
  v149 = 0;
  v150 = v34 | (v24 << 11);
  v159 = -1;
  v160 = a2;
  v153 = -48;
  v152 = -1;
  v154 = (uint64_t)v20;
  v155 = -1;
  while (1)
  {
    v37 = v30;
    memset(v175, 0, sizeof(v175));
    matched = pcre2_match_8(a1, a2, v162, a4, v163 | v34, (uint64_t)v20, v158);
    if (matched < 0)
      break;
    v40 = *ovector_pointer_8;
    v39 = ovector_pointer_8[1];
    v41 = -60;
    if (v39 < *ovector_pointer_8)
      goto LABEL_316;
    v42 = v40 - a4;
    if (v40 < a4)
      goto LABEL_316;
    v30 = v37;
    if (v155 != v40 || v152 != v39)
    {
      if (v149 == 0x7FFFFFFF)
      {
        v41 = -61;
        goto LABEL_316;
      }
      v45 = ovector_count_8;
      if (matched)
        v45 = matched;
      v147 = v45;
      if (!(_DWORD)v37 && v167 < v42)
      {
        if (!v156)
        {
          v29 = v42 - v167;
          v30 = 1;
          goto LABEL_68;
        }
LABEL_302:
        v41 = -48;
LABEL_316:
        v153 = v41;
        v20 = (_QWORD *)v154;
        goto LABEL_317;
      }
      if ((_DWORD)v37)
      {
        v29 += v42;
      }
      else
      {
        cstdlib_memcpy(&v151[v161], &a2[a4], v40 - a4);
        v30 = 0;
        v161 += v42;
        v167 -= v42;
      }
LABEL_68:
      v46 = 0;
      ++v149;
      v47 = v145;
      v172 = v145;
      while (2)
      {
        v171 = 0;
        if ((unint64_t)v47 >= v33)
        {
          if (!v46)
          {
            v43 = ovector_pointer_8[1];
            v155 = *ovector_pointer_8;
            if (*ovector_pointer_8 != v43 || *ovector_pointer_8 > a4)
              v124 = 0;
            else
              v124 = -2147483640;
            v163 = v124;
            v152 = ovector_pointer_8[1];
            goto LABEL_298;
          }
          v33 = *((_QWORD *)&v175[v46 / 2 - 1] + 1);
          v46 -= 2;
          v50 = *(unsigned __int8 **)&v175[v46 / 2];
LABEL_79:
          v172 = v50;
          goto LABEL_159;
        }
        v48 = *v47;
        if (v32)
        {
          v49 = v48 != 92 || (unint64_t)v47 >= v33 - 1;
          if (!v49 && v47[1] == 69)
          {
            v32 = 0;
            v50 = v47 + 2;
            goto LABEL_79;
          }
LABEL_101:
          v51 = v47;
LABEL_102:
          v172 = v51 + 1;
          LODWORD(v62) = *v51;
          v171 = v62;
          if (v24 && v62 >= 0xC0)
          {
            if ((v62 & 0x20) == 0)
            {
              v172 = v51 + 2;
              v171 = v51[1] & 0x3F | ((v62 & 0x1F) << 6);
              if (!v31)
                goto LABEL_106;
LABEL_128:
              if (v24)
              {
                v63 = v171;
                v70 = _pcre2_ucd_stage2_8[v171
                                        - (v62 & 0xFFFFFF80)
                                        + (_pcre2_ucd_stage1_8[(int)v171 / 128] << 7)];
                v71 = BYTE1(_pcre2_ucd_records_8[2 * v70]);
                if (_pcre2_ucp_gentype_8[v71] != 1)
                  goto LABEL_135;
                if (v31 <= 0)
                  v72 = 5;
                else
                  v72 = 9;
                v31 = v165;
                if (v72 != (_DWORD)v71)
                {
                  v63 = _pcre2_ucd_records_8[2 * v70 + 1] + v171;
                  v171 = v63;
LABEL_135:
                  v31 = v165;
                }
LABEL_136:
                v73 = v30;
                v74 = _pcre2_ord2utf_8(v63, (uint64_t)__src);
                v30 = v73;
LABEL_142:
                v77 = v74;
                if ((_DWORD)v30)
                {
                  v29 += v74;
                }
                else
                {
                  v78 = v167 - v74;
                  if (v167 >= v74)
                  {
                    cstdlib_memcpy(&v151[v161], __src, v74);
                    v30 = 0;
                    v161 += v77;
                    v167 = v78;
                  }
                  else
                  {
                    if (v156)
                      goto LABEL_302;
                    v29 = v74 - v167;
                    v30 = 1;
                  }
                  a2 = v160;
                }
LABEL_159:
                v47 = v172;
                continue;
              }
              v75 = *(_QWORD *)(a1 + 24);
              v76 = 128;
              if (v31 > 0)
                v76 = 96;
              LOBYTE(v63) = v171;
              v31 = v165;
              if (((*(unsigned __int8 *)(v75 + v76 + ((unint64_t)v171 >> 3) + 512) >> (v171 & 7)) & 1) == 0)
              {
                LOBYTE(v63) = *(_BYTE *)(v75 + v171 + 256);
                v171 = v63;
                v31 = v165;
              }
LABEL_141:
              __src[0] = v63;
              v74 = 1;
              goto LABEL_142;
            }
            v64 = v51[1] & 0x3F;
            if ((v62 & 0x10) == 0)
            {
              v171 = ((v62 & 0xF) << 12) | (v64 << 6) | v51[2] & 0x3F;
              v62 = v51 + 3;
              goto LABEL_126;
            }
            if ((v62 & 8) == 0)
            {
              v171 = ((v62 & 7) << 18) | (v64 << 12) | ((v51[2] & 0x3F) << 6) | v51[3] & 0x3F;
              v62 = v51 + 4;
              goto LABEL_126;
            }
            v65 = v51[2] & 0x3F;
            v66 = v51[3] & 0x3F;
            v67 = v51[4] & 0x3F;
            if ((v62 & 4) == 0)
            {
              v171 = ((v62 & 3) << 24) | (v64 << 18) | (v65 << 12) | (v66 << 6) | v67;
              v172 = v51 + 5;
              if (v31)
                goto LABEL_128;
              goto LABEL_106;
            }
            v171 = ((v62 & 1) << 30) | (v64 << 24) | (v65 << 18) | (v66 << 12) | (v67 << 6) | v51[5] & 0x3F;
            v62 = v51 + 6;
LABEL_126:
            v172 = v62;
          }
          if (v31)
            goto LABEL_128;
LABEL_106:
          v63 = v171;
          if (v24)
            goto LABEL_136;
          goto LABEL_141;
        }
        break;
      }
      if (v48 == 36)
      {
        v170 = 0;
        v51 = v47 + 1;
        v172 = v47 + 1;
        if ((unint64_t)(v47 + 1) >= v33)
          goto LABEL_156;
        v52 = *v51;
        if (v52 == 36)
          goto LABEL_102;
        v53 = *v51;
        if (v52 == 123)
        {
          v51 = v47 + 2;
          v172 = v47 + 2;
          if ((unint64_t)(v47 + 2) >= v33)
            goto LABEL_156;
          v53 = *v51;
        }
        if (v53 == 42)
        {
          v172 = ++v51;
          if ((unint64_t)v51 >= v33)
            goto LABEL_156;
          v58 = *v51;
        }
        else
        {
          v54 = v53 - 48;
          if (v53 - 48 <= 9)
          {
            v55 = v51 + 1;
            v172 = v51 + 1;
            if ((unint64_t)(v51 + 1) >= v33)
            {
              v58 = v53;
            }
            else
            {
              v56 = ~(unint64_t)v51 + v33;
              v57 = v51 + 2;
              while (1)
              {
                v58 = *v55;
                if (v58 - 58 < 0xFFFFFFF6)
                  goto LABEL_171;
                v54 = v58 + 10 * v54 - 48;
                if (v54 > *(unsigned __int16 *)(a1 + 128))
                  break;
                v172 = ++v55;
                ++v57;
                if (!--v56)
                {
                  v55 = (unsigned __int8 *)v33;
                  goto LABEL_171;
                }
              }
              if ((a5 & 0x800) == 0)
              {
                v60 = 16;
                v96 = -49;
                goto LABEL_193;
              }
              do
              {
                v55 = v57;
                v172 = v57;
                if ((unint64_t)v57 >= v33)
                  break;
                ++v57;
              }
              while (*v55 - 48 < 0xA);
            }
LABEL_171:
            if (v52 == 123)
            {
              if ((a5 & 0x200) != 0 && v53 != 42 && v58 == 58 && (unint64_t)v55 < v33 - 2)
              {
                v172 = v55 + 1;
                v85 = v55[1];
                if (v85 != 45 && v85 != 43)
                {
                  v60 = 16;
                  v96 = -59;
                  goto LABEL_193;
                }
                v131 = v30;
                v86 = v55 + 2;
                v172 = v55 + 2;
                v135 = v85;
                text_end = find_text_end(a1, &v172, v33, v85 == 45);
                if (text_end)
                  goto LABEL_179;
                v139 = v86;
                v90 = v172;
                v88 = v135;
                v30 = v131;
                if (v135 == 43)
                {
                  if (*v172 == 58)
                  {
                    v134 = v172 + 1;
                    v137 = v172++;
                    text_end = find_text_end(a1, &v172, v33, 1);
                    if (text_end)
                    {
LABEL_179:
                      v147 = text_end;
                      v60 = 16;
                      v30 = v131;
                      goto LABEL_157;
                    }
                    v147 = 0;
                    v88 = 43;
                    v55 = v172;
                    v92 = v172;
                    v30 = v131;
                    v90 = v137;
                    v89 = v139;
                    v91 = v134;
                    goto LABEL_231;
                  }
                  v147 = 0;
                  v91 = 0;
                  v92 = 0;
                  v88 = 43;
                }
                else
                {
                  v147 = 0;
                  v91 = 0;
                  v92 = 0;
                }
                v55 = v172;
                v89 = v139;
                goto LABEL_231;
              }
              if ((unint64_t)v55 >= v33 || *v55 != 125)
              {
                v60 = 16;
                v96 = -58;
LABEL_193:
                v147 = v96;
                goto LABEL_157;
              }
              v88 = 0;
              v89 = 0;
              v90 = 0;
              v91 = 0;
              v92 = 0;
LABEL_231:
              v172 = v55 + 1;
            }
            else
            {
              v88 = 0;
              v89 = 0;
              v90 = 0;
              v91 = 0;
              v92 = 0;
            }
            if (v53 == 42)
            {
              v94 = v30;
              if (!_pcre2_strcmp_c8_8((unsigned __int8 *)v174, "MARK"))
              {
                mark_8 = (unsigned __int8 *)pcre2_get_mark_8(v154);
                if (mark_8)
                {
                  v98 = -1;
                  v30 = v94;
                  while (mark_8[++v98])
                    ;
                  if ((_DWORD)v94 || v167 >= v98)
                  {
                    if ((_DWORD)v94)
                    {
                      v29 += v98;
                    }
                    else
                    {
                      cstdlib_memcpy(&v151[v161], mark_8, v98);
                      v30 = 0;
                      v161 += v98;
                      v167 -= v98;
                    }
                  }
                  else
                  {
                    if (v156)
                    {
                      v30 = 0;
                      v60 = 3;
                      goto LABEL_157;
                    }
                    v29 = v98 - v167;
                    v30 = 1;
                  }
                }
                else
                {
                  v30 = v94;
                }
                goto LABEL_287;
              }
              v60 = 11;
            }
            else
            {
              v136 = v90;
              v138 = v89;
              v132 = v92;
              v133 = v91;
              v93 = v88;
              v94 = v30;
              if ((v54 & 0x80000000) == 0)
                goto LABEL_233;
              v168 = 0;
              v169 = 0;
              v95 = pcre2_substring_nametable_scan_8(a1, (unsigned __int8 *)v174, &v169, (unsigned __int8 **)&v168);
              if ((a5 & 0x800) != 0 && v95 == -49)
              {
                v54 = *(unsigned __int16 *)(a1 + 128) + 1;
                goto LABEL_233;
              }
              if ((v95 & 0x80000000) == 0)
              {
                if (v169 <= v168)
                {
                  v100 = v169;
                  do
                  {
                    v101 = __rev16(*v100);
                    if (v101 < ovector_count_8)
                    {
                      if (v54 < 0)
                        v54 = v101;
                      if (ovector_pointer_8[2 * v101] != -1)
                      {
                        v54 = v101;
                        goto LABEL_233;
                      }
                    }
                    v100 = (unsigned __int16 *)((char *)v100 + v95);
                  }
                  while (v100 <= v168);
                  if ((v54 & 0x80000000) == 0)
                    goto LABEL_233;
                }
                v54 = __rev16(*v169);
LABEL_233:
                v102 = pcre2_substring_length_bynumber_8(v154, v54, &v170);
                v30 = v94;
                v147 = v102;
                if (v102 < 0)
                {
                  v104 = v102;
                  if (v102 == -49)
                    v104 = v142;
                  v147 = v104;
                  if (v104 != -55)
                  {
                    v60 = 16;
                    goto LABEL_157;
                  }
                  v147 = -55;
                  if (!v93)
                  {
                    v60 = v141;
                    goto LABEL_157;
                  }
                }
                if (v93)
                {
                  if (v93 != 45 || (v132 = v136, v133 = v138, v147))
                  {
                    if (v46 > 0x13)
                      goto LABEL_156;
                    *(_QWORD *)&v175[v46 / 2] = v172;
                    *((_QWORD *)&v175[v46 / 2] + 1) = v33;
                    v46 += 2;
                    v103 = v133;
                    if (v147)
                    {
                      v33 = (unint64_t)v132;
                    }
                    else
                    {
                      v103 = v138;
                      v33 = (unint64_t)v136;
                    }
                    v172 = v103;
                    v60 = 9;
LABEL_157:
                    v32 = 0;
LABEL_158:
                    if (v60 != 9)
                    {
                      v20 = (_QWORD *)v154;
                      switch(v60)
                      {
                        case 2:
                          v27 = v147;
                          goto LABEL_314;
                        case 3:
                          goto LABEL_317;
                        case 4:
                          goto LABEL_305;
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                          return 4294967248;
                        case 11:
                          v130 = -35;
                          goto LABEL_329;
                        default:
                          v130 = v147;
                          if (v60 == 16)
                            goto LABEL_329;
                          if (v60 != 28)
                            return 4294967248;
                          v130 = -57;
LABEL_329:
                          *v143 = v172 - v145;
                          v153 = v130;
                          break;
                      }
                      goto LABEL_317;
                    }
                    goto LABEL_159;
                  }
                }
                v105 = ovector_pointer_8[2 * v54];
                v106 = ovector_pointer_8[(2 * v54) | 1u];
                if (v105 < v106)
                {
                  v140 = &a2[v106];
                  v107 = &a2[v105];
                  do
                  {
                    v108 = *v107;
                    v171 = v108;
                    if (v24 && v108 >= 0xC0)
                    {
                      if ((v108 & 0x20) != 0)
                      {
                        v119 = v107[1] & 0x3F;
                        if ((v108 & 0x10) != 0)
                        {
                          if ((v108 & 8) != 0)
                          {
                            v120 = v107[2] & 0x3F;
                            v121 = v107[3] & 0x3F;
                            v122 = v107[4] & 0x3F;
                            if ((v108 & 4) != 0)
                            {
                              v108 = ((v108 & 1) << 30) | (v119 << 24) | (v120 << 18) | (v121 << 12) | (v122 << 6) | v107[5] & 0x3F;
                              v171 = v108;
                              v107 += 6;
                            }
                            else
                            {
                              v107 += 5;
                              v108 = ((v108 & 3) << 24) | (v119 << 18) | (v120 << 12) | (v121 << 6) | v122;
                              v171 = v108;
                            }
                          }
                          else
                          {
                            v108 = ((v108 & 7) << 18) | (v119 << 12) | ((v107[2] & 0x3F) << 6) | v107[3] & 0x3F;
                            v171 = v108;
                            v107 += 4;
                          }
                        }
                        else
                        {
                          v108 = ((v108 & 0xF) << 12) | (v119 << 6) | v107[2] & 0x3F;
                          v171 = v108;
                          v107 += 3;
                        }
                      }
                      else
                      {
                        v109 = v107[1];
                        v107 += 2;
                        v171 = v109 & 0x3F | ((v108 & 0x1F) << 6);
                        v108 = v171;
                      }
                    }
                    else
                    {
                      ++v107;
                    }
                    if (v31)
                    {
                      if (v24)
                      {
                        v110 = _pcre2_ucd_stage2_8[v108 & 0x7F | (_pcre2_ucd_stage1_8[v108 >> 7] << 7)];
                        v111 = BYTE1(_pcre2_ucd_records_8[2 * v110]);
                        if (_pcre2_ucp_gentype_8[v111] == 1)
                        {
                          v112 = v31 <= 0 ? 5 : 9;
                          if (v112 != (_DWORD)v111)
                          {
                            v108 += _pcre2_ucd_records_8[2 * v110 + 1];
                            v171 = v108;
                          }
                        }
                        v31 = v165;
LABEL_264:
                        v113 = v30;
                        v114 = _pcre2_ord2utf_8(v108, (uint64_t)__src);
                        v30 = v113;
                        goto LABEL_271;
                      }
                      v115 = *(_QWORD *)(a1 + 24);
                      v116 = 128;
                      if (v31 > 0)
                        v116 = 96;
                      if (((*(unsigned __int8 *)(v115 + v116 + ((unint64_t)v108 >> 3) + 512) >> (v108 & 7)) & 1) == 0)
                      {
                        LOBYTE(v108) = *(_BYTE *)(v115 + v108 + 256);
                        v171 = v108;
                      }
                      v31 = v165;
                    }
                    else if (v24)
                    {
                      goto LABEL_264;
                    }
                    __src[0] = v108;
                    v114 = 1;
LABEL_271:
                    v117 = v114;
                    if ((_DWORD)v30)
                    {
                      v29 += v114;
                    }
                    else
                    {
                      v118 = v167 - v114;
                      if (v167 >= v114)
                      {
                        cstdlib_memcpy(&v151[v161], __src, v114);
                        v30 = 0;
                        v161 += v117;
                        v167 = v118;
                      }
                      else
                      {
                        if (v156)
                        {
                          v30 = 0;
                          v60 = 3;
                          a2 = v160;
                          goto LABEL_157;
                        }
                        v29 = v114 - v167;
                        v30 = 1;
                      }
                      a2 = v160;
                    }
                  }
                  while (v107 < v140);
                }
LABEL_287:
                v32 = 0;
                goto LABEL_159;
              }
              v147 = v95;
              v60 = 16;
            }
            v30 = v94;
            goto LABEL_157;
          }
          v58 = v53;
        }
        v79 = *(_QWORD *)(a1 + 24) + 832;
        if ((*(_BYTE *)(v79 + v58) & 0x10) == 0)
          goto LABEL_156;
        v80 = 0;
        v81 = v51 + 1;
        do
        {
          v82 = v80;
          *((_BYTE *)v174 + v80) = v58;
          if (v80 == 32)
            goto LABEL_156;
          v83 = &v81[v80];
          v172 = &v81[v82];
          if ((unint64_t)&v81[v82] >= v33)
            goto LABEL_165;
          v58 = *v83;
          v84 = *(_BYTE *)(v79 + *v83);
          v80 = v82 + 1;
        }
        while ((v84 & 0x10) != 0);
        if (v82 == -1)
        {
LABEL_156:
          v60 = 11;
          goto LABEL_157;
        }
LABEL_165:
        *((_BYTE *)v174 + v82 + 1) = 0;
        v55 = &v51[v82 + 1];
        v54 = -1;
        goto LABEL_171;
      }
      if ((a5 & 0x200) == 0 || v48 != 92)
        goto LABEL_101;
      v174[0] = 0;
      if ((unint64_t)v47 < v33 - 1)
      {
        v59 = v47[1];
        if (v59 > 0x6B)
        {
          if (v59 == 108)
          {
            v165 = 0;
            v32 = 0;
            v172 = v47 + 2;
            v60 = 9;
            v31 = -1;
            goto LABEL_158;
          }
          if (v59 == 117)
          {
            v165 = 0;
            v32 = 0;
            v172 = v47 + 2;
            v60 = 9;
            v31 = 1;
            goto LABEL_158;
          }
        }
        else
        {
          if (v59 == 76)
          {
            v32 = 0;
            v172 = v47 + 2;
            v60 = 9;
            v31 = -1;
            v61 = -1;
            goto LABEL_152;
          }
          if (v59 == 85)
          {
            v32 = 0;
            v172 = v47 + 2;
            v60 = 9;
            v31 = 1;
            v61 = 1;
LABEL_152:
            v165 = v61;
            goto LABEL_158;
          }
        }
      }
      v68 = v30;
      v172 = v47 + 1;
      v69 = _pcre2_check_escape_8(&v172, v33, (int *)&v171, v174, *(_DWORD *)(a1 + 88), 0, 0);
      v147 = v69;
      if (v174[0])
      {
        v32 = 0;
        v60 = 28;
      }
      else
      {
        if (!v69)
        {
          v147 = 0;
          v30 = v68;
          if (v31)
            goto LABEL_128;
          goto LABEL_106;
        }
        if (v69 != 25)
        {
          v30 = v68;
          if (v69 == 26)
          {
            v60 = 9;
            v32 = 1;
            v147 = 26;
          }
          else
          {
            v32 = 0;
            v60 = 28;
          }
          goto LABEL_158;
        }
        v31 = 0;
        v165 = 0;
        v32 = 0;
        v60 = 9;
      }
      v30 = v68;
      goto LABEL_158;
    }
    v41 = -65;
    if (v155 != v152)
      goto LABEL_316;
    v43 = a4;
    v163 = -2147483640;
    v155 = v152;
    if (v159 == a4)
      goto LABEL_316;
LABEL_298:
    v159 = a4;
    a4 = v43;
    v20 = (_QWORD *)v154;
    v34 = v150;
    if ((a5 & 0x100) == 0)
      goto LABEL_305;
  }
  if (matched != -1)
  {
    v41 = matched;
    goto LABEL_316;
  }
  if (v163 && a4 < v162)
  {
    v43 = a4 + 1;
    v30 = v37;
    if (a2[a4] == 13 && *(unsigned __int16 *)(a1 + 122) - 3 <= 0xFFFFFFFD && v43 < v162 && a2[v43] == 10)
    {
      v43 = a4 + 2;
    }
    else if ((*(_BYTE *)(a1 + 90) & 8) != 0 && v43 < v162)
    {
      while ((a2[v43] & 0xC0) == 0x80)
      {
        if (v162 == ++v43)
        {
          v43 = v162;
          break;
        }
      }
    }
    v44 = v43 - a4;
    if ((_DWORD)v37 || v167 >= v44)
    {
      if ((_DWORD)v37)
      {
        v163 = 0;
        v29 += v44;
      }
      else
      {
        cstdlib_memcpy(&v151[v161], &a2[a4], v44);
        v163 = 0;
        v30 = 0;
        v161 += v44;
        v167 -= v44;
      }
    }
    else
    {
      if (v156)
        goto LABEL_302;
      v163 = 0;
      v29 = v44 - v167;
      v30 = 1;
    }
    a4 = v159;
    goto LABEL_298;
  }
  LODWORD(v30) = v37;
LABEL_305:
  v125 = v162 - a4;
  if (!(_DWORD)v30)
  {
    v126 = v125 - v167;
    if (v125 > v167)
    {
      v127 = v144;
      if (v156)
      {
LABEL_313:
        v27 = -48;
        goto LABEL_314;
      }
LABEL_311:
      v128 = v143;
      __src[0] = 0;
      v129 = v126 + 1;
LABEL_312:
      *v128 = v129 + v127;
      goto LABEL_313;
    }
  }
  v127 = v144;
  if ((_DWORD)v30)
  {
    v126 = v125 + v29;
    goto LABEL_311;
  }
  cstdlib_memcpy(&v151[v161], &a2[a4], v162 - a4);
  __src[0] = 0;
  v128 = v143;
  if (v125 == v167)
  {
    if (v156)
      goto LABEL_313;
    v129 = 1;
    goto LABEL_312;
  }
  cstdlib_memcpy(&v151[v125 + v161], __src, 1uLL);
  *v143 = v125 + v161;
  v27 = v149;
LABEL_314:
  v153 = v27;
LABEL_317:
  if (v148)
  {
    result = v153;
    *((_DWORD *)v20 + 19) = v153;
  }
  else
  {
    pcre2_match_data_free_8((uint64_t)v20);
    return v153;
  }
  return result;
}

uint64_t find_text_end(uint64_t a1, unsigned __int8 **a2, unint64_t a3, int a4)
{
  unsigned __int8 *v5;
  _BOOL4 v9;
  int v10;
  unint64_t v11;
  int v12;
  int v14;
  BOOL v15;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  int v21;
  uint64_t result;
  uint64_t v23;
  unsigned __int8 *v24;

  v5 = *a2;
  v24 = v5;
  if ((unint64_t)v5 < a3)
  {
    v9 = 0;
    v10 = 0;
    v11 = a3 - 1;
    while (1)
    {
      v12 = *v5;
      if (v9)
        break;
      if (v12 != 125)
      {
        if (!a4 && v12 == 58 && v10 == 0)
        {
LABEL_42:
          result = 0;
          goto LABEL_41;
        }
        if (v12 != 92)
        {
          if (v12 == 36 && (unint64_t)v5 < v11)
          {
            v9 = 0;
            if (v5[1] == 123)
            {
              ++v5;
              ++v10;
            }
          }
          else
          {
            v9 = 0;
          }
          goto LABEL_39;
        }
        v23 = 0;
        if ((unint64_t)v5 < v11)
        {
          v17 = v5[1] - 76;
          v18 = v17 > 0x29;
          v19 = (1 << v17) & 0x20100000201;
          if (!v18 && v19 != 0)
          {
            v9 = 0;
            ++v5;
            goto LABEL_39;
          }
        }
        v24 = v5 + 1;
        v21 = _pcre2_check_escape_8(&v24, a3, (int *)&v23, (int *)&v23 + 1, *(_DWORD *)(a1 + 88), 0, 0);
        v5 = v24 - 1;
        result = HIDWORD(v23);
        if (HIDWORD(v23))
          goto LABEL_41;
        v9 = 0;
        if (!v21 || v21 == 25)
          goto LABEL_39;
        if (v21 != 26)
        {
          result = 4294967239;
          goto LABEL_41;
        }
        goto LABEL_9;
      }
      if (!v10)
        goto LABEL_42;
      v9 = 0;
      --v10;
LABEL_39:
      v24 = ++v5;
      if ((unint64_t)v5 >= a3)
        goto LABEL_40;
    }
    if (v12 == 92 && (unint64_t)v5 < v11)
    {
      v14 = v5[1];
      v15 = v14 == 69;
      v9 = v14 != 69;
      if (v15)
        ++v5;
      goto LABEL_39;
    }
LABEL_9:
    v9 = 1;
    goto LABEL_39;
  }
LABEL_40:
  result = 4294967238;
LABEL_41:
  *a2 = v5;
  return result;
}

uint64_t pcre2_substring_copy_byname_8(uint64_t a1, unsigned __int8 *a2, void *a3, size_t *a4)
{
  uint64_t result;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int16 *v11;
  unint64_t v12;

  if (*(_WORD *)(a1 + 72) == 1)
    return 4294967255;
  v11 = 0;
  v12 = 0;
  result = pcre2_substring_nametable_scan_8(*(_QWORD *)(a1 + 24), a2, &v12, (unsigned __int8 **)&v11);
  if ((result & 0x80000000) == 0)
  {
    v8 = (unsigned __int16 *)v12;
    if (v12 > (unint64_t)v11)
      return 4294967242;
    v9 = result;
    result = 4294967242;
    do
    {
      v10 = __rev16(*v8);
      if (v10 < *(unsigned __int16 *)(a1 + 74))
      {
        if (*(_QWORD *)(a1 + 16 * v10 + 80) != -1)
          return pcre2_substring_copy_bynumber_8(a1, v10, a3, a4);
        result = 4294967241;
      }
      v8 = (unsigned __int16 *)((char *)v8 + v9);
    }
    while (v8 <= v11);
  }
  return result;
}

uint64_t pcre2_substring_nametable_scan_8(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, unsigned __int8 **a4)
{
  unsigned __int16 v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v25;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;

  v6 = 0;
  v7 = *(unsigned __int16 *)(a1 + 134);
  v8 = *(unsigned __int16 *)(a1 + 132);
  v28 = a1 + 136;
  v9 = a1 - v8 + 138;
  v25 = *(unsigned __int16 *)(a1 + 132);
  while (1)
  {
    if ((unsigned __int16)v7 <= v6)
      return 4294967247;
    v29 = v7;
    v10 = ((unsigned __int16)v7 + v6) >> 1;
    v11 = v10 * v8;
    v12 = (unsigned __int8 *)(a1 + (v11 + 136));
    v13 = _pcre2_strcmp_8(a2, v12 + 2);
    if (!v13)
      break;
    if (v13 > 0)
      v6 = v10 + 1;
    v7 = v29;
    if (v13 <= 0)
      v7 = v10;
  }
  v14 = 0;
  v15 = v28 + (*(unsigned __int16 *)(a1 + 134) - 1) * (uint64_t)v25;
  do
  {
    v16 = v11;
    v17 = v14;
    if (v11 + 136 < 137)
      break;
    v18 = _pcre2_strcmp_8(a2, (unsigned __int8 *)(v9 + v11));
    v11 -= v8;
    v14 = v17 + v8;
  }
  while (!v18);
  v27 = v28 + v16;
  v19 = v12;
  do
  {
    v20 = v19;
    v21 = v17;
    if ((unint64_t)v19 >= v15)
      break;
    v19 += v8;
    v17 += v8;
  }
  while (!_pcre2_strcmp_8(a2, &v20[v8 + 2]));
  if (a3)
  {
    *a3 = v27;
    *a4 = v20;
    return v8;
  }
  else if (v21)
  {
    return 4294967246;
  }
  else
  {
    return __rev16(*(unsigned __int16 *)v12);
  }
}

uint64_t pcre2_substring_copy_bynumber_8(uint64_t a1, unsigned int a2, void *a3, size_t *a4)
{
  uint64_t result;
  size_t v9;
  size_t __n;

  __n = 0;
  result = pcre2_substring_length_bynumber_8(a1, a2, &__n);
  if ((result & 0x80000000) == 0)
  {
    if (__n + 1 <= *a4)
    {
      cstdlib_memcpy(a3, (const void *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(a1 + 16 * a2 + 80)), __n);
      result = 0;
      v9 = __n;
      *((_BYTE *)a3 + __n) = 0;
      *a4 = v9;
    }
    else
    {
      return 4294967248;
    }
  }
  return result;
}

uint64_t pcre2_substring_length_bynumber_8(uint64_t a1, unsigned int a2, unint64_t *a3)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;

  result = *(unsigned int *)(a1 + 76);
  if ((_DWORD)result == -2)
  {
    if (a2)
      return 4294967294;
    LODWORD(result) = 0;
  }
  else if ((result & 0x80000000) != 0)
  {
    return result;
  }
  if (*(_WORD *)(a1 + 72) == 1)
  {
    if (*(unsigned __int16 *)(a1 + 74) > a2)
    {
      if ((int)result - 1 < a2)
        return 4294967241;
      goto LABEL_15;
    }
    return 4294967242;
  }
  if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 24) + 128) < a2)
    return 4294967247;
  if (*(unsigned __int16 *)(a1 + 74) <= a2)
    return 4294967242;
  if (*(_QWORD *)(a1 + 16 * a2 + 80) == -1)
    return 4294967241;
LABEL_15:
  result = 0;
  if (a3)
  {
    v5 = a1 + 80;
    v6 = *(_QWORD *)(v5 + 8 * ((2 * a2) | 1));
    v7 = *(_QWORD *)(v5 + 16 * a2);
    v8 = v6 >= v7;
    v9 = v6 - v7;
    if (!v8)
      v9 = 0;
    *a3 = v9;
  }
  return result;
}

uint64_t pcre2_substring_get_byname_8(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, size_t *a4)
{
  uint64_t result;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int16 *v11;
  unint64_t v12;

  if (*(_WORD *)(a1 + 72) == 1)
    return 4294967255;
  v11 = 0;
  v12 = 0;
  result = pcre2_substring_nametable_scan_8(*(_QWORD *)(a1 + 24), a2, &v12, (unsigned __int8 **)&v11);
  if ((result & 0x80000000) == 0)
  {
    v8 = (unsigned __int16 *)v12;
    if (v12 > (unint64_t)v11)
      return 4294967242;
    v9 = result;
    result = 4294967242;
    do
    {
      v10 = __rev16(*v8);
      if (v10 < *(unsigned __int16 *)(a1 + 74))
      {
        if (*(_QWORD *)(a1 + 16 * v10 + 80) != -1)
          return pcre2_substring_get_bynumber_8(a1, v10, a3, a4);
        result = 4294967241;
      }
      v8 = (unsigned __int16 *)((char *)v8 + v9);
    }
    while (v8 <= v11);
  }
  return result;
}

uint64_t pcre2_substring_get_bynumber_8(uint64_t a1, unsigned int a2, _QWORD *a3, size_t *a4)
{
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  size_t __n;

  __n = 0;
  result = pcre2_substring_length_bynumber_8(a1, a2, &__n);
  if ((result & 0x80000000) == 0)
  {
    v9 = _pcre2_memctl_malloc_8(8 * __n + 32, (__int128 *)a1);
    if (v9)
    {
      v10 = v9 + 3;
      cstdlib_memcpy(v9 + 3, (const void *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(a1 + 16 * a2 + 80)), __n);
      result = 0;
      *((_BYTE *)v10 + __n) = 0;
      *a3 = v10;
      *a4 = __n;
    }
    else
    {
      return 4294967248;
    }
  }
  return result;
}

uint64_t pcre2_substring_free_8(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result - 16))(result - 24, *(_QWORD *)(result - 8));
  return result;
}

uint64_t pcre2_substring_length_byname_8(uint64_t a1, unsigned __int8 *a2, unint64_t *a3)
{
  uint64_t result;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int16 *v9;
  unint64_t v10;

  if (*(_WORD *)(a1 + 72) == 1)
    return 4294967255;
  v9 = 0;
  v10 = 0;
  result = pcre2_substring_nametable_scan_8(*(_QWORD *)(a1 + 24), a2, &v10, (unsigned __int8 **)&v9);
  if ((result & 0x80000000) == 0)
  {
    v6 = (unsigned __int16 *)v10;
    if (v10 > (unint64_t)v9)
      return 4294967242;
    v7 = result;
    result = 4294967242;
    do
    {
      v8 = __rev16(*v6);
      if (v8 < *(unsigned __int16 *)(a1 + 74))
      {
        if (*(_QWORD *)(a1 + 16 * v8 + 80) != -1)
          return pcre2_substring_length_bynumber_8(a1, v8, a3);
        result = 4294967241;
      }
      v6 = (unsigned __int16 *)((char *)v6 + v7);
    }
    while (v6 <= v9);
  }
  return result;
}

uint64_t pcre2_substring_list_get_8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  char *v21;
  size_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  size_t v27;
  size_t v28;
  char *v29;

  v3 = *(unsigned int *)(a1 + 76);
  if ((v3 & 0x80000000) != 0)
    return v3;
  if ((_DWORD)v3)
  {
    v7 = a1 + 80;
    v8 = a3 == 0;
    v9 = 8 * v3;
    if (a3)
      v10 = 8 * v3 + 32;
    else
      v10 = 32;
LABEL_11:
    v12 = 0;
    v13 = (2 * v3);
    do
    {
      v14 = *(_QWORD *)(a1 + 8 * v12 + 80);
      v15 = *(_QWORD *)(a1 + 8 * v12 + 88);
      v26 = v15 >= v14;
      v16 = v15 - v14;
      if (!v26)
        v16 = 0;
      v10 += v16 + 9;
      v12 += 2;
    }
    while (v12 < v13);
    v17 = 0;
    goto LABEL_16;
  }
  v11 = *(unsigned __int16 *)(a1 + 74);
  v7 = a1 + 80;
  v8 = a3 == 0;
  v9 = 8 * v11;
  if (a3)
    v10 = 8 * v11 + 32;
  else
    v10 = 32;
  if (*(_WORD *)(a1 + 74))
  {
    LODWORD(v3) = *(unsigned __int16 *)(a1 + 74);
    goto LABEL_11;
  }
  v13 = 0;
  LODWORD(v3) = 0;
  v17 = 1;
LABEL_16:
  v18 = _pcre2_memctl_malloc_8(v10, (__int128 *)a1);
  if (v18)
  {
    v19 = v18 + 3;
    *a2 = v18 + 3;
    v20 = v3 + 1;
    v21 = (char *)&v18[(int)v3 + 4];
    if (v8)
    {
      v22 = 0;
      if ((v17 & 1) != 0)
        goto LABEL_32;
    }
    else
    {
      *a3 = v21;
      v22 = &v18[v20 + 3];
      v21 += v9;
      if ((v17 & 1) != 0)
      {
LABEL_32:
        v3 = 0;
        *v19 = 0;
        return v3;
      }
    }
    v23 = 0;
    do
    {
      v24 = *(_QWORD *)(v7 + 8 * v23);
      v25 = *(_QWORD *)(v7 + 8 * v23 + 8);
      v26 = v25 >= v24;
      v27 = v25 - v24;
      if (v26)
        v28 = v27;
      else
        v28 = 0;
      if (v27 != 0 && v26)
        cstdlib_memcpy(v21, (const void *)(*(_QWORD *)(a1 + 32) + v24), v28);
      *v19++ = v21;
      if (v22)
        *v22++ = v28;
      v29 = &v21[v28];
      *v29 = 0;
      v21 = v29 + 1;
      v23 += 2;
    }
    while (v23 < v13);
    goto LABEL_32;
  }
  return 4294967248;
}

uint64_t pcre2_substring_list_free_8(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result - 16))(result - 24, *(_QWORD *)(result - 8));
  return result;
}

uint64_t pcre2_substring_number_from_name_8(uint64_t a1, unsigned __int8 *a2)
{
  return pcre2_substring_nametable_scan_8(a1, a2, 0, 0);
}

uint64_t _pcre2_valid_utf_8(unsigned __int8 *a1, unint64_t a2, _QWORD *a3)
{
  unsigned __int8 *i;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  char v10;
  char v11;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;

  if (!a2)
    return 0;
  for (i = a1; ; ++i)
  {
    v4 = a2 - 1;
    if ((char)*i < 0)
      break;
    --a2;
LABEL_15:
    if (!a2)
      return 0;
  }
  v5 = *i;
  if (v5 <= 0xBF)
  {
    *a3 = i - a1;
    return 4294967274;
  }
  else if (v5 >= 0xFE)
  {
    *a3 = i - a1;
    return 4294967273;
  }
  else
  {
    v6 = _pcre2_utf8_table4[*i & 0x3F];
    a2 = v4 - v6;
    if (v4 < v6 && (*a3 = i - a1, v7 = ~v4 + v6, v7 < 5))
    {
      return (-3 - v7);
    }
    else
    {
      v9 = (_DWORD)i + 1;
      v8 = i[1];
      if ((v8 & 0xC0) == 0x80)
      {
        switch((int)v6)
        {
          case 1:
            if ((v5 & 0x3E) != 0)
              goto LABEL_14;
            *a3 = v9 + ~(_DWORD)a1;
            v16 = 4294967279;
            break;
          case 2:
            v10 = i[2];
            i += 2;
            if ((v10 & 0xC0) != 0x80)
            {
              v15 = (_DWORD)i - (_DWORD)a1;
              goto LABEL_54;
            }
            if (v5 == 224 && (v8 & 0x20) == 0)
            {
              *a3 = (int)i - (int)a1 - 2;
              v16 = 4294967278;
            }
            else
            {
              if (v5 != 237 || v8 < 0xA0)
                goto LABEL_15;
              *a3 = (int)i - (int)a1 - 2;
              v16 = 4294967280;
            }
            break;
          case 3:
            if ((i[2] & 0xC0) != 0x80)
            {
              v17 = (_DWORD)i - (_DWORD)a1;
              goto LABEL_56;
            }
            v11 = i[3];
            i += 3;
            if ((v11 & 0xC0) != 0x80)
            {
              v18 = (_DWORD)i - (_DWORD)a1;
              goto LABEL_61;
            }
            if (v5 == 240 && (v8 & 0x30) == 0)
            {
              *a3 = (int)i - (int)a1 - 3;
              v16 = 4294967277;
            }
            else
            {
              if (v5 <= 0xF4 && (v5 != 244 || v8 < 0x90))
                goto LABEL_15;
              *a3 = (int)i - (int)a1 - 3;
              v16 = 4294967281;
            }
            break;
          case 4:
            v13 = (_DWORD)i + 2;
            if ((i[2] & 0xC0) != 0x80)
              goto LABEL_50;
            v14 = (_DWORD)i + 3;
            if ((i[3] & 0xC0) != 0x80)
              goto LABEL_60;
            v9 = (_DWORD)i + 4;
            if ((i[4] & 0xC0) != 0x80)
            {
              v19 = v9 - (_DWORD)a1;
              goto LABEL_64;
            }
            v16 = 4294967283;
            if (v5 != 248 || (v8 & 0x38) != 0)
              goto LABEL_52;
            *a3 = v9 - (int)a1 - 4;
            v16 = 4294967276;
            break;
          case 5:
            v13 = (_DWORD)i + 2;
            if ((i[2] & 0xC0) == 0x80)
            {
              v14 = (_DWORD)i + 3;
              if ((i[3] & 0xC0) == 0x80)
              {
                if ((i[4] & 0xC0) == 0x80)
                {
                  v9 = (_DWORD)i + 5;
                  if ((i[5] & 0xC0) == 0x80)
                  {
                    v16 = 4294967282;
                    if (v5 != 252 || (v8 & 0x3C) != 0)
                      goto LABEL_52;
                    *a3 = v9 - (int)a1 - 5;
                    v16 = 4294967275;
                  }
                  else
                  {
                    *a3 = (int)i - (int)a1;
                    v16 = 4294967284;
                  }
                }
                else
                {
                  v19 = (_DWORD)i + 4 - (_DWORD)a1;
LABEL_64:
                  *a3 = v19 - 4;
                  v16 = 4294967285;
                }
              }
              else
              {
LABEL_60:
                v18 = v14 - (_DWORD)a1;
LABEL_61:
                *a3 = v18 - 3;
                v16 = 4294967286;
              }
            }
            else
            {
LABEL_50:
              v15 = v13 - (_DWORD)a1;
LABEL_54:
              v17 = v15 - 2;
LABEL_56:
              *a3 = v17;
              v16 = 4294967287;
            }
            break;
          default:
            if (v6 < 4)
            {
LABEL_14:
              ++i;
              goto LABEL_15;
            }
            v16 = 4294967282;
LABEL_52:
            *a3 = (v9 - (_DWORD)a1 - v6);
            break;
        }
      }
      else
      {
        *a3 = v9 + ~(_DWORD)a1;
        return 4294967288;
      }
    }
  }
  return v16;
}

BOOL _pcre2_xclass_8(int a1, _BYTE *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  _BOOL4 v26;
  _BOOL4 v27;
  unsigned __int8 v28;
  int v29;
  uint64_t v30;
  int v31;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;

  if (a1 <= 0xFF)
  {
    if ((*a2 & 4) == 0)
    {
      v2 = *a2 & 1;
      if ((*a2 & 2) != 0)
        return (a2[((unint64_t)a1 >> 3) + 1] >> (a1 & 7)) & 1;
      return v2;
    }
    if ((*a2 & 2) != 0 && ((a2[((unint64_t)a1 >> 3) + 1] >> (a1 & 7)) & 1) != 0)
      return !(*a2 & 1);
  }
  if ((*a2 & 2) != 0)
    v3 = a2 + 33;
  else
    v3 = a2 + 1;
  v4 = a1 + 127;
  if (a1 >= 0)
    v4 = a1;
  v5 = (uint64_t)v4 >> 7;
  v6 = a1 - (v4 & 0xFFFFFF80);
  v7 = a1 - 8232;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v8 = *v3;
        if (v8 != 1)
          break;
        v10 = v3 + 2;
        v11 = v3[1];
        if (v11 >= 0xC0)
        {
          if ((v11 & 0x20) != 0)
          {
            v14 = *v10 & 0x3F;
            if ((v11 & 0x10) != 0)
            {
              if ((v11 & 8) != 0)
              {
                v33 = v3[3] & 0x3F;
                v34 = v3[4] & 0x3F;
                v35 = v3[5] & 0x3F;
                if ((v11 & 4) != 0)
                {
                  v11 = ((v11 & 1) << 30) | (v14 << 24) | (v33 << 18) | (v34 << 12) | (v35 << 6) | v3[6] & 0x3F;
                  v10 = v3 + 7;
                }
                else
                {
                  v11 = ((v11 & 3) << 24) | (v14 << 18) | (v33 << 12) | (v34 << 6) | v35;
                  v10 = v3 + 6;
                }
              }
              else
              {
                v11 = ((v11 & 7) << 18) | (v14 << 12) | ((v3[3] & 0x3F) << 6) | v3[4] & 0x3F;
                v10 = v3 + 5;
              }
            }
            else
            {
              v11 = ((v11 & 0xF) << 12) | (v14 << 6) | v3[3] & 0x3F;
              v10 = v3 + 4;
            }
          }
          else
          {
            v10 = v3 + 3;
            v11 = v3[2] & 0x3F | ((v11 & 0x1F) << 6);
          }
        }
        v3 = v10;
        if (v11 == a1)
          return !(*a2 & 1);
      }
      if (v8 != 2)
        break;
      v12 = v3 + 2;
      v13 = v3[1];
      if (v13 >= 0xC0)
      {
        if ((v13 & 0x20) != 0)
        {
          v15 = *v12 & 0x3F;
          if ((v13 & 0x10) != 0)
          {
            if ((v13 & 8) != 0)
            {
              v36 = v3[3] & 0x3F;
              v37 = v3[4] & 0x3F;
              v38 = v3[5] & 0x3F;
              if ((v13 & 4) != 0)
              {
                v13 = ((v13 & 1) << 30) | (v15 << 24) | (v36 << 18) | (v37 << 12) | (v38 << 6) | v3[6] & 0x3F;
                v12 = v3 + 7;
              }
              else
              {
                v13 = ((v13 & 3) << 24) | (v15 << 18) | (v36 << 12) | (v37 << 6) | v38;
                v12 = v3 + 6;
              }
            }
            else
            {
              v13 = ((v13 & 7) << 18) | (v15 << 12) | ((v3[3] & 0x3F) << 6) | v3[4] & 0x3F;
              v12 = v3 + 5;
            }
          }
          else
          {
            v13 = ((v13 & 0xF) << 12) | (v15 << 6) | v3[3] & 0x3F;
            v12 = v3 + 4;
          }
        }
        else
        {
          v12 = v3 + 3;
          v13 = v3[2] & 0x3F | ((v13 & 0x1F) << 6);
        }
      }
      v3 = v12 + 1;
      v39 = *v12;
      if (v39 >= 0xC0)
      {
        if ((v39 & 0x20) != 0)
        {
          v40 = *v3 & 0x3F;
          if ((v39 & 0x10) != 0)
          {
            if ((v39 & 8) != 0)
            {
              v41 = v12[2] & 0x3F;
              v42 = v12[3] & 0x3F;
              v43 = v12[4] & 0x3F;
              if ((v39 & 4) != 0)
              {
                v39 = ((v39 & 1) << 30) | (v40 << 24) | (v41 << 18) | (v42 << 12) | (v43 << 6) | v12[5] & 0x3F;
                v3 = v12 + 6;
              }
              else
              {
                v39 = ((v39 & 3) << 24) | (v40 << 18) | (v41 << 12) | (v42 << 6) | v43;
                v3 = v12 + 5;
              }
            }
            else
            {
              v39 = ((v39 & 7) << 18) | (v40 << 12) | ((v12[2] & 0x3F) << 6) | v12[3] & 0x3F;
              v3 = v12 + 4;
            }
          }
          else
          {
            v39 = ((v39 & 0xF) << 12) | (v40 << 6) | v12[2] & 0x3F;
            v3 = v12 + 3;
          }
        }
        else
        {
          v3 = v12 + 2;
          v39 = v12[1] & 0x3F | ((v39 & 0x1F) << 6);
        }
      }
      if (v13 <= a1 && v39 >= a1)
        return !(*a2 & 1);
    }
    if (!*v3)
      return *a2 & 1;
    v2 = 0;
    v9 = _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)];
    switch(v3[1])
    {
      case 0u:
        goto LABEL_116;
      case 1u:
        v16 = BYTE1(_pcre2_ucd_records_8[2 * v9]);
        v17 = v16 > 9;
        v18 = (1 << v16) & 0x320;
        if (!v17 && v18 != 0)
          goto LABEL_116;
        goto LABEL_68;
      case 2u:
        v20 = v8 == 3;
        v21 = v3[2];
        v22 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v9])];
        goto LABEL_47;
      case 3u:
        v20 = v8 == 3;
        v23 = v3[2] == BYTE1(_pcre2_ucd_records_8[2 * v9]);
        goto LABEL_48;
      case 4u:
        v20 = v8 == 3;
        v24 = 2 * v9;
        v22 = v3[2];
        v21 = LOBYTE(_pcre2_ucd_records_8[v24]);
LABEL_47:
        v23 = v22 == v21;
        goto LABEL_48;
      case 5u:
        if ((v8 == 3) == ((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v9])] & 0xFFFFFFFD) == 1))
          return !(*a2 & 1);
        goto LABEL_117;
      case 6u:
      case 7u:
        if (a1 < 0x2000)
        {
          if (a1 > 132)
          {
            if (a1 > 5759)
            {
              if (a1 == 5760 || a1 == 6158)
                goto LABEL_116;
            }
            else if (a1 == 133 || a1 == 160)
            {
              goto LABEL_116;
            }
          }
          else if (a1 <= 0x20 && ((1 << a1) & 0x100003E00) != 0)
          {
            goto LABEL_116;
          }
        }
        else if ((a1 - 0x2000) < 0xB
               || v7 <= 0x37 && ((1 << v7) & 0x80000000000083) != 0
               || a1 == 12288)
        {
LABEL_116:
          if (v8 == 3)
            return !(*a2 & 1);
          goto LABEL_117;
        }
        v20 = v8 == 3;
        v23 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v9])] == 6;
LABEL_48:
        v25 = !v23;
        if (v20 != v25)
          return !(*a2 & 1);
LABEL_117:
        v3 += 3;
        break;
      case 8u:
        if ((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v9])] | 2) == 3)
          goto LABEL_116;
        v26 = v8 == 3;
        v27 = a1 == 95;
        goto LABEL_91;
      case 0xAu:
        if (a1 > 0x9F)
        {
          if (((a1 & 0xFFFFF800) == 55296) != (v8 == 3))
            return !(*a2 & 1);
        }
        else
        {
          if ((a1 - 36) <= 0x3C && ((1 << (a1 - 36)) & 0x1000000010000001) != 0)
            goto LABEL_116;
LABEL_68:
          if (v8 != 3)
            return !(*a2 & 1);
        }
        goto LABEL_117;
      case 0xBu:
        v28 = BYTE1(_pcre2_ucd_records_8[2 * v9]);
        v29 = _pcre2_ucp_gentype_8[v28];
        if (v29 == 6)
          goto LABEL_68;
        if (v29)
          goto LABEL_116;
        if (v28 == 1 && a1 != 1564 && a1 != 6158)
          goto LABEL_90;
        goto LABEL_68;
      case 0xCu:
        v30 = BYTE1(_pcre2_ucd_records_8[2 * v9]);
        if ((v30 - 27) < 2)
          goto LABEL_68;
        if (_pcre2_ucp_gentype_8[v30])
          goto LABEL_116;
        if (a1 == 1564 || (_DWORD)v30 != 1)
          goto LABEL_68;
LABEL_90:
        v26 = v8 == 3;
        v27 = (a1 - 8298) < 0xFFFFFFFC;
LABEL_91:
        if (((v27 ^ v26) & 1) == 0)
          return !(*a2 & 1);
        goto LABEL_117;
      case 0xDu:
        v31 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v9])];
        if (v31 == 4)
          goto LABEL_116;
        v27 = v8 == 3;
        v26 = a1 < 0x80 && v31 == 5;
        goto LABEL_91;
      default:
        return v2;
    }
  }
}

uint64_t luattt_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2711625729;
  result = 0;
  *a2 = &ILuattt;
  return result;
}

uint64_t luattt_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  _QWORD *v10;
  _WORD **v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t Object;
  _QWORD *v15;
  int Allocator;
  unsigned int v17;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = 2711625735;
  if (a5)
  {
    *a5 = safeh_GetNullHandle();
    a5[1] = v9;
    v21 = 0;
    v22 = 0;
    if ((InitRsrcFunction(a3, a4, &v22) & 0x80000000) == 0)
    {
      v10 = (_QWORD *)heap_Calloc(*(_QWORD **)(v22 + 8), 1, 144);
      if (v10)
      {
        v11 = (_WORD **)v10;
        v10[2] = 0;
        v12 = v10 + 2;
        *v10 = a3;
        v10[1] = a4;
        v10[8] = 0;
        v13 = v10 + 8;
        Object = objc_GetObject(*(_QWORD *)(v22 + 48), (uint64_t)"SYNTHSTREAM", &v21);
        if ((Object & 0x80000000) == 0)
        {
          v11[9] = *(_WORD **)(v21 + 8);
          v15 = *(_QWORD **)(v22 + 8);
          v19 = xmmword_214F5DEA0;
          v20 = 0;
          if (!vector_ObjOpen(v15, &v19, 1, v13))
          {
            v11 = 0;
            goto LABEL_14;
          }
          Allocator = ooc_utils_createAllocator((uint64_t)(v11 + 3), *v11, (int)v11[1]);
          Object = LH_ERROR_to_VERROR(Allocator);
          if ((Object & 0x80000000) == 0)
          {
            v17 = cstdlib_strlen("TTT_script_set = {}\n\n-- Load a resource\n-- argument: the resource name\n-- return: the identifier\nfunction TTT_resource_load(name)\n    local id = 0\n    for _, info in ipairs(TTT_script_set) do\n        if id < info.id then\n            id = info.id\n        end\n    end\n    id = id + 1\n    local info = {}\n    info.id = id\n    info.func = _G[name]\n    table.insert(TTT_script_set, 1, info)\n    return tostring(id)\nend\n"
                    "\n"
                    "-- Unload a resource\n"
                    "-- argument: the identifier\n"
                    "-- return: the identifier or an empty string if not present\n"
                    "function TTT_resource_unload(id_str)\n"
                    "    local id = tonumber(id_str)\n"
                    "    for pos, info in ipairs(TTT_script_set) do\n"
                    "        if info.id == id then\n"
                    "            table.remove(TTT_script_set, pos)\n"
                    "            return id_str\n"
                    "        end\n"
                    "    end\n"
                    "    return \"\"\n"
                    "end\n"
                    "\n"
                    "-- Call the rewrite process of all resources\n"
                    "-- argument: input text\n"
                    "-- return: output text\n"
                    "function TTT_rewrite_process(text)\n"
                    "    local buffer = text\n"
                    "    for _, info in ipairs(TTT_script_set) do\n"
                    "        buffer = info.func(buffer)\n"
                    "    end\n"
                    "    return buffer\n"
                    "end\n");
            v5 = 2711626240;
            if ((luavmldoutil_initialize_lua_vm_from_buffer(*v11, (uint64_t)v11[1], (uint64_t)(v11 + 3), (uint64_t)"TTT_rewrite_process", (uint64_t)luattt_log_callback, v12, "TTT_script_set = {}\n\n-- Load a resource\n-- argument: the resource name\n-- return: the identifier\nfunction TTT_resource_load(name)\n    local id = 0\n    for _, info in ipairs(TTT_script_set) do\n        if id < info.id then\n            id = info.id\n        end\n    end\n    id = id + 1\n"
                    "    local info = {}\n"
                    "    info.id = id\n"
                    "    info.func = _G[name]\n"
                    "    table.insert(TTT_script_set, 1, info)\n"
                    "    return tostring(id)\n"
                    "end\n"
                    "\n"
                    "-- Unload a resource\n"
                    "-- argument: the identifier\n"
                    "-- return: the identifier or an empty string if not present\n"
                    "function TTT_resource_unload(id_str)\n"
                    "    local id = tonumber(id_str)\n"
                    "    for pos, info in ipairs(TTT_script_set) do\n"
                    "        if info.id == id then\n"
                    "            table.remove(TTT_script_set, pos)\n"
                    "            return id_str\n"
                    "        end\n"
                    "    end\n"
                    "    return \"\"\n"
                    "end\n"
                    "\n"
                    "-- Call the rewrite process of all resources\n"
                    "-- argument: input text\n"
                    "-- return: output text\n"
                    "function TTT_rewrite_process(text)\n"
                    "    local buffer = text\n"
                    "    for _, info in ipairs(TTT_script_set) do\n"
                    "        buffer = info.func(buffer)\n"
                    "    end\n"
                    "    return buffer\n"
                    "end\n",
                    v17) & 0x80000000) != 0
              || !*v12)
            {
              goto LABEL_12;
            }
LABEL_14:
            v5 = 0;
            *a5 = (uint64_t)v11;
            *((_DWORD *)a5 + 2) = 1077;
            return v5;
          }
        }
        v5 = Object;
LABEL_12:
        luattt_pObjClose((uint64_t)v11);
        return v5;
      }
      return 2711625738;
    }
  }
  return v5;
}

uint64_t luattt_ObjClose(_QWORD *a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck((uint64_t)a1, a2, 1077, 144);
  if ((result & 0x80000000) == 0)
  {
    result = luattt_UnloadAllScripts((uint64_t)a1);
    if ((result & 0x80000000) == 0)
    {
      luattt_ProcessEnd(a1, a2);
      return luattt_pObjClose((uint64_t)a1);
    }
  }
  return result;
}

uint64_t luattt_ObjReopen(uint64_t a1, int a2)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 1077, 144);
  if ((result & 0x80000000) == 0)
    return luattt_UnloadAllScripts(a1);
  return result;
}

uint64_t luattt_ResourceTypes(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 1077, 144);
  if ((result & 0x80000000) == 0)
  {
    result = 0;
    *a3 = &luattt_ResourceTypes_SZ_LUATTT_CONTENT_TYPES;
  }
  return result;
}

uint64_t luattt_ResourceLoad(uint64_t a1, int a2, char *a3, const char *a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;
  BOOL v14;
  uint64_t v15;
  unsigned int v16;
  const char *v17;
  char v19;
  uint64_t v20;
  int ScriptFromBuffer;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v29;
  const char *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = 0;
  v34 = 0;
  v32 = 0;
  v7 = 2711625735;
  v31 = 0;
  if (a3 && a7)
  {
    v9 = a6;
    v10 = a5;
    if (a4)
    {
      v14 = a6 != 0;
      if (!a5 && a6)
        return v7;
    }
    else
    {
      if (!a5 || !a6)
        return v7;
      v14 = 1;
    }
    v15 = safeh_HandleCheck(a1, a2, 1077, 144);
    if ((v15 & 0x80000000) != 0)
      return v15;
    v29 = 0;
    v30 = 0;
    *(_QWORD *)a7 = 0;
    *(_DWORD *)(a7 + 8) = 0;
    if ((InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v34) & 0x80000000) == 0)
    {
      v35 = 0;
      if (a4 && *a4 && vector_GetElemAt(*(_QWORD *)(a1 + 64), 0, &v35))
      {
        v16 = 1;
        do
        {
          v17 = *(const char **)(v35 + 8);
          if (v17)
          {
            if (!cstdlib_strcmp(v17, a4))
              return 2711625752;
          }
        }
        while (vector_GetElemAt(*(_QWORD *)(a1 + 64), v16++, &v35));
      }
      v19 = !v14;
      if (!v10)
        v19 = 1;
      if ((v19 & 1) != 0)
      {
        v20 = luattt_DataOpen(v34, a4, &v33, a3, (uint64_t)&v32, (uint64_t)&v31);
        if ((v20 & 0x80000000) != 0)
          goto LABEL_32;
        v10 = v32;
        v9 = v31;
      }
      else
      {
        v32 = v10;
        v31 = v9;
      }
      ScriptFromBuffer = LuaVMLDO_LoadScriptFromBuffer(*(_QWORD *)(a1 + 16), v10, v9);
      v20 = LH_ERROR_to_VERROR(ScriptFromBuffer);
      if ((v20 & 0x80000000) == 0)
      {
        v22 = LuaVMLDO_RunFunctionReturningString(*(_QWORD *)(a1 + 16), (uint64_t)"TTT_resource_load", (uint64_t)"TTT_script", 4u, (char *)&v29);
        v23 = LH_ERROR_to_VERROR(v22);
        v27 = v23;
        if ((v23 & 0x80000000) != 0)
        {
          v7 = v23;
        }
        else
        {
          v30 = a4;
          log_OutText(*(_QWORD *)(v34 + 32), (uint64_t)"LUATTT", 5, 0, (uint64_t)"Loaded resource %s", v24, v25, v26, (uint64_t)&v29);
          if (vector_Add(*(_QWORD *)(a1 + 64), &v29) == 1)
            v7 = v27;
          else
            v7 = 2711625738;
          *(_QWORD *)a7 = v30;
          *(_DWORD *)(a7 + 8) = 1108;
        }
        goto LABEL_34;
      }
LABEL_32:
      v7 = v20;
LABEL_34:
      if (v32)
      {
        brk_DataUnmap(*(_QWORD *)(v34 + 24), v33, v32);
        v32 = 0;
      }
      if (v33)
        brk_DataClose(*(_QWORD *)(v34 + 24), v33);
    }
  }
  return v7;
}

uint64_t luattt_ResourceUnload(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  v7 = safeh_HandleCheck(a1, a2, 1077, 144);
  if ((v7 & 0x80000000) != 0)
    return v7;
  v8 = 2711626765;
  if ((InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v16) & 0x80000000) != 0)
    return 2711625735;
  v7 = safeh_HandleCheck(a3, a4, 1108, 16);
  if ((v7 & 0x80000000) != 0)
    return v7;
  if (vector_GetElemAt(*(_QWORD *)(a1 + 64), 0, &v15))
  {
    v9 = 0;
    while (*((_QWORD *)v15 + 1) != a3)
    {
      if (!vector_GetElemAt(*(_QWORD *)(a1 + 64), ++v9, &v15))
        return v8;
    }
    v11 = LuaVMLDO_RunFunctionReturningString(*(_QWORD *)(a1 + 16), (uint64_t)"TTT_resource_unload", (uint64_t)v15, 4u, v15);
    v8 = LH_ERROR_to_VERROR(v11);
    if ((v8 & 0x80000000) == 0)
    {
      log_OutText(*(_QWORD *)(v16 + 32), (uint64_t)"LUATTT", 5, 0, (uint64_t)"Unloaded resource %s", v12, v13, v14, (uint64_t)v15);
      vector_Remove(*(_QWORD *)(a1 + 64), v9);
    }
  }
  return v8;
}

uint64_t luattt_ProcessStart(_WORD **a1, int a2, _WORD *a3, _WORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v14;

  v14 = 0;
  v8 = 2711625735;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 1077, 144) & 0x80000000) != 0)
    return 2711625736;
  if ((InitRsrcFunction(*a1, (int)a1[1], &v14) & 0x80000000) == 0)
  {
    v9 = 0;
    a1[14] = a3;
    a1[15] = a4;
    do
    {
      v10 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, char *, _QWORD, _QWORD, _WORD **))a1[9] + 8))(a3, a4, 538, luattt_ProcessStart_szInput[v9], 0, 0, a1 + 16);
      if ((v10 & 0x80000000) == 0)
        break;
    }
    while (v9++ != 6);
    if (v10 < 0)
      a1[16] = 0;
    v12 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, const char *, _QWORD, _QWORD, _WORD **))a1[9] + 8))(a3, a4, 538, "text/plain;charset=utf-8",
            0,
            0,
            a1 + 10);
    if ((v12 & 0x80000000) != 0)
    {
      v8 = v12;
LABEL_14:
      luattt_ProcessEnd(a1, a2);
      return v8;
    }
    v8 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, const char *, _QWORD, uint64_t, _WORD **))a1[9] + 8))(a3, a4, 538, "text/plain;charset=utf-8",
           0,
           1,
           a1 + 12);
    if ((v8 & 0x80000000) != 0)
      goto LABEL_14;
  }
  return v8;
}

uint64_t luattt_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v7;
  int v8;
  size_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;
  char *__s;
  char *v21;
  uint64_t v22;

  v21 = 0;
  v22 = 0;
  v18 = 0;
  v19 = 0;
  v7 = safeh_HandleCheck(a1, a2, 1077, 144);
  if ((v7 & 0x80000000) == 0)
  {
    if ((InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v22) & 0x80000000) != 0)
      return 2711625735;
    if (!*(_QWORD *)(a1 + 80) || !*(_QWORD *)(a1 + 96))
    {
      v15 = 0;
LABEL_24:
      v8 = 1;
LABEL_25:
      *a5 = v8;
      return v15;
    }
    *a5 = 0;
    v7 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)(a1 + 72) + 144))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), (char *)&v18 + 4, &v18);
    if ((v7 & 0x80000000) == 0)
    {
      v8 = v18;
      if (!(_DWORD)v18)
      {
        v15 = 0;
        goto LABEL_25;
      }
      v7 = (*(uint64_t (**)(_QWORD, _QWORD, char **, char *))(*(_QWORD *)(a1 + 72) + 88))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), &v21, (char *)&v18 + 4);
      if ((v7 & 0x80000000) == 0)
      {
        __s = v21;
        v9 = HIDWORD(v18);
        if (vector_GetSize(*(_QWORD *)(a1 + 64)))
        {
          v10 = LuaVMLDO_RunFunctionReturningPointerToString(*(_QWORD *)(a1 + 16), (uint64_t)"TTT_rewrite_process", (uint64_t)v21, (uint64_t *)&__s);
          v11 = LH_ERROR_to_VERROR(v10);
          if ((v11 & 0x80000000) != 0)
            goto LABEL_17;
          v9 = cstdlib_strlen(__s);
        }
        if (!(_DWORD)v9
          || (v11 = (*(uint64_t (**)(_QWORD, _QWORD, void **, size_t))(*(_QWORD *)(a1 + 72) + 112))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), &v19, v9), (v11 & 0x80000000) == 0)&& (cstdlib_memcpy(v19, __s, v9), v11 = (*(uint64_t (**)(_QWORD, _QWORD, size_t))(*(_QWORD *)(a1 + 72) + 120))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), v9), (v11 & 0x80000000) == 0))
        {
          v12 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 72) + 96))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), HIDWORD(v18));
          if ((v12 & 0x80000000) != 0 || !vector_GetSize(*(_QWORD *)(a1 + 64)))
          {
LABEL_18:
            v14 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 72) + 72))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
            if (v14 >= 0)
              v15 = v12;
            else
              v15 = v14;
            *(_QWORD *)(a1 + 96) = safeh_GetNullHandle();
            *(_QWORD *)(a1 + 104) = v16;
            goto LABEL_24;
          }
          v13 = LuaVMLDO_ReleasePointerToString(*(_QWORD *)(a1 + 16));
          v11 = LH_ERROR_to_VERROR(v13);
        }
LABEL_17:
        v12 = v11;
        goto LABEL_18;
      }
    }
  }
  return v7;
}

uint64_t luattt_ProcessEnd(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t NullHandle;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;

  v3 = safeh_HandleCheck((uint64_t)a1, a2, 1077, 144);
  if ((v3 & 0x80000000) == 0)
  {
    NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[16], a1[17], NullHandle, v5))
    {
      v6 = (*(uint64_t (**)(_QWORD, _QWORD))(a1[9] + 72))(a1[16], a1[17]);
      if (v6 >= 0)
        v3 = v3;
      else
        v3 = v6;
    }
    a1[16] = safeh_GetNullHandle();
    a1[17] = v7;
    v8 = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[10], a1[11], v8, v9))
    {
      v10 = (*(uint64_t (**)(_QWORD, _QWORD))(a1[9] + 72))(a1[10], a1[11]);
      if (v10 >= 0)
        v3 = v3;
      else
        v3 = v10;
    }
    a1[10] = safeh_GetNullHandle();
    a1[11] = v11;
    v12 = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[12], a1[13], v12, v13))
    {
      v14 = (*(uint64_t (**)(_QWORD, _QWORD))(a1[9] + 72))(a1[12], a1[13]);
      if (v14 >= 0)
        v3 = v3;
      else
        v3 = v14;
    }
    a1[12] = safeh_GetNullHandle();
    a1[13] = v15;
  }
  return v3;
}

uint64_t luattt_log_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return log_OutText(a1, (uint64_t)"LUATTT", 4, 0, a2, a6, a7, a8, 0);
}

uint64_t luattt_pObjClose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v1 = 2711625735;
  v5 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v5) & 0x80000000) == 0)
  {
    if (*(_QWORD *)(a1 + 72))
      objc_ReleaseObject(*(_QWORD *)(v5 + 48), (uint64_t)"SYNTHSTREAM");
    if (*(_QWORD *)(a1 + 16))
      luavmldoutil_destroy_lua_vm(a1 + 24, (uint64_t *)(a1 + 16));
    OOCAllocator_Des();
    v3 = *(_QWORD *)(a1 + 64);
    if (v3)
      vector_ObjClose(v3);
    heap_Free(*(_QWORD **)(v5 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t luattt_UnloadAllScripts(uint64_t a1)
{
  uint64_t i;
  uint64_t inited;
  uint64_t v4;
  int Size;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;

  i = 2711625735;
  v12 = 0;
  v13 = 0;
  if (a1)
  {
    inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v13);
    if ((inited & 0x80000000) == 0)
    {
      v4 = inited;
      Size = vector_GetSize(*(_QWORD *)(a1 + 64));
      if (Size)
      {
        v6 = Size - 1;
        for (i = v4; vector_GetElemAt(*(_QWORD *)(a1 + 64), v6, &v12); --v6)
        {
          v7 = LuaVMLDO_RunFunctionReturningString(*(_QWORD *)(a1 + 16), (uint64_t)"TTT_resource_unload", (uint64_t)v12, 4u, v12);
          i = LH_ERROR_to_VERROR(v7);
          if ((i & 0x80000000) != 0)
            break;
          log_OutText(*(_QWORD *)(v13 + 32), (uint64_t)"LUATTT", 5, 0, (uint64_t)"Unloaded resource %s", v8, v9, v10, (uint64_t)v12);
          vector_Remove(*(_QWORD *)(a1 + 64), v6);
          if (!v6)
            break;
        }
      }
      else
      {
        return v4;
      }
    }
  }
  return i;
}

uint64_t luattt_DataOpen(uint64_t a1, const char *a2, uint64_t *a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t Str;
  int v14;
  int v16[2];
  char v17[1024];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v16 = 0;
  bzero(v17, 0x400uLL);
  v12 = brk_DataOpenEx(*(_QWORD *)(a1 + 24), (uint64_t)a2, 1, (uint64_t)a3);
  if (cstdlib_strstr(a4, ";loader=broker") && (v12 & 0x80000000) != 0)
  {
    Str = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"langcode", v16);
    if ((Str & 0x80000000) != 0)
      return Str;
    v14 = brokeraux_ComposeBrokerString(a1, a2, 0, 1, *(char **)v16, 0, 0, v17, 0x400uLL);
    if (v14 < 0)
      return v14 | 0xA1A02000;
    v12 = brk_DataOpenEx(*(_QWORD *)(a1 + 24), (uint64_t)v17, 0, (uint64_t)a3);
  }
  if ((v12 & 0x80000000) == 0)
    return brk_DataMapEx(*(_QWORD *)(a1 + 24), *a3, 0, a6, a5);
  return v12;
}

uint64_t araparser_loc_getStandardizeRule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  char i;
  char *v9;
  char *v10;
  _QWORD *v11;
  int v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  unsigned int v20;
  __int16 v21;
  char **v22;
  int __c;

  LOBYTE(__c) = 0;
  v22 = 0;
  v21 = -1;
  v5 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, uint64_t, char ***, __int16 *, int *))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 96))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), "fecfg", a2, &v22, &v21, &__c);
  if ((v5 & 0x80000000) == 0 && v21)
  {
    v6 = *v22;
    v7 = cstdlib_strchr(*v22, __c);
    if (v7)
      *v7 = 0;
    if (v6)
    {
      for (i = 0; ; ++i)
      {
        v9 = cstdlib_strchr(v6, 95);
        v10 = v9;
        if (v9)
          *v9 = 0;
        v11 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
        v12 = cstdlib_strlen(v6);
        v13 = (char *)heap_Calloc(v11, 1, (v12 + 1));
        if (!v13)
          break;
        v18 = v13;
        cstdlib_strcpy(v13, v6);
        if (i == 1)
        {
          *(_QWORD *)(a3 + 8) = v18;
        }
        else if (i)
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v18);
        }
        else
        {
          *(_QWORD *)a3 = v18;
          *(_WORD *)(a3 + 16) = cstdlib_strlen(v18);
        }
        v6 = v10 + 1;
        if (!v10)
          return v5;
      }
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 54000, 0, v14, v15, v16, v17, v20);
      return 2356158474;
    }
  }
  return v5;
}

uint64_t fe_ara_parser_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t PosparserIGTreesAndDict;
  uint64_t inited;
  uint64_t Object;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  const char *v28;
  unsigned int v30;
  __int128 v31[2];
  _QWORD *(*v32)(_QWORD *, _QWORD *);
  char *__src;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v36 = 0;
  v37 = 0;
  PosparserIGTreesAndDict = 2356158471;
  v35 = 0;
  __src = 0;
  v34 = 0;
  if (!a5)
    return PosparserIGTreesAndDict;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  inited = InitRsrcFunction(a3, a4, &v37);
  if ((inited & 0x80000000) != 0)
    return inited;
  inited = objc_GetObject(*(_QWORD *)(v37 + 48), (uint64_t)"SYNTHSTREAM", &v36);
  if ((inited & 0x80000000) != 0)
    return inited;
  Object = objc_GetObject(*(_QWORD *)(v37 + 48), (uint64_t)"FE_DEPES", &v34);
  v11 = *(_QWORD *)(v37 + 48);
  if ((Object & 0x80000000) != 0)
  {
    v28 = "SYNTHSTREAM";
LABEL_17:
    objc_ReleaseObject(v11, (uint64_t)v28);
    return Object;
  }
  v12 = objc_GetObject(v11, (uint64_t)"FE_DCTLKP", &v35);
  if ((v12 & 0x80000000) != 0)
  {
    Object = v12;
    objc_ReleaseObject(*(_QWORD *)(v37 + 48), (uint64_t)"SYNTHSTREAM");
    v11 = *(_QWORD *)(v37 + 48);
    v28 = "FE_DEPES";
    goto LABEL_17;
  }
  v17 = heap_Calloc(*(_QWORD **)(v37 + 8), 952, 1);
  if (!v17)
  {
    log_OutPublic(*(_QWORD *)(v37 + 32), (uint64_t)"FE_ARAPARSER", 54000, 0, v13, v14, v15, v16, v30);
    objc_ReleaseObject(*(_QWORD *)(v37 + 48), (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(*(_QWORD *)(v37 + 48), (uint64_t)"FE_DCTLKP");
    objc_ReleaseObject(*(_QWORD *)(v37 + 48), (uint64_t)"FE_DEPES");
    return 2356158474;
  }
  v18 = (_QWORD **)(v17 + 24);
  inited = posparser_Open(v37, (uint64_t *)(v17 + 24));
  if ((inited & 0x80000000) != 0)
    return inited;
  *(_WORD *)(v17 + 56) = 0;
  *(_QWORD *)(v17 + 48) = 0;
  inited = paramc_ParamGetStr(*(_QWORD *)(v37 + 40), (uint64_t)"langcode", &__src);
  if ((inited & 0x80000000) != 0)
    return inited;
  cstdlib_strcpy((char *)(*(_QWORD *)(v17 + 24) + 240), __src);
  cstdlib_strcpy((char *)(*(_QWORD *)(v17 + 24) + 243), "pos");
  v19 = v37;
  *(_QWORD *)(v17 + 8) = a4;
  *(_QWORD *)(v17 + 16) = v19;
  *(_QWORD *)v17 = a3;
  *(_QWORD *)(v17 + 32) = *(_QWORD *)(v36 + 8);
  v20 = v35;
  v21 = *(_QWORD *)(v17 + 24);
  *(_QWORD *)(v21 + 24) = *(_QWORD *)(v35 + 8);
  *(_OWORD *)(v21 + 8) = *(_OWORD *)(v20 + 16);
  v22 = v34;
  v23 = *(_QWORD *)(v17 + 24);
  *(_QWORD *)(v23 + 56) = *(_QWORD *)(v34 + 8);
  *(_OWORD *)(v23 + 40) = *(_OWORD *)(v22 + 16);
  *(_QWORD *)a5 = v17;
  *(_DWORD *)(a5 + 8) = 85954;
  v24 = *(_QWORD *)(v17 + 24);
  PosparserIGTreesAndDict = getPosparserIGTreesAndDict(*(_QWORD *)(v17 + 16), *(_WORD **)v17, *(_QWORD *)(v17 + 8), *(_QWORD *)(v24 + 8), *(_QWORD *)(v24 + 16), *(_QWORD *)(v24 + 24), (_DWORD *)(v24 + 232), (uint64_t *)(v24 + 216), (uint64_t *)(v24 + 224), (_DWORD *)(v24 + 236), (const char *)(v24 + 240), (_DWORD *)(v17 + 40));
  if ((PosparserIGTreesAndDict & 0x80000000) != 0)
  {
LABEL_21:
    fe_ara_parser_ObjClose(*(_QWORD *)a5, *(_QWORD *)(a5 + 8));
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    return PosparserIGTreesAndDict;
  }
  if (!*(_DWORD *)(v17 + 40))
    return PosparserIGTreesAndDict;
  v25 = *(_QWORD **)(v37 + 8);
  v26 = *v18 + 32;
  v31[0] = xmmword_24D292350;
  v31[1] = *(_OWORD *)off_24D292360;
  v32 = ssftmap_ElemFreeString;
  v27 = ssftmap_ObjOpen(v25, 0, v31, v26);
  if ((v27 & 0x80000000) != 0)
  {
    PosparserIGTreesAndDict = v27;
    goto LABEL_21;
  }
  PosparserIGTreesAndDict = posparser_getPosMap(*v18);
  if ((PosparserIGTreesAndDict & 0x80000000) != 0)
    goto LABEL_21;
  return PosparserIGTreesAndDict;
}

uint64_t fe_ara_parser_ObjClose(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = safeh_HandleCheck(a1, a2, 85954, 952);
  if ((result & 0x80000000) != 0)
    return 2356158472;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 40) && (ssftmap_ObjClose(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 256)) & 0x80000000) == 0)
    {
      v9 = *(_QWORD *)(a1 + 24);
      if (*(_DWORD *)(v9 + 232) == 1)
        freePosparserIGTrees(*(_QWORD *)(a1 + 16), (uint64_t *)(v9 + 216), (uint64_t *)(v9 + 224), v4, v5, v6, v7, v8);
    }
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), (uint64_t)"FE_DCTLKP");
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), (uint64_t)"FE_DEPES");
    posparser_Close(*(_QWORD **)(a1 + 24));
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), a1);
    return 0;
  }
  return result;
}

uint64_t fe_ara_parser_ObjReopen(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;

  v12 = 0;
  result = safeh_HandleCheck(a1, a2, 85954, 952);
  if ((result & 0x80000000) != 0)
    return 2356158472;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 40) != 1
      || (result = ssftmap_Clear(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 256)), (result & 0x80000000) == 0)
      && (result = posparser_getPosMap(*(_QWORD **)(a1 + 24)), (result & 0x80000000) == 0)
      && ((v9 = *(_QWORD *)(a1 + 24), *(_DWORD *)(v9 + 232) != 1)
       || (result = freePosparserIGTrees(*(_QWORD *)(a1 + 16), (uint64_t *)(v9 + 216), (uint64_t *)(v9 + 224), v4, v5, v6, v7, v8), (result & 0x80000000) == 0)))
    {
      result = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"langcode", &v12);
      if ((result & 0x80000000) == 0)
      {
        cstdlib_strcpy((char *)(*(_QWORD *)(a1 + 24) + 240), v12);
        cstdlib_strcpy((char *)(*(_QWORD *)(a1 + 24) + 243), "pos");
        v10 = *(_QWORD *)(a1 + 16);
        v11 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)(v11 + 232) = 0;
        v11 += 232;
        return getPosparserIGTreesAndDict(v10, *(_WORD **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(v11 - 224), *(_QWORD *)(v11 - 216), *(_QWORD *)(v11 - 208), (_DWORD *)v11, (uint64_t *)(v11 - 16), (uint64_t *)(v11 - 8), (_DWORD *)(v11 + 4), (const char *)(v11 + 8), (_DWORD *)(a1 + 40));
      }
    }
  }
  return result;
}

uint64_t fe_ara_parser_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t StandardizeRule;
  char *v10;
  unsigned __int16 v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unsigned int v22;
  char v23[3];
  _BYTE __c[11];
  char __b[20];
  char v26[12];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v7 = 2356158472;
  *(_WORD *)&__c[1] = -1;
  v8 = safeh_HandleCheck(a1, a2, 85954, 952);
  if ((v8 & 0x80000000) != 0)
    return v7;
  if (!*(_DWORD *)(a1 + 40))
    return v8;
  *(_QWORD *)&__c[3] = 0;
  __c[0] = 0;
  StandardizeRule = posparser_ProcessStart(*(char **)(a1 + 24));
  if ((StandardizeRule & 0x80000000) != 0)
    goto LABEL_19;
  *(_WORD *)&__c[1] = -1;
  v8 = (*(uint64_t (**)(_QWORD, _QWORD, const char *, const char *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 96))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), "fecfg", "araparsernumstandardize", &__c[3], &__c[1], __c);
  if ((v8 & 0x80000000) != 0)
    return v8;
  if (!*(_WORD *)&__c[1])
  {
    v12 = *(unsigned __int16 *)(a1 + 56);
    if (!*(_WORD *)(a1 + 56))
      goto LABEL_17;
    goto LABEL_12;
  }
  v10 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
  if (v10)
    *v10 = 0;
  v11 = cstdlib_atoi(**(unsigned __int8 ***)&__c[3]);
  v12 = v11;
  *(_WORD *)(a1 + 56) = v11;
  if (v11)
  {
LABEL_12:
    v13 = heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, (24 * v12) | 1);
    *(_QWORD *)(a1 + 48) = v13;
    if (!v13)
    {
      log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 54000, 0, v14, v15, v16, v17, v22);
      v7 = 2356158474;
      goto LABEL_20;
    }
    if (!*(_WORD *)(a1 + 56))
      goto LABEL_17;
    v18 = 0;
    v19 = 0;
    while (1)
    {
      cstdlib_memset(__b, 0, 0x20uLL);
      cstdlib_strcpy(__b, "araparserstandardize");
      v20 = LH_itoa(v19, v23, 0xAu);
      cstdlib_strcat(v26, v20);
      StandardizeRule = araparser_loc_getStandardizeRule(a1, (uint64_t)__b, *(_QWORD *)(a1 + 48) + v18);
      if ((StandardizeRule & 0x80000000) != 0)
        break;
      ++v19;
      v18 += 24;
      if (v19 >= *(unsigned __int16 *)(a1 + 56))
        goto LABEL_17;
    }
LABEL_19:
    v7 = StandardizeRule;
LABEL_20:
    synstrmaux_CloseStreams((_WORD *)(a1 + 64), *(_QWORD *)(a1 + 32));
    return v7;
  }
LABEL_17:
  synstrmaux_InitStreamOpener(a1 + 64, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER");
  synstrmaux_RegisterInStream((_WORD *)(a1 + 64), (uint64_t)"text/plain;charset=utf-8", 0, a1 + 888);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 64), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    0,
    a1 + 904);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 64), (uint64_t)"text/plain;charset=utf-8", a1 + 920);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 64), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 936);
  v7 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 64), *(_QWORD *)(a1 + 32), a3, a4);
  if ((v7 & 0x80000000) != 0)
    goto LABEL_20;
  return v7;
}

uint64_t fe_ara_parser_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int v25;
  unsigned __int16 v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  _BOOL4 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  unsigned __int16 v77;
  void *v78;
  char *v79;
  void *__src;
  uint64_t v81;
  unsigned __int16 v82;
  size_t __n;
  char *v84;
  char *__s;
  char *v86;

  __s = 0;
  v86 = 0;
  __n = 0;
  v84 = 0;
  v9 = 2356158474;
  v82 = 0;
  v81 = 0;
  v78 = 0;
  v77 = 0;
  v76 = 0;
  v10 = safeh_HandleCheck(a1, a2, 85954, 952);
  if ((v10 & 0x80000000) != 0)
    return 2356158472;
  *a5 = 1;
  if (!*(_DWORD *)(a1 + 40))
    return v10;
  __src = 0;
  v10 = (*(uint64_t (**)(_QWORD, _QWORD, char **, char *))(*(_QWORD *)(a1 + 32) + 88))(*(_QWORD *)(a1 + 888), *(_QWORD *)(a1 + 896), &v86, (char *)&__n + 4);
  if ((v10 & 0x80000000) != 0)
    return v10;
  v11 = HIDWORD(__n);
  v12 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)(a1 + 32) + 144))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), (char *)&v81 + 4, &v81);
  if ((v12 & 0x80000000) != 0)
    return v12;
  if (HIDWORD(__n))
  {
    v10 = (*(uint64_t (**)(_QWORD, _QWORD, void **, size_t *))(*(_QWORD *)(a1 + 32) + 88))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), &__src, &__n);
    if ((v10 & 0x80000000) == 0)
    {
      v13 = __n;
      v82 = __n >> 5;
      v14 = (char *)heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), __n);
      v19 = v14;
      v79 = v14;
      if (!v14)
        goto LABEL_68;
      cstdlib_memcpy(v14, __src, __n);
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Processing Sentence \"%s\"", v20, v21, v22, (uint64_t)v86);
      if (v82)
      {
        v23 = 0;
        v24 = (int *)(v19 + 12);
        while (1)
        {
          v25 = *v24;
          v24 += 8;
          if (v25 != *((_DWORD *)v19 + 3))
            break;
          if (v82 == ++v23)
          {
            v26 = v82;
            v23 = v82;
            goto LABEL_30;
          }
        }
        v26 = v23;
      }
      else
      {
        v26 = 0;
        v23 = 0;
      }
LABEL_30:
      v29 = heap_Alloc(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), 4 * v82);
      if (v29)
      {
        v34 = v29;
        v35 = (uint64_t)&v19[32 * v23];
        v36 = v82;
        if (v82 != v26)
        {
          v37 = 0;
          v38 = (_DWORD *)(v35 + 4);
          do
          {
            *(_DWORD *)(v34 + 4 * v37) = *v38;
            *v38 = v37;
            v38 += 8;
            ++v37;
          }
          while ((unsigned __int16)(v36 - v26) != v37);
        }
        marker_sort(v35, v36 - v23);
        if (v82 != v26)
        {
          v39 = (unsigned __int16)(v82 - v26);
          v40 = &v19[32 * v23 + 4];
          do
          {
            *(_DWORD *)v40 = *(_DWORD *)(v34 + 4 * *(unsigned int *)v40);
            v40 += 32;
            --v39;
          }
          while (v39);
        }
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v34);
        v41 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, (HIDWORD(__n) + 1));
        v19 = v41;
        __s = v41;
        if (!v41)
          goto LABEL_68;
        cstdlib_strcpy(v41, v86);
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Processing This Sentence \"%s\"", v42, v43, v44, (uint64_t)v19);
        araParser_SanitizeSentence(a1, &__s, (_DWORD *)&__n + 1, (uint64_t *)&v79, &v82);
        v45 = __s;
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Processing Sanitized Sentence \"%s\"", v46, v47, v48, (uint64_t)__s);
        if (!*(_WORD *)(a1 + 56))
        {
          v19 = 0;
LABEL_44:
          v55 = v79;
          v56 = posparser_ExtractWords(*(_DWORD **)(a1 + 24), (uint64_t)v79, v82, v45, HIDWORD(__n), (uint64_t *)&v78, &v77);
          if ((v56 & 0x80000000) == 0)
          {
            if (*(_WORD *)(a1 + 56))
            {
              araParser_setStandardizedWords(v78, v77, (uint64_t)v45, (uint64_t)v19);
              if (v19)
              {
                heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v19);
                v19 = 0;
                v84 = 0;
              }
            }
            v57 = *(_QWORD *)(a1 + 24);
            if (!*(_WORD *)(v57 + 184))
              goto LABEL_51;
            v56 = posparser_applyEmbeddedRules(v57, (uint64_t)v78, v77, (uint64_t)v45, HIDWORD(__n));
            if ((v56 & 0x80000000) == 0)
            {
              v57 = *(_QWORD *)(a1 + 24);
LABEL_51:
              if (*(_DWORD *)(v57 + 192) != 1)
                goto LABEL_54;
              *(_WORD *)(v57 + 210) = 50;
              v58 = (void *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, 306);
              v59 = *(_QWORD *)(a1 + 24);
              *(_QWORD *)(v59 + 200) = v58;
              if (v58)
              {
                *(_WORD *)(v59 + 208) = 0;
                cstdlib_memset(v58, 0, 6 * *(unsigned __int16 *)(v59 + 210));
LABEL_54:
                v56 = araParser_NormalizeSentence(a1, (const char **)&__s, (_DWORD *)&__n + 1, v55, v82, (uint64_t)v78, v77);
                if ((v56 & 0x80000000) == 0)
                {
                  v63 = *(_QWORD *)(a1 + 24);
                  if (*(_DWORD *)(v63 + 192) == 1)
                  {
                    v64 = *(unsigned __int16 *)(v63 + 208);
                    if ((_DWORD)v64)
                    {
                      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Identified %d Diacritics", v60, v61, v62, v64);
                      v65 = *(_QWORD *)(a1 + 24);
                      if (*(_WORD *)(v65 + 208))
                      {
                        v66 = 0;
                        v67 = 0;
                        do
                        {
                          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"(%d,%s)", v60, v61, v62, *(unsigned __int16 *)(*(_QWORD *)(v65 + 200) + v66));
                          ++v67;
                          v65 = *(_QWORD *)(a1 + 24);
                          v66 += 6;
                        }
                        while (v67 < *(unsigned __int16 *)(v65 + 208));
                      }
                    }
                  }
                  v68 = __s;
                  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Processing Normalized Sentence \"%s\"", v60, v61, v62, (uint64_t)__s);
                  v69 = araParser_checkIfIsolatedWord(a1, (uint64_t)v78, v77, (uint64_t)v68);
                  v56 = posparser_Process(*(_QWORD *)(a1 + 24), a3, a4, (uint64_t)v78, v77, v69, 0, &__s, (uint64_t *)&v79, &v82);
                  if ((v56 & 0x80000000) == 0)
                  {
                    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Final Sentence \"%s\"", v70, v71, v72, (uint64_t)__s);
                    v73 = cstdlib_strlen(__s);
                    LODWORD(__n) = 32 * v82;
                    HIDWORD(__n) = v73 + 1;
                    v56 = (*(uint64_t (**)(_QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 32) + 104))(*(_QWORD *)(a1 + 920), *(_QWORD *)(a1 + 928), __s);
                    if ((v56 & 0x80000000) == 0)
                    {
                      v56 = (*(uint64_t (**)(_QWORD, _QWORD, char *, _QWORD))(*(_QWORD *)(a1 + 32) + 104))(*(_QWORD *)(a1 + 936), *(_QWORD *)(a1 + 944), v79, __n);
                      if ((v56 & 0x80000000) == 0)
                      {
                        v56 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 96))(*(_QWORD *)(a1 + 888), *(_QWORD *)(a1 + 896), v11);
                        if ((v56 & 0x80000000) == 0)
                        {
                          v56 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 96))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), v13);
                          if ((v56 & 0x80000000) == 0)
                          {
                            v56 = (*(uint64_t (**)(_QWORD, _QWORD, int *, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56)
                                                                                           + 112))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 48), &v76, 0);
                            if ((v56 & 0x80000000) == 0)
                            {
                              v76 += HIDWORD(__n) - v11;
                              v56 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56)
                                                                              + 104))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 48));
                            }
                          }
                        }
                      }
                    }
                  }
                }
                goto LABEL_67;
              }
LABEL_68:
              log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 54000, 0, v15, v16, v17, v18, v75);
              goto LABEL_69;
            }
          }
LABEL_67:
          v9 = v56;
          goto LABEL_69;
        }
        v49 = (char *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), 1, (HIDWORD(__n) + 1));
        v84 = v49;
        if (v49)
        {
          cstdlib_strcpy(v49, v45);
          araParser_ApplyStandardizations((char *)a1, &v84);
          v19 = v84;
          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Got Standardized Sentence     \"%s\"", v50, v51, v52, (uint64_t)v84);
          goto LABEL_44;
        }
        v53 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
        v54 = 54000;
      }
      else
      {
        v53 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
        v54 = 30000;
      }
      log_OutPublic(v53, (uint64_t)"FE_ARAPARSER", v54, 0, v30, v31, v32, v33, v75);
      v19 = 0;
LABEL_69:
      if (v79)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v79);
        v79 = 0;
      }
      posparser_FreeWords(*(_QWORD **)(a1 + 24), (uint64_t)v78, v77);
      v78 = 0;
      if (__s)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)__s);
        __s = 0;
      }
      if (v19)
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)v19);
      v74 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 200);
      if (v74)
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v74);
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 200) = 0;
      }
      return v9;
    }
    return v10;
  }
  v27 = v81;
  if (v81)
  {
    if (HIDWORD(v81))
    {
      v10 = (*(uint64_t (**)(_QWORD, _QWORD, void **, size_t *))(*(_QWORD *)(a1 + 32) + 88))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), &__src, &__n);
      if ((v10 & 0x80000000) != 0)
        return v10;
      v10 = (*(uint64_t (**)(_QWORD, _QWORD, void *, _QWORD))(*(_QWORD *)(a1 + 32) + 104))(*(_QWORD *)(a1 + 936), *(_QWORD *)(a1 + 944), __src, __n);
      if ((v10 & 0x80000000) != 0)
        return v10;
      v12 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 96))(*(_QWORD *)(a1 + 904), *(_QWORD *)(a1 + 912), __n);
      if ((v12 & 0x80000000) != 0)
        return v12;
      v27 = v81;
    }
    if (!v27)
      return v12;
    return synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 64), *(_QWORD *)(a1 + 32));
  }
  v79 = 0;
  if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (uint64_t)"clcpppipelinemode", &v79) & 0x80000000) != 0
    || !v79
    || !*v79)
  {
    *a5 = 0;
  }
  return v12;
}

size_t araParser_SanitizeSentence(uint64_t a1, char **a2, _DWORD *a3, uint64_t *a4, _WORD *a5)
{
  unsigned __int16 v8;
  unsigned __int16 v9;
  unsigned int v10;
  unsigned __int16 v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  _BOOL4 v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  unint64_t v31;
  unsigned int v32;
  BOOL v33;
  char v34;
  char v35;
  unint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  unint64_t i;
  int v40;
  _DWORD *v41;
  unint64_t v42;
  int v43;
  BOOL v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  unsigned __int16 v51;
  size_t result;
  int v53;
  unsigned __int16 v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  _DWORD *v58;
  unint64_t v59;
  unsigned int v60;
  BOOL v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  const char *v75;
  size_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  const char *v83;
  size_t v84;
  uint64_t v85;
  unsigned __int16 v86;
  char *v87;
  char *v88;
  int v89;
  int v90;
  unsigned __int16 v91;
  unint64_t v92;
  int v93;
  int *v94;
  unint64_t v95;
  unsigned int v96;
  BOOL v97;
  int v98;
  _DWORD *v99;
  unsigned __int16 v102;
  _DWORD *v103;
  __int16 v104;
  char *__s;

  __s = *a2;
  v104 = 0;
  v103 = (_DWORD *)*a4;
  v102 = 0;
  v8 = cstdlib_strlen(__s);
  if (!v8)
    goto LABEL_160;
  v99 = a3;
  v9 = 0;
  v10 = v8;
  v11 = v8;
  do
  {
    if ((unsigned __int16)*a5 < 2u)
      goto LABEL_23;
    v12 = 1;
    v13 = (uint64_t)v103;
    v14 = 64;
    do
    {
      v15 = v12;
      if (*(_DWORD *)(v13 + 32 * v12) == 21
        && (v16 = *(char **)(v13 + 32 * v12 + 24)) != 0
        && (v17 = LH_stricmp(v16, "spell"), v13 = (uint64_t)v103, !v17)
        && ((v19 = v103[3], v20 = v103[8 * v15 + 3] - v19, v20 == v9) || v20 == (unsigned __int16)(v9 + 1)))
      {
        v21 = v14;
        v22 = v15;
        do
        {
          if (++v22 >= (unint64_t)(unsigned __int16)*a5)
          {
            LOWORD(v24) = v11;
            goto LABEL_21;
          }
          v23 = *(_DWORD *)((char *)v103 + v21);
          v21 += 32;
        }
        while (v23 != 21);
        LOWORD(v24) = v11;
        if (v103[8 * (unsigned __int16)v22] == 21)
          v24 = v103[8 * (unsigned __int16)v22 + 3] - v19;
LABEL_21:
        v18 = v9 != (unsigned __int16)v24;
        v9 = v24;
      }
      else
      {
        v18 = 0;
      }
      if (*(_DWORD *)(v13 + 32 * v15 + 12) - *(_DWORD *)(v13 + 12) > v9)
        break;
      if (v18)
        break;
      v12 = v15 + 1;
      v14 += 32;
    }
    while ((int)v15 + 1 < (unsigned __int16)*a5);
    if (!v18)
    {
LABEL_23:
      v25 = v9;
      v26 = (unsigned __int8 *)&__s[v9];
      if (*v26 != 32)
        goto LABEL_39;
      v27 = v9;
      v28 = v9 + 1;
      if (v28 < v10 && __s[v28] == 32)
      {
        v29 = (unsigned __int16)*a5;
        if (v29 >= 2)
        {
          v30 = v103 + 8;
          v31 = 2;
          do
          {
            v32 = v30[3] - v103[3];
            v33 = v32 == v9;
            if (v32 == (unsigned __int16)(v9 + 1))
              v33 = 1;
            v34 = *v30 == 21 && v33;
            if (v32 > v9)
              break;
            v30 += 8;
            v35 = v31++ >= v29 ? 1 : v34;
          }
          while ((v35 & 1) == 0);
          if ((v34 & 1) != 0)
          {
LABEL_39:
            if (!isPunc_0(*(_QWORD *)(a1 + 24), v26))
              goto LABEL_99;
            v36 = (unsigned __int16)*a5;
            if (v36 > 1)
            {
              v37 = v103 + 11;
              v38 = 2;
              for (i = 1; i < v36; ++i)
              {
                if (v103[8 * i] == 34)
                {
                  v40 = v103[3];
                  if (v103[8 * i + 3] - v40 <= v9)
                  {
                    v41 = v37;
                    v42 = v38;
                    do
                    {
                      v43 = *(v41 - 3);
                      if (v43 == 21 || v43 == 3)
                      {
                        if (*v41 - v40 > v9 || (_DWORD)v36 == (_DWORD)v42)
                        {
LABEL_73:
                          inSMSMode(v9, (uint64_t)v103, v36);
                          goto LABEL_99;
                        }
                      }
                      else if ((_DWORD)v36 == (_DWORD)v42)
                      {
                        goto LABEL_73;
                      }
                      v46 = v43 == 21 || v42++ >= v36;
                      v41 += 8;
                    }
                    while (!v46);
                  }
                }
                ++v38;
                v37 += 8;
              }
            }
            v47 = inSMSMode(v9, (uint64_t)v103, v36);
            v48 = v47;
            if (!v9)
              goto LABEL_92;
            v49 = v9 - 1;
            v50 = __s[v49];
            if (v50 == 32)
              goto LABEL_92;
            if (v47)
            {
              if (v47 != 1)
                goto LABEL_92;
              if (isSMSPunc(*(_QWORD *)(a1 + 24), (unsigned __int8 *)&__s[v49]))
              {
                v48 = 1;
                goto LABEL_92;
              }
              LOBYTE(v50) = __s[v49];
            }
            if (!isDigit(v50))
            {
              v66 = v9 + 1;
              if ((_DWORD)v66 == v10)
              {
                if (v9 < 2u)
                  goto LABEL_92;
                v67 = __s;
              }
              else
              {
                if (v66 >= v10)
                  goto LABEL_92;
                if (v9 < 2u)
                  goto LABEL_92;
                v67 = __s;
                if (__s[v66] != 32)
                  goto LABEL_92;
              }
              v75 = &v67[v9 - 2];
              v76 = cstdlib_strlen("§");
              if (cstdlib_strncmp(v75, "§", v76))
              {
                result = posparserGrowStr(*(_QWORD *)(a1 + 24), (uint64_t *)&__s, (unsigned __int16)(v10 + 1), &v104, 0);
                if ((result & 0x80000000) != 0)
                  goto LABEL_161;
                result = posparserInsertWordMarker(*(_QWORD *)(a1 + 24), (uint64_t *)&v103, a5, v9, 1, __s, &v102);
                if ((result & 0x80000000) != 0)
                  goto LABEL_161;
                cstdlib_memmove(&__s[v9 + 1], &__s[v9], (int)(v10 - v9));
                __s[v10 + 1] = 0;
                v11 = cstdlib_strlen(__s);
                __s[v9] = 32;
                v77 = (unsigned __int16)*a5;
                v70 = (uint64_t)v103;
                if (v77 >= 2)
                {
                  v78 = 0;
                  v79 = 32 * v102 - 32;
                  v80 = 32 * v77 - 32;
                  do
                  {
                    if (v79 != v78)
                    {
                      v81 = *(_DWORD *)(v70 + v78 + 44);
                      if (v9 <= (unsigned __int16)(v81 - *(_WORD *)(v70 + 12)))
                        *(_DWORD *)(v70 + v78 + 44) = v81 + 1;
                    }
                    v78 += 32;
                  }
                  while (v80 != v78);
                }
LABEL_128:
                ++*(_DWORD *)(v70 + 16);
                if (v9)
                  --v9;
                else
                  v9 = 0;
                goto LABEL_100;
              }
            }
LABEL_92:
            v63 = v9 + 1;
            v64 = v10 - v63;
            if (v10 <= v63)
              goto LABEL_99;
            if (v48 == 1)
            {
              if (isSMSPunc(*(_QWORD *)(a1 + 24), (unsigned __int8 *)&__s[v63]))
                goto LABEL_99;
            }
            else if (v48)
            {
              goto LABEL_99;
            }
            v65 = __s[v63];
            if (v65 == 32 || isDigit(v65) || v9 && __s[v9 - 1] != 32)
              goto LABEL_99;
            v68 = v10 + 1;
            result = posparserGrowStr(*(_QWORD *)(a1 + 24), (uint64_t *)&__s, (unsigned __int16)v68, &v104, 0);
            if ((result & 0x80000000) != 0)
              goto LABEL_161;
            result = posparserInsertWordMarker(*(_QWORD *)(a1 + 24), (uint64_t *)&v103, a5, (unsigned __int16)(v9 + 1), 1, __s, &v102);
            if ((result & 0x80000000) != 0)
              goto LABEL_161;
            cstdlib_memmove(&__s[v9 + 2], &__s[v63], v64);
            __s[v68] = 0;
            v11 = cstdlib_strlen(__s);
            __s[v63] = 32;
            v69 = (unsigned __int16)*a5;
            v70 = (uint64_t)v103;
            if (v69 >= 2)
            {
              v71 = 0;
              v72 = 32 * v102 - 32;
              v73 = 32 * v69 - 32;
              do
              {
                if (v72 != v71)
                {
                  v74 = *(_DWORD *)(v70 + v71 + 44);
                  if (v9 < (unsigned __int16)(v74 - *(_WORD *)(v70 + 12)))
                    *(_DWORD *)(v70 + v71 + 44) = v74 + 1;
                }
                v71 += 32;
              }
              while (v73 != v71);
            }
            goto LABEL_128;
          }
        }
      }
      v51 = v9;
      if (v9 >= v11)
        goto LABEL_77;
      while (__s[v25] == 32)
      {
        if (v11 == ++v25)
        {
          v51 = v11;
          goto LABEL_75;
        }
      }
      v51 = v25;
LABEL_75:
      v27 = v51;
      if (!v9 || (_DWORD)v28 != v51)
      {
LABEL_77:
        result = posparserGrowStr(*(_QWORD *)(a1 + 24), (uint64_t *)&__s, (unsigned __int16)(v11 + 1), &v104, 0);
        if ((result & 0x80000000) != 0)
          goto LABEL_161;
        cstdlib_memmove(&__s[v28], &__s[v51], (int)(v10 - v27));
        v53 = v27 - v28;
        __s[(int)(v10 - (v27 - v28))] = 0;
        v54 = cstdlib_strlen(__s);
        v55 = (unsigned __int16)*a5;
        v56 = (uint64_t)v103;
        if (v55 >= 2)
        {
          v57 = v103[3];
          v58 = v103 + 11;
          v59 = v55 - 1;
          while (1)
          {
            v60 = (unsigned __int16)(*v58 - v57);
            v61 = v60 <= v28 || v60 >= v27;
            v62 = v57 + v28;
            if (!v61)
              goto LABEL_87;
            if (v60 >= v27)
              break;
LABEL_88:
            v58 += 8;
            if (!--v59)
              goto LABEL_89;
          }
          v62 = *v58 - v53;
LABEL_87:
          *v58 = v62;
          goto LABEL_88;
        }
LABEL_89:
        *(_DWORD *)(v56 + 16) -= v53;
        v11 = v54;
      }
LABEL_99:
      ++v9;
    }
LABEL_100:
    v10 = v11;
  }
  while (v11 > v9);
  if (!v11)
    goto LABEL_160;
  v82 = v11 - 1;
  if (__s[v82] == 32)
  {
LABEL_140:
    v86 = v11 - 1;
    if (v11 != 1)
    {
      v87 = __s;
      v88 = &__s[v86];
      if (*v88 == 32)
      {
        v89 = 0;
        v90 = (unsigned __int16)(v11 - 1);
        while (1)
        {
          if (v87[v90 - 1] != 32)
            goto LABEL_148;
          v91 = v86;
          *v88 = 0;
          if (!--v86)
            break;
          ++v89;
          v90 = v86;
          v87 = __s;
          v88 = &__s[v86];
          v11 = v91;
          if (*v88 != 32)
          {
            v11 = v91;
            goto LABEL_149;
          }
        }
        v11 = 1;
LABEL_149:
        v92 = (unsigned __int16)*a5;
        if (v92 >= 2)
        {
          v93 = v103[3];
          v94 = v103 + 11;
          v95 = v92 - 1;
          while (1)
          {
            v96 = (unsigned __int16)(*v94 - v93);
            v97 = v96 <= v11 || v96 >= v9;
            v98 = v93 + v11;
            if (!v97)
              goto LABEL_158;
            if (v96 >= v9)
              break;
LABEL_159:
            v94 += 8;
            if (!--v95)
              goto LABEL_160;
          }
          v98 = v11 - v9 + *v94;
LABEL_158:
          *v94 = v98;
          goto LABEL_159;
        }
        goto LABEL_160;
      }
      v89 = 0;
LABEL_148:
      if (v89)
        goto LABEL_149;
    }
LABEL_160:
    result = cstdlib_strlen(__s);
    *a3 = result;
    goto LABEL_161;
  }
  if (v11 >= 3u)
  {
    v83 = &__s[v11 - 3];
    v84 = cstdlib_strlen("§");
    if (!cstdlib_strncmp(v83, "§", v84))
    {
      if (isPunc_0(*(_QWORD *)(a1 + 24), (unsigned __int8 *)&__s[v82]))
      {
        a3 = v99;
        goto LABEL_140;
      }
    }
  }
  v85 = v11 + 1;
  result = posparserGrowStr(*(_QWORD *)(a1 + 24), (uint64_t *)&__s, (unsigned __int16)v85, &v104, 0);
  if ((result & 0x80000000) == 0)
  {
    __s[v11] = 32;
    __s[v85] = 0;
    v11 = cstdlib_strlen(__s);
    a3 = v99;
    if (!v11)
      goto LABEL_160;
    goto LABEL_140;
  }
LABEL_161:
  *a4 = (uint64_t)v103;
  *a2 = __s;
  return result;
}

char *araParser_ApplyStandardizations(char *result, char **a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  char *v6;

  v3 = *a2;
  if (*((_WORD *)result + 28))
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = cstdlib_strstr(v3, *(const char **)(*((_QWORD *)v4 + 6) + 24 * v5));
      if (result)
      {
        v6 = result;
        do
        {
          cstdlib_memcpy(v6, *(const void **)(*((_QWORD *)v4 + 6) + 24 * v5 + 8), *(unsigned __int16 *)(*((_QWORD *)v4 + 6) + 24 * v5 + 16));
          result = cstdlib_strstr(v6, *(const char **)(*((_QWORD *)v4 + 6) + 24 * v5));
          v6 = result;
        }
        while (result);
      }
      ++v5;
    }
    while (v5 < *((unsigned __int16 *)v4 + 28));
  }
  *a2 = v3;
  return result;
}

void *araParser_setStandardizedWords(void *result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _DWORD *v7;

  if (a2)
  {
    v6 = a2;
    v7 = (char *)result + 92;
    do
    {
      if (!*(v7 - 1) && !*v7)
      {
        result = (void *)cstdlib_strncmp((const char *)(a3 + *((unsigned __int16 *)v7 - 42)), (const char *)(a4 + *((unsigned __int16 *)v7 - 42)), *((unsigned __int16 *)v7 - 41) - (unint64_t)*((unsigned __int16 *)v7 - 42));
        if ((_DWORD)result)
          result = cstdlib_memcpy((void *)(a3 + *((unsigned __int16 *)v7 - 42)), (const void *)(a4 + *((unsigned __int16 *)v7 - 42)), *((unsigned __int16 *)v7 - 41) - (unint64_t)*((unsigned __int16 *)v7 - 42));
      }
      v7 += 26;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t araParser_NormalizeSentence(uint64_t a1, const char **a2, _DWORD *a3, _DWORD *a4, unsigned int a5, uint64_t a6, unsigned int a7)
{
  const char *v10;
  unsigned __int16 v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _WORD *v31;
  unsigned int v32;
  _WORD *v33;
  int v34;
  _DWORD *v35;
  uint64_t v36;
  unsigned __int16 v41;

  v10 = *a2;
  v41 = 0;
  v11 = cstdlib_strlen(v10);
  if (v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = v11;
    if (a7 <= 1)
      v15 = 1;
    else
      v15 = a7;
    v36 = v15;
    v16 = v11;
    while (1)
    {
      if (a7)
      {
        v17 = a7;
        v18 = (_DWORD *)(a6 + 92);
        while (*((unsigned __int16 *)v18 - 42) > (unsigned __int16)v13
             || *((unsigned __int16 *)v18 - 41) <= (unsigned __int16)v13)
        {
          v18 += 26;
          if (!--v17)
            goto LABEL_15;
        }
        if (!*(v18 - 1) && !*(v18 - 20) && !*v18)
          break;
      }
LABEL_15:
      v13 += Utf8_LengthInBytes((unsigned __int8 *)&v10[(unsigned __int16)v13], 1);
LABEL_16:
      v12 = (unsigned __int16)v13;
      v14 = v16;
      if ((unsigned __int16)v13 >= v16)
        goto LABEL_42;
    }
    v35 = a3;
    v19 = (unsigned __int8 *)&v10[(unsigned __int16)v13];
    v20 = isMAPPINGXBI2A(*(_QWORD *)(a1 + 24), v19);
    v21 = *(_QWORD *)(a1 + 24);
    if (v20 == 1)
    {
      if (*(_DWORD *)(v21 + 192) == 1)
      {
        result = storeDiacritic(a1, v13, (unsigned __int8 *)&v10[(unsigned __int16)v13], (uint64_t *)(v21 + 200), (_WORD *)(v21 + 208), (_WORD *)(v21 + 210), &v41);
        if ((result & 0x80000000) != 0)
          return result;
      }
      *v19 = 65;
      ++v13;
      goto LABEL_41;
    }
    if (!isDiacritic(v21, (unsigned __int8 *)&v10[(unsigned __int16)v13]))
    {
      v13 += Utf8_LengthInBytes(v19, 1);
LABEL_41:
      a3 = v35;
      goto LABEL_16;
    }
    v23 = *(_QWORD *)(a1 + 24);
    if (*(_DWORD *)(v23 + 192) != 1
      || (result = storeDiacritic(a1, v13, v19, (uint64_t *)(v23 + 200), (_WORD *)(v23 + 208), (_WORD *)(v23 + 210), &v41), (result & 0x80000000) == 0))
    {
      v24 = v41;
      v25 = v12 + v41;
      if (v25 < v14)
        cstdlib_memmove((void *)&v10[(unsigned __int16)v13], &v10[v25], (int)(v14 - v12));
      v10[(int)v14 - v24] = 0;
      v16 = cstdlib_strlen(v10);
      if (a5 >= 2)
      {
        v26 = a4[3];
        v27 = a5 - 1;
        v28 = a4 + 11;
        do
        {
          if (v12 < (unsigned __int16)(*v28 - v26))
            *v28 -= v24;
          v28 += 8;
          --v27;
        }
        while (v27);
      }
      v29 = 0;
      a4[4] -= v24;
      v31 = (_WORD *)(a6 + 10);
      v30 = v36;
      while (1)
      {
        v32 = (unsigned __int16)*(v31 - 1);
        if (v32 > (unsigned __int16)v13)
          break;
        v32 = (unsigned __int16)*v31;
        if (v32 > (unsigned __int16)v13)
        {
          v33 = (_WORD *)(a6 + 104 * v29 + 10);
          goto LABEL_37;
        }
LABEL_38:
        ++v29;
        v31 += 52;
        if (!--v30)
          goto LABEL_41;
      }
      *(v31 - 1) = v32 - v24;
      LOWORD(v32) = *v31;
      v33 = v31;
LABEL_37:
      *v33 = v32 - v24;
      goto LABEL_38;
    }
  }
  else
  {
LABEL_42:
    v34 = cstdlib_strlen(v10);
    result = 0;
    *a3 = v34;
    *a2 = v10;
  }
  return result;
}

BOOL araParser_checkIfIsolatedWord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unsigned __int16 *v8;
  unint64_t v9;
  uint64_t v10;

  v4 = a3;
  if (!(_DWORD)a3)
    return (_DWORD)v4 == 1;
  if ((_DWORD)a3 != 1)
  {
    v7 = a3;
    v8 = (unsigned __int16 *)(a2 + 10);
    v9 = 1;
    LODWORD(v4) = 0;
    do
    {
      v10 = *(v8 - 1);
      if (*v8 - (_DWORD)v10 != 1 || !isPunc_0(*(_QWORD *)(a1 + 24), (unsigned __int8 *)(a4 + v10)))
        LODWORD(v4) = v4 + 1;
      if (v9 >= v7)
        break;
      v8 += 52;
      ++v9;
    }
    while (v4 < 2);
    return (_DWORD)v4 == 1;
  }
  return v4;
}

uint64_t fe_ara_parser_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  result = safeh_HandleCheck(a1, a2, 85954, 952);
  if ((result & 0x80000000) != 0)
    return 2356158472;
  if (*(_DWORD *)(a1 + 40))
  {
    if (*(_WORD *)(a1 + 56))
    {
      v4 = 0;
      v5 = 0;
      v6 = *(_QWORD *)(a1 + 48);
      do
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(v6 + v4));
        v7 = (_QWORD *)(*(_QWORD *)(a1 + 48) + v4);
        *v7 = 0;
        heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v7[1]);
        v6 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(v6 + v4 + 8) = 0;
        ++v5;
        v4 += 24;
      }
      while (v5 < *(unsigned __int16 *)(a1 + 56));
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 48);
      if (!v6)
      {
LABEL_11:
        *(_WORD *)(a1 + 56) = 0;
        posparser_ProcessEnd(*(_QWORD **)(a1 + 24));
        return synstrmaux_CloseStreams((_WORD *)(a1 + 64), *(_QWORD *)(a1 + 32));
      }
    }
    heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 8), v6);
    *(_QWORD *)(a1 + 48) = 0;
    goto LABEL_11;
  }
  return result;
}

uint64_t fe_ara_parser_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2356158465;
  result = 0;
  *a2 = &IAraParser;
  return result;
}

uint64_t storeDiacritic(uint64_t a1, __int16 a2, unsigned __int8 *a3, uint64_t *a4, _WORD *a5, _WORD *a6, unsigned __int16 *a7)
{
  uint64_t v14;
  unsigned __int16 v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unsigned int v24;

  v14 = *a4;
  v15 = Utf8_LengthInBytes(a3, 1);
  *a7 = v15;
  v16 = (unsigned __int16)*a5;
  v17 = (unsigned __int16)*a6;
  if (v16 < v17)
    goto LABEL_4;
  *a6 = v17 + 50;
  v18 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(a1 + 16) + 8), v14, 6 * (unsigned __int16)(v17 + 50) + 6);
  if (v18)
  {
    v14 = v18;
    v16 = (unsigned __int16)*a5;
    v15 = *a7;
LABEL_4:
    cstdlib_strncpy((char *)(v14 + 6 * v16 + 2), (const char *)a3, v15);
    result = 0;
    *(_BYTE *)(v14 + 6 * (unsigned __int16)*a5 + *a7 + 2) = 0;
    *(_WORD *)(v14 + 6 * (unsigned __int16)(*a5)++) = a2;
    *a4 = v14;
    return result;
  }
  log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 54000, 0, v19, v20, v21, v22, v24);
  return 2356158474;
}

uint64_t embed_dict_getName(char *a1, char *a2)
{
  const char *v4;
  char *v5;
  _OWORD v7[8];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  memset(v7, 0, sizeof(v7));
  if (cstdlib_strstr(a1, "clm") == a1)
  {
    v5 = cstdlib_strstr(a1, "_");
    if (!v5)
      return 2693799943;
    v4 = v5;
    cstdlib_strncat((char *)v7, a1, v5 - a1);
    cstdlib_strcat((char *)v7, "_embed_dict");
  }
  else
  {
    cstdlib_strcat((char *)v7, a1);
    v4 = "_embed_dict";
  }
  cstdlib_strcat((char *)v7, v4);
  cstdlib_strcpy(a2, (const char *)v7);
  return 0;
}

uint64_t embed_vect_getBrokerString(uint64_t a1, char *a2, char *a3, char *a4, unint64_t a5)
{
  uint64_t result;
  const char *v11;
  char *v12;
  char *__s2;
  char __s1[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  __s2 = 0;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  *(_OWORD *)__s1 = 0u;
  v15 = 0u;
  result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"langcode", &__s2);
  if ((result & 0x80000000) == 0)
  {
    result = paramc_ParamGetStr(*(_QWORD *)(a1 + 40), (uint64_t)"fecfg", &v12);
    if ((result & 0x80000000) == 0)
    {
      if (cstdlib_strstr(a2, "clm") == a2)
      {
        result = (uint64_t)cstdlib_strstr(a2, "_");
        if (!result)
          return result;
        v11 = (const char *)result;
        cstdlib_strcpy(a3, "clmnn:");
        cstdlib_strncat(a3, a2, v11 - a2);
        cstdlib_strcat(a3, "_embed_vect");
        cstdlib_strcat(a3, v11);
        return 0;
      }
      if (cstdlib_strcmp(a2, "lid"))
      {
        cstdlib_strcat(__s1, a2);
        cstdlib_strcat(__s1, "_embed_vect");
        cstdlib_strcat(__s1, "_");
        cstdlib_strcat(__s1, __s2);
        cstdlib_strcat(__s1, "_");
        cstdlib_strcat(__s1, v12);
        result = brokeraux_ComposeBrokerString(a1, __s1, 1, 1, __s2, 0, 0, a3, a5);
      }
      else
      {
        cstdlib_strcat(__s1, "ml2emb");
        result = brokeraux_ComposeBrokerString(a1, __s1, 1, 0, __s2, 0, 0, a3, a5);
        if ((result & 0x80000000) != 0)
          return result;
        cstdlib_strcpy(__s1, "ml2emb");
        cstdlib_strcat(__s1, __s2);
        result = brokeraux_ComposeBrokerString(a1, __s1, 1, 0, __s2, 0, 0, a4, a5);
      }
      if ((result & 0x80000000) == 0)
        return 0;
    }
  }
  return result;
}

uint64_t nn_word_lkp_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2693799937;
  result = 0;
  *a2 = &INnWordLkp;
  return result;
}

uint64_t nn_word_lkp_ObjOpen(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = 0;
  v6 = 2693799943;
  if (a6)
  {
    *(_QWORD *)a6 = 0;
    *(_DWORD *)(a6 + 8) = 0;
    inited = InitRsrcFunction(a4, a5, &v28);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(_QWORD *)(v28 + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"Entering nn_word_lkp_ObjOpen", v14, v15, v16, v26);
      v17 = (_QWORD *)heap_Calloc(*(_QWORD **)(v28 + 8), 1, 128);
      if (v17)
      {
        *(_QWORD *)a6 = v17;
        *(_DWORD *)(a6 + 8) = 62639;
        *v17 = a1;
        v17[1] = a2;
        v17[2] = a4;
        v17[3] = a5;
        v17[4] = v28;
        v17[15] = a3;
        v6 = nn_word_lkp_ObjOpenHelper((uint64_t)v17, a6);
        if ((v6 & 0x80000000) == 0)
          log_OutText(*(_QWORD *)(v28 + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"Leaving nn_word_lkp_ObjOpen", v22, v23, v24, v27);
      }
      else
      {
        log_OutPublic(*(_QWORD *)(v28 + 32), (uint64_t)"NN_WORD_LKP", 41000, 0, v18, v19, v20, v21, v27);
        return 2693799946;
      }
    }
  }
  return v6;
}

uint64_t nn_word_lkp_ObjClose(_QWORD *a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = safeh_HandleCheck((uint64_t)a1, a2, 62639, 128);
  if ((result & 0x80000000) != 0)
    return 2693799944;
  if (a1)
  {
    log_OutText(*(_QWORD *)(a1[4] + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"Entering nn_word_lookup_ObjClose", v4, v5, v6, v12);
    nn_word_lkp_ObjCloseHelper(a1);
    v10 = a1[4];
    v11 = *(_QWORD *)(v10 + 48);
    if (v11)
    {
      objc_ReleaseObject(v11, (uint64_t)"FE_DCTLKP");
      v10 = a1[4];
    }
    log_OutText(*(_QWORD *)(v10 + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"Leaving nn_word_lookup_ObjClose", v7, v8, v9, v13);
    heap_Free(*(_QWORD **)(a1[4] + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t nn_word_lkp_ObjReopen(uint64_t a1, uint64_t a2)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;

  v2 = a2;
  v3 = (_QWORD *)a1;
  v13 = (_QWORD *)a1;
  v14 = a2;
  v7 = 2693799944;
  if ((safeh_HandleCheck(a1, a2, 62639, 128) & 0x80000000) == 0 && v3)
  {
    log_OutText(*(_QWORD *)(v3[4] + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"Entering nn_word_lkp_ObjReOpen", v4, v5, v6, (uint64_t)v13);
    v8 = nn_word_lkp_ObjCloseHelper(v3);
    if ((v8 & 0x80000000) != 0)
    {
      v7 = v8;
    }
    else
    {
      v7 = nn_word_lkp_ObjOpenHelper((uint64_t)v3, (uint64_t)&v13);
      if ((v7 & 0x80000000) == 0)
      {
        log_OutText(*(_QWORD *)(v3[4] + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"Leaving nn_word_lkp_ObjReOpen", v9, v10, v11, (uint64_t)v13);
        return v7;
      }
      v3 = v13;
      v2 = v14;
    }
    nn_word_lkp_ObjClose(v3, v2);
  }
  return v7;
}

uint64_t nn_word_lkp_getVectorLength(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 62639, 128);
  if ((result & 0x80000000) != 0)
    return 2693799944;
  *a3 = *(_DWORD *)(a1 + 68);
  return result;
}

uint64_t nn_word_lkp_getVectorExtLength(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 62639, 128);
  if ((result & 0x80000000) != 0)
    return 2693799944;
  *a3 = *(_DWORD *)(a1 + 72);
  return result;
}

uint64_t nn_word_lkp_word2fvector(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int Name;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v31;
  char v32;
  __int16 v33;
  unsigned __int8 **v34;
  char __s[16];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v34 = 0;
  v33 = 0;
  v7 = 2693799944;
  v32 = 0;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  *(_OWORD *)__s = 0u;
  v36 = 0u;
  if ((safeh_HandleCheck(a1, a2, 62639, 128) & 0x80000000) == 0)
  {
    Name = embed_dict_getName(*(char **)(a1 + 120), __s);
    if (Name < 0)
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to generate the embedding dict name. Returns %u", v9, v10, v11, Name & 0x1FFF);
      return v7;
    }
    if (*(_DWORD *)(a1 + 84) < 2u)
    {
      if (cstdlib_strstr(__s, "lid") || cstdlib_strstr(__s, "clm") == __s)
        v33 = 1;
      v20 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t, unsigned __int8 ***, __int16 *, char *))(*(_QWORD *)(a1 + 40) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), __s, a3, &v34, &v33, &v32);
      if ((v20 & 0x80000000) != 0)
      {
LABEL_6:
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to lookup word %s returns %u", v21, v22, v23, a3);
        return v20;
      }
    }
    else
    {
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v13 = cstdlib_strlen(__s);
      v14 = (char *)heap_Alloc(v12, v13 + 2);
      if (!v14)
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 41000, 0, v15, v16, v17, v18, v31);
        return 2693799946;
      }
      v19 = v14;
      cstdlib_strcpy(v14, __s);
      cstdlib_strcat(v19, "_");
      v20 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t, unsigned __int8 ***, __int16 *, char *, _QWORD))(*(_QWORD *)(a1 + 40) + 152))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v19, a3, &v34, &v33, &v32, *(unsigned __int8 *)(a1 + 84));
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), (uint64_t)v19);
      if ((v20 & 0x80000000) != 0)
        goto LABEL_6;
    }
    if (!v33)
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"No index found for word %s", v21, v22, v23, a3);
      return 2693799956;
    }
    v24 = cstdlib_atoi(*v34);
    v28 = *(_DWORD *)(a1 + 64);
    if (v28 <= 6)
    {
      if (((1 << v28) & 0x12) != 0)
        return nn_word_lkp_get_vector_u16linear(a1, v24, a3, 0, a4, v25, v26, v27);
      if (((1 << v28) & 0x24) != 0)
        return nn_word_lkp_get_vector_u8kmeans(a1, v24, a3, 0, a4, v25, v26, v27);
      if (((1 << v28) & 0x48) != 0)
        return nn_word_lkp_get_vector_binary(a1, v24, a3, 0, a4, v25, v26, v27);
    }
    log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Got invalid or unsupported vector data format %u", v25, v26, v27, *(unsigned int *)(a1 + 64));
    return 2693799952;
  }
  return v7;
}

uint64_t nn_word_lkp_word2extfvector(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int Name;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v31;
  char v32;
  __int16 v33;
  unsigned __int8 **v34;
  char __s[16];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v34 = 0;
  v33 = 0;
  v7 = 2693799944;
  v32 = 0;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  *(_OWORD *)__s = 0u;
  v36 = 0u;
  if ((safeh_HandleCheck(a1, a2, 62639, 128) & 0x80000000) == 0)
  {
    Name = embed_dict_getName(*(char **)(a1 + 120), __s);
    if (Name < 0)
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to generate the embedding dict name. Returns %u", v9, v10, v11, Name & 0x1FFF);
      return v7;
    }
    if (*(_DWORD *)(a1 + 84) < 2u)
    {
      v20 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t, unsigned __int8 ***, __int16 *, char *))(*(_QWORD *)(a1 + 40) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), __s, a3, &v34, &v33, &v32);
      if ((v20 & 0x80000000) != 0)
      {
LABEL_6:
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to lookup word %s returns %u", v21, v22, v23, a3);
        return v20;
      }
    }
    else
    {
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v13 = cstdlib_strlen(__s);
      v14 = (char *)heap_Alloc(v12, v13 + 2);
      if (!v14)
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 41000, 0, v15, v16, v17, v18, v31);
        return 2693799946;
      }
      v19 = v14;
      cstdlib_strcpy(v14, __s);
      cstdlib_strcat(v19, "_");
      v20 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t, unsigned __int8 ***, __int16 *, char *, _QWORD))(*(_QWORD *)(a1 + 40) + 152))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v19, a3, &v34, &v33, &v32, *(unsigned __int8 *)(a1 + 84));
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), (uint64_t)v19);
      if ((v20 & 0x80000000) != 0)
        goto LABEL_6;
    }
    if (v33)
    {
      v24 = cstdlib_atoi(*v34);
      v28 = *(_DWORD *)(a1 + 64);
      if (v28 == 6)
        return nn_word_lkp_get_vector_binary(a1, v24, a3, 1, a4, v25, v26, v27);
      if (v28 == 5)
        return nn_word_lkp_get_vector_u8kmeans(a1, v24, a3, 1, a4, v25, v26, v27);
      if (v28 != 4)
      {
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Got invalid or unsupported vector data format %u", v25, v26, v27, *(unsigned int *)(a1 + 64));
        return 2693799952;
      }
      return nn_word_lkp_get_vector_u16linear(a1, v24, a3, 1, a4, v25, v26, v27);
    }
    else
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"No index found for word %s", v21, v22, v23, a3);
      return 2693799956;
    }
  }
  return v7;
}

uint64_t nn_word_lkp_word2id(uint64_t a1, int a2, uint64_t a3, float *a4)
{
  uint64_t v7;
  int Name;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v25;
  char v26;
  __int16 v27;
  unsigned __int8 **v28;
  char __s[16];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v28 = 0;
  v27 = 0;
  v7 = 2693799944;
  v26 = 0;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  *(_OWORD *)__s = 0u;
  v30 = 0u;
  if ((safeh_HandleCheck(a1, a2, 62639, 128) & 0x80000000) == 0)
  {
    Name = embed_dict_getName(*(char **)(a1 + 120), __s);
    if (Name < 0)
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to generate the embedding dict name. Returns %u", v9, v10, v11, Name & 0x1FFF);
      return v7;
    }
    if (*(_DWORD *)(a1 + 84) < 2u)
    {
      if (cstdlib_strstr(__s, "lid") || cstdlib_strstr(__s, "clm") == __s)
        v27 = 1;
      v20 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t, unsigned __int8 ***, __int16 *, char *))(*(_QWORD *)(a1 + 40) + 96))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), __s, a3, &v28, &v27, &v26);
      if ((v20 & 0x80000000) != 0)
      {
LABEL_6:
        log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to lookup word %s returns %u", v21, v22, v23, a3);
        return v20;
      }
    }
    else
    {
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v13 = cstdlib_strlen(__s);
      v14 = (char *)heap_Alloc(v12, v13 + 2);
      if (!v14)
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 41000, 0, v15, v16, v17, v18, v25);
        return 2693799946;
      }
      v19 = v14;
      cstdlib_strcpy(v14, __s);
      cstdlib_strcat(v19, "_");
      v20 = (*(uint64_t (**)(_QWORD, _QWORD, char *, uint64_t, unsigned __int8 ***, __int16 *, char *, _QWORD))(*(_QWORD *)(a1 + 40) + 152))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v19, a3, &v28, &v27, &v26, *(unsigned __int8 *)(a1 + 84));
      heap_Free(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), (uint64_t)v19);
      if ((v20 & 0x80000000) != 0)
        goto LABEL_6;
    }
    if (v27)
    {
      v7 = 0;
      *a4 = (float)(int)cstdlib_atoi(*v28);
    }
    else
    {
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"No index found for word %s", v21, v22, v23, a3);
      return 2693799956;
    }
  }
  return v7;
}

uint64_t nn_word_lkp_ObjOpenHelper(uint64_t a1, uint64_t a2)
{
  uint64_t BrokerString;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int32x2_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  size_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t Interface;
  unsigned int v55;
  _QWORD *v56;
  void *__src;
  unsigned int v58;
  char __s1[4];
  char v60;
  _OWORD v61[16];
  _OWORD v62[16];
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v56 = 0;
  memset(v62, 0, sizeof(v62));
  memset(v61, 0, sizeof(v61));
  BrokerString = embed_vect_getBrokerString(*(_QWORD *)(a1 + 32), *(char **)(a1 + 120), (char *)v62, (char *)v61, 0x100uLL);
  if ((BrokerString & 0x80000000) != 0)
  {
    v9 = BrokerString;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
    v11 = v9 & 0x1FFF;
    v12 = "Failed to generate the embedding vector brokerstring. Returns %u";
LABEL_34:
    log_OutText(v10, (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)v12, v5, v6, v7, v11);
    goto LABEL_35;
  }
  if ((ssftriff_reader_ObjOpen(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), 2, (const char *)v61, "CRPH", 5, (uint64_t *)&v56) & 0x80000000) != 0)
  {
    v13 = ssftriff_reader_ObjOpen(*(_WORD **)(a1 + 16), *(_QWORD *)(a1 + 24), 0, (const char *)v62, "CRPH", 5, (uint64_t *)&v56);
    v17 = *(_QWORD *)(a1 + 32);
    if ((v13 & 0x80000000) != 0)
    {
      v9 = v13;
      log_OutText(*(_QWORD *)(v17 + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to open the word vector riff file (%s). Returns %u", v14, v15, v16, (uint64_t)v62);
      goto LABEL_35;
    }
    v8 = *(_QWORD *)(v17 + 24);
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  }
  v18 = brk_DataOpen(v8);
  if ((v18 & 0x80000000) != 0)
  {
    v9 = v18;
    goto LABEL_35;
  }
  v23 = v56;
  v60 = 0;
  v58 = 0;
  *(_DWORD *)__s1 = 0;
  __src = 0;
  v24 = ssftriff_reader_OpenChunk((uint64_t)v56, (__int32 *)__s1, &v58, &__src, v19, v20, v21, v22);
  if ((v24 & 0x80000000) != 0)
  {
LABEL_33:
    v9 = v24;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
    v11 = v9 & 0x1FFF;
    v12 = "Failed to open riff chunk. Returns %u";
    goto LABEL_34;
  }
  if (!cstdlib_strcmp(__s1, "HEAD"))
  {
    v11 = v58;
    if (v58 > 0xF)
    {
      v25 = (char *)__src;
      v26 = *(_QWORD *)__src;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)__src;
      if ((v26 - 4) > 2)
      {
        v27 = 0;
        v28 = 2;
      }
      else
      {
        v27 = *((_DWORD *)v25 + 2);
        v28 = 3;
      }
      *(_DWORD *)(a1 + 72) = v27;
      *(_DWORD *)(a1 + 84) = *(_DWORD *)&v25[4 * v28];
      switch((int)v26)
      {
        case 1:
          v30 = *(int32x2_t *)(v25 + 12);
          goto LABEL_25;
        case 2:
        case 3:
          v29 = *((_DWORD *)v25 + 3);
          goto LABEL_21;
        case 4:
          v30 = *(int32x2_t *)(v25 + 16);
LABEL_25:
          *(float32x2_t *)(a1 + 76) = vcvt_f32_s32(v30);
          *(_DWORD *)(a1 + 88) = 0;
          goto LABEL_26;
        case 5:
        case 6:
          v29 = *((_DWORD *)v25 + 4);
LABEL_21:
          *(_DWORD *)(a1 + 88) = v29;
          *(_DWORD *)(a1 + 76) = 0;
          *(_DWORD *)(a1 + 80) = 0;
LABEL_26:
          v31 = ssftriff_reader_CloseChunk((uint64_t)v23);
          if ((v31 & 0x80000000) != 0)
            goto LABEL_51;
          v33 = v56;
          v60 = 0;
          v58 = 0;
          *(_DWORD *)__s1 = 0;
          __src = 0;
          v24 = ssftriff_reader_OpenChunk((uint64_t)v56, (__int32 *)__s1, &v58, &__src, v32, v5, v6, v7);
          if ((v24 & 0x80000000) != 0)
            goto LABEL_33;
          if (cstdlib_strcmp(__s1, "VECT"))
            goto LABEL_10;
          v34 = *(_DWORD *)(a1 + 64);
          if (v34 <= 6 && ((1 << v34) & 0x6C) != 0)
          {
            v35 = (4 * *(_DWORD *)(a1 + 88));
            v36 = (void *)heap_Calloc(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), 1, v35);
            *(_QWORD *)(a1 + 104) = v36;
            if (!v36)
            {
              log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 41000, 0, v37, v38, v39, v40, v55);
              v9 = 2693799946;
              goto LABEL_35;
            }
            cstdlib_memcpy(v36, __src, v35);
            *(_DWORD *)(a1 + 112) = ssftriff_reader_GetPosition((uint64_t)v33) + v35;
            v41 = v58 - v35;
          }
          else
          {
            *(_DWORD *)(a1 + 112) = ssftriff_reader_GetPosition((uint64_t)v33);
            v41 = v58;
          }
          *(_DWORD *)(a1 + 116) = v41;
          v31 = ssftriff_reader_CloseChunk((uint64_t)v33);
          if ((v31 & 0x80000000) != 0)
          {
LABEL_51:
            v9 = v31;
            v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
            v11 = v9 & 0x1FFF;
            v12 = "Failed to close riff chunk. Returns %u";
          }
          else
          {
            v53 = ssftriff_reader_ObjClose(v56, v49, v50, v51, v52, v5, v6, v7);
            v56 = 0;
            if ((v53 & 0x80000000) != 0)
            {
              v9 = v53;
              v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
              v11 = v9 & 0x1FFF;
              v12 = "Failed to close the riff file; ssftriff_reader_ObjClose returns %u";
            }
            else
            {
              Interface = fe_dctlkp_GetInterface(1u, (_QWORD *)(a1 + 40));
              if ((Interface & 0x80000000) != 0)
              {
                v9 = Interface;
                v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
                v11 = v9 & 0x1FFF;
                v12 = "fe_dctlkp_GetInterface returns %u";
              }
              else
              {
                v9 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 32))(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a1 + 48);
                if ((v9 & 0x80000000) == 0)
                  goto LABEL_35;
                v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
                v11 = v9 & 0x1FFF;
                v12 = "pfObjOpen returns %u";
              }
            }
          }
          break;
        default:
          log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Got invalid or unsupported vector data format %u", v5, v6, v7, v26);
          v9 = 2693799952;
          goto LABEL_35;
      }
    }
    else
    {
      v9 = 2693799953;
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
      v12 = "Found riff chunk of size %u. Expected at least %u";
    }
    goto LABEL_34;
  }
LABEL_10:
  v9 = 2693799953;
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Found riff chunk (%s). Expected %s", v5, v6, v7, (uint64_t)__s1);
LABEL_35:
  if (v56)
  {
    v42 = ssftriff_reader_CloseChunk((uint64_t)v56);
    if ((v42 & 0x80000000) != 0)
    {
      v46 = v42;
      log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to close the riff file; ssftriff_reader_CloseChunk returns %u",
        v43,
        v44,
        v45,
        v42 & 0x1FFF);
      if ((int)v9 >= 0)
        v9 = v46;
      else
        v9 = v9;
      goto LABEL_42;
    }
  }
  if ((v9 & 0x80000000) != 0)
  {
LABEL_42:
    nn_word_lkp_ObjClose(*(_QWORD **)a2, *(_QWORD *)(a2 + 8));
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_QWORD *)a2 = safeh_GetNullHandle();
    *(_QWORD *)(a2 + 8) = v47;
  }
  return v9;
}

uint64_t nn_word_lkp_ObjCloseHelper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  v2 = a1[5];
  if (v2 && (v3 = (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 40))(a1[6], a1[7]), (v3 & 0x80000000) != 0))
  {
    v7 = v3;
    log_OutText(*(_QWORD *)(a1[4] + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to close dct. pIDct->pfObjClose returns %u", v4, v5, v6, v3 & 0x1FFF);
  }
  else
  {
    v7 = 0;
  }
  v8 = a1[13];
  if (v8)
  {
    heap_Free(*(_QWORD **)(a1[4] + 8), v8);
    a1[13] = 0;
  }
  v9 = a1[12];
  if (v9)
  {
    v10 = brk_DataClose(*(_QWORD *)(a1[4] + 24), v9);
    if ((v10 & 0x80000000) != 0)
    {
      v14 = v10;
      log_OutText(*(_QWORD *)(a1[4] + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to close the riff file; brk_DataClose returns %u",
        v11,
        v12,
        v13,
        v10 & 0x1FFF);
      if ((_DWORD)v7)
        return v7;
      else
        return v14;
    }
  }
  return v7;
}

uint64_t nn_word_lkp_get_vector_u16linear(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v28;

  v9 = *(_DWORD *)(a1 + 68);
  v10 = *(_DWORD *)(a1 + 72) + v9;
  v11 = *(_DWORD *)(a1 + 116) - v10;
  v28 = 0;
  if (v10 * a2 <= v11)
  {
    if (a4)
      v14 = v10;
    else
      v14 = v9;
    v15 = brk_DataMap(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), *(_QWORD *)(a1 + 96), *(_DWORD *)(a1 + 112) + v10 * a2, (2 * v14), (uint64_t)&v28);
    if ((v15 & 0x80000000) != 0)
    {
      v12 = v15;
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
      v25 = v12 & 0x1FFF;
      v26 = "Failed to map data, brk_DataMap returns %u.";
    }
    else
    {
      v20 = v28;
      if ((_DWORD)v14)
      {
        v21 = 0;
        v22 = *(unsigned int *)(a1 + 68);
        do
        {
          LOWORD(v19) = *(_WORD *)(v20 + 2 * v21);
          v19 = (float)LODWORD(v19);
          if (v21 < v22)
            v19 = *(float *)(a1 + 76)
                + (float)((float)((float)(*(float *)(a1 + 80) - *(float *)(a1 + 76)) * v19) * 0.000030518);
          *(float *)(a5 + 4 * v21++) = v19;
        }
        while (v14 != v21);
      }
      v23 = brk_DataUnmap(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), *(_QWORD *)(a1 + 96), v20);
      if ((v23 & 0x80000000) == 0)
        return 0;
      v12 = v23;
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
      v25 = v12 & 0x1FFF;
      v26 = "Failed to unmap data, brk_DataUnMap returns %u.";
    }
    log_OutText(v24, (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)v26, v16, v17, v18, v25);
    return v12;
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Got invalid index for word %s, (%u > %u)", a6, a7, a8, a3);
  return 2693799952;
}

uint64_t nn_word_lkp_get_vector_binary(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  float *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v36;

  v9 = *(_DWORD *)(a1 + 68);
  v10 = *(_DWORD *)(a1 + 72) + v9;
  v11 = (v10 + 7) >> 3;
  v12 = *(_DWORD *)(a1 + 116) - v11;
  v36 = 0;
  if (v11 * a2 <= v12)
  {
    if (a4)
      v15 = v10;
    else
      v15 = v9;
    if (a4)
      v16 = v11;
    else
      v16 = (v9 + 7) >> 3;
    v17 = brk_DataMap(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), *(_QWORD *)(a1 + 96), *(_DWORD *)(a1 + 112) + v11 * a2, v16, (uint64_t)&v36);
    if ((v17 & 0x80000000) != 0)
    {
      v13 = v17;
      v32 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
      v33 = v13 & 0x1FFF;
      v34 = "Failed to map data, brk_DataMap returns %u.";
    }
    else
    {
      v21 = v36;
      if ((_DWORD)v16)
      {
        v22 = 0;
        v23 = (*(_DWORD *)(a1 + 68) + 7) >> 3;
        v24 = (float *)(a5 + 16);
        do
        {
          v25 = *(unsigned __int8 *)(v21 + v22);
          if (v15 >= 8)
            v26 = 8;
          else
            v26 = v15;
          v27 = v25 >> 7;
          v28 = v26 - 1;
          if (v22 >= v23)
          {
            switch(v28)
            {
              case 0:
                goto LABEL_40;
              case 1:
                goto LABEL_39;
              case 2:
                goto LABEL_38;
              case 3:
                goto LABEL_37;
              case 4:
                goto LABEL_36;
              case 5:
                goto LABEL_35;
              case 6:
                goto LABEL_34;
              default:
                v24[3] = (float)(v25 & 1);
LABEL_34:
                v24[2] = (float)((v25 >> 1) & 1);
LABEL_35:
                v24[1] = (float)((v25 >> 2) & 1);
LABEL_36:
                *v24 = (float)((v25 >> 3) & 1);
LABEL_37:
                *(v24 - 1) = (float)((v25 >> 4) & 1);
LABEL_38:
                *(v24 - 2) = (float)((v25 >> 5) & 1);
LABEL_39:
                *(v24 - 3) = (float)((v25 >> 6) & 1);
LABEL_40:
                v30 = (float)v27;
                break;
            }
          }
          else
          {
            switch(v28)
            {
              case 0:
                v29 = *(_QWORD *)(a1 + 104);
                goto LABEL_32;
              case 1:
                v29 = *(_QWORD *)(a1 + 104);
                goto LABEL_31;
              case 2:
                v29 = *(_QWORD *)(a1 + 104);
                goto LABEL_30;
              case 3:
                v29 = *(_QWORD *)(a1 + 104);
                goto LABEL_29;
              case 4:
                v29 = *(_QWORD *)(a1 + 104);
                goto LABEL_28;
              case 5:
                v29 = *(_QWORD *)(a1 + 104);
                goto LABEL_27;
              case 6:
                v29 = *(_QWORD *)(a1 + 104);
                goto LABEL_26;
              default:
                v29 = *(_QWORD *)(a1 + 104);
                v24[3] = *(float *)(v29 + 4 * (v25 & 1));
LABEL_26:
                v24[2] = *(float *)(v29 + 4 * ((v25 >> 1) & 1));
LABEL_27:
                v24[1] = *(float *)(v29 + 4 * ((v25 >> 2) & 1));
LABEL_28:
                *v24 = *(float *)(v29 + 4 * ((v25 >> 3) & 1));
LABEL_29:
                *(v24 - 1) = *(float *)(v29 + 4 * ((v25 >> 4) & 1));
LABEL_30:
                *(v24 - 2) = *(float *)(v29 + 4 * ((v25 >> 5) & 1));
LABEL_31:
                *(v24 - 3) = *(float *)(v29 + 4 * ((v25 >> 6) & 1));
LABEL_32:
                v30 = *(float *)(v29 + 4 * v27);
                break;
            }
          }
          *(v24 - 4) = v30;
          ++v22;
          v24 += 8;
          v15 -= 8;
        }
        while (v16 != v22);
      }
      v31 = brk_DataUnmap(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), *(_QWORD *)(a1 + 96), v21);
      if ((v31 & 0x80000000) == 0)
        return 0;
      v13 = v31;
      v32 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
      v33 = v13 & 0x1FFF;
      v34 = "Failed to unmap data, brk_DataUnMap returns %u.";
    }
    log_OutText(v32, (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)v34, v18, v19, v20, v33);
    return v13;
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Got invalid index for word %s, (%u > %u)", a6, a7, a8, a3);
  return 2693799952;
}

uint64_t nn_word_lkp_get_vector_u8kmeans(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v28;

  v9 = *(_DWORD *)(a1 + 68);
  v10 = *(_DWORD *)(a1 + 72) + v9;
  v11 = *(_DWORD *)(a1 + 116) - v10;
  v28 = 0;
  if (v10 * a2 <= v11)
  {
    if (a4)
      v14 = v10;
    else
      v14 = v9;
    v15 = brk_DataMap(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), *(_QWORD *)(a1 + 96), *(_DWORD *)(a1 + 112) + v10 * a2, v14, (uint64_t)&v28);
    if ((v15 & 0x80000000) != 0)
    {
      v12 = v15;
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
      v25 = v12 & 0x1FFF;
      v26 = "Failed to map data, brk_DataMap returns %u.";
    }
    else
    {
      v20 = v28;
      if ((_DWORD)v14)
      {
        v21 = 0;
        v22 = *(unsigned int *)(a1 + 68);
        do
        {
          if (v21 >= v22)
          {
            LOBYTE(v19) = *(_BYTE *)(v20 + v21);
            v19 = (float)LODWORD(v19);
          }
          else
          {
            v19 = *(float *)(*(_QWORD *)(a1 + 104) + 4 * *(unsigned __int8 *)(v20 + v21));
          }
          *(float *)(a5 + 4 * v21++) = v19;
        }
        while (v14 != v21);
      }
      v23 = brk_DataUnmap(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), *(_QWORD *)(a1 + 96), v20);
      if ((v23 & 0x80000000) == 0)
        return 0;
      v12 = v23;
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
      v25 = v12 & 0x1FFF;
      v26 = "Failed to unmap data, brk_DataUnMap returns %u.";
    }
    log_OutText(v24, (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)v26, v16, v17, v18, v25);
    return v12;
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Got invalid index for word %s, (%u > %u)", a6, a7, a8, a3);
  return 2693799952;
}

uint64_t tnplus_sentences_alloc(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = 3222282247;
  if (a3)
  {
    if (a2)
    {
      v5 = heap_Calloc(*(_QWORD **)(a1 + 8), a2, 16);
      *a3 = v5;
      if (v5)
        return 0;
      else
        return 3222282250;
    }
    else
    {
      v3 = 0;
      *a3 = 0;
    }
  }
  return v3;
}

_QWORD *tnplus_sentences_free(_QWORD *result, _DWORD *a2, uint64_t *a3)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t i;
  unsigned int *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;

  if (a2 && a3)
  {
    v5 = result;
    v6 = *a2;
    if ((_DWORD)v6)
    {
      for (i = 0; i < v6; ++i)
      {
        v8 = (unsigned int *)(*a3 + 16 * i);
        v10 = (uint64_t *)(v8 + 2);
        v9 = *((_QWORD *)v8 + 1);
        if (v9)
        {
          if (*v8)
          {
            v11 = 0;
            v12 = 0;
            do
            {
              tnplus_word_freeParts((uint64_t *)(*v10 + v11), (_QWORD *)v5[1]);
              ++v12;
              v11 += 152;
            }
            while (v12 < *v8);
            v9 = *v10;
          }
          heap_Free((_QWORD *)v5[1], v9);
          *v10 = 0;
          *v8 = 0;
          v6 = *a2;
        }
      }
    }
    result = heap_Free((_QWORD *)v5[1], *a3);
    *a3 = 0;
    *a2 = 0;
  }
  return result;
}

uint64_t tnplus_words_alloc(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = 3222282247;
  if (a3)
  {
    if (a2)
    {
      v5 = heap_Calloc(*(_QWORD **)(a1 + 8), a2, 152);
      *a3 = v5;
      if (v5)
        return 0;
      else
        return 3222282250;
    }
    else
    {
      v3 = 0;
      *a3 = 0;
    }
  }
  return v3;
}

uint64_t tnplus_word_copyParts(char **a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  if (!a1)
    return 1;
  if (!a3)
    return 1;
  result = hlp_DuplicateString(a2, *a1, a3);
  if ((_DWORD)result)
  {
    result = hlp_DuplicateString(a2, a1[1], a3 + 1);
    if ((_DWORD)result)
    {
      result = hlp_DuplicateString(a2, a1[2], a3 + 2);
      if ((_DWORD)result)
      {
        result = hlp_DuplicateString(a2, a1[3], a3 + 3);
        if ((_DWORD)result)
        {
          result = hlp_DuplicateString(a2, a1[4], a3 + 4);
          if ((_DWORD)result)
          {
            result = hlp_DuplicateString(a2, a1[6], a3 + 6);
            if ((_DWORD)result)
            {
              result = hlp_DuplicateString(a2, a1[7], a3 + 7);
              if ((_DWORD)result)
              {
                result = hlp_DuplicateString(a2, a1[9], a3 + 9);
                if ((_DWORD)result)
                {
                  result = hlp_DuplicateString(a2, a1[10], a3 + 10);
                  if ((_DWORD)result)
                  {
                    result = hlp_DuplicateString(a2, a1[11], a3 + 11);
                    if ((_DWORD)result)
                    {
                      result = hlp_DuplicateString(a2, a1[12], a3 + 12);
                      if ((_DWORD)result)
                      {
                        result = hlp_DuplicateString(a2, a1[13], a3 + 13);
                        if ((_DWORD)result)
                        {
                          result = hlp_DuplicateString(a2, a1[15], a3 + 15);
                          if ((_DWORD)result)
                            return 1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t hlp_DuplicateString(_QWORD *a1, char *__s, _QWORD *a3)
{
  size_t v6;
  uint64_t result;

  if (!a3)
    return 0;
  if (__s)
  {
    v6 = cstdlib_strlen(__s);
    result = heap_Calloc(a1, v6 + 1, 1);
    *a3 = result;
    if (!result)
      return result;
    cstdlib_strcpy((char *)result, __s);
  }
  else
  {
    *a3 = 0;
  }
  return 1;
}

uint64_t *tnplus_word_freeParts(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (result)
  {
    v3 = result;
    if (*result)
    {
      result = heap_Free(a2, *result);
      *v3 = 0;
    }
    v4 = v3[1];
    if (v4)
    {
      result = heap_Free(a2, v4);
      v3[1] = 0;
    }
    v5 = v3[2];
    if (v5)
    {
      result = heap_Free(a2, v5);
      v3[2] = 0;
    }
    v6 = v3[3];
    if (v6)
    {
      result = heap_Free(a2, v6);
      v3[3] = 0;
    }
    v7 = v3[4];
    if (v7)
    {
      result = heap_Free(a2, v7);
      v3[4] = 0;
    }
    v8 = v3[6];
    if (v8)
    {
      result = heap_Free(a2, v8);
      v3[6] = 0;
    }
    v9 = v3[7];
    if (v9)
    {
      result = heap_Free(a2, v9);
      v3[7] = 0;
    }
    v10 = v3[9];
    if (v10)
    {
      result = heap_Free(a2, v10);
      v3[9] = 0;
    }
    v11 = v3[10];
    if (v11)
    {
      result = heap_Free(a2, v11);
      v3[10] = 0;
    }
    v12 = v3[11];
    if (v12)
    {
      result = heap_Free(a2, v12);
      v3[11] = 0;
    }
    v13 = v3[12];
    if (v13)
    {
      result = heap_Free(a2, v13);
      v3[12] = 0;
    }
    v14 = v3[13];
    if (v14)
    {
      result = heap_Free(a2, v14);
      v3[13] = 0;
    }
    v15 = v3[15];
    if (v15)
    {
      result = heap_Free(a2, v15);
      v3[15] = 0;
    }
  }
  return result;
}

char *tnplus_words_createTSOInfoString(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8;
  char *result;
  char *v10;
  char *appended;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  const char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  const char *v33;
  char *v34;
  char *v35;
  const char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  const char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char __str[128];
  char __dst[100];
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v8 = a4 / 0x98;
  v62 = 200 * (a4 / 0x98);
  result = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), v62, 1);
  if (result)
  {
    v10 = result;
    snprintf(__str, 0x80uLL, "%s, %lu geene words:", a2, v8);
    appended = hlp_AppendString(a1, v10, &v62, __str);
    if (a4 >= 0x98)
    {
      if (v8 <= 1)
        v12 = 1;
      else
        v12 = v8;
      v13 = a3 + 72;
      do
      {
        v14 = hlp_AppendString(a1, appended, &v62, "\n------------------------");
        v15 = hlp_AppendString(a1, v14, &v62, "\northo=");
        v16 = hlp_AppendString(a1, v15, &v62, *(const char **)(v13 - 72));
        v17 = hlp_AppendString(a1, v16, &v62, "\nphon=");
        v18 = hlp_AppendString(a1, v17, &v62, *(const char **)(v13 - 64));
        v19 = hlp_AppendString(a1, v18, &v62, "\npunc.beg=");
        v20 = hlp_AppendString(a1, v19, &v62, *(const char **)(v13 - 56));
        v21 = hlp_AppendString(a1, v20, &v62, "\npunc.end=");
        v22 = hlp_AppendString(a1, v21, &v62, *(const char **)(v13 - 48));
        v23 = hlp_AppendString(a1, v22, &v62, "\nmetadata.token=");
        v24 = hlp_AppendString(a1, v23, &v62, *(const char **)(v13 - 40));
        v25 = hlp_AppendString(a1, v24, &v62, "\nmetadata.spell=");
        if (*(_DWORD *)(v13 - 32))
          v26 = "true";
        else
          v26 = "false";
        cstdlib_strcpy(__dst, v26);
        v27 = hlp_AppendString(a1, v25, &v62, __dst);
        v28 = hlp_AppendString(a1, v27, &v62, "\nmetadata.stylename=");
        v29 = hlp_AppendString(a1, v28, &v62, *(const char **)(v13 - 24));
        v30 = hlp_AppendString(a1, v29, &v62, "\nmetadata.styleintensity=");
        v31 = hlp_AppendString(a1, v30, &v62, *(const char **)(v13 - 16));
        v32 = hlp_AppendString(a1, v31, &v62, "\nmetadata.compund=");
        if (*(_DWORD *)(v13 - 8))
          v33 = "true";
        else
          v33 = "false";
        cstdlib_strcpy(__dst, v33);
        v34 = hlp_AppendString(a1, v32, &v62, __dst);
        v35 = hlp_AppendString(a1, v34, &v62, "\nmetadata.oriorthjoined=");
        if (*(_DWORD *)(v13 - 4))
          v36 = "true";
        else
          v36 = "false";
        cstdlib_strcpy(__dst, v36);
        v37 = hlp_AppendString(a1, v35, &v62, __dst);
        v38 = hlp_AppendString(a1, v37, &v62, "\nmetadata.phrasetype=");
        v39 = hlp_AppendString(a1, v38, &v62, *(const char **)v13);
        v40 = hlp_AppendString(a1, v39, &v62, "\nmetadata.language=");
        v41 = hlp_AppendString(a1, v40, &v62, *(const char **)(v13 + 8));
        v42 = hlp_AppendString(a1, v41, &v62, "\nmetadata.audiosrc=");
        v43 = hlp_AppendString(a1, v42, &v62, *(const char **)(v13 + 16));
        v44 = hlp_AppendString(a1, v43, &v62, "\nmetadata.origortho=");
        v45 = hlp_AppendString(a1, v44, &v62, *(const char **)(v13 + 24));
        v46 = hlp_AppendString(a1, v45, &v62, "\nmetadata.break=");
        v47 = hlp_AppendString(a1, v46, &v62, *(const char **)(v13 + 32));
        v48 = hlp_AppendString(a1, v47, &v62, "\nmetadata.userphon=");
        if (*(_DWORD *)(v13 + 40))
          v49 = "true";
        else
          v49 = "false";
        cstdlib_strcpy(__dst, v49);
        v50 = hlp_AppendString(a1, v48, &v62, __dst);
        v51 = hlp_AppendString(a1, v50, &v62, "\nmetadata.tone=");
        v52 = hlp_AppendString(a1, v51, &v62, *(const char **)(v13 + 48));
        v53 = hlp_AppendString(a1, v52, &v62, "\nmetadata.sildur=");
        snprintf(__dst, 0x64uLL, "%d", *(_DWORD *)(v13 + 56));
        v54 = hlp_AppendString(a1, v53, &v62, __dst);
        v55 = hlp_AppendString(a1, v54, &v62, "\nmetadata.volume=");
        snprintf(__dst, 0x64uLL, "%d", *(_DWORD *)(v13 + 60));
        v56 = hlp_AppendString(a1, v55, &v62, __dst);
        v57 = hlp_AppendString(a1, v56, &v62, "\nmetadata.pitch=");
        snprintf(__dst, 0x64uLL, "%d", *(_DWORD *)(v13 + 64));
        v58 = hlp_AppendString(a1, v57, &v62, __dst);
        v59 = hlp_AppendString(a1, v58, &v62, "\nmetadata.rate=");
        snprintf(__dst, 0x64uLL, "%d", *(_DWORD *)(v13 + 68));
        v60 = hlp_AppendString(a1, v59, &v62, __dst);
        v61 = hlp_AppendString(a1, v60, &v62, "\nmetadata.timbre=");
        snprintf(__dst, 0x64uLL, "%d", *(_DWORD *)(v13 + 72));
        appended = hlp_AppendString(a1, v61, &v62, __dst);
        v13 += 152;
        --v12;
      }
      while (v12);
    }
    return hlp_AppendString(a1, appended, &v62, "\n");
  }
  return result;
}

char *hlp_AppendString(uint64_t a1, char *__s, uint64_t *a3, const char *a4)
{
  char *v6;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v6 = __s;
  v8 = cstdlib_strlen(__s);
  if (v8 + cstdlib_strlen(a4) + 1 >= *a3)
  {
    v9 = *a3;
    v10 = v9 + cstdlib_strlen(a4) + 128;
    v11 = (char *)heap_Calloc(*(_QWORD **)(a1 + 8), v10, 1);
    if (v11)
    {
      v12 = v11;
      cstdlib_strcat(v11, v6);
      cstdlib_strcat(v12, a4);
      heap_Free(*(_QWORD **)(a1 + 8), (uint64_t)v6);
      *a3 = v10;
      return v12;
    }
  }
  else
  {
    cstdlib_strcat(v6, a4);
  }
  return v6;
}

uint64_t p_xcoder_ObjOpen(uint64_t a1)
{
  uint64_t inited;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;

  v10 = 0;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v10);
  if ((inited & 0x80000000) == 0)
  {
    v3 = (void *)heap_Alloc(*(_QWORD *)(v10 + 8), 4);
    *(_QWORD *)(a1 + 280) = v3;
    if (v3)
    {
      cstdlib_memset(v3, 0, 4uLL);
    }
    else
    {
      log_OutPublic(*(_QWORD *)(v10 + 32), (uint64_t)"XCODER", 15000, 0, v4, v5, v6, v7, v9);
      return 2282758154;
    }
  }
  return inited;
}

uint64_t p_xcoder_ObjClose(uint64_t a1)
{
  uint64_t inited;
  uint64_t v4;

  v4 = 0;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v4);
  if ((inited & 0x80000000) == 0)
  {
    heap_Free(*(_QWORD **)(v4 + 8), *(_QWORD *)(a1 + 280));
    *(_QWORD *)(a1 + 280) = 0;
  }
  return inited;
}

uint64_t p_xcoder_OpenXCoder(uint64_t a1)
{
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;
  uint64_t v14;

  v14 = 0;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v14);
  if ((inited & 0x80000000) != 0)
    return inited;
  if (*(_BYTE *)(a1 + 16) || *(_BYTE *)(a1 + 144))
  {
    **(_DWORD **)(a1 + 280) = 0;
    if (LH_stricmp((char *)(a1 + 16), "UTF-16"))
    {
      v11 = 2282758145;
      log_OutPublic(*(_QWORD *)(v14 + 32), (uint64_t)"XCODER", 15004, (uint64_t)"%s%s%s%s", v7, v8, v9, v10, "charsetIn");
    }
    else
    {
      v11 = 0;
      **(_DWORD **)(a1 + 280) = 2;
    }
  }
  else
  {
    log_OutPublic(*(_QWORD *)(v14 + 32), (uint64_t)"XCODER", 15002, 0, v3, v4, v5, v6, v13);
    v11 = 2282758151;
  }
  *(_DWORD *)(a1 + 272) = v11;
  return v11;
}

uint64_t p_xcoder_ResetXCoder()
{
  return 0;
}

uint64_t p_xcoder_Convert(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4, uint64_t a5, unsigned int a6, unsigned int *a7, _DWORD *a8)
{
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  const char *v27;
  uint64_t v28;

  v28 = 0;
  *a4 = 0;
  *a7 = 0;
  inited = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), &v28);
  if ((inited & 0x80000000) != 0)
    return inited;
  v21 = 2282758158;
  if (**(_DWORD **)(a1 + 280) == 2)
  {
    if ((a3 & 1) != 0)
    {
      v21 = 2282758405;
      goto LABEL_10;
    }
    v21 = utf8_Utf16ToUtf8(a2, a3 >> 1, a4, a5, a6, a7, a8);
    v22 = v21 & 0x1FFF;
    if ((v21 & 0x1FFF) != 0 && v22 != 7)
    {
      if (v22 == 9)
      {
        v23 = *(_QWORD *)(v28 + 32);
        v24 = 15015;
        v25 = 0;
LABEL_11:
        log_OutPublic(v23, (uint64_t)"XCODER", v24, (uint64_t)v25, v17, v18, v19, v20, v27);
        return v21;
      }
LABEL_10:
      v23 = *(_QWORD *)(v28 + 32);
      v27 = "input";
      v25 = "%s%s%s%s%s%x";
      v24 = 15016;
      goto LABEL_11;
    }
  }
  return v21;
}

uint64_t xcoder_mrksync_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2282758145;
  result = 0;
  *a2 = &IXCoderMrkSync;
  return result;
}

uint64_t xcoder_mrksync_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t Object;
  uint64_t NullHandle;
  int v10;
  _BOOL4 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  Object = 2282758151;
  v23 = 0;
  v24 = 0;
  NullHandle = safeh_GetNullHandle();
  v11 = safeh_HandlesEqual((uint64_t)a3, a4, NullHandle, v10);
  if (a5)
  {
    if (!v11)
    {
      *(_QWORD *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      if ((InitRsrcFunction(a3, a4, &v24) & 0x80000000) == 0)
      {
        v12 = (_QWORD *)heap_Calloc(*(_QWORD **)(v24 + 8), 1, 72);
        if (v12)
        {
          v17 = (uint64_t)v12;
          *v12 = a3;
          v12[1] = a4;
          Object = objc_GetObject(*(_QWORD *)(v24 + 48), (uint64_t)"SYNTHSTREAM", &v23);
          if ((Object & 0x80000000) != 0)
          {
            log_OutPublic(*(_QWORD *)(v24 + 32), (uint64_t)"XCODER", 15024, 0, v18, v19, v20, v21, v23);
            heap_Free(*(_QWORD **)(v24 + 8), v17);
          }
          else
          {
            *(_QWORD *)(v17 + 16) = *(_QWORD *)(v23 + 8);
            *(_QWORD *)a5 = v17;
            *(_DWORD *)(a5 + 8) = 854;
          }
        }
        else
        {
          log_OutPublic(*(_QWORD *)(v24 + 32), (uint64_t)"XCODER", 15000, 0, v13, v14, v15, v16, v23);
          return 2282758154;
        }
      }
    }
  }
  return Object;
}

uint64_t xcoder_mrksync_ObjClose(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = 0;
  v6 = 0;
  v2 = p_xcoder_mrksync_BeginFunction(a1, a2, &v6, &v5);
  if ((v2 & 0x80000000) != 0)
    return v2;
  v3 = objc_ReleaseObject(*(_QWORD *)(v6 + 48), (uint64_t)"SYNTHSTREAM");
  if ((v3 & 0x80000000) == 0)
    heap_Free(*(_QWORD **)(v6 + 8), v5);
  return v3;
}

uint64_t xcoder_mrksync_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  v6 = p_xcoder_mrksync_BeginFunction(a1, a2, &v17, &v16);
  if ((v6 & 0x80000000) != 0)
    return v6;
  v7 = v16;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(v16 + 16) + 64))(a3, a4, 129, "application/x-realspeak-xcoder-sync;version=5.0",
          0,
          0,
          v16 + 24) & 0x80000000) != 0)
    return 0;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(v7 + 16) + 64))(a3, a4, 129, "application/x-realspeak-markers-pp;version=4.0",
         0,
         0,
         v7 + 40);
  if ((v8 & 0x80000000) != 0)
  {
    v13 = v8;
    v14 = 15026;
    goto LABEL_9;
  }
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 + 16) + 64))(a3, a4, 129, "application/x-realspeak-markers-pp;version=4.0",
          0,
          1,
          v7 + 56);
  if ((v13 & 0x80000000) != 0)
  {
    v14 = 15027;
LABEL_9:
    log_OutPublic(*(_QWORD *)(v17 + 32), (uint64_t)"XCODER", v14, (uint64_t)"%s%s", v9, v10, v11, v12, "contentType");
  }
  return v13;
}

uint64_t xcoder_mrksync_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  unsigned int v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v47;
  int v48;
  int *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  size_t __n;
  uint64_t v55;
  _QWORD *v56;

  v56 = 0;
  __n = 0;
  v55 = 0;
  v52 = 0;
  v53 = 0;
  v50 = 0;
  v51 = 0;
  v6 = p_xcoder_mrksync_BeginFunction(a1, a2, &v55, (uint64_t *)&v56);
  if ((v6 & 0x80000000) != 0)
    return v6;
  *a5 = 1;
  v7 = v56;
  if (!v56[7])
    return 0;
  v12 = (*(uint64_t (**)(_QWORD, _QWORD, size_t *, char *))(v56[2] + 144))(v56[5], v56[6], &__n, (char *)&__n + 4);
  if ((v12 & 0x80000000) != 0)
  {
    log_OutPublic(*(_QWORD *)(v55 + 32), (uint64_t)"XCODER", 15028, (uint64_t)"%s%s%s%x", v8, v9, v10, v11, "stream");
    return v12;
  }
  if ((_DWORD)__n)
  {
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, char **, size_t *))(v7[2] + 88))(v7[5], v7[6], &v53, &__n);
    if ((v13 & 0x80000000) != 0)
    {
      v12 = v13;
      v35 = *(_QWORD *)(v55 + 32);
    }
    else
    {
      v18 = (*(uint64_t (**)(_QWORD, _QWORD, char *))(v7[2] + 136))(v7[3], v7[4], (char *)&v51 + 4);
      if ((v18 & 0x80000000) != 0)
      {
        v12 = v18;
        log_OutPublic(*(_QWORD *)(v55 + 32), (uint64_t)"XCODER", 15029, (uint64_t)"%s%s%s%x", v19, v20, v21, v22, "stream");
        return v12;
      }
      v23 = (*(uint64_t (**)(_QWORD, _QWORD, int **, uint64_t *))(v7[2] + 88))(v7[3], v7[4], &v50, &v51);
      if ((v23 & 0x80000000) == 0)
      {
        v12 = (*(uint64_t (**)(_QWORD, _QWORD, char **, _QWORD))(v7[2] + 112))(v7[7], v7[8], &v52, __n);
        if ((v12 & 0x80000000) != 0)
        {
          log_OutPublic(*(_QWORD *)(v55 + 32), (uint64_t)"XCODER", 15031, (uint64_t)"%s%s%s%x", v24, v25, v26, v27, "stream");
          (*(void (**)(_QWORD, _QWORD, _QWORD))(v7[2] + 96))(v7[5], v7[6], 0);
        }
        else
        {
          cstdlib_memcpy(v52, v53, __n);
          v30 = v51 >> 2;
          LODWORD(v51) = v51 >> 2;
          HIDWORD(v51) >>= 2;
          v31 = __n;
          if (__n >= 0x20)
          {
            v37 = 0;
            v38 = 0;
            v32 = 0;
            v39 = v53;
            do
            {
              v40 = *(_DWORD *)&v39[v37];
              v41 = v40 > 0x1D || ((1 << v40) & 0x215F0112) == 0;
              if (!v41 || v40 == 0x4000)
              {
                p_xcoder_GetRefPosition(v55, HIDWORD(v51), v50, v51, *(unsigned int *)&v39[v37 + 4], (int *)&v52[v37 + 4], v28, v29);
                p_xcoder_GetRefPosition(v55, HIDWORD(v51), v50, v51, (*(_DWORD *)&v53[v37 + 8] + *(_DWORD *)&v53[v37 + 4]), (int *)&v52[v37 + 8], v42, v43);
                LODWORD(v12) = 0;
                *(_DWORD *)&v52[v37 + 8] -= *(_DWORD *)&v52[v37 + 4];
                v39 = v53;
                if (*(_DWORD *)&v53[v37 + 4] > v32)
                  v32 = *(_DWORD *)&v53[v37 + 4];
                v31 = __n;
              }
              ++v38;
              v37 += 32;
            }
            while (v38 < v31 >> 5);
            v30 = v51;
          }
          else
          {
            v32 = 0;
          }
          if (v32 >= v30)
            v32 = v30 - 1;
          v44 = (*(uint64_t (**)(_QWORD, _QWORD))(v7[2] + 120))(v7[7], v7[8]);
          if (v44 < 0)
            LODWORD(v12) = v44;
          v45 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v7[2] + 96))(v7[5], v7[6], __n);
          if (v45 < 0 && (int)v12 > -1)
            LODWORD(v12) = v45;
          if (v32 <= HIDWORD(v51))
            v47 = 0;
          else
            v47 = 4 * (v32 - HIDWORD(v51));
          v48 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v7[2] + 96))(v7[3], v7[4], v47);
          if (v48 >= 0 || (int)v12 <= -1)
            return v12;
          else
            return v48;
        }
        return v12;
      }
      v12 = v23;
      v35 = *(_QWORD *)(v55 + 32);
    }
    log_OutPublic(v35, (uint64_t)"XCODER", 15030, (uint64_t)"%s%s%s%x", v14, v15, v16, v17, "stream");
    return v12;
  }
  if (HIDWORD(__n))
  {
    v33 = v7[7];
    if (v33)
    {
      v12 = (*(uint64_t (**)(uint64_t, _QWORD))(v7[2] + 72))(v33, v7[8]);
      v7[7] = safeh_GetNullHandle();
      v7[8] = v34;
    }
  }
  else
  {
    *a5 = 1;
  }
  return v12;
}

uint64_t xcoder_mrksync_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  v2 = p_xcoder_mrksync_BeginFunction(a1, a2, &v12, (uint64_t *)&v11);
  if ((v2 & 0x80000000) == 0)
  {
    v3 = v11;
    v4 = v11[3];
    if (v4)
    {
      (*(void (**)(uint64_t, _QWORD))(v11[2] + 72))(v4, v11[4]);
      v3[3] = safeh_GetNullHandle();
      v3[4] = v5;
    }
    v6 = v3[5];
    if (v6)
    {
      (*(void (**)(uint64_t, _QWORD))(v3[2] + 72))(v6, v3[6]);
      v3[5] = safeh_GetNullHandle();
      v3[6] = v7;
    }
    v8 = v3[7];
    if (v8)
    {
      (*(void (**)(uint64_t, _QWORD))(v3[2] + 72))(v8, v3[8]);
      v3[7] = safeh_GetNullHandle();
      v3[8] = v9;
    }
  }
  return v2;
}

uint64_t p_xcoder_mrksync_BeginFunction(uint64_t a1, int a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t result;

  *a3 = 0;
  *a4 = 0;
  LODWORD(result) = safeh_HandleCheck(a1, a2, 854, 72);
  if ((result & 0x80000000) != 0)
  {
    if ((result & 0x1FFF) == 8)
      return 2282758152;
    else
      return result;
  }
  else
  {
    *a4 = a1;
    return InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), a3);
  }
}

uint64_t p_xcoder_GetRefPosition(uint64_t result, unsigned int a2, int *a3, int a4, uint64_t a5, int *a6, uint64_t a7, uint64_t a8)
{
  int v8;

  if (a5 >= a2)
  {
    if (a4 + a2 >= a5)
    {
      if (a4 + a2 == (_DWORD)a5)
        v8 = a3[a4 - 1] + 2;
      else
        v8 = a3[a5 - a2];
      *a6 = v8;
    }
    else
    {
      *a6 = a3[a4 - 1] + 2;
      return log_OutText(*(_QWORD *)(result + 32), (uint64_t)"XCODER", 3, 0, (uint64_t)"Marker text position is beyond the end of the sync object, charPos=%u, maxSyncPos=%u, return position=%u", (uint64_t)a6, a7, a8, a5);
    }
  }
  else
  {
    *a6 = *a3;
    return log_OutText(*(_QWORD *)(result + 32), (uint64_t)"XCODER", 3, 0, (uint64_t)"Marker text position is before the synch object, charPos=%u, syncPos=%u, return position=%u", (uint64_t)a6, a7, a8, a5);
  }
  return result;
}

uint64_t xcoder_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2282758145;
  result = 0;
  *a2 = &IXCoder;
  return result;
}

uint64_t xcoder_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t NullHandle;
  int v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v8 = 2282758151;
  v23 = 0;
  v24 = 0;
  NullHandle = safeh_GetNullHandle();
  v11 = safeh_HandlesEqual((uint64_t)a3, a4, NullHandle, v10);
  if (a5)
  {
    if (!v11)
    {
      *(_QWORD *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      if ((InitRsrcFunction(a3, a4, &v24) & 0x80000000) == 0)
      {
        v12 = heap_Calloc(*(_QWORD **)(v24 + 8), 1, 344);
        if (v12)
        {
          v17 = v12;
          *(_QWORD *)v12 = a3;
          *(_QWORD *)(v12 + 8) = a4;
          *(_DWORD *)(v12 + 272) = -2012209145;
          cstdlib_strcpy((char *)(v12 + 144), "UTF-8");
          if ((objc_GetObject(*(_QWORD *)(v24 + 48), (uint64_t)"SYNTHSTREAM", &v23) & 0x80000000) != 0)
            log_OutPublic(*(_QWORD *)(v24 + 32), (uint64_t)"XCODER", 15024, 0, v18, v19, v20, v21, v23);
          else
            *(_QWORD *)(v17 + 288) = *(_QWORD *)(v23 + 8);
          v8 = p_xcoder_ObjOpen(v17);
          if ((v8 & 0x80000000) != 0)
          {
            heap_Free(*(_QWORD **)(v24 + 8), v17);
            if (v23)
              objc_ReleaseObject(*(_QWORD *)(v24 + 48), (uint64_t)"SYNTHSTREAM");
          }
          else
          {
            *(_QWORD *)a5 = v17;
            *(_DWORD *)(a5 + 8) = 852;
          }
        }
        else
        {
          log_OutPublic(*(_QWORD *)(v24 + 32), (uint64_t)"XCODER", 15000, 0, v13, v14, v15, v16, v23);
          return 2282758154;
        }
      }
    }
  }
  return v8;
}

uint64_t xcoder_ObjClose(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  v2 = p_xcoder_BeginFunction(a1, a2, &v7, &v6);
  if ((v2 & 0x80000000) != 0)
    return v2;
  v3 = v6;
  v2 = p_xcoder_ObjClose(v6);
  if ((v2 & 0x80000000) != 0)
    return v2;
  v4 = objc_ReleaseObject(*(_QWORD *)(v7 + 48), (uint64_t)"SYNTHSTREAM");
  if ((v4 & 0x80000000) == 0)
    heap_Free(*(_QWORD **)(v7 + 8), v3);
  return v4;
}

uint64_t xcoder_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *__s2;
  char *__s1;
  uint64_t v30;
  uint64_t v31;
  char __dst[128];
  char v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v30 = 0;
  v31 = 0;
  __s2 = 0;
  __s1 = 0;
  v6 = p_xcoder_BeginFunction(a1, a2, &v31, &v30);
  if ((v6 & 0x80000000) == 0)
  {
    __dst[0] = 0;
    if ((paramc_ParamGetStr(*(_QWORD *)(v31 + 40), (uint64_t)"inputmimetype", &__s1) & 0x80000000) == 0 && __s1 && *__s1)
    {
      if (cstdlib_strcmp(__s1, "text/plain"))
      {
        if (cstdlib_strncmp(__s1, "text/plain;", 0xBuLL))
          return 0;
        v7 = cstdlib_strstr(__s1, ";charset=");
        if (!v7)
          return 0;
        v8 = v7[9];
        if (v7[9])
        {
          v9 = 0;
          while (v9 <= 0x7E && v8 != 59)
          {
            __dst[v9] = v8;
            v10 = v9 + 1;
            v8 = v7[v9++ + 10];
            if (!v8)
              goto LABEL_43;
          }
          v10 = v9;
        }
        else
        {
          v10 = 0;
        }
LABEL_43:
        __dst[v10] = 0;
      }
      else
      {
        if ((paramc_ParamGetStr(*(_QWORD *)(v31 + 40), (uint64_t)"nativetypeofchar", &__s2) & 0x80000000) != 0
          || (v14 = __s2) == 0
          || !*__s2)
        {
          __s2 = "UTF-8";
          v14 = "UTF-8";
        }
        cstdlib_strcpy(__dst, v14);
      }
    }
    else
    {
      if ((paramc_ParamGetStr(*(_QWORD *)(v31 + 40), (uint64_t)"nativetypeofchar", &__s2) & 0x80000000) != 0
        || (v11 = __s2) == 0
        || !*__s2)
      {
        __s2 = "UTF-8";
        v11 = "UTF-8";
      }
      cstdlib_strcpy(__dst, v11);
      cstdlib_strcpy(v33, "text/plain;charset=");
      cstdlib_strcat(v33, __s2);
      __s1 = v33;
    }
    if (LH_stricmp(__dst, "UTF-8"))
    {
      v12 = v30;
      if (*(_DWORD *)(v30 + 272) || LH_stricmp(__dst, (char *)(v30 + 16)))
      {
        cstdlib_strcpy((char *)(v12 + 16), __dst);
        v13 = p_xcoder_OpenXCoder(v12);
        if ((v13 & 0x1FFF) == 1)
          return 0;
        v6 = v13;
        if ((v13 & 0x80000000) != 0)
          return v6;
      }
      else
      {
        v15 = p_xcoder_ResetXCoder();
        if ((v15 & 0x80000000) != 0)
          return v15;
      }
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(v12 + 288)
                                                                                                  + 64))(a3, a4, 129, __s1, 0, 0, v12 + 296);
      if ((v16 & 0x80000000) != 0)
      {
        v6 = v16;
        log_OutPublic(*(_QWORD *)(v31 + 32), (uint64_t)"XCODER", 15026, (uint64_t)"%s%s", v17, v18, v19, v20, "contentType");
        return v6;
      }
      v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 + 288) + 64))(a3, a4, 129, "text/plain;charset=utf-8",
              0,
              1,
              v12 + 312);
      if ((v21 & 0x80000000) != 0)
      {
        v6 = v21;
        v26 = *(_QWORD *)(v31 + 32);
      }
      else
      {
        v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 + 288) + 64))(a3, a4, 129, "application/x-realspeak-xcoder-sync;version=5.0",
               0,
               1,
               v12 + 328);
        if ((v6 & 0x80000000) == 0)
          return v6;
        v26 = *(_QWORD *)(v31 + 32);
      }
      log_OutPublic(v26, (uint64_t)"XCODER", 15027, (uint64_t)"%s%s", v22, v23, v24, v25, "contentType");
    }
  }
  return v6;
}

uint64_t xcoder_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v43;
  int v44;
  int v46;
  int v48;
  void *__b;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;

  v56 = 0;
  v57 = 0;
  v55 = 0;
  v54 = 0;
  v51 = 0;
  v52 = 0;
  __b = 0;
  v6 = p_xcoder_BeginFunction(a1, a2, &v57, (uint64_t *)&v56);
  if ((v6 & 0x80000000) == 0)
  {
    *a5 = 1;
    v7 = v56;
    if (v56[39])
    {
      v6 = (*(uint64_t (**)(_QWORD, _QWORD, unsigned int *, char *))(v56[36] + 144))(v56[37], v56[38], &v54, (char *)&v55 + 4);
      if ((v6 & 0x80000000) != 0)
      {
        log_OutPublic(*(_QWORD *)(v57 + 32), (uint64_t)"XCODER", 15028, (uint64_t)"%s%s%s%x", v8, v9, v10, v11, "stream");
      }
      else if (v54)
      {
        v12 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *))(v7[36] + 136))(v7[37], v7[38], &v55);
        if ((v12 & 0x80000000) != 0)
        {
          v6 = v12;
          log_OutPublic(*(_QWORD *)(v57 + 32), (uint64_t)"XCODER", 15029, (uint64_t)"%s%s%s%x", v13, v14, v15, v16, "stream");
        }
        else
        {
          v17 = (*(uint64_t (**)(_QWORD, _QWORD, unsigned __int8 **, unsigned int *))(v7[36] + 88))(v7[37], v7[38], &v52, &v54);
          if ((v17 & 0x80000000) != 0)
          {
            v6 = v17;
            log_OutPublic(*(_QWORD *)(v57 + 32), (uint64_t)"XCODER", 15030, (uint64_t)"%s%s%s%x", v18, v19, v20, v21, "stream");
          }
          else
          {
            v22 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, _QWORD))(v7[36] + 112))(v7[39], v7[40], &v51, 4 * v54);
            if ((v22 & 0x80000000) != 0)
            {
              v6 = v22;
              log_OutPublic(*(_QWORD *)(v57 + 32), (uint64_t)"XCODER", 15031, (uint64_t)"%s%s%s%x", v23, v24, v25, v26, "stream");
            }
            else
            {
              v27 = (*(uint64_t (**)(_QWORD, _QWORD, void **, _QWORD))(v7[36] + 112))(v7[41], v7[42], &__b, 16 * v54);
              if ((v27 & 0x80000000) != 0)
              {
                v6 = v27;
                log_OutPublic(*(_QWORD *)(v57 + 32), (uint64_t)"XCODER", 15031, (uint64_t)"%s%s%s%x", v28, v29, v30, v31, "stream");
                (*(void (**)(_QWORD, _QWORD, _QWORD))(v7[36] + 96))(v7[37], v7[38], 0);
              }
              else if (!(_DWORD)v55
                     && p_xcoder_CheckBom((uint64_t)v7, v52, v54)
                     && (v43 = p_xcoder_OpenXCoder((uint64_t)v7), (v43 & 0x80000000) != 0))
              {
                return v43;
              }
              else
              {
                v32 = 4 * v54;
                v53 = 4 * v54;
                cstdlib_memset(__b, 255, 16 * v54);
                v33 = p_xcoder_Convert((uint64_t)v7, (uint64_t)v52, v54, &v54, v51, v32, &v53, __b);
                if (v33 < 0 && ((LODWORD(v6) = v33, (v33 & 0x1FFF) != 7) || HIDWORD(v55)))
                {
                  v34 = 0;
                  v53 = 0;
                  v54 = 0;
                }
                else
                {
                  LODWORD(v6) = 0;
                  v34 = v53;
                  if ((_DWORD)v55 && v53)
                  {
                    v35 = 0;
                    v36 = __b;
                    do
                    {
                      v36[v35++] += v55;
                      v34 = v53;
                    }
                    while (v35 < v53);
                    LODWORD(v6) = 0;
                  }
                }
                v44 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v7[36] + 120))(v7[41], v7[42], 4 * v34);
                if (v44 < 0 && (int)v6 > -1)
                  LODWORD(v6) = v44;
                v46 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v7[36] + 120))(v7[39], v7[40], v53);
                if (v46 < 0 && (int)v6 > -1)
                  LODWORD(v6) = v46;
                v48 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v7[36] + 96))(v7[37], v7[38], v54);
                if (v48 >= 0 || (int)v6 <= -1)
                  return v6;
                else
                  return v48;
              }
            }
          }
        }
      }
      else if (HIDWORD(v55))
      {
        v37 = v7[39];
        if (v37)
        {
          LODWORD(v6) = (*(uint64_t (**)(uint64_t, _QWORD))(v7[36] + 72))(v37, v7[40]);
          v7[39] = safeh_GetNullHandle();
          v7[40] = v38;
          v39 = (*(uint64_t (**)(_QWORD, _QWORD))(v7[36] + 72))(v7[41], v7[42]);
          v7[41] = safeh_GetNullHandle();
          v7[42] = v40;
          if (v39 >= 0 || (int)v6 <= -1)
            return v6;
          else
            return v39;
        }
      }
      else
      {
        *a5 = 0;
      }
    }
  }
  return v6;
}

uint64_t xcoder_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  v2 = p_xcoder_BeginFunction(a1, a2, &v12, (uint64_t *)&v11);
  if ((v2 & 0x80000000) == 0)
  {
    v3 = v11;
    v4 = v11[37];
    if (v4)
    {
      (*(void (**)(uint64_t, _QWORD))(v11[36] + 72))(v4, v11[38]);
      v3[37] = safeh_GetNullHandle();
      v3[38] = v5;
    }
    v6 = v3[39];
    if (v6)
    {
      (*(void (**)(uint64_t, _QWORD))(v3[36] + 72))(v6, v3[40]);
      v3[39] = safeh_GetNullHandle();
      v3[40] = v7;
    }
    v8 = v3[41];
    if (v8)
    {
      (*(void (**)(uint64_t, _QWORD))(v3[36] + 72))(v8, v3[42]);
      v3[41] = safeh_GetNullHandle();
      v3[42] = v9;
    }
  }
  return v2;
}

uint64_t p_xcoder_BeginFunction(uint64_t a1, int a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t result;

  *a3 = 0;
  *a4 = 0;
  LODWORD(result) = safeh_HandleCheck(a1, a2, 852, 344);
  if ((result & 0x80000000) != 0)
  {
    if ((result & 0x1FFF) == 8)
      return 2282758152;
    else
      return result;
  }
  else
  {
    *a4 = a1;
    return InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), a3);
  }
}

uint64_t p_xcoder_CheckBom(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  char *v4;
  uint64_t v5;
  const char *v6;

  if (a3 < 2)
    return 0;
  v4 = (char *)(a1 + 16);
  if (LH_stricmp((char *)(a1 + 16), "UTF-16"))
  {
    if (LH_stricmp(v4, "UCS-2"))
      return 0;
  }
  if (*a2 == 254 && a2[1] == 255)
  {
    v5 = 1;
    v6 = "UTF-16BE";
  }
  else
  {
    v5 = 0;
    v6 = "UTF-16";
  }
  cstdlib_strcpy(v4, v6);
  return v5;
}

uint64_t synthstream_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2297438209;
  result = 0;
  *a2 = &ISynthStream;
  return result;
}

uint64_t synthstream_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  unsigned int v28;
  __int128 v29[2];
  _QWORD *(*v30)(_QWORD *);
  uint64_t v31;

  v5 = 2297438214;
  v31 = 0;
  if (a5)
  {
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v31);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(_QWORD *)(v31 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ObjOpen: Begin", v10, v11, v12, v27);
      v13 = heap_Calloc(*(_QWORD **)(v31 + 8), 1, 48);
      if (v13)
      {
        v18 = v13;
        *(_QWORD *)v13 = a3;
        *(_QWORD *)(v13 + 8) = a4;
        v19 = (_DWORD *)(v13 + 32);
        if ((paramc_ParamGetUInt(*(_QWORD *)(v31 + 40), (uint64_t)"synthstreamminmemalloc", (unsigned int *)(v13 + 32)) & 0x80000000) != 0
          || !*v19)
        {
          *v19 = 1024;
        }
        v20 = (_DWORD *)(v18 + 36);
        if ((paramc_ParamGetUInt(*(_QWORD *)(v31 + 40), (uint64_t)"synthstreamminmemmove", (unsigned int *)(v18 + 36)) & 0x80000000) != 0
          || !*v20)
        {
          *v20 = 128;
        }
        v21 = (_DWORD *)(v18 + 40);
        if ((paramc_ParamGetUInt(*(_QWORD *)(v31 + 40), (uint64_t)"synthstreamminmemfree", (unsigned int *)(v18 + 40)) & 0x80000000) != 0
          || !*v21)
        {
          *v21 = 4097;
        }
        paramc_ParamGetInt(*(_QWORD *)(v31 + 40), (uint64_t)"loginputtext", (_DWORD *)(v18 + 44));
        v22 = *(_QWORD **)(v31 + 8);
        v29[0] = xmmword_24D2925F0;
        v29[1] = *(_OWORD *)&off_24D292600;
        v30 = synthstream_loc_ElemReleaseStreamImpl;
        v5 = ssftmap_ObjOpen(v22, 0, v29, (uint64_t *)(v18 + 24));
        if ((v5 & 0x80000000) != 0)
        {
          heap_Free(*(_QWORD **)(v31 + 8), v18);
        }
        else
        {
          *(_QWORD *)a5 = v18;
          *(_DWORD *)(a5 + 8) = 18397;
        }
      }
      else
      {
        log_OutPublic(*(_QWORD *)(v31 + 32), (uint64_t)"SYNTHSTREAM", 22000, 0, v14, v15, v16, v17, v28);
        v5 = 2297438218;
      }
      log_OutText(*(_QWORD *)(v31 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ObjOpen: End (%x)", v23, v24, v25, v5);
    }
  }
  return v5;
}

uint64_t synthstream_ObjClose(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int ElemAt;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v28 = 0;
  v29 = 0;
  v27 = 0;
  v2 = synthstream_loc_BeginFunction(a1, a2, &v28, &v29);
  if ((v2 & 0x80000000) != 0)
    return v2;
  log_OutText(*(_QWORD *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ObjClose : Begin", v3, v4, v5, v23);
  v6 = v29;
  v10 = ssftmap_IteratorOpen(*(_QWORD *)(v29 + 24), 0, 1, (uint64_t)&v27);
  if ((v10 & 0x80000000) == 0)
  {
    v25 = 0;
    v26 = 0;
    v24 = 0;
    while ((ssftmap_IteratorNext(v27, &v26, &v25) & 0x80000000) == 0)
    {
      v15 = v25;
      if (!*(_DWORD *)(v25 + 108))
      {
        log_OutPublic(*(_QWORD *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 22001, (uint64_t)"%s%u%s%s%s%u", v11, v12, v13, v14, "writer");
        v15 = v25;
      }
      if (*(_QWORD *)(v15 + 16))
      {
        log_OutPublic(*(_QWORD *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 22001, (uint64_t)"%s%u%s%s%s%u", v11, v12, v13, v14, "module");
        heap_Free(*(_QWORD **)(v28 + 8), *(_QWORD *)(v25 + 16));
        v15 = v25;
        *(_QWORD *)(v25 + 16) = 0;
      }
      if (vector_GetElemAt(*(_QWORD *)(v15 + 24), 0, &v24) == 1)
      {
        v20 = 1;
        do
        {
          log_OutPublic(*(_QWORD *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 22001, (uint64_t)"%s%u%s%s%s%u", v16, v17, v18, v19, "module");
          heap_Free(*(_QWORD **)(v28 + 8), *v24);
          ElemAt = vector_GetElemAt(*(_QWORD *)(v25 + 24), v20++, &v24);
        }
        while (ElemAt == 1);
      }
      if (*(unsigned __int16 *)(v25 + 42) >= 2u)
        *(_WORD *)(v25 + 42) = 1;
    }
    ssftmap_IteratorClose((uint64_t)v27);
  }
  if ((v10 & 0x80000000) == 0 || (v10 & 0x1FFF) == 0x14)
  {
    v10 = ssftmap_ObjClose(*(_QWORD *)(v6 + 24));
    if ((v10 & 0x80000000) == 0)
      heap_Free(*(_QWORD **)(v28 + 8), v6);
  }
  log_OutText(*(_QWORD *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ObjClose : End (%x)", v7, v8, v9, v10);
  return v10;
}

uint64_t synthstream_SetPipelinePos(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  v7 = synthstream_loc_BeginFunction(a1, a2, &v12, &v13);
  if ((v7 & 0x80000000) == 0)
  {
    log_OutText(*(_QWORD *)(v12 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM SetPipelinePos : Begin (%u)", v4, v5, v6, a3);
    *(_WORD *)(v13 + 16) = a3;
    log_OutText(*(_QWORD *)(v12 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM SetPipelinePos : End (%x)", v8, v9, v10, v7);
  }
  return v7;
}

uint64_t synthstream_StreamOpen(uint64_t a1, int a2, unsigned int a3, const char *a4, __int128 *a5, int a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  _BOOL4 v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char __s1[128];
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v70 = 0;
  v71 = 0;
  v69 = 0;
  v12 = synthstream_loc_BeginFunction(a1, a2, &v69, &v71);
  if ((v12 & 0x80000000) != 0)
    return v12;
  v16 = v71;
  log_OutText(*(_QWORD *)(v69 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM StreamOpen : Begin (%u, %s, %p, %d, %u)", v13, v14, v15, a3);
  if (a4 && a7 && *a4 && cstdlib_strlen(a4) < 0x80)
  {
    *(_QWORD *)a7 = 0;
    *(_DWORD *)(a7 + 8) = 0;
    v67 = 0;
    v68 = 0;
    v66 = 0;
    v22 = 0;
    if (cstdlib_strlen(a4))
    {
      v23 = 1;
      do
      {
        __s1[v22] = cstdlib_tolower(a4[v22]);
        v22 = v23;
      }
      while (cstdlib_strlen(a4) > v23++);
    }
    __s1[v22] = 0;
    v67 = __s1;
    LOWORD(v68) = 0;
    v21 = ssftmap_IteratorOpen(*(_QWORD *)(v16 + 24), (uint64_t)&v67, 1, (uint64_t)&v66);
    if ((v21 & 0x80000000) != 0)
    {
      v29 = 0;
      v30 = 0;
    }
    else
    {
      *(_QWORD *)&v63 = 0;
      v65 = 0;
      if ((ssftmap_IteratorNext(v66, &v63, &v65) & 0x80000000) != 0 || cstdlib_strcmp(__s1, *(const char **)v63))
      {
        v29 = 0;
        v30 = 0;
      }
      else
      {
        v29 = 0;
        v30 = 0;
        do
        {
          v33 = a6 == 0;
          v34 = *(unsigned __int16 *)(v65 + 40);
          v35 = *(unsigned __int16 *)(v16 + 16);
          if (v34 != v35)
            v33 = 0;
          if (v34 >= v35 && !v33)
            break;
          v30 = v65;
          v29 = v63;
          if ((ssftmap_IteratorNext(v66, &v63, &v65) & 0x80000000) != 0)
            break;
        }
        while (!cstdlib_strcmp(__s1, *(const char **)v63));
      }
      ssftmap_IteratorClose((uint64_t)v66);
    }
    if ((v21 & 0x1FFF) == 0x14)
      v31 = 0;
    else
      v31 = v21;
    if ((v31 & 0x80000000) != 0)
      goto LABEL_82;
    if ((a6 - 1) < 2)
    {
      if (v30 && *(unsigned __int16 *)(v30 + 40) == *(unsigned __int16 *)(v16 + 16))
      {
        log_OutText(*(_QWORD *)(v69 + 32), (uint64_t)"SYNTHSTREAM", 3, 0, (uint64_t)"SYNTHSTREAM ObjOpen for write failed for %s %u, already present", v26, v27, v28, (uint64_t)__s1);
        v21 = 2297438210;
LABEL_82:
        log_OutText(*(_QWORD *)(v69 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM StreamOpen : End (%x, %p, %p, %u)", v26, v27, v28, v21);
        return v21;
      }
      if (v29)
        v32 = *(_WORD *)(v29 + 8) + 1;
      else
        v32 = 0;
      LOWORD(v68) = v32;
      v37 = heap_Calloc(*(_QWORD **)(v69 + 8), 1, 120);
      v39 = v69;
      if (!v37)
      {
        v21 = 2297438218;
LABEL_81:
        log_OutPublic(*(_QWORD *)(v39 + 32), (uint64_t)"SYNTHSTREAM", 22000, 0, v38, v26, v27, v28, v62);
        goto LABEL_82;
      }
      v30 = v37;
      v40 = *(_QWORD **)(v69 + 8);
      v63 = xmmword_214F5E070;
      v64 = 0;
      if (vector_ObjOpen(v40, &v63, 1, (uint64_t *)(v30 + 24)) == 1)
      {
        v45 = *(_QWORD *)(v69 + 8);
        v46 = cstdlib_strlen(__s1);
        v47 = heap_Alloc(v45, (v46 + 1));
        *(_QWORD *)(v30 + 32) = v47;
        if (v47)
        {
          if (!a5)
          {
            if (cstdlib_strcmp(__s1, "application/x-realspeak-markers-pp;version=4.0"))
            {
              if (cstdlib_strcmp(__s1, "application/x-realspeak-int-markers-pp;version=4.0"))
              {
                if (cstdlib_strcmp(__s1, "application/x-tnplus-words;version=1.0"))
                  a5 = 0;
                else
                  a5 = (__int128 *)&IElemGeeneWordT;
              }
              else
              {
                a5 = &IElemIntMarkerT;
              }
            }
            else
            {
              a5 = &IElemMarkerT;
            }
          }
          *(_QWORD *)v30 = v16;
          *(_QWORD *)(v30 + 8) = v69;
          cstdlib_strcpy(*(char **)(v30 + 32), __s1);
          *(_WORD *)(v30 + 40) = *(_WORD *)(v16 + 16);
          *(_WORD *)(v30 + 42) = 1;
          *(_WORD *)(v30 + 44) = a3;
          if (a5 && *(_WORD *)a5)
          {
            v52 = *a5;
            *(_QWORD *)(v30 + 64) = *((_QWORD *)a5 + 2);
            *(_OWORD *)(v30 + 48) = v52;
          }
          *(_BYTE *)(v30 + 72) = a6 == 2;
          if (cstdlib_strncmp(v67, "text/", 5uLL))
            v53 = 0;
          else
            v53 = cstdlib_strstr(v67, "charset=wchar_t") == 0;
          *(_BYTE *)(v30 + 73) = v53;
          if (*(_DWORD *)(v16 + 44)
            && (!cstdlib_strcmp(__s1, "text/plain;charset=utf-16")
             || !cstdlib_strcmp(__s1, "text/plain;charset=utf-8")
             || !cstdlib_strcmp(__s1, "application/synthesis+ssml")
             || !cstdlib_strcmp(__s1, "text/html")
             || !cstdlib_strcmp(__s1, "text/email")
             || !cstdlib_strcmp(__s1, "text/xml")))
          {
            *(_DWORD *)(v16 + 44) = 0;
            *(_BYTE *)(v30 + 72) = 1;
            *(_BYTE *)(v30 + 74) = 1;
          }
          v21 = ssftmap_Insert(*(_QWORD *)(v16 + 24), (uint64_t)&v67, v30);
          if ((v21 & 0x80000000) != 0)
            log_OutPublic(*(_QWORD *)(v69 + 32), (uint64_t)"SYNTHSTREAM", 22002, (uint64_t)"%s%u%s%s%s%u", v54, v55, v56, v57, "module");
          synthstream_loc_ElemReleaseStreamImpl((_QWORD *)v30);
          if ((v21 & 0x80000000) != 0)
            goto LABEL_82;
LABEL_73:
          v58 = heap_Calloc(*(_QWORD **)(v69 + 8), 1, 24);
          v70 = v58;
          if (v58)
          {
            v59 = v58;
            if (a6 || (v60 = vector_Add(*(_QWORD *)(v30 + 24), &v70), v59 = v70, v60))
            {
              *(_DWORD *)v59 = a6;
              *(_WORD *)(v59 + 4) = a3;
              *(_QWORD *)(v59 + 8) = v30;
              *(_DWORD *)(v59 + 16) = *(_DWORD *)(v30 + 80);
              ++*(_WORD *)(v30 + 42);
              if ((a6 - 1) <= 1)
                *(_QWORD *)(v30 + 16) = v59;
              *(_QWORD *)a7 = v59;
              *(_DWORD *)(a7 + 8) = 18398;
              goto LABEL_82;
            }
            v21 = 2297438218;
            heap_Free(*(_QWORD **)(v69 + 8), v70);
            v70 = 0;
          }
          else
          {
            v21 = 2297438218;
          }
          v39 = v69;
          goto LABEL_81;
        }
        v21 = 2297438218;
        log_OutPublic(*(_QWORD *)(v69 + 32), (uint64_t)"SYNTHSTREAM", 22000, 0, v48, v49, v50, v51, v62);
        vector_ObjClose(*(_QWORD *)(v30 + 24));
      }
      else
      {
        v21 = 2297438218;
        log_OutPublic(*(_QWORD *)(v69 + 32), (uint64_t)"SYNTHSTREAM", 22000, 0, v41, v42, v43, v44, v62);
      }
      heap_Free(*(_QWORD **)(v69 + 8), v30);
      goto LABEL_82;
    }
    if (a6)
    {
      log_OutPublic(*(_QWORD *)(v69 + 32), (uint64_t)"SYNTHSTREAM", 22007, (uint64_t)"%s%d%s%u%s%s", v25, v26, v27, v28, "openMode");
      v21 = 2297438215;
      goto LABEL_82;
    }
    if (!v30)
    {
      log_OutText(*(_QWORD *)(v69 + 32), (uint64_t)"SYNTHSTREAM", 3, 0, (uint64_t)"SYNTHSTREAM ObjOpen for read failed for %s %u, not found", v26, v27, v28, (uint64_t)__s1);
      v21 = 2297438228;
      goto LABEL_82;
    }
    v21 = v31;
    goto LABEL_73;
  }
  log_OutPublic(*(_QWORD *)(v69 + 32), (uint64_t)"SYNTHSTREAM", 22006, (uint64_t)"%s%s%s%u%s%s%s%p", v17, v18, v19, v20, "function");
  return 2297438215;
}

uint64_t synthstream_StreamClose(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;
  _QWORD *v19;

  v6 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v6 & 0x80000000) == 0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM StreamClose : Begin (%u, %p, %d)", v3, v4, v5, *(unsigned __int16 *)(a1 + 4));
    if (*(_DWORD *)a1)
    {
      v8 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(v8 + 16) = 0;
      *(_DWORD *)(v8 + 108) = 1;
      synthstream_loc_StreamImplDump(v8, 0, 0);
    }
    else
    {
      v19 = 0;
      v13 = 0;
      if (vector_GetElemAt(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), 0, &v19) == 1)
      {
        v13 = 0;
        do
        {
          if (*v19 == a1)
            break;
          ++v13;
        }
        while (vector_GetElemAt(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), v13, &v19) == 1);
      }
      if (*v19 == a1)
        vector_Remove(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), v13);
      else
        log_OutPublic(*(_QWORD *)(v7 + 32), (uint64_t)"SYNTHSTREAM", 22003, 0, v9, v10, v11, v12, v18);
    }
    synthstream_loc_ElemReleaseStreamImpl(*(_QWORD **)(a1 + 8));
    heap_Free(*(_QWORD **)(v7 + 8), a1);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM StreamClose : End (%x)", v14, v15, v16, v6);
  }
  return v6;
}

uint64_t synthstream_Read(uint64_t a1, int a2, void *a3, unsigned int a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;

  v12 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v12 & 0x80000000) == 0)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    log_OutText(*(_QWORD *)(v13 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM Read : Begin (%u, %p, %lu bytes)", v9, v10, v11, *(unsigned __int16 *)(a1 + 4));
    if (a3 && a4 && a5)
    {
      if (*(_DWORD *)a1)
      {
        v12 = 2297438215;
        log_OutPublic(*(_QWORD *)(v13 + 32), (uint64_t)"SYNTHSTREAM", 22009, (uint64_t)"%s%s%s%u%s%s", v14, v15, v16, v17, "function");
      }
      else
      {
        v18 = *(_DWORD *)(a1 + 16);
        v19 = *(_QWORD *)(a1 + 8);
        v20 = *(_DWORD *)(v19 + 88);
        v21 = v18 - v20;
        if (v18 >= v20)
        {
          v23 = *(_DWORD *)(v19 + 76) - v18;
          if (v23 >= a4)
            v24 = a4;
          else
            v24 = v23;
          *a5 = v24;
          if ((_DWORD)v24)
          {
            cstdlib_memcpy(a3, (const void *)(*(_QWORD *)(v19 + 96) + v21), v24);
            v29 = *(_DWORD *)(a1 + 16) + *a5;
            *(_DWORD *)(a1 + 16) = v29;
            v30 = *(_QWORD *)(a1 + 8);
            if (v29 > *(_DWORD *)(v30 + 80))
              *(_DWORD *)(v30 + 80) = v29;
            if (*(_QWORD *)(v30 + 56))
              log_OutPublic(*(_QWORD *)(v13 + 32), (uint64_t)"SYNTHSTREAM", 22014, (uint64_t)"%s%s%s%u%s%s", v25, v26, v27, v28, "function");
            else
              synthstream_loc_StreamImplRecoverExcessBuffer(v30, 0);
          }
          goto LABEL_12;
        }
        log_OutPublic(*(_QWORD *)(v13 + 32), (uint64_t)"SYNTHSTREAM", 22011, (uint64_t)"%s%s%s%u%s%s%s%u%s%u", v14, v15, v16, v17, "function");
        v12 = 2297438212;
      }
    }
    else
    {
      v12 = 2297438215;
      log_OutPublic(*(_QWORD *)(v13 + 32), (uint64_t)"SYNTHSTREAM", 22006, (uint64_t)"%s%s%s%u%s%s%s%p%s%d%s%p", v14, v15, v16, v17, "function");
      if (!a5)
        return v12;
    }
    *a5 = 0;
LABEL_12:
    log_OutText(*(_QWORD *)(v13 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM Read : End (%x, %lu bytes)", v15, v16, v17, v12);
  }
  return v12;
}

uint64_t synthstream_ReadDirectStart(uint64_t a1, int a2, _QWORD *a3, unsigned int *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v22;

  v10 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v10 & 0x80000000) == 0)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    log_OutText(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ReadDirectStart : Begin (%u, %p)", v7, v8, v9, *(unsigned __int16 *)(a1 + 4));
    if (a3 && a4)
    {
      if (*(_DWORD *)a1)
      {
        v10 = 2297438215;
        log_OutPublic(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22009, (uint64_t)"%s%s%s%u%s%s", v12, v13, v14, v15, "function");
      }
      else
      {
        v16 = *(_DWORD *)(a1 + 16);
        v17 = *(_QWORD *)(a1 + 8);
        v18 = *(_DWORD *)(v17 + 88);
        v19 = v16 - v18;
        if (v16 >= v18)
        {
          v20 = *(_DWORD *)(v17 + 76) - v16;
          *a4 = v20;
          v21 = *(_QWORD *)(v17 + 96);
          *a3 = v21 + v19;
          if (v20)
            v22 = v21 == 0;
          else
            v22 = 0;
          if (!v22)
            goto LABEL_19;
          v10 = 2297438218;
        }
        else
        {
          log_OutPublic(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22011, (uint64_t)"%s%s%s%u%s%s%s%u%s%u", v12, v13, v14, v15, "function");
          v10 = 2297438212;
        }
      }
    }
    else
    {
      v10 = 2297438215;
      log_OutPublic(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22006, (uint64_t)"%s%s%s%u%s%s%s%p%s%p", v12, v13, v14, v15, "function");
      if (!a3)
      {
        if (!a4)
          return v10;
        goto LABEL_18;
      }
    }
    *a3 = 0;
    if (a4)
    {
LABEL_18:
      *a4 = 0;
LABEL_19:
      log_OutText(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ReadDirectStart : End (%x, %lu bytes)", v13, v14, v15, v10);
    }
  }
  return v10;
}

uint64_t synthstream_ReadDirectEnd(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;

  v8 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v8 & 0x80000000) == 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ReadDirectEnd : Begin (%u, %p, %lu bytes)", v5, v6, v7, *(unsigned __int16 *)(a1 + 4));
    if (*(_DWORD *)a1)
    {
      v8 = 2297438215;
      log_OutPublic(*(_QWORD *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 22009, (uint64_t)"%s%s%s%u%s%s", v10, v11, v12, v13, "function");
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 8);
      v18 = *(_DWORD *)(a1 + 16);
      v19 = *(_DWORD *)(v17 + 76) - v18;
      if (v19 >= a3)
      {
        v20 = v18 + a3;
      }
      else
      {
        v8 = 2297438215;
        log_OutPublic(*(_QWORD *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 22004, (uint64_t)"%s%u%s%s%s%u%s%u", v10, v11, v12, v13, "module");
        v20 = *(_DWORD *)(a1 + 16) + v19;
        v17 = *(_QWORD *)(a1 + 8);
      }
      *(_DWORD *)(a1 + 16) = v20;
      if (v20 > *(_DWORD *)(v17 + 80))
        *(_DWORD *)(v17 + 80) = v20;
      synthstream_loc_StreamImplRecoverExcessBuffer(v17, 0);
    }
    log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ReadDirectEnd : End (%x)", v14, v15, v16, v8);
  }
  return v8;
}

uint64_t synthstream_Write(uint64_t a1, int a2, char *a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  BOOL v29;
  unsigned int v30;
  int v31;

  v31 = 1;
  v7 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v7 & 0x80000000) == 0)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    log_OutText(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM Write : Begin (%u, %p, %lu bytes)", v8, v9, v10, *(unsigned __int16 *)(a1 + 4));
    if (!a3 || !a4)
    {
      v20 = 2297438215;
      log_OutText(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"%s%u%s%s%s%p%s%u", v13, v14, v15, (uint64_t)"function=Write|module=");
      goto LABEL_22;
    }
    if ((*(_DWORD *)a1 - 1) >= 2)
    {
      v20 = 2297438215;
      log_OutPublic(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22008, (uint64_t)"%s%s%s%u%s%s", v12, v13, v14, v15, "function");
      goto LABEL_22;
    }
    v16 = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(v16 + 76) < *(_DWORD *)(v16 + 88))
    {
      log_OutPublic(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22012, (uint64_t)"%s%s%s%u%s%s%s%u%s%u", v12, v13, v14, v15, "function");
      v20 = 2297438213;
LABEL_22:
      log_OutText(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM Write : End (%x)", v17, v18, v19, v20);
      return v20;
    }
    v21 = synthstream_loc_StreamImplGrowBuf(v16, a4, &v31);
    if ((v21 & 0x80000000) != 0)
    {
      v20 = v21;
      goto LABEL_22;
    }
    v22 = *(_QWORD *)(a1 + 8);
    if (v31 == 1)
    {
      v23 = *(_DWORD *)(v22 + 76);
      v24 = *(_DWORD *)(v22 + 88);
      v25 = v23 - v24;
      if (v23 >= v24)
      {
        cstdlib_memcpy((void *)(*(_QWORD *)(v22 + 96) + v25), a3, a4);
        v22 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)(v22 + 56))
        {
          v26 = 0;
          while (1)
          {
            v27 = (*(uint64_t (**)(char *, _QWORD, _QWORD))(v22 + 56))(&a3[v26], *(_QWORD *)(*(_QWORD *)(v22 + 8) + 8), *(_QWORD *)(v22 + 96) + v26 + v25);
            v22 = *(_QWORD *)(a1 + 8);
            if (!v27)
              break;
            v26 += *(unsigned __int16 *)(v22 + 48);
            if (v26 >= a4)
              goto LABEL_21;
          }
          if (*(_QWORD *)(v22 + 64))
            v29 = v26 == 0;
          else
            v29 = 1;
          if (!v29)
          {
            v30 = 0;
            do
            {
              (*(void (**)(_QWORD, _QWORD))(v22 + 64))(*(_QWORD *)(v22 + 96) + v30 + v25, *(_QWORD *)(*(_QWORD *)(v22 + 8) + 8));
              v22 = *(_QWORD *)(a1 + 8);
              v30 += *(unsigned __int16 *)(v22 + 48);
            }
            while (v30 < v26);
          }
          v20 = 2297438218;
          goto LABEL_22;
        }
        goto LABEL_21;
      }
    }
    else
    {
      v24 = *(_DWORD *)(v22 + 88);
    }
    *(_DWORD *)(v22 + 88) = v24 + a4;
LABEL_21:
    *(_DWORD *)(v22 + 76) += a4;
    synthstream_loc_StreamImplDump(v22, (uint64_t)a3, a4);
    v20 = 0;
    goto LABEL_22;
  }
  return v7;
}

uint64_t synthstream_WriteDirectStart(uint64_t a1, int a2, _QWORD *a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void *v23;

  v7 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v7 & 0x80000000) == 0)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    log_OutText(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM WriteDirectStart : Begin (%u, %p, %lu bytes)", v8, v9, v10, *(unsigned __int16 *)(a1 + 4));
    if (a3 && a4)
    {
      if ((*(_DWORD *)a1 - 1) >= 2)
      {
        v20 = 2297438215;
        log_OutPublic(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22008, (uint64_t)"%s%s%s%u%s%s", v12, v13, v14, v15, "function");
      }
      else
      {
        v16 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(v16 + 76) >= *(_DWORD *)(v16 + 88))
        {
          v22 = synthstream_loc_StreamImplGrowBuf(v16, a4, 0);
          if ((v22 & 0x80000000) == 0)
          {
            v23 = (void *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 96)
                         + (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 76)
                                        - *(_DWORD *)(*(_QWORD *)(a1 + 8) + 88)));
            *a3 = v23;
            cstdlib_memset(v23, 0, a4);
            v20 = 0;
            goto LABEL_12;
          }
          v20 = v22;
        }
        else
        {
          log_OutPublic(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22012, (uint64_t)"%s%s%s%u%s%s%s%u%s%u", v12, v13, v14, v15, "function");
          v20 = 2297438213;
        }
      }
    }
    else
    {
      v20 = 2297438215;
      log_OutPublic(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22006, (uint64_t)"%s%s%s%u%s%s%s%p%s%u", v12, v13, v14, v15, "function");
      if (!a3)
        goto LABEL_12;
    }
    *a3 = 0;
LABEL_12:
    log_OutText(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM WriteDirectStart : End (%x)", v17, v18, v19, v20);
    return v20;
  }
  return v7;
}

uint64_t synthstream_WriteDirectEnd(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unsigned int v29;

  v8 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v8 & 0x80000000) == 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM WriteDirectEnd : Begin (%u, %p, %lu bytes)", v5, v6, v7, *(unsigned __int16 *)(a1 + 4));
    if ((*(_DWORD *)a1 - 1) >= 2)
    {
      v8 = 2297438215;
      log_OutPublic(*(_QWORD *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 22008, (uint64_t)"%s%s%s%u%s%s", v10, v11, v12, v13, "function");
      goto LABEL_6;
    }
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_DWORD *)(v14 + 76);
    v16 = *(_DWORD *)(v14 + 88);
    v17 = v15 - v16;
    if (v15 < v16)
    {
      log_OutPublic(*(_QWORD *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 22012, (uint64_t)"%s%s%s%u%s%s%s%u%s%u", v10, v11, v12, v13, "function");
      v8 = 2297438213;
LABEL_6:
      log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM WriteDirectEnd : End (%x)", v18, v19, v20, v8);
      return v8;
    }
    v22 = v17 + a3;
    if (v17 + a3 > *(_DWORD *)(v14 + 104))
    {
      v8 = 2297438215;
      log_OutPublic(*(_QWORD *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 22005, (uint64_t)"%s%u%s%s%s%u%s%u", v10, v11, v12, v13, "module");
      goto LABEL_6;
    }
    if (*(_QWORD *)(v14 + 56))
    {
      if (a3)
      {
        v23 = 0;
        while (1)
        {
          v24 = (*(uint64_t (**)(_QWORD, _QWORD))(v14 + 56))(*(_QWORD *)(v14 + 96) + v23 + v17, *(_QWORD *)(*(_QWORD *)(v14 + 8) + 8));
          v14 = *(_QWORD *)(a1 + 8);
          if (!v24)
            break;
          v23 += *(unsigned __int16 *)(v14 + 48);
          if (v23 >= a3)
            goto LABEL_15;
        }
        if (*(_QWORD *)(v14 + 64))
          v28 = v23 == 0;
        else
          v28 = 1;
        if (!v28)
        {
          v29 = 0;
          do
          {
            (*(void (**)(_QWORD, _QWORD))(v14 + 64))(*(_QWORD *)(v14 + 96) + v29 + v17, *(_QWORD *)(*(_QWORD *)(v14 + 8) + 8));
            v14 = *(_QWORD *)(a1 + 8);
            v29 += *(unsigned __int16 *)(v14 + 48);
          }
          while (v29 < v23);
        }
        v8 = 2297438218;
        goto LABEL_6;
      }
LABEL_15:
      v15 = *(_DWORD *)(v14 + 76);
    }
    *(_DWORD *)(v14 + 76) = v15 + a3;
    synthstream_loc_StreamImplDump(v14, *(_QWORD *)(v14 + 96) + v17, a3);
    v25 = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(v25 + 104) - v22 >= *(_DWORD *)(*(_QWORD *)v25 + 40))
    {
      *(_DWORD *)(v25 + 104) = v22;
      v26 = *(_QWORD *)(v25 + 96);
      if (v22)
      {
        v27 = heap_Realloc(*(uint64_t **)(*(_QWORD *)(v25 + 8) + 8), v26, v22 + 1);
        v25 = *(_QWORD *)(a1 + 8);
        if (!v27)
          goto LABEL_29;
      }
      else
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)(v25 + 8) + 8), v26);
        v27 = 0;
        v25 = *(_QWORD *)(a1 + 8);
      }
      *(_QWORD *)(v25 + 96) = v27;
    }
LABEL_29:
    synthstream_loc_StreamImplRecoverExcessBuffer(v25, 0);
    goto LABEL_6;
  }
  return v8;
}

uint64_t synthstream_WriteCopy(uint64_t a1, int a2, uint64_t a3, int a4, unsigned int a5, unsigned int *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v27;
  char *v28;

  v12 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v12 & 0x80000000) == 0)
  {
    v16 = 2297438215;
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    log_OutText(*(_QWORD *)(v17 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM WriteCopy : Begin (%u, %p, %p, %lu bytes)", v13, v14, v15, *(unsigned __int16 *)(a1 + 4));
    if (a5 && a6)
    {
      if ((*(_DWORD *)a1 - 1) < 2)
      {
        v28 = 0;
        v27 = 0;
        *a6 = 0;
        v16 = synthstream_ReadDirectStart(a3, a4, &v28, &v27);
        if ((v16 & 0x80000000) == 0 && v27)
        {
          if (v27 < a5)
            a5 = v27;
          v25 = synthstream_Write(a1, a2, v28, a5);
          if ((v25 & 0x80000000) != 0)
          {
            v16 = v25;
            a5 = 0;
          }
          else
          {
            v16 = 0;
            *a6 = a5;
          }
          synthstream_ReadDirectEnd(a3, a4, a5);
        }
        goto LABEL_18;
      }
      log_OutPublic(*(_QWORD *)(v17 + 32), (uint64_t)"SYNTHSTREAM", 22008, (uint64_t)"%s%s%s%u%s%s", v18, v19, v20, v21, "function");
    }
    else
    {
      log_OutPublic(*(_QWORD *)(v17 + 32), (uint64_t)"SYNTHSTREAM", 22006, (uint64_t)"%s%s%s%u%s%s%s%u%s%p", v18, v19, v20, v21, "function");
      if (!a6)
        return v16;
    }
    *a6 = 0;
LABEL_18:
    log_OutText(*(_QWORD *)(v17 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM WriteCopy : End (%x, %lu bytes)", v22, v23, v24, v16);
    return v16;
  }
  return v12;
}

uint64_t synthstream_GetPosition(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;

  v8 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v8 & 0x80000000) == 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM GetPosition : Begin (%u, %p)", v5, v6, v7, *(unsigned __int16 *)(a1 + 4));
    if (a3)
    {
      if (*(_DWORD *)a1)
        v14 = (_DWORD *)(*(_QWORD *)(a1 + 8) + 76);
      else
        v14 = (_DWORD *)(a1 + 16);
      *a3 = *v14;
      log_OutText(*(_QWORD *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM GetPosition : End (%x, %lu)", v11, v12, v13, v8);
    }
    else
    {
      log_OutPublic(*(_QWORD *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 22006, (uint64_t)"%s%s%s%u%s%s%s%p", v10, v11, v12, v13, "function");
      return 2297438215;
    }
  }
  return v8;
}

uint64_t synthstream_GetRemaining(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v10 & 0x80000000) == 0)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    log_OutText(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM GetRemaining : Begin (%u, %p)", v7, v8, v9, *(unsigned __int16 *)(a1 + 4));
    if (a3)
    {
      if (!*(_DWORD *)a1)
      {
        v16 = *(_QWORD *)(a1 + 8);
        *a3 = *(_DWORD *)(v16 + 76) - *(_DWORD *)(a1 + 16);
        if (a4)
          *a4 = *(_DWORD *)(v16 + 108);
LABEL_12:
        log_OutText(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM GetRemaining : End (%x, %lu)", v13, v14, v15, v10);
        return v10;
      }
      log_OutPublic(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22009, (uint64_t)"%s%s%s%u%s%s", v12, v13, v14, v15, "function");
      *a3 = 0;
      if (a4)
        goto LABEL_5;
    }
    else
    {
      log_OutPublic(*(_QWORD *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22006, (uint64_t)"%s%s%s%u%s%s%s%p", v12, v13, v14, v15, "function");
      if (a4)
LABEL_5:
        *a4 = 1;
    }
    v10 = 2297438215;
    if (!a3)
      return v10;
    goto LABEL_12;
  }
  return v10;
}

__int128 *synthstream_GetMarkerTIElem()
{
  return &IElemMarkerT;
}

uint64_t synthstream_Reset(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int Str;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int ElemAt;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  const char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v28 = 0;
  v29 = 0;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v4 = synthstream_loc_BeginFunction(a1, a2, &v28, &v29);
  if ((v4 & 0x80000000) != 0)
    return v4;
  log_OutText(*(_QWORD *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM Reset : Begin (%u)", v5, v6, v7, a3);
  Str = paramc_ParamGetStr(*(_QWORD *)(v28 + 40), (uint64_t)"clcpppipelinemode", &v26);
  v9 = ssftmap_IteratorOpen(*(_QWORD *)(v29 + 24), 0, 1, (uint64_t)&v27);
  LODWORD(v13) = v9;
  if (Str < 0)
  {
    if ((v9 & 0x80000000) == 0)
    {
      v23 = 0;
      v24 = 0;
      while ((ssftmap_IteratorNext(v27, &v24, &v23) & 0x80000000) == 0)
      {
        if (*(_WORD *)(v23 + 42) == 1)
        {
          v20 = *(unsigned __int16 *)(v23 + 40);
          if (v20 >= a3)
            v21 = "Clear";
          else
            v21 = "Keep";
          log_OutText(*(_QWORD *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 3, 0, (uint64_t)"%s stream %s %u", v17, v18, v19, (uint64_t)v21);
          if (v20 >= a3)
            ssftmap_IteratorRemove(v27);
        }
        else
        {
          log_OutText(*(_QWORD *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 3, 0, (uint64_t)"%s stream %s %u", v17, v18, v19, (uint64_t)"Keep");
        }
      }
      goto LABEL_21;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    v23 = 0;
    v24 = 0;
    while ((ssftmap_IteratorNext(v27, &v24, &v23) & 0x80000000) == 0)
    {
      v14 = v23;
      *(_QWORD *)(v23 + 84) = 0;
      *(_QWORD *)(v14 + 76) = 0;
      if (vector_GetElemAt(*(_QWORD *)(v14 + 24), 0, &v25) == 1)
      {
        v15 = 1;
        do
        {
          *(_DWORD *)(*(_QWORD *)v25 + 16) = 0;
          ElemAt = vector_GetElemAt(*(_QWORD *)(v23 + 24), v15++, &v25);
        }
        while (ElemAt == 1);
      }
    }
LABEL_21:
    ssftmap_IteratorClose((uint64_t)v27);
  }
  if ((v13 & 0x1FFF) == 0x14)
    v13 = 0;
  else
    v13 = v13;
  log_OutText(*(_QWORD *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM Reset : End (%x)", v10, v11, v12, v13);
  return v13;
}

__int128 *synthstream_GetIntMarkerTIElem()
{
  return &IElemIntMarkerT;
}

uint64_t synthstream_SetRulRes(uint64_t a1, int a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char *v20;
  uint64_t v21;
  int v22;
  int v23;
  char *v24;
  const char *v25;
  size_t v26;
  const char *v27;

  v7 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v7 & 0x80000000) == 0)
  {
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(v8 + 8);
    if (a4)
    {
      v10 = 0;
      v11 = a4;
      v12 = a3;
      do
      {
        v13 = *v12++;
        if ((v13 - 1) < 0x1F)
          ++v10;
        --v11;
      }
      while (v11);
      v14 = 4 * v10;
    }
    else
    {
      v14 = 0;
    }
    v15 = *(_QWORD *)(v8 + 112);
    if (v15)
    {
      heap_Free(*(_QWORD **)(v9 + 8), v15);
      v16 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(v16 + 112) = 0;
      v9 = *(_QWORD *)(v16 + 8);
    }
    v17 = heap_Alloc(*(_QWORD *)(v9 + 8), a4 + v14 + 1);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 112) = v17;
    if (v17)
      v18 = v7;
    else
      v18 = 2297438218;
    if (v17)
      v19 = a4 == 0;
    else
      v19 = 1;
    if (v19)
    {
      return v18;
    }
    else
    {
      v20 = (char *)v17;
      v21 = a4;
      do
      {
        v23 = *a3++;
        v22 = v23;
        if ((v23 - 1) > 0x1E)
        {
          *v20 = v22;
          v26 = 1;
        }
        else
        {
          switch(v22)
          {
            case 7:
              v24 = v20;
              v25 = "\\a";
              goto LABEL_33;
            case 8:
              v24 = v20;
              v25 = "\\b";
              goto LABEL_33;
            case 9:
              v24 = v20;
              v25 = "\\t";
              goto LABEL_33;
            case 10:
              cstdlib_strcpy(v20, "\\n");
              v27 = "\\n";
              goto LABEL_34;
            case 11:
              cstdlib_strcpy(v20, "\\v");
              v27 = "\\v";
              goto LABEL_34;
            case 12:
              cstdlib_strcpy(v20, "\\f");
              v27 = "\\f";
              goto LABEL_34;
            case 13:
              cstdlib_strcpy(v20, "\\r");
              v27 = "\\r";
              goto LABEL_34;
            default:
              v24 = v20;
              if (v22 == 27)
                v25 = "<ESC>";
              else
                v25 = "<SPC>";
LABEL_33:
              cstdlib_strcpy(v24, v25);
              v27 = v25;
LABEL_34:
              v26 = cstdlib_strlen(v27);
              break;
          }
        }
        v20 += v26;
        --v21;
      }
      while (v21);
    }
  }
  return v7;
}

void *synthstream_GetGeeneMarkerTIElem()
{
  return &IElemGeeneWordT;
}

uint64_t synthstream_loc_ElemCopyMapKey(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  v3 = 2297438215;
  if (a1 && a2 && a3)
  {
    v7 = heap_Calloc(a2, 1, 16);
    if (v7)
    {
      v8 = v7;
      *(_WORD *)(v7 + 8) = *(_WORD *)(a1 + 8);
      v3 = ssftmap_ElemCopyString(*(const char **)a1, (uint64_t)a2, (char **)v7);
      if ((v3 & 0x80000000) != 0)
        heap_Free(a2, v8);
      else
        *a3 = v8;
    }
    else
    {
      return 2297438218;
    }
  }
  return v3;
}

uint64_t *synthstream_loc_ElemFreeMapKey(uint64_t *result, _QWORD *a2)
{
  uint64_t v3;

  if (result)
  {
    v3 = (uint64_t)result;
    if (*result)
      heap_Free(a2, *result);
    return heap_Free(a2, v3);
  }
  return result;
}

uint64_t synthstream_loc_ElemCompareKeysMapKey(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  _BOOL4 v10;

  if (a1)
  {
    v4 = *(const char **)a1;
    if (*(_QWORD *)a1)
    {
      if (!a2)
        return 1;
      v5 = *(const char **)a2;
      if (!*(_QWORD *)a2)
        return 1;
LABEL_13:
      result = cstdlib_strcmp(v4, v5);
      if (!(_DWORD)result)
      {
        v7 = *(unsigned __int16 *)(a1 + 8);
        v8 = *(unsigned __int16 *)(a2 + 8);
        v9 = v7 >= v8;
        v10 = v7 > v8;
        if (v9)
          return v10;
        else
          return 0xFFFFFFFFLL;
      }
      return result;
    }
  }
  if (!a2)
    return 0;
  v5 = *(const char **)a2;
  if (*(_QWORD *)a2)
    result = 0xFFFFFFFFLL;
  else
    result = 0;
  if (a1 && v5)
  {
    v4 = *(const char **)a1;
    if (!*(_QWORD *)a1)
      return 0xFFFFFFFFLL;
    goto LABEL_13;
  }
  return result;
}

uint64_t synthstream_loc_ElemCopyStreamImpl(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;

  result = 2297438215;
  if (a1 && a2)
  {
    if (a3)
    {
      result = 0;
      ++*(_WORD *)(a1 + 42);
      *a3 = a1;
    }
  }
  return result;
}

_QWORD *synthstream_loc_ElemReleaseStreamImpl(_QWORD *result)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD **v25;
  char *__s2;
  char v27[256];
  char v28[128];
  char __dst[128];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v1 = (uint64_t)result;
    v2 = *((unsigned __int16 *)result + 21);
    if (v2 < 2)
    {
      v3 = result[1];
      if (*((_BYTE *)result + 74))
      {
        v25 = 0;
        __s2 = 0;
        v4 = (char *)result[4];
        v27[0] = 0;
        cstdlib_strcpy(__dst, v4);
        if (cstdlib_strcmp(v4, "application/synthesis+ssml")
          && cstdlib_strcmp(v4, "text/html")
          && cstdlib_strcmp(v4, "text/email")
          && cstdlib_strcmp(v4, "text/xml"))
        {
          if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 40), (uint64_t)"inputmimetype", &__s2) & 0x80000000) != 0
            || !__s2
            || !*__s2)
          {
            __s2 = cstdlib_strstr(v4, ";charset=");
            if (__s2)
            {
              cstdlib_strcpy(v28, v4);
              v28[__s2 - v4] = 0;
            }
          }
        }
        else if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 40), (uint64_t)"ssmldocumentencoding", &__s2) & 0x80000000) == 0
               && __s2
               && *__s2)
        {
          cstdlib_strcat(__dst, ";charset=");
          cstdlib_strcat(__dst, __s2);
        }
        if ((ssftstring_ObjOpen(*(_QWORD **)(*(_QWORD *)(v1 + 8) + 8), &v25) & 0x80000000) == 0)
        {
          log_OutBinary(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 32), (uint64_t)"SYNTHSTREAM", 0, 0, (uint64_t)"input text", (uint64_t)__dst, *(_QWORD *)(v1 + 96), *(_DWORD *)(v1 + 76), (uint64_t)v25);
          __s2 = (char *)ssftstring_CStr((uint64_t)v25);
          v10 = *(uint64_t ***)(*(_QWORD *)(v1 + 8) + 32);
          if (__s2)
          {
            log_OutEvent(v10, 17, (uint64_t)"%s%s%s%s%s%u", v5, v6, v7, v8, v9, "MIME");
            cstdlib_strcpy(v27, __s2);
          }
          else
          {
            log_OutEvent(v10, 17, (uint64_t)"%s%s%s%u", v5, v6, v7, v8, v9, "MIME");
          }
          ssftstring_ObjClose(v25);
          if (v27[0])
          {
            if (*(_QWORD *)(v1 + 112))
              log_OutEvent(*(uint64_t ***)(*(_QWORD *)(v1 + 8) + 32), 20, (uint64_t)"%s%s%s%s", v11, v12, v13, v14, v15, "TXID");
          }
        }
      }
      v16 = *(_QWORD *)(v1 + 32);
      if (v16)
        heap_Free(*(_QWORD **)(v3 + 8), v16);
      v17 = *(_QWORD *)(v1 + 112);
      if (v17)
      {
        heap_Free(*(_QWORD **)(v3 + 8), v17);
        *(_QWORD *)(v1 + 112) = 0;
      }
      v18 = *(_QWORD *)(v1 + 24);
      if (v18)
        vector_ObjClose(v18);
      v19 = *(_QWORD *)(v1 + 96);
      if (v19)
      {
        if (*(_QWORD *)(v1 + 64))
        {
          v20 = *(_DWORD *)(v1 + 88);
          v21 = *(_DWORD *)(v1 + 84) - v20;
          if (v21 < *(_DWORD *)(v1 + 76) - v20)
          {
            v22 = v19 + v21;
            do
            {
              (*(void (**)(unint64_t, _QWORD))(v1 + 64))(v22, *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8));
              v23 = *(unsigned __int16 *)(v1 + 48);
              v24 = *(_DWORD *)(v1 + 88);
              *(_DWORD *)(v1 + 84) += v23;
              v22 += v23;
              v19 = *(_QWORD *)(v1 + 96);
            }
            while (v22 < v19 + (unint64_t)(*(_DWORD *)(v1 + 76) - v24));
          }
        }
        heap_Free(*(_QWORD **)(v3 + 8), v19);
      }
      return heap_Free(*(_QWORD **)(v3 + 8), v1);
    }
    else
    {
      *((_WORD *)result + 21) = v2 - 1;
    }
  }
  return result;
}

uint64_t synthstream_loc_BeginFunction(uint64_t a1, int a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t result;

  *a4 = 0;
  result = safeh_HandleCheck(a1, a2, 18397, 48);
  if ((result & 0x80000000) == 0)
  {
    result = InitRsrcFunction(*(_WORD **)a1, *(_QWORD *)(a1 + 8), a3);
    if ((result & 0x80000000) == 0)
      *a4 = a1;
  }
  return result;
}

uint64_t synthstream_loc_StreamImplDump(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  char v13[64];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  result = log_GetLogLevel(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32));
  if (result >= 6)
  {
    if (a2 && a3)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
      v11 = *(unsigned __int16 *)(a1 + 44);
      if (*(_BYTE *)(a1 + 73))
      {
        log_OutText(v10, (uint64_t)"SYNTHSTREAM", 6, 0, (uint64_t)"writerID=%u, szContentType=%s, pipelinePos=%u, refCount=%u, writePos=%u, bufPos=%u, eos=%d, writing %u bytes [%.*s]", v7, v8, v9, v11);
        LH_utoa(*(unsigned __int16 *)(a1 + 44), v13, 0xAu);
        return log_OutBinary(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), (uint64_t)"SYNTHSTREAM", 99, 0, (uint64_t)v13, *(_QWORD *)(a1 + 32), a2, a3, 0);
      }
      v12 = "writerID=%u, szContentType=%s, pipelinePos=%u, refCount=%u, writePos=%u, bufPos=%u, eos=%d, writing %u bytes";
    }
    else
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
      v11 = *(unsigned __int16 *)(a1 + 44);
      v12 = "writerID=%u, szContentType=%s, pipelinePos=%u, refCount=%u, writePos=%u, bufPos=%u, eos=%d";
    }
    return log_OutText(v10, (uint64_t)"SYNTHSTREAM", 6, 0, (uint64_t)v12, v7, v8, v9, v11);
  }
  return result;
}

uint64_t synthstream_loc_StreamImplRecoverExcessBuffer(uint64_t result, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v2 = *(_DWORD *)(result + 76);
  v17 = 0;
  if (!*(_QWORD *)(result + 96))
    return result;
  v3 = result;
  if (*(_BYTE *)(result + 72))
    return result;
  result = vector_GetElemAt(*(_QWORD *)(result + 24), 0, &v17);
  if ((_DWORD)result == 1)
  {
    v5 = 1;
    do
    {
      if (*(_DWORD *)(*(_QWORD *)v17 + 16) < v2)
        v2 = *(_DWORD *)(*(_QWORD *)v17 + 16);
      result = vector_GetElemAt(*(_QWORD *)(v3 + 24), v5++, &v17);
    }
    while ((_DWORD)result == 1);
  }
  v6 = *(_DWORD *)(v3 + 88);
  v7 = v2 - v6;
  v8 = *(unsigned __int16 *)(v3 + 48);
  if (v8 >= 2)
    v7 = v7 / v8 * v8;
  if (*(_QWORD *)(v3 + 64))
  {
    if (v7)
    {
      v9 = *(_DWORD *)(v3 + 84) - v6;
      if (v9 < v7)
      {
        v10 = *(_QWORD *)(v3 + 96) + v9;
        do
        {
          result = (*(uint64_t (**)(unint64_t, _QWORD))(v3 + 64))(v10, *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8));
          v11 = *(unsigned __int16 *)(v3 + 48);
          *(_DWORD *)(v3 + 84) += v11;
          v10 += v11;
        }
        while (v10 < *(_QWORD *)(v3 + 96) + (unint64_t)v7);
      }
    }
  }
  if (a2)
  {
    if (v7 >= a2)
      goto LABEL_21;
    v12 = *(_DWORD *)(*(_QWORD *)v3 + 36);
  }
  else
  {
    v12 = *(_DWORD *)(*(_QWORD *)v3 + 40);
  }
  if (v7 < v12)
    return result;
LABEL_21:
  v13 = *(_DWORD *)(v3 + 76);
  if (v13 != v2)
    result = (uint64_t)cstdlib_memmove(*(void **)(v3 + 96), (const void *)(*(_QWORD *)(v3 + 96) + v7), v13 - v2);
  *(_DWORD *)(v3 + 88) += v7;
  if (!a2)
  {
    v14 = *(_DWORD *)(v3 + 104);
    if (v14 == v7)
    {
      v15 = *(_QWORD *)(v3 + 96);
    }
    else
    {
      v15 = *(_QWORD *)(v3 + 96);
      if (v2 != *(_DWORD *)(v3 + 76))
      {
        result = heap_Realloc(*(uint64_t **)(*(_QWORD *)(v3 + 8) + 8), v15, v14 - v7);
        if (!result)
          return result;
        *(_QWORD *)(v3 + 96) = result;
        v16 = *(_DWORD *)(v3 + 104) - v7;
LABEL_28:
        *(_DWORD *)(v3 + 104) = v16;
        return result;
      }
    }
    result = (uint64_t)heap_Free(*(_QWORD **)(*(_QWORD *)(v3 + 8) + 8), v15);
    v16 = 0;
    *(_QWORD *)(v3 + 96) = 0;
    goto LABEL_28;
  }
  return result;
}

uint64_t synthstream_loc_StreamImplGrowBuf(uint64_t a1, int a2, _DWORD *a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;

  if (!a3)
  {
    v6 = *(_DWORD *)(a1 + 76) - *(_DWORD *)(a1 + 88) + a2;
    v7 = *(_DWORD *)(a1 + 104);
    if (v6 > v7)
      goto LABEL_7;
    return 0;
  }
  *a3 = 1;
  v6 = *(_DWORD *)(a1 + 76) - *(_DWORD *)(a1 + 88) + a2;
  v7 = *(_DWORD *)(a1 + 104);
  if (v6 <= v7)
    return 0;
  if (!*(_BYTE *)(a1 + 72))
  {
    result = vector_GetSize(*(_QWORD *)(a1 + 24));
    if (!(_DWORD)result)
    {
      *a3 = 0;
      return result;
    }
    v7 = *(_DWORD *)(a1 + 104);
  }
LABEL_7:
  synthstream_loc_StreamImplRecoverExcessBuffer(a1, v6 - v7);
  v9 = *(_DWORD *)(a1 + 76) - *(_DWORD *)(a1 + 88) + a2;
  if (v9 <= *(_DWORD *)(a1 + 104))
    return 0;
  if (v9 <= *(_DWORD *)(*(_QWORD *)a1 + 32))
    v10 = *(_DWORD *)(*(_QWORD *)a1 + 32);
  else
    v10 = *(_DWORD *)(a1 + 76) - *(_DWORD *)(a1 + 88) + a2;
  v11 = *(_QWORD *)(a1 + 96);
  v12 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 8);
  v13 = (v10 + 1);
  if (v11)
    v14 = heap_Realloc(v12, v11, v13);
  else
    v14 = heap_Calloc(v12, 1, v13);
  v19 = v14;
  if (v14)
  {
    result = 0;
    *(_QWORD *)(a1 + 96) = v19;
    *(_DWORD *)(a1 + 104) = v10;
  }
  else
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), (uint64_t)"SYNTHSTREAM", 22000, 0, v15, v16, v17, v18, v20);
    return 2297438218;
  }
  return result;
}

uint64_t DecoAddr(_QWORD *a1, int a2)
{
  unsigned int *v3;
  uint64_t v4;
  int v5;
  char v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v3 = (unsigned int *)a1[2];
  v4 = *(_QWORD *)v3;
  v5 = *(unsigned __int8 *)(*(_QWORD *)v3 + 19);
  v6 = v5 * a2;
  v7 = (v5 * a2) >> 3;
  v8 = a1[6];
  if (v8)
  {
    a1[1] = v8 + v3[34] + v7;
  }
  else
  {
    v15 = *(unsigned __int16 *)(v4 + 54);
    v16 = *(_DWORD *)(v4 + 68);
    if (v7 + v15 <= v16)
      v17 = v15;
    else
      v17 = v16 - v7;
    v18 = brk_DataMap(a1[3], a1[4], v3[34] + v7, v17, (uint64_t)(a1 + 1));
    if ((v18 & 0x1FFF) == 0xA)
      return 4294967294;
    if (v18)
      return 0xFFFFFFFFLL;
  }
  v9 = (v6 & 7) + v5;
  v10 = (unsigned __int8 *)a1[1];
  v11 = *v10;
  if (v9 < 9)
  {
    v19 = (v11 >> (8 - v9)) & (0xFFFFFFFF >> -(char)v5);
  }
  else
  {
    v12 = ((0xFFu >> (v6 & 7)) & v11) << (v9 - 8);
    if (v9 < 0x11)
    {
      v14 = 16;
      v13 = 1;
    }
    else
    {
      LOBYTE(v13) = 1;
      v14 = 16;
      do
      {
        v12 += v10[v13] << (v9 - v14);
        LOBYTE(v13) = v13 + 1;
        v14 = 8 * v13 + 8;
      }
      while (v9 > (v14 & 0xF8u));
      v13 = v13;
    }
    v19 = (v10[v13] >> (v14 - v9)) + v12;
  }
  if (!a1[6])
    brk_DataUnmap(a1[3], a1[4], (uint64_t)v10);
  return v19;
}

uint64_t WordToHashOpt(uint64_t a1, uint64_t a2, unsigned int a3, __int16 a4, int a5, uint64_t a6)
{
  unsigned int v12;
  unsigned __int16 v13;
  uint64_t v14;
  unsigned __int16 v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t result;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  unsigned __int16 v35;
  unsigned int v36;

  v34 = 0;
  v12 = *(_DWORD *)a6;
  if (*(_DWORD *)a6)
  {
    v13 = 0;
    goto LABEL_3;
  }
  v23 = *(_QWORD **)(a1 + 16);
  v24 = v23[1];
  v25 = *(unsigned __int8 *)(a2 + a3);
  if (a5)
  {
    LODWORD(v25) = depes_tolower(v25);
    v23 = *(_QWORD **)(a1 + 16);
  }
  v26 = *v23;
  v27 = *(unsigned __int8 *)(v24 - *(unsigned __int8 *)(*v23 + 4) + v25);
  v28 = *(unsigned __int16 *)(*v23 + 46);
  if (*(_WORD *)(*v23 + 46))
  {
    v29 = 0;
    v30 = 0;
    while (v27 > *(unsigned __int8 *)(v23[3] + v29))
    {
      v30 += *(_DWORD *)(v23[5] + 4 * v29++);
      if (v28 == v29)
        return 0xFFFFFFFFLL;
    }
    LODWORD(v29) = (unsigned __int16)v29;
  }
  else
  {
    v30 = 0;
    LODWORD(v29) = 0;
  }
  v34 = v30;
  if ((_DWORD)v29 != (_DWORD)v28 && v27 == *(unsigned __int8 *)(v23[3] + v29))
  {
    *(_DWORD *)(a6 + 4) = v30;
    v12 = *(_DWORD *)(v23[4] + 4 * v29);
    if (v12 <= *(unsigned __int8 *)(v26 + 18))
    {
      v32 = *(_DWORD *)(v26 + 56);
      *(_DWORD *)a1 = v32;
      v33 = *(unsigned __int8 *)(v26 + 17);
      *(_BYTE *)(a1 + 4) = v33;
      v12 = v33 + 8 * v32;
    }
    *(_DWORD *)a6 = v12;
    v13 = 1;
LABEL_3:
    v14 = a3;
    v15 = a4 - a3 + 1;
    while (v13 != v15)
    {
      v16 = *(_QWORD **)(a1 + 16);
      v17 = v16[1];
      v18 = *(unsigned __int8 *)(a2 + v14 + v13);
      if (a5)
      {
        v19 = depes_tolower(v18) - (unint64_t)*(unsigned __int8 *)(**(_QWORD **)(a1 + 16) + 4);
        v12 = *(_DWORD *)a6;
      }
      else
      {
        v19 = v18 - *(unsigned __int8 *)(*v16 + 4);
      }
      v20 = *(unsigned __int8 *)(v17 + v19);
      if ((SearchEntry(a1, v12, v20, (unsigned __int16 *)(a6 + 8), &v34, (unsigned int *)a6) & 0x1FFF) == 0xA)
        return 4294967294;
      v12 = *(_DWORD *)a6;
      if (!*(_DWORD *)a6)
      {
        result = 0xFFFFFFFFLL;
        *(_DWORD *)(a6 + 4) = -1;
        return result;
      }
      v21 = *(_DWORD *)(a6 + 4) + v34;
      *(_DWORD *)(a6 + 4) = v21;
      ++v13;
      if (v20 == *(unsigned __int8 *)(**(_QWORD **)(a1 + 16) + 16))
      {
        if (v12 == 1)
          return v21;
        else
          return 0xFFFFFFFFLL;
      }
    }
    v36 = 0;
    v31 = *(unsigned __int8 *)(**(_QWORD **)(a1 + 16) + 16);
    v35 = *(_WORD *)(a6 + 8);
    if ((SearchEntry(a1, v12, v31, &v35, &v34, &v36) & 0x1FFF) == 0xA)
      return 4294967294;
    if (v36 == 1)
      return (v34 + *(_DWORD *)(a6 + 4));
  }
  return 0xFFFFFFFFLL;
}

uint64_t SearchEntry(uint64_t a1, unsigned int a2, unsigned int a3, unsigned __int16 *a4, _DWORD *a5, unsigned int *a6)
{
  unsigned int *v6;
  unsigned int SourceAddress;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  unsigned int v18;
  unsigned __int16 v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int16 v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t result;
  _BOOL4 v31;
  unsigned __int16 v32;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  unsigned int *v46;

  v6 = a6;
  SourceAddress = a2;
  v12 = a2 >> 3;
  v13 = *(_QWORD *)(a1 + 48);
  if (v13)
  {
    v46 = a6;
    v14 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v13 + *(unsigned int *)(v14 + 128) + v12;
  }
  else
  {
    result = brk_DataMap(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_DWORD *)(*(_QWORD *)(a1 + 16) + 128) + v12, *(unsigned __int16 *)(**(_QWORD **)(a1 + 16) + 50), a1 + 8);
    if ((_DWORD)result)
    {
      SourceAddress = 0;
      goto LABEL_72;
    }
    v46 = v6;
    v14 = *(_QWORD *)(a1 + 16);
  }
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = SourceAddress & 7;
  *a5 = 0;
  v15 = *(_QWORD *)(v14 + 88);
  v16 = *(unsigned __int16 *)(v15
                            + 2
                            * HuffDecode((unsigned int *)a1, *(_QWORD *)(v14 + 48), *(unsigned __int16 *)(*(_QWORD *)v14 + 26)));
  v17 = *(uint64_t **)(a1 + 16);
  v18 = *(unsigned __int16 *)(*v17 + 24);
  v19 = v16 - v18;
  if (v16 > v18)
  {
    v20 = 0;
    do
    {
      v21 = *(uint64_t **)(a1 + 16);
      v22 = v21[12];
      v23 = HuffDecode((unsigned int *)a1, v21[7], *(unsigned __int16 *)(*v21 + 28));
      ++v20;
      v24 = *a4;
    }
    while (v24 >= (unsigned __int16)v20);
    if (*(unsigned __int8 *)(v22 + v23) == a3)
    {
      *a5 = 0;
      v25 = v24 + 1;
      *a4 = v25;
      if (v25 < v19)
      {
        v26 = *(_QWORD *)(a1 + 48);
        goto LABEL_44;
      }
      *a4 = 0;
      if (*(unsigned __int8 *)(**(_QWORD **)(a1 + 16) + 16) == a3)
      {
LABEL_43:
        v26 = *(_QWORD *)(a1 + 48);
        SourceAddress = 1;
LABEL_44:
        v6 = v46;
        if (!v26)
          goto LABEL_70;
LABEL_71:
        result = 0;
        goto LABEL_72;
      }
      v43 = DecodeSourceLink(a1);
      v6 = v46;
      if (!v43)
      {
        SourceAddress = GetSourceAddress((unsigned int *)a1);
        goto LABEL_69;
      }
      SourceAddress = v43;
      v44 = **(_QWORD **)(a1 + 16);
      if (v43 > *(unsigned __int8 *)(v44 + 18))
        goto LABEL_69;
      v40 = *(unsigned __int8 *)(a1 + 4);
      v45 = *(unsigned __int8 *)(v44 + 15);
      if ((v45 & v40) != 0)
      {
        do
          ++v40;
        while ((v45 & v40) != 0);
        *(_BYTE *)(a1 + 4) = v40;
      }
LABEL_59:
      v42 = *(_DWORD *)a1;
      if (v40 == 8)
      {
        LOBYTE(v40) = 0;
        *(_BYTE *)(a1 + 4) = 0;
        *(_DWORD *)a1 = ++v42;
      }
      SourceAddress = 8 * (v42 + v12) + v40;
LABEL_69:
      if (*(_QWORD *)(a1 + 48))
        goto LABEL_71;
LABEL_70:
      brk_DataUnmap(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 8));
      goto LABEL_71;
    }
    goto LABEL_39;
  }
  v27 = v17[12];
  v28 = *(unsigned __int8 *)(v27 + HuffDecode((unsigned int *)a1, v17[7], *(unsigned __int16 *)(*v17 + 28)));
  if (v28 == *(unsigned __int8 *)(**(_QWORD **)(a1 + 16) + 16))
  {
    SourceAddress = 0;
    if (v28 == a3)
      goto LABEL_19;
    v29 = 1;
    goto LABEL_18;
  }
  SourceAddress = DecodeSourceLink(a1);
  if (!SourceAddress)
    SourceAddress = GetSourceAddress((unsigned int *)a1);
  if (v28 != a3)
  {
    v29 = DecodeSourceHash(a1);
LABEL_18:
    *a5 += v29;
  }
LABEL_19:
  v31 = v16 > 1;
  v32 = 1;
  if (v28 < a3 && v16 >= 2)
  {
    do
    {
      v34 = *(uint64_t **)(a1 + 16);
      v35 = v34[13];
      LOBYTE(v28) = *(_BYTE *)(v35
                             + HuffDecode((unsigned int *)a1, v34[8], *(unsigned __int16 *)(*v34 + 30)))
                  + v28;
      if (*(unsigned __int8 *)(**(_QWORD **)(a1 + 16) + 16) == v28)
      {
        if (a3 == v28)
          goto LABEL_32;
        v36 = 1;
      }
      else
      {
        SourceAddress = DecodeSourceLink(a1);
        if (!SourceAddress)
          SourceAddress = GetSourceAddress((unsigned int *)a1);
        if (a3 == v28)
          goto LABEL_32;
        v36 = DecodeSourceHash(a1);
      }
      *a5 += v36;
LABEL_32:
      v31 = v16 > ++v32;
    }
    while (a3 > v28 && v16 > v32);
  }
  if (a3 != v28)
  {
LABEL_39:
    SourceAddress = 0;
    result = 0;
    v6 = v46;
    if (!*(_QWORD *)(a1 + 48))
      goto LABEL_70;
    goto LABEL_72;
  }
  v37 = **(_QWORD **)(a1 + 16);
  if (*(unsigned __int8 *)(v37 + 16) == a3)
    goto LABEL_43;
  if (SourceAddress <= *(unsigned __int8 *)(v37 + 18))
  {
    if (v31)
      DecodeSourceHash(a1);
    while (v16 > v32)
    {
      v38 = *(uint64_t **)(a1 + 16);
      v39 = v38[13];
      LOBYTE(a3) = *(_BYTE *)(v39
                            + HuffDecode((unsigned int *)a1, v38[8], *(unsigned __int16 *)(*v38 + 30)))
                 + a3;
      if (*(unsigned __int8 *)(**(_QWORD **)(a1 + 16) + 16) != a3)
      {
        if (!DecodeSourceLink(a1))
          GetSourceAddress((unsigned int *)a1);
        if (v32 < (unsigned __int16)(v16 - 1))
          DecodeSourceHash(a1);
      }
      ++v32;
    }
    v40 = *(unsigned __int8 *)(a1 + 4);
    v41 = *(unsigned __int8 *)(**(_QWORD **)(a1 + 16) + 15);
    if ((v41 & v40) != 0)
    {
      do
        ++v40;
      while ((v41 & v40) != 0);
      *(_BYTE *)(a1 + 4) = v40;
    }
    v6 = v46;
    goto LABEL_59;
  }
  if (!*(_QWORD *)(a1 + 48))
  {
    v6 = v46;
    goto LABEL_70;
  }
  result = 0;
  v6 = v46;
LABEL_72:
  *v6 = SourceAddress;
  return result;
}

uint64_t open_DctRom(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  _DWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v11;

  v11 = 0;
  v5 = (_DWORD *)a1[6];
  if (v5)
  {
    v11 = (_DWORD *)a1[6];
  }
  else
  {
    v8 = brk_DataOpenEx(a1[3], a2, 1, (uint64_t)(a1 + 4));
    if ((_DWORD)v8)
    {
      v6 = v8;
      a1[4] = 0;
      return v6;
    }
    v9 = brk_DataMap(a1[3], a1[4], 0, 40, (uint64_t)&v11);
    if ((_DWORD)v9)
    {
      v6 = v9;
      brk_DataClose(a1[3], a1[4]);
      a1[4] = 0;
      return v6;
    }
    v5 = v11;
  }
  v6 = 2306875417;
  if (*v5 == 65279
    && !LH_strnicmp((uint64_t)(v5 + 1), (uint64_t)"SCANSOFT", 8uLL)
    && !LH_strnicmp((uint64_t)(v11 + 3), (uint64_t)"SYS_DCT", 7uLL))
  {
    v7 = v11[5];
    if (!a1[6])
      brk_DataUnmap(a1[3], a1[4], (uint64_t)v11);
    v6 = 0;
    *a3 = v7 - 40;
  }
  return v6;
}

uint64_t close_DctRom(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    brk_DataClose(*(_QWORD *)(a1 + 24), v1);
  return 0;
}

uint64_t query_DctRom(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  unsigned int v6;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v14;

  v6 = a3;
  v14 = 0;
  *a5 = 0;
  v9 = brk_DataMap(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), 40, a3, (uint64_t)&v14);
  if ((_DWORD)v9)
  {
    v10 = v9;
    brk_DataClose(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
    *(_QWORD *)(a1 + 32) = 0;
  }
  else
  {
    if (v6)
    {
      v11 = 0;
      while (LH_stricmp((char *)(v14 + v11), a2))
      {
        v12 = cstdlib_strlen((const char *)(v14 + v11));
        v11 += v12 + ((~(_BYTE)v12 - (_BYTE)v11) & 3) + 5;
        if (v11 >= v6)
          goto LABEL_9;
      }
      *a5 = 1;
    }
LABEL_9:
    brk_DataUnmap(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v14);
    return 0;
  }
  return v10;
}

uint64_t init_DctRom(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char *v35;

  v5 = a3;
  v35 = 0;
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
  {
    v35 = (char *)(v8 + 40);
  }
  else
  {
    v14 = brk_DataMap(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), 40, a3, (uint64_t)&v35);
    if ((_DWORD)v14)
    {
LABEL_10:
      v13 = v14;
      brk_DataClose(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
      *(_QWORD *)(a1 + 32) = 0;
      return v13;
    }
  }
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = LH_stricmp(&v35[v9], a2);
      v11 = cstdlib_strlen(&v35[v9]);
      v12 = (~(_BYTE)v11 - (_BYTE)v9) & 3;
      if (!v10)
        break;
      v9 += v12 + v11 + 5;
      if (v9 >= v5)
        goto LABEL_7;
    }
    v15 = *(unsigned int *)&v35[(v11 + v9 + v12 + 1) & 0xFFFFFFFC];
    v16 = *(_QWORD *)(a1 + 48);
    if (v16
      || (brk_DataUnmap(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)v35), (v16 = *(_QWORD *)(a1 + 48)) != 0))
    {
      if (v15 > *(_DWORD *)(a1 + 56))
        return 2306875412;
      LODWORD(v17) = *(_DWORD *)(v16 + v15);
      goto LABEL_16;
    }
    v14 = brk_DataMap(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v15, 4, (uint64_t)&v35);
    if (!(_DWORD)v14)
    {
      v16 = *(_QWORD *)(a1 + 48);
      v17 = *(unsigned int *)v35;
      if (!v16)
      {
        brk_DataUnmap(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)v35);
        v13 = brk_DataMap(*(_QWORD *)(a1 + 24), a4, v15, v17, *(_QWORD *)(a1 + 16));
        if ((_DWORD)v13)
          return v13;
        v19 = *(uint64_t **)(a1 + 16);
        v18 = *v19;
        goto LABEL_17;
      }
LABEL_16:
      v18 = v16 + v15;
      v19 = *(uint64_t **)(a1 + 16);
      *v19 = v18;
LABEL_17:
      v13 = 0;
      v20 = v18 + 72 + ((*(unsigned __int8 *)(v18 + 5) - *(unsigned __int8 *)(v18 + 4) + 4) & 0xFFFFFFFC);
      v19[1] = v18 + 72;
      v19[2] = v20;
      v21 = v20 + ((2 * (*(unsigned __int8 *)(v18 + 7) - *(unsigned __int8 *)(v18 + 6)) + 5) & 0xFFFFFFFC);
      LODWORD(v20) = *(unsigned __int16 *)(v18 + 46);
      v22 = v21 + (((_DWORD)v20 + 3) & 0x1FFFC);
      v19[3] = v21;
      v19[4] = v22;
      v23 = v22 + 4 * v20;
      v24 = v23 + 4 * v20;
      v19[5] = v23;
      v19[6] = v24;
      v25 = v24 + 4 * *(unsigned __int16 *)(v18 + 26) + 4;
      v26 = v25 + 4 * *(unsigned __int16 *)(v18 + 28) + 4;
      v19[7] = v25;
      v19[8] = v26;
      v27 = v26 + 4 * *(unsigned __int16 *)(v18 + 30) + 4;
      v28 = v27 + 4 * *(unsigned __int16 *)(v18 + 32) + 4;
      v19[9] = v27;
      v19[10] = v28;
      v29 = v28 + 4 * *(unsigned __int16 *)(v18 + 34) + 4;
      v30 = v29 + ((2 * *(unsigned __int16 *)(v18 + 36) + 3) & 0x3FFFC);
      v19[11] = v29;
      v19[12] = v30;
      v31 = v30 + ((*(unsigned __int16 *)(v18 + 38) + 3) & 0x1FFFC);
      v32 = v31 + ((*(unsigned __int16 *)(v18 + 40) + 3) & 0x1FFFC);
      v19[13] = v31;
      v19[14] = v32;
      v19[15] = v32 + ((2 * *(unsigned __int16 *)(v18 + 42) + 3) & 0x3FFFC);
      LODWORD(v32) = *(_DWORD *)(v18 + 60);
      v33 = *(_DWORD *)(v18 + 64);
      LODWORD(v32) = ((v32 + 3) & 0xFFFFFFFC) + v17 + v15;
      *((_DWORD *)v19 + 32) = v17 + v15;
      *((_DWORD *)v19 + 33) = v32;
      *((_DWORD *)v19 + 34) = ((v33 + 3) & 0xFFFFFFFC) + v32;
      return v13;
    }
    goto LABEL_10;
  }
LABEL_7:
  v13 = 2306875412;
  if (!*(_QWORD *)(a1 + 48))
    brk_DataUnmap(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)v35);
  return v13;
}

uint64_t exit_DctRom(uint64_t a1, uint64_t a2)
{
  if (a2)
    brk_DataUnmap(*(_QWORD *)(a1 + 24), a2, **(_QWORD **)(a1 + 16));
  return 0;
}

uint64_t GetMaxOutLen(uint64_t a1)
{
  return *(unsigned __int16 *)(**(_QWORD **)(a1 + 16) + 48);
}

uint64_t GetFieldSeparator(uint64_t a1)
{
  return *(unsigned __int8 *)(**(_QWORD **)(a1 + 16) + 9);
}

uint64_t set_DctBrk(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

BOOL test_DCT(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;

  if (a3 > a4)
    return a4 >= a3;
  LOWORD(v10) = a3;
  while (1)
  {
    v11 = *(unsigned __int8 *)(a2 + (__int16)v10);
    if (a5)
      LODWORD(v11) = depes_tolower(v11);
    v12 = **(_QWORD **)(a1 + 16);
    if (v11 < *(unsigned __int8 *)(v12 + 4) || v11 > *(unsigned __int8 *)(v12 + 5))
      break;
    v10 = (__int16)(v10 + 1);
    if (v10 > a4)
      return a4 >= a3;
  }
  return 0;
}

uint64_t DctLookup(uint64_t a1, uint64_t a2, unsigned __int16 *a3, __int16 *a4, int a5, _WORD *a6, uint64_t a7)
{
  int v14;
  unsigned int v15;
  uint64_t result;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned __int8 *v23;
  unsigned __int8 **v24;
  unsigned __int8 *v25;
  unsigned __int8 v26;
  __int16 v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned __int8 *v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned __int8 v40;
  uint64_t v42;
  int v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _OWORD v54[3];
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  memset(v54, 0, 41);
  if ((unsigned __int16)(*a4 - *a3) > 0x7FFEu
    || *(__int16 *)(**(_QWORD **)(a1 + 16) + 22) <= (__int16)(*a4 - *a3)
    || !test_DCT(a1, a2, (__int16)*a3, *a4, a5))
  {
    return 20;
  }
  v14 = WordToHashOpt(a1, a2, *a3, *a4, a5, a7);
  if (v14 == -2)
    return 10;
  if (v14 < 0)
    return 20;
  v15 = DecoAddr((_QWORD *)a1, v14);
  if (v15 == -2)
    return 10;
  if ((v15 & 0x80000000) != 0)
    return 20;
  v17 = *(_QWORD *)(a1 + 48);
  if (v17)
  {
    v18 = (_BYTE *)(v17 + *(unsigned int *)(*(_QWORD *)(a1 + 16) + 132) + v15);
    *(_QWORD *)(a1 + 8) = v18;
  }
  else
  {
    result = brk_DataMap(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_DWORD *)(*(_QWORD *)(a1 + 16) + 132) + v15, *(unsigned __int16 *)(**(_QWORD **)(a1 + 16) + 52), a1 + 8);
    if ((_DWORD)result)
      return result;
    v18 = *(_BYTE **)(a1 + 8);
  }
  v19 = 0;
  LOWORD(v20) = 0;
  v21 = 0;
  LOBYTE(v22) = *v18;
  v23 = *(unsigned __int8 **)(a1 + 40);
  do
  {
    v23[(__int16)v21++] = v22;
    v24 = *(unsigned __int8 ***)(a1 + 16);
    v23 = *(unsigned __int8 **)(a1 + 40);
    v25 = *v24;
    do
    {
      v20 = (__int16)v20;
      v26 = v24[2][2 * (v23[(__int16)v20] - (unint64_t)v25[6])];
      if (v26)
      {
        v27 = v21 - 1;
        do
        {
          if ((int)v20 < (__int16)(v21 - 1))
          {
            v28 = v27;
            do
            {
              *(_BYTE *)(*(_QWORD *)(a1 + 40) + v28 + 1) = *(_BYTE *)(*(_QWORD *)(a1 + 40) + v28);
              --v28;
            }
            while (v28 > v20);
            v24 = *(unsigned __int8 ***)(a1 + 16);
            v23 = *(unsigned __int8 **)(a1 + 40);
            v25 = *v24;
          }
          ++v21;
          v23[v20 + 1] = v24[2][2 * (v23[v20] - (unint64_t)v25[6]) + 1];
          *(_BYTE *)(*(_QWORD *)(a1 + 40) + v20) = v26;
          v24 = *(unsigned __int8 ***)(a1 + 16);
          v23 = *(unsigned __int8 **)(a1 + 40);
          v25 = *v24;
          v26 = v24[2][2 * (v23[v20] - (unint64_t)(*v24)[6])];
          ++v27;
        }
        while (v26);
      }
      LODWORD(v20) = (__int16)(v20 + 1);
    }
    while ((int)v20 < (__int16)v21);
    ++v19;
    v22 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v19);
    v29 = v25[10];
  }
  while (v22 != v25[8] && (v22 < v29 || v22 > v25[11]));
  v30 = *v23;
  if (v30 >= v29)
  {
    do
    {
      v31 = v30;
      v32 = v25[11];
      if (v30 > v32)
        break;
      v33 = *(_QWORD *)(a1 + 8);
      v34 = v25[8];
      v35 = *(unsigned __int8 *)(v33 + (int)v19);
      if (v35 == v34)
      {
LABEL_34:
        v38 = 1;
      }
      else
      {
        v36 = (unsigned __int8 *)(v33 + (int)v19 + 1);
        while (v35 < v29 || v32 < v35)
        {
          LODWORD(v19) = v19 + 1;
          v37 = *v36++;
          LOBYTE(v35) = v37;
          if (v37 == v34)
            goto LABEL_34;
        }
        v38 = 0;
        LOBYTE(v34) = v35;
      }
      LODWORD(v19) = v19 + v38;
      v39 = v29;
      v40 = v29 - 1;
      if (v34 <= v32 && v34 >= v39)
        v40 = v34;
      if (v40 >= v30)
      {
        LODWORD(v19) = v19 + 1;
      }
      else
      {
        LOWORD(v42) = 0;
        v43 = 0;
        v44 = v24[2];
        v45 = v25[6];
        v19 = (int)v19;
        do
        {
          v46 = (__int16)v43++;
          *((_BYTE *)v54 + v46) = *(_BYTE *)(v33 + v19);
          do
          {
            v42 = (__int16)v42;
            v47 = *((unsigned __int8 *)v54 + (__int16)v42);
            if (v44[2 * (v47 - v45)])
            {
              v48 = v43 - 1;
              do
              {
                if ((int)v42 < (__int16)(v43 - 1))
                {
                  v49 = v48;
                  do
                  {
                    *((_BYTE *)v54 + v49 + 1) = *((_BYTE *)v54 + v49);
                    --v49;
                  }
                  while (v49 > v42);
                  v47 = *((unsigned __int8 *)v54 + v42);
                }
                v50 = &v44[2 * (v47 - v45)];
                *((_BYTE *)v54 + v42 + 1) = v50[1];
                v47 = *v50;
                *((_BYTE *)v54 + v42) = v47;
                ++v43;
                ++v48;
              }
              while (v44[2 * (v47 - v45)]);
            }
            LODWORD(v42) = (__int16)(v42 + 1);
            LOBYTE(v30) = v30 - 1;
          }
          while ((int)v42 < (__int16)v43 && v30 >= v40);
          ++v19;
        }
        while (v30 >= v40);
        v30 = v31 - v40;
        if ((__int16)v21 >= 2)
        {
          v51 = (unsigned __int16)v21 - 1;
          v52 = (__int16)(v21 + v31 - v40) - 1;
          do
            *(_BYTE *)(*(_QWORD *)(a1 + 40) + v52--) = *(_BYTE *)(*(_QWORD *)(a1 + 40) + v51--);
          while (v51);
        }
        if ((v30 & 0x80000000) == 0)
        {
          v53 = 0;
          do
          {
            *(_BYTE *)(*(_QWORD *)(a1 + 40) + (__int16)v53) = *((_BYTE *)v54 + (__int16)v53);
            ++v53;
          }
          while ((int)v30 >= (__int16)v53);
        }
        LOWORD(v21) = v21 + v30;
        LOBYTE(v30) = v40;
      }
      v24 = *(unsigned __int8 ***)(a1 + 16);
      v25 = *v24;
      v29 = (*v24)[10];
    }
    while (v29 <= v30);
  }
  if (!*(_QWORD *)(a1 + 48))
    brk_DataUnmap(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 8));
  result = 0;
  *a6 = v21;
  return result;
}

uint64_t HuffDecode(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned int v7;

  v3 = (__int16 *)(a2 + 4 * a3);
  if (*v3 != -1)
  {
    v4 = *((_QWORD *)a1 + 1);
    a3 = a3;
    v5 = *a1;
    v6 = *(_BYTE *)(v4 + v5);
    v7 = *((unsigned __int8 *)a1 + 4);
    do
    {
      if (!v7)
        v6 = *(_BYTE *)(v4 + v5);
      if (((1 << v7) & v6) == 0)
        v3 = (__int16 *)(a2 + 4 * a3 + 2);
      a3 = (unsigned __int16)*v3;
      if (v7 > 6)
      {
        v7 = 0;
        LODWORD(v5) = v5 + 1;
        *a1 = v5;
      }
      else
      {
        ++v7;
      }
      *((_BYTE *)a1 + 4) = v7;
      v3 = (__int16 *)(a2 + 4 * a3);
    }
    while (*v3 != -1);
  }
  return a3;
}

uint64_t DecodeSourceLink(uint64_t a1)
{
  uint64_t *v2;
  unsigned int v3;
  int v4;
  int v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t result;
  uint64_t v13;

  v2 = *(uint64_t **)(a1 + 16);
  v3 = *(unsigned __int8 *)(*v2 + 12);
  v4 = HuffDecode((unsigned int *)a1, v2[10], *(unsigned __int16 *)(*v2 + 34));
  v5 = (v4 * v3) & 0xF;
  v6 = 16 - v5;
  v7 = *(uint64_t **)(a1 + 16);
  v8 = v7[15];
  v9 = (unsigned __int16)((v4 * v3) >> 4);
  v10 = *(unsigned __int16 *)(v8 + 2 * (unsigned __int16)((v4 * v3) >> 4)) >> ((v4 * v3) & 0xF);
  if (16 - v5 >= v3)
  {
    result = v10 & (0xFFFFu >> (16 - v3));
  }
  else
  {
    v11 = *(unsigned __int16 *)(v8 + 2 * (v9 + 1));
    if (32 - v5 >= v3)
      result = (((0xFFFFu >> (-(char)v3 - v5)) & v11) << v6) + v10;
    else
      result = (v11 << v6)
             + v10
             + (((0xFFFFu >> (48 - v3 - v5)) & *(unsigned __int16 *)(v8 + 2 * (v9 + 2))) << (32 - v5));
  }
  v13 = *v7;
  if (result > *(unsigned __int8 *)(v13 + 18))
    return ((_DWORD)result << *(_BYTE *)(v13 + 14));
  return result;
}

uint64_t GetSourceAddress(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;
  unsigned int v12;
  unsigned int v13;

  v1 = *((_QWORD *)a1 + 1);
  v2 = **((_QWORD **)a1 + 2);
  v3 = *(unsigned __int8 *)(v2 + 12);
  v4 = *((unsigned __int8 *)a1 + 4);
  v5 = v4 + v3;
  v6 = *a1;
  v7 = *(unsigned __int8 *)(v1 + v6) >> v4;
  if ((v4 + v3) < 9)
  {
    v12 = v7 & (0xFFu >> (8 - v3));
  }
  else
  {
    if (v5 < 0x11)
    {
      v11 = 16;
      LOBYTE(v9) = 8;
      v8 = 1;
    }
    else
    {
      v8 = 1;
      LOBYTE(v9) = 8;
      v10 = 1;
      do
      {
        v7 += *(unsigned __int8 *)(v1 + (v8 + v6)) << (v9 - v4);
        v8 = ++v10;
        v9 = 8 * v10;
        v11 = 8 * v10 + 8;
      }
      while (v5 > v9 + 8);
    }
    v12 = (((0xFFu >> (v11 - v5)) & *(unsigned __int8 *)(v1 + (v8 + v6))) << (v9 - v4)) + v7;
  }
  v13 = v4 + v3;
  *a1 = v6 + ((v13 >> 3) & 7);
  *((_BYTE *)a1 + 4) = v13 & 7;
  return v12 << *(_BYTE *)(v2 + 14);
}

uint64_t DecodeSourceHash(uint64_t a1)
{
  uint64_t *v2;
  unsigned int v3;
  unsigned int v4;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  v2 = *(uint64_t **)(a1 + 16);
  v3 = *(unsigned __int8 *)(*v2 + 13);
  v4 = HuffDecode((unsigned int *)a1, v2[9], *(unsigned __int16 *)(*v2 + 32));
  if (v3 <= 0x10)
    return *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 112) + 2 * v4);
  v6 = (v4 * v3) & 0xF;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 112);
  v8 = (unsigned __int16)((v4 * v3) >> 4);
  v9 = *(unsigned __int16 *)(v7 + 2 * (unsigned __int16)((v4 * v3) >> 4)) >> ((v4 * v3) & 0xF);
  v10 = *(unsigned __int16 *)(v7 + 2 * (v8 + 1));
  if (32 - v6 >= v3)
    return (((0xFFFFu >> (-(char)v3 - v6)) & v10) << (16 - v6)) + v9;
  else
    return (v10 << (16 - v6))
         + v9
         + (((0xFFFFu >> (48 - v3 - v6)) & *(unsigned __int16 *)(v7 + 2 * (v8 + 2))) << (32 - v6));
}

uint64_t nuance_pcre_copy_substring(uint64_t a1, uint64_t a2, int a3, int a4, void *__dst, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = 4294967289;
  if ((a4 & 0x80000000) == 0 && a4 < a3)
  {
    v7 = *(int *)(a2 + 4 * ((2 * a4) | 1u));
    v8 = *(int *)(a2 + 4 * (2 * a4));
    v6 = v7 - v8;
    if ((int)v7 - (int)v8 >= a6)
    {
      return 4294967290;
    }
    else
    {
      cstdlib_memcpy(__dst, (const void *)(a1 + v8), v7 - v8);
      *((_BYTE *)__dst + v6) = 0;
    }
  }
  return v6;
}

uint64_t nuance_pcre_info(uint64_t a1, int *a2, int *a3)
{
  int v5;
  int v6;
  _OWORD v8[3];

  if (!a1)
    return 4294967294;
  memset(v8, 0, sizeof(v8));
  if (*(_DWORD *)a1 != 1346589253)
  {
    a1 = try_flipped((__int128 *)a1, (uint64_t)v8, 0, 0);
    if (!a1)
      return 4294967292;
  }
  if (a2)
    *a2 = *(_DWORD *)(a1 + 8) & 0x7A7F;
  if (a3)
  {
    v5 = *(_DWORD *)(a1 + 8);
    if ((v5 & 0x40000000) != 0)
    {
      v6 = *(unsigned __int16 *)(a1 + 20);
    }
    else if ((v5 & 0x10000000) != 0)
    {
      v6 = -1;
    }
    else
    {
      v6 = -2;
    }
    *a3 = v6;
  }
  return *(unsigned __int16 *)(a1 + 16);
}

uint64_t try_flipped(__int128 *a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*(_DWORD *)a1 != 1163019088)
    return 0;
  v4 = *a1;
  v5 = a1[2];
  *(_OWORD *)(a2 + 16) = a1[1];
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v4;
  *(int8x8_t *)(a2 + 4) = vrev32_s8(*(int8x8_t *)((char *)a1 + 4));
  *(int8x8_t *)(a2 + 16) = vrev16_s8((int8x8_t)a1[1]);
  *(_WORD *)(a2 + 24) = bswap32(*((unsigned __int16 *)a1 + 12)) >> 16;
  *(_WORD *)(a2 + 26) = bswap32(*((unsigned __int16 *)a1 + 13)) >> 16;
  *(_WORD *)(a2 + 28) = bswap32(*((unsigned __int16 *)a1 + 14)) >> 16;
  if (a3)
  {
    v6 = *a3;
    v7 = a3[1];
    *(_QWORD *)(a4 + 32) = *((_QWORD *)a3 + 4);
    *(_OWORD *)a4 = v6;
    *(_OWORD *)(a4 + 16) = v7;
    *(int8x8_t *)a4 = vrev32_s8(*(int8x8_t *)a3);
  }
  return a2;
}

uint64_t nuance_pcre_fullinfo(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  _OWORD v14[3];
  _OWORD v15[2];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  result = 4294967294;
  if (a1 && a4)
  {
    if (a2 && (*(_BYTE *)a2 & 1) != 0)
      v9 = *(__int128 **)(a2 + 8);
    else
      v9 = 0;
    memset(v14, 0, sizeof(v14));
    memset(v15, 0, sizeof(v15));
    v16 = 0;
    if (*(_DWORD *)a1 != 1346589253)
    {
      v10 = try_flipped((__int128 *)a1, (uint64_t)v14, v9, (uint64_t)v15);
      if (!v10)
        return 4294967292;
      a1 = v10;
      if (v9)
        v9 = v15;
      else
        v9 = 0;
    }
    switch(a3)
    {
      case 0:
        result = 0;
        v11 = *(_DWORD *)(a1 + 8) & 0x7A7FLL;
        goto LABEL_36;
      case 1:
        result = 0;
        v11 = *(unsigned int *)(a1 + 4);
        goto LABEL_36;
      case 2:
        result = 0;
        v12 = *(unsigned __int16 *)(a1 + 16);
        goto LABEL_40;
      case 3:
        result = 0;
        v12 = *(unsigned __int16 *)(a1 + 18);
        goto LABEL_40;
      case 4:
        v13 = *(_DWORD *)(a1 + 8);
        if ((v13 & 0x40000000) != 0)
        {
          v12 = *(unsigned __int16 *)(a1 + 20);
        }
        else if ((v13 & 0x10000000) != 0)
        {
          v12 = -1;
        }
        else
        {
          v12 = -2;
        }
        goto LABEL_39;
      case 5:
        if (!v9 || (*((_BYTE *)v9 + 4) & 1) == 0)
          goto LABEL_34;
        v11 = *(_QWORD *)(a2 + 8) + 8;
        goto LABEL_35;
      case 6:
        if ((*(_BYTE *)(a1 + 11) & 0x20) != 0)
          v12 = *(unsigned __int16 *)(a1 + 22);
        else
          v12 = -1;
LABEL_39:
        result = 0;
        goto LABEL_40;
      case 7:
        result = 0;
        v12 = *(unsigned __int16 *)(a1 + 26);
        goto LABEL_40;
      case 8:
        result = 0;
        v12 = *(unsigned __int16 *)(a1 + 28);
LABEL_40:
        *a4 = v12;
        return result;
      case 9:
        result = 0;
        v11 = a1 + *(unsigned __int16 *)(a1 + 24);
        goto LABEL_36;
      case 10:
        if (v9)
          v11 = *(unsigned int *)v9;
        else
LABEL_34:
          v11 = 0;
LABEL_35:
        result = 0;
        goto LABEL_36;
      case 11:
        result = 0;
        v11 = (uint64_t)&pcre_default_tables;
LABEL_36:
        *(_QWORD *)a4 = v11;
        break;
      default:
        result = 4294967293;
        break;
    }
  }
  return result;
}

uint64_t nuance_pcre_config(unsigned int a1, _DWORD *a2)
{
  uint64_t result;

  if (a1 > 6)
    return 4294967293;
  result = 0;
  *a2 = dword_214F74D38[a1];
  return result;
}

uint64_t nuance_pcre_compile(uint64_t a1, int a2, char *a3, uint64_t a4, const char **a5, _DWORD *a6, char *a7)
{
  int valid;
  uint64_t v14;
  const char *v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned __int8 v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t i;
  uint64_t v43;
  int v44;
  unsigned __int8 *v45;
  int v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  char *v58;
  int v59;
  BOOL v60;
  int v61;
  int v62;
  unsigned __int8 *v63;
  int v64;
  int v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  int v69;
  char v70;
  int v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  int v79;
  char v80;
  BOOL v81;
  _BOOL4 v82;
  int v84;
  int v85;
  unsigned __int8 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v93;
  int v94;
  unsigned __int8 *v95;
  unsigned int v96;
  uint64_t v97;
  int v98;
  unsigned __int8 *repeat_counts_0;
  int v100;
  unsigned int v101;
  int v102;
  const char *v103;
  int v104;
  int v105;
  int v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  BOOL v109;
  int *v110;
  int v111;
  unsigned __int8 v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  uint64_t v115;
  unsigned __int8 *v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  unsigned __int8 *v122;
  int v123;
  int v124;
  int v125;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  BOOL v128;
  const char *v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  const char *v133;
  char v134;
  char v135;
  int v136;
  unsigned __int8 *v137;
  int v138;
  int v139;
  int v141;
  unsigned __int8 *v142;
  int v143;
  char v144;
  int v146;
  unsigned __int8 *v147;
  int v148;
  int v149;
  int v150;
  int v151;
  uint64_t v152;
  int v153;
  unsigned int v154;
  uint64_t v155;
  char *v156;
  _BYTE *v157;
  int v158;
  _BYTE *v159;
  const char *v160;
  int v161;
  int v162;
  int firstassertedchar;
  __int16 v164;
  __int16 v165;
  int v166;
  char *v167;
  int v168;
  int v169;
  int v170;
  int v171;
  unsigned int v172;
  unsigned int v173;
  int v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  char *v178;
  int v179;
  int v180;
  int v181;
  int v182;
  uint64_t v183;
  unsigned __int8 *v184;
  int v185;
  unsigned int v186;
  int v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  unsigned __int8 *v198;
  _BYTE *v199;
  int v200;
  _QWORD v201[128];

  v201[126] = *MEMORY[0x24BDAC8D0];
  v201[0] = 0;
  v200 = 0;
  v199 = 0;
  if ((safeh_HandleCheck(a1, a2, 56663, 32) & 0x80000000) != 0 || !a5)
    return 0;
  *a5 = 0;
  if (!a6)
  {
    v14 = 0;
    v15 = "erroffset passed as NULL";
    goto LABEL_11;
  }
  *a6 = 0;
  if ((a4 & 0x2800) == 0x800)
  {
    valid = valid_utf8(a3, -1);
    *a6 = valid;
    if ((valid & 0x80000000) == 0)
    {
      v14 = 0;
      v15 = "invalid UTF-8 string";
LABEL_11:
      *a5 = v15;
      return v14;
    }
  }
  if ((a4 & 0xFFFF8580) != 0)
  {
    v14 = 0;
    v15 = "unknown option bit(s) set";
    goto LABEL_11;
  }
  v183 = 0;
  v182 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v196 = 0u;
  v197 = 0u;
  v195 = 0u;
  if (a7)
    v20 = a7;
  else
    v20 = (char *)&pcre_default_tables;
  v191 = v20;
  v192 = v20 + 256;
  v178 = v20;
  v184 = (unsigned __int8 *)a3;
  v193 = v20 + 512;
  v194 = v20 + 832;
  *(_QWORD *)&v197 = 0;
  v198 = (unsigned __int8 *)(a3 - 1);
  v21 = a4;
  v22 = 3;
  v23 = -1;
  while (1)
  {
    v24 = v198;
    v25 = v198 + 1;
    v26 = *++v198;
    if (!(_DWORD)v26)
    {
LABEL_395:
      if ((v21 & 0x4000) != 0)
        v150 = 10;
      else
        v150 = 4;
      v151 = v150 + v22;
      if (v150 + v22 > 0x10000)
      {
        v14 = 0;
        v15 = "regular expression too large";
        goto LABEL_11;
      }
      v152 = v21;
      v153 = v17 + 3;
      v154 = v151 + (v17 + 3) * v182 + 48;
      v155 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, v154);
      v14 = v155;
      if (!v155)
      {
        v15 = "failed to get memory";
        goto LABEL_11;
      }
      *(_DWORD *)v155 = 1346589253;
      *(_DWORD *)(v155 + 4) = v154;
      *(_WORD *)(v155 + 30) = 0;
      *(_DWORD *)(v155 + 8) = v152;
      *(_DWORD *)(v155 + 12) = 0;
      *(_WORD *)(v155 + 24) = 48;
      *(_WORD *)(v155 + 26) = v153;
      *(_WORD *)(v155 + 28) = v182;
      if (v178 == (char *)&pcre_default_tables)
        v156 = 0;
      else
        v156 = v178;
      *(_QWORD *)(v155 + 32) = v156;
      *(_QWORD *)(v155 + 40) = 0;
      DWORD2(v196) = 0;
      HIDWORD(v196) = v153;
      *(_QWORD *)&v196 = v155 + 48;
      v157 = (_BYTE *)(v155 + 48 + (unsigned __int16)v153 * (unint64_t)(unsigned __int16)v182);
      *(_QWORD *)&v195 = v157;
      *((_QWORD *)&v195 + 1) = v184;
      *((_QWORD *)&v197 + 1) = 0;
      v198 = v184;
      v199 = v157;
      *v157 = 80;
      v200 = 0;
      compile_regex_0(v152, v152 & 7, &v200, (unint64_t *)&v199, &v198, a5, 0, 0, (int *)v201 + 1, (int *)v201, 0, (uint64_t)&v191);
      *(_WORD *)(v14 + 16) = v200;
      v158 = HIDWORD(v197);
      *(_WORD *)(v14 + 18) = v197;
      if (v158)
        *(_DWORD *)(v14 + 8) |= 0x4000000u;
      if (!*a5 && *v198)
        *a5 = "unmatched parentheses";
      v159 = v199;
      *v199 = 0;
      if (v159 - v157 + 1 > v151)
        *a5 = "internal error: code overflow";
      if (*(unsigned __int16 *)(v14 + 18) > *(unsigned __int16 *)(v14 + 16))
      {
        *a5 = "reference to non-existent subpattern";
LABEL_415:
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v14);
        goto LABEL_418;
      }
      if (*a5)
        goto LABEL_415;
      if ((v152 & 0x10) == 0)
      {
        v189 = v152;
        v161 = DWORD1(v197);
        if (is_anchored_0(v14 + 48 + (unsigned __int16)v153 * (unint64_t)(unsigned __int16)v182, &v189, 0, SDWORD1(v197)))
        {
          v162 = 16;
        }
        else
        {
          LOWORD(firstassertedchar) = WORD2(v201[0]);
          if ((v201[0] & 0x8000000000000000) != 0
            && (firstassertedchar = find_firstassertedchar(v14 + 48 + (unsigned __int16)v153 * (unint64_t)(unsigned __int16)v182, &v189, 0), firstassertedchar < 0))
          {
            if (!is_startline_0(v14 + 48 + (unsigned __int16)v153 * (unint64_t)(unsigned __int16)v182, 0, v161))goto LABEL_429;
            v162 = 0x10000000;
          }
          else
          {
            if ((firstassertedchar & 0x100) == 0
              || (v164 = firstassertedchar,
                  v192[firstassertedchar] != firstassertedchar))
            {
              v164 = firstassertedchar;
            }
            *(_WORD *)(v14 + 20) = v164;
            v162 = 0x40000000;
          }
        }
        *(_DWORD *)(v14 + 8) |= v162;
      }
LABEL_429:
      v165 = v201[0];
      if ((v201[0] & 0x80000000) == 0)
      {
        v166 = *(_DWORD *)(v14 + 8);
        if ((v201[0] & 0x200) != 0 || (v166 & 0x10) == 0)
        {
          if ((v201[0] & 0x100) != 0 && v192[LOBYTE(v201[0])] == LOBYTE(v201[0]))
            v165 = v201[0] & 0xFEFF;
          *(_WORD *)(v14 + 22) = v165;
          *(_DWORD *)(v14 + 8) = v166 | 0x20000000;
        }
      }
      return v14;
    }
    v190 = 0;
    if (v19)
    {
      if ((v21 & 0x4000) != 0)
        v22 += 6;
      if ((_DWORD)v26 != 92)
        goto LABEL_63;
      v28 = v24[2];
      v27 = v24 + 2;
      if (v28 == 69)
      {
        v19 = 0;
        v198 = v27;
        goto LABEL_77;
      }
      v22 += 2;
LABEL_74:
      v41 = 2;
      v18 = 1;
      goto LABEL_78;
    }
    if ((v21 & 8) != 0)
    {
      if ((v194[v26] & 1) != 0)
        goto LABEL_72;
      if ((_DWORD)v26 == 35)
      {
        while (1)
        {
          v37 = *++v25;
          v36 = v37;
          if (v37 == 10)
            break;
          if (!v36)
            goto LABEL_395;
        }
        v19 = 0;
        goto LABEL_76;
      }
    }
    ++v23;
    v186 = v21;
    if ((v21 & 0x4000) != 0 && (v26 - 42) >= 2 && (_DWORD)v26 != 63)
    {
      if ((_DWORD)v26 == 123)
      {
        v176 = v17;
        v179 = v23;
        v29 = v18;
        v30 = is_counted_repeat(v24 + 2);
        v18 = v29;
        v23 = v179;
        v17 = v176;
        v21 = v186;
        if (v30)
          goto LABEL_85;
      }
      v22 += 6;
    }
    if ((int)v26 <= 62)
    {
      switch((int)v26)
      {
        case '$':
        case '.':
          goto LABEL_73;
        case '(':
          if (v24[2] == 63)
          {
            HIDWORD(v188) = 0;
            v189 = 0;
            v25 = v24 + 3;
            v31 = v24[3];
            switch(v31)
            {
              case '!':
              case ':':
              case '=':
              case '>':
                v54 = 0;
                v198 = v24 + 3;
                goto LABEL_257;
              case '#':
                v113 = v24 + 4;
                while (2)
                {
                  if (!*v113)
                  {
                    v198 = v113;
                    v129 = "missing) after comment";
                    goto LABEL_362;
                  }
                  if (*v113 != 41)
                  {
                    ++v113;
                    continue;
                  }
                  break;
                }
                v198 = v113;
                v41 = 2;
                goto LABEL_381;
              case '(':
                v114 = v24 + 4;
                v115 = v24[4];
                if ((_DWORD)v115 == 82)
                {
                  v117 = v24[5];
                  v116 = v24 + 5;
                  if (v117 == 41)
                  {
                    v54 = 0;
                    v198 = v116;
                    v22 += 3;
                    goto LABEL_257;
                  }
LABEL_350:
                  v198 = v114;
                  v129 = "assertion expected after (?(";
                  goto LABEL_362;
                }
                if ((digitab[v115] & 4) == 0)
                {
                  v198 = v24 + 2;
                  if ((_DWORD)v115 == 63)
                  {
                    v130 = v24[5];
                    if (v130 <= 0x3D && ((1 << v130) & 0x3000000200000000) != 0)
                    {
                      v54 = 0;
                      goto LABEL_257;
                    }
                  }
                  goto LABEL_350;
                }
                v137 = v24 + 4;
                do
                {
                  v139 = *++v137;
                  v138 = v139;
                }
                while ((digitab[v139] & 4) != 0);
                v22 += 3;
                v198 = v137;
                if (v138 == 41)
                {
LABEL_360:
                  v54 = 0;
                  v21 = v186;
                  goto LABEL_257;
                }
                v133 = "malformed number after (?(";
LABEL_380:
                *a5 = v133;
                v41 = 8;
                v21 = v186;
                goto LABEL_381;
              case '0':
              case '1':
              case '2':
              case '3':
              case '4':
              case '5':
              case '6':
              case '7':
              case '8':
              case '9':
                do
                {
                  v33 = *++v25;
                  v32 = v33;
                }
                while ((digitab[v33] & 4) != 0);
                goto LABEL_36;
              case '<':
                v119 = v24[4];
                v118 = v119;
                v198 = v24 + 4;
                if (v119 == 61 || v118 == 33)
                {
                  v22 += 3;
                  v54 = 3;
                  goto LABEL_257;
                }
                v129 = "unrecognized character after (?<";
                goto LABEL_362;
              case 'C':
                do
                {
                  v121 = *++v25;
                  v120 = v121;
                }
                while ((digitab[v121] & 4) != 0);
                v198 = v25;
                if (v120 == 41)
                {
                  v22 += 6;
                  goto LABEL_311;
                }
                v103 = "closing) for (?C expected";
                goto LABEL_255;
              case 'P':
                v122 = v24 + 4;
                v123 = v24[4];
                v198 = v24 + 4;
                if ((v123 - 61) < 2)
                {
                  do
                  {
                    v125 = *++v122;
                    v124 = v125;
                  }
                  while ((v194[v125] & 0x10) != 0);
                  v198 = v122;
                  if (v124 != 41)
                  {
LABEL_351:
                    v133 = "syntax error after (?P";
                    goto LABEL_380;
                  }
                  goto LABEL_360;
                }
                if (v123 != 60)
                {
                  v129 = "unrecognized character after (?P";
                  goto LABEL_362;
                }
                v131 = -1;
                do
                  v132 = v24[v131++ + 6];
                while ((v194[v132] & 0x10) != 0);
                v198 = &v24[v131 + 5];
                if ((_DWORD)v132 != 62)
                  goto LABEL_351;
                v54 = 0;
                ++v182;
                if (v131 <= (int)v17)
                  v17 = v17;
                else
                  v17 = v131;
                v21 = v186;
                goto LABEL_257;
              case 'R':
                v32 = v24[4];
                v25 = v24 + 4;
LABEL_36:
                v198 = v25;
                if (v32 != 41)
                {
                  v103 = "(?R or (?digits must be followed by)";
LABEL_255:
                  *a5 = v103;
                  v41 = 8;
                  goto LABEL_381;
                }
                v34 = v25[1];
                if ((v34 - 42) >= 2 && v34 != 63 && v34 != 123)
                {
                  v22 += 3;
LABEL_311:
                  v41 = 2;
                  goto LABEL_381;
                }
                v22 += 9;
                v35 = 11;
LABEL_221:
                v95 = v25 + 1;
                v96 = v25[1];
                if (v96 > 0x3E)
                {
                  if (v96 == 63)
                  {
                    v100 = 1;
                    v190 = 1;
                    v198 = v25 + 1;
                    ++v22;
                    ++v25;
LABEL_245:
                    v22 += (v100 - 1) * (v35 + 7);
                    goto LABEL_70;
                  }
                  if (v96 != 123)
                    goto LABEL_239;
                  v97 = v17;
                  v181 = v23;
                  v173 = v18;
                  v98 = is_counted_repeat(v25 + 2);
                  v18 = v173;
                  v23 = v181;
                  v17 = v97;
                  v21 = v186;
                  if (!v98)
                  {
LABEL_239:
                    v190 = 0x100000001;
                    goto LABEL_70;
                  }
                  repeat_counts_0 = read_repeat_counts_0(v25 + 2, (int *)&v190 + 1, (int *)&v190, a5);
                  v198 = repeat_counts_0;
                  if (*a5)
                    goto LABEL_418;
                  v25 = repeat_counts_0;
                  v100 = v190;
                  if (HIDWORD(v190))
                  {
                    if ((int)v190 > SHIDWORD(v190))
                      v22 = v22 + (HIDWORD(v190) - 1) * v35 + (v190 - HIDWORD(v190)) * (v35 + 7) - 6;
                    else
                      v22 += (HIDWORD(v190) - 1) * v35;
                    v21 = v186;
                    v17 = v97;
                    v23 = v181;
                    v18 = v173;
                  }
                  else
                  {
                    ++v22;
                    v21 = v186;
                    v17 = v97;
                    v23 = v181;
                    v18 = v173;
                    if ((int)v190 >= 1)
                      goto LABEL_245;
                  }
                }
                else
                {
                  if (v96 == 42)
                  {
                    v190 = 0xFFFFFFFFLL;
                    ++v22;
                  }
                  else
                  {
                    if (v96 != 43)
                      goto LABEL_239;
                    v190 = 0x1FFFFFFFFLL;
                  }
                  ++v25;
                  v198 = v95;
                }
                goto LABEL_70;
              default:
                v189 = 0;
                v110 = &v189;
                while (2)
                {
                  if (v31 > 0x68u)
                  {
                    if (v31 > 0x72u)
                    {
                      if (v31 == 115)
                      {
                        v111 = 4;
                        goto LABEL_296;
                      }
                      if (v31 == 120)
                      {
                        v111 = 8;
                        goto LABEL_296;
                      }
                    }
                    else
                    {
                      if (v31 == 105)
                      {
                        v111 = 1;
                        goto LABEL_296;
                      }
                      if (v31 == 109)
                      {
                        v111 = 2;
LABEL_296:
                        *v110 |= v111;
                        goto LABEL_297;
                      }
                    }
LABEL_356:
                    v198 = v25;
                    v129 = "unrecognized character after (?";
LABEL_362:
                    *a5 = v129;
                    v41 = 8;
                    goto LABEL_381;
                  }
                  if (v31 > 0x54u)
                  {
                    if (v31 == 85)
                    {
                      v111 = 512;
                      goto LABEL_296;
                    }
                    if (v31 == 88)
                    {
                      v111 = 64;
                      goto LABEL_296;
                    }
                    goto LABEL_356;
                  }
                  if (v31 == 45)
                  {
                    v110 = (int *)&v188 + 1;
LABEL_297:
                    v112 = *++v25;
                    v31 = v112;
                    continue;
                  }
                  break;
                }
                if (v31 == 41)
                {
                  v198 = v25;
                  v134 = BYTE4(v188);
                  v135 = v189;
                  if (v23)
                  {
                    v136 = v23;
                  }
                  else
                  {
                    v186 = (v189 | v186) & ~HIDWORD(v188);
                    HIDWORD(v188) = 0;
                    v189 = 0;
                    v136 = -1;
                    v134 = 0;
                    v135 = 0;
                  }
                  v144 = v134 | v135;
                  if ((v144 & 7) != 0)
                  {
                    v22 += 4;
                    v186 |= (v144 & 1) << 27;
                    if ((_DWORD)v183 == 3 || !(_DWORD)v183)
                      LODWORD(v183) = v183 + 2;
                  }
                  v41 = 2;
                  v21 = v186;
                  v23 = v136;
LABEL_381:
                  v19 = 0;
                  goto LABEL_78;
                }
                if (v31 != 58)
                  goto LABEL_356;
                v198 = v25;
                if (((BYTE4(v188) | v189) & 7) != 0)
                  v21 = (((BYTE4(v188) | v189) & 1) << 27) | v21;
                else
                  v21 = v21;
                if (((BYTE4(v188) | v189) & 7) != 0)
                {
                  v22 += 4;
                  v54 = 2;
                }
                else
                {
                  v54 = 0;
                }
LABEL_257:
                v101 = HIDWORD(v183);
                v56 = 3;
                break;
            }
          }
          else
          {
            v54 = 0;
            if ((v21 & 0x1000) != 0)
            {
              v56 = 3;
            }
            else
            {
              v55 = v200++;
              if (v55 <= 99)
                v56 = 3;
              else
                v56 = 6;
            }
            v101 = HIDWORD(v183);
          }
          if (v101 > 0xC7)
          {
            v160 = "parentheses nested too deeply";
            goto LABEL_417;
          }
          v19 = 0;
          *((_BYTE *)&v201[1] + v101) = v183;
          *((_DWORD *)&v201[26] + v101) = v22;
          v22 += v56;
          v41 = 2;
          LODWORD(v183) = v54;
          HIDWORD(v183) = v101 + 1;
          break;
        case ')':
          v22 += 3;
          if (HIDWORD(v183))
          {
            v35 = v22 - *((_DWORD *)&v201[26] + (HIDWORD(v183) - 1));
            LODWORD(v183) = *((unsigned __int8 *)&v201[1] + --HIDWORD(v183));
          }
          else
          {
            HIDWORD(v183) = 0;
            v35 = 0;
          }
          goto LABEL_221;
        case '*':
        case '+':
          goto LABEL_69;
        default:
          goto LABEL_63;
      }
      goto LABEL_78;
    }
    if ((int)v26 > 93)
    {
      if ((_DWORD)v26 != 94)
      {
        if ((_DWORD)v26 != 123)
        {
          if ((_DWORD)v26 == 124)
          {
            v19 = 0;
            v22 += v183 + 3;
            goto LABEL_77;
          }
LABEL_63:
          v22 += 2;
          v41 = 2;
          v18 = 1;
          if ((a4 & 0x800) == 0 || v26 < 0xC0)
            goto LABEL_78;
          if ((v24[2] & 0xC0) == 0x80)
          {
            v43 = 0;
            do
              v44 = v24[v43++ + 3] & 0xC0;
            while (v44 == 128);
            v25 = &v24[v43 + 1];
            v18 = (v43 + 1);
            v22 += v43;
          }
LABEL_76:
          v198 = v25;
          goto LABEL_77;
        }
        v29 = v18;
        v179 = v23;
        v176 = v17;
LABEL_85:
        if (!is_counted_repeat(v24 + 2))
        {
          v19 = 0;
          v22 += 2;
          v41 = 2;
          v18 = 1;
          v21 = v186;
          v17 = v176;
          v23 = v179;
          goto LABEL_78;
        }
        v50 = read_repeat_counts_0(v24 + 2, (int *)&v190 + 1, (int *)&v190, a5);
        v198 = v50;
        if (*a5)
          goto LABEL_418;
        v25 = v50;
        if (HIDWORD(v190))
        {
          v51 = v190;
          v21 = v186;
          v18 = v29;
          if (v190 != 0x1FFFFFFFFLL)
          {
            if (SHIDWORD(v190) <= 0)
              v52 = -(int)v29;
            else
              v52 = 3;
            if (HIDWORD(v190) == 1)
              v53 = 0;
            else
              v53 = v52;
LABEL_249:
            v81 = v51 < 1;
            v102 = v22 + v18 + v53;
            if (v81)
              v22 = v102 + 1;
            else
              v22 = v102 + 3;
LABEL_252:
            v17 = v176;
            v23 = v179;
            if (v50[1] == 63)
            {
              v198 = v50 + 1;
              v25 = v50 + 1;
            }
LABEL_70:
            v46 = v25[1];
            v45 = v25 + 1;
            if (v46 == 43)
            {
              v19 = 0;
              v198 = v45;
              v22 += 6;
            }
            else
            {
LABEL_72:
              v19 = 0;
            }
LABEL_77:
            v41 = 2;
            goto LABEL_78;
          }
        }
        else
        {
          v51 = v190;
          v21 = v186;
          v18 = v29;
          if ((_DWORD)v190 != -1 && (_DWORD)v190 != 1)
          {
            v53 = -(int)v29;
            goto LABEL_249;
          }
        }
        ++v22;
        goto LABEL_252;
      }
LABEL_73:
      v19 = 0;
      ++v22;
      goto LABEL_74;
    }
    if ((_DWORD)v26 == 63)
    {
LABEL_69:
      ++v22;
      goto LABEL_70;
    }
    if ((_DWORD)v26 == 91)
      break;
    if ((_DWORD)v26 != 92)
      goto LABEL_63;
    v38 = v23;
    v39 = v17;
    v40 = check_escape(&v198, a5, v200, v21, 0);
    if (*a5)
      goto LABEL_418;
    if ((v40 & 0x80000000) != 0)
    {
      if (v40 + 14 < 2)
      {
        if ((get_ucp_0(&v198, &v189, a5) & 0x80000000) != 0)
          goto LABEL_418;
        v19 = 0;
        v22 += 2;
        v18 = 2;
        v41 = 2;
LABEL_237:
        v21 = v186;
LABEL_238:
        v17 = v39;
        v23 = v38;
        goto LABEL_78;
      }
      v21 = v186;
      v17 = v39;
      v23 = v38;
      if (v40 == -19)
      {
        v41 = 2;
        v18 = 1;
        v19 = 1;
        goto LABEL_78;
      }
      v18 = 1;
      if (v40 <= 0xFFFFFFEC)
      {
        v104 = -20 - v40;
        v105 = 1 << (-20 - v40);
        if (v40 <= 0xFFFFFFCC)
          v105 = 1;
        v106 = DWORD1(v197) | v105;
        if (v104 <= (int)v197)
          v104 = v197;
        *(_QWORD *)&v197 = __PAIR64__(v106, v104);
        if (v198[1] != 123)
        {
          v19 = 0;
          v41 = 2;
          v22 += 3;
          v17 = v39;
          goto LABEL_78;
        }
        v107 = v198 + 2;
        if (is_counted_repeat(v198 + 2))
        {
          v108 = read_repeat_counts_0(v107, (int *)&v190 + 1, (int *)&v190, a5);
          v198 = v108;
          if (*a5)
            goto LABEL_418;
          if (HIDWORD(v190))
            v109 = HIDWORD(v190) == 1 && (_DWORD)v190 == -1;
          else
            v109 = (((_DWORD)v190 + 1) & 0xFFFFFFFD) == 0;
          if (v109)
            v141 = 4;
          else
            v141 = 8;
          v22 += v141;
          v143 = v108[1];
          v142 = v108 + 1;
          v19 = 0;
          if (v143 == 63)
            v198 = v142;
          v41 = 2;
          v18 = 1;
        }
        else
        {
          v19 = 0;
          v41 = 2;
          v18 = 1;
          v22 += 3;
        }
        goto LABEL_237;
      }
      v19 = 0;
      ++v22;
      goto LABEL_77;
    }
    v19 = 0;
    v22 += 2;
    v41 = 2;
    v18 = 1;
    v21 = v186;
    if ((a4 & 0x800) == 0)
      goto LABEL_238;
    v17 = v39;
    v23 = v38;
    if (v40 >= 0x80)
    {
      for (i = 0; i != 6; ++i)
      {
        if ((signed int)v40 <= utf8_table1[i])
          break;
      }
      v19 = 0;
      v22 += i;
      v18 = (i + 1);
      goto LABEL_77;
    }
LABEL_78:
    if (v41 != 2)
      goto LABEL_418;
  }
  v47 = v24 + 2;
  v48 = v24[2];
  v198 = v24 + 2;
  if (v48 == 94)
  {
    v48 = v24[3];
    v198 = v24 + 3;
    v49 = 10;
    v47 = v24 + 3;
  }
  else
  {
    v49 = 0;
  }
  if (!v48)
  {
LABEL_416:
    v160 = "missing terminating ] for character class";
    goto LABEL_417;
  }
  v174 = v49;
  v177 = v17;
  v57 = 0;
  v58 = v194;
  v185 = v200;
  v168 = v21 & 1;
  if ((v21 & 1) != 0)
    v59 = 127;
  else
    v59 = 255;
  v169 = v59;
  v170 = 0;
  v60 = 1;
  v180 = v23;
  v172 = v18;
  while (1)
  {
    v61 = v57;
    while (1)
    {
      if (!v60)
      {
        v23 = v180;
        v18 = v172;
        if (v48 == 92 && v47[1] == 69)
        {
          v61 = 0;
          v198 = v47 + 1;
          goto LABEL_191;
        }
LABEL_126:
        if ((a4 & 0x800) != 0)
        {
          if ((~v48 & 0xC0) != 0)
          {
            LODWORD(v66) = 0;
          }
          else
          {
            v66 = utf8_table4[v48 & 0x3F];
            v48 = (utf8_table3[v66] & v48) << (6 * v66);
            v67 = (char *)(v47 + 1);
            if (v66 <= 1)
              v68 = 1;
            else
              v68 = v66;
            v69 = 6 * v66 - 6;
            do
            {
              v70 = *v67++;
              v48 |= (v70 & 0x3F) << v69;
              v69 -= 6;
              --v68;
            }
            while (v68);
          }
          v198 = &v47[v66];
        }
        goto LABEL_143;
      }
      if (v48 != 92)
      {
        v23 = v180;
        v18 = v172;
        if (v48 == 91)
        {
          v63 = v47 + 2;
          if (v47[2] == 94)
            v63 = v47 + 3;
          do
          {
            v65 = *v63++;
            v64 = v65;
          }
          while ((v58[v65] & 2) != 0);
          if (v64 == v47[1] && *v63 == 93)
          {
            v61 = 0;
            v198 = v63;
            goto LABEL_190;
          }
        }
        goto LABEL_126;
      }
      v62 = check_escape(&v198, a5, v185, v21, 1);
      if (*a5)
        goto LABEL_418;
      v48 = v62;
      if (v62 != -19)
        break;
      v60 = 0;
      v47 = v198 + 1;
      v48 = *++v198;
      v61 = 1;
      v21 = v186;
      if (!v48)
        goto LABEL_416;
    }
    v21 = v186;
    if (v62 == -15)
    {
      v48 = 88;
LABEL_135:
      v23 = v180;
      v18 = v172;
    }
    else
    {
      if (v62 == -4)
      {
        v48 = 8;
        goto LABEL_135;
      }
      v23 = v180;
      v18 = v172;
      if (v62 < 0)
      {
        if ((v62 & 0xFFFFFFFE) == 0xFFFFFFF2)
        {
          v61 = 0;
          v71 = v22 + 4;
          if (v170)
            v71 = v22;
          v22 = v71 + 2;
LABEL_189:
          v174 = 10;
          v170 = 1;
          goto LABEL_191;
        }
        v61 = 0;
LABEL_190:
        v174 = 10;
        goto LABEL_191;
      }
    }
LABEL_143:
    v72 = v198;
    if (v198[1] != 45)
      goto LABEL_183;
    v73 = v198 + 2;
    v74 = v198[2];
    if (v198[2])
    {
      if ((_DWORD)v74 != 93)
        break;
    }
LABEL_182:
    v198 = v72;
LABEL_183:
    ++v174;
    if ((a4 & 0x800) != 0 && v48 > v169)
    {
      if (v170)
        v84 = v22;
      else
        v84 = v22 + 4;
      v85 = ord2utf8(v48, (uint64_t)&v189);
      v18 = v172;
      v23 = v180;
      v21 = v186;
      v22 = ((v85 + 1) << v168) + v84;
      goto LABEL_189;
    }
LABEL_191:
    v86 = v198;
    v47 = v198 + 1;
    v48 = *++v198;
    if (!v48)
      goto LABEL_416;
    v60 = v61 == 0;
    v57 = 1;
    if (!v61)
    {
      v57 = 0;
      if (v48 == 93)
      {
        if (v174 == 1)
        {
          v19 = 0;
          v22 += 3;
          v41 = 2;
          v17 = v177;
        }
        else
        {
          if (v86[2] == 123 && (v126 = v86 + 3, is_counted_repeat(v86 + 3)))
          {
            v127 = read_repeat_counts_0(v126, (int *)&v190 + 1, (int *)&v190, a5);
            v198 = v127;
            if (*a5)
              goto LABEL_418;
            if (HIDWORD(v190))
              v128 = HIDWORD(v190) == 1 && (_DWORD)v190 == -1;
            else
              v128 = (((_DWORD)v190 + 1) & 0xFFFFFFFD) == 0;
            if (v128)
              v146 = 34;
            else
              v146 = 38;
            v22 += v146;
            v149 = v127[1];
            v147 = v127 + 1;
            v148 = v149;
            if (v149 == 63)
            {
              v19 = 0;
              v198 = v147;
            }
            else
            {
              v19 = 0;
              if (v148 == 43)
              {
                v198 = v147;
                v22 += 6;
              }
            }
            v41 = 2;
          }
          else
          {
            v19 = 0;
            v41 = 2;
            v22 += 33;
          }
          v21 = v186;
          v17 = v177;
          v23 = v180;
          v18 = v172;
        }
        goto LABEL_78;
      }
    }
  }
  if ((_DWORD)v74 != 92)
  {
    v198 += 2;
    if ((a4 & 0x800) == 0)
    {
      if (v48 <= (int)v74)
        goto LABEL_190;
      goto LABEL_437;
    }
    if ((~(_DWORD)v74 & 0xC0) != 0)
    {
      LODWORD(v76) = 0;
    }
    else
    {
      v76 = utf8_table4[v74 & 0x3F];
      LODWORD(v74) = (utf8_table3[v76] & v74) << (6 * v76);
      v77 = (char *)(v72 + 3);
      if (v76 <= 1)
        v78 = 1;
      else
        v78 = v76;
      v79 = 6 * v76 - 6;
      do
      {
        v80 = *v77++;
        v74 = ((v80 & 0x3F) << v79) | v74;
        v79 -= 6;
        --v78;
      }
      while (v78);
    }
    v198 = &v73[v76];
LABEL_165:
    if ((v74 & 0x80000000) == 0)
      goto LABEL_166;
    goto LABEL_182;
  }
  v198 += 2;
  v75 = check_escape(&v198, a5, v185, v21, 1);
  if (*a5)
    goto LABEL_418;
  v74 = v75;
  if ((_DWORD)v75 == -15)
  {
    v74 = 88;
    v21 = v186;
    v23 = v180;
    v18 = v172;
    goto LABEL_166;
  }
  v21 = v186;
  v23 = v180;
  v18 = v172;
  if ((_DWORD)v75 != -4)
    goto LABEL_165;
  v74 = 8;
LABEL_166:
  if ((int)v74 >= v48)
  {
    if ((a4 & 0x800) != 0)
    {
      v81 = v168 && v74 > 0x7F;
      v82 = v81;
      if (v74 > 0xFF || v82)
      {
        if (!v170)
          v22 += 4;
        if (v168)
        {
          v188 = 0;
          v87 = v74;
          v187 = v48;
          v167 = v58;
LABEL_196:
          v175 = v22;
LABEL_197:
          v88 = v87;
LABEL_198:
          v87 = v88;
          while (1)
          {
            v89 = v87;
            if (!get_othercase_range(&v187, v74, (_DWORD *)&v188 + 1, &v188))
              break;
            v88 = v188;
            v90 = HIDWORD(v188);
            v87 = v89;
            if (SHIDWORD(v188) < v48 || (int)v188 > (int)v89)
            {
              if (SHIDWORD(v188) < v48 && (int)v188 >= v48 - 1)
              {
                v48 = HIDWORD(v188);
                goto LABEL_197;
              }
              if ((int)v188 <= (int)v89 || SHIDWORD(v188) > (int)v89 + 1)
              {
                v171 = ord2utf8(SHIDWORD(v188), (uint64_t)&v189);
                if (v90 == (_DWORD)v88)
                  v93 = 0;
                else
                  v93 = ord2utf8(v88, (uint64_t)&v189);
                v22 = v175 + v171 + v93 + 1;
                v87 = v89;
                goto LABEL_196;
              }
              goto LABEL_198;
            }
          }
          v22 = v175;
          LODWORD(v74) = v89;
          v58 = v167;
        }
        v94 = ord2utf8(v48, (uint64_t)&v189);
        v22 += v94 + ord2utf8(v74, (uint64_t)&v189) + 1;
        v174 = 10;
        v170 = 1;
        v21 = v186;
        v23 = v180;
        v18 = v172;
        goto LABEL_191;
      }
    }
    goto LABEL_190;
  }
LABEL_437:
  v160 = "range out of order in character class";
LABEL_417:
  *a5 = v160;
LABEL_418:
  v14 = 0;
  *a6 = (_DWORD)v198 - (_DWORD)v184;
  return v14;
}

uint64_t valid_utf8(char *a1, int a2)
{
  char *v2;
  int v3;
  char *v4;
  int v5;
  unsigned __int8 *v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  char v10;

  if (a2 < 0)
  {
    a2 = -1;
    v2 = a1;
    do
    {
      v3 = *v2++;
      ++a2;
    }
    while (v3);
  }
  if (a2 >= 1)
  {
    v4 = a1;
    do
    {
      v5 = a2 - 1;
      if (*v4 < 0)
      {
        v7 = *v4;
        if ((~v7 & 0xC0) != 0)
          return ((_DWORD)v4 - (_DWORD)a1);
        v8 = utf8_table4[*v4 & 0x3F];
        if (a2 <= v8)
          return ((_DWORD)v4 - (_DWORD)a1);
        v6 = (unsigned __int8 *)(v4 + 1);
        if ((v4[1] & 0xC0) != 0x80)
          return ((_DWORD)v6 - (_DWORD)a1);
        v5 -= v8;
        switch(*v4 & 0x3F)
        {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
            if ((v7 & 0x3E) == 0)
              return ((_DWORD)v6 - (_DWORD)a1);
            goto LABEL_8;
          case 0x20:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
          case 0x2A:
          case 0x2B:
          case 0x2C:
          case 0x2D:
          case 0x2E:
          case 0x2F:
            if (v7 == 224 && (v4[1] & 0x20) == 0)
              return ((_DWORD)v6 - (_DWORD)a1);
            break;
          case 0x30:
          case 0x31:
          case 0x32:
          case 0x33:
          case 0x34:
          case 0x35:
          case 0x36:
          case 0x37:
            if (v7 == 240 && (v4[1] & 0x30) == 0)
              return ((_DWORD)v6 - (_DWORD)a1);
            break;
          case 0x38:
          case 0x39:
          case 0x3A:
          case 0x3B:
            if (v7 == 248 && (v4[1] & 0x38) == 0)
              return ((_DWORD)v6 - (_DWORD)a1);
            break;
          case 0x3C:
          case 0x3D:
          case 0x3E:
          case 0x3F:
            if (v7 > 0xFD || v7 == 252 && (v4[1] & 0x3C) == 0)
              return ((_DWORD)v6 - (_DWORD)a1);
            break;
          default:
            break;
        }
        LODWORD(v4) = 1 - (_DWORD)a1 + (_DWORD)v4;
        while (1)
        {
          v9 = __OFSUB__(v8--, 1);
          if ((v8 < 0) ^ v9 | (v8 == 0))
            break;
          v10 = *++v6;
          v4 = (char *)((_DWORD)v4 + 1);
          if ((v10 & 0xC0) != 0x80)
            return (uint64_t)v4;
        }
      }
      else
      {
        v6 = (unsigned __int8 *)v4;
      }
LABEL_8:
      v4 = (char *)(v6 + 1);
      a2 = v5;
    }
    while (v5 >= 1);
  }
  return 0xFFFFFFFFLL;
}

uint64_t is_counted_repeat(unsigned __int8 *a1)
{
  unsigned __int8 *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((digitab[*a1] & 4) == 0)
    return 0;
  do
  {
    v2 = a1;
    v4 = *++a1;
    v3 = v4;
  }
  while ((digitab[v4] & 4) != 0);
  if (v3 != 44)
    return v3 == 125;
  v5 = v2[2];
  if (v5 == 125)
    return 1;
  if ((digitab[v5] & 4) == 0)
    return 0;
  v6 = 2;
  do
    v7 = a1[v6++];
  while ((digitab[v7] & 4) != 0);
  return (_DWORD)v7 == 125;
}

uint64_t check_escape(unsigned __int8 **a1, const char **a2, int a3, __int16 a4, int a5)
{
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  const char *v9;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char v16;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned int v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;

  v5 = *a1;
  v7 = *a1 + 1;
  v6 = *v7;
  if (!*v7)
  {
    v9 = "\\ at end of pattern";
    goto LABEL_6;
  }
  if ((v6 - 123) < 0xFFFFFFB5)
    goto LABEL_7;
  v8 = v6 - 48;
  if (escapes_0[(v6 - 48)])
  {
    v6 = escapes_0[v8];
    goto LABEL_7;
  }
  if ((v6 - 49) < 9)
  {
    if (!a5)
    {
      v11 = v5[2];
      if ((digitab[v5[2]] & 4) != 0)
      {
        v12 = v6 - 48;
        do
        {
          v12 = v11 + 10 * v12 - 48;
          v11 = v7[2];
          v16 = digitab[v7[2]];
          ++v7;
        }
        while ((v16 & 4) != 0);
      }
      else
      {
        v12 = v6 - 48;
      }
      if (v12 < 10 || v12 <= a3)
      {
        v6 = (-20 - v12);
        goto LABEL_7;
      }
    }
    if (v6 > 0x37)
    {
      v6 = 0;
LABEL_35:
      v7 = v5;
      goto LABEL_7;
    }
LABEL_36:
    v18 = 0;
    v7 = v5 + 3;
    while (1)
    {
      v19 = v5[v18 + 2];
      if ((v19 & 0xF8) != 0x30)
        break;
      LOBYTE(v8) = v19 + 8 * v8 - 48;
      if ((_DWORD)++v18 == 2)
        goto LABEL_41;
    }
    v7 = &v5[v18 + 1];
LABEL_41:
    v6 = v8;
    goto LABEL_7;
  }
  v13 = (v6 - 76);
  if (v13 > 0x2C)
    goto LABEL_22;
  if (((1 << (v6 - 76)) & 0x20100000205) != 0)
  {
    v9 = "PCRE does not support \\L, \\l, \\N, \\U, or \\u";
    goto LABEL_6;
  }
  if (v13 == 23)
  {
    v20 = v5[2];
    v5 += 2;
    v6 = v20;
    if (!v20)
    {
      *a2 = "\\c at end of pattern";
      return v6;
    }
    if ((v6 - 97) < 0x1A)
      LODWORD(v6) = v6 - 32;
    v6 = v6 ^ 0x40;
    goto LABEL_35;
  }
  if (v13 != 44)
  {
LABEL_22:
    if ((_DWORD)v6 == 48)
      goto LABEL_36;
    if ((a4 & 0x40) == 0)
      goto LABEL_7;
    v9 = "unrecognized character follows \\";
LABEL_6:
    *a2 = v9;
    goto LABEL_7;
  }
  if ((a4 & 0x800) == 0 || v5[2] != 123)
    goto LABEL_59;
  v7 = v5 + 3;
  v14 = v5[3];
  if ((digitab[v5[3]] & 8) != 0)
  {
    v15 = 0;
    LODWORD(v6) = 0;
    do
    {
      v21 = &v5[v15];
      if (v14 > 0x60)
        v14 -= 32;
      v22 = v14 + 16 * v6;
      if (v14 >= 65)
        v23 = -55;
      else
        v23 = -48;
      v6 = (v22 + v23);
      v14 = v21[4];
      ++v15;
    }
    while ((digitab[v21[4]] & 8) != 0);
    v7 = &v5[v15 + 3];
  }
  else
  {
    v6 = 0;
    LODWORD(v15) = 0;
  }
  if (v14 != 125)
  {
LABEL_59:
    v24 = 0;
    v6 = 0;
    v7 = v5 + 3;
    while (1)
    {
      v25 = v5[v24 + 2];
      if ((digitab[v25] & 8) == 0)
        break;
      if (v25 > 0x60)
        LODWORD(v25) = v25 - 32;
      v26 = v25 + 16 * v6;
      if ((int)v25 >= 65)
        v27 = -55;
      else
        v27 = -48;
      v6 = (v26 + v27);
      if ((_DWORD)++v24 == 2)
        goto LABEL_7;
    }
    v7 = &v5[v24 + 1];
    goto LABEL_7;
  }
  if ((v6 & 0x80000000) != 0 || v15 >= 9)
  {
    v9 = "character value in \\x{...} sequence is too large";
    goto LABEL_6;
  }
LABEL_7:
  *a1 = v7;
  return v6;
}

uint64_t get_ucp_0(_QWORD *a1, _DWORD *a2, const char **a3)
{
  uint64_t v5;
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  int v9;
  uint64_t i;
  int v11;
  int v12;
  int v13;
  const char *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  char __s1[4];

  v5 = *a1;
  v7 = (_BYTE *)(*a1 + 1);
  v6 = *v7;
  if (!*v7)
  {
LABEL_15:
    v14 = "malformed \\P or \\p sequence";
LABEL_26:
    *a3 = v14;
    *a1 = v7;
    return 0xFFFFFFFFLL;
  }
  *a2 = 0;
  if (v6 == 123)
  {
    v9 = *(unsigned __int8 *)(v5 + 2);
    v8 = (_BYTE *)(v5 + 2);
    if (v9 == 94)
    {
      *a2 = 1;
      v7 = v8;
    }
    for (i = 0; i != 3; ++i)
    {
      v11 = v7[i + 1];
      if (!v7[i + 1])
      {
        v7 += i + 1;
        goto LABEL_15;
      }
      if (v11 == 125)
      {
        v7 += i + 1;
        goto LABEL_17;
      }
      __s1[i] = v11;
    }
    v7 += 3;
    while (1)
    {
      v13 = *++v7;
      v12 = v13;
      if (!v13)
        goto LABEL_15;
      if (v12 == 125)
        goto LABEL_25;
    }
  }
  __s1[0] = v6;
  i = 1;
LABEL_17:
  v15 = 0;
  __s1[i] = 0;
  *a1 = v7;
  v16 = 37;
  while (1)
  {
    v17 = v16 + v15;
    if (v16 + v15 < 0 != __OFADD__(v16, v15))
      ++v17;
    v18 = (uint64_t)v17 >> 1;
    v19 = cstdlib_strcmp(__s1, (&utt)[2 * (v17 >> 1)]);
    if (!v19)
      return LODWORD((&utt)[2 * v18 + 1]);
    if (v19 <= 0)
      v16 = v18;
    else
      v15 = v18 + 1;
    if (v15 >= v16)
    {
LABEL_25:
      v14 = "unknown property name after \\P or \\p";
      goto LABEL_26;
    }
  }
}

unsigned __int8 *read_repeat_counts_0(unsigned __int8 *result, int *a2, int *a3, const char **a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  const char *v13;

  v4 = *result;
  if ((digitab[*result] & 4) != 0)
  {
    v5 = 0;
    v6 = *result;
    do
    {
      v7 = *++result;
      v4 = v7;
      v5 = v6 + 10 * v5 - 48;
      v6 = v7;
    }
    while ((digitab[v7] & 4) != 0);
  }
  else
  {
    v5 = 0;
  }
  if (v4 == 125)
  {
    v8 = v5;
  }
  else
  {
    v10 = *++result;
    v9 = v10;
    if (v10 == 125)
    {
      v8 = -1;
    }
    else
    {
      if ((digitab[v9] & 4) != 0)
      {
        v8 = 0;
        do
        {
          v11 = v9 + 10 * v8;
          v12 = *++result;
          LODWORD(v9) = v12;
          v8 = v11 - 48;
        }
        while ((digitab[v12] & 4) != 0);
      }
      else
      {
        v8 = 0;
      }
      if (v8 < v5)
      {
        v13 = "numbers out of order in {} quantifier";
        goto LABEL_19;
      }
    }
  }
  if (v5 < 0x10000 && v8 < 0x10000)
  {
    *a2 = v5;
    *a3 = v8;
    return result;
  }
  v13 = "number too big in {} quantifier";
LABEL_19:
  *a4 = v13;
  return result;
}

uint64_t get_othercase_range(int *a1, int a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result;
  int v6;
  int v10;
  int v11;
  unsigned int v12;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v19;
  int v20;

  result = 0;
  v19 = 0;
  v6 = *a1;
  if (*a1 <= a2)
  {
    v10 = a2 + 1;
    while (1)
    {
      v11 = ucp_findchar(v6, &v20, &v19);
      v12 = v19;
      if (v11 == 1 && v19 != 0)
        break;
      if (v10 == ++v6)
        return 0;
    }
    v14 = 0;
    *a3 = v19;
    do
    {
      v15 = v14;
      v16 = v6 + v14;
      v17 = v6 + v14 + 1;
      if (v6 + v14 >= a2)
        break;
      ++v14;
    }
    while (ucp_findchar(v16 + 1, &v20, &v19) == 1 && v14 + v12 == v19);
    *a4 = v12 + v15;
    *a1 = v17;
    return 1;
  }
  return result;
}

uint64_t ord2utf8(int a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  int v4;
  unsigned int v5;

  v2 = 0;
  while (utf8_table1[v2] < a1)
  {
    if (++v2 == 6)
    {
      v3 = (_BYTE *)(a2 + 6);
      v4 = 6;
      goto LABEL_6;
    }
  }
  v3 = (_BYTE *)(a2 + v2);
  v4 = v2;
  if ((int)v2 <= 0)
    goto LABEL_8;
LABEL_6:
  v5 = v4 + 1;
  do
  {
    *v3-- = a1 & 0x3F | 0x80;
    a1 >>= 6;
    --v5;
  }
  while (v5 > 1);
LABEL_8:
  *v3 = utf8_table2[4 * v2] | a1;
  return (v4 + 1);
}

uint64_t compile_regex_0(uint64_t a1, int a2, int *a3, unint64_t *a4, unsigned __int8 **a5, const char **a6, int a7, int a8, int *a9, int *a10, uint64_t a11, uint64_t a12)
{
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  _BYTE *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  __int16 v29;
  unsigned __int8 *v30;
  unsigned __int8 v31;
  uint64_t v32;
  int v33;
  unsigned __int8 v34;
  char v35;
  __int16 v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *repeat_counts_0;
  unsigned __int8 *v45;
  int v46;
  int v47;
  unsigned __int8 *v48;
  int v49;
  uint64_t v50;
  unsigned __int8 *v51;
  int v52;
  unint64_t v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  int v63;
  uint64_t v64;
  _BOOL4 v65;
  uint64_t v66;
  char v67;
  __int16 v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  char v76;
  int v77;
  uint64_t v78;
  int v79;
  unsigned __int8 *v80;
  unsigned int v81;
  unsigned __int8 *v82;
  unsigned int v83;
  uint64_t v84;
  BOOL v85;
  unsigned __int8 *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  int v92;
  int v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  int v98;
  char v99;
  unsigned __int8 *v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  unsigned __int8 *v104;
  int v105;
  int v106;
  unsigned __int8 *v107;
  int v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  unsigned __int8 *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 *v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  int v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v128;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t j;
  char v159;
  uint64_t k;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  int v166;
  BOOL v167;
  char v168;
  int *v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  char v175;
  unsigned __int8 v176;
  unsigned __int8 *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned __int8 *v181;
  int v182;
  int v183;
  unsigned __int8 *v184;
  unsigned __int8 *v185;
  char v186;
  uint64_t v187;
  unsigned __int8 *v188;
  unsigned __int8 v189;
  _BOOL4 v191;
  int v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned __int8 *v198;
  int v199;
  int v200;
  unsigned int v201;
  _BYTE *v202;
  uint64_t v203;
  int v204;
  int v205;
  unsigned __int8 *v206;
  unsigned int i;
  unsigned int v208;
  uint64_t v209;
  unsigned __int8 *v210;
  unsigned int v211;
  uint64_t v212;
  int v213;
  char ucp_0;
  char v215;
  char *v216;
  int v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  int v223;
  uint64_t v224;
  char v225;
  char v226;
  char v227;
  _BYTE *v228;
  int v229;
  __int16 v230;
  __int16 v231;
  char *v232;
  __int16 v233;
  size_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  _BYTE *v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  int v250;
  unsigned __int8 v251;
  unsigned __int8 *v252;
  uint64_t v253;
  unsigned int v254;
  BOOL v255;
  unsigned __int8 *v256;
  int *v257;
  int v258;
  unsigned int v259;
  unsigned __int8 *v260;
  int v261;
  unsigned __int8 *v262;
  uint64_t v263;
  int v264;
  unsigned __int8 *v265;
  uint64_t v266;
  int v267;
  int v268;
  const char *v269;
  const char *v270;
  unsigned __int8 *v271;
  uint64_t v272;
  int v273;
  int v274;
  int v275;
  size_t v276;
  int v277;
  uint64_t v278;
  int v279;
  int v280;
  unsigned __int8 *v281;
  int v282;
  uint64_t v283;
  _BYTE *v284;
  unsigned __int8 *v285;
  uint64_t v286;
  uint64_t v287;
  unsigned __int8 *v288;
  int v289;
  size_t v290;
  uint64_t v291;
  int v292;
  int v293;
  int v294;
  int v295;
  unint64_t v296;
  int v297;
  int v298;
  int v299;
  BOOL v300;
  int v301;
  int v302;
  int v303;
  unint64_t v304;
  unsigned __int8 *v305;
  int v306;
  _BOOL4 v308;
  int v309;
  BOOL v310;
  int v311;
  unsigned int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  unsigned int fixedlength;
  unsigned int v320;
  const char *v321;
  uint64_t result;
  unsigned __int8 *v323;
  unsigned int v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t *v327;
  int v328;
  int v329;
  const char *v330;
  int v331;
  __int16 v333;
  char *v334;
  unsigned int v335;
  unsigned int v336;
  int v337;
  int v338;
  int v339;
  unsigned __int8 *v340;
  _WORD *v341;
  void *__src;
  char *__srca;
  unsigned int v344;
  _BOOL4 v347;
  BOOL v348;
  unsigned int v349;
  unsigned int v350;
  unsigned int v351;
  unsigned int v352;
  unsigned int v353;
  unsigned int v354;
  unsigned int v355;
  int v356;
  char v357;
  uint64_t v358;
  char v359;
  unsigned int v360;
  unsigned int v361;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  unsigned int v365;
  unsigned int v366;
  int v367;
  int v368;
  int v371;
  int v372;
  int v373;
  unsigned int v374;
  _BYTE *v375;
  unsigned int v376;
  uint64_t v377;
  unint64_t v378;
  int v379;
  uint64_t v380;
  uint64_t v381;
  int __dst;
  __int16 v383;
  unsigned __int8 *v384;
  char *v385;
  uint64_t v386;
  unsigned __int8 v387;
  _BYTE v388[7];
  char __b;
  char v390;
  uint64_t v391;

  v341 = 0;
  v391 = *MEMORY[0x24BDAC8D0];
  v13 = (unsigned __int8 *)*a4;
  v14 = (unsigned __int8 *)(*a4 + (a8 + 3));
  v15 = v388;
  v16 = *a5;
  v377 = a11;
  v378 = (unint64_t)v13;
  *(_WORD *)(v13 + 1) = 0;
  v333 = (__int16)v13;
  v340 = v13;
  v338 = -2;
  v339 = -2;
  v337 = a2;
  while (2)
  {
    if ((a1 & 7) != a2)
    {
      *v14 = 18;
      v14[1] = a1 & 7;
      v14 += 2;
    }
    if (a7)
    {
      v341 = v14 + 1;
      *(_WORD *)v14 = 73;
      v14[2] = 0;
      v14 += 3;
    }
    v371 = 0;
    v17 = 0;
    v347 = 0;
    v18 = 0;
    v375 = 0;
    v385 = 0;
    v386 = 0;
    v19 = a1 & 0x800;
    v344 = (a1 >> 11) & 1;
    v384 = v16;
    v383 = 0;
    v355 = (a1 >> 9) & 1;
    v356 = 0;
    v348 = (a1 & 0x200) == 0;
    v373 = (a1 & 1) << 8;
    v20 = 4294967294;
    __dst = 0;
    v21 = 4294967294;
    v374 = -2;
    v376 = -2;
    v372 = v19;
    while (1)
    {
      v381 = 0;
      v22 = *v16;
      if ((_DWORD)v17 && *v16)
      {
        if ((_DWORD)v22 == 92 && v16[1] == 69)
        {
          v17 = 0;
          v384 = v16 + 1;
LABEL_87:
          v28 = (unint64_t)v18;
          goto LABEL_644;
        }
        if (v375)
          *((_WORD *)v375 + 2) = bswap32((_DWORD)v16- *(_DWORD *)(a12 + 40)- (bswap32(*((unsigned __int16 *)v375 + 1)) >> 16)) >> 16;
        if ((a1 & 0x4000) != 0)
        {
          v29 = (__int16)v384;
          *(_WORD *)v14 = -192;
          v14[2] = (unsigned __int16)(v29 - *(_WORD *)(a12 + 40)) >> 8;
          v14[3] = v29 - *(_BYTE *)(a12 + 40);
          *((_WORD *)v14 + 2) = 0;
          v28 = (unint64_t)(v14 + 6);
          v375 = v14;
        }
        else
        {
          v375 = 0;
          v28 = (unint64_t)v14;
        }
LABEL_25:
        v387 = v22;
        if (v19 && (v22 & 0xC0) == 0xC0)
        {
          v30 = v384;
          v31 = v384[1];
          if ((v31 & 0xC0) == 0x80)
          {
            v32 = 0;
            do
            {
              v15[v32] = v31;
              v31 = v30[v32++ + 2];
            }
            while ((v31 & 0xC0) == 0x80);
            v33 = v32 + 1;
            v30 += v32;
          }
          else
          {
            v33 = 1;
          }
          v384 = v30;
LABEL_33:
          if ((a1 & 1) != 0)
            v34 = 22;
          else
            v34 = 21;
          *(_BYTE *)v28 = v34;
          v14 = (unsigned __int8 *)(v28 + 1);
          if (v33 < 1)
            goto LABEL_361;
          goto LABEL_359;
        }
        goto LABEL_355;
      }
      v23 = 1;
      if ((v22 - 42) >= 2 && (_DWORD)v22 != 63)
      {
        if ((_DWORD)v22 == 123)
        {
          v24 = v21;
          v25 = v20;
          v26 = v17;
          v27 = is_counted_repeat(v16 + 1);
          v17 = v26;
          v20 = v25;
          v19 = v372;
          v85 = v27 == 0;
          v21 = v24;
          v23 = !v85;
          if ((v23 & 1) != 0)
            goto LABEL_42;
        }
        else
        {
          v23 = 0;
        }
        if (v375)
        {
          if (v371 <= 0)
          {
            v23 = 0;
            *((_WORD *)v375 + 2) = bswap32((_DWORD)v16- *(_DWORD *)(a12 + 40)- (bswap32(*((unsigned __int16 *)v375 + 1)) >> 16)) >> 16;
            --v371;
            v375 = 0;
            if ((a1 & 8) == 0)
              goto LABEL_43;
            goto LABEL_66;
          }
          v23 = 0;
          --v371;
        }
      }
LABEL_42:
      if ((a1 & 8) == 0)
        goto LABEL_43;
LABEL_66:
      if ((*(_BYTE *)(*(_QWORD *)(a12 + 24) + v22) & 1) != 0)
        goto LABEL_87;
      if ((_DWORD)v22 == 35)
      {
        v45 = v384;
        while (1)
        {
          v47 = *++v45;
          v46 = v47;
          if (v47 == 10)
            break;
          if (!v46)
          {
            LODWORD(v22) = 0;
            v384 = v45;
            goto LABEL_43;
          }
        }
        v384 = v45;
        goto LABEL_87;
      }
LABEL_43:
      v35 = (a1 & 0x4000) != 0 ? v23 : 1;
      if ((v35 & 1) != 0)
      {
        v28 = (unint64_t)v14;
      }
      else
      {
        v36 = (__int16)v384;
        *(_WORD *)v14 = -192;
        v14[2] = (unsigned __int16)(v36 - *(_WORD *)(a12 + 40)) >> 8;
        v14[3] = v36 - *(_BYTE *)(a12 + 40);
        *((_WORD *)v14 + 2) = 0;
        v28 = (unint64_t)(v14 + 6);
        v375 = v14;
      }
      if ((int)v22 > 62)
        break;
      switch((int)v22)
      {
        case '$':
          v37 = 20;
          goto LABEL_292;
        case '%':
        case '&':
        case '\'':
        case ',':
        case '-':
          goto LABEL_25;
        case '(':
          v48 = v384;
          v49 = *++v384;
          if (v49 != 63)
          {
            v169 = a3;
            if ((a1 & 0x1000) == 0)
              goto LABEL_313;
            v171 = v17;
            v172 = 0;
            v173 = 80;
LABEL_383:
            v194 = a1;
            goto LABEL_614;
          }
          break;
        case ')':
          goto LABEL_658;
        case '*':
          HIDWORD(v386) = 0;
          goto LABEL_78;
        case '+':
          HIDWORD(v386) = 1;
LABEL_78:
          LODWORD(v386) = -1;
          goto LABEL_79;
        case '.':
          if (v376 == -2)
            v20 = 0xFFFFFFFFLL;
          else
            v20 = v376;
          *(_BYTE *)v28 = 11;
          v14 = (unsigned __int8 *)(v28 + 1);
          goto LABEL_85;
        default:
          if (!(_DWORD)v22)
            goto LABEL_658;
          goto LABEL_25;
      }
      v380 = 0;
      v51 = v48 + 2;
      v50 = v48[2];
      v384 = v48 + 2;
      switch(v50)
      {
        case '!':
          v172 = 0;
          v384 = v48 + 3;
          v173 = 70;
          goto LABEL_612;
        case '#':
          v260 = v48 + 2;
          do
            v261 = *++v260;
          while (v261 != 41);
          v384 = v260;
          v213 = 4;
          v14 = (unsigned __int8 *)v28;
          v28 = (unint64_t)v18;
          goto LABEL_552;
        case '(':
          v262 = v48 + 3;
          v263 = v48[3];
          if (v263 == 82)
          {
            *(_WORD *)(v28 + 3) = -180;
            *(_BYTE *)(v28 + 5) = -1;
            v384 += 3;
LABEL_586:
            v173 = 75;
            v172 = 3;
LABEL_612:
            v194 = a1;
            v169 = a3;
            goto LABEL_613;
          }
          if (!digitab[v263])
          {
            v172 = 0;
            v173 = 75;
            goto LABEL_612;
          }
          v279 = v263 - 48;
          v281 = v48 + 4;
          v280 = v48[4];
          if (v280 != 41)
          {
            v262 = v48 + 3;
            do
            {
              v279 = v280 + 10 * v279 - 48;
              v280 = v262[2];
              ++v262;
            }
            while (v280 != 41);
            v281 = v262 + 1;
          }
          v384 = v281;
          if (v279)
          {
            v384 = v262 + 2;
            *(_BYTE *)(v28 + 3) = 76;
            *(_BYTE *)(v28 + 4) = BYTE1(v279);
            *(_BYTE *)(v28 + 5) = v279;
            goto LABEL_586;
          }
          *a6 = "invalid condition (?(0)";
          v356 = 75;
          v213 = 9;
          v14 = (unsigned __int8 *)v28;
          v28 = (unint64_t)v18;
          v19 = v372;
LABEL_552:
          v53 = (unint64_t)v375;
          goto LABEL_651;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          goto LABEL_74;
        case ':':
          v172 = 0;
          v384 = v48 + 3;
          v173 = 80;
          goto LABEL_612;
        case '<':
          v264 = v48[3];
          v384 = v48 + 3;
          if (v264 == 33)
          {
            v172 = 0;
            v384 = v48 + 4;
            v173 = 72;
            goto LABEL_612;
          }
          v169 = a3;
          v172 = 0;
          if (v264 == 61)
          {
            v384 = v48 + 4;
            v173 = 71;
            goto LABEL_432;
          }
          v194 = a1;
          goto LABEL_605;
        case '=':
          v172 = 0;
          v384 = v48 + 3;
          v173 = 69;
          goto LABEL_612;
        case '>':
          v172 = 0;
          v384 = v48 + 3;
          v173 = 74;
          goto LABEL_612;
        case 'C':
          *(_BYTE *)v28 = 64;
          v14 = (unsigned __int8 *)(v28 + 1);
          v265 = v384 + 1;
          v266 = v384[1];
          if ((digitab[v266] & 4) == 0)
          {
            LOBYTE(v267) = 0;
            ++v384;
LABEL_590:
            *(_BYTE *)(v28 + 1) = v267;
            *(_BYTE *)(v28 + 2) = (unsigned __int16)((_WORD)v384 - *(_WORD *)(a12 + 40) + 1) >> 8;
            v14 = (unsigned __int8 *)(v28 + 6);
            *(_BYTE *)(v28 + 3) = (_BYTE)v384 - *(_DWORD *)(a12 + 40) + 1;
            *(_WORD *)(v28 + 4) = 0;
            v213 = 4;
            v371 = 1;
            v53 = v28;
            v28 = 0;
            goto LABEL_651;
          }
          v267 = 0;
          do
          {
            v267 = v266 + 10 * v267 - 48;
            v282 = *++v265;
            LODWORD(v266) = v282;
          }
          while ((digitab[v282] & 4) != 0);
          v384 = v265;
          if (v267 < 256)
            goto LABEL_590;
          *a6 = "number after (?C is > 255";
          v213 = 9;
          v371 = 1;
          goto LABEL_650;
        case 'P':
          v268 = v48[3];
          v384 = v48 + 3;
          if ((v268 - 61) >= 2)
          {
            if (v268 != 60)
            {
              v172 = 0;
              v194 = a1;
              v169 = a3;
LABEL_605:
              v173 = v356;
              goto LABEL_613;
            }
            v283 = a1;
            v284 = *(_BYTE **)(a12 + 48);
            v285 = v48 + 4;
            v286 = 0x100000000;
            v287 = 0xFFFFFFFF00000000;
            v288 = v285;
            do
            {
              v289 = *v288++;
              v286 += 0x100000000;
              v287 += 0x100000000;
            }
            while (v289 != 62);
            v363 = v17;
            v384 = v288;
            v290 = v287 >> 32;
            v291 = v286 >> 32;
            if (*(int *)(a12 + 56) < 1)
              goto LABEL_656;
            v354 = v21;
            v292 = 0;
            while (1)
            {
              v293 = cstdlib_memcmp(v285, v284 + 2, v290);
              if (!v293)
                break;
              if (v293 < 0)
                goto LABEL_655;
              v284 += *(int *)(a12 + 60);
              if (++v292 >= *(_DWORD *)(a12 + 56))
                goto LABEL_656;
            }
            if (v284[v291])
            {
LABEL_655:
              cstdlib_memmove(&v284[*(int *)(a12 + 60)], v284, *(int *)(a12 + 60) * (uint64_t)(*(_DWORD *)(a12 + 56) - v292));
LABEL_656:
              v169 = a3;
              *v284 = (unsigned __int16)(*(_WORD *)a3 + 1) >> 8;
              v284[1] = *(_BYTE *)a3 + 1;
              cstdlib_memcpy(v284 + 2, v285, v290);
              v284[v291] = 0;
              ++*(_DWORD *)(a12 + 56);
              a1 = v283;
              v15 = v388;
              v17 = v363;
LABEL_313:
              v170 = (*v169)++;
              if (v170 >= 100)
              {
                v171 = v17;
                *(_BYTE *)(v28 + 3) = 79;
                *(_BYTE *)(v28 + 4) = BYTE1(*v169);
                *(_BYTE *)(v28 + 5) = *v169;
                v172 = 3;
                v173 = 181;
                goto LABEL_383;
              }
              v172 = 0;
              v173 = v170 + 81;
LABEL_432:
              v194 = a1;
LABEL_613:
              v171 = v17;
              if (v173 < 74)
              {
                v296 = 0;
                goto LABEL_616;
              }
LABEL_614:
              v296 = v28;
LABEL_616:
              *(_BYTE *)v28 = v173;
              v385 = (char *)v28;
              v297 = *(_DWORD *)(a12 + 72);
              v356 = v173;
              v298 = compile_regex_0(v194, a1 & 7, v169, &v385, &v384, a6, (v173 - 71) < 2, v172, &v381, (char *)&v381 + 4, &v377, a12);
              v19 = v372;
              if (!v298)
              {
LABEL_698:
                result = 0;
                *a5 = v384;
                return result;
              }
              v17 = v171;
              if (v356 != 75)
                goto LABEL_623;
              v299 = 1;
              do
              {
                v28 += __rev16(*(unsigned __int16 *)(v28 + 1));
                --v299;
              }
              while (*(_BYTE *)v28 != 66);
              if (-v299 == 1 || v299 == 0)
              {
                if (!v299)
                  v381 = -1;
LABEL_623:
                if (v356 > 79 || (v356 & 0xFFFFFFFE) == 0x4A)
                {
                  v193 = v381;
                  if (v376 == -2)
                  {
                    v347 = (int)v381 >= 0;
                    if ((int)v381 < 0)
                      v193 = -1;
                    v376 = -1;
                    v301 = HIDWORD(v381);
                  }
                  else
                  {
                    v347 = 0;
                    v301 = HIDWORD(v381);
                    if ((v381 & 0x80000000) == 0 && v381 < 0)
                    {
                      v347 = 0;
                      v301 = v381 | v297;
                      HIDWORD(v381) = v381 | v297;
                    }
                    v193 = v376;
                  }
                  if (v301 < 0)
                    v301 = v374;
                }
                else
                {
                  v347 = 0;
                  v300 = SHIDWORD(v381) > -1 && v356 == 69;
                  v301 = v374;
                  if (v300)
                    v301 = HIDWORD(v381);
                  v193 = v376;
                }
                if (*v384 == 41)
                {
                  v28 = v296;
                  v14 = (unsigned __int8 *)v385;
                  v20 = v376;
                  v21 = v374;
                  v374 = v301;
LABEL_643:
                  v376 = v193;
                  goto LABEL_644;
                }
                v321 = "missing)";
                goto LABEL_697;
              }
              v321 = "conditional group contains more than two branches";
LABEL_697:
              *a6 = v321;
              goto LABEL_698;
            }
            *a6 = "two named groups have the same name";
            v213 = 9;
            v14 = (unsigned __int8 *)v28;
            v28 = (unint64_t)v18;
            a1 = v283;
            v15 = v388;
            v19 = v372;
            v53 = (unint64_t)v375;
            v17 = v363;
            v21 = v354;
          }
          else
          {
            v366 = a1;
            v269 = (const char *)(v48 + 4);
            v270 = *(const char **)(a12 + 48);
            v271 = v48 + 3;
            v272 = 0xFFFFFFFF00000000;
            do
            {
              v273 = *++v271;
              v272 += 0x100000000;
            }
            while (v273 != 41);
            v353 = v21;
            v336 = v20;
            v362 = v17;
            v384 = v271;
            v274 = *(_DWORD *)(a12 + 56);
            if (v274 < 1)
            {
              v275 = 0;
            }
            else
            {
              v275 = 0;
              v276 = v272 >> 32;
              do
              {
                v277 = cstdlib_strncmp(v269, v270 + 2, v276);
                v274 = *(_DWORD *)(a12 + 56);
                if (!v277)
                  break;
                v270 += *(int *)(a12 + 60);
                ++v275;
              }
              while (v275 < v274);
            }
            if (v275 >= v274)
            {
              *a6 = "reference to non-existent subpattern";
              v213 = 9;
              v14 = (unsigned __int8 *)v28;
              v28 = (unint64_t)v375;
              a1 = v366;
              v15 = v388;
              v19 = v372;
              v17 = v362;
              v20 = v336;
              v21 = v353;
LABEL_650:
              v304 = v28;
              v28 = (unint64_t)v18;
              v53 = v304;
              goto LABEL_651;
            }
            v294 = *(unsigned __int8 *)v270;
            v295 = *((unsigned __int8 *)v270 + 1);
            v52 = v295 | (v294 << 8);
            v15 = v388;
            v19 = v372;
            v17 = v362;
            v20 = v336;
            v21 = v353;
            if (v268 != 62)
            {
              *(_BYTE *)v28 = 62;
              *(_BYTE *)(v28 + 1) = v294;
              *(_BYTE *)(v28 + 2) = v295;
              v14 = (unsigned __int8 *)(v28 + 3);
              v302 = 1 << v295;
              if (v52 >= 0x20)
                v302 = 1;
              v303 = *(_DWORD *)(a12 + 64);
              *(_DWORD *)(a12 + 68) |= v302;
              a1 = v366;
              if (v52 > v303)
                *(_DWORD *)(a12 + 64) = v52;
              v213 = 4;
              v18 = (char *)v28;
              v28 = (unint64_t)v375;
              goto LABEL_650;
            }
            a1 = v366;
            v53 = (unint64_t)v375;
LABEL_412:
            *(_BYTE *)v28 = 0;
            v206 = *(unsigned __int8 **)(a12 + 32);
            if (v52)
            {
              for (i = *v206; i; v206 = v210)
              {
                if (i < 0x51)
                {
                  v209 = OP_lengths[i];
                  v210 = &v206[v209];
                  if (v19)
                  {
                    if (i - 24 < 9 || i - 21 < 2)
                    {
                      v210 = &v206[v209 - 1];
                      do
                      {
                        v211 = *++v210;
                        i = v211;
                      }
                      while ((v211 & 0xC0) == 0x80);
                      continue;
                    }
                    if (i == 61)
                      v210 += __rev16(*(unsigned __int16 *)(v210 + 1)) + 1;
                  }
                }
                else
                {
                  if (i < 0xB5)
                    v208 = i - 80;
                  else
                    v208 = __rev16(*((unsigned __int16 *)v206 + 2));
                  if (v208 == v52)
                    goto LABEL_442;
                  v210 = v206 + 3;
                }
                i = *v210;
              }
LABEL_444:
              *a6 = "reference to non-existent subpattern";
              v213 = 9;
              v14 = (unsigned __int8 *)v28;
              goto LABEL_651;
            }
            if (!v206)
              goto LABEL_444;
LABEL_442:
            v212 = v21;
            if (__rev16(*(unsigned __int16 *)(v206 + 1)))
            {
LABEL_443:
              *(_BYTE *)v28 = 63;
              *(_BYTE *)(v28 + 1) = (unsigned __int16)((_WORD)v206 - *(_WORD *)(a12 + 32)) >> 8;
              *(_BYTE *)(v28 + 2) = (_BYTE)v206 - *(_DWORD *)(a12 + 32);
              v14 = (unsigned __int8 *)(v28 + 3);
              v213 = 4;
            }
            else
            {
              v245 = &v377;
              do
              {
                v246 = v245[1];
                if (v246 < (unint64_t)v206)
                  break;
                v247 = v20;
                v248 = v17;
                v249 = could_be_empty_branch(v246, v28, v344);
                v17 = v248;
                v20 = v247;
                v19 = v372;
                if (!v249)
                  goto LABEL_443;
                v245 = (uint64_t *)*v245;
              }
              while (v245);
              *a6 = "recursive call could loop indefinitely";
              v213 = 9;
              v14 = (unsigned __int8 *)v28;
            }
            v21 = v212;
          }
LABEL_651:
          if (v213 != 4)
            goto LABEL_698;
          v375 = (_BYTE *)v53;
LABEL_644:
          v16 = ++v384;
          v18 = (char *)v28;
          break;
        case 'R':
          v50 = v48[3];
          v51 = v48 + 3;
LABEL_74:
          if ((digitab[v50] & 4) != 0)
          {
            v52 = 0;
            v53 = (unint64_t)v375;
            do
            {
              v204 = 10 * v52 + v50;
              v205 = *++v51;
              LOBYTE(v50) = v205;
              v52 = v204 - 48;
            }
            while ((digitab[v205] & 4) != 0);
          }
          else
          {
            v52 = 0;
            v53 = (unint64_t)v375;
          }
          v384 = v51;
          goto LABEL_412;
        default:
          HIDWORD(v380) = 0;
          v256 = v48 + 3;
          v257 = (int *)&v380 + 1;
          v169 = a3;
          while (2)
          {
            if (v50 != 41 && v50 != 58)
            {
              if (v50 <= 104)
              {
                switch(v50)
                {
                  case '-':
                    v257 = (int *)&v380;
                    goto LABEL_548;
                  case 'U':
                    v258 = *v257 | 0x200;
                    break;
                  case 'X':
                    v258 = *v257 | 0x40;
                    break;
                  default:
                    goto LABEL_548;
                }
              }
              else if (v50 > 114)
              {
                if (v50 == 115)
                {
                  v258 = *v257 | 4;
                }
                else
                {
                  if (v50 != 120)
                    goto LABEL_548;
                  v258 = *v257 | 8;
                }
              }
              else
              {
                if (v50 != 105)
                {
                  if (v50 == 109)
                  {
                    v258 = *v257 | 2;
                    goto LABEL_547;
                  }
LABEL_548:
                  v259 = *v256++;
                  v50 = v259;
                  continue;
                }
                v258 = *v257 | 1;
              }
LABEL_547:
              *v257 = v258;
              goto LABEL_548;
            }
            break;
          }
          v278 = v21;
          v384 = v256 - 1;
          v194 = (HIDWORD(v380) | a1) & ~(_DWORD)v380;
          if (v50 != 41)
          {
            v172 = 0;
            v384 = v256;
            v173 = 80;
            goto LABEL_613;
          }
          if ((a1 & 7) != ((BYTE4(v380) | a1) & ~(_BYTE)v380 & 7))
          {
            *(_BYTE *)v28 = 18;
            *(_BYTE *)(v28 + 1) = v194 & 7;
            v28 += 2;
          }
          v53 = (unint64_t)v375;
          v355 = (v194 >> 9) & 1;
          v348 = (v194 & 0x200) == 0;
          v373 = (v194 & 1) << 8;
          v213 = 4;
          a1 = v194;
          v14 = (unsigned __int8 *)v28;
          v28 = 0;
          v21 = v278;
          goto LABEL_651;
      }
    }
    if ((int)v22 <= 93)
    {
      if ((_DWORD)v22 != 63)
      {
        if ((_DWORD)v22 != 91)
        {
          if ((_DWORD)v22 != 92)
            goto LABEL_25;
          v38 = v21;
          v39 = v17;
          v40 = check_escape(&v384, a6, *a3, a1, 0);
          v41 = v40;
          if ((v40 & 0x80000000) == 0)
          {
            v19 = v372;
            if (v372 && v40 >= 0x80)
            {
              v33 = ord2utf8(v40, (uint64_t)&v387);
              v19 = v372;
              v17 = v39;
              goto LABEL_33;
            }
            v387 = v40;
            v17 = v39;
            goto LABEL_355;
          }
          v19 = v372;
          if (v40 == -19)
          {
            if (v384[1] == 92)
            {
              v21 = v38;
              if (v384[2] == 69)
              {
                v17 = v39;
                v384 += 2;
              }
              else
              {
                v17 = 1;
              }
              v14 = (unsigned __int8 *)v28;
              goto LABEL_87;
            }
            v17 = 1;
            v14 = (unsigned __int8 *)v28;
            v28 = (unint64_t)v18;
            v21 = v38;
            goto LABEL_644;
          }
          if (v40 + 15 >= 0xB)
            v201 = -2;
          else
            v201 = -1;
          if (v376 == -2)
            v20 = v201;
          else
            v20 = v376;
          v17 = v39;
          if (v40 > 0xFFFFFFEC)
          {
            if ((v40 & 0xFFFFFFFE) == 0xFFFFFFF2)
            {
              HIDWORD(v380) = 0;
              ucp_0 = get_ucp_0(&v384, (_DWORD *)&v380 + 1, a6);
              v17 = v39;
              v19 = v372;
              if (HIDWORD(v380) == (v41 == -14))
                v215 = 13;
              else
                v215 = 14;
              *(_BYTE *)v28 = v215;
              v14 = (unsigned __int8 *)(v28 + 2);
              *(_BYTE *)(v28 + 1) = ucp_0;
            }
            else
            {
              if (v40 + 15 >= 0xB)
                v235 = 0;
              else
                v235 = v28;
              *(_BYTE *)v28 = -(char)v40;
              v14 = (unsigned __int8 *)(v28 + 1);
              v28 = v235;
            }
          }
          else
          {
            *(_BYTE *)v28 = 62;
            *(_BYTE *)(v28 + 1) = (unsigned __int16)(-20 - v40) >> 8;
            *(_BYTE *)(v28 + 2) = -20 - v40;
            v14 = (unsigned __int8 *)(v28 + 3);
          }
          goto LABEL_85;
        }
        v80 = v384;
        v83 = v384[1];
        v82 = v384 + 1;
        v81 = v83;
        v84 = (1 << v83) & 0x2400400000000000;
        v85 = v83 > 0x3D || v84 == 0;
        if (!v85)
        {
          v86 = v384 + 2;
          if (v384[2] == 94)
            v86 = v384 + 3;
          do
          {
            v88 = *v86++;
            v87 = v88;
          }
          while ((*(_BYTE *)(*(_QWORD *)(a12 + 24) + v88) & 2) != 0);
          if (v87 == v81 && *v86 == 93)
          {
            v321 = "POSIX collating elements are not supported";
            if (v81 == 58)
              v321 = "POSIX named classes are supported only within a class";
            goto LABEL_697;
          }
        }
        v89 = v17;
        ++v384;
        LODWORD(v90) = v81;
        v349 = v81;
        if (v81 == 94)
        {
          LODWORD(v90) = v80[2];
          v384 = v80 + 2;
          v82 = v80 + 2;
        }
        v14 = (unsigned __int8 *)(v28 + 2);
        v91 = (char *)(v28 + 36);
        cstdlib_memset(&__b, 0, 0x20uLL);
        v368 = 0;
        v92 = 0;
        v93 = -1;
        __src = (void *)(v28 + 36);
        v19 = v372;
        v94 = v89;
        v364 = a1;
        while (2)
        {
          if (v19)
          {
            if ((char)v90 < 0)
            {
              LODWORD(v90) = *v82;
              if ((~(_DWORD)v90 & 0xC0) == 0)
              {
                v95 = utf8_table4[v90 & 0x3F];
                LODWORD(v90) = (utf8_table3[v95] & v90) << (6 * v95);
                v96 = (char *)(v82 + 1);
                if (v95 <= 1)
                  v97 = 1;
                else
                  v97 = v95;
                v98 = 6 * v95 - 6;
                do
                {
                  v99 = *v96++;
                  LODWORD(v90) = ((v99 & 0x3F) << v98) | v90;
                  v98 -= 6;
                  --v97;
                }
                while (v97);
                v82 += v95;
                v384 = v82;
              }
            }
          }
          if ((_DWORD)v94)
          {
            if ((_DWORD)v90 == 92)
            {
              v101 = v82[1];
              v100 = v82 + 1;
              if (v101 == 69)
              {
                v94 = 0;
                v384 = v100;
                goto LABEL_179;
              }
              LODWORD(v90) = 92;
LABEL_176:
              *(&__b + (int)v90 / 8) |= 1 << (v90 & 7);
              if ((a1 & 1) != 0)
              {
                v90 = *(unsigned __int8 *)(*(_QWORD *)(a12 + 8) + (int)v90);
                *(&__b + (v90 >> 3)) |= 1 << (v90 & 7);
              }
              ++v92;
              v93 = v90;
              goto LABEL_179;
            }
LABEL_173:
            if (!v19 || (int)v90 <= 255 && (a1 & ((int)v90 > 127)) == 0)
              goto LABEL_176;
            v128 = v94;
            *v91 = 1;
            v91 += (int)ord2utf8(v90, (uint64_t)(v91 + 1)) + 1;
            if ((a1 & 1) != 0)
            {
              LODWORD(v380) = 0;
              if ((ucp_findchar(v90, (int *)&v380 + 1, (unsigned int *)&v380) & 0x80000000) == 0 && (int)v380 >= 1)
              {
                *v91 = 1;
                v91 += (int)ord2utf8(v380, (uint64_t)(v91 + 1)) + 1;
              }
              v94 = v128;
              v368 = 1;
LABEL_242:
              v19 = v372;
            }
            else
            {
              v368 = 1;
              v19 = v372;
              v94 = v128;
            }
LABEL_179:
            v126 = v384[1];
            v82 = v384 + 1;
            LODWORD(v90) = v126;
            ++v384;
            if (v126 == 93 && (_DWORD)v94 == 0)
            {
              if (v92 == 1)
              {
                if (!v19
                  || (v349 == 94 ? (v167 = v93 <= 127) : (v167 = 1),
                      v167 ? (v168 = 0) : (v168 = 1),
                      !v368 && (v168 & 1) == 0))
                {
                  if (v349 != 94)
                  {
                    if (v19 && v93 >= 128)
                    {
                      v33 = ord2utf8(v93, (uint64_t)&v387);
                      v19 = v372;
                      v17 = 0;
                      v15 = v388;
                      goto LABEL_33;
                    }
                    v17 = 0;
                    v387 = v93;
                    v15 = v388;
LABEL_355:
                    if ((a1 & 1) != 0)
                      v186 = 22;
                    else
                      v186 = 21;
                    *(_BYTE *)v28 = v186;
                    v14 = (unsigned __int8 *)(v28 + 1);
                    v33 = 1;
LABEL_359:
                    v187 = v33;
                    v188 = &v387;
                    do
                    {
                      v189 = *v188++;
                      v34 = v189;
                      *v14++ = v189;
                      --v187;
                    }
                    while (v187);
LABEL_361:
                    v191 = v33 == 1 || v373 == 0;
                    if (v376 != -2)
                    {
                      if (v191)
                      {
                        v21 = v374;
                        v192 = *(_DWORD *)(a12 + 72) | v373 | v34;
                        v20 = v376;
LABEL_370:
                        v374 = v192;
                        goto LABEL_644;
                      }
                      v20 = v376;
LABEL_372:
                      v21 = v374;
                      goto LABEL_644;
                    }
                    if (v191)
                    {
                      v376 = v373 | v387;
                      if (v33 != 1)
                      {
                        v21 = v374;
                        v192 = *(_DWORD *)(a12 + 72) | v34;
                        v20 = 0xFFFFFFFFLL;
                        goto LABEL_370;
                      }
                      v20 = 0xFFFFFFFFLL;
                      goto LABEL_372;
                    }
                    v20 = 0xFFFFFFFFLL;
                    v21 = v374;
                    v193 = -1;
                    v374 = -1;
                    goto LABEL_643;
                  }
                  v17 = 0;
                  if (v376 == -2)
                    v20 = 0xFFFFFFFFLL;
                  else
                    v20 = v376;
                  *(_BYTE *)v28 = 23;
                  *(_BYTE *)(v28 + 1) = v93;
                  v21 = v374;
                  v376 = v20;
                  v15 = v388;
                  goto LABEL_644;
                }
              }
              if (v376 == -2)
                v20 = 0xFFFFFFFFLL;
              else
                v20 = v376;
              if (v368)
              {
                *v91 = 0;
                v185 = (unsigned __int8 *)(v91 + 1);
                *(_BYTE *)v28 = 61;
                *(_BYTE *)(v28 + 3) = v349 == 94;
                v15 = v388;
                if (v92 < 1)
                {
                  cstdlib_memmove((void *)(v28 + 4), __src, ((_DWORD)v185 - (_DWORD)__src));
                  v14 = (unsigned __int8 *)(v28 + 3 + (int)v185 - (int)__src + 1);
                }
                else
                {
                  *(_BYTE *)(v28 + 3) = (v349 == 94) | 2;
                  cstdlib_memcpy((void *)(v28 + 4), &__b, 0x20uLL);
                  v14 = v185;
                }
                v17 = 0;
                *(_WORD *)(v28 + 1) = bswap32((_DWORD)v14 - v28) >> 16;
                v21 = v374;
                v376 = v20;
                v19 = v372;
                goto LABEL_644;
              }
              v202 = (_BYTE *)(v28 + 1);
              v15 = v388;
              if (v349 == 94)
              {
                v203 = 0;
                *(_BYTE *)v28 = 60;
                do
                {
                  v202[v203] = ~*(&__b + v203);
                  ++v203;
                }
                while (v203 != 32);
              }
              else
              {
                *(_BYTE *)v28 = 59;
                cstdlib_memcpy(v202, &__b, 0x20uLL);
                v19 = v372;
              }
              v17 = 0;
              v14 = (unsigned __int8 *)(v28 + 33);
LABEL_85:
              v21 = v374;
              v376 = v20;
              goto LABEL_644;
            }
            continue;
          }
          break;
        }
        if ((_DWORD)v90 == 92)
        {
          v112 = v94;
          v113 = check_escape(&v384, a6, *a3, a1, 1);
          if (v113 == -19)
          {
            if (v384[1] != 92)
            {
              v94 = 1;
              goto LABEL_242;
            }
            v19 = v372;
            if (v384[2] == 69)
            {
              v94 = 0;
              v384 += 2;
            }
            else
            {
              v94 = 1;
            }
            goto LABEL_179;
          }
          LODWORD(v90) = v113;
          if (v113 == -4)
          {
            LODWORD(v90) = 8;
            v19 = v372;
            v94 = v112;
          }
          else
          {
            v19 = v372;
            v94 = v112;
            if (v113 == -15)
            {
              LODWORD(v90) = 88;
            }
            else if (v113 < 0)
            {
              v137 = *(_QWORD *)(a12 + 16);
              switch(-5 - v113)
              {
                case 0:
                  v154 = 0;
                  v155 = v137 + 64;
                  do
                  {
                    *(&__b + v154) |= ~*(_BYTE *)(v155 + v154);
                    ++v154;
                  }
                  while (v154 != 32);
                  goto LABEL_282;
                case 1:
                  v156 = 0;
                  v157 = v137 + 64;
                  do
                  {
                    *(&__b + v156) |= *(_BYTE *)(v157 + v156);
                    ++v156;
                  }
                  while (v156 != 32);
                  goto LABEL_282;
                case 2:
                  for (j = 0; j != 32; ++j)
                    *(&__b + j) |= ~*(_BYTE *)(v137 + j);
                  v94 = 0;
                  v159 = v390 | 8;
                  goto LABEL_276;
                case 3:
                  for (k = 0; k != 32; ++k)
                    *(&__b + k) |= *(_BYTE *)(v137 + k);
                  v94 = 0;
                  v159 = v390 & 0xF7;
LABEL_276:
                  v390 = v159;
                  goto LABEL_283;
                case 4:
                  v161 = 0;
                  v162 = v137 + 160;
                  do
                  {
                    *(&__b + v161) |= ~*(_BYTE *)(v162 + v161);
                    ++v161;
                  }
                  while (v161 != 32);
                  goto LABEL_282;
                case 5:
                  v163 = 0;
                  v164 = v137 + 160;
                  do
                  {
                    *(&__b + v163) |= *(_BYTE *)(v164 + v163);
                    ++v163;
                  }
                  while (v163 != 32);
LABEL_282:
                  v94 = 0;
LABEL_283:
                  v92 += 2;
                  goto LABEL_179;
                case 8:
                case 9:
                  HIDWORD(v380) = 0;
                  v138 = get_ucp_0(&v384, (_DWORD *)&v380 + 1, a6);
                  if (v138 < 0)
                    goto LABEL_698;
                  v94 = 0;
                  if (HIDWORD(v380) == ((_DWORD)v90 == -14))
                    v139 = 4;
                  else
                    v139 = 3;
                  *v91 = v139;
                  v91[1] = v138;
                  v91 += 2;
                  v368 = 1;
                  goto LABEL_242;
                default:
                  if ((a1 & 0x40) != 0)
                  {
                    v321 = "invalid escape sequence in character class";
                    goto LABEL_697;
                  }
                  LODWORD(v90) = *v384;
                  break;
              }
            }
          }
        }
        else if ((_DWORD)v90 == 91)
        {
          v102 = v82[1];
          LODWORD(v90) = 91;
          if (v102 <= 0x3D && ((1 << v102) & 0x2400400000000000) != 0)
          {
            v103 = 0;
            v106 = v82[2];
            v104 = v82 + 2;
            v105 = v106;
            if (v106 == 94)
              v107 = v104 + 1;
            else
              v107 = v104;
            do
            {
              v108 = v107[v103];
              v109 = *(_BYTE *)(*(_QWORD *)(a12 + 24) + v107[v103++]);
            }
            while ((v109 & 2) != 0);
            if (v108 == v102 && v107[v103] == 93)
            {
              if (v102 != 58)
              {
                v321 = "POSIX collating elements are not supported";
                goto LABEL_697;
              }
              v334 = v91;
              v110 = 0;
              v111 = 0;
              v358 = *(_QWORD *)(a12 + 16);
              v384 = v107;
              while (posix_name_lengths_0[v111] + 1 != (_DWORD)v103
                   || cstdlib_strncmp((const char *)v107, (&posix_names_0)[v111], (v103 - 1)))
              {
                ++v111;
                v110 += 0x300000000;
                if (v111 == 14)
                  goto LABEL_695;
              }
              if ((v111 & 0x80000000) != 0)
              {
LABEL_695:
                v321 = "unknown POSIX class name";
                goto LABEL_697;
              }
              v140 = 0;
              if ((v364 & (v111 < 3)) != 0)
                v141 = 0;
              else
                v141 = v110 >> 32;
              v91 = v334;
              while (2)
              {
                v142 = cstdlib_strncmp((const char *)v107, "blank", 5uLL);
                if (((0x36DB6DB41B4uLL >> (v140 + v141)) & 1) != 0)
                {
LABEL_241:
                  v94 = 0;
                  v384 = &v107[v103];
                  v92 = 10;
                  a1 = v364;
                  goto LABEL_242;
                }
                v143 = posix_class_maps_0[v140 + v141];
                if (v105 == 94)
                {
                  v144 = 0;
                  if (v140)
                  {
                    v145 = v358 + v143;
                    do
                    {
                      *(&__b + v144) &= ~*(_BYTE *)(v145 + v144);
                      ++v144;
                    }
                    while (v144 != 32);
                  }
                  else
                  {
                    v149 = v358 + v143;
                    do
                    {
                      *(&__b + v144) |= ~*(_BYTE *)(v149 + v144);
                      ++v144;
                    }
                    while (v144 != 32);
                  }
                  if (!v142)
                  {
                    v148 = v390 | 0x3C;
LABEL_239:
                    v390 = v148;
                  }
                }
                else
                {
                  v146 = 0;
                  v147 = v358 + v143;
                  do
                  {
                    *(&__b + v146) |= *(_BYTE *)(v147 + v146);
                    ++v146;
                  }
                  while (v146 != 32);
                  if (!v142)
                  {
                    v148 = v390 & 0xC3;
                    goto LABEL_239;
                  }
                }
                if (++v140 == 3)
                  goto LABEL_241;
                continue;
              }
            }
            LODWORD(v90) = 91;
            a1 = v364;
          }
        }
        v114 = v384;
        if (v384[1] != 45)
          goto LABEL_173;
        v115 = v91;
        v116 = a1;
        v118 = v384 + 2;
        v117 = v384[2];
        if ((_DWORD)v117 != 93)
        {
          v384 += 2;
          if (v19 && (v117 & 0xC0) == 0xC0)
          {
            v119 = utf8_table4[v117 & 0x3F];
            LODWORD(v117) = (utf8_table3[v119] & v117) << (6 * v119);
            v120 = (char *)(v114 + 3);
            if (v119 <= 1)
              v121 = 1;
            else
              v121 = v119;
            v122 = 6 * v119 - 6;
            do
            {
              v123 = *v120++;
              v117 = ((v123 & 0x3F) << v122) | v117;
              v122 -= 6;
              --v121;
            }
            while (v121);
            v118 += v119;
            v384 = v118;
          }
          if ((_DWORD)v117 != 92)
            goto LABEL_171;
          v124 = v94;
          v125 = check_escape(&v384, a6, *a3, v116, 1);
          v94 = v124;
          v19 = v372;
          v117 = v125;
          if ((v125 & 0x80000000) == 0)
            goto LABEL_171;
          if ((_DWORD)v125 == -4)
          {
            v117 = 8;
            goto LABEL_171;
          }
          if ((_DWORD)v125 == -15)
          {
            v117 = 88;
LABEL_171:
            if ((_DWORD)v117 != (_DWORD)v90)
            {
              a1 = v116;
              if (v19)
              {
                if ((int)v117 > 255 || (v116 & ((int)v117 > 127)) != 0)
                {
                  if ((v116 & 1) == 0)
                  {
                    LODWORD(v130) = v117;
LABEL_197:
                    *v115 = 2;
                    v131 = (uint64_t)&v115[(int)ord2utf8(v90, (uint64_t)(v115 + 1)) + 1];
                    v132 = ord2utf8(v130, v131);
                    v94 = 0;
                    v368 = 1;
                    a1 = v116;
                    v91 = (char *)(v131 + v132);
                    goto LABEL_242;
                  }
                  v380 = 0;
                  v130 = v117;
                  v379 = v90;
                  while (1)
                  {
LABEL_246:
                    v150 = v130;
                    do
                    {
                      v130 = v150;
                      do
                      {
                        if (!get_othercase_range(&v379, v117, (_DWORD *)&v380 + 1, &v380))
                          goto LABEL_197;
                        v150 = v380;
                      }
                      while (SHIDWORD(v380) >= (int)v90 && (int)v380 <= (int)v130);
                      if (SHIDWORD(v380) < (int)v90 && (int)v380 >= (int)v90 - 1)
                      {
                        LODWORD(v90) = HIDWORD(v380);
                        goto LABEL_246;
                      }
                    }
                    while ((int)v380 > (int)v130 && SHIDWORD(v380) <= (int)v130 + 1);
                    v153 = (uint64_t)(v115 + 1);
                    if (HIDWORD(v380) == (_DWORD)v380)
                    {
                      *v115 = 1;
                    }
                    else
                    {
                      *v115 = 2;
                      v153 = (uint64_t)&v115[(int)ord2utf8(SHIDWORD(v380), (uint64_t)(v115 + 1)) + 1];
                    }
                    v115 = (char *)(v153 + (int)ord2utf8(v380, v153));
                  }
                }
              }
              if ((int)v90 <= (int)v117)
              {
                v133 = (int)v90;
                v93 = v90 - 1;
                v91 = v115;
                do
                {
                  v134 = v93++;
                  if (v93 >= 0)
                    v135 = v134 + 1;
                  else
                    v135 = v134 + 8;
                  *(&__b + (v135 >> 3)) |= 1 << (v93 & 7);
                  if ((a1 & 1) != 0)
                  {
                    v136 = *(unsigned __int8 *)(*(_QWORD *)(a12 + 8) + v133);
                    *(&__b + (v136 >> 3)) |= 1 << (v136 & 7);
                  }
                  ++v133;
                }
                while ((_DWORD)v117 != v93);
                v94 = 0;
                v92 = v117 + v92 + 1 - v90;
              }
              else
              {
                v94 = 0;
                v91 = v115;
              }
              goto LABEL_179;
            }
          }
          else
          {
            v384 = v118 - 2;
          }
        }
        a1 = v116;
        v91 = v115;
        goto LABEL_173;
      }
      v386 = 1;
      if (!v18)
        goto LABEL_696;
LABEL_89:
      v54 = HIDWORD(v386) != v386;
      v55 = v374;
      if (!HIDWORD(v386))
        v55 = v21;
      v374 = v55;
      v56 = v376;
      if (!HIDWORD(v386))
        v56 = v20;
      v376 = v56;
      v385 = v18;
      v57 = v384[1];
      if (v57 == 43)
      {
        v58 = 0;
        ++v384;
      }
      else
      {
        v58 = v355;
        if (v57 == 63)
        {
          ++v384;
          v58 = v348;
        }
      }
      v59 = *v18;
      if (v59 == 63)
      {
        v60 = v21;
        v61 = v17;
        v62 = v15;
        v63 = v57;
        v64 = a1;
        v65 = HIDWORD(v386) != v386;
        v66 = v20;
        v67 = v58;
        cstdlib_memmove(v18 + 3, v18, 3uLL);
        v58 = v67;
        v20 = v66;
        v54 = v65;
        a1 = v64;
        v57 = v63;
        v15 = v62;
        v21 = v60;
        v17 = v61;
        v19 = v372;
        *v18 = 80;
        v68 = v28 + 3 - (_WORD)v18;
        v18[1] = HIBYTE(v68);
        v18[2] = v68;
        *(_BYTE *)(v28 + 3) = 66;
        *(_BYTE *)(v28 + 4) = HIBYTE(v68);
        *(_BYTE *)(v28 + 5) = v68;
        v28 += 6;
        v59 = *v18;
      }
      v367 = v57;
      if (v59 - 21 < 2)
      {
        if (v19 && *(char *)(v28 - 1) < 0)
        {
          v357 = v58;
          v69 = v54;
          v70 = v20;
          v71 = v21;
          v72 = v17;
          v73 = 0;
          do
            v74 = *(_BYTE *)(v28 + v73-- - 1) & 0xC0;
          while (v74 == 128);
          v75 = -v73;
          cstdlib_memcpy(&__dst, (const void *)(v28 + v73), -(int)v73);
          v76 = 0;
          v77 = v75 | 0x80;
          v59 = *v18;
          v19 = v372;
          v17 = v72;
          v21 = v71;
          v20 = v70;
          v54 = v69;
          v58 = v357;
        }
        else
        {
          v77 = *(unsigned __int8 *)(v28 - 1);
          v76 = 0;
          if (SHIDWORD(v386) >= 2)
            v374 = *(_DWORD *)(a12 + 72) | v77 | v373;
        }
LABEL_316:
        v78 = a1;
        if (v59 - 13 > 1)
          v79 = -1;
        else
          v79 = v18[1];
LABEL_319:
        v174 = v386;
        if (!(_DWORD)v386)
        {
          a1 = v78;
          goto LABEL_503;
        }
        if ((_DWORD)v386 != 1)
          *(_DWORD *)(a12 + 76) = 1;
        v175 = v76 + v58;
        if (HIDWORD(v386) != 1)
        {
          if (!HIDWORD(v386))
          {
            if (v174 != 1)
            {
              if (v174 == -1)
              {
                v176 = v175 + 24;
                goto LABEL_388;
              }
              *v18 = v175 + 30;
              v18[1] = BYTE1(v386);
              v18[2] = v386;
              v177 = (unsigned __int8 *)(v18 + 3);
LABEL_493:
              v15 = v388;
              if (v19 && v77 >= 128)
              {
                v236 = v20;
                v237 = v21;
                v238 = v17;
                cstdlib_memcpy(v177, &__dst, v77 & 7);
                v21 = v237;
                v20 = v236;
                v17 = v238;
                v19 = v372;
                v184 = &v177[v77 & 7];
              }
              else
              {
                *v177 = v77;
                v184 = v177 + 1;
              }
              if ((v79 & 0x80000000) == 0)
                *v184++ = v79;
              a1 = v78;
              v57 = v367;
LABEL_500:
              if (v57 == 43)
              {
                v239 = v54;
                v240 = v385;
                v241 = (_DWORD)v184 - (_DWORD)v385;
                v242 = v21;
                v243 = v20;
                v244 = v17;
                cstdlib_memmove(v385 + 3, v385, (int)v184 - (int)v385);
                v21 = v242;
                v17 = v244;
                v20 = v243;
                v19 = v372;
                *v240 = 74;
                v54 = v239;
                v184[3] = 66;
                v184[4] = (unsigned __int16)(v241 + 3) >> 8;
                v184[5] = v241 + 3;
                v18 = (char *)(v184 + 6);
                *(_WORD *)(v385 + 1) = bswap32(v241 + 3) >> 16;
              }
              else
              {
                v18 = (char *)v184;
              }
LABEL_503:
              v28 = 0;
              *(_DWORD *)(a12 + 72) |= v54 << 9;
              v14 = (unsigned __int8 *)v18;
              goto LABEL_644;
            }
            v176 = v175 + 28;
LABEL_388:
            *v18 = v176;
            v177 = (unsigned __int8 *)(v18 + 1);
            goto LABEL_493;
          }
          *v18 = v76 | 0x20;
          v18[1] = BYTE5(v386);
          v18[2] = BYTE4(v386);
          v177 = (unsigned __int8 *)(v18 + 3);
          if ((v386 & 0x80000000) != 0)
          {
            if (v19 && v77 >= 128)
            {
              v195 = v21;
              v196 = v20;
              v197 = v17;
              cstdlib_memcpy(v177, &__dst, v77 & 7);
              v21 = v195;
              v17 = v197;
              v20 = v196;
              v19 = v372;
              v198 = &v177[v77 & 7];
            }
            else
            {
              v18[3] = v77;
              if (v79 < 0)
              {
                v198 = (unsigned __int8 *)(v18 + 4);
              }
              else
              {
                v198 = (unsigned __int8 *)(v18 + 5);
                v18[4] = v79;
              }
            }
            *v198 = v175 + 24;
            v177 = v198 + 1;
            goto LABEL_493;
          }
          if ((_DWORD)v386 == HIDWORD(v386))
            goto LABEL_493;
          if (v19 && v77 >= 128)
          {
            v178 = v21;
            v179 = v20;
            v180 = v17;
            cstdlib_memcpy(v177, &__dst, v77 & 7);
            v21 = v178;
            v17 = v180;
            v20 = v179;
            v19 = v372;
            v181 = &v177[v77 & 7];
            if (v79 < 0)
              goto LABEL_440;
LABEL_439:
            *v181++ = v79;
          }
          else
          {
            v181 = (unsigned __int8 *)(v18 + 4);
            v18[3] = v77;
            if ((v79 & 0x80000000) == 0)
              goto LABEL_439;
          }
LABEL_440:
          LODWORD(v386) = v386 - HIDWORD(v386);
          *v181 = v175 + 30;
          v181[1] = BYTE1(v386);
          v181[2] = v386;
          v177 = v181 + 3;
          goto LABEL_493;
        }
        if (v174 != 1)
        {
          if (v174 != -1)
          {
            *(_BYTE *)v28 = v175 + 30;
            *(_BYTE *)(v28 + 1) = (unsigned __int16)(v386 - 1) >> 8;
            *(_BYTE *)(v28 + 2) = v386 - 1;
            v177 = (unsigned __int8 *)(v28 + 3);
            goto LABEL_493;
          }
          v176 = v175 + 26;
          goto LABEL_388;
        }
        v18 = (char *)v28;
        a1 = v78;
LABEL_391:
        v15 = v388;
        goto LABEL_503;
      }
      if (v59 == 23)
      {
        v78 = a1;
        v77 = v18[1];
        v79 = -1;
        v76 = 9;
        goto LABEL_319;
      }
      if (v59 <= 0xF)
      {
        v76 = 18;
        v77 = v59;
        goto LABEL_316;
      }
      if (v59 - 59 <= 3)
      {
        v182 = v386;
        if (!(_DWORD)v386)
          goto LABEL_503;
        if ((_DWORD)v386 == 1)
        {
          if (HIDWORD(v386))
          {
LABEL_341:
            *(_BYTE *)v28 = v58 + 57;
            *(_BYTE *)(v28 + 1) = BYTE5(v386);
            *(_BYTE *)(v28 + 2) = BYTE4(v386);
            v183 = v386;
            if ((_DWORD)v386 == -1)
              v183 = 0;
            LODWORD(v386) = v183;
            *(_BYTE *)(v28 + 3) = BYTE1(v183);
            *(_BYTE *)(v28 + 4) = v386;
            v184 = (unsigned __int8 *)(v28 + 5);
            goto LABEL_500;
          }
          v226 = v58 + 55;
        }
        else
        {
          *(_DWORD *)(a12 + 76) = 1;
          if (v182 != -1 || HIDWORD(v386))
          {
            if (v182 != -1 || HIDWORD(v386) != 1)
              goto LABEL_341;
            v226 = v58 + 53;
          }
          else
          {
            v226 = v58 + 51;
          }
        }
        *(_BYTE *)v28 = v226;
        v184 = (unsigned __int8 *)(v28 + 1);
        goto LABEL_500;
      }
      if (v59 <= 0x4F && (v59 & 0xFE) != 0x4A)
      {
        v321 = "internal error: unexpected repeat";
        goto LABEL_697;
      }
      v199 = v386;
      v365 = a1;
      if ((_DWORD)v386 == -1)
      {
        v216 = v18;
        do
          v216 += __rev16(*(unsigned __int16 *)(v216 + 1));
        while (*v216 != 66);
        v200 = (_DWORD)v216 - v28;
      }
      else
      {
        v200 = 0;
      }
      v217 = v28 - (_DWORD)v18;
      v218 = HIDWORD(v386);
      if (HIDWORD(v386))
      {
        v184 = (unsigned __int8 *)v28;
        if (SHIDWORD(v386) > 1)
        {
          v359 = v58;
          v350 = v21;
          v219 = v20;
          v220 = v17;
          v221 = v374;
          if ((v374 & 0x80000000) != 0 && v347)
            v221 = v376;
          v374 = v221;
          v223 = 1;
          v184 = (unsigned __int8 *)v28;
          do
          {
            cstdlib_memcpy(v184, v18, v217);
            v184 += v217;
            ++v223;
            v218 = HIDWORD(v386);
          }
          while (v223 < SHIDWORD(v386));
          v199 = v386;
          v19 = v372;
          v17 = v220;
          v20 = v219;
          v21 = v350;
          v57 = v367;
          v58 = v359;
        }
        v224 = 0;
        if (v199 >= 1)
        {
          v199 -= v218;
          LODWORD(v386) = v199;
        }
        __srca = v18;
        if ((v199 & 0x80000000) == 0)
          goto LABEL_478;
      }
      else
      {
        if (!(_DWORD)v386)
        {
          a1 = a1;
          goto LABEL_391;
        }
        v225 = v58;
        v351 = v21;
        v360 = v17;
        *(_BYTE *)v28 = 0;
        if (v199 > 1)
        {
          adjust_recurse((unsigned __int8 *)v18, 4, v344, a12);
          __srca = v18 + 4;
          cstdlib_memmove(v18 + 4, v18, v217);
          v184 = (unsigned __int8 *)(v28 + 4);
          v224 = (uint64_t)(v18 + 2);
          *(_WORD *)(v18 + 1) = 80;
          v18[3] = 0;
        }
        else
        {
          adjust_recurse((unsigned __int8 *)v18, 1, v344, a12);
          __srca = v18 + 1;
          cstdlib_memmove(v18 + 1, v18, v217);
          v224 = 0;
          v184 = (unsigned __int8 *)(v28 + 1);
        }
        v58 = v225;
        *v18 = v225 + 77;
        v199 = v386 - 1;
        LODWORD(v386) = v199;
        v19 = v372;
        v17 = v360;
        v21 = v351;
        if ((v199 & 0x80000000) == 0)
        {
LABEL_478:
          if (v199)
          {
            v331 = v54;
            v352 = v21;
            v335 = v20;
            v361 = v17;
            v227 = v58 + 77;
            *v184 = v58 + 77;
            v228 = v184 + 1;
            v229 = v199 - 1;
            if (v199 == 1)
            {
              v234 = v217;
              v232 = __srca;
            }
            else
            {
              v230 = (_WORD)v184 + 2;
              v231 = v28 - (_WORD)v18 + 4;
              v232 = __srca;
              do
              {
                v233 = v230 - v224;
                if (!v224)
                  v233 = 0;
                v228[1] = HIBYTE(v233);
                v224 = (uint64_t)(v228 + 1);
                *v228 = 80;
                v228[2] = v233;
                cstdlib_memcpy(v228 + 3, __srca, v217);
                v228 += v217 + 4;
                *(v228 - 1) = v227;
                v230 += v231;
                --v229;
              }
              while (v229);
              v224 = (uint64_t)&v228[-v217 - 3];
              v234 = v217;
              v57 = v367;
            }
            cstdlib_memcpy(v228, v232, v234);
            v184 = &v228[v234];
            v15 = v388;
            v19 = v372;
            v17 = v361;
            v20 = v335;
            v21 = v352;
            v54 = v331;
          }
          else
          {
            v15 = v388;
          }
          a1 = v365;
          if (v224)
          {
            v250 = (_DWORD)v184 + 1;
            do
            {
              v251 = v250 - v224;
              v252 = &v184[-(v250 - (int)v224)];
              v253 = __rev16(*(unsigned __int16 *)(v252 + 1));
              *v184 = 66;
              v254 = (v250 - v224) >> 8;
              v184[1] = (unsigned __int16)(v250 - v224) >> 8;
              v184[2] = v250 - v224;
              if ((_DWORD)v253)
                v255 = v224 == 0;
              else
                v255 = 1;
              v224 -= v253;
              v184 += 3;
              v252[1] = v254;
              v252[2] = v251;
              v250 += 3;
            }
            while (!v255);
          }
          goto LABEL_500;
        }
      }
      v184[v200] = v58 + 67;
      a1 = v365;
      v15 = v388;
      goto LABEL_500;
    }
    if ((_DWORD)v22 == 94)
    {
      v165 = v376;
      if (v376 == -2)
        v166 = -1;
      else
        v166 = v376;
      if ((a1 & 2) != 0)
        v165 = v166;
      v376 = v165;
      v37 = 19;
LABEL_292:
      *(_BYTE *)v28 = v37;
      v14 = (unsigned __int8 *)(v28 + 1);
      v28 = 0;
      goto LABEL_644;
    }
    if ((_DWORD)v22 == 123)
    {
      if ((v23 & 1) == 0)
      {
        v387 = 123;
        goto LABEL_355;
      }
      v42 = v21;
      v43 = v17;
      repeat_counts_0 = read_repeat_counts_0(v384 + 1, (int *)&v386 + 1, (int *)&v386, a6);
      v17 = v43;
      v19 = v372;
      v384 = repeat_counts_0;
      v21 = v42;
      if (*a6)
        goto LABEL_698;
LABEL_79:
      if (!v18)
      {
LABEL_696:
        v321 = "nothing to repeat";
        goto LABEL_697;
      }
      goto LABEL_89;
    }
    if ((_DWORD)v22 != 124)
      goto LABEL_25;
LABEL_658:
    v305 = v384;
    v306 = *v340;
    v308 = v338 < 0 || v338 == v376;
    if (v339 >= 0)
      v309 = v339;
    else
      v309 = v338;
    v310 = !v308;
    if (v308)
      v311 = v338;
    else
      v311 = -1;
    if (!v310)
      v309 = v339;
    if ((v374 & 0x80000000) != 0 && (int)v376 > -1 && v311 < 0)
      v314 = v376;
    else
      v314 = v374;
    v315 = v314 ^ v309;
    v316 = v314 | v309;
    if ((v315 & 0xFFFFFDFF) != 0)
      v316 = -1;
    if (v306 == 65)
      v317 = v311;
    else
      v317 = v376;
    if (v306 == 65)
      v318 = v316;
    else
      v318 = v374;
    v338 = v317;
    v339 = v318;
    if (a7)
    {
      *(_BYTE *)v28 = 0;
      fixedlength = find_fixedlength((uint64_t)v340, a1);
      v320 = fixedlength;
      if ((fixedlength & 0x80000000) == 0)
      {
        *v341 = bswap32(fixedlength) >> 16;
        goto LABEL_692;
      }
      result = 0;
      if (v320 == -2)
        v330 = "\\C not allowed in lookbehind assertion";
      else
        v330 = "lookbehind assertion is not fixed length";
      *a6 = v330;
      *a5 = v305;
    }
    else
    {
LABEL_692:
      if (*v305 == 124)
      {
        *(_BYTE *)v28 = 65;
        *(_BYTE *)(v28 + 1) = (unsigned __int16)(v28 - (_WORD)v340) >> 8;
        *(_BYTE *)(v28 + 2) = v28 - (_BYTE)v340;
        v378 = v28;
        v14 = (unsigned __int8 *)(v28 + 3);
        v16 = v305 + 1;
        v340 = (unsigned __int8 *)v28;
        a2 = v337;
        continue;
      }
      v323 = v340;
      v324 = v28 - (_DWORD)v340;
      do
      {
        v325 = __rev16(*(unsigned __int16 *)(v323 + 1));
        *(_WORD *)(v323 + 1) = bswap32(v324) >> 16;
        v323 -= v325;
        v324 = v325;
      }
      while ((_DWORD)v325);
      *(_BYTE *)v28 = 66;
      *(_BYTE *)(v28 + 1) = (unsigned __int16)(v28 - v333) >> 8;
      *(_BYTE *)(v28 + 2) = v28 - v333;
      v326 = v28 + 3;
      if ((a1 & 7) == v337)
      {
        v327 = a4;
        v329 = v338;
        v328 = v339;
      }
      else
      {
        v327 = a4;
        v329 = v338;
        v328 = v339;
        if (*v305 == 41)
        {
          *(_BYTE *)(v28 + 3) = 18;
          v326 = v28 + 5;
          *(_BYTE *)(v28 + 4) = v337;
        }
      }
      *v327 = v326;
      *a5 = v305;
      *a9 = v329;
      result = 1;
      *a10 = v328;
    }
    return result;
  }
}

uint64_t is_anchored_0(uint64_t a1, _DWORD *a2, int a3, int a4)
{
  int v6;
  unsigned __int8 *significant_code_0;
  unsigned int v8;
  uint64_t v10;

  v6 = a4 & a3;
  while (1)
  {
    significant_code_0 = first_significant_code_0((unsigned __int8 *)(a1 + 3), a2, 2, 0);
    v8 = *significant_code_0;
    if (v8 < 0x51 && (v8 - 69 > 0xB || ((1 << (v8 - 69)) & 0x861) == 0))
      break;
    if (!is_anchored_0())
      return 0;
LABEL_8:
    a1 += __rev16(*(unsigned __int16 *)(a1 + 1));
    if (*(_BYTE *)a1 != 65)
      return 1;
  }
  if ((v8 & 0xFE) != 0x2A)
  {
    if (v8 - 3 <= 0xFFFFFFFD)
    {
      v10 = 0;
      if (v8 != 19 || (*a2 & 2) != 0)
        return v10;
    }
    goto LABEL_8;
  }
  if ((*(_BYTE *)a2 & 4) != 0)
  {
    v10 = 0;
    if (v6 || significant_code_0[1] != 11)
      return v10;
    goto LABEL_8;
  }
  return 0;
}

uint64_t find_firstassertedchar(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v6;
  unsigned __int8 *significant_code_0;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t firstassertedchar;
  int v12;

  v6 = 0xFFFFFFFFLL;
  do
  {
    significant_code_0 = first_significant_code_0((unsigned __int8 *)(a1 + 3), a2, 1, 1);
    v8 = *significant_code_0;
    if (v8 >= 0x50)
      v8 = 80;
    result = 0xFFFFFFFFLL;
    v10 = v8 - 21;
    if (v10 > 0x3B)
      break;
    if (((1 << (v8 - 21)) & 0x63) != 0)
      goto LABEL_14;
    if (((1 << (v8 - 21)) & 0x861000000000000) == 0)
    {
      if (v10 != 11)
        return result;
      significant_code_0 += 2;
LABEL_14:
      if (!a3)
        return result;
      v12 = significant_code_0[1];
      if ((v6 & 0x80000000) != 0)
      {
        v6 = v12 & 0xFFFFFEFF | ((*a2 & 1) << 8);
      }
      else if ((_DWORD)v6 != v12)
      {
        return result;
      }
      goto LABEL_19;
    }
    firstassertedchar = find_firstassertedchar(significant_code_0, a2, v8 == 69);
    if ((firstassertedchar & 0x80000000) != 0)
      return 0xFFFFFFFFLL;
    if ((v6 & 0x80000000) != 0)
    {
      v6 = firstassertedchar;
    }
    else if ((_DWORD)v6 != (_DWORD)firstassertedchar)
    {
      return 0xFFFFFFFFLL;
    }
LABEL_19:
    a1 += __rev16(*(unsigned __int16 *)(a1 + 1));
    result = v6;
  }
  while (*(_BYTE *)a1 == 65);
  return result;
}

uint64_t is_startline_0(uint64_t a1, int a2, int a3)
{
  int v4;
  unsigned __int8 *significant_code_0;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;

  v4 = a3 & a2;
  while (1)
  {
    significant_code_0 = first_significant_code_0((unsigned __int8 *)(a1 + 3), 0, 0, 0);
    v6 = *significant_code_0;
    if (v6 >= 0x51 || (v6 - 69 <= 0xB ? (v7 = ((1 << (v6 - 69)) & 0x861) == 0) : (v7 = 1), !v7))
    {
      if (!is_startline_0())
        return 0;
      goto LABEL_8;
    }
    if ((v6 & 0xFE) == 0x2A)
    {
      v8 = 0;
      if (v4 || significant_code_0[1] != 11)
        return v8;
      goto LABEL_8;
    }
    if (v6 != 19)
      return 0;
LABEL_8:
    a1 += __rev16(*(unsigned __int16 *)(a1 + 1));
    if (*(_BYTE *)a1 != 65)
      return 1;
  }
}

uint64_t nuance_pcre_exec(_QWORD *a1, int a2, uint64_t a3, int *a4, char *a5, int a6, int a7, unsigned int a8, _DWORD *a9, int a10)
{
  return nuance_pcre_exec2(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0);
}

uint64_t nuance_pcre_exec2(_QWORD *a1, int a2, uint64_t a3, int *a4, char *a5, int a6, int a7, unsigned int a8, _DWORD *a9, int a10, uint64_t (*a11)(__int128 *))
{
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  int32x4_t v21;
  char *v22;
  int v23;
  __int128 *v24;
  char *v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  unsigned int v29;
  char *v30;
  int8x16_t v31;
  int8x16_t v32;
  char *v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  char v37;
  uint64_t v38;
  char *v39;
  unsigned int v40;
  char *v41;
  unint64_t v42;
  char *v43;
  int v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  int v49;
  int v50;
  __int16 v51;
  char *v52;
  BOOL v53;
  char *v54;
  int64_t v55;
  char *v56;
  int64_t v57;
  unsigned __int8 *v59;
  int v60;
  int64_t v62;
  uint64_t v63;
  BOOL v64;
  int v65;
  char v66;
  BOOL v67;
  uint64_t v68;
  _BOOL8 v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  __int128 *v73;
  __int128 *v74;
  char v75;
  char *v76;
  char *v77;
  char *v78;
  int v79;
  _OWORD v80[3];
  uint64_t v81;
  uint64_t v82;
  void *__b[2];
  __int128 v84;
  _OWORD v85[2];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _OWORD v91[2];
  uint64_t v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  if ((safeh_HandleCheck((uint64_t)a1, a2, 56663, 32) & 0x80000000) != 0)
    return 4294967280;
  pcre_clearMem(a1);
  if ((a8 & 0xFFFF5A6F) != 0)
    return 4294967293;
  result = 4294967294;
  if (a3 && a5 && (a9 || a10 <= 0))
  {
    if (a10 < 0)
      return 4294967281;
    v21 = 0uLL;
    v89 = 0u;
    v87 = 0u;
    v88 = 0u;
    v86 = 0u;
    v84 = 0u;
    memset(v85, 0, sizeof(v85));
    v81 = 0;
    *(_OWORD *)__b = 0u;
    v82 = 10000000;
    v90 = 0uLL;
    v22 = *(char **)(a3 + 32);
    if (!a4)
    {
      v24 = 0;
      goto LABEL_21;
    }
    v23 = *a4;
    if ((*a4 & 1) != 0)
      v24 = (__int128 *)*((_QWORD *)a4 + 1);
    else
      v24 = 0;
    if ((v23 & 2) != 0)
    {
      v82 = *((_QWORD *)a4 + 2);
      if ((v23 & 4) == 0)
      {
LABEL_19:
        if ((v23 & 8) == 0)
          goto LABEL_21;
        goto LABEL_20;
      }
    }
    else if ((v23 & 4) == 0)
    {
      goto LABEL_19;
    }
    *(_QWORD *)&v90 = *((_QWORD *)a4 + 3);
    if ((v23 & 8) == 0)
    {
LABEL_21:
      v92 = 0;
      memset(v91, 0, sizeof(v91));
      memset(v80, 0, sizeof(v80));
      if (v22)
        v25 = v22;
      else
        v25 = (char *)&pcre_default_tables;
      if (*(_DWORD *)a3 == 1346589253)
      {
        v26 = a3;
      }
      else
      {
        v76 = v25;
        v27 = v24;
        v28 = try_flipped((__int128 *)a3, (uint64_t)v80, v24, (uint64_t)v91);
        if (!v28)
          return 4294967292;
        v26 = v28;
        if (v27)
          v24 = v91;
        else
          v24 = 0;
        v25 = v76;
      }
      v29 = *(_DWORD *)(v26 + 8);
      *(_QWORD *)&v86 = a3
                      + *(unsigned __int16 *)(v26 + 24)
                      + *(unsigned __int16 *)(v26 + 26) * (unint64_t)*(unsigned __int16 *)(v26 + 28);
      *((_QWORD *)&v86 + 1) = a5;
      LODWORD(v89) = a7;
      v30 = &a5[a6];
      v21.i64[0] = __PAIR64__(v29, a8);
      *(_QWORD *)&v87 = v30;
      v31.i64[0] = 0x100000001;
      v31.i64[1] = 0x100000001;
      v32 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vzip1q_s32(v21, v21), (uint32x4_t)xmmword_214F74DA0), v31);
      *(int8x16_t *)((char *)v85 + 4) = v32;
      DWORD1(v85[1]) = (a8 >> 10) & 1;
      *((_QWORD *)&v85[1] + 1) = a8 >> 15;
      *((_QWORD *)&v89 + 1) = 0;
      *(_QWORD *)&v84 = v25;
      *((_QWORD *)&v84 + 1) = v25 + 832;
      if (a8 >= 0x8000 && (v29 & 0x4000000) != 0)
        return 4294967283;
      v72 = v29;
      v33 = &a5[a7];
      if ((a8 & 0x2000) == 0 && v32.i32[2])
      {
        v73 = v24;
        v77 = v25;
        if ((valid_utf8(a5, a6) & 0x80000000) == 0)
          return 4294967286;
        v24 = v73;
        v25 = v77;
        if (a7 >= 1 && a7 < a6 && *v33 < -64)
          return 4294967285;
      }
      v34 = *(unsigned __int16 *)(v26 + 18);
      v35 = a10 / 3u;
      if (*(_WORD *)(v26 + 18))
        v36 = v35 > v34;
      else
        v36 = 1;
      v37 = v36;
      v66 = v37;
      if (v36)
      {
        LODWORD(v38) = 3 * v35;
        __b[0] = a9;
        v39 = (char *)a9;
      }
      else
      {
        v74 = v24;
        v78 = v25;
        v38 = 3 * v34 + 3;
        v39 = (char *)heap_Calloc(*(_QWORD **)(*a1 + 8), 1, 4 * v38);
        __b[0] = v39;
        if (!v39)
          return 4294967290;
        v24 = v74;
        v25 = v78;
      }
      v75 = v72 | a8;
      LODWORD(__b[1]) = v38;
      HIDWORD(__b[1]) = 2 * (int)v38 / 3u;
      LODWORD(v85[0]) = 0;
      HIDWORD(v88) = -1;
      v40 = 2 * *(unsigned __int16 *)(v26 + 16) + 2;
      if (v40 > a10)
        v40 = v38;
      v79 = v40;
      if (v39 && v40 >= 4)
      {
        v41 = &v39[4 * v38];
        v42 = (unint64_t)&v41[-4 * (v40 >> 1) + 4];
        v43 = v41 - 4;
        do
        {
          *(_DWORD *)v43 = -1;
          v43 -= 4;
        }
        while ((unint64_t)v43 >= v42);
      }
      v44 = *(_DWORD *)(v26 + 8);
      if (((v72 | a8) & 0x10) == 0)
      {
        if ((v44 & 0x40000000) != 0)
        {
          v46 = *(_WORD *)(v26 + 20);
          if ((*(_WORD *)(v26 + 20) & 0x100) != 0)
          {
            v45 = 0;
            LODWORD(v46) = *(unsigned __int8 *)(v84 + v46);
            v71 = 1;
          }
          else
          {
            v71 = 0;
            v45 = 0;
          }
        }
        else
        {
          v45 = 0;
          v71 = 0;
          LODWORD(v46) = -1;
          if ((v72 & 0x10000000) == 0 && v24)
          {
            v71 = 0;
            if ((*((_BYTE *)v24 + 4) & 1) != 0)
              v45 = (char *)v24 + 8;
            else
              v45 = 0;
            goto LABEL_71;
          }
        }
LABEL_72:
        v47 = v33 - 1;
        v48 = a6;
        if ((v44 & 0x20000000) != 0)
        {
          v51 = *(_WORD *)(v26 + 22);
          v49 = v51;
          v50 = v25[v51 + 256];
          v67 = (v51 & 0x100) == 0;
        }
        else
        {
          v67 = 1;
          v49 = -1;
          v50 = -1;
        }
        v68 = a7;
        v69 = (int)v46 >= 0;
        v52 = &a5[v48];
        v70 = 4 * v79;
        while (1)
        {
          if (__b[0])
            v53 = v79 < 1;
          else
            v53 = 1;
          if (!v53)
          {
            v54 = (char *)__b[0] + v70;
            if ((char *)__b[0] + v70 <= (char *)__b[0] + 4)
              v54 = (char *)__b[0] + 4;
            memset(__b[0], 255, ((unint64_t)&v54[~(uint64_t)__b[0]] & 0xFFFFFFFFFFFFFFFCLL) + 4);
          }
          if ((v46 & 0x80000000) == 0)
            break;
          if ((v72 & 0x10000000) != 0)
          {
            if ((unint64_t)v33 > *((_QWORD *)&v86 + 1) + v68 && v33 < v30)
            {
              v62 = v52 - v33;
              while (*(v33 - 1) != 10)
              {
                ++v33;
                if (!--v62)
                {
LABEL_124:
                  v56 = v52;
                  if ((v49 & 0x80000000) == 0)
                    goto LABEL_107;
                  goto LABEL_125;
                }
              }
            }
            goto LABEL_105;
          }
          if (!v45)
            goto LABEL_105;
          do
          {
            v56 = v33;
            if (v33 >= v30)
              break;
            ++v33;
          }
          while (((v45[(unint64_t)*v56 >> 3] >> (*v56 & 7)) & 1) == 0);
LABEL_106:
          if ((v49 & 0x80000000) == 0)
          {
LABEL_107:
            if (v30 - v56 <= 999 && !DWORD2(v85[1]))
            {
              v59 = (unsigned __int8 *)&v56[v69];
              if (&v56[v69] > v47)
              {
                if (v67)
                {
                  do
                  {
                    v47 = (char *)v59;
                    if (v59 >= (unsigned __int8 *)v30)
                      break;
                    ++v59;
                  }
                  while (v49 != *v47);
                }
                else
                {
                  do
                  {
                    v47 = (char *)v59;
                    if (v59 >= (unsigned __int8 *)v30)
                      break;
                    ++v59;
                    v60 = *v47;
                  }
                  while (v49 != v60 && v50 != v60);
                }
                if (v47 >= v30)
                  goto LABEL_134;
              }
            }
          }
LABEL_125:
          *((_QWORD *)&v87 + 1) = v56;
          v81 = 0;
          result = match_2((uint64_t)a1, (uint64_t)v56, v86, (uint64_t)&v81, v72 & 7, a11, v18, v19);
          if ((_DWORD)result)
          {
            if ((_DWORD)result == 1)
            {
              if ((v66 & 1) == 0)
              {
                if (a10 >= 4)
                  cstdlib_memcpy(a9 + 2, (char *)__b[0] + 8, 4 * (a10 - 2));
                if (SDWORD2(v88) > a10)
                  LODWORD(v85[0]) = 1;
                heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)__b[0]);
              }
              if (LODWORD(v85[0]))
                result = 0;
              else
                result = (SDWORD2(v88) / 2);
              if (a10 >= 2)
              {
                v65 = v88 - DWORD2(v86);
                *a9 = (_DWORD)v56 - DWORD2(v86);
                a9[1] = v65;
              }
              else
              {
                return 0;
              }
            }
            return result;
          }
          v33 = v56 + 1;
          if (HIDWORD(v85[0]) && v33 < v30)
          {
            v63 = v52 - 1 - v56;
            while ((*v33 & 0xC0) == 0x80)
            {
              ++v33;
              if (!--v63)
              {
                v33 = v30;
                break;
              }
            }
          }
          if ((v75 & 0x10) != 0 || v33 > v30)
          {
LABEL_134:
            if ((v66 & 1) == 0)
              heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)__b[0]);
            if (HIDWORD(v85[1]))
              v64 = DWORD2(v85[1]) == 0;
            else
              v64 = 1;
            if (v64)
              return 0xFFFFFFFFLL;
            else
              return 4294967284;
          }
        }
        if ((v71 & 1) != 0)
        {
          if (v33 < v30)
          {
            v55 = v52 - v33;
            while ((_DWORD)v46 != *(unsigned __int8 *)(v84 + *v33))
            {
              ++v33;
              if (!--v55)
                goto LABEL_124;
            }
          }
        }
        else if (v33 < v30)
        {
          v57 = v52 - v33;
          while ((_DWORD)v46 != *v33)
          {
            ++v33;
            if (!--v57)
              goto LABEL_124;
          }
        }
LABEL_105:
        v56 = v33;
        goto LABEL_106;
      }
      v71 = 0;
      v45 = 0;
LABEL_71:
      LODWORD(v46) = -1;
      goto LABEL_72;
    }
LABEL_20:
    v22 = (char *)*((_QWORD *)a4 + 4);
    goto LABEL_21;
  }
  return result;
}

_QWORD *pcre_clearMem(_QWORD *result)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = result;
  if (*((unsigned __int16 *)result + 8) >= 2u)
  {
    v2 = 1;
    do
    {
      v3 = *(uint64_t **)(v1[1] + 8 * v2);
      if (v3)
      {
        heap_Free(*(_QWORD **)(*v1 + 8), *v3);
        v5 = *v1;
        v4 = v1[1];
        **(_QWORD **)(v4 + 8 * v2) = 0;
        heap_Free(*(_QWORD **)(v5 + 8), *(_QWORD *)(*(_QWORD *)(v4 + 8 * v2) + 16));
        v6 = v1[1];
        *(_QWORD *)(*(_QWORD *)(v6 + 8 * v2) + 16) = 0;
        v7 = *(_QWORD *)(v6 + 8 * v2);
      }
      else
      {
        v7 = 0;
      }
      result = heap_Free(*(_QWORD **)(*v1 + 8), v7);
      *(_QWORD *)(v1[1] + 8 * v2++) = 0;
    }
    while (v2 < *((unsigned __int16 *)v1 + 8));
  }
  *((_WORD *)v1 + 8) = 1;
  *((_DWORD *)v1 + 6) = 0;
  *((_WORD *)v1 + 14) = 0;
  return result;
}

uint64_t match_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(__int128 *), uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned __int8 *v30;
  int i;
  unsigned __int8 *v32;
  int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t **v45;
  uint64_t v46;
  int v47;
  unsigned __int8 *v48;
  int v49;
  int v50;
  uint64_t *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  BOOL v54;
  int v55;
  unsigned __int8 *v56;
  int v57;
  int v58;
  int v59;
  unsigned __int8 *v60;
  unsigned int v61;
  int v62;
  int v63;
  _BYTE *v64;
  uint64_t v65;
  char v66;
  uint64_t *v67;
  char *v68;
  char v69;
  unint64_t v70;
  unsigned __int8 *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  char *v75;
  char v76;
  const void *v77;
  uint64_t v78;
  int v79;
  uint64_t *v80;
  uint64_t *v81;
  unint64_t v82;
  int v83;
  unsigned __int8 *v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  unsigned __int8 *v88;
  int v89;
  unsigned __int8 *v90;
  int v91;
  unint64_t v92;
  unsigned __int8 *v93;
  unsigned __int8 *v94;
  int v95;
  int v96;
  int v97;
  unsigned int v98;
  int v99;
  unsigned __int8 *v100;
  int v101;
  int v102;
  unsigned __int8 *v103;
  int v104;
  uint64_t v105;
  uint64_t *v106;
  char *v107;
  char v108;
  unint64_t v109;
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  _BYTE *v112;
  int v113;
  int v114;
  int v115;
  unsigned int v116;
  _BYTE *v117;
  int v118;
  unsigned __int8 *v119;
  int v120;
  uint64_t *v121;
  char *v122;
  char v123;
  unint64_t v124;
  unsigned __int8 *v125;
  unsigned __int8 *v126;
  int v127;
  int v128;
  unsigned __int8 *v129;
  int v130;
  unsigned int v131;
  int v132;
  unsigned __int8 *v133;
  int v134;
  int v135;
  unsigned __int8 *v136;
  int v137;
  unsigned int v138;
  int v139;
  unsigned __int8 *m;
  int v141;
  unsigned int v142;
  unint64_t v143;
  char *v144;
  uint64_t v145;
  int v146;
  char v147;
  int v148;
  int v149;
  unsigned __int8 *v150;
  int v151;
  int v152;
  unsigned __int8 *v153;
  int v154;
  unsigned int v155;
  int v156;
  unsigned __int8 *v157;
  uint64_t v158;
  uint64_t *v159;
  char *v160;
  char v161;
  uint64_t *v162;
  unsigned __int8 *v163;
  int v164;
  int v165;
  unsigned __int8 *v166;
  int v167;
  BOOL v168;
  unint64_t v169;
  int v170;
  char *v171;
  int v172;
  char v173;
  int v174;
  uint64_t *v175;
  char *v176;
  char v177;
  unint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t *v183;
  int v184;
  unsigned __int8 *v185;
  int v186;
  int v187;
  int v188;
  unsigned __int8 *v189;
  unsigned int v190;
  int v191;
  uint64_t v192;
  char v193;
  uint64_t *v194;
  uint64_t *v195;
  int Mem;
  uint64_t v197;
  uint64_t v198;
  char v199;
  int v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t *v205;
  int v206;
  uint64_t *v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  unsigned int v211;
  unsigned __int8 *v212;
  unsigned int v213;
  unint64_t v214;
  unsigned __int8 *v215;
  uint64_t v216;
  _BOOL4 v217;
  int v218;
  unsigned int v219;
  unsigned __int8 *v220;
  uint64_t v221;
  _BOOL4 v222;
  int v223;
  signed int v224;
  unsigned __int8 *v225;
  uint64_t v226;
  int v227;
  int v228;
  uint64_t v229;
  unsigned __int8 *v230;
  uint64_t **v231;
  uint64_t *v232;
  unsigned int v233;
  int v234;
  int v235;
  uint64_t v236;
  int v237;
  unsigned __int8 *v238;
  unsigned __int8 *v239;
  uint64_t *v240;
  int v241;
  int v242;
  int v243;
  uint64_t v244;
  unint64_t v245;
  int v246;
  int v247;
  int v248;
  unsigned __int8 *v249;
  int v250;
  int v251;
  int v252;
  unsigned __int8 *v253;
  unsigned int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  BOOL v260;
  _BOOL4 v261;
  unsigned __int8 *v262;
  int v263;
  uint64_t v264;
  _BOOL4 v265;
  int v266;
  signed int v267;
  uint64_t *v268;
  unsigned __int8 *v269;
  int v270;
  int v271;
  int v272;
  unsigned __int8 *v273;
  unsigned int v274;
  int v275;
  unsigned __int8 *v276;
  int v277;
  int v278;
  int v279;
  unsigned __int8 *v280;
  unsigned int v281;
  int v282;
  unsigned __int8 *v283;
  int v284;
  int v285;
  int v286;
  unsigned __int8 *v287;
  unsigned int v288;
  int v289;
  unsigned __int8 *v290;
  int v291;
  int v292;
  int v293;
  unsigned __int8 *v294;
  unsigned int v295;
  int v296;
  unsigned __int8 *v297;
  int v298;
  int v299;
  int v300;
  unsigned __int8 *v301;
  unsigned int v302;
  int v303;
  unsigned __int8 *v304;
  int v305;
  int v306;
  int v307;
  unsigned __int8 *v308;
  unsigned int v309;
  int v310;
  uint64_t *v311;
  unint64_t v312;
  _BYTE *v313;
  unint64_t v314;
  uint64_t *v315;
  unint64_t v316;
  unsigned __int8 *v317;
  unint64_t v318;
  _BYTE *v319;
  int v320;
  int v321;
  int v322;
  int v323;
  unsigned int v324;
  int v325;
  unsigned __int8 *v326;
  unsigned __int8 *v327;
  unint64_t v328;
  unint64_t v329;
  int v330;
  int v331;
  unint64_t v332;
  int v333;
  char *v334;
  uint64_t v335;
  int v336;
  char v337;
  uint64_t *v338;
  uint64_t *v339;
  unsigned __int8 *v340;
  BOOL v341;
  int v342;
  int v343;
  unsigned int v344;
  unsigned __int8 *v345;
  int v346;
  unint64_t v347;
  char *v348;
  uint64_t v349;
  int v350;
  char v351;
  unsigned __int8 *v352;
  uint64_t v353;
  int v354;
  unsigned __int8 *v355;
  int v356;
  int v357;
  int v358;
  unsigned __int8 *v359;
  unsigned int v360;
  int v361;
  int v362;
  int v363;
  int v364;
  unint64_t v365;
  char *v366;
  uint64_t v367;
  int v368;
  char v369;
  unint64_t v370;
  uint64_t v371;
  unsigned int v372;
  int v373;
  uint64_t v374;
  int v375;
  int v376;
  int v377;
  int v378;
  uint64_t v379;
  size_t v380;
  int v381;
  int v382;
  uint64_t *v383;
  int v384;
  unint64_t v385;
  unsigned __int8 *v386;
  uint64_t v387;
  int v388;
  int v389;
  _BYTE *v390;
  int v391;
  int v392;
  unsigned int v393;
  int v394;
  uint64_t v395;
  int v396;
  int v397;
  int v398;
  unsigned __int8 *v399;
  int v400;
  int v401;
  int v402;
  unsigned int v403;
  int v404;
  unsigned __int8 *v405;
  int v406;
  int v407;
  int v408;
  int v409;
  int v410;
  uint64_t *v411;
  uint64_t *v412;
  uint64_t *v413;
  int v414;
  int v415;
  unsigned __int8 *v416;
  int v417;
  int v418;
  unsigned __int8 *v419;
  int v420;
  unsigned int v421;
  int v422;
  BOOL v423;
  int v424;
  unsigned __int8 *v425;
  int v426;
  int v427;
  unsigned __int8 *v428;
  int v429;
  unsigned int v430;
  int v431;
  unsigned __int8 *j;
  int v433;
  unsigned int v434;
  unint64_t v435;
  char *v436;
  uint64_t v437;
  int v438;
  char v439;
  int v440;
  int v441;
  _BYTE *v442;
  int v443;
  int v444;
  int v445;
  unsigned int v446;
  _BYTE *v447;
  unsigned __int8 *v448;
  int v449;
  uint64_t v450;
  _BOOL4 v451;
  int v452;
  signed int v453;
  uint64_t v454;
  uint64_t v455;
  int v456;
  uint64_t *v457;
  unint64_t v458;
  int v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  int v463;
  int v464;
  unint64_t v465;
  uint64_t *v466;
  uint64_t *v467;
  char *v468;
  char v469;
  int v470;
  int v471;
  uint64_t v472;
  int v473;
  int v474;
  unint64_t v475;
  unsigned __int8 *v476;
  int v477;
  unsigned __int8 *v478;
  int v479;
  int v480;
  int v481;
  unsigned int v482;
  int v483;
  unsigned __int8 *v484;
  char v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t *v488;
  _BYTE *v489;
  uint64_t v490;
  uint64_t v491;
  int v492;
  unint64_t v493;
  int v494;
  char *v495;
  int v496;
  char v497;
  unsigned __int8 *v498;
  int v499;
  uint64_t *v500;
  uint64_t v501;
  int v502;
  unsigned int v503;
  unint64_t v504;
  char *v505;
  uint64_t v506;
  int v507;
  char v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t *v511;
  int v512;
  uint64_t v513;
  uint64_t *v514;
  unsigned __int8 *v515;
  int v516;
  unsigned __int8 *v517;
  uint64_t v518;
  int v519;
  unint64_t v520;
  uint64_t v521;
  unint64_t v522;
  unsigned __int8 *v523;
  int v524;
  _BYTE *v525;
  int v526;
  int v527;
  int v528;
  unsigned int v529;
  int v530;
  unsigned int v531;
  uint64_t *v532;
  uint64_t v533;
  unsigned __int8 *v534;
  int v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  int v539;
  int v540;
  int v541;
  unsigned __int8 *v542;
  unsigned int v543;
  int v544;
  unsigned __int8 *v545;
  unsigned __int8 *v546;
  unsigned __int8 *v547;
  int v548;
  int v549;
  uint64_t v550;
  uint64_t v551;
  int v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  unsigned __int8 *v556;
  uint64_t v557;
  int v558;
  uint64_t *v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t *v562;
  uint64_t v563;
  uint64_t *v564;
  uint64_t v565;
  uint64_t *v566;
  uint64_t v567;
  uint64_t *v568;
  uint64_t v569;
  uint64_t *v570;
  uint64_t *v571;
  int v572;
  int v573;
  uint64_t *v574;
  uint64_t *v575;
  unsigned int v576;
  unsigned int v577;
  uint64_t v578;
  signed int v579;
  uint64_t v580;
  uint64_t *v581;
  uint64_t *v582;
  uint64_t *v583;
  uint64_t *v584;
  uint64_t *v585;
  uint64_t v586;
  int v587;
  uint64_t v588;
  unint64_t v589;
  char *v590;
  uint64_t v591;
  int v592;
  char v593;
  unsigned int v594;
  int v595;
  uint64_t *v596;
  int v597;
  uint64_t *v598;
  int v599;
  unint64_t v600;
  char *v601;
  uint64_t v602;
  int v603;
  char v604;
  unsigned int v605;
  int v606;
  unint64_t v607;
  char *v608;
  uint64_t v609;
  int v610;
  char v611;
  unsigned int v612;
  unsigned __int8 *v613;
  unsigned int v614;
  uint64_t v615;
  void *v616;
  uint64_t *v617;
  int v618;
  _BOOL4 v619;
  int v620;
  uint64_t *v621;
  unsigned __int8 *v622;
  int v623;
  uint64_t *v624;
  int v625;
  unsigned __int8 *v626;
  int v627;
  int v628;
  unsigned __int8 *v629;
  int v630;
  unsigned int v631;
  uint64_t v632;
  int v633;
  uint64_t v634;
  unsigned __int8 *k;
  int v636;
  unsigned int v637;
  unint64_t v638;
  char *v639;
  uint64_t v640;
  int v641;
  char v642;
  int v643;
  int v644;
  uint64_t v645;
  int v646;
  uint64_t v647;
  int v648;
  uint64_t *v649;
  int v650;
  int v651;
  uint64_t *v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t **v659;
  uint64_t *v660;
  int v661;
  uint64_t *v662;
  int v663;
  uint64_t v664;
  int v665;
  uint64_t v666;
  unint64_t v667;
  int v668;
  unint64_t v669;
  char *v670;
  uint64_t v671;
  int v672;
  char v673;
  unsigned int v674;
  int v675;
  uint64_t v676;
  unint64_t v677;
  int v678;
  uint64_t v679;
  uint64_t v680;
  unsigned __int8 *v681;
  signed int v682;
  uint64_t v683;
  int v684;
  unint64_t v685;
  char *v686;
  uint64_t v687;
  int v688;
  char v689;
  unsigned int v690;
  unint64_t v691;
  int v692;
  unint64_t v693;
  char *v694;
  uint64_t v695;
  int v696;
  char v697;
  unsigned int v698;
  int v699;
  uint64_t v700;
  unint64_t v701;
  _BYTE *v702;
  int v703;
  uint64_t *v704;
  uint64_t v705;
  uint64_t v706;
  unint64_t v707;
  int v708;
  unint64_t v709;
  char *v710;
  uint64_t v711;
  int v712;
  char v713;
  unsigned int v714;
  unint64_t v715;
  int v716;
  unint64_t v717;
  char *v718;
  uint64_t v719;
  int v720;
  char v721;
  unsigned int v722;
  unint64_t v723;
  int v724;
  unint64_t v725;
  char *v726;
  uint64_t v727;
  int v728;
  char v729;
  unsigned int v730;
  unint64_t v731;
  int v732;
  unint64_t v733;
  char *v734;
  uint64_t v735;
  int v736;
  char v737;
  unsigned int v738;
  unint64_t v739;
  int v740;
  unint64_t v741;
  char *v742;
  uint64_t v743;
  int v744;
  char v745;
  unsigned int v746;
  uint64_t *v747;
  unint64_t v748;
  int v749;
  uint64_t v750;
  int v751;
  unint64_t v752;
  int v753;
  unint64_t v754;
  int v755;
  unint64_t v756;
  int v757;
  unint64_t v758;
  int v759;
  unint64_t v760;
  int v761;
  unint64_t v762;
  __int128 v763;
  unint64_t v764;
  unint64_t v765;
  uint64_t v766;
  uint64_t *v767;
  uint64_t v768;
  unint64_t v769;
  uint64_t *v770;
  unint64_t v771;
  unsigned int v773;
  _BOOL4 v774;
  int v775;
  _BOOL4 v776;
  _QWORD *v777;
  signed int v778;
  int v779;
  unint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  unsigned int __n;
  uint64_t v786;
  int v787;
  int v788;
  int v789;
  unsigned int v790;
  __int128 v791;
  __int128 v792;
  __int128 v793;
  __int128 v794;
  uint64_t *v795;
  int v796;
  _QWORD __s2[3];

  __n = 0;
  v8 = a5;
  v10 = a3;
  v787 = 0;
  v13 = 0;
  __s2[1] = *MEMORY[0x24BDAC8D0];
  v14 = 99;
  v796 = 99;
  v795 = 0;
  v15 = (_QWORD *)(a4 + 152);
  v786 = a2;
LABEL_2:
  switch(v14)
  {
    case 0:
      goto LABEL_251;
    case 1:
      v16 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_49;
      *(_DWORD *)(a4 + 124) = *((_DWORD *)v795 + 63);
      v17 = v16[2];
      v18 = __rev16(*(unsigned __int16 *)((char *)v17 + 1));
      v16[2] = (uint64_t *)((char *)v17 + v18);
      if (*((_BYTE *)v17 + v18) == 65)
        goto LABEL_7;
      v208 = *(_QWORD *)(a4 + 16);
      *(_DWORD *)(v208 + 4 * *((int *)v16 + 61)) = *((_DWORD *)v16 + 64);
      *(_DWORD *)(v208 + 4 * *((int *)v16 + 61) + 4) = *((_DWORD *)v16 + 65);
      *(_DWORD *)(v208 + 4 * (*(_DWORD *)(a4 + 24) - *((_DWORD *)v16 + 60))) = *((_DWORD *)v16 + 66);
      goto LABEL_326;
    case 2:
      v16 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_49;
      v21 = v795[2];
      v22 = __rev16(*(unsigned __int16 *)(v21 + 1));
      v795[2] = v21 + v22;
      if (*(_BYTE *)(v21 + v22) == 65)
        goto LABEL_10;
      goto LABEL_326;
    case 3:
    case 5:
      goto LABEL_48;
    case 4:
      if (!(_DWORD)v13)
      {
        v795[2] += __rev16(*(unsigned __int16 *)(v795[2] + 1));
LABEL_270:
        *(_QWORD *)&v791 = 0;
        Mem = pcre_getMem(a1, 5, &v791, a4, a5, (uint64_t)a6, a7, a8);
        v24 = (uint64_t *)v791;
        v25 = v795;
        if (!(_QWORD)v791 || Mem < 0)
          goto LABEL_1190;
        v26 = 0;
        v27 = v795[1];
        *(_QWORD *)(v791 + 8) = v27;
        v197 = v25[2];
LABEL_273:
        v43 = v197 + 3;
LABEL_274:
        v24[2] = v43;
        *((_DWORD *)v24 + 6) = *((_DWORD *)v25 + 6);
        v181 = v25[4];
        v24[4] = v181;
        v180 = v25[5];
        *((_DWORD *)v24 + 12) = 2;
        v24[5] = v180;
LABEL_275:
        *v24 = (uint64_t)v25;
LABEL_293:
        v795 = v24;
        goto LABEL_1382;
      }
      if ((_DWORD)v13 == 1)
      {
        v29 = v795;
        v30 = (unsigned __int8 *)(__rev16(*(unsigned __int16 *)(v795[2] + 4)) + v795[2] + 3);
        v795[2] = (uint64_t)v30;
        for (i = *v30; i == 65; i = *v30)
        {
          v30 += __rev16(*(unsigned __int16 *)(v30 + 1));
          v29[2] = (uint64_t)v30;
        }
        goto LABEL_270;
      }
      goto LABEL_48;
    case 6:
      if ((_DWORD)v13)
      {
        if ((_DWORD)v13 != 1)
          goto LABEL_48;
        v16 = (uint64_t **)v795;
        v32 = (unsigned __int8 *)v795[2];
        v33 = *v32;
      }
      else
      {
        v16 = (uint64_t **)v795;
        v32 = (unsigned __int8 *)(v795[2] + __rev16(*(unsigned __int16 *)(v795[2] + 1)));
        v795[2] = (uint64_t)v32;
        v33 = *v32;
        if (v33 == 65)
        {
LABEL_277:
          *(_QWORD *)&v791 = 0;
          v198 = a1;
          v199 = 6;
LABEL_284:
          v200 = pcre_getMem(v198, v199, &v791, a4, a5, (uint64_t)a6, a7, a8);
          v24 = (uint64_t *)v791;
          v25 = v795;
          if (!(_QWORD)v791 || v200 < 0)
            goto LABEL_1190;
          v180 = 0;
          v26 = 0;
          v27 = v795[1];
          *(_QWORD *)(v791 + 8) = v27;
          v24[2] = v25[2] + 3;
          *((_DWORD *)v24 + 6) = *((_DWORD *)v25 + 6);
          v181 = v25[4];
          *v24 = (uint64_t)v25;
          v24[4] = v181;
          v24[5] = 0;
LABEL_292:
          *((_DWORD *)v24 + 12) = 2;
          goto LABEL_293;
        }
      }
      if (v33 == 66)
        goto LABEL_326;
      if (((_BYTE)v16[6] & 1) != 0)
        goto LABEL_321;
      do
      {
        v32 += __rev16(*(unsigned __int16 *)(v32 + 1));
        v16[2] = (uint64_t *)v32;
      }
      while (*v32 == 65);
      v16[2] = (uint64_t *)(v32 + 3);
      *((_DWORD *)v16 + 6) = *(_DWORD *)(a4 + 120);
LABEL_379:
      while (2)
      {
        v45 = (uint64_t **)v795;
        v212 = (unsigned __int8 *)v795[2];
        v213 = *v212;
        *((_DWORD *)v795 + 62) = v213;
        *((_DWORD *)v45 + 42) = 0;
        if (*(_DWORD *)(a4 + 72))
        {
          v214 = (unint64_t)v45[1];
          if (v214 >= *(_QWORD *)(a4 + 96) && v214 > *(_QWORD *)(a4 + 104))
            *(_DWORD *)(a4 + 76) = 1;
        }
        if (v213 >= 0x51)
        {
          v576 = v213 - 80;
          *((_DWORD *)v45 + 60) = v213 - 80;
          if (v213 - 80 >= 0x65)
          {
            v576 = __rev16(*((unsigned __int16 *)v212 + 2));
            *((_DWORD *)v45 + 60) = v576;
          }
          v577 = 2 * v576;
          *((_DWORD *)v45 + 61) = 2 * v576;
          a2 = v786;
          if ((signed int)(2 * v576) >= *(_DWORD *)(a4 + 28))
          {
            *((_DWORD *)v45 + 62) = 80;
LABEL_10:
            *(_QWORD *)&v791 = 0;
            v19 = a1;
            v20 = 2;
          }
          else
          {
            v578 = *(_QWORD *)(a4 + 16);
            *((_DWORD *)v45 + 64) = *(_DWORD *)(v578 + 4 * v577);
            *((_DWORD *)v45 + 65) = *(_DWORD *)(v578 + 4 * (v577 | 1));
            v579 = *(_DWORD *)(a4 + 24) - v576;
            *((_DWORD *)v45 + 66) = *(_DWORD *)(v578 + 4 * v579);
            *((_DWORD *)v45 + 63) = *(_DWORD *)(a4 + 124);
            *(_DWORD *)(v578 + 4 * v579) = *((_DWORD *)v45 + 2) - *(_DWORD *)(a4 + 88);
LABEL_7:
            *(_QWORD *)&v791 = 0;
            v19 = a1;
            v20 = 1;
          }
LABEL_11:
          v23 = pcre_getMem(v19, v20, &v791, a4, a5, (uint64_t)a6, a7, a8);
          v24 = (uint64_t *)v791;
          v25 = v795;
          if ((_QWORD)v791 && (v23 & 0x80000000) == 0)
          {
            v26 = 0;
            v27 = v795[1];
            *(_QWORD *)(v791 + 8) = v27;
            v28 = v25[2];
            goto LABEL_291;
          }
LABEL_1190:
          v598 = (uint64_t *)*v25;
          goto LABEL_1386;
        }
        switch(v213)
        {
          case 0u:
            v580 = *(_QWORD *)(a4 + 136);
            if (v580 && !*(_DWORD *)(v580 + 8))
            {
              *(_QWORD *)(a4 + 136) = *(_QWORD *)v580;
              cstdlib_memmove(*(void **)(a4 + 16), *(const void **)(v580 + 32), 4 * *(unsigned int *)(v580 + 40));
              *(_QWORD *)(a4 + 104) = *(_QWORD *)(v580 + 24);
              v16 = (uint64_t **)v795;
              v795[4] = v795[22];
              v41 = *(_QWORD *)(v580 + 16);
              goto LABEL_320;
            }
            v596 = v45[1];
            if (!*(_DWORD *)(a4 + 68) || v596 != *(uint64_t **)(a4 + 104))
            {
              *(_QWORD *)(a4 + 112) = v596;
              *(_DWORD *)(a4 + 120) = *((_DWORD *)v45 + 6);
              v795 = *v45;
              pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
              v179 = v795;
              v13 = 1;
              a2 = v786;
              if (!v795)
                return v13;
              goto LABEL_1388;
            }
LABEL_1012:
            v795 = *v45;
            pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
            v179 = v795;
            a2 = v786;
            if (!v795)
              return 0;
            goto LABEL_328;
          case 1u:
            v268 = *(uint64_t **)(a4 + 88);
            goto LABEL_503;
          case 2u:
            if (v45[1] != (uint64_t *)(*(_QWORD *)(a4 + 88) + *(int *)(a4 + 128)))
              goto LABEL_952;
            goto LABEL_868;
          case 3u:
          case 4u:
            v238 = (unsigned __int8 *)v45[1];
            v239 = *(unsigned __int8 **)(a4 + 88);
            if (*(_DWORD *)(a4 + 60))
            {
              if (v238 == v239)
                goto LABEL_748;
              v240 = v45[1];
              do
              {
                v242 = *((unsigned __int8 *)v240 - 1);
                v240 = (uint64_t *)((char *)v240 - 1);
                v241 = v242;
                v243 = v242 & 0xC0;
              }
              while (v243 == 128);
              if (v243 != 192)
                goto LABEL_416;
              v244 = 0;
              v245 = utf8_table4[v241 & 0x3F];
              v246 = 6 * v245;
              v241 = (utf8_table3[v245] & v241) << (6 * v245);
              if (v245 <= 1)
                v245 = 1;
              v247 = v246 - 6;
              do
              {
                v241 |= (*((_BYTE *)v240 + ++v244) & 0x3F) << v247;
                v247 -= 6;
              }
              while (v245 != v244);
              if (v241 >= 256)
LABEL_748:
                v248 = 0;
              else
LABEL_416:
                v248 = (*(unsigned __int8 *)(*(_QWORD *)(a4 + 40) + v241) >> 4) & 1;
              *((_DWORD *)v45 + 43) = v248;
              if ((unint64_t)v238 < *(_QWORD *)(a4 + 96))
              {
                v492 = *v238;
                if ((~v492 & 0xC0) != 0)
                  goto LABEL_756;
                v493 = utf8_table4[v492 & 0x3F];
                v494 = 6 * v493;
                v492 = (utf8_table3[v493] & v492) << (6 * v493);
                v495 = (char *)(v238 + 1);
                if (v493 <= 1)
                  v493 = 1;
                v496 = v494 - 6;
                do
                {
                  v497 = *v495++;
                  v492 |= (v497 & 0x3F) << v496;
                  v496 -= 6;
                  --v493;
                }
                while (v493);
                if (v492 <= 255)
                {
LABEL_756:
                  v498 = (unsigned __int8 *)(*(_QWORD *)(a4 + 40) + v492);
LABEL_842:
                  v354 = (*v498 >> 4) & 1;
                  goto LABEL_844;
                }
              }
            }
            else
            {
              if (v238 == v239)
                v248 = 0;
              else
                v248 = (*(unsigned __int8 *)(*(_QWORD *)(a4 + 40) + *(v238 - 1)) >> 4) & 1;
              *((_DWORD *)v45 + 43) = v248;
              if ((unint64_t)v238 < *(_QWORD *)(a4 + 96))
              {
                v498 = (unsigned __int8 *)(*(_QWORD *)(a4 + 40) + *v238);
                goto LABEL_842;
              }
            }
            v354 = 0;
LABEL_844:
            *((_DWORD *)v45 + 40) = v354;
            v45[2] = (uint64_t *)(v212 + 1);
            if (*v212 != 4)
              goto LABEL_847;
            if (v248 != v354)
              continue;
            goto LABEL_978;
          case 5u:
            v269 = (unsigned __int8 *)v45[1];
            if ((unint64_t)v269 >= *(_QWORD *)(a4 + 96))
              goto LABEL_952;
            v45[1] = (uint64_t *)(v269 + 1);
            v270 = *v269;
            if (*(_DWORD *)(a4 + 60))
            {
              a2 = v786;
              if ((v270 & 0xC0) == 0xC0)
              {
                v271 = utf8_table4[v270 & 0x3F];
                v272 = 6 * v271;
                v270 = (utf8_table3[utf8_table4[v270 & 0x3F]] & v270) << (6 * v271);
                v273 = v269 + 2;
                v274 = v271 + 1;
                v275 = v272 - 6;
                do
                {
                  v45[1] = (uint64_t *)v273;
                  v270 |= (*(v273++ - 1) & 0x3F) << v275;
                  --v274;
                  v275 -= 6;
                }
                while (v274 > 1);
                if (v270 > 255)
                  goto LABEL_868;
              }
            }
            else
            {
              a2 = v786;
            }
            if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v270) & 4) != 0)
              goto LABEL_965;
            goto LABEL_868;
          case 6u:
            v276 = (unsigned __int8 *)v45[1];
            if ((unint64_t)v276 >= *(_QWORD *)(a4 + 96))
              goto LABEL_952;
            v45[1] = (uint64_t *)(v276 + 1);
            v277 = *v276;
            if (*(_DWORD *)(a4 + 60))
            {
              a2 = v786;
              if ((v277 & 0xC0) == 0xC0)
              {
                v278 = utf8_table4[v277 & 0x3F];
                v279 = 6 * v278;
                v277 = (utf8_table3[utf8_table4[v277 & 0x3F]] & v277) << (6 * v278);
                v280 = v276 + 2;
                v281 = v278 + 1;
                v282 = v279 - 6;
                do
                {
                  v45[1] = (uint64_t *)v280;
                  v277 |= (*(v280++ - 1) & 0x3F) << v282;
                  --v281;
                  v282 -= 6;
                }
                while (v281 > 1);
                if (v277 > 255)
                  goto LABEL_965;
              }
            }
            else
            {
              a2 = v786;
            }
            if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v277) & 4) == 0)
              goto LABEL_965;
            goto LABEL_868;
          case 7u:
            v283 = (unsigned __int8 *)v45[1];
            if ((unint64_t)v283 >= *(_QWORD *)(a4 + 96))
              goto LABEL_952;
            v45[1] = (uint64_t *)(v283 + 1);
            v284 = *v283;
            if (*(_DWORD *)(a4 + 60))
            {
              a2 = v786;
              if ((v284 & 0xC0) == 0xC0)
              {
                v285 = utf8_table4[v284 & 0x3F];
                v286 = 6 * v285;
                v284 = (utf8_table3[utf8_table4[v284 & 0x3F]] & v284) << (6 * v285);
                v287 = v283 + 2;
                v288 = v285 + 1;
                v289 = v286 - 6;
                do
                {
                  v45[1] = (uint64_t *)v287;
                  v284 |= (*(v287++ - 1) & 0x3F) << v289;
                  --v288;
                  v289 -= 6;
                }
                while (v288 > 1);
                if (v284 > 255)
                  goto LABEL_868;
              }
            }
            else
            {
              a2 = v786;
            }
            if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v284) & 1) != 0)
              goto LABEL_965;
            goto LABEL_868;
          case 8u:
            v290 = (unsigned __int8 *)v45[1];
            if ((unint64_t)v290 >= *(_QWORD *)(a4 + 96))
              goto LABEL_952;
            v45[1] = (uint64_t *)(v290 + 1);
            v291 = *v290;
            if (*(_DWORD *)(a4 + 60))
            {
              a2 = v786;
              if ((v291 & 0xC0) == 0xC0)
              {
                v292 = utf8_table4[v291 & 0x3F];
                v293 = 6 * v292;
                v291 = (utf8_table3[utf8_table4[v291 & 0x3F]] & v291) << (6 * v292);
                v294 = v290 + 2;
                v295 = v292 + 1;
                v296 = v293 - 6;
                do
                {
                  v45[1] = (uint64_t *)v294;
                  v291 |= (*(v294++ - 1) & 0x3F) << v296;
                  --v295;
                  v296 -= 6;
                }
                while (v295 > 1);
                if (v291 > 255)
                  goto LABEL_965;
              }
            }
            else
            {
              a2 = v786;
            }
            if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v291) & 1) == 0)
              goto LABEL_965;
            goto LABEL_868;
          case 9u:
            v297 = (unsigned __int8 *)v45[1];
            if ((unint64_t)v297 >= *(_QWORD *)(a4 + 96))
              goto LABEL_952;
            v45[1] = (uint64_t *)(v297 + 1);
            v298 = *v297;
            if (*(_DWORD *)(a4 + 60))
            {
              a2 = v786;
              if ((v298 & 0xC0) == 0xC0)
              {
                v299 = utf8_table4[v298 & 0x3F];
                v300 = 6 * v299;
                v298 = (utf8_table3[utf8_table4[v298 & 0x3F]] & v298) << (6 * v299);
                v301 = v297 + 2;
                v302 = v299 + 1;
                v303 = v300 - 6;
                do
                {
                  v45[1] = (uint64_t *)v301;
                  v298 |= (*(v301++ - 1) & 0x3F) << v303;
                  --v302;
                  v303 -= 6;
                }
                while (v302 > 1);
                if (v298 > 255)
                  goto LABEL_868;
              }
            }
            else
            {
              a2 = v786;
            }
            if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v298) & 0x10) != 0)
              goto LABEL_965;
            goto LABEL_868;
          case 0xAu:
            v304 = (unsigned __int8 *)v45[1];
            if ((unint64_t)v304 >= *(_QWORD *)(a4 + 96))
              goto LABEL_952;
            v45[1] = (uint64_t *)(v304 + 1);
            v305 = *v304;
            if (*(_DWORD *)(a4 + 60))
            {
              a2 = v786;
              if ((v305 & 0xC0) == 0xC0)
              {
                v306 = utf8_table4[v305 & 0x3F];
                v307 = 6 * v306;
                v305 = (utf8_table3[utf8_table4[v305 & 0x3F]] & v305) << (6 * v306);
                v308 = v304 + 2;
                v309 = v306 + 1;
                v310 = v307 - 6;
                do
                {
                  v45[1] = (uint64_t *)v308;
                  v305 |= (*(v308++ - 1) & 0x3F) << v310;
                  --v309;
                  v310 -= 6;
                }
                while (v309 > 1);
                if (v305 > 255)
                  goto LABEL_965;
              }
            }
            else
            {
              a2 = v786;
            }
            if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v305) & 0x10) != 0)
              goto LABEL_868;
            goto LABEL_965;
          case 0xBu:
            v311 = v45[1];
            v312 = *(_QWORD *)(a4 + 96);
            if (((_BYTE)v45[4] & 4) == 0 && (unint64_t)v311 < v312 && *(_BYTE *)v311 == 10)
              goto LABEL_952;
            v313 = (char *)v311 + 1;
            v45[1] = (uint64_t *)((char *)v311 + 1);
            if ((unint64_t)v311 >= v312)
              goto LABEL_952;
            if (*(_DWORD *)(a4 + 60) && (unint64_t)v313 < v312)
            {
              v314 = v312 - (_QWORD)v313;
              v315 = (uint64_t *)((char *)v311 + 2);
              do
              {
                if ((*((_BYTE *)v315 - 1) & 0xC0) != 0x80)
                  break;
                v45[1] = v315;
                v315 = (uint64_t *)((char *)v315 + 1);
                --v314;
              }
              while (v314);
            }
            goto LABEL_868;
          case 0xCu:
            v316 = (unint64_t)v45[1];
            v45[1] = (uint64_t *)(v316 + 1);
            if (v316 >= *(_QWORD *)(a4 + 96))
              goto LABEL_952;
            goto LABEL_868;
          case 0xDu:
          case 0xEu:
            v249 = (unsigned __int8 *)v45[1];
            if ((unint64_t)v249 >= *(_QWORD *)(a4 + 96))
              goto LABEL_980;
            v45[1] = (uint64_t *)(v249 + 1);
            v250 = *v249;
            if (*(_DWORD *)(a4 + 60) && (v250 & 0xC0) == 0xC0)
            {
              v251 = utf8_table4[v250 & 0x3F];
              v252 = 6 * v251;
              v250 = (utf8_table3[utf8_table4[v250 & 0x3F]] & v250) << (6 * v251);
              v253 = v249 + 2;
              v254 = v251 + 1;
              v255 = v252 - 6;
              do
              {
                v45[1] = (uint64_t *)v253;
                v250 |= (*(v253++ - 1) & 0x3F) << v255;
                --v254;
                v255 -= 6;
              }
              while (v254 > 1);
            }
            LODWORD(v791) = 0;
            v256 = ucp_findchar(v250, (int *)&v791, &v790);
            v45[2] = (uint64_t *)(v212 + 1);
            v257 = (char)v212[1];
            v258 = v212[1];
            v45[2] = (uint64_t *)(v212 + 2);
            if (v257 < 0)
            {
              v259 = v213 == 14;
              v260 = v258 - 128 == v256;
            }
            else
            {
              v259 = v213 == 14;
              v260 = (_DWORD)v791 == v258;
            }
            v470 = v260;
            if (v259 != v470)
              goto LABEL_952;
            continue;
          case 0xFu:
            v317 = (unsigned __int8 *)v45[1];
            v318 = *(_QWORD *)(a4 + 96);
            if ((unint64_t)v317 < v318)
            {
              v319 = v317 + 1;
              v45[1] = (uint64_t *)(v317 + 1);
              v320 = *v317;
              v321 = *(_DWORD *)(a4 + 60);
              v782 = v10;
              if (v321 && (v320 & 0xC0) == 0xC0)
              {
                v322 = utf8_table4[v320 & 0x3F];
                v323 = 6 * v322;
                v320 = (utf8_table3[utf8_table4[v320 & 0x3F]] & v320) << (6 * v322);
                v324 = v322 + 1;
                v325 = v323 - 6;
                do
                {
                  v326 = v319 + 1;
                  v45[1] = (uint64_t *)(v319 + 1);
                  v320 |= (*v319 & 0x3F) << v325;
                  --v324;
                  v325 -= 6;
                  ++v319;
                }
                while (v324 > 1);
              }
              else
              {
                v326 = v317 + 1;
              }
              v790 = 0;
              LODWORD(v791) = 0;
              if (ucp_findchar(v320, (int *)&v791, &v790) != 2)
              {
                v501 = v8;
                while ((unint64_t)v326 < v318)
                {
                  v502 = *v326;
                  v503 = 1;
                  if (v321 && (v502 & 0xC0) == 0xC0)
                  {
                    v504 = utf8_table4[v502 & 0x3F];
                    v502 = (utf8_table3[v504] & v502) << (6 * v504);
                    v505 = (char *)(v326 + 1);
                    if (v504 <= 1)
                      v506 = 1;
                    else
                      v506 = v504;
                    v507 = 6 * v504 - 6;
                    do
                    {
                      v508 = *v505++;
                      v502 |= (v508 & 0x3F) << v507;
                      v507 -= 6;
                      --v506;
                    }
                    while (v506);
                    v503 = v504 + 1;
                  }
                  if (ucp_findchar(v502, (int *)&v791, &v790) != 2)
                    break;
                  v326 += v503;
                  v45[1] = (uint64_t *)v326;
                }
                v45[2] = (uint64_t *)(v212 + 1);
                v8 = v501;
                v10 = v782;
                continue;
              }
              v795 = *v45;
              pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
              v624 = v795;
              if (!v795)
                return 0;
              v13 = 0;
              *((_DWORD *)v795 + 102) = 0;
              *v15 = v624;
LABEL_976:
              v10 = v782;
              goto LABEL_977;
            }
LABEL_980:
            v795 = *v45;
            pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
            v73 = v795;
            a2 = v786;
            if (!v795)
              return 0;
            goto LABEL_307;
          case 0x10u:
            v327 = (unsigned __int8 *)v45[1];
            v328 = *(_QWORD *)(a4 + 96) - 1;
            if ((unint64_t)v327 < v328)
              goto LABEL_952;
            if (v327 == (unsigned __int8 *)v328)
              goto LABEL_758;
            goto LABEL_868;
          case 0x11u:
            v329 = *(_QWORD *)(a4 + 96);
            goto LABEL_508;
          case 0x12u:
            v45[4] = (uint64_t *)v212[1];
            goto LABEL_800;
          case 0x13u:
            v268 = *(uint64_t **)(a4 + 88);
            if (*(_DWORD *)(a4 + 52) && v45[1] == v268)
              goto LABEL_952;
            if (((_BYTE)v45[4] & 2) == 0)
            {
LABEL_503:
              if (v45[1] != v268)
                goto LABEL_952;
              goto LABEL_868;
            }
            v500 = v45[1];
            if (v500 == v268)
              goto LABEL_868;
            v499 = *((unsigned __int8 *)v500 - 1);
            goto LABEL_761;
          case 0x14u:
            if (((_BYTE)v45[4] & 2) != 0)
            {
              v327 = (unsigned __int8 *)v45[1];
              if ((unint64_t)v327 >= *(_QWORD *)(a4 + 96))
              {
                if (*(_DWORD *)(a4 + 56))
                  goto LABEL_952;
                goto LABEL_868;
              }
LABEL_758:
              v499 = *v327;
            }
            else
            {
              if (*(_DWORD *)(a4 + 56))
                goto LABEL_952;
              v329 = *(_QWORD *)(a4 + 96);
              if (*(_DWORD *)(a4 + 64))
              {
LABEL_508:
                if ((unint64_t)v45[1] < v329)
                  goto LABEL_952;
                goto LABEL_868;
              }
              v545 = (unsigned __int8 *)v45[1];
              v546 = (unsigned __int8 *)(v329 - 1);
              if (v545 < v546)
                goto LABEL_952;
              if (v545 != v546)
              {
LABEL_868:
                v45[2] = (uint64_t *)(v212 + 1);
                continue;
              }
              v499 = *v545;
            }
LABEL_761:
            if (v499 != 10)
              goto LABEL_952;
            goto LABEL_868;
          case 0x15u:
            if (!*(_DWORD *)(a4 + 60))
            {
              v515 = (unsigned __int8 *)v45[1];
              if ((uint64_t)(*(_QWORD *)(a4 + 96) - (_QWORD)v515) <= 0)
                goto LABEL_952;
              v516 = v212[1];
              v45[1] = (uint64_t *)(v515 + 1);
              if (v516 != *v515)
                goto LABEL_952;
LABEL_800:
              v45[2] = (uint64_t *)(v212 + 2);
              continue;
            }
            v330 = 1;
            *((_DWORD *)v45 + 57) = 1;
            v45[2] = (uint64_t *)(v212 + 1);
            v331 = v212[1];
            *((_DWORD *)v45 + 55) = v331;
            if ((~v331 & 0xC0) == 0)
            {
              v332 = utf8_table4[v331 & 0x3F];
              v333 = (utf8_table3[v332] & v331) << (6 * v332);
              *((_DWORD *)v45 + 55) = v333;
              v334 = (char *)(v212 + 2);
              if (v332 <= 1)
                v335 = 1;
              else
                v335 = v332;
              v336 = 6 * v332 - 6;
              do
              {
                v337 = *v334++;
                v333 |= (v337 & 0x3F) << v336;
                *((_DWORD *)v45 + 55) = v333;
                v336 -= 6;
                --v335;
              }
              while (v335);
              v330 = v332 + 1;
              *((_DWORD *)v45 + 57) = v330;
            }
            v338 = v45[1];
            a2 = v786;
            if (*(_QWORD *)(a4 + 96) - (_QWORD)v338 < (uint64_t)v330)
              goto LABEL_965;
            v339 = (uint64_t *)((char *)v338 + 1);
            v340 = v212 + 2;
            while (1)
            {
              v341 = __OFSUB__(v330--, 1);
              *((_DWORD *)v45 + 57) = v330;
              if (v330 < 0 != v341)
                goto LABEL_379;
              v45[2] = (uint64_t *)v340;
              v342 = *(v340 - 1);
              v45[1] = v339;
              v343 = *((unsigned __int8 *)v339 - 1);
              v339 = (uint64_t *)((char *)v339 + 1);
              ++v340;
              if (v342 != v343)
                goto LABEL_268;
            }
          case 0x16u:
            if (!*(_DWORD *)(a4 + 60))
            {
              v517 = (unsigned __int8 *)v45[1];
              if ((uint64_t)(*(_QWORD *)(a4 + 96) - (_QWORD)v517) <= 0)
                goto LABEL_952;
              v518 = *(_QWORD *)(a4 + 32);
              v519 = *(unsigned __int8 *)(v518 + v212[1]);
              v45[1] = (uint64_t *)(v517 + 1);
              if (v519 != *(unsigned __int8 *)(v518 + *v517))
                goto LABEL_952;
              goto LABEL_800;
            }
            v344 = 1;
            *((_DWORD *)v45 + 57) = 1;
            v345 = v212 + 1;
            v45[2] = (uint64_t *)(v212 + 1);
            v346 = v212[1];
            *((_DWORD *)v45 + 55) = v346;
            if ((~v346 & 0xC0) == 0)
            {
              v347 = utf8_table4[v346 & 0x3F];
              v346 = (utf8_table3[v347] & v346) << (6 * v347);
              *((_DWORD *)v45 + 55) = v346;
              v348 = (char *)(v212 + 2);
              if (v347 <= 1)
                v349 = 1;
              else
                v349 = v347;
              v350 = 6 * v347 - 6;
              do
              {
                v351 = *v348++;
                v346 |= (v351 & 0x3F) << v350;
                *((_DWORD *)v45 + 55) = v346;
                v350 -= 6;
                --v349;
              }
              while (v349);
              v344 = v347 + 1;
              *((_DWORD *)v45 + 57) = v344;
            }
            a2 = v786;
            v352 = (unsigned __int8 *)v45[1];
            if (*(_QWORD *)(a4 + 96) - (_QWORD)v352 < (uint64_t)v344)
              goto LABEL_965;
            if (v346 > 127)
            {
              v45[1] = (uint64_t *)(v352 + 1);
              v539 = *v352;
              if ((~v539 & 0xC0) == 0)
              {
                v540 = utf8_table4[v539 & 0x3F];
                v541 = 6 * v540;
                v539 = (utf8_table3[utf8_table4[v539 & 0x3F]] & v539) << (6 * v540);
                v542 = v352 + 2;
                v543 = v540 + 1;
                v544 = v541 - 6;
                do
                {
                  v45[1] = (uint64_t *)v542;
                  v539 |= (*(v542++ - 1) & 0x3F) << v544;
                  --v543;
                  v544 -= 6;
                }
                while (v543 > 1);
              }
              v45[2] = (uint64_t *)&v345[v344];
              if (v346 != v539)
              {
                v790 = 0;
                if ((ucp_findchar(v346, (int *)&v791, &v790) & 0x80000000) != 0 || v539 != v790)
                  goto LABEL_978;
              }
              continue;
            }
            v353 = *(_QWORD *)(a4 + 32);
            v45[2] = (uint64_t *)(v212 + 2);
            v248 = *(unsigned __int8 *)(v353 + v212[1]);
            v45[1] = (uint64_t *)(v352 + 1);
            v354 = *(unsigned __int8 *)(v353 + *v352);
LABEL_847:
            if (v248 == v354)
              continue;
LABEL_978:
            v795 = *v45;
            pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
            v585 = v795;
            if (!v795)
              return 0;
            v13 = 0;
            *((_DWORD *)v795 + 102) = 0;
            *v15 = v585;
LABEL_977:
            a2 = v786;
LABEL_1390:
            v14 = v796;
            break;
          case 0x17u:
            v355 = (unsigned __int8 *)v45[1];
            if ((unint64_t)v355 >= *(_QWORD *)(a4 + 96))
              goto LABEL_952;
            v45[1] = (uint64_t *)(v355 + 1);
            v45[2] = (uint64_t *)(v212 + 1);
            v356 = *v355;
            if (*(_DWORD *)(a4 + 60) && (v356 & 0xC0) == 0xC0)
            {
              v357 = utf8_table4[v356 & 0x3F];
              v358 = 6 * v357;
              v356 = (utf8_table3[utf8_table4[v356 & 0x3F]] & v356) << (6 * v357);
              v359 = v355 + 2;
              v360 = v357 + 1;
              v361 = v358 - 6;
              do
              {
                v45[1] = (uint64_t *)v359;
                v356 |= (*(v359++ - 1) & 0x3F) << v361;
                --v360;
                v361 -= 6;
              }
              while (v360 > 1);
            }
            if (((_BYTE)v45[4] & 1) != 0)
            {
              v509 = *(_QWORD *)(a4 + 32);
              if (v356 <= 255)
                v356 = *(unsigned __int8 *)(v509 + v356);
              v45[2] = (uint64_t *)(v212 + 2);
              v362 = *(unsigned __int8 *)(v509 + v212[1]);
            }
            else
            {
              v45[2] = (uint64_t *)(v212 + 2);
              v362 = v212[1];
            }
            if (v356 == v362)
              goto LABEL_978;
            continue;
          case 0x18u:
          case 0x19u:
          case 0x1Au:
          case 0x1Bu:
          case 0x1Cu:
          case 0x1Du:
            v215 = v212 + 1;
            v45[2] = (uint64_t *)(v212 + 1);
            v216 = *v212;
            v217 = v216 & 1;
            *((_DWORD *)v45 + 42) = v217;
            v218 = rep_min_0[v216 - 24];
            *((_DWORD *)v45 + 59) = v218;
            v219 = rep_max_0[v216 - 24];
            if ((v216 - 30) < 0xFFFFFFFE)
              v219 = 0x7FFFFFFF;
            *((_DWORD *)v45 + 58) = v219;
            goto LABEL_543;
          case 0x1Eu:
          case 0x1Fu:
            v218 = 0;
            *((_DWORD *)v45 + 59) = 0;
            v219 = __rev16(*(unsigned __int16 *)(v212 + 1));
            *((_DWORD *)v45 + 58) = v219;
            v217 = *v212 == 31;
            *((_DWORD *)v45 + 42) = v217;
            goto LABEL_542;
          case 0x20u:
            v217 = 0;
            v219 = __rev16(*(unsigned __int16 *)(v212 + 1));
            *((_DWORD *)v45 + 58) = v219;
            *((_DWORD *)v45 + 59) = v219;
            v218 = v219;
LABEL_542:
            v215 = v212 + 3;
            v45[2] = (uint64_t *)(v212 + 3);
LABEL_543:
            if (!*(_DWORD *)(a4 + 60))
            {
              v370 = *(_QWORD *)(a4 + 96);
              v88 = (unsigned __int8 *)v45[1];
              if ((uint64_t)(v370 - (_QWORD)v88) >= v218)
              {
                v45[2] = (uint64_t *)(v215 + 1);
                v364 = *v215;
                *((_DWORD *)v45 + 55) = v364;
LABEL_557:
                if (((_BYTE)v45[4] & 1) == 0)
                {
                  v373 = v218;
                  if (v218 >= 1)
                  {
                    do
                    {
                      v45[1] = (uint64_t *)(v88 + 1);
                      if (v364 != *v88)
                        goto LABEL_949;
                      ++v88;
                    }
                    while (--v373);
                  }
                  if (v219 == v218)
                    continue;
                  if (v217)
                  {
                    *((_DWORD *)v45 + 56) = v218;
                    a2 = v786;
LABEL_120:
                    *(_QWORD *)&v791 = 0;
                    v65 = a1;
                    v66 = 32;
                    goto LABEL_1378;
                  }
                  v45[11] = (uint64_t *)v88;
                  v341 = __OFSUB__(v219, v218);
                  v644 = v219 - v218;
                  if ((v644 < 0) ^ v341 | (v644 == 0))
                  {
                    a2 = v786;
LABEL_1177:
                    *(_QWORD *)&v791 = 0;
                    v65 = a1;
                    v66 = 33;
                    goto LABEL_1378;
                  }
                  v645 = 0;
                  v92 = (unint64_t)v88;
                  while ((unint64_t)&v88[v645] < v370)
                  {
                    if (v364 == v88[v645])
                    {
                      ++v92;
                      v45[1] = (uint64_t *)&v88[++v645];
                      if (v644 != (_DWORD)v645)
                        continue;
                    }
                    v92 = (unint64_t)&v88[v645];
                    break;
                  }
                  a2 = v786;
LABEL_123:
                  if (v92 >= (unint64_t)v88)
                    goto LABEL_1177;
LABEL_268:
                  v195 = *v45;
LABEL_327:
                  v795 = v195;
                  pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
                  v179 = v795;
                  if (!v795)
                    return 0;
LABEL_328:
                  v13 = 0;
                  *((_DWORD *)v179 + 102) = 0;
LABEL_1389:
                  *v15 = v179;
                  goto LABEL_1390;
                }
                v374 = *(_QWORD *)(a4 + 32);
                v375 = *(unsigned __int8 *)(v374 + v364);
                *((_DWORD *)v45 + 55) = v375;
                v376 = v218;
                if (v218 >= 1)
                {
                  do
                  {
                    v45[1] = (uint64_t *)(v88 + 1);
                    if (v375 != *(unsigned __int8 *)(v374 + *v88))
                      goto LABEL_949;
                    ++v88;
                  }
                  while (--v376);
                }
                if (v219 == v218)
                  continue;
                if (v217)
                {
                  *((_DWORD *)v45 + 56) = v218;
                  a2 = v786;
LABEL_110:
                  *(_QWORD *)&v791 = 0;
                  v65 = a1;
                  v66 = 30;
                  goto LABEL_1378;
                }
                v45[11] = (uint64_t *)v88;
                v341 = __OFSUB__(v219, v218);
                v646 = v219 - v218;
                if ((v646 < 0) ^ v341 | (v646 == 0))
                {
                  a2 = v786;
                }
                else
                {
                  v647 = 0;
                  v87 = (unint64_t)v88;
                  while ((unint64_t)&v88[v647] < v370)
                  {
                    if (v375 == *(unsigned __int8 *)(v374 + v88[v647]))
                    {
                      ++v87;
                      v45[1] = (uint64_t *)&v88[++v647];
                      if (v646 != (_DWORD)v647)
                        continue;
                    }
                    v87 = (unint64_t)&v88[v647];
                    break;
                  }
                  a2 = v786;
LABEL_113:
                  if (v87 < (unint64_t)v88)
                    goto LABEL_268;
                }
                *(_QWORD *)&v791 = 0;
                v65 = a1;
                v66 = 31;
                goto LABEL_1378;
              }
LABEL_949:
              v795 = *v45;
              pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
              v574 = v795;
              if (!v795)
                return 0;
              v13 = 0;
              *((_DWORD *)v795 + 102) = 0;
LABEL_951:
              *v15 = v574;
              a2 = v786;
              goto LABEL_1390;
            }
            v363 = 1;
            *((_DWORD *)v45 + 57) = 1;
            v45[8] = (uint64_t *)v215;
            v364 = *v215;
            *((_DWORD *)v45 + 55) = v364;
            if ((~v364 & 0xC0) == 0)
            {
              v365 = utf8_table4[v364 & 0x3F];
              v364 = (utf8_table3[v365] & v364) << (6 * v365);
              *((_DWORD *)v45 + 55) = v364;
              v366 = (char *)(v215 + 1);
              if (v365 <= 1)
                v367 = 1;
              else
                v367 = v365;
              v368 = 6 * v365 - 6;
              do
              {
                v369 = *v366++;
                v364 |= (v369 & 0x3F) << v368;
                *((_DWORD *)v45 + 55) = v364;
                v368 -= 6;
                --v367;
              }
              while (v367);
              v363 = v365 + 1;
              *((_DWORD *)v45 + 57) = v365 + 1;
            }
            v370 = *(_QWORD *)(a4 + 96);
            v88 = (unsigned __int8 *)v45[1];
            if ((uint64_t)(v370 - (_QWORD)v88) < v363 * v218)
              goto LABEL_949;
            v45[2] = (uint64_t *)&v215[v363];
            if (v363 < 2)
              goto LABEL_557;
            __s2[0] = 0;
            v788 = 0;
            v789 = 0;
            if (((_BYTE)v45[4] & 1) != 0)
            {
              v377 = ucp_findchar(v364, &v788, (unsigned int *)&v789);
              v372 = 0;
              v371 = v8;
              if ((v377 & 0x80000000) == 0 && v789 >= 1)
              {
                v372 = ord2utf8(v789, (uint64_t)__s2);
                v45 = (uint64_t **)v795;
                v218 = *((_DWORD *)v795 + 59);
              }
            }
            else
            {
              v371 = v8;
              v372 = 0;
            }
            __n = v372;
            if (v218 < 1)
            {
LABEL_579:
              v384 = *((_DWORD *)v45 + 58);
              v8 = v371;
              if (v218 == v384)
                continue;
              if (*((_DWORD *)v45 + 42))
              {
                *((_DWORD *)v45 + 56) = v218;
                a2 = v786;
LABEL_345:
                *(_QWORD *)&v791 = 0;
                v65 = a1;
                v66 = 28;
                goto LABEL_1378;
              }
              v82 = (unint64_t)v45[1];
              v45[11] = (uint64_t *)v82;
              if (v218 >= v384)
              {
                a2 = v786;
              }
              else
              {
                do
                {
                  v649 = v45[1];
                  if ((unint64_t)v649 > *(_QWORD *)(a4 + 96) - *((int *)v45 + 57))
                    break;
                  v650 = cstdlib_memcmp(v649, v45[8], *((unsigned int *)v45 + 57));
                  v45 = (uint64_t **)v795;
                  if (v650)
                  {
                    if (!__n)
                    {
                      __n = 0;
                      break;
                    }
                    v651 = cstdlib_memcmp((const void *)v795[1], __s2, __n);
                    v45 = (uint64_t **)v795;
                    if (v651)
                      break;
                    v652 = (uint64_t *)(v795[1] + (int)__n);
                  }
                  else
                  {
                    v652 = (uint64_t *)(v795[1] + *((int *)v795 + 57));
                  }
                  v45[1] = v652;
                  ++v218;
                }
                while (v218 < *((_DWORD *)v45 + 58));
                a2 = v786;
                v82 = (unint64_t)v45[1];
              }
LABEL_103:
              if (v82 >= (unint64_t)v45[11])
              {
                *(_QWORD *)&v791 = 0;
                v65 = a1;
                v66 = 29;
                goto LABEL_1378;
              }
              goto LABEL_268;
            }
            v378 = 0;
            v379 = (int)v372;
            v380 = v372;
            while (1)
            {
              v381 = cstdlib_memcmp(v45[1], v45[8], *((unsigned int *)v45 + 57));
              v45 = (uint64_t **)v795;
              if (!v381)
              {
                v383 = (uint64_t *)(v795[1] + *((int *)v795 + 57));
                goto LABEL_578;
              }
              if (!__n)
              {
                v795 = (uint64_t *)*v795;
                pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
                v581 = v795;
                if (v795)
                {
                  __n = 0;
                  goto LABEL_969;
                }
                return 0;
              }
              v382 = cstdlib_memcmp((const void *)v795[1], __s2, v380);
              v45 = (uint64_t **)v795;
              if (v382)
                break;
              v383 = (uint64_t *)(v795[1] + v379);
LABEL_578:
              v45[1] = v383;
              v218 = *((_DWORD *)v45 + 59);
              if (++v378 >= v218)
                goto LABEL_579;
            }
            v795 = (uint64_t *)*v795;
            pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
            v581 = v795;
            if (v795)
            {
LABEL_969:
              v13 = 0;
              *((_DWORD *)v581 + 102) = 0;
              *v15 = v581;
              v8 = v371;
              goto LABEL_977;
            }
            return 0;
          case 0x21u:
          case 0x22u:
          case 0x23u:
          case 0x24u:
          case 0x25u:
          case 0x26u:
            v220 = v212 + 1;
            v45[2] = (uint64_t *)(v212 + 1);
            v221 = *v212;
            v222 = (v221 - 33) & 1;
            *((_DWORD *)v45 + 42) = v222;
            v223 = rep_min_0[v221 - 33];
            *((_DWORD *)v45 + 59) = v223;
            v224 = rep_max_0[v221 - 33];
            if ((v221 - 39) < 0xFFFFFFFE)
              v224 = 0x7FFFFFFF;
            *((_DWORD *)v45 + 58) = v224;
            goto LABEL_583;
          case 0x27u:
          case 0x28u:
            v223 = 0;
            *((_DWORD *)v45 + 59) = 0;
            v224 = __rev16(*(unsigned __int16 *)(v212 + 1));
            *((_DWORD *)v45 + 58) = v224;
            v222 = *v212 == 40;
            *((_DWORD *)v45 + 42) = v222;
            goto LABEL_582;
          case 0x29u:
            v222 = 0;
            v224 = __rev16(*(unsigned __int16 *)(v212 + 1));
            *((_DWORD *)v45 + 58) = v224;
            *((_DWORD *)v45 + 59) = v224;
            v223 = v224;
LABEL_582:
            v220 = v212 + 3;
            v45[2] = (uint64_t *)(v212 + 3);
LABEL_583:
            v385 = *(_QWORD *)(a4 + 96);
            v386 = (unsigned __int8 *)v45[1];
            if ((uint64_t)(v385 - (_QWORD)v386) < v223)
              goto LABEL_1012;
            v45[2] = (uint64_t *)(v220 + 1);
            v387 = *v220;
            *((_DWORD *)v45 + 55) = v387;
            a2 = v786;
            if (((_BYTE)v45[4] & 1) == 0)
            {
              v388 = *(_DWORD *)(a4 + 60);
              if (v388)
              {
                if (v223 >= 1)
                {
                  v389 = 1;
                  v125 = v386;
                  while (1)
                  {
                    v390 = v125 + 1;
                    v45[1] = (uint64_t *)(v125 + 1);
                    v391 = *v125;
                    if ((~v391 & 0xC0) != 0)
                    {
                      ++v125;
                    }
                    else
                    {
                      v392 = utf8_table4[v391 & 0x3F];
                      v391 = (utf8_table3[utf8_table4[v391 & 0x3F]] & v391) << (6 * v392);
                      v393 = v392 + 1;
                      v394 = 6 * v392 - 6;
                      do
                      {
                        v125 = v390 + 1;
                        v45[1] = (uint64_t *)(v390 + 1);
                        v391 |= (*v390 & 0x3F) << v394;
                        --v393;
                        v394 -= 6;
                        ++v390;
                      }
                      while (v393 > 1);
                    }
                    if (v391 == (_DWORD)v387)
                      goto LABEL_268;
                    v168 = v389++ == v223;
                    if (v168)
                      goto LABEL_618;
                  }
                }
                v125 = v386;
              }
              else
              {
                v406 = v223;
                v125 = v386;
                if (v223 >= 1)
                {
                  do
                  {
                    v125 = v386 + 1;
                    v45[1] = (uint64_t *)(v386 + 1);
                    if ((_DWORD)v387 == *v386)
                      goto LABEL_268;
                    ++v386;
                  }
                  while (--v406);
                }
              }
LABEL_618:
              if (v224 == v223)
                continue;
              if (v222)
              {
                *((_DWORD *)v45 + 56) = v223;
                a2 = v786;
                if (v388)
                {
LABEL_317:
                  *(_QWORD *)&v791 = 0;
                  v65 = a1;
                  v66 = 38;
                }
                else
                {
LABEL_162:
                  *(_QWORD *)&v791 = 0;
                  v65 = a1;
                  v66 = 39;
                }
                goto LABEL_1378;
              }
              v45[11] = (uint64_t *)v125;
              if (v388)
              {
                a2 = v786;
                if (v224 > v223)
                {
                  do
                  {
                    if ((unint64_t)v125 >= v385)
                      break;
                    v599 = *v125;
                    if ((~v599 & 0xC0) != 0)
                    {
                      v605 = 1;
                    }
                    else
                    {
                      v600 = utf8_table4[v599 & 0x3F];
                      v599 = (utf8_table3[v600] & v599) << (6 * v600);
                      v601 = (char *)(v125 + 1);
                      v602 = v600 <= 1 ? 1 : v600;
                      v603 = 6 * v600 - 6;
                      do
                      {
                        v604 = *v601++;
                        v599 |= (v604 & 0x3F) << v603;
                        v603 -= 6;
                        --v602;
                      }
                      while (v602);
                      v605 = v600 + 1;
                    }
                    if (v599 == (_DWORD)v387)
                      break;
                    v125 += v605;
                    v45[1] = (uint64_t *)v125;
                    ++v223;
                  }
                  while (v223 != v224);
                }
LABEL_168:
                *(_QWORD *)&v791 = 0;
                v65 = a1;
                v66 = 40;
                goto LABEL_1378;
              }
              v341 = __OFSUB__(v224, v223);
              v663 = v224 - v223;
              a2 = v786;
              if ((v663 < 0) ^ v341 | (v663 == 0))
                goto LABEL_1144;
              v664 = 0;
              v124 = (unint64_t)v125;
              while ((unint64_t)&v125[v664] < v385)
              {
                if ((_DWORD)v387 != v125[v664])
                {
                  ++v124;
                  v45[1] = (uint64_t *)&v125[++v664];
                  if (v663 != (_DWORD)v664)
                    continue;
                }
                v124 = (unint64_t)&v125[v664];
                break;
              }
LABEL_171:
              if (v124 >= (unint64_t)v125)
              {
LABEL_1144:
                *(_QWORD *)&v791 = 0;
                v65 = a1;
                v66 = 41;
                goto LABEL_1378;
              }
              goto LABEL_268;
            }
            v395 = *(_QWORD *)(a4 + 32);
            v396 = *(unsigned __int8 *)(v395 + v387);
            *((_DWORD *)v45 + 55) = v396;
            v397 = *(_DWORD *)(a4 + 60);
            if (v397)
            {
              if (v223 >= 1)
              {
                v398 = 1;
                v110 = v386;
                while (1)
                {
                  v399 = v110++;
                  v45[1] = (uint64_t *)v110;
                  v400 = *v399;
                  if ((~v400 & 0xC0) != 0)
                    goto LABEL_604;
                  v401 = utf8_table4[v400 & 0x3F];
                  v402 = 6 * v401;
                  v400 = (utf8_table3[utf8_table4[v400 & 0x3F]] & v400) << (6 * v401);
                  v403 = v401 + 1;
                  v404 = v402 - 6;
                  do
                  {
                    v405 = v110++;
                    v45[1] = (uint64_t *)v110;
                    a3 = (*v405 & 0x3F) << v404;
                    v400 |= a3;
                    --v403;
                    v404 -= 6;
                  }
                  while (v403 > 1);
                  if (v400 <= 255)
LABEL_604:
                    v400 = *(unsigned __int8 *)(v395 + v400);
                  if (v400 == v396)
                    goto LABEL_268;
                  v168 = v398++ == v223;
                  if (v168)
                    goto LABEL_621;
                }
              }
              v110 = v386;
            }
            else
            {
              v407 = v223;
              v110 = v386;
              if (v223 >= 1)
              {
                do
                {
                  v110 = v386 + 1;
                  v45[1] = (uint64_t *)(v386 + 1);
                  if (v396 == *(unsigned __int8 *)(v395 + *v386))
                    goto LABEL_268;
                  ++v386;
                }
                while (--v407);
              }
            }
LABEL_621:
            if (v224 == v223)
              continue;
            if (v222)
            {
              *((_DWORD *)v45 + 56) = v223;
              a2 = v786;
              if (v397)
              {
LABEL_135:
                *(_QWORD *)&v791 = 0;
                v65 = a1;
                v66 = 34;
              }
              else
              {
LABEL_141:
                *(_QWORD *)&v791 = 0;
                v65 = a1;
                v66 = 35;
              }
              goto LABEL_1378;
            }
            v45[11] = (uint64_t *)v110;
            if (!v397)
            {
              v341 = __OFSUB__(v224, v223);
              v665 = v224 - v223;
              a2 = v786;
              if ((v665 < 0) ^ v341 | (v665 == 0))
                goto LABEL_1151;
              v666 = 0;
              v109 = (unint64_t)v110;
              while ((unint64_t)&v110[v666] < v385)
              {
                if (v396 != *(unsigned __int8 *)(v395 + v110[v666]))
                {
                  ++v109;
                  v45[1] = (uint64_t *)&v110[++v666];
                  if (v665 != (_DWORD)v666)
                    continue;
                }
                v109 = (unint64_t)&v110[v666];
                break;
              }
LABEL_150:
              if (v109 >= (unint64_t)v110)
              {
LABEL_1151:
                *(_QWORD *)&v791 = 0;
                v65 = a1;
                v66 = 37;
                goto LABEL_1378;
              }
              goto LABEL_268;
            }
            a2 = v786;
            if (v224 <= v223)
            {
LABEL_147:
              *(_QWORD *)&v791 = 0;
              v65 = a1;
              v66 = 36;
              goto LABEL_1378;
            }
            while (1)
            {
              if ((unint64_t)v110 >= v385)
                goto LABEL_147;
              v606 = *v110;
              if ((~v606 & 0xC0) != 0)
              {
                v612 = 1;
              }
              else
              {
                v607 = utf8_table4[v606 & 0x3F];
                v606 = (utf8_table3[v607] & v606) << (6 * v607);
                v608 = (char *)(v110 + 1);
                if (v607 <= 1)
                  v609 = 1;
                else
                  v609 = v607;
                v610 = 6 * v607 - 6;
                do
                {
                  v611 = *v608++;
                  v606 |= (v611 & 0x3F) << v610;
                  v610 -= 6;
                  --v609;
                }
                while (v609);
                v612 = v607 + 1;
                if (v606 > 255)
                  goto LABEL_1049;
              }
              v606 = *(unsigned __int8 *)(v395 + v606);
LABEL_1049:
              if (v606 != v396)
              {
                v110 += v612;
                v45[1] = (uint64_t *)v110;
                if (++v223 != v224)
                  continue;
              }
              goto LABEL_147;
            }
          case 0x2Au:
          case 0x2Bu:
          case 0x2Cu:
          case 0x2Du:
          case 0x2Eu:
          case 0x2Fu:
            v225 = v212 + 1;
            v45[2] = (uint64_t *)(v212 + 1);
            v226 = *v212;
            *((_DWORD *)v45 + 42) = v226 & 1;
            v227 = rep_min_0[v226 - 42];
            *((_DWORD *)v45 + 59) = v227;
            if ((v226 - 48) >= 0xFFFFFFFE)
              v228 = rep_max_0[v226 - 42];
            else
              v228 = 0x7FFFFFFF;
            *((_DWORD *)v45 + 58) = v228;
            goto LABEL_625;
          case 0x30u:
          case 0x31u:
            v227 = 0;
            *((_DWORD *)v45 + 59) = 0;
            *((_DWORD *)v45 + 58) = __rev16(*(unsigned __int16 *)(v212 + 1));
            v261 = *v212 == 49;
            goto LABEL_624;
          case 0x32u:
            v227 = __rev16(*(unsigned __int16 *)(v212 + 1));
            *((_DWORD *)v45 + 58) = v227;
            *((_DWORD *)v45 + 59) = v227;
            v261 = 1;
LABEL_624:
            *((_DWORD *)v45 + 42) = v261;
            v225 = v212 + 3;
            v45[2] = (uint64_t *)(v212 + 3);
LABEL_625:
            v45[2] = (uint64_t *)(v225 + 1);
            v408 = *v225;
            *((_DWORD *)v45 + 54) = v408;
            if ((v408 - 13) > 1)
            {
              v410 = -1;
              *((_DWORD *)v45 + 46) = -1;
              a2 = v786;
            }
            else
            {
              *((_DWORD *)v45 + 47) = v408 == 13;
              v45[2] = (uint64_t *)(v225 + 2);
              v409 = (char)v225[1];
              v410 = v409;
              *((_DWORD *)v45 + 46) = v409;
              if (v409 < 0)
              {
                *((_DWORD *)v45 + 51) = v409 - 128;
                v411 = (uint64_t *)(v45 + 24);
              }
              else
              {
                *((_DWORD *)v45 + 51) = v409;
                v411 = (uint64_t *)((char *)v45 + 196);
              }
              v45[26] = v411;
              a2 = v786;
            }
            v412 = *(uint64_t **)(a4 + 96);
            v413 = v45[1];
            if ((char *)v412 - (char *)v413 < v227)
              goto LABEL_268;
            v414 = v227;
            if (v227 <= 0)
              goto LABEL_945;
            if (v410 >= 1)
            {
              v415 = 1;
              while (1)
              {
                v416 = (unsigned __int8 *)v45[1];
                v45[1] = (uint64_t *)(v416 + 1);
                v417 = *v416;
                if ((~v417 & 0xC0) == 0)
                {
                  v418 = utf8_table4[v417 & 0x3F];
                  v417 = (utf8_table3[utf8_table4[v417 & 0x3F]] & v417) << (6 * v418);
                  v419 = v416 + 2;
                  v420 = 6 * v418 - 6;
                  v421 = v418 + 1;
                  do
                  {
                    v45[1] = (uint64_t *)v419;
                    v417 |= (*(v419++ - 1) & 0x3F) << v420;
                    v420 -= 6;
                    --v421;
                  }
                  while (v421 > 1);
                }
                v422 = ucp_findchar(v417, (int *)v45 + 49, (unsigned int *)v45 + 50);
                v45 = (uint64_t **)v795;
                *((_DWORD *)v795 + 48) = v422;
                if (*((_DWORD *)v45 + 47) == (*(_DWORD *)v45[26] == *((_DWORD *)v45 + 51)))
                  goto LABEL_952;
                v414 = *((_DWORD *)v45 + 59);
                v423 = v415++ < v414;
                if (!v423)
                  goto LABEL_945;
              }
            }
            if (v408 == 15)
            {
              v424 = 1;
              while (1)
              {
                v425 = (unsigned __int8 *)v45[1];
                v45[1] = (uint64_t *)(v425 + 1);
                v426 = *v425;
                if (*(_DWORD *)(a4 + 60) && (v426 & 0xC0) == 0xC0)
                {
                  v427 = utf8_table4[v426 & 0x3F];
                  v426 = (utf8_table3[utf8_table4[v426 & 0x3F]] & v426) << (6 * v427);
                  v428 = v425 + 2;
                  v429 = 6 * v427 - 6;
                  v430 = v427 + 1;
                  do
                  {
                    v45[1] = (uint64_t *)v428;
                    v426 |= (*(v428++ - 1) & 0x3F) << v429;
                    v429 -= 6;
                    --v430;
                  }
                  while (v430 > 1);
                }
                v431 = ucp_findchar(v426, (int *)v45 + 49, (unsigned int *)v45 + 50);
                v45 = (uint64_t **)v795;
                *((_DWORD *)v795 + 48) = v431;
                if (v431 == 2)
                  goto LABEL_949;
                for (j = (unsigned __int8 *)v45[1]; (unint64_t)j < *(_QWORD *)(a4 + 96); v45[1] = (uint64_t *)j)
                {
                  v433 = *j;
                  v434 = 1;
                  if (*(_DWORD *)(a4 + 60) && (v433 & 0xC0) == 0xC0)
                  {
                    v435 = utf8_table4[v433 & 0x3F];
                    v433 = (utf8_table3[v435] & v433) << (6 * v435);
                    v436 = (char *)(j + 1);
                    if (v435 <= 1)
                      v437 = 1;
                    else
                      v437 = v435;
                    v438 = 6 * v435 - 6;
                    do
                    {
                      v439 = *v436++;
                      v433 |= (v439 & 0x3F) << v438;
                      v438 -= 6;
                      --v437;
                    }
                    while (v437);
                    v434 = v435 + 1;
                  }
                  v440 = ucp_findchar(v433, (int *)v45 + 49, (unsigned int *)v45 + 50);
                  v45 = (uint64_t **)v795;
                  *((_DWORD *)v795 + 48) = v440;
                  if (v440 != 2)
                    break;
                  j = (unsigned __int8 *)v45[1] + v434;
                }
                v414 = *((_DWORD *)v45 + 59);
                v423 = v424++ < v414;
                if (!v423)
                  goto LABEL_945;
              }
            }
            if (*(_DWORD *)(a4 + 60))
            {
              switch(v408)
              {
                case 5:
                  v441 = 1;
                  while (v413 < v412)
                  {
                    v442 = (char *)v413 + 1;
                    v45[1] = (uint64_t *)((char *)v413 + 1);
                    v443 = *(unsigned __int8 *)v413;
                    if ((~v443 & 0xC0) != 0)
                    {
                      v413 = (uint64_t *)((char *)v413 + 1);
                    }
                    else
                    {
                      v444 = utf8_table4[v443 & 0x3F];
                      v443 = (utf8_table3[utf8_table4[v443 & 0x3F]] & v443) << (6 * v444);
                      v445 = 6 * v444 - 6;
                      v446 = v444 + 1;
                      do
                      {
                        v413 = (uint64_t *)(v442 + 1);
                        v45[1] = (uint64_t *)(v442 + 1);
                        v443 |= (*v442 & 0x3F) << v445;
                        v445 -= 6;
                        --v446;
                        ++v442;
                      }
                      while (v446 > 1);
                    }
                    if (v443 <= 127 && (*(_BYTE *)(*(_QWORD *)(a4 + 40) + v443) & 4) != 0)
                      break;
                    v168 = v441++ == v227;
                    if (v168)
                      goto LABEL_945;
                  }
                  goto LABEL_965;
                case 6:
                  while (v413 < v412)
                  {
                    if (*(char *)v413 < 0)
                      break;
                    v490 = *(_QWORD *)(a4 + 40);
                    v45[1] = (uint64_t *)((char *)v413 + 1);
                    if ((*(_BYTE *)(v490 + *(unsigned __int8 *)v413) & 4) == 0)
                      break;
                    v413 = (uint64_t *)((char *)v413 + 1);
                    if (!--v227)
                      goto LABEL_945;
                  }
                  goto LABEL_965;
                case 7:
                  v549 = 1;
                  while (v413 < v412)
                  {
                    if ((*(char *)v413 & 0x80000000) == 0)
                    {
                      v550 = *(_QWORD *)(a4 + 40);
                      v45[1] = (uint64_t *)((char *)v413 + 1);
                      LOBYTE(v550) = *(_BYTE *)(v550 + *(unsigned __int8 *)v413);
                      v413 = (uint64_t *)((char *)v413 + 1);
                      if ((v550 & 1) != 0)
                        break;
                    }
                    if (v413 < v412)
                    {
                      v551 = (char *)v412 - (char *)v413;
                      while ((*(_BYTE *)v413 & 0xC0) == 0x80)
                      {
                        v413 = (uint64_t *)((char *)v413 + 1);
                        v45[1] = v413;
                        if (!--v551)
                        {
                          v413 = v412;
                          break;
                        }
                      }
                    }
                    v168 = v549++ == v227;
                    if (v168)
                      goto LABEL_945;
                  }
                  goto LABEL_965;
                case 8:
                  while (v413 < v412)
                  {
                    if (*(char *)v413 < 0)
                      break;
                    v491 = *(_QWORD *)(a4 + 40);
                    v45[1] = (uint64_t *)((char *)v413 + 1);
                    if ((*(_BYTE *)(v491 + *(unsigned __int8 *)v413) & 1) == 0)
                      break;
                    v413 = (uint64_t *)((char *)v413 + 1);
                    if (!--v227)
                      goto LABEL_945;
                  }
                  goto LABEL_965;
                case 9:
                  v552 = 1;
                  while (v413 < v412)
                  {
                    if ((*(char *)v413 & 0x80000000) == 0)
                    {
                      v553 = *(_QWORD *)(a4 + 40);
                      v45[1] = (uint64_t *)((char *)v413 + 1);
                      LOBYTE(v553) = *(_BYTE *)(v553 + *(unsigned __int8 *)v413);
                      v413 = (uint64_t *)((char *)v413 + 1);
                      if ((v553 & 0x10) != 0)
                        break;
                    }
                    if (v413 < v412)
                    {
                      v554 = (char *)v412 - (char *)v413;
                      while ((*(_BYTE *)v413 & 0xC0) == 0x80)
                      {
                        v413 = (uint64_t *)((char *)v413 + 1);
                        v45[1] = v413;
                        if (!--v554)
                        {
                          v413 = v412;
                          break;
                        }
                      }
                    }
                    v168 = v552++ == v227;
                    if (v168)
                      goto LABEL_945;
                  }
                  goto LABEL_965;
                case 10:
                  v555 = 0;
                  while (1)
                  {
                    v556 = (unsigned __int8 *)v413 + v555;
                    if ((uint64_t *)((char *)v413 + v555) >= v412)
                      goto LABEL_965;
                    if ((char)*v556 < 0)
                      goto LABEL_965;
                    v557 = *(_QWORD *)(a4 + 40);
                    v45[1] = (uint64_t *)(v556 + 1);
                    if ((*(_BYTE *)(v557 + *v556) & 0x10) == 0)
                      goto LABEL_965;
                    if (v414 == (_DWORD)++v555)
                      goto LABEL_945;
                  }
                case 11:
                  v558 = 1;
                  break;
                case 12:
                  goto LABEL_944;
                default:
                  goto LABEL_1236;
              }
              while (v413 < v412)
              {
                v559 = (uint64_t *)((char *)v413 + 1);
                v45[1] = (uint64_t *)((char *)v413 + 1);
                if (*(_BYTE *)v413 == 10 && ((_BYTE)v45[4] & 4) == 0)
                  break;
                if (v559 < v412)
                {
                  v560 = (char *)v412 - (char *)v559;
                  while ((*(_BYTE *)v559 & 0xC0) == 0x80)
                  {
                    v559 = (uint64_t *)((char *)v559 + 1);
                    v45[1] = v559;
                    if (!--v560)
                    {
                      v559 = v412;
                      break;
                    }
                  }
                }
                v413 = v559;
                v168 = v558++ == v227;
                if (v168)
                  goto LABEL_945;
              }
              goto LABEL_965;
            }
            switch(v408)
            {
              case 5:
                v513 = *(_QWORD *)(a4 + 40);
                v514 = (uint64_t *)((char *)v413 + 1);
                while (1)
                {
                  v45[1] = v514;
                  if ((*(_BYTE *)(v513 + *((unsigned __int8 *)v514 - 1)) & 4) != 0)
                    goto LABEL_965;
                  v514 = (uint64_t *)((char *)v514 + 1);
                  if (!--v227)
                    goto LABEL_945;
                }
              case 6:
                v561 = *(_QWORD *)(a4 + 40);
                v562 = (uint64_t *)((char *)v413 + 1);
                while (1)
                {
                  v45[1] = v562;
                  if ((*(_BYTE *)(v561 + *((unsigned __int8 *)v562 - 1)) & 4) == 0)
                    goto LABEL_965;
                  v562 = (uint64_t *)((char *)v562 + 1);
                  if (!--v227)
                    goto LABEL_945;
                }
              case 7:
                v563 = *(_QWORD *)(a4 + 40);
                v564 = (uint64_t *)((char *)v413 + 1);
                while (1)
                {
                  v45[1] = v564;
                  if ((*(_BYTE *)(v563 + *((unsigned __int8 *)v564 - 1)) & 1) != 0)
                    goto LABEL_965;
                  v564 = (uint64_t *)((char *)v564 + 1);
                  if (!--v227)
                    goto LABEL_945;
                }
              case 8:
                v565 = *(_QWORD *)(a4 + 40);
                v566 = (uint64_t *)((char *)v413 + 1);
                while (1)
                {
                  v45[1] = v566;
                  if ((*(_BYTE *)(v565 + *((unsigned __int8 *)v566 - 1)) & 1) == 0)
                    goto LABEL_965;
                  v566 = (uint64_t *)((char *)v566 + 1);
                  if (!--v227)
                    goto LABEL_945;
                }
              case 9:
                v567 = *(_QWORD *)(a4 + 40);
                v568 = (uint64_t *)((char *)v413 + 1);
                while (1)
                {
                  v45[1] = v568;
                  if ((*(_BYTE *)(v567 + *((unsigned __int8 *)v568 - 1)) & 0x10) != 0)
                    goto LABEL_965;
                  v568 = (uint64_t *)((char *)v568 + 1);
                  if (!--v227)
                    goto LABEL_945;
                }
              case 10:
                v569 = *(_QWORD *)(a4 + 40);
                v570 = (uint64_t *)((char *)v413 + 1);
                while (1)
                {
                  v45[1] = v570;
                  if ((*(_BYTE *)(v569 + *((unsigned __int8 *)v570 - 1)) & 0x10) == 0)
                    goto LABEL_965;
                  v570 = (uint64_t *)((char *)v570 + 1);
                  if (!--v227)
                    goto LABEL_945;
                }
              case 11:
                if (((_BYTE)v45[4] & 4) != 0)
                  goto LABEL_944;
                v571 = (uint64_t *)((char *)v413 + 1);
                break;
              case 12:
LABEL_944:
                v45[1] = (uint64_t *)((char *)v413 + v227);
                goto LABEL_945;
              default:
LABEL_1236:
                v795 = *v45;
                pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
                v575 = v795;
                v13 = 4294967282;
                if (!v795)
                  return v13;
                goto LABEL_1128;
            }
            do
            {
              v45[1] = v571;
              if (*((_BYTE *)v571 - 1) == 10)
                goto LABEL_965;
              v571 = (uint64_t *)((char *)v571 + 1);
              --v227;
            }
            while (v227);
LABEL_945:
            v572 = *((_DWORD *)v45 + 58);
            v573 = v572 - v414;
            if (v572 == v414)
              continue;
            if (*((_DWORD *)v45 + 42))
            {
              if (*((int *)v45 + 46) < 1)
              {
                a2 = v786;
                if (*((_DWORD *)v45 + 54) == 15)
                {
                  *((_DWORD *)v45 + 56) = v414;
LABEL_334:
                  *(_QWORD *)&v791 = 0;
                  v192 = a1;
                  v193 = 43;
                  goto LABEL_335;
                }
                v648 = *(_DWORD *)(a4 + 60);
                *((_DWORD *)v45 + 56) = v414;
                if (v648)
                {
LABEL_364:
                  *(_QWORD *)&v791 = 0;
                  v65 = a1;
                  v66 = 44;
                }
                else
                {
LABEL_378:
                  *(_QWORD *)&v791 = 0;
                  v65 = a1;
                  v66 = 45;
                }
              }
              else
              {
                *((_DWORD *)v45 + 56) = v414;
                a2 = v786;
LABEL_181:
                *(_QWORD *)&v791 = 0;
                v65 = a1;
                v66 = 42;
              }
              goto LABEL_1378;
            }
            v194 = v45[1];
            v45[11] = v194;
            if (*((int *)v45 + 46) >= 1)
            {
              a2 = v786;
              if (v572 > v414)
              {
                while ((unint64_t)v194 < *(_QWORD *)(a4 + 96))
                {
                  v586 = v10;
                  v587 = *(unsigned __int8 *)v194;
                  v588 = v8;
                  if ((~v587 & 0xC0) != 0)
                  {
                    v594 = 1;
                  }
                  else
                  {
                    v589 = utf8_table4[v587 & 0x3F];
                    v587 = (utf8_table3[v589] & v587) << (6 * v589);
                    v590 = (char *)v194 + 1;
                    if (v589 <= 1)
                      v591 = 1;
                    else
                      v591 = v589;
                    v592 = 6 * v589 - 6;
                    do
                    {
                      v593 = *v590++;
                      v587 |= (v593 & 0x3F) << v592;
                      v592 -= 6;
                      --v591;
                    }
                    while (v591);
                    v594 = v589 + 1;
                  }
                  v595 = ucp_findchar(v587, (int *)v45 + 49, (unsigned int *)v45 + 50);
                  v45 = (uint64_t **)v795;
                  *((_DWORD *)v795 + 48) = v595;
                  if (*((_DWORD *)v45 + 47) == (*(_DWORD *)v45[26] == *((_DWORD *)v45 + 51)))
                  {
                    v8 = v588;
                    v10 = v586;
                    a2 = v786;
                    break;
                  }
                  v194 = (uint64_t *)((char *)v45[1] + v594);
                  v45[1] = v194;
                  ++v414;
                  v8 = v588;
                  v10 = v586;
                  a2 = v786;
                  if (v414 >= *((_DWORD *)v45 + 58))
                    break;
                }
              }
LABEL_223:
              *(_QWORD *)&v791 = 0;
              v65 = a1;
              v66 = 46;
              goto LABEL_1378;
            }
            v625 = *((_DWORD *)v45 + 54);
            a2 = v786;
            if (v625 == 15)
            {
              if (v572 > v414)
              {
                do
                {
                  v626 = (unsigned __int8 *)v45[1];
                  if ((unint64_t)v626 >= *(_QWORD *)(a4 + 96))
                    break;
                  v45[1] = (uint64_t *)(v626 + 1);
                  v627 = *v626;
                  if (*(_DWORD *)(a4 + 60) && (v627 & 0xC0) == 0xC0)
                  {
                    v628 = utf8_table4[v627 & 0x3F];
                    v627 = (utf8_table3[utf8_table4[v627 & 0x3F]] & v627) << (6 * v628);
                    v629 = v626 + 2;
                    v630 = 6 * v628 - 6;
                    v631 = v628 + 1;
                    do
                    {
                      v45[1] = (uint64_t *)v629;
                      v627 |= (*(v629++ - 1) & 0x3F) << v630;
                      v630 -= 6;
                      --v631;
                    }
                    while (v631 > 1);
                  }
                  v632 = v10;
                  v633 = ucp_findchar(v627, (int *)v45 + 49, (unsigned int *)v45 + 50);
                  v45 = (uint64_t **)v795;
                  *((_DWORD *)v795 + 48) = v633;
                  if (v633 == 2)
                  {
                    a2 = v786;
                    break;
                  }
                  v634 = v8;
                  for (k = (unsigned __int8 *)v45[1]; (unint64_t)k < *(_QWORD *)(a4 + 96); v45[1] = (uint64_t *)k)
                  {
                    v636 = *k;
                    v637 = 1;
                    if (*(_DWORD *)(a4 + 60) && (v636 & 0xC0) == 0xC0)
                    {
                      v638 = utf8_table4[v636 & 0x3F];
                      v636 = (utf8_table3[v638] & v636) << (6 * v638);
                      v639 = (char *)(k + 1);
                      if (v638 <= 1)
                        v640 = 1;
                      else
                        v640 = v638;
                      v641 = 6 * v638 - 6;
                      do
                      {
                        v642 = *v639++;
                        v636 |= (v642 & 0x3F) << v641;
                        v641 -= 6;
                        --v640;
                      }
                      while (v640);
                      v637 = v638 + 1;
                    }
                    v643 = ucp_findchar(v636, (int *)v45 + 49, (unsigned int *)v45 + 50);
                    v45 = (uint64_t **)v795;
                    *((_DWORD *)v795 + 48) = v643;
                    if (v643 != 2)
                      break;
                    k = (unsigned __int8 *)v45[1] + v637;
                  }
                  ++v414;
                  v8 = v634;
                  v10 = v632;
                  a2 = v786;
                }
                while (v414 < *((_DWORD *)v45 + 58));
              }
LABEL_1248:
              *(_QWORD *)&v791 = 0;
              v65 = a1;
              v66 = 47;
              goto LABEL_1378;
            }
            if (*(_DWORD *)(a4 + 60))
            {
              switch(v625)
              {
                case 5:
                  if (v572 <= v414)
                    goto LABEL_1413;
                  v667 = *(_QWORD *)(a4 + 96);
                  while (2)
                  {
                    if ((unint64_t)v194 >= v667)
                      goto LABEL_1422;
                    v668 = *(unsigned __int8 *)v194;
                    if ((~v668 & 0xC0) != 0)
                    {
                      v674 = 1;
                    }
                    else
                    {
                      v669 = utf8_table4[v668 & 0x3F];
                      v668 = (utf8_table3[v669] & v668) << (6 * v669);
                      v670 = (char *)v194 + 1;
                      if (v669 <= 1)
                        v671 = 1;
                      else
                        v671 = v669;
                      v672 = 6 * v669 - 6;
                      do
                      {
                        v673 = *v670++;
                        v668 |= (v673 & 0x3F) << v672;
                        v672 -= 6;
                        --v671;
                      }
                      while (v671);
                      v674 = v669 + 1;
                      if (v668 > 255)
                        goto LABEL_1167;
                    }
                    if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v668) & 4) != 0)
                      goto LABEL_1422;
LABEL_1167:
                    v194 = (uint64_t *)((char *)v194 + v674);
                    v45[1] = v194;
                    if (++v414 == v572)
                      goto LABEL_1422;
                    continue;
                  }
                case 6:
                  if (v572 <= v414)
                    goto LABEL_1413;
                  v707 = *(_QWORD *)(a4 + 96);
                  while (2)
                  {
                    if ((unint64_t)v194 >= v707)
                      goto LABEL_1422;
                    v708 = *(unsigned __int8 *)v194;
                    if ((~v708 & 0xC0) != 0)
                    {
                      v714 = 1;
                      goto LABEL_1265;
                    }
                    v709 = utf8_table4[v708 & 0x3F];
                    v708 = (utf8_table3[v709] & v708) << (6 * v709);
                    v710 = (char *)v194 + 1;
                    if (v709 <= 1)
                      v711 = 1;
                    else
                      v711 = v709;
                    v712 = 6 * v709 - 6;
                    do
                    {
                      v713 = *v710++;
                      v708 |= (v713 & 0x3F) << v712;
                      v712 -= 6;
                      --v711;
                    }
                    while (v711);
                    if (v708 <= 255)
                    {
                      v714 = v709 + 1;
LABEL_1265:
                      if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v708) & 4) == 0)
                        goto LABEL_1422;
                      v194 = (uint64_t *)((char *)v194 + v714);
                      v45[1] = v194;
                      if (++v414 == v572)
                        goto LABEL_1422;
                      continue;
                    }
                    goto LABEL_1422;
                  }
                case 7:
                  if (v572 <= v414)
                    goto LABEL_1413;
                  v715 = *(_QWORD *)(a4 + 96);
                  while (2)
                  {
                    if ((unint64_t)v194 >= v715)
                      goto LABEL_1422;
                    v716 = *(unsigned __int8 *)v194;
                    if ((~v716 & 0xC0) != 0)
                    {
                      v722 = 1;
                    }
                    else
                    {
                      v717 = utf8_table4[v716 & 0x3F];
                      v716 = (utf8_table3[v717] & v716) << (6 * v717);
                      v718 = (char *)v194 + 1;
                      if (v717 <= 1)
                        v719 = 1;
                      else
                        v719 = v717;
                      v720 = 6 * v717 - 6;
                      do
                      {
                        v721 = *v718++;
                        v716 |= (v721 & 0x3F) << v720;
                        v720 -= 6;
                        --v719;
                      }
                      while (v719);
                      v722 = v717 + 1;
                      if (v716 > 255)
                        goto LABEL_1281;
                    }
                    if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v716) & 1) != 0)
                      goto LABEL_1422;
LABEL_1281:
                    v194 = (uint64_t *)((char *)v194 + v722);
                    v45[1] = v194;
                    if (++v414 == v572)
                      goto LABEL_1422;
                    continue;
                  }
                case 8:
                  if (v572 <= v414)
                    goto LABEL_1413;
                  v723 = *(_QWORD *)(a4 + 96);
                  while (2)
                  {
                    if ((unint64_t)v194 >= v723)
                      goto LABEL_1422;
                    v724 = *(unsigned __int8 *)v194;
                    if ((~v724 & 0xC0) != 0)
                    {
                      v730 = 1;
                      goto LABEL_1295;
                    }
                    v725 = utf8_table4[v724 & 0x3F];
                    v724 = (utf8_table3[v725] & v724) << (6 * v725);
                    v726 = (char *)v194 + 1;
                    if (v725 <= 1)
                      v727 = 1;
                    else
                      v727 = v725;
                    v728 = 6 * v725 - 6;
                    do
                    {
                      v729 = *v726++;
                      v724 |= (v729 & 0x3F) << v728;
                      v728 -= 6;
                      --v727;
                    }
                    while (v727);
                    if (v724 <= 255)
                    {
                      v730 = v725 + 1;
LABEL_1295:
                      if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v724) & 1) == 0)
                        goto LABEL_1422;
                      v194 = (uint64_t *)((char *)v194 + v730);
                      v45[1] = v194;
                      if (++v414 == v572)
                        goto LABEL_1422;
                      continue;
                    }
                    goto LABEL_1422;
                  }
                case 9:
                  if (v572 <= v414)
                    goto LABEL_1413;
                  v731 = *(_QWORD *)(a4 + 96);
                  while (2)
                  {
                    if ((unint64_t)v194 >= v731)
                      goto LABEL_1422;
                    v732 = *(unsigned __int8 *)v194;
                    if ((~v732 & 0xC0) != 0)
                    {
                      v738 = 1;
                    }
                    else
                    {
                      v733 = utf8_table4[v732 & 0x3F];
                      v732 = (utf8_table3[v733] & v732) << (6 * v733);
                      v734 = (char *)v194 + 1;
                      if (v733 <= 1)
                        v735 = 1;
                      else
                        v735 = v733;
                      v736 = 6 * v733 - 6;
                      do
                      {
                        v737 = *v734++;
                        v732 |= (v737 & 0x3F) << v736;
                        v736 -= 6;
                        --v735;
                      }
                      while (v735);
                      v738 = v733 + 1;
                      if (v732 > 255)
                        goto LABEL_1311;
                    }
                    if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v732) & 0x10) != 0)
                      goto LABEL_1422;
LABEL_1311:
                    v194 = (uint64_t *)((char *)v194 + v738);
                    v45[1] = v194;
                    if (++v414 == v572)
                      goto LABEL_1422;
                    continue;
                  }
                case 10:
                  if (v572 <= v414)
                    goto LABEL_1413;
                  v739 = *(_QWORD *)(a4 + 96);
                  while (2)
                  {
                    if ((unint64_t)v194 >= v739)
                      goto LABEL_1422;
                    v740 = *(unsigned __int8 *)v194;
                    if ((~v740 & 0xC0) != 0)
                    {
                      v746 = 1;
                      goto LABEL_1325;
                    }
                    v741 = utf8_table4[v740 & 0x3F];
                    v740 = (utf8_table3[v741] & v740) << (6 * v741);
                    v742 = (char *)v194 + 1;
                    if (v741 <= 1)
                      v743 = 1;
                    else
                      v743 = v741;
                    v744 = 6 * v741 - 6;
                    do
                    {
                      v745 = *v742++;
                      v740 |= (v745 & 0x3F) << v744;
                      v744 -= 6;
                      --v743;
                    }
                    while (v743);
                    if (v740 <= 255)
                    {
                      v746 = v741 + 1;
LABEL_1325:
                      if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v740) & 0x10) == 0)
                        goto LABEL_1422;
                      v194 = (uint64_t *)((char *)v194 + v746);
                      v45[1] = v194;
                      if (++v414 == v572)
                        goto LABEL_1422;
                      continue;
                    }
                    goto LABEL_1422;
                  }
                case 11:
                  v747 = v45[4];
                  if (v572 == 0x7FFFFFFF)
                  {
                    if ((v747 & 4) != 0)
                    {
                      v750 = v414 ^ 0x7FFFFFFFu;
                      if (*(_QWORD *)(a4 + 96) - (_QWORD)v194 < v750)
                        LODWORD(v750) = *(_DWORD *)(a4 + 96) - (_DWORD)v194;
LABEL_1412:
                      v45[1] = (uint64_t *)((char *)v194 + (int)v750);
                    }
                    else if (v414 != 0x7FFFFFFF)
                    {
                      v748 = *(_QWORD *)(a4 + 96);
                      v749 = v414 - 0x7FFFFFFF;
                      do
                      {
                        if ((unint64_t)v194 >= v748)
                          break;
                        if (*(_BYTE *)v194 == 10)
                          break;
                        v194 = (uint64_t *)((char *)v194 + 1);
                        v45[1] = v194;
                        v54 = __CFADD__(v749++, 1);
                      }
                      while (!v54);
LABEL_1422:
                      a2 = v786;
LABEL_245:
                      *(_QWORD *)&v791 = 0;
                      v65 = a1;
                      v66 = 48;
                      goto LABEL_1378;
                    }
                  }
                  else if ((v747 & 4) != 0)
                  {
                    if (v572 > v414)
                    {
                      v769 = *(_QWORD *)(a4 + 96);
                      do
                      {
                        v770 = (uint64_t *)((char *)v194 + 1);
                        v45[1] = (uint64_t *)((char *)v194 + 1);
                        if ((unint64_t)v194 + 1 < v769)
                        {
                          v771 = v769 - 1 - (_QWORD)v194;
                          while ((*(_BYTE *)v770 & 0xC0) == 0x80)
                          {
                            v770 = (uint64_t *)((char *)v770 + 1);
                            v45[1] = v770;
                            if (!--v771)
                            {
                              v770 = (uint64_t *)v769;
                              break;
                            }
                          }
                        }
                        ++v414;
                        v194 = v770;
                      }
                      while (v414 != v572);
                      goto LABEL_1422;
                    }
                  }
                  else if (v572 > v414)
                  {
                    v767 = *(uint64_t **)(a4 + 96);
                    while (v194 < v767 && *(_BYTE *)v194 != 10)
                    {
                      v194 = (uint64_t *)((char *)v194 + 1);
                      v45[1] = v194;
                      if (v194 < v767)
                      {
                        v768 = (char *)v767 - (char *)v194;
                        while ((*(_BYTE *)v194 & 0xC0) == 0x80)
                        {
                          v194 = (uint64_t *)((char *)v194 + 1);
                          v45[1] = v194;
                          if (!--v768)
                          {
                            v194 = v767;
                            break;
                          }
                        }
                      }
                      if (++v414 == v572)
                        goto LABEL_1422;
                    }
                    goto LABEL_1422;
                  }
LABEL_1413:
                  a2 = v786;
                  goto LABEL_245;
                case 12:
                  v750 = *(_QWORD *)(a4 + 96) - (_QWORD)v194;
                  if (v750 >= v573)
                    LODWORD(v750) = v573;
                  goto LABEL_1412;
                default:
                  goto LABEL_1236;
              }
            }
            switch(v625)
            {
              case 5:
                v699 = v572 - v414;
                if (v572 <= v414)
                  goto LABEL_1376;
                v700 = 0;
                v701 = *(_QWORD *)(a4 + 96);
                v178 = (unint64_t)v194;
                while (1)
                {
                  v702 = (char *)v194 + v700;
                  if ((unint64_t)v194 + v700 >= v701)
                    goto LABEL_1396;
                  if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + *v702) & 4) != 0)
                    goto LABEL_1397;
                  ++v178;
                  v45[1] = (uint64_t *)((char *)v194 + ++v700);
                  if (v699 == (_DWORD)v700)
                    goto LABEL_1375;
                }
              case 6:
                v751 = v572 - v414;
                if (v572 <= v414)
                  goto LABEL_1376;
                v700 = 0;
                v752 = *(_QWORD *)(a4 + 96);
                v178 = (unint64_t)v194;
                while (1)
                {
                  v702 = (char *)v194 + v700;
                  if ((unint64_t)v194 + v700 >= v752)
                    goto LABEL_1396;
                  if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + *v702) & 4) == 0)
                    goto LABEL_1397;
                  ++v178;
                  v45[1] = (uint64_t *)((char *)v194 + ++v700);
                  if (v751 == (_DWORD)v700)
                    goto LABEL_1375;
                }
              case 7:
                v753 = v572 - v414;
                if (v572 <= v414)
                  goto LABEL_1376;
                v700 = 0;
                v754 = *(_QWORD *)(a4 + 96);
                v178 = (unint64_t)v194;
                while (1)
                {
                  v702 = (char *)v194 + v700;
                  if ((unint64_t)v194 + v700 >= v754)
                    goto LABEL_1396;
                  if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + *v702) & 1) != 0)
                    goto LABEL_1397;
                  ++v178;
                  v45[1] = (uint64_t *)((char *)v194 + ++v700);
                  if (v753 == (_DWORD)v700)
                    goto LABEL_1375;
                }
              case 8:
                v755 = v572 - v414;
                if (v572 <= v414)
                  goto LABEL_1376;
                v700 = 0;
                v756 = *(_QWORD *)(a4 + 96);
                v178 = (unint64_t)v194;
                while (1)
                {
                  v702 = (char *)v194 + v700;
                  if ((unint64_t)v194 + v700 >= v756)
                    goto LABEL_1396;
                  if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + *v702) & 1) == 0)
                    goto LABEL_1397;
                  ++v178;
                  v45[1] = (uint64_t *)((char *)v194 + ++v700);
                  if (v755 == (_DWORD)v700)
                    goto LABEL_1375;
                }
              case 9:
                v757 = v572 - v414;
                if (v572 <= v414)
                  goto LABEL_1376;
                v700 = 0;
                v758 = *(_QWORD *)(a4 + 96);
                v178 = (unint64_t)v194;
                while (1)
                {
                  v702 = (char *)v194 + v700;
                  if ((unint64_t)v194 + v700 >= v758)
                    goto LABEL_1396;
                  if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + *v702) & 0x10) != 0)
                    goto LABEL_1397;
                  ++v178;
                  v45[1] = (uint64_t *)((char *)v194 + ++v700);
                  if (v757 == (_DWORD)v700)
                    goto LABEL_1375;
                }
              case 10:
                v759 = v572 - v414;
                if (v572 <= v414)
                  goto LABEL_1376;
                v700 = 0;
                v760 = *(_QWORD *)(a4 + 96);
                v178 = (unint64_t)v194;
                while (1)
                {
                  v702 = (char *)v194 + v700;
                  if ((unint64_t)v194 + v700 >= v760)
                    goto LABEL_1396;
                  if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + *v702) & 0x10) == 0)
                    goto LABEL_1397;
                  ++v178;
                  v45[1] = (uint64_t *)((char *)v194 + ++v700);
                  if (v759 == (_DWORD)v700)
                    goto LABEL_1375;
                }
              case 11:
                if (((_BYTE)v45[4] & 4) != 0)
                  goto LABEL_1393;
                v761 = v572 - v414;
                if (v572 <= v414)
                {
LABEL_1376:
                  a2 = v786;
                  goto LABEL_1377;
                }
                v700 = 0;
                v762 = *(_QWORD *)(a4 + 96);
                v178 = (unint64_t)v194;
                while (1)
                {
                  v702 = (char *)v194 + v700;
                  if ((unint64_t)v194 + v700 >= v762)
                    break;
                  if (*v702 == 10)
                    goto LABEL_1397;
                  ++v178;
                  v45[1] = (uint64_t *)((char *)v194 + ++v700);
                  if (v761 == (_DWORD)v700)
                  {
LABEL_1375:
                    v178 = (unint64_t)v194 + v700;
                    goto LABEL_1397;
                  }
                }
LABEL_1396:
                v178 = (unint64_t)v702;
LABEL_1397:
                a2 = v786;
                break;
              case 12:
LABEL_1393:
                v766 = *(_QWORD *)(a4 + 96) - (_QWORD)v194;
                if (v766 >= v573)
                  LODWORD(v766) = v573;
                v178 = (unint64_t)v194 + (int)v766;
                v45[1] = (uint64_t *)v178;
                a2 = v786;
                goto LABEL_267;
              default:
                goto LABEL_1236;
            }
            goto LABEL_267;
          case 0x3Bu:
          case 0x3Cu:
            v262 = v212 + 1;
            v45[9] = (uint64_t *)(v212 + 1);
            v45[2] = (uint64_t *)(v212 + 33);
            v263 = v212[33];
            if ((v263 - 51) >= 6)
            {
              if ((v263 - 57) >= 2)
              {
                v265 = 0;
                v45[29] = (uint64_t *)0x100000001;
                v267 = 1;
                v266 = 1;
                if (*(_DWORD *)(a4 + 60))
                {
LABEL_718:
                  v475 = *(_QWORD *)(a4 + 96);
                  v476 = (unsigned __int8 *)v45[1];
                  v477 = 1;
                  while ((unint64_t)v476 < v475)
                  {
                    v478 = v476 + 1;
                    v45[1] = (uint64_t *)(v476 + 1);
                    v479 = *v476;
                    if ((~v479 & 0xC0) != 0)
                      goto LABEL_726;
                    v480 = utf8_table4[v479 & 0x3F];
                    v481 = 6 * v480;
                    v479 = (utf8_table3[utf8_table4[v479 & 0x3F]] & v479) << (6 * v480);
                    v482 = v480 + 1;
                    v483 = v481 - 6;
                    do
                    {
                      v484 = v478++;
                      v45[1] = (uint64_t *)v478;
                      v479 |= (*v484 & 0x3F) << v483;
                      --v482;
                      v483 -= 6;
                    }
                    while (v482 > 1);
                    if (v479 < 256)
                    {
LABEL_726:
                      if (((v262[v479 / 8] >> (v479 & 7)) & 1) == 0)
                        goto LABEL_949;
                    }
                    else if (v213 == 59)
                    {
                      goto LABEL_949;
                    }
                    v476 = v478;
                    v168 = v477++ == v266;
                    if (v168)
                      goto LABEL_729;
                  }
                  goto LABEL_949;
                }
                goto LABEL_731;
              }
              v265 = v263 == 58;
              *((_DWORD *)v45 + 42) = v265;
              v266 = __rev16(*((unsigned __int16 *)v212 + 17));
              *((_DWORD *)v45 + 59) = v266;
              v267 = __rev16(*((unsigned __int16 *)v212 + 18));
              if (!v267)
                v267 = 0x7FFFFFFF;
              *((_DWORD *)v45 + 58) = v267;
              v45[2] = (uint64_t *)(v212 + 38);
            }
            else
            {
              v45[2] = (uint64_t *)(v212 + 34);
              v264 = v212[33];
              v265 = (v264 - 51) & 1;
              *((_DWORD *)v45 + 42) = v265;
              v266 = rep_min_0[v264 - 51];
              *((_DWORD *)v45 + 59) = v266;
              if ((v264 - 57) >= 0xFFFFFFFE)
                v267 = rep_max_0[v264 - 51];
              else
                v267 = 0x7FFFFFFF;
              *((_DWORD *)v45 + 58) = v267;
            }
            if (*(_DWORD *)(a4 + 60))
            {
              if (v266 >= 1)
                goto LABEL_718;
LABEL_729:
              v485 = 0;
              goto LABEL_736;
            }
            if (v266 < 1)
            {
LABEL_735:
              v485 = 1;
LABEL_736:
              if (v267 == v266)
                continue;
              if (v265)
              {
                *((_DWORD *)v45 + 56) = v266;
                a2 = v786;
                if ((v485 & 1) != 0)
                {
LABEL_74:
                  *(_QWORD *)&v791 = 0;
                  v65 = a1;
                  v66 = 23;
                  goto LABEL_1378;
                }
                goto LABEL_331;
              }
              v71 = (unsigned __int8 *)v45[1];
              v45[11] = (uint64_t *)v71;
              if ((v485 & 1) != 0)
              {
                v341 = __OFSUB__(v267, v266);
                v675 = v267 - v266;
                if ((v675 < 0) ^ v341 | (v675 == 0))
                {
                  a2 = v786;
                }
                else
                {
                  v676 = 0;
                  v677 = *(_QWORD *)(a4 + 96);
                  v70 = (unint64_t)v71;
                  while ((unint64_t)&v71[v676] < v677)
                  {
                    if (((v262[(unint64_t)v71[v676] >> 3] >> (v71[v676] & 7)) & 1) == 0)
                      goto LABEL_1252;
                    ++v70;
                    v45[1] = (uint64_t *)&v71[++v676];
                    if (v675 == (_DWORD)v676)
                    {
                      v70 = (unint64_t)&v71[v676];
                      goto LABEL_1252;
                    }
                  }
                  v70 = (unint64_t)&v71[v676];
LABEL_1252:
                  a2 = v786;
LABEL_83:
                  if (v70 < (unint64_t)v71)
                    goto LABEL_268;
                }
                *(_QWORD *)&v791 = 0;
                v65 = a1;
                v66 = 25;
                goto LABEL_1378;
              }
              if (v267 <= v266)
              {
LABEL_1226:
                a2 = v786;
LABEL_80:
                *(_QWORD *)&v791 = 0;
                v65 = a1;
                v66 = 24;
                goto LABEL_1378;
              }
              v691 = *(_QWORD *)(a4 + 96);
              while (1)
              {
                if ((unint64_t)v71 >= v691)
                  goto LABEL_1226;
                v692 = *v71;
                if ((~v692 & 0xC0) != 0)
                  break;
                v693 = utf8_table4[v692 & 0x3F];
                v692 = (utf8_table3[v693] & v692) << (6 * v693);
                v694 = (char *)(v71 + 1);
                if (v693 <= 1)
                  v695 = 1;
                else
                  v695 = v693;
                v696 = 6 * v693 - 6;
                do
                {
                  v697 = *v694++;
                  v692 |= (v697 & 0x3F) << v696;
                  v696 -= 6;
                  --v695;
                }
                while (v695);
                v698 = v693 + 1;
                if (v692 < 256)
                  goto LABEL_1224;
                if (v213 == 59)
                  goto LABEL_1226;
LABEL_1225:
                v71 += v698;
                v45[1] = (uint64_t *)v71;
                if (++v266 == v267)
                  goto LABEL_1226;
              }
              v698 = 1;
LABEL_1224:
              if (((v262[v692 / 8] >> (v692 & 7)) & 1) == 0)
                goto LABEL_1226;
              goto LABEL_1225;
            }
LABEL_731:
            v486 = 0;
            v487 = *(_QWORD *)(a4 + 96);
            v488 = v45[1];
            while (1)
            {
              v489 = (char *)v488 + v486;
              if ((unint64_t)v488 + v486 >= v487)
                goto LABEL_949;
              v45[1] = (uint64_t *)(v489 + 1);
              if (((v262[(unint64_t)*v489 >> 3] >> (*v489 & 7)) & 1) == 0)
                goto LABEL_949;
              if (v266 == (_DWORD)++v486)
                goto LABEL_735;
            }
          case 0x3Du:
            v447 = v212 + 3;
            v45[9] = (uint64_t *)(v212 + 3);
            v448 = &v212[__rev16(*(unsigned __int16 *)(v212 + 1))];
            v45[2] = (uint64_t *)v448;
            v449 = *v448;
            if ((v449 - 51) >= 6)
            {
              if ((v449 - 57) >= 2)
              {
                v451 = 0;
                v45[29] = (uint64_t *)0x100000001;
                v452 = 1;
                v453 = 1;
                goto LABEL_808;
              }
              v451 = v449 == 58;
              *((_DWORD *)v45 + 42) = v451;
              v452 = __rev16(*(unsigned __int16 *)(v448 + 1));
              *((_DWORD *)v45 + 59) = v452;
              v453 = __rev16(*(unsigned __int16 *)(v448 + 3));
              if (!v453)
                v453 = 0x7FFFFFFF;
              *((_DWORD *)v45 + 58) = v453;
              v45[2] = (uint64_t *)(v448 + 5);
            }
            else
            {
              v45[2] = (uint64_t *)(v448 + 1);
              v450 = *v448;
              v451 = (v450 - 51) & 1;
              *((_DWORD *)v45 + 42) = v451;
              v452 = rep_min_0[v450 - 51];
              *((_DWORD *)v45 + 59) = v452;
              v453 = rep_max_0[v450 - 51];
              if ((v450 - 57) < 0xFFFFFFFE)
                v453 = 0x7FFFFFFF;
              *((_DWORD *)v45 + 58) = v453;
            }
            if (v452 < 1)
              goto LABEL_819;
LABEL_808:
            v776 = v451;
            v778 = v453;
            v782 = v10;
            v521 = v8;
            v522 = *(_QWORD *)(a4 + 96);
            v523 = (unsigned __int8 *)v45[1];
            v524 = 1;
            while ((unint64_t)v523 < v522)
            {
              v525 = v523 + 1;
              v45[1] = (uint64_t *)(v523 + 1);
              v526 = *v523;
              if ((~v526 & 0xC0) != 0)
              {
                ++v523;
              }
              else
              {
                v527 = utf8_table4[v526 & 0x3F];
                v528 = 6 * v527;
                v526 = (utf8_table3[utf8_table4[v526 & 0x3F]] & v526) << (6 * v527);
                v529 = v527 + 1;
                v530 = v528 - 6;
                do
                {
                  v523 = v525 + 1;
                  v45[1] = (uint64_t *)(v525 + 1);
                  v526 |= (*v525 & 0x3F) << v530;
                  --v529;
                  v530 -= 6;
                  ++v525;
                }
                while (v529 > 1);
              }
              if (!match_xclass(v526, v447))
                break;
              v168 = v524++ == v452;
              if (v168)
              {
                v8 = v521;
                v10 = v782;
                v453 = v778;
                v451 = v776;
LABEL_819:
                if (v452 != v453)
                {
                  if (v451)
                  {
                    *((_DWORD *)v45 + 56) = v452;
                    a2 = v786;
LABEL_265:
                    *(_QWORD *)&v791 = 0;
                    v192 = a1;
                    v193 = 26;
LABEL_335:
                    v50 = pcre_getMem(v192, v193, &v791, a4, a5, (uint64_t)a6, a7, a8);
                    v24 = (uint64_t *)v791;
                    v51 = v795;
LABEL_336:
                    if (!v24)
                    {
LABEL_1385:
                      v598 = (uint64_t *)*v51;
LABEL_1386:
                      v795 = v598;
                      pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
                      v179 = v795;
                      if (v795)
                      {
LABEL_1387:
                        v13 = 4294967290;
                        goto LABEL_1388;
                      }
                      return 4294967290;
                    }
LABEL_1379:
                    if (v50 < 0)
                      goto LABEL_1385;
                    v763 = *(_OWORD *)(v51 + 1);
                    *(_OWORD *)(v24 + 1) = v763;
                    *((_DWORD *)v24 + 6) = *((_DWORD *)v51 + 6);
                    v181 = v51[4];
                    v24[4] = v181;
                    v180 = v51[5];
                    v24[5] = v180;
                    *((_DWORD *)v24 + 12) = 0;
                    *v24 = (uint64_t)v51;
                    v795 = v24;
                    v27 = v763;
LABEL_1381:
                    v26 = 1;
                    goto LABEL_1382;
                  }
                  v681 = (unsigned __int8 *)v45[1];
                  v45[11] = (uint64_t *)v681;
                  if (v452 < v453)
                  {
                    v682 = v453;
                    v783 = v10;
                    v683 = v8;
                    v780 = *(_QWORD *)(a4 + 96);
                    do
                    {
                      if ((unint64_t)v681 >= v780)
                        break;
                      v684 = *v681;
                      if ((~v684 & 0xC0) != 0)
                      {
                        v690 = 1;
                      }
                      else
                      {
                        v685 = utf8_table4[v684 & 0x3F];
                        v684 = (utf8_table3[v685] & v684) << (6 * v685);
                        v686 = (char *)(v681 + 1);
                        v687 = v685 <= 1 ? 1 : v685;
                        v688 = 6 * v685 - 6;
                        do
                        {
                          v689 = *v686++;
                          v684 |= (v689 & 0x3F) << v688;
                          v688 -= 6;
                          --v687;
                        }
                        while (v687);
                        v690 = v685 + 1;
                      }
                      if (!match_xclass(v684, v447))
                        break;
                      v681 += v690;
                      v45[1] = (uint64_t *)v681;
                      ++v452;
                    }
                    while (v452 != v682);
                    v8 = v683;
                    v10 = v783;
                  }
                  a2 = v786;
LABEL_93:
                  *(_QWORD *)&v791 = 0;
                  v65 = a1;
                  v66 = 27;
LABEL_1378:
                  v50 = pcre_getMem(v65, v66, &v791, a4, a5, (uint64_t)a6, a7, a8);
                  v24 = (uint64_t *)v791;
                  v51 = v795;
                  if (!(_QWORD)v791)
                    goto LABEL_1385;
                  goto LABEL_1379;
                }
                goto LABEL_379;
              }
            }
            v795 = *v45;
            pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
            v582 = v795;
            if (!v795)
              return 0;
            v13 = 0;
            *((_DWORD *)v795 + 102) = 0;
            *v15 = v582;
            v8 = v521;
            goto LABEL_976;
          case 0x3Eu:
            v454 = (v212[1] << 9) | (2 * v212[2]);
            *((_DWORD *)v45 + 61) = v454;
            v45[2] = (uint64_t *)(v212 + 3);
            if ((int)v454 >= *((_DWORD *)v45 + 6)
              || (v455 = *(_QWORD *)(a4 + 16), v456 = *(_DWORD *)(v455 + 4 * v454), v456 < 0))
            {
              a3 = *(_QWORD *)(a4 + 96) - (_QWORD)v45[1] + 1;
            }
            else
            {
              a3 = (*(_DWORD *)(v455 + 4 * (v454 | 1)) - v456);
            }
            *((_DWORD *)v45 + 57) = a3;
            v471 = v212[3];
            if ((v471 - 51) >= 6)
            {
              if ((v471 - 57) < 2)
              {
                v774 = v471 == 58;
                *((_DWORD *)v45 + 42) = v774;
                v473 = __rev16(*((unsigned __int16 *)v212 + 2));
                *((_DWORD *)v45 + 59) = v473;
                v531 = __rev16(*((unsigned __int16 *)v212 + 3));
                if (v531)
                  v474 = v531;
                else
                  v474 = 0x7FFFFFFF;
                *((_DWORD *)v45 + 58) = v474;
                v45[2] = (uint64_t *)(v212 + 8);
                if (!(_DWORD)a3)
                  continue;
LABEL_826:
                v775 = v474;
                v777 = v15;
                v782 = v10;
                v46 = v8;
                v779 = v473;
                if (v473 >= 1)
                {
                  v532 = v45[4];
                  v533 = (int)a3;
                  v534 = (unsigned __int8 *)v45[1];
                  v535 = v473;
                  while (1)
                  {
                    v536 = v454;
                    v537 = a3;
                    if (!match_ref_0(v454, v534, a3, (_QWORD *)a4, (char)v532))
                      break;
                    v534 += v533;
                    v45[1] = (uint64_t *)v534;
                    --v535;
                    v454 = v536;
                    a3 = v537;
                    if (!v535)
                      goto LABEL_830;
                  }
                  v795 = *v45;
                  pcre_freeMem(a1, &v796, v538, a4, a5, (uint64_t)a6, a7, a8, v773);
                  v584 = v795;
                  if (!v795)
                    return 0;
                  v13 = 0;
                  *((_DWORD *)v795 + 102) = 0;
                  v15 = v777;
                  *v777 = v584;
                  v8 = v46;
                  goto LABEL_976;
                }
LABEL_830:
                v8 = v46;
                v10 = v782;
                v15 = v777;
                if (v775 == v779)
                  continue;
                if (v774)
                {
                  *((_DWORD *)v45 + 56) = v779;
LABEL_54:
                  *(_QWORD *)&v791 = 0;
                  v50 = pcre_getMem(a1, 20, &v791, a4, a5, (uint64_t)a6, a7, a8);
                  v24 = (uint64_t *)v791;
                  v51 = v795;
                  v8 = v46;
                  a2 = v786;
                  goto LABEL_336;
                }
                v53 = (unsigned __int8 *)v45[1];
                v45[11] = (uint64_t *)v53;
                v703 = v775 - v779;
                if (v775 <= v779)
                {
                  v8 = v46;
                  a2 = v786;
                }
                else
                {
                  v704 = v45[4];
                  v781 = (int)a3;
                  v52 = v53;
                  do
                  {
                    v705 = v454;
                    v706 = a3;
                    if (!match_ref_0(v454, v52, a3, (_QWORD *)a4, (char)v704))
                      break;
                    v52 += v781;
                    v45[1] = (uint64_t *)v52;
                    --v703;
                    v454 = v705;
                    a3 = v706;
                  }
                  while (v703);
                  v8 = v46;
                  v10 = v782;
                  v15 = v777;
LABEL_57:
                  v54 = v52 >= v53;
                  a2 = v786;
                  if (!v54)
                    goto LABEL_268;
                }
                *(_QWORD *)&v791 = 0;
                v65 = a1;
                v66 = 21;
                goto LABEL_1378;
              }
              v547 = (unsigned __int8 *)v45[1];
              v548 = a3;
              if (match_ref_0(v454, v547, a3, (_QWORD *)a4, (char)v45[4]))
              {
                v45[1] = (uint64_t *)&v547[v548];
                continue;
              }
LABEL_952:
              v795 = *v45;
              pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
              v575 = v795;
              if (!v795)
                return 0;
              v13 = 0;
              *((_DWORD *)v795 + 102) = 0;
LABEL_954:
              *v15 = v575;
LABEL_955:
              a2 = v786;
              goto LABEL_1390;
            }
            v45[2] = (uint64_t *)(v212 + 4);
            v472 = v212[3];
            v774 = (v472 - 51) & 1;
            *((_DWORD *)v45 + 42) = v774;
            v473 = rep_min_0[v472 - 51];
            *((_DWORD *)v45 + 59) = v473;
            v474 = rep_max_0[v472 - 51];
            if ((v472 - 57) < 0xFFFFFFFE)
              v474 = 0x7FFFFFFF;
            *((_DWORD *)v45 + 58) = v474;
            if ((_DWORD)a3)
              goto LABEL_826;
            continue;
          case 0x3Fu:
            v613 = (unsigned __int8 *)(*(_QWORD *)(a4 + 80) + __rev16(*(unsigned __int16 *)(v212 + 1)));
            v45[7] = (uint64_t *)v613;
            v614 = *v613;
            *((_DWORD *)v45 + 30) = v614 - 80;
            if (v614 >= 0xB5)
              *((_DWORD *)v45 + 30) = __rev16(*((unsigned __int16 *)v613 + 2));
            v45[14] = *(uint64_t **)(a4 + 136);
            *(_QWORD *)(a4 + 136) = v45 + 14;
            v45[2] = (uint64_t *)(v212 + 3);
            v45[16] = (uint64_t *)(v212 + 3);
            v615 = *(unsigned int *)(a4 + 24);
            *((_DWORD *)v45 + 38) = v615;
            if ((int)v615 > 30)
            {
              v616 = (void *)heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 4 * v615);
              v659 = (uint64_t **)v795;
              v795[18] = (uint64_t)v616;
              if (!v616)
              {
                v795 = *v659;
                pcre_freeMem(a1, &v796, v653, v654, v655, v656, v657, v658, v773);
                v574 = v795;
                v13 = 4294967290;
                if (!v795)
                  return v13;
                *((_DWORD *)v795 + 102) = -6;
                goto LABEL_951;
              }
              v615 = *((unsigned int *)v659 + 38);
              a2 = v786;
            }
            else
            {
              v616 = (char *)v45 + 268;
              v45[18] = (uint64_t *)((char *)v45 + 268);
              a2 = v786;
            }
            cstdlib_memcpy(v616, *(const void **)(a4 + 16), 4 * v615);
            v660 = v795;
            v795[17] = *(_QWORD *)(a4 + 104);
            *(_QWORD *)(a4 + 104) = v660[1];
            goto LABEL_288;
          case 0x40u:
            if (!a6)
              goto LABEL_687;
            v793 = 0u;
            v794 = 0u;
            v791 = 0u;
            v792 = 0u;
            LODWORD(v791) = 1;
            v457 = v45[2];
            DWORD1(v791) = *((unsigned __int8 *)v457 + 1);
            v458 = *(_QWORD *)(a4 + 88);
            *((_QWORD *)&v791 + 1) = *(_QWORD *)(a4 + 16);
            *(_QWORD *)&v792 = v458;
            *((int32x2_t *)&v792 + 1) = vmovn_s64(vsubq_s64(*(int64x2_t *)(a4 + 96), vdupq_n_s64(v458)));
            LODWORD(v793) = *((_DWORD *)v45 + 2) - v458;
            DWORD2(v794) = __rev16(*((unsigned __int16 *)v457 + 1));
            HIDWORD(v794) = __rev16(*((unsigned __int16 *)v457 + 2));
            v459 = *(_DWORD *)(a4 + 124);
            DWORD1(v793) = *((_DWORD *)v45 + 6) / 2;
            DWORD2(v793) = v459;
            *(_QWORD *)&v794 = *(_QWORD *)(a4 + 144);
            v460 = a6(&v791);
            if ((int)v460 >= 1)
            {
              v795 = (uint64_t *)*v795;
              pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
              v13 = 0;
            }
            else
            {
              v13 = v460;
              if ((v460 & 0x80000000) == 0)
              {
                v45 = (uint64_t **)v795;
                v212 = (unsigned __int8 *)v795[2];
LABEL_687:
                v45[2] = (uint64_t *)(v212 + 6);
                continue;
              }
              v795 = (uint64_t *)*v795;
              pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
            }
            v575 = v795;
            if (!v795)
              return v13;
LABEL_1128:
            *((_DWORD *)v575 + 102) = v13;
            goto LABEL_954;
          case 0x41u:
            do
            {
              v212 += __rev16(*(unsigned __int16 *)(v212 + 1));
              v45[2] = (uint64_t *)v212;
            }
            while (*v212 == 65);
            continue;
          case 0x42u:
          case 0x43u:
          case 0x44u:
            v229 = v8;
            v230 = &v212[-__rev16(*(unsigned __int16 *)(v212 + 1))];
            v45[12] = (uint64_t *)v230;
            v231 = (uint64_t **)v45[5];
            v232 = v231[1];
            v45[13] = v232;
            v45[5] = *v231;
            v233 = *v230;
            if (v233 == 75)
              goto LABEL_787;
            if (v233 - 69 < 4 || v233 == 74)
            {
              *(_QWORD *)(a4 + 112) = v45[1];
              *(_DWORD *)(a4 + 120) = *((_DWORD *)v45 + 6);
              v795 = *v45;
              pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
              v583 = v795;
              v13 = 1;
              if (!v795)
                return v13;
              *((_DWORD *)v795 + 102) = 1;
              *v15 = v583;
              goto LABEL_955;
            }
            v234 = v233 - 80;
            *((_DWORD *)v45 + 60) = v233 - 80;
            if (v233 >= 0xB5)
            {
              v234 = __rev16(*((unsigned __int16 *)v230 + 2));
              *((_DWORD *)v45 + 60) = v234;
            }
            v235 = 2 * v234;
            *((_DWORD *)v45 + 61) = 2 * v234;
            if (v234 >= 1)
            {
              *(_DWORD *)(a4 + 124) = v234;
              if (v235 >= *(_DWORD *)(a4 + 28))
              {
                *(_DWORD *)(a4 + 48) = 1;
              }
              else
              {
                v236 = *(_QWORD *)(a4 + 16);
                *(_DWORD *)(v236 + 4 * v235) = *(_DWORD *)(v236 + 4 * (*(_DWORD *)(a4 + 24) - v234));
                *(_DWORD *)(v236 + 4 * *((int *)v45 + 61) + 4) = *((_DWORD *)v45 + 2) - *(_DWORD *)(a4 + 88);
                v237 = *((_DWORD *)v45 + 61);
                if (*((_DWORD *)v45 + 6) <= v237)
                  *((_DWORD *)v45 + 6) = v237 + 2;
              }
              v510 = *(_QWORD *)(a4 + 136);
              if (v510)
              {
                if (*(_DWORD *)(v510 + 8) == *((_DWORD *)v45 + 60))
                {
                  *(_QWORD *)(a4 + 136) = *(_QWORD *)v510;
                  *(_QWORD *)(a4 + 104) = *(_QWORD *)(v510 + 24);
                  cstdlib_memcpy(*(void **)(a4 + 16), *(const void **)(v510 + 32), 4 * *(unsigned int *)(v510 + 40));
                  v511 = v795;
                  v795[2] = *(_QWORD *)(v510 + 16);
                  v511[4] = v511[22];
                  v8 = v229;
                  continue;
                }
              }
            }
LABEL_787:
            v45[4] = v45[22];
            v512 = *v212;
            if (v512 == 66 || v45[1] == v232)
            {
              v45[2] = (uint64_t *)(v212 + 3);
              v8 = v229;
              continue;
            }
            v8 = v229;
            if (v512 == 68)
            {
              *(_QWORD *)&v791 = 0;
              v597 = pcre_getMem(a1, 16, &v791, a4, a5, (uint64_t)a6, a7, a8);
              v24 = (uint64_t *)v791;
              v183 = v795;
              a2 = v786;
              if (!(_QWORD)v791 || v597 < 0)
              {
LABEL_1021:
                v598 = (uint64_t *)*v183;
                goto LABEL_1386;
              }
LABEL_257:
              v27 = v183[1];
              v24[1] = v27;
              v24[2] = v183[2] + 3;
              *((_DWORD *)v24 + 6) = *((_DWORD *)v183 + 6);
              v181 = v183[4];
              v24[4] = v181;
              v180 = v183[5];
              v24[5] = v180;
              *((_DWORD *)v24 + 12) = 0;
              *v24 = (uint64_t)v183;
              v795 = v24;
              goto LABEL_1381;
            }
            *(_QWORD *)&v791 = 0;
            v42 = pcre_getMem(a1, 18, &v791, a4, a5, (uint64_t)a6, a7, a8);
            v24 = (uint64_t *)v791;
            v25 = v795;
            a2 = v786;
            if (!(_QWORD)v791)
              goto LABEL_1190;
            goto LABEL_45;
          case 0x45u:
          case 0x47u:
            a2 = v786;
            goto LABEL_277;
          case 0x46u:
          case 0x48u:
            a2 = v786;
            goto LABEL_283;
          case 0x49u:
            v461 = v212[1];
            v462 = v212[2];
            if (*(_DWORD *)(a4 + 60))
            {
              v463 = v462 | ((_DWORD)v461 << 8);
              a2 = v786;
              if (v463)
              {
                v464 = 0;
                v465 = *(_QWORD *)(a4 + 88);
                v466 = v45[1];
                do
                {
                  v467 = (uint64_t *)((char *)v466 - 1);
                  v45[1] = (uint64_t *)((char *)v466 - 1);
                  if ((unint64_t)v466 - 1 < v465)
                    goto LABEL_965;
                  if ((*(_BYTE *)v467 & 0xC0) == 0x80)
                  {
                    v468 = (char *)v466 - 2;
                    do
                    {
                      v45[1] = (uint64_t *)v468;
                      v469 = *v468--;
                    }
                    while ((v469 & 0xC0) == 0x80);
                    v467 = (uint64_t *)(v468 + 1);
                  }
                  ++v464;
                  v466 = v467;
                }
                while (v464 != v463);
              }
            }
            else
            {
              v520 = (unint64_t)v45[1] - (v462 | (v461 << 8));
              v45[1] = (uint64_t *)v520;
              a2 = v786;
              if (v520 < *(_QWORD *)(a4 + 88))
              {
LABEL_965:
                v81 = *v45;
LABEL_306:
                v795 = v81;
                pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
                v73 = v795;
                if (!v795)
                  return 0;
                goto LABEL_307;
              }
            }
LABEL_802:
            v45[2] = (uint64_t *)(v212 + 3);
            continue;
          case 0x4Au:
            v617 = v45[1];
            v45[12] = (uint64_t *)v212;
            v45[13] = v617;
            a2 = v786;
            goto LABEL_295;
          case 0x4Bu:
            if (v212[3] == 76)
            {
              v618 = (v212[4] << 9) | (2 * v212[5]);
              *((_DWORD *)v45 + 61) = v618;
              a2 = v786;
              if (v618 == 131070)
              {
                v619 = *(_QWORD *)(a4 + 136) != 0;
              }
              else
              {
                v619 = 0;
                if (v618 < *((_DWORD *)v45 + 6))
                  v619 = *(_DWORD *)(*(_QWORD *)(a4 + 16) + 4 * v618) >= 0;
              }
              *((_DWORD *)v45 + 41) = v619;
              *(_QWORD *)&v791 = 0;
              v678 = pcre_getMem(a1, 3, &v791, a4, a5, (uint64_t)a6, a7, a8);
              v24 = (uint64_t *)v791;
              v25 = v795;
              if (!(_QWORD)v791 || v678 < 0)
                goto LABEL_1190;
              v27 = v795[1];
              *(_QWORD *)(v791 + 8) = v27;
              v679 = v25[2];
              v680 = 6;
              if (!*((_DWORD *)v25 + 41))
                v680 = __rev16(*(unsigned __int16 *)(v679 + 1)) + 3;
              v26 = 0;
              v24[2] = v679 + v680;
              *((_DWORD *)v24 + 6) = *((_DWORD *)v25 + 6);
              v181 = v25[4];
              v24[4] = v181;
              v180 = v25[5];
              v24[5] = v180;
              *((_DWORD *)v24 + 12) = 2;
              goto LABEL_275;
            }
            *(_QWORD *)&v791 = 0;
            v661 = pcre_getMem(a1, 4, &v791, a4, a5, (uint64_t)a6, a7, a8);
            v24 = (uint64_t *)v791;
            v662 = v795;
            a2 = v786;
            if (!(_QWORD)v791 || v661 < 0)
            {
              v795 = (uint64_t *)*v795;
              pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
              v179 = v795;
LABEL_1192:
              if (v179)
                goto LABEL_1387;
              return 4294967290;
            }
            v180 = 0;
            v26 = 0;
            v27 = v795[1];
            *(_QWORD *)(v791 + 8) = v27;
            v24[2] = v662[2] + 3;
            *((_DWORD *)v24 + 6) = *((_DWORD *)v662 + 6);
            v181 = v662[4];
            *((_DWORD *)v24 + 12) = 3;
            *v24 = (uint64_t)v662;
            v24[4] = v181;
            v24[5] = 0;
            v795 = v24;
LABEL_1382:
            *((_DWORD *)v24 + 47) = 0;
            *((_DWORD *)v24 + 51) = 0;
            v24[26] = 0;
            v764 = *(_QWORD *)a4;
            v765 = *(_QWORD *)(a4 + 8);
            ++*(_QWORD *)a4;
            if (v764 < v765)
            {
              v24[22] = v181;
              if ((v26 & 1) == 0)
              {
                v24[49] = v180;
                v24[50] = v27;
                v24[5] = (uint64_t)(v24 + 49);
              }
              continue;
            }
            v795 = (uint64_t *)*v24;
            pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
            v179 = v795;
            v13 = 4294967288;
            if (!v795)
              return v13;
            goto LABEL_1388;
          case 0x4Cu:
          case 0x4Fu:
            goto LABEL_802;
          case 0x4Du:
            v45[10] = (uint64_t *)(v212 + 1);
            *(_QWORD *)&v791 = 0;
            v620 = pcre_getMem(a1, 14, &v791, a4, a5, (uint64_t)a6, a7, a8);
            v24 = (uint64_t *)v791;
            v621 = v795;
            if ((_QWORD)v791 && (v620 & 0x80000000) == 0)
            {
              v26 = 0;
              v27 = v795[1];
              *(_QWORD *)(v791 + 8) = v27;
              v24[2] = v621[10];
              *((_DWORD *)v24 + 6) = *((_DWORD *)v621 + 6);
              v181 = v621[4];
              v24[4] = v181;
              v180 = v621[5];
              *((_DWORD *)v24 + 12) = 2;
              v24[5] = v180;
              *v24 = (uint64_t)v621;
              v795 = v24;
              a2 = v786;
              goto LABEL_1382;
            }
            v795 = (uint64_t *)*v795;
            pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
            v179 = v795;
            a2 = v786;
            goto LABEL_1192;
          case 0x4Eu:
            v622 = v212 + 1;
            v45[10] = (uint64_t *)(v212 + 1);
            do
            {
              v622 += __rev16(*(unsigned __int16 *)(v622 + 1));
              v45[10] = (uint64_t *)v622;
            }
            while (*v622 == 65);
            *(_QWORD *)&v791 = 0;
            v623 = pcre_getMem(a1, 15, &v791, a4, a5, (uint64_t)a6, a7, a8);
            v24 = (uint64_t *)v791;
            v25 = v795;
            a2 = v786;
            if (!(_QWORD)v791 || v623 < 0)
              goto LABEL_1190;
            v26 = 0;
            v27 = v795[1];
            *(_QWORD *)(v791 + 8) = v27;
            v197 = v25[10];
            goto LABEL_273;
          case 0x50u:
            a2 = v786;
            goto LABEL_10;
          default:
            v795 = *v45;
            pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
            v575 = v795;
            v13 = 4294967291;
            if (!v795)
              return v13;
            goto LABEL_1128;
        }
        goto LABEL_2;
      }
    case 7:
      if ((_DWORD)v13)
      {
        if ((_DWORD)v13 != 1)
          goto LABEL_48;
        goto LABEL_325;
      }
      v16 = (uint64_t **)v795;
      v35 = (unsigned __int8 *)(v795[2] + __rev16(*(unsigned __int16 *)(v795[2] + 1)));
      v795[2] = (uint64_t)v35;
      if (*v35 == 65)
      {
LABEL_283:
        *(_QWORD *)&v791 = 0;
        v198 = a1;
        v199 = 7;
        goto LABEL_284;
      }
      if (((_BYTE)v16[6] & 1) == 0)
        goto LABEL_319;
      goto LABEL_321;
    case 8:
      if ((_DWORD)v13)
      {
        if ((_DWORD)v13 == 1)
        {
          v16 = (uint64_t **)v795;
          *(_QWORD *)(a4 + 136) = v795[14];
          v34 = (uint64_t)v16[18];
          if ((uint64_t **)v34 != (uint64_t **)((char *)v16 + 268))
          {
            heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v34);
            v16 = (uint64_t **)v795;
          }
LABEL_321:
          v795 = *v16;
          pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
          v179 = v795;
          v13 = 1;
          if (!v795)
            return v13;
          goto LABEL_1388;
        }
LABEL_48:
        v16 = (uint64_t **)v795;
LABEL_49:
        v44 = *v16;
LABEL_248:
        v795 = v44;
        pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
        v179 = v795;
        if (!v795)
          return v13;
LABEL_1388:
        *((_DWORD *)v179 + 102) = v13;
        goto LABEL_1389;
      }
      v201 = v795;
      *(_QWORD *)(a4 + 136) = v795 + 14;
      cstdlib_memcpy(*(void **)(a4 + 16), (const void *)v201[18], 4 * *((unsigned int *)v201 + 38));
      v16 = (uint64_t **)v795;
      v202 = v795[7];
      v203 = __rev16(*(unsigned __int16 *)(v202 + 1));
      v795[7] = v202 + v203;
      if (*(_BYTE *)(v202 + v203) == 65)
      {
LABEL_288:
        *(_QWORD *)&v791 = 0;
        v204 = pcre_getMem(a1, 8, &v791, a4, a5, (uint64_t)a6, a7, a8);
        v24 = (uint64_t *)v791;
        v25 = v795;
        if (!(_QWORD)v791 || v204 < 0)
          goto LABEL_1190;
        v26 = 0;
        v27 = v795[1];
        *(_QWORD *)(v791 + 8) = v27;
        v28 = v25[7];
LABEL_291:
        v24[2] = v28 + 3;
        *((_DWORD *)v24 + 6) = *((_DWORD *)v25 + 6);
        v181 = v25[4];
        v24[4] = v181;
        v180 = v25[5];
        *v24 = (uint64_t)v25;
        v24[5] = v180;
        goto LABEL_292;
      }
      *(_QWORD *)(a4 + 136) = v16[14];
      v210 = (uint64_t)v16[18];
      if ((uint64_t **)v210 != (uint64_t **)((char *)v16 + 268))
      {
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v210);
LABEL_325:
        v16 = (uint64_t **)v795;
        goto LABEL_326;
      }
      goto LABEL_326;
    case 9:
      if ((_DWORD)v13)
      {
        if ((_DWORD)v13 != 1)
          goto LABEL_48;
        v16 = (uint64_t **)v795;
        v35 = (unsigned __int8 *)v795[2];
        v36 = *v35;
      }
      else
      {
        v16 = (uint64_t **)v795;
        v35 = (unsigned __int8 *)(v795[2] + __rev16(*(unsigned __int16 *)(v795[2] + 1)));
        v795[2] = (uint64_t)v35;
        v36 = *v35;
        if (v36 == 65)
        {
LABEL_295:
          *(_QWORD *)&v791 = 0;
          v19 = a1;
          v20 = 9;
          goto LABEL_11;
        }
      }
      if (v36 != 74 && v36 != 65)
        goto LABEL_326;
      do
      {
        v35 += __rev16(*(unsigned __int16 *)(v35 + 1));
        v16[2] = (uint64_t *)v35;
      }
      while (*v35 == 65);
      *((_DWORD *)v16 + 6) = *(_DWORD *)(a4 + 120);
      v205 = *(uint64_t **)(a4 + 112);
      v16[1] = v205;
      v206 = *v35;
      if (v206 != 66 && v205 != v16[13])
      {
        if (v35[3] == 18)
        {
          v16[4] = (uint64_t *)((unint64_t)v16[4] & 0xFFFFFFFFFFFFFFF8 | v35[4]);
          v206 = *v35;
        }
        if (v206 == 68)
        {
          *(_QWORD *)&v791 = 0;
          v39 = a1;
          v40 = 10;
LABEL_255:
          v182 = pcre_getMem(v39, v40, &v791, a4, a5, (uint64_t)a6, a7, a8);
          v24 = (uint64_t *)v791;
          v183 = v795;
          if (!(_QWORD)v791 || v182 < 0)
            goto LABEL_1021;
          goto LABEL_257;
        }
        *(_QWORD *)&v791 = 0;
        v37 = a1;
        v38 = 12;
LABEL_44:
        v42 = pcre_getMem(v37, v38, &v791, a4, a5, (uint64_t)a6, a7, a8);
        v24 = (uint64_t *)v791;
        v25 = v795;
        if (!(_QWORD)v791)
          goto LABEL_1190;
LABEL_45:
        if (v42 < 0)
          goto LABEL_1190;
        v26 = 0;
        v27 = v25[1];
        v24[1] = v27;
        v43 = v25[12];
        goto LABEL_274;
      }
LABEL_319:
      v41 = (uint64_t)(v35 + 3);
LABEL_320:
      v16[2] = (uint64_t *)v41;
      goto LABEL_379;
    case 10:
      if ((_DWORD)v13)
        goto LABEL_48;
      *(_QWORD *)&v791 = 0;
      v37 = a1;
      v38 = 11;
      goto LABEL_44;
    case 11:
    case 13:
    case 17:
    case 19:
      v16 = (uint64_t **)v795;
      if (!(_DWORD)v13)
        goto LABEL_326;
      goto LABEL_49;
    case 12:
      if ((_DWORD)v13)
        goto LABEL_48;
      *(_QWORD *)&v791 = 0;
      v39 = a1;
      v40 = 13;
      goto LABEL_255;
    case 14:
      v16 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_49;
      v35 = (unsigned __int8 *)v795[10];
      do
      {
        v35 += __rev16(*(unsigned __int16 *)(v35 + 1));
        v16[10] = (uint64_t *)v35;
      }
      while (*v35 == 65);
      goto LABEL_319;
    case 15:
      v16 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_49;
      v41 = v795[2] + 1;
      goto LABEL_320;
    case 16:
      if ((_DWORD)v13)
        goto LABEL_48;
      *(_QWORD *)&v791 = 0;
      v37 = a1;
      v38 = 17;
      goto LABEL_44;
    case 18:
      if ((_DWORD)v13)
        goto LABEL_48;
      *(_QWORD *)&v791 = 0;
      v39 = a1;
      v40 = 19;
      goto LABEL_255;
    case 20:
      v45 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_247;
      v46 = v8;
      v47 = *((_DWORD *)v795 + 56);
      if (v47 >= *((_DWORD *)v795 + 58)
        || (v48 = (unsigned __int8 *)v795[1],
            v49 = *((_DWORD *)v795 + 57),
            !match_ref_0(*((_DWORD *)v795 + 61), v48, v49, (_QWORD *)a4, v795[4])))
      {
        v795 = *v45;
        pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
        v207 = v795;
        a2 = v786;
        if (!v795)
          return 0;
        v8 = v46;
        v13 = 0;
        *((_DWORD *)v795 + 102) = 0;
        *v15 = v207;
        goto LABEL_1390;
      }
      v45[1] = (uint64_t *)&v48[v49];
      *((_DWORD *)v45 + 56) = v47 + 1;
      goto LABEL_54;
    case 21:
      v45 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_247;
      v52 = (unsigned __int8 *)(v795[1] - *((int *)v795 + 57));
      v795[1] = (uint64_t)v52;
      v53 = (unsigned __int8 *)v45[11];
      goto LABEL_57;
    case 22:
      v16 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_49;
      v55 = *((_DWORD *)v795 + 56);
      if (v55 >= *((_DWORD *)v795 + 58))
        goto LABEL_326;
      v56 = (unsigned __int8 *)v795[1];
      if ((unint64_t)v56 >= *(_QWORD *)(a4 + 96))
        goto LABEL_326;
      v795[1] = (uint64_t)(v56 + 1);
      v57 = *v56;
      if ((~v57 & 0xC0) != 0)
        goto LABEL_329;
      v58 = utf8_table4[v57 & 0x3F];
      v59 = 6 * v58;
      v57 = (utf8_table3[utf8_table4[v57 & 0x3F]] & v57) << (6 * v58);
      v60 = v56 + 2;
      v61 = v58 + 1;
      v62 = v59 - 6;
      do
      {
        v16[1] = (uint64_t *)v60;
        v57 |= (*(v60++ - 1) & 0x3F) << v62;
        --v61;
        v62 -= 6;
      }
      while (v61 > 1);
      if (v57 < 256)
      {
LABEL_329:
        if (((*((unsigned __int8 *)v16[9] + v57 / 8) >> (v57 & 7)) & 1) == 0)
          goto LABEL_326;
      }
      else if (*((_DWORD *)v16 + 62) == 59)
      {
LABEL_326:
        v195 = *v16;
        goto LABEL_327;
      }
      *((_DWORD *)v16 + 56) = v55 + 1;
LABEL_331:
      *(_QWORD *)&v791 = 0;
      v65 = a1;
      v66 = 22;
      goto LABEL_1378;
    case 23:
      v16 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_49;
      v63 = *((_DWORD *)v795 + 56);
      if (v63 >= *((_DWORD *)v795 + 58))
        goto LABEL_326;
      v64 = (_BYTE *)v795[1];
      if ((unint64_t)v64 >= *(_QWORD *)(a4 + 96))
        goto LABEL_326;
      v795[1] = (uint64_t)(v64 + 1);
      if (((*((unsigned __int8 *)v16[9] + ((unint64_t)*v64 >> 3)) >> (*v64 & 7)) & 1) == 0)
        goto LABEL_326;
      *((_DWORD *)v16 + 56) = v63 + 1;
      goto LABEL_74;
    case 24:
      v45 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_247;
      v67 = (uint64_t *)v795[1];
      v795[1] = (uint64_t)v67 - 1;
      if (v67 == v45[11])
        goto LABEL_268;
      if ((*((_BYTE *)v67 - 1) & 0xC0) == 0x80)
      {
        v68 = (char *)v67 - 2;
        do
        {
          v45[1] = (uint64_t *)v68;
          v69 = *v68--;
        }
        while ((v69 & 0xC0) == 0x80);
      }
      goto LABEL_80;
    case 25:
      v45 = (uint64_t **)v795;
      v70 = v795[1] - 1;
      v795[1] = v70;
      if ((_DWORD)v13)
        goto LABEL_247;
      v71 = (unsigned __int8 *)v45[11];
      goto LABEL_83;
    case 26:
      v72 = v795;
      if ((_DWORD)v13)
      {
        v795 = (uint64_t *)*v795;
        pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
        v73 = v795;
        if (!v795)
          return v13;
        *((_DWORD *)v795 + 102) = v13;
        goto LABEL_308;
      }
      v184 = *((_DWORD *)v795 + 56);
      if (v184 < *((_DWORD *)v795 + 58))
      {
        v185 = (unsigned __int8 *)v795[1];
        if ((unint64_t)v185 < *(_QWORD *)(a4 + 96))
        {
          v795[1] = (uint64_t)(v185 + 1);
          v186 = *v185;
          if ((~v186 & 0xC0) == 0)
          {
            v187 = utf8_table4[v186 & 0x3F];
            v188 = 6 * v187;
            v186 = (utf8_table3[utf8_table4[v186 & 0x3F]] & v186) << (6 * v187);
            v189 = v185 + 2;
            v190 = v187 + 1;
            v191 = v188 - 6;
            do
            {
              v72[1] = (uint64_t)v189;
              v186 |= (*(v189++ - 1) & 0x3F) << v191;
              --v190;
              v191 -= 6;
            }
            while (v190 > 1);
          }
          if (match_xclass(v186, (_BYTE *)v72[9]))
          {
            *((_DWORD *)v72 + 56) = v184 + 1;
            goto LABEL_265;
          }
        }
      }
      v81 = (uint64_t *)*v72;
      goto LABEL_306;
    case 27:
      v16 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_49;
      v74 = (uint64_t *)v795[1];
      v795[1] = (uint64_t)v74 - 1;
      if (v74 == v16[11])
        goto LABEL_326;
      if ((*((_BYTE *)v74 - 1) & 0xC0) == 0x80)
      {
        v75 = (char *)v74 - 2;
        do
        {
          v16[1] = (uint64_t *)v75;
          v76 = *v75--;
        }
        while ((v76 & 0xC0) == 0x80);
      }
      goto LABEL_93;
    case 28:
      v16 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_49;
      if (*((_DWORD *)v795 + 56) >= *((_DWORD *)v795 + 58))
        goto LABEL_326;
      v77 = (const void *)v795[1];
      if ((unint64_t)v77 >= *(_QWORD *)(a4 + 96))
        goto LABEL_326;
      if (cstdlib_memcmp(v77, (const void *)v795[8], *((unsigned int *)v795 + 57)))
      {
        if (!__n)
        {
          v795 = (uint64_t *)*v795;
          pcre_freeMem(a1, &v796, v78, a4, a5, (uint64_t)a6, a7, a8, v773);
          v73 = v795;
          if (!v795)
            return 0;
          __n = 0;
LABEL_307:
          v13 = 0;
          *((_DWORD *)v73 + 102) = 0;
LABEL_308:
          *v15 = v73;
          goto LABEL_1390;
        }
        v79 = cstdlib_memcmp((const void *)v795[1], __s2, __n);
        v80 = v795;
        if (v79)
        {
          v81 = (uint64_t *)*v795;
          goto LABEL_306;
        }
        v211 = __n;
      }
      else
      {
        v80 = v795;
        v211 = *((_DWORD *)v795 + 57);
      }
      v80[1] += (int)v211;
      ++*((_DWORD *)v80 + 56);
      goto LABEL_345;
    case 29:
      v45 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_247;
      v82 = v795[1] - *((int *)v795 + 57);
      v795[1] = v82;
      goto LABEL_103;
    case 30:
      v16 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_49;
      v83 = *((_DWORD *)v795 + 56);
      if (v83 >= *((_DWORD *)v795 + 58))
        goto LABEL_326;
      v84 = (unsigned __int8 *)v795[1];
      if ((unint64_t)v84 >= *(_QWORD *)(a4 + 96))
        goto LABEL_326;
      v85 = *((_DWORD *)v795 + 55);
      v86 = *(_QWORD *)(a4 + 32);
      v795[1] = (uint64_t)(v84 + 1);
      if (v85 != *(unsigned __int8 *)(v86 + *v84))
        goto LABEL_326;
      *((_DWORD *)v16 + 56) = v83 + 1;
      goto LABEL_110;
    case 31:
      v45 = (uint64_t **)v795;
      v87 = v795[1] - 1;
      v795[1] = v87;
      if ((_DWORD)v13)
        goto LABEL_247;
      v88 = (unsigned __int8 *)v45[11];
      goto LABEL_113;
    case 32:
      v16 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_49;
      v89 = *((_DWORD *)v795 + 56);
      if (v89 >= *((_DWORD *)v795 + 58))
        goto LABEL_326;
      v90 = (unsigned __int8 *)v795[1];
      if ((unint64_t)v90 >= *(_QWORD *)(a4 + 96))
        goto LABEL_326;
      v91 = *((_DWORD *)v795 + 55);
      v795[1] = (uint64_t)(v90 + 1);
      if (v91 != *v90)
        goto LABEL_326;
      *((_DWORD *)v16 + 56) = v89 + 1;
      goto LABEL_120;
    case 33:
      v45 = (uint64_t **)v795;
      v92 = v795[1] - 1;
      v795[1] = v92;
      if ((_DWORD)v13)
        goto LABEL_247;
      v88 = (unsigned __int8 *)v45[11];
      goto LABEL_123;
    case 34:
      v16 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_49;
      v93 = (unsigned __int8 *)v795[1];
      v94 = v93 + 1;
      v795[1] = (uint64_t)(v93 + 1);
      v95 = *v93;
      if ((~v95 & 0xC0) != 0)
        goto LABEL_130;
      v96 = utf8_table4[v95 & 0x3F];
      v97 = 6 * v96;
      v95 = (utf8_table3[utf8_table4[v95 & 0x3F]] & v95) << (6 * v96);
      v98 = v96 + 1;
      v99 = v97 - 6;
      do
      {
        v100 = v94++;
        v16[1] = (uint64_t *)v94;
        v95 |= (*v100 & 0x3F) << v99;
        --v98;
        v99 -= 6;
      }
      while (v98 > 1);
      if (v95 <= 255)
LABEL_130:
        v95 = *(unsigned __int8 *)(*(_QWORD *)(a4 + 32) + v95);
      v101 = *((_DWORD *)v16 + 56);
      if (v101 >= *((_DWORD *)v16 + 58)
        || (unint64_t)v94 >= *(_QWORD *)(a4 + 96)
        || *((_DWORD *)v16 + 55) == v95)
      {
        goto LABEL_326;
      }
      *((_DWORD *)v16 + 56) = v101 + 1;
      goto LABEL_135;
    case 35:
      v16 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_49;
      v102 = *((_DWORD *)v795 + 56);
      if (v102 >= *((_DWORD *)v795 + 58))
        goto LABEL_326;
      v103 = (unsigned __int8 *)v795[1];
      if ((unint64_t)v103 >= *(_QWORD *)(a4 + 96))
        goto LABEL_326;
      v104 = *((_DWORD *)v795 + 55);
      v105 = *(_QWORD *)(a4 + 32);
      v795[1] = (uint64_t)(v103 + 1);
      if (v104 == *(unsigned __int8 *)(v105 + *v103))
        goto LABEL_326;
      *((_DWORD *)v16 + 56) = v102 + 1;
      goto LABEL_141;
    case 36:
      v45 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_247;
      v106 = (uint64_t *)v795[1];
      v795[1] = (uint64_t)v106 - 1;
      if (v106 == v45[11])
        goto LABEL_268;
      if ((*((_BYTE *)v106 - 1) & 0xC0) == 0x80)
      {
        v107 = (char *)v106 - 2;
        do
        {
          v45[1] = (uint64_t *)v107;
          v108 = *v107--;
        }
        while ((v108 & 0xC0) == 0x80);
      }
      goto LABEL_147;
    case 37:
      v45 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_247;
      v109 = v795[1] - 1;
      v795[1] = v109;
      v110 = (unsigned __int8 *)v45[11];
      goto LABEL_150;
    case 38:
      v16 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_49;
      v111 = (unsigned __int8 *)v795[1];
      v112 = v111 + 1;
      v795[1] = (uint64_t)(v111 + 1);
      v113 = *v111;
      if ((~v113 & 0xC0) != 0)
      {
        v117 = v112;
      }
      else
      {
        v114 = utf8_table4[v113 & 0x3F];
        v113 = (utf8_table3[utf8_table4[v113 & 0x3F]] & v113) << (6 * v114);
        v115 = 6 * v114 - 6;
        v116 = v114 + 1;
        do
        {
          v117 = v112 + 1;
          v16[1] = (uint64_t *)(v112 + 1);
          v113 |= (*v112 & 0x3F) << v115;
          v115 -= 6;
          --v116;
          ++v112;
        }
        while (v116 > 1);
      }
      v209 = *((_DWORD *)v16 + 56);
      if (v209 >= *((_DWORD *)v16 + 58)
        || (unint64_t)v117 >= *(_QWORD *)(a4 + 96)
        || *((_DWORD *)v16 + 55) == v113)
      {
        goto LABEL_326;
      }
      *((_DWORD *)v16 + 56) = v209 + 1;
      goto LABEL_317;
    case 39:
      v16 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_49;
      v118 = *((_DWORD *)v795 + 56);
      if (v118 >= *((_DWORD *)v795 + 58))
        goto LABEL_326;
      v119 = (unsigned __int8 *)v795[1];
      if ((unint64_t)v119 >= *(_QWORD *)(a4 + 96))
        goto LABEL_326;
      v120 = *((_DWORD *)v795 + 55);
      v795[1] = (uint64_t)(v119 + 1);
      if (v120 == *v119)
        goto LABEL_326;
      *((_DWORD *)v16 + 56) = v118 + 1;
      goto LABEL_162;
    case 40:
      v45 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_247;
      v121 = (uint64_t *)v795[1];
      v795[1] = (uint64_t)v121 - 1;
      if (v121 == v45[11])
        goto LABEL_268;
      if ((*((_BYTE *)v121 - 1) & 0xC0) == 0x80)
      {
        v122 = (char *)v121 - 2;
        do
        {
          v45[1] = (uint64_t *)v122;
          v123 = *v122--;
        }
        while ((v123 & 0xC0) == 0x80);
      }
      goto LABEL_168;
    case 41:
      v45 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_247;
      v124 = v795[1] - 1;
      v795[1] = v124;
      v125 = (unsigned __int8 *)v45[11];
      goto LABEL_171;
    case 42:
      v16 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_49;
      if (*((_DWORD *)v795 + 56) >= *((_DWORD *)v795 + 58))
        goto LABEL_326;
      v126 = (unsigned __int8 *)v795[1];
      if ((unint64_t)v126 >= *(_QWORD *)(a4 + 96))
        goto LABEL_326;
      v795[1] = (uint64_t)(v126 + 1);
      v127 = *v126;
      if ((~v127 & 0xC0) == 0)
      {
        v128 = utf8_table4[v127 & 0x3F];
        v127 = (utf8_table3[utf8_table4[v127 & 0x3F]] & v127) << (6 * v128);
        v129 = v126 + 2;
        v130 = 6 * v128 - 6;
        v131 = v128 + 1;
        do
        {
          v16[1] = (uint64_t *)v129;
          v127 |= (*(v129++ - 1) & 0x3F) << v130;
          v130 -= 6;
          --v131;
        }
        while (v131 > 1);
      }
      v132 = ucp_findchar(v127, (int *)v16 + 49, (unsigned int *)v16 + 50);
      v16 = (uint64_t **)v795;
      *((_DWORD *)v795 + 48) = v132;
      if (*((_DWORD *)v16 + 47) == (*(_DWORD *)v16[26] == *((_DWORD *)v16 + 51)))
        goto LABEL_326;
      ++*((_DWORD *)v16 + 56);
      goto LABEL_181;
    case 43:
      v16 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_49;
      if (*((_DWORD *)v795 + 56) >= *((_DWORD *)v795 + 58))
        goto LABEL_326;
      v133 = (unsigned __int8 *)v795[1];
      if ((unint64_t)v133 >= *(_QWORD *)(a4 + 96))
        goto LABEL_326;
      v795[1] = (uint64_t)(v133 + 1);
      v134 = *v133;
      if (*(_DWORD *)(a4 + 60) && (v134 & 0xC0) == 0xC0)
      {
        v135 = utf8_table4[v134 & 0x3F];
        v134 = (utf8_table3[utf8_table4[v134 & 0x3F]] & v134) << (6 * v135);
        v136 = v133 + 2;
        v137 = 6 * v135 - 6;
        v138 = v135 + 1;
        do
        {
          v16[1] = (uint64_t *)v136;
          v134 |= (*(v136++ - 1) & 0x3F) << v137;
          v137 -= 6;
          --v138;
        }
        while (v138 > 1);
      }
      v139 = ucp_findchar(v134, (int *)v16 + 49, (unsigned int *)v16 + 50);
      v16 = (uint64_t **)v795;
      *((_DWORD *)v795 + 48) = v139;
      if (v139 == 2)
        goto LABEL_326;
      for (m = (unsigned __int8 *)v16[1]; (unint64_t)m < *(_QWORD *)(a4 + 96); v16[1] = (uint64_t *)m)
      {
        v141 = *m;
        v142 = 1;
        if (*(_DWORD *)(a4 + 60) && (v141 & 0xC0) == 0xC0)
        {
          v143 = utf8_table4[v141 & 0x3F];
          v141 = (utf8_table3[v143] & v141) << (6 * v143);
          v144 = (char *)(m + 1);
          if (v143 <= 1)
            v145 = 1;
          else
            v145 = v143;
          v146 = 6 * v143 - 6;
          do
          {
            v147 = *v144++;
            v141 |= (v147 & 0x3F) << v146;
            v146 -= 6;
            --v145;
          }
          while (v145);
          v142 = v143 + 1;
        }
        v148 = ucp_findchar(v141, (int *)v16 + 49, (unsigned int *)v16 + 50);
        v16 = (uint64_t **)v795;
        *((_DWORD *)v795 + 48) = v148;
        if (v148 != 2)
          break;
        m = (unsigned __int8 *)v16[1] + v142;
      }
      ++*((_DWORD *)v16 + 56);
      goto LABEL_334;
    case 44:
      v16 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_49;
      v149 = *((_DWORD *)v795 + 56);
      if (v149 < *((_DWORD *)v795 + 58))
      {
        v150 = (unsigned __int8 *)v795[1];
        if ((unint64_t)v150 < *(_QWORD *)(a4 + 96))
        {
          v795[1] = (uint64_t)(v150 + 1);
          v151 = *v150;
          if ((~v151 & 0xC0) == 0)
          {
            v152 = utf8_table4[v151 & 0x3F];
            v151 = (utf8_table3[utf8_table4[v151 & 0x3F]] & v151) << (6 * v152);
            v153 = v150 + 2;
            v154 = 6 * v152 - 6;
            v155 = v152 + 1;
            do
            {
              v16[1] = (uint64_t *)v153;
              v151 |= (*(v153++ - 1) & 0x3F) << v154;
              v154 -= 6;
              --v155;
            }
            while (v155 > 1);
          }
          switch(*((_DWORD *)v16 + 54))
          {
            case 5:
              if (v151 > 255 || (*(_BYTE *)(*(_QWORD *)(a4 + 40) + v151) & 4) == 0)
                goto LABEL_363;
              goto LABEL_326;
            case 6:
              if (v151 <= 255 && (*(_BYTE *)(*(_QWORD *)(a4 + 40) + v151) & 4) != 0)
                goto LABEL_363;
              goto LABEL_326;
            case 7:
              if (v151 > 255 || (*(_BYTE *)(*(_QWORD *)(a4 + 40) + v151) & 1) == 0)
                goto LABEL_363;
              goto LABEL_326;
            case 8:
              if (v151 <= 255 && (*(_BYTE *)(*(_QWORD *)(a4 + 40) + v151) & 1) != 0)
                goto LABEL_363;
              goto LABEL_326;
            case 9:
              if (v151 > 255 || (*(_BYTE *)(*(_QWORD *)(a4 + 40) + v151) & 0x10) == 0)
                goto LABEL_363;
              goto LABEL_326;
            case 0xA:
              if (v151 < 256 || (*(_BYTE *)(*(_QWORD *)(a4 + 40) + v151) & 0x10) != 0)
                goto LABEL_363;
              goto LABEL_326;
            case 0xB:
              if (((_BYTE)v16[4] & 4) != 0 || v151 != 10)
                goto LABEL_363;
              goto LABEL_326;
            case 0xC:
LABEL_363:
              *((_DWORD *)v16 + 56) = v149 + 1;
              goto LABEL_364;
            default:
              goto LABEL_341;
          }
        }
      }
      goto LABEL_326;
    case 45:
      v16 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_49;
      v156 = *((_DWORD *)v795 + 56);
      if (v156 < *((_DWORD *)v795 + 58))
      {
        v157 = (unsigned __int8 *)v795[1];
        if ((unint64_t)v157 < *(_QWORD *)(a4 + 96))
        {
          v795[1] = (uint64_t)(v157 + 1);
          v158 = *v157;
          switch(*((_DWORD *)v16 + 54))
          {
            case 5:
              if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v158) & 4) == 0)
                goto LABEL_377;
              goto LABEL_326;
            case 6:
              if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v158) & 4) != 0)
                goto LABEL_377;
              goto LABEL_326;
            case 7:
              if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v158) & 1) == 0)
                goto LABEL_377;
              goto LABEL_326;
            case 8:
              if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v158) & 1) != 0)
                goto LABEL_377;
              goto LABEL_326;
            case 9:
              if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v158) & 0x10) == 0)
                goto LABEL_377;
              goto LABEL_326;
            case 0xA:
              if ((*(_BYTE *)(*(_QWORD *)(a4 + 40) + v158) & 0x10) != 0)
                goto LABEL_377;
              goto LABEL_326;
            case 0xB:
              if (((_BYTE)v16[4] & 4) != 0 || (_DWORD)v158 != 10)
                goto LABEL_377;
              goto LABEL_326;
            case 0xC:
LABEL_377:
              *((_DWORD *)v16 + 56) = v156 + 1;
              goto LABEL_378;
            default:
LABEL_341:
              v795 = *v16;
              pcre_freeMem(a1, &v796, a3, a4, a5, (uint64_t)a6, a7, a8, v773);
              v179 = v795;
              v13 = 4294967282;
              if (!v795)
                return v13;
              goto LABEL_1388;
          }
        }
      }
      goto LABEL_326;
    case 46:
      v45 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_247;
      v159 = (uint64_t *)v795[1];
      v795[1] = (uint64_t)v159 - 1;
      if (v159 == v45[11])
        goto LABEL_268;
      if ((*((_BYTE *)v159 - 1) & 0xC0) == 0x80)
      {
        v160 = (char *)v159 - 2;
        do
        {
          v45[1] = (uint64_t *)v160;
          v161 = *v160--;
        }
        while ((v161 & 0xC0) == 0x80);
      }
      goto LABEL_223;
    case 47:
      v45 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_247;
      v162 = (uint64_t *)v795[1];
      v163 = (unsigned __int8 *)v162 - 1;
      v795[1] = (uint64_t)v162 - 1;
      if (v162 == v45[11])
        goto LABEL_268;
      while (1)
      {
        v164 = *v163;
        v165 = v164 & 0xC0;
        if (v165 == 128)
        {
          v166 = v163 - 1;
          do
          {
            v45[1] = (uint64_t *)v166;
            v167 = *v166--;
            v164 = v167;
            v165 = v167 & 0xC0;
          }
          while (v165 == 128);
          v163 = v166 + 1;
        }
        v168 = v165 != 192 || *(_DWORD *)(a4 + 60) == 0;
        if (!v168)
        {
          v169 = utf8_table4[v164 & 0x3F];
          v170 = 6 * v169;
          v164 = (utf8_table3[v169] & v164) << (6 * v169);
          v171 = (char *)(v163 + 1);
          if (v169 <= 1)
            v169 = 1;
          v172 = v170 - 6;
          do
          {
            v173 = *v171++;
            v164 |= (v173 & 0x3F) << v172;
            v172 -= 6;
            --v169;
          }
          while (v169);
        }
        v174 = ucp_findchar(v164, (int *)v45 + 49, (unsigned int *)v45 + 50);
        v45 = (uint64_t **)v795;
        *((_DWORD *)v795 + 48) = v174;
        if (v174 != 2)
          break;
        v163 = (unsigned __int8 *)v45[1] - 1;
        v45[1] = (uint64_t *)v163;
      }
      goto LABEL_1248;
    case 48:
      v45 = (uint64_t **)v795;
      if ((_DWORD)v13)
        goto LABEL_247;
      v175 = (uint64_t *)v795[1];
      v795[1] = (uint64_t)v175 - 1;
      if (v175 == v45[11])
        goto LABEL_268;
      if ((*((_BYTE *)v175 - 1) & 0xC0) == 0x80)
      {
        v176 = (char *)v175 - 2;
        do
        {
          v45[1] = (uint64_t *)v176;
          v177 = *v176--;
        }
        while ((v177 & 0xC0) == 0x80);
      }
      goto LABEL_245;
    case 49:
      v45 = (uint64_t **)v795;
      v178 = v795[1] - 1;
      v795[1] = v178;
      if (!(_DWORD)v13)
      {
        v194 = v45[11];
LABEL_267:
        if (v178 < (unint64_t)v194)
          goto LABEL_268;
LABEL_1377:
        *(_QWORD *)&v791 = 0;
        v65 = a1;
        v66 = 49;
        goto LABEL_1378;
      }
LABEL_247:
      v44 = *v45;
      goto LABEL_248;
    default:
      v787 = pcre_getMem(a1, v14, &v795, a4, a5, (uint64_t)a6, a7, a8);
LABEL_251:
      v13 = 4294967290;
      if (!v795 || v787 < 0)
        return v13;
      v180 = 0;
      v26 = 0;
      *v795 = 0;
      v24 = v795;
      v795[1] = a2;
      v24[2] = v10;
      *((_DWORD *)v24 + 6) = 2;
      v24[4] = v8;
      v24[5] = 0;
      *((_DWORD *)v24 + 12) = 2;
      v27 = a2;
      v181 = v8;
      goto LABEL_1382;
  }
}

uint64_t nuance_pcre_ObjOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v16 = 0;
  if (!a3)
    return 2320506887;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  inited = InitRsrcFunction(a1, a2, &v16);
  if ((inited & 0x80000000) == 0)
  {
    log_OutText(*(_QWORD *)(v16 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"PCRE ObjOpen: Begin", v4, v5, v6, v14);
    v8 = (_QWORD *)heap_Calloc(*(_QWORD **)(v16 + 8), 1, 32);
    if (v8)
    {
      *v8 = v16;
      *(_QWORD *)a3 = v8;
      *(_DWORD *)(a3 + 8) = 56663;
    }
    else
    {
      log_OutPublic(*(_QWORD *)(v16 + 32), (uint64_t)"PCRE", 1000, 0, v9, v10, v11, v12, v15);
      inited = 2320506890;
    }
    log_OutText(*(_QWORD *)(v16 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"PCRE ObjOpen: End (%x)", v10, v11, v12, inited);
  }
  return inited;
}

uint64_t nuance_pcre_GetMemUsage(uint64_t a1, int a2, _WORD *a3, _WORD *a4)
{
  uint64_t result;

  result = safeh_HandleCheck(a1, a2, 56663, 32);
  if ((result & 0x80000000) == 0)
  {
    *a3 = *(_WORD *)(a1 + 26) + 1;
    *a4 = *(_WORD *)(a1 + 28);
  }
  return result;
}

uint64_t nuance_pcre_Init(_QWORD *a1, int a2, unsigned int a3, __int16 a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v26;
  unsigned int v27;

  v11 = safeh_HandleCheck((uint64_t)a1, a2, 56663, 32);
  if ((v11 & 0x80000000) == 0)
  {
    v12 = *a1;
    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"PCRE Init: Begin", v8, v9, v10, v26);
    *((_WORD *)a1 + 10) = 416;
    *((_WORD *)a1 + 8) = 0;
    *((_WORD *)a1 + 11) = a3;
    *((_DWORD *)a1 + 6) = 0;
    *((_WORD *)a1 + 14) = 0;
    *((_WORD *)a1 + 9) = a4;
    v13 = heap_Calloc(*(_QWORD **)(v12 + 8), 1, 8 * a3 + 8);
    a1[1] = v13;
    if (!v13)
      goto LABEL_7;
    v18 = heap_Calloc(*(_QWORD **)(v12 + 8), 1, 32);
    v19 = *((unsigned __int16 *)a1 + 8);
    *(_QWORD *)(a1[1] + 8 * v19) = v18;
    v20 = *(_QWORD *)(a1[1] + 8 * v19);
    if (!v20)
      goto LABEL_7;
    v21 = *((unsigned __int16 *)a1 + 9) * *((unsigned __int16 *)a1 + 10) + 1;
    *(_QWORD *)(v20 + 8) = v21;
    *(_QWORD *)v20 = 0;
    v22 = heap_Calloc(*(_QWORD **)(v12 + 8), 1, v21);
    *(_QWORD *)v20 = v22;
    if (!v22)
      goto LABEL_7;
    *(_BYTE *)(v20 + 24) = 0;
    *(_QWORD *)(v20 + 16) = 0;
    v23 = heap_Calloc(*(_QWORD **)(v12 + 8), 1, *((unsigned __int16 *)a1 + 9) + 1);
    *(_QWORD *)(v20 + 16) = v23;
    if (v23)
    {
      v24 = *((_WORD *)a1 + 8) + 1;
      *((_WORD *)a1 + 8) = v24;
      *((_WORD *)a1 + 13) = v24;
    }
    else
    {
LABEL_7:
      log_OutPublic(*(_QWORD *)(v12 + 32), (uint64_t)"PCRE", 1000, 0, v14, v15, v16, v17, v27);
      nuance_pcre_DeInit(a1, a2);
      v11 = 2320506890;
    }
    log_OutText(*(_QWORD *)(v12 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"PCRE ObjOpen: End (%x)", v15, v16, v17, v11);
  }
  return v11;
}

uint64_t nuance_pcre_DeInit(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v16;

  v6 = safeh_HandleCheck((uint64_t)a1, a2, 56663, 32);
  if ((v6 & 0x80000000) == 0)
  {
    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"PCRE DeInit : Begin", v3, v4, v5, v16);
    pcre_clearMem(a1);
    v10 = (uint64_t **)a1[1];
    if (v10)
    {
      if (*v10)
      {
        heap_Free(*(_QWORD **)(*a1 + 8), **v10);
        v12 = *a1;
        v11 = a1[1];
        **(_QWORD **)v11 = 0;
        heap_Free(*(_QWORD **)(v12 + 8), *(_QWORD *)(*(_QWORD *)v11 + 16));
        v14 = *a1;
        v13 = (uint64_t *)a1[1];
        *(_QWORD *)(*v13 + 16) = 0;
        heap_Free(*(_QWORD **)(v14 + 8), *v13);
        *(_QWORD *)a1[1] = 0;
        v10 = (uint64_t **)a1[1];
      }
      heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)v10);
      a1[1] = 0;
    }
    log_OutText(*(_QWORD *)(*a1 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"PCRE DeInit : End (%x)", v7, v8, v9, v6);
    return 0;
  }
  return v6;
}

uint64_t nuance_pcre_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = safeh_HandleCheck(a1, a2, 56663, 32);
  if ((v6 & 0x80000000) == 0)
  {
    v7 = *(_QWORD *)a1;
    log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"PCRE ObjClose : Begin", v3, v4, v5, v12);
    heap_Free(*(_QWORD **)(v7 + 8), a1);
    log_OutText(*(_QWORD *)(v7 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"PCRE ObjClose : End (%x)", v8, v9, v10, v6);
    return 0;
  }
  return v6;
}

uint64_t nuance_pcre_ErrorToLhError(unsigned int a1)
{
  if (a1 < 0xFFFFFFF0)
    return 2320514663;
  else
    return dword_214F74D54[a1 + 16];
}

uint64_t ucp_findchar(int a1, int *a2, unsigned int *a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned __int16 v12;
  unsigned int v13;
  unsigned int v14;

  if (a1 == 12063)
  {
    *a2 = 26;
    return 5;
  }
  else
  {
    LOWORD(v4) = -26112;
    v5 = 12063;
    v6 = (unsigned __int16 *)&ucp_table;
    do
    {
      v7 = v6;
      if (v5 <= a1)
      {
        v9 = v6[2];
        if (v9 < 0x1000)
          return 0xFFFFFFFFLL;
        v8 = 1 << ((v9 >> 12) - 1);
      }
      else
      {
        if ((v4 & 0x8000) == 0)
          return 0xFFFFFFFFLL;
        v8 = 1;
      }
      v6 += 3 * v8;
      v4 = *v6;
      v5 = v6[1] | (*v6 << 16);
    }
    while (v5 != a1);
    v10 = (v4 >> 8) & 0x3F;
    *a2 = v10;
    v3 = 0;
    switch(v10)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
        return v3;
      case 5:
      case 9:
        v12 = v7[3 * v8 + 2];
        if ((v12 & 0x100) != 0)
          v13 = v12 & 0xFFF | 0xFFFFF000;
        else
          v13 = v12 & 0xFFF;
        if (v13)
          v14 = v13 + a1;
        else
          v14 = 0;
        *a3 = v14;
        goto LABEL_26;
      case 6:
      case 7:
      case 8:
        *a3 = 0;
LABEL_26:
        v3 = 1;
        break;
      case 10:
      case 11:
      case 12:
        v3 = 2;
        break;
      case 13:
      case 14:
      case 15:
        v3 = 3;
        break;
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
        v3 = 4;
        break;
      case 23:
      case 24:
      case 25:
      case 26:
        return 5;
      case 27:
      case 28:
      case 29:
        v3 = 6;
        break;
      default:
        return 0xFFFFFFFFLL;
    }
  }
  return v3;
}

uint64_t find_fixedlength(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  int v8;
  uint64_t result;
  char v10;
  int v11;
  unsigned int v12;
  unsigned int v13;

  v3 = 0;
  v4 = (unsigned __int8 *)(a1 + 3);
  v5 = 0xFFFFFFFFLL;
  while (2)
  {
    v6 = v4;
    v7 = *v4;
    if (v7 >= 0x50)
      v8 = 80;
    else
      v8 = v7;
    result = 4294967294;
    switch(v8)
    {
      case 0:
      case 65:
      case 66:
      case 67:
      case 68:
        if ((v5 & 0x80000000) != 0)
        {
          v5 = v3;
        }
        else if ((_DWORD)v5 != (_DWORD)v3)
        {
          return 0xFFFFFFFFLL;
        }
        if (v7 == 65)
        {
          v3 = 0;
          v4 = v6 + 3;
          continue;
        }
        return v5;
      case 1:
      case 2:
      case 3:
      case 4:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 64:
      case 73:
      case 76:
      case 79:
        goto LABEL_10;
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
        goto LABEL_15;
      case 12:
        return result;
      case 13:
      case 14:
        ++v6;
LABEL_15:
        v3 = (v3 + 1);
        v4 = v6 + 1;
        continue;
      case 21:
      case 22:
        v3 = (v3 + 1);
        v4 = v6 + 2;
        if ((a2 & 0x800) != 0)
        {
          v4 = v6 + 1;
          do
            v10 = *++v4;
          while ((v10 & 0xC0) == 0x80);
        }
        continue;
      case 32:
        v3 = v3 + (bswap32(*(unsigned __int16 *)(v6 + 1)) >> 16);
        v4 = v6 + 4;
        if ((a2 & 0x800) != 0)
        {
          v4 = v6 + 3;
          do
            v11 = (char)*++v4;
          while (v11 < 0);
        }
        continue;
      case 50:
        v3 = v3 + (bswap32(*(unsigned __int16 *)(v6 + 1)) >> 16);
        v4 = v6 + 4;
        continue;
      case 59:
      case 60:
        goto LABEL_29;
      case 61:
        v6 = &v6[__rev16(*(unsigned __int16 *)(v6 + 1)) - 33];
LABEL_29:
        v4 = v6 + 33;
        v12 = v6[33];
        if (v12 > 0x3A)
          goto LABEL_34;
        if (((1 << v12) & 0x600000000000000) != 0)
        {
          v13 = __rev16(*((unsigned __int16 *)v6 + 17));
          if (v13 != bswap32(*((unsigned __int16 *)v6 + 18)) >> 16)
            return 0xFFFFFFFFLL;
          v3 = v13 + v3;
          v4 = v6 + 38;
        }
        else
        {
          if (((1 << v12) & 0x198000000000000) != 0)
            return 0xFFFFFFFFLL;
LABEL_34:
          v3 = (v3 + 1);
        }
        continue;
      case 69:
      case 70:
      case 71:
      case 72:
        do
        {
          v6 += __rev16(*(unsigned __int16 *)(v6 + 1));
          v7 = *v6;
        }
        while (v7 == 65);
LABEL_10:
        v4 = &v6[OP_lengths[v7]];
        continue;
      case 74:
      case 75:
      case 80:
        result = find_fixedlength(v6, a2);
        if ((result & 0x80000000) != 0)
          return result;
        do
          v6 += __rev16(*(unsigned __int16 *)(v6 + 1));
        while (*v6 == 65);
        v3 = (result + v3);
        v4 = v6 + 3;
        continue;
      default:
        return 0xFFFFFFFFLL;
    }
  }
}

unsigned __int8 *adjust_recurse(unsigned __int8 *result, int a2, int a3, uint64_t a4)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v4 = result;
  while (1)
  {
    while (1)
    {
      v5 = v4;
      v6 = *v4;
      if ((_DWORD)v6 != 63)
        break;
      v9 = __rev16(*(unsigned __int16 *)(v4 + 1));
      if (*(_QWORD *)(a4 + 32) + v9 >= (unint64_t)result)
        *(_WORD *)(v5 + 1) = bswap32(v9 + a2) >> 16;
LABEL_12:
      v4 = v5 + 3;
    }
    if (!*v4)
      return result;
    if (v6 >= 0x51)
      goto LABEL_12;
    v7 = OP_lengths[v6];
    v4 += v7;
    if (a3)
    {
      if ((v6 - 24) < 9 || (v6 - 21) < 2)
      {
        v4 = &v5[v7 - 1];
        do
          v8 = *++v4;
        while ((v8 & 0xC0) == 0x80);
      }
      else if ((_DWORD)v6 == 61)
      {
        v4 += __rev16(*(unsigned __int16 *)(v4 + 1)) + 1;
      }
    }
  }
}

uint64_t could_be_empty_branch(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int8 *significant_code_0;
  unsigned int v7;
  BOOL v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  unsigned int v15;

  v5 = 1;
  significant_code_0 = first_significant_code_0((unsigned __int8 *)(a1 + 3), 0, 0, 1);
  if ((unint64_t)significant_code_0 < a2)
  {
    while (1)
    {
      v7 = *significant_code_0;
      if (v7 < 0x50)
      {
        v5 = 0;
        v12 = 33;
        switch(*significant_code_0)
        {
          case 5u:
          case 6u:
          case 7u:
          case 8u:
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x15u:
          case 0x16u:
          case 0x17u:
          case 0x1Au:
          case 0x1Bu:
          case 0x20u:
          case 0x23u:
          case 0x24u:
          case 0x29u:
          case 0x2Cu:
          case 0x2Du:
          case 0x32u:
            return v5;
          case 0x18u:
          case 0x19u:
          case 0x1Cu:
          case 0x1Du:
          case 0x1Eu:
          case 0x1Fu:
            if ((_DWORD)a3)
            {
              --significant_code_0;
              do
              {
                v13 = significant_code_0[3] & 0xC0;
                ++significant_code_0;
              }
              while (v13 == 128);
            }
            goto LABEL_17;
          case 0x3Bu:
          case 0x3Cu:
            goto LABEL_20;
          case 0x3Du:
            v12 = __rev16(*(unsigned __int16 *)(significant_code_0 + 1));
LABEL_20:
            v5 = 0;
            v14 = &significant_code_0[v12];
            v15 = *v14;
            if (v15 > 0x3A)
              return v5;
            if (((1 << v15) & 0x198000000000000) != 0)
              goto LABEL_17;
            if (((1 << v15) & 0x600000000000000) == 0)
              return v5;
            if (__rev16(*(unsigned __int16 *)(v14 + 1)))
              return 0;
            goto LABEL_17;
          case 0x41u:
          case 0x42u:
          case 0x43u:
          case 0x44u:
            return 1;
          default:
            goto LABEL_17;
        }
      }
      if (!__rev16(*(unsigned __int16 *)(significant_code_0 + 1)))
        return 1;
      v8 = 1;
      do
      {
        while (1)
        {
          v9 = significant_code_0;
          if (v8)
            break;
          v8 = 0;
          v11 = __rev16(*(unsigned __int16 *)(significant_code_0 + 1));
          significant_code_0 += v11;
          if (v9[v11] != 65)
            goto LABEL_16;
        }
        v10 = could_be_empty_branch(significant_code_0, a2, a3);
        v8 = v10 == 0;
        v11 = __rev16(*(unsigned __int16 *)(v9 + 1));
        significant_code_0 = &v9[v11];
      }
      while (v9[v11] == 65);
      if (!v10)
        return 0;
LABEL_16:
      significant_code_0 = &v9[v11 + 3];
      v7 = *significant_code_0;
LABEL_17:
      v5 = 1;
      significant_code_0 = first_significant_code_0(&significant_code_0[OP_lengths[v7]], 0, 0, 1);
      if ((unint64_t)significant_code_0 >= a2)
        return v5;
    }
  }
  return v5;
}

unsigned __int8 *first_significant_code_0(unsigned __int8 *result, _DWORD *a2, int a3, int a4)
{
  uint64_t v4;
  char v5;
  int v6;

  while (1)
  {
    v4 = *result;
    v5 = v4 - 18;
    if ((v4 - 18) > 0x3D)
      break;
    if (((1 << v5) & 0x70000000000000) != 0)
    {
      if (!a4)
        return result;
      do
      {
        result += __rev16(*(unsigned __int16 *)(result + 1));
        v4 = *result;
      }
      while (v4 == 65);
LABEL_16:
      result += OP_lengths[v4];
    }
    else
    {
      if (((1 << v5) & 0x2400400000000000) != 0)
        goto LABEL_16;
      if ((_DWORD)v4 != 18)
        break;
      if (a3 >= 1)
      {
        v6 = result[1];
        if (((*a2 ^ v6) & a3) != 0)
          *a2 = v6;
      }
      result += 2;
    }
  }
  if ((v4 - 3) < 2 && a4 != 0)
    goto LABEL_16;
  return result;
}

uint64_t pcre_getMem(uint64_t a1, char a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 v33;
  uint64_t v35;
  const char *v36;

  *a3 = 0;
  v9 = *(unsigned __int16 *)(a1 + 16);
  if (!*(_WORD *)(a1 + 16))
  {
    v18 = 2320506880;
    v19 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v20 = 1001;
    v21 = 0;
    goto LABEL_16;
  }
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(unsigned __int16 *)(a1 + 24);
  v14 = *(_QWORD *)(v12 + 8 * v13);
  if (*(_DWORD *)(v14 + 12) + *(unsigned __int16 *)(a1 + 20) >= *(_DWORD *)(v14 + 8))
  {
    if (v9 < *(unsigned __int16 *)(a1 + 22))
    {
      if ((int)v13 + 1 < v9)
        goto LABEL_13;
      v22 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, 32);
      v27 = *(unsigned __int16 *)(a1 + 16);
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v27) = v22;
      v28 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v27);
      if (v28)
      {
        v29 = *(unsigned __int16 *)(a1 + 18) * *(unsigned __int16 *)(a1 + 20) + 1;
        *(_QWORD *)(v28 + 8) = v29;
        *(_QWORD *)v28 = 0;
        *(_QWORD *)(v28 + 16) = 0;
        v30 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, v29);
        *(_QWORD *)v28 = v30;
        if (v30)
        {
          *(_BYTE *)(v28 + 24) = 0;
          v32 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), 1, *(unsigned __int16 *)(a1 + 18) + 1);
          *(_QWORD *)(v28 + 16) = v32;
          if (v32)
          {
            ++*(_WORD *)(a1 + 16);
            LOWORD(v13) = *(_WORD *)(a1 + 24);
            v12 = *(_QWORD *)(a1 + 8);
LABEL_13:
            v33 = v13 + 1;
            *(_WORD *)(a1 + 24) = v33;
            v14 = *(_QWORD *)(v12 + 8 * v33);
            if (*(unsigned __int16 *)(a1 + 26) < v33)
              *(_WORD *)(a1 + 26) = v33;
            goto LABEL_3;
          }
        }
        log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PCRE", 1000, 0, v31, a6, a7, a8, v36);
        if (*(_QWORD *)v28)
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), *(_QWORD *)v28);
          *(_QWORD *)v28 = 0;
        }
        v35 = *(_QWORD *)(v28 + 16);
        if (v35)
        {
          heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v35);
          *(_QWORD *)(v28 + 16) = 0;
        }
        heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v28);
      }
      else
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PCRE", 1000, 0, v23, v24, v25, v26, v36);
      }
      return 2320506890;
    }
    v18 = 2320506880;
    v19 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v36 = "maxBlocks";
    v21 = "%s%hu%s%hu";
    v20 = 1002;
LABEL_16:
    log_OutPublic(v19, (uint64_t)"PCRE", v20, (uint64_t)v21, a5, a6, a7, a8, v36);
    return v18;
  }
LABEL_3:
  v15 = *(unsigned int *)(v14 + 12);
  *(_DWORD *)(v14 + 12) = v15 + *(unsigned __int16 *)(a1 + 20);
  *(_BYTE *)(*(_QWORD *)(v14 + 16) + *(unsigned __int8 *)(v14 + 24)) = a2;
  v16 = *(_BYTE *)(v14 + 24) + 1;
  *(_BYTE *)(v14 + 24) = v16;
  v17 = *(unsigned __int16 *)(a1 + 28);
  if (v17 < v16)
  {
    v17 = v16;
    *(_WORD *)(a1 + 28) = v16;
  }
  *a3 = *(_QWORD *)v14 + v15;
  log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"PCRE", 4, 0, (uint64_t)"Memory now in use: %d of %d", a6, a7, a8, *(_DWORD *)(v14 + 12) + *(unsigned __int16 *)(a1 + 20) * *(unsigned __int16 *)(a1 + 24) * v17);
  return 0;
}

uint64_t pcre_freeMem(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_WORD *)(result + 16))
  {
    v9 = *(_QWORD *)(result + 8);
    v10 = *(unsigned __int16 *)(result + 24);
    v11 = *(_QWORD *)(v9 + 8 * v10);
    v12 = *(_DWORD *)(v11 + 12);
    if (v12)
    {
LABEL_5:
      *(_DWORD *)(v11 + 12) = v12 - *(unsigned __int16 *)(result + 20);
      v13 = *(_BYTE *)(v11 + 24) - 1;
      *(_BYTE *)(v11 + 24) = v13;
      *a2 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 16) + v13);
      return result;
    }
    if (*(_WORD *)(result + 24))
    {
      *(_WORD *)(result + 24) = v10 - 1;
      v11 = *(_QWORD *)(v9 + 8 * (unsigned __int16)(v10 - 1));
      v12 = *(_DWORD *)(v11 + 12);
      goto LABEL_5;
    }
    v14 = *(_QWORD *)(*(_QWORD *)result + 32);
    v15 = 1004;
  }
  else
  {
    v14 = *(_QWORD *)(*(_QWORD *)result + 32);
    v15 = 1003;
  }
  return log_OutPublic(v14, (uint64_t)"PCRE", v15, 0, a5, a6, a7, a8, a9);
}

uint64_t match_ref_0(int a1, unsigned __int8 *a2, int a3, _QWORD *a4, char a5)
{
  unsigned __int8 *v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;

  if (a4[12] - (_QWORD)a2 < a3)
    return 0;
  v6 = (unsigned __int8 *)(a4[11] + *(int *)(a4[2] + 4 * a1));
  if ((a5 & 1) != 0)
  {
    while (1)
    {
      v7 = __OFSUB__(a3--, 1);
      if (a3 < 0 != v7)
        break;
      v11 = a4[4];
      v12 = *v6++;
      v13 = *(unsigned __int8 *)(v11 + v12);
      v14 = *a2++;
      if (v13 != *(unsigned __int8 *)(v11 + v14))
        return 0;
    }
  }
  else
  {
    while (1)
    {
      v7 = __OFSUB__(a3--, 1);
      if (a3 < 0 != v7)
        break;
      v9 = *v6++;
      v8 = v9;
      v10 = *a2++;
      if (v8 != v10)
        return 0;
    }
  }
  return 1;
}

uint64_t match_xclass(int a1, _BYTE *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  char v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  char v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  char v26;
  uint64_t v28;

  v3 = *a2 & 1;
  if (a1 <= 255 && (*a2 & 2) != 0 && ((a2[a1 / 8 + 1] >> (a1 & 7)) & 1) != 0)
    return !(*a2 & 1);
  if ((*a2 & 2) != 0)
    v4 = a2 + 33;
  else
    v4 = a2 + 1;
  do
  {
    while (1)
    {
      v5 = *v4;
      if (v5 == 1)
        break;
      if (v5 == 2)
      {
        v16 = (char *)(v4 + 2);
        v17 = v4[1];
        if ((~v17 & 0xC0) == 0)
        {
          v18 = utf8_table4[v17 & 0x3F];
          v17 = (utf8_table3[utf8_table4[v17 & 0x3F]] & v17) << (6 * v18);
          v19 = 6 * v18 - 6;
          v20 = v18 + 1;
          do
          {
            v21 = *v16++;
            v17 |= (v21 & 0x3F) << v19;
            v19 -= 6;
            --v20;
          }
          while (v20 > 1);
        }
        v22 = *v16;
        v4 = (unsigned __int8 *)(v16 + 1);
        if ((~v22 & 0xC0) == 0)
        {
          v23 = utf8_table4[v22 & 0x3F];
          v22 = (utf8_table3[utf8_table4[v22 & 0x3F]] & v22) << (6 * v23);
          v24 = 6 * v23 - 6;
          v25 = v23 + 1;
          do
          {
            v26 = *v4++;
            v22 |= (v26 & 0x3F) << v24;
            v24 -= 6;
            --v25;
          }
          while (v25 > 1);
        }
        if (v17 <= a1 && v22 >= a1)
          return v3 ^ 1;
      }
      else
      {
        if (!*v4)
          return v3;
        v28 = 0;
        v6 = v4 + 2;
        v7 = (char)v4[1];
        v8 = v4[1];
        v9 = ucp_findchar(a1, (int *)&v28 + 1, (unsigned int *)&v28);
        if (v7 < 0)
        {
          v4 = v6;
          if ((v5 == 3) != (v8 - 128 != v9))
            return v3 ^ 1;
        }
        else
        {
          v4 = v6;
          if ((v5 == 3) != (HIDWORD(v28) != v8))
            return v3 ^ 1;
        }
      }
    }
    v10 = v4 + 2;
    v11 = v4[1];
    if ((~v11 & 0xC0) == 0)
    {
      v12 = utf8_table4[v11 & 0x3F];
      v11 = (utf8_table3[utf8_table4[v11 & 0x3F]] & v11) << (6 * v12);
      v13 = 6 * v12 - 6;
      v14 = v12 + 1;
      do
      {
        v15 = *v10++;
        v11 |= (v15 & 0x3F) << v13;
        v13 -= 6;
        --v14;
      }
      while (v14 > 1);
    }
    v4 = v10;
  }
  while (v11 != a1);
  return v3 ^ 1;
}

uint64_t clcml_ObjOpen(_WORD *a1, int a2, char *a3, uint64_t *a4)
{
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t Object;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t Str;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t NullHandle;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  unint64_t v38;
  __int16 v39;
  _QWORD *v40;
  unsigned int v42;
  unsigned int v43;
  __int128 v44;
  uint64_t *(*v45)(uint64_t *, _QWORD *);
  unsigned int v46;
  char *v47;
  char *v48;
  char *v49;
  char *__src;
  const void *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  int v56[2];
  char v57[1024];
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v55 = 0;
  *(_QWORD *)v56 = 0;
  v53 = 0;
  v54 = 0;
  v52 = 0;
  __src = 0;
  v51 = 0;
  v48 = 0;
  v49 = 0;
  v47 = 0;
  v46 = 0;
  inited = InitRsrcFunction(a1, a2, v56);
  if ((inited & 0x80000000) != 0)
    return inited;
  v12 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v56 + 8), 1, 544);
  *a4 = v12;
  v13 = *(uint64_t ***)(*(_QWORD *)v56 + 32);
  if (!v12)
  {
    Str = 2358255626;
    log_OutPublic((uint64_t)v13, (uint64_t)"FE_CLCML", 60000, 0, v8, v9, v10, v11, v42);
    return Str;
  }
  log_OutTraceTuningData(v13, 600, (uint64_t)"%s%s", v7, v8, v9, v10, v11, "BEG");
  Object = rsrc_Open(*(_QWORD **)(*(_QWORD *)v56 + 8), *(_QWORD *)(*(_QWORD *)v56 + 16), 0, 0, *a4 + 8);
  if ((Object & 0x80000000) != 0)
    goto LABEL_53;
  Object = InitRsrcFunction(*(_WORD **)(*a4 + 8), *(_QWORD *)(*a4 + 16), (_QWORD *)*a4);
  if ((Object & 0x80000000) != 0)
    goto LABEL_53;
  v20 = *(_QWORD *)v56;
  *(_QWORD *)(*(_QWORD *)*a4 + 64) = *(_QWORD *)(*(_QWORD *)v56 + 64);
  *(_OWORD *)(*(_QWORD *)*a4 + 384) = *(_OWORD *)(v20 + 384);
  *(_QWORD *)(*(_QWORD *)*a4 + 24) = *(_QWORD *)(v20 + 24);
  *(_QWORD *)(*(_QWORD *)*a4 + 32) = *(_QWORD *)(v20 + 32);
  Object = paramc_ObjOpen(0, *(_QWORD *)(*a4 + 8), *(_QWORD *)(*a4 + 16), *(_QWORD *)*a4 + 40);
  if ((Object & 0x80000000) != 0)
    goto LABEL_53;
  Object = objc_ObjOpen(0, *(_WORD **)(*a4 + 8), *(_QWORD *)(*a4 + 16), (uint64_t *)(*(_QWORD *)*a4 + 48));
  if ((Object & 0x80000000) != 0)
    goto LABEL_53;
  *(_DWORD *)(*a4 + 540) = 0;
  if ((objc_GetObject(*(_QWORD *)(*(_QWORD *)v56 + 48), (uint64_t)"LANGCODECONVERTER", &v51) & 0x80000000) == 0)
  {
    Object = objc_RegisterObject(*(_QWORD *)(*(_QWORD *)*a4 + 48), (uint64_t)"LANGCODECONVERTER", v51);
    if ((Object & 0x80000000) != 0)
    {
LABEL_53:
      Str = Object;
      goto LABEL_54;
    }
    *(_DWORD *)(*a4 + 540) = 1;
    objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)v56 + 48), (uint64_t)"LANGCODECONVERTER");
  }
  if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"noclmset", &v49) & 0x80000000) != 0)
    v49 = 0;
  if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"datapackagename", &v48) & 0x80000000) != 0)
    v48 = 0;
  if ((paramc_ParamGetUInt(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"pipelineswitchexecuting", &v46) & 0x80000000) != 0)
    v46 = 0;
  if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"blockautoinsertionfeclm", &v47) & 0x80000000) != 0)
    v47 = 0;
  *(_QWORD *)v56 = *(_QWORD *)*a4;
  paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"pipelineswitchexecuting", v46);
  paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"readmode", 1u);
  paramc_ParamSetUInt(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"infiniteloopdetectlimit", 0x2710u);
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"inputmimetype", "text/plain;charset=utf-8");
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"numberoutputtranscriptions", "1");
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"numberoutputorthsubstitutes", "1");
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"numberpartialorthvariants", "1");
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"clmvariants", "no");
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"norichtranscription", "false");
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"clcpppipelinemode", "internal");
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"fedatapackaging", a3);
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"foreignpron", "yes");
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"fedataprefix", "");
  paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"feextcfgdataprefix", "");
  if (v48)
    paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"datapackagename", v48);
  if (v49)
    paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"noclmset", v49);
  if (v47)
    paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"blockautoinsertionfeclm", v47);
  *(_QWORD *)(*a4 + 120) = 0;
  brokeraux_ComposeBrokerString(*(uint64_t *)v56, "pipeline", 0, 1, 0, 0, 0, v57, 0x400uLL);
  Object = brk_DataOpen(*(_QWORD *)(*(_QWORD *)v56 + 24));
  if ((Object & 0x80000000) != 0)
    goto LABEL_53;
  Object = brk_DataMap(*(_QWORD *)(*(_QWORD *)v56 + 24), *(_QWORD *)(*a4 + 120), 0, 0, (uint64_t)&v55);
  if ((Object & 0x80000000) != 0)
    goto LABEL_53;
  Object = hdrpars_ReadHeader(*(_WORD **)(*a4 + 8), *(_QWORD *)(*a4 + 16), 0, v55, &v54, &v53);
  if ((Object & 0x80000000) != 0)
    goto LABEL_53;
  if (v53)
  {
    *(_QWORD *)&v44 = 0;
    if (vector_GetElemAt(v53, 0, &v44))
    {
      v21 = 1;
      do
        ssftmap_ObjClose(*(_QWORD *)v44);
      while (vector_GetElemAt(v53, v21++, &v44));
    }
    vector_ObjClose(v53);
    v53 = 0;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)v56 + 32), (uint64_t)"FE_CLCML", 60001, 0, v23, v24, v25, v26, v43);
    Str = 2358255623;
    goto LABEL_54;
  }
  if (v55)
  {
    brk_DataUnmap(*(_QWORD *)(*(_QWORD *)v56 + 24), *(_QWORD *)(*a4 + 120), (uint64_t)v55);
    v55 = 0;
  }
  v28 = *(_QWORD **)(*(_QWORD *)v56 + 8);
  v29 = (uint64_t *)(*a4 + 32);
  v44 = xmmword_24D292920;
  v45 = vclc_loc_ElemFreePartsString;
  if (vector_ObjOpen(v28, &v44, 1, v29))
  {
    Object = clcpipeline_LoadObject(*(_WORD **)(*a4 + 8), *(_QWORD *)(*a4 + 16), (uint64_t)"SYNTHSTREAM", (uint64_t)"synthstream", *(_QWORD *)(*a4 + 32), 0);
    if ((Object & 0x80000000) == 0)
    {
      Object = objc_GetObject(*(_QWORD *)(*(_QWORD *)v56 + 48), (uint64_t)"SYNTHSTREAM", &v51);
      if ((Object & 0x80000000) == 0)
      {
        *(_QWORD *)(*a4 + 40) = *((_QWORD *)v51 + 1);
        Object = clcpipeline_LoadObject(*(_WORD **)(*a4 + 8), *(_QWORD *)(*a4 + 16), (uint64_t)"LINGDB", (uint64_t)"lingdb", *(_QWORD *)(*a4 + 32), 0);
        if ((Object & 0x80000000) == 0)
        {
          Object = objc_GetObject(*(_QWORD *)(*(_QWORD *)v56 + 48), (uint64_t)"LINGDB", &v51);
          if ((Object & 0x80000000) == 0)
          {
            *(_QWORD *)(*a4 + 48) = *((_QWORD *)v51 + 1);
            Object = clcpipeline_ObjOpen(*(_WORD **)(*a4 + 8), *(_QWORD *)(*a4 + 16), v54, *(_QWORD *)(*a4 + 32), (uint64_t *)(*a4 + 24), &v52);
            if ((Object & 0x80000000) == 0)
            {
              paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"nativetypeofchar", "utf-8");
              paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"inputmimetype", "text/plain;charset=utf-8");
              if (v54)
                ssftmap_ObjClose(v54);
              v34 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(*a4 + 40) + 32);
              NullHandle = safeh_GetNullHandle();
              Object = v34(NullHandle);
              if ((Object & 0x80000000) == 0)
              {
                v36 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(*a4 + 48) + 32);
                v37 = safeh_GetNullHandle();
                Object = v36(v37);
                if ((Object & 0x80000000) == 0)
                {
                  Object = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, const char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(*a4 + 40) + 64))(*(_QWORD *)(*a4 + 56), *(_QWORD *)(*a4 + 64), 201, "text/plain;charset=utf-8",
                             0,
                             1,
                             *a4 + 88);
                  if ((Object & 0x80000000) == 0)
                  {
                    v38 = 0;
                    while (v38 < *(unsigned __int16 *)(*(_QWORD *)(*a4 + 24) + 16))
                    {
                      v39 = v38 + 1;
                      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*a4 + 40) + 56))(*(_QWORD *)(*a4 + 56), *(_QWORD *)(*a4 + 64), (unsigned __int16)(v38 + 1));
                      v40 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*a4 + 24) + 8) + 8 * v38++);
                      if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v40[2] + 96))(v40[3], v40[4], *(_QWORD *)(*a4 + 56), *(_QWORD *)(*a4 + 64)) & 0x80000000) != 0)
                      {
                        *(_WORD *)(*(_QWORD *)(*a4 + 24) + 16) = v39 - 1;
                        break;
                      }
                    }
                    Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)v56 + 40), (uint64_t)"langcode", &__src);
                    if ((Str & 0x80000000) == 0)
                      cstdlib_strncpy((char *)(*a4 + 128), __src, 3uLL);
                    goto LABEL_54;
                  }
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_53;
  }
  Str = 2358255626;
  log_OutPublic(*(_QWORD *)(*(_QWORD *)v56 + 32), (uint64_t)"FE_CLCML", 60000, 0, v30, v31, v32, v33, v43);
LABEL_54:
  log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)v56 + 32), 600, (uint64_t)"%s%s", v15, v16, v17, v18, v19, "END");
  if ((Str & 0x80000000) != 0)
    clcml_ObjClose(*a4);
  return Str;
}

uint64_t vclc_loc_ElemCopyPartsString(const char **a1, uint64_t a2, uint64_t *a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t result;
  const char *v8;

  v5 = *a1;
  if (*a1)
    v6 = cstdlib_strlen(*a1) + 1;
  else
    v6 = 1;
  result = heap_Alloc(a2, v6);
  *a3 = result;
  if (result)
  {
    if (v5)
      v8 = v5;
    else
      v8 = "";
    cstdlib_strcpy((char *)result, v8);
    return 1;
  }
  return result;
}

uint64_t *vclc_loc_ElemFreePartsString(uint64_t *result, _QWORD *a2)
{
  if (*result)
    return heap_Free(a2, *result);
  return result;
}

uint64_t clcml_ObjClose(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t v8;
  uint64_t NullHandle;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  int v21;
  uint64_t v23;
  int v24;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  uint64_t v39;
  int v40;
  _QWORD *v42;
  _WORD *v43;
  int v44;
  uint64_t v46;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 && *(_WORD *)(v2 + 16))
  {
    v3 = 0;
    LODWORD(v4) = 0;
    do
    {
      v5 = *(_QWORD **)(*(_QWORD *)(v2 + 8) + 8 * v3);
      v6 = (*(uint64_t (**)(_QWORD, _QWORD))(v5[2] + 112))(v5[3], v5[4]);
      if ((int)v4 > -1 && v6 < 0)
        v4 = v6;
      else
        v4 = v4;
      ++v3;
      v2 = *(_QWORD *)(a1 + 24);
    }
    while (v3 < *(unsigned __int16 *)(v2 + 16));
  }
  else
  {
    v4 = 0;
  }
  v8 = *(_QWORD *)(a1 + 120);
  if (v8)
  {
    brk_DataClose(*(_QWORD *)(*(_QWORD *)a1 + 24), v8);
    *(_QWORD *)(a1 + 120) = 0;
  }
  NullHandle = safeh_GetNullHandle();
  if (!safeh_HandlesEqual(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), NullHandle, v10))
  {
    v18 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 72))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
    *(_QWORD *)(a1 + 88) = safeh_GetNullHandle();
    *(_QWORD *)(a1 + 96) = v11;
    if (v18 >= 0 || (int)v4 <= -1)
      v4 = v4;
    else
      v4 = v18;
  }
  v20 = *(_QWORD *)(a1 + 56);
  if (v20)
  {
    v21 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 40))(v20, *(_QWORD *)(a1 + 64));
    if ((int)v4 > -1 && v21 < 0)
      v4 = v21;
    else
      v4 = v4;
  }
  v23 = *(_QWORD *)(a1 + 72);
  if (v23)
  {
    v24 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 48) + 40))(v23, *(_QWORD *)(a1 + 80));
    if ((int)v4 > -1 && v24 < 0)
      v4 = v24;
    else
      v4 = v4;
  }
  v26 = *(_QWORD *)(a1 + 24);
  if (v26)
  {
    v27 = clcpipeline_ObjClose(v26, v11, v12, v13, v14, v15, v16, v17);
    if (v27 >= 0)
      v4 = v4;
    else
      v4 = v27;
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)(a1 + 48))
  {
    v28 = objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"LINGDB");
    if (v28 >= 0)
      v4 = v4;
    else
      v4 = v28;
    *(_QWORD *)(a1 + 48) = 0;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v29 = objc_ReleaseObject(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)"SYNTHSTREAM");
    if (v29 >= 0)
      v4 = v4;
    else
      v4 = v29;
    *(_QWORD *)(a1 + 40) = 0;
  }
  v30 = *(_QWORD *)(a1 + 32);
  if (v30)
  {
    v31 = clcpipeline_UnloadObjects(*(_WORD **)(a1 + 8), *(_QWORD *)(a1 + 16), v30);
    if (v31 >= 0)
      v4 = v4;
    else
      v4 = v31;
    vector_ObjClose(*(_QWORD *)(a1 + 32));
    *(_QWORD *)(a1 + 32) = 0;
  }
  v32 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    if ((v33 = v32[6]) == 0
      || !*(_DWORD *)(a1 + 540)
      || ((v34 = objc_UnregisterObject(v33, (uint64_t)"LANGCODECONVERTER"), (int)v4 > -1) ? (v35 = v34 < 0) : (v35 = 0),
          !v35 ? (v4 = v4) : (v4 = v34),
          (v32 = *(_QWORD **)a1) != 0))
    {
      v36 = v32[6];
      if (v36)
      {
        v37 = objc_ObjClose(v36);
        v32 = *(_QWORD **)a1;
        *(_QWORD *)(*(_QWORD *)a1 + 48) = 0;
        if ((int)v4 > -1 && v37 < 0)
          v4 = v37;
        else
          v4 = v4;
      }
      v39 = v32[5];
      if (v39)
      {
        v40 = paramc_ObjClose(v39);
        v32 = *(_QWORD **)a1;
        *(_QWORD *)(*(_QWORD *)a1 + 40) = 0;
        if ((int)v4 > -1 && v40 < 0)
          v4 = v40;
        else
          v4 = v4;
      }
      v42 = (_QWORD *)v32[1];
      v43 = *(_WORD **)(a1 + 8);
      if (v43)
      {
        v44 = rsrc_Close(v43, *(_QWORD *)(a1 + 16));
        if ((int)v4 > -1 && v44 < 0)
          v4 = v44;
        else
          v4 = v4;
      }
      v46 = *(_QWORD *)(a1 + 528);
      if (v46)
        heap_Free(v42, v46);
      heap_Free(v42, a1);
    }
  }
  return v4;
}

uint64_t clcml_Process(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int PreviousUtf8Offset, const char *a5, const char *a6)
{
  uint64_t i;
  uint64_t j;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD, _QWORD, char *, size_t);
  size_t v25;
  uint64_t (*v26)(_QWORD, _QWORD, char *, size_t);
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned __int16 v36;
  __int16 v37;
  uint64_t k;
  uint64_t m;
  unint64_t v41;
  uint64_t v42;
  uint64_t n;
  size_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  const void *v59;
  size_t v60;
  char *v61;
  char *v62;
  const void *v63;
  size_t v64;
  uint64_t v65;
  int *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  _DWORD *v71;
  _DWORD *v72;
  _DWORD *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v82;
  unsigned int v83;
  char __s2[12];
  int v85;
  _BYTE *v86;
  char __s1[4];
  char *__s;
  unsigned __int16 v89;
  unsigned int v90;
  int v91;
  char __dst[1024];
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  v90 = 0;
  v91 = 0;
  v89 = 0;
  HIWORD(v85) = 0;
  cstdlib_strcpy(*(char **)(a1 + 104), "");
  *(_WORD *)(a1 + 260) = 0;
  if (a5 && cstdlib_strcmp(a5, "normal"))
  {
    for (i = 0; i != 3; ++i)
      __s1[i] = ssft_tolower(a5[i]);
  }
  else
  {
    for (j = 0; j != 3; ++j)
      __s1[j] = ssft_tolower(*(unsigned __int8 *)(a1 + 128 + j));
  }
  for (__s1[3] = 0; PreviousUtf8Offset > a3; PreviousUtf8Offset = utf8_GetPreviousUtf8Offset(a2, PreviousUtf8Offset))
  {
    if (*(unsigned __int8 *)(a2 + utf8_GetPreviousUtf8Offset(a2, PreviousUtf8Offset)) > 0x20u)
      break;
  }
  v14 = PreviousUtf8Offset - a3;
  if (PreviousUtf8Offset != a3)
  {
    v16 = heap_Calloc(*(_QWORD **)(*(_QWORD *)a1 + 8), *(unsigned __int16 *)(*(_QWORD *)(a1 + 24) + 16), 4);
    if (!v16)
    {
      v15 = 2358255626;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_CLCML", 60000, 0, v18, v19, v20, v21, v82);
      return v15;
    }
    v22 = v16;
    __s = 0;
    v86 = 0;
    log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)a1 + 32), 600, (uint64_t)"%s%s", v17, v18, v19, v20, v21, "BEG");
    v23 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 64))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
    if ((v23 & 0x80000000) == 0)
    {
      if (!a5
        || (cstdlib_strcpy(__dst, "\x1B\\lang="),
            cstdlib_strcat(__dst, a5),
            cstdlib_strcat(__dst, "\\"),
            v24 = *(uint64_t (**)(_QWORD, _QWORD, char *, size_t))(*(_QWORD *)(a1 + 40) + 104),
            v25 = cstdlib_strlen(__dst),
            v23 = v24(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), __dst, v25),
            (v23 & 0x80000000) == 0))
      {
        if (!cstdlib_strcmp(a6, "normal")
          || !cstdlib_strcmp(a6, "mpthree")
          || (cstdlib_strcpy(__dst, "\x1B\\tn="),
              cstdlib_strcat(__dst, a6),
              cstdlib_strcat(__dst, "\\"),
              v26 = *(uint64_t (**)(_QWORD, _QWORD, char *, size_t))(*(_QWORD *)(a1 + 40) + 104),
              v27 = cstdlib_strlen(__dst),
              v23 = v26(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), __dst, v27),
              (v23 & 0x80000000) == 0))
        {
          v23 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 104))(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), a2 + a3, v14);
          if ((v23 & 0x80000000) == 0)
          {
            v31 = 0;
            v32 = v22;
            while (1)
            {
              v33 = *(_QWORD *)(a1 + 24);
              if (v31 >= *(unsigned __int16 *)(v33 + 16))
                break;
              log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Calling Process for %s", v28, v29, v30, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 8) + 8 * v31) + 8));
              v34 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 8 * v31);
              v15 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(v34[2] + 104))(v34[3], v34[4], *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v32);
              v35 = *(_QWORD *)(a1 + 48);
              if (*(_QWORD *)(v35 + 200))
              {
                *(_DWORD *)__s2 = 0;
                if (((*(uint64_t (**)(_QWORD, _QWORD, char *))(v35 + 216))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), __s2) & 0x80000000) == 0)
                {
                  if (*(_DWORD *)__s2)
                    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 48) + 200))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 8 * v31) + 8), 1);
                }
              }
              ++v31;
              v32 += 4;
              if ((v15 & 0x80000000) != 0)
                goto LABEL_100;
            }
            v15 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 48) + 104))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), 1, 0, (char *)&v91 + 2);
            if ((v15 & 0x80000000) != 0)
              goto LABEL_100;
            if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, char *))(*(_QWORD *)(a1 + 48) + 184))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), HIWORD(v91), 0, (char *)&v85 + 2) & 0x80000000) != 0|| HIWORD(v85) != 1)
            {
              goto LABEL_76;
            }
            v15 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, int *))(*(_QWORD *)(a1 + 48)
                                                                                            + 176))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), HIWORD(v91), 0, a1 + 520, &v91);
            if ((v15 & 0x80000000) != 0)
              goto LABEL_100;
            if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, char *))(*(_QWORD *)(a1 + 48) + 152))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), 2, HIWORD(v91), (char *)&v85 + 2) & 0x80000000) == 0)
            {
              if (HIWORD(v85))
              {
                v15 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 48) + 104))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), 2, HIWORD(v91), &v89);
                if ((v15 & 0x80000000) != 0)
                  goto LABEL_100;
              }
            }
            *(_DWORD *)(a1 + 112) = 0;
            v36 = v89;
            if (!v89)
            {
LABEL_76:
              v55 = *(char **)(a1 + 104);
              if (*(_WORD *)(a1 + 112))
              {
                v56 = *(unsigned __int16 *)(a1 + 112) - 1;
                if (v55[v56] == 95)
                {
                  v55[v56] = 0;
                  --*(_WORD *)(a1 + 112);
                  v55 = *(char **)(a1 + 104);
                }
              }
              v57 = cstdlib_strstr(v55, "_\\TQ\\_");
              if (v57)
              {
                v58 = v57;
                v59 = v57 + 6;
                v60 = cstdlib_strlen(v57 + 6);
                cstdlib_memmove(v58, v59, v60 + 1);
                *(_WORD *)(a1 + 112) -= 6;
              }
              v61 = cstdlib_strstr(*(char **)(a1 + 104), "\\TQ\\");
              if (v61)
              {
                v62 = v61;
                v63 = v61 + 4;
                v64 = cstdlib_strlen(v61 + 4);
                cstdlib_memmove(v62, v63, v64 + 1);
                *(_WORD *)(a1 + 112) -= 4;
              }
              if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, char *))(*(_QWORD *)(a1 + 48) + 184))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), HIWORD(v91), 1, (char *)&v85 + 2) & 0x80000000) == 0&& HIWORD(v85) == 1)
              {
                *(_QWORD *)__s2 = 0;
                LOWORD(v85) = 0;
                *(_WORD *)(a1 + 536) = 0;
                v15 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, char *, int *))(*(_QWORD *)(a1 + 48)
                                                                                                + 176))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), HIWORD(v91), 1, __s2, &v85);
                if ((v15 & 0x80000000) == 0)
                {
                  v65 = (unsigned __int16)v85;
                  if ((_WORD)v85)
                  {
                    v66 = *(int **)__s2;
                    do
                    {
                      v67 = *v66;
                      v66 += 8;
                      if (v67 == 1)
                        ++*(_WORD *)(a1 + 536);
                      --v65;
                    }
                    while (v65);
                  }
                  if (*(_WORD *)(a1 + 536))
                  {
                    v68 = heap_Realloc(*(uint64_t **)(*(_QWORD *)a1 + 8), *(_QWORD *)(a1 + 528), 4 * *(unsigned __int16 *)(a1 + 536));
                    if (v68)
                    {
                      *(_QWORD *)(a1 + 528) = v68;
                      v69 = (unsigned __int16)v85;
                      if ((_WORD)v85)
                      {
                        v70 = 0;
                        v71 = *(_DWORD **)__s2;
                        v72 = *(_DWORD **)__s2;
                        v73 = *(_DWORD **)__s2;
                        do
                        {
                          v74 = *v73;
                          v73 += 8;
                          if (v74 == 1)
                          {
                            v75 = (unsigned __int16)v70++;
                            *(_DWORD *)(v68 + 4 * v75) = v72[3] - v71[3];
                          }
                          v72 = v73;
                          --v69;
                        }
                        while (v69);
                      }
                    }
                    else
                    {
LABEL_102:
                      v15 = 2358255626;
                      log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_CLCML", 60000, 0, v50, v51, v52, v53, v83);
                    }
                  }
                }
              }
              goto LABEL_100;
            }
            v37 = 0;
            while (1)
            {
              v23 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, unsigned int *, int *))(*(_QWORD *)(a1 + 48) + 168))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v36, 0, 1, &v90, &v91);
              if ((v23 & 0x80000000) != 0)
                break;
              if (v90 <= 0xA && ((1 << v90) & 0x610) != 0)
              {
                v85 = 0;
                v23 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, char **, int *))(*(_QWORD *)(a1 + 48)
                                                                                                 + 176))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v89, 3, &__s, &v91);
                if ((v23 & 0x80000000) != 0)
                  break;
                if (!cstdlib_strcmp(a6, "mpthree"))
                {
                  v23 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, _BYTE **, int *))(*(_QWORD *)(a1 + 48) + 176))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v89, 9, &v86, &v91);
                  if ((v23 & 0x80000000) != 0)
                    break;
                  if (*v86)
                  {
                    for (k = 0; k != 3; ++k)
                      __s2[k] = ssft_tolower(v86[k]);
                  }
                  else
                  {
                    for (m = 0; m != 3; ++m)
                      __s2[m] = ssft_tolower(*(unsigned __int8 *)(a1 + 128 + m));
                  }
                  __s2[3] = 0;
                  if (cstdlib_strcmp(__s1, __s2))
                  {
                    v41 = *(unsigned __int16 *)(a1 + 260);
                    if (v41 <= 0x3F)
                    {
                      cstdlib_strcpy((char *)(a1 + 4 * v41 + 262), __s2);
                      v42 = *(unsigned __int16 *)(a1 + 260);
                      *(_WORD *)(a1 + 260) = v42 + 1;
                      *(_WORD *)(a1 + 2 * v42 + 132) = v37;
                    }
                  }
                  for (n = 0; n != 4; ++n)
                    __s1[n] = ssft_tolower(__s2[n]);
                  ++v37;
                }
                if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, char *))(*(_QWORD *)(a1 + 48) + 184))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v89, 8, (char *)&v85 + 2) & 0x80000000) == 0&& HIWORD(v85) == 1)
                {
                  v23 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)(a1 + 48) + 168))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v89, 8, 1, &v85, &v91);
                  if ((v23 & 0x80000000) != 0)
                    break;
                }
                if (cstdlib_strlen(__s) && cstdlib_strcmp(__s, "_"))
                {
                  v44 = cstdlib_strlen(__s);
                  v45 = *(unsigned __int16 *)(a1 + 112);
                  if (v44 + v45 - 1023 <= 0xFFFFFFFFFFFFFBFFLL)
                  {
                    v46 = *(uint64_t **)(*(_QWORD *)a1 + 8);
                    v47 = *(_QWORD *)(a1 + 104);
                    v48 = cstdlib_strlen(__s);
                    v49 = heap_Realloc(v46, v47, v48 + *(unsigned __int16 *)(a1 + 112) + 2);
                    if (!v49)
                      goto LABEL_102;
                    *(_QWORD *)(a1 + 104) = v49;
                    LOWORD(v45) = *(_WORD *)(a1 + 112);
                  }
                  *(_WORD *)(a1 + 112) = v45 + cstdlib_strlen(__s) + 1;
                  cstdlib_strcat(*(char **)(a1 + 104), __s);
                  if ((_WORD)v85)
                    v54 = "#";
                  else
                    v54 = "_";
                  cstdlib_strcat(*(char **)(a1 + 104), v54);
                }
                else if ((_WORD)v85 && *(_WORD *)(a1 + 112))
                {
                  *(_BYTE *)(*(_QWORD *)(a1 + 104) + *(unsigned __int16 *)(a1 + 112) - 1) = 35;
                }
              }
              v15 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, unsigned __int16 *))(*(_QWORD *)(a1 + 48) + 120))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v89, &v89);
              if ((v15 & 0x80000000) != 0)
                goto LABEL_100;
              v36 = v89;
              if (!v89)
                goto LABEL_76;
            }
          }
        }
      }
    }
    v15 = v23;
LABEL_100:
    heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v22);
    log_OutTraceTuningData(*(uint64_t ***)(*(_QWORD *)a1 + 32), 600, (uint64_t)"%s%s", v76, v77, v78, v79, v80, "END");
    return v15;
  }
  return 0;
}

uint64_t fe_clcml_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t Object;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v24;
  _BYTE v25[32];
  uint64_t (*v26)();
  uint64_t v27;
  __int128 __b;
  __int128 v29;
  uint64_t (*v30)();
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v33 = 0;
  v34 = 0;
  v5 = 2358255623;
  v31 = 0;
  v32 = 0;
  v27 = 0;
  if (a5)
  {
    v30 = 0;
    __b = 0u;
    v29 = 0u;
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    inited = InitRsrcFunction(a3, a4, &v34);
    if ((inited & 0x80000000) != 0)
      return inited;
    v10 = (_QWORD *)heap_Calloc(*(_QWORD **)(v34 + 8), 1, 1000);
    if (!v10)
    {
      log_OutPublic(*(_QWORD *)(v34 + 32), (uint64_t)"FE_CLCML", 60000, 0, v11, v12, v13, v14, v24);
      return 2358255626;
    }
    v15 = v10;
    *v10 = v34;
    v10[1] = a3;
    v10[2] = a4;
    Object = objc_GetObject(*(_QWORD *)(v34 + 48), (uint64_t)"SYNTHSTREAM", &v33);
    if ((Object & 0x80000000) != 0)
      goto LABEL_19;
    Object = objc_GetObject(*(_QWORD *)(v34 + 48), (uint64_t)"FE_DEPES", &v32);
    if ((Object & 0x80000000) != 0)
      goto LABEL_19;
    Object = objc_GetObject(*(_QWORD *)(v34 + 48), (uint64_t)"FE_DCTLKP", &v31);
    if ((Object & 0x80000000) != 0)
      goto LABEL_19;
    v15[3] = *(_QWORD *)(v33 + 8);
    v17 = v32;
    v15[6] = *(_QWORD *)(v32 + 8);
    *((_OWORD *)v15 + 2) = *(_OWORD *)(v17 + 16);
    v18 = v31;
    v15[9] = *(_QWORD *)(v31 + 8);
    *(_OWORD *)(v15 + 7) = *(_OWORD *)(v18 + 16);
    *((_DWORD *)v15 + 248) = 0;
    v15[122] = 0;
    v15[123] = 0;
    v15[121] = 0;
    if ((paramc_ParamGetStr(*(_QWORD *)(v34 + 40), (uint64_t)"extraesclang", &v27) & 0x80000000) != 0)
    {
      Object = paramc_ParamSetStr(*(_QWORD *)(v34 + 40), (uint64_t)"extraesclang", "");
      if ((Object & 0x80000000) != 0)
        goto LABEL_19;
    }
    if ((paramc_ParamGetStr(*(_QWORD *)(v34 + 40), (uint64_t)"extraesctn", &v27) & 0x80000000) != 0)
    {
      Object = paramc_ParamSetStr(*(_QWORD *)(v34 + 40), (uint64_t)"extraesctn", "");
      if ((Object & 0x80000000) != 0)
        goto LABEL_19;
    }
    if ((paramc_ParamGetStr(*(_QWORD *)(v34 + 40), (uint64_t)"lidvoiceswitch", &v27) & 0x80000000) != 0)
    {
      Object = paramc_ParamSetStr(*(_QWORD *)(v34 + 40), (uint64_t)"lidvoiceswitch", "");
      if ((Object & 0x80000000) != 0)
        goto LABEL_19;
    }
    v19 = *(_QWORD *)(v34 + 40);
    *(_QWORD *)v25 = v15;
    *(_OWORD *)&v25[8] = xmmword_24D292940;
    Object = paramc_ListenerAdd(v19, "extraesclang", v25);
    if ((Object & 0x80000000) != 0)
      goto LABEL_19;
    v20 = *(_QWORD *)(v34 + 40);
    *(_QWORD *)v25 = v15;
    *(_OWORD *)&v25[8] = xmmword_24D292940;
    Object = paramc_ListenerAdd(v20, "extraesctn", v25);
    if ((Object & 0x80000000) != 0)
      goto LABEL_19;
    v21 = *(_QWORD *)(v34 + 40);
    *(_QWORD *)v25 = v15;
    *(_OWORD *)&v25[8] = xmmword_24D292940;
    Object = paramc_ListenerAdd(v21, "lidvoiceswitch", v25);
    if ((Object & 0x80000000) != 0)
      goto LABEL_19;
    cstdlib_memset(&__b, 0, 0x28uLL);
    *(_QWORD *)&__b = ssftmap_ElemCopyString;
    *((_QWORD *)&__b + 1) = ssftmap_ElemFreeString;
    v30 = stringmap_loc_ElemFreeNoOp_1;
    *(_QWORD *)&v29 = ssftmap_ElemCompareKeysString;
    *((_QWORD *)&v29 + 1) = stringmap_loc_ElemCopyPtr_1;
    v22 = *(_QWORD **)(*v15 + 8);
    *(_OWORD *)v25 = __b;
    *(_OWORD *)&v25[16] = v29;
    v26 = stringmap_loc_ElemFreeNoOp_1;
    Object = ssftmap_ObjOpen(v22, 0, (__int128 *)v25, v15 + 122);
    if ((Object & 0x80000000) != 0)
    {
LABEL_19:
      v5 = Object;
      *(_QWORD *)a5 = v15;
      *(_DWORD *)(a5 + 8) = 62600;
LABEL_20:
      fe_clcml_ObjClose(v15, *(_QWORD *)(a5 + 8));
      *(_QWORD *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      return v5;
    }
    v5 = hlp_activate((unsigned int *)v15);
    *(_QWORD *)a5 = v15;
    *(_DWORD *)(a5 + 8) = 62600;
    if ((v5 & 0x80000000) != 0)
      goto LABEL_20;
  }
  return v5;
}

uint64_t fe_clcml_ParamCheckChange()
{
  return 0;
}

uint64_t fe_clcml_ParamLearnChange(unsigned int *a1, const char *a2)
{
  uint64_t Str;
  uint64_t v5;
  char *__s2;

  __s2 = 0;
  Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"clcpreventhlpactivate", &__s2);
  if ((Str & 0x80000000) != 0)
    return hlp_activate(a1);
  v5 = Str;
  if (cstdlib_strcmp("yes", __s2))
    return hlp_activate(a1);
  if (cstdlib_strcmp("extraesclang", a2) && cstdlib_strcmp("extraesctn", a2))
    paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"clcpreventhlpactivate", "no");
  return v5;
}

uint64_t stringmap_loc_ElemCopyPtr_1(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = a1;
  return 0;
}

uint64_t hlp_activate(unsigned int *a1)
{
  uint64_t Str;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  _BYTE *v27;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  int v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v53;
  uint64_t v54;
  char *__s1;
  char *v56;
  uint64_t v57;
  char *__src;
  char *v59;
  char *v60;
  char *__s;
  _BYTE *v62;
  char __dst[256];
  char v64[256];
  char __s2[256];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  __s = 0;
  v62 = 0;
  v59 = 0;
  v60 = 0;
  v57 = 0;
  __src = 0;
  __s1 = 0;
  v56 = 0;
  Str = 0;
  if ((paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"extclccfg", &v62) & 0x80000000) != 0 || !v62)
    return Str;
  if (!*v62)
    return 0;
  paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"extraesclang", &__s);
  paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"extraesctn", &v60);
  paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"mlset", &v59);
  paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"langcode", &__src);
  paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"fedataprefix", &v57);
  paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"feextcfgdataprefix", &v56);
  if (LH_stricmp(v60, "mpthree") && LH_stricmp(v60, ""))
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_CLCML", 60002, (uint64_t)"%s%s", v3, v4, v5, v6, "extraesctn");
  Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"voiceml", &__s1);
  if ((Str & 0x80000000) == 0 && (!cstdlib_strcmp(__s1, "no") || !cstdlib_strcmp(__s1, "")))
  {
    Str = paramc_ParamGetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"lidvoiceswitch", &__s1);
    if ((Str & 0x80000000) == 0 && !LH_stricmp(__s1, "yes"))
      return 0;
  }
  if (!cstdlib_strcmp(__s, ""))
    goto LABEL_29;
  if ((Str & 0x80000000) == 0)
  {
    cstdlib_strlen(__s);
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      if ((++v12 & 3) != 0)
      {
        v14 = __s[v11];
        if ((v14 & 0xFFFFFFDF) - 91 > 0xFFFFFFE5)
          __s2[v13++] = ssft_tolower(v14);
        else
          log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_CLCML", 60003, (uint64_t)"%s%s", v7, v8, v9, v10, "extraesclang");
      }
      else
      {
        __s2[v13] = 0;
        if (__s[v11] && __s[v11] != 44)
        {
          log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_CLCML", 60003, (uint64_t)"%s%s", v7, v8, v9, v10, "extraesclang");
        }
        else if (!cstdlib_strstr(v59, __s2) || !LH_stricmp(__src, __s2))
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Ignoring language in extraesclang, language=%s", v15, v16, v17, (uint64_t)__s2);
        }
        v13 = 0;
      }
      v11 = v12;
    }
    while (cstdlib_strlen(__s) >= v12);
  }
  v18 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v19 = cstdlib_strlen(__s);
  v20 = (char *)heap_Alloc(v18, (v19 + 5));
  if (!v20)
  {
LABEL_102:
    Str = 2358255626;
    log_OutPublic(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_CLCML", 60000, 0, v21, v22, v23, v24, v53);
    return Str;
  }
  v25 = v20;
  cstdlib_strcpy(v20, __src);
  cstdlib_strcat(v25, ",");
  cstdlib_strcat(v25, __s);
  Str = paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)"lidlanguages", v25);
  heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)v25);
  if ((Str & 0x80000000) == 0)
  {
LABEL_29:
    v26 = (char *)*((_QWORD *)a1 + 123);
    if (v26)
      cstdlib_strcpy(v26, "");
    if (cstdlib_strcmp(__s, "") || cstdlib_strcmp(v60, ""))
    {
      v27 = v62;
      if (*v62)
      {
        while (1)
        {
          v54 = 0;
          v28 = *v27;
          if (v28 == 43)
          {
            v29 = 0;
          }
          else
          {
            v30 = 0;
            v29 = 0;
            while (v28 && v30 <= 0xFE)
            {
              v31 = v30 + 1;
              ++v29;
              __s2[v30] = v28;
              v28 = v27[++v30];
              if (v28 == 43)
              {
                v27 += v31;
                goto LABEL_42;
              }
            }
            v29 = (unsigned __int16)v30;
            v27 += v30;
LABEL_42:
            if (v29 == 255)
              return 0;
          }
          __s2[v29] = 0;
          v32 = v27 + 1;
          if (*v27 != 43)
            v32 = v27;
          v33 = *v32;
          if (v33 == 61)
          {
            v34 = 0;
          }
          else
          {
            v35 = 0;
            v34 = 0;
            while (v33 && v35 <= 0xFE)
            {
              v36 = v35 + 1;
              ++v34;
              v64[v35] = v33;
              v33 = v32[++v35];
              if (v33 == 61)
              {
                v32 += v36;
                goto LABEL_53;
              }
            }
            v34 = (unsigned __int16)v35;
            v32 += v35;
LABEL_53:
            if (v34 == 255)
              return 0;
          }
          v64[v34] = 0;
          if (*v32 == 61)
            v27 = v32 + 1;
          else
            v27 = v32;
          if (v56)
          {
            v37 = (unsigned __int16)cstdlib_strlen(v56);
            cstdlib_strcpy(__dst, v56);
          }
          else
          {
            v37 = 0;
            __dst[0] = 0;
          }
          v38 = *v27;
          if (v38 == 44)
          {
            v39 = v37;
          }
          else
          {
            v39 = v37;
            while (v38 && v37 <= 0xFE)
            {
              __dst[v37] = v38;
              v40 = *++v27;
              v38 = v40;
              ++v37;
              ++v39;
              if (v40 == 44)
                goto LABEL_68;
            }
            v39 = (unsigned __int16)v37;
          }
LABEL_68:
          if (v39 == 255)
            return 0;
          __dst[v39] = 0;
          if (*v27 == 44)
            ++v27;
          if ((!cstdlib_strcmp(__s2, "*")
             || !LH_stricmp(__s2, __src)
             || cstdlib_strstr(v59, __s2) && __s && cstdlib_strstr(__s, __s2))
            && (!cstdlib_strcmp(v64, "*") || v60 && cstdlib_strstr(v60, v64)))
          {
            v41 = (char *)*((_QWORD *)a1 + 123);
            if (!v41)
            {
              v42 = hlp_StringAppend(*(uint64_t **)(*(_QWORD *)a1 + 8), 0, "", a1 + 248);
              *((_QWORD *)a1 + 123) = v42;
              if (!v42)
                goto LABEL_102;
              cstdlib_strcpy(v42, "");
              v41 = (char *)*((_QWORD *)a1 + 123);
            }
            v43 = hlp_StringAppend(*(uint64_t **)(*(_QWORD *)a1 + 8), v41, __s2, a1 + 248);
            *((_QWORD *)a1 + 123) = v43;
            if (!v43)
              goto LABEL_102;
            v44 = hlp_StringAppend(*(uint64_t **)(*(_QWORD *)a1 + 8), v43, "+", a1 + 248);
            *((_QWORD *)a1 + 123) = v44;
            if (!v44)
              goto LABEL_102;
            v45 = hlp_StringAppend(*(uint64_t **)(*(_QWORD *)a1 + 8), v44, v64, a1 + 248);
            *((_QWORD *)a1 + 123) = v45;
            if (!v45)
              goto LABEL_102;
            v46 = hlp_StringAppend(*(uint64_t **)(*(_QWORD *)a1 + 8), v45, "=", a1 + 248);
            *((_QWORD *)a1 + 123) = v46;
            if (!v46)
              goto LABEL_102;
            v47 = hlp_StringAppend(*(uint64_t **)(*(_QWORD *)a1 + 8), v46, __dst, a1 + 248);
            *((_QWORD *)a1 + 123) = v47;
            if (!v47)
              goto LABEL_102;
            v48 = hlp_StringAppend(*(uint64_t **)(*(_QWORD *)a1 + 8), v47, ",", a1 + 248);
            *((_QWORD *)a1 + 123) = v48;
            if (!v48)
              goto LABEL_102;
            if (!*((_QWORD *)a1 + 121))
            {
              v49 = heap_Alloc(*(_QWORD *)(*(_QWORD *)a1 + 8), 1024);
              *((_QWORD *)a1 + 121) = v49;
              if (!v49)
                goto LABEL_102;
            }
            Str = ssftmap_Find(*((_QWORD *)a1 + 122), (uint64_t)__dst, &v54);
            if ((Str & 0x80000000) != 0)
            {
              v50 = clcml_ObjOpen(*((_WORD **)a1 + 1), *((_QWORD *)a1 + 2), __dst, &v54);
              if ((v50 & 0x80000000) != 0)
                return v50;
              v51 = ssftmap_Insert(*((_QWORD *)a1 + 122), (uint64_t)__dst, v54);
LABEL_96:
              Str = v51;
              if ((v51 & 0x80000000) != 0)
                return Str;
            }
          }
          else
          {
            if ((ssftmap_Find(*((_QWORD *)a1 + 122), (uint64_t)__dst, &v54) & 0x80000000) == 0)
            {
              v50 = ssftmap_Remove(*((_QWORD *)a1 + 122), (uint64_t)__dst);
              if ((v50 & 0x80000000) != 0)
                return v50;
              v51 = clcml_ObjClose(v54);
              goto LABEL_96;
            }
            Str = 0;
          }
          if (!*v27)
            return Str;
        }
      }
      return Str;
    }
    return 0;
  }
  return Str;
}

uint64_t fe_clcml_ObjClose(_QWORD *a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;

  result = safeh_HandleCheck((uint64_t)a1, a2, 62600, 1000);
  if ((result & 0x80000000) != 0)
    return 2358255624;
  if (a1)
  {
    v4 = *(_QWORD *)(*a1 + 40);
    v9 = a1;
    v10 = xmmword_24D292940;
    paramc_ListenerRemove(v4, "extraesclang", (__int128 *)&v9);
    v5 = *(_QWORD *)(*a1 + 40);
    v9 = a1;
    v10 = xmmword_24D292940;
    paramc_ListenerRemove(v5, "extraesctn", (__int128 *)&v9);
    v6 = *(_QWORD *)(*a1 + 40);
    v9 = a1;
    v10 = xmmword_24D292940;
    paramc_ListenerRemove(v6, "lidvoiceswitch", (__int128 *)&v9);
    if (a1[122])
    {
      hlp_deactivate((uint64_t)a1);
      ssftmap_ObjClose(a1[122]);
    }
    if (a1[3])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"SYNTHSTREAM");
    if (a1[6])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"FE_DEPES");
    if (a1[9])
      objc_ReleaseObject(*(_QWORD *)(*a1 + 48), (uint64_t)"FE_DCTLKP");
    v7 = a1[121];
    if (v7)
      heap_Free(*(_QWORD **)(*a1 + 8), v7);
    v8 = a1[123];
    if (v8)
      heap_Free(*(_QWORD **)(*a1 + 8), v8);
    heap_Free(*(_QWORD **)(*a1 + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t hlp_deactivate(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v4 = 0;
  result = *(_QWORD *)(a1 + 976);
  if (result)
  {
    result = ssftmap_IteratorOpen(result, 0, 1, (uint64_t)&v4);
    if ((result & 0x80000000) == 0)
    {
      v2 = 0;
      v3 = 0;
      while ((ssftmap_IteratorNext(v4, &v3, &v2) & 0x80000000) == 0)
      {
        clcml_ObjClose(v2);
        ssftmap_IteratorRemove(v4);
      }
      return ssftmap_IteratorClose((uint64_t)v4);
    }
  }
  return result;
}

uint64_t fe_clcml_ObjReopen(unsigned int *a1, int a2)
{
  uint64_t result;
  uint64_t v4;

  result = safeh_HandleCheck((uint64_t)a1, a2, 62600, 1000);
  if ((result & 0x80000000) != 0)
    return 2358255624;
  if (a1)
  {
    hlp_deactivate((uint64_t)a1);
    v4 = *((_QWORD *)a1 + 123);
    if (v4)
    {
      heap_Free(*(_QWORD **)(*(_QWORD *)a1 + 8), v4);
      *((_QWORD *)a1 + 123) = 0;
    }
    return hlp_activate(a1);
  }
  return result;
}

uint64_t fe_clcml_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if ((safeh_HandleCheck(a1, a2, 62600, 1000) & 0x80000000) != 0)
    return 2358255624;
  synstrmaux_InitStreamOpener(a1 + 80, *(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)"FE_CLCML");
  synstrmaux_RegisterInStream((_WORD *)(a1 + 80), (uint64_t)"text/plain;charset=utf-8", 0, a1 + 904);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 80), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    0,
    a1 + 920);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 80), (uint64_t)"text/plain;charset=utf-8", a1 + 936);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 80), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 952);
  v7 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 80), *(_QWORD *)(a1 + 24), a3, a4);
  if ((v7 & 0x80000000) != 0)
    synstrmaux_CloseStreams((_WORD *)(a1 + 80), *(_QWORD *)(a1 + 24));
  return v7;
}

uint64_t fe_clcml_Process(const char **a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  unsigned int v21;
  unsigned int v22;
  char *v23;
  unsigned int v24;
  int v25;
  const char *v26;
  int v27;
  char *v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v33;
  const char *v35;
  int v36;
  char *v37;
  char **v38;
  int v39;
  BOOL v40;
  unsigned int v41;
  BOOL v42;
  const char *v43;
  uint64_t (*v44)(const char *, const char *, const char *, _QWORD);
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  void *v60;
  _DWORD __n[3];
  void *__src;
  _BYTE v63[12];

  v7 = 2358255626;
  memset(v63, 0, sizeof(v63));
  __src = 0;
  memset(__n, 0, sizeof(__n));
  v59 = 0;
  v60 = 0;
  v57 = 0;
  v58 = 0;
  v56 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62600, 1000) & 0x80000000) != 0)
    return 2358255624;
  v55 = 0;
  *a5 = 1;
  result = (*((uint64_t (**)(const char *, const char *, _BYTE *, _BYTE *))a1[3] + 18))(a1[113], a1[114], &v63[8], v63);
  if ((result & 0x80000000) == 0)
  {
    result = (*((uint64_t (**)(const char *, const char *, _BYTE *, _BYTE *))a1[3] + 18))(a1[115], a1[116], &v63[4], v63);
    if ((result & 0x80000000) == 0)
    {
      if (*(_DWORD *)&v63[8])
      {
        v9 = (*((uint64_t (**)(const char *, const char *, void **, _DWORD *))a1[3] + 11))(a1[113], a1[114], &__src, __n);
        if ((v9 & 0x80000000) != 0)
          goto LABEL_81;
        v10 = (char *)heap_Alloc(*((_QWORD *)*a1 + 1), (__n[0] + 1));
        *(_QWORD *)&__n[1] = v10;
        if (v10)
        {
          v15 = v10;
          cstdlib_memcpy(v10, __src, __n[0]);
          v15[__n[0]] = 0;
          v9 = (*((uint64_t (**)(const char *, const char *, void **, char *))a1[3] + 11))(a1[115], a1[116], &v60, (char *)&v57 + 4);
          if ((v9 & 0x80000000) != 0)
            goto LABEL_81;
          v16 = HIDWORD(v57);
          v17 = HIDWORD(v57) >> 5;
          LODWORD(v57) = HIDWORD(v57) >> 5;
          HIDWORD(v57) >>= 5;
          v18 = heap_Calloc(*((_QWORD **)*a1 + 1), 1, v16 & 0xFFFFFFE0);
          v59 = (uint64_t *)v18;
          v19 = *a1;
          if (!v18)
          {
LABEL_23:
            log_OutPublic(*((_QWORD *)v19 + 4), (uint64_t)"FE_CLCML", 60000, 0, v11, v12, v13, v14, v53);
LABEL_82:
            if (*(_QWORD *)&__n[1])
              heap_Free(*((_QWORD **)*a1 + 1), *(uint64_t *)&__n[1]);
            v48 = (uint64_t)v59;
            if (v59)
            {
              v49 = v57;
              if ((_DWORD)v57)
              {
                v50 = 0;
                v51 = v58;
                v52 = v59 + 3;
                do
                {
                  if (v51 && *(_DWORD *)(v51 + 4 * v50) && *v52)
                    heap_Free(*((_QWORD **)*a1 + 1), *v52);
                  ++v50;
                  v52 += 4;
                }
                while (v50 < v49);
              }
              heap_Free(*((_QWORD **)*a1 + 1), v48);
            }
            if (v58)
              heap_Free(*((_QWORD **)*a1 + 1), v58);
            return v7;
          }
          v20 = (char *)v18;
          v58 = heap_Calloc(*((_QWORD **)v19 + 1), 1, 4 * HIDWORD(v57));
          if (v58)
          {
            v54 = *((_DWORD *)v60 + 3);
            cstdlib_memcpy(v20, v60, 32 * HIDWORD(v57));
            v9 = (*((uint64_t (**)(const char *, const char *, int *, _QWORD))a1[6] + 14))(a1[4], a1[5], &v56, 0);
            if ((v9 & 0x80000000) != 0)
              goto LABEL_81;
            if (!a1[123])
              goto LABEL_75;
            if (v16 < 0x20)
            {
              v21 = 0;
              v22 = 0;
              v23 = 0;
              v24 = 0;
              v25 = 0;
              v26 = "normal";
              goto LABEL_67;
            }
            v25 = 0;
            v24 = 0;
            v28 = 0;
            v22 = 0;
            v21 = 0;
            v26 = "normal";
            while (1)
            {
              v29 = *(_DWORD *)&v20[32 * v21];
              v30 = v29 > 0x33;
              v31 = (1 << v29) & 0x8011400200080;
              if (!v30 && v31 != 0)
              {
                v33 = v21;
                v55 = 0;
                if (*(_DWORD *)&v20[32 * v21 + 12] > v24 && v25 == 0)
                {
                  v35 = v28;
                  v36 = hlp_getclcml((uint64_t)a1, v28, v26, &v55);
                  v20 = (char *)v59;
                  if ((v36 & 0x80000000) == 0 && v55)
                  {
                    v9 = hlp_processclcml(a1, v55, (uint64_t *)&__n[1], v24 - v54, HIDWORD(v59[4 * v21 + 1]) - v54, (uint64_t *)&v59, &v58, v22, v21, &v57, v35, v26);
                    if ((v9 & 0x80000000) != 0)
                      goto LABEL_81;
                    if (**(_BYTE **)(v55 + 104))
                      v33 = v21 + 2;
                    else
                      v33 = v21;
                    v20 = (char *)v59;
                    v21 = v33;
                  }
                  v28 = (char *)v35;
                }
                if (*(_DWORD *)&v20[32 * v33] == 51)
                  *(_DWORD *)&v20[32 * v33 + 16] = 0;
                v37 = &v20[32 * v33];
                v24 = *((_DWORD *)v37 + 3);
                v17 = v57;
                if (v21 < v57)
                {
                  v38 = (char **)(v37 + 24);
                  while (1)
                  {
                    if (*((_DWORD *)v38 - 3) != v24)
                    {
                      v21 = v33;
                      break;
                    }
                    v39 = *((_DWORD *)v38 - 6);
                    if (v39 == 7)
                    {
                      if (v25)
                        goto LABEL_54;
                      v25 = 1;
                    }
                    else
                    {
                      if (v39 != 21)
                      {
                        if (v39 == 36)
                        {
                          v25 = 0;
                          v28 = *v38;
                        }
                        else
                        {
                          if (v25)
                            v40 = 0;
                          else
                            v40 = v39 == 34;
                          if (v40)
                            v25 = 1;
                        }
                        goto LABEL_61;
                      }
                      v26 = *v38;
                      if (v25)
LABEL_54:
                        v25 = 0;
                    }
LABEL_61:
                    v38 += 4;
                    if (v57 == ++v33)
                    {
                      v21 = v57;
                      break;
                    }
                  }
                }
                v22 = v21--;
              }
              if (++v21 >= v17)
              {
                v23 = v28;
                v15 = *(const char **)&__n[1];
LABEL_67:
                v55 = 0;
                v41 = cstdlib_strlen(v15);
                v42 = v24 - v54 < v41 && v25 == 0;
                if (!v42
                  || (hlp_getclcml((uint64_t)a1, v23, v26, &v55) & 0x80000000) != 0
                  || !v55
                  || (v9 = hlp_processclcml(a1, v55, (uint64_t *)&__n[1], v24 - v54, v41, (uint64_t *)&v59, &v58, v22, v21, &v57, v23, v26), (v9 & 0x80000000) == 0))
                {
LABEL_75:
                  v43 = *(const char **)&__n[1];
                  if (!cstdlib_strlen(*(const char **)&__n[1])
                    || (v44 = (uint64_t (*)(const char *, const char *, const char *, _QWORD))*((_QWORD *)a1[3] + 13),
                        v45 = cstdlib_strlen(v43),
                        v9 = v44(a1[117], a1[118], v43, (v45 + 1)),
                        (v9 & 0x80000000) == 0))
                  {
                    v9 = (*((uint64_t (**)(const char *, const char *, _QWORD))a1[3] + 12))(a1[113], a1[114], __n[0]);
                    if ((v9 & 0x80000000) == 0)
                    {
                      v9 = (*((uint64_t (**)(const char *, const char *, uint64_t *, _QWORD))a1[3] + 13))(a1[119], a1[120], v59, (32 * v57));
                      if ((v9 & 0x80000000) == 0)
                      {
                        v9 = (*((uint64_t (**)(const char *, const char *, _QWORD))a1[3] + 12))(a1[115], a1[116], (32 * HIDWORD(v57)));
                        if ((v9 & 0x80000000) == 0)
                        {
                          v46 = v56;
                          v47 = cstdlib_strlen(v43);
                          v56 = v46 + v47 - __n[0] + 1;
                          v9 = (*((uint64_t (**)(const char *, const char *))a1[6] + 13))(a1[4], a1[5]);
                        }
                      }
                    }
                  }
                }
LABEL_81:
                v7 = v9;
                goto LABEL_82;
              }
            }
          }
        }
        v19 = *a1;
        goto LABEL_23;
      }
      v27 = *(_DWORD *)v63;
      if (*(_QWORD *)v63)
      {
        if (*(_DWORD *)&v63[4])
        {
          result = (*((uint64_t (**)(const char *, const char *, const char *, const char *, uint64_t, uint64_t *))a1[3]
                    + 16))(a1[119], a1[120], a1[115], a1[116], 0xFFFFFFFFLL, &v57);
          if ((result & 0x80000000) != 0)
            return result;
          v27 = *(_DWORD *)v63;
        }
        if (v27)
          return synstrmaux_CloseOutStreamsOnly((_WORD *)a1 + 40, (uint64_t)a1[3]);
      }
      else
      {
        *a5 = 0;
      }
    }
  }
  return result;
}

uint64_t hlp_getclcml(uint64_t a1, char *a2, const char *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int16 v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int16 v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v36;
  char *i;
  int v38;
  unsigned __int16 v39;
  unint64_t v40;
  char v42[7];
  char __dst[5];
  char v44[256];
  char __s2[2];
  _BYTE v46[254];
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  cstdlib_strcpy(__dst, "_lid");
  cstdlib_strcpy(v42, "normal");
  if (!a2)
    a2 = v42;
  if (cstdlib_strstr(a2, __dst))
  {
    v8 = 0;
    do
    {
      __s2[v8] = ssft_tolower(a2[v8]);
      v9 = v8 + 1;
      v8 = v9;
    }
    while (v9 != 3);
  }
  else if (cstdlib_strlen(a2))
  {
    v28 = 0;
    do
    {
      v29 = v28 + 1;
      __s2[v28] = ssft_tolower(a2[v28]);
      if (cstdlib_strlen(a2) <= v28 + 1)
        break;
      v30 = v28++ >= 0xFE;
    }
    while (!v30);
    LODWORD(v9) = v29;
    if (v29 > 0xFEu)
    {
      v10 = 255;
      goto LABEL_7;
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  v10 = v9 + 1;
  __s2[v9] = 43;
LABEL_7:
  if (cstdlib_strlen(a3) && v10 <= 0xFE)
  {
    v11 = 0;
    v12 = v10;
    v13 = &__s2[v10];
    do
    {
      v13[v11] = ssft_tolower(a3[v11]);
      v14 = v11 + 1;
      if (cstdlib_strlen(a3) <= v11 + 1)
        break;
      v15 = v12 + v11++;
    }
    while (v15 < 0xFE);
    v10 = (unsigned __int16)(v12 + v14);
  }
  __s2[v10] = 0;
  v16 = cstdlib_strstr(*(char **)(a1 + 984), __s2);
  if (cstdlib_strstr(a2, __dst))
  {
    v17 = 0;
    do
    {
      __s2[v17] = ssft_tolower(a2[v17]);
      v18 = v17 + 1;
      v17 = v18;
    }
    while (v18 != 3);
    goto LABEL_16;
  }
  if (!cstdlib_strlen(a2))
  {
    LODWORD(v18) = 0;
LABEL_16:
    __s2[v18] = 43;
LABEL_17:
    v19 = &__s2[v18];
    v20 = (v18 + 2);
    v19[1] = 42;
    goto LABEL_18;
  }
  v31 = 0;
  do
  {
    v32 = v31 + 1;
    __s2[v31] = ssft_tolower(a2[v31]);
    if (cstdlib_strlen(a2) <= v31 + 1)
      break;
    v30 = v31++ >= 0xFE;
  }
  while (!v30);
  LODWORD(v18) = (unsigned __int16)v32;
  if ((unsigned __int16)v32 <= 0xFEu)
  {
    __s2[v32] = 43;
    if ((unsigned __int16)v32 != 254)
      goto LABEL_17;
  }
  v20 = 255;
LABEL_18:
  __s2[v20] = 0;
  v21 = cstdlib_strstr(*(char **)(a1 + 984), __s2);
  if (v21 < v16 || v16 == 0)
    v23 = v21;
  else
    v23 = v16;
  if (v21)
    v16 = v23;
  *(_WORD *)__s2 = 11050;
  if (cstdlib_strlen(a3))
  {
    v24 = 0;
    do
    {
      v46[v24] = ssft_tolower(a3[v24]);
      v25 = v24 + 1;
      if (cstdlib_strlen(a3) <= v24 + 1)
        break;
      v26 = v24 + 2;
      ++v24;
    }
    while (v26 < 0xFE);
    v27 = v25 + 2;
  }
  else
  {
    v27 = 2;
  }
  v33 = 2358255616;
  __s2[v27] = 0;
  v34 = cstdlib_strstr(*(char **)(a1 + 984), __s2);
  if (v34 < v16 || v16 == 0)
    v36 = v34;
  else
    v36 = v16;
  if (!v34)
    v36 = v16;
  if (v36)
  {
    for (i = v36 + 2; *(i - 2); ++i)
    {
      if (*(i - 2) == 61)
      {
        v38 = *(i - 1);
        if (v38 == 44)
        {
          v39 = 0;
        }
        else
        {
          v40 = 0;
          v39 = 0;
          while (v38 && v40 <= 0xFE)
          {
            v44[v40] = v38;
            v38 = i[v40++];
            ++v39;
            if (v38 == 44)
              goto LABEL_70;
          }
          v39 = v40;
        }
LABEL_70:
        v44[v39] = 0;
        return ssftmap_Find(*(_QWORD *)(a1 + 976), (uint64_t)v44, a4);
      }
    }
  }
  return v33;
}

uint64_t hlp_processclcml(const char **a1, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned int a5, uint64_t *a6, uint64_t *a7, unsigned int a8, unsigned int a9, _DWORD *a10, const char *a11, const char *a12)
{
  uint64_t result;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned int v30;
  size_t v31;
  size_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  int v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  int v47;
  unsigned int v48;
  int v49;
  unsigned int NextUtf8Offset;
  int v51;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v66;
  unint64_t v67;
  unsigned int *v68;
  unint64_t v69;
  unsigned __int8 *v70;
  const char *v71;
  size_t v72;
  _BOOL4 v73;
  unsigned __int8 *v74;
  int v75;
  int v76;
  const char *v77;
  size_t v78;
  unsigned __int8 *v79;
  int v80;
  _BOOL4 v81;
  unsigned __int8 *i;
  __int16 v83;
  __int16 v84;
  __int16 v85;
  int v86;
  uint64_t *v87;
  uint64_t v88;
  __int16 v89;
  const char *v90;
  char *v91;
  const char *v92;
  size_t v93;
  uint64_t v94;
  unsigned int v95;
  unint64_t v96;
  _DWORD *v97;
  size_t v98;
  int v99;
  size_t v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int PreviousUtf8Offset;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned __int16 v110;
  unsigned int v111;
  uint64_t v112;
  unsigned int v113;
  unsigned __int16 v114;
  unsigned int v115;
  BOOL v116;
  unsigned __int16 v117;
  unsigned __int16 v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  unsigned int v122;
  char *v123;
  unsigned __int16 v124;
  int v125;
  const char *v126;
  unsigned int v127;
  __int16 v128;
  unsigned __int16 v129;
  uint64_t v130;
  void *v131;
  const void *v132;
  size_t v133;
  unsigned int v134;
  uint64_t v135;
  unsigned int v136;
  unint64_t v137;
  _DWORD *v138;
  _QWORD *v139;
  int v140;
  char *v141;
  char *v142;
  _DWORD *v143;
  int v144;
  uint64_t *v145;
  unsigned __int16 v146;
  uint64_t v147;
  void *v148;
  char *v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  _DWORD *v153;
  unsigned int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  _WORD *v158;
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  uint64_t *v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  _DWORD *v177;
  int v178;
  uint64_t v179;
  unsigned int v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  _DWORD *v185;
  int v186;
  unsigned int v187;
  uint64_t v188;
  int v189;
  _QWORD *v190;
  int v191;
  char *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _DWORD *v201;
  int v202;
  unsigned int v203;
  unint64_t v204;
  char v205;
  uint64_t v206;
  _BOOL4 v207;
  unsigned __int16 v208;
  uint64_t v209;
  unsigned int v210;
  unsigned int v211;
  char *v212;
  char *v213;
  uint64_t *v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  uint64_t v219;
  int v220;
  uint64_t *v221;
  char __dst[20];
  uint64_t v224;

  v224 = *MEMORY[0x24BDAC8D0];
  cstdlib_strcpy(__dst, " ");
  cstdlib_strcat(__dst, "§");
  v218 = cstdlib_strlen(__dst);
  v220 = *(_DWORD *)(*a6 + 12);
  *(_QWORD *)(a2 + 104) = a1[121];
  result = clcml_Process(a2, *a3, a4, a5, a11, a12);
  if ((result & 0x80000000) != 0)
    return result;
  v20 = *(const char **)(a2 + 104);
  a1[121] = v20;
  if (!*v20)
    return result;
  v215 = a4;
  v217 = a8;
  v211 = result;
  v221 = a6;
  v21 = heap_Realloc(*((uint64_t **)*a1 + 1), *a6, 32 * (*a10 + 2));
  v26 = a1;
  if (!v21)
    goto LABEL_228;
  v27 = v21;
  cstdlib_memset((void *)(v21 + 32 * *a10), 0, 32 * ((*a10 + 2) - (unint64_t)*a10));
  *a6 = v27;
  v28 = heap_Realloc(*((uint64_t **)*a1 + 1), *a7, 4 * (*a10 + 2));
  if (!v28)
    goto LABEL_228;
  *a7 = v28;
  v29 = (_QWORD *)*((_QWORD *)*a1 + 1);
  v30 = cstdlib_strlen(a1[121]);
  v31 = cstdlib_strlen("\x14");
  v32 = cstdlib_strlen("EXTCLC");
  v212 = (char *)heap_Calloc(v29, v31 + v30 + v32 + 1, 1);
  if (!v212)
    goto LABEL_228;
  cstdlib_strcpy(v212, a1[121]);
  cstdlib_strcat(v212, "\x14");
  cstdlib_strcat(v212, "EXTCLC");
  v214 = (uint64_t *)a1;
  v33 = v215;
  log_OutText(*((_QWORD *)*a1 + 4), (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Inserting phon marker with transcription %s at position %d", v34, v35, v36, (uint64_t)a1[121]);
  v37 = a10;
  v38 = *a10;
  LODWORD(v39) = v217;
  if (*a10 <= v217)
  {
    v42 = v217;
    v40 = v221;
  }
  else
  {
    v40 = a6;
    v41 = v217 + 1;
    v42 = v217;
    cstdlib_memmove((void *)(*v221 + 32 * v41), (const void *)(*v221 + 32 * v217), 32 * (*a10 - v217));
    cstdlib_memmove((void *)(*a7 + 4 * v41), (const void *)(*a7 + 4 * v217), 4 * (*a10 - v217));
    v37 = a10;
    v38 = *a10;
  }
  v43 = v220;
  *v37 = v38 + 1;
  v44 = *v40 + 32 * v42;
  *(_DWORD *)v44 = 34;
  *(_QWORD *)(v44 + 24) = v212;
  v45 = *v40;
  v46 = (_DWORD *)(*v40 + 32 * v42);
  v46[3] = v220 + v215;
  if (v217)
    v47 = *(_DWORD *)(v45 + 32 * (v217 - 1) + 4);
  else
    v47 = 0;
  v46[1] = v47;
  v46[2] = 0;
  v46[4] = 0;
  v204 = v42;
  *(_DWORD *)(*a7 + 4 * v42) = 1;
  v48 = cstdlib_strlen((const char *)*a3);
  v49 = utf8_BelongsToSet(0, (_BYTE *)*a3, v215, v48);
  NextUtf8Offset = v215;
  if (v215 < a5)
  {
    NextUtf8Offset = v215;
    if (v49)
    {
      NextUtf8Offset = v215;
      do
      {
        NextUtf8Offset = utf8_GetNextUtf8Offset((char *)*a3, NextUtf8Offset);
        v51 = utf8_BelongsToSet(0, (_BYTE *)*a3, NextUtf8Offset, v48);
      }
      while (NextUtf8Offset < a5 && v51 != 0);
    }
  }
  v53 = cstdlib_strlen((const char *)*a3);
  if (NextUtf8Offset < a5)
  {
    v54 = v53;
    v55 = 0;
    LODWORD(v39) = v217;
    do
    {
      if (!utf8_BelongsToSet(0, (_BYTE *)*a3, NextUtf8Offset, v54))
      {
        do
        {
          NextUtf8Offset = utf8_GetNextUtf8Offset((char *)*a3, NextUtf8Offset);
          v56 = utf8_BelongsToSet(0, (_BYTE *)*a3, NextUtf8Offset, v54);
        }
        while (NextUtf8Offset < a5 && v56 == 0);
      }
      if (v39 < *a10)
      {
        v58 = *v40;
        v39 = v39;
        v59 = (_DWORD *)(*v40 + 32 * v39 + 12);
        do
        {
          if (*v59 >= NextUtf8Offset + v220)
            break;
          v60 = *(_QWORD *)(a2 + 528);
          if (!v60)
            break;
          if (v55 >= *(unsigned __int16 *)(a2 + 536) || (v61 = *(_DWORD *)(v60 + 4 * v55) + v215, v61 >= a5))
            v62 = *(_DWORD *)(v58 + 32 * (v39 - 1) + 12);
          else
            v62 = v61 + v220;
          *v59 = v62;
          v59 += 8;
          ++v39;
        }
        while (v39 < *a10);
      }
      v63 = utf8_BelongsToSet(0, (_BYTE *)*a3, NextUtf8Offset, v54);
      if (NextUtf8Offset < a5 && v63)
      {
        do
        {
          NextUtf8Offset = utf8_GetNextUtf8Offset((char *)*a3, NextUtf8Offset);
          v64 = utf8_BelongsToSet(0, (_BYTE *)*a3, NextUtf8Offset, v54);
        }
        while (NextUtf8Offset < a5 && v64 != 0);
      }
      ++v55;
    }
    while (NextUtf8Offset < a5);
  }
  v206 = a9 + 1;
  if (v39 < *a10)
  {
    v66 = v220 + a5;
    v67 = v39;
    v68 = (unsigned int *)(*v40 + 32 * v39 + 12);
    do
    {
      if (*v68 >= v66)
        break;
      *v68 = v66;
      v68 += 8;
      ++v67;
    }
    while (v67 < *a10);
  }
  v69 = *a3 + a5 - 1;
  do
  {
    v70 = (unsigned __int8 *)v69;
    if (v69 <= *a3)
      break;
    --v69;
  }
  while (cstdlib_strchr("_ \r\n\x1B\t", *v70));
  if (cstdlib_strchr("(),;:", *v70))
  {
    v71 = *(const char **)(a2 + 520);
    v72 = cstdlib_strlen(v71);
    v73 = cstdlib_strchr("(),;:", v71[v72 - 1]) == 0;
  }
  else
  {
    v73 = 0;
  }
  v74 = (unsigned __int8 *)(*a3 + a5);
  v75 = *(v74 - 1);
  if (*(v74 - 1))
  {
    while (cstdlib_strchr("_ \r\n\x1B\t", v75))
    {
      v76 = *v74++;
      v75 = v76;
      if (!v76)
        goto LABEL_62;
    }
    if (*(v74 - 1))
    {
      if (cstdlib_strchr("(),;:", *(v74 - 1)))
      {
        v77 = *(const char **)(a2 + 520);
        v78 = cstdlib_strlen(v77);
        if (!cstdlib_strchr("(),;:", v77[v78 - 1]))
          v73 = 1;
      }
    }
  }
LABEL_62:
  v79 = (unsigned __int8 *)(*a3 + v215 - 1);
  do
    v80 = *++v79;
  while (cstdlib_strchr("_ \r\n\x1B\t", v80));
  if (cstdlib_strchr("(),;:", *v79))
  {
    v81 = v73;
    for (i = (unsigned __int8 *)((__PAIR128__((unint64_t)v79, *a3) - (unint64_t)v79) >> 64);
          (unint64_t)i > *a3;
          --i)
    {
      if (!cstdlib_strchr("_ \r\n\x1B\t", *i))
        break;
    }
    if (cstdlib_strchr("(),;:", *i))
    {
      v83 = 1;
    }
    else
    {
      v83 = 0;
      i[1] = 44;
    }
    v73 = v81;
  }
  else
  {
    v83 = 1;
  }
  v84 = v215 - a5 + cstdlib_strlen(*(const char **)(a2 + 520));
  if (v73)
    v85 = 2;
  else
    v85 = 1;
  v86 = (__int16)(v85 + (v83 ^ 1) + v84);
  if (v86 < 1)
  {
    if (!(v85 + ((unsigned __int16)v83 ^ 1) + v84))
      goto LABEL_88;
    v205 = v83;
    v207 = v73;
    v90 = (const char *)*a3;
  }
  else
  {
    v207 = v73;
    v26 = v214;
    v87 = *(uint64_t **)(*v214 + 8);
    v88 = *a3;
    v89 = cstdlib_strlen((const char *)*a3);
    v90 = (const char *)heap_Realloc(v87, v88, (unsigned __int16)(v86 + v89 + 1));
    if (!v90)
      goto LABEL_228;
    v205 = v83;
    *a3 = (uint64_t)v90;
    v43 = v220;
  }
  v91 = (char *)&v90[v86 + a5];
  v92 = &v90[a5];
  v93 = cstdlib_strlen(v90);
  cstdlib_memmove(v91, v92, v93 - a5 + 1);
  v94 = *v221;
  *(_DWORD *)(*v221 + 16) += v86;
  v95 = *a10;
  if (v39 >= *a10)
  {
    a5 += v86;
    v33 = v215;
    v73 = v207;
    LOBYTE(v83) = v205;
  }
  else
  {
    v96 = v39;
    v97 = (_DWORD *)(v94 + 32 * v39 + 12);
    v73 = v207;
    LOBYTE(v83) = v205;
    do
    {
      if (*v97 >= v43 + a5)
      {
        *v97 += v86;
        v95 = *a10;
      }
      ++v96;
      v97 += 8;
    }
    while (v96 < v95);
    a5 += v86;
    v33 = v215;
  }
LABEL_88:
  if ((v83 & 1) == 0)
  {
    *(_BYTE *)(*a3 + v215) = 32;
    ++v33;
  }
  if (cstdlib_strlen(*(const char **)(a2 + 520)))
  {
    v98 = 0;
    v99 = 0;
    do
    {
      *(_BYTE *)(*a3 + v33 + v99) = *(_BYTE *)(*(_QWORD *)(a2 + 520) + v98);
      v98 = (v99 + 1);
      v100 = cstdlib_strlen(*(const char **)(a2 + 520));
      v99 = v98;
    }
    while (v100 > v98);
    if (!v73)
      goto LABEL_95;
  }
  else
  {
    LODWORD(v98) = 0;
    if (!v73)
      goto LABEL_95;
  }
  *(_BYTE *)(*a3 + v98 + v33) = 44;
  LODWORD(v98) = v98 + 1;
LABEL_95:
  *(_BYTE *)(*a3 + v98 + v33) = 32;
  v101 = cstdlib_strlen((const char *)*a3);
  v102 = v33;
  if (utf8_BelongsToSet(1u, (_BYTE *)*a3, v33, v101))
  {
    v102 = v33;
    do
      v102 = utf8_GetNextUtf8Offset((char *)*a3, v102);
    while (utf8_BelongsToSet(1u, (_BYTE *)*a3, v102, v101));
  }
  v216 = v33;
  PreviousUtf8Offset = utf8_GetPreviousUtf8Offset(*a3, a5);
  if (a5)
  {
    v107 = PreviousUtf8Offset;
    v108 = a5;
    if (utf8_BelongsToSet(1u, (_BYTE *)*a3, PreviousUtf8Offset, v101))
    {
      do
      {
        v108 = v107;
        v109 = utf8_GetPreviousUtf8Offset(*a3, v107);
        if (!v107)
          break;
        v107 = v109;
      }
      while (utf8_BelongsToSet(1u, (_BYTE *)*a3, v109, v101));
    }
  }
  else
  {
    v108 = 0;
  }
  v110 = 1;
  if (v102 < v108)
  {
    v111 = v102;
    do
    {
      if (!*(_BYTE *)(*a3 + v111))
        break;
      if (utf8_BelongsToSet(1u, (_BYTE *)*a3, v111, v101))
      {
        ++v110;
        for (; v111 < v108; v111 = utf8_GetNextUtf8Offset((char *)*a3, v111))
        {
          if (!utf8_BelongsToSet(1u, (_BYTE *)*a3, v111, v101))
            break;
        }
      }
      v111 = utf8_GetNextUtf8Offset((char *)*a3, v111);
    }
    while (v111 < v108);
  }
  v210 = v102;
  v112 = v214[121];
  v113 = 1;
  v114 = 1;
  while (1)
  {
    v115 = *(unsigned __int8 *)(v112 + v113 - 1);
    if (v115 > 0x5E)
    {
      if (v115 != 95)
        goto LABEL_125;
LABEL_120:
      ++v114;
      goto LABEL_125;
    }
    if (v115 != 35)
      break;
    if (*(_BYTE *)(v112 + v113))
      goto LABEL_120;
LABEL_125:
    ++v113;
  }
  if (*(_BYTE *)(v112 + v113 - 1))
    v116 = v115 == 18;
  else
    v116 = 1;
  if (!v116)
    goto LABEL_125;
  v117 = v110;
  if (v110 < v114)
  {
    v118 = v114 - v110;
    v26 = v214;
    v119 = (unsigned __int16)(v114 - v117);
    log_OutText(*(_QWORD *)(*v214 + 32), (uint64_t)"FE_CLCML", 5, 0, (uint64_t)"TYPE1 modification : insert %u dummy words (%u orthographic words, %u phonetic words)", v104, v105, v106, v119);
    v120 = *(uint64_t **)(*v214 + 8);
    v121 = *a3;
    v122 = cstdlib_strlen((const char *)*a3);
    v209 = v119 * v218;
    v123 = (char *)heap_Realloc(v120, v121, v209 + v122 + 2);
    if (v123)
    {
      *a3 = (uint64_t)v123;
      if (a5)
        v124 = a5 - 1;
      else
        v124 = 0;
      while (1)
      {
        if ((v123[v124] | 0x20) != 0x20)
        {
          v125 = (*(uint64_t (**)(uint64_t, uint64_t))(v214[9] + 128))(v214[7], v214[8]);
          v123 = (char *)*a3;
          if (!v125)
            break;
        }
        v124 = utf8_GetPreviousUtf8Offset((uint64_t)v123, v124);
        v123 = (char *)*a3;
      }
      v208 = v118;
      v130 = (unsigned __int16)utf8_GetNextUtf8Offset(v123, v124);
      v131 = (void *)(*a3 + (v209 + v130));
      v132 = (const void *)(*a3 + v130);
      v133 = cstdlib_strlen((const char *)*a3);
      cstdlib_memmove(v131, v132, v133 - v130 + 2);
      if ((_DWORD)v119)
      {
        v134 = 0;
        do
        {
          cstdlib_strncpy((char *)(*a3 + v130 + v134), __dst, v218);
          v134 += v218;
          --v119;
        }
        while (v119);
      }
      v135 = *v221;
      *(_DWORD *)(*v221 + 16) += v209;
      v108 += v209;
      v136 = *a10;
      if (*a10 <= v217)
      {
        v26 = v214;
        v126 = a12;
        v129 = v208;
      }
      else
      {
        v137 = v204;
        v138 = (_DWORD *)(v135 + 32 * v204 + 12);
        v26 = v214;
        v126 = a12;
        v129 = v208;
        do
        {
          if (*v138 >= (v130 + v220))
          {
            *v138 += v209;
            v136 = *a10;
          }
          ++v137;
          v138 += 8;
        }
        while (v137 < v136);
      }
      goto LABEL_165;
    }
    goto LABEL_228;
  }
  v126 = a12;
  if (v110 > v114)
  {
    log_OutText(*(_QWORD *)(*v214 + 32), (uint64_t)"FE_CLCML", 5, 0, (uint64_t)"TYPE2 modification : hyphenate words (%u orthographic words, %u phonetic words)", v104, v105, v106, v110);
    v127 = a5 - 1;
    if (a5 != 1)
    {
      v128 = v110 - v114;
      while (*(_BYTE *)(*a3 + v127) == 32)
      {
        v127 = utf8_GetPreviousUtf8Offset(*a3, v127);
        if (!v127)
          goto LABEL_139;
      }
      v26 = v214;
      while (*(_BYTE *)(*a3 + v127) != 32)
      {
        v127 = utf8_GetPreviousUtf8Offset(*a3, v127);
        if (!v127)
          goto LABEL_164;
      }
      if (!v128)
      {
LABEL_164:
        v129 = 0;
        goto LABEL_165;
      }
      do
      {
        while (*(_BYTE *)(*a3 + v127) == 32)
        {
          *(_BYTE *)(*a3 + v127) = 45;
          v127 = utf8_GetPreviousUtf8Offset(*a3, v127);
          if (!v127)
            goto LABEL_139;
        }
        --v128;
        while (*(_BYTE *)(*a3 + v127) != 32)
        {
          v127 = utf8_GetPreviousUtf8Offset(*a3, v127);
          if (!v127)
            goto LABEL_139;
        }
      }
      while (v128);
    }
  }
LABEL_139:
  v129 = 0;
  v26 = v214;
LABEL_165:
  v139 = *(_QWORD **)(*(_QWORD *)v26 + 8);
  v140 = cstdlib_strlen(v126);
  v141 = (char *)heap_Calloc(v139, (v140 + 1), 1);
  if (v141)
  {
    v142 = v141;
    cstdlib_strcpy(v141, a12);
    v143 = a10;
    v144 = *a10;
    v145 = v221;
    if (*a10 > v206)
    {
      v146 = v129;
      v147 = a9 + 2;
      cstdlib_memmove((void *)(*v221 + 32 * v147), (const void *)(*v221 + 32 * v206), 32 * (*a10 - v206));
      v148 = (void *)(*a7 + 4 * v147);
      v129 = v146;
      cstdlib_memmove(v148, (const void *)(*a7 + 4 * v206), 4 * (*a10 - v206));
      v143 = a10;
      v144 = *a10;
    }
    v149 = v212;
    *v143 = v144 + 1;
    v150 = *v221 + 32 * v206;
    *(_DWORD *)v150 = 21;
    *(_QWORD *)(v150 + 24) = v142;
    v151 = v129 * v218;
    v152 = *v221;
    v153 = (_DWORD *)(*v221 + 32 * v206);
    if (v151 + a5 <= v101)
      v154 = a5 + v220 + v151;
    else
      v154 = v220 + v101;
    v153[3] = v154;
    if (a9 == -1)
      v155 = 0;
    else
      v155 = *(_DWORD *)(v152 + 32 * a9 + 4);
    v153[1] = v155;
    v153[2] = 0;
    v153[4] = 0;
    *(_DWORD *)(*a7 + 4 * v206) = 1;
    if (*(_WORD *)(a2 + 260))
    {
      v156 = 0;
      while (1)
      {
        v213 = v149;
        v219 = v156;
        v157 = a2 + 2 * v156;
        v159 = *(unsigned __int16 *)(v157 + 132);
        v158 = (_WORD *)(v157 + 132);
        v160 = v159 ? 3 : 1;
        v26 = v214;
        v161 = heap_Realloc(*(uint64_t **)(*v214 + 8), *v145, 32 * (*v143 + v160));
        if (!v161)
          goto LABEL_228;
        *v221 = v161;
        v162 = heap_Realloc(*(uint64_t **)(*v214 + 8), *a7, 4 * (*a10 + v160));
        if (!v162)
          goto LABEL_228;
        *a7 = v162;
        v163 = cstdlib_strlen((const char *)*a3);
        if (*v158)
        {
          v164 = v163;
          v165 = 0;
          v166 = v210;
          v167 = v221;
          do
          {
            if (utf8_BelongsToSet(1u, (_BYTE *)*a3, v166, v164))
            {
              ++v165;
              for (; v166 < v108; v166 = utf8_GetNextUtf8Offset((char *)*a3, v166))
              {
                if (!utf8_BelongsToSet(1u, (_BYTE *)*a3, v166, v164))
                  break;
              }
            }
            v166 = utf8_GetNextUtf8Offset((char *)*a3, v166);
            v168 = (unsigned __int16)*v158;
          }
          while (v165 < v168);
        }
        else
        {
          v168 = 0;
          v166 = v210;
          v167 = v221;
        }
        if (v166 > v216)
        {
          v166 = utf8_GetPreviousUtf8Offset(*a3, v166);
          v168 = (unsigned __int16)*v158;
        }
        LODWORD(v169) = v217;
        v170 = *v167;
        v171 = v166 + v220;
        if (v168)
        {
          LODWORD(v169) = v217 - 1;
          do
            v169 = (v169 + 1);
          while (*(_DWORD *)(v170 + 32 * v169 + 12) + 1 < v171);
          v26 = v214;
          v172 = (char *)heap_Calloc(*(_QWORD **)(*v214 + 8), 7, 1);
          if (!v172)
            goto LABEL_228;
          v173 = v172;
          v174 = (v169 + 1);
          cstdlib_strcpy(v172, "normal");
          cstdlib_memmove((void *)(*v221 + 32 * v174), (const void *)(*v221 + 32 * v169), 32 * (*a10 - v169));
          cstdlib_memmove((void *)(*a7 + 4 * v174), (const void *)(*a7 + 4 * v169), 4 * (*a10 - v169));
          ++*a10;
          v175 = *v221 + 32 * v169;
          *(_DWORD *)v175 = 21;
          *(_QWORD *)(v175 + 24) = v173;
          if (v166)
            v176 = v220 - 1 + v166;
          else
            v176 = v220;
          v170 = *v221;
          v177 = (_DWORD *)(*v221 + 32 * v169);
          v177[3] = v176;
          if ((_DWORD)v169)
            v178 = *(_DWORD *)(v170 + 32 * (v169 - 1) + 4);
          else
            v178 = 0;
          v177[1] = v178;
          v177[2] = 0;
          v177[4] = 0;
          *(_DWORD *)(*a7 + 4 * v169) = 1;
          LODWORD(v169) = v169 + 1;
        }
        do
        {
          v179 = v169;
          v180 = *(_DWORD *)(v170 + 32 * v169 + 12);
          v169 = (v169 + 1);
        }
        while (v180 < v171);
        v26 = v214;
        v181 = (char *)heap_Calloc(*(_QWORD **)(*v214 + 8), 4, 1);
        if (!v181)
          goto LABEL_228;
        v182 = v181;
        cstdlib_strcpy(v181, (const char *)(a2 + 4 * v219 + 262));
        cstdlib_memmove((void *)(*v221 + 32 * v169), (const void *)(*v221 + 32 * v179), 32 * (*a10 - v169 + 1));
        cstdlib_memmove((void *)(*a7 + 4 * v169), (const void *)(*a7 + 4 * v179), 4 * (*a10 - v169 + 1));
        v143 = a10;
        ++*a10;
        v183 = *v221 + 32 * v179;
        *(_DWORD *)v183 = 36;
        *(_QWORD *)(v183 + 24) = v182;
        v184 = *v221;
        v185 = (_DWORD *)(*v221 + 32 * v179);
        v185[3] = v171;
        if ((_DWORD)v169 == 1)
          v186 = 0;
        else
          v186 = *(_DWORD *)(v184 + 32 * (v169 - 2) + 4);
        v149 = v213;
        v185[1] = v186;
        v185[2] = 0;
        v185[4] = 0;
        *(_DWORD *)(*a7 + 4 * v179) = 1;
        if (*v158)
        {
          if (v219)
            v187 = *(unsigned __int16 *)(a2 + 2 * (v219 - 1) + 132);
          else
            v187 = 0;
          if (v187 >= (unsigned __int16)*v158)
          {
            v188 = 0;
          }
          else
          {
            v188 = 0;
            do
            {
              v189 = v213[v188];
              if (v189 == 95 || v189 == 35)
                ++v187;
              v188 = (unsigned __int16)utf8_GetNextUtf8Offset(v213, (unsigned __int16)v188);
            }
            while (v187 < (unsigned __int16)*v158);
          }
          v26 = v214;
          v190 = *(_QWORD **)(*v214 + 8);
          v191 = cstdlib_strlen(&v213[v188]);
          v192 = (char *)heap_Calloc(v190, (v191 + 1), 1);
          if (!v192)
            goto LABEL_228;
          v193 = v192;
          cstdlib_strcpy(v192, &v213[v188]);
          v194 = &v213[(unsigned __int16)utf8_GetPreviousUtf8Offset((uint64_t)v213, v188)];
          cstdlib_memcpy(v194, "\x14", 2uLL);
          cstdlib_strcat(v194, "EXTCLC");
          log_OutText(*(_QWORD *)(*v214 + 32), (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Inserting phon marker with transcription %s at position %d", v195, v196, v197, v214[121]);
          v198 = (v169 + 1);
          cstdlib_memmove((void *)(*v221 + 32 * v198), (const void *)(*v221 + 32 * v169), 32 * (*a10 - v169));
          cstdlib_memmove((void *)(*a7 + 4 * v198), (const void *)(*a7 + 4 * v169), 4 * (*a10 - v169));
          v143 = a10;
          ++*a10;
          v199 = *v221 + 32 * v169;
          *(_DWORD *)v199 = 34;
          *(_QWORD *)(v199 + 24) = v193;
          v200 = *v221;
          v201 = (_DWORD *)(*v221 + 32 * v169);
          v201[3] = v171;
          if ((_DWORD)v169)
            v202 = *(_DWORD *)(v200 + 32 * v179 + 4);
          else
            v202 = 0;
          v201[1] = v202;
          v201[2] = 0;
          v201[4] = 0;
          *(_DWORD *)(*a7 + 4 * v169) = 1;
          v217 = v169 + 1;
          v149 = v193;
        }
        else
        {
          v217 = v169 + 1;
        }
        v145 = v221;
        v156 = v219 + 1;
        if (v219 + 1 >= (unint64_t)*(unsigned __int16 *)(a2 + 260))
          return v211;
      }
    }
    return v211;
  }
  else
  {
LABEL_228:
    log_OutPublic(*(_QWORD *)(*(_QWORD *)v26 + 32), (uint64_t)"FE_CLCML", 60000, 0, v22, v23, v24, v25, v203);
    return 2358255626;
  }
}

uint64_t fe_clcml_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 62600, 1000) & 0x80000000) != 0)
    return 2358255624;
  else
    return synstrmaux_CloseStreams((_WORD *)(a1 + 80), *(_QWORD *)(a1 + 24));
}

uint64_t fe_clcml_GetInterface(unsigned int a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 > 1)
    return 2358255617;
  result = 0;
  *a2 = &IFeClcml;
  return result;
}

char *hlp_StringAppend(uint64_t *a1, char *a2, char *__s, unsigned int *a4)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;

  if (!__s)
    return a2;
  v8 = cstdlib_strlen(__s);
  v9 = v8;
  if (!a2)
  {
    v12 = v8 + 129;
    v13 = (char *)heap_Alloc((uint64_t)a1, v8 + 129);
    a2 = v13;
    if (!v13)
      return a2;
    if (a4)
      *a4 = v12;
    v10 = 0;
    *v13 = 0;
LABEL_11:
    cstdlib_strncat(a2, __s, v9);
    a2[v10 + v9] = 0;
    return a2;
  }
  if (!a4)
    return 0;
  v10 = cstdlib_strlen(a2);
  if (v9 + v10 + 1 < *a4)
    goto LABEL_11;
  v11 = v9 + *a4 + 129;
  *a4 = v11;
  a2 = (char *)heap_Realloc(a1, (uint64_t)a2, v11);
  if (a2)
    goto LABEL_11;
  return a2;
}

char *clcpipeline_loc_StrDup(uint64_t a1, char *__s)
{
  int v4;
  char *v5;
  char *v6;

  v4 = cstdlib_strlen(__s);
  v5 = (char *)heap_Alloc(a1, (v4 + 1));
  v6 = v5;
  if (v5)
    cstdlib_strcpy(v5, __s);
  return v6;
}

char *clcpipeline_loc_StrDupA(uint64_t a1, char *__s)
{
  int v4;
  char *v5;
  char *v6;

  v4 = cstdlib_strlen(__s);
  v5 = (char *)heap_Alloc(a1, (v4 + 1));
  v6 = v5;
  if (v5)
    cstdlib_strcpy(v5, __s);
  return v6;
}

uint64_t clcpipeline_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t ReadOnly;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 i;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t Object;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t NullHandle;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t *v80;
  uint64_t *v81;
  char *v82;
  uint64_t *v83;
  uint64_t v84;
  int v85[2];
  char *__s1;
  uint64_t *v87;

  v87 = 0;
  *(_QWORD *)v85 = 0;
  __s1 = 0;
  v83 = 0;
  v84 = 0;
  inited = InitRsrcFunction(a1, a2, v85);
  if ((inited & 0x80000000) != 0)
    return inited;
  *a5 = 0;
  *a6 = 0;
  if ((ssftmap_FindReadOnly(a3, (uint64_t)"BROKERSTRING", &v87) & 0x80000000) != 0)
    return 2358255623;
  if (!*v87)
    return 2358255623;
  log_OutText(*(_QWORD *)(*(_QWORD *)v85 + 32), (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"clcpipeline_ObjOpen : Begin %s", v13, v14, v15, *v87);
  v16 = (_QWORD *)heap_Calloc(*(_QWORD **)(*(_QWORD *)v85 + 8), 1, 48);
  v21 = (uint64_t)v16;
  if (!v16)
  {
    log_OutPublic(*(_QWORD *)(*(_QWORD *)v85 + 32), (uint64_t)"FE_CLCML", 16000, 0, v17, v18, v19, v20, v79);
    v62 = 2358255626;
    goto LABEL_82;
  }
  v81 = a5;
  v22 = 0;
  *v16 = *(_QWORD *)v85;
  v80 = v16 + 3;
  v23 = 1;
  do
  {
    ReadOnly = ssftmap_FindReadOnly(a3, (uint64_t)"COMPONENTS", &v87);
    if ((ReadOnly & 0x80000000) != 0
      || (ReadOnly = ssftmap_IteratorOpen(v87[2], 0, 0, (uint64_t)&v83), (ReadOnly & 0x80000000) != 0))
    {
      v62 = ReadOnly;
      v84 = v22;
      log_OutPublic(*(_QWORD *)(*(_QWORD *)v85 + 32), (uint64_t)"FE_CLCML", 16072, (uint64_t)"%s%s", v25, v26, v27, v28, "clcpipeline");
      goto LABEL_81;
    }
    for (i = 0; (ssftmap_IteratorNext(v83, &__s1, &v87) & 0x80000000) == 0; ++i)
    {
      if (v23 == 1)
      {
        if (!__s1 || cstdlib_strcmp(__s1, "COMPONENT"))
        {
          v84 = v22;
          log_OutPublic(*(_QWORD *)(*(_QWORD *)v85 + 32), (uint64_t)"FE_CLCML", 16091, (uint64_t)"%s%s%s%s", v29, v30, v31, v32, "clcpipeline");
          goto LABEL_80;
        }
        if (!*v87 || !*(_BYTE *)*v87)
        {
          v84 = v22;
          log_OutPublic(*(_QWORD *)(*(_QWORD *)v85 + 32), (uint64_t)"FE_CLCML", 16092, (uint64_t)"%s%s", v29, v30, v31, v32, "clcpipeline");
          goto LABEL_80;
        }
      }
      else
      {
        v34 = clcpipeline_PrepareForOpeningComponent(*(uint64_t **)v85, i, (char *)*v87, (_QWORD *)v21);
        if ((v34 & 0x80000000) != 0)
        {
          v62 = v34;
          v84 = v22;
          goto LABEL_81;
        }
      }
    }
    ssftmap_IteratorClose((uint64_t)v83);
    v83 = 0;
    if (v23 == 1)
    {
      v41 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v85 + 8), i, 8);
      *(_QWORD *)(v21 + 8) = v41;
      if (v41)
      {
        *(_WORD *)(v21 + 16) = i;
        v46 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v85 + 8), i, 16);
        if (v46)
        {
          v22 = v46;
          if (log_GetLogLevel(*(_QWORD *)(*(_QWORD *)v85 + 32)) >= 2)
          {
            compstats_ObjOpen(a1, a2, *(unsigned __int16 *)(v21 + 16) + 3, (uint64_t)v80);
            compstats_Start(*(_QWORD *)(v21 + 24), *(_QWORD *)(v21 + 32), 0, v47, v48, v49, v50, v51);
            if (*(_QWORD *)(v21 + 24))
            {
              v52 = heap_Calloc(*(_QWORD **)(*(_QWORD *)v85 + 8), *(unsigned __int16 *)(v21 + 16) + 3, 8);
              *(_QWORD *)(v21 + 40) = v52;
              if (v52)
              {
                **(_QWORD **)(v21 + 40) = clcpipeline_loc_StrDup(*(_QWORD *)(*(_QWORD *)v85 + 8), "Total");
                *(_QWORD *)(*(_QWORD *)(v21 + 40) + 8) = clcpipeline_loc_StrDup(*(_QWORD *)(*(_QWORD *)v85 + 8), "TTSEG input CB");
                *(_QWORD *)(*(_QWORD *)(v21 + 40) + 8 * *(unsigned __int16 *)(v21 + 16) + 16) = clcpipeline_loc_StrDup(*(_QWORD *)(*(_QWORD *)v85 + 8), "TTSEG output CB");
              }
              else
              {
                compstats_ObjClose(*(_QWORD *)(v21 + 24), *(_QWORD *)(v21 + 32));
                *(_QWORD *)(v21 + 24) = safeh_GetNullHandle();
                *(_QWORD *)(v21 + 32) = v53;
              }
            }
          }
          continue;
        }
        v84 = 0;
      }
      else
      {
        v84 = v22;
      }
      log_OutPublic(*(_QWORD *)(*(_QWORD *)v85 + 32), (uint64_t)"FE_CLCML", 16000, 0, v42, v43, v44, v45, v79);
      v62 = 2358255626;
      goto LABEL_81;
    }
  }
  while (v23++ < 2);
  v84 = v22;
  a5 = v81;
  if ((ssftmap_FindReadOnly(a3, (uint64_t)"PARAMETERS", &v87) & 0x80000000) == 0
    && (ssftmap_IteratorOpen(v87[2], 0, 0, (uint64_t)&v83) & 0x80000000) == 0)
  {
    while ((ssftmap_IteratorNext(v83, &__s1, &v87) & 0x80000000) == 0)
    {
      if (__s1 && *__s1)
      {
        if (*v87)
          v55 = (char *)*v87;
        else
          v55 = "";
        paramc_ParamSetStr(*(_QWORD *)(*(_QWORD *)v85 + 40), (uint64_t)__s1, v55);
      }
    }
    ssftmap_IteratorClose((uint64_t)v83);
    v83 = 0;
  }
  if ((ssftmap_FindReadOnly(a3, (uint64_t)"OBJECTS", &v87) & 0x80000000) == 0
    && (ssftmap_IteratorOpen(v87[2], 0, 0, (uint64_t)&v83) & 0x80000000) == 0)
  {
    if ((ssftmap_IteratorNext(v83, &__s1, &v87) & 0x80000000) == 0)
    {
      while (__s1 && *v87 && *(_BYTE *)*v87)
      {
        if (cstdlib_strcmp(__s1, "INET"))
        {
          Object = clcpipeline_LoadObject(a1, a2, (uint64_t)__s1, *v87, a4, a6);
          if ((Object & 0x80000000) != 0)
            goto LABEL_97;
          if (!cstdlib_strcmp(__s1, "FE_DCTLKP") && !cstdlib_strcmp((const char *)*v87, "fe/fe_dctlkp"))
          {
            Object = clcpipeline_LoadObject(a1, a2, (uint64_t)"FE_NN", (uint64_t)"fe/fe_nn", a4, a6);
            if ((Object & 0x80000000) != 0)
              goto LABEL_97;
          }
        }
        if ((ssftmap_IteratorNext(v83, &__s1, &v87) & 0x80000000) != 0)
          goto LABEL_50;
      }
      log_OutPublic(*(_QWORD *)(*(_QWORD *)v85 + 32), (uint64_t)"FE_CLCML", 16099, (uint64_t)"%s%s%s%s", v56, v57, v58, v59, "clcpipeline");
LABEL_80:
      v62 = 2358255620;
      goto LABEL_81;
    }
LABEL_50:
    Object = clcpipeline_LoadObject(a1, a2, (uint64_t)"CLMOBJECT", (uint64_t)"clmobjectinterface", a4, a6);
    if ((Object & 0x80000000) != 0)
    {
LABEL_97:
      v62 = Object;
      goto LABEL_81;
    }
    ssftmap_IteratorClose((uint64_t)v83);
    v83 = 0;
    a5 = v81;
  }
  v61 = clcpipeline_silently_add_fe_clm_component(*(uint64_t *)v85, v21, &v84);
  if ((v61 & 0x80000000) != 0)
  {
    v62 = v61;
    goto LABEL_82;
  }
  v62 = clcpipeline_disclose_location_of_fe_clm_component(*(uint64_t *)v85, v21);
  if ((v62 & 0x80000000) != 0)
  {
LABEL_82:
    if (v83)
      ssftmap_IteratorClose((uint64_t)v83);
  }
  else
  {
    v63 = *(unsigned __int16 *)(v21 + 16);
    if (*(_WORD *)(v21 + 16))
    {
      v64 = 0;
      v65 = (_QWORD *)(v84 + 8);
      while (2)
      {
        v66 = *(uint64_t **)(*(_QWORD *)(v21 + 8) + 8 * v64);
        if (!v66)
          goto LABEL_68;
        if (*v80)
          compstats_Start(*v80, *(_QWORD *)(v21 + 32), (v64 + 2), v36, v37, v38, v39, v40);
        NullHandle = safeh_GetNullHandle();
        if (safeh_HandlesEqual(v66[3], v66[4], NullHandle, v68))
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)v85 + 32), (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Open component: %s", v38, v39, v40, v66[1]);
          v69 = (*(uint64_t (**)(_QWORD, _QWORD, _WORD *, uint64_t, uint64_t *))(v66[2] + 32))(*(v65 - 1), *v65, a1, a2, v66 + 3);
          goto LABEL_63;
        }
        if (*(_QWORD *)(v66[2] + 48))
        {
          log_OutText(*(_QWORD *)(*(_QWORD *)v85 + 32), (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"Reopen component: %s", v38, v39, v40, v66[1]);
          *a6 = 1;
          v69 = (*(uint64_t (**)(uint64_t, uint64_t))(v66[2] + 48))(v66[3], v66[4]);
LABEL_63:
          v62 = v69;
        }
        if (*v80)
          compstats_Stop(*v80, *(_QWORD *)(v21 + 32), (v64 + 2), v36, v37, v38, v39, v40);
        if ((v62 & 0x80000000) != 0)
        {
          log_OutPublic(*(_QWORD *)(*(_QWORD *)v85 + 32), (uint64_t)"FE_CLCML", 16001, (uint64_t)"%s%s%s%x", v37, v38, v39, v40, "component");
LABEL_81:
          a5 = v81;
          goto LABEL_82;
        }
        v63 = *(unsigned __int16 *)(v21 + 16);
LABEL_68:
        ++v64;
        v65 += 2;
        if (v64 >= v63)
          break;
        continue;
      }
    }
    v70 = ssftmap_FindReadOnly(a3, (uint64_t)"RESOURCES", &v87);
    if ((v70 & 0x80000000) != 0)
    {
      v62 = v70;
      a5 = v81;
      goto LABEL_99;
    }
    v62 = ssftmap_IteratorOpen(v87[2], 0, 0, (uint64_t)&v83);
    v71 = v62;
    a5 = v81;
    if ((v62 & 0x80000000) != 0)
    {
LABEL_99:
      v71 = 0;
      if ((v62 & 0x1FFF) != 0x14 && (v62 & 0x1FFF) != 0xD)
        goto LABEL_82;
    }
    v82 = 0;
    while ((ssftmap_IteratorNext(v83, &__s1, &v87) & 0x80000000) == 0)
    {
      if (__s1 && !cstdlib_strcmp(__s1, "RESOURCE"))
      {
        if (*v87 && *(_BYTE *)*v87)
        {
          v78 = v87[1];
          if (v78 && (ssftmap_FindReadOnly(v78, (uint64_t)"content-type", &v82) & 0x80000000) == 0 && v82 && *v82)
          {
            log_OutText(*(_QWORD *)(*(_QWORD *)v85 + 32), (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"ResourceLoad: %s, %s", v75, v76, v77, *v87);
            clcpipeline_ResourceLoad((uint64_t *)v21, 1, v82, (const char *)*v87, 0, 0, 0);
          }
          else
          {
            log_OutPublic(*(_QWORD *)(*(_QWORD *)v85 + 32), (uint64_t)"FE_CLCML", 16095, (uint64_t)"%s%s", v74, v75, v76, v77, "clcpipeline");
            v71 = 2358255620;
          }
        }
        else
        {
          log_OutPublic(*(_QWORD *)(*(_QWORD *)v85 + 32), (uint64_t)"FE_CLCML", 16094, (uint64_t)"%s%s", v74, v75, v76, v77, "clcpipeline");
        }
      }
      else
      {
        log_OutPublic(*(_QWORD *)(*(_QWORD *)v85 + 32), (uint64_t)"FE_CLCML", 16093, (uint64_t)"%s%s%s%s", v74, v75, v76, v77, "clcpipeline");
      }
    }
    ssftmap_IteratorClose((uint64_t)v83);
    v83 = 0;
    if (*v80)
    {
      a5 = v81;
      if (*(_QWORD *)(v21 + 40))
      {
        compstats_Stop(*v80, *(_QWORD *)(v21 + 32), 0, v36, v37, v38, v39, v40);
        compstats_Log(*(_QWORD *)(v21 + 24), *(_QWORD *)(v21 + 32), *(_QWORD *)(*(_QWORD *)v85 + 32), "Pipeline Open", *(_QWORD *)(v21 + 40), 0, 0);
      }
      v62 = v71;
      goto LABEL_82;
    }
    v62 = v71;
    a5 = v81;
  }
  v72 = v84;
  if (v84)
    heap_Free(*(_QWORD **)(*(_QWORD *)v85 + 8), v84);
  if ((v62 & 0x80000000) != 0)
  {
    if (v21)
      clcpipeline_ObjClose(v21, v72, v35, v36, v37, v38, v39, v40);
  }
  else
  {
    *a5 = v21;
  }
  log_OutText(*(_QWORD *)(*(_QWORD *)v85 + 32), (uint64_t)"FE_CLCML", 4, 0, (uint64_t)"clcpipeline_ObjOpen : End (%x)", v38, v39, v40, v62);
  return v62;
}

uint64_t clcpipeline_PrepareForOpeningComponent(uint64_t *a1, unsigned int a2, char *__s, _QWORD *a4)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v36;

  if (a4[3])
  {
    v8 = clcpipeline_loc_StrDup(a1[1], __s);
    v9 = a2 + 2;
    *(_QWORD *)(a4[5] + 8 * v9) = v8;
    compstats_Start(a4[3], a4[4], v9, v10, v11, v12, v13, v14);
  }
  v15 = (_WORD *)heap_Calloc((_QWORD *)a1[1], 1, 40);
  if (!v15)
  {
    v32 = 2358255626;
    log_OutPublic(a1[4], (uint64_t)"FE_CLCML", 16000, 0, v16, v17, v18, v19, v36);
    return v32;
  }
  v20 = v15;
  *(_QWORD *)(a4[1] + 8 * a2) = v15;
  *v15 = 1;
  v21 = clcpipeline_loc_StrDupA(a1[1], __s);
  v20[1] = v21;
  if (v21)
  {
    v20[3] = safeh_GetNullHandle();
    v20[4] = v26;
    v32 = brk_InterfaceQuery(a1[3]);
    if ((v32 & 0x80000000) == 0)
    {
      v33 = a4[3];
      if (v33)
        compstats_Stop(v33, a4[4], a2 + 2, v27, v28, v29, v30, v31);
      return v32;
    }
  }
  else
  {
    v32 = 2358255626;
    log_OutPublic(a1[4], (uint64_t)"FE_CLCML", 16000, 0, v22, v23, v24, v25, v36);
  }
  v34 = v20[1];
  if (v34)
    heap_Free((_QWORD *)a1[1], v34);
  heap_Free((_QWORD *)a1[1], (uint64_t)v20);
  *(_QWORD *)(a4[1] + 8 * a2) = 0;
  return v32;
}

